{"buggy_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Mantis Database installation process\n *\n * @package MantisBT\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\nerror_reporting( E_ALL );\n@set_time_limit( 0 );\n\n# Load the MantisDB core in maintenance mode. This mode will assume that\n# config/config_inc.php hasn't been specified. Thus the database will not be opened\n# and plugins will not be loaded.\ndefine( 'MANTIS_MAINTENANCE_MODE', true );\n\nrequire_once( dirname( dirname( __FILE__ ) ) . '/core.php' );\nrequire_api( 'install_helper_functions_api.php' );\nrequire_api( 'crypto_api.php' );\n$g_error_send_page_header = false; # bypass page headers in error handler\n\n$g_failed = false;\n$g_database_upgrade = false;\n\n/**\n * Print Test result\n *\n * @param integer $p_result    Result - BAD|GOOD.\n * @param boolean $p_hard_fail Fail installation or soft warning.\n * @param string  $p_message   Message to display to user.\n * @return void\n */\nfunction print_test_result( $p_result, $p_hard_fail = true, $p_message = '' ) {\n\tglobal $g_failed;\n\techo '<td ';\n\tif( BAD == $p_result ) {\n\t\tif( $p_hard_fail ) {\n\t\t\t$g_failed = true;\n\t\t\techo 'bgcolor=\"red\">BAD';\n\t\t} else {\n\t\t\techo 'bgcolor=\"pink\">POSSIBLE PROBLEM';\n\t\t}\n\t\tif( '' != $p_message ) {\n\t\t\techo '<br />' . $p_message;\n\t\t}\n\t}\n\n\tif( GOOD == $p_result ) {\n\t\techo 'bgcolor=\"green\">GOOD';\n\t}\n\techo '</td>';\n}\n\n/**\n * Print Test result\n *\n * @param string  $p_test_description Test Description.\n * @param integer $p_result           Result - BAD|GOOD.\n * @param boolean $p_hard_fail        Fail installation or soft warning.\n * @param string  $p_message          Message to display to user.\n * @return void\n */\nfunction print_test( $p_test_description, $p_result, $p_hard_fail = true, $p_message = '' ) {\n\techo '<tr><td bgcolor=\"#ffffff\">' . $p_test_description . '</td>';\n\tprint_test_result( $p_result, $p_hard_fail, $p_message );\n\techo '</tr>' . \"\\n\";\n}\n\n# install_state\n#   0 = no checks done\n#   1 = server ok, get database information\n#   2 = check the database information\n#   3 = install the database\n#   4 = get additional config file information\n#   5 = write the config file\n#\t6 = post install checks\n#\t7 = done, link to login or db updater\n$t_install_state = gpc_get_int( 'install', 0 );\n\nhtml_begin();\nhtml_head_begin();\nhtml_css_link( 'admin.css' );\nhtml_content_type();\nhtml_title( 'Administration - Installation' );\nhtml_javascript_link( 'jquery-' . JQUERY_VERSION . '.min.js' );\nhtml_javascript_link( 'install.js' );\nhtml_head_end();\n?>\n\n<body>\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">\n\t<tr class=\"top-bar\">\n\t\t<td class=\"links\">\n\t\t\t[ <a href=\"index.php\">Back to Administration</a> ]\n\t\t</td>\n\t\t<td class=\"title\">\n\t\t<?php\nswitch( $t_install_state ) {\n\tcase 7:\n\t\techo 'Installation Complete';\n\t\tbreak;\n\tcase 6:\n\t\techo 'Post Installation Checks';\n\t\tbreak;\n\tcase 5:\n\t\techo 'Install Configuration File';\n\t\tbreak;\n\tcase 4:\n\t\techo 'Additional Configuration Information';\n\t\tbreak;\n\tcase 3:\n\t\techo 'Install Database';\n\t\tbreak;\n\tcase 2:\n\t\techo 'Check and Install Database';\n\t\tbreak;\n\tcase 1:\n\t\techo 'Database Parameters';\n\t\tbreak;\n\tcase 0:\n\tdefault:\n\t\t$t_install_state = 0;\n\t\techo 'Pre-Installation Check';\n\t\tbreak;\n}\n?>\n\t\t</td>\n\t</tr>\n</table>\n<br /><br />\n\n<?php\n# installation checks table header is valid both for pre-install and\n# database installation steps\nif( 0 == $t_install_state || 2 == $t_install_state ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Checking Installation</span>\n\t</td>\n</tr>\n<?php\n}\n\n$t_config_filename = $g_config_path . 'config_inc.php';\n$t_config_exists = file_exists( $t_config_filename );\n\n# Initialize Oracle-specific values for prefix and suffix, and set\n# values for other db's as per config defaults\n$t_prefix_defaults = array(\n\t'oci8' => array(\n\t\t'db_table_prefix'        => 'm',\n\t\t'db_table_plugin_prefix' => 'plg',\n\t\t'db_table_suffix'        => '',\n\t) ,\n);\nforeach( $t_prefix_defaults['oci8'] as $t_key => $t_value ) {\n\t$t_prefix_defaults['other'][$t_key] = config_get( $t_key, '' );\n}\n\nif( $t_config_exists && $t_install_state <= 1 ) {\n\t# config already exists - probably an upgrade\n\t$f_dsn                    = config_get( 'dsn', '' );\n\t$f_hostname               = config_get( 'hostname', '' );\n\t$f_db_type                = config_get( 'db_type', '' );\n\t$f_database_name          = config_get( 'database_name', '' );\n\t$f_db_schema              = config_get( 'db_schema', '' );\n\t$f_db_username            = config_get( 'db_username', '' );\n\t$f_db_password            = config_get( 'db_password', '' );\n\t$f_timezone               = config_get( 'default_timezone', '' );\n\n\t# Set default prefix/suffix form variables ($f_db_table_XXX)\n\t$t_prefix_type = 'other';\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\t${'f_' . $t_key} = $t_value;\n\t}\n} else {\n\t# read control variables with defaults\n\t$f_dsn                = gpc_get( 'dsn', config_get( 'dsn', '' ) );\n\t$f_hostname           = gpc_get( 'hostname', config_get( 'hostname', 'localhost' ) );\n\t$f_db_type            = gpc_get( 'db_type', config_get( 'db_type', '' ) );\n\t$f_database_name      = gpc_get( 'database_name', config_get( 'database_name', 'bugtracker' ) );\n\t$f_db_schema          = gpc_get( 'db_schema', config_get( 'db_schema', '' ) );\n\t$f_db_username        = gpc_get( 'db_username', config_get( 'db_username', '' ) );\n\t$f_db_password        = gpc_get( 'db_password', config_get( 'db_password', '' ) );\n\tif( CONFIGURED_PASSWORD == $f_db_password ) {\n\t\t$f_db_password = config_get( 'db_password' );\n\t}\n\t$f_timezone           = gpc_get( 'timezone', config_get( 'default_timezone' ) );\n\n\t# Set default prefix/suffix form variables ($f_db_table_XXX)\n\t$t_prefix_type = $f_db_type == 'oci8' ? $f_db_type : 'other';\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\t${'f_' . $t_key} = gpc_get( $t_key, $t_value );\n\t}\n}\n$f_admin_username = gpc_get( 'admin_username', '' );\n$f_admin_password = gpc_get( 'admin_password', '' );\nif( CONFIGURED_PASSWORD == $f_admin_password ) {\n\t$f_admin_password = '';\n}\n$f_log_queries    = gpc_get_bool( 'log_queries', false );\n$f_db_exists      = gpc_get_bool( 'db_exists', false );\n\nif( $t_config_exists ) {\n\tif( 0 == $t_install_state ) {\n\t\tprint_test( 'Config File Exists - Upgrade', true );\n\n\t\tprint_test( 'Setting Database Type', '' !== $f_db_type, true, 'database type is blank?' );\n\n\t\t# @TODO: dsn config seems to be undefined, remove ?\n\t\t$t_db_conn_exists = ( $f_dsn !== '' || ( $f_database_name !== '' && $f_db_username !== '' && $f_hostname !== '' ) );\n\t\t# Oracle supports binding in two ways:\n\t\t#  - hostname, username/password and database name\n\t\t#  - tns name (insert into hostname field) and username/password, database name is still empty\n\t\tif( $f_db_type == 'oci8' ) {\n\t\t\t$t_db_conn_exists = $t_db_conn_exists || ( $f_database_name == '' && $f_db_username !== '' && $f_hostname !== '' );\n\t\t}\n\t\tprint_test( 'Checking Database connection settings exist',\n\t\t\t$t_db_conn_exists,\n\t\t\ttrue,\n\t\t\t'database connection settings do not exist?' );\n\n\t\tprint_test( 'Checking PHP support for database type',\n\t\t\tdb_check_database_support( $f_db_type ), true,\n\t\t\t'database is not supported by PHP. Check that it has been compiled into your server.' );\n\n\t\tif( $f_db_type == 'mssql' ) {\n\t\t\tprint_test( 'Checking PHP support for Microsoft SQL Server driver',\n\t\t\t\tversion_compare( phpversion(), '5.3' ) < 0, true,\n\t\t\t\t'mssql driver is no longer supported in PHP >= 5.3, please use mssqlnative instead' );\n\t\t}\n\t}\n\n\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\tif( $g_db->IsConnected() ) {\n\t\t$g_db_connected = true;\n\t}\n\n\t$t_cur_version = config_get( 'database_version', -1 );\n\n\tif( $t_cur_version > 1 ) {\n\t\t$g_database_upgrade = true;\n\t\t$f_db_exists = true;\n\t} else {\n\t\tif( 0 == $t_install_state ) {\n\t\t\tprint_test( 'Config File Exists but Database does not', false, false, 'Bad config_inc.php?' );\n\t\t}\n\t}\n}\n\nif( $f_db_type == 'db2' ) {\n\n\t# If schema name is supplied, then separate it from database name.\n\tif( strpos( $f_database_name, '/' ) != false ) {\n\t\t$f_db2AS400 = $f_database_name;\n\t\tlist( $f_database_name, $f_db_schema ) = explode( '/', $f_db2AS400, 2 );\n\t}\n}\n\nif( 0 == $t_install_state ) {\n\t?>\n\n<!-- Check PHP Version -->\n<?php\n\tprint_test(\n\t\t'Checking PHP version (your version is ' . phpversion() . ')',\n\t\tcheck_php_version( phpversion() ),\n\t\ttrue,\n\t\t'Upgrade to a more recent version of PHP'\n\t);\n\n\t# UTF-8 support check\n\t# We need either the 'mbstring' extension, or the utf8_encode() function\n\t# (part of the 'XML parser' extension) as a fallback for Unicode support\n\t# by the utf8 library.\n\tprint_test(\n\t\t'Checking UTF-8 support',\n\t\textension_loaded( 'mbstring' ) || function_exists( 'utf8_encode' ),\n\t\ttrue,\n\t\t'Please install or enable the PHP mbstring extension'\n\t);\n?>\n<!-- Check Safe Mode -->\n<?php\nprint_test( 'Checking if safe mode is enabled for install script',\n\t!ini_get( 'SAFE_MODE' ),\n\ttrue,\n\t'Disable safe_mode in php.ini before proceeding' ) ?>\n\n<?php\n\t# Check for custom config files in obsolete locations\n\t$t_config_files = array(\n\t\t'config_inc.php' => 'move',\n\t\t'custom_constants_inc.php' => 'move',\n\t\t'custom_strings_inc.php' => 'move',\n\t\t'custom_functions_inc.php' => 'move',\n\t\t'custom_relationships_inc.php' => 'move',\n\t\t'mc_config_defaults_inc.php' => 'delete',\n\t\t'mc_config_inc.php' => 'contents',\n\t);\n\n\tforeach( $t_config_files as $t_file => $t_action ) {\n\t\t$t_dir = dirname( dirname( __FILE__ ) ) . '/';\n\t\tif( substr( $t_file, 0, 3 ) == 'mc_' ) {\n\t\t\t$t_dir .= 'api/soap/';\n\t\t}\n\n\t\tswitch( $t_action ) {\n\t\t\tcase 'move':\n\t\t\t\t$t_message = \"Move $t_file to config/$t_file.\";\n\t\t\t\tbreak;\n\t\t\tcase 'delete':\n\t\t\t\t$t_message = 'Delete this file.';\n\t\t\t\tbreak;\n\t\t\tcase 'contents':\n\t\t\t\t$t_message = 'Move contents to config_inc.php file.';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tprint_test(\n\t\t\t\"Checking there is no '$t_file' file in 1.2.x location.\",\n\t\t\t!file_exists( $t_dir . $t_file ),\n\t\t\ttrue,\n\t\t\t$t_message\n\t\t);\n\t}\n?>\n\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n} # end install_state == 0\n\n# got database information, check and install\nif( 2 == $t_install_state ) {\n\t# By now user has picked a timezone, ensure it is set\n\tdate_default_timezone_set( $f_timezone );\n?>\n\n<!-- Checking DB support-->\n<?php\n\tprint_test( 'Setting Database Type', '' !== $f_db_type, true, 'database type is blank?' );\n\n\tprint_test( 'Checking PHP support for database type', db_check_database_support( $f_db_type ), true, 'database is not supported by PHP. Check that it has been compiled into your server.' );\n\n\t# ADOdb library version check\n\t# PostgreSQL, Oracle and MSSQL require at least 5.19. MySQL should be fine\n\t# with 5.10 but to simplify we align to the requirement of the others.\n\t$t_adodb_version = substr( $ADODB_vers, 1, strpos( $ADODB_vers, ' ' ) - 1 );\n\tprint_test( 'Checking ADOdb Library version is at least ' . DB_MIN_VERSION_ADODB,\n\t\tversion_compare( $t_adodb_version, DB_MIN_VERSION_ADODB, '>=' ),\n\t\ttrue,\n\t\t'Current version: ' . $ADODB_vers\n\t);\n\n\tprint_test( 'Setting Database Hostname', '' !== $f_hostname, true, 'host name is blank' );\n\tprint_test( 'Setting Database Username', '' !== $f_db_username, true, 'database username is blank' );\n\tprint_test( 'Setting Database Password', '' !== $f_db_password, false, 'database password is blank' );\n\tprint_test( 'Setting Database Name', '' !== $f_database_name || $f_db_type == 'oci8', true, 'database name is blank' );\n\n\tif( $f_db_type == 'db2' ) {\n\t\tprint_test( 'Setting Database Schema', !is_blank( $f_db_schema ), true, 'must have a schema name for AS400 in the form of DBNAME/SCHEMA' );\n\t}\n?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tSetting Admin Username\n\t</td>\n\t<?php\n\t\tif( '' !== $f_admin_username ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, false, 'admin user name is blank, using database user instead' );\n\t\t$f_admin_username = $f_db_username;\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tSetting Admin Password\n\t</td>\n\t<?php\n\t\tif( '' !== $f_admin_password ) {\n\t\t\tprint_test_result( GOOD );\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'admin user password is blank, using database user password instead' );\n\t\t\t$f_admin_password = $f_db_password;\n\t\t}\n\t?>\n</tr>\n\n<!-- connect to db -->\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as admin\n\t</td>\n\t<?php\n\t\t$t_db_open = false;\n\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password );\n\n\tif( $t_result ) {\n\n\t\t# check if db exists for the admin\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\t\tif( $t_result ) {\n\t\t\t$t_db_open = true;\n\t\t\t$f_db_exists = true;\n\t\t}\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\tprint_test_result( BAD, true, 'set schema failed: ' . $g_db->errorMsg() );\n\t\t\t}\n\t\t} else {\n\t\t\tprint_test_result( GOOD );\n\t\t}\n\n\t\t# due to a bug in ADODB, this call prompts warnings, hence the @\n\t\t# the check only works on mysql if the database is open\n\t\t$t_version_info = @$g_db->ServerInfo();\n\t} else {\n\t\tprint_test_result( BAD, true, 'Does administrative user have access to the database? ( ' . db_error_msg() . ' )' );\n\t\t$t_version_info = null;\n\t}\n\t?>\n</tr>\n<?php\n\tif( $f_db_exists ) {\n\t\t?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\t\tif( $t_result == true ) {\n\t\t\t$t_db_open = true;\n\t\t\tif( $f_db_type == 'db2' ) {\n\t\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\t\tif( $t_result === false ) {\n\t\t\t\t\tprint_test_result( BAD, true, 'set schema failed: ' . $g_db->errorMsg() );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint_test_result( GOOD );\n\t\t\t}\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'Database user doesn\\'t have access to the database ( ' . db_error_msg() . ' )' );\n\t\t}\n\t\t?>\n</tr>\n\n<?php\n\t}\n\tif( $t_db_open ) {\n\t\t?>\n<!-- display database version -->\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tChecking Database Server Version\n<?php\n\t\tif( isset( $t_version_info['description'] ) ) {\n\t\t\techo '<br /> Running ' . string_attribute( $f_db_type )\n\t\t\t\t. ' version ' . nl2br( $t_version_info['description'] );\n\t\t}\n?>\n\t</td>\n<?php\n\t\t$t_warning = '';\n\t\t$t_error = '';\n\t\tswitch( $f_db_type ) {\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\tif( version_compare( $t_version_info['version'], DB_MIN_VERSION_MYSQL, '<' ) ) {\n\t\t\t\t\t$t_error = 'MySQL ' . DB_MIN_VERSION_MYSQL . ' or later is required for installation.';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'mssql':\n\t\t\tcase 'mssqlnative':\n\t\t\t\tif( version_compare( $t_version_info['version'], DB_MIN_VERSION_MSSQL, '<' ) ) {\n\t\t\t\t\t$t_error = 'SQL Server 2005 (' . DB_MIN_VERSION_MSSQL . ') or later is required for installation.';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'pgsql':\n\t\t\tcase 'db2':\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( is_null( $t_version_info ) ) {\n\t\t\t$t_warning = \"Unable to determine '$f_db_type' version. ($t_error).\";\n\t\t\t$t_error = '';\n\t\t}\n\t\tprint_test_result(\n\t\t\t( '' == $t_error ) && ( '' == $t_warning ),\n\t\t\t( '' != $t_error ),\n\t\t\t$t_error . ' ' . $t_warning\n\t\t);\n?>\n</tr>\n</table>\n<?php\n\t}?>\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t} else {\n\t\t$t_install_state--; # a check failed, redisplay the questions\n\t}\n} # end 2 == $t_install_state\n\n# system checks have passed, get the database information\nif( 1 == $t_install_state ) {\n\t?>\n\n<form method='POST'>\n\n<input name=\"install\" type=\"hidden\" value=\"2\">\n\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">\n\t\t\t<?php echo\n\t\t\t\t( $g_database_upgrade ? 'Upgrade Options' : 'Installation Options' ),\n\t\t\t\t( $g_failed ? ': Checks Failed ' : '' )\n\t\t\t?>\n\t\t</span>\n\t</td>\n</tr>\n\n<?php\n# install-only fields: when upgrading, only display admin username and password\nif( !$g_database_upgrade ) {\n?>\n\n<!-- Database type selection list -->\n<tr>\n\t<td>\n\t\tType of Database\n\t</td>\n\t<td>\n\t\t<!-- Default values for table prefix/suffix -->\n\t\t<div>\n<?php\n\t# These elements are referenced by the db selection list's on change event\n\t# to populate the corresponding fields as appropriate\n\tforeach( $t_prefix_defaults as $t_db_type => $t_defaults ) {\n\t\techo '<div id=\"default_' . $t_db_type . '\" class=\"hidden\">';\n\t\tforeach( $t_defaults as $t_key => $t_value ) {\n\t\t\techo \"\\n\\t\" . '<span name=\"' . $t_key . '\">' . $t_value . '</span>';\n\t\t}\n\t\techo \"\\n\" . '</div>' . \"\\n\";\n\t}\n?>\n\t\t</div>\n\n\t\t<select id=\"db_type\" name=\"db_type\">\n<?php\n\t\t\t# Build selection list of available DB types\n\t\t\t$t_db_list = array(\n\t\t\t\t'mysqli'      => 'MySQL Improved',\n\t\t\t\t'mysql'       => 'MySQL',\n\t\t\t\t'mssqlnative' => 'Microsoft SQL Server Native Driver',\n\t\t\t\t'pgsql'       => 'PostgreSQL',\n\t\t\t\t'oci8'        => 'Oracle',\n\t\t\t\t# Hidden for new installs per #17336\n\t\t\t\t# 'db2'         => 'IBM DB2 (unsupported)',\n\t\t\t);\n\t\t\t# mysql is deprecated as of PHP 5.5.0\n\t\t\tif( version_compare( phpversion(), '5.5.0' ) >= 0 ) {\n\t\t\t\tunset( $t_db_list['mysql']);\n\t\t\t}\n\n\t\t\tforeach( $t_db_list as $t_db => $t_db_descr ) {\n\t\t\t\techo '<option value=\"' . $t_db . '\"' .\n\t\t\t\t\t( $t_db == $f_db_type ? ' selected=\"selected\"' : '' ) . '>' .\n\t\t\t\t\t$t_db_descr . \"</option>\\n\";\n\t\t\t}\n?>\n\t\t</select>\n\t</td>\n</tr>\n\n<!-- Database server hostname -->\n<tr>\n\t<td>\n\t\tHostname (for Database Server)\n\t</td>\n\t<td>\n\t\t<input name=\"hostname\" type=\"textbox\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t</td>\n</tr>\n\n<!-- Database username and password -->\n<tr>\n\t<td>\n\t\tUsername (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"db_username\" type=\"textbox\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t</td>\n</tr>\n\n<tr>\n\t<td>\n\t\tPassword (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"db_password\" type=\"password\" value=\"<?php\n\t\t\techo !is_blank( $f_db_password ) && $t_config_exists\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: $f_db_password;\n\t\t?>\">\n\t</td>\n</tr>\n\n<!-- Database name -->\n<tr>\n\t<td>\n\t\tDatabase name (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"database_name\" type=\"textbox\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t</td>\n</tr>\n<?php\n} # end install-only fields\n?>\n\n<!-- Admin user and password -->\n<tr>\n\t<td>\n\t\tAdmin Username (to <?php echo( !$g_database_upgrade ) ? 'create Database' : 'update Database'?> if required)\n\t</td>\n\t<td>\n\t\t<input name=\"admin_username\" type=\"textbox\" value=\"<?php echo string_attribute( $f_admin_username ) ?>\">\n\t</td>\n</tr>\n\n<tr>\n\t<td>\n\t\tAdmin Password (to <?php echo( !$g_database_upgrade ) ? 'create Database' : 'update Database'?> if required)\n\t</td>\n\t<td>\n\t\t<input name=\"admin_password\" type=\"password\" value=\"<?php\n\t\t\techo !is_blank( $f_admin_password ) && $f_admin_password == $f_db_password\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_admin_password );\n\t\t?>\">\n\t</td>\n</tr>\n\n<?php\n# install-only fields: when upgrading, only display admin username and password\nif( !$g_database_upgrade ) {\n\t$t_prefix_labels = array(\n\t\t'db_table_prefix'        => 'Database Table Prefix',\n\t\t'db_table_plugin_prefix' => 'Database Plugin Table Prefix',\n\t\t'db_table_suffix'        => 'Database Table Suffix',\n\t);\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\techo \"<tr>\\n\\t<td>\\n\";\n\t\techo \"\\t\\t\" . $t_prefix_labels[$t_key] . \"\\n\";\n\t\techo \"\\t</td>\\n\\t<td>\\n\\t\\t\";\n\t\techo '<input id=\"' . $t_key . '\" name=\"' . $t_key . '\" type=\"textbox\" value=\"' . $f_db_table_prefix . '\">';\n\t\techo \"\\n\\t</td>\\n</tr>\\n\\n\";\n\t}\n\n\t# Default timezone, get PHP setting if not defined in Mantis\n\t$t_tz = config_get_global( 'default_timezone' );\n\tif( is_blank( $t_tz ) ) {\n\t\t$t_tz = @date_default_timezone_get();\n\t}\n?>\n<!-- Timezone -->\n<tr>\n\t<td>\n\t\tDefault Time Zone\n\t</td>\n\t<td>\n\t\t<select id=\"timezone\" name=\"timezone\">\n\t\t\t<?php print_timezone_option_list( $t_tz ) ?>\n\t\t</select>\n\t</td>\n</tr>\n<?php\n} # end install-only fields\n?>\n\n<!-- Printing SQL queries -->\n<tr>\n\t<td>\n\t\tPrint SQL Queries instead of Writing to the Database\n\t</td>\n\t<td>\n\t\t<input name=\"log_queries\" type=\"checkbox\" value=\"1\" <?php echo( $f_log_queries ? 'checked=\"checked\"' : '' )?>>\n\t</td>\n</tr>\n\n<!-- Submit button -->\n<tr>\n\t<td>\n\t\t<?php echo ( $g_failed\n\t\t\t? 'Please correct failed checks and try again'\n\t\t\t: 'Attempt Installation' );\n\t\t?>\n\t</td>\n\t<td>\n\t\t<input name=\"go\" type=\"submit\" class=\"button\" value=\"Install/Upgrade Database\">\n\t</td>\n</tr>\n\n</table>\n</form>\n\n<?php\n}  # end install_state == 1\n\n# all checks have passed, install the database\nif( 3 == $t_install_state ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installing Database</span>\n\t</td>\n</tr>\n<?php if( !$f_log_queries ) {?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tCreate database if it does not exist\n\t</td>\n\t<?php\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_rs = $g_db->Execute( \"select * from SYSIBM.SCHEMATA WHERE SCHEMA_NAME = '\" . $f_db_schema . \"' AND SCHEMA_OWNER = '\" . $f_db_username . \"'\" );\n\t\t\tif( $t_rs === false ) {\n\t\t\t\techo '<br />false';\n\t\t\t}\n\n\t\t\tif( $t_rs->EOF ) {\n\t\t\t\t$t_result = false;\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t} else {\n\t\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\t}\n\t\t}\n\n\t\t$t_db_open = false;\n\n\t\tif( $t_result == true ) {\n\t\t\tprint_test_result( GOOD );\n\t\t\t$t_db_open = true;\n\t\t} else {\n\t\t\t# create db\n\t\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t\t$t_result = $g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password );\n\n\t\t\t$t_dict = NewDataDictionary( $g_db );\n\n\t\t\tif( $f_db_type == 'db2' ) {\n\t\t\t\t$t_rs = $g_db->Execute( 'CREATE SCHEMA ' . $f_db_schema );\n\n\t\t\t\tif( !$t_rs ) {\n\t\t\t\t\t$t_result = false;\n\t\t\t\t\tprint_test_result( BAD, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );\n\t\t\t\t\t$t_install_state--; # db creation failed, allow user to re-enter user/password info\n\t\t\t\t} else {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\t$t_db_open = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_sqlarray = $t_dict->CreateDatabase( $f_database_name, array(\n\t\t\t\t\t'mysql' => 'DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci',\n\t\t\t\t) );\n\t\t\t\t$t_ret = $t_dict->ExecuteSQLArray( $t_sqlarray, false );\n\t\t\t\tif( $t_ret == 2 ) {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\t$t_db_open = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_error = db_error_msg();\n\t\t\t\t\tif( $f_db_type == 'oci8' ) {\n\t\t\t\t\t\t$t_db_exists = preg_match( '/ORA-01920/', $t_error );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_db_exists = strstr( $t_error, 'atabase exists' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $t_db_exists ) {\n\t\t\t\t\t\tprint_test_result( BAD, false, 'Database already exists? ( ' . db_error_msg() . ' )' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint_test_result( BAD, true, 'Does administrative user have access to create the database? ( ' . db_error_msg() . ' )' );\n\t\t\t\t\t\t$t_install_state--; # db creation failed, allow user to re-enter user/password info\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n</tr>\n<?php\n\t# Close the connection and clear the ADOdb object to free memory\n\t$g_db->Close();\n\t$g_db = null;\n?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t}\n\t\t}\n\n\t\tif( $t_result == true ) {\n\t\t\tprint_test_result( GOOD );\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'Database user doesn\\'t have access to the database ( ' . db_error_msg() . ' )' );\n\t\t}\n\t\t$g_db->Close();\n\t?>\n</tr>\n<?php\n\t}\n\n\t# install the tables\n\tif( false == $g_failed ) {\n\t\t$g_db_connected = false;\n\n\t\t# fake out database access routines used by config_get\n\t\tconfig_set_global( 'db_type', $f_db_type );\n\n\t\t# Initialize table prefixes as specified by user\n\t\tconfig_set_global( 'db_table_prefix', $f_db_table_prefix );\n\t\tconfig_set_global( 'db_table_plugin_prefix', $f_db_table_plugin_prefix );\n\t\tconfig_set_global( 'db_table_suffix', $f_db_table_suffix );\n\t\t# database_api references this\n\t\trequire_once( dirname( __FILE__ ) . '/schema.php' );\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\t\tif( !$f_log_queries ) {\n\t\t\t$g_db_connected = true;\n\n\t\t\t# fake out database access routines used by config_get\n\t\t}\n\t\t$t_last_update = config_get( 'database_version', -1, ALL_USERS, ALL_PROJECTS );\n\t\t$t_last_id = count( $g_upgrade ) - 1;\n\t\t$i = $t_last_update + 1;\n\t\tif( $f_log_queries ) {\n\t\t\techo '<tr><td bgcolor=\"#ffffff\" col_span=\"2\"> Database Creation Suppressed, SQL Queries follow <pre>';\n\t\t}\n\n\t\t# Make sure we do the upgrades using UTF-8 if needed\n\t\tif( $f_db_type === 'mysql' || $f_db_type === 'mysqli' ) {\n\t\t\t$g_db->execute( 'SET NAMES UTF8' );\n\t\t}\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t}\n\t\t}\n\n\t\t$t_dict = NewDataDictionary( $g_db );\n\n\t\t# Special processing for specific schema versions\n\t\t# This allows execution of additional install steps, which are\n\t\t# not a Mantis schema upgrade but nevertheless required due to\n\t\t# changes in the code\n\n\t\tif( $t_last_update > 51 && $t_last_update < 189 ) {\n\t\t\t# Since MantisBT 1.1.0 / ADOdb 4.96 (corresponding to schema 51)\n\t\t\t# 'L' columns are BOOLEAN instead of SMALLINT\n\t\t\t# Check for any DB discrepancies and update columns if needed\n\t\t\t$t_bool_columns = check_pgsql_bool_columns();\n\t\t\tif( $t_bool_columns !== true ) {\n\t\t\t\t# Some columns need converting\n\t\t\t\t$t_msg = \"PostgreSQL: check Boolean columns' actual type\";\n\t\t\t\tif( is_array( $t_bool_columns ) ) {\n\t\t\t\t\tprint_test(\n\t\t\t\t\t\t$t_msg,\n\t\t\t\t\t\tcount( $t_bool_columns ) == 0,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tcount( $t_bool_columns ) . ' columns must be converted to BOOLEAN' );\n\t\t\t\t} else {\n\t\t\t\t\t# We did not get an array => error occured\n\t\t\t\t\tprint_test( $t_msg, false, true, $t_bool_columns );\n\t\t\t\t}\n\n\t\t\t\t# Convert the columns\n\t\t\t\tforeach( $t_bool_columns as $t_row ) {\n\t\t\t\t\textract( $t_row, EXTR_PREFIX_ALL, 'v' );\n\t\t\t\t\t$t_null = $v_is_nullable ? 'NULL' : 'NOT NULL';\n\t\t\t\t\t$t_default = is_null( $v_column_default ) ? 'NULL' : $v_column_default;\n\t\t\t\t\t$t_sqlarray = $t_dict->AlterColumnSQL(\n\t\t\t\t\t\t$v_table_name,\n\t\t\t\t\t\t$v_column_name . ' L ' . $t_null . ' DEFAULT ' . $t_default );\n\t\t\t\t\tprint_test(\n\t\t\t\t\t\t'Converting column ' . $v_table_name . '.' . $v_column_name . ' to BOOLEAN',\n\t\t\t\t\t\t2 == $t_dict->ExecuteSQLArray( $t_sqlarray, false ),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tprint_r( $t_sqlarray, true ) );\n\t\t\t\t\tif( $g_failed ) {\n\t\t\t\t\t\t# Error occured, bail out\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t# End of special processing for specific schema versions\n\n\t\twhile( ( $i <= $t_last_id ) && !$g_failed ) {\n\t\t\tif( !$f_log_queries ) {\n\t\t\t\techo '<tr><td bgcolor=\"#ffffff\">';\n\t\t\t}\n\n\t\t\t$t_sql = true;\n\t\t\t$t_target = $g_upgrade[$i][1][0];\n\n\t\t\tswitch( $g_upgrade[$i][0] ) {\n\t\t\t\tcase 'InsertData':\n\t\t\t\t\t$t_sqlarray = call_user_func_array( $g_upgrade[$i][0], $g_upgrade[$i][1] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'UpdateSQL':\n\t\t\t\t\t$t_sqlarray = array(\n\t\t\t\t\t\t$g_upgrade[$i][1],\n\t\t\t\t\t);\n\t\t\t\t\t$t_target = $g_upgrade[$i][1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'UpdateFunction':\n\t\t\t\t\t$t_sqlarray = array(\n\t\t\t\t\t\t$g_upgrade[$i][1],\n\t\t\t\t\t);\n\t\t\t\t\tif( isset( $g_upgrade[$i][2] ) ) {\n\t\t\t\t\t\t$t_sqlarray[] = $g_upgrade[$i][2];\n\t\t\t\t\t}\n\t\t\t\t\t$t_sql = false;\n\t\t\t\t\t$t_target = $g_upgrade[$i][1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase null:\n\t\t\t\t\t# No-op upgrade step - required for oci8\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\n\t\t\t\t\t# 0: function to call, 1: function params, 2: function to evaluate before calling upgrade, if false, skip upgrade.\n\t\t\t\t\tif( isset( $g_upgrade[$i][2] ) ) {\n\t\t\t\t\t\tif( call_user_func_array( $g_upgrade[$i][2][0], $g_upgrade[$i][2][1] ) ) {\n\t\t\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_sqlarray = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif( $f_log_queries ) {\n\t\t\t\tif( $t_sql ) {\n\t\t\t\t\tforeach( $t_sqlarray as $t_sql ) {\n\t\t\t\t\t\t# \"CREATE OR REPLACE TRIGGER\" statements must end with \"END;\\n/\" for Oracle sqlplus\n\t\t\t\t\t\tif( $f_db_type == 'oci8' && stripos( $t_sql, 'CREATE OR REPLACE TRIGGER' ) === 0 ) {\n\t\t\t\t\t\t\t$t_sql_end = PHP_EOL . '/';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_sql_end = ';';\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo htmlentities( $t_sql ) . $t_sql_end . PHP_EOL . PHP_EOL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo 'Schema step ' . $i . ': ';\n\t\t\t\tif( is_null( $g_upgrade[$i][0] ) ) {\n\t\t\t\t\techo 'No operation';\n\t\t\t\t\t$t_ret = 2;\n\t\t\t\t} else {\n\t\t\t\t\techo $g_upgrade[$i][0] . ' ( ' . $t_target . ' )';\n\t\t\t\t\tif( $t_sql ) {\n\t\t\t\t\t\t$t_ret = $t_dict->ExecuteSQLArray( $t_sqlarray, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( isset( $t_sqlarray[1] ) ) {\n\t\t\t\t\t\t\t$t_ret = call_user_func( 'install_' . $t_sqlarray[0], $t_sqlarray[1] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_ret = call_user_func( 'install_' . $t_sqlarray[0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\t\t\t\tif( $t_ret == 2 ) {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\tconfig_set( 'database_version', $i );\n\t\t\t\t} else {\n\t\t\t\t\t$t_all_sql = '';\n\t\t\t\t\tif( $t_sql ) {\n\t\t\t\t\t\tforeach( $t_sqlarray as $t_single_sql ) {\n\t\t\t\t\t\t\tif( !empty( $t_single_sql ) ) {\n\t\t\t\t\t\t\t\t$t_all_sql .= $t_single_sql . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprint_test_result( BAD, true, $t_all_sql  . $g_db->ErrorMsg() );\n\t\t\t\t}\n\t\t\t\techo '</tr>';\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\tif( $f_log_queries ) {\n\t\t\t# add a query to set the database version\n\t\t\techo 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\\'' . $t_last_id . '\\', 1, 90, \\'database_version\\', 0, 0 );' . PHP_EOL;\n\t\t\techo '</pre><br /><p style=\"color:red\">Your database has not been created yet. Please create the database, then install the tables and data using the information above before proceeding.</p></td></tr>';\n\t\t}\n\t}\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t} else {\n\t\t$t_install_state--;\n\t}\n\n\t?>\n</table>\n<?php\n}  # end install_state == 3\n\n# database installed, get any additional information\nif( 4 == $t_install_state ) {\n\n/*\n\t# 20141227 dregad Disabling this step for now, because it does not seem to\n\t# be doing anything useful and can be used to retrieve system information\n\t# when the admin directory has not been deleted (see #17939).\n\n\t# @todo to be written\n\t# must post data gathered to preserve it\n\t?>\n\t\t<input name=\"hostname\" type=\"hidden\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t\t<input name=\"db_type\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_type ) ?>\">\n\t\t<input name=\"database_name\" type=\"hidden\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t\t<input name=\"db_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t\t<input name=\"db_password\" type=\"hidden\" value=\"<?php echo string_attribute( f_db_password ) ?>\">\n\t\t<input name=\"admin_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_admin_username ) ?>\">\n\t\t<input name=\"admin_password\" type=\"hidden\" value=\"<?php echo string_attribute( $f_admin_password ) ?>\">\n\t\t<input name=\"log_queries\" type=\"hidden\" value=\"<?php echo( $f_log_queries ? 1 : 0 )?>\">\n\t\t<input name=\"db_exists\" type=\"hidden\" value=\"<?php echo( $f_db_exists ? 1 : 0 )?>\">\n<?php\n\t# must post <input name=\"install\" type=\"hidden\" value=\"5\">\n\t# rather than the following line\n*/\n\t$t_install_state++;\n}  # end install_state == 4\n\n# all checks have passed, install the database\nif( 5 == $t_install_state ) {\n\t$t_config_exists = file_exists( $t_config_filename );\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Write Configuration File(s)</span>\n\t</td>\n</tr>\n\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\t<?php echo ( $t_config_exists ? 'Updating' : 'Creating' ); ?>\n\t\tConfiguration File (config/config_inc.php)<br />\n\t</td>\n<?php\n\t# Generating the config_inc.php file\n\n\t# Automatically generate a strong master salt/nonce for MantisBT\n\t# cryptographic purposes. If a strong source of randomness is not\n\t# available the user will have to manually set this value post\n\t# installation.\n\t$t_crypto_master_salt = crypto_generate_random_string( 32 );\n\tif( $t_crypto_master_salt !== null ) {\n\t\t$t_crypto_master_salt = base64_encode( $t_crypto_master_salt );\n\t}\n\n\t$t_config = '<?php' . PHP_EOL\n\t\t. '$g_hostname               = \\'' . addslashes( $f_hostname ) . '\\';' . PHP_EOL\n\t\t. '$g_db_type                = \\'' . addslashes( $f_db_type ) . '\\';' . PHP_EOL\n\t\t. '$g_database_name          = \\'' . addslashes( $f_database_name ) . '\\';' . PHP_EOL\n\t\t. '$g_db_username            = \\'' . addslashes( $f_db_username ) . '\\';' . PHP_EOL\n\t\t. '$g_db_password            = \\'' . addslashes( $f_db_password ) . '\\';' . PHP_EOL;\n\n\tswitch( $f_db_type ) {\n\t\tcase 'db2':\n\t\t\t$t_config .=  '$g_db_schema              = \\'' . addslashes( $f_db_schema ) . '\\';' . PHP_EOL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t$t_config .= PHP_EOL;\n\n\t# Add lines for table prefix/suffix if different from default\n\t$t_insert_line = false;\n\tforeach( $t_prefix_defaults['other'] as $t_key => $t_value ) {\n\t\t$t_new_value = ${'f_' . $t_key};\n\t\tif( $t_new_value != $t_value ) {\n\t\t\t$t_config .= '$g_' . str_pad( $t_key, 25 ) . '= \\'' . addslashes( ${'f_' . $t_key} ) . '\\';' . PHP_EOL;\n\t\t\t$t_insert_line = true;\n\t\t}\n\t}\n\tif( $t_insert_line ) {\n\t\t$t_config .= PHP_EOL;\n\t}\n\n\t$t_config .=\n\t\t  '$g_default_timezone       = \\'' . addslashes( $f_timezone ) . '\\';' . PHP_EOL\n\t\t. PHP_EOL\n\t\t. \"\\$g_crypto_master_salt     = '\" . addslashes( $t_crypto_master_salt ) . \"';\" . PHP_EOL;\n\n\t$t_write_failed = true;\n\n\tif( !$t_config_exists ) {\n\t\tif( $t_fd = @fopen( $t_config_filename, 'w' ) ) {\n\t\t\tfwrite( $t_fd, $t_config );\n\t\t\tfclose( $t_fd );\n\t\t}\n\n\t\tif( file_exists( $t_config_filename ) ) {\n\t\t\tprint_test_result( GOOD );\n\t\t\t$t_write_failed = false;\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'cannot write ' . $t_config_filename );\n\t\t}\n\t} else {\n\t\t# already exists, see if the information is the same\n\t\tif( ( $f_hostname != config_get( 'hostname', '' ) ) ||\n\t\t\t( $f_db_type != config_get( 'db_type', '' ) ) ||\n\t\t\t( $f_database_name != config_get( 'database_name', '' ) ) ||\n\t\t\t( $f_db_schema != config_get( 'db_schema', '' ) ) ||\n\t\t\t( $f_db_username != config_get( 'db_username', '' ) ) ||\n\t\t\t( $f_db_password != config_get( 'db_password', '' ) ) ) {\n\t\t\tprint_test_result( BAD, false, 'file ' . $t_config_filename . ' already exists and has different settings' );\n\t\t} else {\n\t\t\tprint_test_result( GOOD, false );\n\t\t\t$t_write_failed = false;\n\t\t}\n\t}\n\t?>\n</tr>\n<?php\n\tif( $t_crypto_master_salt === null ) {\n\t\tprint_test( 'Setting Cryptographic salt in config file', false, false,\n\t\t\t\t\t'Unable to find a random number source for cryptographic purposes. You will need to edit ' .\n\t\t\t\t\t$t_config_filename . ' and set a value for $g_crypto_master_salt manually' );\n\t}\n\n\tif( true == $t_write_failed ) {\n?>\n<tr>\n\t<td colspan=\"2\">\n\t\t<table width=\"50%\" cellpadding=\"10\" cellspacing=\"1\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\tPlease add the following lines to\n\t\t\t\t\t<em>'<?php echo $t_config_filename; ?>'</em>\n\t\t\t\t\tbefore continuing:\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<pre><?php echo htmlentities( $t_config ); ?></pre>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n<?php\n\t}\n?>\n\n</table>\n\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n}\n\n# end install_state == 5\n\nif( 6 == $t_install_state ) {\n\n\t# post install checks\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Checking Installation</span>\n\t</td>\n</tr>\n\n<!-- Checking register_globals are off -->\n<?php print_test( 'Checking for register_globals are off for mantis', !ini_get_bool( 'register_globals' ), false, 'change php.ini to disable register_globals setting' )?>\n\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\tif( $t_result == true ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, false, 'Database user does not have access to the database ( ' . db_error_msg() . ' )' );\n\t}\n\n\tif( $f_db_type == 'db2' ) {\n\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\tif( $t_result === false ) {\n\t\t\techo $g_db->errorMsg();\n\t\t}\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to SELECT records\n\t</td>\n\t<?php\n\t$t_query = 'SELECT COUNT(*) FROM ' . db_get_table( 'config' );\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, true, 'Database user does not have SELECT access to the database ( ' . db_error_msg() . ' )' );\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to INSERT records\n\t</td>\n\t<?php\n\t\t$t_query = 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\\'test\\', 1, 90, \\'database_test\\', 20, 0 )';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, true, 'Database user does not have INSERT access to the database ( ' . db_error_msg() . ' )' );\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to UPDATE records\n\t</td>\n\t<?php\n\t\t$t_query = 'UPDATE ' . db_get_table( 'config' ) . ' SET value=\\'test_update\\' WHERE config_id=\\'database_test\\'';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, true, 'Database user does not have UPDATE access to the database ( ' . db_error_msg() . ' )' );\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to DELETE records\n\t</td>\n\t<?php\n\t\t$t_query = 'DELETE FROM ' . db_get_table( 'config' ) . ' WHERE config_id=\\'database_test\\'';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, true, 'Database user does not have DELETE access to the database ( ' . db_error_msg() . ' )' );\n\t}\n\t?>\n</tr>\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n}\n\n# end install_state == 6\n\nif( 7 == $t_install_state ) {\n\t# cleanup and launch upgrade\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installation Complete</span>\n\t</td>\n</tr>\n<tr bgcolor=\"#ffffff\">\n\t<td>\n\t\tMantisBT was installed successfully.\n<?php if( $f_db_exists ) {?>\n\t\t<a href=\"../login_page.php\">Continue</a> to log in.\n<?php } else { ?>\n\t\tPlease log in as the administrator and <a href=\"../login_page.php\">create</a> your first project.\n<?php } ?>\n\t</td>\n\t<?php print_test_result( GOOD ); ?>\n</tr>\n</table>\n\n<?php\n}\n\n# end install_state == 7\n\nif( $g_failed && $t_install_state != 1 ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installation Failed</span>\n\t</td>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">Please correct failed checks</td>\n\t<td bgcolor=\"#ffffff\">\n<form method='POST'>\n\t\t<input name=\"install\" type=\"hidden\" value=\"<?php echo $t_install_state?>\">\n\t\t<input name=\"hostname\" type=\"hidden\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t\t<input name=\"db_type\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_type ) ?>\">\n\t\t<input name=\"database_name\" type=\"hidden\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t\t<input name=\"db_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t\t<input name=\"db_password\" type=\"hidden\" value=\"<?php\n\t\t\techo !is_blank( $f_db_password ) && $t_config_exists\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_db_password );\n\t\t?>\">\n\t\t<input name=\"admin_username\" type=\"hidden\" value=\"<?php echo $f_admin_username?>\">\n\t\t<input name=\"admin_password\" type=\"hidden\" value=\"<?php\n\t\t\techo !is_blank( $f_admin_password ) && $f_admin_password == $f_db_password\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_admin_password );\n\t\t?>\">\n\t\t<input name=\"log_queries\" type=\"hidden\" value=\"<?php echo( $f_log_queries ? 1 : 0 )?>\">\n\t\t<input name=\"db_exists\" type=\"hidden\" value=\"<?php echo( $f_db_exists ? 1 : 0 )?>\">\n\t\t<input name=\"retry\" type=\"submit\" class=\"button\" value=\"Retry\">\n</form>\n\t</td>\n</tr>\n</table>\n<?php\n}\n?>\n</body>\n</html>\n"], "fixing_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Mantis Database installation process\n *\n * @package MantisBT\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n */\n\nerror_reporting( E_ALL );\n@set_time_limit( 0 );\n\n# Load the MantisDB core in maintenance mode. This mode will assume that\n# config/config_inc.php hasn't been specified. Thus the database will not be opened\n# and plugins will not be loaded.\ndefine( 'MANTIS_MAINTENANCE_MODE', true );\n\nrequire_once( dirname( dirname( __FILE__ ) ) . '/core.php' );\nrequire_api( 'install_helper_functions_api.php' );\nrequire_api( 'crypto_api.php' );\n$g_error_send_page_header = false; # bypass page headers in error handler\n\n$g_failed = false;\n$g_database_upgrade = false;\n\n/**\n * Print Test result\n *\n * @param integer $p_result    Result - BAD|GOOD.\n * @param boolean $p_hard_fail Fail installation or soft warning.\n * @param string  $p_message   Message to display to user.\n * @return void\n */\nfunction print_test_result( $p_result, $p_hard_fail = true, $p_message = '' ) {\n\tglobal $g_failed;\n\techo '<td ';\n\tif( BAD == $p_result ) {\n\t\tif( $p_hard_fail ) {\n\t\t\t$g_failed = true;\n\t\t\techo 'bgcolor=\"red\">BAD';\n\t\t} else {\n\t\t\techo 'bgcolor=\"pink\">POSSIBLE PROBLEM';\n\t\t}\n\t\tif( '' != $p_message ) {\n\t\t\techo '<br />' . $p_message;\n\t\t}\n\t}\n\n\tif( GOOD == $p_result ) {\n\t\techo 'bgcolor=\"green\">GOOD';\n\t}\n\techo '</td>';\n}\n\n/**\n * Print Test result\n *\n * @param string  $p_test_description Test Description.\n * @param integer $p_result           Result - BAD|GOOD.\n * @param boolean $p_hard_fail        Fail installation or soft warning.\n * @param string  $p_message          Message to display to user.\n * @return void\n */\nfunction print_test( $p_test_description, $p_result, $p_hard_fail = true, $p_message = '' ) {\n\techo '<tr><td bgcolor=\"#ffffff\">' . $p_test_description . '</td>';\n\tprint_test_result( $p_result, $p_hard_fail, $p_message );\n\techo '</tr>' . \"\\n\";\n}\n\n# install_state\n#   0 = no checks done\n#   1 = server ok, get database information\n#   2 = check the database information\n#   3 = install the database\n#   4 = get additional config file information\n#   5 = write the config file\n#\t6 = post install checks\n#\t7 = done, link to login or db updater\n$t_install_state = gpc_get_int( 'install', 0 );\n\nhtml_begin();\nhtml_head_begin();\nhtml_css_link( 'admin.css' );\nhtml_content_type();\nhtml_title( 'Administration - Installation' );\nhtml_javascript_link( 'jquery-' . JQUERY_VERSION . '.min.js' );\nhtml_javascript_link( 'install.js' );\nhtml_head_end();\n?>\n\n<body>\n<table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">\n\t<tr class=\"top-bar\">\n\t\t<td class=\"links\">\n\t\t\t[ <a href=\"index.php\">Back to Administration</a> ]\n\t\t</td>\n\t\t<td class=\"title\">\n\t\t<?php\nswitch( $t_install_state ) {\n\tcase 7:\n\t\techo 'Installation Complete';\n\t\tbreak;\n\tcase 6:\n\t\techo 'Post Installation Checks';\n\t\tbreak;\n\tcase 5:\n\t\techo 'Install Configuration File';\n\t\tbreak;\n\tcase 4:\n\t\techo 'Additional Configuration Information';\n\t\tbreak;\n\tcase 3:\n\t\techo 'Install Database';\n\t\tbreak;\n\tcase 2:\n\t\techo 'Check and Install Database';\n\t\tbreak;\n\tcase 1:\n\t\techo 'Database Parameters';\n\t\tbreak;\n\tcase 0:\n\tdefault:\n\t\t$t_install_state = 0;\n\t\techo 'Pre-Installation Check';\n\t\tbreak;\n}\n?>\n\t\t</td>\n\t</tr>\n</table>\n<br /><br />\n\n<?php\n# installation checks table header is valid both for pre-install and\n# database installation steps\nif( 0 == $t_install_state || 2 == $t_install_state ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Checking Installation</span>\n\t</td>\n</tr>\n<?php\n}\n\n$t_config_filename = $g_config_path . 'config_inc.php';\n$t_config_exists = file_exists( $t_config_filename );\n\n# Initialize Oracle-specific values for prefix and suffix, and set\n# values for other db's as per config defaults\n$t_prefix_defaults = array(\n\t'oci8' => array(\n\t\t'db_table_prefix'        => 'm',\n\t\t'db_table_plugin_prefix' => 'plg',\n\t\t'db_table_suffix'        => '',\n\t) ,\n);\nforeach( $t_prefix_defaults['oci8'] as $t_key => $t_value ) {\n\t$t_prefix_defaults['other'][$t_key] = config_get( $t_key, '' );\n}\n\nif( $t_config_exists && $t_install_state <= 1 ) {\n\t# config already exists - probably an upgrade\n\t$f_dsn                    = config_get( 'dsn', '' );\n\t$f_hostname               = config_get( 'hostname', '' );\n\t$f_db_type                = config_get( 'db_type', '' );\n\t$f_database_name          = config_get( 'database_name', '' );\n\t$f_db_schema              = config_get( 'db_schema', '' );\n\t$f_db_username            = config_get( 'db_username', '' );\n\t$f_db_password            = config_get( 'db_password', '' );\n\t$f_timezone               = config_get( 'default_timezone', '' );\n\n\t# Set default prefix/suffix form variables ($f_db_table_XXX)\n\t$t_prefix_type = 'other';\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\t${'f_' . $t_key} = $t_value;\n\t}\n} else {\n\t# read control variables with defaults\n\t$f_dsn                = gpc_get( 'dsn', config_get( 'dsn', '' ) );\n\t$f_hostname           = gpc_get( 'hostname', config_get( 'hostname', 'localhost' ) );\n\t$f_db_type            = gpc_get( 'db_type', config_get( 'db_type', '' ) );\n\t$f_database_name      = gpc_get( 'database_name', config_get( 'database_name', 'bugtracker' ) );\n\t$f_db_schema          = gpc_get( 'db_schema', config_get( 'db_schema', '' ) );\n\t$f_db_username        = gpc_get( 'db_username', config_get( 'db_username', '' ) );\n\t$f_db_password        = gpc_get( 'db_password', config_get( 'db_password', '' ) );\n\tif( CONFIGURED_PASSWORD == $f_db_password ) {\n\t\t$f_db_password = config_get( 'db_password' );\n\t}\n\t$f_timezone           = gpc_get( 'timezone', config_get( 'default_timezone' ) );\n\n\t# Set default prefix/suffix form variables ($f_db_table_XXX)\n\t$t_prefix_type = $f_db_type == 'oci8' ? $f_db_type : 'other';\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\t${'f_' . $t_key} = gpc_get( $t_key, $t_value );\n\t}\n}\n$f_admin_username = gpc_get( 'admin_username', '' );\n$f_admin_password = gpc_get( 'admin_password', '' );\nif( CONFIGURED_PASSWORD == $f_admin_password ) {\n\t$f_admin_password = '';\n}\n$f_log_queries    = gpc_get_bool( 'log_queries', false );\n$f_db_exists      = gpc_get_bool( 'db_exists', false );\n\nif( $t_config_exists ) {\n\tif( 0 == $t_install_state ) {\n\t\tprint_test( 'Config File Exists - Upgrade', true );\n\n\t\tprint_test( 'Setting Database Type', '' !== $f_db_type, true, 'database type is blank?' );\n\n\t\t# @TODO: dsn config seems to be undefined, remove ?\n\t\t$t_db_conn_exists = ( $f_dsn !== '' || ( $f_database_name !== '' && $f_db_username !== '' && $f_hostname !== '' ) );\n\t\t# Oracle supports binding in two ways:\n\t\t#  - hostname, username/password and database name\n\t\t#  - tns name (insert into hostname field) and username/password, database name is still empty\n\t\tif( $f_db_type == 'oci8' ) {\n\t\t\t$t_db_conn_exists = $t_db_conn_exists || ( $f_database_name == '' && $f_db_username !== '' && $f_hostname !== '' );\n\t\t}\n\t\tprint_test( 'Checking Database connection settings exist',\n\t\t\t$t_db_conn_exists,\n\t\t\ttrue,\n\t\t\t'database connection settings do not exist?' );\n\n\t\tprint_test( 'Checking PHP support for database type',\n\t\t\tdb_check_database_support( $f_db_type ), true,\n\t\t\t'database is not supported by PHP. Check that it has been compiled into your server.' );\n\n\t\tif( $f_db_type == 'mssql' ) {\n\t\t\tprint_test( 'Checking PHP support for Microsoft SQL Server driver',\n\t\t\t\tversion_compare( phpversion(), '5.3' ) < 0, true,\n\t\t\t\t'mssql driver is no longer supported in PHP >= 5.3, please use mssqlnative instead' );\n\t\t}\n\t}\n\n\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\tif( $g_db->IsConnected() ) {\n\t\t$g_db_connected = true;\n\t}\n\n\t$t_cur_version = config_get( 'database_version', -1 );\n\n\tif( $t_cur_version > 1 ) {\n\t\t$g_database_upgrade = true;\n\t\t$f_db_exists = true;\n\t} else {\n\t\tif( 0 == $t_install_state ) {\n\t\t\tprint_test( 'Config File Exists but Database does not', false, false, 'Bad config_inc.php?' );\n\t\t}\n\t}\n}\n\nif( $f_db_type == 'db2' ) {\n\n\t# If schema name is supplied, then separate it from database name.\n\tif( strpos( $f_database_name, '/' ) != false ) {\n\t\t$f_db2AS400 = $f_database_name;\n\t\tlist( $f_database_name, $f_db_schema ) = explode( '/', $f_db2AS400, 2 );\n\t}\n}\n\nif( 0 == $t_install_state ) {\n\t?>\n\n<!-- Check PHP Version -->\n<?php\n\tprint_test(\n\t\t'Checking PHP version (your version is ' . phpversion() . ')',\n\t\tcheck_php_version( phpversion() ),\n\t\ttrue,\n\t\t'Upgrade to a more recent version of PHP'\n\t);\n\n\t# UTF-8 support check\n\t# We need either the 'mbstring' extension, or the utf8_encode() function\n\t# (part of the 'XML parser' extension) as a fallback for Unicode support\n\t# by the utf8 library.\n\tprint_test(\n\t\t'Checking UTF-8 support',\n\t\textension_loaded( 'mbstring' ) || function_exists( 'utf8_encode' ),\n\t\ttrue,\n\t\t'Please install or enable the PHP mbstring extension'\n\t);\n?>\n<!-- Check Safe Mode -->\n<?php\nprint_test( 'Checking if safe mode is enabled for install script',\n\t!ini_get( 'SAFE_MODE' ),\n\ttrue,\n\t'Disable safe_mode in php.ini before proceeding' ) ?>\n\n<?php\n\t# Check for custom config files in obsolete locations\n\t$t_config_files = array(\n\t\t'config_inc.php' => 'move',\n\t\t'custom_constants_inc.php' => 'move',\n\t\t'custom_strings_inc.php' => 'move',\n\t\t'custom_functions_inc.php' => 'move',\n\t\t'custom_relationships_inc.php' => 'move',\n\t\t'mc_config_defaults_inc.php' => 'delete',\n\t\t'mc_config_inc.php' => 'contents',\n\t);\n\n\tforeach( $t_config_files as $t_file => $t_action ) {\n\t\t$t_dir = dirname( dirname( __FILE__ ) ) . '/';\n\t\tif( substr( $t_file, 0, 3 ) == 'mc_' ) {\n\t\t\t$t_dir .= 'api/soap/';\n\t\t}\n\n\t\tswitch( $t_action ) {\n\t\t\tcase 'move':\n\t\t\t\t$t_message = \"Move $t_file to config/$t_file.\";\n\t\t\t\tbreak;\n\t\t\tcase 'delete':\n\t\t\t\t$t_message = 'Delete this file.';\n\t\t\t\tbreak;\n\t\t\tcase 'contents':\n\t\t\t\t$t_message = 'Move contents to config_inc.php file.';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tprint_test(\n\t\t\t\"Checking there is no '$t_file' file in 1.2.x location.\",\n\t\t\t!file_exists( $t_dir . $t_file ),\n\t\t\ttrue,\n\t\t\t$t_message\n\t\t);\n\t}\n?>\n\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n} # end install_state == 0\n\n# got database information, check and install\nif( 2 == $t_install_state ) {\n\t# By now user has picked a timezone, ensure it is set\n\tdate_default_timezone_set( $f_timezone );\n?>\n\n<!-- Checking DB support-->\n<?php\n\tprint_test( 'Setting Database Type', '' !== $f_db_type, true, 'database type is blank?' );\n\n\tprint_test( 'Checking PHP support for database type', db_check_database_support( $f_db_type ), true, 'database is not supported by PHP. Check that it has been compiled into your server.' );\n\n\t# ADOdb library version check\n\t# PostgreSQL, Oracle and MSSQL require at least 5.19. MySQL should be fine\n\t# with 5.10 but to simplify we align to the requirement of the others.\n\t$t_adodb_version = substr( $ADODB_vers, 1, strpos( $ADODB_vers, ' ' ) - 1 );\n\tprint_test( 'Checking ADOdb Library version is at least ' . DB_MIN_VERSION_ADODB,\n\t\tversion_compare( $t_adodb_version, DB_MIN_VERSION_ADODB, '>=' ),\n\t\ttrue,\n\t\t'Current version: ' . $ADODB_vers\n\t);\n\n\tprint_test( 'Setting Database Hostname', '' !== $f_hostname, true, 'host name is blank' );\n\tprint_test( 'Setting Database Username', '' !== $f_db_username, true, 'database username is blank' );\n\tprint_test( 'Setting Database Password', '' !== $f_db_password, false, 'database password is blank' );\n\tprint_test( 'Setting Database Name', '' !== $f_database_name || $f_db_type == 'oci8', true, 'database name is blank' );\n\n\tif( $f_db_type == 'db2' ) {\n\t\tprint_test( 'Setting Database Schema', !is_blank( $f_db_schema ), true, 'must have a schema name for AS400 in the form of DBNAME/SCHEMA' );\n\t}\n?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tSetting Admin Username\n\t</td>\n\t<?php\n\t\tif( '' !== $f_admin_username ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result( BAD, false, 'admin user name is blank, using database user instead' );\n\t\t$f_admin_username = $f_db_username;\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tSetting Admin Password\n\t</td>\n\t<?php\n\t\tif( '' !== $f_admin_password ) {\n\t\t\tprint_test_result( GOOD );\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'admin user password is blank, using database user password instead' );\n\t\t\t$f_admin_password = $f_db_password;\n\t\t}\n\t?>\n</tr>\n\n<!-- connect to db -->\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as admin\n\t</td>\n\t<?php\n\t\t$t_db_open = false;\n\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password );\n\n\tif( $t_result ) {\n\n\t\t# check if db exists for the admin\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\t\tif( $t_result ) {\n\t\t\t$t_db_open = true;\n\t\t\t$f_db_exists = true;\n\t\t}\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\tprint_test_result( BAD, true, 'set schema failed: ' . $g_db->errorMsg() );\n\t\t\t}\n\t\t} else {\n\t\t\tprint_test_result( GOOD );\n\t\t}\n\n\t\t# due to a bug in ADODB, this call prompts warnings, hence the @\n\t\t# the check only works on mysql if the database is open\n\t\t$t_version_info = @$g_db->ServerInfo();\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\ttrue,\n\t\t\t'Does administrative user have access to the database? ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t\t$t_version_info = null;\n\t}\n\t?>\n</tr>\n<?php\n\tif( $f_db_exists ) {\n\t\t?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\t\tif( $t_result == true ) {\n\t\t\t$t_db_open = true;\n\t\t\tif( $f_db_type == 'db2' ) {\n\t\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\t\tif( $t_result === false ) {\n\t\t\t\t\tprint_test_result( BAD, true, 'set schema failed: ' . $g_db->errorMsg() );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprint_test_result( GOOD );\n\t\t\t}\n\t\t} else {\n\t\t\tprint_test_result(\n\t\t\t\tBAD,\n\t\t\t\tfalse,\n\t\t\t\t'Database user doesn\\'t have access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t\t);\n\t\t}\n\t\t?>\n</tr>\n\n<?php\n\t}\n\tif( $t_db_open ) {\n\t\t?>\n<!-- display database version -->\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tChecking Database Server Version\n<?php\n\t\tif( isset( $t_version_info['description'] ) ) {\n\t\t\techo '<br /> Running ' . string_attribute( $f_db_type )\n\t\t\t\t. ' version ' . nl2br( $t_version_info['description'] );\n\t\t}\n?>\n\t</td>\n<?php\n\t\t$t_warning = '';\n\t\t$t_error = '';\n\t\tswitch( $f_db_type ) {\n\t\t\tcase 'mysql':\n\t\t\tcase 'mysqli':\n\t\t\t\tif( version_compare( $t_version_info['version'], DB_MIN_VERSION_MYSQL, '<' ) ) {\n\t\t\t\t\t$t_error = 'MySQL ' . DB_MIN_VERSION_MYSQL . ' or later is required for installation.';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'mssql':\n\t\t\tcase 'mssqlnative':\n\t\t\t\tif( version_compare( $t_version_info['version'], DB_MIN_VERSION_MSSQL, '<' ) ) {\n\t\t\t\t\t$t_error = 'SQL Server 2005 (' . DB_MIN_VERSION_MSSQL . ') or later is required for installation.';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'pgsql':\n\t\t\tcase 'db2':\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( is_null( $t_version_info ) ) {\n\t\t\t$t_warning = \"Unable to determine '$f_db_type' version. ($t_error).\";\n\t\t\t$t_error = '';\n\t\t}\n\t\tprint_test_result(\n\t\t\t( '' == $t_error ) && ( '' == $t_warning ),\n\t\t\t( '' != $t_error ),\n\t\t\t$t_error . ' ' . $t_warning\n\t\t);\n?>\n</tr>\n</table>\n<?php\n\t}?>\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t} else {\n\t\t$t_install_state--; # a check failed, redisplay the questions\n\t}\n} # end 2 == $t_install_state\n\n# system checks have passed, get the database information\nif( 1 == $t_install_state ) {\n\t?>\n\n<form method='POST'>\n\n<input name=\"install\" type=\"hidden\" value=\"2\">\n\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">\n\t\t\t<?php echo\n\t\t\t\t( $g_database_upgrade ? 'Upgrade Options' : 'Installation Options' ),\n\t\t\t\t( $g_failed ? ': Checks Failed ' : '' )\n\t\t\t?>\n\t\t</span>\n\t</td>\n</tr>\n\n<?php\n# install-only fields: when upgrading, only display admin username and password\nif( !$g_database_upgrade ) {\n?>\n\n<!-- Database type selection list -->\n<tr>\n\t<td>\n\t\tType of Database\n\t</td>\n\t<td>\n\t\t<!-- Default values for table prefix/suffix -->\n\t\t<div>\n<?php\n\t# These elements are referenced by the db selection list's on change event\n\t# to populate the corresponding fields as appropriate\n\tforeach( $t_prefix_defaults as $t_db_type => $t_defaults ) {\n\t\techo '<div id=\"default_' . $t_db_type . '\" class=\"hidden\">';\n\t\tforeach( $t_defaults as $t_key => $t_value ) {\n\t\t\techo \"\\n\\t\" . '<span name=\"' . $t_key . '\">' . $t_value . '</span>';\n\t\t}\n\t\techo \"\\n\" . '</div>' . \"\\n\";\n\t}\n?>\n\t\t</div>\n\n\t\t<select id=\"db_type\" name=\"db_type\">\n<?php\n\t\t\t# Build selection list of available DB types\n\t\t\t$t_db_list = array(\n\t\t\t\t'mysqli'      => 'MySQL Improved',\n\t\t\t\t'mysql'       => 'MySQL',\n\t\t\t\t'mssqlnative' => 'Microsoft SQL Server Native Driver',\n\t\t\t\t'pgsql'       => 'PostgreSQL',\n\t\t\t\t'oci8'        => 'Oracle',\n\t\t\t\t# Hidden for new installs per #17336\n\t\t\t\t# 'db2'         => 'IBM DB2 (unsupported)',\n\t\t\t);\n\t\t\t# mysql is deprecated as of PHP 5.5.0\n\t\t\tif( version_compare( phpversion(), '5.5.0' ) >= 0 ) {\n\t\t\t\tunset( $t_db_list['mysql']);\n\t\t\t}\n\n\t\t\tforeach( $t_db_list as $t_db => $t_db_descr ) {\n\t\t\t\techo '<option value=\"' . $t_db . '\"' .\n\t\t\t\t\t( $t_db == $f_db_type ? ' selected=\"selected\"' : '' ) . '>' .\n\t\t\t\t\t$t_db_descr . \"</option>\\n\";\n\t\t\t}\n?>\n\t\t</select>\n\t</td>\n</tr>\n\n<!-- Database server hostname -->\n<tr>\n\t<td>\n\t\tHostname (for Database Server)\n\t</td>\n\t<td>\n\t\t<input name=\"hostname\" type=\"textbox\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t</td>\n</tr>\n\n<!-- Database username and password -->\n<tr>\n\t<td>\n\t\tUsername (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"db_username\" type=\"textbox\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t</td>\n</tr>\n\n<tr>\n\t<td>\n\t\tPassword (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"db_password\" type=\"password\" value=\"<?php\n\t\t\techo !is_blank( $f_db_password ) && $t_config_exists\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: $f_db_password;\n\t\t?>\">\n\t</td>\n</tr>\n\n<!-- Database name -->\n<tr>\n\t<td>\n\t\tDatabase name (for Database)\n\t</td>\n\t<td>\n\t\t<input name=\"database_name\" type=\"textbox\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t</td>\n</tr>\n<?php\n} # end install-only fields\n?>\n\n<!-- Admin user and password -->\n<tr>\n\t<td>\n\t\tAdmin Username (to <?php echo( !$g_database_upgrade ) ? 'create Database' : 'update Database'?> if required)\n\t</td>\n\t<td>\n\t\t<input name=\"admin_username\" type=\"textbox\" value=\"<?php echo string_attribute( $f_admin_username ) ?>\">\n\t</td>\n</tr>\n\n<tr>\n\t<td>\n\t\tAdmin Password (to <?php echo( !$g_database_upgrade ) ? 'create Database' : 'update Database'?> if required)\n\t</td>\n\t<td>\n\t\t<input name=\"admin_password\" type=\"password\" value=\"<?php\n\t\t\techo !is_blank( $f_admin_password ) && $f_admin_password == $f_db_password\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_admin_password );\n\t\t?>\">\n\t</td>\n</tr>\n\n<?php\n# install-only fields: when upgrading, only display admin username and password\nif( !$g_database_upgrade ) {\n\t$t_prefix_labels = array(\n\t\t'db_table_prefix'        => 'Database Table Prefix',\n\t\t'db_table_plugin_prefix' => 'Database Plugin Table Prefix',\n\t\t'db_table_suffix'        => 'Database Table Suffix',\n\t);\n\tforeach( $t_prefix_defaults[$t_prefix_type] as $t_key => $t_value ) {\n\t\techo \"<tr>\\n\\t<td>\\n\";\n\t\techo \"\\t\\t\" . $t_prefix_labels[$t_key] . \"\\n\";\n\t\techo \"\\t</td>\\n\\t<td>\\n\\t\\t\";\n\t\techo '<input id=\"' . $t_key . '\" name=\"' . $t_key . '\" type=\"textbox\" value=\"' . $f_db_table_prefix . '\">';\n\t\techo \"\\n\\t</td>\\n</tr>\\n\\n\";\n\t}\n\n\t# Default timezone, get PHP setting if not defined in Mantis\n\t$t_tz = config_get_global( 'default_timezone' );\n\tif( is_blank( $t_tz ) ) {\n\t\t$t_tz = @date_default_timezone_get();\n\t}\n?>\n<!-- Timezone -->\n<tr>\n\t<td>\n\t\tDefault Time Zone\n\t</td>\n\t<td>\n\t\t<select id=\"timezone\" name=\"timezone\">\n\t\t\t<?php print_timezone_option_list( $t_tz ) ?>\n\t\t</select>\n\t</td>\n</tr>\n<?php\n} # end install-only fields\n?>\n\n<!-- Printing SQL queries -->\n<tr>\n\t<td>\n\t\tPrint SQL Queries instead of Writing to the Database\n\t</td>\n\t<td>\n\t\t<input name=\"log_queries\" type=\"checkbox\" value=\"1\" <?php echo( $f_log_queries ? 'checked=\"checked\"' : '' )?>>\n\t</td>\n</tr>\n\n<!-- Submit button -->\n<tr>\n\t<td>\n\t\t<?php echo ( $g_failed\n\t\t\t? 'Please correct failed checks and try again'\n\t\t\t: 'Attempt Installation' );\n\t\t?>\n\t</td>\n\t<td>\n\t\t<input name=\"go\" type=\"submit\" class=\"button\" value=\"Install/Upgrade Database\">\n\t</td>\n</tr>\n\n</table>\n</form>\n\n<?php\n}  # end install_state == 1\n\n# all checks have passed, install the database\nif( 3 == $t_install_state ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installing Database</span>\n\t</td>\n</tr>\n<?php if( !$f_log_queries ) {?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tCreate database if it does not exist\n\t</td>\n\t<?php\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_rs = $g_db->Execute( \"select * from SYSIBM.SCHEMATA WHERE SCHEMA_NAME = '\" . $f_db_schema . \"' AND SCHEMA_OWNER = '\" . $f_db_username . \"'\" );\n\t\t\tif( $t_rs === false ) {\n\t\t\t\techo '<br />false';\n\t\t\t}\n\n\t\t\tif( $t_rs->EOF ) {\n\t\t\t\t$t_result = false;\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t} else {\n\t\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\t}\n\t\t}\n\n\t\t$t_db_open = false;\n\n\t\tif( $t_result == true ) {\n\t\t\tprint_test_result( GOOD );\n\t\t\t$t_db_open = true;\n\t\t} else {\n\t\t\t# create db\n\t\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t\t$t_result = $g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password );\n\n\t\t\t$t_dict = NewDataDictionary( $g_db );\n\n\t\t\tif( $f_db_type == 'db2' ) {\n\t\t\t\t$t_rs = $g_db->Execute( 'CREATE SCHEMA ' . $f_db_schema );\n\n\t\t\t\tif( !$t_rs ) {\n\t\t\t\t\t$t_result = false;\n\t\t\t\t\tprint_test_result(\n\t\t\t\t\t\tBAD,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t'Does administrative user have access to create the database? ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t\t\t\t);\n\t\t\t\t\t$t_install_state--; # db creation failed, allow user to re-enter user/password info\n\t\t\t\t} else {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\t$t_db_open = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_sqlarray = $t_dict->CreateDatabase( $f_database_name, array(\n\t\t\t\t\t'mysql' => 'DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci',\n\t\t\t\t) );\n\t\t\t\t$t_ret = $t_dict->ExecuteSQLArray( $t_sqlarray, false );\n\t\t\t\tif( $t_ret == 2 ) {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\t$t_db_open = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_error = db_error_msg();\n\t\t\t\t\tif( $f_db_type == 'oci8' ) {\n\t\t\t\t\t\t$t_db_exists = preg_match( '/ORA-01920/', $t_error );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_db_exists = strstr( $t_error, 'atabase exists' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $t_db_exists ) {\n\t\t\t\t\t\tprint_test_result(\n\t\t\t\t\t\t\tBAD,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t'Database already exists? ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tprint_test_result(\n\t\t\t\t\t\t\tBAD,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t'Does administrative user have access to create the database? ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t\t\t\t\t);\n\t\t\t\t\t\t$t_install_state--; # db creation failed, allow user to re-enter user/password info\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n</tr>\n<?php\n\t# Close the connection and clear the ADOdb object to free memory\n\t$g_db->Close();\n\t$g_db = null;\n?>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t}\n\t\t}\n\n\t\tif( $t_result == true ) {\n\t\t\tprint_test_result( GOOD );\n\t\t} else {\n\t\t\tprint_test_result(\n\t\t\t\tBAD,\n\t\t\t\tfalse,\n\t\t\t\t'Database user doesn\\'t have access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t\t);\n\t\t}\n\t\t$g_db->Close();\n\t?>\n</tr>\n<?php\n\t}\n\n\t# install the tables\n\tif( false == $g_failed ) {\n\t\t$g_db_connected = false;\n\n\t\t# fake out database access routines used by config_get\n\t\tconfig_set_global( 'db_type', $f_db_type );\n\n\t\t# Initialize table prefixes as specified by user\n\t\tconfig_set_global( 'db_table_prefix', $f_db_table_prefix );\n\t\tconfig_set_global( 'db_table_plugin_prefix', $f_db_table_plugin_prefix );\n\t\tconfig_set_global( 'db_table_suffix', $f_db_table_suffix );\n\t\t# database_api references this\n\t\trequire_once( dirname( __FILE__ ) . '/schema.php' );\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t\t$t_result = @$g_db->Connect( $f_hostname, $f_admin_username, $f_admin_password, $f_database_name );\n\t\tif( !$f_log_queries ) {\n\t\t\t$g_db_connected = true;\n\n\t\t\t# fake out database access routines used by config_get\n\t\t}\n\t\t$t_last_update = config_get( 'database_version', -1, ALL_USERS, ALL_PROJECTS );\n\t\t$t_last_id = count( $g_upgrade ) - 1;\n\t\t$i = $t_last_update + 1;\n\t\tif( $f_log_queries ) {\n\t\t\techo '<tr><td bgcolor=\"#ffffff\" col_span=\"2\"> Database Creation Suppressed, SQL Queries follow <pre>';\n\t\t}\n\n\t\t# Make sure we do the upgrades using UTF-8 if needed\n\t\tif( $f_db_type === 'mysql' || $f_db_type === 'mysqli' ) {\n\t\t\t$g_db->execute( 'SET NAMES UTF8' );\n\t\t}\n\n\t\tif( $f_db_type == 'db2' ) {\n\t\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\t\tif( $t_result === false ) {\n\t\t\t\techo $g_db->errorMsg();\n\t\t\t}\n\t\t}\n\n\t\t$t_dict = NewDataDictionary( $g_db );\n\n\t\t# Special processing for specific schema versions\n\t\t# This allows execution of additional install steps, which are\n\t\t# not a Mantis schema upgrade but nevertheless required due to\n\t\t# changes in the code\n\n\t\tif( $t_last_update > 51 && $t_last_update < 189 ) {\n\t\t\t# Since MantisBT 1.1.0 / ADOdb 4.96 (corresponding to schema 51)\n\t\t\t# 'L' columns are BOOLEAN instead of SMALLINT\n\t\t\t# Check for any DB discrepancies and update columns if needed\n\t\t\t$t_bool_columns = check_pgsql_bool_columns();\n\t\t\tif( $t_bool_columns !== true ) {\n\t\t\t\t# Some columns need converting\n\t\t\t\t$t_msg = \"PostgreSQL: check Boolean columns' actual type\";\n\t\t\t\tif( is_array( $t_bool_columns ) ) {\n\t\t\t\t\tprint_test(\n\t\t\t\t\t\t$t_msg,\n\t\t\t\t\t\tcount( $t_bool_columns ) == 0,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tcount( $t_bool_columns ) . ' columns must be converted to BOOLEAN' );\n\t\t\t\t} else {\n\t\t\t\t\t# We did not get an array => error occured\n\t\t\t\t\tprint_test( $t_msg, false, true, $t_bool_columns );\n\t\t\t\t}\n\n\t\t\t\t# Convert the columns\n\t\t\t\tforeach( $t_bool_columns as $t_row ) {\n\t\t\t\t\textract( $t_row, EXTR_PREFIX_ALL, 'v' );\n\t\t\t\t\t$t_null = $v_is_nullable ? 'NULL' : 'NOT NULL';\n\t\t\t\t\t$t_default = is_null( $v_column_default ) ? 'NULL' : $v_column_default;\n\t\t\t\t\t$t_sqlarray = $t_dict->AlterColumnSQL(\n\t\t\t\t\t\t$v_table_name,\n\t\t\t\t\t\t$v_column_name . ' L ' . $t_null . ' DEFAULT ' . $t_default );\n\t\t\t\t\tprint_test(\n\t\t\t\t\t\t'Converting column ' . $v_table_name . '.' . $v_column_name . ' to BOOLEAN',\n\t\t\t\t\t\t2 == $t_dict->ExecuteSQLArray( $t_sqlarray, false ),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tprint_r( $t_sqlarray, true ) );\n\t\t\t\t\tif( $g_failed ) {\n\t\t\t\t\t\t# Error occured, bail out\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t# End of special processing for specific schema versions\n\n\t\twhile( ( $i <= $t_last_id ) && !$g_failed ) {\n\t\t\tif( !$f_log_queries ) {\n\t\t\t\techo '<tr><td bgcolor=\"#ffffff\">';\n\t\t\t}\n\n\t\t\t$t_sql = true;\n\t\t\t$t_target = $g_upgrade[$i][1][0];\n\n\t\t\tswitch( $g_upgrade[$i][0] ) {\n\t\t\t\tcase 'InsertData':\n\t\t\t\t\t$t_sqlarray = call_user_func_array( $g_upgrade[$i][0], $g_upgrade[$i][1] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'UpdateSQL':\n\t\t\t\t\t$t_sqlarray = array(\n\t\t\t\t\t\t$g_upgrade[$i][1],\n\t\t\t\t\t);\n\t\t\t\t\t$t_target = $g_upgrade[$i][1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'UpdateFunction':\n\t\t\t\t\t$t_sqlarray = array(\n\t\t\t\t\t\t$g_upgrade[$i][1],\n\t\t\t\t\t);\n\t\t\t\t\tif( isset( $g_upgrade[$i][2] ) ) {\n\t\t\t\t\t\t$t_sqlarray[] = $g_upgrade[$i][2];\n\t\t\t\t\t}\n\t\t\t\t\t$t_sql = false;\n\t\t\t\t\t$t_target = $g_upgrade[$i][1];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase null:\n\t\t\t\t\t# No-op upgrade step - required for oci8\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\n\t\t\t\t\t# 0: function to call, 1: function params, 2: function to evaluate before calling upgrade, if false, skip upgrade.\n\t\t\t\t\tif( isset( $g_upgrade[$i][2] ) ) {\n\t\t\t\t\t\tif( call_user_func_array( $g_upgrade[$i][2][0], $g_upgrade[$i][2][1] ) ) {\n\t\t\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_sqlarray = array();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_sqlarray = call_user_func_array( array( $t_dict, $g_upgrade[$i][0] ), $g_upgrade[$i][1] );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif( $f_log_queries ) {\n\t\t\t\tif( $t_sql ) {\n\t\t\t\t\tforeach( $t_sqlarray as $t_sql ) {\n\t\t\t\t\t\t# \"CREATE OR REPLACE TRIGGER\" statements must end with \"END;\\n/\" for Oracle sqlplus\n\t\t\t\t\t\tif( $f_db_type == 'oci8' && stripos( $t_sql, 'CREATE OR REPLACE TRIGGER' ) === 0 ) {\n\t\t\t\t\t\t\t$t_sql_end = PHP_EOL . '/';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_sql_end = ';';\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo htmlentities( $t_sql ) . $t_sql_end . PHP_EOL . PHP_EOL;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo 'Schema step ' . $i . ': ';\n\t\t\t\tif( is_null( $g_upgrade[$i][0] ) ) {\n\t\t\t\t\techo 'No operation';\n\t\t\t\t\t$t_ret = 2;\n\t\t\t\t} else {\n\t\t\t\t\techo $g_upgrade[$i][0] . ' ( ' . $t_target . ' )';\n\t\t\t\t\tif( $t_sql ) {\n\t\t\t\t\t\t$t_ret = $t_dict->ExecuteSQLArray( $t_sqlarray, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( isset( $t_sqlarray[1] ) ) {\n\t\t\t\t\t\t\t$t_ret = call_user_func( 'install_' . $t_sqlarray[0], $t_sqlarray[1] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_ret = call_user_func( 'install_' . $t_sqlarray[0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\techo '</td>';\n\t\t\t\tif( $t_ret == 2 ) {\n\t\t\t\t\tprint_test_result( GOOD );\n\t\t\t\t\tconfig_set( 'database_version', $i );\n\t\t\t\t} else {\n\t\t\t\t\t$t_all_sql = '';\n\t\t\t\t\tif( $t_sql ) {\n\t\t\t\t\t\tforeach( $t_sqlarray as $t_single_sql ) {\n\t\t\t\t\t\t\tif( !empty( $t_single_sql ) ) {\n\t\t\t\t\t\t\t\t$t_all_sql .= $t_single_sql . '<br />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprint_test_result( BAD, true, $t_all_sql  . $g_db->ErrorMsg() );\n\t\t\t\t}\n\t\t\t\techo '</tr>';\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\tif( $f_log_queries ) {\n\t\t\t# add a query to set the database version\n\t\t\techo 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\\'' . $t_last_id . '\\', 1, 90, \\'database_version\\', 0, 0 );' . PHP_EOL;\n\t\t\techo '</pre><br /><p style=\"color:red\">Your database has not been created yet. Please create the database, then install the tables and data using the information above before proceeding.</p></td></tr>';\n\t\t}\n\t}\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t} else {\n\t\t$t_install_state--;\n\t}\n\n\t?>\n</table>\n<?php\n}  # end install_state == 3\n\n# database installed, get any additional information\nif( 4 == $t_install_state ) {\n\n/*\n\t# 20141227 dregad Disabling this step for now, because it does not seem to\n\t# be doing anything useful and can be used to retrieve system information\n\t# when the admin directory has not been deleted (see #17939).\n\n\t# @todo to be written\n\t# must post data gathered to preserve it\n\t?>\n\t\t<input name=\"hostname\" type=\"hidden\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t\t<input name=\"db_type\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_type ) ?>\">\n\t\t<input name=\"database_name\" type=\"hidden\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t\t<input name=\"db_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t\t<input name=\"db_password\" type=\"hidden\" value=\"<?php echo string_attribute( f_db_password ) ?>\">\n\t\t<input name=\"admin_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_admin_username ) ?>\">\n\t\t<input name=\"admin_password\" type=\"hidden\" value=\"<?php echo string_attribute( $f_admin_password ) ?>\">\n\t\t<input name=\"log_queries\" type=\"hidden\" value=\"<?php echo( $f_log_queries ? 1 : 0 )?>\">\n\t\t<input name=\"db_exists\" type=\"hidden\" value=\"<?php echo( $f_db_exists ? 1 : 0 )?>\">\n<?php\n\t# must post <input name=\"install\" type=\"hidden\" value=\"5\">\n\t# rather than the following line\n*/\n\t$t_install_state++;\n}  # end install_state == 4\n\n# all checks have passed, install the database\nif( 5 == $t_install_state ) {\n\t$t_config_exists = file_exists( $t_config_filename );\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Write Configuration File(s)</span>\n\t</td>\n</tr>\n\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\t<?php echo ( $t_config_exists ? 'Updating' : 'Creating' ); ?>\n\t\tConfiguration File (config/config_inc.php)<br />\n\t</td>\n<?php\n\t# Generating the config_inc.php file\n\n\t# Automatically generate a strong master salt/nonce for MantisBT\n\t# cryptographic purposes. If a strong source of randomness is not\n\t# available the user will have to manually set this value post\n\t# installation.\n\t$t_crypto_master_salt = crypto_generate_random_string( 32 );\n\tif( $t_crypto_master_salt !== null ) {\n\t\t$t_crypto_master_salt = base64_encode( $t_crypto_master_salt );\n\t}\n\n\t$t_config = '<?php' . PHP_EOL\n\t\t. '$g_hostname               = \\'' . addslashes( $f_hostname ) . '\\';' . PHP_EOL\n\t\t. '$g_db_type                = \\'' . addslashes( $f_db_type ) . '\\';' . PHP_EOL\n\t\t. '$g_database_name          = \\'' . addslashes( $f_database_name ) . '\\';' . PHP_EOL\n\t\t. '$g_db_username            = \\'' . addslashes( $f_db_username ) . '\\';' . PHP_EOL\n\t\t. '$g_db_password            = \\'' . addslashes( $f_db_password ) . '\\';' . PHP_EOL;\n\n\tswitch( $f_db_type ) {\n\t\tcase 'db2':\n\t\t\t$t_config .=  '$g_db_schema              = \\'' . addslashes( $f_db_schema ) . '\\';' . PHP_EOL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t$t_config .= PHP_EOL;\n\n\t# Add lines for table prefix/suffix if different from default\n\t$t_insert_line = false;\n\tforeach( $t_prefix_defaults['other'] as $t_key => $t_value ) {\n\t\t$t_new_value = ${'f_' . $t_key};\n\t\tif( $t_new_value != $t_value ) {\n\t\t\t$t_config .= '$g_' . str_pad( $t_key, 25 ) . '= \\'' . addslashes( ${'f_' . $t_key} ) . '\\';' . PHP_EOL;\n\t\t\t$t_insert_line = true;\n\t\t}\n\t}\n\tif( $t_insert_line ) {\n\t\t$t_config .= PHP_EOL;\n\t}\n\n\t$t_config .=\n\t\t  '$g_default_timezone       = \\'' . addslashes( $f_timezone ) . '\\';' . PHP_EOL\n\t\t. PHP_EOL\n\t\t. \"\\$g_crypto_master_salt     = '\" . addslashes( $t_crypto_master_salt ) . \"';\" . PHP_EOL;\n\n\t$t_write_failed = true;\n\n\tif( !$t_config_exists ) {\n\t\tif( $t_fd = @fopen( $t_config_filename, 'w' ) ) {\n\t\t\tfwrite( $t_fd, $t_config );\n\t\t\tfclose( $t_fd );\n\t\t}\n\n\t\tif( file_exists( $t_config_filename ) ) {\n\t\t\tprint_test_result( GOOD );\n\t\t\t$t_write_failed = false;\n\t\t} else {\n\t\t\tprint_test_result( BAD, false, 'cannot write ' . $t_config_filename );\n\t\t}\n\t} else {\n\t\t# already exists, see if the information is the same\n\t\tif( ( $f_hostname != config_get( 'hostname', '' ) ) ||\n\t\t\t( $f_db_type != config_get( 'db_type', '' ) ) ||\n\t\t\t( $f_database_name != config_get( 'database_name', '' ) ) ||\n\t\t\t( $f_db_schema != config_get( 'db_schema', '' ) ) ||\n\t\t\t( $f_db_username != config_get( 'db_username', '' ) ) ||\n\t\t\t( $f_db_password != config_get( 'db_password', '' ) ) ) {\n\t\t\tprint_test_result( BAD, false, 'file ' . $t_config_filename . ' already exists and has different settings' );\n\t\t} else {\n\t\t\tprint_test_result( GOOD, false );\n\t\t\t$t_write_failed = false;\n\t\t}\n\t}\n\t?>\n</tr>\n<?php\n\tif( $t_crypto_master_salt === null ) {\n\t\tprint_test( 'Setting Cryptographic salt in config file', false, false,\n\t\t\t\t\t'Unable to find a random number source for cryptographic purposes. You will need to edit ' .\n\t\t\t\t\t$t_config_filename . ' and set a value for $g_crypto_master_salt manually' );\n\t}\n\n\tif( true == $t_write_failed ) {\n?>\n<tr>\n\t<td colspan=\"2\">\n\t\t<table width=\"50%\" cellpadding=\"10\" cellspacing=\"1\">\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\tPlease add the following lines to\n\t\t\t\t\t<em>'<?php echo $t_config_filename; ?>'</em>\n\t\t\t\t\tbefore continuing:\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<pre><?php echo htmlentities( $t_config ); ?></pre>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n</tr>\n<?php\n\t}\n?>\n\n</table>\n\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n}\n\n# end install_state == 5\n\nif( 6 == $t_install_state ) {\n\n\t# post install checks\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Checking Installation</span>\n\t</td>\n</tr>\n\n<!-- Checking register_globals are off -->\n<?php print_test( 'Checking for register_globals are off for mantis', !ini_get_bool( 'register_globals' ), false, 'change php.ini to disable register_globals setting' )?>\n\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tAttempting to connect to database as user\n\t</td>\n\t<?php\n\t\t$g_db = ADONewConnection( $f_db_type );\n\t$t_result = @$g_db->Connect( $f_hostname, $f_db_username, $f_db_password, $f_database_name );\n\n\tif( $t_result == true ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\tfalse,\n\t\t\t'Database user does not have access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t}\n\n\tif( $f_db_type == 'db2' ) {\n\t\t$t_result = $g_db->execute( 'set schema ' . $f_db_schema );\n\t\tif( $t_result === false ) {\n\t\t\techo $g_db->errorMsg();\n\t\t}\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to SELECT records\n\t</td>\n\t<?php\n\t$t_query = 'SELECT COUNT(*) FROM ' . db_get_table( 'config' );\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\ttrue,\n\t\t\t'Database user does not have SELECT access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to INSERT records\n\t</td>\n\t<?php\n\t\t$t_query = 'INSERT INTO ' . db_get_table( 'config' ) . ' ( value, type, access_reqd, config_id, project_id, user_id ) VALUES (\\'test\\', 1, 90, \\'database_test\\', 20, 0 )';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\ttrue,\n\t\t\t'Database user does not have INSERT access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to UPDATE records\n\t</td>\n\t<?php\n\t\t$t_query = 'UPDATE ' . db_get_table( 'config' ) . ' SET value=\\'test_update\\' WHERE config_id=\\'database_test\\'';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\ttrue,\n\t\t\t'Database user does not have UPDATE access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t}\n\t?>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">\n\t\tchecking ability to DELETE records\n\t</td>\n\t<?php\n\t\t$t_query = 'DELETE FROM ' . db_get_table( 'config' ) . ' WHERE config_id=\\'database_test\\'';\n\t$t_result = @$g_db->Execute( $t_query );\n\n\tif( $t_result != false ) {\n\t\tprint_test_result( GOOD );\n\t} else {\n\t\tprint_test_result(\n\t\t\tBAD,\n\t\t\ttrue,\n\t\t\t'Database user does not have DELETE access to the database ( ' . string_attribute( db_error_msg() ) . ' )'\n\t\t);\n\t}\n\t?>\n</tr>\n</table>\n<?php\n\tif( false == $g_failed ) {\n\t\t$t_install_state++;\n\t}\n}\n\n# end install_state == 6\n\nif( 7 == $t_install_state ) {\n\t# cleanup and launch upgrade\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installation Complete</span>\n\t</td>\n</tr>\n<tr bgcolor=\"#ffffff\">\n\t<td>\n\t\tMantisBT was installed successfully.\n<?php if( $f_db_exists ) {?>\n\t\t<a href=\"../login_page.php\">Continue</a> to log in.\n<?php } else { ?>\n\t\tPlease log in as the administrator and <a href=\"../login_page.php\">create</a> your first project.\n<?php } ?>\n\t</td>\n\t<?php print_test_result( GOOD ); ?>\n</tr>\n</table>\n\n<?php\n}\n\n# end install_state == 7\n\nif( $g_failed && $t_install_state != 1 ) {\n\t?>\n<table width=\"100%\" cellpadding=\"10\" cellspacing=\"1\">\n<tr>\n\t<td bgcolor=\"#e8e8e8\" colspan=\"2\">\n\t\t<span class=\"title\">Installation Failed</span>\n\t</td>\n</tr>\n<tr>\n\t<td bgcolor=\"#ffffff\">Please correct failed checks</td>\n\t<td bgcolor=\"#ffffff\">\n<form method='POST'>\n\t\t<input name=\"install\" type=\"hidden\" value=\"<?php echo $t_install_state?>\">\n\t\t<input name=\"hostname\" type=\"hidden\" value=\"<?php echo string_attribute( $f_hostname ) ?>\">\n\t\t<input name=\"db_type\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_type ) ?>\">\n\t\t<input name=\"database_name\" type=\"hidden\" value=\"<?php echo string_attribute( $f_database_name ) ?>\">\n\t\t<input name=\"db_username\" type=\"hidden\" value=\"<?php echo string_attribute( $f_db_username ) ?>\">\n\t\t<input name=\"db_password\" type=\"hidden\" value=\"<?php\n\t\t\techo !is_blank( $f_db_password ) && $t_config_exists\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_db_password );\n\t\t?>\">\n\t\t<input name=\"admin_username\" type=\"hidden\" value=\"<?php echo $f_admin_username?>\">\n\t\t<input name=\"admin_password\" type=\"hidden\" value=\"<?php\n\t\t\techo !is_blank( $f_admin_password ) && $f_admin_password == $f_db_password\n\t\t\t\t? CONFIGURED_PASSWORD\n\t\t\t\t: string_attribute( $f_admin_password );\n\t\t?>\">\n\t\t<input name=\"log_queries\" type=\"hidden\" value=\"<?php echo( $f_log_queries ? 1 : 0 )?>\">\n\t\t<input name=\"db_exists\" type=\"hidden\" value=\"<?php echo( $f_db_exists ? 1 : 0 )?>\">\n\t\t<input name=\"retry\" type=\"submit\" class=\"button\" value=\"Retry\">\n</form>\n\t</td>\n</tr>\n</table>\n<?php\n}\n?>\n</body>\n</html>\n"], "filenames": ["admin/install.php"], "buggy_code_start_loc": [445], "buggy_code_end_loc": [1313], "fixing_code_start_loc": [445], "fixing_code_end_loc": [1358], "type": "CWE-79", "message": "An XSS issue was discovered in admin/install.php in MantisBT before 1.3.12 and 2.x before 2.5.2. Some variables under user control in the MantisBT installation script are not properly sanitized before being output, allowing remote attackers to inject arbitrary JavaScript code, as demonstrated by the $f_database, $f_db_username, and $f_admin_username variables. This is mitigated by the fact that the admin/ folder should be deleted after installation, and also prevented by CSP.", "other": {"cve": {"id": "CVE-2017-12061", "sourceIdentifier": "cve@mitre.org", "published": "2017-08-01T15:29:00.547", "lastModified": "2021-11-01T14:39:29.397", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An XSS issue was discovered in admin/install.php in MantisBT before 1.3.12 and 2.x before 2.5.2. Some variables under user control in the MantisBT installation script are not properly sanitized before being output, allowing remote attackers to inject arbitrary JavaScript code, as demonstrated by the $f_database, $f_db_username, and $f_admin_username variables. This is mitigated by the fact that the admin/ folder should be deleted after installation, and also prevented by CSP."}, {"lang": "es", "value": "Se detect\u00f3 una vulnerabilidad de tipo Cross-Site Scripting (XSS) en admin/install.php en MantisBT en versiones anteriores a la 1.3.12 y todas las 2.X anteriores a la 2.5.2. Algunas variables que est\u00e1n bajo el control de usuarios en el script de instalaci\u00f3n de MantisBT no est\u00e1n sanitizadas correctamente antes de que se env\u00eden, permitiendo a los atacantes remotos inyectar c\u00f3digo JavaScript arbitrario, tal y como lo demuestran las variables $f_database, $f_db_username, y $f_admin_username. Esto se mitiga con el hecho de que se deber\u00eda borrar la carpeta admin/ despu\u00e9s de la instalaci\u00f3n y se evita con una pol\u00edtica de seguridad de contenido (CSP)."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.3.0", "versionEndExcluding": "1.3.12", "matchCriteriaId": "1287A4F6-7331-4B5E-8105-8F66307BC08C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.5.2", "matchCriteriaId": "17391E26-3429-45B8-A8BC-7C95F82F9620"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/08/01/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://openwall.com/lists/oss-security/2017/08/01/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securitytracker.com/id/1039030", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/17f9b94f031ba93ae2a727bca0e68458ecd08fb0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/c73ae3d3d4dd4681489a9e697e8ade785e27cba5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=23146", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/17f9b94f031ba93ae2a727bca0e68458ecd08fb0"}}