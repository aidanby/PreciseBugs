{"buggy_code": ["cmake_minimum_required(VERSION 3.14.6)\nproject(thirdparty_openssl)\n\nset(OPENSSL_VERSION \"1.1.1f\")\n\ninclude(ExternalProject)\n\nfunction(opensslMain)\n\n  get_target_property(zlib_library_dir_path thirdparty_zlib BINARY_DIR)\n  get_target_property(zlib_library_lib_name thirdparty_zlib OUTPUT_NAME)\n  get_target_property(zlib_library_source_dir thirdparty_zlib SOURCE_DIR)\n\n  set(common_options\n    no-ssl2\n    no-ssl3\n    no-asm\n    no-shared\n    no-weak-ssl-ciphers\n    zlib-dynamic\n    enable-cms\n    \"--with-zlib-include=${zlib_library_source_dir}/src\"\n    \"--with-zlib-lib=${zlib_library_dir_path}/${zlib_library_lib_name}\"\n  )\n\n  add_library(thirdparty_openssl_ssl STATIC IMPORTED GLOBAL)\n  add_library(thirdparty_openssl_crypto STATIC IMPORTED GLOBAL)\n\n  if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env \"CC=${CMAKE_C_COMPILER}\" \"AR=${CMAKE_AR}\"\n      perl ./Configure linux-x86_64\n        ${common_options}\n        ${OSQUERY_FORMULA_CFLAGS}\n\n        \"--prefix=${install_prefix}\"\n        \"--openssldir=${install_prefix}/etc/openssl\"\n\n        -fPIC\n        --sysroot=${CMAKE_SYSROOT}\n        -lunwind\n        -lpthread\n    )\n\n    set(build_command\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/etc/openssl\" &&\n      make depend &&\n      make\n    )\n\n    set(install_command\n      make install\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.a\"\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.a\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env \"CC=${CMAKE_C_COMPILER}\" \"AR=${CMAKE_AR}\"\n      perl ./Configure darwin64-x86_64-cc\n        ${common_options}\n        ${OSQUERY_FORMULA_CFLAGS}\n\n        \"--prefix=${install_prefix}\"\n        \"--openssldir=${install_prefix}/etc/openssl\"\n\n        enable-ec_nistp_64_gcc_128\n        -fPIC\n    )\n\n    # Don't be afraid to manually patch the build scripts; for some settings, there is no\n    # other way.\n    # see https://wiki.openssl.org/index.php/Compilation_and_Installation#Modifying_Build_Settings\n    set(build_command\n      /usr/bin/sed -i \".bak\" \"s+^CFLAGS=+CFLAGS=-isysroot ${CMAKE_OSX_SYSROOT} +g\" \"Makefile\" &&\n        \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/etc/openssl\" &&\n        make depend &&\n        make\n    )\n\n    set(install_command\n      make install\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.a\"\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.a\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n    set(CMAKE_PREFIX_PATH \"C:\\\\Strawberry\\\\perl\\\\bin\")\n    find_package(Perl REQUIRED)\n\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env\n      \"${PERL_EXECUTABLE}\" Configure VC-WIN64A\n      ${common_options}\n    )\n\n    get_filename_component(perl_bin_path \"${PERL_EXECUTABLE}\" DIRECTORY)\n\n    string(REPLACE \"/\" \"\\\\\\\\\" perl_executable_path \"${PERL_EXECUTABLE}\")\n\n    set(build_command\n      \"${CMAKE_COMMAND}\" -E env \"cmd.exe\" \"/C\" \"nmake PERL=${perl_executable_path}\"\n    )\n\n    set(install_command\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E copy \"./libssl.lib\" \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E copy \"./libcrypto.lib\" \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/include\" &&\n      \"${CMAKE_COMMAND}\" -E copy_directory \"./include/openssl\" \"${install_prefix}/include/openssl\" &&\n      \"${CMAKE_COMMAND}\" -E remove \"${install_prefix}/include/openssl/__DECC_INCLUDE_PROLOGUE.h\"\n                                   \"${install_prefix}/include/openssl/__DECC_INCLUDE_EPILOGUE.h\"\n                                   \"${install_prefix}/include/openssl/opensslconf.h.in\"\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.lib\"\n      \"${install_prefix}/lib/libcrypto.lib\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.lib\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.lib\"\n    )\n\n  else()\n    message(FATAL_ERROR \"Unsupported system\")\n  endif()\n\n  list(APPEND openssl_c_flags ${OSQUERY_FORMULA_CFLAGS})\n  string(REPLACE \";\" \" \" openssl_c_flags \"${openssl_c_flags}\")\n\n  string(REGEX MATCH \"[0-9]\\.[0-9]\\.[0-9]\" OPENSSL_VERSION_NO_PATCH \"${OPENSSL_VERSION}\")\n\n  set(openssl_urls\n    \"https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz\"\n    \"https://www.openssl.org/source/old/${OPENSSL_VERSION_NO_PATCH}/openssl-${OPENSSL_VERSION}.tar.gz\"\n  )\n\n  ExternalProject_Add(openssl\n    URL \"${openssl_urls}\"\n    URL_HASH SHA256=186c6bfe6ecfba7a5b48c47f8a1673d0f3b0e5ba2e25602dd23b629975da3f35\n    CONFIGURE_COMMAND ${configure_command}\n    BUILD_COMMAND ${build_command}\n    INSTALL_COMMAND \"\"\n    BUILD_IN_SOURCE true\n    EXCLUDE_FROM_ALL true\n  )\n\n  ExternalProject_Get_property(openssl SOURCE_DIR)\n\n  ExternalProject_Add_Step(openssl custom_install\n    COMMAND ${install_command}\n    DEPENDEES build\n    BYPRODUCTS ${openssl_libs}\n    WORKING_DIRECTORY \"${SOURCE_DIR}\"\n  )\n\n  add_library(thirdparty_openssl INTERFACE)\n\n  add_dependencies(thirdparty_openssl_ssl openssl)\n  add_dependencies(thirdparty_openssl_crypto openssl)\n\n  target_include_directories(thirdparty_openssl INTERFACE \"${install_prefix}/include\")\n  target_link_libraries(thirdparty_openssl INTERFACE\n    thirdparty_openssl_ssl\n    thirdparty_openssl_crypto\n  )\nendfunction()\n\nopensslMain()\n"], "fixing_code": ["cmake_minimum_required(VERSION 3.14.6)\nproject(thirdparty_openssl)\n\nset(OPENSSL_VERSION \"1.1.1f\")\n\ninclude(ExternalProject)\n\nfunction(opensslMain)\n\n  set(common_options\n    no-ssl2\n    no-ssl3\n    no-asm\n    no-shared\n    no-weak-ssl-ciphers\n    no-comp\n    enable-cms\n  )\n\n  add_library(thirdparty_openssl_ssl STATIC IMPORTED GLOBAL)\n  add_library(thirdparty_openssl_crypto STATIC IMPORTED GLOBAL)\n\n  if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env \"CC=${CMAKE_C_COMPILER}\" \"AR=${CMAKE_AR}\"\n      perl ./Configure linux-x86_64\n        ${common_options}\n        ${OSQUERY_FORMULA_CFLAGS}\n\n        \"--prefix=${install_prefix}\"\n        \"--openssldir=${install_prefix}/etc/openssl\"\n\n        -fPIC\n        --sysroot=${CMAKE_SYSROOT}\n        -lunwind\n        -lpthread\n    )\n\n    set(build_command\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/etc/openssl\" &&\n      make depend &&\n      make\n    )\n\n    set(install_command\n      make install\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.a\"\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.a\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env \"CC=${CMAKE_C_COMPILER}\" \"AR=${CMAKE_AR}\"\n      perl ./Configure darwin64-x86_64-cc\n        ${common_options}\n        ${OSQUERY_FORMULA_CFLAGS}\n\n        \"--prefix=${install_prefix}\"\n        \"--openssldir=${install_prefix}/etc/openssl\"\n\n        enable-ec_nistp_64_gcc_128\n        -fPIC\n    )\n\n    # Don't be afraid to manually patch the build scripts; for some settings, there is no\n    # other way.\n    # see https://wiki.openssl.org/index.php/Compilation_and_Installation#Modifying_Build_Settings\n    set(build_command\n      /usr/bin/sed -i \".bak\" \"s+^CFLAGS=+CFLAGS=-isysroot ${CMAKE_OSX_SYSROOT} +g\" \"Makefile\" &&\n        \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/etc/openssl\" &&\n        make depend &&\n        make\n    )\n\n    set(install_command\n      make install\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.a\"\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.a\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.a\"\n    )\n\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n    set(CMAKE_PREFIX_PATH \"C:\\\\Strawberry\\\\perl\\\\bin\")\n    find_package(Perl REQUIRED)\n\n    set(configure_command\n      \"${CMAKE_COMMAND}\" -E env\n      \"${PERL_EXECUTABLE}\" Configure VC-WIN64A\n      ${common_options}\n    )\n\n    get_filename_component(perl_bin_path \"${PERL_EXECUTABLE}\" DIRECTORY)\n\n    string(REPLACE \"/\" \"\\\\\\\\\" perl_executable_path \"${PERL_EXECUTABLE}\")\n\n    set(build_command\n      \"${CMAKE_COMMAND}\" -E env \"cmd.exe\" \"/C\" \"nmake PERL=${perl_executable_path}\"\n    )\n\n    set(install_command\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E copy \"./libssl.lib\" \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E copy \"./libcrypto.lib\" \"${install_prefix}/lib\" &&\n      \"${CMAKE_COMMAND}\" -E make_directory \"${install_prefix}/include\" &&\n      \"${CMAKE_COMMAND}\" -E copy_directory \"./include/openssl\" \"${install_prefix}/include/openssl\" &&\n      \"${CMAKE_COMMAND}\" -E remove \"${install_prefix}/include/openssl/__DECC_INCLUDE_PROLOGUE.h\"\n                                   \"${install_prefix}/include/openssl/__DECC_INCLUDE_EPILOGUE.h\"\n                                   \"${install_prefix}/include/openssl/opensslconf.h.in\"\n    )\n\n    set(openssl_libs\n      \"${install_prefix}/lib/libssl.lib\"\n      \"${install_prefix}/lib/libcrypto.lib\"\n    )\n\n    set_target_properties(thirdparty_openssl_ssl PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libssl.lib\"\n    )\n    set_target_properties(thirdparty_openssl_crypto PROPERTIES IMPORTED_LOCATION\n      \"${install_prefix}/lib/libcrypto.lib\"\n    )\n\n  else()\n    message(FATAL_ERROR \"Unsupported system\")\n  endif()\n\n  list(APPEND openssl_c_flags ${OSQUERY_FORMULA_CFLAGS})\n  string(REPLACE \";\" \" \" openssl_c_flags \"${openssl_c_flags}\")\n\n  string(REGEX MATCH \"[0-9]\\.[0-9]\\.[0-9]\" OPENSSL_VERSION_NO_PATCH \"${OPENSSL_VERSION}\")\n\n  set(openssl_urls\n    \"https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz\"\n    \"https://www.openssl.org/source/old/${OPENSSL_VERSION_NO_PATCH}/openssl-${OPENSSL_VERSION}.tar.gz\"\n  )\n\n  ExternalProject_Add(openssl\n    URL \"${openssl_urls}\"\n    URL_HASH SHA256=186c6bfe6ecfba7a5b48c47f8a1673d0f3b0e5ba2e25602dd23b629975da3f35\n    CONFIGURE_COMMAND ${configure_command}\n    BUILD_COMMAND ${build_command}\n    INSTALL_COMMAND \"\"\n    BUILD_IN_SOURCE true\n    EXCLUDE_FROM_ALL true\n  )\n\n  ExternalProject_Get_property(openssl SOURCE_DIR)\n\n  ExternalProject_Add_Step(openssl custom_install\n    COMMAND ${install_command}\n    DEPENDEES build\n    BYPRODUCTS ${openssl_libs}\n    WORKING_DIRECTORY \"${SOURCE_DIR}\"\n  )\n\n  add_library(thirdparty_openssl INTERFACE)\n\n  add_dependencies(thirdparty_openssl_ssl openssl)\n  add_dependencies(thirdparty_openssl_crypto openssl)\n\n  target_include_directories(thirdparty_openssl INTERFACE \"${install_prefix}/include\")\n  target_link_libraries(thirdparty_openssl INTERFACE\n    thirdparty_openssl_ssl\n    thirdparty_openssl_crypto\n  )\nendfunction()\n\nopensslMain()\n"], "filenames": ["libraries/cmake/formula/openssl/CMakeLists.txt"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [24], "fixing_code_start_loc": [9], "fixing_code_end_loc": [17], "type": "CWE-114", "message": "osquery before version 4.4.0 enables a privilege escalation vulnerability. If a Window system is configured with a PATH that contains a user-writable directory then a local user may write a zlib1.dll DLL, which osquery will attempt to load. Since osquery runs with elevated privileges this enables local escalation. This is fixed in version 4.4.0.", "other": {"cve": {"id": "CVE-2020-11081", "sourceIdentifier": "security-advisories@github.com", "published": "2020-07-10T19:15:11.553", "lastModified": "2023-01-20T20:32:50.900", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "osquery before version 4.4.0 enables a privilege escalation vulnerability. If a Window system is configured with a PATH that contains a user-writable directory then a local user may write a zlib1.dll DLL, which osquery will attempt to load. Since osquery runs with elevated privileges this enables local escalation. This is fixed in version 4.4.0."}, {"lang": "es", "value": "osquery versiones anteriores a 4.4.0, habilita una vulnerabilidad de escalada de privilegios. Si un sistema Windows est\u00e1 configurado con una PATH que contiene un directorio escribible por parte del usuario, entonces un usuario local puede escribir una biblioteca DLL zlib1.dll, que osquery intentar\u00e1 cargar. Ya que osquery se ejecuta con privilegios elevados, esto permite una escalada local. Esto es corregido en la versi\u00f3n 4.4.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.5, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-114"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-426"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:osquery:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.4.0", "matchCriteriaId": "6C2CBEA8-4F6B-429A-BBBC-4E7BA6BF5414"}]}]}], "references": [{"url": "https://github.com/osquery/osquery/commit/4d4957f12a6aa0becc9d01d9f97061e1e3d809c5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/osquery/osquery/issues/6426", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/osquery/osquery/pull/6433", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/osquery/osquery/releases/tag/4.4.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/osquery/osquery/security/advisories/GHSA-2xwp-8fv7-c5pm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osquery/osquery/commit/4d4957f12a6aa0becc9d01d9f97061e1e3d809c5"}}