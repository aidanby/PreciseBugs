{"buggy_code": ["<?php\nnamespace um\\admin\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\admin\\core\\Admin_Settings' ) ) {\n\n\n\t/**\n\t * Class Admin_Settings\n\t * @package um\\admin\\core\n\t */\n\tclass Admin_Settings {\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $settings_structure;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $previous_licenses;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $need_change_permalinks;\n\n\n\t\tvar $gravatar_changed = false;\n\n\n\t\t/**\n\t\t * Admin_Settings constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\t//init settings structure\n\t\t\tadd_action( 'admin_init', array( &$this, 'init_variables' ), 9 );\n\n\t\t\t//admin menu\n\t\t\tadd_action( 'admin_menu', array( &$this, 'primary_admin_menu' ), 0 );\n\n\t\t\t//settings structure handlers\n\t\t\tadd_action( 'um_settings_page_before_email__content', array( $this, 'settings_before_email_tab' ) );\n\t\t\tadd_filter( 'um_settings_section_email__content', array( $this, 'settings_email_tab' ), 10, 1 );\n\n\t\t\t//enqueue wp_media for profiles tab\n\t\t\tadd_action( 'um_settings_page_appearance__before_section', array( $this, 'settings_appearance_profile_tab' ) );\n\n\t\t\t//custom content for licenses tab\n\t\t\tadd_filter( 'um_settings_section_licenses__content', array( $this, 'settings_licenses_tab' ), 10, 2 );\n\n\t\t\tadd_filter( 'um_settings_section_install_info__content', array( $this, 'settings_install_info_tab' ), 10, 2 );\n\n\n\t\t\tadd_filter( 'um_settings_structure', array( $this, 'sorting_licenses_options' ), 9999, 1 );\n\n\n\t\t\t//save handlers\n\t\t\tadd_action( 'admin_init', array( $this, 'save_settings_handler' ), 10 );\n\n\t\t\t//save pages options\n\t\t\tadd_action( 'um_settings_before_save', array( $this, 'check_permalinks_changes' ) );\n\t\t\tadd_action( 'um_settings_save', array( $this, 'on_settings_save' ) );\n\n\n\t\t\tadd_filter( 'um_change_settings_before_save', array( $this, 'save_email_templates' ) );\n\n\n\t\t\t//save licenses options\n\t\t\tadd_action( 'um_settings_before_save', array( $this, 'before_licenses_save' ) );\n\t\t\tadd_action( 'um_settings_save', array( $this, 'licenses_save' ) );\n\n\t\t\tadd_filter( 'um_change_settings_before_save', array( $this, 'remove_empty_values' ), 10, 1 );\n\n\t\t\tadd_action( 'admin_init', array( &$this, 'um_download_install_info' ) );\n\t\t}\n\n\n\n\t\tfunction same_page_update_ajax() {\n\t\t\tUM()->admin()->check_ajax_nonce();\n\n\t\t\tif ( empty( $_POST['cb_func'] ) ) {\n\t\t\t\twp_send_json_error( __( 'Wrong callback', 'ultimate-member' ) );\n\t\t\t}\n\n\t\t\tif ( 'um_usermeta_fields' == $_POST['cb_func'] ) {\n\t\t\t\t//first install metatable\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$metakeys = array();\n\t\t\t\tforeach ( UM()->builtin()->all_user_fields as $all_user_field ) {\n\t\t\t\t\tif ( $all_user_field['type'] == 'user_location' ) {\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_lat';\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_lng';\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_url';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( is_multisite() ) {\n\n\t\t\t\t\t$sites = get_sites( array( 'fields' => 'ids' ) );\n\t\t\t\t\tforeach ( $sites as $blog_id ) {\n\t\t\t\t\t\t$metakeys[] = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t$blog_id = get_current_blog_id();\n\t\t\t\t\t$metakeys[] = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';\n\t\t\t\t}\n\n\t\t\t\t//member directory data\n\t\t\t\t$metakeys[] = 'um_member_directory_data';\n\n\t\t\t\t$skip_fields = UM()->builtin()->get_fields_without_metakey();\n\t\t\t\t$skip_fields = array_merge( $skip_fields, UM()->member_directory()->core_search_fields );\n\n\t\t\t\t$real_usermeta = $wpdb->get_col( \"SELECT DISTINCT meta_key FROM {$wpdb->usermeta}\" );\n\t\t\t\t$real_usermeta = ! empty( $real_usermeta ) ? $real_usermeta : array();\n\t\t\t\t$real_usermeta = array_merge( $real_usermeta, array( 'um_member_directory_data' ) );\n\n\t\t\t\t$wp_usermeta_option = array_intersect( array_diff( $metakeys, $skip_fields ), $real_usermeta );\n\n\t\t\t\tupdate_option( 'um_usermeta_fields', $wp_usermeta_option );\n\n\t\t\t\tupdate_option( 'um_member_directory_update_meta', time() );\n\n\t\t\t\tUM()->options()->update( 'member_directory_own_table', true );\n\n\t\t\t\twp_send_json_success();\n\t\t\t} elseif ( 'um_get_metadata' == $_POST['cb_func'] ) {\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$wp_usermeta_option = get_option( 'um_usermeta_fields', array() );\n\n\t\t\t\t$count = $wpdb->get_var(\n\t\t\t\t\t\"SELECT COUNT(*) \n\t\t\t\t\tFROM {$wpdb->usermeta} \n\t\t\t\t\tWHERE meta_key IN ('\" . implode( \"','\", $wp_usermeta_option ) . \"')\"\n\t\t\t\t);\n\n\t\t\t\twp_send_json_success( array( 'count' => $count ) );\n\t\t\t} elseif ( 'um_update_metadata_per_page' == $_POST['cb_func'] ) {\n\n\t\t\t\tif ( empty( $_POST['page'] ) ) {\n\t\t\t\t\twp_send_json_error( __( 'Wrong data', 'ultimate-member' ) );\n\t\t\t\t}\n\n\t\t\t\t$per_page = 50;\n\t\t\t\t$wp_usermeta_option = get_option( 'um_usermeta_fields', array() );\n\n\t\t\t\tglobal $wpdb;\n\t\t\t\t$metadata = $wpdb->get_results( $wpdb->prepare(\n\t\t\t\t\t\"SELECT * \n\t\t\t\t\tFROM {$wpdb->usermeta} \n\t\t\t\t\tWHERE meta_key IN ('\" . implode( \"','\", $wp_usermeta_option ) . \"')\n\t\t\t\t\tLIMIT %d, %d\",\n\t\t\t\t\t( $_POST['page'] - 1 ) * $per_page,\n\t\t\t\t\t$per_page\n\t\t\t\t), ARRAY_A );\n\n\t\t\t\tforeach ( $metadata as $metarow ) {\n\t\t\t\t\t$wpdb->insert(\n\t\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'user_id'   => $metarow['user_id'],\n\t\t\t\t\t\t\t'um_key'    => $metarow['meta_key'],\n\t\t\t\t\t\t\t'um_value'  => $metarow['meta_value'],\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'%d',\n\t\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$from = ( $_POST['page'] * $per_page ) - $per_page + 1;\n\t\t\t\t$to = $_POST['page'] * $per_page;\n\n\t\t\t\twp_send_json_success( array( 'message' => sprintf( __( 'Metadata from %s to %s was upgraded successfully...', 'ultimate-member' ), $from, $to ) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_variables() {\n\t\t\t$general_pages_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'pages_settings',\n\t\t\t\t\t'type'      => 'hidden',\n\t\t\t\t\t'value'     => true,\n\t\t\t\t\t'is_option' => false\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$core_pages = UM()->config()->core_pages;\n\n\t\t\tforeach ( $core_pages as $page_s => $page ) {\n\t\t\t\t$have_pages = UM()->query()->wp_pages();\n\t\t\t\t$page_id = UM()->options()->get_core_page_id( $page_s );\n\n\t\t\t\t$page_title = ! empty( $page['title'] ) ? $page['title'] : '';\n\n\t\t\t\tif ( 'reached_maximum_limit' == $have_pages ) {\n\t\t\t\t\t$general_pages_fields[] = array(\n\t\t\t\t\t\t'id'            => $page_id,\n\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t'label'         => sprintf( __( '%s page', 'ultimate-member' ), $page_title ),\n\t\t\t\t\t\t'placeholder'   => __( 'Add page ID', 'ultimate-member' ),\n\t\t\t\t\t\t'compiler'      => true,\n\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$general_pages_fields[] = array(\n\t\t\t\t\t\t'id'            => $page_id,\n\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t'label'         => sprintf( __( '%s page', 'ultimate-member' ), $page_title ),\n\t\t\t\t\t\t'options'       => UM()->query()->wp_pages(),\n\t\t\t\t\t\t'placeholder'   => __( 'Choose a page...', 'ultimate-member' ),\n\t\t\t\t\t\t'compiler'      => true,\n\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$appearances_profile_menu_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'profile_menu',\n\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t'label' => __( 'Enable profile menu', 'ultimate-member' ),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$tabs = UM()->profile()->tabs();\n\n\t\t\t$tabs_options = array();\n\t\t\t$tabs_condition = array();\n\t\t\tforeach ( $tabs as $id => $tab ) {\n\n\t\t\t\tif ( ! empty( $tab['hidden'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $tab['name'] ) ) {\n\t\t\t\t\t$tabs_options[ $id ] = $tab['name'];\n\t\t\t\t\t$tabs_condition[] = 'profile_tab_' . $id;\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $tab['default_privacy'] ) ) {\n\t\t\t\t\t$fields = array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id,\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => sprintf( __( '%s Tab', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t\t\t\t'data'          => array( 'fill_profile_menu_default_tab' => $id ),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\n\t\t\t\t\t$fields = array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id,\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => sprintf( __( '%s Tab', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t\t\t\t'data'          => array( 'fill_profile_menu_default_tab' => $id ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id . '_privacy',\n\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t'label'         => sprintf( __( 'Who can see %s Tab?', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'Select which users can view this tab.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'       => UM()->profile()->tabs_privacy(),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_tab_' . $id, '=', 1 ),\n\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id . '_roles',\n\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t'multi'         => true,\n\t\t\t\t\t\t\t'label'         => __( 'Allowed roles', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'Select the the user roles allowed to view this tab.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'       => UM()->roles()->get_roles(),\n\t\t\t\t\t\t\t'placeholder'   => __( 'Choose user roles...', 'ultimate-member' ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_tab_' . $id . '_privacy', '=', 4 ),\n\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$appearances_profile_menu_fields = array_merge( $appearances_profile_menu_fields, $fields );\n\t\t\t}\n\n\t\t\t$appearances_profile_menu_fields[] = array(\n\t\t\t\t'id'            => 'profile_menu_default_tab',\n\t\t\t\t'type'          => 'select',\n\t\t\t\t'label'         => __( 'Profile menu default tab', 'ultimate-member' ),\n\t\t\t\t'tooltip'       => __( 'This will be the default tab on user profile page', 'ultimate-member' ),\n\t\t\t\t'options'       => $tabs_options,\n\t\t\t\t'conditional'   => array( implode( '|', $tabs_condition ), '~', 1 ),\n\t\t\t\t'size'          => 'small'\n\t\t\t);\n\n\t\t\t$appearances_profile_menu_fields = array_merge( $appearances_profile_menu_fields, array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'profile_menu_icons',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Enable menu icons in desktop view', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t),\n\t\t\t) );\n\n\t\t\t$post_types_options = array();\n\t\t\t$all_post_types = get_post_types( array( 'public' => true ), 'objects' );\n\t\t\tforeach ( $all_post_types as $key => $post_type_data ) {\n\t\t\t\t$post_types_options[ $key ] = $post_type_data->labels->singular_name;\n\t\t\t}\n\n\t\t\t$taxonomies_options = array();\n\t\t\t$exclude_taxonomies = UM()->excluded_taxonomies();\n\t\t\t$all_taxonomies = get_taxonomies( array( 'public' => true ), 'objects' );\n\t\t\t$duplicates = array();\n\t\t\tforeach ( $all_taxonomies as $key => $taxonomy ) {\n\t\t\t\tif ( in_array( $key , $exclude_taxonomies ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( ! in_array( $taxonomy->labels->singular_name, $duplicates ) ) {\n\t\t\t\t\t$duplicates[] = $taxonomy->labels->singular_name;\n\t\t\t\t\t$label = $taxonomy->labels->singular_name;\n\t\t\t\t} else {\n\t\t\t\t\t$label = $taxonomy->labels->singular_name . ' (' . $key . ')';\n\t\t\t\t}\n\n\t\t\t\t$taxonomies_options[ $key ] = $label;\n\t\t\t}\n\n\t\t\t$restricted_access_post_metabox_value = array();\n\t\t\tif ( $restricted_access_post_metabox = UM()->options()->get( 'restricted_access_post_metabox' ) ) {\n\t\t\t\tforeach ( $restricted_access_post_metabox as $key => $value ) {\n\t\t\t\t\tif ( $value ) {\n\t\t\t\t\t\t$restricted_access_post_metabox_value[] = $key;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$restricted_access_taxonomy_metabox_value = array();\n\t\t\tif ( $restricted_access_taxonomy_metabox = UM()->options()->get( 'restricted_access_taxonomy_metabox' ) ) {\n\t\t\t\tforeach ( $restricted_access_taxonomy_metabox as $key => $value ) {\n\t\t\t\t\tif ( $value ) {\n\t\t\t\t\t\t$restricted_access_taxonomy_metabox_value[] = $key;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$access_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'accessible',\n\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t'label'     => __( 'Global Site Access', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Globally control the access of your site, you can have seperate restrict options per post/page by editing the desired item.', 'ultimate-member' ),\n\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t0   => __( 'Site accessible to Everyone', 'ultimate-member' ),\n\t\t\t\t\t\t2   => __( 'Site accessible to Logged In Users', 'ultimate-member' ),\n\t\t\t\t\t),\n\t\t\t\t\t'size'      => 'medium',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'access_redirect',\n\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t'label'         => __( 'Custom Redirect URL', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'       => __( 'A logged out user will be redirected to this url If he is not permitted to access the site', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'                    => 'access_exclude_uris',\n\t\t\t\t\t'type'                  => 'multi_text',\n\t\t\t\t\t'label'                 => __( 'Exclude the following URLs', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'               => __( 'Here you can exclude URLs beside the redirect URI to be accessible to everyone', 'ultimate-member' ),\n\t\t\t\t\t'add_text'              => __( 'Add New URL', 'ultimate-member' ),\n\t\t\t\t\t'conditional'           => array( 'accessible', '=', 2 ),\n\t\t\t\t\t'show_default_number'   => 1,\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'home_page_accessible',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Allow Homepage to be accessible', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'category_page_accessible',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Allow Category pages to be accessible', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_message',\n\t\t\t\t\t'type'      => 'wp_editor',\n\t\t\t\t\t'label'     => __( 'Restricted Access Message', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'This is the message shown to users that do not have permission to view the content', 'ultimate-member' ),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tglobal $wp_version;\n\t\t\tif ( version_compare( $wp_version, '5.0', '>=' ) ) {\n\t\t\t\t$access_fields = array_merge( $access_fields, array( array(\n\t\t\t\t\t'id'    => 'restricted_blocks',\n\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t'label' => __( 'Allow Gutenberg Blocks restriction options', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'restricted_block_message',\n\t\t\t\t\t'type'          => 'textarea',\n\t\t\t\t\t'label'         => __( 'Restricted Block Message', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'       => __( 'This is the message shown to users that do not have permission to view the block\\'s content', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'restricted_blocks', '=', 1 ),\n\t\t\t\t) ) );\n\t\t\t}\n\t\t\t$access_fields = array_merge( $access_fields, array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'restricted_access_post_metabox',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => '',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'restricted_access_taxonomy_metabox',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => '',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_post_metabox',\n\t\t\t\t\t'type'      => 'multi_checkbox',\n\t\t\t\t\t'label'     => __( 'Restricted Access to Posts', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Restriction content of the current Posts', 'ultimate-member' ),\n\t\t\t\t\t'options'   => $post_types_options,\n\t\t\t\t\t'columns'   => 3,\n\t\t\t\t\t'value'     => $restricted_access_post_metabox_value,\n\t\t\t\t\t'default'   => UM()->options()->get_default( 'restricted_access_post_metabox' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_taxonomy_metabox',\n\t\t\t\t\t'type'      => 'multi_checkbox',\n\t\t\t\t\t'label'     => __( 'Restricted Access to Taxonomies', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Restriction content of the current Taxonomies', 'ultimate-member' ),\n\t\t\t\t\t'options'   => $taxonomies_options,\n\t\t\t\t\t'columns'   => 3,\n\t\t\t\t\t'value'     => $restricted_access_taxonomy_metabox_value,\n\t\t\t\t\t'default'   => UM()->options()->get_default( 'restricted_access_taxonomy_metabox' ),\n\t\t\t) ) );\n\n\t\t\t$latest_update = get_option( 'um_member_directory_update_meta', false );\n\t\t\t$latest_truncate = get_option( 'um_member_directory_truncated', false );\n\n\t\t\t$same_page_update = array(\n\t\t\t\t'id'        => 'member_directory_own_table',\n\t\t\t\t'type'      => 'same_page_update',\n\t\t\t\t'label'     => __( 'Enable custom table for usermeta', 'ultimate-member' ),\n\t\t\t\t'tooltip'   => __( 'Check this box if you would like to enable the use of a custom table for user metadata. Improved performance for member directory searches.', 'ultimate-member' ),\n\t\t\t);\n\n\t\t\tif ( empty( $latest_update ) || ( ! empty( $latest_truncate ) && $latest_truncate > $latest_update ) ) {\n\t\t\t\t$same_page_update['upgrade_cb'] = 'sync_metatable';\n\t\t\t\t$same_page_update['upgrade_description'] = '<p>' . __( 'We recommend creating a backup of your site before running the update process. Do not exit the page before the update process has complete.', 'ultimate-member' ) . '</p>\n<p>' . __( 'After clicking the <strong>\"Run\"</strong> button, the update process will start. All information will be displayed in the field below.', 'ultimate-member' ) . '</p>\n<p>' . __( 'If the update was successful, you will see a corresponding message. Otherwise, contact technical support if the update failed.', 'ultimate-member' ) . '</p>';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_settings_structure\n\t\t\t * @description Extend UM Settings\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Settings\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_settings_structure', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_settings_structure', 'my_settings_structure', 10, 1 );\n\t\t\t * function my_settings_structure( $settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->settings_structure = apply_filters( 'um_settings_structure', array(\n\t\t\t\t''              => array(\n\t\t\t\t\t'title'     => __( 'General', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''          => array(\n\t\t\t\t\t\t\t'title'     => __( 'Pages', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $general_pages_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'users'     => array(\n\t\t\t\t\t\t\t'title'     => __( 'Users', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'permalink_base',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'size'          => 'small',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Permalink Base','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Here you can control the permalink structure of the user profile URL globally e.g. ' . trailingslashit( um_get_core_page('user') ) . '<strong>username</strong>/','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'user_login' \t\t=> __( 'Username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name' \t\t\t\t=> __( 'First and Last Name with \\'.\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name_dash' \t\t=> __( 'First and Last Name with \\'-\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name_plus' \t\t=> __( 'First and Last Name with \\'+\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'user_id' \t\t\t=> __( 'User ID', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'placeholder'   => __( 'Select...', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'display_name',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'size'          => 'medium',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'User Display Name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'This is the name that will be displayed for users on the front end of your site. Default setting uses first/last name as display name if it exists', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'default'\t\t\t=> __( 'Default WP Display Name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'nickname'\t\t\t=> __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'username' \t\t\t=> __( 'Username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'full_name' \t\t=> __( 'First name & last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'sur_name' \t\t\t=> __( 'Last name & first name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'initial_name'\t\t=> __( 'First name & first initial of last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'initial_name_f'\t=> __( 'First initial of first name & last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'first_name'\t\t=> __( 'First name only', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'field' \t\t\t=> __( 'Custom field(s)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'placeholder'   => __( 'Select...', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'display_name_field',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Display Name Custom Field(s)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Specify the custom field meta key or custom fields seperated by comma that you want to use to display users name on the frontend of your site', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'display_name', '=', 'field' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'author_redirect',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Automatically redirect author page to their profile?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'If enabled, author pages will automatically redirect to the user\\'s profile page', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'members_page',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Enable Members Directory', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Control whether to enable or disable member directories on this site', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'use_gravatars',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Use Gravatars?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Do you want to use gravatars instead of the default plugin profile photo (If the user did not upload a custom profile photo / avatar)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'use_um_gravatar_default_builtin_image',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Use Gravatar builtin image', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Gravatar has a number of built in options which you can also use as defaults', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'default'   => __( 'Default', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'404'       => __( '404 ( File Not Found response )', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'mm'        => __( 'Mystery Man', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'identicon' => __( 'Identicon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'monsterid' => __( 'Monsterid', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'wavatar'   => __( 'Wavatar', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'retro'     => __( 'Retro', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'blank'     => __( 'Blank ( a transparent PNG image )', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'use_gravatars', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'use_um_gravatar_default_image',\n\t\t\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Use Default plugin avatar as Gravatar\\'s Default avatar', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Do you want to use the plugin default avatar instead of the gravatar default photo (If the user did not upload a custom profile photo / avatar)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'use_um_gravatar_default_builtin_image', '=', 'default' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'reset_require_strongpass',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Require a strong password? (when user resets password only)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Enable or disable a strong password rules on password reset and change procedure', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'account'   => array(\n\t\t\t\t\t\t\t'title'     => __( 'Account', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_password',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Password Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> 'Enable/disable the Password account tab in account page',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_privacy',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Privacy Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Privacy account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_notifications',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Notifications Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Notifications account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_delete',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Delete Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Delete account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'delete_account_text',\n\t\t\t\t\t\t\t\t\t'type'    \t\t=> 'textarea', // bug with wp 4.4? should be editor\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Account Deletion Custom Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('This is custom text that will be displayed to users before they delete their accounts from your site','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'args'     \t\t=> array(\n\t\t\t\t\t\t\t\t\t\t'textarea_rows'    => 6\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Add a First & Last Name fields','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to enable these fields on the user account page by default or hide them.','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name_disable',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Disable First & Last Name fields','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to allow users changing their first and last name in account page.','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'conditional'\t\t=> array( 'account_name', '=', '1' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name_require',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Require First & Last Name','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Require first and last name?','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'conditional'\t\t=> array( 'account_name', '=', '1' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_email',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Allow users to change e-mail','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Whether to allow users changing their email in account page.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'account_general_password',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Password is required?','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Password is required to save account data.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_hide_in_directory',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Allow users to hide their profiles from directory','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to allow users changing their profile visibility from member directory in account page.','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_require_strongpass',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Require a strong password?','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable or disable a strong password rules on account page / change password tab','ultimate-member'),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'uploads'   => array(\n\t\t\t\t\t\t\t'title'     => __( 'Uploads', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'profile_photo_max_size',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Profile Photo Maximum File Size (bytes)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Sets a maximum size for the uploaded photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_photo_max_size',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Maximum File Size (bytes)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Sets a maximum size for the uploaded cover', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'photo_thumb_sizes',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'multi_text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Profile Photo Thumbnail Sizes (px)','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Here you can define which thumbnail sizes will be created for each profile photo upload.','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate' \t\t=> 'numeric',\n\t\t\t\t\t\t\t\t\t'add_text'\t\t=> __('Add New Size','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'show_default_number' => 1,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_thumb_sizes',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'multi_text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Thumbnail Sizes (px)','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Here you can define which thumbnail sizes will be created for each cover photo upload.','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate' \t\t=> 'numeric',\n\t\t\t\t\t\t\t\t\t'add_text'\t\t=> __('Add New Size','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'show_default_number' => 1,\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'image_compression',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Image Quality','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Quality is used to determine quality of image uploads, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default range is 60.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'image_max_width',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Image Upload Maximum Width (px)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Any image upload above this width will be resized to this limit automatically.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_min_width',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Minimum Width (px)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'This will be the minimum width for cover photo uploads', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'access'        => array(\n\t\t\t\t\t'title'     => __( 'Access', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''      => array(\n\t\t\t\t\t\t\t'title'     => __( 'Restriction Content', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $access_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'other' => array(\n\t\t\t\t\t\t\t'title'     => __( 'Other', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'    => 'enable_reset_password_limit',\n\t\t\t\t\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label' => __( 'Enable the Reset Password Limit?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'reset_password_limit_number',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Reset Password Limit', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Set the maximum reset password limit. If reached the maximum limit, user will be locked from using this.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate'      => 'numeric',\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'enable_reset_password_limit', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'blocked_emails',\n\t\t\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Blocked Email Addresses', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will block the specified e-mail addresses from being able to sign up or sign in to your site. To block an entire domain, use something like *@domain.com', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'blocked_words',\n\t\t\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Blacklist Words', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This option lets you specify blacklist of words to prevent anyone from signing up with such a word as their username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'email'         => array(\n\t\t\t\t\t'title'     => __( 'Email', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'admin_email',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'Admin E-mail Address', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. admin@companyname.com','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'mail_from',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'Mail appears from','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. Site Name','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'mail_from_addr',\n\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t'label'         => __( 'Mail appears from address','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. admin@companyname.com','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'email_html',\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => __( 'Use HTML for E-mails?','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'If you plan use e-mails with HTML, please make sure that this option is enabled. Otherwise, HTML will be displayed as plain text.','ultimate-member'),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'appearance'    => array(\n\t\t\t\t\t'title'     => __( 'Appearance', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''                  => array(\n\t\t\t\t\t\t\t'title'     => __( 'Profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_template' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'profile' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_area_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Area Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_area_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width of the profile area inside profile (below profile header)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This is applicable for edit mode only', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Primary Button Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_primary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for updating profile button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_secondary_btn' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The text that is used for cancelling update profile button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'                    => 'default_avatar',\n\t\t\t\t\t\t\t\t\t'type'                  => 'media',\n\t\t\t\t\t\t\t\t\t'label'                 => __( 'Default Profile Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'               => __( 'You can change the default profile picture globally here. Please make sure that the photo is 300x300px.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'upload_frame_title'    => __( 'Select Default Profile Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'               => array(\n\t\t\t\t\t\t\t\t\t\t'url'   => um_url . 'assets/img/default_avatar.jpg',\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'                    => 'default_cover',\n\t\t\t\t\t\t\t\t\t'type'                  => 'media',\n\t\t\t\t\t\t\t\t\t'url'                   => true,\n\t\t\t\t\t\t\t\t\t'preview'               => false,\n\t\t\t\t\t\t\t\t\t'label'                 => __( 'Default Cover Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'               => __( 'You can change the default cover photo globally here. Please make sure that the default cover is large enough and respects the ratio you are using for cover photos.', 'ultimate-member'),\n\t\t\t\t\t\t\t\t\t'upload_frame_title'    => __( 'Select Default Cover Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'disable_profile_photo_upload',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Disable Profile Photo Upload', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the profile photo uploader', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'disable_profile_photo_upload' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_photosize',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Photo Size', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_photosize' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->files()->get_profile_photo_size( 'photo_thumb_sizes' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The global default of profile photo size. This can be overridden by individual form settings', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_cover_enabled',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Cover Photos', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_cover_enabled' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the profile cover photos', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_coversize',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Cover Size', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_coversize' ),\n\t\t\t\t\t\t\t\t\t'options'       => UM()->files()->get_profile_photo_size( 'cover_thumb_sizes' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The global default width of cover photo size. This can be overridden by individual form settings', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_cover_enabled', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_cover_ratio',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Cover Ratio', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Choose global ratio for cover photos of profiles', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_cover_ratio' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'1.6:1' => '1.6:1',\n\t\t\t\t\t\t\t\t\t\t'2.7:1' => '2.7:1',\n\t\t\t\t\t\t\t\t\t\t'2.2:1' => '2.2:1',\n\t\t\t\t\t\t\t\t\t\t'3.2:1' => '3.2:1',\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_cover_enabled', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_metaicon',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Header Meta Text Icon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 0,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Display field icons for related user meta fields in header or not', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_name',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show display name in profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_name' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the user name on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_social_links',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show social links in profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_social_links' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the social links on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_bio',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show user description in header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_bio' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the user description on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_html_bio',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Enable HTML support for user description', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off to enable/disable support for html tags on user description.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_bio_maxchars',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'User description maximum chars', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_bio_maxchars' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Maximum number of characters to allow in user description field in header.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_show_bio', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_header_menu',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Header Menu Position', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_header_menu' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'For incompatible themes, please make the menu open from left instead of bottom by default.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'bc'    => __( 'Bottom of Icon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'lc'    => __( 'Left of Icon (right for RTL)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_empty_text',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show a custom message if profile is empty', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_empty_text' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the custom message that appears when the profile is empty', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_empty_text_emo',\n\t\t\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Show the emoticon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_empty_text_emo' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Switch on/off the emoticon (sad face) that appears above the message', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_empty_text', '=', 1 ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'profile_menu'      => array(\n\t\t\t\t\t\t\t'title'     => __( 'Profile Menu', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $appearances_profile_menu_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'registration_form' => array(\n\t\t\t\t\t\t\t'title'     => __( 'Registration Form', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output registration', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_template'),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'register' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_max_width'),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_align',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Shortcode Alignment', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The shortcode is centered by default unless you specify otherwise here', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_align' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'center'    => __( 'Centered', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'left'      => __( 'Left aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'right'     => __( 'Right aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the display of field icons in the registration form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Primary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_primary_btn_word'),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for primary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'register_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Registration Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'register_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The text that is used for the secondary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'register_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'register_secondary_btn_url',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Registration Secondary Button URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault('register_secondary_btn_url'),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'You can replace default link for this button by entering custom URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'register_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_role',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Default Role', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default role assigned to users registering thru registration form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_role' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->roles()->get_roles( $add_default = 'Default' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'login_form'        => array(\n\t\t\t\t\t\t\t'title'     => __( 'Login Form', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output login', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_template' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'login' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_align',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Shortcode Alignment', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The shortcode is centered by default unless you specify otherwise here', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_align' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'center'    => __( 'Centered', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'left'      => __( 'Left aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'right'     => __( 'Right aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the display of field icons in the login form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Primary Button Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_primary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for primary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'login_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Login Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'login_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __('The text that is used for the secondary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'login_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'login_secondary_btn_url',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Login Secondary Button URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'login_secondary_btn_url' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'You can replace default link for this button by entering custom URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'login_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_forgot_pass_link',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Forgot Password Link', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the forgot password link in login form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_show_rememberme',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show \"Remember Me\"', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Allow users to choose If they want to stay signed in even after closing the browser. If you do not show this option, the default will be to not remember login session.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'extensions'    => array(\n\t\t\t\t\t'title' => __( 'Extensions', 'ultimate-member' )\n\t\t\t\t),\n\t\t\t\t'licenses'      => array(\n\t\t\t\t\t'title' => __( 'Licenses', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\t'misc'          => array(\n\t\t\t\t\t'title'     => __( 'Misc', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'    => 'form_asterisk',\n\t\t\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t\t\t'label' => __( 'Show an asterisk for required fields', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'profile_title',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'User Profile Title', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This is the title that is displayed on a specific user profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'profile_desc',\n\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t'label'     => __( 'User Profile Dynamic Meta Description', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This will be used in the meta description that is available for search-engines.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'args'      => array(\n\t\t\t\t\t\t\t\t'textarea_rows' => 6\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'um_profile_object_cache_stop',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Disable Cache User Profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like to disable Ultimate Member user\\'s cache.', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'enable_blocks',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Enable Gutenberg Blocks', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like to use Ultimate Member blocks in Gutenberg editor. Important some themes have the conflicts with Gutenberg editor.', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'rest_api_version',\n\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t'label'     => __( 'REST API version','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the REST API version, we recommend to use the last version', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t'1.0'   => __( '1.0 version', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t'2.0'   => __( '2.0 version', 'ultimate-member' ),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$same_page_update,\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'uninstall_on_delete',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Remove Data on Uninstall?', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like Ultimate Member to completely remove all of its data when the plugin/extensions are deleted.', 'ultimate-member' ),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'install_info'  => array(\n\t\t\t\t\t'title'     => __( 'Install Info', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'type'  => 'install_info',\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t) );\n\n\t\t}\n\n\n\t\t/**\n\t\t * @param $settings\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction sorting_licenses_options( $settings ) {\n\t\t\t//sorting  licenses\n\t\t\tif ( empty( $settings['licenses']['fields'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$licenses = $settings['licenses']['fields'];\n\t\t\t@uasort( $licenses, function( $a, $b ) {\n\t\t\t\treturn strnatcasecmp( $a[\"label\"], $b[\"label\"] );\n\t\t\t} );\n\t\t\t$settings['licenses']['fields'] = $licenses;\n\n\t\t\t//sorting extensions\n\t\t\tif ( empty( $settings['extensions']['sections'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$extensions = $settings['extensions']['sections'];\n\t\t\t@uasort( $extensions, function( $a, $b ) {\n\t\t\t\treturn strnatcasecmp( $a[\"title\"], $b[\"title\"] );\n\t\t\t} );\n\n\t\t\t$keys = array_keys( $extensions );\n\t\t\tif ( $keys[0] != \"\" ) {\n\t\t\t\t$new_key = strtolower( str_replace( \" \", \"_\", $extensions[\"\"]['title'] ) );\n\t\t\t\t$temp = $extensions[\"\"];\n\t\t\t\t$extensions[$new_key] = $temp;\n\t\t\t\t$extensions[\"\"] = $extensions[$keys[0]];\n\t\t\t\tunset( $extensions[$keys[0]] );\n\t\t\t\t@uasort( $extensions, function( $a, $b ) {\n\t\t\t\t\treturn strnatcasecmp( $a[\"title\"], $b[\"title\"] );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t$settings['extensions']['sections'] = $extensions;\n\n\t\t\treturn $settings;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $tab\n\t\t * @param $section\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction get_section_fields( $tab, $section ) {\n\n\t\t\tif ( empty( $this->settings_structure[ $tab ] ) ) {\n\t\t\t\treturn array();\n\t\t\t}\n\n\t\t\tif ( ! empty( $this->settings_structure[ $tab ]['sections'][ $section ]['fields'] ) ) {\n\t\t\t\treturn $this->settings_structure[ $tab ]['sections'][ $section ]['fields'];\n\t\t\t} elseif ( ! empty( $this->settings_structure[ $tab ]['fields'] ) ) {\n\t\t\t\treturn $this->settings_structure[ $tab ]['fields'];\n\t\t\t}\n\n\t\t\treturn array();\n\t\t}\n\n\n\t\t/**\n\t\t * Setup admin menu\n\t\t */\n\t\tfunction primary_admin_menu() {\n\t\t\tadd_submenu_page( 'ultimatemember', __( 'Settings', 'ultimate-member' ), __( 'Settings', 'ultimate-member' ), 'manage_options', 'um_options', array( &$this, 'settings_page' ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Settings page callback\n\t\t */\n\t\tfunction settings_page() {\n\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t$current_subtab = empty( $_GET['section'] ) ? '' : urldecode( $_GET['section'] );\n\n\t\t\t$settings_struct = $this->settings_structure[$current_tab];\n\n\t\t\t//remove not option hidden fields\n\t\t\tif ( ! empty( $settings_struct['fields'] ) ) {\n\t\t\t\tforeach ( $settings_struct['fields'] as $field_key => $field_options ) {\n\n\t\t\t\t\tif ( isset( $field_options['is_option'] ) && $field_options['is_option'] === false ) {\n\t\t\t\t\t\tunset( $settings_struct['fields'][ $field_key ] );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $settings_struct['fields'] ) && empty( $settings_struct['sections'] ) ) {\n\t\t\t\tum_js_redirect( add_query_arg( array( 'page' => 'um_options' ), admin_url( 'admin.php' ) ) );\n\t\t\t}\n\n\t\t\tif ( ! empty( $settings_struct['sections'] ) ) {\n\t\t\t\tif ( empty( $settings_struct['sections'][ $current_subtab ] ) ) {\n\t\t\t\t\tum_js_redirect( add_query_arg( array( 'page' => 'um_options', 'tab' => $current_tab ), admin_url( 'admin.php' ) ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo '<div id=\"um-settings-wrap\" class=\"wrap\"><h2>' .  __( 'Ultimate Member - Settings', 'ultimate-member' ) . '</h2>';\n\n\t\t\techo $this->generate_tabs_menu() . $this->generate_subtabs_menu( $current_tab );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_settings_page_before_{$current_tab}_{$current_subtab}_content\n\t\t\t * @description Show some content before settings page content\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_settings_page_before_{$current_tab}_{$current_subtab}_content', 'function_name', 10 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_settings_page_before_{$current_tab}_{$current_subtab}_content', 'my_settings_page_before', 10 );\n\t\t\t * function my_settings_page_before() {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_settings_page_before_\" . $current_tab . \"_\" . $current_subtab . \"_content\" );\n\n\t\t\tif ( in_array( $current_tab, apply_filters('um_settings_custom_tabs', array( 'licenses', 'install_info' ) ) ) || in_array( $current_subtab, apply_filters( 'um_settings_custom_subtabs', array(), $current_tab ) ) ) {\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_page_{$current_tab}_{$current_subtab}_before_section\n\t\t\t\t * @description Show some content before section content at settings page\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'my_settings_page_before_section', 10 );\n\t\t\t\t * function my_settings_page_before_section() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( \"um_settings_page_\" . $current_tab . \"_\" . $current_subtab . \"_before_section\" );\n\n\t\t\t\t$section_fields = $this->get_section_fields( $current_tab, $current_subtab );\n\t\t\t\t$settings_section = $this->render_settings_section( $section_fields, $current_tab, $current_subtab );\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_settings_section_{$current_tab}_{$current_subtab}_content\n\t\t\t\t *\n\t\t\t\t * @description Render settings section\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$content\",\"type\":\"string\",\"desc\":\"Section content\"},\n\t\t\t\t * {\"var\":\"$section_fields\",\"type\":\"array\",\"desc\":\"Section Fields\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'function_name', 10, 2 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'my_settings_section', 10, 2 );\n\t\t\t\t * function my_settings_section( $content ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $content;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'um_settings_section_' . $current_tab . '_' . $current_subtab . '_content',\n\t\t\t\t\t$settings_section,\n\t\t\t\t\t$section_fields\n\t\t\t\t);\n\n\t\t\t} else { ?>\n\n\t\t\t\t<form method=\"post\" action=\"\" name=\"um-settings-form\" id=\"um-settings-form\">\n\t\t\t\t\t<input type=\"hidden\" value=\"save\" name=\"um-settings-action\" />\n\n\t\t\t\t\t<?php\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type action\n\t\t\t\t\t * @title um_settings_page_{$current_tab}_{$current_subtab}_before_section\n\t\t\t\t\t * @description Show some content before section content at settings page\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'function_name', 10 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'my_settings_page_before_section', 10 );\n\t\t\t\t\t * function my_settings_page_before_section() {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\tdo_action( \"um_settings_page_\" . $current_tab . \"_\" . $current_subtab . \"_before_section\" );\n\n\t\t\t\t\t$section_fields = $this->get_section_fields( $current_tab, $current_subtab );\n\t\t\t\t\t$settings_section = $this->render_settings_section( $section_fields, $current_tab, $current_subtab );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type filter\n\t\t\t\t\t * @title um_settings_section_{$current_tab}_{$current_subtab}_content\n\t\t\t\t\t * @description Render settings section\n\t\t\t\t\t * @input_vars\n\t\t\t\t\t * [{\"var\":\"$content\",\"type\":\"string\",\"desc\":\"Section content\"},\n\t\t\t\t\t * {\"var\":\"$section_fields\",\"type\":\"array\",\"desc\":\"Section Fields\"}]\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'function_name', 10, 2 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'my_settings_section', 10, 2 );\n\t\t\t\t\t * function my_settings_section( $content ) {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t *     return $content;\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\techo apply_filters( 'um_settings_section_' . $current_tab . '_' . $current_subtab . '_content',\n\t\t\t\t\t\t$settings_section,\n\t\t\t\t\t\t$section_fields\n\t\t\t\t\t); ?>\n\n\n\t\t\t\t\t<p class=\"submit\">\n\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Save Changes', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\n\t\t\t<?php }\n\t\t}\n\n\n\t\t/**\n\t\t * Generate pages tabs\n\t\t *\n\t\t * @param string $page\n\t\t * @return string\n\t\t */\n\t\tfunction generate_tabs_menu( $page = 'settings' ) {\n\n\t\t\t$tabs = '<h2 class=\"nav-tab-wrapper um-nav-tab-wrapper\">';\n\n\t\t\tswitch( $page ) {\n\t\t\t\tcase 'settings':\n\t\t\t\t\t$menu_tabs = array();\n\t\t\t\t\tforeach ( $this->settings_structure as $slug => $tab ) {\n\t\t\t\t\t\tif ( ! empty( $tab['fields'] ) ) {\n\t\t\t\t\t\t\tforeach ( $tab['fields'] as $field_key => $field_options ) {\n\t\t\t\t\t\t\t\tif ( isset( $field_options['is_option'] ) && $field_options['is_option'] === false ) {\n\t\t\t\t\t\t\t\t\tunset( $tab['fields'][ $field_key ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $tab['fields'] ) || ! empty( $tab['sections'] ) ) {\n\t\t\t\t\t\t\t$menu_tabs[ $slug ] = $tab['title'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t\t\tforeach ( $menu_tabs as $name => $label ) {\n\t\t\t\t\t\t$active = ( $current_tab == $name ) ? 'nav-tab-active' : '';\n\t\t\t\t\t\t$tabs .= '<a href=\"' . esc_url( admin_url( 'admin.php?page=um_options' . ( empty( $name ) ? '' : '&tab=' . $name ) ) ) . '\" class=\"nav-tab ' . $active . '\">' .\n\t\t\t\t\t\t         $label .\n\t\t\t\t\t\t         '</a>';\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type filter\n\t\t\t\t\t * @title um_generate_tabs_menu_{$page}\n\t\t\t\t\t * @description Generate tabs menu\n\t\t\t\t\t * @input_vars\n\t\t\t\t\t * [{\"var\":\"$tabs\",\"type\":\"array\",\"desc\":\"UM menu tabs\"}]\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_filter( 'um_generate_tabs_menu_{$page}', 'function_name', 10, 1 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_filter( 'um_generate_tabs_menu_{$page}', 'my_tabs_menu', 10, 1 );\n\t\t\t\t\t * function my_tabs_menu( $tabs ) {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t *     return $tabs;\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\t$tabs = apply_filters( 'um_generate_tabs_menu_' . $page, $tabs );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn $tabs . '</h2>';\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $tab\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction generate_subtabs_menu( $tab = '' ) {\n\t\t\tif ( empty( $this->settings_structure[ $tab ]['sections'] ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$menu_subtabs = array();\n\t\t\tforeach ( $this->settings_structure[ $tab ]['sections'] as $slug => $subtab ) {\n\t\t\t\t$menu_subtabs[ $slug ] = $subtab['title'];\n\t\t\t}\n\n\t\t\t$subtabs = '<div><ul class=\"subsubsub\">';\n\n\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t$current_subtab = empty( $_GET['section'] ) ? '' : urldecode( $_GET['section'] );\n\t\t\tforeach ( $menu_subtabs as $name => $label ) {\n\t\t\t\t$active = ( $current_subtab == $name ) ? 'current' : '';\n\t\t\t\t$subtabs .= '<a href=\"' . esc_url( admin_url( 'admin.php?page=um_options' . ( empty( $current_tab ) ? '' : '&tab=' . $current_tab ) . ( empty( $name ) ? '' : '&section=' . $name ) ) ) . '\" class=\"' . $active . '\">'\n\t\t\t\t            . $label .\n\t\t\t\t            '</a> | ';\n\t\t\t}\n\n\t\t\treturn substr( $subtabs, 0, -3 ) . '</ul></div>';\n\t\t}\n\n\n\t\t/**\n\t\t * Handler for settings forms\n\t\t * when \"Save Settings\" button click\n\t\t *\n\t\t */\n\t\tfunction save_settings_handler() {\n\n\t\t\tif ( isset( $_POST['um-settings-action'] ) && 'save' == $_POST['um-settings-action'] && ! empty( $_POST['um_options'] ) ) {\n\n\t\t\t\t$nonce = ! empty( $_POST['__umnonce'] ) ? $_POST['__umnonce'] : '';\n\n\t\t\t\tif ( ( ! wp_verify_nonce( $nonce, 'um-settings-nonce' ) || empty( $nonce ) ) || ! current_user_can( 'manage_options' ) ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\twp_die( 'Security Check' );\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_before_save\n\t\t\t\t * @description Before settings save action\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_before_save', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_before_save', 'my_settings_before_save', 10 );\n\t\t\t\t * function my_settings_before_save() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( \"um_settings_before_save\" );\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_change_settings_before_save\n\t\t\t\t * @description Change settings before save\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Settings on save\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_filter( 'um_change_settings_before_save', 'function_name', 10, 1 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_change_settings_before_save', 'my_change_settings_before_save', 10, 1 );\n\t\t\t\t * function my_change_settings_before_save( $settings ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $settings;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$settings = apply_filters( 'um_change_settings_before_save', $_POST['um_options'] );\n\n\t\t\t\tforeach ( $settings as $key => $value ) {\n\t\t\t\t\tUM()->options()->update( $key, $value );\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_save\n\t\t\t\t * @description After settings save action\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_save', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_save', 'my_settings_save', 10 );\n\t\t\t\t * function my_settings_save() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( 'um_settings_save' );\n\n\t\t\t\t//redirect after save settings\n\t\t\t\t$arg = array(\n\t\t\t\t\t'page' => 'um_options',\n\t\t\t\t);\n\n\t\t\t\tif ( ! empty( $_GET['tab'] ) ) {\n\t\t\t\t\t$arg['tab'] = $_GET['tab'];\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $_GET['section'] ) ) {\n\t\t\t\t\t$arg['section'] = $_GET['section'];\n\t\t\t\t}\n\n\t\t\t\tum_js_redirect( add_query_arg( $arg, admin_url( 'admin.php' ) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Remove empty values from multi text fields\n\t\t *\n\t\t * @param $settings\n\t\t * @return array\n\t\t */\n\t\tfunction remove_empty_values( $settings ) {\n\t\t\t$tab = '';\n\t\t\tif ( ! empty( $_GET['tab'] ) ) {\n\t\t\t\t$tab = $_GET['tab'];\n\t\t\t}\n\n\t\t\t$section = '';\n\t\t\tif ( ! empty( $_GET['section'] ) ) {\n\t\t\t\t$section = $_GET['section'];\n\t\t\t}\n\n\t\t\tif ( isset( $this->settings_structure[ $tab ]['sections'][ $section ]['fields'] ) ) {\n\t\t\t\t$fields = $this->settings_structure[ $tab ]['sections'][ $section ]['fields'];\n\t\t\t} else {\n\t\t\t\t$fields = $this->settings_structure[ $tab ]['fields'];\n\t\t\t}\n\n\t\t\tif ( empty( $fields ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\n\t\t\t$filtered_settings = array();\n\t\t\tforeach ( $settings as $key => $value ) {\n\n\t\t\t\t$filtered_settings[ $key ] = $value;\n\n\t\t\t\tforeach ( $fields as $field ) {\n\t\t\t\t\tif ( $field['id'] == $key && isset( $field['type'] ) && $field['type'] == 'multi_text' ) {\n\t\t\t\t\t\t$filtered_settings[ $key ] = array_filter( $settings[ $key ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $filtered_settings;\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction check_permalinks_changes() {\n\t\t\tif ( ! empty( $_POST['um_options']['permalink_base'] ) ) {\n\t\t\t\tif ( UM()->options()->get( 'permalink_base' ) != $_POST['um_options']['permalink_base'] ) {\n\t\t\t\t\t$this->need_change_permalinks = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set variable if gravatar settings were changed\n\t\t\t// update for um_member_directory_data metakey\n\t\t\tif ( isset( $_POST['um_options']['use_gravatars'] ) ) {\n\t\t\t\t$use_gravatar = UM()->options()->get( 'use_gravatars' );\n\t\t\t\tif ( ( empty( $use_gravatar ) && ! empty( $_POST['um_options']['use_gravatars'] ) ) || ( ! empty( $use_gravatar ) && empty( $_POST['um_options']['use_gravatars'] ) ) ) {\n\t\t\t\t\t$this->gravatar_changed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction on_settings_save() {\n\t\t\tif ( ! empty( $_POST['um_options'] ) ) {\n\n\t\t\t\tif ( ! empty( $_POST['um_options']['pages_settings'] ) ) {\n\t\t\t\t\t$post_ids = new \\WP_Query( array(\n\t\t\t\t\t\t'post_type' => 'page',\n\t\t\t\t\t\t'meta_query' => array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_core',\n\t\t\t\t\t\t\t\t'compare'   => 'EXISTS'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'posts_per_page' => -1,\n\t\t\t\t\t\t'fields'        => 'ids'\n\t\t\t\t\t) );\n\n\t\t\t\t\t$post_ids = $post_ids->get_posts();\n\n\t\t\t\t\tif ( ! empty( $post_ids ) ) {\n\t\t\t\t\t\tforeach ( $post_ids as $post_id ) {\n\t\t\t\t\t\t\tdelete_post_meta( $post_id, '_um_core' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ( $_POST['um_options'] as $option_slug => $post_id ) {\n\t\t\t\t\t\t$slug = str_replace( 'core_', '', $option_slug );\n\t\t\t\t\t\tupdate_post_meta( $post_id, '_um_core', $slug );\n\t\t\t\t\t}\n\n\t\t\t\t\t// reset rewrite rules after re-save pages\n\t\t\t\t\tUM()->rewrite()->reset_rules();\n\n\t\t\t\t} elseif ( ! empty( $_POST['um_options']['permalink_base'] ) ) {\n\t\t\t\t\tif ( ! empty( $this->need_change_permalinks ) ) {\n\t\t\t\t\t\t$users = get_users( array(\n\t\t\t\t\t\t\t'fields' => 'ids',\n\t\t\t\t\t\t) );\n\t\t\t\t\t\tif ( ! empty( $users ) ) {\n\t\t\t\t\t\t\tforeach ( $users as $user_id ) {\n\t\t\t\t\t\t\t\tUM()->user()->generate_profile_slug( $user_id );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// update for um_member_directory_data metakey\n\t\t\t\t\tif ( isset( $_POST['um_options']['use_gravatars'] ) ) {\n\t\t\t\t\t\tif ( $this->gravatar_changed ) {\n\t\t\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\t\t\tif ( ! empty( $_POST['um_options']['use_gravatars'] ) ) {\n\n\t\t\t\t\t\t\t\t$results = $wpdb->get_col(\n\t\t\t\t\t\t\t\t\t\"SELECT u.ID FROM {$wpdb->users} AS u \n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um ON ( um.user_id = u.ID AND um.meta_key = 'synced_gravatar_hashed_id' )\n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um2 ON ( um2.user_id = u.ID AND um2.meta_key = 'um_member_directory_data' )\n\t\t\t\t\t\t\t\t\tWHERE um.meta_value != '' AND um.meta_value IS NOT NULL AND\n\t\t\t\t\t\t\t\t\t\tum2.meta_value LIKE '%s:13:\\\"profile_photo\\\";b:0;%'\"\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t$results = $wpdb->get_col(\n\t\t\t\t\t\t\t\t\t\"SELECT u.ID FROM {$wpdb->users} AS u \n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um ON ( um.user_id = u.ID AND ( um.meta_key = 'synced_profile_photo' || um.meta_key = 'profile_photo' ) )\n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um2 ON ( um2.user_id = u.ID AND um2.meta_key = 'um_member_directory_data' )\n\t\t\t\t\t\t\t\t\tWHERE ( um.meta_value IS NULL OR um.meta_value = '' ) AND\n\t\t\t\t\t\t\t\t\t\tum2.meta_value LIKE '%s:13:\\\"profile_photo\\\";b:1;%'\"\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( ! empty( $results ) ) {\n\t\t\t\t\t\t\t\tforeach ( $results as $user_id ) {\n\t\t\t\t\t\t\t\t\t$md_data = get_user_meta( $user_id, 'um_member_directory_data', true );\n\t\t\t\t\t\t\t\t\tif ( ! empty( $md_data ) ) {\n\t\t\t\t\t\t\t\t\t\t$md_data['profile_photo'] = ! empty( $_POST['um_options']['use_gravatars'] );\n\t\t\t\t\t\t\t\t\t\tupdate_user_meta( $user_id, 'um_member_directory_data', $md_data );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} elseif ( isset( $_POST['um_options']['member_directory_own_table'] ) ) {\n\t\t\t\t\tif ( empty( $_POST['um_options']['member_directory_own_table'] ) ) {\n\t\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\t\t$results = $wpdb->get_row( \"SELECT * FROM {$wpdb->prefix}um_metadata LIMIT 1\", ARRAY_A );\n\n\t\t\t\t\t\tif ( ! empty( $results ) ) {\n\t\t\t\t\t\t\t$wpdb->query(\"TRUNCATE TABLE {$wpdb->prefix}um_metadata\" );\n\t\t\t\t\t\t\tupdate_option( 'um_member_directory_truncated', time() );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction before_licenses_save() {\n\t\t\tif ( empty( $_POST['um_options'] ) || empty( $_POST['licenses_settings'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $_POST['um_options'] as $key => $value ) {\n\t\t\t\t$this->previous_licenses[ $key ] = UM()->options()->get( $key );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction licenses_save() {\n\t\t\tif ( empty( $_POST['um_options'] ) || empty( $_POST['licenses_settings'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $_POST['um_options'] as $key => $value ) {\n\t\t\t\t$edd_action = '';\n\t\t\t\t$license_key = '';\n\t\t\t\tif ( empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) || ( ! empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) && $this->previous_licenses[ $key ] != $value ) ) {\n\t\t\t\t\t$edd_action = 'activate_license';\n\t\t\t\t\t$license_key = $value;\n\t\t\t\t} elseif ( ! empty( $this->previous_licenses[ $key ] ) && empty( $value ) ) {\n\t\t\t\t\t$edd_action = 'deactivate_license';\n\t\t\t\t\t$license_key = $this->previous_licenses[ $key ];\n\t\t\t\t} elseif ( ! empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) ) {\n\t\t\t\t\t$edd_action = 'check_license';\n\t\t\t\t\t$license_key = $value;\n\t\t\t\t}\n\n\t\t\t\tif ( empty( $edd_action ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$item_name = false;\n\t\t\t\t$version = false;\n\t\t\t\t$author = false;\n\t\t\t\tforeach ( $this->settings_structure['licenses']['fields'] as $field_data ) {\n\t\t\t\t\tif ( $field_data['id'] == $key ) {\n\t\t\t\t\t\t$item_name = ! empty( $field_data['item_name'] ) ? $field_data['item_name'] : false;\n\t\t\t\t\t\t$version = ! empty( $field_data['version'] ) ? $field_data['version'] : false;\n\t\t\t\t\t\t$author = ! empty( $field_data['author'] ) ? $field_data['author'] : false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$api_params = array(\n\t\t\t\t\t'edd_action' => $edd_action,\n\t\t\t\t\t'license'    => $license_key,\n\t\t\t\t\t'item_name'  => $item_name,\n\t\t\t\t\t'version'    => $version,\n\t\t\t\t\t'author'     => $author,\n\t\t\t\t\t'url'        => home_url(),\n\t\t\t\t);\n\n\t\t\t\t$request = wp_remote_post(\n\t\t\t\t\tUM()->store_url,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'timeout'   => UM()->request_timeout,\n\t\t\t\t\t\t'sslverify' => false,\n\t\t\t\t\t\t'body'      => $api_params\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_wp_error( $request ) ) {\n\t\t\t\t\t$request = json_decode( wp_remote_retrieve_body( $request ) );\n\t\t\t\t}\n\n\t\t\t\t$request = ( $request ) ? maybe_unserialize( $request ) : false;\n\n\t\t\t\tif ( $edd_action == 'activate_license' || $edd_action == 'check_license' ) {\n\t\t\t\t\tupdate_option( \"{$key}_edd_answer\", $request );\n\t\t\t\t} else {\n\t\t\t\t\tdelete_option( \"{$key}_edd_answer\" );\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction settings_before_email_tab() {\n\t\t\t$email_key = empty( $_GET['email'] ) ? '' : urldecode( $_GET['email'] );\n\t\t\t$emails = UM()->config()->email_notifications;\n\n\t\t\tif ( empty( $email_key ) || empty( $emails[ $email_key ] ) ) {\n\t\t\t\tinclude_once um_path . 'includes/admin/core/list-tables/emails-list-table.php';\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param $section\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction settings_email_tab( $section ) {\n\t\t\t$email_key = empty( $_GET['email'] ) ? '' : urldecode( $_GET['email'] );\n\t\t\t$emails = UM()->config()->email_notifications;\n\n\t\t\tif ( empty( $email_key ) || empty( $emails[ $email_key ] ) ) {\n\t\t\t\treturn $section;\n\t\t\t}\n\n\t\t\t$in_theme = UM()->mail()->template_in_theme( $email_key );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_admin_settings_email_section_fields\n\t\t\t * @description Extend UM Email Settings\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Email Settings\"},\n\t\t\t * {\"var\":\"$email_key\",\"type\":\"string\",\"desc\":\"Email Key\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_admin_settings_email_section_fields', 'function_name', 10, 2 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_admin_settings_email_section_fields', 'my_admin_settings_email_section', 10, 2 );\n\t\t\t * function my_admin_settings_email_section( $settings, $email_key ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$section_fields = apply_filters( 'um_admin_settings_email_section_fields', array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'um_email_template',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => $email_key,\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => $email_key . '_on',\n\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t'label'     => $emails[ $email_key ]['title'],\n\t\t\t\t\t'tooltip'   => $emails[ $email_key ]['description'],\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => $email_key . '_sub',\n\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t'label'         => __( 'Subject Line', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( $email_key . '_on', '=', 1 ),\n\t\t\t\t\t'tooltip'       => __( 'This is the subject line of the e-mail', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => $email_key,\n\t\t\t\t\t'type'          => 'email_template',\n\t\t\t\t\t'label'         => __( 'Message Body', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( $email_key . '_on', '=', 1 ),\n\t\t\t\t\t'tooltip'       => __( 'This is the content of the e-mail', 'ultimate-member' ),\n\t\t\t\t\t'value'         => UM()->mail()->get_email_template( $email_key ),\n\t\t\t\t\t'in_theme'      => $in_theme\n\t\t\t\t),\n\t\t\t), $email_key );\n\n\t\t\treturn $this->render_settings_section( $section_fields, 'email', $email_key );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction settings_appearance_profile_tab() {\n\t\t\twp_enqueue_media();\n\t\t}\n\n\n\t\t/**\n\t\t * @param $html\n\t\t * @param $section_fields\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction settings_licenses_tab( $html, $section_fields ) {\n\t\t\tob_start(); ?>\n\n\t\t\t<div class=\"wrap-licenses\">\n\t\t\t\t<input type=\"hidden\" id=\"licenses_settings\" name=\"licenses_settings\" value=\"1\">\n\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t<table class=\"form-table um-settings-section\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<?php foreach ( $section_fields as $field_data ) {\n\t\t\t\t\t\t$option_value = UM()->options()->get( $field_data['id'] );\n\t\t\t\t\t\t$value = isset( $option_value ) && ! empty( $option_value ) ? $option_value : ( isset( $field_data['default'] ) ? $field_data['default'] : '' );\n\n\t\t\t\t\t\t$license = get_option( \"{$field_data['id']}_edd_answer\" );\n\n\t\t\t\t\t\tif ( is_object( $license ) && ! empty( $value ) ) {\n\t\t\t\t\t\t\t// activate_license 'invalid' on anything other than valid, so if there was an error capture it\n\t\t\t\t\t\t\tif ( empty( $license->success ) ) {\n\n\t\t\t\t\t\t\t\tif ( ! empty( $license->error ) ) {\n\t\t\t\t\t\t\t\t\tswitch ( $license->error ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'expired' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'expired';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expired on %s. Please <a href=\"%s\" target=\"_blank\">renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=expired'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'revoked' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key has been disabled. Please <a href=\"%s\" target=\"_blank\">contact support</a> for more information.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/support?utm_campaign=admin&utm_source=licenses&utm_medium=revoked'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'missing' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Invalid license. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> and verify it.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=missing'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'invalid' :\n\t\t\t\t\t\t\t\t\t\tcase 'site_inactive' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your %s is not active for this URL. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> to manage your license key URLs.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t$field_data['item_name'],\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=invalid'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'item_name_mismatch' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'This appears to be an invalid license key for %s.', 'ultimate-member' ), $field_data['item_name'] );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'no_activations_left':\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'Your license key has reached its activation limit. <a href=\"%s\">View possible upgrades</a> now.', 'ultimate-member' ), 'https://ultimatemember.com/account' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'license_not_activable':\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'The key you entered belongs to a bundle, please use the product specific license key.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$error = ! empty(  $license->error ) ? $license->error : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t$error = ! empty( $license->error ) ? $license->error : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} elseif ( ! empty( $license->errors ) ) {\n\n\t\t\t\t\t\t\t\t$errors = array_keys( $license->errors );\n\t\t\t\t\t\t\t\t$errors_data = array_values( $license->errors );\n\n\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t$error = ! empty( $errors[0] ) ? $errors[0] : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t$errors_data = ! empty( $errors_data[0][0] ) ? ', ' . $errors_data[0][0] : '';\n\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s%s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, $errors_data, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tswitch( $license->license ) {\n\n\t\t\t\t\t\t\t\t\tcase 'expired' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'expired';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expired on %s. Please <a href=\"%s\" target=\"_blank\">renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=expired'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'revoked' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key has been disabled. Please <a href=\"%s\" target=\"_blank\">contact support</a> for more information.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/support?utm_campaign=admin&utm_source=licenses&utm_medium=revoked'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'missing' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Invalid license. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> and verify it.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=missing'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'invalid' :\n\t\t\t\t\t\t\t\t\tcase 'site_inactive' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your %s is not active for this URL. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> to manage your license key URLs.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t$field_data['item_name'],\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=invalid'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'item_name_mismatch' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'This appears to be an invalid license key for %s.', 'ultimate-member' ), $field_data['item_name'] );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'no_activations_left':\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'Your license key has reached its activation limit. <a href=\"%s\">View possible upgrades</a> now.', 'ultimate-member' ), 'https://ultimatemember.com/account' );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'license_not_activable':\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'The key you entered belongs to a bundle, please use the product specific license key.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'valid' :\n\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t$class = 'valid';\n\n\t\t\t\t\t\t\t\t\t\t$now        = current_time( 'timestamp' );\n\t\t\t\t\t\t\t\t\t\t$expiration = strtotime( $license->expires, $now );\n\n\t\t\t\t\t\t\t\t\t\tif( 'lifetime' === $license->expires ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'License key never expires.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-lifetime-notice';\n\n\t\t\t\t\t\t\t\t\t\t} elseif( $expiration > $now && $expiration - $now < ( DAY_IN_SECONDS * 30 ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expires soon! It expires on %s. <a href=\"%s\" target=\"_blank\">Renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=renew'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-expires-soon-notice';\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expires on %s.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-expiration-date-notice';\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$class = 'empty';\n\n\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t__( 'To receive updates, please enter your valid %s license key.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t$field_data['item_name']\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$license_status = null;\n\n\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t\t<tr class=\"um-settings-line\">\n\t\t\t\t\t\t\t<th><label for=\"um_options_<?php echo esc_attr( $field_data['id'] ) ?>\"><?php echo esc_html( $field_data['label'] ) ?></label></th>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<form method=\"post\" action=\"\" name=\"um-settings-form\" class=\"um-settings-form\">\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" value=\"save\" name=\"um-settings-action\" />\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"licenses_settings\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"um_options_<?php echo esc_attr( $field_data['id'] ) ?>\" name=\"um_options[<?php echo esc_attr( $field_data['id'] ) ?>]\" value=\"<?php echo $value ?>\" class=\"um-option-field um-long-field\" data-field_id=\"<?php echo esc_attr( $field_data['id'] ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php if ( ! empty( $field_data['description'] ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<div class=\"description\"><?php echo $field_data['description'] ?></div>\n\t\t\t\t\t\t\t\t\t<?php } ?>\n\n\t\t\t\t\t\t\t\t\t<?php if ( ! empty( $value ) && ( ( is_object( $license ) && 'valid' == $license->license ) || 'valid' == $license ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"button\" class=\"button um_license_deactivate\" id=\"<?php echo esc_attr( $field_data['id'] ) ?>_deactivate\" value=\"<?php esc_attr_e( 'Clear License',  'ultimate-member' ) ?>\"/>\n\t\t\t\t\t\t\t\t\t<?php } elseif ( empty( $value ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Activate', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php } else { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Re-Activate', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\t\t\t\tif ( ! empty( $messages ) ) {\n\t\t\t\t\t\t\t\t\t\tforeach ( $messages as $message ) { ?>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"edd-license-data edd-license-<?php echo esc_attr( $class . ' ' . $license_status ) ?>\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p><?php echo $message ?></p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t\t\t\t} ?>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<?php $section = ob_get_clean();\n\n\t\t\treturn $section;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $html\n\t\t * @param $section_fields\n\t\t */\n\t\tfunction settings_install_info_tab( $html, $section_fields ) {\n\t\t\tglobal $wpdb;\n\n\t\t\tif ( ! class_exists( '\\Browser' ) )\n\t\t\t\trequire_once um_path . 'includes/lib/browser.php';\n\n\t\t\t// Detect browser\n\t\t\t$browser = new \\Browser();\n\n\t\t\t// Get theme info\n\t\t\t$theme_data = wp_get_theme();\n\t\t\t$theme      = $theme_data->Name . ' ' . $theme_data->Version;\n\n\t\t\t// Identify Hosting Provider\n\t\t\t$host = um_get_host();\n\n\t\t\tum_fetch_user( get_current_user_id() );\n\n\t\t\tif ( isset( $this->content ) ) {\n\t\t\t\techo $this->content;\n\t\t\t} else { ?>\n\n\t\t\t\t<h3>Install Info</h3>\n\n\t\t\t\t<form action=\"\" method=\"post\" dir=\"ltr\">\n\t\t\t\t\t<textarea style=\"width:70%; height:400px;\" readonly=\"readonly\" onclick=\"this.focus();this.select()\" id=\"install-info-textarea\" name=\"um-install-info\" title=\"<?php _e( 'To copy the Install info, click below then press Ctrl + C (PC) or Cmd + C (Mac).', 'ultimate-member' ); ?>\">\n### Begin Install Info ###\n\n## Please include this information when posting support requests ##\n\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_before\n * @description Before install info settings\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_before', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_before', 'my_install_info_before', 10 );\n * function my_install_info_before() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( 'um_install_info_before' ); ?>\n\n--- Site Info ---\n\nSite URL:\t\t\t\t\t<?php echo site_url() . \"\\n\"; ?>\nHome URL:\t\t\t\t\t<?php echo home_url() . \"\\n\"; ?>\nMultisite:\t\t\t\t\t<?php echo is_multisite() ? 'Yes' . \"\\n\" : 'No' . \"\\n\" ?>\n\n--- Hosting Provider ---\n\n<?php if( $host ) : ?>\nHost:\t\t\t\t\t\t<?php echo $host . \"\\n\"; ?>\n<?php endif; ?>\n\n--- User Browser ---\n\n<?php echo $browser ; ?>\n\n---- Current User Details --\n\n<?php $user = wp_get_current_user(); ?>\nRole: <?php echo implode( ', ', um_user( 'roles' ) ). \"\\n\"; ?>\n\n\n--- WordPress Configurations ---\n\nVersion:\t\t\t\t\t\t<?php echo get_bloginfo( 'version' ) . \"\\n\"; ?>\nLanguage:\t\t\t\t\t<?php echo get_locale().\"\\n\"; ?>\nPermalink Structure:\t\t\t<?php echo get_option( 'permalink_structure' ) . \"\\n\"; ?>\nActive Theme:\t\t\t\t<?php echo $theme . \"\\n\"; ?>\n<?php $show_on_front = get_option( 'show_on_front' ); ?>\n<?php if( $show_on_front == \"posts\" ): ?>\nShow On Front:\t\t\t\t<?php echo get_option( 'show_on_front' ) . \"/static\\n\" ?>\n<?php elseif( $show_on_front == \"page\" ): ?>\nPage On Front:\t\t\t\t<?php $id = get_option( 'page_on_front' ); echo get_the_title( $id ) . ' (#' . $id . ')' . \"\\n\" ?>\nPage For Posts:\t\t\t\t<?php $id = get_option( 'page_for_posts' ); echo get_the_title( $id ) . ' (#' . $id . ')' . \"\\n\" ?>\n<?php endif; ?>\nABSPATH:\t\t\t\t\t<?php echo ABSPATH.\"\\n\"; ?>\n<?php $wp_count_posts = wp_count_posts(); ?>\nAll Posts/Pages:\t\t\t\t<?php echo array_sum((array)$wp_count_posts).\"\\n\";?>\n<?php\n$request['cmd'] = '_notify-validate';\n\n$params = array(\n'sslverify'\t\t=> false,\n'timeout'\t\t=> 60,\n'user-agent'\t=> 'UltimateMember/' . ultimatemember_version,\n'body'\t\t\t=> $request\n);\n\n$response = wp_remote_post( 'https://www.paypal.com/cgi-bin/webscr', $params );\n\nif ( ! is_wp_error( $response ) && $response['response']['code'] >= 200 && $response['response']['code'] < 300 ) {\n$WP_REMOTE_POST =  'wp_remote_post() works' . \"\\n\";\n} else {\n$WP_REMOTE_POST =  'wp_remote_post() does not work' . \"\\n\";\n}\n?>\nWP Remote Post:           \t\t<?php echo $WP_REMOTE_POST; ?>\nWP_DEBUG:                 \t\t\t<?php echo defined( 'WP_DEBUG' ) ? WP_DEBUG ? 'Enabled' . \"\\n\" : 'Disabled' . \"\\n\" : 'Not set' . \"\\n\" ?>\nWP Table Prefix:          \t\t\t<?php echo \"Length: \". strlen( $wpdb->prefix ); echo \", Status:\"; if ( strlen( $wpdb->prefix )>16 ) {echo \" ERROR: Too Long\";} else {echo \" Acceptable\";} echo \"\\n\"; ?>\nMemory Limit:   \t\t\t\t<?php echo ( um_let_to_num( WP_MEMORY_LIMIT )/( 1024 ) ).\"MB\"; ?><?php echo \"\\n\"; ?>\n\n\n--- UM Configurations ---\n\nVersion:\t\t\t\t\t\t<?php echo ultimatemember_version . \"\\n\"; ?>\nUpgraded From:            \t\t<?php echo get_option( 'um_last_version_upgrade', 'None' ) . \"\\n\"; ?>\nCurrent URL Method:\t\t\t<?php echo UM()->options()->get( 'current_url_method' ). \"\\n\"; ?>\nCache User Profile:\t\t\t<?php if( UM()->options()->get( 'um_profile_object_cache_stop' ) == 1 ){ echo \"No\"; }else{ echo \"Yes\"; } echo \"\\n\"; ?>\nGenerate Slugs on Directories:\t<?php if( UM()->options()->get( 'um_generate_slug_in_directory' ) == 1 ){ echo \"No\"; }else{ echo \"Yes\"; } echo \"\\n\"; ?>\nForce UTF-8 Encoding: \t\t<?php if( UM()->options()->get( 'um_force_utf8_strings' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\nJS/CSS Compression: \t\t\t<?php if ( defined('SCRIPT_DEBUG' ) && SCRIPT_DEBUG ) { echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\n<?php if( is_multisite() ): ?>\n    Network Structure:\t\t\t<?php echo UM()->options()->get( 'network_permalink_structure' ). \"\\n\"; ?>\n<?php endif; ?>\nPort Forwarding in URL: \t\t<?php if( UM()->options()->get( 'um_port_forwarding_url' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\nExclude CSS/JS on Home: \t\t<?php if( UM()->options()->get( 'js_css_exlcude_home' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\n\n\n--- UM Pages Configuration ---\n\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_before_page_config\n * @description Before page config install info\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_before_page_config', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_before_page_config', 'my_install_info_before_page_config', 10 );\n * function my_install_info_before_page_config() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( \"um_install_info_before_page_config\" ); ?>\nUser:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_user') ) . \"\\n\"; ?>\nAccount:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_account') ) . \"\\n\"; ?>\nMembers:\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_members') ) . \"\\n\"; ?>\nRegister:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_register') ) . \"\\n\"; ?>\nLogin:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_login') ) . \"\\n\"; ?>\nLogout:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_logout') ) . \"\\n\"; ?>\nPassword Reset:\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_password-reset') ) . \"\\n\"; ?>\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_after_page_config\n * @description After page config install info\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_after_page_config', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_after_page_config', 'my_install_info_after_page_config', 10 );\n * function my_install_info_after_page_config() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( \"um_install_info_after_page_config\" ); ?>\n\n\n--- UM Users Configuration ---\n\nDefault New User Role: \t\t<?php  echo UM()->options()->get('register_role') . \"\\n\"; ?>\nProfile Permalink Base:\t\t<?php  echo UM()->options()->get('permalink_base') . \"\\n\"; ?>\nUser Display Name:\t\t\t<?php  echo UM()->options()->get('display_name') . \"\\n\"; ?>\nForce Name to Uppercase:\t\t<?php echo $this->info_value( UM()->options()->get('force_display_name_capitlized'), 'yesno', true ); ?>\nRedirect author to profile: \t\t<?php echo $this->info_value( UM()->options()->get('author_redirect'), 'yesno', true ); ?>\nEnable Members Directory:\t<?php echo $this->info_value( UM()->options()->get('members_page'), 'yesno', true ); ?>\nUse Gravatars: \t\t\t\t<?php echo $this->info_value( UM()->options()->get('use_gravatars'), 'yesno', true ); ?>\n<?php if( UM()->options()->get('use_gravatars') ): ?>Gravatar builtin image:\t\t<?php  echo UM()->options()->get('use_um_gravatar_default_builtin_image') . \"\\n\"; ?>\n    UM Avatar as blank Gravatar: \t<?php echo $this->info_value( UM()->options()->get('use_um_gravatar_default_image'), 'yesno', true ); ?><?php endif; ?>\nRequire a strong password: \t<?php echo $this->info_value( UM()->options()->get('reset_require_strongpass'), 'onoff', true ); ?>\n\n\n--- UM Access Configuration ---\n\nPanic Key: \t\t\t\t\t\t\t\t<?php  echo UM()->options()->get('panic_key') . \"\\n\"; ?>\nGlobal Site Access:\t\t\t\t\t\t<?php  $arr = array('Site accessible to Everyone','','Site accessible to Logged In Users'); echo $arr[ intval( UM()->options()->get('accessible') ) ] . \"\\n\"; ?>\n<?php if( UM()->options()->get('accessible') == 2 ) { ?>\nCustom Redirect URL:\t\t\t\t\t\t<?php echo UM()->options()->get('access_redirect').\"\\n\";?>\nExclude the following URLs:<?php echo \"\\t\\t\\t\\t\".implode(\"\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\",UM()->options()->get('access_exclude_uris') ).\"\\n\";?>\n<?php } ?>\nBackend Login Screen for Guests:\t\t\t<?php echo $this->info_value( UM()->options()->get('wpadmin_login'), 'yesno', true ); ?>\n<?php if( ! UM()->options()->get('wpadmin_login') ) { ?>\nRedirect to alternative login page:\t\t\t<?php if( UM()->options()->get('wpadmin_login_redirect') == 'um_login_page' ){ echo um_get_core_page('login').\"\\n\"; }else{ echo UM()->options()->get('wpadmin_login_redirect_url').\"\\n\"; }?>\n<?php } ?>\nBackend Register Screen for Guests:\t\t<?php echo $this->info_value( UM()->options()->get('wpadmin_register'), 'yesno', true ); ?>\n<?php if( ! UM()->options()->get('wpadmin_register') ) { ?>\nRedirect to alternative register page:\t\t<?php if( UM()->options()->get('wpadmin_register_redirect') == 'um_register_page' ){ echo um_get_core_page('register').\"\\n\"; }else{ echo UM()->options()->get('wpadmin_register_redirect_url').\"\\n\"; }?>\n<?php } ?>\nAccess Control widget for Admins only: \t\t<?php echo $this->info_value( UM()->options()->get('access_widget_admin_only'), 'yesno', true ); ?>\nEnable the Reset Password Limit:\t\t\t<?php echo $this->info_value( UM()->options()->get('enable_reset_password_limit'), 'yesno', true ); ?>\n<?php if( UM()->options()->get('enable_reset_password_limit') ) { ?>\nReset Password Limit: <?php echo UM()->options()->get('reset_password_limit_number') ?>\nDisable Reset Password Limit for Admins: <?php echo $this->info_value( UM()->options()->get('disable_admin_reset_password_limit'), 'yesno', true ) ?>\n<?php } ?>\n<?php $wpadmin_allow_ips = UM()->options()->get( 'wpadmin_allow_ips' ); if( ! empty( $wpadmin_allow_ips ) ) { ?>\nWhitelisted Backend IPs: \t\t\t\t\t<?php echo count( explode(\"\\n\",trim(UM()->options()->get('wpadmin_allow_ips') ) ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_ips = UM()->options()->get('blocked_ips'); if( ! empty( $blocked_ips ) ){ ?>\nBlocked IP Addresses: \t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_ips') ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_emails = UM()->options()->get('blocked_emails'); if( ! empty( $blocked_emails ) ){ ?>\nBlocked Email Addresses: \t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_emails') ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_words =  UM()->options()->get('blocked_words'); if( ! empty( $blocked_words ) ){ ?>\nBlacklist Words: \t\t\t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_words') ) ).\"\\n\"; ?>\n<?php } ?>\n\n\n--- UM Email Configurations ---\n\nMail appears from:  \t\t\t<?php $mail_from = UM()->options()->get('mail_from'); if( ! empty( $mail_from ) ){echo UM()->options()->get('mail_from');}else{echo \"-\";}; echo \"\\n\";?>\nMail appears from address:  \t<?php $mail_from_addr = UM()->options()->get('mail_from_addr'); if( ! empty( $mail_from_addr ) ){echo UM()->options()->get('mail_from_addr');}else{echo \"-\";}; echo \"\\n\";?>\nUse HTML for E-mails:   \t\t<?php echo $this->info_value( UM()->options()->get('email_html'), 'yesno', true ); ?>\nAccount Welcome Email:  \t\t<?php echo $this->info_value( UM()->options()->get('welcome_email_on'), 'yesno', true ); ?>\nAccount Activation Email:   \t<?php echo $this->info_value( UM()->options()->get('checkmail_email_on'), 'yesno', true ); ?>\nPending Review Email:   \t\t<?php echo $this->info_value( UM()->options()->get('pending_email_on'), 'yesno', true ); ?>\nAccount Approved Email: \t\t<?php echo $this->info_value( UM()->options()->get('approved_email_on'), 'yesno', true ); ?>\nAccount Rejected Email: \t\t<?php echo $this->info_value( UM()->options()->get('rejected_email_on'), 'yesno', true ); ?>\nAccount Deactivated Email:  \t<?php echo $this->info_value( UM()->options()->get('inactive_email_on'), 'yesno', true ); ?>\nAccount Deleted Email:  \t\t<?php echo $this->info_value( UM()->options()->get('deletion_email_on'), 'yesno', true ); ?>\nPassword Reset Email:   \t\t<?php echo $this->info_value( UM()->options()->get('resetpw_email_on'), 'yesno', true ); ?>\nPassword Changed Email: \t\t<?php echo $this->info_value( UM()->options()->get('changedpw_email_on'), 'yesno', true ); ?>\n\n\n--- UM Total Users ---\n\n                <?php $result = count_users();\n                echo 'All Users('.$result['total_users'].\")\\n\";\n                foreach( $result['avail_roles'] as $role => $count ) {\n                    echo $role.\"(\".$count.\")\\n\";\n                } ?>\n\n\n--- UM Roles ---\n\n                <?php foreach( UM()->roles()->get_roles() as $role_id => $role ) {\n                    echo $role.\" ({$role_id})\\n\";\n                } ?>\n\n\n--- UM Custom Templates ---\n\n                <?php // Show templates that have been copied to the theme's edd_templates dir\n                $dir = get_stylesheet_directory() . '/ultimate-member/templates/*.php';\n                if ( ! empty( $dir ) ) {\n                    $found = glob( $dir );\n                    if ( ! empty( $found ) ) {\n                        foreach ( glob( $dir ) as $file ) {\n                            echo \"File: \" . $file  . \"\\n\";\n                        }\n                    } else {\n                        echo 'N/A'.\"\\n\";\n                    }\n                } ?>\n\n\n--- UM Email HTML Templates ---\n\n                <?php $dir = get_stylesheet_directory() . '/ultimate-member/templates/emails/*.html';\n\n                if ( ! empty( $dir ) ) {\n                    $found =  glob( $dir );\n                    if ( ! empty( $found ) ){\n                        foreach ( glob( $dir ) as $file ) {\n                            echo \"File: \". $file  . \"\\n\";\n                        }\n                    } else {\n                        echo 'N/A'.\"\\n\";\n                    }\n                } ?>\n\n\n--- Web Server Configurations ---\n\nPHP Version:              \t\t\t<?php echo PHP_VERSION . \"\\n\"; ?>\nMySQL Version:            \t\t\t<?php echo $wpdb->db_version() . \"\\n\"; ?>\nWeb Server Info:          \t\t\t<?php echo $_SERVER['SERVER_SOFTWARE'] . \"\\n\"; ?>\n\n\n--- PHP Configurations ---\n\nPHP Memory Limit:         \t\t\t<?php echo ini_get( 'memory_limit' ) . \"\\n\"; ?>\nPHP Upload Max Size:      \t\t\t<?php echo ini_get( 'upload_max_filesize' ) . \"\\n\"; ?>\nPHP Post Max Size:        \t\t\t<?php echo ini_get( 'post_max_size' ) . \"\\n\"; ?>\nPHP Upload Max Filesize:  \t\t\t<?php echo ini_get( 'upload_max_filesize' ) . \"\\n\"; ?>\nPHP Time Limit:           \t\t\t<?php echo ini_get( 'max_execution_time' ) . \"\\n\"; ?>\nPHP Max Input Vars:       \t\t\t<?php echo ini_get( 'max_input_vars' ) . \"\\n\"; ?>\nPHP Arg Separator:        \t\t\t<?php echo ini_get( 'arg_separator.output' ) . \"\\n\"; ?>\nPHP Allow URL File Open:  \t\t\t<?php echo ini_get( 'allow_url_fopen' ) ? \"Yes\\n\" : \"No\\n\"; ?>\n\n\n--- Web Server Extensions/Modules ---\n\nDISPLAY ERRORS:           \t\t\t<?php echo ( ini_get( 'display_errors' ) ) ? 'On (' . ini_get( 'display_errors' ) . ')' : 'N/A'; ?><?php echo \"\\n\"; ?>\nFSOCKOPEN:                \t\t\t<?php echo ( function_exists( 'fsockopen' ) ) ? 'Your server supports fsockopen.' : 'Your server does not support fsockopen.'; ?><?php echo \"\\n\"; ?>\ncURL:                     \t\t\t<?php echo ( function_exists( 'curl_init' ) ) ? 'Your server supports cURL.' : 'Your server does not support cURL.'; ?><?php echo \"\\n\"; ?>\nSOAP Client:              \t\t\t<?php echo ( class_exists( 'SoapClient' ) ) ? 'Your server has the SOAP Client enabled.' : 'Your server does not have the SOAP Client enabled.'; ?><?php echo \"\\n\"; ?>\nSUHOSIN:                  \t\t\t<?php echo ( extension_loaded( 'suhosin' ) ) ? 'Your server has SUHOSIN installed.' : 'Your server does not have SUHOSIN installed.'; ?><?php echo \"\\n\"; ?>\nGD Library:               \t\t\t<?php echo ( extension_loaded( 'gd' ) && function_exists('gd_info') ) ? 'PHP GD library is installed on your web server.' : 'PHP GD library is NOT installed on your web server.'; ?><?php echo \"\\n\"; ?>\nMail:                     \t\t\t<?php echo ( function_exists('mail') ) ? 'PHP mail function exist on your web server.' : 'PHP mail function doesn\\'t exist on your web server.'; ?><?php echo \"\\n\"; ?>\nExif:\t\t\t\t          <?php echo ( extension_loaded( 'exif' ) && function_exists('exif_imagetype') ) ? 'PHP Exif library is installed on your web server.' : 'PHP Exif library is NOT installed on your web server.'; ?><?php echo \"\\n\"; ?>\n\n\n--- Session Configurations ---\n\nSession:                  \t\t\t<?php echo isset( $_SESSION ) ? 'Enabled' : 'Disabled'; ?><?php echo \"\\n\"; ?>\nSession Name:             \t\t\t<?php echo esc_html( ini_get( 'session.name' ) ); ?><?php echo \"\\n\"; ?>\nCookie Path:              \t\t\t<?php echo esc_html( ini_get( 'session.cookie_path' ) ); ?><?php echo \"\\n\"; ?>\nSave Path:                \t\t\t<?php echo esc_html( ini_get( 'session.save_path' ) ); ?><?php echo \"\\n\"; ?>\nUse Cookies:              \t\t\t<?php echo ini_get( 'session.use_cookies' ) ? 'On' : 'Off'; ?><?php echo \"\\n\"; ?>\nUse Only Cookies:         \t\t\t<?php echo ini_get( 'session.use_only_cookies' ) ? 'On' : 'Off'; ?><?php echo \"\\n\"; ?>\n\n\n--- WordPress Active Plugins ---\n\n                <?php $plugins = get_plugins();\n                $active_plugins = get_option( 'active_plugins', array() );\n\n                foreach ( $plugins as $plugin_path => $plugin ) {\n                    // If the plugin isn't active, don't show it.\n                    if ( ! in_array( $plugin_path, $active_plugins ) )\n                        continue;\n\n                    echo $plugin['Name'] . ': ' . $plugin['Version'] .\"\\n\";\n                }\n\n                if ( is_multisite() ) { ?>\n\n--- WordPress Network Active Plugins ---\n\n                    <?php $plugins = wp_get_active_network_plugins();\n                    $active_plugins = get_site_option( 'active_sitewide_plugins', array() );\n\n                    foreach ( $plugins as $plugin_path ) {\n                        $plugin_base = plugin_basename( $plugin_path );\n\n                        // If the plugin isn't active, don't show it.\n                        if ( ! array_key_exists( $plugin_base, $active_plugins ) )\n                            continue;\n\n                        $plugin = get_plugin_data( $plugin_path );\n\n                        echo $plugin['Name'] . ' :' . $plugin['Version'] . \"\\n\";\n                    }\n\n                }\n\n                /**\n                 * UM hook\n                 *\n                 * @type action\n                 * @title um_install_info_after\n                 * @description After install info\n                 * @change_log\n                 * [\"Since: 2.0\"]\n                 * @usage add_action( 'um_install_info_after', 'function_name', 10 );\n                 * @example\n                 * <?php\n                 * add_action( 'um_install_info_after', 'my_install_info_after', 10 );\n                 * function my_install_info_after() {\n                 *     // your code here\n                 * }\n                 * ?>\n                 */\n                do_action( 'um_install_info_after' ); ?>\n\n### End Install Info ###\n                    </textarea>\n                    <p class=\"submit\">\n                        <input type=\"hidden\" name=\"um-addon-hook\" value=\"download_install_info\" />\n                        <?php submit_button( 'Download Install Info File', 'primary', 'download_install_info', false ); ?>\n                    </p>\n                </form>\n\n            <?php }\n        }\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction um_download_install_info() {\n\n\t\t\tif ( ! empty( $_POST['download_install_info'] ) ) {\n\t\t\t\tnocache_headers();\n\n\t\t\t\theader( \"Content-type: text/plain\" );\n\t\t\t\theader( 'Content-Disposition: attachment; filename=\"ultimatemember-install-info.txt\"' );\n\n\t\t\t\techo wp_strip_all_tags( $_POST['um-install-info'] );\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $raw_value\n\t\t * @param string $type\n\t\t * @param string $default\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction info_value( $raw_value = '', $type = 'yesno', $default = '' ) {\n\n\t\t\tif ( $type == 'yesno' ) {\n\t\t\t\t$raw_value = ( $default == $raw_value ) ? \"Yes\" : \"No\";\n\t\t\t} elseif( $type == 'onoff' ) {\n\t\t\t\t$raw_value = ( $default == $raw_value ) ? \"On\" : \"Off\";\n\t\t\t}\n\n\t\t\treturn $raw_value.\"\\n\";\n\t\t}\n\n\n\t\t/**\n\t\t * Render settings section\n\t\t *\n\t\t * @param $section_fields\n\t\t * @return string\n\t\t */\n\t\tfunction render_settings_section( $section_fields, $current_tab, $current_subtab ) {\n\t\t\tob_start();\n\n\t\t\tUM()->admin_forms_settings( array(\n\t\t\t\t'class'     => 'um_options-' . $current_tab . '-' . $current_subtab . ' um-third-column',\n\t\t\t\t'prefix_id' => 'um_options',\n\t\t\t\t'fields'    => $section_fields\n\t\t\t) )->render_form(); ?>\n\n\t\t\t<?php $section = ob_get_clean();\n\n\t\t\treturn $section;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $settings\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction save_email_templates( $settings ) {\n\n\t\t\tif ( empty( $settings['um_email_template'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$template = $settings['um_email_template'];\n\t\t\t$content = stripslashes( $settings[ $template ] );\n\n\t\t\t$theme_template_path = UM()->mail()->get_template_file( 'theme', $template );\n\n\t\t\tif ( ! file_exists( $theme_template_path ) ) {\n\t\t\t\tUM()->mail()->copy_email_template( $template );\n\t\t\t}\n\n\t\t\t$fp = fopen( $theme_template_path, \"w\" );\n\t\t\t$result = fputs( $fp, $content );\n\t\t\tfclose( $fp );\n\n\t\t\tif ( $result !== false ) {\n\t\t\t\tunset( $settings['um_email_template'] );\n\t\t\t\tunset( $settings[ $template ] );\n\t\t\t}\n\n\t\t\treturn $settings;\n\t\t}\n\t}\n}", "<?php\nnamespace um\\core;\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) exit;\n\nif ( ! class_exists( 'um\\core\\Files' ) ) {\n\n\n\t/**\n\t * Class Files\n\t * @package um\\core\n\t */\n\tclass Files {\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_temp;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_baseurl;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_basedir;\n\n\n\t\t/**\n\t\t * Files constructor.\n\t\t */\n\t\tfunction __construct() {\n\n\t\t\t$this->setup_paths();\n\n\t\t\tadd_action( 'template_redirect', array( &$this, 'download_routing' ) );\n\n\t\t\t$this->fonticon = array(\n\t\t\t\t'pdf' \t=> array('icon' \t=> 'um-faicon-file-pdf-o', 'color' => '#D24D4D' ),\n\t\t\t\t'txt' \t=> array('icon' \t=> 'um-faicon-file-text-o' ),\n\t\t\t\t'csv' \t=> array('icon' \t=> 'um-faicon-file-text-o' ),\n\t\t\t\t'doc' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'docx' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'odt' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'ods' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'xls' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'xlsx' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'zip' \t=> array('icon' \t=> 'um-faicon-file-zip-o' ),\n\t\t\t\t'rar' \t=> array('icon'\t\t=> 'um-faicon-file-zip-o' ),\n\t\t\t\t'mp3'\t=> array('icon'\t\t=> 'um-faicon-file-audio-o' ),\n\t\t\t\t'jpg' \t=> array('icon' \t=> 'um-faicon-picture-o' ),\n\t\t\t\t'jpeg' \t=> array('icon' \t=> 'um-faicon-picture-o' ),\n\t\t\t\t'png' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t\t'gif' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'eps' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'psd' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'tif' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t\t'tiff' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t);\n\n\t\t\t$this->default_file_fonticon = 'um-faicon-file-o';\n\t\t}\n\n\n\t\t/**\n\t\t * File download link generate\n\t\t *\n\t\t * @param int $form_id\n\t\t * @param string $field_key\n\t\t * @param int $user_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_download_link( $form_id, $field_key, $user_id ) {\n\t\t\t$field_key = urlencode( $field_key );\n\n\t\t\tif ( UM()->is_permalinks ) {\n\t\t\t\t$url = get_home_url( get_current_blog_id() );\n\t\t\t\t$nonce = wp_create_nonce( $user_id . $form_id . 'um-download-nonce' );\n\t\t\t\t$url = $url . \"/um-download/{$form_id}/{$field_key}/{$user_id}/{$nonce}\";\n\t\t\t} else {\n\t\t\t\t$url = get_home_url( get_current_blog_id() );\n\t\t\t\t$nonce = wp_create_nonce( $user_id . $form_id . 'um-download-nonce' );\n\t\t\t\t$url = add_query_arg( array( 'um_action' => 'download', 'um_form' => $form_id, 'um_field' => $field_key, 'um_user' => $user_id, 'um_verify' => $nonce ), $url );\n\t\t\t}\n\n\t\t\t//add time to query args for sites with the cache\n\t\t\treturn add_query_arg( array( 't' => time() ), $url );\n\t\t}\n\n\n\t\t/**\n\t\t * @return bool\n\t\t */\n\t\tfunction download_routing() {\n\t\t\tif ( 'download' !== get_query_var( 'um_action' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$query_form = get_query_var( 'um_form' );\n\t\t\tif ( empty( $query_form ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$form_id = get_query_var( 'um_form' );\n\t\t\t$query_field = get_query_var( 'um_field' );\n\t\t\tif ( empty( $query_field ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$field_key = urldecode( get_query_var( 'um_field' ) );\n\t\t\t$query_user = get_query_var( 'um_user' );\n\t\t\tif ( empty( $query_user ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$user_id = get_query_var( 'um_user' );\n\t\t\t$user = get_userdata( $user_id );\n\n\t\t\tif ( empty( $user ) || is_wp_error( $user ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$query_verify = get_query_var( 'um_verify' );\n\t\t\tif ( empty( $query_verify ) ||\n\t\t\t     ! wp_verify_nonce( $query_verify, $user_id . $form_id . 'um-download-nonce' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tum_fetch_user( $user_id );\n\t\t\t$field_data = get_post_meta( $form_id, '_um_custom_fields', true );\n\t\t\tif ( empty( $field_data[ $field_key ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! um_can_view_field( $field_data[ $field_key ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$field_value = UM()->fields()->field_value( $field_key );\n\t\t\tif ( empty( $field_value ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$download_type = $field_data[ $field_key ]['type'];\n\t\t\tif ( $download_type === 'file' ) {\n\t\t\t\t$this->file_download( $user_id, $field_key, $field_value );\n\t\t\t} else {\n\t\t\t\t$this->image_download( $user_id, $field_key, $field_value );\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $user_id\n\t\t * @param $field_key\n\t\t * @param $field_value\n\t\t */\n\t\tfunction image_download( $user_id, $field_key, $field_value ) {\n\t\t\t$file_path = UM()->uploader()->get_upload_base_dir() . $user_id . DIRECTORY_SEPARATOR . $field_value;\n\t\t\tif ( ! file_exists( $file_path ) ) {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t//multisite fix for old customers\n\t\t\t\t\t$file_path = str_replace( DIRECTORY_SEPARATOR . 'sites' . DIRECTORY_SEPARATOR . get_current_blog_id() . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $file_path );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//validate traversal file\n\t\t\tif ( validate_file( $file_path ) === 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$file_info = get_user_meta( $user_id, $field_key . \"_metadata\", true );\n\n\t\t\t$pathinfo = pathinfo( $file_path );\n\t\t\t$size = filesize( $file_path );\n\t\t\t$originalname = ! empty( $file_info['original_name'] ) ? $file_info['original_name'] : $pathinfo['basename'];\n\t\t\t$type = ! empty( $file_info['type'] ) ? $file_info['type'] : $pathinfo['extension'];\n\n\t\t\theader('Content-Description: File Transfer');\n\t\t\theader('Content-Type: ' . $type );\n\t\t\theader('Content-Disposition: inline; filename=\"' . $originalname . '\"');\n\t\t\theader('Content-Transfer-Encoding: binary');\n\t\t\theader('Expires: 0');\n\t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n\t\t\theader('Pragma: public');\n\t\t\theader('Content-Length: ' . $size);\n\n\t\t\t$levels = ob_get_level();\n\t\t\tfor ( $i = 0; $i < $levels; $i++ ) {\n\t\t\t\t@ob_end_clean();\n\t\t\t}\n\n\t\t\treadfile( $file_path );\n\t\t\texit;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $user_id\n\t\t * @param $field_key\n\t\t * @param $field_value\n\t\t */\n\t\tfunction file_download( $user_id, $field_key, $field_value ) {\n\t\t\t$file_path = UM()->uploader()->get_upload_base_dir() . $user_id . DIRECTORY_SEPARATOR . $field_value;\n\t\t\tif ( ! file_exists( $file_path ) ) {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t//multisite fix for old customers\n\t\t\t\t\t$file_path = str_replace( DIRECTORY_SEPARATOR . 'sites' . DIRECTORY_SEPARATOR . get_current_blog_id() . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $file_path );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//validate traversal file\n\t\t\tif ( validate_file( $file_path ) === 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$file_info = get_user_meta( $user_id, $field_key . \"_metadata\", true );\n\n\t\t\t$pathinfo = pathinfo( $file_path );\n\t\t\t$size = filesize( $file_path );\n\t\t\t$originalname = ! empty( $file_info['original_name'] ) ? $file_info['original_name'] : $pathinfo['basename'];\n\t\t\t$type = ! empty( $file_info['type'] ) ? $file_info['type'] : $pathinfo['extension'];\n\n\t\t\theader('Content-Description: File Transfer');\n\t\t\theader('Content-Type: ' . $type );\n\t\t\theader('Content-Disposition: attachment; filename=\"' . $originalname . '\"');\n\t\t\theader('Content-Transfer-Encoding: binary');\n\t\t\theader('Expires: 0');\n\t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n\t\t\theader('Pragma: public');\n\t\t\theader('Content-Length: ' . $size);\n\n\t\t\t$levels = ob_get_level();\n\t\t\tfor ( $i = 0; $i < $levels; $i++ ) {\n\t\t\t\t@ob_end_clean();\n\t\t\t}\n\n\t\t\treadfile( $file_path );\n\t\t\texit;\n\t\t}\n\n\n\t\t/**\n\t\t * Remove file by AJAX\n\t\t */\n\t\tfunction ajax_remove_file() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\t/**\n\t\t\t * @var $src\n\t\t\t */\n\t\t\textract( $_REQUEST );\n\t\t\t$this->delete_file( $src );\n\n\t\t\twp_send_json_success();\n\t\t}\n\n\n\t\t/**\n\t\t * Resize image AJAX handler\n\t\t */\n\t\tfunction ajax_resize_image() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\t/**\n\t\t\t * @var $key\n\t\t\t * @var $src\n\t\t\t * @var $coord\n\t\t\t * @var $user_id\n\t\t\t */\n\t\t\textract( $_REQUEST );\n\n\t\t\tif ( ! isset( $src ) || ! isset( $coord ) ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid parameters', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\t$coord_n = substr_count( $coord, \",\" );\n\t\t\tif ( $coord_n != 3 ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid coordinates', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\t$user_id = empty( $_REQUEST['user_id'] ) ? get_current_user_id() : $_REQUEST['user_id'];\n\t\t\t$image_path = um_is_file_owner( $src, $user_id, true );\n\t\t\tif ( ! $image_path ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid file ownership', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t$output = UM()->uploader()->resize_image( $image_path, $src, $key, $user_id, $coord );\n\t\t\tUM()->uploader()->replace_upload_dir = false;\n\n\t\t\tdelete_option( \"um_cache_userdata_{$user_id}\" );\n\n\t\t\twp_send_json_success( $output );\n\t\t}\n\n\n\t\t/**\n\t\t * Image upload by AJAX\n\t\t *\n\t\t * @throws \\Exception\n\t\t */\n\t\tfunction ajax_image_upload() {\n\t\t\t$ret['error'] = null;\n\t\t\t$ret = array();\n\n\t\t\t$id = $_POST['key'];\n\t\t\t$timestamp = $_POST['timestamp'];\n\t\t\t$nonce = $_POST['_wpnonce'];\n\t\t\t$user_id = empty( $_POST['user_id'] ) ? get_current_user_id() : $_POST['user_id'];\n\n\t\t\tUM()->fields()->set_id = $_POST['set_id'];\n\t\t\tUM()->fields()->set_mode = $_POST['set_mode'];\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_image_upload_nonce\n\t\t\t * @description Change Image Upload nonce\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$nonce\",\"type\":\"bool\",\"desc\":\"Nonce\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_image_upload_nonce', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_image_upload_nonce', 'my_image_upload_nonce', 10, 1 );\n\t\t\t * function my_image_upload_nonce( $nonce ) {\n\t\t\t *     // your code here\n\t\t\t *     return $nonce;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$um_image_upload_nonce = apply_filters( 'um_image_upload_nonce', true );\n\n\t\t\tif ( $um_image_upload_nonce ) {\n\t\t\t\tif ( ! wp_verify_nonce( $nonce, \"um_upload_nonce-{$timestamp}\" ) && is_user_logged_in() ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\t$ret['error'] = __( 'Invalid nonce', 'ultimate-member' );\n\t\t\t\t\twp_send_json_error( $ret );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( isset( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\tif ( ! is_array( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t\t\t$uploaded = UM()->uploader()->upload_image( $_FILES[ $id ], $user_id, $id );\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = false;\n\t\t\t\t\tif ( isset( $uploaded['error'] ) ) {\n\t\t\t\t\t\t$ret['error'] = $uploaded['error'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret[] = $uploaded['handle_upload'];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t$ret['error'] = __( 'A theme or plugin compatibility issue', 'ultimate-member' );\n\t\t\t}\n\t\t\twp_send_json_success( $ret );\n\t\t}\n\n\n\t\t/**\n\t\t * File upload by AJAX\n\t\t */\n\t\tfunction ajax_file_upload() {\n\t\t\t$ret['error'] = null;\n\t\t\t$ret = array();\n\n\t\t\t/* commented for enable download files on registration form\n\t\t\t * if ( ! is_user_logged_in() ) {\n\t\t\t\t$ret['error'] = 'Invalid user';\n\t\t\t\tdie( json_encode( $ret ) );\n\t\t\t}*/\n\n\t\t\t$nonce = $_POST['_wpnonce'];\n\t\t\t$id = $_POST['key'];\n\t\t\t$timestamp = $_POST['timestamp'];\n\n\t\t\tUM()->fields()->set_id = $_POST['set_id'];\n\t\t\tUM()->fields()->set_mode = $_POST['set_mode'];\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_file_upload_nonce\n\t\t\t * @description Change File Upload nonce\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$nonce\",\"type\":\"bool\",\"desc\":\"Nonce\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_file_upload_nonce', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_file_upload_nonce', 'my_file_upload_nonce', 10, 1 );\n\t\t\t * function my_file_upload_nonce( $nonce ) {\n\t\t\t *     // your code here\n\t\t\t *     return $nonce;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$um_file_upload_nonce = apply_filters(\"um_file_upload_nonce\", true );\n\n\t\t\tif ( $um_file_upload_nonce  ) {\n\t\t\t\tif ( ! wp_verify_nonce( $nonce, 'um_upload_nonce-'.$timestamp  ) && is_user_logged_in() ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\t$ret['error'] = 'Invalid nonce';\n\t\t\t\t\twp_send_json_error( $ret );\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif( isset( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\tif ( ! is_array( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\t\t$user_id = $_POST['user_id'];\n\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t\t\t$uploaded = UM()->uploader()->upload_file( $_FILES[ $id ], $user_id, $id );\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = false;\n\t\t\t\t\tif ( isset( $uploaded['error'] ) ){\n\n\t\t\t\t\t\t$ret['error'] = $uploaded['error'];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t$uploaded_file = $uploaded['handle_upload'];\n\t\t\t\t\t\t$ret['url'] = $uploaded_file['file_info']['name'];\n\t\t\t\t\t\t$ret['icon'] = UM()->files()->get_fonticon_by_ext( $uploaded_file['file_info']['ext'] );\n\t\t\t\t\t\t$ret['icon_bg'] = UM()->files()->get_fonticon_bg_by_ext( $uploaded_file['file_info']['ext'] );\n\t\t\t\t\t\t$ret['filename'] = $uploaded_file['file_info']['basename'];\n\t\t\t\t\t\t$ret['original_name'] = $uploaded_file['file_info']['original_name'];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t$ret['error'] = __('A theme or plugin compatibility issue','ultimate-member');\n\t\t\t}\n\n\n\t\t\twp_send_json_success( $ret );\n\t\t}\n\n\n\t\t/**\n\t\t * Allowed image types\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction allowed_image_types() {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_image_types\n\t\t\t * @description Extend allowed image types\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$types\",\"type\":\"array\",\"desc\":\"Image ext types\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_allowed_image_types', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_image_types', 'my_allowed_image_types', 10, 1 );\n\t\t\t * function my_allowed_image_types( $types ) {\n\t\t\t *     // your code here\n\t\t\t *     return $types;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\treturn apply_filters( 'um_allowed_image_types', array(\n\t\t\t\t'png'   => 'PNG',\n\t\t\t\t'jpeg'  => 'JPEG',\n\t\t\t\t'jpg'   => 'JPG',\n\t\t\t\t'gif'   => 'GIF'\n\t\t\t) );\n\t\t}\n\n\n\t\t/**\n\t\t * Allowed file types\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction allowed_file_types() {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_file_types\n\t\t\t * @description Extend allowed File types\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$types\",\"type\":\"array\",\"desc\":\"Files ext types\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_allowed_file_types', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_file_types', 'my_allowed_file_types', 10, 1 );\n\t\t\t * function my_allowed_file_types( $types ) {\n\t\t\t *     // your code here\n\t\t\t *     return $types;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\treturn apply_filters( 'um_allowed_file_types', array(\n\t\t\t\t'pdf'   => 'PDF',\n\t\t\t\t'txt'   => 'Text',\n\t\t\t\t'csv'   => 'CSV',\n\t\t\t\t'doc'   => 'DOC',\n\t\t\t\t'docx'  => 'DOCX',\n\t\t\t\t'odt'   => 'ODT',\n\t\t\t\t'ods'   => 'ODS',\n\t\t\t\t'xls'   => 'XLS',\n\t\t\t\t'xlsx'  => 'XLSX',\n\t\t\t\t'zip'   => 'ZIP',\n\t\t\t\t'rar'   => 'RAR',\n\t\t\t\t'mp3'   => 'MP3',\n\t\t\t\t'jpg'   => 'JPG',\n\t\t\t\t'jpeg'  => 'JPEG',\n\t\t\t\t'png'   => 'PNG',\n\t\t\t\t'gif'   => 'GIF',\n\t\t\t\t'eps'   => 'EPS',\n\t\t\t\t'psd'   => 'PSD',\n\t\t\t\t'tif'   => 'TIF',\n\t\t\t\t'tiff'  => 'TIFF',\n\t\t\t) );\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension icon\n\t\t *\n\t\t * @param $extension\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_fonticon_by_ext( $extension ) {\n\t\t\tif ( isset( $this->fonticon[$extension]['icon'] ) ) {\n\t\t\t\treturn $this->fonticon[$extension]['icon'];\n\t\t\t} else {\n\t\t\t\treturn $this->default_file_fonticon;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension icon background\n\t\t *\n\t\t * @param $extension\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_fonticon_bg_by_ext( $extension ) {\n\t\t\tif ( isset( $this->fonticon[$extension]['color'] ) ) {\n\t\t\t\treturn $this->fonticon[$extension]['color'];\n\t\t\t} else {\n\t\t\t\treturn '#666';\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Setup upload directory\n\t\t */\n\t\tfunction setup_paths() {\n\n\t\t\t$this->upload_dir = wp_upload_dir();\n\n\t\t\t$this->upload_basedir = $this->upload_dir['basedir'] . '/ultimatemember/';\n\t\t\t$this->upload_baseurl = $this->upload_dir['baseurl'] . '/ultimatemember/';\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_upload_basedir_filter\n\t\t\t * @description Change Uploads Basedir\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$basedir\",\"type\":\"string\",\"desc\":\"Uploads basedir\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_upload_basedir_filter', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_upload_basedir_filter', 'my_upload_basedir', 10, 1 );\n\t\t\t * function my_upload_basedir( $basedir ) {\n\t\t\t *     // your code here\n\t\t\t *     return $basedir;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->upload_basedir = apply_filters( 'um_upload_basedir_filter', $this->upload_basedir );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_upload_baseurl_filter\n\t\t\t * @description Change Uploads Base URL\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$baseurl\",\"type\":\"string\",\"desc\":\"Uploads base URL\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_upload_baseurl_filter', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_upload_baseurl_filter', 'my_upload_baseurl', 10, 1 );\n\t\t\t * function my_upload_baseurl( $baseurl ) {\n\t\t\t *     // your code here\n\t\t\t *     return $baseurl;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->upload_baseurl = apply_filters( 'um_upload_baseurl_filter', $this->upload_baseurl );\n\n\t\t\t// @note : is_ssl() doesn't work properly for some sites running with load balancers\n\t\t\t// Check the links for more info about this bug\n\t\t\t// https://codex.wordpress.org/Function_Reference/is_ssl\n\t\t\t// http://snippets.webaware.com.au/snippets/wordpress-is_ssl-doesnt-work-behind-some-load-balancers/\n\t\t\tif ( is_ssl() || stripos( get_option( 'siteurl' ), 'https://' ) !== false\n\t\t\t     || ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' ) ) {\n\t\t\t\t$this->upload_baseurl = str_replace(\"http://\", \"https://\",  $this->upload_baseurl);\n\t\t\t}\n\n\t\t\t$this->upload_temp = $this->upload_basedir . 'temp/';\n\t\t\t$this->upload_temp_url = $this->upload_baseurl . 'temp/';\n\n\t\t\tif ( ! file_exists( $this->upload_basedir ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_basedir, 0755, true );\n\t\t\t\tumask( $old );\n\t\t\t}\n\n\t\t\tif ( ! file_exists( $this->upload_temp ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_temp , 0755, true );\n\t\t\t\tumask( $old );\n\t\t\t}\n\n\t\t}\n\n\n\t\t/**\n\t\t * Generate unique temp directory\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction unique_dir(){\n\t\t\t$unique_number = UM()->validation()->generate();\n\t\t\t$array['dir'] = $this->upload_temp . $unique_number . '/';\n\t\t\t$array['url'] = $this->upload_temp_url . $unique_number . '/';\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get path only without file name\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction path_only( $file ) {\n\n\t\t\treturn trailingslashit( dirname( $file ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Fix image orientation\n\t\t *\n\t\t * @param $rotate\n\t\t * @param $source\n\t\t *\n\t\t * @return resource\n\t\t */\n\t\tfunction fix_image_orientation( $rotate, $source ) {\n\t\t\tif ( extension_loaded('exif') ){\n\t\t\t\t$exif = @exif_read_data( $source );\n\n\t\t\t\tif (isset($exif['Orientation'])) {\n\t\t\t\t\tswitch ($exif['Orientation']) {\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, 180, 0);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, -90, 0);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, 90, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $rotate;\n\t\t}\n\n\n\t\t/**\n\t\t * Process an image\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t * @param int $quality\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction create_and_copy_image($source, $destination, $quality = 100) {\n\n\t\t\t$info = @getimagesize($source);\n\n\t\t\tif ($info['mime'] == 'image/jpeg'){\n\n\t\t\t\t$image = imagecreatefromjpeg( $source );\n\n\t\t\t} else if ($info['mime'] == 'image/gif'){\n\n\t\t\t\t$image = imagecreatefromgif( $source );\n\n\t\t\t} else if ($info['mime'] == 'image/png'){\n\n\t\t\t\t$image = imagecreatefrompng( $source );\n\t\t\t\timagealphablending( $image, false );\n\t\t\t\timagesavealpha( $image, true );\n\n\t\t\t}\n\n\t\t\tlist($w, $h) = @getimagesize( $source );\n\t\t\tif ( $w > UM()->options()->get('image_max_width') ) {\n\n\t\t\t\t$ratio = round( $w / $h, 2 );\n\t\t\t\t$new_w = UM()->options()->get('image_max_width');\n\t\t\t\t$new_h = round( $new_w / $ratio, 2 );\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ||  $info['mime'] == 'image/gif' ){\n\n\t\t\t\t\t$image_p = imagecreatetruecolor( $new_w, $new_h );\n\t\t\t\t\timagecopyresampled( $image_p, $image, 0, 0, 0, 0, $new_w, $new_h, $w, $h );\n\t\t\t\t\t$image_p = $this->fix_image_orientation( $image_p, $source );\n\n\t\t\t\t}else if( $info['mime'] == 'image/png' ){\n\n\t\t\t\t\t$srcImage = $image;\n\t\t\t\t\t$targetImage = imagecreatetruecolor( $new_w, $new_h );\n\t\t\t\t\timagealphablending( $targetImage, false );\n\t\t\t\t\timagesavealpha( $targetImage, true );\n\t\t\t\t\timagecopyresampled( $targetImage, $srcImage,   0, 0, 0, 0, $new_w, $new_h, $w, $h );\n\n\t\t\t\t}\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ){\n\t\t\t\t\t$has_copied = imagejpeg( $image_p, $destination, $quality );\n\t\t\t\t}else if ( $info['mime'] == 'image/gif' ){\n\t\t\t\t\t$has_copied = imagegif( $image_p, $destination );\n\t\t\t\t}else if ( $info['mime'] == 'image/png' ){\n\t\t\t\t\t$has_copied = imagepng( $targetImage, $destination, 0 ,PNG_ALL_FILTERS);\n\t\t\t\t}\n\n\t\t\t\t$info['um_has_max_width'] = 'custom';\n\t\t\t\t$info['um_has_copied'] = $has_copied ? 'yes':'no';\n\n\t\t\t} else {\n\n\t\t\t\t$image = $this->fix_image_orientation( $image, $source );\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ){\n\t\t\t\t\t$has_copied = imagejpeg( $image, $destination, $quality );\n\t\t\t\t}else if ( $info['mime'] == 'image/gif' ){\n\t\t\t\t\t$has_copied = imagegif( $image, $destination );\n\t\t\t\t}else if ( $info['mime'] == 'image/png' ){\n\t\t\t\t\t$has_copied = imagepng( $image , $destination , 0 ,PNG_ALL_FILTERS);\n\t\t\t\t}\n\n\t\t\t\t$info['um_has_max_width'] = 'default';\n\t\t\t\t$info['um_has_copied'] = $has_copied ? 'yes':'no';\n\t\t\t}\n\n\t\t\treturn $info;\n\t\t}\n\n\n\t\t/**\n\t\t * Process a file\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t */\n\t\tfunction upload_temp_file( $source, $destination ) {\n\n\t\t\tmove_uploaded_file( $source, $destination );\n\t\t}\n\n\n\t\t/**\n\t\t * Process a temp upload\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t * @param int $quality\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_image_upload_temp( $source, $destination, $quality = 100 ){\n\n\t\t\t$unique_dir = $this->unique_dir();\n\n\t\t\t$this->make_dir( $unique_dir['dir'] );\n\n\t\t\t$info = $this->create_and_copy_image( $source, $unique_dir['dir'] . $destination, $quality );\n\n\t\t\t$url = $unique_dir['url'] . $destination ;\n\n\t\t\treturn $url;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Process a temp upload for files\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_file_upload_temp( $source, $destination ){\n\n\t\t\t$unique_dir = $this->unique_dir();\n\n\t\t\t$this->make_dir( $unique_dir['dir'] );\n\n\t\t\t$this->upload_temp_file( $source, $unique_dir['dir'] . $destination );\n\n\t\t\t$url = $unique_dir['url'] . $destination;\n\n\t\t\treturn $url;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Make a Folder\n\t\t *\n\t\t * @param $dir\n\t\t */\n\t\tfunction make_dir( $dir ) {\n\t\t\t$old = umask(0);\n\t\t\t@mkdir( $dir, 0755, true);\n\t\t\tumask( $old );\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension by mime type\n\t\t *\n\t\t * @param $mime\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_extension_by_mime_type( $mime ) {\n\t\t\t$split = explode('/', $mime );\n\t\t\treturn $split[1];\n\t\t}\n\n\n\t\t/**\n\t\t * Get file data\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_file_data( $file ) {\n\t\t\t$array['size'] = filesize( $file );\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get image data\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_image_data( $file ) {\n\n\t\t\t$finfo = finfo_open( FILEINFO_MIME_TYPE );\n\n\t\t\t$mime_type = finfo_file( $finfo, $file );\n\n\t\t\tif( function_exists('exif_imagetype') ){\n\n\t\t\t\t$array_exif_image_mimes = array( IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG );\n\n\t\t\t\t$allowed_types = apply_filters('um_image_upload_allowed_exif_mimes', $array_exif_image_mimes );\n\n\t\t\t\tif( ! in_array( @exif_imagetype( $file ), $allowed_types ) ) {\n\n\t\t\t\t\t$array['invalid_image'] = true;\n\n\t\t\t\t\treturn $array;\n\t\t\t\t}\n\n\t\t\t}else{\n\n\t\t\t\t$array_image_mimes = array('image/jpeg','image/png','image/gif');\n\n\t\t\t\t$allowed_types = apply_filters('um_image_upload_allowed_mimes', $array_image_mimes );\n\n\t\t\t\tif ( ! in_array( $mime_type, $allowed_types ) ) {\n\n\t\t\t\t\t$array['invalid_image'] = true;\n\n\t\t\t\t\treturn $array;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$array['size'] = filesize( $file );\n\n\t\t\t$image_data = @getimagesize( $file );\n\n\t\t\t$array['image'] = $image_data;\n\n\t\t\t$array['invalid_image'] = false;\n\n\t\t\tlist($width, $height, $type, $attr) = $image_data;\n\n\t\t\t$array['width'] = $width;\n\n\t\t\t$array['height'] = $height;\n\n\t\t\t$array['ratio'] = $width / $height;\n\n\t\t\t$array['extension'] = $this->get_extension_by_mime_type( $mime_type );\n\n\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * If a value exists in comma seperated list\n\t\t *\n\t\t * @param $value\n\t\t * @param $array\n\t\t *\n\t\t * @return bool\n\t\t */\n\t\tfunction in_array( $value, $array ) {\n\n\t\t\tif ( in_array( $value, explode(',', $array ) ) ){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * This function will delete file upload from server\n\t\t *\n\t\t * @param $src\n\t\t */\n\t\tfunction delete_file( $src ) {\n\n\t\t\tif ( strstr( $src, '?' ) ) {\n\t\t\t\t$splitted = explode( '?', $src );\n\t\t\t\t$src = $splitted[0];\n\t\t\t}\n\n\t\t\t$is_temp = um_is_temp_upload( $src );\n\t\t\tif ( $is_temp ) {\n\t\t\t\tunlink( $is_temp );\n\t\t\t\trmdir( dirname( $is_temp ) );\n\t\t\t} else {\n\t\t\t\twp_die( __('Ultimate Member: Not a valid temp file','ultimate-member') );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Delete a main user photo\n\t\t *\n\t\t * @param $user_id\n\t\t * @param $type\n\t\t */\n\t\tfunction delete_core_user_photo( $user_id, $type ) {\n\n\t\t\tdelete_user_meta( $user_id, $type );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_after_remove_{$type}\n\t\t\t * @description Make some actions after remove file\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$user_id\",\"type\":\"int\",\"desc\":\"User ID\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_after_remove_{$type}', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_after_remove_{$type}', 'my_after_remove_file', 10, 1 );\n\t\t\t * function my_after_remove_file( $user_id ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_after_remove_{$type}\", $user_id );\n\n\t\t\t$dir = $this->upload_basedir . $user_id . DIRECTORY_SEPARATOR;\n\t\t\t$prefix = $type;\n\t\t\tchdir($dir);\n\t\t\t$matches = glob($prefix.'*',GLOB_MARK);\n\n\t\t\tif( is_array($matches) && !empty($matches)) {\n\t\t\t\tforeach($matches as $match) {\n\t\t\t\t\tif( is_file($dir.$match) ) unlink($dir.$match);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( count(glob(\"$dir/*\")) === 0) {\n\t\t\t\trmdir( $dir );\n\t\t\t}\n\n\t\t\tUM()->user()->remove_cache( $user_id );\n\t\t}\n\n\n\t\t/**\n\t\t * Resize a local image\n\t\t *\n\t\t * @param $file\n\t\t * @param $crop\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction resize_image( $file, $crop ) {\n\n\t\t\t$targ_x1 = $crop[0];\n\t\t\t$targ_y1 = $crop[1];\n\t\t\t$targ_x2 = $crop[2];\n\t\t\t$targ_y2 = $crop[3];\n\n\t\t\t$info = @getimagesize( $file );\n\n\t\t\tif ( $info['mime'] == 'image/gif' ) {\n\n\t\t\t\t$img_r = imagecreatefromgif( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagegif( $dst_r, $this->path_only( $file ) . basename( $file ) );\n\n\t\t\t} elseif ( $info['mime'] == 'image/png' ) {\n\n\t\t\t\t$img_r = imagecreatefrompng( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagealphablending( $dst_r, false);\n\t\t\t\timagesavealpha( $dst_r, true);\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagepng( $dst_r, $this->path_only( $file ) . basename( $file ) );\n\n\t\t\t} else {\n\n\t\t\t\t$img_r = imagecreatefromjpeg( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagejpeg( $dst_r, $this->path_only( $file ) . basename( $file ), 100 );\n\n\t\t\t}\n\n\t\t\t$split = explode('/ultimatemember/temp/', $file );\n\t\t\treturn $this->upload_temp_url . $split[1];\n\t\t}\n\n\n\t\t/**\n\t\t * Make a user folder for uploads\n\t\t *\n\t\t * @param $user_id\n\t\t */\n\t\tfunction new_user( $user_id ) {\n\t\t\tif ( !file_exists( $this->upload_basedir . $user_id . '/' ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_basedir . $user_id . '/' , 0755, true);\n\t\t\t\tumask($old);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * New user upload\n\t\t *\n\t\t * @param $user_id\n\t\t * @param $source\n\t\t * @param $key\n\t\t *\n\t\t * @deprecated 2.1.0\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_user_upload( $user_id, $source, $key ) {\n\t\t\tum_deprecated_function( 'new_user_upload', '2.1.0', '' );\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Remove a directory\n\t\t *\n\t\t * @param $dir\n\t\t */\n\t\tfunction remove_dir( $dir ) {\n\t\t\tif ( file_exists( $dir ) ) {\n\t\t\t\tforeach(glob($dir . '/*') as $file) {\n\t\t\t\t\tif(is_dir($file)) $this->remove_dir($file); else unlink($file);\n\t\t\t\t} rmdir($dir);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Remove old files\n\t\t * @param string $dir\t\t\t\t\t\t\tPath to directoty.\n\t\t * @param int|string $timestamp\t\tUnix timestamp or PHP relative time. All older files will be removed.\n\t\t */\n\t\tfunction remove_old_files( $dir, $timestamp = NULL ) {\n\n\t\t\t$removed_files = array();\n\n\t\t\tif ( empty( $timestamp ) ) {\n\t\t\t\t$timestamp = strtotime( '-1 day' );\n\t\t\t}\n\t\t\telseif ( is_string( $timestamp ) && !is_numeric( $timestamp ) ) {\n\t\t\t\t$timestamp = strtotime( $timestamp );\n\t\t\t}\n\n\t\t\tif ( $timestamp && is_dir( $dir ) ) {\n\n\t\t\t\t$files = glob( $dir . '/*' );\n\n\t\t\t\tforeach ( (array) $files as $file ) {\n\t\t\t\t\tif ( in_array( wp_basename( $file ), array('.', '..') ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telseif ( is_dir( $file ) ) {\n\t\t\t\t\t\t$this->remove_old_files( $file, $timestamp );\n\t\t\t\t\t}\n\t\t\t\t\telseif ( is_file( $file ) ) {\n\t\t\t\t\t\t$fileatime = fileatime( $file );\n\t\t\t\t\t\tif ( $fileatime && $fileatime < (int) $timestamp ) {\n\t\t\t\t\t\t\tunlink( $file );\n\t\t\t\t\t\t\t$removed_files[] = $file;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $removed_files;\n\t\t}\n\n\n\t\t/**\n\t\t * Format Bytes\n\t\t *\n\t\t * @param $size\n\t\t * @param int $precision\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction format_bytes( $size, $precision = 1 ) {\n\t\t\tif ( is_numeric( $size ) ) {\n\t\t\t\t$base = log( $size, 1024 );\n\t\t\t\t$suffixes = array( '', 'kb', 'MB', 'GB', 'TB' );\n\t\t\t\t$computed_size = round( pow( 1024, $base - floor( $base ) ), $precision );\n\t\t\t\t$unit = $suffixes[ floor( $base ) ];\n\n\t\t\t\treturn $computed_size.' '.$unit;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Get the list of profile/cover sizes\n\t\t *\n\t\t * @param string $type\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction get_profile_photo_size( $type ) {\n\t\t\t$sizes = UM()->options()->get( $type );\n\n\t\t\t$sizes = array_combine( $sizes, $sizes );\n\n\t\t\tif ( $type == 'cover_thumb_sizes' ) {\n\t\t\t\tforeach ( $sizes as $key => $value ) {\n\t\t\t\t\t$sizes[ $key ] = $value . 'px';\n\t\t\t\t}\n\t\t\t} elseif ( $type == 'photo_thumb_sizes' ) {\n\t\t\t\tforeach ( $sizes as $key => $value ) {\n\t\t\t\t\t$sizes[ $key ] = $value . 'x' . $value . 'px';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sizes['original'] = __( 'Original size', 'ultimate-member' );\n\t\t\treturn $sizes;\n\t\t}\n\n\n\t}\n}", "<?php\nnamespace um\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\core\\Member_Directory_Meta' ) ) {\n\n\n\t/**\n\t * Class Member_Directory_Meta\n\t * @package um\\core\n\t */\n\tclass Member_Directory_Meta extends Member_Directory {\n\n\n\t\t/**\n\t\t * @var string\n\t\t */\n\t\tvar $sql_where = '';\n\t\tvar $meta_iteration = 1;\n\t\tvar $joins = array();\n\t\tvar $sql_limit = '';\n\t\tvar $sql_order = '';\n\n\n\t\t/**\n\t\t * Member_Directory_Meta constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\tparent::__construct();\n\n\t\t\tadd_action( 'updated_user_meta', array( &$this, 'on_update_usermeta' ), 10, 4 );\n\t\t\tadd_action( 'added_user_meta', array( &$this, 'on_update_usermeta' ), 10, 4 );\n\t\t\tadd_action( 'deleted_user_meta', array( &$this, 'on_delete_usermeta' ), 10, 4 );\n\n\t\t\tadd_action( 'um_add_new_field', array( &$this, 'on_new_field_added' ), 10, 1 );\n\t\t\tadd_action( 'um_delete_custom_field', array( &$this, 'on_delete_custom_field' ), 10, 1 );\n\t\t}\n\n\n\t\t/**\n\t\t * Delete custom field and metakey from UM usermeta table\n\t\t *\n\t\t * @param $metakey\n\t\t */\n\t\tfunction on_delete_custom_field( $metakey ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( in_array( $metakey, $metakeys ) ) {\n\t\t\t\tunset( $metakeys[ array_search( $metakey, $metakeys ) ] );\n\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$wpdb->delete(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'um_key'    => $metakey\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%s'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tupdate_option( 'um_usermeta_fields', $metakeys );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Add metakey to usermeta fields\n\t\t *\n\t\t * @param $metakey\n\t\t */\n\t\tfunction on_new_field_added( $metakey ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $metakey, $metakeys ) ) {\n\t\t\t\t$metakeys[] = $metakey;\n\t\t\t\tupdate_option( 'um_usermeta_fields', $metakeys );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * When you delete usermeta - remove row from um_metadata\n\t\t *\n\t\t * @param int|array $meta_ids\n\t\t * @param int $object_id\n\t\t * @param string $meta_key\n\t\t * @param mixed $_meta_value\n\t\t */\n\t\tfunction on_delete_usermeta( $meta_ids, $object_id, $meta_key, $_meta_value ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $meta_key, $metakeys ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$wpdb->delete(\n\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\tarray(\n\t\t\t\t\t'user_id'   => $object_id,\n\t\t\t\t\t'um_key'    => $meta_key\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'%d',\n\t\t\t\t\t'%s'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t/**\n\t\t * When you add/update usermeta - add/update row from um_metadata\n\t\t *\n\t\t * @param int $meta_id\n\t\t * @param int $object_id\n\t\t * @param string $meta_key\n\t\t * @param mixed $_meta_value\n\t\t */\n\t\tfunction on_update_usermeta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $meta_key, $metakeys ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$result = $wpdb->get_var( $wpdb->prepare(\n\t\t\t\t\"SELECT umeta_id \n\t\t\t\tFROM {$wpdb->prefix}um_metadata \n\t\t\t\tWHERE user_id = %d AND \n\t\t\t\t      um_key = %s \n\t\t\t\tLIMIT 1\",\n\t\t\t\t$object_id,\n\t\t\t\t$meta_key\n\t\t\t) );\n\n\t\t\tif ( empty( $result ) ) {\n\t\t\t\t$wpdb->insert(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'user_id'   => $object_id,\n\t\t\t\t\t\t'um_key'    => $meta_key,\n\t\t\t\t\t\t'um_value'  => maybe_serialize( $_meta_value ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%d',\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$wpdb->update(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'um_value'  => maybe_serialize( $_meta_value ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'umeta_id'  => $result,\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%d',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Main Query function for getting members via AJAX\n\t\t */\n\t\tfunction ajax_get_members() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$blog_id = get_current_blog_id();\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\t$this->predefined_no_caps( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_before_query' );\n\n\t\t\t// Prepare for BIG SELECT query\n\t\t\t$wpdb->query( 'SET SQL_BIG_SELECTS=1' );\n\n\n\t\t\tif ( ! empty( $directory_data['show_these_users'] ) ) {\n\t\t\t\t$show_these_users = maybe_unserialize( $directory_data['show_these_users'] );\n\n\t\t\t\tif ( is_array( $show_these_users ) && ! empty( $show_these_users ) ) {\n\t\t\t\t\t$users_array = array();\n\t\t\t\t\tforeach ( $show_these_users as $username ) {\n\t\t\t\t\t\tif ( false !== ( $exists_id = username_exists( $username ) ) ) {\n\t\t\t\t\t\t\t$users_array[] = $exists_id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $users_array ) ) {\n\t\t\t\t\t\t$this->sql_where .= \" AND u.ID IN ( '\" . implode( \"','\", $users_array ) . \"' )\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$profile_photo_where = '';\n\t\t\tif ( $directory_data['has_profile_photo'] == 1 ) {\n\t\t\t\t$profile_photo_where = \" AND umm_general.um_value LIKE '%s:13:\\\"profile_photo\\\";b:1;%'\";\n\t\t\t}\n\n\t\t\t$cover_photo_where = '';\n\t\t\tif ( $directory_data['has_cover_photo'] == 1 ) {\n\t\t\t\t$cover_photo_where = \" AND umm_general.um_value LIKE '%s:11:\\\"cover_photo\\\";b:1;%'\";\n\t\t\t}\n\n\t\t\tif ( ! UM()->roles()->um_user_can( 'can_edit_everyone' ) ) {\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n\n\t\t\t\t$this->sql_where .= \" AND ( umm_general.um_key = 'um_member_directory_data' AND \n\t\t\t\tumm_general.um_value LIKE '%s:14:\\\"account_status\\\";s:8:\\\"approved\\\";%' AND umm_general.um_value LIKE '%s:15:\\\"hide_in_members\\\";b:0;%'{$profile_photo_where}{$cover_photo_where} )\";\n\t\t\t} else {\n\t\t\t\tif ( ! empty( $cover_photo_where ) || ! empty( $profile_photo_where ) ) {\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n\n\t\t\t\t\t$this->sql_where .= \" AND ( umm_general.um_key = 'um_member_directory_data'{$profile_photo_where}{$cover_photo_where} )\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$roles = array();\n\t\t\tif ( UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\t$view_roles = um_user( 'can_view_roles' );\n\n\t\t\t\tif ( ! $view_roles ) {\n\t\t\t\t\t$view_roles = array();\n\t\t\t\t}\n\n\t\t\t\t$roles = array_merge( $roles, maybe_unserialize( $view_roles ) );\n\t\t\t}\n\n\t\t\tif ( ! empty( $directory_data['roles'] ) ) {\n\t\t\t\tif ( ! empty( $roles ) ) {\n\t\t\t\t\t$roles = array_intersect( $roles, maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t} else {\n\t\t\t\t\t$roles = array_merge( $roles, maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! empty( $roles ) ) {\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\n\t\t\t\t$roles_clauses = array();\n\t\t\t\tforeach ( $roles as $role ) {\n\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n\t\t\t\t}\n\n\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n\n\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n\t\t\t} else {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t// select users who have capabilities for current blog\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\t\t\t\t\t$this->sql_where .= \" AND umm_roles.um_value IS NOT NULL \";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\t$searches = array();\n\t\t\t\tforeach ( $this->core_search_fields as $field ) {\n\t\t\t\t\t$searches[] = $wpdb->prepare( \"u.{$field} LIKE %s\", '%' . trim( $_POST['search'] ) . '%' );\n\t\t\t\t}\n\n\t\t\t\t$core_search = implode( ' OR ', $searches );\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_search ON umm_search.user_id = u.ID\";\n\t\t\t\t$this->sql_where .= \" AND ( umm_search.um_value = '\" . trim( $_POST['search'] ) . \"' OR umm_search.um_value LIKE '%\" . trim( $_POST['search'] ) . \"%' OR umm_search.um_value LIKE '%\" . trim( serialize( strval( $_POST['search'] ) ) ) . \"%' OR {$core_search})\";\n\n\t\t\t\t$this->is_search = true;\n\t\t\t}\n\n\n\t\t\t//filters\n\t\t\t$filter_query = array();\n\t\t\tif ( ! empty( $directory_data['search_fields'] ) ) {\n\t\t\t\t$search_filters = maybe_unserialize( $directory_data['search_fields'] );\n\t\t\t\tif ( ! empty( $search_filters ) && is_array( $search_filters ) ) {\n\t\t\t\t\t$filter_query = array_intersect_key( $_POST, array_flip( $search_filters ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// added for user tags extension integration on individual tag page\n\t\t\t$ignore_empty_filters = apply_filters( 'um_member_directory_ignore_empty_filters', false );\n\n\t\t\tif ( ! empty( $filter_query ) || $ignore_empty_filters ) {\n\t\t\t\t$this->is_search = true;\n\n\t\t\t\t$i = 1;\n\t\t\t\tforeach ( $filter_query as $field => $value ) {\n\n\t\t\t\t\t$attrs = UM()->fields()->get_field( $field );\n\t\t\t\t\t// skip private invisible fields\n\t\t\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch ( $field ) {\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t\t * @example\n\t\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t\t * }\n\t\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'text':\n\n\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n\n\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value = '{$value}' )\";\n\n\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\t\tif ( is_array( $value ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t\t$values_array = array();\n\t\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\\\"\" . trim( $single_val ) . \"\\\"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\" . serialize( strval( trim( $single_val ) ) ) . \"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value = '\" . trim( $single_val ) . \"'\";\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\" . serialize( intval( trim( $single_val ) ) ) . \"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND ( {$values} ) )\";\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t$min = min( $value );\n\t\t\t\t\t\t\t\t\t\t$max = max( $value );\n\n\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value BETWEEN {$min} AND {$max} )\";\n\n\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n\t\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n\n\n\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value = '{$value[0]}' )\";\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND CAST( umm\" . $i . \".um_value AS TIME ) BETWEEN {$value[0]} AND {$value[1]} )\";\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n\t\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\t\tif ( ! empty( $roles ) || is_multisite() ) {\n\t\t\t\t\t\t\t\t$roles_clauses = array();\n\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n\n\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\n\t\t\t\t\t\t\t\t$roles = $value;\n\n\t\t\t\t\t\t\t\t$roles_clauses = array();\n\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n\n\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'birth_date':\n\n\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n\n\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = 'birth_date' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user_registered':\n\n\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t\t$this->sql_where .= \" AND ( u.user_registered BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'last_login':\n\n\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\n\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '_um_last_login' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//unable default filter in case if we select other filters in frontend filters\n\t\t\tif ( empty( $this->custom_filters_in_query ) ) {\n\t\t\t\t$default_filters = array();\n\t\t\t\tif ( ! empty( $directory_data['search_filters'] ) ) {\n\t\t\t\t\t$default_filters = maybe_unserialize( $directory_data['search_filters'] );\n\t\t\t\t}\n\n\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\n\t\t\t\tif ( ! empty( $default_filters ) ) {\n\t\t\t\t\t$i = 1;\n\t\t\t\t\tforeach ( $default_filters as $field => $value ) {\n\t\t\t\t\t\t//unable default filter in case if we select other value in frontend filters\n\t\t//\t\t\t\tif ( in_array( $field, array_keys( $this->custom_filters_in_query ) ) ) {\n\t\t//\t\t\t\t\tcontinue;\n\t\t//\t\t\t\t}\n\n\t\t\t\t\t\tswitch ( $field ) {\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t\t\t * @example\n\t\t\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t\t\t * }\n\t\t\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'text':\n\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value = '{$value}' )\";\n\n\t\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t$value = array( $value );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t\t$values_array = array();\n\t\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\\\"\" . trim( $single_val ) . \"\\\"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\" . serialize( strval( trim( $single_val ) ) ) . \"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value = '\" . trim( $single_val ) . \"'\";\n\n\t\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\" . serialize( intval( trim( $single_val ) ) ) . \"%'\";\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ( {$values} ) )\";\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t\t$min = min( $value );\n\t\t\t\t\t\t\t\t\t\t\t$max = max( $value );\n\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value BETWEEN {$min} AND {$max} )\";\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n\t\t\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n\n\n\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\t\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value = '{$value[0]}' )\";\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\t\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND CAST( ummd\" . $i . \".um_value AS TIME ) BETWEEN {$value[0]} AND {$value[1]} )\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'role':\n//\t\t\t\t\t\t\t\t$value = explode( '||', $value );\n//\t\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\t\t\tif ( ! empty( $roles ) || is_multisite() ) {\n\t\t\t\t\t\t\t\t\t$roles_clauses = array();\n\t\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n\t\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n\n\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\n\t\t\t\t\t\t\t\t\t$roles = $value;\n\n\t\t\t\t\t\t\t\t\t$roles_clauses = array();\n\t\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n\t\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n\n\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'birth_date':\n\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = 'birth_date' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'user_registered':\n\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( u.user_registered BETWEEN {$from_date} AND {$to_date} )\";\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'last_login':\n\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '_um_last_login' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$order = 'ASC';\n\t\t\t$sortby = ! empty( $_POST['sorting'] ) ? $_POST['sorting'] : $directory_data['sortby'];\n\n\t\t\t// handle sorting options\n\t\t\t// sort members by\n\t\t\tif ( $sortby == 'other' && $directory_data['sortby_custom'] ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$directory_data['sortby_custom']}' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\n\t\t\t} elseif ( 'display_name' == $sortby ) {\n\n\t\t\t\t$display_name = UM()->options()->get( 'display_name' );\n\t\t\t\tif ( $display_name == 'username' ) {\n\n\t\t\t\t\t$this->sql_order = \" ORDER BY u.user_login {$order} \";\n\n\t\t\t\t} else {\n\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = 'full_name' )\";\n\n\t\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order}, u.display_name {$order} \";\n\n\t\t\t\t}\n\n\t\t\t} elseif ( in_array( $sortby, array( 'last_name', 'first_name', 'nickname' ) ) ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$sortby}' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\n\t\t\t} elseif ( $sortby == 'last_login' ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '_um_last_login' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS NUMERIC ) {$order} \";\n\n\t\t\t} elseif ( $sortby == 'last_first_name' ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = 'last_name' )\";\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort2 ON ( umm_sort2.user_id = u.ID AND umm_sort2.um_key = 'first_name' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) ASC, CAST( umm_sort2.um_value AS CHAR ) ASC \";\n\n\t\t\t} elseif ( $sortby == 'random' ) {\n\n\t\t\t\tif ( um_is_session_started() === false ) {\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\n\t\t\t\t// Reset seed on load of initial\n\t\t\t\tif ( empty( $_REQUEST['directory_id'] ) && isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\tunset( $_SESSION['um_member_directory_seed'] );\n\t\t\t\t}\n\n\t\t\t\t// Get seed from session variable if it exists\n\t\t\t\t$seed = false;\n\t\t\t\tif ( isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\t$seed = $_SESSION['um_member_directory_seed'];\n\t\t\t\t}\n\n\t\t\t\t// Set new seed if none exists\n\t\t\t\tif ( ! $seed ) {\n\t\t\t\t\t$seed = rand();\n\t\t\t\t\t$_SESSION['um_member_directory_seed'] = $seed;\n\t\t\t\t}\n\n\t\t\t\t$this->sql_order = 'ORDER by RAND(' . $seed . ')';\n\n\t\t\t} else {\n\n\t\t\t\tif ( strstr( $sortby, '_desc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_desc', '', $sortby );\n\t\t\t\t\t$order = 'DESC';\n\t\t\t\t}\n\n\t\t\t\tif ( strstr( $sortby, '_asc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_asc', '', $sortby );\n\t\t\t\t\t$order = 'ASC';\n\t\t\t\t}\n\n\t\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\t\tif ( false !== array_search( $sortby, $metakeys ) ) {\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$sortby}' )\";\n\t\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\t\t\t\t} else {\n\t\t\t\t\t$this->sql_order = \" ORDER BY u.{$sortby} {$order} \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->sql_order = apply_filters( 'um_modify_sortby_parameter', $this->sql_order, $sortby );\n\n\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$query_number = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $profiles_per_page ) ? $directory_data['max_users'] : $profiles_per_page;\n\t\t\t$query_paged = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\n\t\t\t$number = $query_number;\n\t\t\tif ( ! empty( $directory_data['max_users'] ) && $query_paged*$query_number > $directory_data['max_users'] ) {\n\t\t\t\t$number = ( $query_paged*$query_number - ( $query_paged*$query_number - $directory_data['max_users'] ) ) % $query_number;\n\t\t\t}\n\n\t\t\t// limit\n\t\t\tif ( isset( $query_number ) && $query_number > 0 ) {\n\t\t\t\t$this->sql_limit .= $wpdb->prepare( 'LIMIT %d, %d', $query_number * ( $query_paged - 1 ), $number );\n\t\t\t}\n\n\t\t\t$sql_join = implode( ' ', $this->joins );\n\n\t\t\tdo_action( 'um_pre_users_query', $this, $directory_data, $sortby );\n\n\t\t\tglobal $wpdb;\n\t\t\t$user_ids = $wpdb->get_col(\n\t\t\t\t\"SELECT SQL_CALC_FOUND_ROWS DISTINCT u.ID \n\t\t\t\tFROM {$wpdb->users} AS u\n\t\t\t\t{$sql_join}\n\t\t\t\tWHERE 1=1 {$this->sql_where}\n\t\t\t\t{$this->sql_order}\n\t\t\t\t{$this->sql_limit}\"\n\t\t\t);\n\n\t\t\t$total_users = (int) $wpdb->get_var( 'SELECT FOUND_ROWS()' );\n\n\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $total_users );\n\n\t\t\t$sizes = UM()->options()->get( 'cover_thumb_sizes' );\n\n\t\t\t$this->cover_size = UM()->mobile()->isTablet() ? $sizes[1] : end( $sizes );\n\n\t\t\t$avatar_size = UM()->options()->get( 'profile_photosize' );\n\t\t\t$this->avatar_size = str_replace( 'px', '', $avatar_size );\n\n\t\t\t$users = array();\n\t\t\tforeach ( $user_ids as $user_id ) {\n\t\t\t\t$users[] = $this->build_user_card_data( $user_id, $directory_data );\n\t\t\t}\n\n\t\t\tum_reset_user();\n\t\t\t// end of user card\n\n\t\t\twp_send_json_success( array( 'pagination' => $pagination_data, 'users' => $users, 'is_search' => $this->is_search ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Get data array for pagination\n\t\t *\n\t\t *\n\t\t * @param array $directory_data\n\t\t * @param int $total_users\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction calculate_pagination( $directory_data, $total_users ) {\n\n\t\t\t$current_page = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\n\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $total_users ) ? $directory_data['max_users'] : $total_users;\n\n\t\t\t// number of profiles for mobile\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$total_pages = 1;\n\t\t\tif ( ! empty( $profiles_per_page ) ) {\n\t\t\t\t$total_pages = ceil( $total_users / $profiles_per_page );\n\t\t\t}\n\n\t\t\tif ( ! empty( $total_pages ) ) {\n\t\t\t\t$index1 = 0 - ( $current_page - 2 ) + 1;\n\t\t\t\t$to = $current_page + 2;\n\t\t\t\tif ( $index1 > 0 ) {\n\t\t\t\t\t$to += $index1;\n\t\t\t\t}\n\n\t\t\t\t$index2 = $total_pages - ( $current_page + 2 );\n\t\t\t\t$from = $current_page - 2;\n\t\t\t\tif ( $index2 < 0 ) {\n\t\t\t\t\t$from += $index2;\n\t\t\t\t}\n\n\t\t\t\t$pages_to_show = range(\n\t\t\t\t\t( $from > 0 ) ? $from : 1,\n\t\t\t\t\t( $to <= $total_pages ) ? $to : $total_pages\n\t\t\t\t);\n\t\t\t}\n\n\n\t\t\t$pagination_data = array(\n\t\t\t\t'pages_to_show' => ( ! empty( $pages_to_show ) && count( $pages_to_show ) > 1 ) ? array_values( $pages_to_show ) : array(),\n\t\t\t\t'current_page'  => $current_page,\n\t\t\t\t'total_pages'   => $total_pages,\n\t\t\t\t'total_users'   => $total_users,\n\t\t\t);\n\n\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n\n\t\t\treturn $pagination_data;\n\t\t}\n\t}\n}", "<?php\nnamespace um\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\core\\Member_Directory' ) ) {\n\n\n\t/**\n\t * Class Member_Directory\n\t * @package um\\core\n\t */\n\tclass Member_Directory {\n\n\n\t\t/**\n\t\t * Member Directory Views\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tvar $view_types = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $sort_fields = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $default_sorting = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $filter_fields = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $custom_filters_in_query = array();\n\n\n\n\t\tvar $filter_supported_fields = array();\n\n\n\t\tvar $filter_types = array();\n\n\n\t\tvar $core_search_fields = array(\n\t\t\t'user_login',\n\t\t\t'user_url',\n\t\t\t'display_name',\n\t\t\t'user_email',\n\t\t\t'user_nicename',\n\t\t);\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $query_args;\n\n\n\t\t/**\n\t\t * @var User Card cover size\n\t\t */\n\t\tvar $cover_size;\n\n\n\t\t/**\n\t\t * @var User Avatar size\n\t\t */\n\t\tvar $avatar_size;\n\n\n\t\t/**\n\t\t * @var bool Searching marker\n\t\t */\n\t\tvar $is_search = false;\n\n\n\t\t/**\n\t\t * Member_Directory constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\tadd_filter( 'plugins_loaded', array( &$this, 'init_variables' ), 99999 );\n\t\t\tadd_filter( 'init', array( &$this, 'init_filter_types' ), 2 );\n\n\t\t\tadd_action( 'template_redirect', array( &$this, 'access_members' ), 555 );\n\t\t}\n\n\n\t\t/**\n\t\t * Getting member directory post ID via hash\n\t\t * Hash is unique attr, which we use visible at frontend\n\t\t *\n\t\t * @param string $hash\n\t\t *\n\t\t * @return bool|int\n\t\t */\n\t\tfunction get_directory_by_hash( $hash ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $wpdb->get_var( $wpdb->prepare( \"SELECT ID FROM {$wpdb->posts} WHERE SUBSTRING( MD5( ID ), 11, 5 ) = %s\", $hash ) );\n\n\t\t\tif ( empty( $directory_id ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn (int) $directory_id;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $id\n\t\t *\n\t\t * @return bool|string\n\t\t */\n\t\tfunction get_directory_hash( $id ) {\n\t\t\t$hash = substr( md5( $id ), 10, 5 );\n\t\t\treturn $hash;\n\t\t}\n\n\n\t\t/**\n\t\t * Get view Type template\n\t\t * @param string $type\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_type_basename( $type ) {\n\t\t\treturn apply_filters( \"um_member_directory_{$type}_type_template_basename\", '' );\n\t\t}\n\n\n\t\t/**\n\t\t * Tag conversion for member directory\n\t\t *\n\t\t * @param string $string\n\t\t * @param array $array\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction convert_tags( $string, $array ) {\n\n\t\t\t$search = array(\n\t\t\t\t'{total_users}',\n\t\t\t);\n\n\t\t\t$replace = array(\n\t\t\t\t$array['total_users'],\n\t\t\t);\n\n\t\t\t$string = str_replace( $search, $replace, $string );\n\t\t\treturn $string;\n\t\t}\n\n\n\t\t/**\n\t\t * Members page allowed?\n\t\t *\n\t\t * can be disabled by \"Enable Members Directory\" option\n\t\t *\n\t\t */\n\t\tfunction access_members() {\n\t\t\tif ( UM()->options()->get( 'members_page' ) == 0 && um_is_core_page( 'members' ) ) {\n\t\t\t\tum_redirect_home();\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param $value\n\t\t * @param $key\n\t\t * @param $post_id\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction before_save_data( $value, $key, $post_id ) {\n\n\t\t\t$post = get_post( $post_id );\n\n\t\t\tif ( $post->post_type == 'um_directory' ) {\n\n\t\t\t\tif ( ! empty( $value ) && in_array( $key, array( '_um_view_types', '_um_roles', '_um_roles_can_search', '_um_roles_can_filter' ) ) ) {\n\t\t\t\t\t$value = array_keys( $value );\n\t\t\t\t} elseif ( $key == '_um_search_filters' ) {\n\n\t\t\t\t\t$temp_value = array();\n\n\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\tforeach ( $value as $k ) {\n\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $k ];\n\t\t\t\t\t\t\tif ( ! empty( $filter_type  ) ) {\n\t\t\t\t\t\t\t\tif ( $filter_type == 'select' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = trim( $_POST[ $k ] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ( $filter_type == 'slider' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = $_POST[ $k ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ( $filter_type == 'timepicker' || $filter_type == 'datepicker' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k . '_from' ] ) && ! empty( $_POST[ $k . '_to' ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = array( $_POST[ $k . '_from' ], $_POST[ $k . '_to' ] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$value = $temp_value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $value;\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_variables() {\n\n\t\t\t// Types\n\t\t\t$this->view_types = apply_filters( 'um_member_directory_views', array(\n\t\t\t\t'grid'  => array( 'title' => __( 'Grid', 'ultimate-member' ), 'icon' => 'um-faicon-th' ),\n\t\t\t\t'list'  => array( 'title' => __( 'List', 'ultimate-member' ), 'icon' => 'um-faicon-list' ),\n\t\t\t) );\n\n\t\t\t// Sort\n\t\t\t$this->sort_fields = apply_filters( 'um_members_directory_sort_fields', array(\n\t\t\t\t'user_registered_desc'  => __( 'New users first', 'ultimate-member' ),\n\t\t\t\t'user_registered_asc'   => __( 'Old users first', 'ultimate-member' ),\n\t\t\t\t'username'              => __( 'Username', 'ultimate-member' ),\n\t\t\t\t'nickname'              => __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t'first_name'            => __( 'First name', 'ultimate-member' ),\n\t\t\t\t'last_name'             => __( 'Last name', 'ultimate-member' ),\n\t\t\t\t'display_name'          => __( 'Display name', 'ultimate-member' ),\n\t\t\t\t'last_first_name'       => __( 'Last & First name', 'ultimate-member' ),\n\t\t\t\t'last_login'            => __( 'Last login', 'ultimate-member' ),\n\n\t\t\t) );\n\n\t\t\tasort( $this->sort_fields );\n\n\t\t\t$this->default_sorting = apply_filters( 'um_members_directory_default_sort', array_merge( $this->sort_fields, array(\n\t\t\t\t'random'    => __( 'Random', 'ultimate-member' ),\n\t\t\t\t'other'     => __( 'Other (Custom Field)', 'ultimate-member' ),\n\t\t\t) ) );\n\n\t\t\tasort( $this->default_sorting );\n\n\t\t\t// Filters\n\t\t\t$this->filter_fields = array(\n\t\t\t\t'country'               => __( 'Country', 'ultimate-member' ),\n\t\t\t\t'gender'                => __( 'Gender', 'ultimate-member' ),\n\t\t\t\t'languages'             => __( 'Languages', 'ultimate-member' ),\n\t\t\t\t'role'                  => __( 'Roles', 'ultimate-member' ),\n\t\t\t\t'birth_date'            => __( 'Age', 'ultimate-member' ),\n\t\t\t\t'last_login'            => __( 'Last Login', 'ultimate-member' ),\n\t\t\t\t'user_registered'       => __( 'User Registered', 'ultimate-member' ),\n\t\t\t\t'first_name'            => __( 'First Name', 'ultimate-member' ),\n\t\t\t\t'last_name'             => __( 'Last Name', 'ultimate-member' ),\n\t\t\t\t'nickname'              => __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t'secondary_user_email'  => __( 'Secondary E-mail Address', 'ultimate-member' ),\n\t\t\t\t'description'           => __( 'Biography', 'ultimate-member' ),\n\t\t\t\t'phone_number'          => __( 'Phone Number', 'ultimate-member' ),\n\t\t\t\t'mobile_number'         => __( 'Mobile Number', 'ultimate-member' ),\n\t\t\t);\n\n\t\t\t$this->filter_supported_fields = apply_filters( 'um_members_directory_custom_field_types_supported_filter', array( 'date', 'time', 'select', 'multiselect', 'radio', 'checkbox', 'rating', 'text', 'textarea' ) );\n\n\t\t\tif ( ! empty( UM()->builtin()->saved_fields ) ) {\n\t\t\t\tforeach ( UM()->builtin()->saved_fields as $key => $data ) {\n\n\t\t\t\t\tif ( $key == '_um_last_login' ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $data['type'] ) && in_array( $data['type'], $this->filter_supported_fields ) ) {\n\t\t\t\t\t\tif ( isset( $data['title'] ) && array_search( $data['title'], $this->filter_fields ) !== false ) {\n\t\t\t\t\t\t\t$data['title'] = $data['title'] . ' (' . $key . ')';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$title = isset( $data['title'] ) ? $data['title'] : ( isset( $data['label'] ) ? $data['label'] : '' );\n\t\t\t\t\t\tif ( empty( $title ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->filter_fields[ $key ] = $title;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->filter_fields = apply_filters( 'um_members_directory_filter_fields', $this->filter_fields );\n\n\t\t\tksort( $this->filter_fields );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_filter_types() {\n\t\t\t$this->filter_types = apply_filters( 'um_members_directory_filter_types', array(\n\t\t\t\t'country'               => 'select',\n\t\t\t\t'gender'                => 'select',\n\t\t\t\t'languages'             => 'select',\n\t\t\t\t'role'                  => 'select',\n\t\t\t\t'birth_date'            => 'slider',\n\t\t\t\t'last_login'            => 'datepicker',\n\t\t\t\t'user_registered'       => 'datepicker',\n\t\t\t\t'first_name'            => 'text',\n\t\t\t\t'last_name'             => 'text',\n\t\t\t\t'nickname'              => 'text',\n\t\t\t\t'secondary_user_email'  => 'text',\n\t\t\t\t'description'           => 'text',\n\t\t\t\t'phone_number'          => 'text',\n\t\t\t\t'mobile_number'         => 'text',\n\t\t\t) );\n\n\t\t\t$fields = UM()->builtin()->all_user_fields;\n\n\t\t\t$custom_fields_types = array_flip( array_keys( $this->filter_fields ) );\n\t\t\tforeach ( $custom_fields_types as $key => &$value ) {\n\t\t\t\tif ( ! isset( $fields[ $key ] ) ) {\n\t\t\t\t\tunset( $custom_fields_types[ $key ] );\n\t\t\t\t} else {\n\t\t\t\t\tswitch ( $fields[ $key ]['type'] ) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$value = apply_filters( 'um_custom_field_filter_type', 'select', $fields[ $key ] );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tcase 'textarea':\n\t\t\t\t\t\t\t$value = 'text';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\t$value = 'datepicker';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'time':\n\t\t\t\t\t\t\t$value = 'timepicker';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\tcase 'multiselect':\n\t\t\t\t\t\tcase 'radio':\n\t\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\t\t\t$value = 'select';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t$value = 'slider';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->filter_types = array_merge( $custom_fields_types, $this->filter_types );\n\t\t}\n\n\n\t\t/**\n\t\t * Render member's directory\n\t\t * filters selectboxes\n\t\t *\n\t\t * @param string $filter\n\t\t * @param array $directory_data\n\t\t * @param mixed $default_value\n\t\t *\n\t\t * @return string $filter\n\t\t */\n\t\tfunction show_filter( $filter, $directory_data, $default_value = false ) {\n\n\t\t\tif ( empty( $this->filter_types[ $filter ] ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$field_key = $filter;\n\t\t\tif ( $filter == 'last_login' ) {\n\t\t\t\t$field_key = '_um_last_login';\n\t\t\t}\n\t\t\tif ( $filter == 'role' ) {\n\t\t\t\t$field_key = 'role_select';\n\t\t\t}\n\n\t\t\t$fields = UM()->builtin()->all_user_fields;\n\n\t\t\tif ( isset( $fields[ $field_key ] ) ) {\n\t\t\t\t$attrs = $fields[ $field_key ];\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_custom_search_field_{$filter}\n\t\t\t\t * @description Custom search settings by $filter\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"Search Settings\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage\n\t\t\t\t * <?php add_filter( 'um_custom_search_field_{$filter}', 'function_name', 10, 1 ); ?>\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_custom_search_field_{$filter}', 'my_custom_search_field', 10, 1 );\n\t\t\t\t * function my_change_email_template_file( $settings ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $settings;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$attrs = apply_filters( \"um_custom_search_field_{$filter}\", array(), $field_key );\n\t\t\t}\n\n\t\t\t// skip private invisible fields\n\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_search_fields\n\t\t\t * @description Filter all search fields\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"Search Fields\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_search_fields', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_search_fields', 'my_search_fields', 10, 1 );\n\t\t\t * function my_search_fields( $settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$attrs = apply_filters( 'um_search_fields', $attrs, $field_key, $directory_data['form_id'] );\n\n\t\t\t$unique_hash = substr( md5( $directory_data['form_id'] ), 10, 5 );\n\n\t\t\tob_start();\n\n\t\t\tswitch ( $this->filter_types[ $filter ] ) {\n\t\t\t\tdefault: {\n\n\t\t\t\t\tdo_action( \"um_member_directory_filter_type_{$this->filter_types[ $filter ]}\", $filter, $this->filter_types );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'text': {\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? $_GET[ 'filter_' . $filter . '_' . $unique_hash ] : ''; ?>\n\n\t\t\t\t\t<input type=\"text\" autocomplete=\"off\" id=\"<?php echo $filter; ?>\" name=\"<?php echo $filter; ?>\"\n\t\t\t\t\t       placeholder=\"<?php esc_attr_e( stripslashes( $attrs['label'] ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t       value=\"<?php echo esc_attr( $filter_from_url ) ?>\" class=\"um-form-field\" />\n\n\t\t\t\t\t<?php break;\n\t\t\t\t}\n\t\t\t\tcase 'select': {\n\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? explode( '||', sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ) : array();\n\n\t\t\t\t\t// new\n\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\tif ( $attrs['metakey'] != 'role_select' ) {\n\t\t\t\t\t\t$values_array = $wpdb->get_col(\n\t\t\t\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\t\t\t\"SELECT DISTINCT meta_value \n\t\t\t\t\t\t\t\tFROM $wpdb->usermeta \n\t\t\t\t\t\t\t\tWHERE meta_key = %s AND \n\t\t\t\t\t\t\t\t      meta_value != ''\",\n\t\t\t\t\t\t\t\t$attrs['metakey']\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$users_roles = count_users();\n\t\t\t\t\t\t$values_array = ( ! empty( $users_roles['avail_roles'] ) && is_array( $users_roles['avail_roles'] ) ) ? array_keys( array_filter( $users_roles['avail_roles'] ) ) : array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $values_array ) && in_array( $attrs['type'], array( 'select', 'multiselect', 'checkbox', 'radio' ) ) ) {\n\t\t\t\t\t\t$values_array = array_map( 'maybe_unserialize', $values_array );\n\t\t\t\t\t\t$temp_values = array();\n\t\t\t\t\t\tforeach ( $values_array as $values ) {\n\t\t\t\t\t\t\tif ( is_array( $values ) ) {\n\t\t\t\t\t\t\t\t$temp_values = array_merge( $temp_values, $values );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$temp_values[] = $values;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$values_array = array_unique( $temp_values );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( empty( $values_array ) ) {\n\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $attrs['metakey'] ) && strstr( $attrs['metakey'], 'role_' ) ) {\n\t\t\t\t\t\t$shortcode_roles = get_post_meta( $directory_data['form_id'], '_um_roles', true );\n\t\t\t\t\t\t$um_roles = UM()->roles()->get_roles( false );\n\n\t\t\t\t\t\tif ( ! empty( $shortcode_roles ) && is_array( $shortcode_roles ) ) {\n\t\t\t\t\t\t\t$attrs['options'] = array();\n\n\t\t\t\t\t\t\tforeach ( $um_roles as $key => $value ) {\n\t\t\t\t\t\t\t\tif ( in_array( $key, $shortcode_roles ) ) {\n\t\t\t\t\t\t\t\t\t$attrs['options'][ $key ] = $value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$attrs['options'] = array();\n\n\t\t\t\t\t\t\tforeach ( $um_roles as $key => $value ) {\n\t\t\t\t\t\t\t\t$attrs['options'][ $key ] = $value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$custom_dropdown = '';\n\t\t\t\t\tif ( ! empty( $attrs['custom_dropdown_options_source'] ) ) {\n\t\t\t\t\t\t$attrs['custom'] = true;\n\n\t\t\t\t\t\tif ( ! empty( $attrs['parent_dropdown_relationship'] ) ) {\n\n\t\t\t\t\t\t\t$custom_dropdown .= ' data-member-directory=\"yes\"';\n\t\t\t\t\t\t\t$custom_dropdown .= ' data-um-parent=\"' . esc_attr( $attrs['parent_dropdown_relationship'] ) . '\"';\n\n\t\t\t\t\t\t\tif ( isset( $_GET[ 'filter_' . $attrs['parent_dropdown_relationship'] . '_' . $unique_hash ] ) ) {\n\t\t\t\t\t\t\t\t$_POST['parent_option_name'] = $attrs['parent_dropdown_relationship'];\n\t\t\t\t\t\t\t\t$_POST['parent_option'] = explode( '||', filter_input( INPUT_GET, 'filter_' . $attrs['parent_dropdown_relationship'] . '_' . $unique_hash ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ajax_source = apply_filters( \"um_custom_dropdown_options_source__{$filter}\", $attrs['custom_dropdown_options_source'], $attrs );\n\t\t\t\t\t\t$custom_dropdown .= ' data-um-ajax-source=\"' . esc_attr( $ajax_source ) . '\" ';\n\n\t\t\t\t\t\t$attrs['options'] = UM()->fields()->get_options_from_callback( $attrs, $attrs['type'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $attrs['metakey'] != 'role_select' && empty( $custom_dropdown ) ) {\n\t\t\t\t\t\t$attrs['options'] = array_intersect( array_map( 'stripslashes', $attrs['options'] ), $values_array );\n\t\t\t\t\t} elseif ( ! empty( $custom_dropdown ) ) {\n\t\t\t\t\t\t$attrs['options'] = array_intersect_key( $attrs['options'], array_flip( $values_array ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$attrs['options'] = array_intersect_key( $attrs['options'], array_flip( $values_array ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$attrs['options'] = apply_filters( 'um_member_directory_filter_select_options', $attrs['options'], $values_array, $attrs );\n\n\t\t\t\t\tif ( empty( $attrs['options'] ) || ! is_array( $attrs['options'] ) ) {\n\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $attrs['custom_dropdown_options_source'] ) && ! empty( $attrs['parent_dropdown_relationship'] ) ) {\n\t\t\t\t\t\t$attrs['options'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $attrs['label'] ) ) {\n\t\t\t\t\t\t$attrs['label'] = strip_tags( $attrs['label'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tksort( $attrs['options'] );\n\n\t\t\t\t\t$attrs['options'] = apply_filters( 'um_member_directory_filter_select_options_sorted', $attrs['options'], $attrs ); ?>\n\n\t\t\t\t\t<select class=\"um-s1\" id=\"<?php echo esc_attr( $filter ); ?>\" name=\"<?php echo esc_attr( $filter ); ?>\"\n\t\t\t\t\t        data-placeholder=\"<?php esc_attr_e( stripslashes( $attrs['label'] ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t<?php echo $custom_dropdown; ?>>\n\n\t\t\t\t\t\t<option></option>\n\n\t\t\t\t\t\t<?php if ( ! empty( $attrs['options'] ) ) {\n\t\t\t\t\t\t\tforeach ( $attrs['options'] as $k => $v ) {\n\n\t\t\t\t\t\t\t\t$v = stripslashes( $v );\n\n\t\t\t\t\t\t\t\t$opt = $v;\n\n\t\t\t\t\t\t\t\tif ( strstr( $filter, 'role_' ) || $filter == 'role' ) {\n\t\t\t\t\t\t\t\t\t$opt = $k;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( isset( $attrs['custom'] ) ) {\n\t\t\t\t\t\t\t\t\t$opt = $k;\n\t\t\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t\t\t\t<option value=\"<?php echo esc_attr( $opt ); ?>\" data-value_label=\"<?php esc_attr_e( $v, 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t\t\t\t<?php disabled( ! empty( $filter_from_url ) && in_array( $opt, $filter_from_url ) ) ?>\n\t\t\t\t\t\t\t\t\t<?php selected( $opt === $default_value ) ?>>\n\t\t\t\t\t\t\t\t\t<?php _e( $v, 'ultimate-member' ); ?>\n\t\t\t\t\t\t\t\t</option>\n\n\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t</select>\n\n\t\t\t\t\t<?php break;\n\t\t\t\t}\n\t\t\t\tcase 'slider': {\n\t\t\t\t\t$range = $this->slider_filters_range( $filter, $directory_data );\n\n\t\t\t\t\tlist( $single_placeholder, $plural_placeholder ) = $this->slider_range_placeholder( $filter, $attrs );\n\n\t\t\t\t\tif ( $range ) { ?>\n\t\t\t\t\t\t<input type=\"hidden\" id=\"<?php echo $filter; ?>_min\" name=\"<?php echo $filter; ?>[]\" class=\"um_range_min\" value=\"<?php echo ! empty( $default_value ) ? esc_attr( min( $default_value ) ) : '' ?>\" />\n\t\t\t\t\t\t<input type=\"hidden\" id=\"<?php echo $filter; ?>_max\" name=\"<?php echo $filter; ?>[]\" class=\"um_range_max\" value=\"<?php echo ! empty( $default_value ) ? esc_attr( max( $default_value ) ) : '' ?>\" />\n\t\t\t\t\t\t<div class=\"um-slider\" data-field_name=\"<?php echo $filter; ?>\" data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"></div>\n\t\t\t\t\t\t<div class=\"um-slider-range\" data-placeholder-s=\"<?php echo esc_attr( $single_placeholder ); ?>\" data-placeholder-p=\"<?php echo esc_attr( $plural_placeholder ); ?>\" data-label=\"<?php echo ( ! empty( $attrs['label'] ) ) ? esc_attr__( stripslashes( $attrs['label'] ), 'ultimate-member' ) : ''; ?>\"></div>\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'datepicker': {\n\n\t\t\t\t\t$range = $this->datepicker_filters_range( $filter );\n\n\t\t\t\t\t$label = ! empty( $attrs['label'] ) ? $attrs['label'] : $attrs['title'];\n\n\t\t\t\t\tif ( $range ) { ?>\n\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_from\" name=\"<?php echo $filter; ?>_from\" class=\"um-datepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s From', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-date_min=\"<?php echo $range[0] ?>\" data-date_max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"from\" data-value=\"<?php echo ! empty( $default_value ) ? esc_attr( strtotime( min( $default_value ) ) ) : '' ?>\" />\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_to\" name=\"<?php echo $filter; ?>_to\" class=\"um-datepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s To', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-date_min=\"<?php echo $range[0] ?>\" data-date_max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"to\" data-value=\"<?php echo ! empty( $default_value ) ? esc_attr( strtotime( max( $default_value ) ) ) : '' ?>\" />\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'timepicker': {\n\n\t\t\t\t\t$range = $this->timepicker_filters_range( $filter );\n\n\t\t\t\t\t$label = ! empty( $attrs['label'] ) ? $attrs['label'] : $attrs['title'];\n\n\t\t\t\t\tswitch ( $attrs['format'] ) {\n\t\t\t\t\t\tcase 'g:i a':\n\t\t\t\t\t\t\t$js_format = 'h:i a';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'g:i A':\n\t\t\t\t\t\t\t$js_format = 'h:i A';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'H:i':\n\t\t\t\t\t\t\t$js_format = 'HH:i';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $range ) { ?>\n\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_from\" name=\"<?php echo $filter; ?>_from\" class=\"um-timepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s From', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-format=\"<?php echo esc_attr( $js_format ) ?>\" data-intervals=\"<?php echo esc_attr( $attrs['intervals'] ) ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"from\" />\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_to\" name=\"<?php echo $filter; ?>_to\" class=\"um-timepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s To', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-format=\"<?php echo esc_attr( $js_format ) ?>\" data-intervals=\"<?php echo esc_attr( $attrs['intervals'] ) ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"to\" />\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$filter = ob_get_clean();\n\t\t\treturn $filter;\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $filter\n\t\t * @param array $directory_data\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction slider_filters_range( $filter, $directory_data ) {\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_slider\", $range, $directory_data );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'birth_date': {\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( \"SELECT DISTINCT meta_value FROM {$wpdb->usermeta} WHERE meta_key='birth_date' ORDER BY meta_value DESC\" );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( $this->borndate( strtotime( $meta[0] ) ), $this->borndate( strtotime( $meta[ count( $meta ) - 1 ] ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction slider_range_placeholder( $filter, $attrs ) {\n\t\t\tswitch ( $filter ) {\n\t\t\t\tdefault: {\n\t\t\t\t\t$label = ucwords( str_replace( array( 'um_', '_' ), array( '', ' ' ), $filter ) );\n\t\t\t\t\t$placeholders = apply_filters( 'um_member_directory_filter_slider_range_placeholder', false, $filter );\n\n\t\t\t\t\tif ( ! $placeholders ) {\n\t\t\t\t\t\tswitch ( $attrs['type'] ) {\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{value}\",\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{min_range} - {max_range}\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{value}\" . __( ' stars', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{min_range} - {max_range}\" . __( ' stars', 'ultimate-member' )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'birth_date': {\n\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t__( '<strong>Age:</strong>&nbsp;{value} years old', 'ultimate-member' ),\n\t\t\t\t\t\t__( '<strong>Age:</strong>&nbsp;{min_range} - {max_range} years old', 'ultimate-member' )\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $placeholders;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction datepicker_filters_range( $filter ) {\n\t\t\tglobal $wpdb;\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( strtotime( min( $meta ) ), strtotime( max( $meta ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_datepicker\", $range );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'last_login': {\n\t\t\t\t\t$meta = $wpdb->get_col( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key='_um_last_login'\n\t\t\t\t\t\tORDER BY meta_value DESC\" );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'user_registered': {\n\t\t\t\t\t$meta = $wpdb->get_col(\n\t\t\t\t\t\t\"SELECT DISTINCT user_registered\n\t\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\t\tORDER BY user_registered DESC\"\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( strtotime( min( $meta ) ), strtotime( max( $meta ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction timepicker_filters_range( $filter ) {\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\t$meta = array_filter( $meta );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_timepicker\", $range );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $borndate\n\t\t *\n\t\t * @return false|string\n\t\t */\n\t\tfunction borndate( $borndate ) {\n\t\t\tif ( date('m', $borndate) > date('m') || date('m', $borndate) == date('m') && date('d', $borndate ) > date('d')) {\n\t\t\t\treturn (date('Y') - date('Y', $borndate ) - 1);\n\t\t\t}\n\t\t\treturn (date('Y') - date('Y', $borndate));\n\t\t}\n\n\n\t\t/**\n\t\t * Handle members can view restrictions\n\t\t */\n\t\tfunction restriction_options() {\n\t\t\t$this->hide_not_approved();\n\t\t\t$this->hide_by_role();\n\t\t\t$this->hide_by_account_settings();\n\n\t\t\tdo_action( 'um_member_directory_restrictions_handle_extend' );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_not_approved() {\n\t\t\tif ( UM()->roles()->um_user_can( 'can_edit_everyone' )  ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t'value'     => 's:14:\"account_status\";s:8:\"approved\";',\n\t\t\t\t'compare'   => 'LIKE'\n\t\t\t) ) );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_by_role() {\n\t\t\t$roles = um_user( 'can_view_roles' );\n\t\t\t$roles = maybe_unserialize( $roles );\n\n\t\t\tif ( empty( $roles ) || ! UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t$this->query_args['role__in'] = array_intersect( $this->query_args['role__in'], $roles );\n\t\t\t} else {\n\t\t\t\t$this->query_args['role__in'] = $roles;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_by_account_settings() {\n\t\t\tif ( ! UM()->options()->get( 'account_hide_in_directory' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( UM()->roles()->um_user_can( 'can_edit_everyone' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t'value'     => 's:15:\"hide_in_members\";b:0;',\n\t\t\t\t'compare'   => 'LIKE'\n\t\t\t) ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"General Options\" metabox settings\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction general_options( $directory_data ) {\n\t\t\t$this->show_selected_roles( $directory_data );\n\t\t\t$this->show_only_with_avatar( $directory_data );\n\t\t\t$this->show_only_with_cover( $directory_data );\n\t\t\t$this->show_only_these_users( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_general_options_handle_extend', $directory_data );\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"User Roles to Display\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_selected_roles( $directory_data ) {\n\t\t\t// add roles to appear in directory\n\t\t\tif ( ! empty( $directory_data['roles'] ) ) {\n\t\t\t\t//since WP4.4 use 'role__in' argument\n\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t$this->query_args['role__in'] = array_intersect( $this->query_args['role__in'], maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t} else {\n\t\t\t\t\t$this->query_args['role__in'] = maybe_unserialize( $directory_data['roles'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show members who have uploaded a profile photo\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_with_avatar( $directory_data ) {\n\t\t\tif ( $directory_data['has_profile_photo'] == 1 ) {\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t\t'value'     => 's:13:\"profile_photo\";b:1;',\n\t\t\t\t\t'compare'   => 'LIKE'\n\t\t\t\t) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show members who have uploaded a cover photo\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_with_cover( $directory_data ) {\n\t\t\tif ( $directory_data['has_cover_photo'] == 1 ) {\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t\t'value'     => 's:11:\"cover_photo\";b:1;',\n\t\t\t\t\t'compare'   => 'LIKE'\n\t\t\t\t) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show specific users (Enter one username per line)\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_these_users( $directory_data ) {\n\t\t\tif ( ! empty( $directory_data['show_these_users'] ) ) {\n\t\t\t\t$show_these_users = maybe_unserialize( $directory_data['show_these_users'] );\n\n\t\t\t\tif ( is_array( $show_these_users ) && ! empty( $show_these_users ) ) {\n\n\t\t\t\t\t$users_array = array();\n\n\t\t\t\t\tforeach ( $show_these_users as $username ) {\n\t\t\t\t\t\tif ( false !== ( $exists_id = username_exists( $username ) ) ) {\n\t\t\t\t\t\t\t$users_array[] = $exists_id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $users_array ) ) {\n\t\t\t\t\t\t$this->query_args['include'] = $users_array;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Pagination Options\" metabox settings\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction pagination_options( $directory_data ) {\n\t\t\t// number of profiles for mobile\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$this->query_args['number'] = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $profiles_per_page ) ? $directory_data['max_users'] : $profiles_per_page;\n\t\t\t$this->query_args['paged'] = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\t\t}\n\n\n\t\t/**\n\t\t * Add sorting attributes for \\WP_Users_Query\n\t\t *\n\t\t * @param array $directory_data Member Directory options\n\t\t */\n\t\tfunction sorting_query( $directory_data ) {\n\t\t\t// sort members by\n\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t$sortby = ! empty( $_POST['sorting'] ) ? $_POST['sorting'] : $directory_data['sortby'];\n\n\t\t\tif ( $sortby == 'other' && $directory_data['sortby_custom'] ) {\n\n\t\t\t\t$this->query_args['meta_key'] = $directory_data['sortby_custom'];\n\t\t\t\t$this->query_args['orderby'] = 'meta_value, display_name';\n\n\t\t\t} elseif ( 'display_name' == $sortby ) {\n\n\t\t\t\t$display_name = UM()->options()->get( 'display_name' );\n\t\t\t\tif ( $display_name == 'username' ) {\n\t\t\t\t\t$this->query_args['orderby'] = 'user_login';\n\t\t\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t\t} else {\n\t\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t'full_name' => array(\n\t\t\t\t\t\t\t'key'       => 'full_name',\n\t\t\t\t\t\t\t'compare'   => 'EXISTS'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'key'       => 'full_name',\n\t\t\t\t\t\t\t'compare'   => 'NOT EXISTS'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t$this->query_args['orderby'] = 'full_name, display_name';\n\t\t\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t\t}\n\n\t\t\t} elseif ( in_array( $sortby, array( 'last_name', 'first_name', 'nickname' ) ) ) {\n\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $sortby . '_c' => array(\n\t\t\t\t\t'key'       => $sortby,\n\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t), ) );\n\n\t\t\t\t$this->query_args['orderby'] = array( $sortby . '_c' => 'ASC' );\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} elseif ( $sortby == 'last_login' ) {\n\n\t\t\t\t$this->query_args['orderby'] = array( 'um_last_login' => 'DESC' );\n\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'key'   => '_um_last_login',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t\t'um_last_login' => array(\n\t\t\t\t\t\t'key'   => '_um_last_login',\n\t\t\t\t\t\t'compare'   => 'NOT EXISTS',\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} elseif ( $sortby == 'last_first_name' ) {\n\n\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t'last_name_c'   => array(\n\t\t\t\t\t\t'key'       => 'last_name',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t\t'first_name_c'  => array(\n\t\t\t\t\t\t'key'       => 'first_name',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t$this->query_args['orderby'] = array( 'last_name_c' => 'ASC', 'first_name_c' => 'ASC' );\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} else {\n\n\t\t\t\tif ( strstr( $sortby, '_desc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_desc', '', $sortby );\n\t\t\t\t\t$order = 'DESC';\n\t\t\t\t}\n\n\t\t\t\tif ( strstr( $sortby, '_asc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_asc', '', $sortby );\n\t\t\t\t\t$order = 'ASC';\n\t\t\t\t}\n\n\t\t\t\t$this->query_args['orderby'] = $sortby;\n\t\t\t\tif ( isset( $order ) ) {\n\t\t\t\t\t$this->query_args['order'] = $order;\n\t\t\t\t}\n\n\t\t\t\tadd_filter( 'pre_user_query', array( &$this, 'sortby_randomly' ), 10, 1 );\n\t\t\t}\n\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_modify_sortby_parameter\n\t\t\t * @description Change query sort by attributes for search at Members Directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query Arguments\"},\n\t\t\t * {\"var\":\"$sortby\",\"type\":\"string\",\"desc\":\"Sort by\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_modify_sortby_parameter', 'function_name', 10, 2 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_modify_sortby_parameter', 'my_modify_sortby_parameter', 10, 2 );\n\t\t\t * function my_modify_sortby_parameter( $query_args, $sortby ) {\n\t\t\t *     // your code here\n\t\t\t *     return $query_args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->query_args = apply_filters( 'um_modify_sortby_parameter', $this->query_args, $sortby );\n\t\t}\n\n\n\t\t/**\n\t\t * Sorting random\n\t\t *\n\t\t * @param object $query\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction sortby_randomly( $query ) {\n\t\t\tif ( 'random' == $query->query_vars['orderby'] ) {\n\n\t\t\t\tif ( um_is_session_started() === false ) {\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\n\t\t\t\t// Reset seed on load of initial\n\t\t\t\tif ( empty( $_REQUEST['directory_id'] ) && isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\tunset( $_SESSION['um_member_directory_seed'] );\n\t\t\t\t}\n\n\t\t\t\t// Get seed from session variable if it exists\n\t\t\t\t$seed = false;\n\t\t\t\tif ( isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\t$seed = $_SESSION['um_member_directory_seed'];\n\t\t\t\t}\n\n\t\t\t\t// Set new seed if none exists\n\t\t\t\tif ( ! $seed ) {\n\t\t\t\t\t$seed = rand();\n\t\t\t\t\t$_SESSION['um_member_directory_seed'] = $seed;\n\t\t\t\t}\n\n\t\t\t\t$query->query_orderby = 'ORDER by RAND(' . $seed . ')';\n\t\t\t}\n\n\t\t\treturn $query;\n\t\t}\n\n\n\n\t\t/**\n\t\t * Handle general search line request\n\t\t */\n\t\tfunction general_search() {\n\t\t\t//general search\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\t// complex using with change_meta_sql function\n\n\t\t\t\t$meta_query = array(\n\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( $_POST['search'] ),\n\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( $_POST['search'] ),\n\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( serialize( strval( $_POST['search'] ) ) ),\n\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t$meta_query = apply_filters( 'um_member_directory_general_search_meta_query', $meta_query, $_POST['search'] );\n\n\t\t\t\t$this->query_args['meta_query'][] = $meta_query;\n\n\t\t\t\t$this->is_search = true;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Change mySQL meta query join attribute\n\t\t * for search only by UM user meta fields and WP core fields in WP Users table\n\t\t *\n\t\t * @param array $sql Array containing the query's JOIN and WHERE clauses.\n\t\t * @param $queries\n\t\t * @param $type\n\t\t * @param $primary_table\n\t\t * @param $primary_id_column\n\t\t * @param \\WP_User_Query $context\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction change_meta_sql( $sql, $queries, $type, $primary_table, $primary_id_column, $context ) {\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\tglobal $wpdb;\n\t\t\t\t$search = trim( $_POST['search'] );\n\t\t\t\tif ( ! empty( $search ) ) {\n\n\t\t\t\t\t$meta_value = '%' . $wpdb->esc_like( $search ) . '%';\n\t\t\t\t\t$search_meta      = $wpdb->prepare( '%s', $meta_value );\n\n\t\t\t\t\tpreg_match(\n\t\t\t\t\t\t'/^(.*).meta_value LIKE ' . addslashes( $search_meta ) . '[^\\)]/im',\n\t\t\t\t\t\t$sql['where'],\n\t\t\t\t\t\t$join_matches\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( isset( $join_matches[1] ) ) {\n\t\t\t\t\t\t$meta_join_for_search = trim( $join_matches[1] );\n\n\t\t\t\t\t\t// skip private invisible fields\n\t\t\t\t\t\t$custom_fields = array();\n\t\t\t\t\t\tforeach ( array_keys( UM()->builtin()->all_user_fields ) as $field_key ) {\n\t\t\t\t\t\t\t$data = UM()->fields()->get_field( $field_key );\n\t\t\t\t\t\t\tif ( ! um_can_view_field( $data ) ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$custom_fields[] = $field_key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$sql['join'] = preg_replace(\n\t\t\t\t\t\t\t'/(' . $meta_join_for_search . ' ON \\( ' . $wpdb->users . '\\.ID = ' . $meta_join_for_search . '\\.user_id )(\\))/im',\n\t\t\t\t\t\t\t\"$1 AND \" . $meta_join_for_search . \".meta_key IN( '\" . implode( \"','\", $custom_fields ) . \"' ) $2\",\n\t\t\t\t\t\t\t$sql['join']\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add OR instead AND to search in WP core fields user_email, user_login, user_display_name\n\t\t\t\t\t$search_where = $context->get_search_sql( $search, $this->core_search_fields, 'both' );\n\n\t\t\t\t\t$search_where = preg_replace( '/ AND \\((.*?)\\)/im', \"$1 OR\", $search_where );\n\n\t\t\t\t\t$sql['where'] = preg_replace(\n\t\t\t\t\t\t'/(' . $meta_join_for_search . '.meta_value = \\'' . esc_attr( $search ) . '\\')/im',\n\t\t\t\t\t\ttrim( $search_where ) . \" $1\",\n\t\t\t\t\t\t$sql['where'],\n\t\t\t\t\t\t1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $sql;\n\t\t}\n\n\n\t\t/**\n\t\t * Handle filters request\n\t\t */\n\t\tfunction filters( $directory_data ) {\n\t\t\t//filters\n\t\t\t$filter_query = array();\n\t\t\tif ( ! empty( $directory_data['search_fields'] ) ) {\n\t\t\t\t$search_filters = maybe_unserialize( $directory_data['search_fields'] );\n\t\t\t\tif ( ! empty( $search_filters ) && is_array( $search_filters ) ) {\n\t\t\t\t\t$filter_query = array_intersect_key( $_POST, array_flip( $search_filters ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// added for user tags extension integration on individual tag page\n\t\t\t$ignore_empty_filters = apply_filters( 'um_member_directory_ignore_empty_filters', false );\n\n\t\t\tif ( empty( $filter_query ) && ! $ignore_empty_filters ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->is_search = true;\n\t\t\tforeach ( $filter_query as $field => $value ) {\n\n\t\t\t\t$attrs = UM()->fields()->get_field( $field );\n\t\t\t\t// skip private invisible fields\n\t\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch ( $field ) {\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'text':\n\n\t\t\t\t\t\t\t\t\t$value = stripslashes( $value );\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $value ),\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array( 'relation' => 'OR' );\n\n\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n\n\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query = array(\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $single_val ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( strval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => '\"' . trim( $single_val ) . '\"',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query[] = array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( intval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$field_query = array_merge( $field_query, $arr_meta_query );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value[0],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t\t'type'      => 'TIME',\n\t\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t\t\t$default_role = array_intersect( $this->query_args['role__in'], $value );\n\t\t\t\t\t\t\t$um_role = array_diff( $value, $default_role );\n\n\t\t\t\t\t\t\tforeach ( $um_role as $key => &$val ) {\n\t\t\t\t\t\t\t\t$val = 'um_' . str_replace( ' ', '-', $val );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$this->query_args['role__in'] = array_merge( $default_role, $um_role );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = $value;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $this->query_args['role__in'];\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'birth_date':\n\n\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) - 1 ) );\n\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => 'birth_date',\n\t\t\t\t\t\t\t\t'value'     => array( $to_date, $from_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'type'      => 'DATE',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_registered':\n\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t$date_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'column'    => 'user_registered',\n\t\t\t\t\t\t\t\t'before'    => $to_date,\n\t\t\t\t\t\t\t\t'after'     => $from_date,\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( empty( $this->query_args['date_query'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = $date_query;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = array_merge( $this->query_args['date_query'], array( $date_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'last_login':\n\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_last_login',\n\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Set default filters\n\t\t *\n\t\t * @param $directory_data\n\t\t */\n\t\tfunction default_filters( $directory_data ) {\n\t\t\t//unable default filter in case if we select other filters in frontend filters\n\t\t\tif ( ! empty( $this->custom_filters_in_query ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$default_filters = array();\n\t\t\tif ( ! empty( $directory_data['search_filters'] ) ) {\n\t\t\t\t$default_filters = maybe_unserialize( $directory_data['search_filters'] );\n\t\t\t}\n\n\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\n\t\t\tif ( empty( $default_filters ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $default_filters as $field => $value ) {\n\t\t\t\t//unable default filter in case if we select other value in frontend filters\n//\t\t\t\tif ( in_array( $field, array_keys( $this->custom_filters_in_query ) ) ) {\n//\t\t\t\t\tcontinue;\n//\t\t\t\t}\n\n\t\t\t\tswitch ( $field ) {\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t\t$value = array( $value );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$field_query = array( 'relation' => 'OR' );\n\n\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t$arr_meta_query = array(\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $single_val ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( strval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => '\"' . trim( $single_val ) . '\"',\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query[] = array(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( intval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$field_query = array_merge( $field_query, $arr_meta_query );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value[0],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t\t'type'      => 'TIME',\n\t\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$value = explode( '||', $value );\n\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t\t\t$default_role = array_intersect( $this->query_args['role__in'], $value );\n\t\t\t\t\t\t\t$um_role = array_diff( $value, $default_role );\n\n\t\t\t\t\t\t\tforeach ( $um_role as $key => &$val ) {\n\t\t\t\t\t\t\t\t$val = 'um_' . str_replace( ' ', '-', $val );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$this->query_args['role__in'] = array_merge( $default_role, $um_role );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = $value;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'birth_date':\n\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => 'birth_date',\n\t\t\t\t\t\t\t\t'value'     => array( $to_date, $from_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'type'      => 'DATE',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_registered':\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t$date_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'column'    => 'user_registered',\n\t\t\t\t\t\t\t\t'before'    => $to_date,\n\t\t\t\t\t\t\t\t'after'     => $from_date,\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( empty( $this->query_args['date_query'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = $date_query;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = array_merge( $this->query_args['date_query'], array( $date_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'last_login':\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_last_login',\n\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Get data array for pagination\n\t\t *\n\t\t *\n\t\t * @param array $directory_data\n\t\t * @param \\WP_User_Query $result\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction calculate_pagination( $directory_data, $result ) {\n\n\t\t\t$current_page = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\n\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $result->total_users ) ? $directory_data['max_users'] : $result->total_users;\n\n\t\t\t// number of profiles for mobile\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$total_pages = 1;\n\t\t\tif ( ! empty( $profiles_per_page ) ) {\n\t\t\t\t$total_pages = ceil( $total_users / $profiles_per_page );\n\t\t\t}\n\n\t\t\tif ( ! empty( $total_pages ) ) {\n\t\t\t\t$index1 = 0 - ( $current_page - 2 ) + 1;\n\t\t\t\t$to = $current_page + 2;\n\t\t\t\tif ( $index1 > 0 ) {\n\t\t\t\t\t$to += $index1;\n\t\t\t\t}\n\n\t\t\t\t$index2 = $total_pages - ( $current_page + 2 );\n\t\t\t\t$from = $current_page - 2;\n\t\t\t\tif ( $index2 < 0 ) {\n\t\t\t\t\t$from += $index2;\n\t\t\t\t}\n\n\t\t\t\t$pages_to_show = range(\n\t\t\t\t\t( $from > 0 ) ? $from : 1,\n\t\t\t\t\t( $to <= $total_pages ) ? $to : $total_pages\n\t\t\t\t);\n\t\t\t}\n\n\n\t\t\t$pagination_data = array(\n\t\t\t\t'pages_to_show' => ( ! empty( $pages_to_show ) && count( $pages_to_show ) > 1 ) ? array_values( $pages_to_show ) : array(),\n\t\t\t\t'current_page'  => $current_page,\n\t\t\t\t'total_pages'   => $total_pages,\n\t\t\t\t'total_users'   => $total_users,\n\t\t\t);\n\n\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n\n\t\t\treturn $pagination_data;\n\t\t}\n\n\n\t\t/**\n\t\t * @param int $user_id\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction build_user_actions_list( $user_id ) {\n\n\t\t\t$actions = array();\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn $actions;\n\t\t\t}\n\n\t\t\tif ( get_current_user_id() != $user_id ) {\n\n\t\t\t\tif ( UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n\t\t\t\t\t$actions['um-editprofile'] = array(\n\t\t\t\t\t\t'title' => __( 'Edit Profile', 'ultimate-member' ),\n\t\t\t\t\t\t'url' => um_edit_profile_url(),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_admin_user_actions_hook\n\t\t\t\t * @description Extend admin actions for each user\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$actions\",\"type\":\"array\",\"desc\":\"Actions for user\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage\n\t\t\t\t * <?php add_filter( 'um_admin_user_actions_hook', 'function_name', 10, 1 ); ?>\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_admin_user_actions_hook', 'my_admin_user_actions', 10, 1 );\n\t\t\t\t * function my_admin_user_actions( $actions ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $actions;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$admin_actions = apply_filters( 'um_admin_user_actions_hook', array(), $user_id );\n\t\t\t\tif ( ! empty( $admin_actions ) ) {\n\t\t\t\t\tforeach ( $admin_actions as $id => $arr ) {\n\t\t\t\t\t\t$url = add_query_arg( array( 'um_action' => $id, 'uid' => $user_id ), um_get_core_page( 'user' ) );\n\n\t\t\t\t\t\t$actions[ $id ] = array(\n\t\t\t\t\t\t\t'title' => $arr['label'],\n\t\t\t\t\t\t\t'url'   => $url,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$actions = apply_filters( 'um_member_directory_users_card_actions', $actions, $user_id );\n\n\t\t\t} else {\n\n\t\t\t\tif ( empty( UM()->user()->cannot_edit ) ) {\n\t\t\t\t\t$actions['um-editprofile'] = array(\n\t\t\t\t\t\t'title' => __( 'Edit Profile', 'ultimate-member' ),\n\t\t\t\t\t\t'url'   => um_edit_profile_url(),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$actions['um-myaccount'] = array(\n\t\t\t\t\t'title' => __( 'My Account', 'ultimate-member' ),\n\t\t\t\t\t'url'   => um_get_core_page( 'account' ),\n\t\t\t\t);\n\n\t\t\t\t$actions['um-logout'] = array(\n\t\t\t\t\t'title' => __( 'Logout', 'ultimate-member' ),\n\t\t\t\t\t'url'   => um_get_core_page( 'logout' ),\n\t\t\t\t);\n\n\t\t\t\t$actions = apply_filters( 'um_member_directory_my_user_card_actions', $actions, $user_id );\n\t\t\t}\n\n\n\t\t\treturn $actions;\n\t\t}\n\n\n\t\t/**\n\t\t * @param int $user_id\n\t\t * @param array $directory_data\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction build_user_card_data( $user_id, $directory_data ) {\n\n\t\t\tum_fetch_user( $user_id );\n\n\t\t\t$dropdown_actions = $this->build_user_actions_list( $user_id );\n\n\t\t\t$actions = array();\n\t\t\t$can_edit = UM()->roles()->um_current_user_can( 'edit', $user_id ) || UM()->roles()->um_user_can( 'can_edit_everyone' );\n\n\t\t\t// Replace hook 'um_members_just_after_name'\n\t\t\tob_start();\n\t\t\tdo_action( 'um_members_just_after_name', $user_id, $directory_data );\n\t\t\t$hook_just_after_name = ob_get_clean();\n\n\t\t\t// Replace hook 'um_members_after_user_name'\n\t\t\tob_start();\n\t\t\tdo_action( 'um_members_after_user_name', $user_id, $directory_data );\n\t\t\t$hook_after_user_name = ob_get_clean();\n\n\t\t\t$data_array = array(\n\t\t\t\t'card_anchor'           => substr( md5( $user_id ), 10, 5 ),\n\t\t\t\t'id'                    => $user_id,\n\t\t\t\t'role'                  => um_user( 'role' ),\n\t\t\t\t'account_status'        => um_user( 'account_status' ),\n\t\t\t\t'account_status_name'   => um_user( 'account_status_name' ),\n\t\t\t\t'cover_photo'           => um_user( 'cover_photo', $this->cover_size ),\n\t\t\t\t'display_name'          => um_user( 'display_name' ),\n\t\t\t\t'profile_url'           => um_user_profile_url(),\n\t\t\t\t'can_edit'              => $can_edit,\n\t\t\t\t'edit_profile_url'      => um_edit_profile_url(),\n\t\t\t\t'avatar'                => get_avatar( $user_id, $this->avatar_size ),\n\t\t\t\t'display_name_html'     => um_user( 'display_name', 'html' ),\n\t\t\t\t'dropdown_actions'      => $dropdown_actions,\n\t\t\t\t'hook_just_after_name'  => preg_replace( '/^\\s+/im', '', $hook_just_after_name ),\n\t\t\t\t'hook_after_user_name'  => preg_replace( '/^\\s+/im', '', $hook_after_user_name ),\n\t\t\t);\n\n\t\t\t$directory_data['tagline_fields'] = maybe_unserialize( $directory_data['tagline_fields'] );\n\n\t\t\tif ( $directory_data['show_tagline'] && is_array( $directory_data['tagline_fields'] ) ) {\n\t\t\t\tforeach ( $directory_data['tagline_fields'] as $key ) {\n\t\t\t\t\tif ( ! $key ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$value = um_filtered_value( $key );\n\n\t\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data_array[ $key ] = $value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $directory_data['show_userinfo'] ) {\n\t\t\t\t$directory_data['reveal_fields'] = maybe_unserialize( $directory_data['reveal_fields'] );\n\n\t\t\t\tif ( is_array( $directory_data['reveal_fields'] ) ) {\n\t\t\t\t\tforeach ( $directory_data['reveal_fields'] as $key ) {\n\t\t\t\t\t\tif ( ! $key ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$value = um_filtered_value( $key );\n\t\t\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$label = UM()->fields()->get_label( $key );\n\t\t\t\t\t\tif ( $key == 'role_select' || $key == 'role_radio' ) {\n\t\t\t\t\t\t\t$label = strtr( $label, array(\n\t\t\t\t\t\t\t\t' (Dropdown)'   => '',\n\t\t\t\t\t\t\t\t' (Radio)'      => ''\n\t\t\t\t\t\t\t) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$data_array[ \"label_{$key}\" ] = $label;\n\t\t\t\t\t\t$data_array[ $key ] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $directory_data['show_social'] ) ) {\n\t\t\t\t\tob_start();\n\t\t\t\t\tUM()->fields()->show_social_urls();\n\t\t\t\t\t$social_urls = ob_get_clean();\n\n\t\t\t\t\t$data_array['social_urls'] = $social_urls;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data_array = apply_filters( 'um_ajax_get_members_data', $data_array, $user_id, $directory_data );\n\n\t\t\tum_reset_user_clean();\n\n\t\t\treturn $data_array;\n\t\t}\n\n\n\t\t/**\n\t\t * Update limit query\n\t\t *\n\t\t * @param $user_query\n\t\t */\n\t\tfunction pagination_changes( $user_query ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t$qv = $user_query->query_vars;\n\n\t\t\t$number = $qv['number'];\n\t\t\tif ( ! empty( $directory_data['max_users'] ) && $qv['paged']*$qv['number'] > $directory_data['max_users'] ) {\n\t\t\t\t$number = ( $qv['paged']*$qv['number'] - ( $qv['paged']*$qv['number'] - $directory_data['max_users'] ) ) % $qv['number'];\n\t\t\t}\n\n\t\t\t// limit\n\t\t\tif ( isset( $qv['number'] ) && $qv['number'] > 0 ) {\n\t\t\t\tif ( $qv['offset'] ) {\n\t\t\t\t\t$user_query->query_limit = $wpdb->prepare( 'LIMIT %d, %d', $qv['offset'], $number );\n\t\t\t\t} else {\n\t\t\t\t\t$user_query->query_limit = $wpdb->prepare( 'LIMIT %d, %d', $qv['number'] * ( $qv['paged'] - 1 ), $number );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tfunction predefined_no_caps( $directory_data ) {\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\tif ( is_user_logged_in() && ! UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\t$pagination_data = array(\n\t\t\t\t\t'pages_to_show' => array(),\n\t\t\t\t\t'current_page'  => 1,\n\t\t\t\t\t'total_pages'   => 0,\n\t\t\t\t\t'total_users'   => 0,\n\t\t\t\t);\n\n\t\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n\t\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n\n\t\t\t\twp_send_json_success( array( 'users' => array(), 'pagination' => $pagination_data ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Main Query function for getting members via AJAX\n\t\t */\n\t\tfunction ajax_get_members() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\t$this->predefined_no_caps( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_before_query' );\n\n\t\t\t// Prepare for BIG SELECT query\n\t\t\t$wpdb->query( 'SET SQL_BIG_SELECTS=1' );\n\n\t\t\t// Prepare default user query values\n\t\t\t$this->query_args = array(\n\t\t\t\t'fields'        => 'ids',\n\t\t\t\t'number'        => 0,\n\t\t\t\t'meta_query'    => array(\n\t\t\t\t\t'relation' => 'AND'\n\t\t\t\t),\n\t\t\t);\n\n\n\t\t\t// handle different restrictions\n\t\t\t$this->restriction_options();\n\n\t\t\t// handle general options\n\t\t\t$this->general_options( $directory_data );\n\n\t\t\t// handle pagination options\n\t\t\t$this->pagination_options( $directory_data );\n\n\t\t\t// handle sorting options\n\t\t\t$this->sorting_query( $directory_data );\n\n\t\t\t// handle general search line\n\t\t\t$this->general_search();\n\n\t\t\t// handle filters\n\t\t\t$this->filters( $directory_data );\n\n\t\t\t$this->default_filters( $directory_data );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_prepare_user_query_args\n\t\t\t * @description Extend member directory query arguments\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Members Query Arguments\"},\n\t\t\t * {\"var\":\"$directory_settings\",\"type\":\"array\",\"desc\":\"Member Directory Settings\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_prepare_user_query_args', 'function_name', 10, 2 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_prepare_user_query_args', 'my_prepare_user_query_args', 10, 2 );\n\t\t\t * function my_prepare_user_query_args( $query_args, $directory_settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $query_args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->query_args = apply_filters( 'um_prepare_user_query_args', $this->query_args, $directory_data );\n\n\t\t\t//unset empty meta_query attribute\n\t\t\tif ( isset( $this->query_args['meta_query']['relation'] ) && count( $this->query_args['meta_query'] ) == 1 ) {\n\t\t\t\tunset( $this->query_args['meta_query'] );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_user_before_query\n\t\t\t * @description Action before users query on member directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query arguments\"},\n\t\t\t * {\"var\":\"$md_class\",\"type\":\"um\\core\\Member_Directory\",\"desc\":\"Member Directory class\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_user_before_query', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_user_before_query', 'my_user_before_query', 10, 1 );\n\t\t\t * function my_user_before_query( $query_args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_user_before_query', $this->query_args, $this );\n\n\t\t\tadd_filter( 'get_meta_sql', array( &$this, 'change_meta_sql' ), 10, 6 );\n\n\t\t\tadd_filter( 'pre_user_query', array( &$this, 'pagination_changes' ), 10, 1 );\n\n\t\t\t$user_query = new \\WP_User_Query( $this->query_args );\n\n\t\t\tremove_filter( 'pre_user_query', array( &$this, 'pagination_changes' ), 10 );\n\n\t\t\tremove_filter( 'get_meta_sql', array( &$this, 'change_meta_sql' ), 10 );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_user_after_query\n\t\t\t * @description Action before users query on member directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query arguments\"},\n\t\t\t * {\"var\":\"$user_query\",\"type\":\"array\",\"desc\":\"User Query\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_user_after_query', 'function_name', 10, 2 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_user_after_query', 'my_user_after_query', 10, 2 );\n\t\t\t * function my_user_after_query( $query_args, $user_query ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_user_after_query', $this->query_args, $user_query );\n\n\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $user_query );\n\n\t\t\t$user_ids = ! empty( $user_query->results ) ? array_unique( $user_query->results ) : array();\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_prepare_user_results_array\n\t\t\t * @description Extend member directory query result\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$result\",\"type\":\"array\",\"desc\":\"Members Query Result\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_prepare_user_results_array', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_prepare_user_results_array', 'my_prepare_user_results', 10, 1 );\n\t\t\t * function my_prepare_user_results( $user_ids ) {\n\t\t\t *     // your code here\n\t\t\t *     return $user_ids;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$user_ids = apply_filters( 'um_prepare_user_results_array', $user_ids );\n\n\n\t\t\t$sizes = UM()->options()->get( 'cover_thumb_sizes' );\n\n\t\t\t$this->cover_size = UM()->mobile()->isTablet() ? $sizes[1] : end( $sizes );\n\n\t\t\t$avatar_size = UM()->options()->get( 'profile_photosize' );\n\t\t\t$this->avatar_size = str_replace( 'px', '', $avatar_size );\n\n\t\t\t$users = array();\n\t\t\tforeach ( $user_ids as $user_id ) {\n\t\t\t\t$users[] = $this->build_user_card_data( $user_id, $directory_data );\n\t\t\t}\n\n\t\t\tum_reset_user();\n\t\t\t// end of user card\n\n\t\t\t$member_directory_response = apply_filters( 'um_ajax_get_members_response', array(\n\t\t\t\t'pagination'    => $pagination_data,\n\t\t\t\t'users'         => $users,\n\t\t\t\t'is_search'     => $this->is_search,\n\t\t\t), $directory_data );\n\n\t\t\twp_send_json_success( $member_directory_response );\n\t\t}\n\n\n\t\t/**\n\t\t * New menu\n\t\t *\n\t\t * @param string $element\n\t\t * @param string $trigger\n\t\t * @param array $items\n\t\t */\n\t\tfunction dropdown_menu( $element, $trigger, $items = array() ) {\n\t\t\t?>\n\n\t\t\t<div class=\"um-new-dropdown\" data-element=\"<?php echo $element; ?>\" data-trigger=\"<?php echo $trigger; ?>\">\n\t\t\t\t<ul>\n\t\t\t\t\t<?php foreach ( $items as $k => $v ) { ?>\n\t\t\t\t\t\t<li><?php echo $v; ?></li>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t}\n\n\n\t\t/**\n\t\t * New menu JS\n\t\t *\n\t\t * @param string $element\n\t\t * @param string $trigger\n\t\t * @param string $item\n\t\t */\n\t\tfunction dropdown_menu_js( $element, $trigger, $item ) {\n\t\t\t?>\n\n\t\t\t<div class=\"um-new-dropdown\" data-element=\"<?php echo $element; ?>\" data-trigger=\"<?php echo $trigger; ?>\">\n\t\t\t\t<ul>\n\t\t\t\t\t<# _.each( <?php echo $item; ?>.dropdown_actions, function( action, key, list ) { #>\n\t\t\t\t\t\t<li><a href=\"<# if ( typeof action.url != 'undefined' ) { #>{{{action.url}}}<# } else { #>javascript:void(0);<# }#>\" class=\"{{{key}}}\">{{{action.title}}}</a></li>\n\t\t\t\t\t<# }); #>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t}\n\n\n\n\t\tfunction default_filter_settings() {\n\t\t\tUM()->admin()->check_ajax_nonce();\n\n\t\t\t$filter_key = sanitize_key( $_REQUEST['key'] );\n\t\t\t$directory_id = absint( $_REQUEST['directory_id'] );\n\n\t\t\t$html = $this->show_filter( $filter_key, array( 'form_id' => $directory_id ) );\n\n\t\t\twp_send_json_success( array( 'field_html' => $html ) );\n\t\t}\n\t}\n}", "<?php if ( ! defined( 'ABSPATH' ) ) exit;\n\nglobal $post;\n\n// Get default and real arguments\n$def_args = array();\nforeach ( UM()->config()->core_directory_meta['members'] as $k => $v ) {\n\t$key = str_replace( '_um_', '', $k );\n\t$def_args[ $key ] = $v;\n}\n\n$unique_hash = substr( md5( $args['form_id'] ), 10, 5 );\n\n$args = array_merge( $def_args, $args );\n\n//current user priority role\n$priority_user_role = false;\nif ( is_user_logged_in() ) {\n\t$priority_user_role = UM()->roles()->get_priority_user_role( um_user( 'ID' ) );\n}\n\n$args = apply_filters( 'um_member_directory_agruments_on_load', $args );\n\n// Views\n$single_view = false;\n$current_view = 'grid';\n\nif ( ! empty( $args['view_types'] ) && is_array( $args['view_types'] ) ) {\n\t$args['view_types'] = array_filter( $args['view_types'], function( $item ) {\n\t\treturn in_array( $item, array_keys( UM()->member_directory()->view_types ) );\n\t});\n}\n\nif ( empty( $args['view_types'] ) || ! is_array( $args['view_types'] ) ) {\n\t$args['view_types'] = array(\n\t\t'grid',\n\t\t'list'\n\t);\n}\n\nif ( count( $args['view_types'] ) == 1 ) {\n\t$single_view = true;\n\t$current_view = $args['view_types'][0];\n\t$default_view = $current_view;\n} else {\n\t$args['default_view'] = ! empty( $args['default_view'] ) ? $args['default_view'] : $args['view_types'][0];\n\t$default_view = $args['default_view'];\n\t$current_view = ( ! empty( $_GET[ 'view_type_' . $unique_hash ] ) && in_array( $_GET[ 'view_type_' . $unique_hash ], $args['view_types'] ) ) ? $_GET[ 'view_type_' . $unique_hash ] : $args['default_view'];\n}\n\n// Sorting\n$default_sorting = ! empty( $args['sortby'] ) ? $args['sortby'] : 'user_registered_desc';\n\n$sort_from_url = '';\nif ( ! empty( $args['enable_sorting'] ) ) {\n\t$sorting_options = empty( $args['sorting_fields'] ) ? array() : $args['sorting_fields'];\n\tif ( ! in_array( $default_sorting, $sorting_options ) ) {\n\t\t$sorting_options[] = $default_sorting;\n\t}\n\n\tif ( ! empty( $sorting_options ) ) {\n\t\t$all_sorting_options = UM()->member_directory()->sort_fields;\n\t\t$sorting_options = array_intersect_key( $all_sorting_options, array_flip( $sorting_options ) );\n\t}\n\n\t$sorting_options = apply_filters( 'um_member_directory_pre_display_sorting', $sorting_options, $args );\n\n\t$sort_from_url = ( ! empty( $_GET[ 'sort_' . $unique_hash ] ) && in_array( $_GET[ 'sort_' . $unique_hash ], array_keys( $sorting_options ) ) ) ? $_GET[ 'sort_' . $unique_hash ] : $default_sorting;\n}\n\n$current_page = ( ! empty( $_GET[ 'page_' . $unique_hash ] ) && is_numeric( $_GET[ 'page_' . $unique_hash ] ) ) ? (int) $_GET[ 'page_' . $unique_hash ] : 1;\n\n//Search\n$search = isset( $args['search'] ) ? $args['search'] : false;\n$show_search = empty( $args['roles_can_search'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $args['roles_can_search'] ) );\n$search_from_url = '';\nif ( $search && $show_search ) {\n\t$search_from_url = ! empty( $_GET[ 'search_' . $unique_hash ] ) ? $_GET[ 'search_' . $unique_hash ] : '';\n}\n\n\n//Filters\n$filters = isset( $args['filters'] ) ? $args['filters'] : false;\n$show_filters = empty( $args['roles_can_filter'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $args['roles_can_filter'] ) );\n$search_filters = array();\nif ( isset( $args['search_fields'] ) ) {\n\t$search_filters = apply_filters( 'um_frontend_member_search_filters', array_unique( array_filter( $args['search_fields'] ) ) );\n}\n\nif ( ! empty( $search_filters ) ) {\n\t$search_filters = array_filter( $search_filters, function( $item ) {\n\t\treturn in_array( $item, array_keys( UM()->member_directory()->filter_fields ) );\n\t});\n\n\t$search_filters = array_values( $search_filters );\n}\n\n// Classes\n$classes = '';\nif ( $search && $show_search ) {\n\t$classes .= ' um-member-with-search';\n}\n\nif ( $filters && $show_filters && count( $search_filters ) ) {\n\t$classes .= ' um-member-with-filters';\n}\n\nif ( ! $single_view ) {\n\t$classes .= ' um-member-with-view';\n}\n\nif ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) {\n\t$classes .= ' um-member-with-sorting';\n}\n\n$filters_collapsible = true;\n$filters_expanded = ! empty( $args['filters_expanded'] ) ? true : false;\nif ( $filters_expanded ) {\n\t$filters_collapsible = ! empty( $args['filters_is_collapsible'] ) ? true : false;\n}\n\n//send $args variable to the templates\n$args['args'] = $args;\nforeach ( $args['view_types'] as $type ) {\n\t$basename = UM()->member_directory()->get_type_basename( $type );\n\tUM()->get_template( 'members-' . $type . '.php', $basename, $args, true );\n}\nUM()->get_template( 'members-header.php', '', $args, true );\nUM()->get_template( 'members-pagination.php', '', $args, true );\n\n$must_search = 0;\n$not_searched = false;\nif ( ( ( $search && $show_search ) || ( $filters && $show_filters && count( $search_filters ) ) ) && isset( $args['must_search'] ) && $args['must_search'] == 1 ) {\n\t$must_search = 1;\n\t$not_searched = true;\n\tif ( $search && $show_search && ! empty( $search_from_url ) ) {\n\t\t$not_searched = false;\n\t} elseif ( $filters && $show_filters && count( $search_filters ) ) {\n\t\tforeach ( $search_filters as $filter ) {\n\t\t\t// getting value from GET line\n\t\t\tswitch ( UM()->member_directory()->filter_types[ $filter ] ) {\n\t\t\t\tdefault: {\n\n\t\t\t\t\t$not_searched = apply_filters( 'um_member_directory_filter_value_from_url', $not_searched, $filter );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'select': {\n\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? explode( '||', sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ) : array();\n\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'slider': {\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) : '';\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'datepicker':\n\t\t\t\tcase 'timepicker': {\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_from_' . $unique_hash ] ) ? sanitize_text_field( $_GET[ 'filter_' . $filter . '_from_' . $unique_hash ] ) : '';\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} ?>\n\n<div class=\"um <?php echo esc_attr( $this->get_class( $mode ) ); ?> um-<?php echo esc_attr( substr( md5( $form_id ), 10, 5 ) ); ?>\"\n     data-hash=\"<?php echo esc_attr( substr( md5( $form_id ), 10, 5 ) ) ?>\" data-base-post=\"<?php echo esc_attr( $post->ID ) ?>\"\n\t data-must-search=\"<?php echo esc_attr( $must_search ); ?>\" data-searched=\"<?php echo $not_searched ? '0' : '1'; ?>\"\n\t data-view_type=\"<?php echo esc_attr( $current_view ) ?>\" data-page=\"<?php echo esc_attr( $current_page ) ?>\"\n\t data-sorting=\"<?php echo esc_attr( $sort_from_url ) ?>\">\n\t<div class=\"um-members-overlay\"><div class=\"um-ajax-loading\"></div></div>\n\n\t<div class=\"um-member-directory-header um-form\">\n\n\t\t<?php do_action( 'um_members_directory_before_head', $args, $form_id ); ?>\n\n\t\t<?php if ( $search && $show_search ) { ?>\n\t\t\t<div class=\"um-member-directory-header-row um-member-directory-search-row\">\n\t\t\t\t<div class=\"um-member-directory-search-line\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span><?php _e( 'Search:', 'ultimate-member' ); ?></span>\n\t\t\t\t\t\t<input type=\"search\" class=\"um-search-line\" placeholder=\"<?php esc_attr_e( 'Search', 'ultimate-member' ) ?>\"  value=\"<?php echo esc_attr( $search_from_url ) ?>\" aria-label=\"<?php esc_attr_e( 'Search', 'ultimate-member' ) ?>\" speech />\n\t\t\t\t\t</label>\n\t\t\t\t\t<input type=\"button\" class=\"um-do-search um-button\" value=\"<?php esc_attr_e( 'Search', 'ultimate-member' ); ?>\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php }\n\n\t\tif ( ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) ||\n\t\t     ( $filters && $show_filters && count( $search_filters ) ) ||\n\t\t     ! $single_view ) { ?>\n\t\t\t<div class=\"um-member-directory-header-row\">\n\t\t\t\t<div class=\"um-member-directory-nav-line\">\n\t\t\t\t\t<?php if ( ! $single_view ) {\n\t\t\t\t\t\t$view_types = 0;\n\n\t\t\t\t\t\tforeach ( UM()->member_directory()->view_types as $key => $value ) {\n\t\t\t\t\t\t\tif ( in_array( $key, $args['view_types'] ) ) {\n\t\t\t\t\t\t\t\tif ( empty( $view_types ) ) { ?>\n\t\t\t\t\t\t\t\t\t<span class=\"um-member-directory-view-type<?php if ( $not_searched ) {?> um-disabled<?php } ?>\">\n\t\t\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\t\t\t$view_types++; ?>\n\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0)\"\n\t\t\t\t\t\t\t\t   class=\"um-member-directory-view-type-a<?php if ( ! $not_searched ) {?> um-tip-n<?php } ?>\"\n\t\t\t\t\t\t\t\t   data-type=\"<?php echo $key; ?>\"\n\t\t\t\t\t\t\t\t   data-default=\"<?php echo ( $default_view == $key ) ? 1 : 0; ?>\"\n\t\t\t\t\t\t\t\t   title=\"<?php printf( esc_attr__( 'Change to %s', 'ultimate-member' ), $value['title'] ) ?>\"\n\t\t\t\t\t\t\t\t   default-title=\"<?php echo esc_attr( $value['title'] ); ?>\"\n\t\t\t\t\t\t\t\t   next-item=\"\" ><i class=\"<?php echo $value['icon']; ?>\"></i></a>\n\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $view_types ) ) { ?>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<?php }\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) { ?>\n\t\t\t\t\t\t<div class=\"um-member-directory-sorting\">\n\t\t\t\t\t\t\t<span><?php _e( 'Sort by:', 'ultimate-member' ); ?>&nbsp;</span>\n\t\t\t\t\t\t\t<div class=\"um-member-directory-sorting-a\">\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\" class=\"um-member-directory-sorting-a-text\"><?php echo $sorting_options[ $sort_from_url ] ?></a>\n\t\t\t\t\t\t\t\t&nbsp;<i class=\"um-faicon-caret-down\"></i><i class=\"um-faicon-caret-up\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<?php $items = array();\n\t\t\t\t\t\tforeach ( $sorting_options as $value => $title ) {\n\t\t\t\t\t\t\t$items[] = '<a href=\"javascript:void(0);\" data-value=\"' . esc_attr( $value ) . '\" data-selected=\"' . ( ( $sort_from_url == $value ) ? '1' : '0' ) . '\" data-default=\"' . ( ( $default_sorting == $value ) ? '1' : '0' ) . '\">' . $title . '</a>'; ?>\n\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\tUM()->member_directory()->dropdown_menu( '.um-member-directory-sorting-a', 'click', $items ); ?>\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tif ( $filters && $show_filters && count( $search_filters ) && $filters_collapsible ) { ?>\n\t\t\t\t\t\t<span class=\"um-member-directory-filters\">\n\t\t\t\t\t\t\t<span class=\"um-member-directory-filters-a<?php if ( $filters_expanded ) { ?> um-member-directory-filters-visible<?php } ?>\">\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\">\n\t\t\t\t\t\t\t\t\t<?php _e( 'More filters', 'ultimate-member' ); ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t&nbsp;<i class=\"um-faicon-caret-down\"></i><i class=\"um-faicon-caret-up\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php } ?>\n\n\n\t\t<?php if ( $filters && $show_filters && count( $search_filters ) ) {\n\n\t\t\tif ( is_array( $search_filters ) ) { ?>\n\t\t\t\t<script type=\"text/template\" id=\"tmpl-um-members-filtered-line\">\n\t\t\t\t\t<# if ( data.filters.length > 0 ) { #>\n\t\t\t\t\t\t<# _.each( data.filters, function( filter, key, list ) { #>\n\t\t\t\t\t\t\t<div class=\"um-members-filter-tag\">\n\t\t\t\t\t\t\t\t<# if ( filter.type == 'slider' ) { #>\n\t\t\t\t\t\t\t\t\t{{{filter.value_label}}}\n\t\t\t\t\t\t\t\t<# } else { #>\n\t\t\t\t\t\t\t\t\t<strong>{{{filter.label}}}</strong>: {{{filter.value_label}}}\n\t\t\t\t\t\t\t\t<# } #>\n\t\t\t\t\t\t\t\t<div class=\"um-members-filter-remove um-tip-n\" data-name=\"{{{filter.name}}}\"\n\t\t\t\t\t\t\t\t     data-value=\"{{{filter.value}}}\" data-range=\"{{{filter.range}}}\"\n\t\t\t\t\t\t\t\t     data-type=\"{{{filter.type}}}\" title=\"<?php esc_attr_e( 'Remove filter', 'ultimate-member' ) ?>\">&times;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<# }); #>\n\t\t\t\t\t<# } #>\n\t\t\t\t</script>\n\n\t\t\t\t<div class=\"um-member-directory-header-row um-member-directory-filters-bar<?php if ( ! $filters_expanded ) { ?> um-header-row-invisible<?php } ?>\">\n\t\t\t\t\t<div class=\"um-search um-search-<?php echo count( $search_filters ) ?><?php if ( ! $filters_expanded ) { ?> um-search-invisible<?php } ?>\">\n\t\t\t\t\t\t<?php $i = 0;\n\t\t\t\t\t\tforeach ( $search_filters as $filter ) {\n\t\t\t\t\t\t\t$filter_content = UM()->member_directory()->show_filter( $filter, $args );\n\t\t\t\t\t\t\tif ( empty( $filter_content ) ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$type = UM()->member_directory()->filter_types[ $filter ]; ?>\n\n\t\t\t\t\t\t\t<div class=\"um-search-filter um-<?php echo esc_attr( $type ) ?>-filter-type <?php echo ( $i != 0 && $i%2 !== 0 ) ? 'um-search-filter-2' : '' ?>\"> <?php echo $filter_content; ?> </div>\n\n\t\t\t\t\t\t\t<?php $i++;\n\t\t\t\t\t\t} ?>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"um-member-directory-header-row\">\n\t\t\t\t\t<div class=\"um-filtered-line\">\n\t\t\t\t\t\t<div class=\"um-clear-filters\"><a href=\"javascript:void(0);\" class=\"um-clear-filters-a\" title=\"<?php esc_attr_e( 'Remove all filters', 'ultimate-member' ) ?>\"><?php _e( 'Clear all', 'ultimate-member' ); ?></a></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\t\tdo_action( 'um_members_directory_head', $args ); ?>\n\t</div>\n\n\t<div class=\"um-members-wrapper\"></div>\n\n\t<div class=\"um-members-pagination-box\"></div>\n\n\t<?php\n\t/**\n\t * UM hook\n\t *\n\t * @type action\n\t * @title um_members_directory_footer\n\t * @description Member directory display footer\n\t * @input_vars\n\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Member directory shortcode arguments\"}]\n\t * @change_log\n\t * [\"Since: 2.0\"]\n\t * @usage add_action( 'um_members_directory_footer', 'function_name', 10, 1 );\n\t * @example\n\t * <?php\n\t * add_action( 'um_members_directory_footer', 'my_members_directory_footer', 10, 1 );\n\t * function my_members_directory_footer( $args ) {\n\t *     // your code here\n\t * }\n\t * ?>\n\t */\n\tdo_action( 'um_members_directory_footer', $args ); ?>\n\n</div>"], "fixing_code": ["<?php\nnamespace um\\admin\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\admin\\core\\Admin_Settings' ) ) {\n\n\n\t/**\n\t * Class Admin_Settings\n\t * @package um\\admin\\core\n\t */\n\tclass Admin_Settings {\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $settings_structure;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $previous_licenses;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $need_change_permalinks;\n\n\n\t\tvar $gravatar_changed = false;\n\n\n\t\t/**\n\t\t * Admin_Settings constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\t//init settings structure\n\t\t\tadd_action( 'admin_init', array( &$this, 'init_variables' ), 9 );\n\n\t\t\t//admin menu\n\t\t\tadd_action( 'admin_menu', array( &$this, 'primary_admin_menu' ), 0 );\n\n\t\t\t//settings structure handlers\n\t\t\tadd_action( 'um_settings_page_before_email__content', array( $this, 'settings_before_email_tab' ) );\n\t\t\tadd_filter( 'um_settings_section_email__content', array( $this, 'settings_email_tab' ), 10, 1 );\n\n\t\t\t//enqueue wp_media for profiles tab\n\t\t\tadd_action( 'um_settings_page_appearance__before_section', array( $this, 'settings_appearance_profile_tab' ) );\n\n\t\t\t//custom content for licenses tab\n\t\t\tadd_filter( 'um_settings_section_licenses__content', array( $this, 'settings_licenses_tab' ), 10, 2 );\n\n\t\t\tadd_filter( 'um_settings_section_install_info__content', array( $this, 'settings_install_info_tab' ), 10, 2 );\n\n\n\t\t\tadd_filter( 'um_settings_structure', array( $this, 'sorting_licenses_options' ), 9999, 1 );\n\n\n\t\t\t//save handlers\n\t\t\tadd_action( 'admin_init', array( $this, 'save_settings_handler' ), 10 );\n\n\t\t\t//save pages options\n\t\t\tadd_action( 'um_settings_before_save', array( $this, 'check_permalinks_changes' ) );\n\t\t\tadd_action( 'um_settings_save', array( $this, 'on_settings_save' ) );\n\n\n\t\t\tadd_filter( 'um_change_settings_before_save', array( $this, 'save_email_templates' ) );\n\n\n\t\t\t//save licenses options\n\t\t\tadd_action( 'um_settings_before_save', array( $this, 'before_licenses_save' ) );\n\t\t\tadd_action( 'um_settings_save', array( $this, 'licenses_save' ) );\n\n\t\t\tadd_filter( 'um_change_settings_before_save', array( $this, 'remove_empty_values' ), 10, 1 );\n\n\t\t\tadd_action( 'admin_init', array( &$this, 'um_download_install_info' ) );\n\t\t}\n\n\n\n\t\tfunction same_page_update_ajax() {\n\t\t\tUM()->admin()->check_ajax_nonce();\n\n\t\t\tif ( empty( $_POST['cb_func'] ) ) {\n\t\t\t\twp_send_json_error( __( 'Wrong callback', 'ultimate-member' ) );\n\t\t\t}\n\n\t\t\tif ( 'um_usermeta_fields' == $_POST['cb_func'] ) {\n\t\t\t\t//first install metatable\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$metakeys = array();\n\t\t\t\tforeach ( UM()->builtin()->all_user_fields as $all_user_field ) {\n\t\t\t\t\tif ( $all_user_field['type'] == 'user_location' ) {\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_lat';\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_lng';\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'] . '_url';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$metakeys[] = $all_user_field['metakey'];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( is_multisite() ) {\n\n\t\t\t\t\t$sites = get_sites( array( 'fields' => 'ids' ) );\n\t\t\t\t\tforeach ( $sites as $blog_id ) {\n\t\t\t\t\t\t$metakeys[] = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t$blog_id = get_current_blog_id();\n\t\t\t\t\t$metakeys[] = $wpdb->get_blog_prefix( $blog_id ) . 'capabilities';\n\t\t\t\t}\n\n\t\t\t\t//member directory data\n\t\t\t\t$metakeys[] = 'um_member_directory_data';\n\t\t\t\t$metakeys[] = '_um_verified';\n\n\t\t\t\t$skip_fields = UM()->builtin()->get_fields_without_metakey();\n\t\t\t\t$skip_fields = array_merge( $skip_fields, UM()->member_directory()->core_search_fields );\n\n\t\t\t\t$real_usermeta = $wpdb->get_col( \"SELECT DISTINCT meta_key FROM {$wpdb->usermeta}\" );\n\t\t\t\t$real_usermeta = ! empty( $real_usermeta ) ? $real_usermeta : array();\n\t\t\t\t$real_usermeta = array_merge( $real_usermeta, array( 'um_member_directory_data' ) );\n\n\t\t\t\t$wp_usermeta_option = array_intersect( array_diff( $metakeys, $skip_fields ), $real_usermeta );\n\n\t\t\t\tupdate_option( 'um_usermeta_fields', $wp_usermeta_option );\n\n\t\t\t\tupdate_option( 'um_member_directory_update_meta', time() );\n\n\t\t\t\tUM()->options()->update( 'member_directory_own_table', true );\n\n\t\t\t\twp_send_json_success();\n\t\t\t} elseif ( 'um_get_metadata' == $_POST['cb_func'] ) {\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$wp_usermeta_option = get_option( 'um_usermeta_fields', array() );\n\n\t\t\t\t$count = $wpdb->get_var(\n\t\t\t\t\t\"SELECT COUNT(*) \n\t\t\t\t\tFROM {$wpdb->usermeta} \n\t\t\t\t\tWHERE meta_key IN ('\" . implode( \"','\", $wp_usermeta_option ) . \"')\"\n\t\t\t\t);\n\n\t\t\t\twp_send_json_success( array( 'count' => $count ) );\n\t\t\t} elseif ( 'um_update_metadata_per_page' == $_POST['cb_func'] ) {\n\n\t\t\t\tif ( empty( $_POST['page'] ) ) {\n\t\t\t\t\twp_send_json_error( __( 'Wrong data', 'ultimate-member' ) );\n\t\t\t\t}\n\n\t\t\t\t$per_page = 50;\n\t\t\t\t$wp_usermeta_option = get_option( 'um_usermeta_fields', array() );\n\n\t\t\t\tglobal $wpdb;\n\t\t\t\t$metadata = $wpdb->get_results( $wpdb->prepare(\n\t\t\t\t\t\"SELECT * \n\t\t\t\t\tFROM {$wpdb->usermeta} \n\t\t\t\t\tWHERE meta_key IN ('\" . implode( \"','\", $wp_usermeta_option ) . \"')\n\t\t\t\t\tLIMIT %d, %d\",\n\t\t\t\t\t( $_POST['page'] - 1 ) * $per_page,\n\t\t\t\t\t$per_page\n\t\t\t\t), ARRAY_A );\n\n\t\t\t\tforeach ( $metadata as $metarow ) {\n\t\t\t\t\t$wpdb->insert(\n\t\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'user_id'   => $metarow['user_id'],\n\t\t\t\t\t\t\t'um_key'    => $metarow['meta_key'],\n\t\t\t\t\t\t\t'um_value'  => $metarow['meta_value'],\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'%d',\n\t\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$from = ( $_POST['page'] * $per_page ) - $per_page + 1;\n\t\t\t\t$to = $_POST['page'] * $per_page;\n\n\t\t\t\twp_send_json_success( array( 'message' => sprintf( __( 'Metadata from %s to %s was upgraded successfully...', 'ultimate-member' ), $from, $to ) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_variables() {\n\t\t\t$general_pages_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'pages_settings',\n\t\t\t\t\t'type'      => 'hidden',\n\t\t\t\t\t'value'     => true,\n\t\t\t\t\t'is_option' => false\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$core_pages = UM()->config()->core_pages;\n\n\t\t\tforeach ( $core_pages as $page_s => $page ) {\n\t\t\t\t$have_pages = UM()->query()->wp_pages();\n\t\t\t\t$page_id = UM()->options()->get_core_page_id( $page_s );\n\n\t\t\t\t$page_title = ! empty( $page['title'] ) ? $page['title'] : '';\n\n\t\t\t\tif ( 'reached_maximum_limit' == $have_pages ) {\n\t\t\t\t\t$general_pages_fields[] = array(\n\t\t\t\t\t\t'id'            => $page_id,\n\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t'label'         => sprintf( __( '%s page', 'ultimate-member' ), $page_title ),\n\t\t\t\t\t\t'placeholder'   => __( 'Add page ID', 'ultimate-member' ),\n\t\t\t\t\t\t'compiler'      => true,\n\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$general_pages_fields[] = array(\n\t\t\t\t\t\t'id'            => $page_id,\n\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t'label'         => sprintf( __( '%s page', 'ultimate-member' ), $page_title ),\n\t\t\t\t\t\t'options'       => UM()->query()->wp_pages(),\n\t\t\t\t\t\t'placeholder'   => __( 'Choose a page...', 'ultimate-member' ),\n\t\t\t\t\t\t'compiler'      => true,\n\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$appearances_profile_menu_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'profile_menu',\n\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t'label' => __( 'Enable profile menu', 'ultimate-member' ),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$tabs = UM()->profile()->tabs();\n\n\t\t\t$tabs_options = array();\n\t\t\t$tabs_condition = array();\n\t\t\tforeach ( $tabs as $id => $tab ) {\n\n\t\t\t\tif ( ! empty( $tab['hidden'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $tab['name'] ) ) {\n\t\t\t\t\t$tabs_options[ $id ] = $tab['name'];\n\t\t\t\t\t$tabs_condition[] = 'profile_tab_' . $id;\n\t\t\t\t}\n\n\t\t\t\tif ( isset( $tab['default_privacy'] ) ) {\n\t\t\t\t\t$fields = array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id,\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => sprintf( __( '%s Tab', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t\t\t\t'data'          => array( 'fill_profile_menu_default_tab' => $id ),\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\n\t\t\t\t\t$fields = array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id,\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => sprintf( __( '%s Tab', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t\t\t\t'data'          => array( 'fill_profile_menu_default_tab' => $id ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id . '_privacy',\n\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t'label'         => sprintf( __( 'Who can see %s Tab?', 'ultimate-member' ), $tab['name'] ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'Select which users can view this tab.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'       => UM()->profile()->tabs_privacy(),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_tab_' . $id, '=', 1 ),\n\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'profile_tab_' . $id . '_roles',\n\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t'multi'         => true,\n\t\t\t\t\t\t\t'label'         => __( 'Allowed roles', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'Select the the user roles allowed to view this tab.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'       => UM()->roles()->get_roles(),\n\t\t\t\t\t\t\t'placeholder'   => __( 'Choose user roles...', 'ultimate-member' ),\n\t\t\t\t\t\t\t'conditional'   => array( 'profile_tab_' . $id . '_privacy', '=', 4 ),\n\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$appearances_profile_menu_fields = array_merge( $appearances_profile_menu_fields, $fields );\n\t\t\t}\n\n\t\t\t$appearances_profile_menu_fields[] = array(\n\t\t\t\t'id'            => 'profile_menu_default_tab',\n\t\t\t\t'type'          => 'select',\n\t\t\t\t'label'         => __( 'Profile menu default tab', 'ultimate-member' ),\n\t\t\t\t'tooltip'       => __( 'This will be the default tab on user profile page', 'ultimate-member' ),\n\t\t\t\t'options'       => $tabs_options,\n\t\t\t\t'conditional'   => array( implode( '|', $tabs_condition ), '~', 1 ),\n\t\t\t\t'size'          => 'small'\n\t\t\t);\n\n\t\t\t$appearances_profile_menu_fields = array_merge( $appearances_profile_menu_fields, array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'profile_menu_icons',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Enable menu icons in desktop view', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'profile_menu', '=', 1 ),\n\t\t\t\t),\n\t\t\t) );\n\n\t\t\t$post_types_options = array();\n\t\t\t$all_post_types = get_post_types( array( 'public' => true ), 'objects' );\n\t\t\tforeach ( $all_post_types as $key => $post_type_data ) {\n\t\t\t\t$post_types_options[ $key ] = $post_type_data->labels->singular_name;\n\t\t\t}\n\n\t\t\t$taxonomies_options = array();\n\t\t\t$exclude_taxonomies = UM()->excluded_taxonomies();\n\t\t\t$all_taxonomies = get_taxonomies( array( 'public' => true ), 'objects' );\n\t\t\t$duplicates = array();\n\t\t\tforeach ( $all_taxonomies as $key => $taxonomy ) {\n\t\t\t\tif ( in_array( $key , $exclude_taxonomies ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( ! in_array( $taxonomy->labels->singular_name, $duplicates ) ) {\n\t\t\t\t\t$duplicates[] = $taxonomy->labels->singular_name;\n\t\t\t\t\t$label = $taxonomy->labels->singular_name;\n\t\t\t\t} else {\n\t\t\t\t\t$label = $taxonomy->labels->singular_name . ' (' . $key . ')';\n\t\t\t\t}\n\n\t\t\t\t$taxonomies_options[ $key ] = $label;\n\t\t\t}\n\n\t\t\t$restricted_access_post_metabox_value = array();\n\t\t\tif ( $restricted_access_post_metabox = UM()->options()->get( 'restricted_access_post_metabox' ) ) {\n\t\t\t\tforeach ( $restricted_access_post_metabox as $key => $value ) {\n\t\t\t\t\tif ( $value ) {\n\t\t\t\t\t\t$restricted_access_post_metabox_value[] = $key;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$restricted_access_taxonomy_metabox_value = array();\n\t\t\tif ( $restricted_access_taxonomy_metabox = UM()->options()->get( 'restricted_access_taxonomy_metabox' ) ) {\n\t\t\t\tforeach ( $restricted_access_taxonomy_metabox as $key => $value ) {\n\t\t\t\t\tif ( $value ) {\n\t\t\t\t\t\t$restricted_access_taxonomy_metabox_value[] = $key;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$access_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'accessible',\n\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t'label'     => __( 'Global Site Access', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Globally control the access of your site, you can have seperate restrict options per post/page by editing the desired item.', 'ultimate-member' ),\n\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t0   => __( 'Site accessible to Everyone', 'ultimate-member' ),\n\t\t\t\t\t\t2   => __( 'Site accessible to Logged In Users', 'ultimate-member' ),\n\t\t\t\t\t),\n\t\t\t\t\t'size'      => 'medium',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'access_redirect',\n\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t'label'         => __( 'Custom Redirect URL', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'       => __( 'A logged out user will be redirected to this url If he is not permitted to access the site', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'                    => 'access_exclude_uris',\n\t\t\t\t\t'type'                  => 'multi_text',\n\t\t\t\t\t'label'                 => __( 'Exclude the following URLs', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'               => __( 'Here you can exclude URLs beside the redirect URI to be accessible to everyone', 'ultimate-member' ),\n\t\t\t\t\t'add_text'              => __( 'Add New URL', 'ultimate-member' ),\n\t\t\t\t\t'conditional'           => array( 'accessible', '=', 2 ),\n\t\t\t\t\t'show_default_number'   => 1,\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'home_page_accessible',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Allow Homepage to be accessible', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'category_page_accessible',\n\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t'label'         => __( 'Allow Category pages to be accessible', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'accessible', '=', 2 ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_message',\n\t\t\t\t\t'type'      => 'wp_editor',\n\t\t\t\t\t'label'     => __( 'Restricted Access Message', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'This is the message shown to users that do not have permission to view the content', 'ultimate-member' ),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tglobal $wp_version;\n\t\t\tif ( version_compare( $wp_version, '5.0', '>=' ) ) {\n\t\t\t\t$access_fields = array_merge( $access_fields, array( array(\n\t\t\t\t\t'id'    => 'restricted_blocks',\n\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t'label' => __( 'Allow Gutenberg Blocks restriction options', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => 'restricted_block_message',\n\t\t\t\t\t'type'          => 'textarea',\n\t\t\t\t\t'label'         => __( 'Restricted Block Message', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'       => __( 'This is the message shown to users that do not have permission to view the block\\'s content', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( 'restricted_blocks', '=', 1 ),\n\t\t\t\t) ) );\n\t\t\t}\n\t\t\t$access_fields = array_merge( $access_fields, array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'restricted_access_post_metabox',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => '',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'restricted_access_taxonomy_metabox',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => '',\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_post_metabox',\n\t\t\t\t\t'type'      => 'multi_checkbox',\n\t\t\t\t\t'label'     => __( 'Restricted Access to Posts', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Restriction content of the current Posts', 'ultimate-member' ),\n\t\t\t\t\t'options'   => $post_types_options,\n\t\t\t\t\t'columns'   => 3,\n\t\t\t\t\t'value'     => $restricted_access_post_metabox_value,\n\t\t\t\t\t'default'   => UM()->options()->get_default( 'restricted_access_post_metabox' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => 'restricted_access_taxonomy_metabox',\n\t\t\t\t\t'type'      => 'multi_checkbox',\n\t\t\t\t\t'label'     => __( 'Restricted Access to Taxonomies', 'ultimate-member' ),\n\t\t\t\t\t'tooltip'   => __( 'Restriction content of the current Taxonomies', 'ultimate-member' ),\n\t\t\t\t\t'options'   => $taxonomies_options,\n\t\t\t\t\t'columns'   => 3,\n\t\t\t\t\t'value'     => $restricted_access_taxonomy_metabox_value,\n\t\t\t\t\t'default'   => UM()->options()->get_default( 'restricted_access_taxonomy_metabox' ),\n\t\t\t) ) );\n\n\t\t\t$latest_update = get_option( 'um_member_directory_update_meta', false );\n\t\t\t$latest_truncate = get_option( 'um_member_directory_truncated', false );\n\n\t\t\t$same_page_update = array(\n\t\t\t\t'id'        => 'member_directory_own_table',\n\t\t\t\t'type'      => 'same_page_update',\n\t\t\t\t'label'     => __( 'Enable custom table for usermeta', 'ultimate-member' ),\n\t\t\t\t'tooltip'   => __( 'Check this box if you would like to enable the use of a custom table for user metadata. Improved performance for member directory searches.', 'ultimate-member' ),\n\t\t\t);\n\n\t\t\tif ( empty( $latest_update ) || ( ! empty( $latest_truncate ) && $latest_truncate > $latest_update ) ) {\n\t\t\t\t$same_page_update['upgrade_cb'] = 'sync_metatable';\n\t\t\t\t$same_page_update['upgrade_description'] = '<p>' . __( 'We recommend creating a backup of your site before running the update process. Do not exit the page before the update process has complete.', 'ultimate-member' ) . '</p>\n<p>' . __( 'After clicking the <strong>\"Run\"</strong> button, the update process will start. All information will be displayed in the field below.', 'ultimate-member' ) . '</p>\n<p>' . __( 'If the update was successful, you will see a corresponding message. Otherwise, contact technical support if the update failed.', 'ultimate-member' ) . '</p>';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_settings_structure\n\t\t\t * @description Extend UM Settings\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Settings\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_settings_structure', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_settings_structure', 'my_settings_structure', 10, 1 );\n\t\t\t * function my_settings_structure( $settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->settings_structure = apply_filters( 'um_settings_structure', array(\n\t\t\t\t''              => array(\n\t\t\t\t\t'title'     => __( 'General', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''          => array(\n\t\t\t\t\t\t\t'title'     => __( 'Pages', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $general_pages_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'users'     => array(\n\t\t\t\t\t\t\t'title'     => __( 'Users', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'permalink_base',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'size'          => 'small',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Permalink Base','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Here you can control the permalink structure of the user profile URL globally e.g. ' . trailingslashit( um_get_core_page('user') ) . '<strong>username</strong>/','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'user_login' \t\t=> __( 'Username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name' \t\t\t\t=> __( 'First and Last Name with \\'.\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name_dash' \t\t=> __( 'First and Last Name with \\'-\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'name_plus' \t\t=> __( 'First and Last Name with \\'+\\'', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'user_id' \t\t\t=> __( 'User ID', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'placeholder'   => __( 'Select...', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'display_name',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'size'          => 'medium',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'User Display Name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'This is the name that will be displayed for users on the front end of your site. Default setting uses first/last name as display name if it exists', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'default'\t\t\t=> __( 'Default WP Display Name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'nickname'\t\t\t=> __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'username' \t\t\t=> __( 'Username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'full_name' \t\t=> __( 'First name & last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'sur_name' \t\t\t=> __( 'Last name & first name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'initial_name'\t\t=> __( 'First name & first initial of last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'initial_name_f'\t=> __( 'First initial of first name & last name', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'first_name'\t\t=> __( 'First name only', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'field' \t\t\t=> __( 'Custom field(s)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'placeholder'   => __( 'Select...', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'display_name_field',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Display Name Custom Field(s)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Specify the custom field meta key or custom fields seperated by comma that you want to use to display users name on the frontend of your site', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'display_name', '=', 'field' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'author_redirect',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Automatically redirect author page to their profile?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'If enabled, author pages will automatically redirect to the user\\'s profile page', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'members_page',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Enable Members Directory', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Control whether to enable or disable member directories on this site', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'use_gravatars',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Use Gravatars?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Do you want to use gravatars instead of the default plugin profile photo (If the user did not upload a custom profile photo / avatar)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'use_um_gravatar_default_builtin_image',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Use Gravatar builtin image', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Gravatar has a number of built in options which you can also use as defaults', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'default'   => __( 'Default', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'404'       => __( '404 ( File Not Found response )', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'mm'        => __( 'Mystery Man', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'identicon' => __( 'Identicon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'monsterid' => __( 'Monsterid', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'wavatar'   => __( 'Wavatar', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'retro'     => __( 'Retro', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'blank'     => __( 'Blank ( a transparent PNG image )', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'use_gravatars', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'use_um_gravatar_default_image',\n\t\t\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Use Default plugin avatar as Gravatar\\'s Default avatar', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Do you want to use the plugin default avatar instead of the gravatar default photo (If the user did not upload a custom profile photo / avatar)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'use_um_gravatar_default_builtin_image', '=', 'default' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'reset_require_strongpass',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Require a strong password? (when user resets password only)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Enable or disable a strong password rules on password reset and change procedure', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'account'   => array(\n\t\t\t\t\t\t\t'title'     => __( 'Account', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_password',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Password Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> 'Enable/disable the Password account tab in account page',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_privacy',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Privacy Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Privacy account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_notifications',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Notifications Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Notifications account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_tab_delete',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Delete Account Tab','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable/disable the Delete account tab in account page','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'delete_account_text',\n\t\t\t\t\t\t\t\t\t'type'    \t\t=> 'textarea', // bug with wp 4.4? should be editor\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Account Deletion Custom Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('This is custom text that will be displayed to users before they delete their accounts from your site','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'args'     \t\t=> array(\n\t\t\t\t\t\t\t\t\t\t'textarea_rows'    => 6\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Add a First & Last Name fields','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to enable these fields on the user account page by default or hide them.','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name_disable',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Disable First & Last Name fields','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to allow users changing their first and last name in account page.','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'conditional'\t\t=> array( 'account_name', '=', '1' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_name_require',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Require First & Last Name','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Require first and last name?','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'conditional'\t\t=> array( 'account_name', '=', '1' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_email',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Allow users to change e-mail','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Whether to allow users changing their email in account page.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'account_general_password',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Password is required?','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Password is required to save account data.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_hide_in_directory',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Allow users to hide their profiles from directory','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Whether to allow users changing their profile visibility from member directory in account page.','ultimate-member'),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'account_require_strongpass',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'   \t\t=> __( 'Require a strong password?','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __('Enable or disable a strong password rules on account page / change password tab','ultimate-member'),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'uploads'   => array(\n\t\t\t\t\t\t\t'title'     => __( 'Uploads', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'profile_photo_max_size',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Profile Photo Maximum File Size (bytes)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Sets a maximum size for the uploaded photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_photo_max_size',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Maximum File Size (bytes)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Sets a maximum size for the uploaded cover', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'photo_thumb_sizes',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'multi_text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Profile Photo Thumbnail Sizes (px)','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Here you can define which thumbnail sizes will be created for each profile photo upload.','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate' \t\t=> 'numeric',\n\t\t\t\t\t\t\t\t\t'add_text'\t\t=> __('Add New Size','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'show_default_number' => 1,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_thumb_sizes',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'multi_text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Thumbnail Sizes (px)','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t=> __( 'Here you can define which thumbnail sizes will be created for each cover photo upload.','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate' \t\t=> 'numeric',\n\t\t\t\t\t\t\t\t\t'add_text'\t\t=> __('Add New Size','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'show_default_number' => 1,\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'image_compression',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Image Quality','ultimate-member'),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Quality is used to determine quality of image uploads, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file). The default range is 60.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'image_max_width',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Image Upload Maximum Width (px)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'Any image upload above this width will be resized to this limit automatically.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'       \t\t=> 'cover_min_width',\n\t\t\t\t\t\t\t\t\t'type'     \t\t=> 'text',\n\t\t\t\t\t\t\t\t\t'size'     \t\t=> 'small',\n\t\t\t\t\t\t\t\t\t'label'    \t\t=> __( 'Cover Photo Minimum Width (px)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip' \t   \t=> __( 'This will be the minimum width for cover photo uploads', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'access'        => array(\n\t\t\t\t\t'title'     => __( 'Access', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''      => array(\n\t\t\t\t\t\t\t'title'     => __( 'Restriction Content', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $access_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'other' => array(\n\t\t\t\t\t\t\t'title'     => __( 'Other', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'    => 'enable_reset_password_limit',\n\t\t\t\t\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label' => __( 'Enable the Reset Password Limit?', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'reset_password_limit_number',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Reset Password Limit', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Set the maximum reset password limit. If reached the maximum limit, user will be locked from using this.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'validate'      => 'numeric',\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'enable_reset_password_limit', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'blocked_emails',\n\t\t\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Blocked Email Addresses', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will block the specified e-mail addresses from being able to sign up or sign in to your site. To block an entire domain, use something like *@domain.com', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'blocked_words',\n\t\t\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Blacklist Words', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This option lets you specify blacklist of words to prevent anyone from signing up with such a word as their username', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'email'         => array(\n\t\t\t\t\t'title'     => __( 'Email', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'admin_email',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'Admin E-mail Address', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. admin@companyname.com','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'mail_from',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'Mail appears from','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. Site Name','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'mail_from_addr',\n\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t'label'         => __( 'Mail appears from address','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'e.g. admin@companyname.com','ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'            => 'email_html',\n\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t'label'         => __( 'Use HTML for E-mails?','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'       => __( 'If you plan use e-mails with HTML, please make sure that this option is enabled. Otherwise, HTML will be displayed as plain text.','ultimate-member'),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'appearance'    => array(\n\t\t\t\t\t'title'     => __( 'Appearance', 'ultimate-member' ),\n\t\t\t\t\t'sections'  => array(\n\t\t\t\t\t\t''                  => array(\n\t\t\t\t\t\t\t'title'     => __( 'Profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_template' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'profile' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_area_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Area Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_area_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width of the profile area inside profile (below profile header)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This is applicable for edit mode only', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Primary Button Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_primary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for updating profile button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_secondary_btn' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The text that is used for cancelling update profile button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'                    => 'default_avatar',\n\t\t\t\t\t\t\t\t\t'type'                  => 'media',\n\t\t\t\t\t\t\t\t\t'label'                 => __( 'Default Profile Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'               => __( 'You can change the default profile picture globally here. Please make sure that the photo is 300x300px.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'upload_frame_title'    => __( 'Select Default Profile Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'               => array(\n\t\t\t\t\t\t\t\t\t\t'url'   => um_url . 'assets/img/default_avatar.jpg',\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'                    => 'default_cover',\n\t\t\t\t\t\t\t\t\t'type'                  => 'media',\n\t\t\t\t\t\t\t\t\t'url'                   => true,\n\t\t\t\t\t\t\t\t\t'preview'               => false,\n\t\t\t\t\t\t\t\t\t'label'                 => __( 'Default Cover Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'               => __( 'You can change the default cover photo globally here. Please make sure that the default cover is large enough and respects the ratio you are using for cover photos.', 'ultimate-member'),\n\t\t\t\t\t\t\t\t\t'upload_frame_title'    => __( 'Select Default Cover Photo', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'disable_profile_photo_upload',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Disable Profile Photo Upload', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the profile photo uploader', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'disable_profile_photo_upload' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_photosize',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Photo Size', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_photosize' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->files()->get_profile_photo_size( 'photo_thumb_sizes' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The global default of profile photo size. This can be overridden by individual form settings', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_cover_enabled',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Cover Photos', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_cover_enabled' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the profile cover photos', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_coversize',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Cover Size', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_coversize' ),\n\t\t\t\t\t\t\t\t\t'options'       => UM()->files()->get_profile_photo_size( 'cover_thumb_sizes' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The global default width of cover photo size. This can be overridden by individual form settings', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_cover_enabled', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_cover_ratio',\n\t\t\t\t\t\t\t\t\t'type'          => 'select',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Profile Cover Ratio', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Choose global ratio for cover photos of profiles', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_cover_ratio' ),\n\t\t\t\t\t\t\t\t\t'options'       => array(\n\t\t\t\t\t\t\t\t\t\t'1.6:1' => '1.6:1',\n\t\t\t\t\t\t\t\t\t\t'2.7:1' => '2.7:1',\n\t\t\t\t\t\t\t\t\t\t'2.2:1' => '2.2:1',\n\t\t\t\t\t\t\t\t\t\t'3.2:1' => '3.2:1',\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_cover_enabled', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_metaicon',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Header Meta Text Icon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 0,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Display field icons for related user meta fields in header or not', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_name',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show display name in profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_name' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the user name on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_social_links',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show social links in profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_social_links' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the social links on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_bio',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show user description in header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_show_bio' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the user description on profile header', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_show_html_bio',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Enable HTML support for user description', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off to enable/disable support for html tags on user description.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_bio_maxchars',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'User description maximum chars', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_bio_maxchars' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Maximum number of characters to allow in user description field in header.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_show_bio', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_header_menu',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Profile Header Menu Position', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_header_menu' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'For incompatible themes, please make the menu open from left instead of bottom by default.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'bc'    => __( 'Bottom of Icon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'lc'    => __( 'Left of Icon (right for RTL)', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'profile_empty_text',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show a custom message if profile is empty', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'profile_empty_text' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the custom message that appears when the profile is empty', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'profile_empty_text_emo',\n\t\t\t\t\t\t\t\t\t'type'          => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Show the emoticon', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'profile_empty_text_emo' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'Switch on/off the emoticon (sad face) that appears above the message', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'profile_empty_text', '=', 1 ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'profile_menu'      => array(\n\t\t\t\t\t\t\t'title'     => __( 'Profile Menu', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => $appearances_profile_menu_fields\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'registration_form' => array(\n\t\t\t\t\t\t\t'title'     => __( 'Registration Form', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output registration', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_template'),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'register' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_max_width'),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_align',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Shortcode Alignment', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The shortcode is centered by default unless you specify otherwise here', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_align' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'center'    => __( 'Centered', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'left'      => __( 'Left aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'right'     => __( 'Right aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the display of field icons in the registration form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Primary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault('register_primary_btn_word'),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for primary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'register_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Registration Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'register_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'The text that is used for the secondary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'register_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'register_secondary_btn_url',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Registration Secondary Button URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault('register_secondary_btn_url'),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'You can replace default link for this button by entering custom URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'register_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'register_role',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Registration Default Role', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default role assigned to users registering thru registration form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'register_role' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->roles()->get_roles( $add_default = 'Default' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'login_form'        => array(\n\t\t\t\t\t\t\t'title'     => __( 'Login Form', 'ultimate-member' ),\n\t\t\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_template',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Default Template', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This will be the default template to output login', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_template' ),\n\t\t\t\t\t\t\t\t\t'options'   => UM()->shortcodes()->get_templates( 'login' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_max_width',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Maximum Width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_max_width' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The maximum width this shortcode can take from the page width', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_align',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Shortcode Alignment', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The shortcode is centered by default unless you specify otherwise here', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_align' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'center'    => __( 'Centered', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'left'      => __( 'Left aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'right'     => __( 'Right aligned', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_icons',\n\t\t\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Field Icons', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the display of field icons in the login form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_icons' ),\n\t\t\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t\t\t'field' => __( 'Show inside text field', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'label' => __( 'Show with label', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t'off'   => __( 'Turn off', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t'size'      => 'small'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_primary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Primary Button Text','ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => um_get_metadefault( 'login_primary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'The text that is used for primary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_secondary_btn',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Secondary Button', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the secondary button display in the form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'login_secondary_btn_word',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Login Secondary Button Text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'login_secondary_btn_word' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __('The text that is used for the secondary button text', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'login_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'            => 'login_secondary_btn_url',\n\t\t\t\t\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t\t\t\t\t'label'         => __( 'Login Secondary Button URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'       => um_get_metadefault( 'login_secondary_btn_url' ),\n\t\t\t\t\t\t\t\t\t'tooltip'       => __( 'You can replace default link for this button by entering custom URL', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'conditional'   => array( 'login_secondary_btn', '=', 1 ),\n\t\t\t\t\t\t\t\t\t'size'          => 'medium'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_forgot_pass_link',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Login Forgot Password Link', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Switch on/off the forgot password link in login form', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t'id'        => 'login_show_rememberme',\n\t\t\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t\t\t'label'     => __( 'Show \"Remember Me\"', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t'default'   => 1,\n\t\t\t\t\t\t\t\t\t'tooltip'   => __( 'Allow users to choose If they want to stay signed in even after closing the browser. If you do not show this option, the default will be to not remember login session.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'extensions'    => array(\n\t\t\t\t\t'title' => __( 'Extensions', 'ultimate-member' )\n\t\t\t\t),\n\t\t\t\t'licenses'      => array(\n\t\t\t\t\t'title' => __( 'Licenses', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\t'misc'          => array(\n\t\t\t\t\t'title'     => __( 'Misc', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'    => 'form_asterisk',\n\t\t\t\t\t\t\t'type'  => 'checkbox',\n\t\t\t\t\t\t\t'label' => __( 'Show an asterisk for required fields', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'profile_title',\n\t\t\t\t\t\t\t'type'      => 'text',\n\t\t\t\t\t\t\t'label'     => __( 'User Profile Title', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This is the title that is displayed on a specific user profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'size'      => 'medium'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'profile_desc',\n\t\t\t\t\t\t\t'type'      => 'textarea',\n\t\t\t\t\t\t\t'label'     => __( 'User Profile Dynamic Meta Description', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This will be used in the meta description that is available for search-engines.', 'ultimate-member' ),\n\t\t\t\t\t\t\t'args'      => array(\n\t\t\t\t\t\t\t\t'textarea_rows' => 6\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'um_profile_object_cache_stop',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Disable Cache User Profile', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like to disable Ultimate Member user\\'s cache.', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'enable_blocks',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Enable Gutenberg Blocks', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like to use Ultimate Member blocks in Gutenberg editor. Important some themes have the conflicts with Gutenberg editor.', 'ultimate-member' ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'rest_api_version',\n\t\t\t\t\t\t\t'type'      => 'select',\n\t\t\t\t\t\t\t'label'     => __( 'REST API version','ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'This controls the REST API version, we recommend to use the last version', 'ultimate-member' ),\n\t\t\t\t\t\t\t'options'   => array(\n\t\t\t\t\t\t\t\t'1.0'   => __( '1.0 version', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t'2.0'   => __( '2.0 version', 'ultimate-member' ),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$same_page_update,\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'id'        => 'uninstall_on_delete',\n\t\t\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t\t\t'label'     => __( 'Remove Data on Uninstall?', 'ultimate-member' ),\n\t\t\t\t\t\t\t'tooltip'   => __( 'Check this box if you would like Ultimate Member to completely remove all of its data when the plugin/extensions are deleted.', 'ultimate-member' ),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t'install_info'  => array(\n\t\t\t\t\t'title'     => __( 'Install Info', 'ultimate-member' ),\n\t\t\t\t\t'fields'    => array(\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'type'  => 'install_info',\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t) );\n\n\t\t}\n\n\n\t\t/**\n\t\t * @param $settings\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction sorting_licenses_options( $settings ) {\n\t\t\t//sorting  licenses\n\t\t\tif ( empty( $settings['licenses']['fields'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$licenses = $settings['licenses']['fields'];\n\t\t\t@uasort( $licenses, function( $a, $b ) {\n\t\t\t\treturn strnatcasecmp( $a[\"label\"], $b[\"label\"] );\n\t\t\t} );\n\t\t\t$settings['licenses']['fields'] = $licenses;\n\n\t\t\t//sorting extensions\n\t\t\tif ( empty( $settings['extensions']['sections'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$extensions = $settings['extensions']['sections'];\n\t\t\t@uasort( $extensions, function( $a, $b ) {\n\t\t\t\treturn strnatcasecmp( $a[\"title\"], $b[\"title\"] );\n\t\t\t} );\n\n\t\t\t$keys = array_keys( $extensions );\n\t\t\tif ( $keys[0] != \"\" ) {\n\t\t\t\t$new_key = strtolower( str_replace( \" \", \"_\", $extensions[\"\"]['title'] ) );\n\t\t\t\t$temp = $extensions[\"\"];\n\t\t\t\t$extensions[$new_key] = $temp;\n\t\t\t\t$extensions[\"\"] = $extensions[$keys[0]];\n\t\t\t\tunset( $extensions[$keys[0]] );\n\t\t\t\t@uasort( $extensions, function( $a, $b ) {\n\t\t\t\t\treturn strnatcasecmp( $a[\"title\"], $b[\"title\"] );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t$settings['extensions']['sections'] = $extensions;\n\n\t\t\treturn $settings;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $tab\n\t\t * @param $section\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction get_section_fields( $tab, $section ) {\n\n\t\t\tif ( empty( $this->settings_structure[ $tab ] ) ) {\n\t\t\t\treturn array();\n\t\t\t}\n\n\t\t\tif ( ! empty( $this->settings_structure[ $tab ]['sections'][ $section ]['fields'] ) ) {\n\t\t\t\treturn $this->settings_structure[ $tab ]['sections'][ $section ]['fields'];\n\t\t\t} elseif ( ! empty( $this->settings_structure[ $tab ]['fields'] ) ) {\n\t\t\t\treturn $this->settings_structure[ $tab ]['fields'];\n\t\t\t}\n\n\t\t\treturn array();\n\t\t}\n\n\n\t\t/**\n\t\t * Setup admin menu\n\t\t */\n\t\tfunction primary_admin_menu() {\n\t\t\tadd_submenu_page( 'ultimatemember', __( 'Settings', 'ultimate-member' ), __( 'Settings', 'ultimate-member' ), 'manage_options', 'um_options', array( &$this, 'settings_page' ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Settings page callback\n\t\t */\n\t\tfunction settings_page() {\n\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t$current_subtab = empty( $_GET['section'] ) ? '' : urldecode( $_GET['section'] );\n\n\t\t\t$settings_struct = $this->settings_structure[$current_tab];\n\n\t\t\t//remove not option hidden fields\n\t\t\tif ( ! empty( $settings_struct['fields'] ) ) {\n\t\t\t\tforeach ( $settings_struct['fields'] as $field_key => $field_options ) {\n\n\t\t\t\t\tif ( isset( $field_options['is_option'] ) && $field_options['is_option'] === false ) {\n\t\t\t\t\t\tunset( $settings_struct['fields'][ $field_key ] );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $settings_struct['fields'] ) && empty( $settings_struct['sections'] ) ) {\n\t\t\t\tum_js_redirect( add_query_arg( array( 'page' => 'um_options' ), admin_url( 'admin.php' ) ) );\n\t\t\t}\n\n\t\t\tif ( ! empty( $settings_struct['sections'] ) ) {\n\t\t\t\tif ( empty( $settings_struct['sections'][ $current_subtab ] ) ) {\n\t\t\t\t\tum_js_redirect( add_query_arg( array( 'page' => 'um_options', 'tab' => $current_tab ), admin_url( 'admin.php' ) ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo '<div id=\"um-settings-wrap\" class=\"wrap\"><h2>' .  __( 'Ultimate Member - Settings', 'ultimate-member' ) . '</h2>';\n\n\t\t\techo $this->generate_tabs_menu() . $this->generate_subtabs_menu( $current_tab );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_settings_page_before_{$current_tab}_{$current_subtab}_content\n\t\t\t * @description Show some content before settings page content\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_settings_page_before_{$current_tab}_{$current_subtab}_content', 'function_name', 10 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_settings_page_before_{$current_tab}_{$current_subtab}_content', 'my_settings_page_before', 10 );\n\t\t\t * function my_settings_page_before() {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_settings_page_before_\" . $current_tab . \"_\" . $current_subtab . \"_content\" );\n\n\t\t\tif ( in_array( $current_tab, apply_filters('um_settings_custom_tabs', array( 'licenses', 'install_info' ) ) ) || in_array( $current_subtab, apply_filters( 'um_settings_custom_subtabs', array(), $current_tab ) ) ) {\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_page_{$current_tab}_{$current_subtab}_before_section\n\t\t\t\t * @description Show some content before section content at settings page\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'my_settings_page_before_section', 10 );\n\t\t\t\t * function my_settings_page_before_section() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( \"um_settings_page_\" . $current_tab . \"_\" . $current_subtab . \"_before_section\" );\n\n\t\t\t\t$section_fields = $this->get_section_fields( $current_tab, $current_subtab );\n\t\t\t\t$settings_section = $this->render_settings_section( $section_fields, $current_tab, $current_subtab );\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_settings_section_{$current_tab}_{$current_subtab}_content\n\t\t\t\t *\n\t\t\t\t * @description Render settings section\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$content\",\"type\":\"string\",\"desc\":\"Section content\"},\n\t\t\t\t * {\"var\":\"$section_fields\",\"type\":\"array\",\"desc\":\"Section Fields\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'function_name', 10, 2 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'my_settings_section', 10, 2 );\n\t\t\t\t * function my_settings_section( $content ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $content;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\techo apply_filters( 'um_settings_section_' . $current_tab . '_' . $current_subtab . '_content',\n\t\t\t\t\t$settings_section,\n\t\t\t\t\t$section_fields\n\t\t\t\t);\n\n\t\t\t} else { ?>\n\n\t\t\t\t<form method=\"post\" action=\"\" name=\"um-settings-form\" id=\"um-settings-form\">\n\t\t\t\t\t<input type=\"hidden\" value=\"save\" name=\"um-settings-action\" />\n\n\t\t\t\t\t<?php\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type action\n\t\t\t\t\t * @title um_settings_page_{$current_tab}_{$current_subtab}_before_section\n\t\t\t\t\t * @description Show some content before section content at settings page\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'function_name', 10 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_action( 'um_settings_page_{$current_tab}_{$current_subtab}_before_section', 'my_settings_page_before_section', 10 );\n\t\t\t\t\t * function my_settings_page_before_section() {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\tdo_action( \"um_settings_page_\" . $current_tab . \"_\" . $current_subtab . \"_before_section\" );\n\n\t\t\t\t\t$section_fields = $this->get_section_fields( $current_tab, $current_subtab );\n\t\t\t\t\t$settings_section = $this->render_settings_section( $section_fields, $current_tab, $current_subtab );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type filter\n\t\t\t\t\t * @title um_settings_section_{$current_tab}_{$current_subtab}_content\n\t\t\t\t\t * @description Render settings section\n\t\t\t\t\t * @input_vars\n\t\t\t\t\t * [{\"var\":\"$content\",\"type\":\"string\",\"desc\":\"Section content\"},\n\t\t\t\t\t * {\"var\":\"$section_fields\",\"type\":\"array\",\"desc\":\"Section Fields\"}]\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'function_name', 10, 2 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_filter( 'um_settings_section_{$current_tab}_{$current_subtab}_content', 'my_settings_section', 10, 2 );\n\t\t\t\t\t * function my_settings_section( $content ) {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t *     return $content;\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\techo apply_filters( 'um_settings_section_' . $current_tab . '_' . $current_subtab . '_content',\n\t\t\t\t\t\t$settings_section,\n\t\t\t\t\t\t$section_fields\n\t\t\t\t\t); ?>\n\n\n\t\t\t\t\t<p class=\"submit\">\n\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Save Changes', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t\t</p>\n\t\t\t\t</form>\n\n\t\t\t<?php }\n\t\t}\n\n\n\t\t/**\n\t\t * Generate pages tabs\n\t\t *\n\t\t * @param string $page\n\t\t * @return string\n\t\t */\n\t\tfunction generate_tabs_menu( $page = 'settings' ) {\n\n\t\t\t$tabs = '<h2 class=\"nav-tab-wrapper um-nav-tab-wrapper\">';\n\n\t\t\tswitch( $page ) {\n\t\t\t\tcase 'settings':\n\t\t\t\t\t$menu_tabs = array();\n\t\t\t\t\tforeach ( $this->settings_structure as $slug => $tab ) {\n\t\t\t\t\t\tif ( ! empty( $tab['fields'] ) ) {\n\t\t\t\t\t\t\tforeach ( $tab['fields'] as $field_key => $field_options ) {\n\t\t\t\t\t\t\t\tif ( isset( $field_options['is_option'] ) && $field_options['is_option'] === false ) {\n\t\t\t\t\t\t\t\t\tunset( $tab['fields'][ $field_key ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $tab['fields'] ) || ! empty( $tab['sections'] ) ) {\n\t\t\t\t\t\t\t$menu_tabs[ $slug ] = $tab['title'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t\t\tforeach ( $menu_tabs as $name => $label ) {\n\t\t\t\t\t\t$active = ( $current_tab == $name ) ? 'nav-tab-active' : '';\n\t\t\t\t\t\t$tabs .= '<a href=\"' . esc_url( admin_url( 'admin.php?page=um_options' . ( empty( $name ) ? '' : '&tab=' . $name ) ) ) . '\" class=\"nav-tab ' . $active . '\">' .\n\t\t\t\t\t\t         $label .\n\t\t\t\t\t\t         '</a>';\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type filter\n\t\t\t\t\t * @title um_generate_tabs_menu_{$page}\n\t\t\t\t\t * @description Generate tabs menu\n\t\t\t\t\t * @input_vars\n\t\t\t\t\t * [{\"var\":\"$tabs\",\"type\":\"array\",\"desc\":\"UM menu tabs\"}]\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage add_filter( 'um_generate_tabs_menu_{$page}', 'function_name', 10, 1 );\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_filter( 'um_generate_tabs_menu_{$page}', 'my_tabs_menu', 10, 1 );\n\t\t\t\t\t * function my_tabs_menu( $tabs ) {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t *     return $tabs;\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\t$tabs = apply_filters( 'um_generate_tabs_menu_' . $page, $tabs );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn $tabs . '</h2>';\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $tab\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction generate_subtabs_menu( $tab = '' ) {\n\t\t\tif ( empty( $this->settings_structure[ $tab ]['sections'] ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$menu_subtabs = array();\n\t\t\tforeach ( $this->settings_structure[ $tab ]['sections'] as $slug => $subtab ) {\n\t\t\t\t$menu_subtabs[ $slug ] = $subtab['title'];\n\t\t\t}\n\n\t\t\t$subtabs = '<div><ul class=\"subsubsub\">';\n\n\t\t\t$current_tab = empty( $_GET['tab'] ) ? '' : urldecode( $_GET['tab'] );\n\t\t\t$current_subtab = empty( $_GET['section'] ) ? '' : urldecode( $_GET['section'] );\n\t\t\tforeach ( $menu_subtabs as $name => $label ) {\n\t\t\t\t$active = ( $current_subtab == $name ) ? 'current' : '';\n\t\t\t\t$subtabs .= '<a href=\"' . esc_url( admin_url( 'admin.php?page=um_options' . ( empty( $current_tab ) ? '' : '&tab=' . $current_tab ) . ( empty( $name ) ? '' : '&section=' . $name ) ) ) . '\" class=\"' . $active . '\">'\n\t\t\t\t            . $label .\n\t\t\t\t            '</a> | ';\n\t\t\t}\n\n\t\t\treturn substr( $subtabs, 0, -3 ) . '</ul></div>';\n\t\t}\n\n\n\t\t/**\n\t\t * Handler for settings forms\n\t\t * when \"Save Settings\" button click\n\t\t *\n\t\t */\n\t\tfunction save_settings_handler() {\n\n\t\t\tif ( isset( $_POST['um-settings-action'] ) && 'save' == $_POST['um-settings-action'] && ! empty( $_POST['um_options'] ) ) {\n\n\t\t\t\t$nonce = ! empty( $_POST['__umnonce'] ) ? $_POST['__umnonce'] : '';\n\n\t\t\t\tif ( ( ! wp_verify_nonce( $nonce, 'um-settings-nonce' ) || empty( $nonce ) ) || ! current_user_can( 'manage_options' ) ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\twp_die( 'Security Check' );\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_before_save\n\t\t\t\t * @description Before settings save action\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_before_save', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_before_save', 'my_settings_before_save', 10 );\n\t\t\t\t * function my_settings_before_save() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( \"um_settings_before_save\" );\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_change_settings_before_save\n\t\t\t\t * @description Change settings before save\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Settings on save\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_filter( 'um_change_settings_before_save', 'function_name', 10, 1 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_change_settings_before_save', 'my_change_settings_before_save', 10, 1 );\n\t\t\t\t * function my_change_settings_before_save( $settings ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $settings;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$settings = apply_filters( 'um_change_settings_before_save', $_POST['um_options'] );\n\n\t\t\t\tforeach ( $settings as $key => $value ) {\n\t\t\t\t\tUM()->options()->update( $key, $value );\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type action\n\t\t\t\t * @title um_settings_save\n\t\t\t\t * @description After settings save action\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage add_action( 'um_settings_save', 'function_name', 10 );\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_action( 'um_settings_save', 'my_settings_save', 10 );\n\t\t\t\t * function my_settings_save() {\n\t\t\t\t *     // your code here\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\tdo_action( 'um_settings_save' );\n\n\t\t\t\t//redirect after save settings\n\t\t\t\t$arg = array(\n\t\t\t\t\t'page' => 'um_options',\n\t\t\t\t);\n\n\t\t\t\tif ( ! empty( $_GET['tab'] ) ) {\n\t\t\t\t\t$arg['tab'] = $_GET['tab'];\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $_GET['section'] ) ) {\n\t\t\t\t\t$arg['section'] = $_GET['section'];\n\t\t\t\t}\n\n\t\t\t\tum_js_redirect( add_query_arg( $arg, admin_url( 'admin.php' ) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Remove empty values from multi text fields\n\t\t *\n\t\t * @param $settings\n\t\t * @return array\n\t\t */\n\t\tfunction remove_empty_values( $settings ) {\n\t\t\t$tab = '';\n\t\t\tif ( ! empty( $_GET['tab'] ) ) {\n\t\t\t\t$tab = $_GET['tab'];\n\t\t\t}\n\n\t\t\t$section = '';\n\t\t\tif ( ! empty( $_GET['section'] ) ) {\n\t\t\t\t$section = $_GET['section'];\n\t\t\t}\n\n\t\t\tif ( isset( $this->settings_structure[ $tab ]['sections'][ $section ]['fields'] ) ) {\n\t\t\t\t$fields = $this->settings_structure[ $tab ]['sections'][ $section ]['fields'];\n\t\t\t} else {\n\t\t\t\t$fields = $this->settings_structure[ $tab ]['fields'];\n\t\t\t}\n\n\t\t\tif ( empty( $fields ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\n\t\t\t$filtered_settings = array();\n\t\t\tforeach ( $settings as $key => $value ) {\n\n\t\t\t\t$filtered_settings[ $key ] = $value;\n\n\t\t\t\tforeach ( $fields as $field ) {\n\t\t\t\t\tif ( $field['id'] == $key && isset( $field['type'] ) && $field['type'] == 'multi_text' ) {\n\t\t\t\t\t\t$filtered_settings[ $key ] = array_filter( $settings[ $key ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $filtered_settings;\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction check_permalinks_changes() {\n\t\t\tif ( ! empty( $_POST['um_options']['permalink_base'] ) ) {\n\t\t\t\tif ( UM()->options()->get( 'permalink_base' ) != $_POST['um_options']['permalink_base'] ) {\n\t\t\t\t\t$this->need_change_permalinks = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set variable if gravatar settings were changed\n\t\t\t// update for um_member_directory_data metakey\n\t\t\tif ( isset( $_POST['um_options']['use_gravatars'] ) ) {\n\t\t\t\t$use_gravatar = UM()->options()->get( 'use_gravatars' );\n\t\t\t\tif ( ( empty( $use_gravatar ) && ! empty( $_POST['um_options']['use_gravatars'] ) ) || ( ! empty( $use_gravatar ) && empty( $_POST['um_options']['use_gravatars'] ) ) ) {\n\t\t\t\t\t$this->gravatar_changed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction on_settings_save() {\n\t\t\tif ( ! empty( $_POST['um_options'] ) ) {\n\n\t\t\t\tif ( ! empty( $_POST['um_options']['pages_settings'] ) ) {\n\t\t\t\t\t$post_ids = new \\WP_Query( array(\n\t\t\t\t\t\t'post_type' => 'page',\n\t\t\t\t\t\t'meta_query' => array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_core',\n\t\t\t\t\t\t\t\t'compare'   => 'EXISTS'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'posts_per_page' => -1,\n\t\t\t\t\t\t'fields'        => 'ids'\n\t\t\t\t\t) );\n\n\t\t\t\t\t$post_ids = $post_ids->get_posts();\n\n\t\t\t\t\tif ( ! empty( $post_ids ) ) {\n\t\t\t\t\t\tforeach ( $post_ids as $post_id ) {\n\t\t\t\t\t\t\tdelete_post_meta( $post_id, '_um_core' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach ( $_POST['um_options'] as $option_slug => $post_id ) {\n\t\t\t\t\t\t$slug = str_replace( 'core_', '', $option_slug );\n\t\t\t\t\t\tupdate_post_meta( $post_id, '_um_core', $slug );\n\t\t\t\t\t}\n\n\t\t\t\t\t// reset rewrite rules after re-save pages\n\t\t\t\t\tUM()->rewrite()->reset_rules();\n\n\t\t\t\t} elseif ( ! empty( $_POST['um_options']['permalink_base'] ) ) {\n\t\t\t\t\tif ( ! empty( $this->need_change_permalinks ) ) {\n\t\t\t\t\t\t$users = get_users( array(\n\t\t\t\t\t\t\t'fields' => 'ids',\n\t\t\t\t\t\t) );\n\t\t\t\t\t\tif ( ! empty( $users ) ) {\n\t\t\t\t\t\t\tforeach ( $users as $user_id ) {\n\t\t\t\t\t\t\t\tUM()->user()->generate_profile_slug( $user_id );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// update for um_member_directory_data metakey\n\t\t\t\t\tif ( isset( $_POST['um_options']['use_gravatars'] ) ) {\n\t\t\t\t\t\tif ( $this->gravatar_changed ) {\n\t\t\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\t\t\tif ( ! empty( $_POST['um_options']['use_gravatars'] ) ) {\n\n\t\t\t\t\t\t\t\t$results = $wpdb->get_col(\n\t\t\t\t\t\t\t\t\t\"SELECT u.ID FROM {$wpdb->users} AS u \n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um ON ( um.user_id = u.ID AND um.meta_key = 'synced_gravatar_hashed_id' )\n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um2 ON ( um2.user_id = u.ID AND um2.meta_key = 'um_member_directory_data' )\n\t\t\t\t\t\t\t\t\tWHERE um.meta_value != '' AND um.meta_value IS NOT NULL AND\n\t\t\t\t\t\t\t\t\t\tum2.meta_value LIKE '%s:13:\\\"profile_photo\\\";b:0;%'\"\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t$results = $wpdb->get_col(\n\t\t\t\t\t\t\t\t\t\"SELECT u.ID FROM {$wpdb->users} AS u \n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um ON ( um.user_id = u.ID AND ( um.meta_key = 'synced_profile_photo' || um.meta_key = 'profile_photo' ) )\n\t\t\t\t\t\t\t\t\tLEFT JOIN {$wpdb->usermeta} AS um2 ON ( um2.user_id = u.ID AND um2.meta_key = 'um_member_directory_data' )\n\t\t\t\t\t\t\t\t\tWHERE ( um.meta_value IS NULL OR um.meta_value = '' ) AND\n\t\t\t\t\t\t\t\t\t\tum2.meta_value LIKE '%s:13:\\\"profile_photo\\\";b:1;%'\"\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( ! empty( $results ) ) {\n\t\t\t\t\t\t\t\tforeach ( $results as $user_id ) {\n\t\t\t\t\t\t\t\t\t$md_data = get_user_meta( $user_id, 'um_member_directory_data', true );\n\t\t\t\t\t\t\t\t\tif ( ! empty( $md_data ) ) {\n\t\t\t\t\t\t\t\t\t\t$md_data['profile_photo'] = ! empty( $_POST['um_options']['use_gravatars'] );\n\t\t\t\t\t\t\t\t\t\tupdate_user_meta( $user_id, 'um_member_directory_data', $md_data );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} elseif ( isset( $_POST['um_options']['member_directory_own_table'] ) ) {\n\t\t\t\t\tif ( empty( $_POST['um_options']['member_directory_own_table'] ) ) {\n\t\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\t\t$results = $wpdb->get_row( \"SELECT * FROM {$wpdb->prefix}um_metadata LIMIT 1\", ARRAY_A );\n\n\t\t\t\t\t\tif ( ! empty( $results ) ) {\n\t\t\t\t\t\t\t$wpdb->query(\"TRUNCATE TABLE {$wpdb->prefix}um_metadata\" );\n\t\t\t\t\t\t\tupdate_option( 'um_member_directory_truncated', time() );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction before_licenses_save() {\n\t\t\tif ( empty( $_POST['um_options'] ) || empty( $_POST['licenses_settings'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $_POST['um_options'] as $key => $value ) {\n\t\t\t\t$this->previous_licenses[ $key ] = UM()->options()->get( $key );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction licenses_save() {\n\t\t\tif ( empty( $_POST['um_options'] ) || empty( $_POST['licenses_settings'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $_POST['um_options'] as $key => $value ) {\n\t\t\t\t$edd_action = '';\n\t\t\t\t$license_key = '';\n\t\t\t\tif ( empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) || ( ! empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) && $this->previous_licenses[ $key ] != $value ) ) {\n\t\t\t\t\t$edd_action = 'activate_license';\n\t\t\t\t\t$license_key = $value;\n\t\t\t\t} elseif ( ! empty( $this->previous_licenses[ $key ] ) && empty( $value ) ) {\n\t\t\t\t\t$edd_action = 'deactivate_license';\n\t\t\t\t\t$license_key = $this->previous_licenses[ $key ];\n\t\t\t\t} elseif ( ! empty( $this->previous_licenses[ $key ] ) && ! empty( $value ) ) {\n\t\t\t\t\t$edd_action = 'check_license';\n\t\t\t\t\t$license_key = $value;\n\t\t\t\t}\n\n\t\t\t\tif ( empty( $edd_action ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$item_name = false;\n\t\t\t\t$version = false;\n\t\t\t\t$author = false;\n\t\t\t\tforeach ( $this->settings_structure['licenses']['fields'] as $field_data ) {\n\t\t\t\t\tif ( $field_data['id'] == $key ) {\n\t\t\t\t\t\t$item_name = ! empty( $field_data['item_name'] ) ? $field_data['item_name'] : false;\n\t\t\t\t\t\t$version = ! empty( $field_data['version'] ) ? $field_data['version'] : false;\n\t\t\t\t\t\t$author = ! empty( $field_data['author'] ) ? $field_data['author'] : false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$api_params = array(\n\t\t\t\t\t'edd_action' => $edd_action,\n\t\t\t\t\t'license'    => $license_key,\n\t\t\t\t\t'item_name'  => $item_name,\n\t\t\t\t\t'version'    => $version,\n\t\t\t\t\t'author'     => $author,\n\t\t\t\t\t'url'        => home_url(),\n\t\t\t\t);\n\n\t\t\t\t$request = wp_remote_post(\n\t\t\t\t\tUM()->store_url,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'timeout'   => UM()->request_timeout,\n\t\t\t\t\t\t'sslverify' => false,\n\t\t\t\t\t\t'body'      => $api_params\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_wp_error( $request ) ) {\n\t\t\t\t\t$request = json_decode( wp_remote_retrieve_body( $request ) );\n\t\t\t\t}\n\n\t\t\t\t$request = ( $request ) ? maybe_unserialize( $request ) : false;\n\n\t\t\t\tif ( $edd_action == 'activate_license' || $edd_action == 'check_license' ) {\n\t\t\t\t\tupdate_option( \"{$key}_edd_answer\", $request );\n\t\t\t\t} else {\n\t\t\t\t\tdelete_option( \"{$key}_edd_answer\" );\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction settings_before_email_tab() {\n\t\t\t$email_key = empty( $_GET['email'] ) ? '' : urldecode( $_GET['email'] );\n\t\t\t$emails = UM()->config()->email_notifications;\n\n\t\t\tif ( empty( $email_key ) || empty( $emails[ $email_key ] ) ) {\n\t\t\t\tinclude_once um_path . 'includes/admin/core/list-tables/emails-list-table.php';\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param $section\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction settings_email_tab( $section ) {\n\t\t\t$email_key = empty( $_GET['email'] ) ? '' : urldecode( $_GET['email'] );\n\t\t\t$emails = UM()->config()->email_notifications;\n\n\t\t\tif ( empty( $email_key ) || empty( $emails[ $email_key ] ) ) {\n\t\t\t\treturn $section;\n\t\t\t}\n\n\t\t\t$in_theme = UM()->mail()->template_in_theme( $email_key );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_admin_settings_email_section_fields\n\t\t\t * @description Extend UM Email Settings\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"UM Email Settings\"},\n\t\t\t * {\"var\":\"$email_key\",\"type\":\"string\",\"desc\":\"Email Key\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_admin_settings_email_section_fields', 'function_name', 10, 2 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_admin_settings_email_section_fields', 'my_admin_settings_email_section', 10, 2 );\n\t\t\t * function my_admin_settings_email_section( $settings, $email_key ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$section_fields = apply_filters( 'um_admin_settings_email_section_fields', array(\n\t\t\t\tarray(\n\t\t\t\t\t'id'    => 'um_email_template',\n\t\t\t\t\t'type'  => 'hidden',\n\t\t\t\t\t'value' => $email_key,\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'        => $email_key . '_on',\n\t\t\t\t\t'type'      => 'checkbox',\n\t\t\t\t\t'label'     => $emails[ $email_key ]['title'],\n\t\t\t\t\t'tooltip'   => $emails[ $email_key ]['description'],\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => $email_key . '_sub',\n\t\t\t\t\t'type'          => 'text',\n\t\t\t\t\t'label'         => __( 'Subject Line', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( $email_key . '_on', '=', 1 ),\n\t\t\t\t\t'tooltip'       => __( 'This is the subject line of the e-mail', 'ultimate-member' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'id'            => $email_key,\n\t\t\t\t\t'type'          => 'email_template',\n\t\t\t\t\t'label'         => __( 'Message Body', 'ultimate-member' ),\n\t\t\t\t\t'conditional'   => array( $email_key . '_on', '=', 1 ),\n\t\t\t\t\t'tooltip'       => __( 'This is the content of the e-mail', 'ultimate-member' ),\n\t\t\t\t\t'value'         => UM()->mail()->get_email_template( $email_key ),\n\t\t\t\t\t'in_theme'      => $in_theme\n\t\t\t\t),\n\t\t\t), $email_key );\n\n\t\t\treturn $this->render_settings_section( $section_fields, 'email', $email_key );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction settings_appearance_profile_tab() {\n\t\t\twp_enqueue_media();\n\t\t}\n\n\n\t\t/**\n\t\t * @param $html\n\t\t * @param $section_fields\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction settings_licenses_tab( $html, $section_fields ) {\n\t\t\tob_start(); ?>\n\n\t\t\t<div class=\"wrap-licenses\">\n\t\t\t\t<input type=\"hidden\" id=\"licenses_settings\" name=\"licenses_settings\" value=\"1\">\n\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t<table class=\"form-table um-settings-section\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t<?php foreach ( $section_fields as $field_data ) {\n\t\t\t\t\t\t$option_value = UM()->options()->get( $field_data['id'] );\n\t\t\t\t\t\t$value = isset( $option_value ) && ! empty( $option_value ) ? $option_value : ( isset( $field_data['default'] ) ? $field_data['default'] : '' );\n\n\t\t\t\t\t\t$license = get_option( \"{$field_data['id']}_edd_answer\" );\n\n\t\t\t\t\t\tif ( is_object( $license ) && ! empty( $value ) ) {\n\t\t\t\t\t\t\t// activate_license 'invalid' on anything other than valid, so if there was an error capture it\n\t\t\t\t\t\t\tif ( empty( $license->success ) ) {\n\n\t\t\t\t\t\t\t\tif ( ! empty( $license->error ) ) {\n\t\t\t\t\t\t\t\t\tswitch ( $license->error ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'expired' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'expired';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expired on %s. Please <a href=\"%s\" target=\"_blank\">renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=expired'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'revoked' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key has been disabled. Please <a href=\"%s\" target=\"_blank\">contact support</a> for more information.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/support?utm_campaign=admin&utm_source=licenses&utm_medium=revoked'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'missing' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Invalid license. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> and verify it.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=missing'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'invalid' :\n\t\t\t\t\t\t\t\t\t\tcase 'site_inactive' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your %s is not active for this URL. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> to manage your license key URLs.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\t$field_data['item_name'],\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=invalid'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'item_name_mismatch' :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'This appears to be an invalid license key for %s.', 'ultimate-member' ), $field_data['item_name'] );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'no_activations_left':\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'Your license key has reached its activation limit. <a href=\"%s\">View possible upgrades</a> now.', 'ultimate-member' ), 'https://ultimatemember.com/account' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'license_not_activable':\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'The key you entered belongs to a bundle, please use the product specific license key.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault :\n\n\t\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t\t$error = ! empty(  $license->error ) ? $license->error : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t$error = ! empty( $license->error ) ? $license->error : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} elseif ( ! empty( $license->errors ) ) {\n\n\t\t\t\t\t\t\t\t$errors = array_keys( $license->errors );\n\t\t\t\t\t\t\t\t$errors_data = array_values( $license->errors );\n\n\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t$error = ! empty( $errors[0] ) ? $errors[0] : __( 'unknown_error', 'ultimate-member' );\n\t\t\t\t\t\t\t\t$errors_data = ! empty( $errors_data[0][0] ) ? ', ' . $errors_data[0][0] : '';\n\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'There was an error with this license key: %s%s. Please <a href=\"%s\">contact our support team</a>.', 'ultimate-member' ), $error, $errors_data, 'https://ultimatemember.com/support' );\n\n\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tswitch( $license->license ) {\n\n\t\t\t\t\t\t\t\t\tcase 'expired' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'expired';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expired on %s. Please <a href=\"%s\" target=\"_blank\">renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=expired'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'revoked' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key has been disabled. Please <a href=\"%s\" target=\"_blank\">contact support</a> for more information.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/support?utm_campaign=admin&utm_source=licenses&utm_medium=revoked'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'missing' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Invalid license. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> and verify it.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=missing'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'invalid' :\n\t\t\t\t\t\t\t\t\tcase 'site_inactive' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t__( 'Your %s is not active for this URL. Please <a href=\"%s\" target=\"_blank\">visit your account page</a> to manage your license key URLs.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t$field_data['item_name'],\n\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/account?utm_campaign=admin&utm_source=licenses&utm_medium=invalid'\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'item_name_mismatch' :\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'This appears to be an invalid license key for %s.', 'ultimate-member' ), $field_data['item_name'] );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'no_activations_left':\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf( __( 'Your license key has reached its activation limit. <a href=\"%s\">View possible upgrades</a> now.', 'ultimate-member' ), 'https://ultimatemember.com/account' );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'license_not_activable':\n\n\t\t\t\t\t\t\t\t\t\t$class = 'error';\n\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'The key you entered belongs to a bundle, please use the product specific license key.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t$license_status = 'license-' . $class . '-notice';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'valid' :\n\t\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t\t$class = 'valid';\n\n\t\t\t\t\t\t\t\t\t\t$now        = current_time( 'timestamp' );\n\t\t\t\t\t\t\t\t\t\t$expiration = strtotime( $license->expires, $now );\n\n\t\t\t\t\t\t\t\t\t\tif( 'lifetime' === $license->expires ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = __( 'License key never expires.', 'ultimate-member' );\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-lifetime-notice';\n\n\t\t\t\t\t\t\t\t\t\t} elseif( $expiration > $now && $expiration - $now < ( DAY_IN_SECONDS * 30 ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expires soon! It expires on %s. <a href=\"%s\" target=\"_blank\">Renew your license key</a>.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'https://ultimatemember.com/checkout/?edd_license_key=' . $value . '&utm_campaign=admin&utm_source=licenses&utm_medium=renew'\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-expires-soon-notice';\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t\t\t\t\t__( 'Your license key expires on %s.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\t\t\tdate_i18n( get_option( 'date_format' ), strtotime( $license->expires, current_time( 'timestamp' ) ) )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t$license_status = 'license-expiration-date-notice';\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$class = 'empty';\n\n\t\t\t\t\t\t\t$messages[] = sprintf(\n\t\t\t\t\t\t\t\t__( 'To receive updates, please enter your valid %s license key.', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t$field_data['item_name']\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$license_status = null;\n\n\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t\t<tr class=\"um-settings-line\">\n\t\t\t\t\t\t\t<th><label for=\"um_options_<?php echo esc_attr( $field_data['id'] ) ?>\"><?php echo esc_html( $field_data['label'] ) ?></label></th>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<form method=\"post\" action=\"\" name=\"um-settings-form\" class=\"um-settings-form\">\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" value=\"save\" name=\"um-settings-action\" />\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"licenses_settings\" value=\"1\" />\n\t\t\t\t\t\t\t\t\t<?php $um_settings_nonce = wp_create_nonce( 'um-settings-nonce' ); ?>\n\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"__umnonce\" value=\"<?php echo esc_attr( $um_settings_nonce ); ?>\" />\n\t\t\t\t\t\t\t\t\t<input type=\"text\" id=\"um_options_<?php echo esc_attr( $field_data['id'] ) ?>\" name=\"um_options[<?php echo esc_attr( $field_data['id'] ) ?>]\" value=\"<?php echo $value ?>\" class=\"um-option-field um-long-field\" data-field_id=\"<?php echo esc_attr( $field_data['id'] ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php if ( ! empty( $field_data['description'] ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<div class=\"description\"><?php echo $field_data['description'] ?></div>\n\t\t\t\t\t\t\t\t\t<?php } ?>\n\n\t\t\t\t\t\t\t\t\t<?php if ( ! empty( $value ) && ( ( is_object( $license ) && 'valid' == $license->license ) || 'valid' == $license ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"button\" class=\"button um_license_deactivate\" id=\"<?php echo esc_attr( $field_data['id'] ) ?>_deactivate\" value=\"<?php esc_attr_e( 'Clear License',  'ultimate-member' ) ?>\"/>\n\t\t\t\t\t\t\t\t\t<?php } elseif ( empty( $value ) ) { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Activate', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php } else { ?>\n\t\t\t\t\t\t\t\t\t\t<input type=\"submit\" name=\"submit\" id=\"submit\" class=\"button button-primary\" value=\"<?php esc_attr_e( 'Re-Activate', 'ultimate-member' ) ?>\" />\n\t\t\t\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\t\t\t\tif ( ! empty( $messages ) ) {\n\t\t\t\t\t\t\t\t\t\tforeach ( $messages as $message ) { ?>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"edd-license-data edd-license-<?php echo esc_attr( $class . ' ' . $license_status ) ?>\">\n\t\t\t\t\t\t\t\t\t\t\t\t<p><?php echo $message ?></p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t\t\t\t} ?>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<?php $section = ob_get_clean();\n\n\t\t\treturn $section;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $html\n\t\t * @param $section_fields\n\t\t */\n\t\tfunction settings_install_info_tab( $html, $section_fields ) {\n\t\t\tglobal $wpdb;\n\n\t\t\tif ( ! class_exists( '\\Browser' ) )\n\t\t\t\trequire_once um_path . 'includes/lib/browser.php';\n\n\t\t\t// Detect browser\n\t\t\t$browser = new \\Browser();\n\n\t\t\t// Get theme info\n\t\t\t$theme_data = wp_get_theme();\n\t\t\t$theme      = $theme_data->Name . ' ' . $theme_data->Version;\n\n\t\t\t// Identify Hosting Provider\n\t\t\t$host = um_get_host();\n\n\t\t\tum_fetch_user( get_current_user_id() );\n\n\t\t\tif ( isset( $this->content ) ) {\n\t\t\t\techo $this->content;\n\t\t\t} else { ?>\n\n\t\t\t\t<h3>Install Info</h3>\n\n\t\t\t\t<form action=\"\" method=\"post\" dir=\"ltr\">\n\t\t\t\t\t<textarea style=\"width:70%; height:400px;\" readonly=\"readonly\" onclick=\"this.focus();this.select()\" id=\"install-info-textarea\" name=\"um-install-info\" title=\"<?php _e( 'To copy the Install info, click below then press Ctrl + C (PC) or Cmd + C (Mac).', 'ultimate-member' ); ?>\">\n### Begin Install Info ###\n\n## Please include this information when posting support requests ##\n\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_before\n * @description Before install info settings\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_before', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_before', 'my_install_info_before', 10 );\n * function my_install_info_before() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( 'um_install_info_before' ); ?>\n\n--- Site Info ---\n\nSite URL:\t\t\t\t\t<?php echo site_url() . \"\\n\"; ?>\nHome URL:\t\t\t\t\t<?php echo home_url() . \"\\n\"; ?>\nMultisite:\t\t\t\t\t<?php echo is_multisite() ? 'Yes' . \"\\n\" : 'No' . \"\\n\" ?>\n\n--- Hosting Provider ---\n\n<?php if( $host ) : ?>\nHost:\t\t\t\t\t\t<?php echo $host . \"\\n\"; ?>\n<?php endif; ?>\n\n--- User Browser ---\n\n<?php echo $browser ; ?>\n\n---- Current User Details --\n\n<?php $user = wp_get_current_user(); ?>\nRole: <?php echo implode( ', ', um_user( 'roles' ) ). \"\\n\"; ?>\n\n\n--- WordPress Configurations ---\n\nVersion:\t\t\t\t\t\t<?php echo get_bloginfo( 'version' ) . \"\\n\"; ?>\nLanguage:\t\t\t\t\t<?php echo get_locale().\"\\n\"; ?>\nPermalink Structure:\t\t\t<?php echo get_option( 'permalink_structure' ) . \"\\n\"; ?>\nActive Theme:\t\t\t\t<?php echo $theme . \"\\n\"; ?>\n<?php $show_on_front = get_option( 'show_on_front' ); ?>\n<?php if( $show_on_front == \"posts\" ): ?>\nShow On Front:\t\t\t\t<?php echo get_option( 'show_on_front' ) . \"/static\\n\" ?>\n<?php elseif( $show_on_front == \"page\" ): ?>\nPage On Front:\t\t\t\t<?php $id = get_option( 'page_on_front' ); echo get_the_title( $id ) . ' (#' . $id . ')' . \"\\n\" ?>\nPage For Posts:\t\t\t\t<?php $id = get_option( 'page_for_posts' ); echo get_the_title( $id ) . ' (#' . $id . ')' . \"\\n\" ?>\n<?php endif; ?>\nABSPATH:\t\t\t\t\t<?php echo ABSPATH.\"\\n\"; ?>\n<?php $wp_count_posts = wp_count_posts(); ?>\nAll Posts/Pages:\t\t\t\t<?php echo array_sum((array)$wp_count_posts).\"\\n\";?>\n<?php\n$request['cmd'] = '_notify-validate';\n\n$params = array(\n'sslverify'\t\t=> false,\n'timeout'\t\t=> 60,\n'user-agent'\t=> 'UltimateMember/' . ultimatemember_version,\n'body'\t\t\t=> $request\n);\n\n$response = wp_remote_post( 'https://www.paypal.com/cgi-bin/webscr', $params );\n\nif ( ! is_wp_error( $response ) && $response['response']['code'] >= 200 && $response['response']['code'] < 300 ) {\n$WP_REMOTE_POST =  'wp_remote_post() works' . \"\\n\";\n} else {\n$WP_REMOTE_POST =  'wp_remote_post() does not work' . \"\\n\";\n}\n?>\nWP Remote Post:           \t\t<?php echo $WP_REMOTE_POST; ?>\nWP_DEBUG:                 \t\t\t<?php echo defined( 'WP_DEBUG' ) ? WP_DEBUG ? 'Enabled' . \"\\n\" : 'Disabled' . \"\\n\" : 'Not set' . \"\\n\" ?>\nWP Table Prefix:          \t\t\t<?php echo \"Length: \". strlen( $wpdb->prefix ); echo \", Status:\"; if ( strlen( $wpdb->prefix )>16 ) {echo \" ERROR: Too Long\";} else {echo \" Acceptable\";} echo \"\\n\"; ?>\nMemory Limit:   \t\t\t\t<?php echo ( um_let_to_num( WP_MEMORY_LIMIT )/( 1024 ) ).\"MB\"; ?><?php echo \"\\n\"; ?>\n\n\n--- UM Configurations ---\n\nVersion:\t\t\t\t\t\t<?php echo ultimatemember_version . \"\\n\"; ?>\nUpgraded From:            \t\t<?php echo get_option( 'um_last_version_upgrade', 'None' ) . \"\\n\"; ?>\nCurrent URL Method:\t\t\t<?php echo UM()->options()->get( 'current_url_method' ). \"\\n\"; ?>\nCache User Profile:\t\t\t<?php if( UM()->options()->get( 'um_profile_object_cache_stop' ) == 1 ){ echo \"No\"; }else{ echo \"Yes\"; } echo \"\\n\"; ?>\nGenerate Slugs on Directories:\t<?php if( UM()->options()->get( 'um_generate_slug_in_directory' ) == 1 ){ echo \"No\"; }else{ echo \"Yes\"; } echo \"\\n\"; ?>\nForce UTF-8 Encoding: \t\t<?php if( UM()->options()->get( 'um_force_utf8_strings' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\nJS/CSS Compression: \t\t\t<?php if ( defined('SCRIPT_DEBUG' ) && SCRIPT_DEBUG ) { echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\n<?php if( is_multisite() ): ?>\n    Network Structure:\t\t\t<?php echo UM()->options()->get( 'network_permalink_structure' ). \"\\n\"; ?>\n<?php endif; ?>\nPort Forwarding in URL: \t\t<?php if( UM()->options()->get( 'um_port_forwarding_url' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\nExclude CSS/JS on Home: \t\t<?php if( UM()->options()->get( 'js_css_exlcude_home' ) == 1 ){ echo \"Yes\"; }else{ echo \"No\"; } echo \"\\n\"; ?>\n\n\n--- UM Pages Configuration ---\n\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_before_page_config\n * @description Before page config install info\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_before_page_config', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_before_page_config', 'my_install_info_before_page_config', 10 );\n * function my_install_info_before_page_config() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( \"um_install_info_before_page_config\" ); ?>\nUser:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_user') ) . \"\\n\"; ?>\nAccount:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_account') ) . \"\\n\"; ?>\nMembers:\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_members') ) . \"\\n\"; ?>\nRegister:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_register') ) . \"\\n\"; ?>\nLogin:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_login') ) . \"\\n\"; ?>\nLogout:\t\t\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_logout') ) . \"\\n\"; ?>\nPassword Reset:\t\t\t\t<?php echo get_permalink( UM()->options()->get('core_password-reset') ) . \"\\n\"; ?>\n<?php\n/**\n * UM hook\n *\n * @type action\n * @title um_install_info_after_page_config\n * @description After page config install info\n * @change_log\n * [\"Since: 2.0\"]\n * @usage add_action( 'um_install_info_after_page_config', 'function_name', 10 );\n * @example\n * <?php\n * add_action( 'um_install_info_after_page_config', 'my_install_info_after_page_config', 10 );\n * function my_install_info_after_page_config() {\n *     // your code here\n * }\n * ?>\n */\ndo_action( \"um_install_info_after_page_config\" ); ?>\n\n\n--- UM Users Configuration ---\n\nDefault New User Role: \t\t<?php  echo UM()->options()->get('register_role') . \"\\n\"; ?>\nProfile Permalink Base:\t\t<?php  echo UM()->options()->get('permalink_base') . \"\\n\"; ?>\nUser Display Name:\t\t\t<?php  echo UM()->options()->get('display_name') . \"\\n\"; ?>\nForce Name to Uppercase:\t\t<?php echo $this->info_value( UM()->options()->get('force_display_name_capitlized'), 'yesno', true ); ?>\nRedirect author to profile: \t\t<?php echo $this->info_value( UM()->options()->get('author_redirect'), 'yesno', true ); ?>\nEnable Members Directory:\t<?php echo $this->info_value( UM()->options()->get('members_page'), 'yesno', true ); ?>\nUse Gravatars: \t\t\t\t<?php echo $this->info_value( UM()->options()->get('use_gravatars'), 'yesno', true ); ?>\n<?php if( UM()->options()->get('use_gravatars') ): ?>Gravatar builtin image:\t\t<?php  echo UM()->options()->get('use_um_gravatar_default_builtin_image') . \"\\n\"; ?>\n    UM Avatar as blank Gravatar: \t<?php echo $this->info_value( UM()->options()->get('use_um_gravatar_default_image'), 'yesno', true ); ?><?php endif; ?>\nRequire a strong password: \t<?php echo $this->info_value( UM()->options()->get('reset_require_strongpass'), 'onoff', true ); ?>\n\n\n--- UM Access Configuration ---\n\nPanic Key: \t\t\t\t\t\t\t\t<?php  echo UM()->options()->get('panic_key') . \"\\n\"; ?>\nGlobal Site Access:\t\t\t\t\t\t<?php  $arr = array('Site accessible to Everyone','','Site accessible to Logged In Users'); echo $arr[ intval( UM()->options()->get('accessible') ) ] . \"\\n\"; ?>\n<?php if( UM()->options()->get('accessible') == 2 ) { ?>\nCustom Redirect URL:\t\t\t\t\t\t<?php echo UM()->options()->get('access_redirect').\"\\n\";?>\nExclude the following URLs:<?php echo \"\\t\\t\\t\\t\".implode(\"\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\",UM()->options()->get('access_exclude_uris') ).\"\\n\";?>\n<?php } ?>\nBackend Login Screen for Guests:\t\t\t<?php echo $this->info_value( UM()->options()->get('wpadmin_login'), 'yesno', true ); ?>\n<?php if( ! UM()->options()->get('wpadmin_login') ) { ?>\nRedirect to alternative login page:\t\t\t<?php if( UM()->options()->get('wpadmin_login_redirect') == 'um_login_page' ){ echo um_get_core_page('login').\"\\n\"; }else{ echo UM()->options()->get('wpadmin_login_redirect_url').\"\\n\"; }?>\n<?php } ?>\nBackend Register Screen for Guests:\t\t<?php echo $this->info_value( UM()->options()->get('wpadmin_register'), 'yesno', true ); ?>\n<?php if( ! UM()->options()->get('wpadmin_register') ) { ?>\nRedirect to alternative register page:\t\t<?php if( UM()->options()->get('wpadmin_register_redirect') == 'um_register_page' ){ echo um_get_core_page('register').\"\\n\"; }else{ echo UM()->options()->get('wpadmin_register_redirect_url').\"\\n\"; }?>\n<?php } ?>\nAccess Control widget for Admins only: \t\t<?php echo $this->info_value( UM()->options()->get('access_widget_admin_only'), 'yesno', true ); ?>\nEnable the Reset Password Limit:\t\t\t<?php echo $this->info_value( UM()->options()->get('enable_reset_password_limit'), 'yesno', true ); ?>\n<?php if( UM()->options()->get('enable_reset_password_limit') ) { ?>\nReset Password Limit: <?php echo UM()->options()->get('reset_password_limit_number') ?>\nDisable Reset Password Limit for Admins: <?php echo $this->info_value( UM()->options()->get('disable_admin_reset_password_limit'), 'yesno', true ) ?>\n<?php } ?>\n<?php $wpadmin_allow_ips = UM()->options()->get( 'wpadmin_allow_ips' ); if( ! empty( $wpadmin_allow_ips ) ) { ?>\nWhitelisted Backend IPs: \t\t\t\t\t<?php echo count( explode(\"\\n\",trim(UM()->options()->get('wpadmin_allow_ips') ) ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_ips = UM()->options()->get('blocked_ips'); if( ! empty( $blocked_ips ) ){ ?>\nBlocked IP Addresses: \t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_ips') ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_emails = UM()->options()->get('blocked_emails'); if( ! empty( $blocked_emails ) ){ ?>\nBlocked Email Addresses: \t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_emails') ) ).\"\\n\"; ?>\n<?php } ?>\n<?php $blocked_words =  UM()->options()->get('blocked_words'); if( ! empty( $blocked_words ) ){ ?>\nBlacklist Words: \t\t\t\t\t\t\t<?php echo  count( explode(\"\\n\",UM()->options()->get('blocked_words') ) ).\"\\n\"; ?>\n<?php } ?>\n\n\n--- UM Email Configurations ---\n\nMail appears from:  \t\t\t<?php $mail_from = UM()->options()->get('mail_from'); if( ! empty( $mail_from ) ){echo UM()->options()->get('mail_from');}else{echo \"-\";}; echo \"\\n\";?>\nMail appears from address:  \t<?php $mail_from_addr = UM()->options()->get('mail_from_addr'); if( ! empty( $mail_from_addr ) ){echo UM()->options()->get('mail_from_addr');}else{echo \"-\";}; echo \"\\n\";?>\nUse HTML for E-mails:   \t\t<?php echo $this->info_value( UM()->options()->get('email_html'), 'yesno', true ); ?>\nAccount Welcome Email:  \t\t<?php echo $this->info_value( UM()->options()->get('welcome_email_on'), 'yesno', true ); ?>\nAccount Activation Email:   \t<?php echo $this->info_value( UM()->options()->get('checkmail_email_on'), 'yesno', true ); ?>\nPending Review Email:   \t\t<?php echo $this->info_value( UM()->options()->get('pending_email_on'), 'yesno', true ); ?>\nAccount Approved Email: \t\t<?php echo $this->info_value( UM()->options()->get('approved_email_on'), 'yesno', true ); ?>\nAccount Rejected Email: \t\t<?php echo $this->info_value( UM()->options()->get('rejected_email_on'), 'yesno', true ); ?>\nAccount Deactivated Email:  \t<?php echo $this->info_value( UM()->options()->get('inactive_email_on'), 'yesno', true ); ?>\nAccount Deleted Email:  \t\t<?php echo $this->info_value( UM()->options()->get('deletion_email_on'), 'yesno', true ); ?>\nPassword Reset Email:   \t\t<?php echo $this->info_value( UM()->options()->get('resetpw_email_on'), 'yesno', true ); ?>\nPassword Changed Email: \t\t<?php echo $this->info_value( UM()->options()->get('changedpw_email_on'), 'yesno', true ); ?>\n\n\n--- UM Total Users ---\n\n                <?php $result = count_users();\n                echo 'All Users('.$result['total_users'].\")\\n\";\n                foreach( $result['avail_roles'] as $role => $count ) {\n                    echo $role.\"(\".$count.\")\\n\";\n                } ?>\n\n\n--- UM Roles ---\n\n                <?php foreach( UM()->roles()->get_roles() as $role_id => $role ) {\n                    echo $role.\" ({$role_id})\\n\";\n                } ?>\n\n\n--- UM Custom Templates ---\n\n                <?php // Show templates that have been copied to the theme's edd_templates dir\n                $dir = get_stylesheet_directory() . '/ultimate-member/templates/*.php';\n                if ( ! empty( $dir ) ) {\n                    $found = glob( $dir );\n                    if ( ! empty( $found ) ) {\n                        foreach ( glob( $dir ) as $file ) {\n                            echo \"File: \" . $file  . \"\\n\";\n                        }\n                    } else {\n                        echo 'N/A'.\"\\n\";\n                    }\n                } ?>\n\n\n--- UM Email HTML Templates ---\n\n                <?php $dir = get_stylesheet_directory() . '/ultimate-member/templates/emails/*.html';\n\n                if ( ! empty( $dir ) ) {\n                    $found =  glob( $dir );\n                    if ( ! empty( $found ) ){\n                        foreach ( glob( $dir ) as $file ) {\n                            echo \"File: \". $file  . \"\\n\";\n                        }\n                    } else {\n                        echo 'N/A'.\"\\n\";\n                    }\n                } ?>\n\n\n--- Web Server Configurations ---\n\nPHP Version:              \t\t\t<?php echo PHP_VERSION . \"\\n\"; ?>\nMySQL Version:            \t\t\t<?php echo $wpdb->db_version() . \"\\n\"; ?>\nWeb Server Info:          \t\t\t<?php echo $_SERVER['SERVER_SOFTWARE'] . \"\\n\"; ?>\n\n\n--- PHP Configurations ---\n\nPHP Memory Limit:         \t\t\t<?php echo ini_get( 'memory_limit' ) . \"\\n\"; ?>\nPHP Upload Max Size:      \t\t\t<?php echo ini_get( 'upload_max_filesize' ) . \"\\n\"; ?>\nPHP Post Max Size:        \t\t\t<?php echo ini_get( 'post_max_size' ) . \"\\n\"; ?>\nPHP Upload Max Filesize:  \t\t\t<?php echo ini_get( 'upload_max_filesize' ) . \"\\n\"; ?>\nPHP Time Limit:           \t\t\t<?php echo ini_get( 'max_execution_time' ) . \"\\n\"; ?>\nPHP Max Input Vars:       \t\t\t<?php echo ini_get( 'max_input_vars' ) . \"\\n\"; ?>\nPHP Arg Separator:        \t\t\t<?php echo ini_get( 'arg_separator.output' ) . \"\\n\"; ?>\nPHP Allow URL File Open:  \t\t\t<?php echo ini_get( 'allow_url_fopen' ) ? \"Yes\\n\" : \"No\\n\"; ?>\n\n\n--- Web Server Extensions/Modules ---\n\nDISPLAY ERRORS:           \t\t\t<?php echo ( ini_get( 'display_errors' ) ) ? 'On (' . ini_get( 'display_errors' ) . ')' : 'N/A'; ?><?php echo \"\\n\"; ?>\nFSOCKOPEN:                \t\t\t<?php echo ( function_exists( 'fsockopen' ) ) ? 'Your server supports fsockopen.' : 'Your server does not support fsockopen.'; ?><?php echo \"\\n\"; ?>\ncURL:                     \t\t\t<?php echo ( function_exists( 'curl_init' ) ) ? 'Your server supports cURL.' : 'Your server does not support cURL.'; ?><?php echo \"\\n\"; ?>\nSOAP Client:              \t\t\t<?php echo ( class_exists( 'SoapClient' ) ) ? 'Your server has the SOAP Client enabled.' : 'Your server does not have the SOAP Client enabled.'; ?><?php echo \"\\n\"; ?>\nSUHOSIN:                  \t\t\t<?php echo ( extension_loaded( 'suhosin' ) ) ? 'Your server has SUHOSIN installed.' : 'Your server does not have SUHOSIN installed.'; ?><?php echo \"\\n\"; ?>\nGD Library:               \t\t\t<?php echo ( extension_loaded( 'gd' ) && function_exists('gd_info') ) ? 'PHP GD library is installed on your web server.' : 'PHP GD library is NOT installed on your web server.'; ?><?php echo \"\\n\"; ?>\nMail:                     \t\t\t<?php echo ( function_exists('mail') ) ? 'PHP mail function exist on your web server.' : 'PHP mail function doesn\\'t exist on your web server.'; ?><?php echo \"\\n\"; ?>\nExif:\t\t\t\t          <?php echo ( extension_loaded( 'exif' ) && function_exists('exif_imagetype') ) ? 'PHP Exif library is installed on your web server.' : 'PHP Exif library is NOT installed on your web server.'; ?><?php echo \"\\n\"; ?>\n\n\n--- Session Configurations ---\n\nSession:                  \t\t\t<?php echo isset( $_SESSION ) ? 'Enabled' : 'Disabled'; ?><?php echo \"\\n\"; ?>\nSession Name:             \t\t\t<?php echo esc_html( ini_get( 'session.name' ) ); ?><?php echo \"\\n\"; ?>\nCookie Path:              \t\t\t<?php echo esc_html( ini_get( 'session.cookie_path' ) ); ?><?php echo \"\\n\"; ?>\nSave Path:                \t\t\t<?php echo esc_html( ini_get( 'session.save_path' ) ); ?><?php echo \"\\n\"; ?>\nUse Cookies:              \t\t\t<?php echo ini_get( 'session.use_cookies' ) ? 'On' : 'Off'; ?><?php echo \"\\n\"; ?>\nUse Only Cookies:         \t\t\t<?php echo ini_get( 'session.use_only_cookies' ) ? 'On' : 'Off'; ?><?php echo \"\\n\"; ?>\n\n\n--- WordPress Active Plugins ---\n\n                <?php $plugins = get_plugins();\n                $active_plugins = get_option( 'active_plugins', array() );\n\n                foreach ( $plugins as $plugin_path => $plugin ) {\n                    // If the plugin isn't active, don't show it.\n                    if ( ! in_array( $plugin_path, $active_plugins ) )\n                        continue;\n\n                    echo $plugin['Name'] . ': ' . $plugin['Version'] .\"\\n\";\n                }\n\n                if ( is_multisite() ) { ?>\n\n--- WordPress Network Active Plugins ---\n\n                    <?php $plugins = wp_get_active_network_plugins();\n                    $active_plugins = get_site_option( 'active_sitewide_plugins', array() );\n\n                    foreach ( $plugins as $plugin_path ) {\n                        $plugin_base = plugin_basename( $plugin_path );\n\n                        // If the plugin isn't active, don't show it.\n                        if ( ! array_key_exists( $plugin_base, $active_plugins ) )\n                            continue;\n\n                        $plugin = get_plugin_data( $plugin_path );\n\n                        echo $plugin['Name'] . ' :' . $plugin['Version'] . \"\\n\";\n                    }\n\n                }\n\n                /**\n                 * UM hook\n                 *\n                 * @type action\n                 * @title um_install_info_after\n                 * @description After install info\n                 * @change_log\n                 * [\"Since: 2.0\"]\n                 * @usage add_action( 'um_install_info_after', 'function_name', 10 );\n                 * @example\n                 * <?php\n                 * add_action( 'um_install_info_after', 'my_install_info_after', 10 );\n                 * function my_install_info_after() {\n                 *     // your code here\n                 * }\n                 * ?>\n                 */\n                do_action( 'um_install_info_after' ); ?>\n\n### End Install Info ###\n                    </textarea>\n                    <p class=\"submit\">\n                        <input type=\"hidden\" name=\"um-addon-hook\" value=\"download_install_info\" />\n                        <?php submit_button( 'Download Install Info File', 'primary', 'download_install_info', false ); ?>\n                    </p>\n                </form>\n\n            <?php }\n        }\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction um_download_install_info() {\n\n\t\t\tif ( ! empty( $_POST['download_install_info'] ) ) {\n\t\t\t\tnocache_headers();\n\n\t\t\t\theader( \"Content-type: text/plain\" );\n\t\t\t\theader( 'Content-Disposition: attachment; filename=\"ultimatemember-install-info.txt\"' );\n\n\t\t\t\techo wp_strip_all_tags( $_POST['um-install-info'] );\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $raw_value\n\t\t * @param string $type\n\t\t * @param string $default\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction info_value( $raw_value = '', $type = 'yesno', $default = '' ) {\n\n\t\t\tif ( $type == 'yesno' ) {\n\t\t\t\t$raw_value = ( $default == $raw_value ) ? \"Yes\" : \"No\";\n\t\t\t} elseif( $type == 'onoff' ) {\n\t\t\t\t$raw_value = ( $default == $raw_value ) ? \"On\" : \"Off\";\n\t\t\t}\n\n\t\t\treturn $raw_value.\"\\n\";\n\t\t}\n\n\n\t\t/**\n\t\t * Render settings section\n\t\t *\n\t\t * @param $section_fields\n\t\t * @return string\n\t\t */\n\t\tfunction render_settings_section( $section_fields, $current_tab, $current_subtab ) {\n\t\t\tob_start();\n\n\t\t\tUM()->admin_forms_settings( array(\n\t\t\t\t'class'     => 'um_options-' . $current_tab . '-' . $current_subtab . ' um-third-column',\n\t\t\t\t'prefix_id' => 'um_options',\n\t\t\t\t'fields'    => $section_fields\n\t\t\t) )->render_form(); ?>\n\n\t\t\t<?php $section = ob_get_clean();\n\n\t\t\treturn $section;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $settings\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction save_email_templates( $settings ) {\n\n\t\t\tif ( empty( $settings['um_email_template'] ) ) {\n\t\t\t\treturn $settings;\n\t\t\t}\n\n\t\t\t$template = $settings['um_email_template'];\n\t\t\t$content = stripslashes( $settings[ $template ] );\n\n\t\t\t$theme_template_path = UM()->mail()->get_template_file( 'theme', $template );\n\n\t\t\tif ( ! file_exists( $theme_template_path ) ) {\n\t\t\t\tUM()->mail()->copy_email_template( $template );\n\t\t\t}\n\n\t\t\t$fp = fopen( $theme_template_path, \"w\" );\n\t\t\t$result = fputs( $fp, $content );\n\t\t\tfclose( $fp );\n\n\t\t\tif ( $result !== false ) {\n\t\t\t\tunset( $settings['um_email_template'] );\n\t\t\t\tunset( $settings[ $template ] );\n\t\t\t}\n\n\t\t\treturn $settings;\n\t\t}\n\t}\n}", "<?php\nnamespace um\\core;\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) exit;\n\nif ( ! class_exists( 'um\\core\\Files' ) ) {\n\n\n\t/**\n\t * Class Files\n\t * @package um\\core\n\t */\n\tclass Files {\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_temp;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_baseurl;\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $upload_basedir;\n\n\n\t\t/**\n\t\t * Files constructor.\n\t\t */\n\t\tfunction __construct() {\n\n\t\t\t$this->setup_paths();\n\n\t\t\tadd_action( 'template_redirect', array( &$this, 'download_routing' ) );\n\n\t\t\t$this->fonticon = array(\n\t\t\t\t'pdf' \t=> array('icon' \t=> 'um-faicon-file-pdf-o', 'color' => '#D24D4D' ),\n\t\t\t\t'txt' \t=> array('icon' \t=> 'um-faicon-file-text-o' ),\n\t\t\t\t'csv' \t=> array('icon' \t=> 'um-faicon-file-text-o' ),\n\t\t\t\t'doc' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'docx' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'odt' \t=> array('icon' \t=> 'um-faicon-file-text-o', 'color' => '#2C95D5' ),\n\t\t\t\t'ods' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'xls' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'xlsx' \t=> array('icon' \t=> 'um-faicon-file-excel-o', 'color' => '#51BA6A' ),\n\t\t\t\t'zip' \t=> array('icon' \t=> 'um-faicon-file-zip-o' ),\n\t\t\t\t'rar' \t=> array('icon'\t\t=> 'um-faicon-file-zip-o' ),\n\t\t\t\t'mp3'\t=> array('icon'\t\t=> 'um-faicon-file-audio-o' ),\n\t\t\t\t'jpg' \t=> array('icon' \t=> 'um-faicon-picture-o' ),\n\t\t\t\t'jpeg' \t=> array('icon' \t=> 'um-faicon-picture-o' ),\n\t\t\t\t'png' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t\t'gif' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'eps' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'psd' \t=> array('icon' \t=> 'um-icon-images' ),\n\t\t\t\t'tif' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t\t'tiff' \t=> array('icon' \t=> 'um-icon-image' ),\n\t\t\t);\n\n\t\t\t$this->default_file_fonticon = 'um-faicon-file-o';\n\t\t}\n\n\n\t\t/**\n\t\t * File download link generate\n\t\t *\n\t\t * @param int $form_id\n\t\t * @param string $field_key\n\t\t * @param int $user_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_download_link( $form_id, $field_key, $user_id ) {\n\t\t\t$field_key = urlencode( $field_key );\n\n\t\t\tif ( UM()->is_permalinks ) {\n\t\t\t\t$url = get_home_url( get_current_blog_id() );\n\t\t\t\t$nonce = wp_create_nonce( $user_id . $form_id . 'um-download-nonce' );\n\t\t\t\t$url = $url . \"/um-download/{$form_id}/{$field_key}/{$user_id}/{$nonce}\";\n\t\t\t} else {\n\t\t\t\t$url = get_home_url( get_current_blog_id() );\n\t\t\t\t$nonce = wp_create_nonce( $user_id . $form_id . 'um-download-nonce' );\n\t\t\t\t$url = add_query_arg( array( 'um_action' => 'download', 'um_form' => $form_id, 'um_field' => $field_key, 'um_user' => $user_id, 'um_verify' => $nonce ), $url );\n\t\t\t}\n\n\t\t\t//add time to query args for sites with the cache\n\t\t\treturn add_query_arg( array( 't' => time() ), $url );\n\t\t}\n\n\n\t\t/**\n\t\t * @return bool\n\t\t */\n\t\tfunction download_routing() {\n\t\t\tif ( 'download' !== get_query_var( 'um_action' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$query_form = get_query_var( 'um_form' );\n\t\t\tif ( empty( $query_form ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$form_id = get_query_var( 'um_form' );\n\t\t\t$query_field = get_query_var( 'um_field' );\n\t\t\tif ( empty( $query_field ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$field_key = urldecode( get_query_var( 'um_field' ) );\n\t\t\t$query_user = get_query_var( 'um_user' );\n\t\t\tif ( empty( $query_user ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$user_id = get_query_var( 'um_user' );\n\t\t\t$user = get_userdata( $user_id );\n\n\t\t\tif ( empty( $user ) || is_wp_error( $user ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$query_verify = get_query_var( 'um_verify' );\n\t\t\tif ( empty( $query_verify ) ||\n\t\t\t     ! wp_verify_nonce( $query_verify, $user_id . $form_id . 'um-download-nonce' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tum_fetch_user( $user_id );\n\t\t\t$field_data = get_post_meta( $form_id, '_um_custom_fields', true );\n\t\t\tif ( empty( $field_data[ $field_key ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! um_can_view_field( $field_data[ $field_key ] ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$field_value = UM()->fields()->field_value( $field_key );\n\t\t\tif ( empty( $field_value ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$download_type = $field_data[ $field_key ]['type'];\n\t\t\tif ( $download_type === 'file' ) {\n\t\t\t\t$this->file_download( $user_id, $field_key, $field_value );\n\t\t\t} else {\n\t\t\t\t$this->image_download( $user_id, $field_key, $field_value );\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $user_id\n\t\t * @param $field_key\n\t\t * @param $field_value\n\t\t */\n\t\tfunction image_download( $user_id, $field_key, $field_value ) {\n\t\t\t$file_path = UM()->uploader()->get_upload_base_dir() . $user_id . DIRECTORY_SEPARATOR . $field_value;\n\t\t\tif ( ! file_exists( $file_path ) ) {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t//multisite fix for old customers\n\t\t\t\t\t$file_path = str_replace( DIRECTORY_SEPARATOR . 'sites' . DIRECTORY_SEPARATOR . get_current_blog_id() . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $file_path );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//validate traversal file\n\t\t\tif ( validate_file( $file_path ) === 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$file_info = get_user_meta( $user_id, $field_key . \"_metadata\", true );\n\n\t\t\t$pathinfo = pathinfo( $file_path );\n\t\t\t$size = filesize( $file_path );\n\t\t\t$originalname = ! empty( $file_info['original_name'] ) ? $file_info['original_name'] : $pathinfo['basename'];\n\t\t\t$type = ! empty( $file_info['type'] ) ? $file_info['type'] : $pathinfo['extension'];\n\n\t\t\theader('Content-Description: File Transfer');\n\t\t\theader('Content-Type: ' . $type );\n\t\t\theader('Content-Disposition: inline; filename=\"' . $originalname . '\"');\n\t\t\theader('Content-Transfer-Encoding: binary');\n\t\t\theader('Expires: 0');\n\t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n\t\t\theader('Pragma: public');\n\t\t\theader('Content-Length: ' . $size);\n\n\t\t\t$levels = ob_get_level();\n\t\t\tfor ( $i = 0; $i < $levels; $i++ ) {\n\t\t\t\t@ob_end_clean();\n\t\t\t}\n\n\t\t\treadfile( $file_path );\n\t\t\texit;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $user_id\n\t\t * @param $field_key\n\t\t * @param $field_value\n\t\t */\n\t\tfunction file_download( $user_id, $field_key, $field_value ) {\n\t\t\t$file_path = UM()->uploader()->get_upload_base_dir() . $user_id . DIRECTORY_SEPARATOR . $field_value;\n\t\t\tif ( ! file_exists( $file_path ) ) {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t//multisite fix for old customers\n\t\t\t\t\t$file_path = str_replace( DIRECTORY_SEPARATOR . 'sites' . DIRECTORY_SEPARATOR . get_current_blog_id() . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $file_path );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//validate traversal file\n\t\t\tif ( validate_file( $file_path ) === 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$file_info = get_user_meta( $user_id, $field_key . \"_metadata\", true );\n\n\t\t\t$pathinfo = pathinfo( $file_path );\n\t\t\t$size = filesize( $file_path );\n\t\t\t$originalname = ! empty( $file_info['original_name'] ) ? $file_info['original_name'] : $pathinfo['basename'];\n\t\t\t$type = ! empty( $file_info['type'] ) ? $file_info['type'] : $pathinfo['extension'];\n\n\t\t\theader('Content-Description: File Transfer');\n\t\t\theader('Content-Type: ' . $type );\n\t\t\theader('Content-Disposition: attachment; filename=\"' . $originalname . '\"');\n\t\t\theader('Content-Transfer-Encoding: binary');\n\t\t\theader('Expires: 0');\n\t\t\theader('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n\t\t\theader('Pragma: public');\n\t\t\theader('Content-Length: ' . $size);\n\n\t\t\t$levels = ob_get_level();\n\t\t\tfor ( $i = 0; $i < $levels; $i++ ) {\n\t\t\t\t@ob_end_clean();\n\t\t\t}\n\n\t\t\treadfile( $file_path );\n\t\t\texit;\n\t\t}\n\n\n\t\t/**\n\t\t * Remove file by AJAX\n\t\t */\n\t\tfunction ajax_remove_file() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\t/**\n\t\t\t * @var $src\n\t\t\t */\n\t\t\textract( $_REQUEST );\n\t\t\t$this->delete_file( $src );\n\n\t\t\twp_send_json_success();\n\t\t}\n\n\n\t\t/**\n\t\t * Resize image AJAX handler\n\t\t */\n\t\tfunction ajax_resize_image() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\t/**\n\t\t\t * @var $key\n\t\t\t * @var $src\n\t\t\t * @var $coord\n\t\t\t * @var $user_id\n\t\t\t */\n\t\t\textract( $_REQUEST );\n\n\t\t\tif ( ! isset( $src ) || ! isset( $coord ) ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid parameters', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\t$coord_n = substr_count( $coord, \",\" );\n\t\t\tif ( $coord_n != 3 ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid coordinates', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\t$user_id = empty( $_REQUEST['user_id'] ) ? get_current_user_id() : $_REQUEST['user_id'];\n\n\t\t\tif ( ! UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n\t\t\t\t$ret['error'] = esc_js( __( 'You haven\\'t ability to edit this user', 'ultimate-member' ) );\n\t\t\t\twp_send_json_error( $ret );\n\t\t\t}\n\n\t\t\t$image_path = um_is_file_owner( $src, $user_id, true );\n\t\t\tif ( ! $image_path ) {\n\t\t\t\twp_send_json_error( esc_js( __( 'Invalid file ownership', 'ultimate-member' ) ) );\n\t\t\t}\n\n\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t$output = UM()->uploader()->resize_image( $image_path, $src, $key, $user_id, $coord );\n\t\t\tUM()->uploader()->replace_upload_dir = false;\n\n\t\t\tdelete_option( \"um_cache_userdata_{$user_id}\" );\n\n\t\t\twp_send_json_success( $output );\n\t\t}\n\n\n\t\t/**\n\t\t * Image upload by AJAX\n\t\t *\n\t\t * @throws \\Exception\n\t\t */\n\t\tfunction ajax_image_upload() {\n\t\t\t$ret['error'] = null;\n\t\t\t$ret = array();\n\n\t\t\t$id = $_POST['key'];\n\t\t\t$timestamp = $_POST['timestamp'];\n\t\t\t$nonce = $_POST['_wpnonce'];\n\t\t\t$user_id = empty( $_POST['user_id'] ) ? get_current_user_id() : $_POST['user_id'];\n\n\t\t\tUM()->fields()->set_id = $_POST['set_id'];\n\t\t\tUM()->fields()->set_mode = $_POST['set_mode'];\n\n\t\t\tif ( ! UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n\t\t\t\t$ret['error'] = __( 'You haven\\'t ability to edit this user', 'ultimate-member' );\n\t\t\t\twp_send_json_error( $ret );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_image_upload_nonce\n\t\t\t * @description Change Image Upload nonce\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$nonce\",\"type\":\"bool\",\"desc\":\"Nonce\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_image_upload_nonce', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_image_upload_nonce', 'my_image_upload_nonce', 10, 1 );\n\t\t\t * function my_image_upload_nonce( $nonce ) {\n\t\t\t *     // your code here\n\t\t\t *     return $nonce;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$um_image_upload_nonce = apply_filters( 'um_image_upload_nonce', true );\n\n\t\t\tif ( $um_image_upload_nonce ) {\n\t\t\t\tif ( ! wp_verify_nonce( $nonce, \"um_upload_nonce-{$timestamp}\" ) && is_user_logged_in() ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\t$ret['error'] = __( 'Invalid nonce', 'ultimate-member' );\n\t\t\t\t\twp_send_json_error( $ret );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( isset( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\tif ( ! is_array( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t\t\t$uploaded = UM()->uploader()->upload_image( $_FILES[ $id ], $user_id, $id );\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = false;\n\t\t\t\t\tif ( isset( $uploaded['error'] ) ) {\n\t\t\t\t\t\t$ret['error'] = $uploaded['error'];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ret[] = $uploaded['handle_upload'];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t$ret['error'] = __( 'A theme or plugin compatibility issue', 'ultimate-member' );\n\t\t\t}\n\t\t\twp_send_json_success( $ret );\n\t\t}\n\n\n\t\t/**\n\t\t * File upload by AJAX\n\t\t */\n\t\tfunction ajax_file_upload() {\n\t\t\t$ret['error'] = null;\n\t\t\t$ret = array();\n\n\t\t\t/* commented for enable download files on registration form\n\t\t\t * if ( ! is_user_logged_in() ) {\n\t\t\t\t$ret['error'] = 'Invalid user';\n\t\t\t\tdie( json_encode( $ret ) );\n\t\t\t}*/\n\n\t\t\t$nonce = $_POST['_wpnonce'];\n\t\t\t$id = $_POST['key'];\n\t\t\t$timestamp = $_POST['timestamp'];\n\n\t\t\tUM()->fields()->set_id = $_POST['set_id'];\n\t\t\tUM()->fields()->set_mode = $_POST['set_mode'];\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_file_upload_nonce\n\t\t\t * @description Change File Upload nonce\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$nonce\",\"type\":\"bool\",\"desc\":\"Nonce\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_file_upload_nonce', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_file_upload_nonce', 'my_file_upload_nonce', 10, 1 );\n\t\t\t * function my_file_upload_nonce( $nonce ) {\n\t\t\t *     // your code here\n\t\t\t *     return $nonce;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$um_file_upload_nonce = apply_filters(\"um_file_upload_nonce\", true );\n\n\t\t\tif ( $um_file_upload_nonce  ) {\n\t\t\t\tif ( ! wp_verify_nonce( $nonce, 'um_upload_nonce-'.$timestamp  ) && is_user_logged_in() ) {\n\t\t\t\t\t// This nonce is not valid.\n\t\t\t\t\t$ret['error'] = 'Invalid nonce';\n\t\t\t\t\twp_send_json_error( $ret );\n\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif( isset( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\tif ( ! is_array( $_FILES[ $id ]['name'] ) ) {\n\n\t\t\t\t\t$user_id = $_POST['user_id'];\n\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = true;\n\t\t\t\t\t$uploaded = UM()->uploader()->upload_file( $_FILES[ $id ], $user_id, $id );\n\t\t\t\t\tUM()->uploader()->replace_upload_dir = false;\n\t\t\t\t\tif ( isset( $uploaded['error'] ) ){\n\n\t\t\t\t\t\t$ret['error'] = $uploaded['error'];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t$uploaded_file = $uploaded['handle_upload'];\n\t\t\t\t\t\t$ret['url'] = $uploaded_file['file_info']['name'];\n\t\t\t\t\t\t$ret['icon'] = UM()->files()->get_fonticon_by_ext( $uploaded_file['file_info']['ext'] );\n\t\t\t\t\t\t$ret['icon_bg'] = UM()->files()->get_fonticon_bg_by_ext( $uploaded_file['file_info']['ext'] );\n\t\t\t\t\t\t$ret['filename'] = $uploaded_file['file_info']['basename'];\n\t\t\t\t\t\t$ret['original_name'] = $uploaded_file['file_info']['original_name'];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t$ret['error'] = __('A theme or plugin compatibility issue','ultimate-member');\n\t\t\t}\n\n\n\t\t\twp_send_json_success( $ret );\n\t\t}\n\n\n\t\t/**\n\t\t * Allowed image types\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction allowed_image_types() {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_image_types\n\t\t\t * @description Extend allowed image types\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$types\",\"type\":\"array\",\"desc\":\"Image ext types\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_allowed_image_types', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_image_types', 'my_allowed_image_types', 10, 1 );\n\t\t\t * function my_allowed_image_types( $types ) {\n\t\t\t *     // your code here\n\t\t\t *     return $types;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\treturn apply_filters( 'um_allowed_image_types', array(\n\t\t\t\t'png'   => 'PNG',\n\t\t\t\t'jpeg'  => 'JPEG',\n\t\t\t\t'jpg'   => 'JPG',\n\t\t\t\t'gif'   => 'GIF'\n\t\t\t) );\n\t\t}\n\n\n\t\t/**\n\t\t * Allowed file types\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction allowed_file_types() {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_file_types\n\t\t\t * @description Extend allowed File types\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$types\",\"type\":\"array\",\"desc\":\"Files ext types\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_allowed_file_types', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_file_types', 'my_allowed_file_types', 10, 1 );\n\t\t\t * function my_allowed_file_types( $types ) {\n\t\t\t *     // your code here\n\t\t\t *     return $types;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\treturn apply_filters( 'um_allowed_file_types', array(\n\t\t\t\t'pdf'   => 'PDF',\n\t\t\t\t'txt'   => 'Text',\n\t\t\t\t'csv'   => 'CSV',\n\t\t\t\t'doc'   => 'DOC',\n\t\t\t\t'docx'  => 'DOCX',\n\t\t\t\t'odt'   => 'ODT',\n\t\t\t\t'ods'   => 'ODS',\n\t\t\t\t'xls'   => 'XLS',\n\t\t\t\t'xlsx'  => 'XLSX',\n\t\t\t\t'zip'   => 'ZIP',\n\t\t\t\t'rar'   => 'RAR',\n\t\t\t\t'mp3'   => 'MP3',\n\t\t\t\t'jpg'   => 'JPG',\n\t\t\t\t'jpeg'  => 'JPEG',\n\t\t\t\t'png'   => 'PNG',\n\t\t\t\t'gif'   => 'GIF',\n\t\t\t\t'eps'   => 'EPS',\n\t\t\t\t'psd'   => 'PSD',\n\t\t\t\t'tif'   => 'TIF',\n\t\t\t\t'tiff'  => 'TIFF',\n\t\t\t) );\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension icon\n\t\t *\n\t\t * @param $extension\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_fonticon_by_ext( $extension ) {\n\t\t\tif ( isset( $this->fonticon[$extension]['icon'] ) ) {\n\t\t\t\treturn $this->fonticon[$extension]['icon'];\n\t\t\t} else {\n\t\t\t\treturn $this->default_file_fonticon;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension icon background\n\t\t *\n\t\t * @param $extension\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_fonticon_bg_by_ext( $extension ) {\n\t\t\tif ( isset( $this->fonticon[$extension]['color'] ) ) {\n\t\t\t\treturn $this->fonticon[$extension]['color'];\n\t\t\t} else {\n\t\t\t\treturn '#666';\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Setup upload directory\n\t\t */\n\t\tfunction setup_paths() {\n\n\t\t\t$this->upload_dir = wp_upload_dir();\n\n\t\t\t$this->upload_basedir = $this->upload_dir['basedir'] . '/ultimatemember/';\n\t\t\t$this->upload_baseurl = $this->upload_dir['baseurl'] . '/ultimatemember/';\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_upload_basedir_filter\n\t\t\t * @description Change Uploads Basedir\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$basedir\",\"type\":\"string\",\"desc\":\"Uploads basedir\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_upload_basedir_filter', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_upload_basedir_filter', 'my_upload_basedir', 10, 1 );\n\t\t\t * function my_upload_basedir( $basedir ) {\n\t\t\t *     // your code here\n\t\t\t *     return $basedir;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->upload_basedir = apply_filters( 'um_upload_basedir_filter', $this->upload_basedir );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_upload_baseurl_filter\n\t\t\t * @description Change Uploads Base URL\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$baseurl\",\"type\":\"string\",\"desc\":\"Uploads base URL\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_filter( 'um_upload_baseurl_filter', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_upload_baseurl_filter', 'my_upload_baseurl', 10, 1 );\n\t\t\t * function my_upload_baseurl( $baseurl ) {\n\t\t\t *     // your code here\n\t\t\t *     return $baseurl;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->upload_baseurl = apply_filters( 'um_upload_baseurl_filter', $this->upload_baseurl );\n\n\t\t\t// @note : is_ssl() doesn't work properly for some sites running with load balancers\n\t\t\t// Check the links for more info about this bug\n\t\t\t// https://codex.wordpress.org/Function_Reference/is_ssl\n\t\t\t// http://snippets.webaware.com.au/snippets/wordpress-is_ssl-doesnt-work-behind-some-load-balancers/\n\t\t\tif ( is_ssl() || stripos( get_option( 'siteurl' ), 'https://' ) !== false\n\t\t\t     || ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' ) ) {\n\t\t\t\t$this->upload_baseurl = str_replace(\"http://\", \"https://\",  $this->upload_baseurl);\n\t\t\t}\n\n\t\t\t$this->upload_temp = $this->upload_basedir . 'temp/';\n\t\t\t$this->upload_temp_url = $this->upload_baseurl . 'temp/';\n\n\t\t\tif ( ! file_exists( $this->upload_basedir ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_basedir, 0755, true );\n\t\t\t\tumask( $old );\n\t\t\t}\n\n\t\t\tif ( ! file_exists( $this->upload_temp ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_temp , 0755, true );\n\t\t\t\tumask( $old );\n\t\t\t}\n\n\t\t}\n\n\n\t\t/**\n\t\t * Generate unique temp directory\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction unique_dir(){\n\t\t\t$unique_number = UM()->validation()->generate();\n\t\t\t$array['dir'] = $this->upload_temp . $unique_number . '/';\n\t\t\t$array['url'] = $this->upload_temp_url . $unique_number . '/';\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get path only without file name\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction path_only( $file ) {\n\n\t\t\treturn trailingslashit( dirname( $file ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Fix image orientation\n\t\t *\n\t\t * @param $rotate\n\t\t * @param $source\n\t\t *\n\t\t * @return resource\n\t\t */\n\t\tfunction fix_image_orientation( $rotate, $source ) {\n\t\t\tif ( extension_loaded('exif') ){\n\t\t\t\t$exif = @exif_read_data( $source );\n\n\t\t\t\tif (isset($exif['Orientation'])) {\n\t\t\t\t\tswitch ($exif['Orientation']) {\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, 180, 0);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, -90, 0);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 8:\n\t\t\t\t\t\t\t$rotate = imagerotate($rotate, 90, 0);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $rotate;\n\t\t}\n\n\n\t\t/**\n\t\t * Process an image\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t * @param int $quality\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction create_and_copy_image($source, $destination, $quality = 100) {\n\n\t\t\t$info = @getimagesize($source);\n\n\t\t\tif ($info['mime'] == 'image/jpeg'){\n\n\t\t\t\t$image = imagecreatefromjpeg( $source );\n\n\t\t\t} else if ($info['mime'] == 'image/gif'){\n\n\t\t\t\t$image = imagecreatefromgif( $source );\n\n\t\t\t} else if ($info['mime'] == 'image/png'){\n\n\t\t\t\t$image = imagecreatefrompng( $source );\n\t\t\t\timagealphablending( $image, false );\n\t\t\t\timagesavealpha( $image, true );\n\n\t\t\t}\n\n\t\t\tlist($w, $h) = @getimagesize( $source );\n\t\t\tif ( $w > UM()->options()->get('image_max_width') ) {\n\n\t\t\t\t$ratio = round( $w / $h, 2 );\n\t\t\t\t$new_w = UM()->options()->get('image_max_width');\n\t\t\t\t$new_h = round( $new_w / $ratio, 2 );\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ||  $info['mime'] == 'image/gif' ){\n\n\t\t\t\t\t$image_p = imagecreatetruecolor( $new_w, $new_h );\n\t\t\t\t\timagecopyresampled( $image_p, $image, 0, 0, 0, 0, $new_w, $new_h, $w, $h );\n\t\t\t\t\t$image_p = $this->fix_image_orientation( $image_p, $source );\n\n\t\t\t\t}else if( $info['mime'] == 'image/png' ){\n\n\t\t\t\t\t$srcImage = $image;\n\t\t\t\t\t$targetImage = imagecreatetruecolor( $new_w, $new_h );\n\t\t\t\t\timagealphablending( $targetImage, false );\n\t\t\t\t\timagesavealpha( $targetImage, true );\n\t\t\t\t\timagecopyresampled( $targetImage, $srcImage,   0, 0, 0, 0, $new_w, $new_h, $w, $h );\n\n\t\t\t\t}\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ){\n\t\t\t\t\t$has_copied = imagejpeg( $image_p, $destination, $quality );\n\t\t\t\t}else if ( $info['mime'] == 'image/gif' ){\n\t\t\t\t\t$has_copied = imagegif( $image_p, $destination );\n\t\t\t\t}else if ( $info['mime'] == 'image/png' ){\n\t\t\t\t\t$has_copied = imagepng( $targetImage, $destination, 0 ,PNG_ALL_FILTERS);\n\t\t\t\t}\n\n\t\t\t\t$info['um_has_max_width'] = 'custom';\n\t\t\t\t$info['um_has_copied'] = $has_copied ? 'yes':'no';\n\n\t\t\t} else {\n\n\t\t\t\t$image = $this->fix_image_orientation( $image, $source );\n\n\t\t\t\tif ( $info['mime'] == 'image/jpeg' ){\n\t\t\t\t\t$has_copied = imagejpeg( $image, $destination, $quality );\n\t\t\t\t}else if ( $info['mime'] == 'image/gif' ){\n\t\t\t\t\t$has_copied = imagegif( $image, $destination );\n\t\t\t\t}else if ( $info['mime'] == 'image/png' ){\n\t\t\t\t\t$has_copied = imagepng( $image , $destination , 0 ,PNG_ALL_FILTERS);\n\t\t\t\t}\n\n\t\t\t\t$info['um_has_max_width'] = 'default';\n\t\t\t\t$info['um_has_copied'] = $has_copied ? 'yes':'no';\n\t\t\t}\n\n\t\t\treturn $info;\n\t\t}\n\n\n\t\t/**\n\t\t * Process a file\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t */\n\t\tfunction upload_temp_file( $source, $destination ) {\n\n\t\t\tmove_uploaded_file( $source, $destination );\n\t\t}\n\n\n\t\t/**\n\t\t * Process a temp upload\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t * @param int $quality\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_image_upload_temp( $source, $destination, $quality = 100 ){\n\n\t\t\t$unique_dir = $this->unique_dir();\n\n\t\t\t$this->make_dir( $unique_dir['dir'] );\n\n\t\t\t$info = $this->create_and_copy_image( $source, $unique_dir['dir'] . $destination, $quality );\n\n\t\t\t$url = $unique_dir['url'] . $destination ;\n\n\t\t\treturn $url;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Process a temp upload for files\n\t\t *\n\t\t * @param $source\n\t\t * @param $destination\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_file_upload_temp( $source, $destination ){\n\n\t\t\t$unique_dir = $this->unique_dir();\n\n\t\t\t$this->make_dir( $unique_dir['dir'] );\n\n\t\t\t$this->upload_temp_file( $source, $unique_dir['dir'] . $destination );\n\n\t\t\t$url = $unique_dir['url'] . $destination;\n\n\t\t\treturn $url;\n\n\t\t}\n\n\n\t\t/**\n\t\t * Make a Folder\n\t\t *\n\t\t * @param $dir\n\t\t */\n\t\tfunction make_dir( $dir ) {\n\t\t\t$old = umask(0);\n\t\t\t@mkdir( $dir, 0755, true);\n\t\t\tumask( $old );\n\t\t}\n\n\n\t\t/**\n\t\t * Get extension by mime type\n\t\t *\n\t\t * @param $mime\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_extension_by_mime_type( $mime ) {\n\t\t\t$split = explode('/', $mime );\n\t\t\treturn $split[1];\n\t\t}\n\n\n\t\t/**\n\t\t * Get file data\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_file_data( $file ) {\n\t\t\t$array['size'] = filesize( $file );\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get image data\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_image_data( $file ) {\n\n\t\t\t$finfo = finfo_open( FILEINFO_MIME_TYPE );\n\n\t\t\t$mime_type = finfo_file( $finfo, $file );\n\n\t\t\tif( function_exists('exif_imagetype') ){\n\n\t\t\t\t$array_exif_image_mimes = array( IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG );\n\n\t\t\t\t$allowed_types = apply_filters('um_image_upload_allowed_exif_mimes', $array_exif_image_mimes );\n\n\t\t\t\tif( ! in_array( @exif_imagetype( $file ), $allowed_types ) ) {\n\n\t\t\t\t\t$array['invalid_image'] = true;\n\n\t\t\t\t\treturn $array;\n\t\t\t\t}\n\n\t\t\t}else{\n\n\t\t\t\t$array_image_mimes = array('image/jpeg','image/png','image/gif');\n\n\t\t\t\t$allowed_types = apply_filters('um_image_upload_allowed_mimes', $array_image_mimes );\n\n\t\t\t\tif ( ! in_array( $mime_type, $allowed_types ) ) {\n\n\t\t\t\t\t$array['invalid_image'] = true;\n\n\t\t\t\t\treturn $array;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$array['size'] = filesize( $file );\n\n\t\t\t$image_data = @getimagesize( $file );\n\n\t\t\t$array['image'] = $image_data;\n\n\t\t\t$array['invalid_image'] = false;\n\n\t\t\tlist($width, $height, $type, $attr) = $image_data;\n\n\t\t\t$array['width'] = $width;\n\n\t\t\t$array['height'] = $height;\n\n\t\t\t$array['ratio'] = $width / $height;\n\n\t\t\t$array['extension'] = $this->get_extension_by_mime_type( $mime_type );\n\n\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * If a value exists in comma seperated list\n\t\t *\n\t\t * @param $value\n\t\t * @param $array\n\t\t *\n\t\t * @return bool\n\t\t */\n\t\tfunction in_array( $value, $array ) {\n\n\t\t\tif ( in_array( $value, explode(',', $array ) ) ){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * This function will delete file upload from server\n\t\t *\n\t\t * @param $src\n\t\t */\n\t\tfunction delete_file( $src ) {\n\n\t\t\tif ( strstr( $src, '?' ) ) {\n\t\t\t\t$splitted = explode( '?', $src );\n\t\t\t\t$src = $splitted[0];\n\t\t\t}\n\n\t\t\t$is_temp = um_is_temp_upload( $src );\n\t\t\tif ( $is_temp ) {\n\t\t\t\tunlink( $is_temp );\n\t\t\t\trmdir( dirname( $is_temp ) );\n\t\t\t} else {\n\t\t\t\twp_die( __('Ultimate Member: Not a valid temp file','ultimate-member') );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Delete a main user photo\n\t\t *\n\t\t * @param $user_id\n\t\t * @param $type\n\t\t */\n\t\tfunction delete_core_user_photo( $user_id, $type ) {\n\n\t\t\tdelete_user_meta( $user_id, $type );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_after_remove_{$type}\n\t\t\t * @description Make some actions after remove file\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$user_id\",\"type\":\"int\",\"desc\":\"User ID\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_after_remove_{$type}', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_after_remove_{$type}', 'my_after_remove_file', 10, 1 );\n\t\t\t * function my_after_remove_file( $user_id ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_after_remove_{$type}\", $user_id );\n\n\t\t\t$dir = $this->upload_basedir . $user_id . DIRECTORY_SEPARATOR;\n\t\t\t$prefix = $type;\n\t\t\tchdir($dir);\n\t\t\t$matches = glob($prefix.'*',GLOB_MARK);\n\n\t\t\tif( is_array($matches) && !empty($matches)) {\n\t\t\t\tforeach($matches as $match) {\n\t\t\t\t\tif( is_file($dir.$match) ) unlink($dir.$match);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( count(glob(\"$dir/*\")) === 0) {\n\t\t\t\trmdir( $dir );\n\t\t\t}\n\n\t\t\tUM()->user()->remove_cache( $user_id );\n\t\t}\n\n\n\t\t/**\n\t\t * Resize a local image\n\t\t *\n\t\t * @param $file\n\t\t * @param $crop\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction resize_image( $file, $crop ) {\n\n\t\t\t$targ_x1 = $crop[0];\n\t\t\t$targ_y1 = $crop[1];\n\t\t\t$targ_x2 = $crop[2];\n\t\t\t$targ_y2 = $crop[3];\n\n\t\t\t$info = @getimagesize( $file );\n\n\t\t\tif ( $info['mime'] == 'image/gif' ) {\n\n\t\t\t\t$img_r = imagecreatefromgif( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagegif( $dst_r, $this->path_only( $file ) . basename( $file ) );\n\n\t\t\t} elseif ( $info['mime'] == 'image/png' ) {\n\n\t\t\t\t$img_r = imagecreatefrompng( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagealphablending( $dst_r, false);\n\t\t\t\timagesavealpha( $dst_r, true);\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagepng( $dst_r, $this->path_only( $file ) . basename( $file ) );\n\n\t\t\t} else {\n\n\t\t\t\t$img_r = imagecreatefromjpeg( $file );\n\t\t\t\t$dst_r = imagecreatetruecolor( $targ_x2, $targ_y2 );\n\t\t\t\timagecopy( $dst_r, $img_r, 0, 0, $targ_x1, $targ_y1, $targ_x2, $targ_y2 );\n\t\t\t\timagejpeg( $dst_r, $this->path_only( $file ) . basename( $file ), 100 );\n\n\t\t\t}\n\n\t\t\t$split = explode('/ultimatemember/temp/', $file );\n\t\t\treturn $this->upload_temp_url . $split[1];\n\t\t}\n\n\n\t\t/**\n\t\t * Make a user folder for uploads\n\t\t *\n\t\t * @param $user_id\n\t\t */\n\t\tfunction new_user( $user_id ) {\n\t\t\tif ( !file_exists( $this->upload_basedir . $user_id . '/' ) ) {\n\t\t\t\t$old = umask(0);\n\t\t\t\t@mkdir( $this->upload_basedir . $user_id . '/' , 0755, true);\n\t\t\t\tumask($old);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * New user upload\n\t\t *\n\t\t * @param $user_id\n\t\t * @param $source\n\t\t * @param $key\n\t\t *\n\t\t * @deprecated 2.1.0\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction new_user_upload( $user_id, $source, $key ) {\n\t\t\tum_deprecated_function( 'new_user_upload', '2.1.0', '' );\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Remove a directory\n\t\t *\n\t\t * @param $dir\n\t\t */\n\t\tfunction remove_dir( $dir ) {\n\t\t\tif ( file_exists( $dir ) ) {\n\t\t\t\tforeach(glob($dir . '/*') as $file) {\n\t\t\t\t\tif(is_dir($file)) $this->remove_dir($file); else unlink($file);\n\t\t\t\t} rmdir($dir);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Remove old files\n\t\t * @param string $dir\t\t\t\t\t\t\tPath to directoty.\n\t\t * @param int|string $timestamp\t\tUnix timestamp or PHP relative time. All older files will be removed.\n\t\t */\n\t\tfunction remove_old_files( $dir, $timestamp = NULL ) {\n\n\t\t\t$removed_files = array();\n\n\t\t\tif ( empty( $timestamp ) ) {\n\t\t\t\t$timestamp = strtotime( '-1 day' );\n\t\t\t}\n\t\t\telseif ( is_string( $timestamp ) && !is_numeric( $timestamp ) ) {\n\t\t\t\t$timestamp = strtotime( $timestamp );\n\t\t\t}\n\n\t\t\tif ( $timestamp && is_dir( $dir ) ) {\n\n\t\t\t\t$files = glob( $dir . '/*' );\n\n\t\t\t\tforeach ( (array) $files as $file ) {\n\t\t\t\t\tif ( in_array( wp_basename( $file ), array('.', '..') ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telseif ( is_dir( $file ) ) {\n\t\t\t\t\t\t$this->remove_old_files( $file, $timestamp );\n\t\t\t\t\t}\n\t\t\t\t\telseif ( is_file( $file ) ) {\n\t\t\t\t\t\t$fileatime = fileatime( $file );\n\t\t\t\t\t\tif ( $fileatime && $fileatime < (int) $timestamp ) {\n\t\t\t\t\t\t\tunlink( $file );\n\t\t\t\t\t\t\t$removed_files[] = $file;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $removed_files;\n\t\t}\n\n\n\t\t/**\n\t\t * Format Bytes\n\t\t *\n\t\t * @param $size\n\t\t * @param int $precision\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction format_bytes( $size, $precision = 1 ) {\n\t\t\tif ( is_numeric( $size ) ) {\n\t\t\t\t$base = log( $size, 1024 );\n\t\t\t\t$suffixes = array( '', 'kb', 'MB', 'GB', 'TB' );\n\t\t\t\t$computed_size = round( pow( 1024, $base - floor( $base ) ), $precision );\n\t\t\t\t$unit = $suffixes[ floor( $base ) ];\n\n\t\t\t\treturn $computed_size.' '.$unit;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Get the list of profile/cover sizes\n\t\t *\n\t\t * @param string $type\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction get_profile_photo_size( $type ) {\n\t\t\t$sizes = UM()->options()->get( $type );\n\n\t\t\t$sizes = array_combine( $sizes, $sizes );\n\n\t\t\tif ( $type == 'cover_thumb_sizes' ) {\n\t\t\t\tforeach ( $sizes as $key => $value ) {\n\t\t\t\t\t$sizes[ $key ] = $value . 'px';\n\t\t\t\t}\n\t\t\t} elseif ( $type == 'photo_thumb_sizes' ) {\n\t\t\t\tforeach ( $sizes as $key => $value ) {\n\t\t\t\t\t$sizes[ $key ] = $value . 'x' . $value . 'px';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$sizes['original'] = __( 'Original size', 'ultimate-member' );\n\t\t\treturn $sizes;\n\t\t}\n\n\n\t}\n}", "<?php\nnamespace um\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\core\\Member_Directory_Meta' ) ) {\n\n\n\t/**\n\t * Class Member_Directory_Meta\n\t * @package um\\core\n\t */\n\tclass Member_Directory_Meta extends Member_Directory {\n\n\n\t\t/**\n\t\t * @var string\n\t\t */\n\t\tvar $joins = array();\n\t\tvar $where_clauses = array();\n\n\t\tvar $roles = array();\n\t\tvar $general_meta_joined = false;\n\n\t\tvar $sql_limit = '';\n\t\tvar $sql_order = '';\n\n\n\t\t/**\n\t\t * Member_Directory_Meta constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\tparent::__construct();\n\n\t\t\tadd_action( 'updated_user_meta', array( &$this, 'on_update_usermeta' ), 10, 4 );\n\t\t\tadd_action( 'added_user_meta', array( &$this, 'on_update_usermeta' ), 10, 4 );\n\t\t\tadd_action( 'deleted_user_meta', array( &$this, 'on_delete_usermeta' ), 10, 4 );\n\n\t\t\tadd_action( 'um_add_new_field', array( &$this, 'on_new_field_added' ), 10, 1 );\n\t\t\tadd_action( 'um_delete_custom_field', array( &$this, 'on_delete_custom_field' ), 10, 1 );\n\t\t}\n\n\n\t\t/**\n\t\t * Delete custom field and metakey from UM usermeta table\n\t\t *\n\t\t * @param $metakey\n\t\t */\n\t\tfunction on_delete_custom_field( $metakey ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( in_array( $metakey, $metakeys ) ) {\n\t\t\t\tunset( $metakeys[ array_search( $metakey, $metakeys ) ] );\n\n\t\t\t\tglobal $wpdb;\n\n\t\t\t\t$wpdb->delete(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'um_key'    => $metakey\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%s'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tupdate_option( 'um_usermeta_fields', $metakeys );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Add metakey to usermeta fields\n\t\t *\n\t\t * @param $metakey\n\t\t */\n\t\tfunction on_new_field_added( $metakey ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $metakey, $metakeys ) ) {\n\t\t\t\t$metakeys[] = $metakey;\n\t\t\t\tupdate_option( 'um_usermeta_fields', $metakeys );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * When you delete usermeta - remove row from um_metadata\n\t\t *\n\t\t * @param int|array $meta_ids\n\t\t * @param int $object_id\n\t\t * @param string $meta_key\n\t\t * @param mixed $_meta_value\n\t\t */\n\t\tfunction on_delete_usermeta( $meta_ids, $object_id, $meta_key, $_meta_value ) {\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $meta_key, $metakeys ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$wpdb->delete(\n\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\tarray(\n\t\t\t\t\t'user_id'   => $object_id,\n\t\t\t\t\t'um_key'    => $meta_key\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'%d',\n\t\t\t\t\t'%s'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t/**\n\t\t * When you add/update usermeta - add/update row from um_metadata\n\t\t *\n\t\t * @param int $meta_id\n\t\t * @param int $object_id\n\t\t * @param string $meta_key\n\t\t * @param mixed $_meta_value\n\t\t */\n\t\tfunction on_update_usermeta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\n\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\tif ( ! in_array( $meta_key, $metakeys ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$result = $wpdb->get_var( $wpdb->prepare(\n\t\t\t\t\"SELECT umeta_id \n\t\t\t\tFROM {$wpdb->prefix}um_metadata \n\t\t\t\tWHERE user_id = %d AND \n\t\t\t\t      um_key = %s \n\t\t\t\tLIMIT 1\",\n\t\t\t\t$object_id,\n\t\t\t\t$meta_key\n\t\t\t) );\n\n\t\t\tif ( empty( $result ) ) {\n\t\t\t\t$wpdb->insert(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'user_id'   => $object_id,\n\t\t\t\t\t\t'um_key'    => $meta_key,\n\t\t\t\t\t\t'um_value'  => maybe_serialize( $_meta_value ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%d',\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$wpdb->update(\n\t\t\t\t\t\"{$wpdb->prefix}um_metadata\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'um_value'  => maybe_serialize( $_meta_value ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'umeta_id'  => $result,\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%s',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'%d',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param $directory_data\n\t\t * @param $field\n\t\t * @param $value\n\t\t * @param $i\n\t\t * @param bool $is_default\n\t\t */\n\t\tfunction handle_filter_query( $directory_data, $field, $value, $i, $is_default = false ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$blog_id = get_current_blog_id();\n\n\t\t\tswitch ( $field ) {\n\t\t\t\tdefault:\n\n\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t/**\n\t\t\t\t\t * UM hook\n\t\t\t\t\t *\n\t\t\t\t\t * @type filter\n\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t * @input_vars\n\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t * @change_log\n\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t * @usage\n\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter_meta', 'function_name', 10, 4 ); ?>\n\t\t\t\t\t * @example\n\t\t\t\t\t * <?php\n\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter_meta', 'my_query_args_filter', 10, 4 );\n\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t *     // your code here\n\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t * }\n\t\t\t\t\t * ?>\n\t\t\t\t\t */\n\t\t\t\t\t$skip_default = apply_filters( \"um_query_args_{$field}__filter_meta\", false, $this, $field, $value, $filter_type, $is_default );\n\n\t\t\t\t\tif ( ! $skip_default ) {\n\n\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tdo_action( \"um_query_args_{$field}_{$filter_type}__filter_meta\", $field, $value, $filter_type, $i, $is_default );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'text':\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n\n\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"umm{$i}.um_key = %s AND umm{$i}.um_value = %s\", $field, $value );\n\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t$value = array( $value );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$values_array = array();\n\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n\n\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%\"' . trim( $single_val ) . '\"%' );\n\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%' . serialize( strval( trim( $single_val ) ) ) . '%' );\n\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value = %s\", trim( $single_val ) );\n\n\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\t\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%' . serialize( intval( trim( $single_val ) ) ) . '%' );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n\n\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND ( {$values} ) )\", $field );\n\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$min = min( $value );\n\t\t\t\t\t\t\t\t$max = max( $value );\n\n\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value BETWEEN %d AND %d )\", $field, $min, $max );\n\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value BETWEEN %s AND %s )\", $field, $from_date, $to_date );\n\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value = %s )\", $field, $value[0] );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND CAST( umm{$i}.um_value AS TIME ) BETWEEN %s AND %s )\", $field, $value[0], $value[1] );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'role':\n\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\tif ( empty( $this->roles ) && ! is_multisite() ) {\n\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\t\t\t\t\t\t$this->roles = $value;\n\t\t\t\t\t}\n\n\t\t\t\t\t$roles_clauses = array();\n\t\t\t\t\tforeach ( $value as $role ) {\n\t\t\t\t\t\t$roles_clauses[] = $wpdb->prepare( \"umm_roles.um_value LIKE %s\", '%\"' . $role . '\"%' );\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->where_clauses[] = '( ' . implode( ' OR ', $roles_clauses ) . ' )';\n\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'birth_date':\n\n\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = 'birth_date' AND umm{$i}.um_value BETWEEN %s AND %s )\", $from_date, $to_date );\n\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user_registered':\n\n\t\t\t\t\t$offset = 0;\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"u.user_registered BETWEEN %s AND %s\", $from_date, $to_date );\n\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'last_login':\n\n\t\t\t\t\t$offset = 0;\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n\n\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = '_um_last_login' AND umm{$i}.um_value BETWEEN %s AND %s )\", $from_date, $to_date );\n\n\t\t\t\t\tif ( ! $is_default ) {\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Main Query function for getting members via AJAX\n\t\t */\n\t\tfunction ajax_get_members() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$blog_id = get_current_blog_id();\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\t$this->predefined_no_caps( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_before_query' );\n\n\t\t\t// Prepare for BIG SELECT query\n\t\t\t$wpdb->query( 'SET SQL_BIG_SELECTS=1' );\n\n\n\t\t\tif ( ! empty( $directory_data['show_these_users'] ) ) {\n\t\t\t\t$show_these_users = maybe_unserialize( $directory_data['show_these_users'] );\n\n\t\t\t\tif ( is_array( $show_these_users ) && ! empty( $show_these_users ) ) {\n\t\t\t\t\t$users_array = array();\n\t\t\t\t\tforeach ( $show_these_users as $username ) {\n\t\t\t\t\t\tif ( false !== ( $exists_id = username_exists( $username ) ) ) {\n\t\t\t\t\t\t\t$users_array[] = $exists_id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $users_array ) ) {\n\t\t\t\t\t\t$this->where_clauses[] = \"u.ID IN ( '\" . implode( \"','\", $users_array ) . \"' )\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$profile_photo_where = '';\n\t\t\tif ( $directory_data['has_profile_photo'] == 1 ) {\n\t\t\t\t$profile_photo_where = \" AND umm_general.um_value LIKE '%s:13:\\\"profile_photo\\\";b:1;%'\";\n\t\t\t}\n\n\t\t\t$cover_photo_where = '';\n\t\t\tif ( $directory_data['has_cover_photo'] == 1 ) {\n\t\t\t\t$cover_photo_where = \" AND umm_general.um_value LIKE '%s:11:\\\"cover_photo\\\";b:1;%'\";\n\t\t\t}\n\n\t\t\tif ( ! UM()->roles()->um_user_can( 'can_edit_everyone' ) ) {\n\t\t\t\tif ( ! $this->general_meta_joined ) {\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n\t\t\t\t\t$this->general_meta_joined = true;\n\t\t\t\t}\n\t\t\t\t$this->where_clauses[] = \"( umm_general.um_key = 'um_member_directory_data' AND \n\t\t\t\tumm_general.um_value LIKE '%s:14:\\\"account_status\\\";s:8:\\\"approved\\\";%' AND umm_general.um_value LIKE '%s:15:\\\"hide_in_members\\\";b:0;%'{$profile_photo_where}{$cover_photo_where} )\";\n\t\t\t} else {\n\t\t\t\tif ( ! empty( $cover_photo_where ) || ! empty( $profile_photo_where ) ) {\n\t\t\t\t\tif ( ! $this->general_meta_joined ) {\n\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n\t\t\t\t\t\t$this->general_meta_joined = true;\n\t\t\t\t\t}\n\t\t\t\t\t$this->where_clauses[] = \"( umm_general.um_key = 'um_member_directory_data'{$profile_photo_where}{$cover_photo_where} )\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//$this->roles = array();\n\t\t\tif ( UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\t$view_roles = um_user( 'can_view_roles' );\n\n\t\t\t\tif ( ! $view_roles ) {\n\t\t\t\t\t$view_roles = array();\n\t\t\t\t}\n\n\t\t\t\t$this->roles = array_merge( $this->roles, maybe_unserialize( $view_roles ) );\n\t\t\t}\n\n\t\t\tif ( ! empty( $directory_data['roles'] ) ) {\n\t\t\t\tif ( ! empty( $this->roles ) ) {\n\t\t\t\t\t$this->roles = array_intersect( $this->roles, maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t} else {\n\t\t\t\t\t$this->roles = array_merge( $this->roles, maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! empty( $this->roles ) ) {\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\n\t\t\t\t$roles_clauses = array();\n\t\t\t\tforeach ( $this->roles as $role ) {\n\t\t\t\t\t$roles_clauses[] = $wpdb->prepare( 'umm_roles.um_value LIKE %s', '%\"' . $role . '\"%' );\n\t\t\t\t}\n\n\t\t\t\t$this->where_clauses[] = '( ' . implode( ' OR ', $roles_clauses ) . ' )';\n\t\t\t} else {\n\t\t\t\tif ( is_multisite() ) {\n\t\t\t\t\t// select users who have capabilities for current blog\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n\t\t\t\t\t$this->where_clauses[] = \"umm_roles.um_value IS NOT NULL\";\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\t$search_line = trim( stripslashes( $_POST['search'] ) );\n\n\t\t\t\t$searches = array();\n\t\t\t\tforeach ( $this->core_search_fields as $field ) {\n\t\t\t\t\t$searches[] = $wpdb->prepare( \"u.{$field} LIKE %s\", '%' . $search_line . '%' );\n\t\t\t\t}\n\n\t\t\t\t$core_search = implode( ' OR ', $searches );\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_search ON umm_search.user_id = u.ID\";\n\n\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm_search.um_value = %s OR umm_search.um_value LIKE %s OR umm_search.um_value LIKE %s OR {$core_search})\", $search_line, '%' . $search_line . '%', '%' . serialize( strval( $search_line ) ) . '%' );\n\n\t\t\t\t$this->is_search = true;\n\t\t\t}\n\n\n\t\t\t//filters\n\t\t\t$filter_query = array();\n\t\t\tif ( ! empty( $directory_data['search_fields'] ) ) {\n\t\t\t\t$search_filters = maybe_unserialize( $directory_data['search_fields'] );\n\t\t\t\tif ( ! empty( $search_filters ) && is_array( $search_filters ) ) {\n\t\t\t\t\t$filter_query = array_intersect_key( $_POST, array_flip( $search_filters ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// added for user tags extension integration on individual tag page\n\t\t\t$ignore_empty_filters = apply_filters( 'um_member_directory_ignore_empty_filters', false );\n\n\t\t\tif ( ! empty( $filter_query ) || $ignore_empty_filters ) {\n\t\t\t\t$this->is_search = true;\n\n\t\t\t\t$i = 1;\n\t\t\t\tforeach ( $filter_query as $field => $value ) {\n\n\t\t\t\t\t$attrs = UM()->fields()->get_field( $field );\n\t\t\t\t\t// skip private invisible fields\n\t\t\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->handle_filter_query( $directory_data, $field, $value, $i );\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//unable default filter in case if we select other filters in frontend filters\n\t\t\tif ( empty( $this->custom_filters_in_query ) ) {\n\t\t\t\t$default_filters = array();\n\t\t\t\tif ( ! empty( $directory_data['search_filters'] ) ) {\n\t\t\t\t\t$default_filters = maybe_unserialize( $directory_data['search_filters'] );\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $default_filters ) ) {\n\t\t\t\t\t$i = 1;\n\t\t\t\t\tforeach ( $default_filters as $field => $value ) {\n\n\t\t\t\t\t\t$this->handle_filter_query( $directory_data, $field, $value, $i, true );\n\n\t\t\t\t\t\t$i++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t$order = 'ASC';\n\t\t\t$sortby = ! empty( $_POST['sorting'] ) ? $_POST['sorting'] : $directory_data['sortby'];\n\n\t\t\t// handle sorting options\n\t\t\t// sort members by\n\t\t\tif ( $sortby == 'other' && $directory_data['sortby_custom'] ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$directory_data['sortby_custom']}' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\n\t\t\t} elseif ( 'display_name' == $sortby ) {\n\n\t\t\t\t$display_name = UM()->options()->get( 'display_name' );\n\t\t\t\tif ( $display_name == 'username' ) {\n\n\t\t\t\t\t$this->sql_order = \" ORDER BY u.user_login {$order} \";\n\n\t\t\t\t} else {\n\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = 'full_name' )\";\n\n\t\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order}, u.display_name {$order} \";\n\n\t\t\t\t}\n\n\t\t\t} elseif ( in_array( $sortby, array( 'last_name', 'first_name', 'nickname' ) ) ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$sortby}' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\n\t\t\t} elseif ( $sortby == 'last_login' ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '_um_last_login' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS NUMERIC ) {$order} \";\n\n\t\t\t} elseif ( $sortby == 'last_first_name' ) {\n\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = 'last_name' )\";\n\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort2 ON ( umm_sort2.user_id = u.ID AND umm_sort2.um_key = 'first_name' )\";\n\n\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) ASC, CAST( umm_sort2.um_value AS CHAR ) ASC \";\n\n\t\t\t} elseif ( $sortby == 'random' ) {\n\n\t\t\t\tif ( um_is_session_started() === false ) {\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\n\t\t\t\t// Reset seed on load of initial\n\t\t\t\tif ( empty( $_REQUEST['directory_id'] ) && isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\tunset( $_SESSION['um_member_directory_seed'] );\n\t\t\t\t}\n\n\t\t\t\t// Get seed from session variable if it exists\n\t\t\t\t$seed = false;\n\t\t\t\tif ( isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\t$seed = $_SESSION['um_member_directory_seed'];\n\t\t\t\t}\n\n\t\t\t\t// Set new seed if none exists\n\t\t\t\tif ( ! $seed ) {\n\t\t\t\t\t$seed = rand();\n\t\t\t\t\t$_SESSION['um_member_directory_seed'] = $seed;\n\t\t\t\t}\n\n\t\t\t\t$this->sql_order = 'ORDER by RAND(' . $seed . ')';\n\n\t\t\t} else {\n\n\t\t\t\tif ( strstr( $sortby, '_desc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_desc', '', $sortby );\n\t\t\t\t\t$order = 'DESC';\n\t\t\t\t}\n\n\t\t\t\tif ( strstr( $sortby, '_asc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_asc', '', $sortby );\n\t\t\t\t\t$order = 'ASC';\n\t\t\t\t}\n\n\t\t\t\t$metakeys = get_option( 'um_usermeta_fields', array() );\n\t\t\t\tif ( false !== array_search( $sortby, $metakeys ) ) {\n\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_sort ON ( umm_sort.user_id = u.ID AND umm_sort.um_key = '{$sortby}' )\";\n\t\t\t\t\t$this->sql_order = \" ORDER BY CAST( umm_sort.um_value AS CHAR ) {$order} \";\n\t\t\t\t} else {\n\t\t\t\t\t$this->sql_order = \" ORDER BY u.{$sortby} {$order} \";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->sql_order = apply_filters( 'um_modify_sortby_parameter_meta', $this->sql_order, $sortby );\n\n\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$query_number = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $profiles_per_page ) ? $directory_data['max_users'] : $profiles_per_page;\n\t\t\t$query_paged = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\n\t\t\t$number = $query_number;\n\t\t\tif ( ! empty( $directory_data['max_users'] ) && $query_paged*$query_number > $directory_data['max_users'] ) {\n\t\t\t\t$number = ( $query_paged*$query_number - ( $query_paged*$query_number - $directory_data['max_users'] ) ) % $query_number;\n\t\t\t}\n\n\t\t\t// limit\n\t\t\tif ( isset( $query_number ) && $query_number > 0 ) {\n\t\t\t\t$this->sql_limit .= $wpdb->prepare( 'LIMIT %d, %d', $query_number * ( $query_paged - 1 ), $number );\n\t\t\t}\n\n\t\t\tdo_action( 'um_pre_users_query', $this, $directory_data, $sortby );\n\n\t\t\t$sql_join = implode( ' ', $this->joins );\n\t\t\t$sql_where = implode( ' AND ', $this->where_clauses );\n\t\t\t$sql_where = ! empty( $sql_where ) ? ' AND ' . $sql_where : '';\n\n\t\t\tglobal $wpdb;\n\n\t\t\t/*var_dump( \"SELECT SQL_CALC_FOUND_ROWS DISTINCT u.ID\n\t\t\t\tFROM {$wpdb->users} AS u\n\t\t\t\t{$sql_join}\n\t\t\t\tWHERE 1=1 {$sql_where}\n\t\t\t\t{$this->sql_order}\n\t\t\t\t{$this->sql_limit}\" );*/\n\n\t\t\t$user_ids = $wpdb->get_col(\n\t\t\t\t\"SELECT SQL_CALC_FOUND_ROWS DISTINCT u.ID \n\t\t\t\tFROM {$wpdb->users} AS u\n\t\t\t\t{$sql_join}\n\t\t\t\tWHERE 1=1 {$sql_where}\n\t\t\t\t{$this->sql_order}\n\t\t\t\t{$this->sql_limit}\"\n\t\t\t);\n\n\t\t\t$total_users = (int) $wpdb->get_var( 'SELECT FOUND_ROWS()' );\n\n\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $total_users );\n\n\t\t\t$sizes = UM()->options()->get( 'cover_thumb_sizes' );\n\n\t\t\t$this->cover_size = UM()->mobile()->isTablet() ? $sizes[1] : end( $sizes );\n\n\t\t\t$avatar_size = UM()->options()->get( 'profile_photosize' );\n\t\t\t$this->avatar_size = str_replace( 'px', '', $avatar_size );\n\n\t\t\t$users = array();\n\t\t\tforeach ( $user_ids as $user_id ) {\n\t\t\t\t$users[] = $this->build_user_card_data( $user_id, $directory_data );\n\t\t\t}\n\n\t\t\tum_reset_user();\n\t\t\t// end of user card\n\n\t\t\twp_send_json_success( array( 'pagination' => $pagination_data, 'users' => $users, 'is_search' => $this->is_search ) );\n\t\t}\n\t}\n}", "<?php\nnamespace um\\core;\n\n\nif ( ! defined( 'ABSPATH' ) ) exit;\n\n\nif ( ! class_exists( 'um\\core\\Member_Directory' ) ) {\n\n\n\t/**\n\t * Class Member_Directory\n\t * @package um\\core\n\t */\n\tclass Member_Directory {\n\n\n\t\t/**\n\t\t * Member Directory Views\n\t\t *\n\t\t * @var array\n\t\t */\n\t\tvar $view_types = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $sort_fields = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $default_sorting = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $filter_fields = array();\n\n\n\t\t/**\n\t\t * @var array\n\t\t */\n\t\tvar $custom_filters_in_query = array();\n\n\n\n\t\tvar $filter_supported_fields = array();\n\n\n\t\tvar $filter_types = array();\n\n\n\t\tvar $core_search_fields = array(\n\t\t\t'user_login',\n\t\t\t'user_url',\n\t\t\t'display_name',\n\t\t\t'user_email',\n\t\t\t'user_nicename',\n\t\t);\n\n\n\t\t/**\n\t\t * @var\n\t\t */\n\t\tvar $query_args;\n\n\n\t\t/**\n\t\t * @var User Card cover size\n\t\t */\n\t\tvar $cover_size;\n\n\n\t\t/**\n\t\t * @var User Avatar size\n\t\t */\n\t\tvar $avatar_size;\n\n\n\t\t/**\n\t\t * @var bool Searching marker\n\t\t */\n\t\tvar $is_search = false;\n\n\n\t\t/**\n\t\t * Member_Directory constructor.\n\t\t */\n\t\tfunction __construct() {\n\t\t\tadd_filter( 'plugins_loaded', array( &$this, 'init_variables' ), 99999 );\n\t\t\tadd_filter( 'init', array( &$this, 'init_filter_types' ), 2 );\n\n\t\t\tadd_action( 'template_redirect', array( &$this, 'access_members' ), 555 );\n\t\t}\n\n\n\t\t/**\n\t\t * Getting member directory post ID via hash\n\t\t * Hash is unique attr, which we use visible at frontend\n\t\t *\n\t\t * @param string $hash\n\t\t *\n\t\t * @return bool|int\n\t\t */\n\t\tfunction get_directory_by_hash( $hash ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $wpdb->get_var( $wpdb->prepare( \"SELECT ID FROM {$wpdb->posts} WHERE SUBSTRING( MD5( ID ), 11, 5 ) = %s\", $hash ) );\n\n\t\t\tif ( empty( $directory_id ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn (int) $directory_id;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $id\n\t\t *\n\t\t * @return bool|string\n\t\t */\n\t\tfunction get_directory_hash( $id ) {\n\t\t\t$hash = substr( md5( $id ), 10, 5 );\n\t\t\treturn $hash;\n\t\t}\n\n\n\t\t/**\n\t\t * Get view Type template\n\t\t * @param string $type\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_type_basename( $type ) {\n\t\t\treturn apply_filters( \"um_member_directory_{$type}_type_template_basename\", '' );\n\t\t}\n\n\n\t\t/**\n\t\t * Tag conversion for member directory\n\t\t *\n\t\t * @param string $string\n\t\t * @param array $array\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction convert_tags( $string, $array ) {\n\n\t\t\t$search = array(\n\t\t\t\t'{total_users}',\n\t\t\t);\n\n\t\t\t$replace = array(\n\t\t\t\t$array['total_users'],\n\t\t\t);\n\n\t\t\t$string = str_replace( $search, $replace, $string );\n\t\t\treturn $string;\n\t\t}\n\n\n\t\t/**\n\t\t * Members page allowed?\n\t\t *\n\t\t * can be disabled by \"Enable Members Directory\" option\n\t\t *\n\t\t */\n\t\tfunction access_members() {\n\t\t\tif ( UM()->options()->get( 'members_page' ) == 0 && um_is_core_page( 'members' ) ) {\n\t\t\t\tum_redirect_home();\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param $value\n\t\t * @param $key\n\t\t * @param $post_id\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction before_save_data( $value, $key, $post_id ) {\n\n\t\t\t$post = get_post( $post_id );\n\n\t\t\tif ( $post->post_type == 'um_directory' ) {\n\n\t\t\t\tif ( ! empty( $value ) && in_array( $key, array( '_um_view_types', '_um_roles', '_um_roles_can_search', '_um_roles_can_filter' ) ) ) {\n\t\t\t\t\t$value = array_keys( $value );\n\t\t\t\t} elseif ( $key == '_um_search_filters' ) {\n\n\t\t\t\t\t$temp_value = array();\n\n\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\tforeach ( $value as $k ) {\n\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $k ];\n\t\t\t\t\t\t\tif ( ! empty( $filter_type  ) ) {\n\t\t\t\t\t\t\t\tif ( $filter_type == 'select' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = trim( $_POST[ $k ] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ( $filter_type == 'slider' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = $_POST[ $k ];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} elseif ( $filter_type == 'timepicker' || $filter_type == 'datepicker' ) {\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST[ $k . '_from' ] ) && ! empty( $_POST[ $k . '_to' ] ) ) {\n\t\t\t\t\t\t\t\t\t\t$temp_value[ $k ] = array( $_POST[ $k . '_from' ], $_POST[ $k . '_to' ] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$value = $temp_value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $value;\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_variables() {\n\n\t\t\t// Types\n\t\t\t$this->view_types = apply_filters( 'um_member_directory_views', array(\n\t\t\t\t'grid'  => array( 'title' => __( 'Grid', 'ultimate-member' ), 'icon' => 'um-faicon-th' ),\n\t\t\t\t'list'  => array( 'title' => __( 'List', 'ultimate-member' ), 'icon' => 'um-faicon-list' ),\n\t\t\t) );\n\n\t\t\t// Sort\n\t\t\t$this->sort_fields = apply_filters( 'um_members_directory_sort_fields', array(\n\t\t\t\t'user_registered_desc'  => __( 'New users first', 'ultimate-member' ),\n\t\t\t\t'user_registered_asc'   => __( 'Old users first', 'ultimate-member' ),\n\t\t\t\t'username'              => __( 'Username', 'ultimate-member' ),\n\t\t\t\t'nickname'              => __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t'first_name'            => __( 'First name', 'ultimate-member' ),\n\t\t\t\t'last_name'             => __( 'Last name', 'ultimate-member' ),\n\t\t\t\t'display_name'          => __( 'Display name', 'ultimate-member' ),\n\t\t\t\t'last_first_name'       => __( 'Last & First name', 'ultimate-member' ),\n\t\t\t\t'last_login'            => __( 'Last login', 'ultimate-member' ),\n\n\t\t\t) );\n\n\t\t\tasort( $this->sort_fields );\n\n\t\t\t$this->default_sorting = apply_filters( 'um_members_directory_default_sort', array_merge( $this->sort_fields, array(\n\t\t\t\t'random'    => __( 'Random', 'ultimate-member' ),\n\t\t\t\t'other'     => __( 'Other (Custom Field)', 'ultimate-member' ),\n\t\t\t) ) );\n\n\t\t\tasort( $this->default_sorting );\n\n\t\t\t// Filters\n\t\t\t$this->filter_fields = array(\n\t\t\t\t'country'               => __( 'Country', 'ultimate-member' ),\n\t\t\t\t'gender'                => __( 'Gender', 'ultimate-member' ),\n\t\t\t\t'languages'             => __( 'Languages', 'ultimate-member' ),\n\t\t\t\t'role'                  => __( 'Roles', 'ultimate-member' ),\n\t\t\t\t'birth_date'            => __( 'Age', 'ultimate-member' ),\n\t\t\t\t'last_login'            => __( 'Last Login', 'ultimate-member' ),\n\t\t\t\t'user_registered'       => __( 'User Registered', 'ultimate-member' ),\n\t\t\t\t'first_name'            => __( 'First Name', 'ultimate-member' ),\n\t\t\t\t'last_name'             => __( 'Last Name', 'ultimate-member' ),\n\t\t\t\t'nickname'              => __( 'Nickname', 'ultimate-member' ),\n\t\t\t\t'secondary_user_email'  => __( 'Secondary E-mail Address', 'ultimate-member' ),\n\t\t\t\t'description'           => __( 'Biography', 'ultimate-member' ),\n\t\t\t\t'phone_number'          => __( 'Phone Number', 'ultimate-member' ),\n\t\t\t\t'mobile_number'         => __( 'Mobile Number', 'ultimate-member' ),\n\t\t\t);\n\n\t\t\t$this->filter_supported_fields = apply_filters( 'um_members_directory_custom_field_types_supported_filter', array( 'date', 'time', 'select', 'multiselect', 'radio', 'checkbox', 'rating', 'text', 'textarea' ) );\n\n\t\t\tif ( ! empty( UM()->builtin()->saved_fields ) ) {\n\t\t\t\tforeach ( UM()->builtin()->saved_fields as $key => $data ) {\n\n\t\t\t\t\tif ( $key == '_um_last_login' ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $data['type'] ) && in_array( $data['type'], $this->filter_supported_fields ) ) {\n\t\t\t\t\t\tif ( isset( $data['title'] ) && array_search( $data['title'], $this->filter_fields ) !== false ) {\n\t\t\t\t\t\t\t$data['title'] = $data['title'] . ' (' . $key . ')';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$title = isset( $data['title'] ) ? $data['title'] : ( isset( $data['label'] ) ? $data['label'] : '' );\n\t\t\t\t\t\tif ( empty( $title ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->filter_fields[ $key ] = $title;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->filter_fields = apply_filters( 'um_members_directory_filter_fields', $this->filter_fields );\n\n\t\t\tksort( $this->filter_fields );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction init_filter_types() {\n\t\t\t$this->filter_types = apply_filters( 'um_members_directory_filter_types', array(\n\t\t\t\t'country'               => 'select',\n\t\t\t\t'gender'                => 'select',\n\t\t\t\t'languages'             => 'select',\n\t\t\t\t'role'                  => 'select',\n\t\t\t\t'birth_date'            => 'slider',\n\t\t\t\t'last_login'            => 'datepicker',\n\t\t\t\t'user_registered'       => 'datepicker',\n\t\t\t\t'first_name'            => 'text',\n\t\t\t\t'last_name'             => 'text',\n\t\t\t\t'nickname'              => 'text',\n\t\t\t\t'secondary_user_email'  => 'text',\n\t\t\t\t'description'           => 'text',\n\t\t\t\t'phone_number'          => 'text',\n\t\t\t\t'mobile_number'         => 'text',\n\t\t\t) );\n\n\t\t\t$fields = UM()->builtin()->all_user_fields;\n\n\t\t\t$custom_fields_types = array_flip( array_keys( $this->filter_fields ) );\n\t\t\tforeach ( $custom_fields_types as $key => &$value ) {\n\t\t\t\tif ( ! isset( $fields[ $key ] ) ) {\n\t\t\t\t\tunset( $custom_fields_types[ $key ] );\n\t\t\t\t} else {\n\t\t\t\t\tswitch ( $fields[ $key ]['type'] ) {\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$value = apply_filters( 'um_custom_field_filter_type', 'select', $fields[ $key ] );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tcase 'textarea':\n\t\t\t\t\t\t\t$value = 'text';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\t$value = 'datepicker';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'time':\n\t\t\t\t\t\t\t$value = 'timepicker';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\tcase 'multiselect':\n\t\t\t\t\t\tcase 'radio':\n\t\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\t\t\t$value = 'select';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t$value = 'slider';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->filter_types = array_merge( $custom_fields_types, $this->filter_types );\n\t\t}\n\n\n\t\t/**\n\t\t * Render member's directory\n\t\t * filters selectboxes\n\t\t *\n\t\t * @param string $filter\n\t\t * @param array $directory_data\n\t\t * @param mixed $default_value\n\t\t *\n\t\t * @return string $filter\n\t\t */\n\t\tfunction show_filter( $filter, $directory_data, $default_value = false ) {\n\n\t\t\tif ( empty( $this->filter_types[ $filter ] ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$field_key = $filter;\n\t\t\tif ( $filter == 'last_login' ) {\n\t\t\t\t$field_key = '_um_last_login';\n\t\t\t}\n\t\t\tif ( $filter == 'role' ) {\n\t\t\t\t$field_key = 'role_select';\n\t\t\t}\n\n\t\t\t$fields = UM()->builtin()->all_user_fields;\n\n\t\t\tif ( isset( $fields[ $field_key ] ) ) {\n\t\t\t\t$attrs = $fields[ $field_key ];\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_custom_search_field_{$filter}\n\t\t\t\t * @description Custom search settings by $filter\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"Search Settings\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage\n\t\t\t\t * <?php add_filter( 'um_custom_search_field_{$filter}', 'function_name', 10, 1 ); ?>\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_custom_search_field_{$filter}', 'my_custom_search_field', 10, 1 );\n\t\t\t\t * function my_change_email_template_file( $settings ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $settings;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$attrs = apply_filters( \"um_custom_search_field_{$filter}\", array(), $field_key );\n\t\t\t}\n\n\t\t\t// skip private invisible fields\n\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_search_fields\n\t\t\t * @description Filter all search fields\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$settings\",\"type\":\"array\",\"desc\":\"Search Fields\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_search_fields', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_search_fields', 'my_search_fields', 10, 1 );\n\t\t\t * function my_search_fields( $settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $settings;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$attrs = apply_filters( 'um_search_fields', $attrs, $field_key, $directory_data['form_id'] );\n\n\t\t\t$unique_hash = substr( md5( $directory_data['form_id'] ), 10, 5 );\n\n\t\t\tob_start();\n\n\t\t\tswitch ( $this->filter_types[ $filter ] ) {\n\t\t\t\tdefault: {\n\n\t\t\t\t\tdo_action( \"um_member_directory_filter_type_{$this->filter_types[ $filter ]}\", $filter, $this->filter_types );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'text': {\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? $_GET[ 'filter_' . $filter . '_' . $unique_hash ] : ''; ?>\n\n\t\t\t\t\t<input type=\"text\" autocomplete=\"off\" id=\"<?php echo $filter; ?>\" name=\"<?php echo $filter; ?>\"\n\t\t\t\t\t       placeholder=\"<?php esc_attr_e( stripslashes( $attrs['label'] ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t       value=\"<?php echo esc_attr( $filter_from_url ) ?>\" class=\"um-form-field\" />\n\n\t\t\t\t\t<?php break;\n\t\t\t\t}\n\t\t\t\tcase 'select': {\n\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? explode( '||', sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ) : array();\n\n\t\t\t\t\t// new\n\t\t\t\t\tglobal $wpdb;\n\n\t\t\t\t\tif ( $attrs['metakey'] != 'role_select' ) {\n\t\t\t\t\t\t$values_array = $wpdb->get_col(\n\t\t\t\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\t\t\t\"SELECT DISTINCT meta_value \n\t\t\t\t\t\t\t\tFROM $wpdb->usermeta \n\t\t\t\t\t\t\t\tWHERE meta_key = %s AND \n\t\t\t\t\t\t\t\t      meta_value != ''\",\n\t\t\t\t\t\t\t\t$attrs['metakey']\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$users_roles = count_users();\n\t\t\t\t\t\t$values_array = ( ! empty( $users_roles['avail_roles'] ) && is_array( $users_roles['avail_roles'] ) ) ? array_keys( array_filter( $users_roles['avail_roles'] ) ) : array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $values_array ) && in_array( $attrs['type'], array( 'select', 'multiselect', 'checkbox', 'radio' ) ) ) {\n\t\t\t\t\t\t$values_array = array_map( 'maybe_unserialize', $values_array );\n\t\t\t\t\t\t$temp_values = array();\n\t\t\t\t\t\tforeach ( $values_array as $values ) {\n\t\t\t\t\t\t\tif ( is_array( $values ) ) {\n\t\t\t\t\t\t\t\t$temp_values = array_merge( $temp_values, $values );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$temp_values[] = $values;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$values_array = array_unique( $temp_values );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( empty( $values_array ) ) {\n\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $attrs['metakey'] ) && strstr( $attrs['metakey'], 'role_' ) ) {\n\t\t\t\t\t\t$shortcode_roles = get_post_meta( $directory_data['form_id'], '_um_roles', true );\n\t\t\t\t\t\t$um_roles = UM()->roles()->get_roles( false );\n\n\t\t\t\t\t\tif ( ! empty( $shortcode_roles ) && is_array( $shortcode_roles ) ) {\n\t\t\t\t\t\t\t$attrs['options'] = array();\n\n\t\t\t\t\t\t\tforeach ( $um_roles as $key => $value ) {\n\t\t\t\t\t\t\t\tif ( in_array( $key, $shortcode_roles ) ) {\n\t\t\t\t\t\t\t\t\t$attrs['options'][ $key ] = $value;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$attrs['options'] = array();\n\n\t\t\t\t\t\t\tforeach ( $um_roles as $key => $value ) {\n\t\t\t\t\t\t\t\t$attrs['options'][ $key ] = $value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$custom_dropdown = '';\n\t\t\t\t\tif ( ! empty( $attrs['custom_dropdown_options_source'] ) ) {\n\t\t\t\t\t\t$attrs['custom'] = true;\n\n\t\t\t\t\t\tif ( ! empty( $attrs['parent_dropdown_relationship'] ) ) {\n\n\t\t\t\t\t\t\t$custom_dropdown .= ' data-member-directory=\"yes\"';\n\t\t\t\t\t\t\t$custom_dropdown .= ' data-um-parent=\"' . esc_attr( $attrs['parent_dropdown_relationship'] ) . '\"';\n\n\t\t\t\t\t\t\tif ( isset( $_GET[ 'filter_' . $attrs['parent_dropdown_relationship'] . '_' . $unique_hash ] ) ) {\n\t\t\t\t\t\t\t\t$_POST['parent_option_name'] = $attrs['parent_dropdown_relationship'];\n\t\t\t\t\t\t\t\t$_POST['parent_option'] = explode( '||', filter_input( INPUT_GET, 'filter_' . $attrs['parent_dropdown_relationship'] . '_' . $unique_hash ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$ajax_source = apply_filters( \"um_custom_dropdown_options_source__{$filter}\", $attrs['custom_dropdown_options_source'], $attrs );\n\t\t\t\t\t\t$custom_dropdown .= ' data-um-ajax-source=\"' . esc_attr( $ajax_source ) . '\" ';\n\n\t\t\t\t\t\t$attrs['options'] = UM()->fields()->get_options_from_callback( $attrs, $attrs['type'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $attrs['metakey'] != 'role_select' && empty( $custom_dropdown ) ) {\n\t\t\t\t\t\t$attrs['options'] = array_intersect( array_map( 'stripslashes', $attrs['options'] ), $values_array );\n\t\t\t\t\t} elseif ( ! empty( $custom_dropdown ) ) {\n\t\t\t\t\t\t$attrs['options'] = array_intersect_key( $attrs['options'], array_flip( $values_array ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$attrs['options'] = array_intersect_key( $attrs['options'], array_flip( $values_array ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$attrs['options'] = apply_filters( 'um_member_directory_filter_select_options', $attrs['options'], $values_array, $attrs );\n\n\t\t\t\t\tif ( empty( $attrs['options'] ) || ! is_array( $attrs['options'] ) ) {\n\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $attrs['custom_dropdown_options_source'] ) && ! empty( $attrs['parent_dropdown_relationship'] ) ) {\n\t\t\t\t\t\t$attrs['options'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $attrs['label'] ) ) {\n\t\t\t\t\t\t$attrs['label'] = strip_tags( $attrs['label'] );\n\t\t\t\t\t}\n\n\t\t\t\t\tksort( $attrs['options'] );\n\n\t\t\t\t\t$attrs['options'] = apply_filters( 'um_member_directory_filter_select_options_sorted', $attrs['options'], $attrs ); ?>\n\n\t\t\t\t\t<select class=\"um-s1\" id=\"<?php echo esc_attr( $filter ); ?>\" name=\"<?php echo esc_attr( $filter ); ?>\"\n\t\t\t\t\t        data-placeholder=\"<?php esc_attr_e( stripslashes( $attrs['label'] ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t<?php echo $custom_dropdown; ?>>\n\n\t\t\t\t\t\t<option></option>\n\n\t\t\t\t\t\t<?php if ( ! empty( $attrs['options'] ) ) {\n\t\t\t\t\t\t\tforeach ( $attrs['options'] as $k => $v ) {\n\n\t\t\t\t\t\t\t\t$v = stripslashes( $v );\n\n\t\t\t\t\t\t\t\t$opt = $v;\n\n\t\t\t\t\t\t\t\tif ( strstr( $filter, 'role_' ) || $filter == 'role' ) {\n\t\t\t\t\t\t\t\t\t$opt = $k;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( isset( $attrs['custom'] ) ) {\n\t\t\t\t\t\t\t\t\t$opt = $k;\n\t\t\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t\t\t\t<option value=\"<?php echo esc_attr( $opt ); ?>\" data-value_label=\"<?php esc_attr_e( $v, 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t\t\t\t<?php disabled( ! empty( $filter_from_url ) && in_array( $opt, $filter_from_url ) ) ?>\n\t\t\t\t\t\t\t\t\t<?php selected( $opt === $default_value ) ?>>\n\t\t\t\t\t\t\t\t\t<?php _e( $v, 'ultimate-member' ); ?>\n\t\t\t\t\t\t\t\t</option>\n\n\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t} ?>\n\n\t\t\t\t\t</select>\n\n\t\t\t\t\t<?php break;\n\t\t\t\t}\n\t\t\t\tcase 'slider': {\n\t\t\t\t\t$range = $this->slider_filters_range( $filter, $directory_data );\n\n\t\t\t\t\tlist( $single_placeholder, $plural_placeholder ) = $this->slider_range_placeholder( $filter, $attrs );\n\n\t\t\t\t\tif ( $range ) { ?>\n\t\t\t\t\t\t<input type=\"hidden\" id=\"<?php echo $filter; ?>_min\" name=\"<?php echo $filter; ?>[]\" class=\"um_range_min\" value=\"<?php echo ! empty( $default_value ) ? esc_attr( min( $default_value ) ) : '' ?>\" />\n\t\t\t\t\t\t<input type=\"hidden\" id=\"<?php echo $filter; ?>_max\" name=\"<?php echo $filter; ?>[]\" class=\"um_range_max\" value=\"<?php echo ! empty( $default_value ) ? esc_attr( max( $default_value ) ) : '' ?>\" />\n\t\t\t\t\t\t<div class=\"um-slider\" data-field_name=\"<?php echo $filter; ?>\" data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"></div>\n\t\t\t\t\t\t<div class=\"um-slider-range\" data-placeholder-s=\"<?php echo esc_attr( $single_placeholder ); ?>\" data-placeholder-p=\"<?php echo esc_attr( $plural_placeholder ); ?>\" data-label=\"<?php echo ( ! empty( $attrs['label'] ) ) ? esc_attr__( stripslashes( $attrs['label'] ), 'ultimate-member' ) : ''; ?>\"></div>\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'datepicker': {\n\n\t\t\t\t\t$range = $this->datepicker_filters_range( $filter );\n\n\t\t\t\t\t$label = ! empty( $attrs['label'] ) ? $attrs['label'] : $attrs['title'];\n\n\t\t\t\t\tif ( $range ) { ?>\n\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_from\" name=\"<?php echo $filter; ?>_from\" class=\"um-datepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s From', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-date_min=\"<?php echo $range[0] ?>\" data-date_max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"from\" data-value=\"<?php echo ! empty( $default_value ) ? esc_attr( strtotime( min( $default_value ) ) ) : '' ?>\" />\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_to\" name=\"<?php echo $filter; ?>_to\" class=\"um-datepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s To', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-date_min=\"<?php echo $range[0] ?>\" data-date_max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"to\" data-value=\"<?php echo ! empty( $default_value ) ? esc_attr( strtotime( max( $default_value ) ) ) : '' ?>\" />\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'timepicker': {\n\n\t\t\t\t\t$range = $this->timepicker_filters_range( $filter );\n\n\t\t\t\t\t$label = ! empty( $attrs['label'] ) ? $attrs['label'] : $attrs['title'];\n\n\t\t\t\t\tswitch ( $attrs['format'] ) {\n\t\t\t\t\t\tcase 'g:i a':\n\t\t\t\t\t\t\t$js_format = 'h:i a';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'g:i A':\n\t\t\t\t\t\t\t$js_format = 'h:i A';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'H:i':\n\t\t\t\t\t\t\t$js_format = 'HH:i';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $range ) { ?>\n\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_from\" name=\"<?php echo $filter; ?>_from\" class=\"um-timepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s From', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-format=\"<?php echo esc_attr( $js_format ) ?>\" data-intervals=\"<?php echo esc_attr( $attrs['intervals'] ) ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"from\" />\n\t\t\t\t\t\t<input type=\"text\" id=\"<?php echo $filter; ?>_to\" name=\"<?php echo $filter; ?>_to\" class=\"um-timepicker-filter\"\n\t\t\t\t\t\t       placeholder=\"<?php esc_attr_e( sprintf( '%s To', stripslashes( $label ) ), 'ultimate-member' ); ?>\"\n\t\t\t\t\t\t       data-filter-label=\"<?php echo esc_attr( stripslashes( $label ) ); ?>\"\n\t\t\t\t\t\t       data-min=\"<?php echo $range[0] ?>\" data-max=\"<?php echo $range[1] ?>\"\n\t\t\t\t\t\t       data-format=\"<?php echo esc_attr( $js_format ) ?>\" data-intervals=\"<?php echo esc_attr( $attrs['intervals'] ) ?>\"\n\t\t\t\t\t\t       data-filter_name=\"<?php echo $filter; ?>\" data-range=\"to\" />\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$filter = ob_get_clean();\n\t\t\treturn $filter;\n\t\t}\n\n\n\t\t/**\n\t\t * @param string $filter\n\t\t * @param array $directory_data\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction slider_filters_range( $filter, $directory_data ) {\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_slider\", $range, $directory_data );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'birth_date': {\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( \"SELECT DISTINCT meta_value FROM {$wpdb->usermeta} WHERE meta_key='birth_date' ORDER BY meta_value DESC\" );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( $this->borndate( strtotime( $meta[0] ) ), $this->borndate( strtotime( $meta[ count( $meta ) - 1 ] ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction slider_range_placeholder( $filter, $attrs ) {\n\t\t\tswitch ( $filter ) {\n\t\t\t\tdefault: {\n\t\t\t\t\t$label = ucwords( str_replace( array( 'um_', '_' ), array( '', ' ' ), $filter ) );\n\t\t\t\t\t$placeholders = apply_filters( 'um_member_directory_filter_slider_range_placeholder', false, $filter );\n\n\t\t\t\t\tif ( ! $placeholders ) {\n\t\t\t\t\t\tswitch ( $attrs['type'] ) {\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{value}\",\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{min_range} - {max_range}\",\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'rating':\n\t\t\t\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{value}\" . __( ' stars', 'ultimate-member' ),\n\t\t\t\t\t\t\t\t\t\"<strong>$label:</strong>&nbsp;{min_range} - {max_range}\" . __( ' stars', 'ultimate-member' )\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'birth_date': {\n\t\t\t\t\t$placeholders = array(\n\t\t\t\t\t\t__( '<strong>Age:</strong>&nbsp;{value} years old', 'ultimate-member' ),\n\t\t\t\t\t\t__( '<strong>Age:</strong>&nbsp;{min_range} - {max_range} years old', 'ultimate-member' )\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $placeholders;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction datepicker_filters_range( $filter ) {\n\t\t\tglobal $wpdb;\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( strtotime( min( $meta ) ), strtotime( max( $meta ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_datepicker\", $range );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'last_login': {\n\t\t\t\t\t$meta = $wpdb->get_col( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key='_um_last_login'\n\t\t\t\t\t\tORDER BY meta_value DESC\" );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'user_registered': {\n\t\t\t\t\t$meta = $wpdb->get_col(\n\t\t\t\t\t\t\"SELECT DISTINCT user_registered\n\t\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\t\tORDER BY user_registered DESC\"\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( strtotime( min( $meta ) ), strtotime( max( $meta ) ) );\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $filter\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction timepicker_filters_range( $filter ) {\n\n\t\t\tswitch ( $filter ) {\n\n\t\t\t\tdefault: {\n\n\t\t\t\t\tglobal $wpdb;\n\t\t\t\t\t$meta = $wpdb->get_col( $wpdb->prepare( \"SELECT DISTINCT meta_value\n\t\t\t\t\t\tFROM {$wpdb->usermeta}\n\t\t\t\t\t\tWHERE meta_key = %s\n\t\t\t\t\t\tORDER BY meta_value DESC\", $filter ) );\n\n\t\t\t\t\t$meta = array_filter( $meta );\n\n\t\t\t\t\tif ( empty( $meta ) || count( $meta ) === 1 ) {\n\t\t\t\t\t\t$range = false;\n\t\t\t\t\t} elseif ( ! empty( $meta ) ) {\n\t\t\t\t\t\t$range = array( min( $meta ), max( $meta ) );\n\t\t\t\t\t}\n\n\n\t\t\t\t\t$range = apply_filters( \"um_member_directory_filter_{$filter}_timepicker\", $range );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $range;\n\t\t}\n\n\n\t\t/**\n\t\t * @param $borndate\n\t\t *\n\t\t * @return false|string\n\t\t */\n\t\tfunction borndate( $borndate ) {\n\t\t\tif ( date('m', $borndate) > date('m') || date('m', $borndate) == date('m') && date('d', $borndate ) > date('d')) {\n\t\t\t\treturn (date('Y') - date('Y', $borndate ) - 1);\n\t\t\t}\n\t\t\treturn (date('Y') - date('Y', $borndate));\n\t\t}\n\n\n\t\t/**\n\t\t * Handle members can view restrictions\n\t\t */\n\t\tfunction restriction_options() {\n\t\t\t$this->hide_not_approved();\n\t\t\t$this->hide_by_role();\n\t\t\t$this->hide_by_account_settings();\n\n\t\t\tdo_action( 'um_member_directory_restrictions_handle_extend' );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_not_approved() {\n\t\t\tif ( UM()->roles()->um_user_can( 'can_edit_everyone' )  ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t'value'     => 's:14:\"account_status\";s:8:\"approved\";',\n\t\t\t\t'compare'   => 'LIKE'\n\t\t\t) ) );\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_by_role() {\n\t\t\t$roles = um_user( 'can_view_roles' );\n\t\t\t$roles = maybe_unserialize( $roles );\n\n\t\t\tif ( empty( $roles ) || ! UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t$this->query_args['role__in'] = array_intersect( $this->query_args['role__in'], $roles );\n\t\t\t} else {\n\t\t\t\t$this->query_args['role__in'] = $roles;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction hide_by_account_settings() {\n\t\t\tif ( ! UM()->options()->get( 'account_hide_in_directory' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( UM()->roles()->um_user_can( 'can_edit_everyone' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t'value'     => 's:15:\"hide_in_members\";b:0;',\n\t\t\t\t'compare'   => 'LIKE'\n\t\t\t) ) );\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"General Options\" metabox settings\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction general_options( $directory_data ) {\n\t\t\t$this->show_selected_roles( $directory_data );\n\t\t\t$this->show_only_with_avatar( $directory_data );\n\t\t\t$this->show_only_with_cover( $directory_data );\n\t\t\t$this->show_only_these_users( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_general_options_handle_extend', $directory_data );\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"User Roles to Display\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_selected_roles( $directory_data ) {\n\t\t\t// add roles to appear in directory\n\t\t\tif ( ! empty( $directory_data['roles'] ) ) {\n\t\t\t\t//since WP4.4 use 'role__in' argument\n\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t$this->query_args['role__in'] = array_intersect( $this->query_args['role__in'], maybe_unserialize( $directory_data['roles'] ) );\n\t\t\t\t} else {\n\t\t\t\t\t$this->query_args['role__in'] = maybe_unserialize( $directory_data['roles'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show members who have uploaded a profile photo\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_with_avatar( $directory_data ) {\n\t\t\tif ( $directory_data['has_profile_photo'] == 1 ) {\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t\t'value'     => 's:13:\"profile_photo\";b:1;',\n\t\t\t\t\t'compare'   => 'LIKE'\n\t\t\t\t) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show members who have uploaded a cover photo\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_with_cover( $directory_data ) {\n\t\t\tif ( $directory_data['has_cover_photo'] == 1 ) {\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( array(\n\t\t\t\t\t'key'       => 'um_member_directory_data',\n\t\t\t\t\t'value'     => 's:11:\"cover_photo\";b:1;',\n\t\t\t\t\t'compare'   => 'LIKE'\n\t\t\t\t) ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Only show specific users (Enter one username per line)\" option\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction show_only_these_users( $directory_data ) {\n\t\t\tif ( ! empty( $directory_data['show_these_users'] ) ) {\n\t\t\t\t$show_these_users = maybe_unserialize( $directory_data['show_these_users'] );\n\n\t\t\t\tif ( is_array( $show_these_users ) && ! empty( $show_these_users ) ) {\n\n\t\t\t\t\t$users_array = array();\n\n\t\t\t\t\tforeach ( $show_these_users as $username ) {\n\t\t\t\t\t\tif ( false !== ( $exists_id = username_exists( $username ) ) ) {\n\t\t\t\t\t\t\t$users_array[] = $exists_id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $users_array ) ) {\n\t\t\t\t\t\t$this->query_args['include'] = $users_array;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Handle \"Pagination Options\" metabox settings\n\t\t *\n\t\t * @param array $directory_data\n\t\t */\n\t\tfunction pagination_options( $directory_data ) {\n\t\t\t// number of profiles for mobile\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$this->query_args['number'] = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $profiles_per_page ) ? $directory_data['max_users'] : $profiles_per_page;\n\t\t\t$this->query_args['paged'] = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\t\t}\n\n\n\t\t/**\n\t\t * Add sorting attributes for \\WP_Users_Query\n\t\t *\n\t\t * @param array $directory_data Member Directory options\n\t\t */\n\t\tfunction sorting_query( $directory_data ) {\n\t\t\t// sort members by\n\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t$sortby = ! empty( $_POST['sorting'] ) ? $_POST['sorting'] : $directory_data['sortby'];\n\n\t\t\tif ( $sortby == 'other' && $directory_data['sortby_custom'] ) {\n\n\t\t\t\t$this->query_args['meta_key'] = $directory_data['sortby_custom'];\n\t\t\t\t$this->query_args['orderby'] = 'meta_value, display_name';\n\n\t\t\t} elseif ( 'display_name' == $sortby ) {\n\n\t\t\t\t$display_name = UM()->options()->get( 'display_name' );\n\t\t\t\tif ( $display_name == 'username' ) {\n\t\t\t\t\t$this->query_args['orderby'] = 'user_login';\n\t\t\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t\t} else {\n\t\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t'full_name' => array(\n\t\t\t\t\t\t\t'key'       => 'full_name',\n\t\t\t\t\t\t\t'compare'   => 'EXISTS'\n\t\t\t\t\t\t),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'key'       => 'full_name',\n\t\t\t\t\t\t\t'compare'   => 'NOT EXISTS'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t$this->query_args['orderby'] = 'full_name, display_name';\n\t\t\t\t\t$this->query_args['order'] = 'ASC';\n\t\t\t\t}\n\n\t\t\t} elseif ( in_array( $sortby, array( 'last_name', 'first_name', 'nickname' ) ) ) {\n\n\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $sortby . '_c' => array(\n\t\t\t\t\t'key'       => $sortby,\n\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t), ) );\n\n\t\t\t\t$this->query_args['orderby'] = array( $sortby . '_c' => 'ASC' );\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} elseif ( $sortby == 'last_login' ) {\n\n\t\t\t\t$this->query_args['orderby'] = array( 'um_last_login' => 'DESC' );\n\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'key'   => '_um_last_login',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t\t'um_last_login' => array(\n\t\t\t\t\t\t'key'   => '_um_last_login',\n\t\t\t\t\t\t'compare'   => 'NOT EXISTS',\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} elseif ( $sortby == 'last_first_name' ) {\n\n\t\t\t\t$this->query_args['meta_query'][] = array(\n\t\t\t\t\t'last_name_c'   => array(\n\t\t\t\t\t\t'key'       => 'last_name',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t\t'first_name_c'  => array(\n\t\t\t\t\t\t'key'       => 'first_name',\n\t\t\t\t\t\t'compare'   => 'EXISTS',\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t$this->query_args['orderby'] = array( 'last_name_c' => 'ASC', 'first_name_c' => 'ASC' );\n\t\t\t\tunset( $this->query_args['order'] );\n\n\t\t\t} else {\n\n\t\t\t\tif ( strstr( $sortby, '_desc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_desc', '', $sortby );\n\t\t\t\t\t$order = 'DESC';\n\t\t\t\t}\n\n\t\t\t\tif ( strstr( $sortby, '_asc' ) ) {\n\t\t\t\t\t$sortby = str_replace( '_asc', '', $sortby );\n\t\t\t\t\t$order = 'ASC';\n\t\t\t\t}\n\n\t\t\t\t$this->query_args['orderby'] = $sortby;\n\t\t\t\tif ( isset( $order ) ) {\n\t\t\t\t\t$this->query_args['order'] = $order;\n\t\t\t\t}\n\n\t\t\t\tadd_filter( 'pre_user_query', array( &$this, 'sortby_randomly' ), 10, 1 );\n\t\t\t}\n\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_modify_sortby_parameter\n\t\t\t * @description Change query sort by attributes for search at Members Directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query Arguments\"},\n\t\t\t * {\"var\":\"$sortby\",\"type\":\"string\",\"desc\":\"Sort by\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_modify_sortby_parameter', 'function_name', 10, 2 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_modify_sortby_parameter', 'my_modify_sortby_parameter', 10, 2 );\n\t\t\t * function my_modify_sortby_parameter( $query_args, $sortby ) {\n\t\t\t *     // your code here\n\t\t\t *     return $query_args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->query_args = apply_filters( 'um_modify_sortby_parameter', $this->query_args, $sortby );\n\t\t}\n\n\n\t\t/**\n\t\t * Sorting random\n\t\t *\n\t\t * @param object $query\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction sortby_randomly( $query ) {\n\t\t\tif ( 'random' == $query->query_vars['orderby'] ) {\n\n\t\t\t\tif ( um_is_session_started() === false ) {\n\t\t\t\t\t@session_start();\n\t\t\t\t}\n\n\t\t\t\t// Reset seed on load of initial\n\t\t\t\tif ( empty( $_REQUEST['directory_id'] ) && isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\tunset( $_SESSION['um_member_directory_seed'] );\n\t\t\t\t}\n\n\t\t\t\t// Get seed from session variable if it exists\n\t\t\t\t$seed = false;\n\t\t\t\tif ( isset( $_SESSION['um_member_directory_seed'] ) ) {\n\t\t\t\t\t$seed = $_SESSION['um_member_directory_seed'];\n\t\t\t\t}\n\n\t\t\t\t// Set new seed if none exists\n\t\t\t\tif ( ! $seed ) {\n\t\t\t\t\t$seed = rand();\n\t\t\t\t\t$_SESSION['um_member_directory_seed'] = $seed;\n\t\t\t\t}\n\n\t\t\t\t$query->query_orderby = 'ORDER by RAND(' . $seed . ')';\n\t\t\t}\n\n\t\t\treturn $query;\n\t\t}\n\n\n\n\t\t/**\n\t\t * Handle general search line request\n\t\t */\n\t\tfunction general_search() {\n\t\t\t//general search\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\t// complex using with change_meta_sql function\n\n\t\t\t\t$meta_query = array(\n\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( stripslashes( $_POST['search'] ) ),\n\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( stripslashes( $_POST['search'] ) ),\n\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'value'     => trim( serialize( strval( stripslashes( $_POST['search'] ) ) ) ),\n\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t),\n\t\t\t\t);\n\n\t\t\t\t$meta_query = apply_filters( 'um_member_directory_general_search_meta_query', $meta_query, stripslashes( $_POST['search'] ) );\n\n\t\t\t\t$this->query_args['meta_query'][] = $meta_query;\n\n\t\t\t\t$this->is_search = true;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Change mySQL meta query join attribute\n\t\t * for search only by UM user meta fields and WP core fields in WP Users table\n\t\t *\n\t\t * @param array $sql Array containing the query's JOIN and WHERE clauses.\n\t\t * @param $queries\n\t\t * @param $type\n\t\t * @param $primary_table\n\t\t * @param $primary_id_column\n\t\t * @param \\WP_User_Query $context\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction change_meta_sql( $sql, $queries, $type, $primary_table, $primary_id_column, $context ) {\n\t\t\tif ( ! empty( $_POST['search'] ) ) {\n\t\t\t\tglobal $wpdb;\n\t\t\t\t$search = trim( stripslashes( $_POST['search'] ) );\n\t\t\t\tif ( ! empty( $search ) ) {\n\n\t\t\t\t\t$meta_value = '%' . $wpdb->esc_like( $search ) . '%';\n\t\t\t\t\t$search_meta      = $wpdb->prepare( '%s', $meta_value );\n\n\t\t\t\t\tpreg_match(\n\t\t\t\t\t\t'/^(.*).meta_value LIKE ' . addslashes( $search_meta ) . '[^\\)]/im',\n\t\t\t\t\t\t$sql['where'],\n\t\t\t\t\t\t$join_matches\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( isset( $join_matches[1] ) ) {\n\t\t\t\t\t\t$meta_join_for_search = trim( $join_matches[1] );\n\n\t\t\t\t\t\t// skip private invisible fields\n\t\t\t\t\t\t$custom_fields = array();\n\t\t\t\t\t\tforeach ( array_keys( UM()->builtin()->all_user_fields ) as $field_key ) {\n\t\t\t\t\t\t\t$data = UM()->fields()->get_field( $field_key );\n\t\t\t\t\t\t\tif ( ! um_can_view_field( $data ) ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$custom_fields[] = $field_key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$sql['join'] = preg_replace(\n\t\t\t\t\t\t\t'/(' . $meta_join_for_search . ' ON \\( ' . $wpdb->users . '\\.ID = ' . $meta_join_for_search . '\\.user_id )(\\))/im',\n\t\t\t\t\t\t\t\"$1 AND \" . $meta_join_for_search . \".meta_key IN( '\" . implode( \"','\", $custom_fields ) . \"' ) $2\",\n\t\t\t\t\t\t\t$sql['join']\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add OR instead AND to search in WP core fields user_email, user_login, user_display_name\n\t\t\t\t\t$search_where = $context->get_search_sql( $search, $this->core_search_fields, 'both' );\n\n\t\t\t\t\t$search_where = preg_replace( '/ AND \\((.*?)\\)/im', \"$1 OR\", $search_where );\n\n\t\t\t\t\t$sql['where'] = preg_replace(\n\t\t\t\t\t\t'/(' . $meta_join_for_search . '.meta_value = \\'' . esc_attr( $search ) . '\\')/im',\n\t\t\t\t\t\ttrim( $search_where ) . \" $1\",\n\t\t\t\t\t\t$sql['where'],\n\t\t\t\t\t\t1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $sql;\n\t\t}\n\n\n\t\t/**\n\t\t * Handle filters request\n\t\t */\n\t\tfunction filters( $directory_data ) {\n\t\t\t//filters\n\t\t\t$filter_query = array();\n\t\t\tif ( ! empty( $directory_data['search_fields'] ) ) {\n\t\t\t\t$search_filters = maybe_unserialize( $directory_data['search_fields'] );\n\t\t\t\tif ( ! empty( $search_filters ) && is_array( $search_filters ) ) {\n\t\t\t\t\t$filter_query = array_intersect_key( $_POST, array_flip( $search_filters ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// added for user tags extension integration on individual tag page\n\t\t\t$ignore_empty_filters = apply_filters( 'um_member_directory_ignore_empty_filters', false );\n\n\t\t\tif ( empty( $filter_query ) && ! $ignore_empty_filters ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->is_search = true;\n\t\t\tforeach ( $filter_query as $field => $value ) {\n\n\t\t\t\t$attrs = UM()->fields()->get_field( $field );\n\t\t\t\t// skip private invisible fields\n\t\t\t\tif ( ! um_can_view_field( $attrs ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tswitch ( $field ) {\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'text':\n\n\t\t\t\t\t\t\t\t\t$value = stripslashes( $value );\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $value ),\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array( 'relation' => 'OR' );\n\n\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n\n\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query = array(\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $single_val ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( strval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => '\"' . trim( $single_val ) . '\"',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query[] = array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( intval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t$field_query = array_merge( $field_query, $arr_meta_query );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value[0],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t\t'type'      => 'TIME',\n\t\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t\t\t$default_role = array_intersect( $this->query_args['role__in'], $value );\n\t\t\t\t\t\t\t$um_role = array_diff( $value, $default_role );\n\n\t\t\t\t\t\t\tforeach ( $um_role as $key => &$val ) {\n\t\t\t\t\t\t\t\t$val = 'um_' . str_replace( ' ', '-', $val );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$this->query_args['role__in'] = array_merge( $default_role, $um_role );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = $value;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $this->query_args['role__in'];\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'birth_date':\n\n\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) - 1 ) );\n\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => 'birth_date',\n\t\t\t\t\t\t\t\t'value'     => array( $to_date, $from_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'type'      => 'DATE',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_registered':\n\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t$date_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'column'    => 'user_registered',\n\t\t\t\t\t\t\t\t'before'    => $to_date,\n\t\t\t\t\t\t\t\t'after'     => $from_date,\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( empty( $this->query_args['date_query'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = $date_query;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = array_merge( $this->query_args['date_query'], array( $date_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'last_login':\n\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_last_login',\n\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Set default filters\n\t\t *\n\t\t * @param $directory_data\n\t\t */\n\t\tfunction default_filters( $directory_data ) {\n\t\t\t//unable default filter in case if we select other filters in frontend filters\n\t\t\tif ( ! empty( $this->custom_filters_in_query ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$default_filters = array();\n\t\t\tif ( ! empty( $directory_data['search_filters'] ) ) {\n\t\t\t\t$default_filters = maybe_unserialize( $directory_data['search_filters'] );\n\t\t\t}\n\n\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n\n\t\t\tif ( empty( $default_filters ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tforeach ( $default_filters as $field => $value ) {\n\t\t\t\t//unable default filter in case if we select other value in frontend filters\n//\t\t\t\tif ( in_array( $field, array_keys( $this->custom_filters_in_query ) ) ) {\n//\t\t\t\t\tcontinue;\n//\t\t\t\t}\n\n\t\t\t\tswitch ( $field ) {\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $field_query;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\tif ( ! $field_query ) {\n\n\t\t\t\t\t\t\tswitch ( $filter_type ) {\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'select':\n\t\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t\t\t\t\t\t$value = array( $value );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$field_query = array( 'relation' => 'OR' );\n\n\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n\t\t\t\t\t\t\t\t\t\t$arr_meta_query = array(\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => trim( $single_val ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => '=',\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( strval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => '\"' . trim( $single_val ) . '\"',\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t$arr_meta_query[] = array(\n\t\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t\t'value'     => serialize( intval( trim( $single_val ) ) ),\n\t\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'LIKE',\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t$field_query = array_merge( $field_query, $arr_meta_query );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'slider':\n\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'datepicker':\n\n\t\t\t\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'timepicker':\n\n\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value[0],\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$field_query = array(\n\t\t\t\t\t\t\t\t\t\t\t'key'       => $field,\n\t\t\t\t\t\t\t\t\t\t\t'value'     => $value,\n\t\t\t\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t\t\t\t'type'      => 'TIME',\n\t\t\t\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'role':\n\t\t\t\t\t\t$value = explode( '||', $value );\n\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n\n\t\t\t\t\t\tif ( ! empty( $this->query_args['role__in'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = is_array( $this->query_args['role__in'] ) ? $this->query_args['role__in'] : array( $this->query_args['role__in'] );\n\t\t\t\t\t\t\t$default_role = array_intersect( $this->query_args['role__in'], $value );\n\t\t\t\t\t\t\t$um_role = array_diff( $value, $default_role );\n\n\t\t\t\t\t\t\tforeach ( $um_role as $key => &$val ) {\n\t\t\t\t\t\t\t\t$val = 'um_' . str_replace( ' ', '-', $val );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$this->query_args['role__in'] = array_merge( $default_role, $um_role );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['role__in'] = $value;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'birth_date':\n\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => 'birth_date',\n\t\t\t\t\t\t\t\t'value'     => array( $to_date, $from_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'type'      => 'DATE',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'user_registered':\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n\n\t\t\t\t\t\t$date_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'column'    => 'user_registered',\n\t\t\t\t\t\t\t\t'before'    => $to_date,\n\t\t\t\t\t\t\t\t'after'     => $from_date,\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( empty( $this->query_args['date_query'] ) ) {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = $date_query;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$this->query_args['date_query'] = array_merge( $this->query_args['date_query'], array( $date_query ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'last_login':\n\t\t\t\t\t\t$offset = 0;\n\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n\t\t\t\t\t\t\t$offset = $gmt_offset;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n\t\t\t\t\t\t$meta_query = array(\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'key'       => '_um_last_login',\n\t\t\t\t\t\t\t\t'value'     =>  array( $from_date, $to_date ),\n\t\t\t\t\t\t\t\t'compare'   => 'BETWEEN',\n\t\t\t\t\t\t\t\t'inclusive' => true,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $meta_query ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Get data array for pagination\n\t\t *\n\t\t *\n\t\t * @param array $directory_data\n\t\t * @param int $total_users\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction calculate_pagination( $directory_data, $total_users ) {\n\n\t\t\t$current_page = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n\n\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $total_users ) ? $directory_data['max_users'] : $total_users;\n\n\t\t\t// number of profiles for mobile\n\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n\t\t\t}\n\n\t\t\t$total_pages = 1;\n\t\t\tif ( ! empty( $profiles_per_page ) ) {\n\t\t\t\t$total_pages = ceil( $total_users / $profiles_per_page );\n\t\t\t}\n\n\t\t\tif ( ! empty( $total_pages ) ) {\n\t\t\t\t$index1 = 0 - ( $current_page - 2 ) + 1;\n\t\t\t\t$to = $current_page + 2;\n\t\t\t\tif ( $index1 > 0 ) {\n\t\t\t\t\t$to += $index1;\n\t\t\t\t}\n\n\t\t\t\t$index2 = $total_pages - ( $current_page + 2 );\n\t\t\t\t$from = $current_page - 2;\n\t\t\t\tif ( $index2 < 0 ) {\n\t\t\t\t\t$from += $index2;\n\t\t\t\t}\n\n\t\t\t\t$pages_to_show = range(\n\t\t\t\t\t( $from > 0 ) ? $from : 1,\n\t\t\t\t\t( $to <= $total_pages ) ? $to : $total_pages\n\t\t\t\t);\n\t\t\t}\n\n\n\t\t\t$pagination_data = array(\n\t\t\t\t'pages_to_show' => ( ! empty( $pages_to_show ) && count( $pages_to_show ) > 1 ) ? array_values( $pages_to_show ) : array(),\n\t\t\t\t'current_page'  => $current_page,\n\t\t\t\t'total_pages'   => $total_pages,\n\t\t\t\t'total_users'   => $total_users,\n\t\t\t);\n\n\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n\n\t\t\treturn $pagination_data;\n\t\t}\n\n\n\t\t/**\n\t\t * @param int $user_id\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction build_user_actions_list( $user_id ) {\n\n\t\t\t$actions = array();\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn $actions;\n\t\t\t}\n\n\t\t\tif ( get_current_user_id() != $user_id ) {\n\n\t\t\t\tif ( UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n\t\t\t\t\t$actions['um-editprofile'] = array(\n\t\t\t\t\t\t'title' => __( 'Edit Profile', 'ultimate-member' ),\n\t\t\t\t\t\t'url' => um_edit_profile_url(),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * UM hook\n\t\t\t\t *\n\t\t\t\t * @type filter\n\t\t\t\t * @title um_admin_user_actions_hook\n\t\t\t\t * @description Extend admin actions for each user\n\t\t\t\t * @input_vars\n\t\t\t\t * [{\"var\":\"$actions\",\"type\":\"array\",\"desc\":\"Actions for user\"}]\n\t\t\t\t * @change_log\n\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t * @usage\n\t\t\t\t * <?php add_filter( 'um_admin_user_actions_hook', 'function_name', 10, 1 ); ?>\n\t\t\t\t * @example\n\t\t\t\t * <?php\n\t\t\t\t * add_filter( 'um_admin_user_actions_hook', 'my_admin_user_actions', 10, 1 );\n\t\t\t\t * function my_admin_user_actions( $actions ) {\n\t\t\t\t *     // your code here\n\t\t\t\t *     return $actions;\n\t\t\t\t * }\n\t\t\t\t * ?>\n\t\t\t\t */\n\t\t\t\t$admin_actions = apply_filters( 'um_admin_user_actions_hook', array(), $user_id );\n\t\t\t\tif ( ! empty( $admin_actions ) ) {\n\t\t\t\t\tforeach ( $admin_actions as $id => $arr ) {\n\t\t\t\t\t\t$url = add_query_arg( array( 'um_action' => $id, 'uid' => $user_id ), um_get_core_page( 'user' ) );\n\n\t\t\t\t\t\t$actions[ $id ] = array(\n\t\t\t\t\t\t\t'title' => $arr['label'],\n\t\t\t\t\t\t\t'url'   => $url,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$actions = apply_filters( 'um_member_directory_users_card_actions', $actions, $user_id );\n\n\t\t\t} else {\n\n\t\t\t\tif ( empty( UM()->user()->cannot_edit ) ) {\n\t\t\t\t\t$actions['um-editprofile'] = array(\n\t\t\t\t\t\t'title' => __( 'Edit Profile', 'ultimate-member' ),\n\t\t\t\t\t\t'url'   => um_edit_profile_url(),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$actions['um-myaccount'] = array(\n\t\t\t\t\t'title' => __( 'My Account', 'ultimate-member' ),\n\t\t\t\t\t'url'   => um_get_core_page( 'account' ),\n\t\t\t\t);\n\n\t\t\t\t$actions['um-logout'] = array(\n\t\t\t\t\t'title' => __( 'Logout', 'ultimate-member' ),\n\t\t\t\t\t'url'   => um_get_core_page( 'logout' ),\n\t\t\t\t);\n\n\t\t\t\t$actions = apply_filters( 'um_member_directory_my_user_card_actions', $actions, $user_id );\n\t\t\t}\n\n\n\t\t\treturn $actions;\n\t\t}\n\n\n\t\t/**\n\t\t * @param int $user_id\n\t\t * @param array $directory_data\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction build_user_card_data( $user_id, $directory_data ) {\n\n\t\t\tum_fetch_user( $user_id );\n\n\t\t\t$dropdown_actions = $this->build_user_actions_list( $user_id );\n\n\t\t\t$actions = array();\n\t\t\t$can_edit = UM()->roles()->um_current_user_can( 'edit', $user_id ) || UM()->roles()->um_user_can( 'can_edit_everyone' );\n\n\t\t\t// Replace hook 'um_members_just_after_name'\n\t\t\tob_start();\n\t\t\tdo_action( 'um_members_just_after_name', $user_id, $directory_data );\n\t\t\t$hook_just_after_name = ob_get_clean();\n\n\t\t\t// Replace hook 'um_members_after_user_name'\n\t\t\tob_start();\n\t\t\tdo_action( 'um_members_after_user_name', $user_id, $directory_data );\n\t\t\t$hook_after_user_name = ob_get_clean();\n\n\t\t\t$data_array = array(\n\t\t\t\t'card_anchor'           => substr( md5( $user_id ), 10, 5 ),\n\t\t\t\t'id'                    => $user_id,\n\t\t\t\t'role'                  => um_user( 'role' ),\n\t\t\t\t'account_status'        => um_user( 'account_status' ),\n\t\t\t\t'account_status_name'   => um_user( 'account_status_name' ),\n\t\t\t\t'cover_photo'           => um_user( 'cover_photo', $this->cover_size ),\n\t\t\t\t'display_name'          => um_user( 'display_name' ),\n\t\t\t\t'profile_url'           => um_user_profile_url(),\n\t\t\t\t'can_edit'              => $can_edit,\n\t\t\t\t'edit_profile_url'      => um_edit_profile_url(),\n\t\t\t\t'avatar'                => get_avatar( $user_id, $this->avatar_size ),\n\t\t\t\t'display_name_html'     => um_user( 'display_name', 'html' ),\n\t\t\t\t'dropdown_actions'      => $dropdown_actions,\n\t\t\t\t'hook_just_after_name'  => preg_replace( '/^\\s+/im', '', $hook_just_after_name ),\n\t\t\t\t'hook_after_user_name'  => preg_replace( '/^\\s+/im', '', $hook_after_user_name ),\n\t\t\t);\n\n\t\t\t$directory_data['tagline_fields'] = maybe_unserialize( $directory_data['tagline_fields'] );\n\n\t\t\tif ( $directory_data['show_tagline'] && is_array( $directory_data['tagline_fields'] ) ) {\n\t\t\t\tforeach ( $directory_data['tagline_fields'] as $key ) {\n\t\t\t\t\tif ( ! $key ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$value = um_filtered_value( $key );\n\n\t\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data_array[ $key ] = $value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $directory_data['show_userinfo'] ) {\n\t\t\t\t$directory_data['reveal_fields'] = maybe_unserialize( $directory_data['reveal_fields'] );\n\n\t\t\t\tif ( is_array( $directory_data['reveal_fields'] ) ) {\n\t\t\t\t\tforeach ( $directory_data['reveal_fields'] as $key ) {\n\t\t\t\t\t\tif ( ! $key ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$value = um_filtered_value( $key );\n\t\t\t\t\t\tif ( ! $value ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$label = UM()->fields()->get_label( $key );\n\t\t\t\t\t\tif ( $key == 'role_select' || $key == 'role_radio' ) {\n\t\t\t\t\t\t\t$label = strtr( $label, array(\n\t\t\t\t\t\t\t\t' (Dropdown)'   => '',\n\t\t\t\t\t\t\t\t' (Radio)'      => ''\n\t\t\t\t\t\t\t) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$data_array[ \"label_{$key}\" ] = $label;\n\t\t\t\t\t\t$data_array[ $key ] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $directory_data['show_social'] ) ) {\n\t\t\t\t\tob_start();\n\t\t\t\t\tUM()->fields()->show_social_urls();\n\t\t\t\t\t$social_urls = ob_get_clean();\n\n\t\t\t\t\t$data_array['social_urls'] = $social_urls;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$data_array = apply_filters( 'um_ajax_get_members_data', $data_array, $user_id, $directory_data );\n\n\t\t\tum_reset_user_clean();\n\n\t\t\treturn $data_array;\n\t\t}\n\n\n\t\t/**\n\t\t * Update limit query\n\t\t *\n\t\t * @param $user_query\n\t\t */\n\t\tfunction pagination_changes( $user_query ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t$qv = $user_query->query_vars;\n\n\t\t\t$number = $qv['number'];\n\t\t\tif ( ! empty( $directory_data['max_users'] ) && $qv['paged']*$qv['number'] > $directory_data['max_users'] ) {\n\t\t\t\t$number = ( $qv['paged']*$qv['number'] - ( $qv['paged']*$qv['number'] - $directory_data['max_users'] ) ) % $qv['number'];\n\t\t\t}\n\n\t\t\t// limit\n\t\t\tif ( isset( $qv['number'] ) && $qv['number'] > 0 ) {\n\t\t\t\tif ( $qv['offset'] ) {\n\t\t\t\t\t$user_query->query_limit = $wpdb->prepare( 'LIMIT %d, %d', $qv['offset'], $number );\n\t\t\t\t} else {\n\t\t\t\t\t$user_query->query_limit = $wpdb->prepare( 'LIMIT %d, %d', $qv['number'] * ( $qv['paged'] - 1 ), $number );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tfunction predefined_no_caps( $directory_data ) {\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\tif ( is_user_logged_in() && ! UM()->roles()->um_user_can( 'can_view_all' ) ) {\n\t\t\t\t$pagination_data = array(\n\t\t\t\t\t'pages_to_show' => array(),\n\t\t\t\t\t'current_page'  => 1,\n\t\t\t\t\t'total_pages'   => 0,\n\t\t\t\t\t'total_users'   => 0,\n\t\t\t\t);\n\n\t\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n\t\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n\n\t\t\t\twp_send_json_success( array( 'users' => array(), 'pagination' => $pagination_data ) );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Main Query function for getting members via AJAX\n\t\t */\n\t\tfunction ajax_get_members() {\n\t\t\tUM()->check_ajax_nonce();\n\n\t\t\tglobal $wpdb;\n\n\t\t\t$directory_id = $this->get_directory_by_hash( $_POST['directory_id'] );\n\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t//predefined result for user without capabilities to see other members\n\t\t\t$this->predefined_no_caps( $directory_data );\n\n\t\t\tdo_action( 'um_member_directory_before_query' );\n\n\t\t\t// Prepare for BIG SELECT query\n\t\t\t$wpdb->query( 'SET SQL_BIG_SELECTS=1' );\n\n\t\t\t// Prepare default user query values\n\t\t\t$this->query_args = array(\n\t\t\t\t'fields'        => 'ids',\n\t\t\t\t'number'        => 0,\n\t\t\t\t'meta_query'    => array(\n\t\t\t\t\t'relation' => 'AND'\n\t\t\t\t),\n\t\t\t);\n\n\n\t\t\t// handle different restrictions\n\t\t\t$this->restriction_options();\n\n\t\t\t// handle general options\n\t\t\t$this->general_options( $directory_data );\n\n\t\t\t// handle pagination options\n\t\t\t$this->pagination_options( $directory_data );\n\n\t\t\t// handle sorting options\n\t\t\t$this->sorting_query( $directory_data );\n\n\t\t\t// handle general search line\n\t\t\t$this->general_search();\n\n\t\t\t// handle filters\n\t\t\t$this->filters( $directory_data );\n\n\t\t\t$this->default_filters( $directory_data );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_prepare_user_query_args\n\t\t\t * @description Extend member directory query arguments\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Members Query Arguments\"},\n\t\t\t * {\"var\":\"$directory_settings\",\"type\":\"array\",\"desc\":\"Member Directory Settings\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_prepare_user_query_args', 'function_name', 10, 2 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_prepare_user_query_args', 'my_prepare_user_query_args', 10, 2 );\n\t\t\t * function my_prepare_user_query_args( $query_args, $directory_settings ) {\n\t\t\t *     // your code here\n\t\t\t *     return $query_args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$this->query_args = apply_filters( 'um_prepare_user_query_args', $this->query_args, $directory_data );\n\n\t\t\t//unset empty meta_query attribute\n\t\t\tif ( isset( $this->query_args['meta_query']['relation'] ) && count( $this->query_args['meta_query'] ) == 1 ) {\n\t\t\t\tunset( $this->query_args['meta_query'] );\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_user_before_query\n\t\t\t * @description Action before users query on member directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query arguments\"},\n\t\t\t * {\"var\":\"$md_class\",\"type\":\"um\\core\\Member_Directory\",\"desc\":\"Member Directory class\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_user_before_query', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_user_before_query', 'my_user_before_query', 10, 1 );\n\t\t\t * function my_user_before_query( $query_args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_user_before_query', $this->query_args, $this );\n\n\t\t\tadd_filter( 'get_meta_sql', array( &$this, 'change_meta_sql' ), 10, 6 );\n\n\t\t\tadd_filter( 'pre_user_query', array( &$this, 'pagination_changes' ), 10, 1 );\n\n\t\t\t$user_query = new \\WP_User_Query( $this->query_args );\n\n\t\t\tremove_filter( 'pre_user_query', array( &$this, 'pagination_changes' ), 10 );\n\n\t\t\tremove_filter( 'get_meta_sql', array( &$this, 'change_meta_sql' ), 10 );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_user_after_query\n\t\t\t * @description Action before users query on member directory\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$query_args\",\"type\":\"array\",\"desc\":\"Query arguments\"},\n\t\t\t * {\"var\":\"$user_query\",\"type\":\"array\",\"desc\":\"User Query\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_user_after_query', 'function_name', 10, 2 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_user_after_query', 'my_user_after_query', 10, 2 );\n\t\t\t * function my_user_after_query( $query_args, $user_query ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_user_after_query', $this->query_args, $user_query );\n\n\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $user_query->total_users );\n\n\t\t\t$user_ids = ! empty( $user_query->results ) ? array_unique( $user_query->results ) : array();\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_prepare_user_results_array\n\t\t\t * @description Extend member directory query result\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$result\",\"type\":\"array\",\"desc\":\"Members Query Result\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_prepare_user_results_array', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_prepare_user_results_array', 'my_prepare_user_results', 10, 1 );\n\t\t\t * function my_prepare_user_results( $user_ids ) {\n\t\t\t *     // your code here\n\t\t\t *     return $user_ids;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$user_ids = apply_filters( 'um_prepare_user_results_array', $user_ids );\n\n\n\t\t\t$sizes = UM()->options()->get( 'cover_thumb_sizes' );\n\n\t\t\t$this->cover_size = UM()->mobile()->isTablet() ? $sizes[1] : end( $sizes );\n\n\t\t\t$avatar_size = UM()->options()->get( 'profile_photosize' );\n\t\t\t$this->avatar_size = str_replace( 'px', '', $avatar_size );\n\n\t\t\t$users = array();\n\t\t\tforeach ( $user_ids as $user_id ) {\n\t\t\t\t$users[] = $this->build_user_card_data( $user_id, $directory_data );\n\t\t\t}\n\n\t\t\tum_reset_user();\n\t\t\t// end of user card\n\n\t\t\t$member_directory_response = apply_filters( 'um_ajax_get_members_response', array(\n\t\t\t\t'pagination'    => $pagination_data,\n\t\t\t\t'users'         => $users,\n\t\t\t\t'is_search'     => $this->is_search,\n\t\t\t), $directory_data );\n\n\t\t\twp_send_json_success( $member_directory_response );\n\t\t}\n\n\n\t\t/**\n\t\t * New menu\n\t\t *\n\t\t * @param string $element\n\t\t * @param string $trigger\n\t\t * @param array $items\n\t\t */\n\t\tfunction dropdown_menu( $element, $trigger, $items = array() ) {\n\t\t\t?>\n\n\t\t\t<div class=\"um-new-dropdown\" data-element=\"<?php echo $element; ?>\" data-trigger=\"<?php echo $trigger; ?>\">\n\t\t\t\t<ul>\n\t\t\t\t\t<?php foreach ( $items as $k => $v ) { ?>\n\t\t\t\t\t\t<li><?php echo $v; ?></li>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t}\n\n\n\t\t/**\n\t\t * New menu JS\n\t\t *\n\t\t * @param string $element\n\t\t * @param string $trigger\n\t\t * @param string $item\n\t\t */\n\t\tfunction dropdown_menu_js( $element, $trigger, $item ) {\n\t\t\t?>\n\n\t\t\t<div class=\"um-new-dropdown\" data-element=\"<?php echo $element; ?>\" data-trigger=\"<?php echo $trigger; ?>\">\n\t\t\t\t<ul>\n\t\t\t\t\t<# _.each( <?php echo $item; ?>.dropdown_actions, function( action, key, list ) { #>\n\t\t\t\t\t\t<li><a href=\"<# if ( typeof action.url != 'undefined' ) { #>{{{action.url}}}<# } else { #>javascript:void(0);<# }#>\" class=\"{{{key}}}\">{{{action.title}}}</a></li>\n\t\t\t\t\t<# }); #>\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<?php\n\t\t}\n\n\n\n\t\tfunction default_filter_settings() {\n\t\t\tUM()->admin()->check_ajax_nonce();\n\n\t\t\t$filter_key = sanitize_key( $_REQUEST['key'] );\n\t\t\t$directory_id = absint( $_REQUEST['directory_id'] );\n\n\t\t\t$html = $this->show_filter( $filter_key, array( 'form_id' => $directory_id ) );\n\n\t\t\twp_send_json_success( array( 'field_html' => $html ) );\n\t\t}\n\t}\n}", "<?php if ( ! defined( 'ABSPATH' ) ) exit;\n\nglobal $post;\n\n// Get default and real arguments\n$def_args = array();\nforeach ( UM()->config()->core_directory_meta['members'] as $k => $v ) {\n\t$key = str_replace( '_um_', '', $k );\n\t$def_args[ $key ] = $v;\n}\n\n$unique_hash = substr( md5( $args['form_id'] ), 10, 5 );\n\n$args = array_merge( $def_args, $args );\n\n//current user priority role\n$priority_user_role = false;\nif ( is_user_logged_in() ) {\n\t$priority_user_role = UM()->roles()->get_priority_user_role( um_user( 'ID' ) );\n}\n\n$args = apply_filters( 'um_member_directory_agruments_on_load', $args );\n\n// Views\n$single_view = false;\n$current_view = 'grid';\n\nif ( ! empty( $args['view_types'] ) && is_array( $args['view_types'] ) ) {\n\t$args['view_types'] = array_filter( $args['view_types'], function( $item ) {\n\t\treturn in_array( $item, array_keys( UM()->member_directory()->view_types ) );\n\t});\n}\n\nif ( empty( $args['view_types'] ) || ! is_array( $args['view_types'] ) ) {\n\t$args['view_types'] = array(\n\t\t'grid',\n\t\t'list'\n\t);\n}\n\nif ( count( $args['view_types'] ) == 1 ) {\n\t$single_view = true;\n\t$current_view = $args['view_types'][0];\n\t$default_view = $current_view;\n} else {\n\t$args['default_view'] = ! empty( $args['default_view'] ) ? $args['default_view'] : $args['view_types'][0];\n\t$default_view = $args['default_view'];\n\t$current_view = ( ! empty( $_GET[ 'view_type_' . $unique_hash ] ) && in_array( $_GET[ 'view_type_' . $unique_hash ], $args['view_types'] ) ) ? $_GET[ 'view_type_' . $unique_hash ] : $args['default_view'];\n}\n\n// Sorting\n$default_sorting = ! empty( $args['sortby'] ) ? $args['sortby'] : 'user_registered_desc';\n\n$sort_from_url = '';\nif ( ! empty( $args['enable_sorting'] ) ) {\n\t$sorting_options = empty( $args['sorting_fields'] ) ? array() : $args['sorting_fields'];\n\tif ( ! in_array( $default_sorting, $sorting_options ) ) {\n\t\t$sorting_options[] = $default_sorting;\n\t}\n\n\tif ( ! empty( $sorting_options ) ) {\n\t\t$all_sorting_options = UM()->member_directory()->sort_fields;\n\t\t$sorting_options = array_intersect_key( $all_sorting_options, array_flip( $sorting_options ) );\n\t}\n\n\t$sorting_options = apply_filters( 'um_member_directory_pre_display_sorting', $sorting_options, $args );\n\n\t$sort_from_url = ( ! empty( $_GET[ 'sort_' . $unique_hash ] ) && in_array( $_GET[ 'sort_' . $unique_hash ], array_keys( $sorting_options ) ) ) ? $_GET[ 'sort_' . $unique_hash ] : $default_sorting;\n}\n\n$current_page = ( ! empty( $_GET[ 'page_' . $unique_hash ] ) && is_numeric( $_GET[ 'page_' . $unique_hash ] ) ) ? (int) $_GET[ 'page_' . $unique_hash ] : 1;\n\n//Search\n$search = isset( $args['search'] ) ? $args['search'] : false;\n$show_search = empty( $args['roles_can_search'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $args['roles_can_search'] ) );\n$search_from_url = '';\nif ( $search && $show_search ) {\n\t$search_from_url = ! empty( $_GET[ 'search_' . $unique_hash ] ) ? stripslashes( $_GET[ 'search_' . $unique_hash ] ) : '';\n}\n\n\n//Filters\n$filters = isset( $args['filters'] ) ? $args['filters'] : false;\n$show_filters = empty( $args['roles_can_filter'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $args['roles_can_filter'] ) );\n$search_filters = array();\nif ( isset( $args['search_fields'] ) ) {\n\t$search_filters = apply_filters( 'um_frontend_member_search_filters', array_unique( array_filter( $args['search_fields'] ) ) );\n}\n\nif ( ! empty( $search_filters ) ) {\n\t$search_filters = array_filter( $search_filters, function( $item ) {\n\t\treturn in_array( $item, array_keys( UM()->member_directory()->filter_fields ) );\n\t});\n\n\t$search_filters = array_values( $search_filters );\n}\n\n// Classes\n$classes = '';\nif ( $search && $show_search ) {\n\t$classes .= ' um-member-with-search';\n}\n\nif ( $filters && $show_filters && count( $search_filters ) ) {\n\t$classes .= ' um-member-with-filters';\n}\n\nif ( ! $single_view ) {\n\t$classes .= ' um-member-with-view';\n}\n\nif ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) {\n\t$classes .= ' um-member-with-sorting';\n}\n\n$filters_collapsible = true;\n$filters_expanded = ! empty( $args['filters_expanded'] ) ? true : false;\nif ( $filters_expanded ) {\n\t$filters_collapsible = ! empty( $args['filters_is_collapsible'] ) ? true : false;\n}\n\n//send $args variable to the templates\n$args['args'] = $args;\nforeach ( $args['view_types'] as $type ) {\n\t$basename = UM()->member_directory()->get_type_basename( $type );\n\tUM()->get_template( 'members-' . $type . '.php', $basename, $args, true );\n}\nUM()->get_template( 'members-header.php', '', $args, true );\nUM()->get_template( 'members-pagination.php', '', $args, true );\n\n$must_search = 0;\n$not_searched = false;\nif ( ( ( $search && $show_search ) || ( $filters && $show_filters && count( $search_filters ) ) ) && isset( $args['must_search'] ) && $args['must_search'] == 1 ) {\n\t$must_search = 1;\n\t$not_searched = true;\n\tif ( $search && $show_search && ! empty( $search_from_url ) ) {\n\t\t$not_searched = false;\n\t} elseif ( $filters && $show_filters && count( $search_filters ) ) {\n\t\tforeach ( $search_filters as $filter ) {\n\t\t\t// getting value from GET line\n\t\t\tswitch ( UM()->member_directory()->filter_types[ $filter ] ) {\n\t\t\t\tdefault: {\n\n\t\t\t\t\t$not_searched = apply_filters( 'um_member_directory_filter_value_from_url', $not_searched, $filter );\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'select': {\n\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? explode( '||', sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ) : array();\n\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'slider': {\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) ? sanitize_text_field( $_GET[ 'filter_' . $filter . '_' . $unique_hash ] ) : '';\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'datepicker':\n\t\t\t\tcase 'timepicker': {\n\t\t\t\t\t// getting value from GET line\n\t\t\t\t\t$filter_from_url = ! empty( $_GET[ 'filter_' . $filter . '_from_' . $unique_hash ] ) ? sanitize_text_field( $_GET[ 'filter_' . $filter . '_from_' . $unique_hash ] ) : '';\n\t\t\t\t\tif ( ! empty( $filter_from_url ) ) {\n\t\t\t\t\t\t$not_searched = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} ?>\n\n<div class=\"um <?php echo esc_attr( $this->get_class( $mode ) ); ?> um-<?php echo esc_attr( substr( md5( $form_id ), 10, 5 ) ); ?>\"\n     data-hash=\"<?php echo esc_attr( substr( md5( $form_id ), 10, 5 ) ) ?>\" data-base-post=\"<?php echo esc_attr( $post->ID ) ?>\"\n\t data-must-search=\"<?php echo esc_attr( $must_search ); ?>\" data-searched=\"<?php echo $not_searched ? '0' : '1'; ?>\"\n\t data-view_type=\"<?php echo esc_attr( $current_view ) ?>\" data-page=\"<?php echo esc_attr( $current_page ) ?>\"\n\t data-sorting=\"<?php echo esc_attr( $sort_from_url ) ?>\">\n\t<div class=\"um-members-overlay\"><div class=\"um-ajax-loading\"></div></div>\n\n\t<div class=\"um-member-directory-header um-form\">\n\n\t\t<?php do_action( 'um_members_directory_before_head', $args, $form_id ); ?>\n\n\t\t<?php if ( $search && $show_search ) { ?>\n\t\t\t<div class=\"um-member-directory-header-row um-member-directory-search-row\">\n\t\t\t\t<div class=\"um-member-directory-search-line\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span><?php _e( 'Search:', 'ultimate-member' ); ?></span>\n\t\t\t\t\t\t<input type=\"search\" class=\"um-search-line\" placeholder=\"<?php esc_attr_e( 'Search', 'ultimate-member' ) ?>\"  value=\"<?php echo esc_attr( $search_from_url ) ?>\" aria-label=\"<?php esc_attr_e( 'Search', 'ultimate-member' ) ?>\" speech />\n\t\t\t\t\t</label>\n\t\t\t\t\t<input type=\"button\" class=\"um-do-search um-button\" value=\"<?php esc_attr_e( 'Search', 'ultimate-member' ); ?>\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php }\n\n\t\tif ( ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) ||\n\t\t     ( $filters && $show_filters && count( $search_filters ) ) ||\n\t\t     ! $single_view ) { ?>\n\t\t\t<div class=\"um-member-directory-header-row\">\n\t\t\t\t<div class=\"um-member-directory-nav-line\">\n\t\t\t\t\t<?php if ( ! $single_view ) {\n\t\t\t\t\t\t$view_types = 0;\n\n\t\t\t\t\t\tforeach ( UM()->member_directory()->view_types as $key => $value ) {\n\t\t\t\t\t\t\tif ( in_array( $key, $args['view_types'] ) ) {\n\t\t\t\t\t\t\t\tif ( empty( $view_types ) ) { ?>\n\t\t\t\t\t\t\t\t\t<span class=\"um-member-directory-view-type<?php if ( $not_searched ) {?> um-disabled<?php } ?>\">\n\t\t\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\t\t\t$view_types++; ?>\n\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0)\"\n\t\t\t\t\t\t\t\t   class=\"um-member-directory-view-type-a<?php if ( ! $not_searched ) {?> um-tip-n<?php } ?>\"\n\t\t\t\t\t\t\t\t   data-type=\"<?php echo $key; ?>\"\n\t\t\t\t\t\t\t\t   data-default=\"<?php echo ( $default_view == $key ) ? 1 : 0; ?>\"\n\t\t\t\t\t\t\t\t   title=\"<?php printf( esc_attr__( 'Change to %s', 'ultimate-member' ), $value['title'] ) ?>\"\n\t\t\t\t\t\t\t\t   default-title=\"<?php echo esc_attr( $value['title'] ); ?>\"\n\t\t\t\t\t\t\t\t   next-item=\"\" ><i class=\"<?php echo $value['icon']; ?>\"></i></a>\n\t\t\t\t\t\t\t<?php }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $view_types ) ) { ?>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<?php }\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $args['enable_sorting'] ) && ! empty( $sorting_options ) && count( $sorting_options ) > 1 ) { ?>\n\t\t\t\t\t\t<div class=\"um-member-directory-sorting\">\n\t\t\t\t\t\t\t<span><?php _e( 'Sort by:', 'ultimate-member' ); ?>&nbsp;</span>\n\t\t\t\t\t\t\t<div class=\"um-member-directory-sorting-a\">\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\" class=\"um-member-directory-sorting-a-text\"><?php echo $sorting_options[ $sort_from_url ] ?></a>\n\t\t\t\t\t\t\t\t&nbsp;<i class=\"um-faicon-caret-down\"></i><i class=\"um-faicon-caret-up\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<?php $items = array();\n\t\t\t\t\t\tforeach ( $sorting_options as $value => $title ) {\n\t\t\t\t\t\t\t$items[] = '<a href=\"javascript:void(0);\" data-value=\"' . esc_attr( $value ) . '\" data-selected=\"' . ( ( $sort_from_url == $value ) ? '1' : '0' ) . '\" data-default=\"' . ( ( $default_sorting == $value ) ? '1' : '0' ) . '\">' . $title . '</a>'; ?>\n\t\t\t\t\t\t<?php }\n\n\t\t\t\t\t\tUM()->member_directory()->dropdown_menu( '.um-member-directory-sorting-a', 'click', $items ); ?>\n\n\t\t\t\t\t<?php }\n\n\t\t\t\t\tif ( $filters && $show_filters && count( $search_filters ) && $filters_collapsible ) { ?>\n\t\t\t\t\t\t<span class=\"um-member-directory-filters\">\n\t\t\t\t\t\t\t<span class=\"um-member-directory-filters-a<?php if ( $filters_expanded ) { ?> um-member-directory-filters-visible<?php } ?>\">\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\">\n\t\t\t\t\t\t\t\t\t<?php _e( 'More filters', 'ultimate-member' ); ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t&nbsp;<i class=\"um-faicon-caret-down\"></i><i class=\"um-faicon-caret-up\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t<?php } ?>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<?php } ?>\n\n\n\t\t<?php if ( $filters && $show_filters && count( $search_filters ) ) {\n\n\t\t\tif ( is_array( $search_filters ) ) { ?>\n\t\t\t\t<script type=\"text/template\" id=\"tmpl-um-members-filtered-line\">\n\t\t\t\t\t<# if ( data.filters.length > 0 ) { #>\n\t\t\t\t\t\t<# _.each( data.filters, function( filter, key, list ) { #>\n\t\t\t\t\t\t\t<div class=\"um-members-filter-tag\">\n\t\t\t\t\t\t\t\t<# if ( filter.type == 'slider' ) { #>\n\t\t\t\t\t\t\t\t\t{{{filter.value_label}}}\n\t\t\t\t\t\t\t\t<# } else { #>\n\t\t\t\t\t\t\t\t\t<strong>{{{filter.label}}}</strong>: {{{filter.value_label}}}\n\t\t\t\t\t\t\t\t<# } #>\n\t\t\t\t\t\t\t\t<div class=\"um-members-filter-remove um-tip-n\" data-name=\"{{{filter.name}}}\"\n\t\t\t\t\t\t\t\t     data-value=\"{{{filter.value}}}\" data-range=\"{{{filter.range}}}\"\n\t\t\t\t\t\t\t\t     data-type=\"{{{filter.type}}}\" title=\"<?php esc_attr_e( 'Remove filter', 'ultimate-member' ) ?>\">&times;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<# }); #>\n\t\t\t\t\t<# } #>\n\t\t\t\t</script>\n\n\t\t\t\t<div class=\"um-member-directory-header-row um-member-directory-filters-bar<?php if ( ! $filters_expanded ) { ?> um-header-row-invisible<?php } ?>\">\n\t\t\t\t\t<div class=\"um-search um-search-<?php echo count( $search_filters ) ?><?php if ( ! $filters_expanded ) { ?> um-search-invisible<?php } ?>\">\n\t\t\t\t\t\t<?php $i = 0;\n\t\t\t\t\t\tforeach ( $search_filters as $filter ) {\n\t\t\t\t\t\t\t$filter_content = UM()->member_directory()->show_filter( $filter, $args );\n\t\t\t\t\t\t\tif ( empty( $filter_content ) ) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$type = UM()->member_directory()->filter_types[ $filter ]; ?>\n\n\t\t\t\t\t\t\t<div class=\"um-search-filter um-<?php echo esc_attr( $type ) ?>-filter-type <?php echo ( $i != 0 && $i%2 !== 0 ) ? 'um-search-filter-2' : '' ?>\"> <?php echo $filter_content; ?> </div>\n\n\t\t\t\t\t\t\t<?php $i++;\n\t\t\t\t\t\t} ?>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"um-member-directory-header-row\">\n\t\t\t\t\t<div class=\"um-filtered-line\">\n\t\t\t\t\t\t<div class=\"um-clear-filters\"><a href=\"javascript:void(0);\" class=\"um-clear-filters-a\" title=\"<?php esc_attr_e( 'Remove all filters', 'ultimate-member' ) ?>\"><?php _e( 'Clear all', 'ultimate-member' ); ?></a></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\t\tdo_action( 'um_members_directory_head', $args ); ?>\n\t</div>\n\n\t<div class=\"um-members-wrapper\"></div>\n\n\t<div class=\"um-members-pagination-box\"></div>\n\n\t<?php\n\t/**\n\t * UM hook\n\t *\n\t * @type action\n\t * @title um_members_directory_footer\n\t * @description Member directory display footer\n\t * @input_vars\n\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Member directory shortcode arguments\"}]\n\t * @change_log\n\t * [\"Since: 2.0\"]\n\t * @usage add_action( 'um_members_directory_footer', 'function_name', 10, 1 );\n\t * @example\n\t * <?php\n\t * add_action( 'um_members_directory_footer', 'my_members_directory_footer', 10, 1 );\n\t * function my_members_directory_footer( $args ) {\n\t *     // your code here\n\t * }\n\t * ?>\n\t */\n\tdo_action( 'um_members_directory_footer', $args ); ?>\n\n</div>"], "filenames": ["includes/admin/core/class-admin-settings.php", "includes/core/class-files.php", "includes/core/class-member-directory-meta.php", "includes/core/class-member-directory.php", "templates/members.php"], "buggy_code_start_loc": [122, 289, 21, 1255, 78], "buggy_code_end_loc": [122, 320, 939, 2296, 79], "fixing_code_start_loc": [123, 290, 20, 1255, 78], "fixing_code_end_loc": [124, 332, 746, 2296, 79], "type": "CWE-639", "message": "Multiple Insecure Direct Object Reference vulnerabilities in includes/core/class-files.php in the Ultimate Member plugin through 2.1.2 for WordPress allow remote attackers to change other users' profiles and cover photos via a modified user_id parameter. This is related to ajax_image_upload and ajax_resize_image.", "other": {"cve": {"id": "CVE-2020-6859", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-13T17:15:11.743", "lastModified": "2020-01-22T13:44:19.757", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple Insecure Direct Object Reference vulnerabilities in includes/core/class-files.php in the Ultimate Member plugin through 2.1.2 for WordPress allow remote attackers to change other users' profiles and cover photos via a modified user_id parameter. This is related to ajax_image_upload and ajax_resize_image."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de Referencia a Objeto Directa y No Segura en el archivo include/core/class-files.php en el plugin Ultimate Member versiones hasta la versi\u00f3n  2.1.2 para WordPress, permiten a atacantes remotos cambiar los perfiles de otros usuarios y las fotos de portada por medio de un par\u00e1metro user_id modificado. Esto est\u00e1 relacionado con ajax_image_upload y ajax_resize_image."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ultimatemember:ultimate_member:*:*:*:*:*:wordpress:*:*", "versionEndIncluding": "2.1.2", "matchCriteriaId": "176084E3-E296-46B8-A08C-28D62F02792E"}]}]}], "references": [{"url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L269", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L310", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ultimatemember/ultimatemember/commit/249682559012734a4f7d71f52609b2f301ea55b1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/plugins/ultimate-member/#developers", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/10041", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ultimatemember/ultimatemember/commit/249682559012734a4f7d71f52609b2f301ea55b1"}}