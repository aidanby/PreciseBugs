{"buggy_code": ["/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * extensions: https://github.com/hhurz/tableExport.jquery.plugin\n */\n\nconst Utils = $.fn.bootstrapTable.utils\n\nconst TYPE_NAME = {\n  json: 'JSON',\n  xml: 'XML',\n  png: 'PNG',\n  csv: 'CSV',\n  txt: 'TXT',\n  sql: 'SQL',\n  doc: 'MS-Word',\n  excel: 'MS-Excel',\n  xlsx: 'MS-Excel (OpenXML)',\n  powerpoint: 'MS-Powerpoint',\n  pdf: 'PDF'\n}\n\n$.extend($.fn.bootstrapTable.defaults, {\n  showExport: false,\n  exportDataType: 'basic', // basic, all, selected\n  exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],\n  exportOptions: {\n    onCellHtmlData (cell, rowIndex, colIndex, htmlData) {\n      if (cell.is('th')) {\n        return cell.find('.th-inner').text()\n      }\n\n      return htmlData\n    }\n  },\n  exportFooter: false\n})\n\n$.extend($.fn.bootstrapTable.columnDefaults, {\n  forceExport: false,\n  forceHide: false\n})\n\n$.extend($.fn.bootstrapTable.defaults.icons, {\n  export: {\n    bootstrap3: 'glyphicon-export icon-share',\n    bootstrap5: 'bi-download',\n    materialize: 'file_download',\n    'bootstrap-table': 'icon-download'\n  }[$.fn.bootstrapTable.theme] || 'fa-download'\n})\n\n$.extend($.fn.bootstrapTable.locales, {\n  formatExport () {\n    return 'Export data'\n  }\n})\n$.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales)\n\n$.fn.bootstrapTable.methods.push('exportTable')\n\n$.extend($.fn.bootstrapTable.defaults, {\n  // eslint-disable-next-line no-unused-vars\n  onExportSaved (exportedRows) {\n    return false\n  }\n})\n\n$.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n  'export-saved.bs.table': 'onExportSaved'\n})\n\n$.BootstrapTable = class extends $.BootstrapTable {\n  initToolbar (...args) {\n    const o = this.options\n    let exportTypes = o.exportTypes\n\n    this.showToolbar = this.showToolbar || o.showExport\n\n    if (this.options.showExport) {\n\n      if (typeof exportTypes === 'string') {\n        const types = exportTypes.slice(1, -1).replace(/ /g, '').split(',')\n\n        exportTypes = types.map(t => t.slice(1, -1))\n      }\n\n      if (typeof o.exportOptions === 'string') {\n        o.exportOptions = Utils.calculateObjectValue(null, o.exportOptions)\n      }\n\n      this.$export = this.$toolbar.find('>.columns div.export')\n      if (this.$export.length) {\n        this.updateExportButton()\n        return\n      }\n\n      this.buttons = Object.assign(this.buttons, {\n        export: {\n          html:\n            (() => {\n              if (exportTypes.length === 1) {\n                return `\n                  <div class=\"export ${this.constants.classes.buttonsDropdown}\"\n                  data-type=\"${exportTypes[0]}\">\n                  <button class=\"${this.constants.buttonsClass}\"\n                  aria-label=\"Export\"\n                  type=\"button\"\n                  title=\"${o.formatExport()}\">\n                  ${o.showButtonIcons ? Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.export) : ''}\n                  ${o.showButtonText ? o.formatExport() : ''}\n                  </button>\n                  </div>\n                `\n              }\n\n              const html = []\n\n              html.push(`\n                <div class=\"export ${this.constants.classes.buttonsDropdown}\">\n                <button class=\"${this.constants.buttonsClass} dropdown-toggle\"\n                aria-label=\"Export\"\n                ${this.constants.dataToggle}=\"dropdown\"\n                type=\"button\"\n                title=\"${o.formatExport()}\">\n                ${o.showButtonIcons ? Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.export) : ''}\n                ${o.showButtonText ? o.formatExport() : ''}\n                ${this.constants.html.dropdownCaret}\n                </button>\n                ${this.constants.html.toolbarDropdown[0]}\n              `)\n\n              for (const type of exportTypes) {\n                if (TYPE_NAME.hasOwnProperty(type)) {\n                  const $item = $(Utils.sprintf(this.constants.html.pageDropdownItem, '', TYPE_NAME[type]))\n\n                  $item.attr('data-type', type)\n                  html.push($item.prop('outerHTML'))\n                }\n              }\n\n              html.push(this.constants.html.toolbarDropdown[1], '</div>')\n              return html.join('')\n            })\n        }\n      })\n    }\n\n    super.initToolbar(...args)\n    this.$export = this.$toolbar.find('>.columns div.export')\n\n    if (!this.options.showExport) {\n      return\n    }\n\n    this.updateExportButton()\n    let $exportButtons = this.$export.find('[data-type]')\n\n    if (exportTypes.length === 1) {\n      $exportButtons = this.$export\n    }\n\n    $exportButtons.click(e => {\n      e.preventDefault()\n\n      const type = $(e.currentTarget).data('type')\n      const exportOptions = {\n        type,\n        escape: false\n      }\n\n      this.exportTable(exportOptions)\n    })\n    this.handleToolbar()\n  }\n\n  handleToolbar () {\n    if (!this.$export) {\n      return\n    }\n\n    if (super.handleToolbar) {\n      super.handleToolbar()\n    }\n  }\n\n  exportTable (options) {\n    const o = this.options\n    const stateField = this.header.stateField\n    const isCardView = o.cardView\n\n    const doExport = callback => {\n      if (stateField) {\n        this.hideColumn(stateField)\n      }\n      if (isCardView) {\n        this.toggleView()\n      }\n\n      this.columns.forEach(row => {\n        if (row.forceHide) {\n          this.hideColumn(row.field)\n        }\n      })\n\n      const data = this.getData()\n\n      if (o.detailView && o.detailViewIcon) {\n        const detailViewIndex = o.detailViewAlign === 'left' ? 0 : this.getVisibleFields().length + Utils.getDetailViewIndexOffset(this.options)\n\n        o.exportOptions.ignoreColumn = [detailViewIndex].concat(o.exportOptions.ignoreColumn || [])\n      }\n\n      if (o.exportFooter) {\n        const $footerRow = this.$tableFooter.find('tr').first()\n        const footerData = {}\n        const footerHtml = []\n\n        $.each($footerRow.children(), (index, footerCell) => {\n          const footerCellHtml = $(footerCell).children('.th-inner').first().html()\n\n          footerData[this.columns[index].field] = footerCellHtml === '&nbsp;' ? null : footerCellHtml\n\n          // grab footer cell text into cell index-based array\n          footerHtml.push(footerCellHtml)\n        })\n\n        this.$body.append(this.$body.children().last()[0].outerHTML)\n        const $lastTableRow = this.$body.children().last()\n\n        $.each($lastTableRow.children(), (index, lastTableRowCell) => {\n          $(lastTableRowCell).html(footerHtml[index])\n        })\n      }\n\n      const hiddenColumns = this.getHiddenColumns()\n\n      hiddenColumns.forEach(row => {\n        if (row.forceExport) {\n          this.showColumn(row.field)\n        }\n      })\n\n      if (typeof o.exportOptions.fileName === 'function') {\n        options.fileName = o.exportOptions.fileName()\n      }\n\n      this.$el.tableExport($.extend({\n        onAfterSaveToFile: () => {\n          if (o.exportFooter) {\n            this.load(data)\n          }\n\n          if (stateField) {\n            this.showColumn(stateField)\n          }\n          if (isCardView) {\n            this.toggleView()\n          }\n\n          hiddenColumns.forEach(row => {\n            if (row.forceExport) {\n              this.hideColumn(row.field)\n            }\n          })\n\n          this.columns.forEach(row => {\n            if (row.forceHide) {\n              this.showColumn(row.field)\n            }\n          })\n\n          if (callback) callback()\n        }\n      }, o.exportOptions, options))\n    }\n\n    if (o.exportDataType === 'all' && o.pagination) {\n      const eventName = o.sidePagination === 'server' ?\n        'post-body.bs.table' : 'page-change.bs.table'\n      const virtualScroll = this.options.virtualScroll\n\n      this.$el.one(eventName, () => {\n        setTimeout(() => {\n          doExport(() => {\n            this.options.virtualScroll = virtualScroll\n            this.togglePagination()\n          })\n        }, 0)\n      })\n      this.options.virtualScroll = false\n      this.togglePagination()\n      this.trigger('export-saved', this.getData())\n    } else if (o.exportDataType === 'selected') {\n      let data = this.getData()\n      let selectedData = this.getSelections()\n      const pagination = o.pagination\n\n      if (!selectedData.length) {\n        return\n      }\n\n      if (o.sidePagination === 'server') {\n        data = {\n          total: o.totalRows,\n          [this.options.dataField]: data\n        }\n        selectedData = {\n          total: selectedData.length,\n          [this.options.dataField]: selectedData\n        }\n      }\n\n      this.load(selectedData)\n      if (pagination) {\n        this.togglePagination()\n      }\n      doExport(() => {\n        if (pagination) {\n          this.togglePagination()\n        }\n        this.load(data)\n      })\n      this.trigger('export-saved', selectedData)\n    } else {\n      doExport()\n      this.trigger('export-saved', this.getData(true))\n    }\n  }\n\n  updateSelected () {\n    super.updateSelected()\n    this.updateExportButton()\n  }\n\n  updateExportButton () {\n    if (this.options.exportDataType === 'selected') {\n      this.$export.find('> button')\n        .prop('disabled', !this.getSelections().length)\n    }\n  }\n}\n"], "fixing_code": ["/**\n * @author zhixin wen <wenzhixin2010@gmail.com>\n * extensions: https://github.com/hhurz/tableExport.jquery.plugin\n */\n\nconst Utils = $.fn.bootstrapTable.utils\n\nconst TYPE_NAME = {\n  json: 'JSON',\n  xml: 'XML',\n  png: 'PNG',\n  csv: 'CSV',\n  txt: 'TXT',\n  sql: 'SQL',\n  doc: 'MS-Word',\n  excel: 'MS-Excel',\n  xlsx: 'MS-Excel (OpenXML)',\n  powerpoint: 'MS-Powerpoint',\n  pdf: 'PDF'\n}\n\n$.extend($.fn.bootstrapTable.defaults, {\n  showExport: false,\n  exportDataType: 'basic', // basic, all, selected\n  exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],\n  exportOptions: {},\n  exportFooter: false\n})\n\n$.extend($.fn.bootstrapTable.columnDefaults, {\n  forceExport: false,\n  forceHide: false\n})\n\n$.extend($.fn.bootstrapTable.defaults.icons, {\n  export: {\n    bootstrap3: 'glyphicon-export icon-share',\n    bootstrap5: 'bi-download',\n    materialize: 'file_download',\n    'bootstrap-table': 'icon-download'\n  }[$.fn.bootstrapTable.theme] || 'fa-download'\n})\n\n$.extend($.fn.bootstrapTable.locales, {\n  formatExport () {\n    return 'Export data'\n  }\n})\n$.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales)\n\n$.fn.bootstrapTable.methods.push('exportTable')\n\n$.extend($.fn.bootstrapTable.defaults, {\n  // eslint-disable-next-line no-unused-vars\n  onExportSaved (exportedRows) {\n    return false\n  }\n})\n\n$.extend($.fn.bootstrapTable.Constructor.EVENTS, {\n  'export-saved.bs.table': 'onExportSaved'\n})\n\n$.BootstrapTable = class extends $.BootstrapTable {\n  initToolbar (...args) {\n    const o = this.options\n    let exportTypes = o.exportTypes\n\n    this.showToolbar = this.showToolbar || o.showExport\n\n    if (this.options.showExport) {\n\n      if (typeof exportTypes === 'string') {\n        const types = exportTypes.slice(1, -1).replace(/ /g, '').split(',')\n\n        exportTypes = types.map(t => t.slice(1, -1))\n      }\n\n      if (typeof o.exportOptions === 'string') {\n        o.exportOptions = Utils.calculateObjectValue(null, o.exportOptions)\n      }\n\n      this.$export = this.$toolbar.find('>.columns div.export')\n      if (this.$export.length) {\n        this.updateExportButton()\n        return\n      }\n\n      this.buttons = Object.assign(this.buttons, {\n        export: {\n          html:\n            (() => {\n              if (exportTypes.length === 1) {\n                return `\n                  <div class=\"export ${this.constants.classes.buttonsDropdown}\"\n                  data-type=\"${exportTypes[0]}\">\n                  <button class=\"${this.constants.buttonsClass}\"\n                  aria-label=\"Export\"\n                  type=\"button\"\n                  title=\"${o.formatExport()}\">\n                  ${o.showButtonIcons ? Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.export) : ''}\n                  ${o.showButtonText ? o.formatExport() : ''}\n                  </button>\n                  </div>\n                `\n              }\n\n              const html = []\n\n              html.push(`\n                <div class=\"export ${this.constants.classes.buttonsDropdown}\">\n                <button class=\"${this.constants.buttonsClass} dropdown-toggle\"\n                aria-label=\"Export\"\n                ${this.constants.dataToggle}=\"dropdown\"\n                type=\"button\"\n                title=\"${o.formatExport()}\">\n                ${o.showButtonIcons ? Utils.sprintf(this.constants.html.icon, o.iconsPrefix, o.icons.export) : ''}\n                ${o.showButtonText ? o.formatExport() : ''}\n                ${this.constants.html.dropdownCaret}\n                </button>\n                ${this.constants.html.toolbarDropdown[0]}\n              `)\n\n              for (const type of exportTypes) {\n                if (TYPE_NAME.hasOwnProperty(type)) {\n                  const $item = $(Utils.sprintf(this.constants.html.pageDropdownItem, '', TYPE_NAME[type]))\n\n                  $item.attr('data-type', type)\n                  html.push($item.prop('outerHTML'))\n                }\n              }\n\n              html.push(this.constants.html.toolbarDropdown[1], '</div>')\n              return html.join('')\n            })\n        }\n      })\n    }\n\n    super.initToolbar(...args)\n    this.$export = this.$toolbar.find('>.columns div.export')\n\n    if (!this.options.showExport) {\n      return\n    }\n\n    this.updateExportButton()\n    let $exportButtons = this.$export.find('[data-type]')\n\n    if (exportTypes.length === 1) {\n      $exportButtons = this.$export\n    }\n\n    $exportButtons.click(e => {\n      e.preventDefault()\n\n      this.exportTable({\n        type: $(e.currentTarget).data('type')\n      })\n    })\n    this.handleToolbar()\n  }\n\n  handleToolbar () {\n    if (!this.$export) {\n      return\n    }\n\n    if (super.handleToolbar) {\n      super.handleToolbar()\n    }\n  }\n\n  exportTable (options) {\n    const o = this.options\n    const stateField = this.header.stateField\n    const isCardView = o.cardView\n\n    const doExport = callback => {\n      if (stateField) {\n        this.hideColumn(stateField)\n      }\n      if (isCardView) {\n        this.toggleView()\n      }\n\n      this.columns.forEach(row => {\n        if (row.forceHide) {\n          this.hideColumn(row.field)\n        }\n      })\n\n      const data = this.getData()\n\n      if (o.detailView && o.detailViewIcon) {\n        const detailViewIndex = o.detailViewAlign === 'left' ? 0 : this.getVisibleFields().length + Utils.getDetailViewIndexOffset(this.options)\n\n        o.exportOptions.ignoreColumn = [detailViewIndex].concat(o.exportOptions.ignoreColumn || [])\n      }\n\n      if (o.exportFooter) {\n        const $footerRow = this.$tableFooter.find('tr').first()\n        const footerData = {}\n        const footerHtml = []\n\n        $.each($footerRow.children(), (index, footerCell) => {\n          const footerCellHtml = $(footerCell).children('.th-inner').first().html()\n\n          footerData[this.columns[index].field] = footerCellHtml === '&nbsp;' ? null : footerCellHtml\n\n          // grab footer cell text into cell index-based array\n          footerHtml.push(footerCellHtml)\n        })\n\n        this.$body.append(this.$body.children().last()[0].outerHTML)\n        const $lastTableRow = this.$body.children().last()\n\n        $.each($lastTableRow.children(), (index, lastTableRowCell) => {\n          $(lastTableRowCell).html(footerHtml[index])\n        })\n      }\n\n      const hiddenColumns = this.getHiddenColumns()\n\n      hiddenColumns.forEach(row => {\n        if (row.forceExport) {\n          this.showColumn(row.field)\n        }\n      })\n\n      if (typeof o.exportOptions.fileName === 'function') {\n        options.fileName = o.exportOptions.fileName()\n      }\n\n      this.$el.tableExport($.extend({\n        onAfterSaveToFile: () => {\n          if (o.exportFooter) {\n            this.load(data)\n          }\n\n          if (stateField) {\n            this.showColumn(stateField)\n          }\n          if (isCardView) {\n            this.toggleView()\n          }\n\n          hiddenColumns.forEach(row => {\n            if (row.forceExport) {\n              this.hideColumn(row.field)\n            }\n          })\n\n          this.columns.forEach(row => {\n            if (row.forceHide) {\n              this.showColumn(row.field)\n            }\n          })\n\n          if (callback) callback()\n        }\n      }, o.exportOptions, options))\n    }\n\n    if (o.exportDataType === 'all' && o.pagination) {\n      const eventName = o.sidePagination === 'server' ?\n        'post-body.bs.table' : 'page-change.bs.table'\n      const virtualScroll = this.options.virtualScroll\n\n      this.$el.one(eventName, () => {\n        setTimeout(() => {\n          doExport(() => {\n            this.options.virtualScroll = virtualScroll\n            this.togglePagination()\n          })\n        }, 0)\n      })\n      this.options.virtualScroll = false\n      this.togglePagination()\n      this.trigger('export-saved', this.getData())\n    } else if (o.exportDataType === 'selected') {\n      let data = this.getData()\n      let selectedData = this.getSelections()\n      const pagination = o.pagination\n\n      if (!selectedData.length) {\n        return\n      }\n\n      if (o.sidePagination === 'server') {\n        data = {\n          total: o.totalRows,\n          [this.options.dataField]: data\n        }\n        selectedData = {\n          total: selectedData.length,\n          [this.options.dataField]: selectedData\n        }\n      }\n\n      this.load(selectedData)\n      if (pagination) {\n        this.togglePagination()\n      }\n      doExport(() => {\n        if (pagination) {\n          this.togglePagination()\n        }\n        this.load(data)\n      })\n      this.trigger('export-saved', selectedData)\n    } else {\n      doExport()\n      this.trigger('export-saved', this.getData(true))\n    }\n  }\n\n  updateSelected () {\n    super.updateSelected()\n    this.updateExportButton()\n  }\n\n  updateExportButton () {\n    if (this.options.exportDataType === 'selected') {\n      this.$export.find('> button')\n        .prop('disabled', !this.getSelections().length)\n    }\n  }\n}\n"], "filenames": ["src/extensions/export/bootstrap-table-export.js"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [172], "fixing_code_start_loc": [26], "fixing_code_end_loc": [160], "type": "CWE-79", "message": "Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties.", "other": {"cve": {"id": "CVE-2022-1726", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-16T15:15:10.360", "lastModified": "2022-05-25T02:04:14.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties."}, {"lang": "es", "value": "Una vulnerabilidad de tipo XSS en Bootstrap Tables con el plugin Table Export cuando exportOptions: htmlContent es true en el repositorio de GitHub wenzhixin/bootstrap-table versiones anteriores a 1.20.2. Divulgaci\u00f3n de cookies de sesi\u00f3n, divulgaci\u00f3n de datos de sesi\u00f3n seguros, exfiltraci\u00f3n de datos a terceros"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bootstrap-table:bootstrap_table:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.20.2", "matchCriteriaId": "050CE55C-1AC6-4DB6-A31B-89037F009B48"}]}]}], "references": [{"url": "https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/9b85cc33-0395-4c31-8a42-3a94beb2efea", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9"}}