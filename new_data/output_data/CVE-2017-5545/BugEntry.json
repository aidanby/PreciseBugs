{"buggy_code": ["/*\n * plistutil.c\n * Simple tool to convert a plist into different formats\n *\n * Copyright (c) 2009-2015 Martin Szulecki All Rights Reserved.\n * Copyright (c) 2008 Zach C. All Rights Reserved.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n\n#include \"plist/plist.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n\n#ifdef _MSC_VER\n#pragma warning(disable:4996)\n#endif\n\ntypedef struct _options\n{\n    char *in_file, *out_file;\n    uint8_t debug, in_fmt, out_fmt;\n} options_t;\n\nstatic void print_usage(int argc, char *argv[])\n{\n    char *name = NULL;\n    name = strrchr(argv[0], '/');\n    printf(\"Usage: %s -i|--infile FILE [-o|--outfile FILE] [-d|--debug]\\n\", (name ? name + 1: argv[0]));\n    printf(\"Convert a plist FILE from binary to XML format or vice-versa.\\n\\n\");\n    printf(\"  -i, --infile FILE\\tThe FILE to convert from\\n\");\n    printf(\"  -o, --outfile FILE\\tOptional FILE to convert to or stdout if not used\\n\");\n    printf(\"  -d, --debug\\t\\tEnable extended debug output\\n\");\n    printf(\"\\n\");\n}\n\nstatic options_t *parse_arguments(int argc, char *argv[])\n{\n    int i = 0;\n\n    options_t *options = (options_t *) malloc(sizeof(options_t));\n    memset(options, 0, sizeof(options_t));\n\n    for (i = 1; i < argc; i++)\n    {\n        if (!strcmp(argv[i], \"--infile\") || !strcmp(argv[i], \"-i\"))\n        {\n            if ((i + 1) == argc)\n            {\n                free(options);\n                return NULL;\n            }\n            options->in_file = argv[i + 1];\n            i++;\n            continue;\n        }\n\n        if (!strcmp(argv[i], \"--outfile\") || !strcmp(argv[i], \"-o\"))\n        {\n            if ((i + 1) == argc)\n            {\n                free(options);\n                return NULL;\n            }\n            options->out_file = argv[i + 1];\n            i++;\n            continue;\n        }\n\n        if (!strcmp(argv[i], \"--debug\") || !strcmp(argv[i], \"-d\"))\n        {\n            options->debug = 1;\n        }\n\n        if (!strcmp(argv[i], \"--help\") || !strcmp(argv[i], \"-h\"))\n        {\n            free(options);\n            return NULL;\n        }\n    }\n\n    if (!options->in_file)\n    {\n        free(options);\n        return NULL;\n    }\n\n    return options;\n}\n\nint main(int argc, char *argv[])\n{\n    FILE *iplist = NULL;\n    plist_t root_node = NULL;\n    char *plist_out = NULL;\n    uint32_t size = 0;\n    int read_size = 0;\n    char *plist_entire = NULL;\n    struct stat filestats;\n    options_t *options = parse_arguments(argc, argv);\n\n    if (!options)\n    {\n        print_usage(argc, argv);\n        return 0;\n    }\n\n    // read input file\n    iplist = fopen(options->in_file, \"rb\");\n    if (!iplist) {\n        free(options);\n        return 1;\n    }\n\n    stat(options->in_file, &filestats);\n    plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));\n    read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);\n    fclose(iplist);\n\n    // convert from binary to xml or vice-versa\n    if (memcmp(plist_entire, \"bplist00\", 8) == 0)\n    {\n        plist_from_bin(plist_entire, read_size, &root_node);\n        plist_to_xml(root_node, &plist_out, &size);\n    }\n    else\n    {\n        plist_from_xml(plist_entire, read_size, &root_node);\n        plist_to_bin(root_node, &plist_out, &size);\n    }\n    plist_free(root_node);\n    free(plist_entire);\n\n    if (plist_out)\n    {\n        if (options->out_file != NULL)\n        {\n            FILE *oplist = fopen(options->out_file, \"wb\");\n            if (!oplist) {\n                free(options);\n                return 1;\n            }\n            fwrite(plist_out, size, sizeof(char), oplist);\n            fclose(oplist);\n        }\n        // if no output file specified, write to stdout\n        else\n            fwrite(plist_out, size, sizeof(char), stdout);\n\n        free(plist_out);\n    }\n    else\n        printf(\"ERROR: Failed to convert input file.\\n\");\n\n    free(options);\n    return 0;\n}\n"], "fixing_code": ["/*\n * plistutil.c\n * Simple tool to convert a plist into different formats\n *\n * Copyright (c) 2009-2015 Martin Szulecki All Rights Reserved.\n * Copyright (c) 2008 Zach C. All Rights Reserved.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n\n#include \"plist/plist.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n\n#ifdef _MSC_VER\n#pragma warning(disable:4996)\n#endif\n\ntypedef struct _options\n{\n    char *in_file, *out_file;\n    uint8_t debug, in_fmt, out_fmt;\n} options_t;\n\nstatic void print_usage(int argc, char *argv[])\n{\n    char *name = NULL;\n    name = strrchr(argv[0], '/');\n    printf(\"Usage: %s -i|--infile FILE [-o|--outfile FILE] [-d|--debug]\\n\", (name ? name + 1: argv[0]));\n    printf(\"Convert a plist FILE from binary to XML format or vice-versa.\\n\\n\");\n    printf(\"  -i, --infile FILE\\tThe FILE to convert from\\n\");\n    printf(\"  -o, --outfile FILE\\tOptional FILE to convert to or stdout if not used\\n\");\n    printf(\"  -d, --debug\\t\\tEnable extended debug output\\n\");\n    printf(\"\\n\");\n}\n\nstatic options_t *parse_arguments(int argc, char *argv[])\n{\n    int i = 0;\n\n    options_t *options = (options_t *) malloc(sizeof(options_t));\n    memset(options, 0, sizeof(options_t));\n\n    for (i = 1; i < argc; i++)\n    {\n        if (!strcmp(argv[i], \"--infile\") || !strcmp(argv[i], \"-i\"))\n        {\n            if ((i + 1) == argc)\n            {\n                free(options);\n                return NULL;\n            }\n            options->in_file = argv[i + 1];\n            i++;\n            continue;\n        }\n\n        if (!strcmp(argv[i], \"--outfile\") || !strcmp(argv[i], \"-o\"))\n        {\n            if ((i + 1) == argc)\n            {\n                free(options);\n                return NULL;\n            }\n            options->out_file = argv[i + 1];\n            i++;\n            continue;\n        }\n\n        if (!strcmp(argv[i], \"--debug\") || !strcmp(argv[i], \"-d\"))\n        {\n            options->debug = 1;\n        }\n\n        if (!strcmp(argv[i], \"--help\") || !strcmp(argv[i], \"-h\"))\n        {\n            free(options);\n            return NULL;\n        }\n    }\n\n    if (!options->in_file)\n    {\n        free(options);\n        return NULL;\n    }\n\n    return options;\n}\n\nint main(int argc, char *argv[])\n{\n    FILE *iplist = NULL;\n    plist_t root_node = NULL;\n    char *plist_out = NULL;\n    uint32_t size = 0;\n    int read_size = 0;\n    char *plist_entire = NULL;\n    struct stat filestats;\n    options_t *options = parse_arguments(argc, argv);\n\n    if (!options)\n    {\n        print_usage(argc, argv);\n        return 0;\n    }\n\n    // read input file\n    iplist = fopen(options->in_file, \"rb\");\n    if (!iplist) {\n        free(options);\n        return 1;\n    }\n\n    stat(options->in_file, &filestats);\n\n    if (filestats.st_size < 8) {\n        printf(\"ERROR: Input file is too small to contain valid plist data.\\n\");\n        return -1;\n    }\n\n    plist_entire = (char *) malloc(sizeof(char) * (filestats.st_size + 1));\n    read_size = fread(plist_entire, sizeof(char), filestats.st_size, iplist);\n    fclose(iplist);\n\n    // convert from binary to xml or vice-versa\n    if (memcmp(plist_entire, \"bplist00\", 8) == 0)\n    {\n        plist_from_bin(plist_entire, read_size, &root_node);\n        plist_to_xml(root_node, &plist_out, &size);\n    }\n    else\n    {\n        plist_from_xml(plist_entire, read_size, &root_node);\n        plist_to_bin(root_node, &plist_out, &size);\n    }\n    plist_free(root_node);\n    free(plist_entire);\n\n    if (plist_out)\n    {\n        if (options->out_file != NULL)\n        {\n            FILE *oplist = fopen(options->out_file, \"wb\");\n            if (!oplist) {\n                free(options);\n                return 1;\n            }\n            fwrite(plist_out, size, sizeof(char), oplist);\n            fclose(oplist);\n        }\n        // if no output file specified, write to stdout\n        else\n            fwrite(plist_out, size, sizeof(char), stdout);\n\n        free(plist_out);\n    }\n    else\n        printf(\"ERROR: Failed to convert input file.\\n\");\n\n    free(options);\n    return 0;\n}\n"], "filenames": ["tools/plistutil.c"], "buggy_code_start_loc": [131], "buggy_code_end_loc": [131], "fixing_code_start_loc": [132], "fixing_code_end_loc": [138], "type": "CWE-125", "message": "The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short.", "other": {"cve": {"id": "CVE-2017-5545", "sourceIdentifier": "cve@mitre.org", "published": "2017-01-21T01:59:00.170", "lastModified": "2020-04-02T10:15:14.373", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The main function in plistutil.c in libimobiledevice libplist through 1.12 allows attackers to obtain sensitive information from process memory or cause a denial of service (buffer over-read) via Apple Property List data that is too short."}, {"lang": "es", "value": "La funci\u00f3n principal en plistutil.c en libimobiledevice libplist hasta la versi\u00f3n 1.12 permite a atacantes obtener informaci\u00f3n sensible de la memoria de proceso o provocar una denegaci\u00f3n de servicio (sobre lectura del b\u00fafer) a trav\u00e9s de datos Apple Property List que son demasiado cortos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:libimobiledevice:libplist:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.12", "matchCriteriaId": "4201391B-6535-4AE4-87AD-4112C3F2B48A"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/95702", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/libimobiledevice/libplist/commit/7391a506352c009fe044dead7baad9e22dd279ee", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/libimobiledevice/libplist/issues/87", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/04/msg00002.html", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/libimobiledevice/libplist/commit/7391a506352c009fe044dead7baad9e22dd279ee"}}