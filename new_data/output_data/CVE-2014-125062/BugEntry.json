{"buggy_code": ["<?php\n/*\n* Bitstorm 2 - A small and fast Bittorrent tracker\n* Copyright 2011 Peter Caprioli\n*\n* This program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n /*************************\n ** Configuration start **\n *************************/\n\n//MySQL details\ndefine('__DB_SERVER', '');\ndefine('__DB_USERNAME', '');\ndefine('__DB_PASSWORD', '');\ndefine('__DB_DATABASE', '');\n\n//Peer announce interval (Seconds)\ndefine('__INTERVAL', 1800);\n\n//Time out if peer is this late to re-announce (Seconds)\ndefine('__TIMEOUT', 120);\n\n//Minimum announce interval (Seconds)\n//Most clients obey this, but not all\ndefine('__INTERVAL_MIN', 60);\n\n// By default, never encode more than this number of peers in a single request\ndefine('__MAX_PPR', 20);\n\n /***********************\n ** Configuration end **\n ***********************/\n\n//Use the correct content-type\nheader(\"Content-type: Text/Plain\");\n\n//Connect to the MySQL server\n@mysql_connect(__DB_SERVER, __DB_USERNAME, __DB_PASSWORD) or die(track('Database connection failed'));\n\n//Select the database\n@mysql_select_db(__DB_DATABASE) or die(track('Unable to select database'));\n\n//Inputs that are needed, do not continue without these\nvaldata('peer_id', true);\nvaldata('port');\nvaldata('info_hash', true);\n\n//Make sure we have something to use as a key\nif (!isset($_GET['key'])) {\n\t$_GET['key'] = '';\n}\n\n$downloaded = isset($_GET['uploaded']) ? intval($_GET['uploaded']) : 0;\n$uploaded = isset($_GET['uploaded']) ? intval($_GET['uploaded']) : 0;\n$left = isset($_GET['left']) ? intval($_GET['left']) : 0;\n\n//Validate key as well\nvaldata('key');\n\n//Do we have a valid client port?\nif (!ctype_digit($_GET['port']) || $_GET['port'] < 1 || $_GET['port'] > 65535) {\n\tdie(track('Invalid client port'));\n}\n\n//Hack to get comatibility with trackon\nif ($_GET['port'] == 999 && substr($_GET['peer_id'], 0, 10) == '-TO0001-XX') {\n\tdie(\"d8:completei0e10:incompletei0e8:intervali600e12:min intervali60e5:peersld2:ip12:72.14.194.184:port3:999ed2:ip11:72.14.194.14:port3:999ed2:ip12:72.14.194.654:port3:999eee\");\n}\n\nmysql_query('INSERT INTO `peer` (`peer_id`, `user_agent`, `ip_address`, `key`, `port`) '\n\t. \"VALUES ('\" . mysql_real_escape_string(bin2hex($_GET['peer_id'])) . \"', '\" . mysql_real_escape_string(substr($_SERVER['HTTP_USER_AGENT'], 0, 80)) \n\t. \"', INET_ATON('\" . mysql_real_escape_string($_SERVER['REMOTE_ADDR']) . \"'), '\" . mysql_real_escape_string(sha1($_GET['key'])) . \"', \" . intval($_GET['port']) . \") \"\n\t. 'ON DUPLICATE KEY UPDATE `peer_id`=VALUES(`peer_id`), `user_agent` = VALUES(`user_agent`), `ip_address` = VALUES(`ip_address`), `key`=VALUES(`key`), `port` = VALUES(`port`), `id` = LAST_INSERT_ID(`peer`.`id`)') \n\tor die(track('Cannot update peer: '.mysql_error()));\n$pk_peer = mysql_insert_id();\n\nmysql_query(\"INSERT INTO `torrent` (`hash`) VALUES ('\" . mysql_real_escape_string(bin2hex($_GET['info_hash'])) . \"') \"\n \t. \"ON DUPLICATE KEY UPDATE `id` = LAST_INSERT_ID(`id`)\") or die(track('Cannot update torrent' . mysql_error())); // ON DUPLICATE KEY UPDATE is just to make mysql_insert_id work\n$pk_torrent = mysql_insert_id();\n\n//User agent is required\nif (!isset($_SERVER['HTTP_USER_AGENT'])) {\n\t$_SERVER['HTTP_USER_AGENT'] = \"N/A\";\n}\nif (!isset($_GET['uploaded'])) {\n\t$_GET['uploaded'] = 0;\n}\nif (!isset($_GET['downloaded'])) {\n\t$_GET['downloaded'] = 0;\n}\nif (!isset($_GET['left'])) {\n\t$_GET['left'] = 0;\n}\n\n$state = 'state';\n$attempt = 'attempt';\nif (isset($_GET['event'])){\n\t$state = \"'\" . $_GET['event'] . \"'\";\n\t$attempt = 'LAST_INSERT_ID(peer_torrent.id)';\n}\n\nmysql_query('INSERT INTO peer_torrent (peer_id, torrent_id, uploaded, downloaded, `left`, state, attempt, `last_updated`) '\n\t. 'SELECT ' . $pk_peer . ', `torrent`.`id`, ' . intval($_GET['uploaded']) . ', ' . intval($_GET['downloaded']) . ', ' . intval($_GET['left']) . ', ' . $state .  ', ' . 0 . ', UTC_TIMESTAMP() '\n\t. 'FROM `torrent` '\n\t. \"WHERE `torrent`.`hash` = '\" . mysql_real_escape_string(bin2hex($_GET['info_hash'])) . \"' \"\n\t. 'ON DUPLICATE KEY UPDATE `uploaded` = VALUES(`uploaded`), `downloaded` = VALUES(`downloaded`), `left` = VALUES(`left`), ' \n\t. 'state=' . $state . ', attempt=' . $attempt . ', ' \n\t. 'last_updated = VALUES(`last_updated`), ')\n\tor die(track(mysql_error()));\n$pk_peer_torrent = mysql_insert_id();\n\n$numwant = __MAX_PPR; //Can be modified by client\n\n//Set number of peers to return\nif (isset($_GET['numwant']) && ctype_digit($_GET['numwant']) && $_GET['numwant'] <= __MAX_PPR && $_GET['numwant'] >= 0) {\n\t$numwant = (int)$_GET['numwant'];\n}\n\n$q = mysql_query('SELECT INET_NTOA(peer.ip_address), peer.port, peer.peer_id '\n\t. 'FROM peer_torrent '\n\t. 'JOIN peer ON peer.id = peer_torrent.peer_id '\n\t. 'WHERE peer_torrent.torrent_id = ' . $pk_torrent . \" AND peer_torrent.state != 'stopped' \"\n\t. 'AND peer_torrent.last_updated >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL ' . (__INTERVAL + __TIMEOUT) . ' SECOND) '\n\t. 'AND peer.id != ' . $pk_peer . ' '\n\t. 'ORDER BY RAND() '\n\t. 'LIMIT ' . $numwant) or die(track(mysql_error()));\n\n$reply = array(); //To be encoded and sent to the client\n\nwhile ($r = mysql_fetch_array($q)) { //Runs for every client with the same infohash\n\t$reply[] = array($r[0], $r[1], $r[2]); //ip, port, peerid\n}\n\n$q = mysql_query('SELECT IFNULL(SUM(peer_torrent.left > 0), 0) AS leech, IFNULL(SUM(peer_torrent.left = 0), 0) AS seed '\n\t. 'FROM peer_torrent '\n\t. 'WHERE peer_torrent.torrent_id = ' . $pk_torrent . \" AND peer_torrent.state != 'stopped' \"\n\t. 'AND peer_torrent.last_updated >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL ' . (__INTERVAL + __TIMEOUT) . ' SECOND) '\n\t. 'GROUP BY `peer_torrent`.`torrent_id`') or die(track(mysql_error()));\n\n$seeders = 0;\n$leechers = 0;\n\nif ($r = mysql_fetch_array($q))\n{\n\t$seeders = $r[1];\n\t$leechers = $r[0];\n}\n\ndie(track($reply, $seeders[0], $leechers[0]));\n\n//Bencoding function, returns a bencoded dictionary\n//You may go ahead and enter custom keys in the dictionary in\n//this function if you'd like.\nfunction track($list, $c=0, $i=0) {\n\tif (is_string($list)) { //Did we get a string? Return an error to the client\n\t\treturn 'd14:failure reason'.strlen($list).':'.$list.'e';\n\t}\n\t$p = ''; //Peer directory\n\tforeach($list as $d) { //Runs for each client\n\t\t$pid = '';\n\t\tif (!isset($_GET['no_peer_id'])) { //Send out peer_ids in the reply\n\t\t\t$real_id = hex2bin($d[2]);\n\t\t\t$pid = '7:peer id'.strlen($real_id).':'.$real_id;\n\t\t}\n\t\t$p .= 'd2:ip'.strlen($d[0]).':'.$d[0].$pid.'4:porti'.$d[1].'ee';\n\t}\n\t//Add some other paramters in the dictionary and merge with peer list\n\t$r = 'd8:intervali'.__INTERVAL.'e12:min intervali'.__INTERVAL_MIN.'e8:completei'.$c.'e10:incompletei'.$i.'e5:peersl'.$p.'ee';\n\treturn $r;\n}\n\n//Do some input validation\nfunction valdata($g, $fixed_size=false) {\n\tif (!isset($_GET[$g])) {\n\t\tdie(track('Invalid request, missing data'));\n\t}\n\tif (!is_string($_GET[$g])) {\n\t\tdie(track('Invalid request, unknown data type'));\n\t}\n\tif ($fixed_size && strlen($_GET[$g]) != 20) {\n\t\tdie(track('Invalid request, length on fixed argument not correct'));\n\t}\n\tif (strlen($_GET[$g]) > 80) { //128 chars should really be enough\n\t\tdie(track('Request too long'));\n\t}\n}\n?>"], "fixing_code": ["<?php\n/*\n* Bitstorm 2 - A small and fast Bittorrent tracker\n* Copyright 2011 Peter Caprioli\n*\n* This program is free software: you can redistribute it and/or modify\n* it under the terms of the GNU General Public License as published by\n* the Free Software Foundation, either version 3 of the License, or\n* (at your option) any later version.\n*\n* This program is distributed in the hope that it will be useful,\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n* GNU General Public License for more details.\n*\n* You should have received a copy of the GNU General Public License\n* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n /*************************\n ** Configuration start **\n *************************/\n\n//MySQL details\ndefine('__DB_SERVER', '');\ndefine('__DB_USERNAME', '');\ndefine('__DB_PASSWORD', '');\ndefine('__DB_DATABASE', '');\n\n//Peer announce interval (Seconds)\ndefine('__INTERVAL', 1800);\n\n//Time out if peer is this late to re-announce (Seconds)\ndefine('__TIMEOUT', 120);\n\n//Minimum announce interval (Seconds)\n//Most clients obey this, but not all\ndefine('__INTERVAL_MIN', 60);\n\n// By default, never encode more than this number of peers in a single request\ndefine('__MAX_PPR', 20);\n\n /***********************\n ** Configuration end **\n ***********************/\n\n//Use the correct content-type\nheader(\"Content-type: Text/Plain\");\n\n//Connect to the MySQL server\n@mysql_connect(__DB_SERVER, __DB_USERNAME, __DB_PASSWORD) or die(track('Database connection failed'));\n\n//Select the database\n@mysql_select_db(__DB_DATABASE) or die(track('Unable to select database'));\n\n//Inputs that are needed, do not continue without these\nvaldata('peer_id', true);\nvaldata('port');\nvaldata('info_hash', true);\n\n//Make sure we have something to use as a key\nif (!isset($_GET['key'])) {\n\t$_GET['key'] = '';\n}\n\n$downloaded = isset($_GET['uploaded']) ? intval($_GET['uploaded']) : 0;\n$uploaded = isset($_GET['uploaded']) ? intval($_GET['uploaded']) : 0;\n$left = isset($_GET['left']) ? intval($_GET['left']) : 0;\n\n//Validate key as well\nvaldata('key');\n\n//Do we have a valid client port?\nif (!ctype_digit($_GET['port']) || $_GET['port'] < 1 || $_GET['port'] > 65535) {\n\tdie(track('Invalid client port'));\n}\n\n//Hack to get comatibility with trackon\nif ($_GET['port'] == 999 && substr($_GET['peer_id'], 0, 10) == '-TO0001-XX') {\n\tdie(\"d8:completei0e10:incompletei0e8:intervali600e12:min intervali60e5:peersld2:ip12:72.14.194.184:port3:999ed2:ip11:72.14.194.14:port3:999ed2:ip12:72.14.194.654:port3:999eee\");\n}\n\nmysql_query('INSERT INTO `peer` (`peer_id`, `user_agent`, `ip_address`, `key`, `port`) '\n\t. \"VALUES ('\" . mysql_real_escape_string(bin2hex($_GET['peer_id'])) . \"', '\" . mysql_real_escape_string(substr($_SERVER['HTTP_USER_AGENT'], 0, 80)) \n\t. \"', INET_ATON('\" . mysql_real_escape_string($_SERVER['REMOTE_ADDR']) . \"'), '\" . mysql_real_escape_string(sha1($_GET['key'])) . \"', \" . intval($_GET['port']) . \") \"\n\t. 'ON DUPLICATE KEY UPDATE `peer_id`=VALUES(`peer_id`), `user_agent` = VALUES(`user_agent`), `ip_address` = VALUES(`ip_address`), `key`=VALUES(`key`), `port` = VALUES(`port`), `id` = LAST_INSERT_ID(`peer`.`id`)') \n\tor die(track('Cannot update peer: '.mysql_error()));\n$pk_peer = mysql_insert_id();\n\nmysql_query(\"INSERT INTO `torrent` (`hash`) VALUES ('\" . mysql_real_escape_string(bin2hex($_GET['info_hash'])) . \"') \"\n \t. \"ON DUPLICATE KEY UPDATE `id` = LAST_INSERT_ID(`id`)\") or die(track('Cannot update torrent' . mysql_error())); // ON DUPLICATE KEY UPDATE is just to make mysql_insert_id work\n$pk_torrent = mysql_insert_id();\n\n//User agent is required\nif (!isset($_SERVER['HTTP_USER_AGENT'])) {\n\t$_SERVER['HTTP_USER_AGENT'] = \"N/A\";\n}\nif (!isset($_GET['uploaded'])) {\n\t$_GET['uploaded'] = 0;\n}\nif (!isset($_GET['downloaded'])) {\n\t$_GET['downloaded'] = 0;\n}\nif (!isset($_GET['left'])) {\n\t$_GET['left'] = 0;\n}\n\n$state = 'state';\n$attempt = 'attempt';\nif (isset($_GET['event'])){\n\t$state = \"'\" . mysql_real_escape_string($_GET['event']) . \"'\";\n\t$attempt = 'LAST_INSERT_ID(peer_torrent.id)';\n}\n\nmysql_query('INSERT INTO peer_torrent (peer_id, torrent_id, uploaded, downloaded, `left`, attempt, `last_updated`) '\n\t. 'SELECT ' . $pk_peer . ', `torrent`.`id`, ' . intval($_GET['uploaded']) . ', ' . intval($_GET['downloaded']) . ', ' . intval($_GET['left']) . ', ' . 0 . ', UTC_TIMESTAMP() '\n\t. 'FROM `torrent` '\n\t. \"WHERE `torrent`.`hash` = '\" . mysql_real_escape_string(bin2hex($_GET['info_hash'])) . \"' \"\n\t. 'ON DUPLICATE KEY UPDATE `uploaded` = VALUES(`uploaded`), `downloaded` = VALUES(`downloaded`), `left` = VALUES(`left`), ' \n\t. 'state=' . $state . ', attempt=' . $attempt . ', ' \n\t. 'last_updated = VALUES(`last_updated`), ')\n\tor die(track(mysql_error()));\n$pk_peer_torrent = mysql_insert_id();\n\n$numwant = __MAX_PPR; //Can be modified by client\n\n//Set number of peers to return\nif (isset($_GET['numwant']) && ctype_digit($_GET['numwant']) && $_GET['numwant'] <= __MAX_PPR && $_GET['numwant'] >= 0) {\n\t$numwant = (int)$_GET['numwant'];\n}\n\n$q = mysql_query('SELECT INET_NTOA(peer.ip_address), peer.port, peer.peer_id '\n\t. 'FROM peer_torrent '\n\t. 'JOIN peer ON peer.id = peer_torrent.peer_id '\n\t. 'WHERE peer_torrent.torrent_id = ' . $pk_torrent . \" AND peer_torrent.state != 'stopped' \"\n\t. 'AND peer_torrent.last_updated >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL ' . (__INTERVAL + __TIMEOUT) . ' SECOND) '\n\t. 'AND peer.id != ' . $pk_peer . ' '\n\t. 'ORDER BY RAND() '\n\t. 'LIMIT ' . $numwant) or die(track(mysql_error()));\n\n$reply = array(); //To be encoded and sent to the client\n\nwhile ($r = mysql_fetch_array($q)) { //Runs for every client with the same infohash\n\t$reply[] = array($r[0], $r[1], $r[2]); //ip, port, peerid\n}\n\n$q = mysql_query('SELECT IFNULL(SUM(peer_torrent.left > 0), 0) AS leech, IFNULL(SUM(peer_torrent.left = 0), 0) AS seed '\n\t. 'FROM peer_torrent '\n\t. 'WHERE peer_torrent.torrent_id = ' . $pk_torrent . \" AND peer_torrent.state != 'stopped' \"\n\t. 'AND peer_torrent.last_updated >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL ' . (__INTERVAL + __TIMEOUT) . ' SECOND) '\n\t. 'GROUP BY `peer_torrent`.`torrent_id`') or die(track(mysql_error()));\n\n$seeders = 0;\n$leechers = 0;\n\nif ($r = mysql_fetch_array($q))\n{\n\t$seeders = $r[1];\n\t$leechers = $r[0];\n}\n\ndie(track($reply, $seeders[0], $leechers[0]));\n\n//Bencoding function, returns a bencoded dictionary\n//You may go ahead and enter custom keys in the dictionary in\n//this function if you'd like.\nfunction track($list, $c=0, $i=0) {\n\tif (is_string($list)) { //Did we get a string? Return an error to the client\n\t\treturn 'd14:failure reason'.strlen($list).':'.$list.'e';\n\t}\n\t$p = ''; //Peer directory\n\tforeach($list as $d) { //Runs for each client\n\t\t$pid = '';\n\t\tif (!isset($_GET['no_peer_id'])) { //Send out peer_ids in the reply\n\t\t\t$real_id = hex2bin($d[2]);\n\t\t\t$pid = '7:peer id'.strlen($real_id).':'.$real_id;\n\t\t}\n\t\t$p .= 'd2:ip'.strlen($d[0]).':'.$d[0].$pid.'4:porti'.$d[1].'ee';\n\t}\n\t//Add some other paramters in the dictionary and merge with peer list\n\t$r = 'd8:intervali'.__INTERVAL.'e12:min intervali'.__INTERVAL_MIN.'e8:completei'.$c.'e10:incompletei'.$i.'e5:peersl'.$p.'ee';\n\treturn $r;\n}\n\n//Do some input validation\nfunction valdata($g, $fixed_size=false) {\n\tif (!isset($_GET[$g])) {\n\t\tdie(track('Invalid request, missing data'));\n\t}\n\tif (!is_string($_GET[$g])) {\n\t\tdie(track('Invalid request, unknown data type'));\n\t}\n\tif ($fixed_size && strlen($_GET[$g]) != 20) {\n\t\tdie(track('Invalid request, length on fixed argument not correct'));\n\t}\n\tif (strlen($_GET[$g]) > 80) { //128 chars should really be enough\n\t\tdie(track('Request too long'));\n\t}\n}\n?>"], "filenames": ["announce.php"], "buggy_code_start_loc": [111], "buggy_code_end_loc": [117], "fixing_code_start_loc": [111], "fixing_code_end_loc": [117], "type": "CWE-89", "message": "A vulnerability classified as critical was found in ananich bitstorm. Affected by this vulnerability is an unknown functionality of the file announce.php. The manipulation of the argument event leads to sql injection. The name of the patch is ea8da92f94cdb78ee7831e1f7af6258473ab396a. It is recommended to apply a patch to fix this issue. The identifier VDB-217621 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125062", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T17:15:09.347", "lastModified": "2023-01-12T19:03:37.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in ananich bitstorm. Affected by this vulnerability is an unknown functionality of the file announce.php. The manipulation of the argument event leads to sql injection. The name of the patch is ea8da92f94cdb78ee7831e1f7af6258473ab396a. It is recommended to apply a patch to fix this issue. The identifier VDB-217621 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bitstorm_project:bitstorm:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-12-14", "matchCriteriaId": "F34C326E-0D9F-4798-87D6-33C6E220CF1A"}]}]}], "references": [{"url": "https://github.com/ananich/bitstorm/commit/ea8da92f94cdb78ee7831e1f7af6258473ab396a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217621", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217621", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ananich/bitstorm/commit/ea8da92f94cdb78ee7831e1f7af6258473ab396a"}}