{"buggy_code": ["class BsRequestActionSubmit < BsRequestAction\n  #### Includes and extends\n  include BsRequestAction::Differ\n\n  #### Constants\n\n  #### Self config\n  def self.sti_name\n    :submit\n  end\n\n  #### Attributes\n  #### Associations macros (Belongs to, Has one, Has many)\n  #### Callbacks macros: before_save, after_save, etc.\n  #### Scopes (first the default_scope macro if is used)\n  #### Validations macros\n  #### Class methods using self. (public and then private)\n  #### To define class methods as private use private_class_method\n  #### private\n\n  #### Instance methods (public and then protected/private)\n  def is_submit?\n    true\n  end\n\n  def execute_accept(opts)\n    # create package unless it exists already\n    target_project = Project.get_by_name(self.target_project)\n    if target_package\n      target_package = target_project.packages.find_by_name(self.target_package)\n    else\n      target_package = target_project.packages.find_by_name(source_package)\n    end\n\n    relink_source = false\n    unless target_package\n      # check for target project attributes\n      initialize_devel_package = target_project.find_attribute('OBS', 'InitializeDevelPackage')\n      # create package in database\n      linked_package = target_project.find_package(self.target_package)\n      if linked_package\n        # exists via project links\n        opts = { request: bs_request }\n        opts[:makeoriginolder] = true if makeoriginolder\n        instantiate_container(target_project, linked_package.update_instance, opts)\n        target_package = target_project.packages.find_by_name(linked_package.name)\n      else\n        # new package, base container on source container\n        newxml = Xmlhash.parse(Backend::Api::Sources::Package.meta(source_project, source_package))\n        newxml['name'] = self.target_package\n        newxml['devel'] = nil\n        target_package = target_project.packages.new(name: newxml['name'])\n        target_package.update_from_xml(newxml)\n        target_package.flags.destroy_all\n        target_package.remove_all_persons\n        target_package.remove_all_groups\n        if initialize_devel_package\n          target_package.develpackage = Package.find_by_project_and_name(source_project, source_package)\n          relink_source = true\n        end\n        target_package.store(comment: \"submit request #{bs_request.number}\", request: bs_request)\n      end\n    end\n\n    cp_params = {\n      noservice:      1,\n      requestid:      bs_request.number,\n      comment:        bs_request.description,\n      withacceptinfo: 1\n    }\n    cp_params[:orev] = source_rev if source_rev\n    cp_params[:dontupdatesource] = 1 if sourceupdate == 'noupdate'\n    unless updatelink\n      cp_params[:expand] = 1\n      cp_params[:keeplink] = 1\n    end\n    response = Backend::Api::Sources::Package.copy(self.target_project, self.target_package,\n                                                   source_project, source_package, User.current.login, cp_params)\n    result = Xmlhash.parse(response)\n\n    set_acceptinfo(result['acceptinfo'])\n\n    target_package.sources_changed\n\n    # cleanup source project\n    if relink_source && !(sourceupdate == 'noupdate')\n      # source package got used as devel package, link it to the target\n      # re-create it via branch , but keep current content...\n      options = { comment: \"initialized devel package after accepting #{bs_request.number}\",\n        requestid: bs_request.number, keepcontent: 1, noservice: 1 }\n      Backend::Api::Sources::Package.branch(self.target_project, self.target_package, source_project, source_package, User.current.login, options)\n    elsif sourceupdate == 'cleanup'\n      source_cleanup\n    end\n\n    return unless self.target_package == '_product'\n\n    Project.find_by_name!(self.target_project).update_product_autopackages\n  end\n\n  #### Alias of methods\nend\n\n# == Schema Information\n#\n# Table name: bs_request_actions\n#\n#  id                    :integer          not null, primary key\n#  bs_request_id         :integer          indexed, indexed => [target_package_id], indexed => [target_project_id]\n#  type                  :string(255)\n#  target_project        :string(255)      indexed\n#  target_package        :string(255)      indexed\n#  target_releaseproject :string(255)\n#  source_project        :string(255)      indexed\n#  source_package        :string(255)      indexed\n#  source_rev            :string(255)\n#  sourceupdate          :string(255)\n#  updatelink            :boolean          default(FALSE)\n#  person_name           :string(255)\n#  group_name            :string(255)\n#  role                  :string(255)\n#  created_at            :datetime\n#  target_repository     :string(255)\n#  makeoriginolder       :boolean          default(FALSE)\n#  target_package_id     :integer          indexed => [bs_request_id], indexed\n#  target_project_id     :integer          indexed => [bs_request_id], indexed\n#\n# Indexes\n#\n#  bs_request_id                                                    (bs_request_id)\n#  index_bs_request_actions_on_bs_request_id_and_target_package_id  (bs_request_id,target_package_id)\n#  index_bs_request_actions_on_bs_request_id_and_target_project_id  (bs_request_id,target_project_id)\n#  index_bs_request_actions_on_source_package                       (source_package)\n#  index_bs_request_actions_on_source_project                       (source_project)\n#  index_bs_request_actions_on_target_package                       (target_package)\n#  index_bs_request_actions_on_target_package_id                    (target_package_id)\n#  index_bs_request_actions_on_target_project                       (target_project)\n#  index_bs_request_actions_on_target_project_id                    (target_project_id)\n#\n# Foreign Keys\n#\n#  bs_request_actions_ibfk_1  (bs_request_id => bs_requests.id)\n#\n", "# rubocop:disable Metrics/LineLength\n# rubocop:disable Metrics/ClassLength\nrequire File.expand_path(File.dirname(__FILE__) + '/..') + '/test_helper'\nrequire 'request_controller'\n\nclass RequestControllerTest < ActionDispatch::IntegrationTest\n  fixtures :all\n\n  def setup\n    Backend::Test.start(wait_for_scheduler: true)\n    reset_auth\n  end\n\n  teardown do\n    Timecop.return\n  end\n\n  def test_set_and_get_1\n    login_king\n\n    xml = <<-XML.strip_heredoc\n      <request>\n        <action type='submit'>\n          <source project='home:Iggy' package='TestPack' rev='2'/>\n          <target project='kde4' package='wpa_supplicant'/>\n        </action>\n        <description/>\n        <state name='new' who='tom' when='2011-12-02T17:20:42'/>\n      </request>\n    XML\n    post '/request?cmd=create', params: xml\n    assert_response :success\n    new_request_id = BsRequest.last.number\n    assert_select 'request', id: new_request_id do\n      assert_select 'action', type: 'submit' do\n        assert_select 'source', project: 'home:Iggy', package: 'TestPack', rev: '2'\n        assert_select 'target', project: 'kde4', package: 'wpa_supplicant'\n      end\n      assert_select 'state', name: 'review', who: 'tom' do\n        assert_select 'comment'\n      end\n      assert_select 'review', state: 'new', by_user: 'adrian'\n      assert_select 'review', state: 'new', by_group: 'test_group'\n      assert_select 'description'\n    end\n\n    put(\"/request/#{new_request_id}\", params: xml)\n    assert_response :success\n    get \"/request/#{new_request_id}\"\n    assert_response :success\n    assert_select 'request', id: new_request_id do\n      assert_select 'state', name: 'new'\n    end\n  end\n\n  def test_invalid_command\n    post '/request?cmd=INVALID'\n    assert_response 401\n    login_king\n    post '/request?cmd=INVALID'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_command' })\n  end\n\n  def test_get_requests_collection\n    login_king\n    get '/request', params: { view: 'collection', reviewstates: 'accepted' }\n    assert_response :success\n    # Should respond with a collection of 9 requests\n    assert_select 'collection request', 9\n    # Should show all data belonging to each request\n    assert_select 'collection', matches: 9 do\n      assert_select 'request', id: 1000 do\n        assert_select 'action', type: 'submit' do\n          assert_select 'source', project: 'Apache', package: 'apache2', rev: '1'\n          assert_select 'target', project: 'kde4', package: 'apache2'\n        end\n        assert_select 'state', name: 'review', who: 'tom', when: '2013-09-09T19:15:16' do\n          assert_select 'comment'\n        end\n        assert_select 'review', state: 'new', by_package: 'apache2', by_project: 'Apache'\n        assert_select 'review', state: 'new', by_user: 'adrian'\n        assert_select 'review', state: 'new', by_group: 'test_group'\n        assert_select 'description', 'want to see his reaction'\n      end\n    end\n\n    # Narrow search for reviews by user adrian\n    get '/request', params: { view: 'collection', reviewstates: 'new', roles: 'reviewer', user: 'adrian' }\n    assert_response :success\n\n    # Should respond with a collection of 2 requests\n    assert_select 'collection request', 2\n\n    # Request 1000 should have exactly 2 review elements\n    assert_select \"request[id='1000'] review\", 2\n    # Request 4 should have exactly 1 review elements\n    assert_select \"request[id='4'] review\", 1\n\n    # Should show all data belonging to each request\n    assert_select 'collection', matches: 2 do\n      assert_select 'request', id: 1000 do\n        assert_select 'action', type: 'submit' do\n          assert_select 'source', project: 'Apache', package: 'apache2', rev: '1'\n          assert_select 'target', project: 'kde4', package: 'apache2'\n        end\n        assert_select 'state', name: 'review', who: 'tom', when: '2013-09-09T19:15:16' do\n          assert_select 'comment'\n        end\n        assert_select 'review', state: 'new', by_package: 'apache2', by_project: 'Apache'\n        assert_select 'review', state: 'new', by_user: 'adrian'\n        assert_select 'review', state: 'new', by_user: 'tom'\n        assert_select 'review', state: 'new', by_group: 'test_group'\n        assert_select 'description', 'want to see his reaction'\n      end\n      # Should find requests of groups adrian belongs to\n      assert_select 'request', id: 4 do\n        assert_select 'review', state: 'new', by_group: 'test_group'\n      end\n    end\n  end\n\n  def test_get_invalid_1\n    prepare_request_with_user 'Iggy', 'xxx'\n    get '/request/0815'\n    assert_response 401\n  end\n\n  def test_create_invalid\n    login_king\n    post '/request?cmd=create', params: 'GRFZL'\n    assert_response 400\n\n    reset_auth\n    # make sure requests from not valid users do not pass\n    req = load_backend_file('request/1')\n    post '/request?cmd=create', params: req\n    assert_response 401\n  end\n\n  def test_submit_request_of_new_package_with_devel_package\n    prepare_request_with_user 'Iggy', 'buildservice'\n\n    # we have a devel package definition in source\n    get '/source/BaseDistro:Update/pack2/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel')\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"NEW_PACKAGE\"/>\n                                   </action>\n                                   <description>Source has a devel package</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"RemoteInstance:BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"NEW_PACKAGE2\"/>\n                                   </action>\n                                   <description>Source has a devel package</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id2.present?\n\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id).state\n\n    # Ensure that requests can't be accepted twice\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response 403\n    assert_select 'status', code: 'post_request_no_permission' do\n      assert_select 'summary', 'change state from an accepted state is not allowed.'\n    end\n\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id2).state\n\n    get '/source/home:Iggy/NEW_PACKAGE/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel')\n    get '/source/home:Iggy/NEW_PACKAGE2/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel')\n\n    login_king\n    delete '/source/home:Iggy/NEW_PACKAGE'\n    assert_response :success\n    delete '/source/home:Iggy/NEW_PACKAGE2'\n    assert_response :success\n  end\n\n  def test_submit_request_of_new_package\n    Backend::Test.start(wait_for_scheduler: true)\n\n    prepare_request_with_user 'Iggy', 'buildservice'\n    post '/source/home:Iggy/NEW_PACKAGE', params: { cmd: :branch }\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n    post '/source/home:Iggy/TestPack', params: { cmd: :branch, missingok: 'true' }\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_missing' })\n    post '/source/home:Iggy/NEW_PACKAGE', params: { cmd: :branch, missingok: 'true' }\n    assert_response :success\n    get '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { missingok: 'true', project: 'home:Iggy', package: nil })\n    put '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/new_file', params: 'my content'\n    assert_response :success\n\n    # the birthday of J.K.\n    Timecop.freeze(2010, 7, 12)\n    # submit request\n    post '/request?cmd=create', params: '<request>\n                                   <priority>critical</priority>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy:branches:home:Iggy\" package=\"NEW_PACKAGE\"/>\n                                   </action>\n                                   <description>DESCRIPTION IS HERE</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    create_time = node['state']['when']\n    assert_equal '2010-07-12T00:00:00', create_time\n\n    # aka sleep 1\n    Timecop.freeze(1)\n\n    # sneak in a test case for the status controller\n    get \"/status/bsrequest?id=#{id}\"\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'         => id,\n                   'repository' =>\n                                   { 'name' => '10.2',\n                                     'arch' =>\n                                               [{ 'arch' => 'i586', 'result' => 'unknown' },\n                                                { 'arch' => 'x86_64', 'result' => 'unknown' }] } }, node)\n\n    # create more history entries prio change, decline, reopen and finally accept it\n    post \"/request/#{id}?cmd=setpriority&priority=ILLEGAL&comment=dontcare\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: \"Illegal priority 'ILLEGAL'\")\n    post \"/request/#{id}?cmd=setpriority&priority=low&comment=dontcare\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=declined&comment=notgood\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=oops\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id).state\n    assert_equal 'approved', BsRequest.find_by_number(id).comment\n\n    # package got created\n    get '/source/home:Iggy/NEW_PACKAGE/new_file'\n    assert_response :success\n\n    # validate history of new package\n    get '/source/home:Iggy/NEW_PACKAGE/_history'\n    assert_response :success\n    assert_xml_tag tag: 'requestid', content: id\n    assert_xml_tag tag: 'comment', content: 'DESCRIPTION IS HERE'\n    assert_xml_tag tag: 'user', content: 'Iggy'\n\n    # validate request\n    get \"/request/#{id}?withhistory=1\"\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    assert_xml_tag(tag: 'acceptinfo', attributes: { rev: '1', srcmd5: '1ded65e42c0f04bd08075dfd1fd08105', osrcmd5: 'd41d8cd98f00b204e9800998ecf8427e' })\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted', who: 'Iggy' })\n    assert_xml_tag(tag: 'history', attributes: { who: 'Iggy' })\n    assert_equal({\n                   'id'          => id,\n                   'creator'     => 'Iggy',\n                   'action'      => {\n                     'type'       => 'submit',\n                     'source'     => { 'project' => 'home:Iggy:branches:home:Iggy', 'package' => 'NEW_PACKAGE' },\n                     'target'     => { 'project' => 'home:Iggy', 'package' => 'NEW_PACKAGE' },\n                     'options'    => { 'sourceupdate' => 'cleanup' },\n                     'acceptinfo' => { 'rev' => '1', 'srcmd5' => '1ded65e42c0f04bd08075dfd1fd08105', 'osrcmd5' => 'd41d8cd98f00b204e9800998ecf8427e' }\n                   },\n                   'priority'    => 'low',\n                   'state'       => { 'name' => 'accepted', 'who' => 'Iggy', 'when' => '2010-07-12T00:00:04', 'comment' => 'approved' },\n                   'history'     => [\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:00', 'description' => 'Request created', 'comment' => 'DESCRIPTION IS HERE' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01', 'description' => 'Request got a new priority: critical => low', 'comment' => 'dontcare' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:02', 'description' => 'Request got declined', 'comment' => 'notgood' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:03', 'description' => 'Request got reopened', 'comment' => 'oops' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:04', 'description' => 'Request got accepted', 'comment' => 'approved' }\n                   ],\n                   'description' => 'DESCRIPTION IS HERE'\n                 }, node)\n\n    # compare times\n    node = ActiveXML::Node.new(@response.body)\n    assert((node.find_first('state').value('when') == node.each(:history).last.value('when')), 'Current state is has NOT same time as last history item')\n    oldhistory = nil\n    node.each(:history) do |h|\n      unless h\n        assert((h.value('when') > oldhistory.value('when')), 'Current history is not newer than the former history')\n      end\n      oldhistory = h\n    end\n\n    # missingok disapeared\n    post '/source/home:Iggy:branches:home:Iggy', params: { cmd: :undelete }\n    assert_response :success\n    get '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/_link'\n    assert_response :success\n    assert_no_xml_tag(tag: 'link', attributes: { missingok: 'true' })\n\n    # cleanup\n    login_king\n    delete '/source/home:Iggy:branches:home:Iggy'\n    assert_response :success\n    delete '/source/home:Iggy/NEW_PACKAGE'\n    assert_response :success\n\n    Timecop.return\n  end\n\n  def test_request_autodecline_on_removal\n    login_Iggy\n    post '/source/home:Iggy/TestPack?target_project=home:Iggy&target_package=TestPack.DELETE', params: { cmd: :branch }\n    assert_response :success\n    post '/source/home:Iggy/TestPack.DELETE?target_project=home:Iggy&target_package=TestPack.DELETE2', params: { cmd: :branch }\n    assert_response :success\n    put '/source/home:Iggy/TestPack.DELETE2/file', params: 'some'\n    assert_response :success\n\n    # create requests\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value('id')\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE\"/>\n                                     <target project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id2 = node.value('id')\n\n    delete '/source/home:Iggy/TestPack.DELETE2'\n    assert_response :success\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    delete '/source/home:Iggy/TestPack.DELETE'\n    assert_response :success\n  end\n\n  def test_submit_request_with_broken_source\n    login_Iggy\n    post '/source/home:Iggy/TestPack?target_project=home:Iggy&target_package=TestPack.DELETE', params: { cmd: :branch }\n    assert_response :success\n    post '/source/home:Iggy/TestPack.DELETE?target_project=home:Iggy&target_package=TestPack.DELETE2', params: { cmd: :branch }\n    assert_response :success\n\n    # create working requests\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value('id')\n\n    # create conflicts\n    put '/source/home:Iggy/TestPack.DELETE/conflictingfile', params: 'ASD'\n    assert_response :success\n    put '/source/home:Iggy/TestPack.DELETE2/conflictingfile', params: '123'\n    assert_response :success\n\n    # accepting request fails in a valid way\n    login_king\n    post \"/request/#{id1}?cmd=changestate&newstate=accepted&comment=review1&force=1\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n\n    # new requests are not possible anymore\n    login_Iggy\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\" rev=\"2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n\n    delete '/source/home:Iggy/TestPack.DELETE'\n    assert_response :success\n    delete '/source/home:Iggy/TestPack.DELETE2'\n    assert_response :success\n  end\n\n  def test_submit_broken_request\n    login_king\n    put '/source/home:coolo:test/kdelibs_DEVEL_package/file', params: 'CONTENT' # just to have a revision, or we fail\n    assert_response :success\n\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/no_such_project')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_package')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_user')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find User} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_group')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find Group} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_role')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find Role} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_target_project')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_target_package')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/missing_role')\n    assert_response 404\n    assert_select 'status[code] > summary', /No role specified/\n\n    post '/request?cmd=create', params: load_backend_file('request/failing_cleanup_due_devel_package')\n    assert_response 400\n    assert_select 'status[code] > summary', /Package is used by following packages as devel package:/\n  end\n\n  def test_set_bugowner_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner')\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { name: 'Iggy' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { name: 'Iggy' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_group')\n    assert_response :success\n    assert_xml_tag(tag: 'group', attributes: { name: 'test_group' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id2 = node.value('id')\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'group', attributes: { name: 'test_group' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail_unknown_user')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail_unknown_group')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    # test direct put\n    login_Iggy\n    put \"/request/#{id}\", params: load_backend_file('request/set_bugowner')\n    assert_response 403\n    put \"/request/#{id2}\", params: load_backend_file('request/set_bugowner_group')\n    assert_response 403\n\n    login_king\n    put \"/request/#{id}\", params: load_backend_file('request/set_bugowner')\n    assert_response :success\n    put \"/request/#{id2}\", params: load_backend_file('request/set_bugowner_group')\n    assert_response :success\n\n    # accept\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    meta = @response.body\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n    assert_no_xml_tag(tag: 'group', attributes: { role: 'bugowner' })\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'group', attributes: { role: 'bugowner' })\n    get '/source/kde4/kdelibs/_history?meta=1'\n    assert_response :success\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' }) # reset\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'bugowner' })\n    get '/source/kde4/kdelibs/_history?meta=1'\n    assert_response :success\n    assert_xml_tag(tag: 'comment', content: \"set_bugowner request #{id2}\")\n    assert_xml_tag(tag: 'requestid', content: id2)\n\n    # cleanup\n    put '/source/kde4/kdelibs/_meta', params: meta\n    assert_response :success\n  end\n\n  def test_invalid_bugowner_requests\n    login_Iggy\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'><title></title><description></description> </project>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <person name=\"DOESNOTEXIST\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <group name=\"DOESNOTEXIST\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    # cleanup\n    login_Iggy\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  def test_set_bugowner_request_locked_project\n    login_Iggy\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'><title></title><description></description>  <lock><enable/></lock></project>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <person name=\"adrian\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # works with force\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # unlock and try with a locked package\n    post '/source/home:Iggy:Test', params: { cmd: 'unlock', comment: 'cleanup' }\n    assert_response :success\n\n    put '/source/home:Iggy:Test/pack/_meta', params: \"<package project='home:Iggy:Test' name='pack'><title></title><description></description>  <lock><enable/></lock></package>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\" package=\"pack\"/>\n                                     <person name=\"adrian\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    get '/source/home:Iggy:Test/pack/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # works with force\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/home:Iggy:Test/pack/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # cleanup\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  def test_create_request_anonymous\n    # try it without anonymous - login required\n    post '/request?cmd=create', params: load_backend_file('request/add_role')\n    assert_xml_tag tag: 'status', attributes: { code: 'authentication_required' }\n    assert_response 401\n\n    # now try as webui if we get a different error\n    post '/request?cmd=create', params: load_backend_file('request/add_role'), headers: { 'HTTP_USER_AGENT' => 'obs-webui-something' }\n    assert_xml_tag tag: 'status', attributes: { code: 'anonymous_user' }\n    assert_response 401\n  end\n\n  def test_add_role_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/add_role')\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    post '/request?cmd=create', params: load_backend_file('request/add_role_fail')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/add_role_fail')\n    assert_response 404\n  end\n\n  def test_create_request_clone_and_superseed_it\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # do the real mbranch for default maintained packages\n    reset_auth\n    login_tom\n    post '/source', params: { cmd: 'branch', request: id }\n    assert_response :success\n\n    # got the correct package branched ?\n    get \"/source/home:tom:branches:REQUEST_#{id}\"\n    assert_response :success\n    get \"/source/home:tom:branches:REQUEST_#{id}/TestPack.home_Iggy\"\n    assert_response :success\n    get \"/source/home:tom:branches:REQUEST_#{id}/TestPack.home_Iggy/_link\"\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    get \"/source/home:tom:branches:REQUEST_#{id}/_attribute/OBS:RequestCloned\"\n    assert_response :success\n    assert_xml_tag(tag: 'attribute', attributes: { namespace: 'OBS', name: 'RequestCloned' },\n                   child: { tag: 'value', content: id })\n    # cleanup\n    delete \"/source/home:tom:branches:REQUEST_#{id}\"\n    assert_response :success\n  end\n\n  def test_create_request_review_and_supersede\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n    # try update comment\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=blahfasel\"\n    assert_response 403\n\n    # update comment for real\n    request = BsRequest.find_by_number(id)\n    h1 = request.request_history_elements\n    hr1 = request.history_elements\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=blahfasel\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'blahfasel')\n    request = BsRequest.find_by_number(id)\n    h2 = request.request_history_elements\n    hr2 = request.history_elements\n    assert_equal h2.length - h1.length, 0 # no change\n    assert_equal hr2.length - hr1.length, 1 # review accepted\n\n    # invalid state\n    post \"/request/#{id}?cmd=changereviewstate&newstate=INVALID&by_user=tom&comment=blahfasel\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_not_modifiable' })\n\n    # superseded review\n    post \"/request/#{id}?cmd=changereviewstate&newstate=superseded&by_user=tom&superseded_by=1\"\n    assert_response :success\n\n    # another final state is not allowed\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=blahfasel\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n    assert_xml_tag(tag: 'summary', content: 'The request is neither in state review nor new')\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'superseded', superseded_by: '1' })\n  end\n\n  def test_create_request_and_supersede\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    login_tom\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # target says supersede it due to another existing request\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'superseded', superseded_by: '1' })\n  end\n\n  def test_create_request_and_supersede_as_creator\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response :success\n  end\n\n  def test_create_request_and_decline_review\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_not_specified' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=tom\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # add review not permitted anymore\n    post \"/request/#{id}?cmd=addreview&by_user=king\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n  end\n\n  # MeeGo BOSS: is using multiple reviews by same user for each step\n  def test_create_request_and_multiple_reviews\n    # the birthday of J.K.\n    Timecop.freeze(2010, 7, 12)\n\n    login_Iggy\n    post('/request?cmd=create', params: \"<request>\n                                   <action type='add_role'>\n                                     <target project='home:Iggy' package='TestPack' />\n                                     <person name='Iggy' role='reviewer' />\n                                    </action>\n                                  </request>\")\n\n    assert_response :success\n\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    Timecop.freeze(1) # 0:0:1 review added\n    post \"/request/#{id}?cmd=addreview&by_user=tom&comment=couldyou\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # accept review\n    login_tom\n    Timecop.freeze(1) # 0:0:2 tom accepts review\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=review1\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # readd reviewer\n    login_Iggy\n    Timecop.freeze(1) # 0:0:3 yet another review for tom\n    post \"/request/#{id}?cmd=addreview&by_user=tom&comment=overlooked\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # accept review\n    login_tom\n    Timecop.freeze(1) # 0:0:4 yet another review accept by tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=review2\"\n    assert_response :success\n\n    # check review comments are the same\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'review1')\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'review2')\n\n    # reopen a review\n    login_tom\n    Timecop.freeze(1) # 0:0:5 reopened from tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=reopen2\"\n    assert_response :success\n    get \"/request/#{id}?withhistory=1\"\n    assert_response :success\n\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(parent: { tag: 'review', attributes: { state: 'accepted', by_user: 'tom' } }, tag: 'comment', content: 'review1')\n    assert_xml_tag(parent: { tag: 'review', attributes: { state: 'new', by_user: 'tom' } }, tag: 'comment', content: 'reopen2')\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id.to_s,\n                   'creator' => 'Iggy',\n                   'action'  => {\n                     'type'   => 'add_role',\n                     'target' => { 'project' => 'home:Iggy', 'package' => 'TestPack' },\n                     'person' => { 'name' => 'Iggy', 'role' => 'reviewer' }\n                   },\n                   'state'   => {\n                     'name'    => 'review',\n                     'who'     => 'tom',\n                     'when'    => '2010-07-12T00:00:05',\n                     'comment' => 'reopen2'\n                   },\n                   'review'  => [{\n                     'state'   => 'accepted',\n                     'when'    => '2010-07-12T00:00:01',\n                     'who'     => 'tom',\n                     'by_user' => 'tom',\n                     'comment' => 'review1',\n                     'history' => {\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:02',\n                       'description' => 'Review got accepted',\n                       'comment'     => 'review1'\n                     }\n                   }, {\n                     'state'   => 'new',\n                     'when'    => '2010-07-12T00:00:03',\n                     'who'     => 'tom',\n                     'by_user' => 'tom',\n                     'comment' => 'reopen2',\n                     'history' => [{ 'who' => 'tom', 'when' => '2010-07-12T00:00:04',\n                                    'description' => 'Review got accepted',\n                                    'comment' => 'review2' },\n                                   { 'who' => 'tom', 'when' => '2010-07-12T00:00:05',\n                                    'description' => 'Review got reopened',\n                                    'comment' => 'reopen2' }]\n                   }],\n                   'history' => [\n                     { 'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:00',\n                       'description' => 'Request created' },\n                     { 'description' => 'Request got a new review request',\n                       'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:01',\n                       'comment'     => 'couldyou' },\n                     { 'description' => 'Request got reviewed',\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:02',\n                       'comment'     => 'review1' },\n                     { 'description' => 'Request got a new review request',\n                       'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:03',\n                       'comment'     => 'overlooked' },\n                     { 'description' => 'Request got reviewed',\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:04',\n                       'comment'     => 'review2' }\n                   ] }, node)\n  end\n\n  def test_assign_from_group\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer group\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=king\"\n    assert_response :success\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    post \"/request/#{id}?cmd=addreview&by_group=test_group_b\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # adrian assigns to Iggy and reverts\n    login_adrian\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=Iggy\", params: 'Iggy, please have a look'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n    # stealing the review of king is not working\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=king&revert=1\", params: 'try to kill it'\n    assert_response 404\n    assert_xml_tag tag: 'summary', content: 'Not an assigned review'\n    # Iggy went home without telling....\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=Iggy&revert=1\", params: 'ups, drop it again'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n\n    # adrian assigns to adrian_downloader\n    login_adrian\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=adrian_downloader\", params: 'adrian_downloader, please have a look'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n\n    login_adrian_downloader\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian_downloader\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_user: 'adrian_downloader' })\n\n    # adrian_downloader assigns to himself\n    post \"/request/#{id}?by_group=test_group_b&cmd=assignreview&reviewer=adrian_downloader\", params: 'I will work on it as well'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'accepted', by_user: 'adrian_downloader' })\n\n    # ah, no.....\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=adrian_downloader\"\n    assert_response :success\n\n    # validate\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group_b' })\n  end\n\n  def test_change_review_state_after_leaving_review_phase\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # add reviewer group\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    login_adrian\n    post \"/request/#{id}?newstate=new&by_group=test_group&cmd=changereviewstate\", params: 'adrian is looking'\n    assert_response :success\n    post \"/request/#{id}?newstate=new&by_group=test_group&cmd=changereviewstate\", params: 'adrian does not care'\n    assert_response :success\n\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=tom\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'tom' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' },\n                   child: { tag: 'comment', content: 'adrian does not care' })\n\n    # change review not permitted anymore\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_group=test_group\"\n    assert_response 403\n    assert_xml_tag tag: 'status', attributes: { code: 'review_change_state_no_permission' }\n\n    # search this request and verify that all reviews got rendered.\n    get '/search/request', params: { match: \"[@id=#{id}]\" }\n    assert_response :success\n    get '/search/request', params: { match: \"[review/@by_user='adrian']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n  end\n\n  def test_search_by_creator\n    login_Iggy\n    get '/search/request', params: { match: \"@creator='Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: '6', creator: 'Iggy' })\n  end\n\n  def test_search_and_involved_requests\n    req = load_backend_file('request/1')\n\n    # claim to be someone else\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: 'Admin permissions required to set request creator to foreign user')\n\n    # make sure there is at least one request\n    login_tom\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    id = node.value :id\n\n    # admin can define requests in the name of other people\n    login_king\n    put(\"/request/#{id}\", params: load_backend_file('request/1'))\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { who: 'tom' })\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n    assert_xml_tag(tag: 'state', attributes: { name: 'new', who: 'tom' })\n\n    # via GET\n    login_Iggy\n    get '/search/request', params: { match: \"(state/@name='new' or state/@name='review') and (action/target/@project='kde4' and action/target/@package='wpa_supplicant')\" }\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # via POST\n    post '/search/request', params: URI.encode(\"match=(state/@name='new' or state/@name='review') and (action/target/@project='kde4' and action/target/@package='wpa_supplicant')\")\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # search history\n    get '/search/request', params: { match: \"history/@who='Iggy'\" }\n    assert_response :success\n    assert_no_xml_tag(tag: 'history')\n    get '/search/request', params: { match: \"history/@who='Iggy'\", withhistory: '1' }\n    assert_response :success\n    assert_xml_tag(tag: 'history', attributes: { who: 'Iggy' })\n\n    # test \"osc rq\"\n    get '/search/request', params: { match: \"(state/@who='tom' or history/@who='tom')\" }\n    assert_response :success\n    assert_xml_tag tag: 'collection', children: { count: 6 }\n\n    # old style listing\n    get '/request'\n    assert_response :success\n    assert_xml_tag(tag: 'directory', child: { tag: 'entry' })\n\n    # collection view\n    get '/request?view=collection'\n    assert_response 404\n\n    # collection of user involved requests\n    get '/request?view=collection&user=Iggy&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    if @ENABLE_BROKEN_TEST\n      # FIXME: there is no code in this test creating request from HiddenProject\n\n      assert_xml_tag(tag: 'source', attributes: { project: 'HiddenProject', package: 'pack' })\n    end\n\n    # collection for given package\n    get '/request?view=collection&project=kde4&package=wpa_supplicant&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: '1' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'kde4', package: 'wpa_supplicant' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # collection for given project\n    get '/request?view=collection&project=kde4&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: '4' })\n\n    # tom searches for all request of adrian, but adrian has one in a hidden project which must not be viewable ...\n    login_tom\n    get '/request?view=collection&user=adrian&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_no_xml_tag(tag: 'target', attributes: { project: 'HiddenProject' })\n\n    return unless @ENABLE_BROKEN_TEST\n\n    # ... but adrian gets it\n    login_adrian\n    get '/request?view=collection&user=adrian&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'HiddenProject' })\n  end\n\n  def test_process_devel_request\n    login_king\n\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_no_xml_tag tag: 'devel', attributes: { project: 'BaseDistro', package: 'pack1' }\n    oldmeta = @response.body\n\n    rq = '<request>\n           <action type=\"change_devel\">\n             <source project=\"BaseDistro\" package=\"pack1\"/>\n             <target project=\"home:Iggy\" package=\"TestPack\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # and create a delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"BaseDistro\" package=\"pack1\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value(:id)\n\n    # try to approve change_devel\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_xml_tag tag: 'devel', attributes: { project: 'BaseDistro', package: 'pack1' }\n\n    # try to create delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"BaseDistro\" package=\"pack1\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    # this used to verify it can't delete devel links, but that was changed\n    assert_response :success\n\n    # try to delete package via old request, it should fail\n    login_king\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response 400\n\n    # cleanup\n    put '/source/home:Iggy/TestPack/_meta', params: oldmeta.dup\n    assert_response :success\n  end\n\n  def test_reject_request_creation\n    login_Iggy\n\n    # block request creation in project\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Go Away</value> </attribute> </attributes>\"\n    assert_response :success\n\n    rq = '<request>\n           <action type=\"submit\">\n             <source project=\"BaseDistro\" package=\"pack1\" rev=\"1\"/>\n             <target project=\"home:Iggy\" package=\"TestPack\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Go Away/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n\n    # just for submit actions\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>No Submits</value> <value>submit</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/No Submits/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # but it works when blocking only for others\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Submits welcome</value> <value>delete</value> <value>set_bugowner</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response :success\n\n    # block request creation in package\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Package blocked</value> </attribute> </attributes>\"\n    assert_response :success\n\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Package blocked/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # remove project attribute lock\n    delete '/source/home:Iggy/_attribute/OBS:RejectRequests'\n    assert_response :success\n    # still not working\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Package blocked/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n\n    # just for submit actions\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>No Submits</value> <value>submit</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/No Submits/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # but it works when blocking only for others\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Submits welcome</value> <value>delete</value> <value>set_bugowner</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response :success\n\n    # FIXME: test with request without target\n\n    # cleanup\n    delete '/source/home:Iggy/TestPack/_attribute/OBS:RejectRequests'\n    assert_response :success\n  end\n\n  # osc is still submitting with old style by default\n  def test_old_style_submit_request\n    prepare_request_with_user 'hidden_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request type=\"submit\">\n                                   <submit>\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </submit>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    # test that old style request got converted\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag tag: 'submit'\n    assert_xml_tag tag: 'action', attributes: { type: 'submit' }\n  end\n\n  def test_submit_request_from_hidden_project_and_hidden_source\n    login_tom\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"home:tom\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"SourceprotectedProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"home:tom\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 403\n\n    prepare_request_with_user 'hidden_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    prepare_request_with_user 'sourceaccess_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"SourceprotectedProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n  end\n\n  def test_auto_revoke_when_source_gets_removed_maintenance_incident\n    login_tom\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"maintenance_incident\">\n                                     <source project=\"home:tom:branches:kde4\" package=\"kdebase\" rev=\"1\"/>\n                                     <target project=\"My:Maintenance\" releaseproject=\"BaseDistro3\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value(:id)\n\n    login_king\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response :success\n\n    # delete projects\n    login_tom\n    delete '/source/home:tom:branches:kde4'\n    assert_response :success\n\n    # request got automatically revoked\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # test revoke\n    login_adrian\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response 403\n  end\n\n  def test_auto_revoke_when_source_gets_removed_submit\n    login_tom\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:tom:branches:kde4\" package=\"kdebase\" rev=\"0\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'kde4', package: 'kdebase' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value(:id)\n\n    post '/source/home:tom:branches:kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:tom:branches:home:tom:branches:kde4\" package=\"kdebase\" rev=\"0\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'home:tom:branches:kde4', package: 'kdebase' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    # id2 = node.value(:id)\n\n    # delete projects\n    delete '/source/home:tom:branches:home:tom:branches:kde4'\n    assert_response :success\n    delete '/source/home:tom:branches:kde4'\n    assert_response :success\n\n    # request got automatically revoked\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # test decline and revoke\n    login_adrian\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response 403 # set back is not allowed\n  end\n\n  def test_revoke_and_decline_when_projects_are_not_existing_anymore\n    login_tom\n\n    # test revoke, the request is part of fixtures\n    post '/request/3?cmd=changestate&newstate=revoked'\n    assert_response :success\n    # missing target project\n    post '/request/2?cmd=changestate&newstate=revoked'\n    assert_response :success\n\n    # missing source project\n    post '/request/1?cmd=changestate&newstate=declined'\n    assert_response 403\n\n    login_adrian\n    post '/request/1?cmd=changestate&newstate=declined'\n    assert_response :success\n  end\n\n  def test_create_and_revoke_submit_request_permissions\n    req = \"<request>\n             <action type='submit'>\n               <source project='home:Iggy' package='TestPack' rev='1' />\n               <target project='kde4' package='mypackage' />\n             </action>\n             <description/>\n          </request>\"\n\n    post '/request?cmd=create', params: req\n    assert_response 401\n    assert_select 'status[code] > summary', /Authentication required/\n\n    # create request by non-maintainer => validate created review item\n    login_tom\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id_by_package = node.value(:id)\n\n    # find requests which are not in review\n    get '/request?view=collection&user=Iggy&states=new'\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    # find reviews\n    get '/request?view=collection&user=Iggy&states=review&reviewstates=new&roles=reviewer'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n\n    # test search via xpath as well\n    get '/search/request', params: { match: \"state/@name='review' and review[@by_project='home:Iggy' and @state='new']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n\n    # create request by maintainer\n    login_Iggy\n    req = load_backend_file('request/submit_without_target')\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_target_project' })\n\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_tom\n    post \"/request/#{id}?cmd=addreview&by_user=adrian\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'add_review_not_permitted' })\n\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    login_tom\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # test search via xpath as well\n    get '/search/request', params: { match: \"state/@name='review' and review[@by_group='test_group' and @state='new']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # invalid review, by_project is missing\n    post \"/request/#{id}?cmd=addreview&by_package=kdelibs\"\n    assert_response 400\n\n    post \"/request/#{id}?cmd=addreview&by_project=kde4&by_package=kdelibs\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'kde4', by_package: 'kdelibs' })\n\n    post \"/request/#{id}?cmd=addreview&by_project=home:tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:tom', by_package: nil })\n\n    # and revoke it\n    reset_auth\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response 401\n\n    login_tom\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response 403\n    post '/request/ILLEGAL_CONTENT?cmd=changestate&newstate=revoked'\n    assert_response 404\n    # Rails does not allow /request/:id to match non-integers, so there is no XML generated for 404\n    # assert_xml_tag tag: 'status', attributes: {code: 'not_found'}\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # decline by_package review\n    reset_auth\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response 401\n\n    login_tom\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response 403\n\n    login_Iggy\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response :success\n\n    get \"/request/#{id_by_package}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_project: 'home:Iggy', by_package: 'TestPack', who: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # reopen with new, but state should become review due to open review\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n  end\n\n  def test_submit_cleanup_in_not_writable_source\n    login_Iggy\n    ['cleanup', 'update'].each do |modify|\n      req = \"<request>\n              <action type='submit'>\n                <source project='Apache' package='apache2' rev='1' />\n                <target project='home:Iggy' package='apache2' />\n                <options>\n                  <sourceupdate>#{modify}</sourceupdate>\n                </options>\n              </action>\n              <description/>\n            </request>\"\n      post '/request?cmd=create', params: req\n      assert_response 403\n      assert_xml_tag(tag: 'status', attributes: { code: 'lacking_maintainership' })\n    end\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='Apache' package='apache2' rev='1' />\n              <target project='home:Iggy' package='apache2' />\n              <options>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'lacking_maintainership' })\n  end\n\n  def test_makeoriginolder_request\n    login_Iggy\n\n    put '/source/home:Iggy:Apache/_meta', params: \"<project name='home:Iggy:Apache'> <title/> <description/>\n                                         <link project='Apache'/>\n                                        </project>\"\n    assert_response :success\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='Apache' package='apache2' rev='1' />\n              <target project='home:Iggy:Apache' package='apache2' />\n              <options>\n                <makeoriginolder>true</makeoriginolder>\n              </options>\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    # no write permission\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=But+I+want+it\"\n    assert_response 403\n    post \"/request/#{id}?cmd=changestate&newstate=revoked&comment=take+it+back\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=try+again\"\n    assert_response :success\n\n    # approvereview\n    login_fred\n    post \"/request/#{id}?cmd=changereviewstate&by_project=Apache&by_package=apache2&newstate=accepted\"\n    assert_response :success\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=But+I+want+it\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1&comment=But+I+want+it\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    delete '/source/home:Iggy:Apache'\n    assert_response :success\n  end\n\n  def test_reopen_a_review_declined_request\n    ['new', 'review'].each do |newstate|\n      login_Iggy\n      post '/source/Apache/apache2', params: { cmd: :branch }\n      assert_response :success\n\n      # do a commit\n      put '/source/home:Iggy:branches:Apache/apache2/file', params: 'dummy'\n      assert_response :success\n\n      req = \"<request>\n              <action type='submit'>\n                <source project='home:Iggy:branches:Apache' package='apache2' rev='2' />\n              </action>\n              <description/>\n            </request>\"\n      post '/request?cmd=create', params: req\n      assert_response :success\n      assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n      node = ActiveXML::Node.new(@response.body)\n      assert node.has_attribute?(:id)\n      id = node.value(:id)\n\n      # add reviewer\n      post \"/request/#{id}?cmd=addreview&by_user=fred\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { by_user: 'fred' })\n\n      # reviewer declines\n      login_fred\n      post \"/request/#{id}?cmd=changereviewstate&by_user=fred&newstate=declined\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'fred' })\n\n      # reopen it again and validate that the request opens the review as well\n      login_Iggy\n      post \"/request/#{id}?cmd=changestate&newstate=#{newstate}&comment=But+I+want+it\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'fred' })\n      assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n\n      # cleanup\n      delete '/source/home:Iggy:branches:Apache'\n      assert_response :success\n    end\n  end\n\n  def test_reopen_revoked_and_declined_request\n    login_Iggy\n    post '/source/Apache/apache2', params: { cmd: :branch }\n    assert_response :success\n\n    # do a commit\n    put '/source/home:Iggy:branches:Apache/apache2/file', params: 'dummy'\n    assert_response :success\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy:branches:Apache' package='apache2' rev='0' />\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # revoke it\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # and reopen it as a non-maintainer is not working\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n    # and reopen it as a non-source-maintainer is not working\n    prepare_request_with_user 'fredlibs', 'buildservice'\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n\n    # reopen it again\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # target is declining it\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # find it as I am the creator\n    get '/request?view=collection&states=declined&roles=creator'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # find it as another user\n    login_adrian\n    get '/request?view=collection&user=Iggy&states=declined&roles=creator'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # and reopen it as a non-maintainer is not working\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n\n    # and reopen it as a different maintainer from target\n    prepare_request_with_user 'fredlibs', 'buildservice'\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # cleanup\n    login_Iggy\n    delete '/source/home:Iggy:branches:Apache'\n    assert_response :success\n  end\n\n  def test_all_action_types\n    req = load_backend_file('request/cover_all_action_types_request')\n    login_Iggy\n\n    # create kdebase package\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: req\n    assert_response :success\n    put '/source/home:Iggy:branches:kde4/kdebase/change', params: 'avoid dropped submit action'\n    assert_response :success\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian', state: 'new' })\n\n    # do not accept request in review state\n    get \"/request/#{id}\"\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_match(/Request is in review state/, @response.body)\n\n    # approve reviews\n    login_adrian\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n\n    # a review has been added because we are not maintainer of current devel package, accept it.\n    login_king\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:coolo:test', by_package: 'kdelibs_DEVEL_package' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # reopen the review\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_group=INEXISTENT\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=INEXISTENT\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    # and accept it again\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # validate our existing test data and fixtures\n    login_king\n    get '/source/home:Iggy/ToBeDeletedTestPack/_meta'\n    assert_response :success\n    get '/source/home:fred:DeleteProject/_meta'\n    assert_response :success\n    get '/source/kde4/Testing/myfile'\n    assert_response 404\n    get '/source/kde4/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_no_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_no_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n\n    # Successful accept the request\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # Validate the executed actions\n    get '/source/home:Iggy:branches:kde4/BranchPack/_link'\n    assert_response :success\n    assert_xml_tag tag: 'link', attributes: { project: 'kde4', package: 'Testing' }\n    get '/source/home:Iggy/ToBeDeletedTestPack'\n    assert_response 404\n    get '/source/home:fred:DeleteProject'\n    assert_response 404\n    get '/source/kde4/Testing/myfile'\n    assert_response :success\n    get '/source/kde4/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n\n    # cleanup\n    login_king\n    delete '/source/kde4/Testing'\n    assert_response :success\n    post '/source/home:fred:DeleteProject', params: { cmd: 'undelete' }\n    assert_response :success\n    post '/source/home:Iggy/ToBeDeletedTestPack', params: { cmd: 'undelete' }\n    assert_response :success\n  end\n\n  def test_submit_with_review\n    req = load_backend_file('request/submit_with_review')\n\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    # we upload 2 and 2 default reviewers are added\n    assert_xml_tag(children: { only: { tag: 'review' }, count: 4 })\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' }, parent: { tag: 'request' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # test search\n    get '/request?view=collection&group=test_group&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    # be sure we have not 2 invalidating the limit test\n    assert_no_xml_tag(tag: 'collection', attributes: { matches: 2 })\n\n    # test limit\n    get '/request?view=collection&group=test_group&states=new,review&limit=2'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: 2 })\n\n    # try to break permissions\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_match(/Request is in review state./, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response 403\n    assert_match(/review state change is not permitted for/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response 403\n    assert_match(/review state change for group test_group is not permitted for Iggy/, @response.body)\n    post '/request/987654321?cmd=changereviewstate&newstate=accepted&by_group=test_group'\n    assert_response 404\n    assert_match(/Couldn't find request with id '987654321'/, @response.body)\n\n    # Only partly matching by_ arguments\n    login_adrian\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_group=test_group_b\"\n    assert_response 403\n    assert_match(/review state change for group test_group_b is not permitted for adrian/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_project=BaseDistro\"\n    assert_response 403\n    assert_match(/review state change for project BaseDistro is not permitted for adrian/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_project=BaseDistro&by_package=pack2\"\n    assert_response 403\n    assert_match(/review state change for package BaseDistro\\/pack2 is not permitted for adrian/, @response.body)\n\n    # approve reviews for real\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' },\n                   parent: { tag: 'request' }) # remains in review state\n\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' },\n                   parent: { tag: 'request' }) # switch to new after last review\n\n    # approve accepted and check initialized devel package\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/Testing/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n\n    # cleanup\n    login_king\n    delete '/source/home:Iggy/TestPack/_link'\n    assert_response :success\n    delete '/source/kde4/Testing'\n    assert_response :success\n  end\n\n  def test_reviewer_added_when_source_maintainer_is_missing\n    # create request\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='BaseDistro2.0' package='pack2' rev='1' />\n              <target project='home:tom' package='pack2' />\n            </action>\n            <description>SUBMIT</description>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'BaseDistro2.0', by_package: 'pack2' })\n\n    # set project to approve it\n    login_king\n    post '/source/BaseDistro2.0/_attribute', params: \"<attributes><attribute namespace='OBS' name='ApprovedRequestSource' /></attributes>\"\n    assert_response :success\n\n    # create request again\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='BaseDistro2.0' package='pack2' rev='1' />\n              <target project='home:tom' package='pack2' />\n            </action>\n            <description>SUBMIT</description>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'BaseDistro2.0', by_package: 'pack2' })\n\n    # cleanup attribute\n    login_king\n    delete '/source/BaseDistro2.0/_attribute/OBS:ApprovedRequestSource'\n    assert_response :success\n  end\n\n  def test_submit_unchanged_sources\n    # create ower playground\n    login_king\n    put '/source/DummY/_meta', params: \"<project name='DummY'><title/><description/><link project='BaseDistro2.0'/></project>\"\n    assert_response :success\n\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/DummY/pack2', params: { cmd: :branch }\n    assert_response :success\n\n    # check source link\n    get '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/_link'\n    assert_response :success\n    ret = Xmlhash.parse @response.body\n    assert_equal 'BaseDistro2.0:LinkedUpdateProject', ret['project']\n    assert_nil ret['package'] # same package name\n\n    # create request back of unchanged sources, but creating a new package instance\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # now link package inside, so sources are unchanged\n    login_king\n    post '/source/BaseDistro2.0/pack2', params: { cmd: :branch, target_project: 'DummY' }\n    assert_response :success\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'missing_action' })\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'missing_action' })\n\n    # create request to a different place works\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='packNew' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='packNew' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # now with modified sources\n    login_tom\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/new_file', params: 'just to have changed source'\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # cleanup\n    login_king\n    delete '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject'\n    assert_response :success\n    delete '/source/DummY'\n    assert_response :success\n  end\n\n  def test_branch_and_submit_request_to_linked_project_and_delete_it_again\n    # create ower playground\n    login_king\n    put '/source/DummY/_meta', params: \"<project name='DummY'><title/><description/><link project='BaseDistro2.0'/></project>\"\n    assert_response :success\n\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/DummY/pack2', params: { cmd: :branch }\n    assert_response :success\n\n    # check source link\n    get '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/_link'\n    assert_response :success\n    ret = Xmlhash.parse @response.body\n    assert_equal 'BaseDistro2.0:LinkedUpdateProject', ret['project']\n    assert_nil ret['package'] # same package name\n\n    # do some modification\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/NEW_FILE', params: 'content'\n    assert_response :success\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted' })\n\n    get '/source/DummY/pack2/_history'\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'comment', content: 'SUBMIT')\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: id)\n\n    # pack2 got created\n    get '/source/DummY/pack2/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0', package: nil })\n\n    ### try again with update link\n    # do some modification\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/NEW_FILE', params: 'NEW content'\n    assert_response :success\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # ensure that the diff shows the link change\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'changed' } }, tag: 'old', attributes: { name: '_link' })\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n\n    # the link in pack2 got changed\n    get '/source/DummY/pack2/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0:LinkedUpdateProject', package: nil })\n\n    # the diff is still working due to acceptinfo\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'action', attributes: { type: 'submit' } }, tag: 'acceptinfo', attributes: { rev: '3' })\n    post \"/request/#{id}?cmd=diff\"\n    assert_response :success\n    assert_match 'NEW_FILE', @response.body\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'changed' } }, tag: 'new', attributes: { name: 'NEW_FILE' })\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2.NEW' />\n              <options>\n                <sourceupdate>cleanup</sourceupdate>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create&addrevision=1', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # ensure that the diff shows the link change\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'added' } }, tag: 'new', attributes: { name: '_link' })\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n\n    # the link got transfered\n    get '/source/DummY/pack2.NEW/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0:LinkedUpdateProject', package: nil })\n\n    ###\n    # create delete request two times\n    login_tom\n    req = \"<request>\n            <action type='delete'>\n              <target project='DummY' package='pack2'/>\n            </action>\n            <action type='delete'>\n              <target project='DummY' package='pack2.NEW'/>\n            </action>\n            <description>DELETE REQUEST</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id2.present?\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id3 = node['id']\n    assert id3.present?\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted' })\n\n    # validate result\n    get '/source/DummY/pack2/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'package', attributes: { project: 'BaseDistro2.0', name: 'pack2' })\n    get '/source/DummY/pack2/_history?deleted=1'\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'comment', content: 'DELETE REQUEST')\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: id)\n\n    login_king\n    # you can only accept request in state new\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # you can only accept request in state new and with an existing target\n    post \"/request/#{id2}?cmd=changestate&newstate=new&force=1\"\n    assert_response :success\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_existing_target' })\n\n    # decline the request\n    post \"/request/#{id2}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # submitter is accepting the decline => revoke\n    login_tom\n    post \"/request/#{id2}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # try to decline it again after revoke\n    login_king\n    post \"/request/#{id2}?cmd=changestate&newstate=declined\"\n    assert_response 403\n    assert_match(/set state to declined from a final state is not allowed./, @response.body)\n\n    # revoke the request\n    post \"/request/#{id3}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id3}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # cleanup\n    login_king\n    delete '/source/DummY'\n    assert_response :success\n    delete '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject'\n    assert_response :success\n  end\n\n  def test_auto_accept_request\n    login_tom\n\n    Timecop.freeze(2010, 7, 12)\n\n    # create request with auto accept tomorrow\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <accept_at>2010-07-13 14:00:21.000000000 Z</accept_at>\n            <description>SUBMIT</description>\n            <state/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    # user has no write permission in target\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # works as user with write permission in target\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    # and a second request\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id.present?\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-13 14:00:21 UTC')\n\n    # but not when the time is yesterday\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <accept_at>2010-07-11 14:00:21.000000000 Z</accept_at>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: 'Auto accept time is in the past')\n\n    # now time travel and accept\n    Timecop.freeze(2.days)\n    # the backend has to be up before we can accept\n    Backend::Test.start\n    BsRequest.delayed_auto_accept\n    # Run delayed jobs for newly created bs request.\n    # NOTE: bs requests are now identified by their number attribute\n    BsRequestAutoAcceptJob.new.perform(BsRequest.find_by_number(id).id)\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-13 14:00:21 UTC')\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted', when: '2010-07-14T00:00:00', who: 'Iggy' })\n\n    # and now check that the package is gone indeed\n    get '/source/home:Iggy/TestPack'\n    assert_response 404\n\n    # the other one got close because the target does not exist anymore\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined', when: '2010-07-14T00:00:00', who: 'Iggy' })\n    assert_xml_tag(tag: 'comment', content: \"The target package 'TestPack' has been removed\")\n\n    # good, now revive to fix the state of the union\n    post '/source/home:Iggy/TestPack?cmd=undelete'\n    assert_response :success\n  end\n\n  def test_set_auto_accept\n    login_tom\n\n    Timecop.freeze(2010, 7, 12)\n\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <description>delete</description>\n            <state/>\n          </request>\"\n\n    # works as user with write permission in target\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # accept it now\n    post \"/request/#{id}?cmd=setacceptat\"\n    assert_response :success\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-12 00:00:00 UTC')\n\n    # modify accept time\n    post \"/request/#{id}?cmd=setacceptat&time='2013-12-01%2000:00:00%20UTC'\"\n    assert_response :success\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2013-12-01 00:00:00 UTC')\n  end\n\n  def test_branch_version_update_and_submit_request_back\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/home:Iggy/TestPack', params: { cmd: :branch }\n    assert_response :success\n\n    # version update\n    spec = File.open(\"#{Rails.root}/test/fixtures/backend/source/home:Iggy/TestPack/TestPack.spec\").read\n    spec.gsub!(/^Version:.*/, 'Version: 2.42')\n    spec.gsub!(/^Release:.*/, 'Release: 1')\n    Backend::Connection.put('/source/home:tom:branches:home:Iggy/TestPack/TestPack.spec?user=king', spec)\n    assert_response :success\n\n    get '/source/home:tom:branches:home:Iggy/TestPack?view=info&parse=1'\n    assert_response :success\n    assert_xml_tag(tag: 'version', content: '2.42')\n    assert_xml_tag(tag: 'release', content: '1')\n\n    get '/source/home:tom:branches:home:Iggy/TestPack?expand=1'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:vrev)\n    vrev = node.value(:vrev)\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:home:Iggy' package='TestPack' />\n              <options>\n                <sourceupdate>update</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # decline it and try to accept it\n    # must not work to avoid races between multiple users\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    assert_xml_tag(tag: 'summary', content: 'Request is not in new state. You may reopen it by setting it to new.')\n    # reopen and accept the request\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get '/source/home:Iggy/TestPack?view=info&parse=1'\n    assert_response :success\n    assert_xml_tag(tag: 'version', content: '2.42')\n    assert_xml_tag(tag: 'release', content: '1')\n\n    # vrev must not get smaller after accept\n    get '/source/home:tom:branches:home:Iggy/TestPack?expand=1'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:vrev)\n    vrev_after_accept = node.value(:vrev)\n    assert vrev <= vrev_after_accept\n\n    # cleanup\n    delete '/source/home:tom:branches:home:Iggy'\n    assert_response :success\n    # restore original spec file\n    Backend::Connection.put('/source/home:Iggy/TestPack/TestPack.spec?user=king', File.open(\"#{Rails.root}/test/fixtures/backend/source/home:Iggy/TestPack/TestPack.spec\").read)\n    assert_response :success\n  end\n\n  # test permissions on read protected objects\n  #\n  #\n  def test_submit_from_source_protected_project\n    prepare_request_with_user 'sourceaccess_homer', 'buildservice'\n    post '/request?cmd=create', params: load_backend_file('request/from_source_protected_valid')\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # show diffs\n    post \"/request/#{id}?cmd=diff\"\n    assert_response :success\n\n    # diffs are secret for others\n    reset_auth\n    post \"/request/#{id}?cmd=diff\"\n    assert_response 401\n    login_Iggy\n    post \"/request/#{id}?cmd=diff\"\n    # make sure to always either show a diff or an error - empty diff is not an option\n    assert_response 403\n  end\n\n  # create requests to hidden from external\n  def request_hidden(user, pass, backend_file)\n    reset_auth\n    req = load_backend_file(backend_file)\n    post '/request?cmd=create', params: req\n    assert_response 401\n    assert_select 'status[code] > summary', /Authentication required/\n    prepare_request_with_user user, pass\n    post '/request?cmd=create', params: req\n  end\n\n  ## create request to hidden package from open place - valid user  - success\n  def test_create_request_to_hidden_package_from_open_place_valid_user\n    request_hidden('adrian', 'buildservice', 'request/to_hidden_from_open_valid')\n    assert_response :success\n    # assert_xml_tag( :tag => \"state\", :attributes => { :name => 'new' } )\n  end\n\n  ## create request to hidden package from open place - invalid user - fail\n  # request_controller.rb:178\n  def test_create_request_to_hidden_package_from_open_place_invalid_user\n    request_hidden('Iggy', 'buildservice', 'request/to_hidden_from_open_invalid')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n  end\n\n  ## create request to hidden package from hidden place - valid user - success\n  def test_create_request_to_hidden_package_from_hidden_place_valid_user\n    login_king\n    put '/source/HiddenProject/target/file', params: 'ASD'\n    assert_response :success\n    request_hidden('adrian', 'buildservice', 'request/to_hidden_from_hidden_valid')\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n  end\n\n  ## create request to hidden package from hidden place - invalid user - fail\n  def test_create_request_to_hidden_package_from_hidden_place_invalid_user\n    request_hidden('Iggy', 'buildservice', 'request/to_hidden_from_hidden_invalid')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n  end\n\n  # requests from Hidden to external\n  ## create request from hidden package to open place - valid user  - fail ! ?\n  def test_create_request_from_hidden_package_to_open_place_valid_user\n    request_hidden('adrian', 'buildservice', 'request/from_hidden_to_open_valid')\n    # FIXME: !!\n    # should we really allow this - might be a mistake. qualified procedure could be:\n    # sr from hidden to hidden and then make new location visible\n    assert_response :success\n    # FIXME: implementation unclear\n  end\n\n  ### bugowner\n  ### role\n  def test_hidden_add_role_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/hidden_add_role_fail')\n    # should fail as this user shouldn't see the target package at all.\n    assert_response 404 if @ENABLE_BROKEN_TEST\n    reset_auth\n    login_adrian\n    post '/request?cmd=create', params: load_backend_file('request/hidden_add_role')\n    assert_response :success\n  end\n\n  # bugreport bnc #674760\n  def test_try_to_delete_project_without_permissions\n    login_Iggy\n\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'> <title /> <description /> </project>\"\n    assert_response :success\n\n    # first action is permitted, but second not\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"delete\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                   </action>\n                                   <action type=\"delete\">\n                                     <target project=\"kde4\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # accept this request without permissions\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 403\n\n    # everything still there\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    get '/source/kde4/_meta'\n    assert_response :success\n\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  # bugreport bnc #833616\n  def test_permission_check_for_package_only_permissions\n    login_Iggy\n\n    # validate setup for this check\n    get '/source/home:Iggy/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'fred', role: 'maintainer' })\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'fred', role: 'maintainer' })\n\n    # create request for package, which is maintained by fred\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"add_role\">\n                                     <target project=\"home:Iggy\" package=\"TestPack\"/>\n                                     <person name=\"adrian\" role=\"maintainer\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # decline as fred\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n\n    # create request for project, where fred has no permissions\n    login_Iggy\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"add_role\">\n                                     <target project=\"home:Iggy\" />\n                                     <person name=\"adrian\" role=\"maintainer\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # decline as fred\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response 403\n  end\n\n  def test_invalid_names\n    login_Iggy\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='kde4' package='kdelibs' />\n              <target project='c++ ' package='TestPack'/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='kde4' package='kdelibs' />\n              <target project='c++' package='TestPack '/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n  end\n\n  def test_invalid_cleanup_use\n    login_Iggy\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy' package='TestPack' rev='0' />\n              <target project='home:Iggy' package='TestPack' />\n              <options>\n                <sourceupdate>cleanup</sourceupdate>\n              </options>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n  end\n\n  def test_special_chars\n    login_Iggy\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy' package='TestPack' />\n              <target project='c++' package='TestPack'/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = ActiveXML::Node.new(@response.body)\n    id = node.value :id\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&user=Iggy&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&project=c%2b%2b&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&project=c%2b%2b&package=TestPack&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n  end\n\n  def test_project_delete_request_with_pending\n    # try to replay rq 74774\n    login_Iggy\n    meta = \"<project name='home:Iggy:todo'><title></title><description/><repository name='base'>\n      <path repository='BaseDistroUpdateProject_repo' project='BaseDistro:Update'/>\n        <arch>i586</arch>\n        <arch>x86_64</arch>\n     </repository>\n     </project>\"\n\n    put url_for(controller: :source, action: :update_project_meta, project: 'home:Iggy:todo'), params: meta\n    assert_response :success\n\n    meta = \"<package name='realfun' project='home:Iggy:todo'><title/><description/></package>\"\n    put url_for(controller: :source, action: :update_package_meta, project: 'home:Iggy:todo', package: 'realfun'), params: meta\n    assert_response :success\n\n    login_tom\n    post '/source/home:Iggy:todo/realfun', params: { cmd: 'branch' }\n    assert_response :success\n\n    # verify\n    get '/source/home:tom:branches:home:Iggy:todo/realfun/_meta'\n    assert_response :success\n\n    # now try to delete the original project\n    # and create a delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"home:Iggy:todo\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value('id')\n\n    login_Iggy\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # verify request number loging\n    login_king\n    get '/source/home:Iggy:todo/_project/_history?meta=1&deleted=1'\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: iddelete)\n    assert_response :success\n\n    # cleanup\n    delete '/source/home:Iggy:todo'\n    assert_response 404 # already removed\n    login_tom\n    delete '/source/home:tom:branches:home:Iggy:todo'\n    assert_response :success\n  end\n\n  def test_try_to_modify_virtual_package\n    login_Iggy\n\n    get '/source/BaseDistro:Update/pack1/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'package', attributes: { project: 'BaseDistro' }) # it appears via project link\n\n    # and create a request to wrong target\n    ['delete', 'set_bugowner', 'add_role', 'change_devel'].each do |at|\n      rq = '<request>\n             <action type=\"' + at + '\">'\n      rq += \"  <source project='BaseDistro' package='pack1'/>\" if at == 'change_devel'\n      rq += '  <target project=\"BaseDistro:Update\" package=\"pack1\"/>'\n      rq += \"  <person name='Iggy' role='reviewer' />\" if at == 'add_role'\n      rq += '</action>\n             <state name=\"new\" />\n           </request>'\n\n      post '/request?cmd=create', params: rq\n      assert_response 404\n      assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    end\n  end\n\n  def test_repository_delete_request\n    login_Iggy\n    meta = \"<project name='home:Iggy:todo'><title></title><description/><repository name='base'>\n      <path repository='BaseDistroUpdateProject_repo' project='BaseDistro:Update'/>\n        <arch>i586</arch>\n        <arch>x86_64</arch>\n     </repository>\n     </project>\"\n\n    put url_for(controller: :source, action: :update_project_meta, project: 'home:Iggy:todo'), params: meta\n    assert_response :success\n\n    meta = \"<package name='realfun' project='home:Iggy:todo'><title/><description/></package>\"\n    put url_for(controller: :source, action: :update_package_meta, project: 'home:Iggy:todo', package: 'realfun'), params: meta\n    assert_response :success\n\n    login_tom\n    post '/source/home:Iggy:todo/realfun', params: { cmd: 'branch' }\n    assert_response :success\n\n    # verify\n    get '/source/home:tom:branches:home:Iggy:todo/realfun/_meta'\n    assert_response :success\n\n    # delete repository via request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"home:Iggy:todo\" repository=\"base\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value('id')\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete2 = node.value('id')\n\n    login_Iggy\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # verify\n    get '/source/home:Iggy:todo/_meta'\n    assert_response :success\n    assert_no_xml_tag tag: 'repository', attributes: { name: 'base' }\n    get '/source/home:tom:branches:home:Iggy:todo/_meta'\n    assert_response :success\n    assert_xml_tag parent: { tag: 'repository', attributes: { name: 'base' } },\n                   tag: 'path', attributes: { project: 'deleted', repository: 'deleted' }\n\n    # try again and fail\n    login_Iggy\n    post \"/request/#{iddelete2}?cmd=changestate&newstate=accepted\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'repository_missing' })\n\n    # cleanup\n    delete '/source/home:Iggy:todo'\n    assert_response :success\n    login_tom\n    delete '/source/home:tom:branches:home:Iggy:todo'\n    assert_response :success\n  end\n\n  def test_delete_request_id\n    login_tom\n    req = load_backend_file('request/1')\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    get \"/request/#{id}\"\n    assert_response :success\n\n    # old admins can do that\n    delete \"/request/#{id}\"\n    assert_response 403\n    assert_xml_tag tag: 'summary', content: 'Requires admin privileges'\n\n    login_king\n    delete \"/request/#{id}\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response 404\n  end\n\n  def test_reopen_declined_request\n    login_Iggy\n    req = load_backend_file('request/add_role')\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    get \"/request/#{id}\"\n    assert_response :success\n\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined&comment=not+you\"\n    get \"/request/#{id}\"\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # fred should be able to reopen\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=oh\"\n    get \"/request/#{id}\"\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n  end\n\n  # it was reported that requests can't be revoked - test cases verifie sthat\n  def test_revoke_autodeclined_submit_requests\n    login_Iggy\n\n    Timecop.freeze(2010, 7, 12)\n    put '/source/home:Iggy:fordecline/_meta', params: \"<project name='home:Iggy:fordecline'><title></title><description></description></project>\"\n    assert_response :success\n\n    post '/request?cmd=create', params: \"<request><action type='add_role'><target project='home:Iggy:fordecline'/><person name='Iggy' role='reviewer'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    Timecop.freeze(1)\n    delete '/source/home:Iggy:fordecline'\n    assert_response :success\n\n    get \"/request/#{id}?withhistory=1\"\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id,\n                   'creator' => 'Iggy',\n                   'action'  =>\n                                { 'type'   => 'add_role',\n                                  'target' => { 'project' => 'home:Iggy:fordecline' },\n                                  'person' => { 'name' => 'Iggy', 'role' => 'reviewer' } },\n                   'state'   =>\n                                { 'name'    => 'declined',\n                                  'who'     => 'Iggy',\n                                  'when'    => '2010-07-12T00:00:01',\n                                  'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" },\n                   'history' => [{ 'who'         => 'Iggy',\n                                   'when'        => '2010-07-12T00:00:00',\n                                   'description' => 'Request created' },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01',\n                                   'description' => 'Request got declined',\n                                   'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" }] }, node)\n\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    get \"/request/#{id}?withhistory=1\"\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id,\n                   'creator' => 'Iggy',\n                   'action'  =>\n                                { 'type'   => 'add_role',\n                                  'target' => { 'project' => 'home:Iggy:fordecline' },\n                                  'person' => { 'name' => 'Iggy', 'role' => 'reviewer' } },\n                   'state'   => { 'name'    => 'revoked',\n                                  'who'     => 'Iggy',\n                                  'when'    => '2010-07-12T00:00:02',\n                                  'comment' => {} },\n                   'history' =>\n                                [{ 'who' => 'Iggy', 'when' => '2010-07-12T00:00:00',\n                         'description' => 'Request created' },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01',\n                                  'description' => 'Request got declined',\n                                  'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:02',\n                                  'description' => 'Request got revoked' }] }, node)\n  end\n\n  def test_check_target_maintainer\n    login_tom\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='Apache' package='apache2'/><target project='kde4' package='apache2'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    infos = BsRequest.find_by_number(id).webui_infos\n    assert !infos['is_target_maintainer'], 'tom is target maintainer'\n  end\n\n  def test_cleanup_from_home\n    login_dmayr\n    req = load_backend_file('request/cleanup_from_home')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # now check that the package was deleted, but not the project\n    get '/source/home:dmayr'\n    assert_response :success\n    assert_xml_tag tag: 'entry', attributes: { name: 'x11vnc' }\n\n    delete '/source/home:Iggy/x11vnc'\n    assert_response :success\n  end\n\n  def test_reviews_in_delete_requests\n    # make Iggy maintainer for pack2 in this test\n    packages(:Devel_BaseDistro_Update_pack2).relationships.create(role: roles(:maintainer), user: users(:Iggy))\n\n    login_tom\n    post '/request?cmd=create', params: \"<request><action type='delete'><target project='Devel:BaseDistro:Update' package='pack2'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    # Iggy can't accept due to devel package\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 400\n    assert_xml_tag tag: 'summary', content: 'Package is used by following packages as devel package: BaseDistro:Update/pack2'\n\n    # but he should be able to add reviewers\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n\n    # now tom should be able to accept the review\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&by_user=tom&newstate=accepted\"\n    assert_response :success\n  end\n\n  def cleanup_empty_projects_helper(expect_cleanup_empty_project)\n    sprj = 'Apache'\n    bprj = \"home:king:branches:#{sprj}\"\n\n    post \"/source/#{sprj}/apache2\", params: { cmd: :branch, target_project: bprj }\n    assert_response :success\n    put \"/source/#{bprj}/apache2/dummy\", params: 'dummy'\n    assert_response :success\n\n    post \"/source/#{sprj}/Tidy\", params: { cmd: :branch, target_project: bprj }\n    assert_response :success\n    put \"/source/#{bprj}/Tidy/dummy\", params: 'dummy'\n    assert_response :success\n\n    # Submit apache2 back. It is not the last project.\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='#{bprj}' package='apache2'/><target project='#{sprj}' package='apache2'/></action></request>\"\n    assert_response :success\n    # Accept our own request :-)\n    id = Xmlhash.parse(@response.body)['id']\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n    # apache2 has gone, but the project remains\n    get \"/source/#{bprj}\"\n    assert_response :success\n    assert_no_xml_tag tag: 'entry', attributes: { name: 'apache2' }\n    assert_xml_tag tag: 'entry', attributes: { name: 'Tidy' }\n\n    # Submit Tidy back. It *is* the last project.\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='#{bprj}' package='Tidy'/><target project='#{sprj}' package='Tidy'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n    get \"/source/#{bprj}\"\n    if expect_cleanup_empty_project\n      assert_response 404\n    else\n      assert_response :success\n      assert_no_xml_tag tag: 'entry', attributes: { name: 'apache2' }\n      assert_no_xml_tag tag: 'entry', attributes: { name: 'Tidy' }\n    end\n\n    delete \"/source/#{sprj}/Tidy/dummy\", params: 'dummy'\n    assert_response :success\n    delete \"/source/#{sprj}/apache2/dummy\", params: 'dummy'\n    assert_response :success\n  end\n\n  def test_cleanup_empty_projects\n    # we use an admin user so we can twiddle the configuration\n    login_king\n\n    # By default, OBS expects to have thousands of users, so succesfully\n    # submitting the last package in a project cleans up the project to\n    # save resources.\n    cleanup_empty_projects_helper(true)\n\n    # \"small team\" mode: resources are unconstrained so we're willing to\n    # preserve everyone's project configuration even if the project is empty\n    put '/configuration?cleanup_empty_projects=off'\n    assert_response :success\n    cleanup_empty_projects_helper(false)\n\n    # explicitly go back to the default and check that the result is still\n    # the same\n    put '/configuration?cleanup_empty_projects=on'\n    assert_response :success\n    cleanup_empty_projects_helper(true)\n  end\n\n  def test_ordering_of_requests\n    prepare_request_with_user 'Iggy', 'buildservice'\n\n    Timecop.freeze(2010, 7, 12)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"default\"/>\n                                   </action>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    default = node['id']\n    assert default.present?\n    Timecop.freeze(1)\n    # a second default\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"moderate\"/>\n                                   </action>\n                                   <priority>moderate</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    moderate = node['id']\n    assert moderate.present?\n    Timecop.freeze(1)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"low\"/>\n                                   </action>\n                                   <priority>low</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    low = node['id']\n    assert low.present?\n    Timecop.freeze(1)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"critical\"/>\n                                   </action>\n                                   <priority>critical</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    critical = node['id']\n    assert critical.present?\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro2.0\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"important\"/>\n                                   </action>\n                                   <priority>important</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    important = node['id']\n    assert important.present?\n    Timecop.freeze(1)\n\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal node['request'][0]['priority'], 'critical'\n    assert_equal node['request'][1]['priority'], 'important'\n    # three \"moderate\" requests, not showing a priority field\n    assert_equal node['request'][5]['priority'], 'low'\n\n    # now re-priorize via incident attribute\n    login_king\n    post '/source/BaseDistro2.0/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>100</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal 'important', node['request'][0]['priority']\n\n    # make the low and important request equal high prio\n    post '/source/BaseDistro/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>100</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    # they are equal, so important wins\n    assert_equal 'important', node['request'][0]['priority']\n    assert_equal 'low', node['request'][1]['priority']\n\n    # make the low most important\n    post '/source/BaseDistro/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>101</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal 'low', node['request'][0]['priority']\n    assert_equal 'important', node['request'][1]['priority']\n  end\nend\n# rubocop:enable Metrics/LineLength\n"], "fixing_code": ["class BsRequestActionSubmit < BsRequestAction\n  #### Includes and extends\n  include BsRequestAction::Differ\n\n  #### Constants\n\n  #### Self config\n  def self.sti_name\n    :submit\n  end\n\n  #### Attributes\n  #### Associations macros (Belongs to, Has one, Has many)\n  #### Callbacks macros: before_save, after_save, etc.\n  #### Scopes (first the default_scope macro if is used)\n  #### Validations macros\n  #### Class methods using self. (public and then private)\n  #### To define class methods as private use private_class_method\n  #### private\n\n  #### Instance methods (public and then protected/private)\n  def is_submit?\n    true\n  end\n\n  def execute_accept(opts)\n    # create package unless it exists already\n    target_project = Project.get_by_name(self.target_project)\n    if target_package\n      target_package = target_project.packages.find_by_name(self.target_package)\n    else\n      target_package = target_project.packages.find_by_name(source_package)\n    end\n\n    relink_source = false\n    unless target_package\n      # check for target project attributes\n      initialize_devel_package = target_project.find_attribute('OBS', 'InitializeDevelPackage')\n      # create package in database\n      linked_package = target_project.find_package(self.target_package)\n      if linked_package\n        # exists via project links\n        opts = { request: bs_request }\n        opts[:makeoriginolder] = true if makeoriginolder\n        instantiate_container(target_project, linked_package.update_instance, opts)\n        target_package = target_project.packages.find_by_name(linked_package.name)\n      else\n        # new package, base container on source container\n        newxml = Xmlhash.parse(Backend::Api::Sources::Package.meta(source_project, source_package))\n        newxml['name'] = self.target_package\n        newxml['devel'] = nil\n        target_package = target_project.packages.new(name: newxml['name'])\n        target_package.update_from_xml(newxml)\n        target_package.flags.destroy_all\n        target_package.remove_all_persons\n        target_package.remove_all_groups\n        if initialize_devel_package\n          target_package.develpackage = Package.find_by_project_and_name(source_project, source_package)\n          relink_source = true\n        end\n        target_package.store(comment: \"submit request #{bs_request.number}\", request: bs_request)\n      end\n    end\n\n    cp_params = {\n      noservice:      1,\n      requestid:      bs_request.number,\n      comment:        bs_request.description,\n      withacceptinfo: 1\n    }\n    cp_params[:orev] = source_rev if source_rev\n    cp_params[:dontupdatesource] = 1 if sourceupdate == 'noupdate'\n    unless updatelink\n      cp_params[:expand] = 1\n      cp_params[:keeplink] = 1\n    end\n    response = Backend::Api::Sources::Package.copy(self.target_project, self.target_package,\n                                                   source_project, source_package, User.current.login, cp_params)\n    result = Xmlhash.parse(response)\n\n    set_acceptinfo(result['acceptinfo'])\n\n    target_package.sources_changed\n\n    # cleanup source project\n    if relink_source && !(sourceupdate == 'noupdate')\n      # source package got used as devel package, link it to the target\n      # re-create it via branch , but keep current content...\n      options = { comment: \"initialized devel package after accepting #{bs_request.number}\",\n        requestid: bs_request.number, keepcontent: 1, noservice: 1 }\n      Backend::Api::Sources::Package.branch(self.target_project, self.target_package, source_project, source_package, User.current.login, options)\n    elsif sourceupdate == 'cleanup'\n      source_cleanup\n    end\n\n    return unless self.target_package == '_product'\n\n    Project.find_by_name!(self.target_project).update_product_autopackages\n  end\n\n  def check_action_permission!(skip_source = nil)\n    super(skip_source)\n    # only perform the following check, if we are called from\n    # BsRequest.permission_check_change_state! (that is, if\n    # skip_source is set to true). Always executing this check\n    # would be a regression, because this code is also executed\n    # if a new request is created (which could fail if User.current\n    # cannot modify the source_package).\n    return unless skip_source\n    target_project = Project.get_by_name(self.target_project)\n    return unless target_project && target_project.is_a?(Project)\n    target_package = target_project.packages.find_by_name(self.target_package)\n    initialize_devel_package = target_project.find_attribute('OBS', 'InitializeDevelPackage')\n    return if target_package || !initialize_devel_package\n    source_package = Package.get_by_project_and_name(source_project, self.source_package)\n    return if !source_package || User.current.can_modify_package?(source_package)\n    msg = 'No permission to initialize the source package as a devel package'\n    raise PostRequestNoPermission, msg\n  end\n\n  #### Alias of methods\nend\n\n# == Schema Information\n#\n# Table name: bs_request_actions\n#\n#  id                    :integer          not null, primary key\n#  bs_request_id         :integer          indexed, indexed => [target_package_id], indexed => [target_project_id]\n#  type                  :string(255)\n#  target_project        :string(255)      indexed\n#  target_package        :string(255)      indexed\n#  target_releaseproject :string(255)\n#  source_project        :string(255)      indexed\n#  source_package        :string(255)      indexed\n#  source_rev            :string(255)\n#  sourceupdate          :string(255)\n#  updatelink            :boolean          default(FALSE)\n#  person_name           :string(255)\n#  group_name            :string(255)\n#  role                  :string(255)\n#  created_at            :datetime\n#  target_repository     :string(255)\n#  makeoriginolder       :boolean          default(FALSE)\n#  target_package_id     :integer          indexed => [bs_request_id], indexed\n#  target_project_id     :integer          indexed => [bs_request_id], indexed\n#\n# Indexes\n#\n#  bs_request_id                                                    (bs_request_id)\n#  index_bs_request_actions_on_bs_request_id_and_target_package_id  (bs_request_id,target_package_id)\n#  index_bs_request_actions_on_bs_request_id_and_target_project_id  (bs_request_id,target_project_id)\n#  index_bs_request_actions_on_source_package                       (source_package)\n#  index_bs_request_actions_on_source_project                       (source_project)\n#  index_bs_request_actions_on_target_package                       (target_package)\n#  index_bs_request_actions_on_target_package_id                    (target_package_id)\n#  index_bs_request_actions_on_target_project                       (target_project)\n#  index_bs_request_actions_on_target_project_id                    (target_project_id)\n#\n# Foreign Keys\n#\n#  bs_request_actions_ibfk_1  (bs_request_id => bs_requests.id)\n#\n", "# rubocop:disable Metrics/LineLength\n# rubocop:disable Metrics/ClassLength\nrequire File.expand_path(File.dirname(__FILE__) + '/..') + '/test_helper'\nrequire 'request_controller'\n\nclass RequestControllerTest < ActionDispatch::IntegrationTest\n  fixtures :all\n\n  def setup\n    Backend::Test.start(wait_for_scheduler: true)\n    reset_auth\n  end\n\n  teardown do\n    Timecop.return\n  end\n\n  def test_set_and_get_1\n    login_king\n\n    xml = <<-XML.strip_heredoc\n      <request>\n        <action type='submit'>\n          <source project='home:Iggy' package='TestPack' rev='2'/>\n          <target project='kde4' package='wpa_supplicant'/>\n        </action>\n        <description/>\n        <state name='new' who='tom' when='2011-12-02T17:20:42'/>\n      </request>\n    XML\n    post '/request?cmd=create', params: xml\n    assert_response :success\n    new_request_id = BsRequest.last.number\n    assert_select 'request', id: new_request_id do\n      assert_select 'action', type: 'submit' do\n        assert_select 'source', project: 'home:Iggy', package: 'TestPack', rev: '2'\n        assert_select 'target', project: 'kde4', package: 'wpa_supplicant'\n      end\n      assert_select 'state', name: 'review', who: 'tom' do\n        assert_select 'comment'\n      end\n      assert_select 'review', state: 'new', by_user: 'adrian'\n      assert_select 'review', state: 'new', by_group: 'test_group'\n      assert_select 'description'\n    end\n\n    put(\"/request/#{new_request_id}\", params: xml)\n    assert_response :success\n    get \"/request/#{new_request_id}\"\n    assert_response :success\n    assert_select 'request', id: new_request_id do\n      assert_select 'state', name: 'new'\n    end\n  end\n\n  def test_invalid_command\n    post '/request?cmd=INVALID'\n    assert_response 401\n    login_king\n    post '/request?cmd=INVALID'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_command' })\n  end\n\n  def test_get_requests_collection\n    login_king\n    get '/request', params: { view: 'collection', reviewstates: 'accepted' }\n    assert_response :success\n    # Should respond with a collection of 9 requests\n    assert_select 'collection request', 9\n    # Should show all data belonging to each request\n    assert_select 'collection', matches: 9 do\n      assert_select 'request', id: 1000 do\n        assert_select 'action', type: 'submit' do\n          assert_select 'source', project: 'Apache', package: 'apache2', rev: '1'\n          assert_select 'target', project: 'kde4', package: 'apache2'\n        end\n        assert_select 'state', name: 'review', who: 'tom', when: '2013-09-09T19:15:16' do\n          assert_select 'comment'\n        end\n        assert_select 'review', state: 'new', by_package: 'apache2', by_project: 'Apache'\n        assert_select 'review', state: 'new', by_user: 'adrian'\n        assert_select 'review', state: 'new', by_group: 'test_group'\n        assert_select 'description', 'want to see his reaction'\n      end\n    end\n\n    # Narrow search for reviews by user adrian\n    get '/request', params: { view: 'collection', reviewstates: 'new', roles: 'reviewer', user: 'adrian' }\n    assert_response :success\n\n    # Should respond with a collection of 2 requests\n    assert_select 'collection request', 2\n\n    # Request 1000 should have exactly 2 review elements\n    assert_select \"request[id='1000'] review\", 2\n    # Request 4 should have exactly 1 review elements\n    assert_select \"request[id='4'] review\", 1\n\n    # Should show all data belonging to each request\n    assert_select 'collection', matches: 2 do\n      assert_select 'request', id: 1000 do\n        assert_select 'action', type: 'submit' do\n          assert_select 'source', project: 'Apache', package: 'apache2', rev: '1'\n          assert_select 'target', project: 'kde4', package: 'apache2'\n        end\n        assert_select 'state', name: 'review', who: 'tom', when: '2013-09-09T19:15:16' do\n          assert_select 'comment'\n        end\n        assert_select 'review', state: 'new', by_package: 'apache2', by_project: 'Apache'\n        assert_select 'review', state: 'new', by_user: 'adrian'\n        assert_select 'review', state: 'new', by_user: 'tom'\n        assert_select 'review', state: 'new', by_group: 'test_group'\n        assert_select 'description', 'want to see his reaction'\n      end\n      # Should find requests of groups adrian belongs to\n      assert_select 'request', id: 4 do\n        assert_select 'review', state: 'new', by_group: 'test_group'\n      end\n    end\n  end\n\n  def test_get_invalid_1\n    prepare_request_with_user 'Iggy', 'xxx'\n    get '/request/0815'\n    assert_response 401\n  end\n\n  def test_create_invalid\n    login_king\n    post '/request?cmd=create', params: 'GRFZL'\n    assert_response 400\n\n    reset_auth\n    # make sure requests from not valid users do not pass\n    req = load_backend_file('request/1')\n    post '/request?cmd=create', params: req\n    assert_response 401\n  end\n\n  def test_submit_request_of_new_package_with_devel_package\n    prepare_request_with_user 'Iggy', 'buildservice'\n\n    # we have a devel package definition in source\n    get '/source/BaseDistro:Update/pack2/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel')\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"NEW_PACKAGE\"/>\n                                   </action>\n                                   <description>Source has a devel package</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"RemoteInstance:BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"NEW_PACKAGE2\"/>\n                                   </action>\n                                   <description>Source has a devel package</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id2.present?\n\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id).state\n\n    # Ensure that requests can't be accepted twice\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response 403\n    assert_select 'status', code: 'post_request_no_permission' do\n      assert_select 'summary', 'change state from an accepted state is not allowed.'\n    end\n\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&comment=approved&force=1\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id2).state\n\n    get '/source/home:Iggy/NEW_PACKAGE/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel')\n    get '/source/home:Iggy/NEW_PACKAGE2/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel')\n\n    login_king\n    delete '/source/home:Iggy/NEW_PACKAGE'\n    assert_response :success\n    delete '/source/home:Iggy/NEW_PACKAGE2'\n    assert_response :success\n  end\n\n  def test_submit_request_of_new_package\n    Backend::Test.start(wait_for_scheduler: true)\n\n    prepare_request_with_user 'Iggy', 'buildservice'\n    post '/source/home:Iggy/NEW_PACKAGE', params: { cmd: :branch }\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n    post '/source/home:Iggy/TestPack', params: { cmd: :branch, missingok: 'true' }\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_missing' })\n    post '/source/home:Iggy/NEW_PACKAGE', params: { cmd: :branch, missingok: 'true' }\n    assert_response :success\n    get '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { missingok: 'true', project: 'home:Iggy', package: nil })\n    put '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/new_file', params: 'my content'\n    assert_response :success\n\n    # the birthday of J.K.\n    Timecop.freeze(2010, 7, 12)\n    # submit request\n    post '/request?cmd=create', params: '<request>\n                                   <priority>critical</priority>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy:branches:home:Iggy\" package=\"NEW_PACKAGE\"/>\n                                   </action>\n                                   <description>DESCRIPTION IS HERE</description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    create_time = node['state']['when']\n    assert_equal '2010-07-12T00:00:00', create_time\n\n    # aka sleep 1\n    Timecop.freeze(1)\n\n    # sneak in a test case for the status controller\n    get \"/status/bsrequest?id=#{id}\"\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'         => id,\n                   'repository' =>\n                                   { 'name' => '10.2',\n                                     'arch' =>\n                                               [{ 'arch' => 'i586', 'result' => 'unknown' },\n                                                { 'arch' => 'x86_64', 'result' => 'unknown' }] } }, node)\n\n    # create more history entries prio change, decline, reopen and finally accept it\n    post \"/request/#{id}?cmd=setpriority&priority=ILLEGAL&comment=dontcare\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: \"Illegal priority 'ILLEGAL'\")\n    post \"/request/#{id}?cmd=setpriority&priority=low&comment=dontcare\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=declined&comment=notgood\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=oops\"\n    assert_response :success\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=approved\"\n    assert_response :success\n    assert_equal :accepted, BsRequest.find_by_number(id).state\n    assert_equal 'approved', BsRequest.find_by_number(id).comment\n\n    # package got created\n    get '/source/home:Iggy/NEW_PACKAGE/new_file'\n    assert_response :success\n\n    # validate history of new package\n    get '/source/home:Iggy/NEW_PACKAGE/_history'\n    assert_response :success\n    assert_xml_tag tag: 'requestid', content: id\n    assert_xml_tag tag: 'comment', content: 'DESCRIPTION IS HERE'\n    assert_xml_tag tag: 'user', content: 'Iggy'\n\n    # validate request\n    get \"/request/#{id}?withhistory=1\"\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    assert_xml_tag(tag: 'acceptinfo', attributes: { rev: '1', srcmd5: '1ded65e42c0f04bd08075dfd1fd08105', osrcmd5: 'd41d8cd98f00b204e9800998ecf8427e' })\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted', who: 'Iggy' })\n    assert_xml_tag(tag: 'history', attributes: { who: 'Iggy' })\n    assert_equal({\n                   'id'          => id,\n                   'creator'     => 'Iggy',\n                   'action'      => {\n                     'type'       => 'submit',\n                     'source'     => { 'project' => 'home:Iggy:branches:home:Iggy', 'package' => 'NEW_PACKAGE' },\n                     'target'     => { 'project' => 'home:Iggy', 'package' => 'NEW_PACKAGE' },\n                     'options'    => { 'sourceupdate' => 'cleanup' },\n                     'acceptinfo' => { 'rev' => '1', 'srcmd5' => '1ded65e42c0f04bd08075dfd1fd08105', 'osrcmd5' => 'd41d8cd98f00b204e9800998ecf8427e' }\n                   },\n                   'priority'    => 'low',\n                   'state'       => { 'name' => 'accepted', 'who' => 'Iggy', 'when' => '2010-07-12T00:00:04', 'comment' => 'approved' },\n                   'history'     => [\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:00', 'description' => 'Request created', 'comment' => 'DESCRIPTION IS HERE' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01', 'description' => 'Request got a new priority: critical => low', 'comment' => 'dontcare' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:02', 'description' => 'Request got declined', 'comment' => 'notgood' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:03', 'description' => 'Request got reopened', 'comment' => 'oops' },\n                     { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:04', 'description' => 'Request got accepted', 'comment' => 'approved' }\n                   ],\n                   'description' => 'DESCRIPTION IS HERE'\n                 }, node)\n\n    # compare times\n    node = ActiveXML::Node.new(@response.body)\n    assert((node.find_first('state').value('when') == node.each(:history).last.value('when')), 'Current state is has NOT same time as last history item')\n    oldhistory = nil\n    node.each(:history) do |h|\n      unless h\n        assert((h.value('when') > oldhistory.value('when')), 'Current history is not newer than the former history')\n      end\n      oldhistory = h\n    end\n\n    # missingok disapeared\n    post '/source/home:Iggy:branches:home:Iggy', params: { cmd: :undelete }\n    assert_response :success\n    get '/source/home:Iggy:branches:home:Iggy/NEW_PACKAGE/_link'\n    assert_response :success\n    assert_no_xml_tag(tag: 'link', attributes: { missingok: 'true' })\n\n    # cleanup\n    login_king\n    delete '/source/home:Iggy:branches:home:Iggy'\n    assert_response :success\n    delete '/source/home:Iggy/NEW_PACKAGE'\n    assert_response :success\n\n    Timecop.return\n  end\n\n  def test_request_autodecline_on_removal\n    login_Iggy\n    post '/source/home:Iggy/TestPack?target_project=home:Iggy&target_package=TestPack.DELETE', params: { cmd: :branch }\n    assert_response :success\n    post '/source/home:Iggy/TestPack.DELETE?target_project=home:Iggy&target_package=TestPack.DELETE2', params: { cmd: :branch }\n    assert_response :success\n    put '/source/home:Iggy/TestPack.DELETE2/file', params: 'some'\n    assert_response :success\n\n    # create requests\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value('id')\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE\"/>\n                                     <target project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id2 = node.value('id')\n\n    delete '/source/home:Iggy/TestPack.DELETE2'\n    assert_response :success\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    delete '/source/home:Iggy/TestPack.DELETE'\n    assert_response :success\n  end\n\n  def test_submit_request_with_broken_source\n    login_Iggy\n    post '/source/home:Iggy/TestPack?target_project=home:Iggy&target_package=TestPack.DELETE', params: { cmd: :branch }\n    assert_response :success\n    post '/source/home:Iggy/TestPack.DELETE?target_project=home:Iggy&target_package=TestPack.DELETE2', params: { cmd: :branch }\n    assert_response :success\n\n    # create working requests\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value('id')\n\n    # create conflicts\n    put '/source/home:Iggy/TestPack.DELETE/conflictingfile', params: 'ASD'\n    assert_response :success\n    put '/source/home:Iggy/TestPack.DELETE2/conflictingfile', params: '123'\n    assert_response :success\n\n    # accepting request fails in a valid way\n    login_king\n    post \"/request/#{id1}?cmd=changestate&newstate=accepted&comment=review1&force=1\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n\n    # new requests are not possible anymore\n    login_Iggy\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:Iggy\" package=\"TestPack.DELETE2\" rev=\"2\"/>\n                                     <target project=\"home:Iggy\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'expand_error' })\n\n    delete '/source/home:Iggy/TestPack.DELETE'\n    assert_response :success\n    delete '/source/home:Iggy/TestPack.DELETE2'\n    assert_response :success\n  end\n\n  def test_submit_broken_request\n    login_king\n    put '/source/home:coolo:test/kdelibs_DEVEL_package/file', params: 'CONTENT' # just to have a revision, or we fail\n    assert_response :success\n\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/no_such_project')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_package')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_user')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find User} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_group')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find Group} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_role')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' }, child: { content: %r{Couldn.t find Role} })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_target_project')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n\n    post '/request?cmd=create', params: load_backend_file('request/no_such_target_package')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/missing_role')\n    assert_response 404\n    assert_select 'status[code] > summary', /No role specified/\n\n    post '/request?cmd=create', params: load_backend_file('request/failing_cleanup_due_devel_package')\n    assert_response 400\n    assert_select 'status[code] > summary', /Package is used by following packages as devel package:/\n  end\n\n  def test_set_bugowner_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner')\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { name: 'Iggy' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { name: 'Iggy' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_group')\n    assert_response :success\n    assert_xml_tag(tag: 'group', attributes: { name: 'test_group' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id2 = node.value('id')\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'group', attributes: { name: 'test_group' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail_unknown_user')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    post '/request?cmd=create', params: load_backend_file('request/set_bugowner_fail_unknown_group')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    # test direct put\n    login_Iggy\n    put \"/request/#{id}\", params: load_backend_file('request/set_bugowner')\n    assert_response 403\n    put \"/request/#{id2}\", params: load_backend_file('request/set_bugowner_group')\n    assert_response 403\n\n    login_king\n    put \"/request/#{id}\", params: load_backend_file('request/set_bugowner')\n    assert_response :success\n    put \"/request/#{id2}\", params: load_backend_file('request/set_bugowner_group')\n    assert_response :success\n\n    # accept\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    meta = @response.body\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n    assert_no_xml_tag(tag: 'group', attributes: { role: 'bugowner' })\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'group', attributes: { role: 'bugowner' })\n    get '/source/kde4/kdelibs/_history?meta=1'\n    assert_response :success\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' }) # reset\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'bugowner' })\n    get '/source/kde4/kdelibs/_history?meta=1'\n    assert_response :success\n    assert_xml_tag(tag: 'comment', content: \"set_bugowner request #{id2}\")\n    assert_xml_tag(tag: 'requestid', content: id2)\n\n    # cleanup\n    put '/source/kde4/kdelibs/_meta', params: meta\n    assert_response :success\n  end\n\n  def test_invalid_bugowner_requests\n    login_Iggy\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'><title></title><description></description> </project>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <person name=\"DOESNOTEXIST\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <group name=\"DOESNOTEXIST\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n\n    # cleanup\n    login_Iggy\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  def test_set_bugowner_request_locked_project\n    login_Iggy\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'><title></title><description></description>  <lock><enable/></lock></project>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                     <person name=\"adrian\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # works with force\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # unlock and try with a locked package\n    post '/source/home:Iggy:Test', params: { cmd: 'unlock', comment: 'cleanup' }\n    assert_response :success\n\n    put '/source/home:Iggy:Test/pack/_meta', params: \"<package project='home:Iggy:Test' name='pack'><title></title><description></description>  <lock><enable/></lock></package>\"\n    assert_response :success\n\n    login_adrian\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"set_bugowner\">\n                                     <target project=\"home:Iggy:Test\" package=\"pack\"/>\n                                     <person name=\"adrian\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    get '/source/home:Iggy:Test/pack/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # works with force\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/home:Iggy:Test/pack/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { role: 'bugowner' })\n\n    # cleanup\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  def test_create_request_anonymous\n    # try it without anonymous - login required\n    post '/request?cmd=create', params: load_backend_file('request/add_role')\n    assert_xml_tag tag: 'status', attributes: { code: 'authentication_required' }\n    assert_response 401\n\n    # now try as webui if we get a different error\n    post '/request?cmd=create', params: load_backend_file('request/add_role'), headers: { 'HTTP_USER_AGENT' => 'obs-webui-something' }\n    assert_xml_tag tag: 'status', attributes: { code: 'anonymous_user' }\n    assert_response 401\n  end\n\n  def test_add_role_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/add_role')\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    post '/request?cmd=create', params: load_backend_file('request/add_role_fail')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_package' })\n\n    post '/request?cmd=create', params: load_backend_file('request/add_role_fail')\n    assert_response 404\n  end\n\n  def test_create_request_clone_and_superseed_it\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # do the real mbranch for default maintained packages\n    reset_auth\n    login_tom\n    post '/source', params: { cmd: 'branch', request: id }\n    assert_response :success\n\n    # got the correct package branched ?\n    get \"/source/home:tom:branches:REQUEST_#{id}\"\n    assert_response :success\n    get \"/source/home:tom:branches:REQUEST_#{id}/TestPack.home_Iggy\"\n    assert_response :success\n    get \"/source/home:tom:branches:REQUEST_#{id}/TestPack.home_Iggy/_link\"\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    get \"/source/home:tom:branches:REQUEST_#{id}/_attribute/OBS:RequestCloned\"\n    assert_response :success\n    assert_xml_tag(tag: 'attribute', attributes: { namespace: 'OBS', name: 'RequestCloned' },\n                   child: { tag: 'value', content: id })\n    # cleanup\n    delete \"/source/home:tom:branches:REQUEST_#{id}\"\n    assert_response :success\n  end\n\n  def test_create_request_review_and_supersede\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n    # try update comment\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=blahfasel\"\n    assert_response 403\n\n    # update comment for real\n    request = BsRequest.find_by_number(id)\n    h1 = request.request_history_elements\n    hr1 = request.history_elements\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=blahfasel\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'blahfasel')\n    request = BsRequest.find_by_number(id)\n    h2 = request.request_history_elements\n    hr2 = request.history_elements\n    assert_equal h2.length - h1.length, 0 # no change\n    assert_equal hr2.length - hr1.length, 1 # review accepted\n\n    # invalid state\n    post \"/request/#{id}?cmd=changereviewstate&newstate=INVALID&by_user=tom&comment=blahfasel\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_not_modifiable' })\n\n    # superseded review\n    post \"/request/#{id}?cmd=changereviewstate&newstate=superseded&by_user=tom&superseded_by=1\"\n    assert_response :success\n\n    # another final state is not allowed\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=blahfasel\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n    assert_xml_tag(tag: 'summary', content: 'The request is neither in state review nor new')\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'superseded', superseded_by: '1' })\n  end\n\n  def test_create_request_and_supersede\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    login_tom\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # target says supersede it due to another existing request\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'superseded', superseded_by: '1' })\n  end\n\n  def test_create_request_and_supersede_as_creator\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    post \"/request/#{id}?cmd=changestate&newstate=superseded&superseded_by=1\"\n    assert_response :success\n  end\n\n  def test_create_request_and_decline_review\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined\"\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_not_specified' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=tom\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # add review not permitted anymore\n    post \"/request/#{id}?cmd=addreview&by_user=king\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'review_change_state_no_permission' })\n  end\n\n  # MeeGo BOSS: is using multiple reviews by same user for each step\n  def test_create_request_and_multiple_reviews\n    # the birthday of J.K.\n    Timecop.freeze(2010, 7, 12)\n\n    login_Iggy\n    post('/request?cmd=create', params: \"<request>\n                                   <action type='add_role'>\n                                     <target project='home:Iggy' package='TestPack' />\n                                     <person name='Iggy' role='reviewer' />\n                                    </action>\n                                  </request>\")\n\n    assert_response :success\n\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    Timecop.freeze(1) # 0:0:1 review added\n    post \"/request/#{id}?cmd=addreview&by_user=tom&comment=couldyou\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # accept review\n    login_tom\n    Timecop.freeze(1) # 0:0:2 tom accepts review\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=review1\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # readd reviewer\n    login_Iggy\n    Timecop.freeze(1) # 0:0:3 yet another review for tom\n    post \"/request/#{id}?cmd=addreview&by_user=tom&comment=overlooked\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # accept review\n    login_tom\n    Timecop.freeze(1) # 0:0:4 yet another review accept by tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=tom&comment=review2\"\n    assert_response :success\n\n    # check review comments are the same\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'review1')\n    assert_xml_tag(parent: { tag: 'review', attributes: { by_user: 'tom' } }, tag: 'comment', content: 'review2')\n\n    # reopen a review\n    login_tom\n    Timecop.freeze(1) # 0:0:5 reopened from tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=tom&comment=reopen2\"\n    assert_response :success\n    get \"/request/#{id}?withhistory=1\"\n    assert_response :success\n\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(parent: { tag: 'review', attributes: { state: 'accepted', by_user: 'tom' } }, tag: 'comment', content: 'review1')\n    assert_xml_tag(parent: { tag: 'review', attributes: { state: 'new', by_user: 'tom' } }, tag: 'comment', content: 'reopen2')\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id.to_s,\n                   'creator' => 'Iggy',\n                   'action'  => {\n                     'type'   => 'add_role',\n                     'target' => { 'project' => 'home:Iggy', 'package' => 'TestPack' },\n                     'person' => { 'name' => 'Iggy', 'role' => 'reviewer' }\n                   },\n                   'state'   => {\n                     'name'    => 'review',\n                     'who'     => 'tom',\n                     'when'    => '2010-07-12T00:00:05',\n                     'comment' => 'reopen2'\n                   },\n                   'review'  => [{\n                     'state'   => 'accepted',\n                     'when'    => '2010-07-12T00:00:01',\n                     'who'     => 'tom',\n                     'by_user' => 'tom',\n                     'comment' => 'review1',\n                     'history' => {\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:02',\n                       'description' => 'Review got accepted',\n                       'comment'     => 'review1'\n                     }\n                   }, {\n                     'state'   => 'new',\n                     'when'    => '2010-07-12T00:00:03',\n                     'who'     => 'tom',\n                     'by_user' => 'tom',\n                     'comment' => 'reopen2',\n                     'history' => [{ 'who' => 'tom', 'when' => '2010-07-12T00:00:04',\n                                    'description' => 'Review got accepted',\n                                    'comment' => 'review2' },\n                                   { 'who' => 'tom', 'when' => '2010-07-12T00:00:05',\n                                    'description' => 'Review got reopened',\n                                    'comment' => 'reopen2' }]\n                   }],\n                   'history' => [\n                     { 'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:00',\n                       'description' => 'Request created' },\n                     { 'description' => 'Request got a new review request',\n                       'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:01',\n                       'comment'     => 'couldyou' },\n                     { 'description' => 'Request got reviewed',\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:02',\n                       'comment'     => 'review1' },\n                     { 'description' => 'Request got a new review request',\n                       'who'         => 'Iggy',\n                       'when'        => '2010-07-12T00:00:03',\n                       'comment'     => 'overlooked' },\n                     { 'description' => 'Request got reviewed',\n                       'who'         => 'tom',\n                       'when'        => '2010-07-12T00:00:04',\n                       'comment'     => 'review2' }\n                   ] }, node)\n  end\n\n  def test_assign_from_group\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer group\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=king\"\n    assert_response :success\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    post \"/request/#{id}?cmd=addreview&by_group=test_group_b\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # adrian assigns to Iggy and reverts\n    login_adrian\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=Iggy\", params: 'Iggy, please have a look'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n    # stealing the review of king is not working\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=king&revert=1\", params: 'try to kill it'\n    assert_response 404\n    assert_xml_tag tag: 'summary', content: 'Not an assigned review'\n    # Iggy went home without telling....\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=Iggy&revert=1\", params: 'ups, drop it again'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { by_user: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n\n    # adrian assigns to adrian_downloader\n    login_adrian\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    post \"/request/#{id}?by_group=test_group&cmd=assignreview&reviewer=adrian_downloader\", params: 'adrian_downloader, please have a look'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'king' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n\n    login_adrian_downloader\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian_downloader\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_user: 'adrian_downloader' })\n\n    # adrian_downloader assigns to himself\n    post \"/request/#{id}?by_group=test_group_b&cmd=assignreview&reviewer=adrian_downloader\", params: 'I will work on it as well'\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian_downloader' })\n    assert_no_xml_tag(tag: 'review', attributes: { state: 'accepted', by_user: 'adrian_downloader' })\n\n    # ah, no.....\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=adrian_downloader\"\n    assert_response :success\n\n    # validate\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'adrian_downloader' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'accepted', by_group: 'test_group_b' })\n  end\n\n  def test_change_review_state_after_leaving_review_phase\n    login_Iggy\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    # add reviewer group\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    login_adrian\n    post \"/request/#{id}?newstate=new&by_group=test_group&cmd=changereviewstate\", params: 'adrian is looking'\n    assert_response :success\n    post \"/request/#{id}?newstate=new&by_group=test_group&cmd=changereviewstate\", params: 'adrian does not care'\n    assert_response :success\n\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_user=tom\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'tom' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' },\n                   child: { tag: 'comment', content: 'adrian does not care' })\n\n    # change review not permitted anymore\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=declined&by_group=test_group\"\n    assert_response 403\n    assert_xml_tag tag: 'status', attributes: { code: 'review_change_state_no_permission' }\n\n    # search this request and verify that all reviews got rendered.\n    get '/search/request', params: { match: \"[@id=#{id}]\" }\n    assert_response :success\n    get '/search/request', params: { match: \"[review/@by_user='adrian']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n  end\n\n  def test_search_by_creator\n    login_Iggy\n    get '/search/request', params: { match: \"@creator='Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: '6', creator: 'Iggy' })\n  end\n\n  def test_search_and_involved_requests\n    req = load_backend_file('request/1')\n\n    # claim to be someone else\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: 'Admin permissions required to set request creator to foreign user')\n\n    # make sure there is at least one request\n    login_tom\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    id = node.value :id\n\n    # admin can define requests in the name of other people\n    login_king\n    put(\"/request/#{id}\", params: load_backend_file('request/1'))\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { who: 'tom' })\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n    assert_xml_tag(tag: 'state', attributes: { name: 'new', who: 'tom' })\n\n    # via GET\n    login_Iggy\n    get '/search/request', params: { match: \"(state/@name='new' or state/@name='review') and (action/target/@project='kde4' and action/target/@package='wpa_supplicant')\" }\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # via POST\n    post '/search/request', params: URI.encode(\"match=(state/@name='new' or state/@name='review') and (action/target/@project='kde4' and action/target/@package='wpa_supplicant')\")\n    assert_response :success\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # search history\n    get '/search/request', params: { match: \"history/@who='Iggy'\" }\n    assert_response :success\n    assert_no_xml_tag(tag: 'history')\n    get '/search/request', params: { match: \"history/@who='Iggy'\", withhistory: '1' }\n    assert_response :success\n    assert_xml_tag(tag: 'history', attributes: { who: 'Iggy' })\n\n    # test \"osc rq\"\n    get '/search/request', params: { match: \"(state/@who='tom' or history/@who='tom')\" }\n    assert_response :success\n    assert_xml_tag tag: 'collection', children: { count: 6 }\n\n    # old style listing\n    get '/request'\n    assert_response :success\n    assert_xml_tag(tag: 'directory', child: { tag: 'entry' })\n\n    # collection view\n    get '/request?view=collection'\n    assert_response 404\n\n    # collection of user involved requests\n    get '/request?view=collection&user=Iggy&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    if @ENABLE_BROKEN_TEST\n      # FIXME: there is no code in this test creating request from HiddenProject\n\n      assert_xml_tag(tag: 'source', attributes: { project: 'HiddenProject', package: 'pack' })\n    end\n\n    # collection for given package\n    get '/request?view=collection&project=kde4&package=wpa_supplicant&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: '1' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'kde4', package: 'wpa_supplicant' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # collection for given project\n    get '/request?view=collection&project=kde4&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: '4' })\n\n    # tom searches for all request of adrian, but adrian has one in a hidden project which must not be viewable ...\n    login_tom\n    get '/request?view=collection&user=adrian&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_no_xml_tag(tag: 'target', attributes: { project: 'HiddenProject' })\n\n    return unless @ENABLE_BROKEN_TEST\n\n    # ... but adrian gets it\n    login_adrian\n    get '/request?view=collection&user=adrian&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'HiddenProject' })\n  end\n\n  def test_process_devel_request\n    login_king\n\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_no_xml_tag tag: 'devel', attributes: { project: 'BaseDistro', package: 'pack1' }\n    oldmeta = @response.body\n\n    rq = '<request>\n           <action type=\"change_devel\">\n             <source project=\"BaseDistro\" package=\"pack1\"/>\n             <target project=\"home:Iggy\" package=\"TestPack\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # and create a delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"BaseDistro\" package=\"pack1\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value(:id)\n\n    # try to approve change_devel\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_xml_tag tag: 'devel', attributes: { project: 'BaseDistro', package: 'pack1' }\n\n    # try to create delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"BaseDistro\" package=\"pack1\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    # this used to verify it can't delete devel links, but that was changed\n    assert_response :success\n\n    # try to delete package via old request, it should fail\n    login_king\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response 400\n\n    # cleanup\n    put '/source/home:Iggy/TestPack/_meta', params: oldmeta.dup\n    assert_response :success\n  end\n\n  def test_reject_request_creation\n    login_Iggy\n\n    # block request creation in project\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Go Away</value> </attribute> </attributes>\"\n    assert_response :success\n\n    rq = '<request>\n           <action type=\"submit\">\n             <source project=\"BaseDistro\" package=\"pack1\" rev=\"1\"/>\n             <target project=\"home:Iggy\" package=\"TestPack\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Go Away/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n\n    # just for submit actions\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>No Submits</value> <value>submit</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/No Submits/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # but it works when blocking only for others\n    post '/source/home:Iggy/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Submits welcome</value> <value>delete</value> <value>set_bugowner</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response :success\n\n    # block request creation in package\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Package blocked</value> </attribute> </attributes>\"\n    assert_response :success\n\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Package blocked/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # remove project attribute lock\n    delete '/source/home:Iggy/_attribute/OBS:RejectRequests'\n    assert_response :success\n    # still not working\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/Package blocked/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n\n    # just for submit actions\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>No Submits</value> <value>submit</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response 403\n    assert_match(/No Submits/, @response.body)\n    assert_xml_tag tag: 'status', attributes: { code: 'request_rejected' }\n    # but it works when blocking only for others\n    post '/source/home:Iggy/TestPack/_attribute', params: \"<attributes><attribute namespace='OBS' name='RejectRequests'> <value>Submits welcome</value> <value>delete</value> <value>set_bugowner</value> </attribute> </attributes>\"\n    assert_response :success\n    post '/request?cmd=create', params: rq\n    assert_response :success\n\n    # FIXME: test with request without target\n\n    # cleanup\n    delete '/source/home:Iggy/TestPack/_attribute/OBS:RejectRequests'\n    assert_response :success\n  end\n\n  # osc is still submitting with old style by default\n  def test_old_style_submit_request\n    prepare_request_with_user 'hidden_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request type=\"submit\">\n                                   <submit>\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </submit>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    # test that old style request got converted\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_no_xml_tag tag: 'submit'\n    assert_xml_tag tag: 'action', attributes: { type: 'submit' }\n  end\n\n  def test_submit_request_from_hidden_project_and_hidden_source\n    login_tom\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"home:tom\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 404\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"SourceprotectedProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"home:tom\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response 403\n\n    prepare_request_with_user 'hidden_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"HiddenProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    prepare_request_with_user 'sourceaccess_homer', 'buildservice'\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"SourceprotectedProject\" package=\"pack\" rev=\"1\"/>\n                                     <target project=\"kde4\" package=\"DUMMY\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n  end\n\n  def test_auto_revoke_when_source_gets_removed_maintenance_incident\n    login_tom\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"maintenance_incident\">\n                                     <source project=\"home:tom:branches:kde4\" package=\"kdebase\" rev=\"1\"/>\n                                     <target project=\"My:Maintenance\" releaseproject=\"BaseDistro3\" />\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value(:id)\n\n    login_king\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response :success\n\n    # delete projects\n    login_tom\n    delete '/source/home:tom:branches:kde4'\n    assert_response :success\n\n    # request got automatically revoked\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # test revoke\n    login_adrian\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response 403\n  end\n\n  def test_auto_revoke_when_source_gets_removed_submit\n    login_tom\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:tom:branches:kde4\" package=\"kdebase\" rev=\"0\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'kde4', package: 'kdebase' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id1 = node.value(:id)\n\n    post '/source/home:tom:branches:kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"home:tom:branches:home:tom:branches:kde4\" package=\"kdebase\" rev=\"0\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'home:tom:branches:kde4', package: 'kdebase' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    # id2 = node.value(:id)\n\n    # delete projects\n    delete '/source/home:tom:branches:home:tom:branches:kde4'\n    assert_response :success\n    delete '/source/home:tom:branches:kde4'\n    assert_response :success\n\n    # request got automatically revoked\n    get \"/request/#{id1}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # test decline and revoke\n    login_adrian\n    post \"/request/#{id1}?cmd=changestate&newstate=declined\"\n    assert_response 403 # set back is not allowed\n  end\n\n  def test_revoke_and_decline_when_projects_are_not_existing_anymore\n    login_tom\n\n    # test revoke, the request is part of fixtures\n    post '/request/3?cmd=changestate&newstate=revoked'\n    assert_response :success\n    # missing target project\n    post '/request/2?cmd=changestate&newstate=revoked'\n    assert_response :success\n\n    # missing source project\n    post '/request/1?cmd=changestate&newstate=declined'\n    assert_response 403\n\n    login_adrian\n    post '/request/1?cmd=changestate&newstate=declined'\n    assert_response :success\n  end\n\n  def test_create_and_revoke_submit_request_permissions\n    req = \"<request>\n             <action type='submit'>\n               <source project='home:Iggy' package='TestPack' rev='1' />\n               <target project='kde4' package='mypackage' />\n             </action>\n             <description/>\n          </request>\"\n\n    post '/request?cmd=create', params: req\n    assert_response 401\n    assert_select 'status[code] > summary', /Authentication required/\n\n    # create request by non-maintainer => validate created review item\n    login_tom\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id_by_package = node.value(:id)\n\n    # find requests which are not in review\n    get '/request?view=collection&user=Iggy&states=new'\n    assert_response :success\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    # find reviews\n    get '/request?view=collection&user=Iggy&states=review&reviewstates=new&roles=reviewer'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n\n    # test search via xpath as well\n    get '/search/request', params: { match: \"state/@name='review' and review[@by_project='home:Iggy' and @state='new']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n\n    # create request by maintainer\n    login_Iggy\n    req = load_backend_file('request/submit_without_target')\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_target_project' })\n\n    req = load_backend_file('request/works')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'home:Iggy', by_package: 'TestPack' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # add reviewer\n    login_tom\n    post \"/request/#{id}?cmd=addreview&by_user=adrian\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'add_review_not_permitted' })\n\n    login_Iggy\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'tom' })\n\n    login_tom\n    post \"/request/#{id}?cmd=addreview&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # test search via xpath as well\n    get '/search/request', params: { match: \"state/@name='review' and review[@by_group='test_group' and @state='new']\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'review', attributes: { by_group: 'test_group' })\n\n    # invalid review, by_project is missing\n    post \"/request/#{id}?cmd=addreview&by_package=kdelibs\"\n    assert_response 400\n\n    post \"/request/#{id}?cmd=addreview&by_project=kde4&by_package=kdelibs\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'kde4', by_package: 'kdelibs' })\n\n    post \"/request/#{id}?cmd=addreview&by_project=home:tom\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:tom', by_package: nil })\n\n    # and revoke it\n    reset_auth\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response 401\n\n    login_tom\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response 403\n    post '/request/ILLEGAL_CONTENT?cmd=changestate&newstate=revoked'\n    assert_response 404\n    # Rails does not allow /request/:id to match non-integers, so there is no XML generated for 404\n    # assert_xml_tag tag: 'status', attributes: {code: 'not_found'}\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # decline by_package review\n    reset_auth\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response 401\n\n    login_tom\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response 403\n\n    login_Iggy\n    post \"/request/#{id_by_package}?cmd=changereviewstate&newstate=declined&by_project=home:Iggy&by_package=TestPack\"\n    assert_response :success\n\n    get \"/request/#{id_by_package}\"\n    assert_response :success\n    assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_project: 'home:Iggy', by_package: 'TestPack', who: 'Iggy' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'adrian' })\n    assert_xml_tag(tag: 'review', attributes: { state: 'new', by_group: 'test_group' })\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # reopen with new, but state should become review due to open review\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n  end\n\n  def test_submit_cleanup_in_not_writable_source\n    login_Iggy\n    ['cleanup', 'update'].each do |modify|\n      req = \"<request>\n              <action type='submit'>\n                <source project='Apache' package='apache2' rev='1' />\n                <target project='home:Iggy' package='apache2' />\n                <options>\n                  <sourceupdate>#{modify}</sourceupdate>\n                </options>\n              </action>\n              <description/>\n            </request>\"\n      post '/request?cmd=create', params: req\n      assert_response 403\n      assert_xml_tag(tag: 'status', attributes: { code: 'lacking_maintainership' })\n    end\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='Apache' package='apache2' rev='1' />\n              <target project='home:Iggy' package='apache2' />\n              <options>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'lacking_maintainership' })\n  end\n\n  def test_makeoriginolder_request\n    login_Iggy\n\n    put '/source/home:Iggy:Apache/_meta', params: \"<project name='home:Iggy:Apache'> <title/> <description/>\n                                         <link project='Apache'/>\n                                        </project>\"\n    assert_response :success\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='Apache' package='apache2' rev='1' />\n              <target project='home:Iggy:Apache' package='apache2' />\n              <options>\n                <makeoriginolder>true</makeoriginolder>\n              </options>\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    # no write permission\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=But+I+want+it\"\n    assert_response 403\n    post \"/request/#{id}?cmd=changestate&newstate=revoked&comment=take+it+back\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=try+again\"\n    assert_response :success\n\n    # approvereview\n    login_fred\n    post \"/request/#{id}?cmd=changereviewstate&by_project=Apache&by_package=apache2&newstate=accepted\"\n    assert_response :success\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&comment=But+I+want+it\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1&comment=But+I+want+it\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    delete '/source/home:Iggy:Apache'\n    assert_response :success\n  end\n\n  def test_reopen_a_review_declined_request\n    ['new', 'review'].each do |newstate|\n      login_Iggy\n      post '/source/Apache/apache2', params: { cmd: :branch }\n      assert_response :success\n\n      # do a commit\n      put '/source/home:Iggy:branches:Apache/apache2/file', params: 'dummy'\n      assert_response :success\n\n      req = \"<request>\n              <action type='submit'>\n                <source project='home:Iggy:branches:Apache' package='apache2' rev='2' />\n              </action>\n              <description/>\n            </request>\"\n      post '/request?cmd=create', params: req\n      assert_response :success\n      assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n      node = ActiveXML::Node.new(@response.body)\n      assert node.has_attribute?(:id)\n      id = node.value(:id)\n\n      # add reviewer\n      post \"/request/#{id}?cmd=addreview&by_user=fred\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { by_user: 'fred' })\n\n      # reviewer declines\n      login_fred\n      post \"/request/#{id}?cmd=changereviewstate&by_user=fred&newstate=declined\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { state: 'declined', by_user: 'fred' })\n\n      # reopen it again and validate that the request opens the review as well\n      login_Iggy\n      post \"/request/#{id}?cmd=changestate&newstate=#{newstate}&comment=But+I+want+it\"\n      assert_response :success\n      get \"/request/#{id}\"\n      assert_response :success\n      assert_xml_tag(tag: 'review', attributes: { state: 'new', by_user: 'fred' })\n      assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n\n      # cleanup\n      delete '/source/home:Iggy:branches:Apache'\n      assert_response :success\n    end\n  end\n\n  def test_reopen_revoked_and_declined_request\n    login_Iggy\n    post '/source/Apache/apache2', params: { cmd: :branch }\n    assert_response :success\n\n    # do a commit\n    put '/source/home:Iggy:branches:Apache/apache2/file', params: 'dummy'\n    assert_response :success\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy:branches:Apache' package='apache2' rev='0' />\n            </action>\n            <description/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # revoke it\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # and reopen it as a non-maintainer is not working\n    login_adrian\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n    # and reopen it as a non-source-maintainer is not working\n    prepare_request_with_user 'fredlibs', 'buildservice'\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n\n    # reopen it again\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # target is declining it\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # find it as I am the creator\n    get '/request?view=collection&states=declined&roles=creator'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # find it as another user\n    login_adrian\n    get '/request?view=collection&user=Iggy&states=declined&roles=creator'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'request', attributes: { id: id })\n\n    # and reopen it as a non-maintainer is not working\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response 403\n\n    # and reopen it as a different maintainer from target\n    prepare_request_with_user 'fredlibs', 'buildservice'\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # cleanup\n    login_Iggy\n    delete '/source/home:Iggy:branches:Apache'\n    assert_response :success\n  end\n\n  def test_all_action_types\n    req = load_backend_file('request/cover_all_action_types_request')\n    login_Iggy\n\n    # create kdebase package\n    post '/source/kde4/kdebase', params: { cmd: :branch }\n    assert_response :success\n    post '/request?cmd=create', params: req\n    assert_response :success\n    put '/source/home:Iggy:branches:kde4/kdebase/change', params: 'avoid dropped submit action'\n    assert_response :success\n    post '/request?cmd=create', params: req\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n    assert_xml_tag(tag: 'review', attributes: { by_user: 'adrian', state: 'new' })\n\n    # do not accept request in review state\n    get \"/request/#{id}\"\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_match(/Request is in review state/, @response.body)\n\n    # approve reviews\n    login_adrian\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n\n    # a review has been added because we are not maintainer of current devel package, accept it.\n    login_king\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'home:coolo:test', by_package: 'kdelibs_DEVEL_package' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # reopen the review\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_group=INEXISTENT\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_user=INEXISTENT\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    post \"/request/#{id}?cmd=changereviewstate&newstate=new&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    # and accept it again\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_project=home:coolo:test&by_package=kdelibs_DEVEL_package\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n\n    # validate our existing test data and fixtures\n    login_king\n    get '/source/home:Iggy/ToBeDeletedTestPack/_meta'\n    assert_response :success\n    get '/source/home:fred:DeleteProject/_meta'\n    assert_response :success\n    get '/source/kde4/Testing/myfile'\n    assert_response 404\n    get '/source/kde4/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_no_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_no_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n\n    # Accept will fail because Fred does not have permissions on the source package\n    # which is required because of the InitializeDevelPackage attribute on kde4\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_match(/No permission to initialize the source package as a devel package/, @response.body)\n\n    # We need to set permissions on the source because of the InitializeDevelPackage attribute on kde4 project\n    login_king\n    put '/source/home:Iggy:branches:kde4/_meta', params: \"<project name='home:Iggy:branches:kde4'><title/><description/><person userid='fred' role='maintainer'/></project>\"\n    assert_response :success\n\n    # Successful accept the request\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # Validate the executed actions\n    get '/source/home:Iggy:branches:kde4/BranchPack/_link'\n    assert_response :success\n    assert_xml_tag tag: 'link', attributes: { project: 'kde4', package: 'Testing' }\n    get '/source/home:Iggy/ToBeDeletedTestPack'\n    assert_response 404\n    get '/source/home:fred:DeleteProject'\n    assert_response 404\n    get '/source/kde4/Testing/myfile'\n    assert_response :success\n    get '/source/kde4/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n    get '/source/kde4/kdelibs/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'bugowner' })\n    assert_xml_tag(tag: 'person', attributes: { userid: 'Iggy', role: 'maintainer' })\n    assert_xml_tag(tag: 'group', attributes: { groupid: 'test_group', role: 'reader' })\n\n    # cleanup\n    login_king\n    delete '/source/kde4/Testing'\n    assert_response :success\n    post '/source/home:fred:DeleteProject', params: { cmd: 'undelete' }\n    assert_response :success\n    post '/source/home:Iggy/ToBeDeletedTestPack', params: { cmd: 'undelete' }\n    assert_response :success\n  end\n\n  def test_submit_with_review\n    req = load_backend_file('request/submit_with_review')\n\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    # we upload 2 and 2 default reviewers are added\n    assert_xml_tag(children: { only: { tag: 'review' }, count: 4 })\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' }, parent: { tag: 'request' })\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # test search\n    get '/request?view=collection&group=test_group&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    # be sure we have not 2 invalidating the limit test\n    assert_no_xml_tag(tag: 'collection', attributes: { matches: 2 })\n\n    # test limit\n    get '/request?view=collection&group=test_group&states=new,review&limit=2'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'collection', attributes: { matches: 2 })\n\n    # try to break permissions\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_match(/Request is in review state./, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response 403\n    assert_match(/review state change is not permitted for/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response 403\n    assert_match(/review state change for group test_group is not permitted for Iggy/, @response.body)\n    post '/request/987654321?cmd=changereviewstate&newstate=accepted&by_group=test_group'\n    assert_response 404\n    assert_match(/Couldn't find request with id '987654321'/, @response.body)\n\n    # Only partly matching by_ arguments\n    login_adrian\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_group=test_group_b\"\n    assert_response 403\n    assert_match(/review state change for group test_group_b is not permitted for adrian/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_project=BaseDistro\"\n    assert_response 403\n    assert_match(/review state change for project BaseDistro is not permitted for adrian/, @response.body)\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian&by_project=BaseDistro&by_package=pack2\"\n    assert_response 403\n    assert_match(/review state change for package BaseDistro\\/pack2 is not permitted for adrian/, @response.body)\n\n    # approve reviews for real\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_user=adrian\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' },\n                   parent: { tag: 'request' }) # remains in review state\n\n    post \"/request/#{id}?cmd=changereviewstate&newstate=accepted&by_group=test_group\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' },\n                   parent: { tag: 'request' }) # switch to new after last review\n\n    # Accept will fail because adrian does not have permissions on the source\n    # which is required because of the InitializeDevelPackage attribute on kde4\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 403\n    assert_match(/No permission to initialize the source package as a devel package/, @response.body)\n\n    # Adding adrian as maintainoer of the source\n    login_Iggy\n    get '/source/home:Iggy/_meta'\n    iggy_meta = @response.body\n    put '/source/home:Iggy/_meta', params: \"<project name='home:Iggy'><title/><description/><person userid='adrian' role='maintainer'/></project>\"\n\n    assert_response :success\n\n    login_adrian\n    # approve accepted and check initialized devel package\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get '/source/kde4/Testing/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'devel', attributes: { project: 'home:Iggy', package: 'TestPack' })\n\n    # cleanup\n    login_king\n    delete '/source/home:Iggy/TestPack/_link'\n    assert_response :success\n    delete '/source/kde4/Testing'\n    assert_response :success\n    login_Iggy\n    put '/source/home:Iggy/_meta', params: iggy_meta\n  end\n\n  def test_reviewer_added_when_source_maintainer_is_missing\n    # create request\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='BaseDistro2.0' package='pack2' rev='1' />\n              <target project='home:tom' package='pack2' />\n            </action>\n            <description>SUBMIT</description>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n    assert_xml_tag(tag: 'review', attributes: { by_project: 'BaseDistro2.0', by_package: 'pack2' })\n\n    # set project to approve it\n    login_king\n    post '/source/BaseDistro2.0/_attribute', params: \"<attributes><attribute namespace='OBS' name='ApprovedRequestSource' /></attributes>\"\n    assert_response :success\n\n    # create request again\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='BaseDistro2.0' package='pack2' rev='1' />\n              <target project='home:tom' package='pack2' />\n            </action>\n            <description>SUBMIT</description>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n    assert_no_xml_tag(tag: 'review', attributes: { by_project: 'BaseDistro2.0', by_package: 'pack2' })\n\n    # cleanup attribute\n    login_king\n    delete '/source/BaseDistro2.0/_attribute/OBS:ApprovedRequestSource'\n    assert_response :success\n  end\n\n  def test_submit_unchanged_sources\n    # create ower playground\n    login_king\n    put '/source/DummY/_meta', params: \"<project name='DummY'><title/><description/><link project='BaseDistro2.0'/></project>\"\n    assert_response :success\n\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/DummY/pack2', params: { cmd: :branch }\n    assert_response :success\n\n    # check source link\n    get '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/_link'\n    assert_response :success\n    ret = Xmlhash.parse @response.body\n    assert_equal 'BaseDistro2.0:LinkedUpdateProject', ret['project']\n    assert_nil ret['package'] # same package name\n\n    # create request back of unchanged sources, but creating a new package instance\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # now link package inside, so sources are unchanged\n    login_king\n    post '/source/BaseDistro2.0/pack2', params: { cmd: :branch, target_project: 'DummY' }\n    assert_response :success\n    login_tom\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'missing_action' })\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'missing_action' })\n\n    # create request to a different place works\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='packNew' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='packNew' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # now with modified sources\n    login_tom\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/new_file', params: 'just to have changed source'\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    req = \"<request>\n            <action type='submit'>\n              <source project='RemoteInstance:home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    # cleanup\n    login_king\n    delete '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject'\n    assert_response :success\n    delete '/source/DummY'\n    assert_response :success\n  end\n\n  def test_branch_and_submit_request_to_linked_project_and_delete_it_again\n    # create ower playground\n    login_king\n    put '/source/DummY/_meta', params: \"<project name='DummY'><title/><description/><link project='BaseDistro2.0'/></project>\"\n    assert_response :success\n\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/DummY/pack2', params: { cmd: :branch }\n    assert_response :success\n\n    # check source link\n    get '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/_link'\n    assert_response :success\n    ret = Xmlhash.parse @response.body\n    assert_equal 'BaseDistro2.0:LinkedUpdateProject', ret['project']\n    assert_nil ret['package'] # same package name\n\n    # do some modification\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/NEW_FILE', params: 'content'\n    assert_response :success\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <sourceupdate>noupdate</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted' })\n\n    get '/source/DummY/pack2/_history'\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'comment', content: 'SUBMIT')\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: id)\n\n    # pack2 got created\n    get '/source/DummY/pack2/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0', package: nil })\n\n    ### try again with update link\n    # do some modification\n    put '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject/pack2/NEW_FILE', params: 'NEW content'\n    assert_response :success\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2' />\n              <options>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # ensure that the diff shows the link change\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'changed' } }, tag: 'old', attributes: { name: '_link' })\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n\n    # the link in pack2 got changed\n    get '/source/DummY/pack2/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0:LinkedUpdateProject', package: nil })\n\n    # the diff is still working due to acceptinfo\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'action', attributes: { type: 'submit' } }, tag: 'acceptinfo', attributes: { rev: '3' })\n    post \"/request/#{id}?cmd=diff\"\n    assert_response :success\n    assert_match 'NEW_FILE', @response.body\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'changed' } }, tag: 'new', attributes: { name: 'NEW_FILE' })\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:BaseDistro2.0:LinkedUpdateProject' package='pack2' />\n              <target project='DummY' package='pack2.NEW' />\n              <options>\n                <sourceupdate>cleanup</sourceupdate>\n                <updatelink>true</updatelink>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create&addrevision=1', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # ensure that the diff shows the link change\n    post \"/request/#{id}?cmd=diff&view=xml\"\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'file', attributes: { state: 'added' } }, tag: 'new', attributes: { name: '_link' })\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n\n    # the link got transfered\n    get '/source/DummY/pack2.NEW/_link'\n    assert_response :success\n    assert_xml_tag(tag: 'link', attributes: { project: 'BaseDistro2.0:LinkedUpdateProject', package: nil })\n\n    ###\n    # create delete request two times\n    login_tom\n    req = \"<request>\n            <action type='delete'>\n              <target project='DummY' package='pack2'/>\n            </action>\n            <action type='delete'>\n              <target project='DummY' package='pack2.NEW'/>\n            </action>\n            <description>DELETE REQUEST</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id2.present?\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id3 = node['id']\n    assert id3.present?\n\n    # accept the request\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response :success\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted' })\n\n    # validate result\n    get '/source/DummY/pack2/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'package', attributes: { project: 'BaseDistro2.0', name: 'pack2' })\n    get '/source/DummY/pack2/_history?deleted=1'\n    assert_response :success\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'comment', content: 'DELETE REQUEST')\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: id)\n\n    login_king\n    # you can only accept request in state new\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # you can only accept request in state new and with an existing target\n    post \"/request/#{id2}?cmd=changestate&newstate=new&force=1\"\n    assert_response :success\n    post \"/request/#{id2}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'not_existing_target' })\n\n    # decline the request\n    post \"/request/#{id2}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # submitter is accepting the decline => revoke\n    login_tom\n    post \"/request/#{id2}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # try to decline it again after revoke\n    login_king\n    post \"/request/#{id2}?cmd=changestate&newstate=declined\"\n    assert_response 403\n    assert_match(/set state to declined from a final state is not allowed./, @response.body)\n\n    # revoke the request\n    post \"/request/#{id3}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n    get \"/request/#{id3}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'revoked' })\n\n    # cleanup\n    login_king\n    delete '/source/DummY'\n    assert_response :success\n    delete '/source/home:tom:branches:BaseDistro2.0:LinkedUpdateProject'\n    assert_response :success\n  end\n\n  def test_auto_accept_request\n    login_tom\n\n    Timecop.freeze(2010, 7, 12)\n\n    # create request with auto accept tomorrow\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <accept_at>2010-07-13 14:00:21.000000000 Z</accept_at>\n            <description>SUBMIT</description>\n            <state/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    # user has no write permission in target\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n\n    # works as user with write permission in target\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n    # and a second request\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id2 = node['id']\n    assert id.present?\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-13 14:00:21 UTC')\n\n    # but not when the time is yesterday\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <accept_at>2010-07-11 14:00:21.000000000 Z</accept_at>\n            <description>SUBMIT</description>\n            <state who='tom' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'request_save_error' })\n    assert_xml_tag(tag: 'summary', content: 'Auto accept time is in the past')\n\n    # now time travel and accept\n    Timecop.freeze(2.days)\n    # the backend has to be up before we can accept\n    Backend::Test.start\n    BsRequest.delayed_auto_accept\n    # Run delayed jobs for newly created bs request.\n    # NOTE: bs requests are now identified by their number attribute\n    BsRequestAutoAcceptJob.new.perform(BsRequest.find_by_number(id).id)\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-13 14:00:21 UTC')\n    assert_xml_tag(tag: 'state', attributes: { name: 'accepted', when: '2010-07-14T00:00:00', who: 'Iggy' })\n\n    # and now check that the package is gone indeed\n    get '/source/home:Iggy/TestPack'\n    assert_response 404\n\n    # the other one got close because the target does not exist anymore\n    get \"/request/#{id2}\"\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined', when: '2010-07-14T00:00:00', who: 'Iggy' })\n    assert_xml_tag(tag: 'comment', content: \"The target package 'TestPack' has been removed\")\n\n    # good, now revive to fix the state of the union\n    post '/source/home:Iggy/TestPack?cmd=undelete'\n    assert_response :success\n  end\n\n  def test_set_auto_accept\n    login_tom\n\n    Timecop.freeze(2010, 7, 12)\n\n    req = \"<request>\n            <action type='delete'>\n              <target project='home:Iggy' package='TestPack' />\n            </action>\n            <description>delete</description>\n            <state/>\n          </request>\"\n\n    # works as user with write permission in target\n    login_Iggy\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    assert id.present?\n\n    # accept it now\n    post \"/request/#{id}?cmd=setacceptat\"\n    assert_response :success\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2010-07-12 00:00:00 UTC')\n\n    # modify accept time\n    post \"/request/#{id}?cmd=setacceptat&time='2013-12-01%2000:00:00%20UTC'\"\n    assert_response :success\n\n    # correct rendered\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'accept_at', content: '2013-12-01 00:00:00 UTC')\n  end\n\n  def test_branch_version_update_and_submit_request_back\n    # branch a package which does not exist in project, but project is linked\n    login_tom\n    post '/source/home:Iggy/TestPack', params: { cmd: :branch }\n    assert_response :success\n\n    # version update\n    spec = File.open(\"#{Rails.root}/test/fixtures/backend/source/home:Iggy/TestPack/TestPack.spec\").read\n    spec.gsub!(/^Version:.*/, 'Version: 2.42')\n    spec.gsub!(/^Release:.*/, 'Release: 1')\n    Backend::Connection.put('/source/home:tom:branches:home:Iggy/TestPack/TestPack.spec?user=king', spec)\n    assert_response :success\n\n    get '/source/home:tom:branches:home:Iggy/TestPack?view=info&parse=1'\n    assert_response :success\n    assert_xml_tag(tag: 'version', content: '2.42')\n    assert_xml_tag(tag: 'release', content: '1')\n\n    get '/source/home:tom:branches:home:Iggy/TestPack?expand=1'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:vrev)\n    vrev = node.value(:vrev)\n\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:tom:branches:home:Iggy' package='TestPack' />\n              <options>\n                <sourceupdate>update</sourceupdate>\n              </options>\n            </action>\n            <description>SUBMIT</description>\n            <state/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value(:id)\n\n    # decline it and try to accept it\n    # must not work to avoid races between multiple users\n    login_king\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 403\n    assert_xml_tag(tag: 'status', attributes: { code: 'post_request_no_permission' })\n    assert_xml_tag(tag: 'summary', content: 'Request is not in new state. You may reopen it by setting it to new.')\n    # reopen and accept the request\n    post \"/request/#{id}?cmd=changestate&newstate=new\"\n    assert_response :success\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    get '/source/home:Iggy/TestPack?view=info&parse=1'\n    assert_response :success\n    assert_xml_tag(tag: 'version', content: '2.42')\n    assert_xml_tag(tag: 'release', content: '1')\n\n    # vrev must not get smaller after accept\n    get '/source/home:tom:branches:home:Iggy/TestPack?expand=1'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:vrev)\n    vrev_after_accept = node.value(:vrev)\n    assert vrev <= vrev_after_accept\n\n    # cleanup\n    delete '/source/home:tom:branches:home:Iggy'\n    assert_response :success\n    # restore original spec file\n    Backend::Connection.put('/source/home:Iggy/TestPack/TestPack.spec?user=king', File.open(\"#{Rails.root}/test/fixtures/backend/source/home:Iggy/TestPack/TestPack.spec\").read)\n    assert_response :success\n  end\n\n  # test permissions on read protected objects\n  #\n  #\n  def test_submit_from_source_protected_project\n    prepare_request_with_user 'sourceaccess_homer', 'buildservice'\n    post '/request?cmd=create', params: load_backend_file('request/from_source_protected_valid')\n    assert_response :success\n    assert_xml_tag(tag: 'request')\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # show diffs\n    post \"/request/#{id}?cmd=diff\"\n    assert_response :success\n\n    # diffs are secret for others\n    reset_auth\n    post \"/request/#{id}?cmd=diff\"\n    assert_response 401\n    login_Iggy\n    post \"/request/#{id}?cmd=diff\"\n    # make sure to always either show a diff or an error - empty diff is not an option\n    assert_response 403\n  end\n\n  # create requests to hidden from external\n  def request_hidden(user, pass, backend_file)\n    reset_auth\n    req = load_backend_file(backend_file)\n    post '/request?cmd=create', params: req\n    assert_response 401\n    assert_select 'status[code] > summary', /Authentication required/\n    prepare_request_with_user user, pass\n    post '/request?cmd=create', params: req\n  end\n\n  ## create request to hidden package from open place - valid user  - success\n  def test_create_request_to_hidden_package_from_open_place_valid_user\n    request_hidden('adrian', 'buildservice', 'request/to_hidden_from_open_valid')\n    assert_response :success\n    # assert_xml_tag( :tag => \"state\", :attributes => { :name => 'new' } )\n  end\n\n  ## create request to hidden package from open place - invalid user - fail\n  # request_controller.rb:178\n  def test_create_request_to_hidden_package_from_open_place_invalid_user\n    request_hidden('Iggy', 'buildservice', 'request/to_hidden_from_open_invalid')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n  end\n\n  ## create request to hidden package from hidden place - valid user - success\n  def test_create_request_to_hidden_package_from_hidden_place_valid_user\n    login_king\n    put '/source/HiddenProject/target/file', params: 'ASD'\n    assert_response :success\n    request_hidden('adrian', 'buildservice', 'request/to_hidden_from_hidden_valid')\n    assert_response :success\n    assert_xml_tag(tag: 'state', attributes: { name: 'new' })\n  end\n\n  ## create request to hidden package from hidden place - invalid user - fail\n  def test_create_request_to_hidden_package_from_hidden_place_invalid_user\n    request_hidden('Iggy', 'buildservice', 'request/to_hidden_from_hidden_invalid')\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'unknown_project' })\n  end\n\n  # requests from Hidden to external\n  ## create request from hidden package to open place - valid user  - fail ! ?\n  def test_create_request_from_hidden_package_to_open_place_valid_user\n    request_hidden('adrian', 'buildservice', 'request/from_hidden_to_open_valid')\n    # FIXME: !!\n    # should we really allow this - might be a mistake. qualified procedure could be:\n    # sr from hidden to hidden and then make new location visible\n    assert_response :success\n    # FIXME: implementation unclear\n  end\n\n  ### bugowner\n  ### role\n  def test_hidden_add_role_request\n    login_Iggy\n    post '/request?cmd=create', params: load_backend_file('request/hidden_add_role_fail')\n    # should fail as this user shouldn't see the target package at all.\n    assert_response 404 if @ENABLE_BROKEN_TEST\n    reset_auth\n    login_adrian\n    post '/request?cmd=create', params: load_backend_file('request/hidden_add_role')\n    assert_response :success\n  end\n\n  # bugreport bnc #674760\n  def test_try_to_delete_project_without_permissions\n    login_Iggy\n\n    put '/source/home:Iggy:Test/_meta', params: \"<project name='home:Iggy:Test'> <title /> <description /> </project>\"\n    assert_response :success\n\n    # first action is permitted, but second not\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"delete\">\n                                     <target project=\"home:Iggy:Test\"/>\n                                   </action>\n                                   <action type=\"delete\">\n                                     <target project=\"kde4\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # accept this request without permissions\n    post \"/request/#{id}?cmd=changestate&newstate=accepted&force=1\"\n    assert_response 403\n\n    # everything still there\n    get '/source/home:Iggy:Test/_meta'\n    assert_response :success\n    get '/source/kde4/_meta'\n    assert_response :success\n\n    delete '/source/home:Iggy:Test'\n    assert_response :success\n  end\n\n  # bugreport bnc #833616\n  def test_permission_check_for_package_only_permissions\n    login_Iggy\n\n    # validate setup for this check\n    get '/source/home:Iggy/_meta'\n    assert_response :success\n    assert_no_xml_tag(tag: 'person', attributes: { userid: 'fred', role: 'maintainer' })\n    get '/source/home:Iggy/TestPack/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'person', attributes: { userid: 'fred', role: 'maintainer' })\n\n    # create request for package, which is maintained by fred\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"add_role\">\n                                     <target project=\"home:Iggy\" package=\"TestPack\"/>\n                                     <person name=\"adrian\" role=\"maintainer\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # decline as fred\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response :success\n\n    # create request for project, where fred has no permissions\n    login_Iggy\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"add_role\">\n                                     <target project=\"home:Iggy\" />\n                                     <person name=\"adrian\" role=\"maintainer\"/>\n                                   </action>\n                                   <state name=\"new\" />\n                                 </request>'\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    id = node.value('id')\n\n    # decline as fred\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined\"\n    assert_response 403\n  end\n\n  def test_invalid_names\n    login_Iggy\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='kde4' package='kdelibs' />\n              <target project='c++ ' package='TestPack'/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='kde4' package='kdelibs' />\n              <target project='c++' package='TestPack '/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response 400\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n  end\n\n  def test_invalid_cleanup_use\n    login_Iggy\n\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy' package='TestPack' rev='0' />\n              <target project='home:Iggy' package='TestPack' />\n              <options>\n                <sourceupdate>cleanup</sourceupdate>\n              </options>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_xml_tag(tag: 'status', attributes: { code: 'invalid_record' })\n  end\n\n  def test_special_chars\n    login_Iggy\n    # create request\n    req = \"<request>\n            <action type='submit'>\n              <source project='home:Iggy' package='TestPack' />\n              <target project='c++' package='TestPack'/>\n            </action>\n            <description/>\n            <state who='Iggy' name='new'/>\n          </request>\"\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = ActiveXML::Node.new(@response.body)\n    id = node.value :id\n    get \"/request/#{id}\"\n    assert_response :success\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&user=Iggy&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&project=c%2b%2b&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n\n    get '/request?view=collection&project=c%2b%2b&package=TestPack&states=new,review'\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' })\n    assert_xml_tag(tag: 'target', attributes: { project: 'c++', package: 'TestPack' })\n  end\n\n  def test_project_delete_request_with_pending\n    # try to replay rq 74774\n    login_Iggy\n    meta = \"<project name='home:Iggy:todo'><title></title><description/><repository name='base'>\n      <path repository='BaseDistroUpdateProject_repo' project='BaseDistro:Update'/>\n        <arch>i586</arch>\n        <arch>x86_64</arch>\n     </repository>\n     </project>\"\n\n    put url_for(controller: :source, action: :update_project_meta, project: 'home:Iggy:todo'), params: meta\n    assert_response :success\n\n    meta = \"<package name='realfun' project='home:Iggy:todo'><title/><description/></package>\"\n    put url_for(controller: :source, action: :update_package_meta, project: 'home:Iggy:todo', package: 'realfun'), params: meta\n    assert_response :success\n\n    login_tom\n    post '/source/home:Iggy:todo/realfun', params: { cmd: 'branch' }\n    assert_response :success\n\n    # verify\n    get '/source/home:tom:branches:home:Iggy:todo/realfun/_meta'\n    assert_response :success\n\n    # now try to delete the original project\n    # and create a delete request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"home:Iggy:todo\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value('id')\n\n    login_Iggy\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # verify request number loging\n    login_king\n    get '/source/home:Iggy:todo/_project/_history?meta=1&deleted=1'\n    assert_xml_tag(parent: { tag: 'revision' }, tag: 'requestid', content: iddelete)\n    assert_response :success\n\n    # cleanup\n    delete '/source/home:Iggy:todo'\n    assert_response 404 # already removed\n    login_tom\n    delete '/source/home:tom:branches:home:Iggy:todo'\n    assert_response :success\n  end\n\n  def test_try_to_modify_virtual_package\n    login_Iggy\n\n    get '/source/BaseDistro:Update/pack1/_meta'\n    assert_response :success\n    assert_xml_tag(tag: 'package', attributes: { project: 'BaseDistro' }) # it appears via project link\n\n    # and create a request to wrong target\n    ['delete', 'set_bugowner', 'add_role', 'change_devel'].each do |at|\n      rq = '<request>\n             <action type=\"' + at + '\">'\n      rq += \"  <source project='BaseDistro' package='pack1'/>\" if at == 'change_devel'\n      rq += '  <target project=\"BaseDistro:Update\" package=\"pack1\"/>'\n      rq += \"  <person name='Iggy' role='reviewer' />\" if at == 'add_role'\n      rq += '</action>\n             <state name=\"new\" />\n           </request>'\n\n      post '/request?cmd=create', params: rq\n      assert_response 404\n      assert_xml_tag(tag: 'status', attributes: { code: 'not_found' })\n    end\n  end\n\n  def test_repository_delete_request\n    login_Iggy\n    meta = \"<project name='home:Iggy:todo'><title></title><description/><repository name='base'>\n      <path repository='BaseDistroUpdateProject_repo' project='BaseDistro:Update'/>\n        <arch>i586</arch>\n        <arch>x86_64</arch>\n     </repository>\n     </project>\"\n\n    put url_for(controller: :source, action: :update_project_meta, project: 'home:Iggy:todo'), params: meta\n    assert_response :success\n\n    meta = \"<package name='realfun' project='home:Iggy:todo'><title/><description/></package>\"\n    put url_for(controller: :source, action: :update_package_meta, project: 'home:Iggy:todo', package: 'realfun'), params: meta\n    assert_response :success\n\n    login_tom\n    post '/source/home:Iggy:todo/realfun', params: { cmd: 'branch' }\n    assert_response :success\n\n    # verify\n    get '/source/home:tom:branches:home:Iggy:todo/realfun/_meta'\n    assert_response :success\n\n    # delete repository via request\n    rq = '<request>\n           <action type=\"delete\">\n             <target project=\"home:Iggy:todo\" repository=\"base\"/>\n           </action>\n           <state name=\"new\" />\n         </request>'\n\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete = node.value('id')\n    post '/request?cmd=create', params: rq\n    assert_response :success\n    node = ActiveXML::Node.new(@response.body)\n    assert node.has_attribute?(:id)\n    iddelete2 = node.value('id')\n\n    login_Iggy\n    post \"/request/#{iddelete}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # verify\n    get '/source/home:Iggy:todo/_meta'\n    assert_response :success\n    assert_no_xml_tag tag: 'repository', attributes: { name: 'base' }\n    get '/source/home:tom:branches:home:Iggy:todo/_meta'\n    assert_response :success\n    assert_xml_tag parent: { tag: 'repository', attributes: { name: 'base' } },\n                   tag: 'path', attributes: { project: 'deleted', repository: 'deleted' }\n\n    # try again and fail\n    login_Iggy\n    post \"/request/#{iddelete2}?cmd=changestate&newstate=accepted\"\n    assert_response 404\n    assert_xml_tag(tag: 'status', attributes: { code: 'repository_missing' })\n\n    # cleanup\n    delete '/source/home:Iggy:todo'\n    assert_response :success\n    login_tom\n    delete '/source/home:tom:branches:home:Iggy:todo'\n    assert_response :success\n  end\n\n  def test_delete_request_id\n    login_tom\n    req = load_backend_file('request/1')\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    get \"/request/#{id}\"\n    assert_response :success\n\n    # old admins can do that\n    delete \"/request/#{id}\"\n    assert_response 403\n    assert_xml_tag tag: 'summary', content: 'Requires admin privileges'\n\n    login_king\n    delete \"/request/#{id}\"\n    assert_response :success\n\n    get \"/request/#{id}\"\n    assert_response 404\n  end\n\n  def test_reopen_declined_request\n    login_Iggy\n    req = load_backend_file('request/add_role')\n    post '/request?cmd=create', params: req\n    assert_response :success\n\n    node = Xmlhash.parse(@response.body)\n    id = node['id']\n    get \"/request/#{id}\"\n    assert_response :success\n\n    login_fred\n    post \"/request/#{id}?cmd=changestate&newstate=declined&comment=not+you\"\n    get \"/request/#{id}\"\n    assert_xml_tag(tag: 'state', attributes: { name: 'declined' })\n\n    # fred should be able to reopen\n    post \"/request/#{id}?cmd=changestate&newstate=new&comment=oh\"\n    get \"/request/#{id}\"\n    assert_xml_tag(tag: 'state', attributes: { name: 'review' })\n  end\n\n  # it was reported that requests can't be revoked - test cases verifie sthat\n  def test_revoke_autodeclined_submit_requests\n    login_Iggy\n\n    Timecop.freeze(2010, 7, 12)\n    put '/source/home:Iggy:fordecline/_meta', params: \"<project name='home:Iggy:fordecline'><title></title><description></description></project>\"\n    assert_response :success\n\n    post '/request?cmd=create', params: \"<request><action type='add_role'><target project='home:Iggy:fordecline'/><person name='Iggy' role='reviewer'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    Timecop.freeze(1)\n    delete '/source/home:Iggy:fordecline'\n    assert_response :success\n\n    get \"/request/#{id}?withhistory=1\"\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id,\n                   'creator' => 'Iggy',\n                   'action'  =>\n                                { 'type'   => 'add_role',\n                                  'target' => { 'project' => 'home:Iggy:fordecline' },\n                                  'person' => { 'name' => 'Iggy', 'role' => 'reviewer' } },\n                   'state'   =>\n                                { 'name'    => 'declined',\n                                  'who'     => 'Iggy',\n                                  'when'    => '2010-07-12T00:00:01',\n                                  'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" },\n                   'history' => [{ 'who'         => 'Iggy',\n                                   'when'        => '2010-07-12T00:00:00',\n                                   'description' => 'Request created' },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01',\n                                   'description' => 'Request got declined',\n                                   'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" }] }, node)\n\n    Timecop.freeze(1)\n    post \"/request/#{id}?cmd=changestate&newstate=revoked\"\n    assert_response :success\n\n    get \"/request/#{id}?withhistory=1\"\n    node = Xmlhash.parse(@response.body)\n    assert_equal({ 'id'      => id,\n                   'creator' => 'Iggy',\n                   'action'  =>\n                                { 'type'   => 'add_role',\n                                  'target' => { 'project' => 'home:Iggy:fordecline' },\n                                  'person' => { 'name' => 'Iggy', 'role' => 'reviewer' } },\n                   'state'   => { 'name'    => 'revoked',\n                                  'who'     => 'Iggy',\n                                  'when'    => '2010-07-12T00:00:02',\n                                  'comment' => {} },\n                   'history' =>\n                                [{ 'who' => 'Iggy', 'when' => '2010-07-12T00:00:00',\n                         'description' => 'Request created' },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:01',\n                                  'description' => 'Request got declined',\n                                  'comment' => \"The target project 'home:Iggy:fordecline' has been removed\" },\n                                 { 'who' => 'Iggy', 'when' => '2010-07-12T00:00:02',\n                                  'description' => 'Request got revoked' }] }, node)\n  end\n\n  def test_check_target_maintainer\n    login_tom\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='Apache' package='apache2'/><target project='kde4' package='apache2'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    infos = BsRequest.find_by_number(id).webui_infos\n    assert !infos['is_target_maintainer'], 'tom is target maintainer'\n  end\n\n  def test_cleanup_from_home\n    login_dmayr\n    req = load_backend_file('request/cleanup_from_home')\n    post '/request?cmd=create', params: req\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n\n    # now check that the package was deleted, but not the project\n    get '/source/home:dmayr'\n    assert_response :success\n    assert_xml_tag tag: 'entry', attributes: { name: 'x11vnc' }\n\n    delete '/source/home:Iggy/x11vnc'\n    assert_response :success\n  end\n\n  def test_reviews_in_delete_requests\n    # make Iggy maintainer for pack2 in this test\n    packages(:Devel_BaseDistro_Update_pack2).relationships.create(role: roles(:maintainer), user: users(:Iggy))\n\n    login_tom\n    post '/request?cmd=create', params: \"<request><action type='delete'><target project='Devel:BaseDistro:Update' package='pack2'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n\n    # Iggy can't accept due to devel package\n    login_Iggy\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response 400\n    assert_xml_tag tag: 'summary', content: 'Package is used by following packages as devel package: BaseDistro:Update/pack2'\n\n    # but he should be able to add reviewers\n    post \"/request/#{id}?cmd=addreview&by_user=tom\"\n    assert_response :success\n\n    # now tom should be able to accept the review\n    login_tom\n    post \"/request/#{id}?cmd=changereviewstate&by_user=tom&newstate=accepted\"\n    assert_response :success\n  end\n\n  def cleanup_empty_projects_helper(expect_cleanup_empty_project)\n    sprj = 'Apache'\n    bprj = \"home:king:branches:#{sprj}\"\n\n    post \"/source/#{sprj}/apache2\", params: { cmd: :branch, target_project: bprj }\n    assert_response :success\n    put \"/source/#{bprj}/apache2/dummy\", params: 'dummy'\n    assert_response :success\n\n    post \"/source/#{sprj}/Tidy\", params: { cmd: :branch, target_project: bprj }\n    assert_response :success\n    put \"/source/#{bprj}/Tidy/dummy\", params: 'dummy'\n    assert_response :success\n\n    # Submit apache2 back. It is not the last project.\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='#{bprj}' package='apache2'/><target project='#{sprj}' package='apache2'/></action></request>\"\n    assert_response :success\n    # Accept our own request :-)\n    id = Xmlhash.parse(@response.body)['id']\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n    # apache2 has gone, but the project remains\n    get \"/source/#{bprj}\"\n    assert_response :success\n    assert_no_xml_tag tag: 'entry', attributes: { name: 'apache2' }\n    assert_xml_tag tag: 'entry', attributes: { name: 'Tidy' }\n\n    # Submit Tidy back. It *is* the last project.\n    post '/request?cmd=create', params: \"<request><action type='submit'><source project='#{bprj}' package='Tidy'/><target project='#{sprj}' package='Tidy'/></action></request>\"\n    assert_response :success\n    id = Xmlhash.parse(@response.body)['id']\n    post \"/request/#{id}?cmd=changestate&newstate=accepted\"\n    assert_response :success\n    get \"/source/#{bprj}\"\n    if expect_cleanup_empty_project\n      assert_response 404\n    else\n      assert_response :success\n      assert_no_xml_tag tag: 'entry', attributes: { name: 'apache2' }\n      assert_no_xml_tag tag: 'entry', attributes: { name: 'Tidy' }\n    end\n\n    delete \"/source/#{sprj}/Tidy/dummy\", params: 'dummy'\n    assert_response :success\n    delete \"/source/#{sprj}/apache2/dummy\", params: 'dummy'\n    assert_response :success\n  end\n\n  def test_cleanup_empty_projects\n    # we use an admin user so we can twiddle the configuration\n    login_king\n\n    # By default, OBS expects to have thousands of users, so succesfully\n    # submitting the last package in a project cleans up the project to\n    # save resources.\n    cleanup_empty_projects_helper(true)\n\n    # \"small team\" mode: resources are unconstrained so we're willing to\n    # preserve everyone's project configuration even if the project is empty\n    put '/configuration?cleanup_empty_projects=off'\n    assert_response :success\n    cleanup_empty_projects_helper(false)\n\n    # explicitly go back to the default and check that the result is still\n    # the same\n    put '/configuration?cleanup_empty_projects=on'\n    assert_response :success\n    cleanup_empty_projects_helper(true)\n  end\n\n  def test_ordering_of_requests\n    prepare_request_with_user 'Iggy', 'buildservice'\n\n    Timecop.freeze(2010, 7, 12)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"default\"/>\n                                   </action>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    default = node['id']\n    assert default.present?\n    Timecop.freeze(1)\n    # a second default\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"moderate\"/>\n                                   </action>\n                                   <priority>moderate</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    moderate = node['id']\n    assert moderate.present?\n    Timecop.freeze(1)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"low\"/>\n                                   </action>\n                                   <priority>low</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    low = node['id']\n    assert low.present?\n    Timecop.freeze(1)\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro:Update\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"critical\"/>\n                                   </action>\n                                   <priority>critical</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    critical = node['id']\n    assert critical.present?\n    post '/request?cmd=create', params: '<request>\n                                   <action type=\"submit\">\n                                     <source project=\"BaseDistro2.0\" package=\"pack2\"/>\n                                     <target project=\"home:Iggy\" package=\"important\"/>\n                                   </action>\n                                   <priority>important</priority>\n                                   <description></description>\n                                 </request>'\n    assert_response :success\n    node = Xmlhash.parse(@response.body)\n    important = node['id']\n    assert important.present?\n    Timecop.freeze(1)\n\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal node['request'][0]['priority'], 'critical'\n    assert_equal node['request'][1]['priority'], 'important'\n    # three \"moderate\" requests, not showing a priority field\n    assert_equal node['request'][5]['priority'], 'low'\n\n    # now re-priorize via incident attribute\n    login_king\n    post '/source/BaseDistro2.0/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>100</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal 'important', node['request'][0]['priority']\n\n    # make the low and important request equal high prio\n    post '/source/BaseDistro/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>100</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    # they are equal, so important wins\n    assert_equal 'important', node['request'][0]['priority']\n    assert_equal 'low', node['request'][1]['priority']\n\n    # make the low most important\n    post '/source/BaseDistro/_attribute', params: \"<attributes><attribute namespace='OBS' name='IncidentPriority' >\n              <value>101</value>\n            </attribute></attributes>\"\n    assert_response :success\n    get '/search/request', params: { match: \"target/@project = 'home:Iggy'\" }\n    assert_response :success\n    assert_xml_tag(tag: 'collection', child: { tag: 'request' },\n                   attributes: { matches: 6 })\n    node = Xmlhash.parse(@response.body)\n    assert_equal 'low', node['request'][0]['priority']\n    assert_equal 'important', node['request'][1]['priority']\n  end\nend\n# rubocop:enable Metrics/LineLength\n"], "filenames": ["src/api/app/models/bs_request_action_submit.rb", "src/api/test/functional/request_controller_test.rb"], "buggy_code_start_loc": [100, 2040], "buggy_code_end_loc": [100, 2157], "fixing_code_start_loc": [101, 2041], "fixing_code_end_loc": [121, 2187], "type": "CWE-862", "message": "Lack of permission checks in the InitializeDevelPackage function in openSUSE Open Build Service before 2.9.3 allowed authenticated users to modify packages where they do not have write permissions.", "other": {"cve": {"id": "CVE-2018-7689", "sourceIdentifier": "meissner@suse.de", "published": "2018-06-07T13:29:00.337", "lastModified": "2019-10-09T23:42:28.160", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Lack of permission checks in the InitializeDevelPackage function in openSUSE Open Build Service before 2.9.3 allowed authenticated users to modify packages where they do not have write permissions."}, {"lang": "es", "value": "La falta de una comprobaci\u00f3n de permisos en la funci\u00f3n InitializeDevelPackage en openSUSE Open Build Service en versiones anteriores a la 2.9.3 permit\u00eda que los usuarios autenticados modifiquen los paquetes donde no tienen permisos de escritura."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "meissner@suse.de", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}, {"source": "meissner@suse.de", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opensuse:open_build_service:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.9.3", "matchCriteriaId": "16419162-F255-49B2-9A11-2B8A51508438"}]}]}], "references": [{"url": "https://bugzilla.suse.com/show_bug.cgi?id=CVE-2018-7689", "source": "meissner@suse.de", "tags": ["Exploit", "Issue Tracking"]}, {"url": "https://github.com/openSUSE/open-build-service/commit/990ef7cccef6f38fc1d1a1bb22a08e174dcba43b", "source": "meissner@suse.de", "tags": ["Patch"]}, {"url": "https://lists.opensuse.org/opensuse-buildservice/2018-06/msg00014.html", "source": "meissner@suse.de", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/openSUSE/open-build-service/commit/990ef7cccef6f38fc1d1a1bb22a08e174dcba43b"}}