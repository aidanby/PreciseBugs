{"buggy_code": ["/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\ndefine( [\n\t\"./var/arr\",\n\t\"./var/document\",\n\t\"./var/getProto\",\n\t\"./var/slice\",\n\t\"./var/concat\",\n\t\"./var/push\",\n\t\"./var/indexOf\",\n\t\"./var/class2type\",\n\t\"./var/toString\",\n\t\"./var/hasOwn\",\n\t\"./var/fnToString\",\n\t\"./var/ObjectFunctionString\",\n\t\"./var/support\",\n\t\"./var/isFunction\",\n\t\"./var/isWindow\",\n\t\"./core/DOMEval\",\n\t\"./core/toType\"\n], function( arr, document, getProto, slice, concat, push, indexOf,\n\tclass2type, toString, hasOwn, fnToString, ObjectFunctionString,\n\tsupport, isFunction, isWindow, DOMEval, toType ) {\n\n\"use strict\";\n\nvar\n\tversion = \"@VERSION\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nreturn jQuery;\n} );\n", "QUnit.module( \"core\", {\n\tbeforeEach: function() {\n\t\tthis.sandbox = sinon.sandbox.create();\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit.test( \"Basic requirements\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.ok( Array.prototype.push, \"Array.push()\" );\n\tassert.ok( Function.prototype.apply, \"Function.apply()\" );\n\tassert.ok( document.getElementById, \"getElementById\" );\n\tassert.ok( document.getElementsByTagName, \"getElementsByTagName\" );\n\tassert.ok( RegExp, \"RegExp\" );\n\tassert.ok( jQuery, \"jQuery\" );\n\tassert.ok( $, \"$\" );\n} );\n\nQUnit.test( \"jQuery()\", function( assert ) {\n\n\tvar elem, i,\n\t\tobj = jQuery( \"div\" ),\n\t\tcode = jQuery( \"<code/>\" ),\n\t\timg = jQuery( \"<img/>\" ),\n\t\tdiv = jQuery( \"<div/><hr/><code/><b/>\" ),\n\t\texec = false,\n\t\texpected = 23,\n\t\tattrObj = {\n\t\t\t\"text\": \"test\",\n\t\t\t\"class\": \"test2\",\n\t\t\t\"id\": \"test3\"\n\t\t};\n\n\t// The $(html, props) signature can stealth-call any $.fn method, check for a\n\t// few here but beware of modular builds where these methods may be excluded.\n\tif ( jQuery.fn.click ) {\n\t\texpected++;\n\t\tattrObj[ \"click\" ] = function() { assert.ok( exec, \"Click executed.\" ); };\n\t}\n\tif ( jQuery.fn.width ) {\n\t\texpected++;\n\t\tattrObj[ \"width\" ] = 10;\n\t}\n\tif ( jQuery.fn.offset ) {\n\t\texpected++;\n\t\tattrObj[ \"offset\" ] = { \"top\": 1, \"left\": 1 };\n\t}\n\tif ( jQuery.fn.css ) {\n\t\texpected += 2;\n\t\tattrObj[ \"css\" ] = { \"paddingLeft\": 1, \"paddingRight\": 1 };\n\t}\n\tif ( jQuery.fn.attr ) {\n\t\texpected++;\n\t\tattrObj.attr = { \"desired\": \"very\" };\n\t}\n\n\tassert.expect( expected );\n\n\t// Basic constructor's behavior\n\tassert.equal( jQuery().length, 0, \"jQuery() === jQuery([])\" );\n\tassert.equal( jQuery( undefined ).length, 0, \"jQuery(undefined) === jQuery([])\" );\n\tassert.equal( jQuery( null ).length, 0, \"jQuery(null) === jQuery([])\" );\n\tassert.equal( jQuery( \"\" ).length, 0, \"jQuery('') === jQuery([])\" );\n\tassert.deepEqual( jQuery( obj ).get(), obj.get(), \"jQuery(jQueryObj) == jQueryObj\" );\n\n\t// Invalid #id goes to Sizzle which will throw an error (gh-1682)\n\ttry {\n\t\tjQuery( \"#\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Threw an error on #id with no id\" );\n\t}\n\n\t// can actually yield more than one, when iframes are included, the window is an array as well\n\tassert.equal( jQuery( window ).length, 1, \"Correct number of elements generated for jQuery(window)\" );\n\n/*\n\t// disabled since this test was doing nothing. i tried to fix it but i'm not sure\n\t// what the expected behavior should even be. FF returns \"\\n\" for the text node\n\t// make sure this is handled\n\tvar crlfContainer = jQuery('<p>\\r\\n</p>');\n\tvar x = crlfContainer.contents().get(0).nodeValue;\n\tassert.equal( x, what???, \"Check for \\\\r and \\\\n in jQuery()\" );\n*/\n\n\t/* // Disabled until we add this functionality in\n\tvar pass = true;\n\ttry {\n\t\tjQuery(\"<div>Testing</div>\").appendTo(document.getElementById(\"iframe\").contentDocument.body);\n\t} catch(e){\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968\" );*/\n\n\tassert.equal( code.length, 1, \"Correct number of elements generated for code\" );\n\tassert.equal( code.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( img.length, 1, \"Correct number of elements generated for img\" );\n\tassert.equal( img.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( div.length, 4, \"Correct number of elements generated for div hr code b\" );\n\tassert.equal( div.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( jQuery( [ 1, 2, 3 ] ).get( 1 ), 2, \"Test passing an array to the factory\" );\n\n\tassert.equal( jQuery( document.body ).get( 0 ), jQuery( \"body\" ).get( 0 ), \"Test passing an html node to the factory\" );\n\n\telem = jQuery( \"  <em>hello</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading space\" );\n\n\telem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );\n\n\telem = jQuery( \"<div/>\", attrObj );\n\n\tif ( jQuery.fn.width ) {\n\t\tassert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );\n\t}\n\n\tif ( jQuery.fn.offset ) {\n\t\tassert.equal( elem[ 0 ].style.top, \"1px\", \"jQuery() quick setter offset\" );\n\t}\n\n\tif ( jQuery.fn.css ) {\n\t\tassert.equal( elem[ 0 ].style.paddingLeft, \"1px\", \"jQuery quick setter css\" );\n\t\tassert.equal( elem[ 0 ].style.paddingRight, \"1px\", \"jQuery quick setter css\" );\n\t}\n\n\tif ( jQuery.fn.attr ) {\n\t\tassert.equal( elem[ 0 ].getAttribute( \"desired\" ), \"very\", \"jQuery quick setter attr\" );\n\t}\n\n\tassert.equal( elem[ 0 ].childNodes.length, 1, \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].firstChild.nodeValue, \"test\", \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].className, \"test2\", \"jQuery() quick setter class\" );\n\tassert.equal( elem[ 0 ].id, \"test3\", \"jQuery() quick setter id\" );\n\n\texec = true;\n\telem.trigger( \"click\" );\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tfor ( i = 0; i < 3; ++i ) {\n\t\telem = jQuery( \"<input type='text' value='TEST' />\" );\n\t}\n\tassert.equal( elem[ 0 ].defaultValue, \"TEST\", \"Ensure cached nodes are cloned properly (Bug #6655)\" );\n\n\telem = jQuery( \"<input type='hidden'>\", {} );\n\tassert.strictEqual( elem[ 0 ].ownerDocument, document,\n\t\t\"Empty attributes object is not interpreted as a document (trac-8950)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"jQuery(selector, context)\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.deepEqual( jQuery( \"div p\", \"#qunit-fixture\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with string as context\" );\n\tassert.deepEqual( jQuery( \"div p\", q( \"qunit-fixture\" )[ 0 ] ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with element as context\" );\n\tassert.deepEqual( jQuery( \"div p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with jQuery object as context\" );\n} );\n\nQUnit.test( \"globalEval\", function( assert ) {\n\tassert.expect( 3 );\n\tGlobals.register( \"globalEvalTest\" );\n\n\tjQuery.globalEval( \"globalEvalTest = 1;\" );\n\tassert.equal( window.globalEvalTest, 1, \"Test variable assignments are global\" );\n\n\tjQuery.globalEval( \"var globalEvalTest = 2;\" );\n\tassert.equal( window.globalEvalTest, 2, \"Test variable declarations are global\" );\n\n\tjQuery.globalEval( \"this.globalEvalTest = 3;\" );\n\tassert.equal( window.globalEvalTest, 3, \"Test context (this) is the window object\" );\n} );\n\nQUnit.test( \"globalEval with 'use strict'\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"strictEvalTest\" );\n\n\tjQuery.globalEval( \"'use strict'; var strictEvalTest = 1;\" );\n\tassert.equal( window.strictEvalTest, 1, \"Test variable declarations are global (strict mode)\" );\n} );\n\nQUnit.test( \"globalEval execution after script injection (#7862)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar now,\n\t\tscript = document.createElement( \"script\" );\n\n\tscript.src = baseURL + \"mock.php?action=wait&wait=2&script=1\";\n\n\tnow = Date.now();\n\tdocument.body.appendChild( script );\n\n\tjQuery.globalEval( \"var strictEvalTest = \" + Date.now() + \";\" );\n\tassert.ok( window.strictEvalTest - now < 500, \"Code executed synchronously\" );\n} );\n\nQUnit.test( \"noConflict\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $$ = jQuery;\n\n\tassert.strictEqual( jQuery, jQuery.noConflict(), \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], $$, \"Make sure jQuery wasn't touched.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\n\tjQuery = $ = $$;\n\n\tassert.strictEqual( jQuery.noConflict( true ), $$, \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], originaljQuery, \"Make sure jQuery was reverted.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\tassert.ok( $$().pushStack( [] ), \"Make sure that jQuery still works.\" );\n\n\twindow[ \"jQuery\" ] = jQuery = $$;\n} );\n\nQUnit.test( \"trim\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar nbsp = String.fromCharCode( 160 );\n\n\tassert.equal( jQuery.trim( \"hello  \" ), \"hello\", \"trailing space\" );\n\tassert.equal( jQuery.trim( \"  hello\" ), \"hello\", \"leading space\" );\n\tassert.equal( jQuery.trim( \"  hello   \" ), \"hello\", \"space on both sides\" );\n\tassert.equal( jQuery.trim( \"  \" + nbsp + \"hello  \" + nbsp + \" \" ), \"hello\", \"&nbsp;\" );\n\n\tassert.equal( jQuery.trim(), \"\", \"Nothing in.\" );\n\tassert.equal( jQuery.trim( undefined ), \"\", \"Undefined\" );\n\tassert.equal( jQuery.trim( null ), \"\", \"Null\" );\n\tassert.equal( jQuery.trim( 5 ), \"5\", \"Number\" );\n\tassert.equal( jQuery.trim( false ), \"false\", \"Boolean\" );\n\n\tassert.equal( jQuery.trim( \" \" ), \"\", \"space should be trimmed\" );\n\tassert.equal( jQuery.trim( \"ipad\\xA0\" ), \"ipad\", \"nbsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF\" ), \"\", \"zwsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF \\xA0! | \\uFEFF\" ), \"! |\", \"leading/trailing should be trimmed\" );\n} );\n\nQUnit.test( \"isPlainObject\", function( assert ) {\n\tvar done = assert.async();\n\n\tassert.expect( 23 );\n\n\tvar pass, iframe, doc, parentObj, childObj, deep,\n\t\tfn = function() {};\n\n\t// The use case that we want to match\n\tassert.ok( jQuery.isPlainObject( {} ), \"{}\" );\n\tassert.ok( jQuery.isPlainObject( new window.Object() ), \"new Object\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: fn } ),\n\t\t\"plain object with constructor property\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: \"foo\" } ),\n\t\t\"plain object with primitive constructor property\" );\n\n\tparentObj = {};\n\tchildObj = Object.create( parentObj );\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({})\" );\n\tparentObj.foo = \"bar\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({...})\" );\n\tchildObj.bar = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"extend(Object.create({...}), ...)\" );\n\n\t// Not objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isPlainObject( 0 ) && !jQuery.isPlainObject( 1 ), \"number\" );\n\tassert.ok( !jQuery.isPlainObject( true ) && !jQuery.isPlainObject( false ), \"boolean\" );\n\tassert.ok( !jQuery.isPlainObject( null ), \"null\" );\n\tassert.ok( !jQuery.isPlainObject( undefined ), \"undefined\" );\n\n\t// Arrays shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( [] ), \"array\" );\n\n\t// Instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new Date() ), \"new Date\" );\n\n\t// Functions shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( fn ), \"fn\" );\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn (no methods)\" );\n\n\t// Makes the function a little more realistic\n\t// (and harder to detect, incidentally)\n\tfn.prototype[ \"someMethod\" ] = function() {};\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn\" );\n\n\t// Instantiated objects with primitive constructors shouldn't be matched\n\tfn.prototype.constructor = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn with primitive constructor\" );\n\n\t// Deep object\n\tdeep = { \"foo\": { \"baz\": true }, \"foo2\": document };\n\tassert.ok( jQuery.isPlainObject( deep ), \"Object with objects is still plain\" );\n\n\t// DOM Element\n\tassert.ok( !jQuery.isPlainObject( document.createElement( \"div\" ) ), \"DOM Element\" );\n\n\t// Window\n\tassert.ok( !jQuery.isPlainObject( window ), \"window\" );\n\n\tpass = false;\n\ttry {\n\t\tjQuery.isPlainObject( window.location );\n\t\tpass = true;\n\t} catch ( e ) {}\n\tassert.ok( pass, \"Does not throw exceptions on host objects\" );\n\n\t// Objects from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( otherObject, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tiframe.parentNode.removeChild( iframe );\n\t\tassert.ok( jQuery.isPlainObject( new otherObject() ), \"new otherObject\" + ( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\ttry {\n\t\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\t\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\t\tdoc.open();\n\t\tdoc.write( \"<body onload='window.parent.iframeDone(Object);'>\" );\n\t\tdoc.close();\n\t} catch ( e ) {\n\t\twindow.iframeDone( Object, \"iframes not supported\" );\n\t}\n} );\n\nQUnit[ typeof Symbol === \"function\" ? \"test\" : \"skip\" ]( \"isPlainObject(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isPlainObject( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isPlainObject( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit.test( \"isPlainObject(localStorage)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.isPlainObject( localStorage ), false );\n} );\n\nQUnit[ \"assign\" in Object ? \"test\" : \"skip\" ]( \"isPlainObject(Object.assign(...))\",\n\tfunction( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar parentObj = { foo: \"bar\" };\n\t\tvar childObj = Object.assign( Object.create( parentObj ), { bar: \"foo\" } );\n\n\t\tassert.ok( !jQuery.isPlainObject( childObj ), \"isPlainObject(Object.assign(...))\" );\n\t}\n);\n\nQUnit.test( \"isXMLDoc - HTML\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.ok( !jQuery.isXMLDoc( document ), \"HTML document\" );\n\tassert.ok( !jQuery.isXMLDoc( document.documentElement ), \"HTML documentElement\" );\n\tassert.ok( !jQuery.isXMLDoc( document.body ), \"HTML Body Element\" );\n\n\tvar body,\n\t\tiframe = document.createElement( \"iframe\" );\n\tdocument.body.appendChild( iframe );\n\n\ttry {\n\t\tbody = jQuery( iframe ).contents()[ 0 ];\n\n\t\ttry {\n\t\t\tassert.ok( !jQuery.isXMLDoc( body ), \"Iframe body element\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"Iframe body element exception\" );\n\t\t}\n\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Iframe body element - iframe not working correctly\" );\n\t}\n\n\tdocument.body.removeChild( iframe );\n} );\n\nQUnit.test( \"XSS via location.hash\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\n\tjQuery[ \"_check9521\" ] = function( x ) {\n\t\tassert.ok( x, \"script called from #id-like selector with inline handler\" );\n\t\tjQuery( \"#check9521\" ).remove();\n\t\tdelete jQuery[ \"_check9521\" ];\n\t\tdone();\n\t};\n\ttry {\n\n\t\t// This throws an error because it's processed like an id\n\t\tjQuery( \"#<img id='check9521' src='no-such-.gif' onerror='jQuery._check9521(false)'>\" ).appendTo( \"#qunit-fixture\" );\n\t} catch ( err ) {\n\t\tjQuery[ \"_check9521\" ]( true );\n\t}\n} );\n\nQUnit.test( \"isXMLDoc - XML\", function( assert ) {\n\tassert.expect( 3 );\n\tvar xml = createDashboardXML();\n\tassert.ok( jQuery.isXMLDoc( xml ), \"XML document\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement ), \"XML documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"tab\", xml )[ 0 ] ), \"XML Tab Element\" );\n} );\n\nQUnit.test( \"jQuery('html')\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar s, div, j;\n\n\tjQuery[ \"foo\" ] = false;\n\ts = jQuery( \"<script>jQuery.foo='test';</script>\" )[ 0 ];\n\tassert.ok( s, \"Creating a script\" );\n\tassert.ok( !jQuery[ \"foo\" ], \"Make sure the script wasn't executed prematurely\" );\n\tjQuery( \"body\" ).append( \"<script>jQuery.foo='test';</script>\" );\n\tassert.ok( jQuery[ \"foo\" ], \"Executing a script's contents in the right context\" );\n\n\t// Test multi-line HTML\n\tdiv = jQuery( \"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\" )[ 0 ];\n\tassert.equal( div.nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\" );\n\tassert.equal( div.firstChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.lastChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.childNodes[ 1 ].nodeType, 1, \"Paragraph.\" );\n\tassert.equal( div.childNodes[ 1 ].firstChild.nodeType, 3, \"Paragraph text.\" );\n\n\tassert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );\n\n\tassert.ok( !jQuery( \"<script/>\" )[ 0 ].parentNode, \"Create a script\" );\n\n\tassert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );\n\n\tj = jQuery( \"<span>hi</span> there <!-- mon ami -->\" );\n\tassert.ok( j.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\" );\n\n\tassert.ok( !jQuery( \"<option>test</option>\" )[ 0 ].selected, \"Make sure that options are auto-selected #2050\" );\n\n\tassert.ok( jQuery( \"<div></div>\" )[ 0 ], \"Create a div with closing tag.\" );\n\tassert.ok( jQuery( \"<table></table>\" )[ 0 ], \"Create a table with closing tag.\" );\n\n\tassert.equal( jQuery( \"element[attribute='<div></div>']\" ).length, 0,\n\t\t\"When html is within brackets, do not recognize as html.\" );\n\n\t//equal( jQuery( \"element[attribute=<div></div>]\" ).length, 0,\n\t//\t\"When html is within brackets, do not recognize as html.\" );\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( jQuery( \"element:not(<div></div>)\" ).length, 0,\n\t\t\t\"When html is within parens, do not recognize as html.\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Complex :not not supported in selector-native\" );\n\t}\n\tassert.equal( jQuery( \"\\\\<div\\\\>\" ).length, 0, \"Ignore escaped html characters\" );\n} );\n\nQUnit.test( \"jQuery(element with non-alphanumeric name)\", function( assert ) {\n\tassert.expect( 36 );\n\n\tjQuery.each( [ \"-\", \":\" ], function( i, symbol ) {\n\t\tjQuery.each( [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"caption\", \"tr\", \"th\", \"td\" ],\n\t\t\tfunction( j, tag ) {\n\t\t\t\tvar tagName = tag + symbol + \"test\";\n\t\t\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\t\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\t\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\t\t\ttagName + \" element has expected node name\" );\n\t\t\t}\n\t\t);\n\n\t\tvar tagName = [ \"tr\", \"multiple\", \"symbol\" ].join( symbol );\n\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\ttagName + \" element has expected node name\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery('massive html #7990')\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i,\n\t\tli = \"<li>very very very very large html string</li>\",\n\t\thtml = [ \"<ul>\" ];\n\n\tfor ( i = 0; i < 30000; i += 1 ) {\n\t\thtml[ html.length ] = li;\n\t}\n\thtml[ html.length ] = \"</ul>\";\n\thtml = jQuery( html.join( \"\" ) )[ 0 ];\n\tassert.equal( html.nodeName.toLowerCase(), \"ul\" );\n\tassert.equal( html.firstChild.nodeName.toLowerCase(), \"li\" );\n\tassert.equal( html.childNodes.length, 30000 );\n} );\n\nQUnit.test( \"jQuery('html', context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div/>\" )[ 0 ],\n\t\t$span = jQuery( \"<span/>\", $div );\n\tassert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );\n} );\n\nQUnit.test( \"jQuery(selector, xml).text(str) - loaded via xml document\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\n\t// tests for #1419 where ie was a problem\n\t\ttab = jQuery( \"tab\", xml ).eq( 0 );\n\tassert.equal( tab.text(), \"blabla\", \"verify initial text correct\" );\n\ttab.text( \"newtext\" );\n\tassert.equal( tab.text(), \"newtext\", \"verify new text correct\" );\n} );\n\nQUnit.test( \"end()\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).parent().end().text(), \"check for end\" );\n\tassert.ok( jQuery( \"#yahoo\" ).end(), \"check for end with nothing to end\" );\n\n\tvar x = jQuery( \"#yahoo\" );\n\tx.parent();\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).text(), \"check for non-destructive behavior\" );\n} );\n\nQUnit.test( \"length\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).length, 6, \"Get Number of Elements Found\" );\n} );\n\nQUnit.test( \"get()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Get All Elements\" );\n} );\n\nQUnit.test( \"toArray()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).toArray(),\n\t\tq( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ),\n\t\t\"Convert jQuery object to an Array\" );\n} );\n\nQUnit.test( \"inArray()\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar selections = {\n\t\tp:   q( \"firstp\", \"sap\", \"ap\", \"first\" ),\n\t\tem:  q( \"siblingnext\", \"siblingfirst\" ),\n\t\tdiv: q( \"qunit-testrunner-toolbar\", \"nothiddendiv\", \"nothiddendivchild\", \"foo\" ),\n\t\ta:   q( \"mark\", \"groups\", \"google\", \"simon1\" ),\n\t\tempty: []\n\t},\n\ttests = {\n\t\tp:    { elem: jQuery( \"#ap\" )[ 0 ],           index: 2 },\n\t\tem:   { elem: jQuery( \"#siblingfirst\" )[ 0 ], index: 1 },\n\t\tdiv:  { elem: jQuery( \"#nothiddendiv\" )[ 0 ], index: 1 },\n\t\ta:    { elem: jQuery( \"#simon1\" )[ 0 ],       index: 3 }\n\t},\n\tfalseTests = {\n\t\tp:  jQuery( \"#liveSpan1\" )[ 0 ],\n\t\tem: jQuery( \"#nothiddendiv\" )[ 0 ],\n\t\tempty: \"\"\n\t};\n\n\tjQuery.each( tests, function( key, obj ) {\n\t\tassert.equal( jQuery.inArray( obj.elem, selections[ key ] ), obj.index, \"elem is in the array of selections of its tag\" );\n\n\t\t// Third argument (fromIndex)\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 5 ), false, \"elem is NOT in the array of selections given a starting index greater than its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 1 ), true, \"elem is in the array of selections given a starting index less than or equal to its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], -3 ), true, \"elem is in the array of selections given a negative index\" );\n\t} );\n\n\tjQuery.each( falseTests, function( key, elem ) {\n\t\tassert.equal( !!~jQuery.inArray( elem, selections[ key ] ), false, \"elem is NOT in the array of selections\" );\n\t} );\n\n} );\n\nQUnit.test( \"get(Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).get( 0 ), document.getElementById( \"firstp\" ), \"Get A Single Element\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( 1 ), undefined, \"Try get with index larger elements count\" );\n} );\n\nQUnit.test( \"get(-Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"p\" ).get( -1 ), document.getElementById( \"first\" ), \"Get a single element with negative index\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( -2 ), undefined, \"Try get with index negative index larger then elements count\" );\n} );\n\nQUnit.test( \"each(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar div, pass, i;\n\n\tdiv = jQuery( \"div\" );\n\tdiv.each( function() {this.foo = \"zoo\";} );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).foo !== \"zoo\" ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Execute a function, Relative\" );\n} );\n\nQUnit.test( \"slice()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $links = jQuery( \"#ap a\" );\n\n\tassert.deepEqual( $links.slice( 1, 2 ).get(), q( \"groups\" ), \"slice(1,2)\" );\n\tassert.deepEqual( $links.slice( 1 ).get(), q( \"groups\", \"anchor1\", \"mark\" ), \"slice(1)\" );\n\tassert.deepEqual( $links.slice( 0, 3 ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"slice(0,3)\" );\n\tassert.deepEqual( $links.slice( -1 ).get(), q( \"mark\" ), \"slice(-1)\" );\n\n\tassert.deepEqual( $links.eq( 1 ).get(), q( \"groups\" ), \"eq(1)\" );\n\tassert.deepEqual( $links.eq( \"2\" ).get(), q( \"anchor1\" ), \"eq('2')\" );\n\tassert.deepEqual( $links.eq( -1 ).get(), q( \"mark\" ), \"eq(-1)\" );\n} );\n\nQUnit.test( \"first()/last()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.first().get(), q( \"google\" ), \"first()\" );\n\tassert.deepEqual( $links.last().get(), q( \"mark\" ), \"last()\" );\n\n\tassert.deepEqual( $none.first().get(), [], \"first() none\" );\n\tassert.deepEqual( $none.last().get(), [], \"last() none\" );\n} );\n\nQUnit.test( \"map()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap\" ).map( function() {\n\t\t\treturn jQuery( this ).find( \"a\" ).get();\n\t\t} ).get(),\n\t\tq( \"google\", \"groups\", \"anchor1\", \"mark\" ),\n\t\t\"Array Map\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap > a\" ).map( function() {\n\t\t\treturn this.parentNode;\n\t\t} ).get(),\n\t\tq( \"ap\", \"ap\", \"ap\" ),\n\t\t\"Single Map\"\n\t);\n} );\n\nQUnit.test( \"jQuery.map\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar i, label, result, callback;\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"012\", \"Map the keys from an array\" );\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"345\", \"Map the values from an array\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Map the keys from an object\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"12\", \"Map the values from an object\" );\n\n\tresult = jQuery.map( [ \"a\", undefined, null, \"b\" ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Array iteration does not include undefined/null results\" );\n\n\tresult = jQuery.map( { a: \"a\", b: undefined, c: null, d: \"b\" }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Object iteration does not include undefined/null results\" );\n\n\tresult = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tresult[ i ].foo = \"bar\";\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( { length: result[ i ] }, callback );\n\t}\n\n\tresult = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( v, k ) {\n\t\tif ( result[ label ] ) {\n\t\t\tdelete result[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t}\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = false;\n\tjQuery.map( { length: 0 }, function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"length: 0 plain object treated like array\" );\n\n\tresult = false;\n\tjQuery.map( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"empty NodeList treated like array\" );\n\n\tresult = jQuery.map( Array( 4 ), function( v, k ) {\n\t\treturn k % 2 ? k : [ k, k, k ];\n\t} );\n\tassert.equal( result.join( \"\" ), \"00012223\", \"Array results flattened (#2616)\" );\n} );\n\nQUnit.test( \"jQuery.merge()\", function( assert ) {\n\tassert.expect( 10 );\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [] ),\n\t\t[],\n\t\t\"Empty arrays\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1 ], [ 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"Basic (single-element)\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [ 3, 4 ] ),\n\t\t[ 1, 2, 3, 4 ],\n\t\t\"Basic (multiple-element)\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [] ),\n\t\t[ 1, 2 ],\n\t\t\"Second empty\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ 1, 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"First empty\"\n\t);\n\n\t// Fixed at [5998], #3641\n\tassert.deepEqual(\n\t\tjQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),\n\t\t[ -2, -1, 0, 1, 2 ],\n\t\t\"Second array including a zero (falsy)\"\n\t);\n\n\t// After fixing #5527\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ null, undefined ] ),\n\t\t[ null, undefined ],\n\t\t\"Second array including null and undefined values\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( { length: 0 }, [ 1, 2 ] ),\n\t\t{ length: 2, 0: 1, 1: 2 },\n\t\t\"First array like\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], { length: 1, 0: 3 } ),\n\t\t[ 1, 2, 3 ],\n\t\t\"Second array like\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], document.getElementById( \"lengthtest\" ).getElementsByTagName( \"input\" ) ),\n\t\t[ document.getElementById( \"length\" ), document.getElementById( \"idTest\" ) ],\n\t\t\"Second NodeList\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep()\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( [], searchCriterion ), [], \"Empty array\" );\n\tassert.deepEqual( jQuery.grep( new Array( 4 ), searchCriterion ), [], \"Sparse array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep(Array-like)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( { length: 0 }, searchCriterion ), [], \"Empty array-like\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present and array-like object used\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent and Array-like object used\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present, array-like object used, and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent, array-like object used, and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present, Array-like object used, but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent, Array-like object used, and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object)\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar empty, optionsWithLength, optionsWithDate, myKlass,\n\t\tcustomObject, optionsWithCustomObject, MyNumber, ret,\n\t\tnullUndef, target, recursive, obj,\n\t\tdefaults, defaultsCopy, options1, options1Copy, options2, options2Copy, merged2,\n\t\tsettings = { \"xnumber1\": 5, \"xnumber2\": 7, \"xstring1\": \"peter\", \"xstring2\": \"pan\" },\n\t\toptions = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\toptionsCopy = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tmerged = { \"xnumber1\": 5, \"xnumber2\": 1, \"xstring1\": \"peter\", \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tdeep1 = { \"foo\": { \"bar\": true } },\n\t\tdeep2 = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeep2copy = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeepmerged = { \"foo\": { \"bar\": true, \"baz\": true }, \"foo2\": document },\n\t\tarr = [ 1, 2, 3 ],\n\t\tnestedarray = { \"arr\": arr };\n\n\tjQuery.extend( settings, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( settings, null, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( true, deep1, deep2 );\n\tassert.deepEqual( deep1[ \"foo\" ], deepmerged[ \"foo\" ], \"Check if foo: settings must be extended\" );\n\tassert.deepEqual( deep2[ \"foo\" ], deep2copy[ \"foo\" ], \"Check if not deep2: options must not be modified\" );\n\tassert.equal( deep1[ \"foo2\" ], document, \"Make sure that a deep clone was not attempted on the document\" );\n\n\tassert.ok( jQuery.extend( true, {}, nestedarray )[ \"arr\" ] !== arr, \"Deep extend of object must clone child array\" );\n\n\t// #5991\n\tassert.ok( Array.isArray( jQuery.extend( true, { \"arr\": {} }, nestedarray )[ \"arr\" ] ), \"Cloned array have to be an Array\" );\n\tassert.ok( jQuery.isPlainObject( jQuery.extend( true, { \"arr\": arr }, { \"arr\": {} } )[ \"arr\" ] ), \"Cloned object have to be an plain object\" );\n\n\tempty = {};\n\toptionsWithLength = { \"foo\": { \"length\": -1 } };\n\tjQuery.extend( true, empty, optionsWithLength );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithLength[ \"foo\" ], \"The length property must copy correctly\" );\n\n\tempty = {};\n\toptionsWithDate = { \"foo\": { \"date\": new Date() } };\n\tjQuery.extend( true, empty, optionsWithDate );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithDate[ \"foo\" ], \"Dates copy correctly\" );\n\n\t/** @constructor */\n\tmyKlass = function() {};\n\tcustomObject = new myKlass();\n\toptionsWithCustomObject = { \"foo\": { \"date\": customObject } };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly (no methods)\" );\n\n\t// Makes the class a little more realistic\n\tmyKlass.prototype = { \"someMethod\": function() {} };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly\" );\n\n\tMyNumber = Number;\n\n\tret = jQuery.extend( true, { \"foo\": 4 }, { \"foo\": new MyNumber( 5 ) } );\n\tassert.ok( parseInt( ret.foo, 10 ) === 5, \"Wrapped numbers copy correctly\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": null } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === null, \"Check to make sure null values are copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": undefined } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === options[ \"xnumber2\" ], \"Check to make sure undefined values are not copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber0\": null } );\n\tassert.ok( nullUndef[ \"xnumber0\" ] === null, \"Check to make sure null values are inserted\" );\n\n\ttarget = {};\n\trecursive = { foo:target, bar:5 };\n\tjQuery.extend( true, target, recursive );\n\tassert.deepEqual( target, { bar:5 }, \"Check to make sure a recursive obj doesn't go never-ending loop by not copying it over\" );\n\n\tret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907\n\tassert.equal( ret.foo.length, 1, \"Check to make sure a value with coercion 'false' copies over when necessary to fix #1907\" );\n\n\tret = jQuery.extend( true, { foo: \"1,2,3\" }, { foo: [ 1, 2, 3 ] } );\n\tassert.ok( typeof ret.foo !== \"string\", \"Check to make sure values equal with coercion (but not actually equal) overwrite correctly\" );\n\n\tret = jQuery.extend( true, { foo:\"bar\" }, { foo:null } );\n\tassert.ok( typeof ret.foo !== \"undefined\", \"Make sure a null value doesn't crash with deep extend, for #1908\" );\n\n\tobj = { foo:null };\n\tjQuery.extend( true, obj, { foo:\"notnull\" } );\n\tassert.equal( obj.foo, \"notnull\", \"Make sure a null value can be overwritten\" );\n\n\tfunction func() {}\n\tjQuery.extend( func, { key: \"value\" } );\n\tassert.equal( func.key, \"value\", \"Verify a function can be extended\" );\n\n\tdefaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\toptions1 = { xnumber2: 1, xstring2: \"x\" };\n\toptions1Copy = { xnumber2: 1, xstring2: \"x\" };\n\toptions2 = { xstring2: \"xx\", xxx: \"newstringx\" };\n\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" };\n\tmerged2 = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\n\n\tsettings = jQuery.extend( {}, defaults, options1, options2 );\n\tassert.deepEqual( settings, merged2, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( defaults, defaultsCopy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options1, options1Copy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar definedObj = Object.defineProperties( {}, {\n        \"enumerableProp\": {\n          get: function() {\n            return true;\n          },\n          enumerable: true\n        },\n        \"nonenumerableProp\": {\n          get: function() {\n            return true;\n          }\n        }\n      } ),\n      accessorObj = {};\n\n\tjQuery.extend( accessorObj, definedObj );\n\tassert.equal( accessorObj.enumerableProp, true, \"Verify that getters are transferred\" );\n\tassert.equal( accessorObj.nonenumerableProp, undefined, \"Verify that non-enumerable getters are ignored\" );\n} );\n\nQUnit.test( \"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar result, initial = {\n\n\t\t// This will make \"copyIsArray\" true\n\t\tarray: [ 1, 2, 3, 4 ],\n\n\t\t// If \"copyIsArray\" doesn't get reset to false, the check\n\t\t// will evaluate true and enter the array copy block\n\t\t// instead of the object copy block. Since the ternary in the\n\t\t// \"copyIsArray\" block will evaluate to false\n\t\t// (check if operating on an array with ), this will be\n\t\t// replaced by an empty array.\n\t\tobject: {}\n\t};\n\n\tresult = jQuery.extend( true, {}, initial );\n\n\tassert.deepEqual( result, initial, \"The [result] and [initial] have equal shape and values\" );\n\tassert.ok( !Array.isArray( result.object ), \"result.object wasn't paved with an empty array\" );\n} );\n\nQUnit.test( \"jQuery.each(Object,Function)\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar i, label, seen, callback;\n\n\tseen = {};\n\tjQuery.each( [ 3, 4, 5 ], function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { \"0\": 3, \"1\": 4, \"2\": 5 }, \"Array iteration\" );\n\n\tseen = {};\n\tjQuery.each( { name: \"name\", lang: \"lang\" }, function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { name: \"name\", lang: \"lang\" }, \"Object iteration\" );\n\n\tseen = [];\n\tjQuery.each( [ 1, 2, 3 ], function( k, v ) {\n\t\tseen.push( v );\n\t\tif ( k === 1 ) {\n\t\t\treturn false;\n\t\t}\n\t} );\n\tassert.deepEqual( seen, [ 1, 2 ], \"Broken array iteration\" );\n\n\tseen = [];\n\tjQuery.each( { \"a\": 1, \"b\": 2, \"c\": 3 }, function( k, v ) {\n\t\tseen.push( v );\n\t\treturn false;\n\t} );\n\tassert.deepEqual( seen, [ 1 ], \"Broken object iteration\" );\n\n\tseen = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tseen[ i ].foo = \"bar\";\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( { length: seen[ i ] }, callback );\n\t}\n\n\tseen = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( k ) {\n\t\tif ( seen[ label ] ) {\n\t\t\tdelete seen[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t\treturn false;\n\t\t}\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = false;\n\tjQuery.each( { length: 0 }, function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"length: 0 plain object treated like array\" );\n\n\tseen = false;\n\tjQuery.each( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"empty NodeList treated like array\" );\n\n\ti = 0;\n\tjQuery.each( document.styleSheets, function() {\n\t\ti++;\n\t} );\n\tassert.equal( i, document.styleSheets.length, \"Iteration over document.styleSheets\" );\n} );\n\nQUnit.test( \"jQuery.each/map(undefined/null,Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery.each( undefined, jQuery.noop );\n\t\tjQuery.each( null, jQuery.noop );\n\t\tjQuery.map( undefined, jQuery.noop );\n\t\tjQuery.map( null, jQuery.noop );\n\t\tassert.ok( true, \"jQuery.each/map( undefined/null, function() {} );\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"each/map must accept null and undefined values\" );\n\t}\n} );\n\nQUnit.test( \"JIT compilation does not interfere with length retrieval (gh-2145)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar i;\n\n\t// Trigger JIT compilation of jQuery.each \u2013 and therefore isArraylike \u2013 in iOS.\n\t// Convince JSC to use one of its optimizing compilers\n\t// by providing code which can be LICM'd into nothing.\n\tfor ( i = 0; i < 1000; i++ ) {\n\t\tjQuery.each( [] );\n\t}\n\n\ti = 0;\n\tjQuery.each( { 1: \"1\", 2: \"2\", 3: \"3\" }, function( index ) {\n\t\tassert.equal( ++i, index, \"Iteration over object with solely \" +\n\t\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n\t} );\n\tassert.equal( i, 3, \"Iteration over object with solely \" +\n\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n} );\n\nQUnit.test( \"jQuery.makeArray\", function( assert ) {\n\tassert.expect( 15 );\n\n\tassert.equal( jQuery.makeArray( jQuery( \"html>*\" ) )[ 0 ].nodeName.toUpperCase(), \"HEAD\", \"Pass makeArray a jQuery object\" );\n\n\tassert.equal( jQuery.makeArray( document.getElementsByName( \"PWD\" ) ).slice( 0, 1 )[ 0 ].name, \"PWD\", \"Pass makeArray a nodelist\" );\n\n\tassert.equal( ( function() { return jQuery.makeArray( arguments ); } )( 1, 2 ).join( \"\" ), \"12\", \"Pass makeArray an arguments array\" );\n\n\tassert.equal( jQuery.makeArray( [ 1, 2, 3 ] ).join( \"\" ), \"123\", \"Pass makeArray a real array\" );\n\n\tassert.equal( jQuery.makeArray().length, 0, \"Pass nothing to makeArray and expect an empty array\" );\n\n\tassert.equal( jQuery.makeArray( 0 )[ 0 ], 0, \"Pass makeArray a number\" );\n\n\tassert.equal( jQuery.makeArray( \"foo\" )[ 0 ], \"foo\", \"Pass makeArray a string\" );\n\n\tassert.equal( jQuery.makeArray( true )[ 0 ].constructor, Boolean, \"Pass makeArray a boolean\" );\n\n\tassert.equal( jQuery.makeArray( document.createElement( \"div\" ) )[ 0 ].nodeName.toUpperCase(), \"DIV\", \"Pass makeArray a single node\" );\n\n\tassert.equal( jQuery.makeArray( { length:2, 0:\"a\", 1:\"b\" } ).join( \"\" ), \"ab\", \"Pass makeArray an array like map (with length)\" );\n\n\tassert.ok( !!jQuery.makeArray( document.documentElement.childNodes ).slice( 0, 1 )[ 0 ].nodeName, \"Pass makeArray a childNodes array\" );\n\n\t// function, is tricky as it has length\n\tassert.equal( jQuery.makeArray( function() { return 1;} )[ 0 ](), 1, \"Pass makeArray a function\" );\n\n\t//window, also has length\n\tassert.equal( jQuery.makeArray( window )[ 0 ], window, \"Pass makeArray the window\" );\n\n\tassert.equal( jQuery.makeArray( /a/ )[ 0 ].constructor, RegExp, \"Pass makeArray a regex\" );\n\n\t// Some nodes inherit traits of nodelists\n\tassert.ok( jQuery.makeArray( document.getElementById( \"form\" ) ).length >= 13,\n\t\t\"Pass makeArray a form (treat as elements)\" );\n} );\n\nQUnit.test( \"jQuery.inArray\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery.inArray( 0, false ), -1, \"Search in 'false' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, null ), -1, \"Search in 'null' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, undefined ), -1, \"Search in 'undefined' as array returns -1 and doesn't throw exception\" );\n} );\n\nQUnit.test( \"jQuery.isEmptyObject\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( true, jQuery.isEmptyObject( {} ), \"isEmptyObject on empty object literal\" );\n\tassert.equal( false, jQuery.isEmptyObject( { a:1 } ), \"isEmptyObject on non-empty object literal\" );\n\n\t// What about this ?\n\t// equal(true, jQuery.isEmptyObject(null), \"isEmptyObject on null\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar html, nodes;\n\n\tassert.deepEqual( jQuery.parseHTML(), [], \"Without arguments\" );\n\tassert.deepEqual( jQuery.parseHTML( undefined ), [], \"Undefined\" );\n\tassert.deepEqual( jQuery.parseHTML( null ), [], \"Null\" );\n\tassert.deepEqual( jQuery.parseHTML( false ), [], \"Boolean false\" );\n\tassert.deepEqual( jQuery.parseHTML( 0 ), [], \"Zero\" );\n\tassert.deepEqual( jQuery.parseHTML( true ), [], \"Boolean true\" );\n\tassert.deepEqual( jQuery.parseHTML( 42 ), [], \"Positive number\" );\n\tassert.deepEqual( jQuery.parseHTML( \"\" ), [], \"Empty string\" );\n\tassert.throws( function() {\n\t\tjQuery.parseHTML( \"<div></div>\", document.getElementById( \"form\" ) );\n\t}, \"Passing an element as the context raises an exception (context should be a document)\" );\n\n\tnodes = jQuery.parseHTML( jQuery( \"body\" )[ 0 ].innerHTML );\n\tassert.ok( nodes.length > 4, \"Parse a large html string\" );\n\tassert.ok( Array.isArray( nodes ), \"parseHTML returns an array rather than a nodelist\" );\n\n\thtml = \"<script>undefined()</script>\";\n\tassert.equal( jQuery.parseHTML( html ).length, 0, \"Ignore scripts by default\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve scripts when requested\" );\n\n\thtml += \"<div></div>\";\n\tassert.equal( jQuery.parseHTML( html )[ 0 ].nodeName.toLowerCase(), \"div\", \"Preserve non-script nodes\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve script position\" );\n\n\tassert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );\n\tassert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );\n\n\tassert.equal( jQuery.parseHTML( \" <div/> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );\n\n\thtml = jQuery.parseHTML( \"<div>test div</div>\" );\n\n\tassert.equal( html[ 0 ].parentNode.nodeType, 11, \"parentNode should be documentFragment\" );\n\tassert.equal( html[ 0 ].innerHTML, \"test div\", \"Content should be preserved\" );\n\n\tassert.equal( jQuery.parseHTML( \"<span><span>\" ).length, 1, \"Incorrect html-strings should not break anything\" );\n\tassert.equal( jQuery.parseHTML( \"<td><td>\" )[ 1 ].parentNode.nodeType, 11,\n\t\t\"parentNode should be documentFragment for wrapMap (variable in manipulation module) elements too\" );\n\tassert.ok( jQuery.parseHTML( \"<#if><tr><p>This is a test.</p></tr><#/if>\" ) || true, \"Garbage input should not cause error\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML(<a href>) - gh-2965\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html = \"<a href='example.html'></a>\",\n\t\thref = jQuery.parseHTML( html )[ 0 ].href;\n\n\tassert.ok( /\\/example\\.html$/.test( href ), \"href is not lost after parsing anchor\" );\n} );\n\nif ( jQuery.support.createHTMLDocument ) {\n\tQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\t\tvar done = assert.async();\n\t\tassert.expect( 1 );\n\n\t\tGlobals.register( \"parseHTMLError\" );\n\n\t\tjQuery.globalEval( \"parseHTMLError = false;\" );\n\t\tjQuery.parseHTML( \"<img src=x onerror='parseHTMLError = true'>\" );\n\n\t\twindow.setTimeout( function() {\n\t\t\tassert.equal( window.parseHTMLError, false, \"onerror eventhandler has not been called.\" );\n\t\t\tdone();\n\t\t}, 2000 );\n\t} );\n}\n\nQUnit.test( \"jQuery.parseXML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml, tmp;\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>A <b>well-formed</b> xml string</p>\" );\n\t\ttmp = xml.getElementsByTagName( \"p\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<p> present in document\" );\n\t\ttmp = tmp.getElementsByTagName( \"b\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<b> present in document\" );\n\t\tassert.strictEqual( tmp.childNodes[ 0 ].nodeValue, \"well-formed\", \"<b> text is as expected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e, undefined, \"unexpected error\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>Not a <<b>well-formed</b> xml string</p>\" );\n\t\tassert.ok( false, \"invalid xml not detected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message, \"Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>\", \"invalid xml detected\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"\" );\n\t\tassert.strictEqual( xml, null, \"empty string => null document\" );\n\t\txml = jQuery.parseXML();\n\t\tassert.strictEqual( xml, null, \"undefined string => null document\" );\n\t\txml = jQuery.parseXML( null );\n\t\tassert.strictEqual( xml, null, \"null string => null document\" );\n\t\txml = jQuery.parseXML( true );\n\t\tassert.strictEqual( xml, null, \"non-string => null document\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"empty input throws exception\" );\n\t}\n} );\n\ntestIframe(\n\t\"Conditional compilation compatibility (#13274)\",\n\t\"core/cc_on.html\",\n\tfunction( assert, jQuery, window, document, cc_on, errors ) {\n\t\tassert.expect( 3 );\n\t\tassert.ok( true, \"JScript conditional compilation \" + ( cc_on ? \"supported\" : \"not supported\" ) );\n\t\tassert.deepEqual( errors, [], \"No errors\" );\n\t\tassert.ok( jQuery(), \"jQuery executes\" );\n\t}\n);\n\n// iOS7 doesn't fire the load event if the long-loading iframe gets its source reset to about:blank.\n// This makes this test fail but it doesn't seem to cause any real-life problems so blacklisting\n// this test there is preferred to complicating the hard-to-test core/ready code further.\nif ( !/iphone os 7_/i.test( navigator.userAgent ) ) {\n\ttestIframe(\n\t\t\"document ready when jQuery loaded asynchronously (#13655)\",\n\t\t\"core/dynamic_ready.html\",\n\t\tfunction( assert, jQuery, window, document, ready ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.equal( true, ready, \"document ready correctly fired when jQuery is loaded after DOMContentLoaded\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Tolerating alias-masked DOM properties (#14074)\",\n\t\"core/aliased.html\",\n\tfunction( assert, jQuery, window, document, errors ) {\n\t\tassert.expect( 1 );\n\t\tassert.deepEqual( errors, [], \"jQuery loaded\" );\n\t}\n);\n\ntestIframe(\n\t\"Don't call window.onready (#14802)\",\n\t\"core/onready.html\",\n\tfunction( assert, jQuery, window, document, error ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( error, false, \"no call to user-defined onready\" );\n\t}\n);\n\nQUnit.test( \"Iterability of jQuery objects (gh-1693)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar i, elem, result;\n\n\tif ( typeof Symbol === \"function\" ) {\n\n\t\telem = jQuery( \"<div></div><span></span><a></a>\" );\n\t\tresult = \"\";\n\n\t\ttry {\n\t\t\teval( \"for ( i of elem ) { result += i.nodeName; }\" );\n\t\t} catch ( e ) {}\n\t\tassert.equal( result, \"DIVSPANA\", \"for-of works on jQuery objects\" );\n\t} else {\n\t\tassert.ok( true, \"The browser doesn't support Symbols\" );\n\t}\n} );\n\ntestIframe(\n\t\"Iterability of jQuery objects with Symbol polyfill (gh-1693)\",\n\t\"core/jquery-iterability-transpiled.html\",\n\tfunction( assert, jQuery, window, document, testString ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.strictEqual( testString, \"DIVSPANA\",\n\t\t\t\"for-of works on jQuery objects with Symbol polyfilled\" );\n\t}\n);\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (original)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message;\n\n\tthis.sandbox.stub( window, \"setTimeout\", function( fn ) {\n\t\ttry {\n\t\t\tfn();\n\t\t} catch ( error ) {\n\t\t\tmessage = error.message;\n\t\t}\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n\tassert.strictEqual(\n\t\tmessage,\n\t\t\"Error in jQuery ready\",\n\t\t\"The error should have been thrown in a timeout\"\n\t);\n} );\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (custom)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async();\n\n\tthis.sandbox.stub( jQuery, \"readyException\", function( error ) {\n\t\tassert.strictEqual(\n\t\t\terror.message,\n\t\t\t\"Error in jQuery ready\",\n\t\t\t\"The custom jQuery.readyException should have been called\"\n\t\t);\n\t\tdone();\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n} );\n"], "fixing_code": ["/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\ndefine( [\n\t\"./var/arr\",\n\t\"./var/document\",\n\t\"./var/getProto\",\n\t\"./var/slice\",\n\t\"./var/concat\",\n\t\"./var/push\",\n\t\"./var/indexOf\",\n\t\"./var/class2type\",\n\t\"./var/toString\",\n\t\"./var/hasOwn\",\n\t\"./var/fnToString\",\n\t\"./var/ObjectFunctionString\",\n\t\"./var/support\",\n\t\"./var/isFunction\",\n\t\"./var/isWindow\",\n\t\"./core/DOMEval\",\n\t\"./core/toType\"\n], function( arr, document, getProto, slice, concat, push, indexOf,\n\tclass2type, toString, hasOwn, fnToString, ObjectFunctionString,\n\tsupport, isFunction, isWindow, DOMEval, toType ) {\n\n\"use strict\";\n\nvar\n\tversion = \"@VERSION\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\n\nreturn jQuery;\n} );\n", "QUnit.module( \"core\", {\n\tbeforeEach: function() {\n\t\tthis.sandbox = sinon.sandbox.create();\n\t},\n\tafterEach: function() {\n\t\tthis.sandbox.restore();\n\t\treturn moduleTeardown.apply( this, arguments );\n\t}\n} );\n\nQUnit.test( \"Basic requirements\", function( assert ) {\n\tassert.expect( 7 );\n\tassert.ok( Array.prototype.push, \"Array.push()\" );\n\tassert.ok( Function.prototype.apply, \"Function.apply()\" );\n\tassert.ok( document.getElementById, \"getElementById\" );\n\tassert.ok( document.getElementsByTagName, \"getElementsByTagName\" );\n\tassert.ok( RegExp, \"RegExp\" );\n\tassert.ok( jQuery, \"jQuery\" );\n\tassert.ok( $, \"$\" );\n} );\n\nQUnit.test( \"jQuery()\", function( assert ) {\n\n\tvar elem, i,\n\t\tobj = jQuery( \"div\" ),\n\t\tcode = jQuery( \"<code/>\" ),\n\t\timg = jQuery( \"<img/>\" ),\n\t\tdiv = jQuery( \"<div/><hr/><code/><b/>\" ),\n\t\texec = false,\n\t\texpected = 23,\n\t\tattrObj = {\n\t\t\t\"text\": \"test\",\n\t\t\t\"class\": \"test2\",\n\t\t\t\"id\": \"test3\"\n\t\t};\n\n\t// The $(html, props) signature can stealth-call any $.fn method, check for a\n\t// few here but beware of modular builds where these methods may be excluded.\n\tif ( jQuery.fn.click ) {\n\t\texpected++;\n\t\tattrObj[ \"click\" ] = function() { assert.ok( exec, \"Click executed.\" ); };\n\t}\n\tif ( jQuery.fn.width ) {\n\t\texpected++;\n\t\tattrObj[ \"width\" ] = 10;\n\t}\n\tif ( jQuery.fn.offset ) {\n\t\texpected++;\n\t\tattrObj[ \"offset\" ] = { \"top\": 1, \"left\": 1 };\n\t}\n\tif ( jQuery.fn.css ) {\n\t\texpected += 2;\n\t\tattrObj[ \"css\" ] = { \"paddingLeft\": 1, \"paddingRight\": 1 };\n\t}\n\tif ( jQuery.fn.attr ) {\n\t\texpected++;\n\t\tattrObj.attr = { \"desired\": \"very\" };\n\t}\n\n\tassert.expect( expected );\n\n\t// Basic constructor's behavior\n\tassert.equal( jQuery().length, 0, \"jQuery() === jQuery([])\" );\n\tassert.equal( jQuery( undefined ).length, 0, \"jQuery(undefined) === jQuery([])\" );\n\tassert.equal( jQuery( null ).length, 0, \"jQuery(null) === jQuery([])\" );\n\tassert.equal( jQuery( \"\" ).length, 0, \"jQuery('') === jQuery([])\" );\n\tassert.deepEqual( jQuery( obj ).get(), obj.get(), \"jQuery(jQueryObj) == jQueryObj\" );\n\n\t// Invalid #id goes to Sizzle which will throw an error (gh-1682)\n\ttry {\n\t\tjQuery( \"#\" );\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Threw an error on #id with no id\" );\n\t}\n\n\t// can actually yield more than one, when iframes are included, the window is an array as well\n\tassert.equal( jQuery( window ).length, 1, \"Correct number of elements generated for jQuery(window)\" );\n\n/*\n\t// disabled since this test was doing nothing. i tried to fix it but i'm not sure\n\t// what the expected behavior should even be. FF returns \"\\n\" for the text node\n\t// make sure this is handled\n\tvar crlfContainer = jQuery('<p>\\r\\n</p>');\n\tvar x = crlfContainer.contents().get(0).nodeValue;\n\tassert.equal( x, what???, \"Check for \\\\r and \\\\n in jQuery()\" );\n*/\n\n\t/* // Disabled until we add this functionality in\n\tvar pass = true;\n\ttry {\n\t\tjQuery(\"<div>Testing</div>\").appendTo(document.getElementById(\"iframe\").contentDocument.body);\n\t} catch(e){\n\t\tpass = false;\n\t}\n\tassert.ok( pass, \"jQuery('&lt;tag&gt;') needs optional document parameter to ease cross-frame DOM wrangling, see #968\" );*/\n\n\tassert.equal( code.length, 1, \"Correct number of elements generated for code\" );\n\tassert.equal( code.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( img.length, 1, \"Correct number of elements generated for img\" );\n\tassert.equal( img.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( div.length, 4, \"Correct number of elements generated for div hr code b\" );\n\tassert.equal( div.parent().length, 0, \"Make sure that the generated HTML has no parent.\" );\n\n\tassert.equal( jQuery( [ 1, 2, 3 ] ).get( 1 ), 2, \"Test passing an array to the factory\" );\n\n\tassert.equal( jQuery( document.body ).get( 0 ), jQuery( \"body\" ).get( 0 ), \"Test passing an html node to the factory\" );\n\n\telem = jQuery( \"  <em>hello</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading space\" );\n\n\telem = jQuery( \"\\n\\n<em>world</em>\" )[ 0 ];\n\tassert.equal( elem.nodeName.toLowerCase(), \"em\", \"leading newlines\" );\n\n\telem = jQuery( \"<div/>\", attrObj );\n\n\tif ( jQuery.fn.width ) {\n\t\tassert.equal( elem[ 0 ].style.width, \"10px\", \"jQuery() quick setter width\" );\n\t}\n\n\tif ( jQuery.fn.offset ) {\n\t\tassert.equal( elem[ 0 ].style.top, \"1px\", \"jQuery() quick setter offset\" );\n\t}\n\n\tif ( jQuery.fn.css ) {\n\t\tassert.equal( elem[ 0 ].style.paddingLeft, \"1px\", \"jQuery quick setter css\" );\n\t\tassert.equal( elem[ 0 ].style.paddingRight, \"1px\", \"jQuery quick setter css\" );\n\t}\n\n\tif ( jQuery.fn.attr ) {\n\t\tassert.equal( elem[ 0 ].getAttribute( \"desired\" ), \"very\", \"jQuery quick setter attr\" );\n\t}\n\n\tassert.equal( elem[ 0 ].childNodes.length, 1, \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].firstChild.nodeValue, \"test\", \"jQuery quick setter text\" );\n\tassert.equal( elem[ 0 ].className, \"test2\", \"jQuery() quick setter class\" );\n\tassert.equal( elem[ 0 ].id, \"test3\", \"jQuery() quick setter id\" );\n\n\texec = true;\n\telem.trigger( \"click\" );\n\n\t// manually clean up detached elements\n\telem.remove();\n\n\tfor ( i = 0; i < 3; ++i ) {\n\t\telem = jQuery( \"<input type='text' value='TEST' />\" );\n\t}\n\tassert.equal( elem[ 0 ].defaultValue, \"TEST\", \"Ensure cached nodes are cloned properly (Bug #6655)\" );\n\n\telem = jQuery( \"<input type='hidden'>\", {} );\n\tassert.strictEqual( elem[ 0 ].ownerDocument, document,\n\t\t\"Empty attributes object is not interpreted as a document (trac-8950)\" );\n} );\n\nQUnit[ jQuery.find.compile ? \"test\" : \"skip\" ]( \"jQuery(selector, context)\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.deepEqual( jQuery( \"div p\", \"#qunit-fixture\" ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with string as context\" );\n\tassert.deepEqual( jQuery( \"div p\", q( \"qunit-fixture\" )[ 0 ] ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with element as context\" );\n\tassert.deepEqual( jQuery( \"div p\", jQuery( \"#qunit-fixture\" ) ).get(), q( \"sndp\", \"en\", \"sap\" ), \"Basic selector with jQuery object as context\" );\n} );\n\nQUnit.test( \"globalEval\", function( assert ) {\n\tassert.expect( 3 );\n\tGlobals.register( \"globalEvalTest\" );\n\n\tjQuery.globalEval( \"globalEvalTest = 1;\" );\n\tassert.equal( window.globalEvalTest, 1, \"Test variable assignments are global\" );\n\n\tjQuery.globalEval( \"var globalEvalTest = 2;\" );\n\tassert.equal( window.globalEvalTest, 2, \"Test variable declarations are global\" );\n\n\tjQuery.globalEval( \"this.globalEvalTest = 3;\" );\n\tassert.equal( window.globalEvalTest, 3, \"Test context (this) is the window object\" );\n} );\n\nQUnit.test( \"globalEval with 'use strict'\", function( assert ) {\n\tassert.expect( 1 );\n\tGlobals.register( \"strictEvalTest\" );\n\n\tjQuery.globalEval( \"'use strict'; var strictEvalTest = 1;\" );\n\tassert.equal( window.strictEvalTest, 1, \"Test variable declarations are global (strict mode)\" );\n} );\n\nQUnit.test( \"globalEval execution after script injection (#7862)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar now,\n\t\tscript = document.createElement( \"script\" );\n\n\tscript.src = baseURL + \"mock.php?action=wait&wait=2&script=1\";\n\n\tnow = Date.now();\n\tdocument.body.appendChild( script );\n\n\tjQuery.globalEval( \"var strictEvalTest = \" + Date.now() + \";\" );\n\tassert.ok( window.strictEvalTest - now < 500, \"Code executed synchronously\" );\n} );\n\nQUnit.test( \"noConflict\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $$ = jQuery;\n\n\tassert.strictEqual( jQuery, jQuery.noConflict(), \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], $$, \"Make sure jQuery wasn't touched.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\n\tjQuery = $ = $$;\n\n\tassert.strictEqual( jQuery.noConflict( true ), $$, \"noConflict returned the jQuery object\" );\n\tassert.strictEqual( window[ \"jQuery\" ], originaljQuery, \"Make sure jQuery was reverted.\" );\n\tassert.strictEqual( window[ \"$\" ], original$, \"Make sure $ was reverted.\" );\n\tassert.ok( $$().pushStack( [] ), \"Make sure that jQuery still works.\" );\n\n\twindow[ \"jQuery\" ] = jQuery = $$;\n} );\n\nQUnit.test( \"trim\", function( assert ) {\n\tassert.expect( 13 );\n\n\tvar nbsp = String.fromCharCode( 160 );\n\n\tassert.equal( jQuery.trim( \"hello  \" ), \"hello\", \"trailing space\" );\n\tassert.equal( jQuery.trim( \"  hello\" ), \"hello\", \"leading space\" );\n\tassert.equal( jQuery.trim( \"  hello   \" ), \"hello\", \"space on both sides\" );\n\tassert.equal( jQuery.trim( \"  \" + nbsp + \"hello  \" + nbsp + \" \" ), \"hello\", \"&nbsp;\" );\n\n\tassert.equal( jQuery.trim(), \"\", \"Nothing in.\" );\n\tassert.equal( jQuery.trim( undefined ), \"\", \"Undefined\" );\n\tassert.equal( jQuery.trim( null ), \"\", \"Null\" );\n\tassert.equal( jQuery.trim( 5 ), \"5\", \"Number\" );\n\tassert.equal( jQuery.trim( false ), \"false\", \"Boolean\" );\n\n\tassert.equal( jQuery.trim( \" \" ), \"\", \"space should be trimmed\" );\n\tassert.equal( jQuery.trim( \"ipad\\xA0\" ), \"ipad\", \"nbsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF\" ), \"\", \"zwsp should be trimmed\" );\n\tassert.equal( jQuery.trim( \"\\uFEFF \\xA0! | \\uFEFF\" ), \"! |\", \"leading/trailing should be trimmed\" );\n} );\n\nQUnit.test( \"isPlainObject\", function( assert ) {\n\tvar done = assert.async();\n\n\tassert.expect( 23 );\n\n\tvar pass, iframe, doc, parentObj, childObj, deep,\n\t\tfn = function() {};\n\n\t// The use case that we want to match\n\tassert.ok( jQuery.isPlainObject( {} ), \"{}\" );\n\tassert.ok( jQuery.isPlainObject( new window.Object() ), \"new Object\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: fn } ),\n\t\t\"plain object with constructor property\" );\n\tassert.ok( jQuery.isPlainObject( { constructor: \"foo\" } ),\n\t\t\"plain object with primitive constructor property\" );\n\n\tparentObj = {};\n\tchildObj = Object.create( parentObj );\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({})\" );\n\tparentObj.foo = \"bar\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"Object.create({...})\" );\n\tchildObj.bar = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( childObj ), \"extend(Object.create({...}), ...)\" );\n\n\t// Not objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( \"\" ), \"string\" );\n\tassert.ok( !jQuery.isPlainObject( 0 ) && !jQuery.isPlainObject( 1 ), \"number\" );\n\tassert.ok( !jQuery.isPlainObject( true ) && !jQuery.isPlainObject( false ), \"boolean\" );\n\tassert.ok( !jQuery.isPlainObject( null ), \"null\" );\n\tassert.ok( !jQuery.isPlainObject( undefined ), \"undefined\" );\n\n\t// Arrays shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( [] ), \"array\" );\n\n\t// Instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new Date() ), \"new Date\" );\n\n\t// Functions shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( fn ), \"fn\" );\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn (no methods)\" );\n\n\t// Makes the function a little more realistic\n\t// (and harder to detect, incidentally)\n\tfn.prototype[ \"someMethod\" ] = function() {};\n\n\t// Again, instantiated objects shouldn't be matched\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn\" );\n\n\t// Instantiated objects with primitive constructors shouldn't be matched\n\tfn.prototype.constructor = \"foo\";\n\tassert.ok( !jQuery.isPlainObject( new fn() ), \"new fn with primitive constructor\" );\n\n\t// Deep object\n\tdeep = { \"foo\": { \"baz\": true }, \"foo2\": document };\n\tassert.ok( jQuery.isPlainObject( deep ), \"Object with objects is still plain\" );\n\n\t// DOM Element\n\tassert.ok( !jQuery.isPlainObject( document.createElement( \"div\" ) ), \"DOM Element\" );\n\n\t// Window\n\tassert.ok( !jQuery.isPlainObject( window ), \"window\" );\n\n\tpass = false;\n\ttry {\n\t\tjQuery.isPlainObject( window.location );\n\t\tpass = true;\n\t} catch ( e ) {}\n\tassert.ok( pass, \"Does not throw exceptions on host objects\" );\n\n\t// Objects from other windows should be matched\n\tGlobals.register( \"iframeDone\" );\n\twindow.iframeDone = function( otherObject, detail ) {\n\t\twindow.iframeDone = undefined;\n\t\tiframe.parentNode.removeChild( iframe );\n\t\tassert.ok( jQuery.isPlainObject( new otherObject() ), \"new otherObject\" + ( detail ? \" - \" + detail : \"\" ) );\n\t\tdone();\n\t};\n\n\ttry {\n\t\tiframe = jQuery( \"#qunit-fixture\" )[ 0 ].appendChild( document.createElement( \"iframe\" ) );\n\t\tdoc = iframe.contentDocument || iframe.contentWindow.document;\n\t\tdoc.open();\n\t\tdoc.write( \"<body onload='window.parent.iframeDone(Object);'>\" );\n\t\tdoc.close();\n\t} catch ( e ) {\n\t\twindow.iframeDone( Object, \"iframes not supported\" );\n\t}\n} );\n\nQUnit[ typeof Symbol === \"function\" ? \"test\" : \"skip\" ]( \"isPlainObject(Symbol)\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( jQuery.isPlainObject( Symbol() ), false, \"Symbol\" );\n\tassert.equal( jQuery.isPlainObject( Object( Symbol() ) ), false, \"Symbol inside an object\" );\n} );\n\nQUnit.test( \"isPlainObject(localStorage)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tassert.equal( jQuery.isPlainObject( localStorage ), false );\n} );\n\nQUnit[ \"assign\" in Object ? \"test\" : \"skip\" ]( \"isPlainObject(Object.assign(...))\",\n\tfunction( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar parentObj = { foo: \"bar\" };\n\t\tvar childObj = Object.assign( Object.create( parentObj ), { bar: \"foo\" } );\n\n\t\tassert.ok( !jQuery.isPlainObject( childObj ), \"isPlainObject(Object.assign(...))\" );\n\t}\n);\n\nQUnit.test( \"isXMLDoc - HTML\", function( assert ) {\n\tassert.expect( 4 );\n\n\tassert.ok( !jQuery.isXMLDoc( document ), \"HTML document\" );\n\tassert.ok( !jQuery.isXMLDoc( document.documentElement ), \"HTML documentElement\" );\n\tassert.ok( !jQuery.isXMLDoc( document.body ), \"HTML Body Element\" );\n\n\tvar body,\n\t\tiframe = document.createElement( \"iframe\" );\n\tdocument.body.appendChild( iframe );\n\n\ttry {\n\t\tbody = jQuery( iframe ).contents()[ 0 ];\n\n\t\ttry {\n\t\t\tassert.ok( !jQuery.isXMLDoc( body ), \"Iframe body element\" );\n\t\t} catch ( e ) {\n\t\t\tassert.ok( false, \"Iframe body element exception\" );\n\t\t}\n\n\t} catch ( e ) {\n\t\tassert.ok( true, \"Iframe body element - iframe not working correctly\" );\n\t}\n\n\tdocument.body.removeChild( iframe );\n} );\n\nQUnit.test( \"XSS via location.hash\", function( assert ) {\n\tvar done = assert.async();\n\tassert.expect( 1 );\n\n\tjQuery[ \"_check9521\" ] = function( x ) {\n\t\tassert.ok( x, \"script called from #id-like selector with inline handler\" );\n\t\tjQuery( \"#check9521\" ).remove();\n\t\tdelete jQuery[ \"_check9521\" ];\n\t\tdone();\n\t};\n\ttry {\n\n\t\t// This throws an error because it's processed like an id\n\t\tjQuery( \"#<img id='check9521' src='no-such-.gif' onerror='jQuery._check9521(false)'>\" ).appendTo( \"#qunit-fixture\" );\n\t} catch ( err ) {\n\t\tjQuery[ \"_check9521\" ]( true );\n\t}\n} );\n\nQUnit.test( \"isXMLDoc - XML\", function( assert ) {\n\tassert.expect( 3 );\n\tvar xml = createDashboardXML();\n\tassert.ok( jQuery.isXMLDoc( xml ), \"XML document\" );\n\tassert.ok( jQuery.isXMLDoc( xml.documentElement ), \"XML documentElement\" );\n\tassert.ok( jQuery.isXMLDoc( jQuery( \"tab\", xml )[ 0 ] ), \"XML Tab Element\" );\n} );\n\nQUnit.test( \"jQuery('html')\", function( assert ) {\n\tassert.expect( 18 );\n\n\tvar s, div, j;\n\n\tjQuery[ \"foo\" ] = false;\n\ts = jQuery( \"<script>jQuery.foo='test';</script>\" )[ 0 ];\n\tassert.ok( s, \"Creating a script\" );\n\tassert.ok( !jQuery[ \"foo\" ], \"Make sure the script wasn't executed prematurely\" );\n\tjQuery( \"body\" ).append( \"<script>jQuery.foo='test';</script>\" );\n\tassert.ok( jQuery[ \"foo\" ], \"Executing a script's contents in the right context\" );\n\n\t// Test multi-line HTML\n\tdiv = jQuery( \"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\" )[ 0 ];\n\tassert.equal( div.nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\" );\n\tassert.equal( div.firstChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.lastChild.nodeType, 3, \"Text node.\" );\n\tassert.equal( div.childNodes[ 1 ].nodeType, 1, \"Paragraph.\" );\n\tassert.equal( div.childNodes[ 1 ].firstChild.nodeType, 3, \"Paragraph text.\" );\n\n\tassert.ok( jQuery( \"<link rel='stylesheet'/>\" )[ 0 ], \"Creating a link\" );\n\n\tassert.ok( !jQuery( \"<script/>\" )[ 0 ].parentNode, \"Create a script\" );\n\n\tassert.ok( jQuery( \"<input/>\" ).attr( \"type\", \"hidden\" ), \"Create an input and set the type.\" );\n\n\tj = jQuery( \"<span>hi</span> there <!-- mon ami -->\" );\n\tassert.ok( j.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\" );\n\n\tassert.ok( !jQuery( \"<option>test</option>\" )[ 0 ].selected, \"Make sure that options are auto-selected #2050\" );\n\n\tassert.ok( jQuery( \"<div></div>\" )[ 0 ], \"Create a div with closing tag.\" );\n\tassert.ok( jQuery( \"<table></table>\" )[ 0 ], \"Create a table with closing tag.\" );\n\n\tassert.equal( jQuery( \"element[attribute='<div></div>']\" ).length, 0,\n\t\t\"When html is within brackets, do not recognize as html.\" );\n\n\t//equal( jQuery( \"element[attribute=<div></div>]\" ).length, 0,\n\t//\t\"When html is within brackets, do not recognize as html.\" );\n\tif ( jQuery.find.compile ) {\n\t\tassert.equal( jQuery( \"element:not(<div></div>)\" ).length, 0,\n\t\t\t\"When html is within parens, do not recognize as html.\" );\n\t} else {\n\t\tassert.ok( \"skip\", \"Complex :not not supported in selector-native\" );\n\t}\n\tassert.equal( jQuery( \"\\\\<div\\\\>\" ).length, 0, \"Ignore escaped html characters\" );\n} );\n\nQUnit.test( \"jQuery(element with non-alphanumeric name)\", function( assert ) {\n\tassert.expect( 36 );\n\n\tjQuery.each( [ \"-\", \":\" ], function( i, symbol ) {\n\t\tjQuery.each( [ \"thead\", \"tbody\", \"tfoot\", \"colgroup\", \"caption\", \"tr\", \"th\", \"td\" ],\n\t\t\tfunction( j, tag ) {\n\t\t\t\tvar tagName = tag + symbol + \"test\";\n\t\t\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\t\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\t\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\t\t\ttagName + \" element has expected node name\" );\n\t\t\t}\n\t\t);\n\n\t\tvar tagName = [ \"tr\", \"multiple\", \"symbol\" ].join( symbol );\n\t\tvar el = jQuery( \"<\" + tagName + \"></\" + tagName + \">\" );\n\t\tassert.ok( el[ 0 ], \"Create a \" + tagName + \" element\" );\n\t\tassert.ok( el[ 0 ].nodeName === tagName.toUpperCase(),\n\t\t\ttagName + \" element has expected node name\" );\n\t} );\n} );\n\nQUnit.test( \"jQuery('massive html #7990')\", function( assert ) {\n\tassert.expect( 3 );\n\n\tvar i,\n\t\tli = \"<li>very very very very large html string</li>\",\n\t\thtml = [ \"<ul>\" ];\n\n\tfor ( i = 0; i < 30000; i += 1 ) {\n\t\thtml[ html.length ] = li;\n\t}\n\thtml[ html.length ] = \"</ul>\";\n\thtml = jQuery( html.join( \"\" ) )[ 0 ];\n\tassert.equal( html.nodeName.toLowerCase(), \"ul\" );\n\tassert.equal( html.firstChild.nodeName.toLowerCase(), \"li\" );\n\tassert.equal( html.childNodes.length, 30000 );\n} );\n\nQUnit.test( \"jQuery('html', context)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar $div = jQuery( \"<div/>\" )[ 0 ],\n\t\t$span = jQuery( \"<span/>\", $div );\n\tassert.equal( $span.length, 1, \"verify a span created with a div context works, #1763\" );\n} );\n\nQUnit.test( \"jQuery(selector, xml).text(str) - loaded via xml document\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar xml = createDashboardXML(),\n\n\t// tests for #1419 where ie was a problem\n\t\ttab = jQuery( \"tab\", xml ).eq( 0 );\n\tassert.equal( tab.text(), \"blabla\", \"verify initial text correct\" );\n\ttab.text( \"newtext\" );\n\tassert.equal( tab.text(), \"newtext\", \"verify new text correct\" );\n} );\n\nQUnit.test( \"end()\", function( assert ) {\n\tassert.expect( 3 );\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).parent().end().text(), \"check for end\" );\n\tassert.ok( jQuery( \"#yahoo\" ).end(), \"check for end with nothing to end\" );\n\n\tvar x = jQuery( \"#yahoo\" );\n\tx.parent();\n\tassert.equal( \"Yahoo\", jQuery( \"#yahoo\" ).text(), \"check for non-destructive behavior\" );\n} );\n\nQUnit.test( \"length\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).length, 6, \"Get Number of Elements Found\" );\n} );\n\nQUnit.test( \"get()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).get(), q( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ), \"Get All Elements\" );\n} );\n\nQUnit.test( \"toArray()\", function( assert ) {\n\tassert.expect( 1 );\n\tassert.deepEqual( jQuery( \"#qunit-fixture p\" ).toArray(),\n\t\tq( \"firstp\", \"ap\", \"sndp\", \"en\", \"sap\", \"first\" ),\n\t\t\"Convert jQuery object to an Array\" );\n} );\n\nQUnit.test( \"inArray()\", function( assert ) {\n\tassert.expect( 19 );\n\n\tvar selections = {\n\t\tp:   q( \"firstp\", \"sap\", \"ap\", \"first\" ),\n\t\tem:  q( \"siblingnext\", \"siblingfirst\" ),\n\t\tdiv: q( \"qunit-testrunner-toolbar\", \"nothiddendiv\", \"nothiddendivchild\", \"foo\" ),\n\t\ta:   q( \"mark\", \"groups\", \"google\", \"simon1\" ),\n\t\tempty: []\n\t},\n\ttests = {\n\t\tp:    { elem: jQuery( \"#ap\" )[ 0 ],           index: 2 },\n\t\tem:   { elem: jQuery( \"#siblingfirst\" )[ 0 ], index: 1 },\n\t\tdiv:  { elem: jQuery( \"#nothiddendiv\" )[ 0 ], index: 1 },\n\t\ta:    { elem: jQuery( \"#simon1\" )[ 0 ],       index: 3 }\n\t},\n\tfalseTests = {\n\t\tp:  jQuery( \"#liveSpan1\" )[ 0 ],\n\t\tem: jQuery( \"#nothiddendiv\" )[ 0 ],\n\t\tempty: \"\"\n\t};\n\n\tjQuery.each( tests, function( key, obj ) {\n\t\tassert.equal( jQuery.inArray( obj.elem, selections[ key ] ), obj.index, \"elem is in the array of selections of its tag\" );\n\n\t\t// Third argument (fromIndex)\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 5 ), false, \"elem is NOT in the array of selections given a starting index greater than its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], 1 ), true, \"elem is in the array of selections given a starting index less than or equal to its position\" );\n\t\tassert.equal( !!~jQuery.inArray( obj.elem, selections[ key ], -3 ), true, \"elem is in the array of selections given a negative index\" );\n\t} );\n\n\tjQuery.each( falseTests, function( key, elem ) {\n\t\tassert.equal( !!~jQuery.inArray( elem, selections[ key ] ), false, \"elem is NOT in the array of selections\" );\n\t} );\n\n} );\n\nQUnit.test( \"get(Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"#qunit-fixture p\" ).get( 0 ), document.getElementById( \"firstp\" ), \"Get A Single Element\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( 1 ), undefined, \"Try get with index larger elements count\" );\n} );\n\nQUnit.test( \"get(-Number)\", function( assert ) {\n\tassert.expect( 2 );\n\tassert.equal( jQuery( \"p\" ).get( -1 ), document.getElementById( \"first\" ), \"Get a single element with negative index\" );\n\tassert.strictEqual( jQuery( \"#firstp\" ).get( -2 ), undefined, \"Try get with index negative index larger then elements count\" );\n} );\n\nQUnit.test( \"each(Function)\", function( assert ) {\n\tassert.expect( 1 );\n\tvar div, pass, i;\n\n\tdiv = jQuery( \"div\" );\n\tdiv.each( function() {this.foo = \"zoo\";} );\n\tpass = true;\n\tfor ( i = 0; i < div.length; i++ ) {\n\t\tif ( div.get( i ).foo !== \"zoo\" ) {\n\t\t\tpass = false;\n\t\t}\n\t}\n\tassert.ok( pass, \"Execute a function, Relative\" );\n} );\n\nQUnit.test( \"slice()\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar $links = jQuery( \"#ap a\" );\n\n\tassert.deepEqual( $links.slice( 1, 2 ).get(), q( \"groups\" ), \"slice(1,2)\" );\n\tassert.deepEqual( $links.slice( 1 ).get(), q( \"groups\", \"anchor1\", \"mark\" ), \"slice(1)\" );\n\tassert.deepEqual( $links.slice( 0, 3 ).get(), q( \"google\", \"groups\", \"anchor1\" ), \"slice(0,3)\" );\n\tassert.deepEqual( $links.slice( -1 ).get(), q( \"mark\" ), \"slice(-1)\" );\n\n\tassert.deepEqual( $links.eq( 1 ).get(), q( \"groups\" ), \"eq(1)\" );\n\tassert.deepEqual( $links.eq( \"2\" ).get(), q( \"anchor1\" ), \"eq('2')\" );\n\tassert.deepEqual( $links.eq( -1 ).get(), q( \"mark\" ), \"eq(-1)\" );\n} );\n\nQUnit.test( \"first()/last()\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar $links = jQuery( \"#ap a\" ), $none = jQuery( \"asdf\" );\n\n\tassert.deepEqual( $links.first().get(), q( \"google\" ), \"first()\" );\n\tassert.deepEqual( $links.last().get(), q( \"mark\" ), \"last()\" );\n\n\tassert.deepEqual( $none.first().get(), [], \"first() none\" );\n\tassert.deepEqual( $none.last().get(), [], \"last() none\" );\n} );\n\nQUnit.test( \"map()\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap\" ).map( function() {\n\t\t\treturn jQuery( this ).find( \"a\" ).get();\n\t\t} ).get(),\n\t\tq( \"google\", \"groups\", \"anchor1\", \"mark\" ),\n\t\t\"Array Map\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery( \"#ap > a\" ).map( function() {\n\t\t\treturn this.parentNode;\n\t\t} ).get(),\n\t\tq( \"ap\", \"ap\", \"ap\" ),\n\t\t\"Single Map\"\n\t);\n} );\n\nQUnit.test( \"jQuery.map\", function( assert ) {\n\tassert.expect( 25 );\n\n\tvar i, label, result, callback;\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"012\", \"Map the keys from an array\" );\n\n\tresult = jQuery.map( [ 3, 4, 5 ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"345\", \"Map the values from an array\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v, k ) {\n\t\treturn k;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Map the keys from an object\" );\n\n\tresult = jQuery.map( { a: 1, b: 2 }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"12\", \"Map the values from an object\" );\n\n\tresult = jQuery.map( [ \"a\", undefined, null, \"b\" ], function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Array iteration does not include undefined/null results\" );\n\n\tresult = jQuery.map( { a: \"a\", b: undefined, c: null, d: \"b\" }, function( v ) {\n\t\treturn v;\n\t} );\n\tassert.equal( result.join( \"\" ), \"ab\", \"Object iteration does not include undefined/null results\" );\n\n\tresult = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tresult[ i ].foo = \"bar\";\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( v, k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( { length: result[ i ] }, callback );\n\t}\n\n\tresult = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( v, k ) {\n\t\tif ( result[ label ] ) {\n\t\t\tdelete result[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t}\n\t};\n\tfor ( i in result ) {\n\t\tlabel = i;\n\t\tjQuery.map( result[ i ], callback );\n\t}\n\n\tresult = false;\n\tjQuery.map( { length: 0 }, function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"length: 0 plain object treated like array\" );\n\n\tresult = false;\n\tjQuery.map( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tresult = true;\n\t} );\n\tassert.ok( !result, \"empty NodeList treated like array\" );\n\n\tresult = jQuery.map( Array( 4 ), function( v, k ) {\n\t\treturn k % 2 ? k : [ k, k, k ];\n\t} );\n\tassert.equal( result.join( \"\" ), \"00012223\", \"Array results flattened (#2616)\" );\n} );\n\nQUnit.test( \"jQuery.merge()\", function( assert ) {\n\tassert.expect( 10 );\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [] ),\n\t\t[],\n\t\t\"Empty arrays\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1 ], [ 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"Basic (single-element)\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [ 3, 4 ] ),\n\t\t[ 1, 2, 3, 4 ],\n\t\t\"Basic (multiple-element)\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], [] ),\n\t\t[ 1, 2 ],\n\t\t\"Second empty\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ 1, 2 ] ),\n\t\t[ 1, 2 ],\n\t\t\"First empty\"\n\t);\n\n\t// Fixed at [5998], #3641\n\tassert.deepEqual(\n\t\tjQuery.merge( [ -2, -1 ], [ 0, 1, 2 ] ),\n\t\t[ -2, -1, 0, 1, 2 ],\n\t\t\"Second array including a zero (falsy)\"\n\t);\n\n\t// After fixing #5527\n\tassert.deepEqual(\n\t\tjQuery.merge( [], [ null, undefined ] ),\n\t\t[ null, undefined ],\n\t\t\"Second array including null and undefined values\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( { length: 0 }, [ 1, 2 ] ),\n\t\t{ length: 2, 0: 1, 1: 2 },\n\t\t\"First array like\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.merge( [ 1, 2 ], { length: 1, 0: 3 } ),\n\t\t[ 1, 2, 3 ],\n\t\t\"Second array like\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.merge( [], document.getElementById( \"lengthtest\" ).getElementsByTagName( \"input\" ) ),\n\t\t[ document.getElementById( \"length\" ), document.getElementById( \"idTest\" ) ],\n\t\t\"Second NodeList\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep()\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( [], searchCriterion ), [], \"Empty array\" );\n\tassert.deepEqual( jQuery.grep( new Array( 4 ), searchCriterion ), [], \"Sparse array\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 2, 3, 4, 5, 6 ], searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( [ 1, 3, 5, 7 ], searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.grep(Array-like)\", function( assert ) {\n\tassert.expect( 7 );\n\n\tvar searchCriterion = function( value ) {\n\t\treturn value % 2 === 0;\n\t};\n\n\tassert.deepEqual( jQuery.grep( { length: 0 }, searchCriterion ), [], \"Empty array-like\" );\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present and array-like object used\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion ),\n\t\t[],\n\t\t\"Satisfying elements absent and Array-like object used\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, true ),\n\t\t[ 1, 3, 5 ],\n\t\t\"Satisfying elements present, array-like object used, and grep inverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, true ),\n\t\t[ 1, 3, 5, 7 ],\n\t\t\"Satisfying elements absent, array-like object used, and grep inverted\"\n\t);\n\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, length: 6 }, searchCriterion, false ),\n\t\t[ 2, 4, 6 ],\n\t\t\"Satisfying elements present, Array-like object used, but grep explicitly uninverted\"\n\t);\n\tassert.deepEqual(\n\t\tjQuery.grep( { 0: 1, 1: 3, 2: 5, 3: 7, length: 4 }, searchCriterion, false ),\n\t\t[],\n\t\t\"Satisfying elements absent, Array-like object used, and grep explicitly uninverted\"\n\t);\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object)\", function( assert ) {\n\tassert.expect( 28 );\n\n\tvar empty, optionsWithLength, optionsWithDate, myKlass,\n\t\tcustomObject, optionsWithCustomObject, MyNumber, ret,\n\t\tnullUndef, target, recursive, obj,\n\t\tdefaults, defaultsCopy, options1, options1Copy, options2, options2Copy, merged2,\n\t\tsettings = { \"xnumber1\": 5, \"xnumber2\": 7, \"xstring1\": \"peter\", \"xstring2\": \"pan\" },\n\t\toptions = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\toptionsCopy = { \"xnumber2\": 1, \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tmerged = { \"xnumber1\": 5, \"xnumber2\": 1, \"xstring1\": \"peter\", \"xstring2\": \"x\", \"xxx\": \"newstring\" },\n\t\tdeep1 = { \"foo\": { \"bar\": true } },\n\t\tdeep2 = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeep2copy = { \"foo\": { \"baz\": true }, \"foo2\": document },\n\t\tdeepmerged = { \"foo\": { \"bar\": true, \"baz\": true }, \"foo2\": document },\n\t\tarr = [ 1, 2, 3 ],\n\t\tnestedarray = { \"arr\": arr };\n\n\tjQuery.extend( settings, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( settings, null, options );\n\tassert.deepEqual( settings, merged, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( options, optionsCopy, \"Check if not modified: options must not be modified\" );\n\n\tjQuery.extend( true, deep1, deep2 );\n\tassert.deepEqual( deep1[ \"foo\" ], deepmerged[ \"foo\" ], \"Check if foo: settings must be extended\" );\n\tassert.deepEqual( deep2[ \"foo\" ], deep2copy[ \"foo\" ], \"Check if not deep2: options must not be modified\" );\n\tassert.equal( deep1[ \"foo2\" ], document, \"Make sure that a deep clone was not attempted on the document\" );\n\n\tassert.ok( jQuery.extend( true, {}, nestedarray )[ \"arr\" ] !== arr, \"Deep extend of object must clone child array\" );\n\n\t// #5991\n\tassert.ok( Array.isArray( jQuery.extend( true, { \"arr\": {} }, nestedarray )[ \"arr\" ] ), \"Cloned array have to be an Array\" );\n\tassert.ok( jQuery.isPlainObject( jQuery.extend( true, { \"arr\": arr }, { \"arr\": {} } )[ \"arr\" ] ), \"Cloned object have to be an plain object\" );\n\n\tempty = {};\n\toptionsWithLength = { \"foo\": { \"length\": -1 } };\n\tjQuery.extend( true, empty, optionsWithLength );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithLength[ \"foo\" ], \"The length property must copy correctly\" );\n\n\tempty = {};\n\toptionsWithDate = { \"foo\": { \"date\": new Date() } };\n\tjQuery.extend( true, empty, optionsWithDate );\n\tassert.deepEqual( empty[ \"foo\" ], optionsWithDate[ \"foo\" ], \"Dates copy correctly\" );\n\n\t/** @constructor */\n\tmyKlass = function() {};\n\tcustomObject = new myKlass();\n\toptionsWithCustomObject = { \"foo\": { \"date\": customObject } };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly (no methods)\" );\n\n\t// Makes the class a little more realistic\n\tmyKlass.prototype = { \"someMethod\": function() {} };\n\tempty = {};\n\tjQuery.extend( true, empty, optionsWithCustomObject );\n\tassert.ok( empty[ \"foo\" ] && empty[ \"foo\" ][ \"date\" ] === customObject, \"Custom objects copy correctly\" );\n\n\tMyNumber = Number;\n\n\tret = jQuery.extend( true, { \"foo\": 4 }, { \"foo\": new MyNumber( 5 ) } );\n\tassert.ok( parseInt( ret.foo, 10 ) === 5, \"Wrapped numbers copy correctly\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": null } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === null, \"Check to make sure null values are copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber2\": undefined } );\n\tassert.ok( nullUndef[ \"xnumber2\" ] === options[ \"xnumber2\" ], \"Check to make sure undefined values are not copied\" );\n\n\tnullUndef = jQuery.extend( {}, options, { \"xnumber0\": null } );\n\tassert.ok( nullUndef[ \"xnumber0\" ] === null, \"Check to make sure null values are inserted\" );\n\n\ttarget = {};\n\trecursive = { foo:target, bar:5 };\n\tjQuery.extend( true, target, recursive );\n\tassert.deepEqual( target, { bar:5 }, \"Check to make sure a recursive obj doesn't go never-ending loop by not copying it over\" );\n\n\tret = jQuery.extend( true, { foo: [] }, { foo: [ 0 ] } ); // 1907\n\tassert.equal( ret.foo.length, 1, \"Check to make sure a value with coercion 'false' copies over when necessary to fix #1907\" );\n\n\tret = jQuery.extend( true, { foo: \"1,2,3\" }, { foo: [ 1, 2, 3 ] } );\n\tassert.ok( typeof ret.foo !== \"string\", \"Check to make sure values equal with coercion (but not actually equal) overwrite correctly\" );\n\n\tret = jQuery.extend( true, { foo:\"bar\" }, { foo:null } );\n\tassert.ok( typeof ret.foo !== \"undefined\", \"Make sure a null value doesn't crash with deep extend, for #1908\" );\n\n\tobj = { foo:null };\n\tjQuery.extend( true, obj, { foo:\"notnull\" } );\n\tassert.equal( obj.foo, \"notnull\", \"Make sure a null value can be overwritten\" );\n\n\tfunction func() {}\n\tjQuery.extend( func, { key: \"value\" } );\n\tassert.equal( func.key, \"value\", \"Verify a function can be extended\" );\n\n\tdefaults = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\tdefaultsCopy = { xnumber1: 5, xnumber2: 7, xstring1: \"peter\", xstring2: \"pan\" };\n\toptions1 = { xnumber2: 1, xstring2: \"x\" };\n\toptions1Copy = { xnumber2: 1, xstring2: \"x\" };\n\toptions2 = { xstring2: \"xx\", xxx: \"newstringx\" };\n\toptions2Copy = { xstring2: \"xx\", xxx: \"newstringx\" };\n\tmerged2 = { xnumber1: 5, xnumber2: 1, xstring1: \"peter\", xstring2: \"xx\", xxx: \"newstringx\" };\n\n\tsettings = jQuery.extend( {}, defaults, options1, options2 );\n\tassert.deepEqual( settings, merged2, \"Check if extended: settings must be extended\" );\n\tassert.deepEqual( defaults, defaultsCopy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options1, options1Copy, \"Check if not modified: options1 must not be modified\" );\n\tassert.deepEqual( options2, options2Copy, \"Check if not modified: options2 must not be modified\" );\n} );\n\nQUnit.test( \"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar definedObj = Object.defineProperties( {}, {\n        \"enumerableProp\": {\n          get: function() {\n            return true;\n          },\n          enumerable: true\n        },\n        \"nonenumerableProp\": {\n          get: function() {\n            return true;\n          }\n        }\n      } ),\n      accessorObj = {};\n\n\tjQuery.extend( accessorObj, definedObj );\n\tassert.equal( accessorObj.enumerableProp, true, \"Verify that getters are transferred\" );\n\tassert.equal( accessorObj.nonenumerableProp, undefined, \"Verify that non-enumerable getters are ignored\" );\n} );\n\nQUnit.test( \"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function( assert ) {\n\tassert.expect( 2 );\n\n\tvar result, initial = {\n\n\t\t// This will make \"copyIsArray\" true\n\t\tarray: [ 1, 2, 3, 4 ],\n\n\t\t// If \"copyIsArray\" doesn't get reset to false, the check\n\t\t// will evaluate true and enter the array copy block\n\t\t// instead of the object copy block. Since the ternary in the\n\t\t// \"copyIsArray\" block will evaluate to false\n\t\t// (check if operating on an array with ), this will be\n\t\t// replaced by an empty array.\n\t\tobject: {}\n\t};\n\n\tresult = jQuery.extend( true, {}, initial );\n\n\tassert.deepEqual( result, initial, \"The [result] and [initial] have equal shape and values\" );\n\tassert.ok( !Array.isArray( result.object ), \"result.object wasn't paved with an empty array\" );\n} );\n\nQUnit.test( \"jQuery.extend( true, ... ) Object.prototype pollution\", function( assert ) {\n\tassert.expect( 1 );\n\n\tjQuery.extend( true, {}, JSON.parse( \"{\\\"__proto__\\\": {\\\"devMode\\\": true}}\" ) );\n\tassert.ok( !( \"devMode\" in {} ), \"Object.prototype not polluted\" );\n} );\n\nQUnit.test( \"jQuery.each(Object,Function)\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar i, label, seen, callback;\n\n\tseen = {};\n\tjQuery.each( [ 3, 4, 5 ], function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { \"0\": 3, \"1\": 4, \"2\": 5 }, \"Array iteration\" );\n\n\tseen = {};\n\tjQuery.each( { name: \"name\", lang: \"lang\" }, function( k, v ) {\n\t\tseen[ k ] = v;\n\t} );\n\tassert.deepEqual( seen, { name: \"name\", lang: \"lang\" }, \"Object iteration\" );\n\n\tseen = [];\n\tjQuery.each( [ 1, 2, 3 ], function( k, v ) {\n\t\tseen.push( v );\n\t\tif ( k === 1 ) {\n\t\t\treturn false;\n\t\t}\n\t} );\n\tassert.deepEqual( seen, [ 1, 2 ], \"Broken array iteration\" );\n\n\tseen = [];\n\tjQuery.each( { \"a\": 1, \"b\": 2, \"c\": 3 }, function( k, v ) {\n\t\tseen.push( v );\n\t\treturn false;\n\t} );\n\tassert.deepEqual( seen, [ 1 ], \"Broken object iteration\" );\n\n\tseen = {\n\t\tZero: function() {},\n\t\tOne: function( a ) { a = a; },\n\t\tTwo: function( a, b ) { a = a; b = b; }\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"foo\", label + \"-argument function treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tseen[ i ].foo = \"bar\";\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = {\n\t\t\"undefined\": undefined,\n\t\t\"null\": null,\n\t\t\"false\": false,\n\t\t\"true\": true,\n\t\t\"empty string\": \"\",\n\t\t\"nonempty string\": \"string\",\n\t\t\"string \\\"0\\\"\": \"0\",\n\t\t\"negative\": -1,\n\t\t\"excess\": 1\n\t};\n\tcallback = function( k ) {\n\t\tassert.equal( k, \"length\", \"Object with \" + label + \" length treated like object\" );\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( { length: seen[ i ] }, callback );\n\t}\n\n\tseen = {\n\t\t\"sparse Array\": Array( 4 ),\n\t\t\"length: 1 plain object\": { length: 1, \"0\": true },\n\t\t\"length: 2 plain object\": { length: 2, \"0\": true, \"1\": true },\n\t\tNodeList: document.getElementsByTagName( \"html\" )\n\t};\n\tcallback = function( k ) {\n\t\tif ( seen[ label ] ) {\n\t\t\tdelete seen[ label ];\n\t\t\tassert.equal( k, \"0\", label + \" treated like array\" );\n\t\t\treturn false;\n\t\t}\n\t};\n\tfor ( i in seen ) {\n\t\tlabel = i;\n\t\tjQuery.each( seen[ i ], callback );\n\t}\n\n\tseen = false;\n\tjQuery.each( { length: 0 }, function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"length: 0 plain object treated like array\" );\n\n\tseen = false;\n\tjQuery.each( document.getElementsByTagName( \"asdf\" ), function() {\n\t\tseen = true;\n\t} );\n\tassert.ok( !seen, \"empty NodeList treated like array\" );\n\n\ti = 0;\n\tjQuery.each( document.styleSheets, function() {\n\t\ti++;\n\t} );\n\tassert.equal( i, document.styleSheets.length, \"Iteration over document.styleSheets\" );\n} );\n\nQUnit.test( \"jQuery.each/map(undefined/null,Function)\", function( assert ) {\n\tassert.expect( 1 );\n\n\ttry {\n\t\tjQuery.each( undefined, jQuery.noop );\n\t\tjQuery.each( null, jQuery.noop );\n\t\tjQuery.map( undefined, jQuery.noop );\n\t\tjQuery.map( null, jQuery.noop );\n\t\tassert.ok( true, \"jQuery.each/map( undefined/null, function() {} );\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"each/map must accept null and undefined values\" );\n\t}\n} );\n\nQUnit.test( \"JIT compilation does not interfere with length retrieval (gh-2145)\", function( assert ) {\n\tassert.expect( 4 );\n\n\tvar i;\n\n\t// Trigger JIT compilation of jQuery.each \u2013 and therefore isArraylike \u2013 in iOS.\n\t// Convince JSC to use one of its optimizing compilers\n\t// by providing code which can be LICM'd into nothing.\n\tfor ( i = 0; i < 1000; i++ ) {\n\t\tjQuery.each( [] );\n\t}\n\n\ti = 0;\n\tjQuery.each( { 1: \"1\", 2: \"2\", 3: \"3\" }, function( index ) {\n\t\tassert.equal( ++i, index, \"Iteration over object with solely \" +\n\t\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n\t} );\n\tassert.equal( i, 3, \"Iteration over object with solely \" +\n\t\t\"numeric indices (gh-2145 JIT iOS 8 bug)\" );\n} );\n\nQUnit.test( \"jQuery.makeArray\", function( assert ) {\n\tassert.expect( 15 );\n\n\tassert.equal( jQuery.makeArray( jQuery( \"html>*\" ) )[ 0 ].nodeName.toUpperCase(), \"HEAD\", \"Pass makeArray a jQuery object\" );\n\n\tassert.equal( jQuery.makeArray( document.getElementsByName( \"PWD\" ) ).slice( 0, 1 )[ 0 ].name, \"PWD\", \"Pass makeArray a nodelist\" );\n\n\tassert.equal( ( function() { return jQuery.makeArray( arguments ); } )( 1, 2 ).join( \"\" ), \"12\", \"Pass makeArray an arguments array\" );\n\n\tassert.equal( jQuery.makeArray( [ 1, 2, 3 ] ).join( \"\" ), \"123\", \"Pass makeArray a real array\" );\n\n\tassert.equal( jQuery.makeArray().length, 0, \"Pass nothing to makeArray and expect an empty array\" );\n\n\tassert.equal( jQuery.makeArray( 0 )[ 0 ], 0, \"Pass makeArray a number\" );\n\n\tassert.equal( jQuery.makeArray( \"foo\" )[ 0 ], \"foo\", \"Pass makeArray a string\" );\n\n\tassert.equal( jQuery.makeArray( true )[ 0 ].constructor, Boolean, \"Pass makeArray a boolean\" );\n\n\tassert.equal( jQuery.makeArray( document.createElement( \"div\" ) )[ 0 ].nodeName.toUpperCase(), \"DIV\", \"Pass makeArray a single node\" );\n\n\tassert.equal( jQuery.makeArray( { length:2, 0:\"a\", 1:\"b\" } ).join( \"\" ), \"ab\", \"Pass makeArray an array like map (with length)\" );\n\n\tassert.ok( !!jQuery.makeArray( document.documentElement.childNodes ).slice( 0, 1 )[ 0 ].nodeName, \"Pass makeArray a childNodes array\" );\n\n\t// function, is tricky as it has length\n\tassert.equal( jQuery.makeArray( function() { return 1;} )[ 0 ](), 1, \"Pass makeArray a function\" );\n\n\t//window, also has length\n\tassert.equal( jQuery.makeArray( window )[ 0 ], window, \"Pass makeArray the window\" );\n\n\tassert.equal( jQuery.makeArray( /a/ )[ 0 ].constructor, RegExp, \"Pass makeArray a regex\" );\n\n\t// Some nodes inherit traits of nodelists\n\tassert.ok( jQuery.makeArray( document.getElementById( \"form\" ) ).length >= 13,\n\t\t\"Pass makeArray a form (treat as elements)\" );\n} );\n\nQUnit.test( \"jQuery.inArray\", function( assert ) {\n\tassert.expect( 3 );\n\n\tassert.equal( jQuery.inArray( 0, false ), -1, \"Search in 'false' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, null ), -1, \"Search in 'null' as array returns -1 and doesn't throw exception\" );\n\n\tassert.equal( jQuery.inArray( 0, undefined ), -1, \"Search in 'undefined' as array returns -1 and doesn't throw exception\" );\n} );\n\nQUnit.test( \"jQuery.isEmptyObject\", function( assert ) {\n\tassert.expect( 2 );\n\n\tassert.equal( true, jQuery.isEmptyObject( {} ), \"isEmptyObject on empty object literal\" );\n\tassert.equal( false, jQuery.isEmptyObject( { a:1 } ), \"isEmptyObject on non-empty object literal\" );\n\n\t// What about this ?\n\t// equal(true, jQuery.isEmptyObject(null), \"isEmptyObject on null\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\tassert.expect( 23 );\n\n\tvar html, nodes;\n\n\tassert.deepEqual( jQuery.parseHTML(), [], \"Without arguments\" );\n\tassert.deepEqual( jQuery.parseHTML( undefined ), [], \"Undefined\" );\n\tassert.deepEqual( jQuery.parseHTML( null ), [], \"Null\" );\n\tassert.deepEqual( jQuery.parseHTML( false ), [], \"Boolean false\" );\n\tassert.deepEqual( jQuery.parseHTML( 0 ), [], \"Zero\" );\n\tassert.deepEqual( jQuery.parseHTML( true ), [], \"Boolean true\" );\n\tassert.deepEqual( jQuery.parseHTML( 42 ), [], \"Positive number\" );\n\tassert.deepEqual( jQuery.parseHTML( \"\" ), [], \"Empty string\" );\n\tassert.throws( function() {\n\t\tjQuery.parseHTML( \"<div></div>\", document.getElementById( \"form\" ) );\n\t}, \"Passing an element as the context raises an exception (context should be a document)\" );\n\n\tnodes = jQuery.parseHTML( jQuery( \"body\" )[ 0 ].innerHTML );\n\tassert.ok( nodes.length > 4, \"Parse a large html string\" );\n\tassert.ok( Array.isArray( nodes ), \"parseHTML returns an array rather than a nodelist\" );\n\n\thtml = \"<script>undefined()</script>\";\n\tassert.equal( jQuery.parseHTML( html ).length, 0, \"Ignore scripts by default\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve scripts when requested\" );\n\n\thtml += \"<div></div>\";\n\tassert.equal( jQuery.parseHTML( html )[ 0 ].nodeName.toLowerCase(), \"div\", \"Preserve non-script nodes\" );\n\tassert.equal( jQuery.parseHTML( html, true )[ 0 ].nodeName.toLowerCase(), \"script\", \"Preserve script position\" );\n\n\tassert.equal( jQuery.parseHTML( \"text\" )[ 0 ].nodeType, 3, \"Parsing text returns a text node\" );\n\tassert.equal( jQuery.parseHTML( \"\\t<div></div>\" )[ 0 ].nodeValue, \"\\t\", \"Preserve leading whitespace\" );\n\n\tassert.equal( jQuery.parseHTML( \" <div/> \" )[ 0 ].nodeType, 3, \"Leading spaces are treated as text nodes (#11290)\" );\n\n\thtml = jQuery.parseHTML( \"<div>test div</div>\" );\n\n\tassert.equal( html[ 0 ].parentNode.nodeType, 11, \"parentNode should be documentFragment\" );\n\tassert.equal( html[ 0 ].innerHTML, \"test div\", \"Content should be preserved\" );\n\n\tassert.equal( jQuery.parseHTML( \"<span><span>\" ).length, 1, \"Incorrect html-strings should not break anything\" );\n\tassert.equal( jQuery.parseHTML( \"<td><td>\" )[ 1 ].parentNode.nodeType, 11,\n\t\t\"parentNode should be documentFragment for wrapMap (variable in manipulation module) elements too\" );\n\tassert.ok( jQuery.parseHTML( \"<#if><tr><p>This is a test.</p></tr><#/if>\" ) || true, \"Garbage input should not cause error\" );\n} );\n\nQUnit.test( \"jQuery.parseHTML(<a href>) - gh-2965\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar html = \"<a href='example.html'></a>\",\n\t\thref = jQuery.parseHTML( html )[ 0 ].href;\n\n\tassert.ok( /\\/example\\.html$/.test( href ), \"href is not lost after parsing anchor\" );\n} );\n\nif ( jQuery.support.createHTMLDocument ) {\n\tQUnit.test( \"jQuery.parseHTML\", function( assert ) {\n\t\tvar done = assert.async();\n\t\tassert.expect( 1 );\n\n\t\tGlobals.register( \"parseHTMLError\" );\n\n\t\tjQuery.globalEval( \"parseHTMLError = false;\" );\n\t\tjQuery.parseHTML( \"<img src=x onerror='parseHTMLError = true'>\" );\n\n\t\twindow.setTimeout( function() {\n\t\t\tassert.equal( window.parseHTMLError, false, \"onerror eventhandler has not been called.\" );\n\t\t\tdone();\n\t\t}, 2000 );\n\t} );\n}\n\nQUnit.test( \"jQuery.parseXML\", function( assert ) {\n\tassert.expect( 8 );\n\n\tvar xml, tmp;\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>A <b>well-formed</b> xml string</p>\" );\n\t\ttmp = xml.getElementsByTagName( \"p\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<p> present in document\" );\n\t\ttmp = tmp.getElementsByTagName( \"b\" )[ 0 ];\n\t\tassert.ok( !!tmp, \"<b> present in document\" );\n\t\tassert.strictEqual( tmp.childNodes[ 0 ].nodeValue, \"well-formed\", \"<b> text is as expected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e, undefined, \"unexpected error\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"<p>Not a <<b>well-formed</b> xml string</p>\" );\n\t\tassert.ok( false, \"invalid xml not detected\" );\n\t} catch ( e ) {\n\t\tassert.strictEqual( e.message, \"Invalid XML: <p>Not a <<b>well-formed</b> xml string</p>\", \"invalid xml detected\" );\n\t}\n\ttry {\n\t\txml = jQuery.parseXML( \"\" );\n\t\tassert.strictEqual( xml, null, \"empty string => null document\" );\n\t\txml = jQuery.parseXML();\n\t\tassert.strictEqual( xml, null, \"undefined string => null document\" );\n\t\txml = jQuery.parseXML( null );\n\t\tassert.strictEqual( xml, null, \"null string => null document\" );\n\t\txml = jQuery.parseXML( true );\n\t\tassert.strictEqual( xml, null, \"non-string => null document\" );\n\t} catch ( e ) {\n\t\tassert.ok( false, \"empty input throws exception\" );\n\t}\n} );\n\ntestIframe(\n\t\"Conditional compilation compatibility (#13274)\",\n\t\"core/cc_on.html\",\n\tfunction( assert, jQuery, window, document, cc_on, errors ) {\n\t\tassert.expect( 3 );\n\t\tassert.ok( true, \"JScript conditional compilation \" + ( cc_on ? \"supported\" : \"not supported\" ) );\n\t\tassert.deepEqual( errors, [], \"No errors\" );\n\t\tassert.ok( jQuery(), \"jQuery executes\" );\n\t}\n);\n\n// iOS7 doesn't fire the load event if the long-loading iframe gets its source reset to about:blank.\n// This makes this test fail but it doesn't seem to cause any real-life problems so blacklisting\n// this test there is preferred to complicating the hard-to-test core/ready code further.\nif ( !/iphone os 7_/i.test( navigator.userAgent ) ) {\n\ttestIframe(\n\t\t\"document ready when jQuery loaded asynchronously (#13655)\",\n\t\t\"core/dynamic_ready.html\",\n\t\tfunction( assert, jQuery, window, document, ready ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.equal( true, ready, \"document ready correctly fired when jQuery is loaded after DOMContentLoaded\" );\n\t\t}\n\t);\n}\n\ntestIframe(\n\t\"Tolerating alias-masked DOM properties (#14074)\",\n\t\"core/aliased.html\",\n\tfunction( assert, jQuery, window, document, errors ) {\n\t\tassert.expect( 1 );\n\t\tassert.deepEqual( errors, [], \"jQuery loaded\" );\n\t}\n);\n\ntestIframe(\n\t\"Don't call window.onready (#14802)\",\n\t\"core/onready.html\",\n\tfunction( assert, jQuery, window, document, error ) {\n\t\tassert.expect( 1 );\n\t\tassert.equal( error, false, \"no call to user-defined onready\" );\n\t}\n);\n\nQUnit.test( \"Iterability of jQuery objects (gh-1693)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar i, elem, result;\n\n\tif ( typeof Symbol === \"function\" ) {\n\n\t\telem = jQuery( \"<div></div><span></span><a></a>\" );\n\t\tresult = \"\";\n\n\t\ttry {\n\t\t\teval( \"for ( i of elem ) { result += i.nodeName; }\" );\n\t\t} catch ( e ) {}\n\t\tassert.equal( result, \"DIVSPANA\", \"for-of works on jQuery objects\" );\n\t} else {\n\t\tassert.ok( true, \"The browser doesn't support Symbols\" );\n\t}\n} );\n\ntestIframe(\n\t\"Iterability of jQuery objects with Symbol polyfill (gh-1693)\",\n\t\"core/jquery-iterability-transpiled.html\",\n\tfunction( assert, jQuery, window, document, testString ) {\n\t\tassert.expect( 1 );\n\n\t\tassert.strictEqual( testString, \"DIVSPANA\",\n\t\t\t\"for-of works on jQuery objects with Symbol polyfilled\" );\n\t}\n);\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (original)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar message;\n\n\tthis.sandbox.stub( window, \"setTimeout\", function( fn ) {\n\t\ttry {\n\t\t\tfn();\n\t\t} catch ( error ) {\n\t\t\tmessage = error.message;\n\t\t}\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n\tassert.strictEqual(\n\t\tmessage,\n\t\t\"Error in jQuery ready\",\n\t\t\"The error should have been thrown in a timeout\"\n\t);\n} );\n\nQUnit[ jQuery.Deferred ? \"test\" : \"skip\" ]( \"jQuery.readyException (custom)\", function( assert ) {\n\tassert.expect( 1 );\n\n\tvar done = assert.async();\n\n\tthis.sandbox.stub( jQuery, \"readyException\", function( error ) {\n\t\tassert.strictEqual(\n\t\t\terror.message,\n\t\t\t\"Error in jQuery ready\",\n\t\t\t\"The custom jQuery.readyException should have been called\"\n\t\t);\n\t\tdone();\n\t} );\n\n\tjQuery( function() {\n\t\tthrow new Error( \"Error in jQuery ready\" );\n\t} );\n} );\n"], "filenames": ["src/core.js", "test/unit/core.js"], "buggy_code_start_loc": [160, 1064], "buggy_code_end_loc": [163, 1064], "fixing_code_start_loc": [161, 1065], "fixing_code_end_loc": [164, 1072], "type": "CWE-1321", "message": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype.", "other": {"cve": {"id": "CVE-2019-11358", "sourceIdentifier": "cve@mitre.org", "published": "2019-04-20T00:29:00.247", "lastModified": "2022-04-06T18:07:47.447", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution. If an unsanitized source object contained an enumerable __proto__ property, it could extend the native Object.prototype."}, {"lang": "es", "value": "jQuery, en versiones anteriores a 3.4.0, como es usado en Drupal, Backdrop CMS, y otros productos, maneja mal jQuery.extend(true, {}, ...) debido a la contaminaci\u00f3n de Object.prototype. Si un objeto fuente no sanitizado conten\u00eda una propiedad enumerable __proto__, podr\u00eda extender el Object.prototype nativo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jquery:jquery:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.4.0", "matchCriteriaId": "D2D193C7-2259-492F-8B85-E74C57A7426A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0", "versionEndExcluding": "7.66", "matchCriteriaId": "FC5AB839-4DAC-45E7-9D0B-B528F6D12043"}, {"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.5.0", "versionEndExcluding": "8.5.15", "matchCriteriaId": "9106BF81-B898-4EB0-B63C-9919D3B22260"}, {"vulnerable": true, "criteria": "cpe:2.3:a:drupal:drupal:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.6.0", "versionEndExcluding": "8.6.15", "matchCriteriaId": "9B37281E-9B44-42A5-AE0A-17CE6770995C"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:backdropcms:backdrop:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndExcluding": "1.11.9", "matchCriteriaId": "E75C32CE-3FA9-4DC2-A22A-4A841D4911EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:backdropcms:backdrop:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.12.0", "versionEndExcluding": "1.12.6", "matchCriteriaId": "F6F204D6-2C8A-4517-8E3C-328ED0D9D3E4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:28:*:*:*:*:*:*:*", "matchCriteriaId": "DC1BD7B7-6D88-42B8-878E-F1318CA5FCAF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:29:*:*:*:*:*:*:*", "matchCriteriaId": "D100F7CE-FC64-4CC6-852A-6136D72DA419"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opensuse:backports_sle:15.0:sp1:*:*:*:*:*:*", "matchCriteriaId": "40513095-7E6E-46B3-B604-C926F1BA3568"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:netapp:oncommand_system_manager:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0", "versionEndIncluding": "3.1.3", "matchCriteriaId": "B9273745-6408-4CD3-94E8-9385D4F5FE69"}, {"vulnerable": true, "criteria": "cpe:2.3:a:netapp:snapcenter:-:*:*:*:*:*:*:*", "matchCriteriaId": "BDFB1169-41A0-4A86-8E4F-FDA9730B1E94"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:cloudforms:4.7:*:*:*:*:*:*:*", "matchCriteriaId": "04AC556D-D511-4C4C-B9FB-A089BB2FEFD5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:virtualization_manager:4.3:*:*:*:*:*:*:*", "matchCriteriaId": "9FA1A18F-D997-4121-A01B-FD9B3BF266CF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.1:*:*:*:*:*:*:*", "matchCriteriaId": "230E2167-9107-4994-8328-295575E17DF6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A079FD6E-3BB0-4997-9A8E-6F8FEC89887A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "900D2344-5160-42A0-8C49-36DBC7FF3D87"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4AA4B21-1BA9-4ED8-B9EA-558AF8655D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9C3F9EE5-FCFC-45B8-9F57-C05D42EE0FF0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_express:*:*:*:*:*:*:*:*", "versionEndExcluding": "19.1", "matchCriteriaId": "90CFEC52-A574-493E-A2AC-0EC21851BBFA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_service_level_management:13.2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "3665B8A2-1F1A-490F-B01D-5B3455A6A539"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_service_level_management:13.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A8577D60-A711-493D-9246-E49D0E2B07E0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:12.5.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "17EA8B91-7634-4636-B647-1049BA7CA088"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "5B4DF46F-DBCC-41F2-A260-F83A14838F23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "5E5BC0B6-0C66-4FC5-81F0-6AC9BEC0813E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.2.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "10F17843-32EA-4C31-B65C-F424447BEF7B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.3:*:*:*:*:*:*:*", "matchCriteriaId": "C784CEE8-F071-4583-A72D-F46C7C95FEC0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:application_testing_suite:13.3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "A125E817-F974-4509-872C-B71933F42AD1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "BBE7BF09-B89C-4590-821E-6C0587E096B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.2:*:*:*:*:*:*:*", "matchCriteriaId": "ADAE8A71-0BCD-42D5-B38C-9B2A27CC1E6B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:18.3:*:*:*:*:*:*:*", "matchCriteriaId": "E7231D2D-4092-44F3-B60A-D7C9ED78AFDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:19.1:*:*:*:*:*:*:*", "matchCriteriaId": "F7BDFC10-45A0-46D8-AB92-4A5E2C1C76ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:19.2:*:*:*:*:*:*:*", "matchCriteriaId": "18127694-109C-4E7E-AE79-0BA351849291"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_digital_experience:20.1:*:*:*:*:*:*:*", "matchCriteriaId": "33F68878-BC19-4DB8-8A72-BD9FE3D0ACEC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_enterprise_collections:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.7.0", "versionEndIncluding": "2.8.0", "matchCriteriaId": "660DB443-6250-4956-ABD1-C6A522B8DCCA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_platform:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndIncluding": "2.10.0", "matchCriteriaId": "3625D477-1338-46CB-90B1-7291D617DC39"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:bi_publisher:5.5.0.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "5CD806C1-CC17-47BD-8BB0-9430C4253BC7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:bi_publisher:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9DC56004-4497-4CDD-AE76-5E3DFAE170F0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:bi_publisher:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "274A0CF5-41E8-42E0-9931-F7372A65B9C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:big_data_discovery:1.6:*:*:*:*:*:*:*", "matchCriteriaId": "8C4C38FF-B75B-4DF1-BFB3-C91BDD10D90E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:business_process_management_suite:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E869C417-C0E6-4FC3-B406-45598A1D1906"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:business_process_management_suite:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "DFEFE2C0-7B98-44F9-B3AD-D6EC607E90DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_analytics:12.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "55D98C27-734F-490B-92D5-251805C841B9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_application_session_controller:3.8m0:*:*:*:*:*:*:*", "matchCriteriaId": "B796AC70-A220-48D8-B8CD-97CF57227962"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:7.5:*:*:*:*:*:*:*", "matchCriteriaId": "E6039DC7-08F2-4DD9-B5B5-B6B22DD2409F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:7.5.0.23.0:*:*:*:*:*:*:*", "matchCriteriaId": "790A89FD-6B86-49AE-9B4F-AE7262915E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:12.0:*:*:*:*:*:*:*", "matchCriteriaId": "7231AF76-3D46-41C4-83E9-6E9E12940BD9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_billing_and_revenue_management:12.0.0.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E39D442D-1997-49AF-8B02-5640BE2A26CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router:8.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A9317C01-22AA-452B-BBBF-5FAFFFB8BEA4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router:8.1:*:*:*:*:*:*:*", "matchCriteriaId": "C4534CF9-D9FD-4936-9D8C-077387028A05"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router:8.2:*:*:*:*:*:*:*", "matchCriteriaId": "D60384BD-284C-4A68-9EEF-0FAFDF0C21F3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_diameter_signaling_router:8.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "FCA44E38-EB8C-4E2D-8611-B201F47520E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_eagle_application_processor:*:*:*:*:*:*:*:*", "versionStartIncluding": "16.1.0", "versionEndIncluding": "16.4.0", "matchCriteriaId": "1A0E3537-CB5A-40BF-B42C-CED9211B8892"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_element_manager:8.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "0C57FD3A-0CC1-4BA9-879A-8C4A40234162"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_element_manager:8.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "698FB6D0-B26F-4760-9B9B-1C65FBFF2126"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_element_manager:8.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "4F1D64BC-17BF-4DAE-B5FC-BC41F9C12DFD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_interactive_session_recorder:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0", "versionEndIncluding": "6.4", "matchCriteriaId": "4E16A16E-BFA3-4D17-9B4E-B42ADE725356"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_operations_monitor:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.1", "versionEndIncluding": "4.3", "matchCriteriaId": "9264AF8A-3819-40E5-BBCB-3B6C95A0D828"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_operations_monitor:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "D52F557F-D0A0-43D3-85F1-F10B6EBFAEDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_operations_monitor:4.0:*:*:*:*:*:*:*", "matchCriteriaId": "E3517A27-E6EE-497C-9996-F78171BBE90F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_operations_monitor:4.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "1C3CE8D5-6404-4CEB-953E-7B7961BC14D6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_services_gatekeeper:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "062E4E7C-55BB-46F3-8B61-5A663B565891"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_report_manager:8.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "DB43DFD4-D058-4001-BD19-488E059F4532"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_report_manager:8.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "086E2E5C-44EB-4C07-B298-C04189533996"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_report_manager:8.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "AA77B994-3872-4059-854B-0974AA5593D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_route_manager:8.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "5682DAEB-3810-4541-833A-568C868BCE0B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_route_manager:8.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "01BC9AED-F81D-4344-AD97-EEF19B6EA8C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_session_route_manager:8.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "8198E762-9AD9-452B-B1AF-516E52436B7D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_unified_inventory_management:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "D0D177F6-25D9-4696-8528-3F57D91BAC12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_unified_inventory_management:7.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "539DA24F-E3E0-4455-84C6-A9D96CD601B3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_webrtc_session_controller:7.2:*:*:*:*:*:*:*", "matchCriteriaId": "726DB59B-00C7-444E-83F7-CB31032482AB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:diagnostic_assistant:2.12.36:*:*:*:*:*:*:*", "matchCriteriaId": "80B6D265-9D72-45C3-AA2C-5B186E23CDAF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "AB654DFA-FEF9-4D00-ADB0-F3F2B6ACF13E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "37209C6F-EF99-4D21-9608-B3A06D283D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B095CC03-7077-4A58-AB25-CC5380CDCE5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_session_border_controller:8.4:*:*:*:*:*:*:*", "matchCriteriaId": "7015A8CB-8FA6-423E-8307-BD903244F517"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.3.3", "versionEndIncluding": "7.3.5", "matchCriteriaId": "B5BC32AA-78BE-468B-B92A-5A0FFFA970FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.2", "versionEndIncluding": "8.1.0", "matchCriteriaId": "FA699B16-5100-4485-9BB7-85B247743B17"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "A7E00BA1-E643-45D9-97D3-EF12C29DB262"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_reconciliation_framework:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "2ACA29E6-F393-46E5-B2B3-9158077819A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "703DA91D-3440-4C67-AA20-78F71B1376DD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "39B8DFFF-B037-4F29-8C8E-F4BBC3435199"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_balance_sheet_planning:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "4D0D0EAC-300D-44B1-AD4A-93A368D5DBA1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "9CB2A0EB-E1C7-4206-8E64-D2EE77C1CD86"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_basic:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "8A566893-8DCF-49E4-93D0-0ACCEFD70D3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "A180039F-22C3-458E-967D-E07C61C69FAF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_basel_regulatory_capital_internal_ratings_based_approach:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "00E5D719-249D-48B8-BAFC-1E14D250B3F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_foundation:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.8", "matchCriteriaId": "2C5F6B8C-2044-4E68-98BD-37B0CD108434"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_governance_for_us_regulatory_reporting:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.6", "versionEndIncluding": "8.0.9", "matchCriteriaId": "672949B4-1989-4AA7-806F-EEC07D07F317"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.5", "versionEndIncluding": "8.0.7", "matchCriteriaId": "73E05211-8415-42FB-9B93-959EB03B090B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "9476D1DA-C8A8-40A0-94DD-9B46C05FD461"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_enterprise_financial_performance_analytics:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "7DEE0A37-6B9A-43FE-B3E0-8AB5CA368425"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_enterprise_financial_performance_analytics:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "CF6A5433-A7D9-4521-9D28-E7684FB76E5B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "AC15899F-8528-4D10-8CD5-F67121D7F293"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F727AAC6-6D9F-4B28-B07C-6A93916C43A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "30657F1B-D1FC-4EE6-9854-18993294A01D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "51C17460-D326-4525-A7D1-0AED53E75E18"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "30F0991A-8507-48C4-9A8E-DE5B28C46A99"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_institutional_performance_analytics:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A00142E6-EEB3-44BD-AB0D-0E5C5640557F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.0.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "00ED7CB0-96F7-4089-9047-A3AC241139C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "005E458D-4059-4E20-A620-B25DEBCE40C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "74008AEE-589F-423E-8D77-EA54C36D776A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.5.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "FD85DB06-692F-4E81-BEB7-1E41B438D1FD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "6149C89E-0111-4CF9-90CA-0662D2F75E04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "6CDDF6CA-6441-4606-9D2F-22A67BA46978"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "6FA0B592-A216-4320-A4FE-ABCA6B3E7D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_measurement_and_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "CEA4D6CF-D54A-40DF-9B70-E13392D0BE19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.2", "versionEndIncluding": "8.0.7", "matchCriteriaId": "DB6C521C-F104-4E26-82F2-6F63F94108BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "397B1A24-7C95-4A73-8363-4529A7F6CFCC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "402B8642-7ACC-4F42-87A9-AB4D3B581751"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "EF6D5112-4055-4F89-A5B3-0DCB109481B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "D262848E-AA24-4057-A747-6221BA22ADF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_price_creation_and_discovery:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "2163B848-D684-4B17-969A-36E0866C5749"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "00615085-65B2-4211-A766-551842B3356F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "F8E565DA-91BE-44FC-A28F-579BE8D2281A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_de_nederlandsche_bank:8.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "51DB64CA-8953-43BB-AEA9-D0D7E91E9FE3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_european_banking_authority:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "669BA301-4D29-4692-823B-CDEDD2A5BD18"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_european_banking_authority:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "419559E6-5441-4335-8FE1-6ADAAD9355DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_regulatory_reporting_for_us_federal_reserve:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "036E4450-53C6-4322-9C7D-91DA94C9A3C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_retail_customer_analytics:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.6", "matchCriteriaId": "89C26226-A3CF-4D36-BBDA-80E298E0A51F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_retail_performance_analytics:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "F67D1332-621E-4756-B205-97A5CF670A19"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_retail_performance_analytics:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "6748C867-0A52-452B-B4D6-DA80396F4152"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_revenue_management_and_billing:2.4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A64B5C4C-DF69-4292-A534-EDC5955CDDAE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_revenue_management_and_billing:2.4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "C7141C66-0384-4BA1-A788-91DEB7EF1361"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:fusion_middleware_mapviewer:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "06E586B3-3434-4B08-8BE3-16C528642CA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "26A1F27B-C3AC-4D13-B9B2-2D6CF65D07BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "B95E8056-51D8-4390-ADE3-661B7AE1D7CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "4EFC8DAB-E5D8-420C-B800-08F8C5BF3F4F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9059A907-508B-4844-8D7B-0FA68C0DF6A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A5ACB1D2-69CE-4B7D-9B51-D8F80E541631"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "B1F726C6-EA5A-40FF-8809-4F48E4AE6976"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "CD7C26E3-BB0D-4218-8176-319AEA2925C8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "DD67072F-3CFC-480D-9360-81A05D523318"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "652E762A-BCDD-451E-9DE3-F1555C1E4B16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_guest_access:4.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "1A3DC116-2844-47A1-BEC2-D0675DD97148"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_guest_access:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "E0F1DF3E-0F2D-4EFC-9A3E-F72149C8AE94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_materials_control:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "2AC63D10-2326-4542-B345-31D45B9A7408"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:*:*:*:*:*:*:*:*", "versionStartIncluding": "19.1.0", "versionEndIncluding": "19.1.2", "matchCriteriaId": "7BFD7783-BE15-421C-A550-7FE15AB53ABF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "1F7BF047-03C5-4A60-B718-E222B16DBF41"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_simphony:18.2:*:*:*:*:*:*:*", "matchCriteriaId": "E3A73D81-3E1A-42E6-AB96-835CDD5905F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:identity_manager:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "AA10CA55-C155-4DAD-A109-87A80116F1A1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_accounting_analyzer:8.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "66136D6D-FC52-40DB-B7B6-BA8B7758CE16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "06514F46-544B-4404-B45C-C9584EBC3131"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_allocation_manager_for_enterprise_profitability:8.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "3BD4BF9A-BF38-460D-974D-5B3255AAF946"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_data_foundation:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "92D538A5-819D-4DF7-85FE-4D4EB6E230E0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_ifrs_17_analyzer:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "AEDA3A88-002B-4700-9277-3187C0A3E4B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_ifrs_17_analyzer:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "BE886BC5-F807-4627-8233-2290817FE205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0.0", "versionEndIncluding": "5.6.0.0", "matchCriteriaId": "B47C73D0-BE89-4D87-8765-12C507F13AFF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.6.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "5B8AA91A-1880-43CD-938D-48EF58ACF2CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_performance_insight:8.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "E6B5D7DB-C70E-4926-819F-E39B79F4D0C5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jd_edwards_enterpriseone_tools:9.2:*:*:*:*:*:*:*", "matchCriteriaId": "41684398-18A4-4DC6-B8A2-3EBAA0CBF9A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "A7506589-9B3B-49BA-B826-774BFDCC45B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "228DA523-4D6D-48C5-BDB0-DB1A60F23F8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "335AB6A7-3B1F-4FA8-AF08-7D64C16C4B04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper_and_adf:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "37EB4A1D-A875-46B7-BEB0-694D1F400CF7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper_and_adf:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2233F287-6B9F-4C8A-A724-959DD3AD29AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper_and_adf:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "2381FAB6-8D36-4389-98E4-74F3462654BA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:knowledge:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.6.0", "versionEndIncluding": "8.6.3", "matchCriteriaId": "9E587602-BA7D-4087-BE29-ACE0B01BD590"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.55:*:*:*:*:*:*:*", "matchCriteriaId": "45CB30A1-B2C9-4BF5-B510-1F2F18B60C64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.56:*:*:*:*:*:*:*", "matchCriteriaId": "D0A735B4-4F3C-416B-8C08-9CB21BAD2889"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.57:*:*:*:*:*:*:*", "matchCriteriaId": "7E1E416B-920B-49A0-9523-382898C2979D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.58:*:*:*:*:*:*:*", "matchCriteriaId": "D9DB4A14-2EF5-4B54-95D2-75E6CF9AA0A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.15", "matchCriteriaId": "84668F58-6511-4E53-8213-13B440F454C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:10.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "9D8B3B57-73D6-4402-987F-8AE723D52F94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:12.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "62BF043E-BCB9-433D-BA09-7357853EE127"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation:12.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "3F26FB80-F541-4B59-AC3C-633F49388B59"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_connector_for_siebel:10.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "0DB5E2C7-9C68-4D3B-95AD-9CBF65DE1E94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:policy_automation_for_mobile_devices:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.2.0", "versionEndIncluding": "12.2.15", "matchCriteriaId": "12D3B2F0-E9C7-432B-91C6-A6C329A84B78"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:*:*:*:*:*:*:*:*", "versionStartIncluding": "16.2.0", "versionEndIncluding": "16.2.11", "matchCriteriaId": "06CF27F6-ADC1-480C-9D2E-2BD1E7330C32"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:*:*:*:*:*:*:*:*", "versionStartIncluding": "17.12.0", "versionEndIncluding": "17.12.7", "matchCriteriaId": "E4AA3854-C9FD-4287-85A0-EE7907D1E1ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:*:*:*:*:*:*:*:*", "versionStartIncluding": "18.8.0", "versionEndIncluding": "18.8.9", "matchCriteriaId": "E8CD4002-F310-4BE4-AF7B-4BCCB17DA6FF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:*:*:*:*:*:*:*:*", "versionStartIncluding": "19.12.0", "versionEndIncluding": "19.12.4", "matchCriteriaId": "69112C56-7747-4E11-A938-85A481529F58"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:15.2.18:*:*:*:*:*:*:*", "matchCriteriaId": "D9E628E7-6CC5-418C-939F-8EEA69B222A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:*:*:*:*:*:*:*:*", "versionStartIncluding": "17.7", "versionEndIncluding": "17.12", "matchCriteriaId": "08FA59A8-6A62-4B33-8952-D6E658F8DAC9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.1:*:*:*:*:*:*:*", "matchCriteriaId": "D55A54FD-7DD1-49CD-BE81-0BE73990943C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.2:*:*:*:*:*:*:*", "matchCriteriaId": "82EB08C0-2D46-4635-88DF-E54F6452D3A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:18.8:*:*:*:*:*:*:*", "matchCriteriaId": "202AD518-2E9B-4062-B063-9858AE1F9CE2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:real-time_scheduler:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0.1", "versionEndIncluding": "2.3.0.3", "matchCriteriaId": "99579D88-27C0-4B93-B2F4-69B6781BC4BD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:rest_data_services:11.2.0.4:*:*:*:-:*:*:*", "matchCriteriaId": "36FC547E-861A-418C-A314-DA09A457B13A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:rest_data_services:12.1.0.2:*:*:*:-:*:*:*", "matchCriteriaId": "DF9FEE51-50E3-41E9-AA0D-272A640F85CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:rest_data_services:12.2.0.1:*:*:*:-:*:*:*", "matchCriteriaId": "E69E905F-2E1A-4462-9082-FF7B10474496"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:rest_data_services:18c:*:*:*:-:*:*:*", "matchCriteriaId": "0F9B692C-8986-4F91-9EF4-2BB1E3B5C133"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:rest_data_services:19c:*:*:*:-:*:*:*", "matchCriteriaId": "C5F4C40E-3ABC-4C59-B226-224262DCFF37"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "31C7EEA3-AA72-48DA-A112-2923DBB37773"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_back_office:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "F0735989-13BD-40B3-B954-AC0529C5B53D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_central_office:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "83B5F416-56AE-4DC5-BCFF-49702463E716"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_central_office:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "58405263-E84C-4071-BB23-165D49034A00"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_insights:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "AD4AB77A-E829-4603-AF6A-97B9CD0D687F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_insights:16.0:*:*:*:*:*:*:*", "matchCriteriaId": "6DE15D64-6F49-4F43-8079-0C7827384C86"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_management_and_segmentation_foundation:18.0:*:*:*:*:*:*:*", "matchCriteriaId": "36E16AEF-ACEB-413C-888C-8D250F65C180"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_management_and_segmentation_foundation:19.0:*:*:*:*:*:*:*", "matchCriteriaId": "9EFAEA84-E376-40A2-8C9F-3E0676FEC527"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_point-of-service:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "237968A4-AE89-44DC-8BA3-D9651F88883D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_point-of-service:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "E13DF2AE-F315-4085-9172-6C8B21AF1C9E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.0:*:*:*:*:*:*:*", "matchCriteriaId": "959316A8-C3AF-4126-A242-3835ED0AD1E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_returns_management:14.1:*:*:*:*:*:*:*", "matchCriteriaId": "BDB925C6-2CBC-4D88-B9EA-F246F4F7A206"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:service_bus:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "1E2B6C75-3EB5-4BCE-B5D1-39DD3DE94139"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:service_bus:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "70BEF219-45EC-4A53-A815-42FBE20FC300"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:service_bus:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "1EA2023A-1AD6-41FE-A214-9D1F6021D6B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_mobile_applications:*:*:*:*:*:*:*:*", "versionEndIncluding": "19.8", "matchCriteriaId": "2AA4E307-D5FA-461D-9809-BDD123AE7B74"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_ui_framework:20.8:*:*:*:*:*:*:*", "matchCriteriaId": "98B9198C-11DF-4E80-ACFC-DC719CED8C7E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:storagetek_tape_analytics_sw_tool:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "587EE4F3-E7AC-4A69-9476-0E71E75EE7A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:system_utilities:19.1:*:*:*:*:*:*:*", "matchCriteriaId": "A7961BBD-6411-4D32-947D-3940221C235B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:tape_library_acsls:8.5:*:*:*:*:*:*:*", "matchCriteriaId": "162C6FD9-AEC2-4EBA-A163-3054840B8ACE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:tape_library_acsls:8.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "A6879D52-A44E-4DF8-8A3A-3613822EB469"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:transportation_management:1.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5AAF89C1-AAC2-449C-90C1-895F5F8843B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_mobile_workforce_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0.1", "versionEndIncluding": "2.3.0.3", "matchCriteriaId": "2F2D3FA0-BD9D-4828-AE36-1CE43D9B07D1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:webcenter_sites:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "D551CAB1-4312-44AA-BDA8-A030817E153A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:10.3.6.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B40B13B7-68B3-4510-968C-6A730EB46462"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "C93CC705-1F8C-4870-99E6-14BF264C3811"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F14A818F-AA16-4438-A3E4-E64C9287AC66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "4A5BB153-68E0-4DDA-87D1-0D9AB7F0A418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:14.1.1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "04BCDC24-4A21-473C-8733-0D9CFB38A752"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joomla:joomla\\!:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndIncluding": "3.9.4", "matchCriteriaId": "C63557DE-E65B-46F4-99C4-247EACCB7BBA"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00006.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-08/msg00025.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2019/May/10", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2019/May/11", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2019/May/13", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2019/06/03/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/108023", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "https://access.redhat.com/errata/RHBA-2019:1570", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:1456", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:2587", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:3023", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2019:3024", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://backdropcms.org/security/backdrop-sa-core-2019-009", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://blog.jquery.com/2019/04/10/jquery-3-4-0-released/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jquery/jquery/pull/4333", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/08720ef215ee7ab3386c05a1a90a7d1c852bf0706f176a7816bf65fc@%3Ccommits.airflow.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/5928aa293e39d248266472210c50f176cac1535220f2486e6a7fa844@%3Ccommits.airflow.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/6097cdbd6f0a337bedd9bb5cc441b2d525ff002a96531de367e4259f@%3Ccommits.airflow.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/88fb0362fd40e5b605ea8149f63241537b8b6fb5bfa315391fc5cbb7@%3Ccommits.airflow.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/b736d0784cf02f5a30fbb4c5902762a15ad6d47e17e2c5a17b7d6205@%3Ccommits.airflow.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/bcce5a9c532b386c68dab2f6b3ce8b0cc9b950ec551766e76391caa3@%3Ccommits.nifi.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r2041a75d3fc09dec55adfd95d598b38d22715303f65c997c054844c9@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r2baacab6e0acb5a2092eb46ae04fd6c3e8277b4fd79b1ffb7f3254fa@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r38f0d1aa3c923c22977fe7376508f030f22e22c1379fbb155bf29766@%3Cdev.syncope.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r41b5bfe009c845f67d4f68948cc9419ac2d62e287804aafd72892b08@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r7aac081cbddb6baa24b75e74abf0929bf309b176755a53e3ed810355@%3Cdev.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r7d64895cc4dff84d0becfc572b20c0e4bf9bfa7b10c6f5f73e783734@%3Cdev.storm.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/r7e8ebccb7c022e41295f6fdb7b971209b83702339f872ddd8cf8bf73@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rac25da84ecdcd36f6de5ad0d255f4e967209bbbebddb285e231da37d@%3Cissues.flink.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.apache.org/thread.html/rca37935d661f4689cb4119f1b3b224413b22be161b678e6e6ce0c69b@%3Ccommits.nifi.apache.org%3E", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/05/msg00006.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/05/msg00029.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/02/msg00024.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4UOAZIFCSZ3ENEFOR5IXX6NFAD3HV7FA/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5IABSKTYZ5JUGL735UKGXL5YPRYOPUYI/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KYH3OAGR2RTCHRA5NOKX2TES7SNQMWGO/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QV3PKZC3PQCO3273HAT76PAQZFBEO4KP/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/RLXRX23725JL366CNZGJZ7AQQB7LHQ6F/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WZW27UCJ5CYFL4KFFFMYMIBNMIU2ALG5/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2019/Apr/32", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2019/Jun/12", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2019/May/18", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20190919-0001/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-JQUERY-174006", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4434", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4460", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.drupal.org/sa-core-2019-006", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com//security-alerts/cpujul2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuApr2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2020.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2020.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2022.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujul2020.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuoct2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.privacy-wise.com/mitigating-cve-2019-11358-in-old-versions-of-jquery/", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.synology.com/security/advisory/Synology_SA_19_19", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2019-08", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.tenable.com/security/tns-2020-02", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b"}}