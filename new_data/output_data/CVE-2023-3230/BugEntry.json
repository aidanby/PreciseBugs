{"buggy_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n/**\n * Downloadable service management.\n */\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Upload file to product. Uses $_FILES array so make sure your form is\n     * enctype=\"multipart/form-data\".\n     *\n     * @param int  $id        - product id\n     * @param file $file_data - <input type=\"file\" name=\"file_data\" /> field content\n     *\n     * @return bool\n     */\n    public function upload($data)\n    {\n        $required = [\n            'id' => 'Product ID is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('Product', $data['id'], 'Product not found');\n\n        if (!isset($_FILES['file_data'])) {\n            throw new \\Box_Exception('File was not uploaded');\n        }\n\n        $service = $this->getService();\n\n        return $service->uploadProductFile($model);\n    }\n\n    /**\n     * Update downloadable product order with new file.\n     * This will change only this order file.\n     *\n     * Uses $_FILES array so make sure your form is\n     * enctype=\"multipart/form-data\"\n     *\n     * @param int  $order_id  - order id\n     * @param file $file_data - <input type=\"file\" name=\"file_data\" /> field content\n     *\n     * @return bool\n     */\n    public function update($data)\n    {\n        $required = [\n            'order_id' => 'Order ID is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $order = $this->di['db']->getExistingModelById('ClientOrder', $data['order_id'], 'Order not found');\n\n        $orderService = $this->di['mod_service']('order');\n        $serviceDownloadable = $orderService->getOrderService($order);\n        if (!$serviceDownloadable instanceof \\Model_ServiceDownloadable) {\n            throw new \\Box_Exception('Order is not activated');\n        }\n\n        $service = $this->getService();\n\n        return $service->updateProductFile($serviceDownloadable, $order);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n/**\n * Downloadable service management.\n */\nclass Client extends \\Api_Abstract\n{\n    /**\n     * Use GET to call this method. Sends file attached to order.\n     * Sends file as attachment.\n     *\n     * @param int $order_id - downloadable service order id\n     *\n     * @return bool\n     */\n    public function send_file($data)\n    {\n        if (!isset($data['order_id'])) {\n            throw new \\Box_Exception('Order id is required');\n        }\n        $identity = $this->getIdentity();\n        $order = $this->di['db']->findOne('ClientOrder', 'id = :id AND client_id = :client_id', [':id' => $data['order_id'], ':client_id' => $identity->id]);\n        if (!$order instanceof \\Model_ClientOrder) {\n            throw new \\Box_Exception('Order not found');\n        }\n\n        $orderService = $this->di['mod_service']('order');\n        $s = $orderService->getOrderService($order);\n        if (!$s instanceof \\Model_ServiceDownloadable) {\n            throw new \\Box_Exception('Order is not activated');\n        }\n\n        $service = $this->getService();\n\n        return (bool) $service->sendFile($s);\n    }\n}\n", "<?php\n\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n\nclass ClientTest extends \\BBTestCase {\n    /**\n     * @var \\Box\\Mod\\Servicedownloadable\\Api\\Client\n     */\n    protected $api = null;\n\n    public function setup(): void\n    {\n        $this->api= new \\Box\\Mod\\Servicedownloadable\\Api\\Client();\n    }\n\n    public function testgetDi()\n    {\n        $di = new \\Pimple\\Container();\n        $this->api->setDi($di);\n        $getDi = $this->api->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testsend_fileMissingOrderId()\n    {\n        $data = array();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order id is required');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_fileOrderNotFound()\n    {\n        $data = array(\n            'order_id' => 1\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne');\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $this->api->setIdentity($modelClient);\n        $this->api->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order not found');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_fileOrderNotActivated()\n    {\n        $data = array(\n            'order_id' => 1,\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $orderServiceMock = $this->getMockBuilder('\\Box\\Mod\\Order\\Service')->getMock();\n        $orderServiceMock->expects($this->atLeastOnce())\n            ->method('getOrderService');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(new \\Model_ClientOrder()));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['mod_service'] = $di->protect(function() use ($orderServiceMock) {return $orderServiceMock;});\n\n        $this->api->setDi($di);\n        $this->api->setIdentity($modelClient);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order is not activated');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_file()\n    {\n        $data = array(\n            'order_id' => 1,\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Servicedownloadable\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('sendFile')\n            ->will($this->returnValue(true));\n\n        $orderServiceMock = $this->getMockBuilder('\\Box\\Mod\\Order\\Service')->getMock();\n        $orderServiceMock->expects($this->atLeastOnce())\n            ->method('getOrderService')\n            ->will($this->returnValue(new \\Model_ServiceDownloadable()));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(new \\Model_ClientOrder()));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['mod_service'] = $di->protect(function() use ($orderServiceMock) {return $orderServiceMock;});\n\n        $this->api->setDi($di);\n        $this->api->setIdentity($modelClient);\n        $this->api->setService($serviceMock);\n\n        $result = $this->api->send_file($data);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n\n    }\n}\n "], "fixing_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n/**\n * Downloadable service management.\n */\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Upload file to product. Uses $_FILES array so make sure your form is\n     * enctype=\"multipart/form-data\".\n     *\n     * @param int  $id        - product id\n     * @param file $file_data - <input type=\"file\" name=\"file_data\" /> field content\n     *\n     * @return bool\n     */\n    public function upload($data)\n    {\n        $required = [\n            'id' => 'Product ID is missing',\n        ];\n\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('Product', $data['id'], 'Product not found');\n\n        if (!isset($_FILES['file_data'])) {\n            throw new \\Box_Exception('File was not uploaded');\n        }\n\n        $service = $this->getService();\n\n        return $service->uploadProductFile($model);\n    }\n\n    /**\n     * Update downloadable product order with new file.\n     * This will change only this order file.\n     *\n     * Uses $_FILES array so make sure your form is\n     * enctype=\"multipart/form-data\"\n     *\n     * @param int  $order_id  - order id\n     * @param file $file_data - <input type=\"file\" name=\"file_data\" /> field content\n     *\n     * @return bool\n     */\n    public function update($data)\n    {\n        $required = [\n            'order_id' => 'Order ID is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $order = $this->di['db']->getExistingModelById('ClientOrder', $data['order_id'], 'Order not found');\n\n        $orderService = $this->di['mod_service']('order');\n        $serviceDownloadable = $orderService->getOrderService($order);\n        if (!$serviceDownloadable instanceof \\Model_ServiceDownloadable) {\n            throw new \\Box_Exception('Order is not activated');\n        }\n\n        $service = $this->getService();\n\n        return $service->updateProductFile($serviceDownloadable, $order);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n/**\n * Downloadable service management.\n */\nclass Client extends \\Api_Abstract\n{\n    /**\n     * Use GET to call this method. Sends file attached to order.\n     * Sends file as attachment.\n     *\n     * @param int $order_id - downloadable service order id\n     *\n     * @return bool\n     */\n    public function send_file($data)\n    {\n        if (!isset($data['order_id'])) {\n            throw new \\Box_Exception('Order id is required');\n        }\n        $identity = $this->getIdentity();\n        $order = $this->di['db']->findOne('ClientOrder', 'id = :id AND client_id = :client_id', [':id' => $data['order_id'], ':client_id' => $identity->id]);\n        if (!$order instanceof \\Model_ClientOrder) {\n            throw new \\Box_Exception('Order not found');\n        }\n\n        $orderService = $this->di['mod_service']('order');\n        $s = $orderService->getOrderService($order);\n        if (!$s instanceof \\Model_ServiceDownloadable || $order->status !== 'active') {\n            throw new \\Box_Exception('Order is not activated');\n        }\n\n        $service = $this->getService();\n\n        return (bool) $service->sendFile($s);\n    }\n}\n", "<?php\n\n\nnamespace Box\\Mod\\Servicedownloadable\\Api;\n\n\nclass ClientTest extends \\BBTestCase {\n    /**\n     * @var \\Box\\Mod\\Servicedownloadable\\Api\\Client\n     */\n    protected $api = null;\n\n    public function setup(): void\n    {\n        $this->api= new \\Box\\Mod\\Servicedownloadable\\Api\\Client();\n    }\n\n    public function testgetDi()\n    {\n        $di = new \\Pimple\\Container();\n        $this->api->setDi($di);\n        $getDi = $this->api->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testsend_fileMissingOrderId()\n    {\n        $data = array();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order id is required');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_fileOrderNotFound()\n    {\n        $data = array(\n            'order_id' => 1\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne');\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $this->api->setIdentity($modelClient);\n        $this->api->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order not found');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_fileOrderNotActivated()\n    {\n        $data = array(\n            'order_id' => 1,\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $orderServiceMock = $this->getMockBuilder('\\Box\\Mod\\Order\\Service')->getMock();\n        $orderServiceMock->expects($this->atLeastOnce())\n            ->method('getOrderService');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(new \\Model_ClientOrder()));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['mod_service'] = $di->protect(function() use ($orderServiceMock) {return $orderServiceMock;});\n\n        $this->api->setDi($di);\n        $this->api->setIdentity($modelClient);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Order is not activated');\n        $this->api->send_file($data);\n    }\n\n    public function testsend_file()\n    {\n        $data = array(\n            'order_id' => 1,\n        );\n\n        $modelClient = new \\Model_Client();\n        $modelClient->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Servicedownloadable\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('sendFile')\n            ->will($this->returnValue(true));\n\n        $orderServiceMock = $this->getMockBuilder('\\Box\\Mod\\Order\\Service')->getMock();\n        $orderServiceMock->expects($this->atLeastOnce())\n            ->method('getOrderService')\n            ->will($this->returnValue(new \\Model_ServiceDownloadable()));\n\n        $mockOrder = new \\Model_ClientOrder();\n        $mockOrder->loadBean(New \\DummyBean());\n        $mockOrder->status = \"active\";\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($mockOrder));\n\n        $di = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $di['mod_service'] = $di->protect(function() use ($orderServiceMock) {return $orderServiceMock;});\n\n        $this->api->setDi($di);\n        $this->api->setIdentity($modelClient);\n        $this->api->setService($serviceMock);\n\n        $result = $this->api->send_file($data);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n\n    }\n}\n "], "filenames": ["src/modules/Servicedownloadable/Api/Admin.php", "src/modules/Servicedownloadable/Api/Client.php", "tests/modules/Servicedownloadable/Api/ClientTest.php"], "buggy_code_start_loc": [31, 39, 107], "buggy_code_end_loc": [31, 40, 112], "fixing_code_start_loc": [32, 39, 108], "fixing_code_end_loc": [33, 40, 116], "type": "CWE-862", "message": "Missing Authorization in GitHub repository fossbilling/fossbilling prior to 0.5.0.", "other": {"cve": {"id": "CVE-2023-3230", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-14T06:15:08.937", "lastModified": "2023-06-17T03:08:30.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Missing Authorization in GitHub repository fossbilling/fossbilling prior to 0.5.0."}, {"lang": "es", "value": "Falta de autorizaci\u00f3n en el repositorio de GitHub fossbilling/fossbilling anterior a 0.5.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.0", "matchCriteriaId": "EFD5D230-F0DE-4BCE-99B7-4074CD4799AA"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/b95f92554e5cb38bd0710c0f4b413c5adda6f617", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/390643f0-106b-4424-835d-52610aefa4c7", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/b95f92554e5cb38bd0710c0f4b413c5adda6f617"}}