{"buggy_code": ["<?php\n\nuse MediaWiki\\MediaWikiServices;\nuse Miraheze\\ManageWiki\\Helpers\\ManageWikiSettings;\n\nclass WikiDiscoverWikisPager extends TablePager {\n\t/** @var string */\n\tprivate $language;\n\n\t/** @var string */\n\tprivate $category;\n\n\t/** @var string */\n\tprivate $state;\n\n\t/** @var string */\n\tprivate $visibility;\n\n\t/** @var WikiDiscover */\n\tprivate $wikiDiscover;\n\n\t/**\n\t * @param SpecialPage $page\n\t * @param string $language\n\t * @param string $category\n\t * @param string $state\n\t * @param string $visibility\n\t */\n\tpublic function __construct( $page, $language, $category, $state, $visibility ) {\n\t\t$this->mDb = self::getCreateWikiDatabase();\n\n\t\t$this->language = $language;\n\t\t$this->category = $category;\n\n\t\t$this->state = $state;\n\t\t$this->visibility = $visibility;\n\n\t\t$this->wikiDiscover = new WikiDiscover();\n\n\t\tparent::__construct( $page->getContext(), $page->getLinkRenderer() );\n\t}\n\n\t/**\n\t * @return DBConnRef\n\t */\n\tpublic static function getCreateWikiDatabase() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\t$factory = MediaWikiServices::getInstance()->getDBLoadBalancerFactory();\n\t\t$lb = $factory->getMainLB( $config->get( 'CreateWikiDatabase' ) );\n\n\t\treturn $lb->getMaintenanceConnectionRef( DB_REPLICA, 'cw_wikis', $config->get( 'CreateWikiDatabase' ) );\n\t}\n\n\t/** @inheritDoc */\n\tprotected function getFieldNames() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'wiki_dbname' => 'wikidiscover-table-wiki',\n\t\t\t'wiki_language' => 'wikidiscover-table-language',\n\t\t];\n\n\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t$headers['wiki_closed'] = 'wikidiscover-table-state';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) ) {\n\t\t\t$headers['wiki_private'] = 'wikidiscover-table-visibility';\n\t\t}\n\n\t\t$headers += [\n\t\t\t'wiki_category' => 'wikidiscover-table-category',\n\t\t\t'wiki_creation' => 'wikidiscover-table-established',\n\t\t];\n\n\t\tif ( ExtensionRegistry::getInstance()->isLoaded( 'ManageWiki' ) && $this->getConfig()->get( 'WikiDiscoverUseDescriptions' ) ) {\n\t\t\t$headers['wiki_description'] = 'wikidiscover-table-description';\n\t\t}\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function formatRow( $row ) {\n\t\tif ( ExtensionRegistry::getInstance()->isLoaded( 'ManageWiki' ) ) {\n\t\t\t$manageWikiSettings = new ManageWikiSettings( $row->wiki_dbname );\n\t\t\tif ( $manageWikiSettings->list( 'wgWikiDiscoverExclude' ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn parent::formatRow( $row );\n\t}\n\n\t/** @inheritDoc */\n\tpublic function formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\t$wikiDiscover = $this->wikiDiscover;\n\n\t\t$wiki = $row->wiki_dbname;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'wiki_dbname':\n\t\t\t\t$url = $wikiDiscover->getUrl( $wiki );\n\t\t\t\t$name = $wikiDiscover->getSitename( $wiki );\n\t\t\t\t$formatted = \"<a href=\\\"{$url}\\\">{$name}</a>\";\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_language':\n\t\t\t\t$formatted = $wikiDiscover->getLanguage( $wiki );\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_closed':\n\t\t\t\tif ( $wikiDiscover->isDeleted( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Deleted';\n\t\t\t\t} elseif ( $wikiDiscover->isClosed( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Closed';\n\t\t\t\t} elseif ( $wikiDiscover->isInactive( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Inactive';\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = 'Open';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_private':\n\t\t\t\tif ( $wikiDiscover->isPrivate( $wiki ) === true ) {\n\t\t\t\t\t$formatted = 'Private';\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = 'Public';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_category':\n\t\t\t\t$wikiCategories = array_flip( $this->getConfig()->get( 'CreateWikiCategories' ) );\n\t\t\t\t$formatted = $wikiCategories[$row->wiki_category] ?? 'Uncategorised';\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_creation':\n\t\t\t\t$lang = RequestContext::getMain()->getLanguage();\n\n\t\t\t\t$formatted = $lang->date( wfTimestamp( TS_MW, strtotime( $row->wiki_creation ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_description':\n\t\t\t\t$manageWikiSettings = new ManageWikiSettings( $wiki );\n\n\t\t\t\t$value = $manageWikiSettings->list( 'wgWikiDiscoverDescription' );\n\n\t\t\t\t$formatted = $value ?? '';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function getQueryInfo() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\t$fields = [];\n\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t$fields[] = 'wiki_closed';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUseInactiveWikis' ) ) {\n\t\t\t$fields[] = 'wiki_inactive';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) ) {\n\t\t\t$fields[] = 'wiki_private';\n\t\t}\n\n\t\t$info = [\n\t\t\t'tables' => [ 'cw_wikis' ],\n\t\t\t'fields' => array_merge( [ 'wiki_dbname', 'wiki_language', 'wiki_deleted', 'wiki_category', 'wiki_creation' ], $fields ),\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\n\t\tif ( $this->language && $this->language !== 'any' ) {\n\t\t\t$info['conds']['wiki_language'] = $this->language;\n\t\t}\n\n\t\tif ( $this->category && $this->category !== 'any' ) {\n\t\t\t$info['conds']['wiki_category'] = $this->category;\n\t\t}\n\n\t\tif ( $this->state && $this->state !== 'any' ) {\n\t\t\tif ( $this->state === 'deleted' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 1;\n\t\t\t} elseif ( $config->get( 'CreateWikiUseClosedWikis' ) && $this->state === 'closed' ) {\n\t\t\t\t$info['conds']['wiki_closed'] = 1;\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t} elseif ( $config->get( 'CreateWikiUseInactiveWikis' ) && $this->state === 'inactive' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t\t$info['conds']['wiki_inactive'] = 1;\n\t\t\t} elseif ( $this->state === 'active' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t\t\t$info['conds']['wiki_closed'] = 0;\n\t\t\t\t}\n\n\t\t\t\tif ( $config->get( 'CreateWikiUseInactiveWikis' ) ) {\n\t\t\t\t\t$info['conds']['wiki_inactive'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) && $this->visibility && $this->visibility !== 'any' ) {\n\t\t\tif ( $this->visibility === 'public' ) {\n\t\t\t\t$info['conds']['wiki_private'] = 0;\n\t\t\t} elseif ( $this->visibility === 'private' ) {\n\t\t\t\t$info['conds']['wiki_private'] = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function getDefaultSort() {\n\t\treturn 'wiki_creation';\n\t}\n\n\t/** @inheritDoc */\n\tprotected function isFieldSortable( $field ) {\n\t\treturn $field !== 'wiki_description';\n\t}\n}\n"], "fixing_code": ["<?php\n\nuse MediaWiki\\MediaWikiServices;\nuse Miraheze\\ManageWiki\\Helpers\\ManageWikiSettings;\n\nclass WikiDiscoverWikisPager extends TablePager {\n\t/** @var string */\n\tprivate $language;\n\n\t/** @var string */\n\tprivate $category;\n\n\t/** @var string */\n\tprivate $state;\n\n\t/** @var string */\n\tprivate $visibility;\n\n\t/** @var WikiDiscover */\n\tprivate $wikiDiscover;\n\n\t/**\n\t * @param SpecialPage $page\n\t * @param string $language\n\t * @param string $category\n\t * @param string $state\n\t * @param string $visibility\n\t */\n\tpublic function __construct( $page, $language, $category, $state, $visibility ) {\n\t\t$this->mDb = self::getCreateWikiDatabase();\n\n\t\t$this->language = $language;\n\t\t$this->category = $category;\n\n\t\t$this->state = $state;\n\t\t$this->visibility = $visibility;\n\n\t\t$this->wikiDiscover = new WikiDiscover();\n\n\t\tparent::__construct( $page->getContext(), $page->getLinkRenderer() );\n\t}\n\n\t/**\n\t * @return DBConnRef\n\t */\n\tpublic static function getCreateWikiDatabase() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\t$factory = MediaWikiServices::getInstance()->getDBLoadBalancerFactory();\n\t\t$lb = $factory->getMainLB( $config->get( 'CreateWikiDatabase' ) );\n\n\t\treturn $lb->getMaintenanceConnectionRef( DB_REPLICA, 'cw_wikis', $config->get( 'CreateWikiDatabase' ) );\n\t}\n\n\t/** @inheritDoc */\n\tprotected function getFieldNames() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\tstatic $headers = null;\n\n\t\t$headers = [\n\t\t\t'wiki_dbname' => 'wikidiscover-table-wiki',\n\t\t\t'wiki_language' => 'wikidiscover-table-language',\n\t\t];\n\n\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t$headers['wiki_closed'] = 'wikidiscover-table-state';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) ) {\n\t\t\t$headers['wiki_private'] = 'wikidiscover-table-visibility';\n\t\t}\n\n\t\t$headers += [\n\t\t\t'wiki_category' => 'wikidiscover-table-category',\n\t\t\t'wiki_creation' => 'wikidiscover-table-established',\n\t\t];\n\n\t\tif ( ExtensionRegistry::getInstance()->isLoaded( 'ManageWiki' ) && $this->getConfig()->get( 'WikiDiscoverUseDescriptions' ) ) {\n\t\t\t$headers['wiki_description'] = 'wikidiscover-table-description';\n\t\t}\n\n\t\tforeach ( $headers as &$msg ) {\n\t\t\t$msg = $this->msg( $msg )->text();\n\t\t}\n\n\t\treturn $headers;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function formatRow( $row ) {\n\t\tif ( ExtensionRegistry::getInstance()->isLoaded( 'ManageWiki' ) ) {\n\t\t\t$manageWikiSettings = new ManageWikiSettings( $row->wiki_dbname );\n\t\t\tif ( $manageWikiSettings->list( 'wgWikiDiscoverExclude' ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn parent::formatRow( $row );\n\t}\n\n\t/** @inheritDoc */\n\tpublic function formatValue( $name, $value ) {\n\t\t$row = $this->mCurrentRow;\n\n\t\t$wikiDiscover = $this->wikiDiscover;\n\n\t\t$wiki = $row->wiki_dbname;\n\n\t\tswitch ( $name ) {\n\t\t\tcase 'wiki_dbname':\n\t\t\t\t$url = $wikiDiscover->getUrl( $wiki );\n\t\t\t\t$name = $wikiDiscover->getSitename( $wiki );\n\t\t\t\t$formatted = \"<a href=\\\"{$url}\\\">{$name}</a>\";\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_language':\n\t\t\t\t$formatted = $wikiDiscover->getLanguage( $wiki );\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_closed':\n\t\t\t\tif ( $wikiDiscover->isDeleted( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Deleted';\n\t\t\t\t} elseif ( $wikiDiscover->isClosed( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Closed';\n\t\t\t\t} elseif ( $wikiDiscover->isInactive( $wiki ) ) {\n\t\t\t\t\t$formatted = 'Inactive';\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = 'Open';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_private':\n\t\t\t\tif ( $wikiDiscover->isPrivate( $wiki ) === true ) {\n\t\t\t\t\t$formatted = 'Private';\n\t\t\t\t} else {\n\t\t\t\t\t$formatted = 'Public';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_category':\n\t\t\t\t$wikiCategories = array_flip( $this->getConfig()->get( 'CreateWikiCategories' ) );\n\t\t\t\t$formatted = $wikiCategories[$row->wiki_category] ?? 'Uncategorised';\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_creation':\n\t\t\t\t$lang = RequestContext::getMain()->getLanguage();\n\n\t\t\t\t$formatted = htmlspecialchars( $lang->date( wfTimestamp( TS_MW, strtotime( $row->wiki_creation ) ) ) );\n\t\t\t\tbreak;\n\t\t\tcase 'wiki_description':\n\t\t\t\t$manageWikiSettings = new ManageWikiSettings( $wiki );\n\n\t\t\t\t$value = $manageWikiSettings->list( 'wgWikiDiscoverDescription' );\n\n\t\t\t\t$formatted = $value ?? '';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$formatted = \"Unable to format $name\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $formatted;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function getQueryInfo() {\n\t\t$config = MediaWikiServices::getInstance()->getMainConfig();\n\n\t\t$fields = [];\n\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t$fields[] = 'wiki_closed';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUseInactiveWikis' ) ) {\n\t\t\t$fields[] = 'wiki_inactive';\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) ) {\n\t\t\t$fields[] = 'wiki_private';\n\t\t}\n\n\t\t$info = [\n\t\t\t'tables' => [ 'cw_wikis' ],\n\t\t\t'fields' => array_merge( [ 'wiki_dbname', 'wiki_language', 'wiki_deleted', 'wiki_category', 'wiki_creation' ], $fields ),\n\t\t\t'conds' => [],\n\t\t\t'joins_conds' => [],\n\t\t];\n\n\t\tif ( $this->language && $this->language !== 'any' ) {\n\t\t\t$info['conds']['wiki_language'] = $this->language;\n\t\t}\n\n\t\tif ( $this->category && $this->category !== 'any' ) {\n\t\t\t$info['conds']['wiki_category'] = $this->category;\n\t\t}\n\n\t\tif ( $this->state && $this->state !== 'any' ) {\n\t\t\tif ( $this->state === 'deleted' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 1;\n\t\t\t} elseif ( $config->get( 'CreateWikiUseClosedWikis' ) && $this->state === 'closed' ) {\n\t\t\t\t$info['conds']['wiki_closed'] = 1;\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t} elseif ( $config->get( 'CreateWikiUseInactiveWikis' ) && $this->state === 'inactive' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t\t$info['conds']['wiki_inactive'] = 1;\n\t\t\t} elseif ( $this->state === 'active' ) {\n\t\t\t\t$info['conds']['wiki_deleted'] = 0;\n\t\t\t\tif ( $config->get( 'CreateWikiUseClosedWikis' ) ) {\n\t\t\t\t\t$info['conds']['wiki_closed'] = 0;\n\t\t\t\t}\n\n\t\t\t\tif ( $config->get( 'CreateWikiUseInactiveWikis' ) ) {\n\t\t\t\t\t$info['conds']['wiki_inactive'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( $config->get( 'CreateWikiUsePrivateWikis' ) && $this->visibility && $this->visibility !== 'any' ) {\n\t\t\tif ( $this->visibility === 'public' ) {\n\t\t\t\t$info['conds']['wiki_private'] = 0;\n\t\t\t} elseif ( $this->visibility === 'private' ) {\n\t\t\t\t$info['conds']['wiki_private'] = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn $info;\n\t}\n\n\t/** @inheritDoc */\n\tpublic function getDefaultSort() {\n\t\treturn 'wiki_creation';\n\t}\n\n\t/** @inheritDoc */\n\tprotected function isFieldSortable( $field ) {\n\t\treturn $field !== 'wiki_description';\n\t}\n}\n"], "filenames": ["includes/WikiDiscoverWikisPager.php"], "buggy_code_start_loc": [144], "buggy_code_end_loc": [145], "fixing_code_start_loc": [144], "fixing_code_end_loc": [145], "type": "CWE-79", "message": "WikiDiscover is an extension designed for use with a CreateWiki managed farm to display wikis. On Special:WikiDiscover, the `Language::date` function is used when making the human-readable timestamp for inclusion on the wiki_creation column. This function uses interface messages to translate the names of months and days. It uses the `->text()` output mode, returning unescaped interface messages. Since the output is not escaped later, the unescaped interface message is included on the output, resulting in an XSS vulnerability. Exploiting this on-wiki requires the `(editinterface)` right. This vulnerability has been addressed in commit `267e763a0`. Users are advised to update their installations. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2024-25107", "sourceIdentifier": "security-advisories@github.com", "published": "2024-02-08T23:15:10.583", "lastModified": "2024-02-15T18:52:25.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "WikiDiscover is an extension designed for use with a CreateWiki managed farm to display wikis. On Special:WikiDiscover, the `Language::date` function is used when making the human-readable timestamp for inclusion on the wiki_creation column. This function uses interface messages to translate the names of months and days. It uses the `->text()` output mode, returning unescaped interface messages. Since the output is not escaped later, the unescaped interface message is included on the output, resulting in an XSS vulnerability. Exploiting this on-wiki requires the `(editinterface)` right. This vulnerability has been addressed in commit `267e763a0`. Users are advised to update their installations. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "WikiDiscover es una extensi\u00f3n manipulada para usarse con una granja administrada CreateWiki para mostrar wikis. En Special:WikiDiscover, la funci\u00f3n `Language::date` se utiliza al crear la marca de tiempo legible por humanos para su inclusi\u00f3n en la columna wiki_creation. Esta funci\u00f3n utiliza mensajes de interfaz para traducir los nombres de meses y d\u00edas. Utiliza el modo de salida `-&gt;text()`, devolviendo mensajes de interfaz sin escape. Dado que la salida no se escapa m\u00e1s adelante, el mensaje de interfaz sin escape se incluye en la salida, lo que genera una vulnerabilidad XSS. Explotar este wiki requiere el derecho `(editinterface)`. Esta vulnerabilidad se ha solucionado en el commit `267e763a0`. Se recomienda a los usuarios que actualicen sus instalaciones. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:miraheze:wikidiscover:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-02-08", "matchCriteriaId": "02EFBBB8-D7A9-4849-8269-FC4BEEC45608"}]}]}], "references": [{"url": "https://github.com/miraheze/WikiDiscover/commit/267e763a0d7460f001693c42f67717a0fc3fd6bb", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/miraheze/WikiDiscover/security/advisories/GHSA-cfcf-94jv-455f", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://issue-tracker.miraheze.org/T11814", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/miraheze/WikiDiscover/commit/267e763a0d7460f001693c42f67717a0fc3fd6bb"}}