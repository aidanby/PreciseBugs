{"buggy_code": ["<?php\r\n\r\nclass erLhcoreClassChatWorkflow {\r\n\r\n    /**\r\n     * Message for timeout\r\n     */\r\n    public static function timeoutWorkflow(erLhcoreClassModelChat & $chat)\r\n    {\r\n        $operator = $chat->auto_responder->auto_responder->operator;\r\n        $name_support = $operator != '' ? $operator : erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Live Support');\r\n\r\n        if (trim($chat->auto_responder->auto_responder->timeout_message) != '') {\r\n            $msg = new erLhcoreClassModelmsg();\r\n            $msg->msg = erLhcoreClassGenericBotWorkflow::translateMessage(trim($chat->auto_responder->auto_responder->timeout_message), array('chat' => $chat));\r\n            $msg->chat_id = $chat->id;\r\n            $msg->name_support = $name_support;\r\n            $msg->user_id = -2;\r\n            $msg->time = time();\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            $chat->updateThis(array('update' => array('last_msg_id')));\r\n        }\r\n\r\n        $chat->auto_responder->auto_responder->getMeta($chat, 'pending_op', 1, array('override_nick' => $name_support, 'store_messages' => true));\r\n    }\r\n\r\n    /**\r\n     * Transfer workflow between departments\r\n     * */\r\n    public static function transferWorkflow(erLhcoreClassModelChat & $chat, $params = array())\r\n    {\r\n        $chat->transfer_if_na = 0;\r\n        $chat->transfer_timeout_ts = time();\r\n\r\n        if ($chat->department !== false && ($departmentTransfer = $chat->department->department_transfer) !== false) {\r\n\r\n            $botConfiguration = $chat->department->bot_configuration_array;\r\n\r\n            $chat->dep_id = $departmentTransfer->id;\r\n\r\n            $msg = new erLhcoreClassModelmsg();\r\n\r\n            if (isset($params['offline_operators']) && $params['offline_operators'] == true) {\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Transferred to').' \"'.$departmentTransfer.'\" '.erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','as no operators online in').' \"'.$chat->department.'\"';\r\n            } else {\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was automatically transferred to').' \"'.$departmentTransfer.'\" '.erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','from').' \"'.$chat->department.'\"';\r\n            }\r\n\r\n            $msg->chat_id = $chat->id;\r\n            $msg->user_id = -1;\r\n\r\n\r\n            $chat->last_user_msg_time = $msg->time = time();\r\n\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            if ($departmentTransfer->inform_unread == 1) {\r\n                $chat->reinform_timeout = $departmentTransfer->inform_unread_delay;\r\n                $chat->unread_messages_informed = 0;\r\n            }\r\n\r\n            // Our new department also has a transfer rule\r\n            if ($departmentTransfer->department_transfer !== false) {\r\n                $chat->transfer_if_na = 1;\r\n                $chat->transfer_timeout_ac = $departmentTransfer->transfer_timeout;\r\n            }\r\n\r\n            // Reset user on chat transfer to other department if required\r\n            if (isset($botConfiguration['ru_on_transfer']) && $botConfiguration['ru_on_transfer'] == 1 && $chat->user_id > 0) {\r\n\r\n                if ($chat->user_id > 0) {\r\n                    erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                }\r\n\r\n                $chat->user_id = 0;\r\n            }\r\n\r\n            if ($chat->department->nc_cb_execute == 1) {\r\n                $chat->nc_cb_executed = 0;\r\n            }\r\n\r\n            erLhAbstractModelAutoResponder::updateAutoResponder($chat);\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed_assigned_department',array('chat' => & $chat, 'from_dep' => $chat->department, 'to_dep' => $departmentTransfer));\r\n\r\n            $chat->updateThis(array('update' => array('dep_id','last_user_msg_time','last_msg_id','reinform_timeout','unread_messages_informed','user_id','na_cb_executed','transfer_if_na','transfer_timeout_ts','transfer_timeout_ac')));\r\n        } else {\r\n            $chat->updateThis(array('update' => array('transfer_if_na','transfer_timeout_ts')));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static function mainUnansweredChatWorkflow() {\r\n        $output = '';\r\n        if ( erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value > 0) {\r\n\r\n            $output .= \"Starting unaswered chats workflow\\n\";\r\n\r\n            $delay = time()-(erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_valu*60);\r\n\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500, 'filterlt' => array('time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_PENDING_CHAT, 'na_cb_executed' => 0))) as $chat) {\r\n                erLhcoreClassChatWorkflow::unansweredChatWorkflow($chat);\r\n                $output .= \"executing unanswered callback for chat - \".$chat->id.\"\\n\";\r\n            }\r\n\r\n            $output .= \"Ended unaswered chats workflow\\n\";\r\n        }\r\n\r\n        return $output;\r\n    }\r\n    /*\r\n     * Chat was unanswered for n minits, execute callback.\r\n     * */\r\n    public static function unansweredChatWorkflow(erLhcoreClassModelChat & $chat){\r\n\r\n        $chat->na_cb_executed = 1;\r\n        $chat->updateThis(array('update' => array('na_cb_executed')));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.unread_chat_workflow',array('chat' => & $chat));\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/unanswered_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function unreadInformWorkflow($options, & $chat) {\r\n\r\n        $chat->unread_messages_informed = 1;\r\n        $chat->updateThis(array('update' => array('unread_messages_informed')));\r\n\r\n        if (in_array('mail', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat,7);\r\n        }\r\n\r\n        if (in_array('xmp', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat);\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_unread_message',array('chat' => & $chat));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/unread_message_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static function chatAcceptedWorkflow($options, & $chat) {\r\n        if (in_array('mail_accepted', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat,9);\r\n        }\r\n\r\n        if (in_array('xmp_accepted', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat, array('template' => 'xmp_accepted_message', 'recipients_setting' => 'xmp_users_accepted'));\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_accepted',array('chat' => & $chat));\r\n    }\r\n\r\n\r\n    public static function newChatInformWorkflow($options, & $chat) {\r\n\r\n        $chat->nc_cb_executed = 1;\r\n        $chat->updateThis(array('update' => array('nc_cb_executed')));\r\n\r\n        if (in_array('mail', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat);\r\n        }\r\n\r\n        if (in_array('xmp', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat);\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.new_chat',array('chat' => & $chat));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/new_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function automaticChatClosing() {\r\n\r\n        $closedChatsNumber = 0;\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n\r\n            // Close normal chats\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filtergt' => array('last_user_msg_time' => 0), 'filterlt' => array('last_user_msg_time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_ACTIVE_CHAT))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n\r\n            // Close pending chats where the only message is user initial message\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_PENDING_CHAT, erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)),'filter' => array('last_user_msg_time' => 0))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_pending')->current_value;\r\n        if ($timeout > 0) {\r\n\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_PENDING_CHAT)))) as $chat) {\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_active')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_bot')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'customfilter' => array('((last_user_msg_time = 0 AND time < ' . $delay . ') OR (last_user_msg_time > 0 AND last_user_msg_time < ' . $delay . '))'), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_BOT_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->pnd_time = time();\r\n                    $chat->wait_time = 1;\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_activity_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500, 'customfilter' => array('((\r\n            (last_user_msg_time = 0 AND last_op_msg_time = 0 AND time < ' . $delay . ') OR \r\n            (last_user_msg_time > 0 AND last_user_msg_time >= last_op_msg_time AND last_user_msg_time < ' . $delay . ') OR \r\n            (last_op_msg_time > 0 AND last_op_msg_time >= last_user_msg_time AND last_op_msg_time < ' . $delay . ') \r\n            ) AND (GREATEST(`pnd_time`,`time`) + `wait_time`) < '.$delay.')'), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron because of inactivity!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n        \r\n        $timeoutParts = explode(',',str_replace(' ','',erLhcoreClassModelChatConfig::fetch('autoclose_abandon_pending')->current_value));\r\n\r\n        if ((int)$timeoutParts[0] > 0) {\r\n            $delay = time()-((int)$timeoutParts[0]*60);\r\n            $delayMobile = time()-((isset($timeoutParts[1]) && is_numeric($timeoutParts[1]) ? (int)$timeoutParts[1] : (int)$timeoutParts[0]) * 60);\r\n            $closeActive = isset($timeoutParts[2]) && is_numeric($timeoutParts[2]) ? (int)$timeoutParts[2] : 0;\r\n            if ($closeActive == 1) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_ACTIVE_CHAT\r\n                );\r\n            } elseif ($closeActive == 2) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT,\r\n                    erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\r\n                );\r\n            } elseif ($closeActive == 3) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT,\r\n                    erLhcoreClassModelChat::STATUS_BOT_CHAT,\r\n                );\r\n            } elseif ($closeActive == 4) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_BOT_CHAT,\r\n                );\r\n            } else {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT\r\n                );\r\n            }\r\n\r\n            $chatsToClose = erLhcoreClassChat::getList(array('limit' => 500, 'customfilter' => array('(`status_sub` IN ('.\r\n                erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM . ') OR (`lsync` > 0 AND ((`lsync` < '. $delay .' AND `device_type` = 0) OR  (`lsync` < '. $delayMobile .' AND `device_type` IN (1,2)))))'),\r\n                'filterin' => array('status' => $closeTypes)));\r\n\r\n            $avoidCloseCallback = count($chatsToClose) == 500;\r\n\r\n            foreach ($chatsToClose as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $statusOriginal = $chat->status;\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron because visitor left the pending chat!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    if ($statusOriginal == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\r\n                        $chat->pnd_time = time();\r\n                        $chat->wait_time = 1;\r\n                    } else {\r\n                        $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                    }\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                if (!$avoidCloseCallback) {\r\n                    erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n                }\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n\r\n        return $closedChatsNumber;\r\n    }\r\n\r\n    public static function automaticChatPurge() {\r\n\r\n        $purgedChatsNumber = 0;\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autopurge_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filtergt' => array('last_user_msg_time' => 0), 'filterlt' => array('last_user_msg_time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT))) as $chat) {\r\n                $chat->removeThis();\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                if ($chat->department !== false) {\r\n                    erLhcoreClassChat::updateDepartmentStats($chat->department);\r\n                }\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.delete', array(\r\n                    'chat' => & $chat\r\n                ));\r\n\r\n                $purgedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        return $purgedChatsNumber;\r\n    }\r\n\r\n    public static function autoAssign(& $chat, $department, $params = array()) {\r\n\r\n        if (is_object($department) && $department->active_balancing == 1 && ($department->max_ac_dep_chats == 0 || $department->active_chats_counter < $department->max_ac_dep_chats) && ($chat->user_id == 0 || ($department->max_timeout_seconds > 0 && $chat->tslasign < time()-$department->max_timeout_seconds)) ){\r\n\r\n            $isOnlineUser = (int)erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data['online_timeout'];\r\n\r\n            $db = ezcDbInstance::get();\r\n\r\n            try {\r\n\r\n                $botConfiguration = $department->bot_configuration_array;\r\n\r\n                if (\r\n                    isset($botConfiguration['auto_delay_var']) && $botConfiguration['auto_delay_var'] != '' &&\r\n                    isset($botConfiguration['auto_delay_timeout']) && $botConfiguration['auto_delay_timeout'] > 0 &&\r\n                    (time() - $chat->time) < $botConfiguration['auto_delay_timeout']\r\n                )\r\n                {\r\n                    $valueToCompare = null;\r\n                    if (strpos($botConfiguration['auto_delay_var'],'additional_data') !== false) {\r\n                        $additionalDataArray = $chat->additional_data_array;\r\n\r\n                        if (is_array($additionalDataArray)) {\r\n                            foreach ($additionalDataArray as $additionalItem) {\r\n                                $valueCompare = false;\r\n\r\n                                if (isset($additionalItem['identifier'])){\r\n                                    $valueCompare = $additionalItem['identifier'];\r\n                                } elseif (isset($additionalItem['key'])){\r\n                                    $valueCompare = $additionalItem['key'];\r\n                                }\r\n\r\n                                if ($valueCompare !== false && $valueCompare == str_replace('additional_data.','',$botConfiguration['auto_delay_var'])) {\r\n                                    $valueToCompare = $additionalItem['value'];\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } elseif (strpos($botConfiguration['auto_delay_var'],'chat_variable') !== false) {\r\n                        $additionalDataArray = $chat->chat_variables_array;\r\n                        if (is_array($additionalDataArray)) {\r\n                            $variableName = str_replace('chat_variable.','', $botConfiguration['auto_delay_var']);\r\n                            if (isset($chat->chat_variables_array[$variableName]) && $chat->chat_variables_array[$variableName] != '') {\r\n                                $valueToCompare = $chat->chat_variables_array[$variableName];\r\n                            }\r\n                        }\r\n                    } else {\r\n\r\n                        $statusWorkflowPermit = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.autoassign_permit', array(\r\n                            'department' => & $department,\r\n                            'chat' => & $chat,\r\n                            'params' => & $params,\r\n                        ));\r\n\r\n                        if ($statusWorkflowPermit !== false) {\r\n                            if (isset($statusWorkflowPermit['stop']) && $statusWorkflowPermit['stop'] == true) {\r\n                                $valueToCompare = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Variable was not found ignore chat for a while\r\n                    if ($valueToCompare === null) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                $db->beginTransaction();\r\n\r\n                // Lock chat record for update untill we finish this procedure\r\n                erLhcoreClassChat::lockDepartment($department->id, $db);\r\n\r\n                if ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && ($chat->user_id == 0 || ($department->max_timeout_seconds > 0 && $chat->tslasign < time()-$department->max_timeout_seconds))) {\r\n\r\n                    $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.autoassign', array(\r\n                        'department' => & $department,\r\n                        'chat' => & $chat,\r\n                        'is_online' => & $isOnlineUser,\r\n                        'params' => & $params,\r\n                    ));\r\n\r\n                    // There was no callbacks or file not found etc, we try to download from standard location\r\n                    if ($statusWorkflow === false) {\r\n\r\n                        $condition = '(active_chats + pending_chats)';\r\n                        if ($department->exclude_inactive_chats == 1) {\r\n                            $condition = '((pending_chats + active_chats) - inactive_chats)';\r\n                        }\r\n\r\n                        if ($department->max_active_chats > 0) {\r\n                            $appendSQL = \" AND ((max_chats = 0 AND {$condition} < :max_active_chats) OR (max_chats > 0 AND {$condition} < max_chats))\";\r\n                        } else {\r\n                            $appendSQL = \" AND ((max_chats > 0 AND {$condition} < max_chats) OR (max_chats = 0))\";\r\n                        }\r\n\r\n                        if (!isset($params['include_ignored_users']) || $params['include_ignored_users'] == false) {\r\n                            $appendSQL .= \" AND exclude_autoasign = 0\";\r\n                        }\r\n\r\n                        // Allow limit by provided user_ids\r\n                        // Usefull for extension which has custom auto assign workflow\r\n                        if (isset($params['user_ids'])) {\r\n                            if (empty($params['user_ids'])) {\r\n                                return array('status' => erLhcoreClassChatEventDispatcher::STOP_WORKFLOW, 'user_id' => 0);\r\n                            }\r\n\r\n                            $appendSQL .= ' AND `lh_userdep`.`user_id` IN (' . implode(', ',$params['user_ids']) . ')';\r\n                        }\r\n\r\n                        $sort = 'last_accepted ASC';\r\n                        if (isset($botConfiguration['auto_lower_limit']) && $botConfiguration['auto_lower_limit'] == '1') {\r\n                            $sort = 'active_chats ASC, last_accepted ASC';\r\n                        }\r\n\r\n                        $sql = \"SELECT user_id FROM lh_userdep WHERE last_accepted < :last_accepted AND ro = 0 AND hide_online = 0 AND dep_id = :dep_id AND (`lh_userdep`.`last_activity` > :last_activity OR `lh_userdep`.`always_on` = 1) AND user_id != :user_id {$appendSQL} ORDER BY {$sort} LIMIT 1\";\r\n\r\n                        $tryDefault = true;\r\n\r\n                        // Try to assign to operator speaking same language first\r\n                        if ($department->assign_same_language == 1 && $chat->chat_locale != '') {\r\n\r\n                            $sqlLanguages =  \"SELECT `lh_userdep`.`user_id` FROM lh_userdep INNER JOIN lh_speech_user_language ON `lh_speech_user_language`.`user_id` = `lh_userdep`.`user_id` WHERE last_accepted < :last_accepted AND ro = 0 AND hide_online = 0 AND dep_id = :dep_id AND (`lh_userdep`.`last_activity` > :last_activity OR `lh_userdep`.`always_on` = 1) AND `lh_userdep`.`user_id` != :user_id AND `lh_speech_user_language`.`language` = :chatlanguage {$appendSQL} ORDER BY {$sort} LIMIT 1\";\r\n\r\n                            $db = ezcDbInstance::get();\r\n                            $stmt = $db->prepare($sqlLanguages);\r\n                            $stmt->bindValue(':dep_id',$department->id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_activity',(time()-$isOnlineUser),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':user_id',$chat->user_id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_accepted',(time() - $department->delay_before_assign),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':chatlanguage',$chat->chat_locale,PDO::PARAM_STR);\r\n\r\n                            if ($department->max_active_chats > 0) {\r\n                                $stmt->bindValue(':max_active_chats',$department->max_active_chats,PDO::PARAM_INT);\r\n                            }\r\n\r\n                            $stmt->execute();\r\n\r\n                            $user_id = $stmt->fetchColumn();\r\n\r\n                            if (is_numeric($user_id) && $user_id > 0) {\r\n                                $tryDefault = false;\r\n                            }\r\n                        }\r\n\r\n\r\n\r\n                        if ($tryDefault == true) {\r\n                            $db = ezcDbInstance::get();\r\n                            $stmt = $db->prepare($sql);\r\n                            $stmt->bindValue(':dep_id',$department->id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_activity',(time()-$isOnlineUser),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':user_id',$chat->user_id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_accepted',(time() - $department->delay_before_assign),PDO::PARAM_INT);\r\n\r\n                            if ($department->max_active_chats > 0) {\r\n                                $stmt->bindValue(':max_active_chats',$department->max_active_chats,PDO::PARAM_INT);\r\n                            }\r\n\r\n                            $stmt->execute();\r\n\r\n                            $user_id = $stmt->fetchColumn();\r\n                        }\r\n\r\n                    } else {\r\n                        $db = ezcDbInstance::get();\r\n                        $user_id = $statusWorkflow['user_id'];\r\n                    }\r\n\r\n                    if ($user_id > 0) {\r\n\r\n                        $previousMessage = '';\r\n\r\n                        $msg = new erLhcoreClassModelmsg();\r\n                        $msg->chat_id = $chat->id;\r\n                        $msg->user_id = -1;\r\n                        $msg->time = time();\r\n\r\n                        // Update previously assigned operator statistic\r\n                        if ($chat->user_id > 0) {\r\n                            $userOld = erLhcoreClassModelUser::fetch($chat->user_id);\r\n                            $msg->name_support = $userOld->name_support;\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved', array('msg' => & $msg, 'chat' => & $chat, 'user_id' => $chat->user_id));\r\n\r\n                            $previousMessage = '[' . $chat->user_id . '] ' . $msg->name_support . ' '.  erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','did not accepted chat in time.') . ' ';\r\n                            erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                        }\r\n\r\n                        $userNew = erLhcoreClassModelUser::fetch($user_id);\r\n                        $msg->name_support = $userNew->name_support;\r\n\r\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved', array('msg' => & $msg, 'chat' => & $chat, 'user_id' => $user_id));\r\n\r\n                        $msg->msg = $previousMessage . erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Chat was assigned to') . ' [' . $userNew->id .'] ' . $msg->name_support;\r\n\r\n                        erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                        // Set owner to a new user\r\n                        $chat->tslasign = time();\r\n                        $chat->user_id = $user_id;\r\n                        $chat->last_msg_id = $msg->id;\r\n                        $chat->updateThis(array('update' => array('last_msg_id','tslasign','user_id')));\r\n\r\n                        erLhcoreClassUserDep::updateLastAcceptedByUser($user_id, time());\r\n\r\n                        // Update fresh user statistic\r\n                        erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                    }\r\n                }\r\n\r\n                if (isset($user_id) && $user_id > 0) {\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed_auto_assign',array('chat' => & $chat));\r\n                }\r\n\r\n                $db->commit();\r\n\r\n            } catch (Exception $e) {\r\n                $db->rollback();\r\n                throw $e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function presendCannedMsg($chat) {\r\n\r\n        $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.presend_canned_msg', array(\r\n            'chat' => & $chat,\r\n        ));\r\n\r\n        if ($statusWorkflow === false) {\r\n            $session = erLhcoreClassChat::getSession();\r\n            $q = $session->createFindQuery( 'erLhcoreClassModelCannedMsg' );\r\n            $q->where(\r\n                $q->expr->lOr(\r\n                    $q->expr->eq( 'department_id', $q->bindValue($chat->dep_id) ),\r\n                    $q->expr->lAnd($q->expr->eq( 'department_id', $q->bindValue( 0 ) ),$q->expr->eq( 'user_id', $q->bindValue( 0 ) )),\r\n                    $q->expr->eq( 'user_id', $q->bindValue($chat->user_id) )\r\n                ),\r\n                $q->expr->eq( 'auto_send', $q->bindValue(1) )\r\n            );\r\n\r\n            $q->limit(1, 0);\r\n            $q->orderBy('user_id DESC, position ASC, id ASC' ); // Questions with matched URL has higher priority\r\n            $items = $session->find( $q );\r\n        } else {\r\n            $items = $statusWorkflow['items'];\r\n        }\r\n\r\n        if (!empty($items)){\r\n            $cannedMsg = array_shift($items);\r\n\r\n            $replaceArray = array(\r\n                '{nick}' => $chat->nick,\r\n                '{email}' => $chat->email,\r\n                '{phone}' => $chat->phone,\r\n                '{operator}' => (string)$chat->user->name_support\r\n            );\r\n\r\n            $additionalData = $chat->additional_data_array;\r\n\r\n            if (is_array($additionalData)) {\r\n                foreach ($additionalData as $row) {\r\n                    if (isset($row['identifier']) && $row['identifier'] != '') {\r\n                        $replaceArray['{'.$row['identifier'].'}'] = $row['value'];\r\n                    }\r\n                }\r\n            }\r\n\r\n            $items = array($cannedMsg);\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.canned_message_replace',array('items' => & $items, 'user' => $chat->user, 'chat' => $chat, 'replace_array' => & $replaceArray));\r\n\r\n            $cannedMsg = $items[0];\r\n\r\n            // Set proper message by language\r\n            $cannedMsg->setMessageByChatLocale($chat->chat_locale);\r\n\r\n            $cannedMsg->setReplaceData($replaceArray);\r\n\r\n            $msg = new erLhcoreClassModelmsg();\r\n            $msg->msg = $cannedMsg->msg_to_user;\r\n            $msg->chat_id = $chat->id;\r\n            $msg->user_id = $chat->user_id;\r\n            $msg->name_support = $chat->user->name_support;\r\n\r\n            $chat->last_op_msg_time = $chat->last_user_msg_time = $msg->time = time();\r\n            $chat->has_unread_op_messages = 1;\r\n            $chat->unread_op_messages_informed = 0;\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.canned_message_before_save',array('msg' => & $msg, 'chat' => & $chat));\r\n\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            $chat->updateThis(array('update' => array(\r\n                'last_op_msg_time',\r\n                'last_user_msg_time',\r\n                'has_unread_op_messages',\r\n                'unread_op_messages_informed',\r\n                'last_msg_id'\r\n            )));\r\n        }\r\n    }\r\n\r\n    public static function autoInformVisitor($minutesTimeout)\r\n    {\r\n        if ($minutesTimeout > 0) {\r\n            $items = erLhcoreClassChat::getList(array('limit' => 10, 'filterlt' => array('last_op_msg_time' => (time() - (1*60))), 'filter' => array('has_unread_op_messages' => 1, 'unread_op_messages_informed' => 0)));\r\n\r\n            // Update chats instantly\r\n            foreach ($items as $item) {\r\n                $item->has_unread_op_messages = 0;\r\n                $item->unread_op_messages_informed = 1;\r\n                $item->updateThis(array('update' => array('has_unread_op_messages','unread_op_messages_informed')));\r\n            }\r\n\r\n            // Now inform visitors\r\n            foreach ($items as $item) {\r\n                erLhcoreClassChatMail::informVisitorUnreadMessage($item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function getChatHistory($chat, $lastMessageId)\r\n    {\r\n        $messages = erLhcoreClassChat::getChatMessages($chat->id, erLhcoreClassChat::$limitMessages, $lastMessageId);\r\n\r\n        $messageId = 0;\r\n        $hasMessages = true;\r\n        if (count($messages) == erLhcoreClassChat::$limitMessages) {\r\n            reset($messages);\r\n            $message = current($messages);\r\n            $messageId = $message['id'];\r\n        } else {\r\n            $hasMessages = false;\r\n\r\n            $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.get_chat_history', array(\r\n                'chat' => $chat,\r\n                'last_message_id' => $lastMessageId,\r\n            ));\r\n\r\n            if ($statusWorkflow === false) {\r\n                if (erLhcoreClassUser::instance()->hasAccessTo('lhchat','prev_chats') && ($online_user = $chat->online_user) !== false) {\r\n                    $chatHistory = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC','filterlt' => array('id' => $chat->id), 'filter' => array('online_user_id' => $online_user->id)));\r\n                    if ($chatHistory instanceof erLhcoreClassModelChat) {\r\n                        $chat = $chatHistory;\r\n                        $hasMessages = true;\r\n                    }\r\n                }\r\n            } else {\r\n                $hasMessages = $statusWorkflow['has_messages'];\r\n                $chat = $statusWorkflow['chat'];\r\n            }\r\n        }\r\n\r\n        return array(\r\n            'chat_id' => (is_object($chat) ? $chat->id : null),\r\n            'chat' => (is_object($chat) ? $chat : null),\r\n            'message_id' => $messageId,\r\n            'messages' => $messages,\r\n            'has_messages' => $hasMessages\r\n        );\r\n    }\r\n\r\n    public static function hasPreviousChats($params)\r\n    {\r\n        reset($params['messages']); $firstMessage = current($params['messages']);\r\n        $chatHistory = $params['chat'];\r\n        $hasMessages = erLhcoreClassChat::$limitMessages == count($params['messages']);\r\n        $firstMessageId = $firstMessage['id'];\r\n\r\n        $params['has_messages'] = $hasMessages;\r\n        $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.has_previous_messages', $params);\r\n\r\n        if ($statusWorkflow === false) {\r\n            if ($hasMessages == false && erLhcoreClassUser::instance()->hasAccessTo('lhchat','prev_chats') && ($online_user = $params['chat']->online_user) !== false) {\r\n                $chatHistory = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC','filterlt' => array('id' => $params['chat']->id), 'filter' => array('online_user_id' => $online_user->id)));\r\n                if ($chatHistory instanceof erLhcoreClassModelChat) {\r\n                    $hasMessages = true;\r\n                    $firstMessageId = 0;\r\n                }\r\n            }\r\n            return array(\r\n                'has_messages' => $hasMessages,\r\n                'chat_history' => $chatHistory,\r\n                'message_id' => $firstMessageId\r\n            );\r\n        } else {\r\n            return $statusWorkflow;\r\n        }\r\n    }\r\n}\r\n\r\n?>\r\n", "<?php\nheader ( 'content-type: application/json; charset=utf-8' );\n$definition = array(\n        'msg' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::REQUIRED, 'unsafe_raw'\n        )\n);\n\n$form = new ezcInputForm( INPUT_POST, $definition );\n\nif (trim($form->msg) != '')\n{\n\t$db = ezcDbInstance::get();\n\t$db->beginTransaction();\t\n\ttry {\n\t\t$Chat = erLhcoreClassModelChat::fetchAndLock($Params['user_parameters']['chat_id']);\n\n\t    if ($Chat instanceof erLhcoreClassModelChat && erLhcoreClassChat::hasAccessToRead($Chat) && erLhcoreClassChat::hasAccessToWrite($Chat) && ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT || $Chat->user_id == 0 || $Chat->user_id == $currentUser->getUserID() || $currentUser->hasAccessTo('lhchat','writeremotechat')))\n\t    {\n\t        $currentUser = erLhcoreClassUser::instance();\n\t\n\t        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n\t        \techo erLhcoreClassChat::safe_json_encode(array('error' => 'true', 'token' => $currentUser->getCSFRToken(), 'r' => 'Try again or refresh a page. We could not verify your request.' ));\n\t        \t$db->rollback();\n\t        \texit;\n\t        }\n\t\n\t        $userData = $currentUser->getUserData();\n\t\t      \n\t        $messageUserId = $userData->id;\n\t        $msgText = trim($form->msg);\n\t        $ignoreMessage = false;\n\t        $returnBody = '';\n\t        $customArgs = array();\n\n\t        if (strpos($msgText, '!') === 0) {\n\t            $statusCommand = erLhcoreClassChatCommand::processCommand(array('user' => $userData, 'msg' => $msgText, 'chat' => & $Chat));\n\t            if ($statusCommand['processed'] === true) {\n\t                $messageUserId = -1; // Message was processed set as internal message\n\t                \n\t                $rawMessage = !isset($statusCommand['raw_message']) ? $msgText : $statusCommand['raw_message'];\n\t                \n\t                $msgText = trim('[b]'.$userData->name_support.'[/b]: '.$rawMessage .' '. ($statusCommand['process_status'] != '' ? '|| '.$statusCommand['process_status'] : ''));\n\t                \n\t                if (isset($statusCommand['ignore']) && $statusCommand['ignore'] == true) {\n\t                    $ignoreMessage = true;\n\t                }\n\t                \n\t                if (isset($statusCommand['info'])) {\n\t                    $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\n\t                    $tpl->set('msg',array('msg' =>  $statusCommand['info'], 'time' => time()));\n\t                    $returnBody = $tpl->fetch();\n\t                }\n\n                    if (isset($statusCommand['custom_args'])) {\n                        $customArgs = $statusCommand['custom_args'];\n                    }\n\t            };\n\t        }\n\t        \n\t        if ($ignoreMessage == false) {\t        \n    \t        $msg = new erLhcoreClassModelmsg();\n    \t        $msg->msg = $msgText;\n    \t        $msg->chat_id = $Params['user_parameters']['chat_id'];\n    \t        $msg->user_id = $messageUserId;\n    \t        $msg->time = time();\n    \t        $msg->name_support = $userData->name_support;\n\n    \t        if (isset($_POST['meta_msg'])) {\n                    $meta_msg = json_decode($_POST['meta_msg'], true);\n                    if (is_array($meta_msg)) {\n                        $metaContent = [];\n\n                        foreach ($meta_msg as $meta_msg_key => $meta_msg_value) {\n                            $metaContent['content'][$meta_msg_key] = $meta_msg_value;\n                        }\n\n                        if (!empty($metaContent)) {\n                            $msg->meta_msg = json_encode($metaContent);\n                        }\n                    }\n                }\n\n    \t        if ($messageUserId != -1 && $Chat->chat_locale != '' && $Chat->chat_locale_to != '' && isset($Chat->chat_variables_array['lhc_live_trans']) && $Chat->chat_variables_array['lhc_live_trans'] === true) {\n    \t            erLhcoreClassTranslate::translateChatMsgOperator($Chat, $msg);\n    \t        }\n\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved',array('msg' => & $msg,'chat' => & $Chat));\n    \t        \n    \t        erLhcoreClassChat::getSession()->save($msg);\n    \t\n    \t        // Set last message ID\n    \t        if ($Chat->last_msg_id < $msg->id) {\n\n    \t            $updateFields = array();\n\n    \t            if ($Chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $messageUserId !== -1) {\n                        $updateFields[] = 'status_sub';\n                        $updateFields[] = 'last_user_msg_time';\n                        $Chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_DEFAULT;\n                        $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\n                        $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Hold removed!'), 'time' => time()));\n                        $returnBody .= $tpl->fetch();\n                        $customArgs['hold_removed'] = true;\n\n                        if ($Chat->auto_responder !== false) {\n                            $Chat->auto_responder->active_send_status = 0;\n                            $Chat->auto_responder->saveThis();\n                        }\n                    }\n\n                    // Reset active counter if operator send new message and it's sync request and there was new message from operator\n                    if ($Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $Chat->auto_responder !== false) {\n    \t                if ($Chat->auto_responder->active_send_status != 0) {\n                            $Chat->auto_responder->active_send_status = 0;\n                            $Chat->auto_responder->saveThis();\n    \t                }\n                    }\n\n                    $Chat->last_op_msg_time = time();\n                    $Chat->last_msg_id = $msg->id;\n                    $updateFields[] = 'last_op_msg_time';\n                    $updateFields[] = 'last_msg_id';\n\n                    if ($Chat->status != erLhcoreClassModelChat::STATUS_CLOSED_CHAT) {\n                        $Chat->has_unread_op_messages = 1;\n                        $updateFields[] = 'has_unread_op_messages';\n                    }\n\n    \t        \tif ($Chat->unread_op_messages_informed != 0) {\n                        $Chat->unread_op_messages_informed = 0;\n                        $updateFields[] = 'unread_op_messages_informed';\n                    }\n\n    \t        \t\n    \t        \tif ($userData->invisible_mode == 0 && $messageUserId > 0) { // Change status only if it's not internal command\n    \t\t        \tif ($Chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\n    \t\t        \t\t$Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n                            $Chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_OWNER_CHANGED;\n    \t\t        \t\t$Chat->user_id = $messageUserId;\n                            $updateFields[] = 'status';\n                            $updateFields[] = 'status_sub';\n                            $updateFields[] = 'user_id';\n    \t\t        \t}\n    \t        \t}\n    \t\n    \t        \t// Chat can be reopened only if user did not ended chat explictly\n    \t        \tif ($Chat->user_status == erLhcoreClassModelChat::USER_STATUS_CLOSED_CHAT && $Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n    \t        \t\t$Chat->user_status = erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN;\n                        $updateFields[] = 'user_status';\n    \t        \t\tif ( ($onlineuser = $Chat->online_user) !== false) {\n    \t        \t\t\t$onlineuser->reopen_chat = 1;\n    \t        \t\t\t$onlineuser->saveThis();\n    \t        \t\t}\n    \t        \t}\n\n                    if ($Chat->wait_time == 0) {\n                        $Chat->wait_time = time() - ($Chat->pnd_time > 0 ? $Chat->pnd_time : $Chat->time);\n                        $updateFields[] = 'wait_time';\n                    }\n\n                    $Chat->updateThis(array('update' => $updateFields));\n    \t        }\n\n    \t        if (isset($_POST['subjects_ids']) && !empty($_POST['subjects_ids'])) {\n    \t            $subjects_ids = explode(',',$_POST['subjects_ids']);\n    \t            erLhcoreClassChat::validateFilterIn($subjects_ids);\n                    $presentSubjects = erLhAbstractModelSubjectChat::getList(array('filterin' => array('subject_id' => $subjects_ids),'filter' => array('chat_id' => $Chat->id)));\n\n                    $presentSubjectsIds = [];\n                    foreach ($presentSubjects as $presentSubject) {\n                        $presentSubjectsIds[] = $presentSubject->subject_id;\n                    }\n\n                    foreach (array_diff($subjects_ids,$presentSubjectsIds) as $subjectIdToSave)\n                    {\n                        $subjectChat = new erLhAbstractModelSubjectChat();\n                        $subjectChat->chat_id = $Chat->id;\n                        $subjectChat->subject_id = $subjectIdToSave;\n                        $subjectChat->saveThis();\n                    }\n                }\n\n                if (isset($_POST['canned_id']) && is_numeric($_POST['canned_id']) && @erLhcoreClassModelChatConfig::fetch('statistic_options')->data['canned_stats'] == 1) {\n                    // @todo add indication do we need to track these stats\n                    erLhcoreClassModelCannedMsgUse::logUse(array(\n                        'canned_id' => (int)$_POST['canned_id'],\n                        'chat_id'   => $Chat->id,\n                        'ctime'     => time(),\n                        'user_id'   => $currentUser->getUserID(),\n                    ));\n                }\n\n    \t        // If chat is in bot mode and operators writes a message, accept a chat as operator.\n    \t        if ($Chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT && $messageUserId != -1) {\n\n                    $userData = $currentUser->getUserData();\n\n                    if ($userData->invisible_mode == 0 && erLhcoreClassChat::hasAccessToWrite($Chat)) {\n                        $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n\n                        $Chat->pnd_time = time();\n                        $Chat->wait_time = 1;\n\n                        $Chat->user_id = $currentUser->getUserID();\n\n                        // User status in event of chat acceptance\n                        $Chat->usaccept = $userData->hide_online;\n                        $Chat->operation_admin .= \"lhinst.updateVoteStatus(\".$Chat->id.\");\";\n                        $Chat->saveThis();\n\n                        // If chat is transferred to pending state we don't want to process any old events\n                        $eventPending = erLhcoreClassModelGenericBotChatEvent::findOne(array('filter' => array('chat_id' => $Chat->id)));\n\n                        if ($eventPending instanceof erLhcoreClassModelGenericBotChatEvent) {\n                            $eventPending->removeThis();\n                        }\n\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $Chat, 'user' => $currentUser));\n\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $Chat, 'user' => $currentUser));\n                        erLhcoreClassChat::updateActiveChats($Chat->user_id);\n\n                        if ($Chat->department !== false) {\n                            erLhcoreClassChat::updateDepartmentStats($Chat->department);\n                        }\n\n                        $options = $Chat->department->inform_options_array;\n                        erLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $Chat->department,'options' => $options),$Chat);\n                    }\n                }\n\t        }\n\n\t        if ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT) {\n\t            \n\t            $transfer = erLhcoreClassModelTransfer::findOne(array('filter' => array('transfer_user_id' => $currentUser->getUserID(), 'transfer_to_user_id' => ($Chat->user_id == $currentUser->getUserID() ? $Chat->sender_user_id : $Chat->user_id))));\n\t            \n\t            if ($transfer === false) {\n    \t            $transfer = new erLhcoreClassModelTransfer();\n    \t            \n    \t            $transfer->chat_id = $Chat->id;\n    \t            \n    \t            $transfer->from_dep_id = $Chat->dep_id;\n    \t            \n    \t            // User which is transfering\n    \t            $transfer->transfer_user_id = $currentUser->getUserID();\n    \t            \n    \t            // To what user\n    \t            $transfer->transfer_to_user_id = $Chat->user_id == $currentUser->getUserID() ? $Chat->sender_user_id : $Chat->user_id;\n    \t            $transfer->saveThis();\n\t            }\n\t        }\n\t        \n\t        echo erLhcoreClassChat::safe_json_encode(array('error' => 'false','r' => $returnBody) + $customArgs);\n\t        \n\t        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.web_add_msg_admin', array('msg' => & $msg,'chat' => & $Chat, 'ou' => (isset($onlineuser) ? $onlineuser : null)));\n\n\t    } else {\n\t        throw new Exception('You cannot read/write to this chat!');\n        }\n\n\t    $db->commit();\n\t    \n\t} catch (Exception $e) {\n\t    echo $e->getMessage();\n   \t\t$db->rollback();\n    }\n\n} else {\n    echo erLhcoreClassChat::safe_json_encode(array('error' => 'true', 'r' => 'Please enter a message...'));\n}\n\n\nexit;\n\n?>", "<?php\n\n$Module = array( \"name\" => \"Chat\");\n\n$ViewList = array();\n\n$ViewList['adminchat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('remember','arg'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array('arg')\n);\n\n$ViewList['getchatdata'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['sendmassmessage'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['singleaction'] = array(\n    'params' => array('chat_id','action'),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['subjectwidget'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'subject_chats_options' ),\n);\n\n$ViewList['loadoperatorjs'] = array(\n    'params' => array(),\n    'uparams' => array('type','id'),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['loadmaindata'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['loadpreviousmessages'] = array(\n    'params' => array('chat_id','message_id'),\n    'uparams' => array('initial','original'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array()\n);\n\n$ViewList['subject'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('subject','status'),\n    'functions' => array( 'setsubject' )\n);\n\n$ViewList['getnotificationsdata'] = array(\n    'params' => array(),\n    'uparams' => array('id'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array ( 'id')\n);\n\n$ViewList['getcannedfiltered'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['holdaction'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'holduse' )\n);\n\n$ViewList['copymessages'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updateattribute'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['updatejsvars'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['logevent'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['setnewvid'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array(),\n);\n\n$ViewList['redirectcontact'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'redirectcontact' )\n);\n\n$ViewList['changestatus'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'canchangechatstatus' )\n);\n\n$ViewList['editprevious'] = array(\n    'params' => array('chat_id','msg_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['quotemessage'] = array(\n    'params' => array('id'),\n    'uparams' => array('type'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updatemsg'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['printchatadmin'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['loadactivechats'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['previewchat'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['previewmessage'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['closechatadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['abstractclick'] = array(\n    'params' => array('msg_id','payload'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['setsubstatus'] = array(\n    'params' => array('chat_id','substatus'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['notificationsettings'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['startchatwithoperator'] = array(\n    'params' => array('user_id'),\n    'uparams' => array('mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['closechat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('csfr'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['sendmail'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'sendmail' )\n);\n\n$ViewList['modifychat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('pos'),\n    'functions' => array( 'modifychat' )\n);\n\n$ViewList['transferchat'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowtransfer' )\n);\n\n$ViewList['accepttransfer'] = array(\n    'params' => array('transfer_id'),\n    'uparams' => array('postaction','mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['deletechatadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'deletechat' )\n);\n\n$ViewList['delete'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('csfr'),\n    'functions' => array( 'deletechat' )\n);\n\n$ViewList['syncadmininterface'] = array(\n    'params' => array(),\n    'uparams' => array(\n        'subjectd',\n        'limits',\n        'subjectd',\n        'sdgroups',\n        'subjectdprod',\n        'subjectu',\n        'sugroups',\n        'hsub','lda','bdgroups','botdprod','w','clcs','limitgc','limitb','botd','odpgroups','ddgroups','udgroups','mdgroups', 'cdgroups', 'pdgroups','adgroups','pugroups','augroups','onop', 'acs', 'mcd', 'limitmc', 'mcdprod','activeu','pendingu','topen','departmentd','operatord','actived','pendingd','closedd','unreadd','limita','limitp','limitc','limitu','limito','limitd','activedprod','unreaddprod','pendingdprod','closeddprod','psort'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array (\n        'subjectd',\n        'subjectd',\n        'sdgroups',\n        'subjectdprod',\n        'subjectu',\n        'sugroups',\n        'hsub','bdgroups','botdprod','botd','w','odpgroups','ddgroups','udgroups','mdgroups', 'cdgroups', 'pdgroups', 'adgroups', 'pugroups','augroups','mcd','operatord','mcdprod', 'activeu', 'pendingu', 'actived', 'closedd' , 'pendingd', 'unreadd','departmentd','activedprod','unreaddprod','pendingdprod','closeddprod')\n);\n\n$ViewList['loadinitialdata'] = array(\n    'params' => array(),\n    'uparams' => array('chatopen','chatgopen'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array('chatopen','chatgopen')\n);\n\n$ViewList['list'] = array(\n    'params' => array(),\n    'uparams' => array('view','dropped_chat','abandoned_chat','country_ids','has_unread_op_messages','cls_us','export','chat_status_ids','cf','with_bot','no_operator','has_operator','without_bot','bot_ids','ip','department_ids','department_group_ids','user_ids','group_ids','subject_id','anonymized','una','chat_duration_from','chat_duration_till','wait_time_from','wait_time_till','chat_id','nick','email','timefrom','timeto','department_id','user_id','print','xls','fbst','chat_status','hum','product_id','timefrom','timefrom_seconds','timefrom_minutes','timefrom_hours','timeto', 'timeto_minutes', 'timeto_seconds', 'timeto_hours', 'department_group_id', 'group_id', 'invitation_id'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array(\n        'department_ids',\n        'department_group_ids',\n        'user_ids',\n        'group_ids',\n        'bot_ids',\n        'country_ids',\n        'chat_status_ids',\n        'cf',\n    )\n);\n\n$ViewList['dashboardwidgets'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['chattabs'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowchattabs' )\n    );\n\n$ViewList['chattabschrome'] = array(\n    'params' => array(),\n    'uparams' => array('mode'),\n    'functions' => array( )\n);\n\n$ViewList['single'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'singlechatwindow' )\n);\n\n$ViewList['chatfootprint'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['refreshonlineinfo'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['checkscreenshot'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['checkscreenshotonline'] = array(\n    'params' => array('online_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['operatortyping'] = array(\n    'params' => array('chat_id','status'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['syncadmin'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addmsgadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updatechatstatus'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addoperation'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['refreshcustomfields'] = array(\n    'params' => array(),\n    'uparams' => array('vid','hash','hash_resume'),\n);\n\n$ViewList['addonlineoperation'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addonlineoperationiframe'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['saveremarks'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['saveonlinenotes'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n/* Anonymous functions */\n$ViewList['addmsguser'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['editprevioususer'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array(),\n);\n\n$ViewList['updatemsguser'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['getmessage'] = array(\n    'params' => array('chat_id','hash','msgid'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['getmessageadmin'] = array(\n    'params' => array('chat_id','msgid'),\n    'uparams' => array(),\n\t'functions' => array( 'use' )\n);\n\n$ViewList['voteaction'] = array(\n    'params' => array('chat_id','hash','type'),\n    'uparams' => array(),\n);\n\n$ViewList['syncuser'] = array(\n    'params' => array('chat_id','message_id','hash'),\n\t'uparams' => array('mode','ot','theme','modeembed')\n);\n\n$ViewList['transfertohuman'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array()\n);\n\n$ViewList['editnick'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array()\n);\n\n$ViewList['usertyping'] = array(\n    'params' => array('chat_id','hash','status'),\n\t'uparams' => array()\n);\n\n$ViewList['checkchatstatus'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode','theme','dot')\n);\n\n$ViewList['transferuser'] = array(\n    'params' => array('chat_id','item_id'),\n    'functions' => array( 'allowtransfer' )\n    );\n\n$ViewList['blockuser'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowblockusers' )\n);\n\n$ViewList['blockedusers'] = array(\n    'params' => array(),\n    'uparams' => array('remove_block','csfr','ip','nick'),\n    'functions' => array( 'allowblockusers' )\n);\n\n$ViewList['getstatus'] = array(\n    'params' => array(),\n    'uparams' => array('fresh','ua','ma','operator','theme','priority','disable_pro_active','click','position','hide_offline','check_operator_messages','top','units','leaveamessage','department','identifier','survey','dot','bot_id'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['htmlsnippet'] = array(\n    'params' => array('id','type','sub_id'),\n    'uparams' => array('hash'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['chatcheckstatus'] = array(\n    'params' => array(),\n    'uparams' => array('status','department','vid','uactiv','wopen','uaction','hash','hash_resume','dot','hide_offline','isproactive'),\n\t'multiple_arguments' => array ( 'department' )\n);\n\n$ViewList['getstatusembed'] = array (\n    'params' => array(),\n    'uparams' => array('fresh','ua','operator','theme','hide_offline','leaveamessage','department','priority','survey','bot_id'),\n\t'multiple_arguments' => array ( 'department','ua' )\n);\n\n$ViewList['startchat'] = array (\n    'params' => array(),\n    'uparams' => array('ua','switchform','operator','theme','er','vid','hash_resume','sound','hash','offline','leaveamessage','department','priority','chatprefill','survey','prod','phash','pvhash','ajaxmode'),\n\t'multiple_arguments' => array ( 'department', 'ua', 'prod' )\n);\n\n$ViewList['start'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope','fs','trigger'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['begin'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['modal'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['chatwidget'] = array (\n    'params' => array(),\n    'uparams' => array('mobile','bot_id','ua','switchform','operator','theme','vid','sound','hash','hash_resume','mode','offline','leaveamessage','department','priority','chatprefill','survey','sdemo','prod','phash','pvhash','fullheight','ajaxmode'),\n\t'multiple_arguments' => array ( 'department', 'ua', 'prod' )\n);\n\n$ViewList['reopen'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode','embedmode','theme','fullheight'),\n);\n\n$ViewList['readoperatormessage'] = array(\n    'params' => array(),\n    'uparams' => array('operator','theme','priority','vid','department','playsound','ua','survey','fullheight','inv','tag'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['chatcheckoperatormessage'] = array(\n    'params' => array(),\n    'uparams' => array('tz','operator','theme','priority','vid','count_page','identifier','department','ua','survey','uactiv','wopen','fullheight','dyn'),\n\t'multiple_arguments' => array ( 'department','ua','dyn' )\n);\n\n$ViewList['extendcookie'] = array(\n    'params' => array('vid'),\n    'uparams' => array()\n);\n\n$ViewList['logpageview'] = array(\n    'params' => array(),\n    'uparams' => array('tz','vid','identifier','department','ua','uactiv','wopen'),\n\t'multiple_arguments' => array ( 'department','ua' )\n);\n\n$ViewList['chatwidgetclosed'] = array(\n    'params' => array(),\n    'uparams' => array('vid','hash','eclose','close'),\n);\n\n$ViewList['chat'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('theme','er','survey','cstarted')\n);\n\n$ViewList['printchat'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['readchatmail'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['chatpreview'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['bbcodeinsert'] = array(\n\t'params' => array('chat_id'),\n\t'uparams' => array('mode')\n);\n\n$ViewList['chatwidgetchat'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array('mobile','sound','mode','theme','cstarted','survey','pchat','fullheight')\n);\n\n$ViewList['userclosechat'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('eclose'),\n);\n\n$ViewList['onlineusers'] = array(\n    'params' => array(),\n    'ajax' => true,\n    'uparams' => array('clear_list','method','deletevisitor','timeout','csfr','department','maxrows','country','timeonsite','department_dpgroups'),\n    'functions' => array( 'use_onlineusers' ),\n    'multiple_arguments' => array(\n        'department',\n        'department_dpgroups'\n    )\n);\n\n$ViewList['jsononlineusers'] = array(\n    'params' => array(),\n    'uparams' => array('department','maxrows','timeout','department_dpgroups'),\n    'functions' => array( 'use_onlineusers' ),\n    'multiple_arguments' => array(\n        'department',\n        'department_dpgroups'\n    )\n);\n\n$ViewList['getonlineuserinfo'] = array(\n    'params' => array('id'),\n    'uparams' => array('tab','chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['sendnotice'] = array(\n    'params' => array('online_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['geoconfiguration'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'administrategeoconfig' )\n);\n\n$ViewList['listchatconfig'] = array(\n    'params' => array(),\n    'functions' => array( 'administrateconfig' )\n);\n\n$ViewList['editchatconfig'] = array(\n    'params' => array('config_id'),\n    'functions' => array( 'administrateconfig' )\n);\n\n$ViewList['syncandsoundesetting'] = array(\n    'params' => array(),\n    'functions' => array( 'administratesyncsound' )\n);\n\n$ViewList['cannedmsg'] = array(\n    'params' => array(),\n    'uparams' => array('action','id','csfr','message','title','fmsg','department_id','subject_id','tab','user_id'),\n    'functions' => array( 'administratecannedmsg' ),\n    'multiple_arguments' => array(\n        'department_id',\n        'subject_id',\n        'user_id'\n    )\n);\n\n$ViewList['maintenance'] = array(\n    'params' => array(),\n    'uparams' => array('csfr','action'),\n    'functions' => array( 'maintenance' )\n);\n\n$ViewList['newcannedmsg'] = array(\n    'params' => array(),\n    'functions' => array( 'administratecannedmsg' )\n);\n\n$ViewList['cannedmsgedit'] = array(\n    'params' => array('id'),\n    'functions' => array( 'administratecannedmsg' )\n);\n\n$ViewList['geoadjustment'] = array(\n    'params' => array(),\n    'functions' => array( 'geoadjustment' )\n);\n\n$ViewList['accept'] = array(\n    'params' => array('hash','validation_hash','email')\n);\n\n$ViewList['confirmleave'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['sendchat'] = array(\n\t\t'params' => array('chat_id','hash')\n);\n\n$ViewList['transferchatrefilter'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['searchprovider'] = array(\n    'params' => array('scope'),\n    'functions' => array( 'use' )\n);\n\n$FunctionList['use'] = array('explain' => 'General permission to use chat module');\n$FunctionList['open_all'] = array('explain' => 'Allow operator to open all chats, not only assigned to him');\n$FunctionList['changeowner'] = array('explain' => 'Allow operator to change chat owner');\n$FunctionList['singlechatwindow'] = array('explain' =>'Allow operator to use single chat window functionality');\n$FunctionList['allowchattabs'] = array('explain' =>'Allow operator to user chat rooms functionality');\n$FunctionList['deletechat'] = array('explain' =>'Allow operator to delete his own chats');\n$FunctionList['deleteglobalchat'] = array('explain' =>'Allow to delete all chats');\n$FunctionList['allowtransfer'] = array('explain' =>'Allow user to transfer chat to another user');\n$FunctionList['allowcloseremote'] = array('explain' =>'Allow operator to close another operator chat');\n$FunctionList['allowblockusers'] = array('explain' =>'Allow operator to block visitors');\n$FunctionList['administrateconfig'] = array('explain' =>'Allow to change chat config');\n$FunctionList['allowclearonlinelist'] = array('explain' =>'Allow operator to clean online users list');\n$FunctionList['administratecannedmsg'] = array('explain' =>'Allow operator change canned messages');\n$FunctionList['allowopenremotechat'] = array('explain' =>'Allow operator to open other operators chats from same department');\n$FunctionList['writeremotechat'] = array('explain' =>'Allow operator to write to another operator chat');\n$FunctionList['allowreopenremote'] = array('explain' =>'Allow operator to reopen other operators chats');\n$FunctionList['allowtransfertoanyuser'] = array('explain' =>'Allow operator to transfer chat to any online operator, not only his own department users');\n$FunctionList['allowtransferdirectly'] = array('explain' =>'Allow operator to transfer chat directly to other operator');\n$FunctionList['use_onlineusers'] = array('explain' =>'Allow operator to view online visitors');\n$FunctionList['chattabschrome'] = array('explain' =>'Allow operator to use chrome extension');\n$FunctionList['canchangechatstatus'] = array('explain' =>'Allow operator to change chat status');\n$FunctionList['administrateinvitations'] = array('explain' =>'Allow operator to change pro active invitations');\n$FunctionList['administratecampaigs'] = array('explain' =>'Allow operator to change pro active campaigns');\n$FunctionList['administratechatevents'] = array('explain' =>'Allow operator to change pro active chat events');\n$FunctionList['administratechatvariables'] = array('explain' =>'Allow operator to change pro active chat variables');\n$FunctionList['administrateresponder'] = array('explain' =>'Allow operator to change auto responder');\n$FunctionList['maintenance'] = array('explain' =>'Allow operator to run maintenance');\n$FunctionList['sees_all_online_visitors'] = array('explain' =>'Operator can see all online visitors, not only his department');\n$FunctionList['geoadjustment'] = array('explain' => 'Allow operator to edit geo adjustment for chat status');\n$FunctionList['take_screenshot'] = array('explain' => 'Allow operator to take visitor browser page screenshots');\n$FunctionList['modifychat'] = array('explain' => 'Allow operator modify main chat information');\n$FunctionList['allowredirect'] = array('explain' => 'Allow operator to redirect user to another page');\n$FunctionList['administrategeoconfig'] = array('explain' => 'Allow operator to edit geo detection configuration');\n$FunctionList['manage_product'] = array('explain' => 'Allow operator to manage products');\n$FunctionList['administratesubject'] = array('explain' => 'Allow operator to manage subjects');\n$FunctionList['modifychatcore'] = array('explain' => 'Allow operator to change chat core attributes');\n$FunctionList['sendmail'] = array('explain' => 'Allow operator to send e-mail to visitor from chat window');\n$FunctionList['redirectcontact'] = array('explain' => 'Allow operator to redirect visitor to contact form');\n$FunctionList['holduse'] = array('explain' => 'Allow operator to use hold/unhold functionality');\n$FunctionList['setsubject'] = array('explain' => 'Allow operator to use set chat subject');\n$FunctionList['administratecolumn'] = array('explain' => 'Allow operator to configure chat columns');\n$FunctionList['administratechatvariable'] = array('explain' => 'Allow operator to configure chat custom variables');\n$FunctionList['administratechatpriority'] = array('explain' => 'Allow operator to configure chat priority by custom variables');\n$FunctionList['administratesyncsound'] = array('explain' => 'Allow operator to configure chat sound and sync settings');\n$FunctionList['voicemessages'] = array('explain' => 'Allow operator to send voice messages');\n$FunctionList['chatdebug'] = array('explain' => 'Allow operator to see raw chat details in chat edit window');\n$FunctionList['administrate_alert_icon'] = array('explain' => 'Allow operator to manage alert icons list');\n$FunctionList['prev_chats'] = array('explain' => 'Allow operator to see previous chats from visitor');\n$FunctionList['changedepartment'] = array('explain' => 'Allow operator to change chat department');\n$FunctionList['subject_chats'] = array('explain' => 'Allow operator see subject filtered chats');\n$FunctionList['subject_chats_options'] = array('explain' => 'Allow operator to choose what subjects should be applied as filter');\n$FunctionList['export_chats'] = array('explain' => 'Allow operator to export filtered chats');\n\n?>", "<?php\r\n\r\ntry {\r\n    erLhcoreClassRestAPIHandler::validateRequest();\r\n\r\n    if (!erLhcoreClassRestAPIHandler::hasAccessTo('lhchat', 'use')) {\r\n        throw new Exception('You do not have permission. `lhchat`, `use` is required.');\r\n    }\r\n\r\n    $definition = array(\r\n        'chat_id' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::REQUIRED, 'int'\r\n        ),\r\n        'user_id' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'int', array('min_range' => 1)\r\n        ),\r\n        'msg' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::REQUIRED, 'unsafe_raw'\r\n        ),\r\n        'meta_msg' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\r\n        ),\r\n        'operator_name' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\r\n        ),\r\n        'sender' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\r\n        )\r\n    );\r\n\r\n    $form = new ezcInputForm( INPUT_POST, $definition );\r\n\r\n    if (trim($form->msg) != '')\r\n    {\r\n        $db = ezcDbInstance::get();\r\n\r\n        try {\r\n            $db->beginTransaction();\r\n\r\n            $Chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $form->chat_id);\r\n\r\n            if (!($Chat instanceof erLhcoreClassModelChat)) {\r\n                throw new Exception('Chat could not be found!');\r\n            }\r\n\r\n            // Has access to read, chat\r\n            //FIXME create permission to add message...\r\n            if ( erLhcoreClassRestAPIHandler::hasAccessToWrite($Chat) )\r\n            {\r\n                $userData = erLhcoreClassRestAPIHandler::getUser();\r\n\r\n                if ($form->sender == 'system') {\r\n                    $messageUserId = -1;\r\n                } else if ($form->sender != 'bot') {\r\n                    $messageUserId = $userData->id;\r\n                } else {\r\n                    $messageUserId = -2;\r\n                }\r\n\r\n                if ($form->hasValidData('user_id')) {\r\n                    $messageUserId = $form->user_id;\r\n                    $userData = erLhcoreClassModelUser::fetch($messageUserId);\r\n\r\n                    if (!($userData instanceof erLhcoreClassModelUser)) {\r\n                        throw new Exception('Operator with provided user_id could not be found!');\r\n                    }\r\n                }\r\n\r\n                $msgText = trim($form->msg);\r\n                $ignoreMessage = false;\r\n                $returnBody = '';\r\n                $customArgs = array();\r\n                $msg = new erLhcoreClassModelmsg();\r\n\r\n                if (strpos($msgText, '!') === 0) {\r\n                    $statusCommand = erLhcoreClassChatCommand::processCommand(array('user' => $userData, 'msg' => $msgText, 'chat' => & $Chat));\r\n                    if ($statusCommand['processed'] === true) {\r\n                        $messageUserId = -1; // Message was processed set as internal message\r\n\r\n                        $rawMessage = !isset($statusCommand['raw_message']) ? $msgText : $statusCommand['raw_message'];\r\n\r\n                        $msgText = trim('[b]'.$userData->name_support.'[/b]: '.$rawMessage .' '. ($statusCommand['process_status'] != '' ? '|| '.$statusCommand['process_status'] : ''));\r\n\r\n                        if (isset($statusCommand['ignore']) && $statusCommand['ignore'] == true) {\r\n                            $ignoreMessage = true;\r\n                        }\r\n\r\n                        if (isset($statusCommand['info'])) {\r\n                            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                            $tpl->set('msg',array('msg' =>  $statusCommand['info'], 'time' => time()));\r\n                            $returnBody = $tpl->fetch();\r\n                        }\r\n\r\n                        if (isset($statusCommand['custom_args'])) {\r\n                            $customArgs = $statusCommand['custom_args'];\r\n                        }\r\n                    };\r\n                }\r\n\r\n                if ($ignoreMessage == false) {\r\n                    $msg->msg = $msgText;\r\n                    $msg->chat_id = $Chat->id;\r\n                    $msg->user_id = $messageUserId;\r\n                    $msg->time = time();\r\n\r\n                    if ($form->hasValidData('meta_msg') && $form->meta_msg != '') {\r\n                        $metaParts = json_decode($form->meta_msg,true);\r\n                        // Parse meta message as it was bot message and store it within message\r\n                        // We cannot store directly meta message content because it may contain callbacks which can be internal functions\r\n                        // It would be huge security flaw in automated hosting environment\r\n                        if ($metaParts !== null) {\r\n                            $trigger = new erLhcoreClassModelGenericBotTrigger();\r\n                            $trigger->actions_front = $metaParts;\r\n                            $trigger->actions = $form->meta_msg;\r\n\r\n                            // Combine all meta messages to single one\r\n                            $messages = erLhcoreClassGenericBotWorkflow::processTriggerPreview($Chat, $trigger, array('args' => array('do_not_save' => true)));\r\n\r\n                            $metaData = array();\r\n                            foreach ($messages as $metaMessage) {\r\n                                $metaData = array_merge_recursive($metaData, $metaMessage->meta_msg_array);\r\n                            }\r\n\r\n                            $metaData = array_filter($metaData);\r\n\r\n                            if (!empty($metaData)) {\r\n                                $msg->meta_msg = json_encode($metaData);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ($form->hasValidData('operator_name') && $form->operator_name != '') {\r\n                        $msg->name_support = $form->operator_name;\r\n                    } elseif ($form->sender == 'bot') {\r\n\r\n                        $chatVariables = $Chat->chat_variables_array;\r\n\r\n                        $nameSupport = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Live Support');\r\n\r\n                        if ($Chat->gbot_id > 0) {\r\n                            $bot = erLhcoreClassModelGenericBotBot::fetch($Chat->gbot_id);\r\n                            if ($bot instanceof erLhcoreClassModelGenericBotBot && $bot->nick != '') {\r\n                                $nameSupport = $bot->nick;\r\n                            }\r\n                        }\r\n\r\n                        $msg->name_support = $nameSupport;\r\n\r\n                    } else {\r\n                        $msg->name_support = $userData->name_support;\r\n                    }\r\n\r\n                    if ($messageUserId != -1 && $Chat->chat_locale != '' && $Chat->chat_locale_to != '') {\r\n                        erLhcoreClassTranslate::translateChatMsgOperator($Chat, $msg);\r\n                    }\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved',array('msg' => & $msg,'chat' => & $Chat));\r\n\r\n                    erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                    // Set last message ID\r\n                    if ($Chat->last_msg_id < $msg->id) {\r\n\r\n                        $statusSub = '';\r\n                        if ($Chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $messageUserId !== -1) {\r\n                            $statusSub = ',status_sub = 0, last_user_msg_time = ' . (time() - 1);\r\n                            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Hold removed!'), 'time' => time()));\r\n                            $returnBody .= $tpl->fetch();\r\n                            $customArgs['hold_removed'] = true;\r\n\r\n                            if ($Chat->auto_responder !== false) {\r\n                                $Chat->auto_responder->active_send_status = 0;\r\n                                $Chat->auto_responder->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        // Reset active counter if operator send new message and it's sync request and there was new message from operator\r\n                        if ($Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $Chat->auto_responder !== false) {\r\n                            if ($Chat->auto_responder->active_send_status != 0) {\r\n                                $Chat->auto_responder->active_send_status = 0;\r\n                                $Chat->auto_responder->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        $stmt = $db->prepare('UPDATE lh_chat SET status = :status, wait_time = :wait_time, user_status = :user_status, last_msg_id = :last_msg_id, last_op_msg_time = :last_op_msg_time, has_unread_op_messages = :has_unread_op_messages, unread_op_messages_informed = :unread_op_messages_informed' . $statusSub . ' WHERE id = :id');\r\n                        $stmt->bindValue(':id',$Chat->id,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':last_msg_id',$msg->id,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':last_op_msg_time',time(),PDO::PARAM_INT);\r\n                        $stmt->bindValue(':has_unread_op_messages',1,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':unread_op_messages_informed',0,PDO::PARAM_INT);\r\n\r\n                        if ($userData->invisible_mode == 0 && $messageUserId > 0) { // Change status only if it's not internal command\r\n                            if ($Chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\r\n                                $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\r\n                                $Chat->user_id = $messageUserId;\r\n                            }\r\n                        }\r\n\r\n                        // Chat can be reopened only if user did not ended chat explictly\r\n                        if ($Chat->user_status == erLhcoreClassModelChat::USER_STATUS_CLOSED_CHAT && $Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\r\n                            $Chat->user_status = erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN;\r\n                            if ( ($onlineuser = $Chat->online_user) !== false) {\r\n                                $onlineuser->reopen_chat = 1;\r\n                                $onlineuser->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        if ($Chat->wait_time == 0) {\r\n                            $Chat->wait_time = time() - ($Chat->pnd_time > 0 ? $Chat->pnd_time : $Chat->time);\r\n                        }\r\n\r\n                        $stmt->bindValue(':user_status',$Chat->user_status,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':status',$Chat->status,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':wait_time',$Chat->wait_time,PDO::PARAM_INT);\r\n                        $stmt->execute();\r\n                    }\r\n\r\n\r\n\r\n                    // If chat is in bot mode and operators writes a message, accept a chat as operator.\r\n                    if ($form->sender == 'operator' && $Chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT && $messageUserId != -1) {\r\n\r\n                        if ($userData->invisible_mode == 0 && erLhcoreClassRestAPIHandler::hasAccessToWrite($Chat)) {\r\n                            $Chat->refreshThis();\r\n                            $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\r\n\r\n                            $Chat->wait_time = 1; // Chat was in bot mode so wait time has to bet 1 second to be minimal\r\n                            $Chat->user_id = $userData->id;\r\n\r\n                            // User status in event of chat acceptance\r\n                            $Chat->usaccept = $userData->hide_online;\r\n                            $Chat->saveThis();\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $Chat, 'user_data' => $userData));\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $Chat, 'user_data' => $userData));\r\n                            erLhcoreClassChat::updateActiveChats($Chat->user_id);\r\n\r\n                            if ($Chat->department !== false) {\r\n                                erLhcoreClassChat::updateDepartmentStats($Chat->department);\r\n                            }\r\n\r\n                            $options = $Chat->department->inform_options_array;\r\n                            erLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $Chat->department, 'options' => $options),$Chat);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT) {\r\n\r\n                    $transfer = erLhcoreClassModelTransfer::findOne(array('filter' => array('transfer_user_id' => $userData->id, 'transfer_to_user_id' => ($Chat->user_id == $userData->id ? $Chat->sender_user_id : $Chat->user_id))));\r\n\r\n                    if ($transfer === false) {\r\n                        $transfer = new erLhcoreClassModelTransfer();\r\n\r\n                        $transfer->chat_id = $Chat->id;\r\n\r\n                        $transfer->from_dep_id = $Chat->dep_id;\r\n\r\n                        // User which is transfering\r\n                        $transfer->transfer_user_id = $userData->id;\r\n\r\n                        // To what user\r\n                        $transfer->transfer_to_user_id = $Chat->user_id == $userData->id ? $Chat->sender_user_id : $Chat->user_id;\r\n                        $transfer->saveThis();\r\n                    }\r\n                }\r\n\r\n                echo erLhcoreClassChat::safe_json_encode(array('error' => false, 'r' => $returnBody, 'msg' => $msg->getState())+ $customArgs);\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.web_add_msg_admin', array('msg' => & $msg,'chat' => & $Chat));\r\n\r\n            } else {\r\n                throw new Exception('You cannot read this chat!');\r\n            }\r\n\r\n            $db->commit();\r\n\r\n        } catch (Exception $e) {\r\n            http_response_code(400);\r\n            echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n                'error' => true,\r\n                'r' => $e->getMessage()\r\n            ));\r\n            $db->rollback();\r\n        }\r\n\r\n    } else {\r\n        http_response_code(400);\r\n        echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n            'error' => true,\r\n            'r' => \"Please enter a message!\"\r\n        ));\r\n    }\r\n} catch (Exception $e) {\r\n    http_response_code(400);\r\n    echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n        'error' => true,\r\n        'r' => $e->getMessage()\r\n    ));\r\n}\r\n\r\nexit;\r\n\r\n?>"], "fixing_code": ["<?php\r\n\r\nclass erLhcoreClassChatWorkflow {\r\n\r\n    /**\r\n     * Message for timeout\r\n     */\r\n    public static function timeoutWorkflow(erLhcoreClassModelChat & $chat)\r\n    {\r\n        $operator = $chat->auto_responder->auto_responder->operator;\r\n        $name_support = $operator != '' ? $operator : erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Live Support');\r\n\r\n        if (trim($chat->auto_responder->auto_responder->timeout_message) != '') {\r\n            $msg = new erLhcoreClassModelmsg();\r\n            $msg->msg = erLhcoreClassGenericBotWorkflow::translateMessage(trim($chat->auto_responder->auto_responder->timeout_message), array('chat' => $chat));\r\n            $msg->chat_id = $chat->id;\r\n            $msg->name_support = $name_support;\r\n            $msg->user_id = -2;\r\n            $msg->time = time();\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            $chat->updateThis(array('update' => array('last_msg_id')));\r\n        }\r\n\r\n        $chat->auto_responder->auto_responder->getMeta($chat, 'pending_op', 1, array('override_nick' => $name_support, 'store_messages' => true));\r\n    }\r\n\r\n    /**\r\n     * Transfer workflow between departments\r\n     * */\r\n    public static function transferWorkflow(erLhcoreClassModelChat & $chat, $params = array())\r\n    {\r\n        $chat->transfer_if_na = 0;\r\n        $chat->transfer_timeout_ts = time();\r\n\r\n        if ($chat->department !== false && ($departmentTransfer = $chat->department->department_transfer) !== false) {\r\n\r\n            $botConfiguration = $chat->department->bot_configuration_array;\r\n\r\n            $chat->dep_id = $departmentTransfer->id;\r\n\r\n            $msg = new erLhcoreClassModelmsg();\r\n\r\n            if (isset($params['offline_operators']) && $params['offline_operators'] == true) {\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Transferred to').' \"'.$departmentTransfer.'\" '.erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','as no operators online in').' \"'.$chat->department.'\"';\r\n            } else {\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was automatically transferred to').' \"'.$departmentTransfer.'\" '.erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','from').' \"'.$chat->department.'\"';\r\n            }\r\n\r\n            $msg->chat_id = $chat->id;\r\n            $msg->user_id = -1;\r\n\r\n\r\n            $chat->last_user_msg_time = $msg->time = time();\r\n\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            if ($departmentTransfer->inform_unread == 1) {\r\n                $chat->reinform_timeout = $departmentTransfer->inform_unread_delay;\r\n                $chat->unread_messages_informed = 0;\r\n            }\r\n\r\n            // Our new department also has a transfer rule\r\n            if ($departmentTransfer->department_transfer !== false) {\r\n                $chat->transfer_if_na = 1;\r\n                $chat->transfer_timeout_ac = $departmentTransfer->transfer_timeout;\r\n            }\r\n\r\n            // Reset user on chat transfer to other department if required\r\n            if (isset($botConfiguration['ru_on_transfer']) && $botConfiguration['ru_on_transfer'] == 1 && $chat->user_id > 0) {\r\n\r\n                if ($chat->user_id > 0) {\r\n                    erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                }\r\n\r\n                $chat->user_id = 0;\r\n            }\r\n\r\n            if ($chat->department->nc_cb_execute == 1) {\r\n                $chat->nc_cb_executed = 0;\r\n            }\r\n\r\n            erLhAbstractModelAutoResponder::updateAutoResponder($chat);\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed_assigned_department',array('chat' => & $chat, 'from_dep' => $chat->department, 'to_dep' => $departmentTransfer));\r\n\r\n            $chat->updateThis(array('update' => array('dep_id','last_user_msg_time','last_msg_id','reinform_timeout','unread_messages_informed','user_id','na_cb_executed','transfer_if_na','transfer_timeout_ts','transfer_timeout_ac')));\r\n        } else {\r\n            $chat->updateThis(array('update' => array('transfer_if_na','transfer_timeout_ts')));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static function mainUnansweredChatWorkflow() {\r\n        $output = '';\r\n        if ( erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_value > 0) {\r\n\r\n            $output .= \"Starting unaswered chats workflow\\n\";\r\n\r\n            $delay = time()-(erLhcoreClassModelChatConfig::fetch('run_unaswered_chat_workflow')->current_valu*60);\r\n\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500, 'filterlt' => array('time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_PENDING_CHAT, 'na_cb_executed' => 0))) as $chat) {\r\n                erLhcoreClassChatWorkflow::unansweredChatWorkflow($chat);\r\n                $output .= \"executing unanswered callback for chat - \".$chat->id.\"\\n\";\r\n            }\r\n\r\n            $output .= \"Ended unaswered chats workflow\\n\";\r\n        }\r\n\r\n        return $output;\r\n    }\r\n    /*\r\n     * Chat was unanswered for n minits, execute callback.\r\n     * */\r\n    public static function unansweredChatWorkflow(erLhcoreClassModelChat & $chat){\r\n\r\n        $chat->na_cb_executed = 1;\r\n        $chat->updateThis(array('update' => array('na_cb_executed')));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.unread_chat_workflow',array('chat' => & $chat));\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/unanswered_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function unreadInformWorkflow($options, & $chat) {\r\n\r\n        $chat->unread_messages_informed = 1;\r\n        $chat->updateThis(array('update' => array('unread_messages_informed')));\r\n\r\n        if (in_array('mail', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat,7);\r\n        }\r\n\r\n        if (in_array('xmp', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat);\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_unread_message',array('chat' => & $chat));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/unread_message_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static function chatAcceptedWorkflow($options, & $chat) {\r\n        if (in_array('mail_accepted', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat,9);\r\n        }\r\n\r\n        if (in_array('xmp_accepted', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat, array('template' => 'xmp_accepted_message', 'recipients_setting' => 'xmp_users_accepted'));\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.chat_accepted',array('chat' => & $chat));\r\n    }\r\n\r\n\r\n    public static function newChatInformWorkflow($options, & $chat) {\r\n\r\n        $chat->nc_cb_executed = 1;\r\n        $chat->updateThis(array('update' => array('nc_cb_executed')));\r\n\r\n        if (in_array('mail', $options['options'])) {\r\n            erLhcoreClassChatMail::sendMailUnacceptedChat($chat);\r\n        }\r\n\r\n        if (in_array('xmp', $options['options'])) {\r\n            $errors = array();\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('xml.before_send_xmp_message', array('chat' => & $chat, 'errors' => & $errors));\r\n\r\n            if (empty($errors)) {\r\n                erLhcoreClassXMP::sendXMPMessage($chat);\r\n            }\r\n        }\r\n\r\n        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.new_chat',array('chat' => & $chat));\r\n\r\n        // Execute callback if it exists\r\n        $extensions = erConfigClassLhConfig::getInstance()->getOverrideValue( 'site', 'extensions' );\r\n        $instance = erLhcoreClassSystem::instance();\r\n\r\n        foreach ($extensions as $ext) {\r\n            $callbackFile = $instance->SiteDir . '/extension/' . $ext . '/callbacks/new_chat.php';\r\n            if (file_exists($callbackFile)) {\r\n                include $callbackFile;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function automaticChatClosing() {\r\n\r\n        $closedChatsNumber = 0;\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n\r\n            // Close normal chats\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filtergt' => array('last_user_msg_time' => 0), 'filterlt' => array('last_user_msg_time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_ACTIVE_CHAT))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n\r\n            // Close pending chats where the only message is user initial message\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_PENDING_CHAT, erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)),'filter' => array('last_user_msg_time' => 0))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_pending')->current_value;\r\n        if ($timeout > 0) {\r\n\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_PENDING_CHAT)))) as $chat) {\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_active')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filterlt' => array('time' => $delay), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_timeout_bot')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'customfilter' => array('((last_user_msg_time = 0 AND time < ' . $delay . ') OR (last_user_msg_time > 0 AND last_user_msg_time < ' . $delay . '))'), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_BOT_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->pnd_time = time();\r\n                    $chat->wait_time = 1;\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autoclose_activity_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500, 'customfilter' => array('((\r\n            (last_user_msg_time = 0 AND last_op_msg_time = 0 AND time < ' . $delay . ') OR \r\n            (last_user_msg_time > 0 AND last_user_msg_time >= last_op_msg_time AND last_user_msg_time < ' . $delay . ') OR \r\n            (last_op_msg_time > 0 AND last_op_msg_time >= last_user_msg_time AND last_op_msg_time < ' . $delay . ') \r\n            ) AND (GREATEST(`pnd_time`,`time`) + `wait_time`) < '.$delay.')'), 'filterin' => array('status' => array(erLhcoreClassModelChat::STATUS_ACTIVE_CHAT)))) as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron because of inactivity!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n        \r\n        $timeoutParts = explode(',',str_replace(' ','',erLhcoreClassModelChatConfig::fetch('autoclose_abandon_pending')->current_value));\r\n\r\n        if ((int)$timeoutParts[0] > 0) {\r\n            $delay = time()-((int)$timeoutParts[0]*60);\r\n            $delayMobile = time()-((isset($timeoutParts[1]) && is_numeric($timeoutParts[1]) ? (int)$timeoutParts[1] : (int)$timeoutParts[0]) * 60);\r\n            $closeActive = isset($timeoutParts[2]) && is_numeric($timeoutParts[2]) ? (int)$timeoutParts[2] : 0;\r\n            if ($closeActive == 1) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_ACTIVE_CHAT\r\n                );\r\n            } elseif ($closeActive == 2) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT,\r\n                    erLhcoreClassModelChat::STATUS_ACTIVE_CHAT,\r\n                );\r\n            } elseif ($closeActive == 3) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT,\r\n                    erLhcoreClassModelChat::STATUS_BOT_CHAT,\r\n                );\r\n            } elseif ($closeActive == 4) {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_BOT_CHAT,\r\n                );\r\n            } else {\r\n                $closeTypes = array(\r\n                    erLhcoreClassModelChat::STATUS_PENDING_CHAT\r\n                );\r\n            }\r\n\r\n            $chatsToClose = erLhcoreClassChat::getList(array('limit' => 500, 'customfilter' => array('(`status_sub` IN ('.\r\n                erLhcoreClassModelChat::STATUS_SUB_SURVEY_SHOW . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_SURVEY_COMPLETED . ',' .\r\n                erLhcoreClassModelChat::STATUS_SUB_CONTACT_FORM . ') OR (`lsync` > 0 AND ((`lsync` < '. $delay .' AND `device_type` = 0) OR  (`lsync` < '. $delayMobile .' AND `device_type` IN (1,2)))))'),\r\n                'filterin' => array('status' => $closeTypes)));\r\n\r\n            $avoidCloseCallback = count($chatsToClose) == 500;\r\n\r\n            foreach ($chatsToClose as $chat) {\r\n\r\n                if ($chat->cls_us == 0) {\r\n                    $chat->cls_us = $chat->user_status_front + 1;\r\n                }\r\n\r\n                $statusOriginal = $chat->status;\r\n\r\n                $chat->status = erLhcoreClassModelChat::STATUS_CLOSED_CHAT;\r\n\r\n                $msg = new erLhcoreClassModelmsg();\r\n                $msg->msg = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/syncuser','Chat was closed by cron because visitor left the pending chat!');\r\n                $msg->chat_id = $chat->id;\r\n                $msg->user_id = -1;\r\n\r\n                $chat->last_user_msg_time = $msg->time = time();\r\n\r\n                erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                if ($chat->last_msg_id < $msg->id) {\r\n                    $chat->last_msg_id = $msg->id;\r\n                }\r\n\r\n                if ($chat->wait_time == 0) {\r\n                    if ($statusOriginal == erLhcoreClassModelChat::STATUS_BOT_CHAT) {\r\n                        $chat->pnd_time = time();\r\n                        $chat->wait_time = 1;\r\n                    } else {\r\n                        $chat->wait_time = time() - ($chat->pnd_time > 0 ? $chat->pnd_time : $chat->time);\r\n                    }\r\n                }\r\n\r\n                $chat->chat_duration = erLhcoreClassChat::getChatDurationToUpdateChatID($chat);\r\n                $chat->cls_time = time();\r\n                $chat->has_unread_messages = 0;\r\n                $chat->updateThis();\r\n\r\n                if (!$avoidCloseCallback) {\r\n                    erLhcoreClassChat::closeChatCallback($chat, $chat->user);\r\n                }\r\n\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                $closedChatsNumber++;\r\n            }\r\n        }\r\n\r\n\r\n        return $closedChatsNumber;\r\n    }\r\n\r\n    public static function automaticChatPurge() {\r\n\r\n        $purgedChatsNumber = 0;\r\n\r\n        $timeout = (int)erLhcoreClassModelChatConfig::fetch('autopurge_timeout')->current_value;\r\n        if ($timeout > 0) {\r\n            $delay = time()-($timeout*60);\r\n            foreach (erLhcoreClassChat::getList(array('limit' => 500,'filtergt' => array('last_user_msg_time' => 0), 'filterlt' => array('last_user_msg_time' => $delay), 'filter' => array('status' => erLhcoreClassModelChat::STATUS_CLOSED_CHAT))) as $chat) {\r\n                $chat->removeThis();\r\n                erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n\r\n                if ($chat->department !== false) {\r\n                    erLhcoreClassChat::updateDepartmentStats($chat->department);\r\n                }\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.delete', array(\r\n                    'chat' => & $chat\r\n                ));\r\n\r\n                $purgedChatsNumber++;\r\n            }\r\n        }\r\n\r\n        return $purgedChatsNumber;\r\n    }\r\n\r\n    public static function autoAssign(& $chat, $department, $params = array()) {\r\n\r\n        if (is_object($department) && $department->active_balancing == 1 && ($department->max_ac_dep_chats == 0 || $department->active_chats_counter < $department->max_ac_dep_chats) && ($chat->user_id == 0 || ($department->max_timeout_seconds > 0 && $chat->tslasign < time()-$department->max_timeout_seconds)) ){\r\n\r\n            $isOnlineUser = (int)erLhcoreClassModelChatConfig::fetch('sync_sound_settings')->data['online_timeout'];\r\n\r\n            $db = ezcDbInstance::get();\r\n\r\n            try {\r\n\r\n                $botConfiguration = $department->bot_configuration_array;\r\n\r\n                if (\r\n                    isset($botConfiguration['auto_delay_var']) && $botConfiguration['auto_delay_var'] != '' &&\r\n                    isset($botConfiguration['auto_delay_timeout']) && $botConfiguration['auto_delay_timeout'] > 0 &&\r\n                    (time() - $chat->time) < $botConfiguration['auto_delay_timeout']\r\n                )\r\n                {\r\n                    $valueToCompare = null;\r\n                    if (strpos($botConfiguration['auto_delay_var'],'additional_data') !== false) {\r\n                        $additionalDataArray = $chat->additional_data_array;\r\n\r\n                        if (is_array($additionalDataArray)) {\r\n                            foreach ($additionalDataArray as $additionalItem) {\r\n                                $valueCompare = false;\r\n\r\n                                if (isset($additionalItem['identifier'])){\r\n                                    $valueCompare = $additionalItem['identifier'];\r\n                                } elseif (isset($additionalItem['key'])){\r\n                                    $valueCompare = $additionalItem['key'];\r\n                                }\r\n\r\n                                if ($valueCompare !== false && $valueCompare == str_replace('additional_data.','',$botConfiguration['auto_delay_var'])) {\r\n                                    $valueToCompare = $additionalItem['value'];\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } elseif (strpos($botConfiguration['auto_delay_var'],'chat_variable') !== false) {\r\n                        $additionalDataArray = $chat->chat_variables_array;\r\n                        if (is_array($additionalDataArray)) {\r\n                            $variableName = str_replace('chat_variable.','', $botConfiguration['auto_delay_var']);\r\n                            if (isset($chat->chat_variables_array[$variableName]) && $chat->chat_variables_array[$variableName] != '') {\r\n                                $valueToCompare = $chat->chat_variables_array[$variableName];\r\n                            }\r\n                        }\r\n                    } else {\r\n\r\n                        $statusWorkflowPermit = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.autoassign_permit', array(\r\n                            'department' => & $department,\r\n                            'chat' => & $chat,\r\n                            'params' => & $params,\r\n                        ));\r\n\r\n                        if ($statusWorkflowPermit !== false) {\r\n                            if (isset($statusWorkflowPermit['stop']) && $statusWorkflowPermit['stop'] == true) {\r\n                                $valueToCompare = true;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Variable was not found ignore chat for a while\r\n                    if ($valueToCompare === null) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                $db->beginTransaction();\r\n\r\n                // Lock chat record for update untill we finish this procedure\r\n                erLhcoreClassChat::lockDepartment($department->id, $db);\r\n\r\n                if ($chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT && ($chat->user_id == 0 || ($department->max_timeout_seconds > 0 && $chat->tslasign < time()-$department->max_timeout_seconds))) {\r\n\r\n                    $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.autoassign', array(\r\n                        'department' => & $department,\r\n                        'chat' => & $chat,\r\n                        'is_online' => & $isOnlineUser,\r\n                        'params' => & $params,\r\n                    ));\r\n\r\n                    // There was no callbacks or file not found etc, we try to download from standard location\r\n                    if ($statusWorkflow === false) {\r\n\r\n                        $condition = '(active_chats + pending_chats)';\r\n                        if ($department->exclude_inactive_chats == 1) {\r\n                            $condition = '((pending_chats + active_chats) - inactive_chats)';\r\n                        }\r\n\r\n                        if ($department->max_active_chats > 0) {\r\n                            $appendSQL = \" AND ((max_chats = 0 AND {$condition} < :max_active_chats) OR (max_chats > 0 AND {$condition} < max_chats))\";\r\n                        } else {\r\n                            $appendSQL = \" AND ((max_chats > 0 AND {$condition} < max_chats) OR (max_chats = 0))\";\r\n                        }\r\n\r\n                        if (!isset($params['include_ignored_users']) || $params['include_ignored_users'] == false) {\r\n                            $appendSQL .= \" AND exclude_autoasign = 0\";\r\n                        }\r\n\r\n                        // Allow limit by provided user_ids\r\n                        // Usefull for extension which has custom auto assign workflow\r\n                        if (isset($params['user_ids'])) {\r\n                            if (empty($params['user_ids'])) {\r\n                                return array('status' => erLhcoreClassChatEventDispatcher::STOP_WORKFLOW, 'user_id' => 0);\r\n                            }\r\n\r\n                            $appendSQL .= ' AND `lh_userdep`.`user_id` IN (' . implode(', ',$params['user_ids']) . ')';\r\n                        }\r\n\r\n                        $sort = 'last_accepted ASC';\r\n                        if (isset($botConfiguration['auto_lower_limit']) && $botConfiguration['auto_lower_limit'] == '1') {\r\n                            $sort = 'active_chats ASC, last_accepted ASC';\r\n                        }\r\n\r\n                        $sql = \"SELECT user_id FROM lh_userdep WHERE last_accepted < :last_accepted AND ro = 0 AND hide_online = 0 AND dep_id = :dep_id AND (`lh_userdep`.`last_activity` > :last_activity OR `lh_userdep`.`always_on` = 1) AND user_id != :user_id {$appendSQL} ORDER BY {$sort} LIMIT 1\";\r\n\r\n                        $tryDefault = true;\r\n\r\n                        // Try to assign to operator speaking same language first\r\n                        if ($department->assign_same_language == 1 && $chat->chat_locale != '') {\r\n\r\n                            $sqlLanguages =  \"SELECT `lh_userdep`.`user_id` FROM lh_userdep INNER JOIN lh_speech_user_language ON `lh_speech_user_language`.`user_id` = `lh_userdep`.`user_id` WHERE last_accepted < :last_accepted AND ro = 0 AND hide_online = 0 AND dep_id = :dep_id AND (`lh_userdep`.`last_activity` > :last_activity OR `lh_userdep`.`always_on` = 1) AND `lh_userdep`.`user_id` != :user_id AND `lh_speech_user_language`.`language` = :chatlanguage {$appendSQL} ORDER BY {$sort} LIMIT 1\";\r\n\r\n                            $db = ezcDbInstance::get();\r\n                            $stmt = $db->prepare($sqlLanguages);\r\n                            $stmt->bindValue(':dep_id',$department->id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_activity',(time()-$isOnlineUser),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':user_id',$chat->user_id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_accepted',(time() - $department->delay_before_assign),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':chatlanguage',$chat->chat_locale,PDO::PARAM_STR);\r\n\r\n                            if ($department->max_active_chats > 0) {\r\n                                $stmt->bindValue(':max_active_chats',$department->max_active_chats,PDO::PARAM_INT);\r\n                            }\r\n\r\n                            $stmt->execute();\r\n\r\n                            $user_id = $stmt->fetchColumn();\r\n\r\n                            if (is_numeric($user_id) && $user_id > 0) {\r\n                                $tryDefault = false;\r\n                            }\r\n                        }\r\n\r\n\r\n\r\n                        if ($tryDefault == true) {\r\n                            $db = ezcDbInstance::get();\r\n                            $stmt = $db->prepare($sql);\r\n                            $stmt->bindValue(':dep_id',$department->id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_activity',(time()-$isOnlineUser),PDO::PARAM_INT);\r\n                            $stmt->bindValue(':user_id',$chat->user_id,PDO::PARAM_INT);\r\n                            $stmt->bindValue(':last_accepted',(time() - $department->delay_before_assign),PDO::PARAM_INT);\r\n\r\n                            if ($department->max_active_chats > 0) {\r\n                                $stmt->bindValue(':max_active_chats',$department->max_active_chats,PDO::PARAM_INT);\r\n                            }\r\n\r\n                            $stmt->execute();\r\n\r\n                            $user_id = $stmt->fetchColumn();\r\n                        }\r\n\r\n                    } else {\r\n                        $db = ezcDbInstance::get();\r\n                        $user_id = $statusWorkflow['user_id'];\r\n                    }\r\n\r\n                    if ($user_id > 0) {\r\n\r\n                        $previousMessage = '';\r\n\r\n                        $msg = new erLhcoreClassModelmsg();\r\n                        $msg->chat_id = $chat->id;\r\n                        $msg->user_id = -1;\r\n                        $msg->time = time();\r\n\r\n                        // Update previously assigned operator statistic\r\n                        if ($chat->user_id > 0) {\r\n                            $userOld = erLhcoreClassModelUser::fetch($chat->user_id);\r\n                            $msg->name_support = $userOld->name_support;\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved', array('msg' => & $msg, 'chat' => & $chat, 'user_id' => $chat->user_id));\r\n\r\n                            $previousMessage = '[' . $chat->user_id . '] ' . $msg->name_support . ' '.  erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','did not accepted chat in time.') . ' ';\r\n                            erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                        }\r\n\r\n                        $userNew = erLhcoreClassModelUser::fetch($user_id);\r\n                        $msg->name_support = $userNew->name_support;\r\n\r\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_user_saved', array('msg' => & $msg, 'chat' => & $chat, 'user_id' => $user_id));\r\n\r\n                        $msg->msg = $previousMessage . erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat','Chat was assigned to') . ' [' . $userNew->id .'] ' . $msg->name_support;\r\n\r\n                        erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                        // Set owner to a new user\r\n                        $chat->tslasign = time();\r\n                        $chat->user_id = $user_id;\r\n                        $chat->last_msg_id = $msg->id;\r\n                        $chat->updateThis(array('update' => array('last_msg_id','tslasign','user_id')));\r\n\r\n                        erLhcoreClassUserDep::updateLastAcceptedByUser($user_id, time());\r\n\r\n                        // Update fresh user statistic\r\n                        erLhcoreClassChat::updateActiveChats($chat->user_id);\r\n                    }\r\n                }\r\n\r\n                if (isset($user_id) && $user_id > 0) {\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed_auto_assign',array('chat' => & $chat));\r\n                }\r\n\r\n                $db->commit();\r\n\r\n            } catch (Exception $e) {\r\n                $db->rollback();\r\n                throw $e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function presendCannedMsg($chat) {\r\n\r\n        $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.presend_canned_msg', array(\r\n            'chat' => & $chat,\r\n        ));\r\n\r\n        if ($statusWorkflow === false) {\r\n            $session = erLhcoreClassChat::getSession();\r\n            $q = $session->createFindQuery( 'erLhcoreClassModelCannedMsg' );\r\n            $q->where(\r\n                $q->expr->lOr(\r\n                    $q->expr->eq( 'department_id', $q->bindValue($chat->dep_id) ),\r\n                    $q->expr->lAnd($q->expr->eq( 'department_id', $q->bindValue( 0 ) ),$q->expr->eq( 'user_id', $q->bindValue( 0 ) )),\r\n                    $q->expr->eq( 'user_id', $q->bindValue($chat->user_id) )\r\n                ),\r\n                $q->expr->eq( 'auto_send', $q->bindValue(1) )\r\n            );\r\n\r\n            $q->limit(1, 0);\r\n            $q->orderBy('user_id DESC, position ASC, id ASC' ); // Questions with matched URL has higher priority\r\n            $items = $session->find( $q );\r\n        } else {\r\n            $items = $statusWorkflow['items'];\r\n        }\r\n\r\n        if (!empty($items)){\r\n            $cannedMsg = array_shift($items);\r\n\r\n            $replaceArray = array(\r\n                '{nick}' => $chat->nick,\r\n                '{email}' => $chat->email,\r\n                '{phone}' => $chat->phone,\r\n                '{operator}' => (string)$chat->user->name_support\r\n            );\r\n\r\n            $additionalData = $chat->additional_data_array;\r\n\r\n            if (is_array($additionalData)) {\r\n                foreach ($additionalData as $row) {\r\n                    if (isset($row['identifier']) && $row['identifier'] != '') {\r\n                        $replaceArray['{'.$row['identifier'].'}'] = $row['value'];\r\n                    }\r\n                }\r\n            }\r\n\r\n            $items = array($cannedMsg);\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.canned_message_replace',array('items' => & $items, 'user' => $chat->user, 'chat' => $chat, 'replace_array' => & $replaceArray));\r\n\r\n            $cannedMsg = $items[0];\r\n\r\n            // Set proper message by language\r\n            $cannedMsg->setMessageByChatLocale($chat->chat_locale);\r\n\r\n            $cannedMsg->setReplaceData($replaceArray);\r\n\r\n            $msg = new erLhcoreClassModelmsg();\r\n            $msg->msg = $cannedMsg->msg_to_user;\r\n\r\n            if (strpos($msg->msg,'[html]') !== false && !erLhcoreClassUser::instance()->hasAccessTo('lhchat','htmlbbcodeenabled')) {\r\n                $msg->msg = '[html] is disabled for you!';\r\n                $msg->user_id = -1;\r\n            }\r\n\r\n            $msg->chat_id = $chat->id;\r\n            $msg->user_id = $chat->user_id;\r\n            $msg->name_support = $chat->user->name_support;\r\n\r\n            $chat->last_op_msg_time = $chat->last_user_msg_time = $msg->time = time();\r\n            $chat->has_unread_op_messages = 1;\r\n            $chat->unread_op_messages_informed = 0;\r\n\r\n            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.canned_message_before_save',array('msg' => & $msg, 'chat' => & $chat));\r\n\r\n            erLhcoreClassChat::getSession()->save($msg);\r\n\r\n            if ($chat->last_msg_id < $msg->id) {\r\n                $chat->last_msg_id = $msg->id;\r\n            }\r\n\r\n            $chat->updateThis(array('update' => array(\r\n                'last_op_msg_time',\r\n                'last_user_msg_time',\r\n                'has_unread_op_messages',\r\n                'unread_op_messages_informed',\r\n                'last_msg_id'\r\n            )));\r\n        }\r\n    }\r\n\r\n    public static function autoInformVisitor($minutesTimeout)\r\n    {\r\n        if ($minutesTimeout > 0) {\r\n            $items = erLhcoreClassChat::getList(array('limit' => 10, 'filterlt' => array('last_op_msg_time' => (time() - (1*60))), 'filter' => array('has_unread_op_messages' => 1, 'unread_op_messages_informed' => 0)));\r\n\r\n            // Update chats instantly\r\n            foreach ($items as $item) {\r\n                $item->has_unread_op_messages = 0;\r\n                $item->unread_op_messages_informed = 1;\r\n                $item->updateThis(array('update' => array('has_unread_op_messages','unread_op_messages_informed')));\r\n            }\r\n\r\n            // Now inform visitors\r\n            foreach ($items as $item) {\r\n                erLhcoreClassChatMail::informVisitorUnreadMessage($item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static function getChatHistory($chat, $lastMessageId)\r\n    {\r\n        $messages = erLhcoreClassChat::getChatMessages($chat->id, erLhcoreClassChat::$limitMessages, $lastMessageId);\r\n\r\n        $messageId = 0;\r\n        $hasMessages = true;\r\n        if (count($messages) == erLhcoreClassChat::$limitMessages) {\r\n            reset($messages);\r\n            $message = current($messages);\r\n            $messageId = $message['id'];\r\n        } else {\r\n            $hasMessages = false;\r\n\r\n            $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.get_chat_history', array(\r\n                'chat' => $chat,\r\n                'last_message_id' => $lastMessageId,\r\n            ));\r\n\r\n            if ($statusWorkflow === false) {\r\n                if (erLhcoreClassUser::instance()->hasAccessTo('lhchat','prev_chats') && ($online_user = $chat->online_user) !== false) {\r\n                    $chatHistory = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC','filterlt' => array('id' => $chat->id), 'filter' => array('online_user_id' => $online_user->id)));\r\n                    if ($chatHistory instanceof erLhcoreClassModelChat) {\r\n                        $chat = $chatHistory;\r\n                        $hasMessages = true;\r\n                    }\r\n                }\r\n            } else {\r\n                $hasMessages = $statusWorkflow['has_messages'];\r\n                $chat = $statusWorkflow['chat'];\r\n            }\r\n        }\r\n\r\n        return array(\r\n            'chat_id' => (is_object($chat) ? $chat->id : null),\r\n            'chat' => (is_object($chat) ? $chat : null),\r\n            'message_id' => $messageId,\r\n            'messages' => $messages,\r\n            'has_messages' => $hasMessages\r\n        );\r\n    }\r\n\r\n    public static function hasPreviousChats($params)\r\n    {\r\n        reset($params['messages']); $firstMessage = current($params['messages']);\r\n        $chatHistory = $params['chat'];\r\n        $hasMessages = erLhcoreClassChat::$limitMessages == count($params['messages']);\r\n        $firstMessageId = $firstMessage['id'];\r\n\r\n        $params['has_messages'] = $hasMessages;\r\n        $statusWorkflow = erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.workflow.has_previous_messages', $params);\r\n\r\n        if ($statusWorkflow === false) {\r\n            if ($hasMessages == false && erLhcoreClassUser::instance()->hasAccessTo('lhchat','prev_chats') && ($online_user = $params['chat']->online_user) !== false) {\r\n                $chatHistory = erLhcoreClassModelChat::findOne(array('sort' => 'id DESC','filterlt' => array('id' => $params['chat']->id), 'filter' => array('online_user_id' => $online_user->id)));\r\n                if ($chatHistory instanceof erLhcoreClassModelChat) {\r\n                    $hasMessages = true;\r\n                    $firstMessageId = 0;\r\n                }\r\n            }\r\n            return array(\r\n                'has_messages' => $hasMessages,\r\n                'chat_history' => $chatHistory,\r\n                'message_id' => $firstMessageId\r\n            );\r\n        } else {\r\n            return $statusWorkflow;\r\n        }\r\n    }\r\n}\r\n\r\n?>\r\n", "<?php\nheader ( 'content-type: application/json; charset=utf-8' );\n$definition = array(\n        'msg' => new ezcInputFormDefinitionElement(\n            ezcInputFormDefinitionElement::REQUIRED, 'unsafe_raw'\n        )\n);\n\n$form = new ezcInputForm( INPUT_POST, $definition );\n\nif (trim($form->msg) != '')\n{\n\t$db = ezcDbInstance::get();\n\t$db->beginTransaction();\t\n\ttry {\n\t\t$Chat = erLhcoreClassModelChat::fetchAndLock($Params['user_parameters']['chat_id']);\n\n\t    if ($Chat instanceof erLhcoreClassModelChat && erLhcoreClassChat::hasAccessToRead($Chat) && erLhcoreClassChat::hasAccessToWrite($Chat) && ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT || $Chat->user_id == 0 || $Chat->user_id == $currentUser->getUserID() || $currentUser->hasAccessTo('lhchat','writeremotechat')))\n\t    {\n\t        $currentUser = erLhcoreClassUser::instance();\n\t\n\t        if (!isset($_SERVER['HTTP_X_CSRFTOKEN']) || !$currentUser->validateCSFRToken($_SERVER['HTTP_X_CSRFTOKEN'])) {\n\t        \techo erLhcoreClassChat::safe_json_encode(array('error' => 'true', 'token' => $currentUser->getCSFRToken(), 'r' => 'Try again or refresh a page. We could not verify your request.' ));\n\t        \t$db->rollback();\n\t        \texit;\n\t        }\n\t\n\t        $userData = $currentUser->getUserData();\n\t\t      \n\t        $messageUserId = $userData->id;\n\t        $msgText = trim($form->msg);\n\t        $ignoreMessage = false;\n\t        $returnBody = '';\n\t        $customArgs = array();\n\n\t        if (strpos($msgText, '!') === 0) {\n\t            $statusCommand = erLhcoreClassChatCommand::processCommand(array('user' => $userData, 'msg' => $msgText, 'chat' => & $Chat));\n\t            if ($statusCommand['processed'] === true) {\n\t                $messageUserId = -1; // Message was processed set as internal message\n\t                \n\t                $rawMessage = !isset($statusCommand['raw_message']) ? $msgText : $statusCommand['raw_message'];\n\t                \n\t                $msgText = trim('[b]'.$userData->name_support.'[/b]: '.$rawMessage .' '. ($statusCommand['process_status'] != '' ? '|| '.$statusCommand['process_status'] : ''));\n\t                \n\t                if (isset($statusCommand['ignore']) && $statusCommand['ignore'] == true) {\n\t                    $ignoreMessage = true;\n\t                }\n\t                \n\t                if (isset($statusCommand['info'])) {\n\t                    $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\n\t                    $tpl->set('msg',array('msg' =>  $statusCommand['info'], 'time' => time()));\n\t                    $returnBody = $tpl->fetch();\n\t                }\n\n                    if (isset($statusCommand['custom_args'])) {\n                        $customArgs = $statusCommand['custom_args'];\n                    }\n\t            };\n\t        }\n\t        \n\t        if ($ignoreMessage == false) {\t        \n    \t        $msg = new erLhcoreClassModelmsg();\n    \t        $msg->msg = $msgText;\n    \t        $msg->chat_id = $Params['user_parameters']['chat_id'];\n    \t        $msg->user_id = $messageUserId;\n    \t        $msg->time = time();\n    \t        $msg->name_support = $userData->name_support;\n\n                if (strpos($msg->msg,'[html]') !== false && !$currentUser->hasAccessTo('lhchat','htmlbbcodeenabled')) {\n                    $msg->msg = '[html] is disabled for you!';\n                    $msg->user_id = -1;\n                }\n\n    \t        if (isset($_POST['meta_msg']) && $currentUser->hasAccessTo('lhchat','metamsgenabled')) {\n                    $meta_msg = json_decode($_POST['meta_msg'], true);\n                    if (is_array($meta_msg)) {\n                        $metaContent = [];\n\n                        foreach ($meta_msg as $meta_msg_key => $meta_msg_value) {\n                            $metaContent['content'][$meta_msg_key] = $meta_msg_value;\n                        }\n\n                        if (!empty($metaContent)) {\n                            $msg->meta_msg = json_encode($metaContent);\n                        }\n                    }\n                }\n\n    \t        if ($messageUserId != -1 && $Chat->chat_locale != '' && $Chat->chat_locale_to != '' && isset($Chat->chat_variables_array['lhc_live_trans']) && $Chat->chat_variables_array['lhc_live_trans'] === true) {\n    \t            erLhcoreClassTranslate::translateChatMsgOperator($Chat, $msg);\n    \t        }\n\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved',array('msg' => & $msg,'chat' => & $Chat));\n    \t        \n    \t        erLhcoreClassChat::getSession()->save($msg);\n    \t\n    \t        // Set last message ID\n    \t        if ($Chat->last_msg_id < $msg->id) {\n\n    \t            $updateFields = array();\n\n    \t            if ($Chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $messageUserId !== -1) {\n                        $updateFields[] = 'status_sub';\n                        $updateFields[] = 'last_user_msg_time';\n                        $Chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_DEFAULT;\n                        $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\n                        $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Hold removed!'), 'time' => time()));\n                        $returnBody .= $tpl->fetch();\n                        $customArgs['hold_removed'] = true;\n\n                        if ($Chat->auto_responder !== false) {\n                            $Chat->auto_responder->active_send_status = 0;\n                            $Chat->auto_responder->saveThis();\n                        }\n                    }\n\n                    // Reset active counter if operator send new message and it's sync request and there was new message from operator\n                    if ($Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $Chat->auto_responder !== false) {\n    \t                if ($Chat->auto_responder->active_send_status != 0) {\n                            $Chat->auto_responder->active_send_status = 0;\n                            $Chat->auto_responder->saveThis();\n    \t                }\n                    }\n\n                    $Chat->last_op_msg_time = time();\n                    $Chat->last_msg_id = $msg->id;\n                    $updateFields[] = 'last_op_msg_time';\n                    $updateFields[] = 'last_msg_id';\n\n                    if ($Chat->status != erLhcoreClassModelChat::STATUS_CLOSED_CHAT) {\n                        $Chat->has_unread_op_messages = 1;\n                        $updateFields[] = 'has_unread_op_messages';\n                    }\n\n    \t        \tif ($Chat->unread_op_messages_informed != 0) {\n                        $Chat->unread_op_messages_informed = 0;\n                        $updateFields[] = 'unread_op_messages_informed';\n                    }\n\n    \t        \t\n    \t        \tif ($userData->invisible_mode == 0 && $messageUserId > 0) { // Change status only if it's not internal command\n    \t\t        \tif ($Chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\n    \t\t        \t\t$Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n                            $Chat->status_sub = erLhcoreClassModelChat::STATUS_SUB_OWNER_CHANGED;\n    \t\t        \t\t$Chat->user_id = $messageUserId;\n                            $updateFields[] = 'status';\n                            $updateFields[] = 'status_sub';\n                            $updateFields[] = 'user_id';\n    \t\t        \t}\n    \t        \t}\n    \t\n    \t        \t// Chat can be reopened only if user did not ended chat explictly\n    \t        \tif ($Chat->user_status == erLhcoreClassModelChat::USER_STATUS_CLOSED_CHAT && $Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\n    \t        \t\t$Chat->user_status = erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN;\n                        $updateFields[] = 'user_status';\n    \t        \t\tif ( ($onlineuser = $Chat->online_user) !== false) {\n    \t        \t\t\t$onlineuser->reopen_chat = 1;\n    \t        \t\t\t$onlineuser->saveThis();\n    \t        \t\t}\n    \t        \t}\n\n                    if ($Chat->wait_time == 0) {\n                        $Chat->wait_time = time() - ($Chat->pnd_time > 0 ? $Chat->pnd_time : $Chat->time);\n                        $updateFields[] = 'wait_time';\n                    }\n\n                    $Chat->updateThis(array('update' => $updateFields));\n    \t        }\n\n    \t        if (isset($_POST['subjects_ids']) && !empty($_POST['subjects_ids'])) {\n    \t            $subjects_ids = explode(',',$_POST['subjects_ids']);\n    \t            erLhcoreClassChat::validateFilterIn($subjects_ids);\n                    $presentSubjects = erLhAbstractModelSubjectChat::getList(array('filterin' => array('subject_id' => $subjects_ids),'filter' => array('chat_id' => $Chat->id)));\n\n                    $presentSubjectsIds = [];\n                    foreach ($presentSubjects as $presentSubject) {\n                        $presentSubjectsIds[] = $presentSubject->subject_id;\n                    }\n\n                    foreach (array_diff($subjects_ids,$presentSubjectsIds) as $subjectIdToSave)\n                    {\n                        $subjectChat = new erLhAbstractModelSubjectChat();\n                        $subjectChat->chat_id = $Chat->id;\n                        $subjectChat->subject_id = $subjectIdToSave;\n                        $subjectChat->saveThis();\n                    }\n                }\n\n                if (isset($_POST['canned_id']) && is_numeric($_POST['canned_id']) && @erLhcoreClassModelChatConfig::fetch('statistic_options')->data['canned_stats'] == 1) {\n                    // @todo add indication do we need to track these stats\n                    erLhcoreClassModelCannedMsgUse::logUse(array(\n                        'canned_id' => (int)$_POST['canned_id'],\n                        'chat_id'   => $Chat->id,\n                        'ctime'     => time(),\n                        'user_id'   => $currentUser->getUserID(),\n                    ));\n                }\n\n    \t        // If chat is in bot mode and operators writes a message, accept a chat as operator.\n    \t        if ($Chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT && $messageUserId != -1) {\n\n                    $userData = $currentUser->getUserData();\n\n                    if ($userData->invisible_mode == 0 && erLhcoreClassChat::hasAccessToWrite($Chat)) {\n                        $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\n\n                        $Chat->pnd_time = time();\n                        $Chat->wait_time = 1;\n\n                        $Chat->user_id = $currentUser->getUserID();\n\n                        // User status in event of chat acceptance\n                        $Chat->usaccept = $userData->hide_online;\n                        $Chat->operation_admin .= \"lhinst.updateVoteStatus(\".$Chat->id.\");\";\n                        $Chat->saveThis();\n\n                        // If chat is transferred to pending state we don't want to process any old events\n                        $eventPending = erLhcoreClassModelGenericBotChatEvent::findOne(array('filter' => array('chat_id' => $Chat->id)));\n\n                        if ($eventPending instanceof erLhcoreClassModelGenericBotChatEvent) {\n                            $eventPending->removeThis();\n                        }\n\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $Chat, 'user' => $currentUser));\n\n                        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $Chat, 'user' => $currentUser));\n                        erLhcoreClassChat::updateActiveChats($Chat->user_id);\n\n                        if ($Chat->department !== false) {\n                            erLhcoreClassChat::updateDepartmentStats($Chat->department);\n                        }\n\n                        $options = $Chat->department->inform_options_array;\n                        erLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $Chat->department,'options' => $options),$Chat);\n                    }\n                }\n\t        }\n\n\t        if ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT) {\n\t            \n\t            $transfer = erLhcoreClassModelTransfer::findOne(array('filter' => array('transfer_user_id' => $currentUser->getUserID(), 'transfer_to_user_id' => ($Chat->user_id == $currentUser->getUserID() ? $Chat->sender_user_id : $Chat->user_id))));\n\t            \n\t            if ($transfer === false) {\n    \t            $transfer = new erLhcoreClassModelTransfer();\n    \t            \n    \t            $transfer->chat_id = $Chat->id;\n    \t            \n    \t            $transfer->from_dep_id = $Chat->dep_id;\n    \t            \n    \t            // User which is transfering\n    \t            $transfer->transfer_user_id = $currentUser->getUserID();\n    \t            \n    \t            // To what user\n    \t            $transfer->transfer_to_user_id = $Chat->user_id == $currentUser->getUserID() ? $Chat->sender_user_id : $Chat->user_id;\n    \t            $transfer->saveThis();\n\t            }\n\t        }\n\t        \n\t        echo erLhcoreClassChat::safe_json_encode(array('error' => 'false','r' => $returnBody) + $customArgs);\n\t        \n\t        erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.web_add_msg_admin', array('msg' => & $msg,'chat' => & $Chat, 'ou' => (isset($onlineuser) ? $onlineuser : null)));\n\n\t    } else {\n\t        throw new Exception('You cannot read/write to this chat!');\n        }\n\n\t    $db->commit();\n\t    \n\t} catch (Exception $e) {\n\t    echo $e->getMessage();\n   \t\t$db->rollback();\n    }\n\n} else {\n    echo erLhcoreClassChat::safe_json_encode(array('error' => 'true', 'r' => 'Please enter a message...'));\n}\n\n\nexit;\n\n?>", "<?php\n\n$Module = array( \"name\" => \"Chat\");\n\n$ViewList = array();\n\n$ViewList['adminchat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('remember','arg'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array('arg')\n);\n\n$ViewList['getchatdata'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['sendmassmessage'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['singleaction'] = array(\n    'params' => array('chat_id','action'),\n    'uparams' => array(),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['subjectwidget'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'subject_chats_options' ),\n);\n\n$ViewList['loadoperatorjs'] = array(\n    'params' => array(),\n    'uparams' => array('type','id'),\n    'functions' => array( 'use' ),\n);\n\n$ViewList['loadmaindata'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['loadpreviousmessages'] = array(\n    'params' => array('chat_id','message_id'),\n    'uparams' => array('initial','original'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array()\n);\n\n$ViewList['subject'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('subject','status'),\n    'functions' => array( 'setsubject' )\n);\n\n$ViewList['getnotificationsdata'] = array(\n    'params' => array(),\n    'uparams' => array('id'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array ( 'id')\n);\n\n$ViewList['getcannedfiltered'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['holdaction'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'holduse' )\n);\n\n$ViewList['copymessages'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updateattribute'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['updatejsvars'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['logevent'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array('hash','hash_resume','vid'),\n);\n\n$ViewList['setnewvid'] = array(\n\t\t'params' => array(),\n\t\t'uparams' => array(),\n);\n\n$ViewList['redirectcontact'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'redirectcontact' )\n);\n\n$ViewList['changestatus'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'canchangechatstatus' )\n);\n\n$ViewList['editprevious'] = array(\n    'params' => array('chat_id','msg_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['quotemessage'] = array(\n    'params' => array('id'),\n    'uparams' => array('type'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updatemsg'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['printchatadmin'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['loadactivechats'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['previewchat'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['previewmessage'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['closechatadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['abstractclick'] = array(\n    'params' => array('msg_id','payload'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['setsubstatus'] = array(\n    'params' => array('chat_id','substatus'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['notificationsettings'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['startchatwithoperator'] = array(\n    'params' => array('user_id'),\n    'uparams' => array('mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['closechat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('csfr'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['sendmail'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'sendmail' )\n);\n\n$ViewList['modifychat'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('pos'),\n    'functions' => array( 'modifychat' )\n);\n\n$ViewList['transferchat'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowtransfer' )\n);\n\n$ViewList['accepttransfer'] = array(\n    'params' => array('transfer_id'),\n    'uparams' => array('postaction','mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['deletechatadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'deletechat' )\n);\n\n$ViewList['delete'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('csfr'),\n    'functions' => array( 'deletechat' )\n);\n\n$ViewList['syncadmininterface'] = array(\n    'params' => array(),\n    'uparams' => array(\n        'subjectd',\n        'limits',\n        'subjectd',\n        'sdgroups',\n        'subjectdprod',\n        'subjectu',\n        'sugroups',\n        'hsub','lda','bdgroups','botdprod','w','clcs','limitgc','limitb','botd','odpgroups','ddgroups','udgroups','mdgroups', 'cdgroups', 'pdgroups','adgroups','pugroups','augroups','onop', 'acs', 'mcd', 'limitmc', 'mcdprod','activeu','pendingu','topen','departmentd','operatord','actived','pendingd','closedd','unreadd','limita','limitp','limitc','limitu','limito','limitd','activedprod','unreaddprod','pendingdprod','closeddprod','psort'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array (\n        'subjectd',\n        'subjectd',\n        'sdgroups',\n        'subjectdprod',\n        'subjectu',\n        'sugroups',\n        'hsub','bdgroups','botdprod','botd','w','odpgroups','ddgroups','udgroups','mdgroups', 'cdgroups', 'pdgroups', 'adgroups', 'pugroups','augroups','mcd','operatord','mcdprod', 'activeu', 'pendingu', 'actived', 'closedd' , 'pendingd', 'unreadd','departmentd','activedprod','unreaddprod','pendingdprod','closeddprod')\n);\n\n$ViewList['loadinitialdata'] = array(\n    'params' => array(),\n    'uparams' => array('chatopen','chatgopen'),\n    'ajax' => true,\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array('chatopen','chatgopen')\n);\n\n$ViewList['list'] = array(\n    'params' => array(),\n    'uparams' => array('view','dropped_chat','abandoned_chat','country_ids','has_unread_op_messages','cls_us','export','chat_status_ids','cf','with_bot','no_operator','has_operator','without_bot','bot_ids','ip','department_ids','department_group_ids','user_ids','group_ids','subject_id','anonymized','una','chat_duration_from','chat_duration_till','wait_time_from','wait_time_till','chat_id','nick','email','timefrom','timeto','department_id','user_id','print','xls','fbst','chat_status','hum','product_id','timefrom','timefrom_seconds','timefrom_minutes','timefrom_hours','timeto', 'timeto_minutes', 'timeto_seconds', 'timeto_hours', 'department_group_id', 'group_id', 'invitation_id'),\n    'functions' => array( 'use' ),\n    'multiple_arguments' => array(\n        'department_ids',\n        'department_group_ids',\n        'user_ids',\n        'group_ids',\n        'bot_ids',\n        'country_ids',\n        'chat_status_ids',\n        'cf',\n    )\n);\n\n$ViewList['dashboardwidgets'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['chattabs'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowchattabs' )\n    );\n\n$ViewList['chattabschrome'] = array(\n    'params' => array(),\n    'uparams' => array('mode'),\n    'functions' => array( )\n);\n\n$ViewList['single'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'singlechatwindow' )\n);\n\n$ViewList['chatfootprint'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['refreshonlineinfo'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['checkscreenshot'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['checkscreenshotonline'] = array(\n    'params' => array('online_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['operatortyping'] = array(\n    'params' => array('chat_id','status'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['syncadmin'] = array(\n    'params' => array(),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addmsgadmin'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['updatechatstatus'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addoperation'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['refreshcustomfields'] = array(\n    'params' => array(),\n    'uparams' => array('vid','hash','hash_resume'),\n);\n\n$ViewList['addonlineoperation'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['addonlineoperationiframe'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['saveremarks'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['saveonlinenotes'] = array(\n    'params' => array('online_user_id'),\n    'functions' => array( 'use' )\n);\n\n/* Anonymous functions */\n$ViewList['addmsguser'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['editprevioususer'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array(),\n);\n\n$ViewList['updatemsguser'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['getmessage'] = array(\n    'params' => array('chat_id','hash','msgid'),\n    'uparams' => array('mode'),\n);\n\n$ViewList['getmessageadmin'] = array(\n    'params' => array('chat_id','msgid'),\n    'uparams' => array(),\n\t'functions' => array( 'use' )\n);\n\n$ViewList['voteaction'] = array(\n    'params' => array('chat_id','hash','type'),\n    'uparams' => array(),\n);\n\n$ViewList['syncuser'] = array(\n    'params' => array('chat_id','message_id','hash'),\n\t'uparams' => array('mode','ot','theme','modeembed')\n);\n\n$ViewList['transfertohuman'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array()\n);\n\n$ViewList['editnick'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array()\n);\n\n$ViewList['usertyping'] = array(\n    'params' => array('chat_id','hash','status'),\n\t'uparams' => array()\n);\n\n$ViewList['checkchatstatus'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode','theme','dot')\n);\n\n$ViewList['transferuser'] = array(\n    'params' => array('chat_id','item_id'),\n    'functions' => array( 'allowtransfer' )\n    );\n\n$ViewList['blockuser'] = array(\n    'params' => array('chat_id'),\n    'functions' => array( 'allowblockusers' )\n);\n\n$ViewList['blockedusers'] = array(\n    'params' => array(),\n    'uparams' => array('remove_block','csfr','ip','nick'),\n    'functions' => array( 'allowblockusers' )\n);\n\n$ViewList['getstatus'] = array(\n    'params' => array(),\n    'uparams' => array('fresh','ua','ma','operator','theme','priority','disable_pro_active','click','position','hide_offline','check_operator_messages','top','units','leaveamessage','department','identifier','survey','dot','bot_id'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['htmlsnippet'] = array(\n    'params' => array('id','type','sub_id'),\n    'uparams' => array('hash'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['chatcheckstatus'] = array(\n    'params' => array(),\n    'uparams' => array('status','department','vid','uactiv','wopen','uaction','hash','hash_resume','dot','hide_offline','isproactive'),\n\t'multiple_arguments' => array ( 'department' )\n);\n\n$ViewList['getstatusembed'] = array (\n    'params' => array(),\n    'uparams' => array('fresh','ua','operator','theme','hide_offline','leaveamessage','department','priority','survey','bot_id'),\n\t'multiple_arguments' => array ( 'department','ua' )\n);\n\n$ViewList['startchat'] = array (\n    'params' => array(),\n    'uparams' => array('ua','switchform','operator','theme','er','vid','hash_resume','sound','hash','offline','leaveamessage','department','priority','chatprefill','survey','prod','phash','pvhash','ajaxmode'),\n\t'multiple_arguments' => array ( 'department', 'ua', 'prod' )\n);\n\n$ViewList['start'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope','fs','trigger'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['begin'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['modal'] = array (\n    'params' => array(),\n    'uparams' => array('sound','id','hash','department','theme','mobile','vid','identifier','inv','survey','priority','operator','leaveamessage','mode','bot','scope'),\n\t'multiple_arguments' => array('department')\n);\n\n$ViewList['chatwidget'] = array (\n    'params' => array(),\n    'uparams' => array('mobile','bot_id','ua','switchform','operator','theme','vid','sound','hash','hash_resume','mode','offline','leaveamessage','department','priority','chatprefill','survey','sdemo','prod','phash','pvhash','fullheight','ajaxmode'),\n\t'multiple_arguments' => array ( 'department', 'ua', 'prod' )\n);\n\n$ViewList['reopen'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('mode','embedmode','theme','fullheight'),\n);\n\n$ViewList['readoperatormessage'] = array(\n    'params' => array(),\n    'uparams' => array('operator','theme','priority','vid','department','playsound','ua','survey','fullheight','inv','tag'),\n\t'multiple_arguments' => array ( 'department', 'ua' )\n);\n\n$ViewList['chatcheckoperatormessage'] = array(\n    'params' => array(),\n    'uparams' => array('tz','operator','theme','priority','vid','count_page','identifier','department','ua','survey','uactiv','wopen','fullheight','dyn'),\n\t'multiple_arguments' => array ( 'department','ua','dyn' )\n);\n\n$ViewList['extendcookie'] = array(\n    'params' => array('vid'),\n    'uparams' => array()\n);\n\n$ViewList['logpageview'] = array(\n    'params' => array(),\n    'uparams' => array('tz','vid','identifier','department','ua','uactiv','wopen'),\n\t'multiple_arguments' => array ( 'department','ua' )\n);\n\n$ViewList['chatwidgetclosed'] = array(\n    'params' => array(),\n    'uparams' => array('vid','hash','eclose','close'),\n);\n\n$ViewList['chat'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('theme','er','survey','cstarted')\n);\n\n$ViewList['printchat'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['readchatmail'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['chatpreview'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['bbcodeinsert'] = array(\n\t'params' => array('chat_id'),\n\t'uparams' => array('mode')\n);\n\n$ViewList['chatwidgetchat'] = array(\n    'params' => array('chat_id','hash'),\n\t'uparams' => array('mobile','sound','mode','theme','cstarted','survey','pchat','fullheight')\n);\n\n$ViewList['userclosechat'] = array(\n    'params' => array('chat_id','hash'),\n    'uparams' => array('eclose'),\n);\n\n$ViewList['onlineusers'] = array(\n    'params' => array(),\n    'ajax' => true,\n    'uparams' => array('clear_list','method','deletevisitor','timeout','csfr','department','maxrows','country','timeonsite','department_dpgroups'),\n    'functions' => array( 'use_onlineusers' ),\n    'multiple_arguments' => array(\n        'department',\n        'department_dpgroups'\n    )\n);\n\n$ViewList['jsononlineusers'] = array(\n    'params' => array(),\n    'uparams' => array('department','maxrows','timeout','department_dpgroups'),\n    'functions' => array( 'use_onlineusers' ),\n    'multiple_arguments' => array(\n        'department',\n        'department_dpgroups'\n    )\n);\n\n$ViewList['getonlineuserinfo'] = array(\n    'params' => array('id'),\n    'uparams' => array('tab','chat_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['sendnotice'] = array(\n    'params' => array('online_id'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['geoconfiguration'] = array(\n    'params' => array(),\n    'uparams' => array(),\n    'functions' => array( 'administrategeoconfig' )\n);\n\n$ViewList['listchatconfig'] = array(\n    'params' => array(),\n    'functions' => array( 'administrateconfig' )\n);\n\n$ViewList['editchatconfig'] = array(\n    'params' => array('config_id'),\n    'functions' => array( 'administrateconfig' )\n);\n\n$ViewList['syncandsoundesetting'] = array(\n    'params' => array(),\n    'functions' => array( 'administratesyncsound' )\n);\n\n$ViewList['cannedmsg'] = array(\n    'params' => array(),\n    'uparams' => array('action','id','csfr','message','title','fmsg','department_id','subject_id','tab','user_id'),\n    'functions' => array( 'administratecannedmsg' ),\n    'multiple_arguments' => array(\n        'department_id',\n        'subject_id',\n        'user_id'\n    )\n);\n\n$ViewList['maintenance'] = array(\n    'params' => array(),\n    'uparams' => array('csfr','action'),\n    'functions' => array( 'maintenance' )\n);\n\n$ViewList['newcannedmsg'] = array(\n    'params' => array(),\n    'functions' => array( 'administratecannedmsg' )\n);\n\n$ViewList['cannedmsgedit'] = array(\n    'params' => array('id'),\n    'functions' => array( 'administratecannedmsg' )\n);\n\n$ViewList['geoadjustment'] = array(\n    'params' => array(),\n    'functions' => array( 'geoadjustment' )\n);\n\n$ViewList['accept'] = array(\n    'params' => array('hash','validation_hash','email')\n);\n\n$ViewList['confirmleave'] = array(\n    'params' => array('chat_id','hash')\n);\n\n$ViewList['sendchat'] = array(\n\t\t'params' => array('chat_id','hash')\n);\n\n$ViewList['transferchatrefilter'] = array(\n    'params' => array('chat_id'),\n    'uparams' => array('mode'),\n    'functions' => array( 'use' )\n);\n\n$ViewList['searchprovider'] = array(\n    'params' => array('scope'),\n    'functions' => array( 'use' )\n);\n\n$FunctionList['use'] = array('explain' => 'General permission to use chat module');\n$FunctionList['open_all'] = array('explain' => 'Allow operator to open all chats, not only assigned to him');\n$FunctionList['changeowner'] = array('explain' => 'Allow operator to change chat owner');\n$FunctionList['singlechatwindow'] = array('explain' =>'Allow operator to use single chat window functionality');\n$FunctionList['allowchattabs'] = array('explain' =>'Allow operator to user chat rooms functionality');\n$FunctionList['deletechat'] = array('explain' =>'Allow operator to delete his own chats');\n$FunctionList['deleteglobalchat'] = array('explain' =>'Allow to delete all chats');\n$FunctionList['allowtransfer'] = array('explain' =>'Allow user to transfer chat to another user');\n$FunctionList['allowcloseremote'] = array('explain' =>'Allow operator to close another operator chat');\n$FunctionList['allowblockusers'] = array('explain' =>'Allow operator to block visitors');\n$FunctionList['administrateconfig'] = array('explain' =>'Allow to change chat config');\n$FunctionList['allowclearonlinelist'] = array('explain' =>'Allow operator to clean online users list');\n$FunctionList['administratecannedmsg'] = array('explain' =>'Allow operator change canned messages');\n$FunctionList['allowopenremotechat'] = array('explain' =>'Allow operator to open other operators chats from same department');\n$FunctionList['writeremotechat'] = array('explain' =>'Allow operator to write to another operator chat');\n$FunctionList['allowreopenremote'] = array('explain' =>'Allow operator to reopen other operators chats');\n$FunctionList['allowtransfertoanyuser'] = array('explain' =>'Allow operator to transfer chat to any online operator, not only his own department users');\n$FunctionList['allowtransferdirectly'] = array('explain' =>'Allow operator to transfer chat directly to other operator');\n$FunctionList['use_onlineusers'] = array('explain' =>'Allow operator to view online visitors');\n$FunctionList['chattabschrome'] = array('explain' =>'Allow operator to use chrome extension');\n$FunctionList['canchangechatstatus'] = array('explain' =>'Allow operator to change chat status');\n$FunctionList['administrateinvitations'] = array('explain' =>'Allow operator to change pro active invitations');\n$FunctionList['administratecampaigs'] = array('explain' =>'Allow operator to change pro active campaigns');\n$FunctionList['administratechatevents'] = array('explain' =>'Allow operator to change pro active chat events');\n$FunctionList['administratechatvariables'] = array('explain' =>'Allow operator to change pro active chat variables');\n$FunctionList['administrateresponder'] = array('explain' =>'Allow operator to change auto responder');\n$FunctionList['maintenance'] = array('explain' =>'Allow operator to run maintenance');\n$FunctionList['sees_all_online_visitors'] = array('explain' =>'Operator can see all online visitors, not only his department');\n$FunctionList['geoadjustment'] = array('explain' => 'Allow operator to edit geo adjustment for chat status');\n$FunctionList['take_screenshot'] = array('explain' => 'Allow operator to take visitor browser page screenshots');\n$FunctionList['modifychat'] = array('explain' => 'Allow operator modify main chat information');\n$FunctionList['allowredirect'] = array('explain' => 'Allow operator to redirect user to another page');\n$FunctionList['administrategeoconfig'] = array('explain' => 'Allow operator to edit geo detection configuration');\n$FunctionList['manage_product'] = array('explain' => 'Allow operator to manage products');\n$FunctionList['administratesubject'] = array('explain' => 'Allow operator to manage subjects');\n$FunctionList['modifychatcore'] = array('explain' => 'Allow operator to change chat core attributes');\n$FunctionList['sendmail'] = array('explain' => 'Allow operator to send e-mail to visitor from chat window');\n$FunctionList['redirectcontact'] = array('explain' => 'Allow operator to redirect visitor to contact form');\n$FunctionList['holduse'] = array('explain' => 'Allow operator to use hold/unhold functionality');\n$FunctionList['setsubject'] = array('explain' => 'Allow operator to use set chat subject');\n$FunctionList['administratecolumn'] = array('explain' => 'Allow operator to configure chat columns');\n$FunctionList['administratechatvariable'] = array('explain' => 'Allow operator to configure chat custom variables');\n$FunctionList['administratechatpriority'] = array('explain' => 'Allow operator to configure chat priority by custom variables');\n$FunctionList['administratesyncsound'] = array('explain' => 'Allow operator to configure chat sound and sync settings');\n$FunctionList['voicemessages'] = array('explain' => 'Allow operator to send voice messages');\n$FunctionList['chatdebug'] = array('explain' => 'Allow operator to see raw chat details in chat edit window');\n$FunctionList['administrate_alert_icon'] = array('explain' => 'Allow operator to manage alert icons list');\n$FunctionList['prev_chats'] = array('explain' => 'Allow operator to see previous chats from visitor');\n$FunctionList['changedepartment'] = array('explain' => 'Allow operator to change chat department');\n$FunctionList['subject_chats'] = array('explain' => 'Allow operator see subject filtered chats');\n$FunctionList['subject_chats_options'] = array('explain' => 'Allow operator to choose what subjects should be applied as filter');\n$FunctionList['export_chats'] = array('explain' => 'Allow operator to export filtered chats');\n$FunctionList['htmlbbcodeenabled'] = array('explain' => 'Allow operator to use [html] bbcode.');\n$FunctionList['metamsgenabled'] = array('explain' => 'Allow operator to use meta_msg in message add interface.');\n\n?>", "<?php\r\n\r\ntry {\r\n    erLhcoreClassRestAPIHandler::validateRequest();\r\n\r\n    if (!erLhcoreClassRestAPIHandler::hasAccessTo('lhchat', 'use')) {\r\n        throw new Exception('You do not have permission. `lhchat`, `use` is required.');\r\n    }\r\n\r\n    $definition = array(\r\n        'chat_id' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::REQUIRED, 'int'\r\n        ),\r\n        'user_id' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'int', array('min_range' => 1)\r\n        ),\r\n        'msg' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::REQUIRED, 'unsafe_raw'\r\n        ),\r\n        'meta_msg' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\r\n        ),\r\n        'operator_name' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'unsafe_raw'\r\n        ),\r\n        'sender' => new ezcInputFormDefinitionElement(\r\n            ezcInputFormDefinitionElement::OPTIONAL, 'string'\r\n        )\r\n    );\r\n\r\n    $form = new ezcInputForm( INPUT_POST, $definition );\r\n\r\n    if (trim($form->msg) != '')\r\n    {\r\n        $db = ezcDbInstance::get();\r\n\r\n        try {\r\n            $db->beginTransaction();\r\n\r\n            $Chat = erLhcoreClassChat::getSession()->load( 'erLhcoreClassModelChat', $form->chat_id);\r\n\r\n            if (!($Chat instanceof erLhcoreClassModelChat)) {\r\n                throw new Exception('Chat could not be found!');\r\n            }\r\n\r\n            // Has access to read, chat\r\n            //FIXME create permission to add message...\r\n            if ( erLhcoreClassRestAPIHandler::hasAccessToWrite($Chat) )\r\n            {\r\n                $userData = erLhcoreClassRestAPIHandler::getUser();\r\n\r\n                if ($form->sender == 'system') {\r\n                    $messageUserId = -1;\r\n                } else if ($form->sender != 'bot') {\r\n                    $messageUserId = $userData->id;\r\n                } else {\r\n                    $messageUserId = -2;\r\n                }\r\n\r\n                if ($form->hasValidData('user_id')) {\r\n                    $messageUserId = $form->user_id;\r\n                    $userData = erLhcoreClassModelUser::fetch($messageUserId);\r\n\r\n                    if (!($userData instanceof erLhcoreClassModelUser)) {\r\n                        throw new Exception('Operator with provided user_id could not be found!');\r\n                    }\r\n                }\r\n\r\n                $msgText = trim($form->msg);\r\n                $ignoreMessage = false;\r\n                $returnBody = '';\r\n                $customArgs = array();\r\n                $msg = new erLhcoreClassModelmsg();\r\n\r\n                if (strpos($msgText, '!') === 0) {\r\n                    $statusCommand = erLhcoreClassChatCommand::processCommand(array('user' => $userData, 'msg' => $msgText, 'chat' => & $Chat));\r\n                    if ($statusCommand['processed'] === true) {\r\n                        $messageUserId = -1; // Message was processed set as internal message\r\n\r\n                        $rawMessage = !isset($statusCommand['raw_message']) ? $msgText : $statusCommand['raw_message'];\r\n\r\n                        $msgText = trim('[b]'.$userData->name_support.'[/b]: '.$rawMessage .' '. ($statusCommand['process_status'] != '' ? '|| '.$statusCommand['process_status'] : ''));\r\n\r\n                        if (isset($statusCommand['ignore']) && $statusCommand['ignore'] == true) {\r\n                            $ignoreMessage = true;\r\n                        }\r\n\r\n                        if (isset($statusCommand['info'])) {\r\n                            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                            $tpl->set('msg',array('msg' =>  $statusCommand['info'], 'time' => time()));\r\n                            $returnBody = $tpl->fetch();\r\n                        }\r\n\r\n                        if (isset($statusCommand['custom_args'])) {\r\n                            $customArgs = $statusCommand['custom_args'];\r\n                        }\r\n                    };\r\n                }\r\n\r\n                if ($ignoreMessage == false) {\r\n                    $msg->msg = $msgText;\r\n                    $msg->chat_id = $Chat->id;\r\n                    $msg->user_id = $messageUserId;\r\n                    $msg->time = time();\r\n\r\n                    if (strpos($msg->msg,'[html]') !== false && !erLhcoreClassRestAPIHandler::hasAccessTo('lhchat','htmlbbcodeenabled')) {\r\n                        $msg->msg = '[html] is disabled for you!';\r\n                        $msg->user_id = -1;\r\n                    }\r\n\r\n                    if ($form->hasValidData('meta_msg') && $form->meta_msg != '' && erLhcoreClassRestAPIHandler::hasAccessTo('lhchat','metamsgenabled')) {\r\n                        $metaParts = json_decode($form->meta_msg,true);\r\n                        // Parse meta message as it was bot message and store it within message\r\n                        // We cannot store directly meta message content because it may contain callbacks which can be internal functions\r\n                        // It would be huge security flaw in automated hosting environment\r\n                        if ($metaParts !== null) {\r\n                            $trigger = new erLhcoreClassModelGenericBotTrigger();\r\n                            $trigger->actions_front = $metaParts;\r\n                            $trigger->actions = $form->meta_msg;\r\n\r\n                            // Combine all meta messages to single one\r\n                            $messages = erLhcoreClassGenericBotWorkflow::processTriggerPreview($Chat, $trigger, array('args' => array('do_not_save' => true)));\r\n\r\n                            $metaData = array();\r\n                            foreach ($messages as $metaMessage) {\r\n                                $metaData = array_merge_recursive($metaData, $metaMessage->meta_msg_array);\r\n                            }\r\n\r\n                            $metaData = array_filter($metaData);\r\n\r\n                            if (!empty($metaData)) {\r\n                                $msg->meta_msg = json_encode($metaData);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                    if ($form->hasValidData('operator_name') && $form->operator_name != '') {\r\n                        $msg->name_support = $form->operator_name;\r\n                    } elseif ($form->sender == 'bot') {\r\n\r\n                        $chatVariables = $Chat->chat_variables_array;\r\n\r\n                        $nameSupport = erTranslationClassLhTranslation::getInstance()->getTranslation('chat/startchat','Live Support');\r\n\r\n                        if ($Chat->gbot_id > 0) {\r\n                            $bot = erLhcoreClassModelGenericBotBot::fetch($Chat->gbot_id);\r\n                            if ($bot instanceof erLhcoreClassModelGenericBotBot && $bot->nick != '') {\r\n                                $nameSupport = $bot->nick;\r\n                            }\r\n                        }\r\n\r\n                        $msg->name_support = $nameSupport;\r\n\r\n                    } else {\r\n                        $msg->name_support = $userData->name_support;\r\n                    }\r\n\r\n                    if ($messageUserId != -1 && $Chat->chat_locale != '' && $Chat->chat_locale_to != '') {\r\n                        erLhcoreClassTranslate::translateChatMsgOperator($Chat, $msg);\r\n                    }\r\n\r\n                    erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.before_msg_admin_saved',array('msg' => & $msg,'chat' => & $Chat));\r\n\r\n                    erLhcoreClassChat::getSession()->save($msg);\r\n\r\n                    // Set last message ID\r\n                    if ($Chat->last_msg_id < $msg->id) {\r\n\r\n                        $statusSub = '';\r\n                        if ($Chat->status_sub == erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $messageUserId !== -1) {\r\n                            $statusSub = ',status_sub = 0, last_user_msg_time = ' . (time() - 1);\r\n                            $tpl = erLhcoreClassTemplate::getInstance('lhchat/lists/assistance_message.tpl.php');\r\n                            $tpl->set('msg', array('msg' => erTranslationClassLhTranslation::getInstance()->getTranslation('chat/adminchat', 'Hold removed!'), 'time' => time()));\r\n                            $returnBody .= $tpl->fetch();\r\n                            $customArgs['hold_removed'] = true;\r\n\r\n                            if ($Chat->auto_responder !== false) {\r\n                                $Chat->auto_responder->active_send_status = 0;\r\n                                $Chat->auto_responder->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        // Reset active counter if operator send new message and it's sync request and there was new message from operator\r\n                        if ($Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_ON_HOLD && $Chat->auto_responder !== false) {\r\n                            if ($Chat->auto_responder->active_send_status != 0) {\r\n                                $Chat->auto_responder->active_send_status = 0;\r\n                                $Chat->auto_responder->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        $stmt = $db->prepare('UPDATE lh_chat SET status = :status, wait_time = :wait_time, user_status = :user_status, last_msg_id = :last_msg_id, last_op_msg_time = :last_op_msg_time, has_unread_op_messages = :has_unread_op_messages, unread_op_messages_informed = :unread_op_messages_informed' . $statusSub . ' WHERE id = :id');\r\n                        $stmt->bindValue(':id',$Chat->id,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':last_msg_id',$msg->id,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':last_op_msg_time',time(),PDO::PARAM_INT);\r\n                        $stmt->bindValue(':has_unread_op_messages',1,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':unread_op_messages_informed',0,PDO::PARAM_INT);\r\n\r\n                        if ($userData->invisible_mode == 0 && $messageUserId > 0) { // Change status only if it's not internal command\r\n                            if ($Chat->status == erLhcoreClassModelChat::STATUS_PENDING_CHAT) {\r\n                                $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\r\n                                $Chat->user_id = $messageUserId;\r\n                            }\r\n                        }\r\n\r\n                        // Chat can be reopened only if user did not ended chat explictly\r\n                        if ($Chat->user_status == erLhcoreClassModelChat::USER_STATUS_CLOSED_CHAT && $Chat->status_sub != erLhcoreClassModelChat::STATUS_SUB_USER_CLOSED_CHAT) {\r\n                            $Chat->user_status = erLhcoreClassModelChat::USER_STATUS_PENDING_REOPEN;\r\n                            if ( ($onlineuser = $Chat->online_user) !== false) {\r\n                                $onlineuser->reopen_chat = 1;\r\n                                $onlineuser->saveThis();\r\n                            }\r\n                        }\r\n\r\n                        if ($Chat->wait_time == 0) {\r\n                            $Chat->wait_time = time() - ($Chat->pnd_time > 0 ? $Chat->pnd_time : $Chat->time);\r\n                        }\r\n\r\n                        $stmt->bindValue(':user_status',$Chat->user_status,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':status',$Chat->status,PDO::PARAM_INT);\r\n                        $stmt->bindValue(':wait_time',$Chat->wait_time,PDO::PARAM_INT);\r\n                        $stmt->execute();\r\n                    }\r\n\r\n\r\n\r\n                    // If chat is in bot mode and operators writes a message, accept a chat as operator.\r\n                    if ($form->sender == 'operator' && $Chat->status == erLhcoreClassModelChat::STATUS_BOT_CHAT && $messageUserId != -1) {\r\n\r\n                        if ($userData->invisible_mode == 0 && erLhcoreClassRestAPIHandler::hasAccessToWrite($Chat)) {\r\n                            $Chat->refreshThis();\r\n                            $Chat->status = erLhcoreClassModelChat::STATUS_ACTIVE_CHAT;\r\n\r\n                            $Chat->wait_time = 1; // Chat was in bot mode so wait time has to bet 1 second to be minimal\r\n                            $Chat->user_id = $userData->id;\r\n\r\n                            // User status in event of chat acceptance\r\n                            $Chat->usaccept = $userData->hide_online;\r\n                            $Chat->saveThis();\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.data_changed',array('chat' => & $Chat, 'user_data' => $userData));\r\n\r\n                            erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.accept',array('chat' => & $Chat, 'user_data' => $userData));\r\n                            erLhcoreClassChat::updateActiveChats($Chat->user_id);\r\n\r\n                            if ($Chat->department !== false) {\r\n                                erLhcoreClassChat::updateDepartmentStats($Chat->department);\r\n                            }\r\n\r\n                            $options = $Chat->department->inform_options_array;\r\n                            erLhcoreClassChatWorkflow::chatAcceptedWorkflow(array('department' => $Chat->department, 'options' => $options),$Chat);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ($Chat->status == erLhcoreClassModelChat::STATUS_OPERATORS_CHAT) {\r\n\r\n                    $transfer = erLhcoreClassModelTransfer::findOne(array('filter' => array('transfer_user_id' => $userData->id, 'transfer_to_user_id' => ($Chat->user_id == $userData->id ? $Chat->sender_user_id : $Chat->user_id))));\r\n\r\n                    if ($transfer === false) {\r\n                        $transfer = new erLhcoreClassModelTransfer();\r\n\r\n                        $transfer->chat_id = $Chat->id;\r\n\r\n                        $transfer->from_dep_id = $Chat->dep_id;\r\n\r\n                        // User which is transfering\r\n                        $transfer->transfer_user_id = $userData->id;\r\n\r\n                        // To what user\r\n                        $transfer->transfer_to_user_id = $Chat->user_id == $userData->id ? $Chat->sender_user_id : $Chat->user_id;\r\n                        $transfer->saveThis();\r\n                    }\r\n                }\r\n\r\n                echo erLhcoreClassChat::safe_json_encode(array('error' => false, 'r' => $returnBody, 'msg' => $msg->getState())+ $customArgs);\r\n\r\n                erLhcoreClassChatEventDispatcher::getInstance()->dispatch('chat.web_add_msg_admin', array('msg' => & $msg,'chat' => & $Chat));\r\n\r\n            } else {\r\n                throw new Exception('You cannot read this chat!');\r\n            }\r\n\r\n            $db->commit();\r\n\r\n        } catch (Exception $e) {\r\n            http_response_code(400);\r\n            echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n                'error' => true,\r\n                'r' => $e->getMessage()\r\n            ));\r\n            $db->rollback();\r\n        }\r\n\r\n    } else {\r\n        http_response_code(400);\r\n        echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n            'error' => true,\r\n            'r' => \"Please enter a message!\"\r\n        ));\r\n    }\r\n} catch (Exception $e) {\r\n    http_response_code(400);\r\n    echo erLhcoreClassRestAPIHandler::outputResponse(array(\r\n        'error' => true,\r\n        'r' => $e->getMessage()\r\n    ));\r\n}\r\n\r\nexit;\r\n\r\n?>"], "filenames": ["lhc_web/lib/core/lhchat/lhchatworkflow.php", "lhc_web/modules/lhchat/addmsgadmin.php", "lhc_web/modules/lhchat/module.php", "lhc_web/modules/lhrestapi/addmsgadmin.php"], "buggy_code_start_loc": [877, 69, 715, 106], "buggy_code_end_loc": [877, 70, 715, 130], "fixing_code_start_loc": [878, 69, 716, 106], "fixing_code_end_loc": [884, 75, 718, 137], "type": "CWE-79", "message": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4179", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-28T09:15:06.933", "lastModified": "2022-01-06T20:09:23.173", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "livehelperchat is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "livehelperchat es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:livehelperchat:live_helper_chat:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.91", "matchCriteriaId": "744AB687-C4FD-47D3-BE0A-186C84B8E942"}]}]}], "references": [{"url": "https://github.com/livehelperchat/livehelperchat/commit/c3881fb528af349bf47f9ccbf83c994087faa3e6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/8df06513-c57d-4a55-9798-0a1f6c153535", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/livehelperchat/livehelperchat/commit/c3881fb528af349bf47f9ccbf83c994087faa3e6"}}