{"buggy_code": ["/**\n * The contents of this file are subject to the license and copyright\n * detailed in the LICENSE and NOTICE files at the root of the source\n * tree and available online at\n *\n * http://www.dspace.org/license/\n */\npackage org.dspace.app.webui.servlet;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.dspace.app.requestitem.RequestItemAuthor;\nimport org.dspace.app.requestitem.RequestItemAuthorExtractor;\nimport org.dspace.app.webui.util.JSPManager;\nimport org.dspace.app.webui.util.RequestItemManager;\nimport org.dspace.app.webui.util.UIUtil;\nimport org.dspace.authorize.AuthorizeException;\nimport org.dspace.content.Bitstream;\nimport org.dspace.content.Bundle;\nimport org.dspace.content.Metadatum;\nimport org.dspace.content.Item;\nimport org.dspace.core.*;\nimport org.dspace.eperson.EPerson;\nimport org.dspace.handle.HandleManager;\nimport org.dspace.storage.bitstore.BitstreamStorageManager;\nimport org.dspace.storage.rdbms.DatabaseManager;\nimport org.dspace.storage.rdbms.TableRow;\nimport org.dspace.utils.DSpace;\n\nimport javax.mail.MessagingException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.text.MessageFormat;\nimport java.util.Date;\n\n/**\n * Servlet for generate a statistisc report\n *\n * @author  Arnaldo Dantas\n * @version $Revision: 1.0 $\n */\npublic class RequestItemServlet extends DSpaceServlet\n{\n    /** log4j category */\n    private static Logger log = Logger.getLogger(RequestItemServlet.class);\n    \n    /** The information get by form step */\n    public static final int ENTER_FORM_PAGE = 1;\n\n    /** The link by submmiter email step*/\n    public static final int ENTER_TOKEN = 2;\n    \n    /** The link Aproved genarate letter step*/\n    public static final int APROVE_TOKEN = 3;\n\n    /* resume leter for request user*/\n    public static final int RESUME_REQUEST = 4;\n\n    /* resume leter for request dspace administrator*/\n    public static final int RESUME_FREEACESS = 5;\n\n    protected void doDSGet(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n        // First get the step\n        int step = UIUtil.getIntParameter(request, \"step\");\n\n        try\n        {\n\t        switch (step)\n\t        {\n\t        case ENTER_FORM_PAGE:\n\t            processForm(context, request, response);\n\t            break;\n\t\n\t        case ENTER_TOKEN:\n\t            processToken(context, request, response);\n\t            break;\n\t\n\t        case APROVE_TOKEN:\n\t            processLetter(context, request, response);\n\t            break;\n\t\n\t        case RESUME_REQUEST:\n\t            processAttach(context, request, response);\n\t            break;\n\t\n\t        case RESUME_FREEACESS:\n\t            processAdmin(context, request, response);\n\t            break;\n\t            \n\t        default:\n\t            processForm(context, request, response);\n\t        }\n\t        context.complete();\n        }\n        catch (MessagingException e)\n        {\n        \tthrow new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    protected void doDSPost(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n        // Treat as a GET\n        doDSGet(context, request, response);\n    }\n \n    private void processForm (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n    \tboolean showRequestCopy = false;\n\t\tif (\"all\".equalsIgnoreCase(ConfigurationManager.getProperty(\"request.item.type\")) || \n\t\t\t\t(\"logged\".equalsIgnoreCase(ConfigurationManager.getProperty(\"request.item.type\")) &&\n\t\t\t\t\t\tcontext.getCurrentUser() != null))\n\t\t{\n\t\t\tshowRequestCopy = true;\n\t\t}\n\t\t\n\t\tif (!showRequestCopy)\n\t\t{\n\t\t\tthrow new AuthorizeException(\"The request copy feature is disabled\");\n\t\t}\n\t\t\n        // handle\n        String handle = request.getParameter(\"handle\");\n        \n        String bitstream_id=request.getParameter(\"bitstream-id\");\n        \n        // Title\n        String title = null;\n        Item item = null;\n        if (StringUtils.isNotBlank(handle))\n        {\n            item = (Item) HandleManager.resolveToObject(context, handle);\n            \n        }\n        if (item == null)\n        {   \n        \tJSPManager.showInvalidIDError(request, response, handle, -1);\n        }\n        Metadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n        if (titleDC != null || titleDC.length > 0)\n        {\n            title = titleDC[0].value;\n        }\n        else\n\t\t{\n\t\t\ttitle = I18nUtil.getMessage(\"jsp.general.untitled\", context);\n\t\t}\n          \n        // User email from context\n        String requesterEmail = request.getParameter(\"email\");\n        EPerson currentUser = context.getCurrentUser();\n        String userName = null;\n        \n        if (currentUser != null)\n        {\n            requesterEmail = currentUser.getEmail();\n            userName = currentUser.getFullName();\n        }\n        \n        if (request.getParameter(\"submit\") != null)\n        {\n            String reqname = request.getParameter(\"reqname\");\n            String coment = request.getParameter(\"coment\");\n            if (coment == null || coment.equals(\"\"))\n                coment = \"\";\n            boolean allfiles = \"true\".equals(request.getParameter(\"allfiles\"));\n            \n            // Check all data is there\n            if (requesterEmail == null || requesterEmail.equals(\"\") ||\n                reqname == null || reqname.equals(\"\")) \n            {\n                request.setAttribute(\"handle\",handle);\n                request.setAttribute(\"bitstream-id\", bitstream_id);\n                request.setAttribute(\"reqname\", reqname);\n                request.setAttribute(\"email\", requesterEmail);\n                request.setAttribute(\"coment\", coment);\n                request.setAttribute(\"title\", title); \n                request.setAttribute(\"allfiles\", allfiles?\"true\":null); \n                \n                request.setAttribute(\"requestItem.problem\", new Boolean(true));\n                JSPManager.showJSP(request, response, \"/requestItem/request-form.jsp\");\n                return;\n            }\n\n            try\n            {\n                // All data is there, send the email\n\t\t\t\tEmail email = Email.getEmail(I18nUtil.getEmailFilename(\n\t\t\t\t\t\tcontext.getCurrentLocale(), \"request_item.author\"));\n\t\t\t\t\n\t\t\t\tRequestItemAuthor author = new DSpace()\n\t\t\t\t\t\t.getServiceManager()\n\t\t\t\t\t\t.getServiceByName(\n\t\t\t\t\t\t\t\tRequestItemAuthorExtractor.class.getName(),\n\t\t\t\t\t\t\t\tRequestItemAuthorExtractor.class)\n\t\t\t\t\t\t.getRequestItemAuthor(context, item);\n\t\t\t\t\n\t\t\t\tString authorEmail = author.getEmail();\n\t\t\t\tString authorName = author.getFullName();\n\t\t\t\t\n\t\t\t\temail.addRecipient(authorEmail);\n\n\t\t\t\temail.addArgument(reqname);\n\t\t\t\temail.addArgument(requesterEmail);\n\t\t\t\temail.addArgument(allfiles ? I18nUtil\n\t\t\t\t\t\t.getMessage(\"itemRequest.all\") : Bitstream.find(\n\t\t\t\t\t\tcontext, Integer.parseInt(bitstream_id)).getName());\n\t\t\t\temail.addArgument(HandleManager.getCanonicalForm(item\n\t\t\t\t\t\t.getHandle()));\n\t\t\t\temail.addArgument(title); // request item title\n\t\t\t\temail.addArgument(coment); // message\n\t\t\t\temail.addArgument(RequestItemManager.getLinkTokenEmail(context,\n\t\t\t\t\t\tbitstream_id, item.getID(), requesterEmail, reqname,\n\t\t\t\t\t\tallfiles));\n\t\t\t\t\n\t\t\t\temail.addArgument(authorName); // corresponding author name\n\t\t\t\temail.addArgument(authorEmail); // corresponding author email\n\t\t\t\temail.addArgument(ConfigurationManager\n\t\t\t\t\t\t.getProperty(\"dspace.name\"));\n\t\t\t\temail.addArgument(ConfigurationManager\n\t\t\t\t\t\t.getProperty(\"mail.helpdesk\"));\n\t\t\t\temail.setReplyTo(requesterEmail);\n\t\t\t\temail.send();\n\n                log.info(LogManager.getHeader(context,\n                    \"sent_email_requestItem\",\n                    \"submitter_id=\" + requesterEmail\n                        + \",bitstream_id=\"+bitstream_id\n                        + \",requestEmail=\"+requesterEmail));\n\n                request.setAttribute(\"handle\", handle);\n                JSPManager.showJSP(request, response,\n                    \"/requestItem/request-send.jsp\");\n            }\n            catch (MessagingException me)\n            {\n                log.warn(LogManager.getHeader(context,\n                    \"error_mailing_requestItem\",\n                    \"\"), me);\n               JSPManager.showInternalError(request, response);\n            }\n        }\n        else\n        {\n            // Display request copy form\n            log.info(LogManager.getHeader(context,\n                \"show_requestItem_form\",\n                \"problem=false\"));\n            request.setAttribute(\"handle\", handle);\n            request.setAttribute(\"bitstream-id\", bitstream_id);\n            request.setAttribute(\"email\", requesterEmail);\n            request.setAttribute(\"reqname\", userName);\n            request.setAttribute(\"title\", title);\n            request.setAttribute(\"allfiles\", \"true\");\n            JSPManager.showJSP(request, response, \"/requestItem/request-form.jsp\"); \n        }\n   }\n\n\n    /* receive token\n     * get all request data by token\n     * send email to request user\n     */\n   private void processToken (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n       // Token\n        String token = request.getParameter(\"token\");\n       \n        TableRow requestItem = RequestItemManager.getRequestbyToken( context, token);\n        // validate\n        if (requestItem != null)\n        {\n            Item item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n            String title = \"\";\n             if (item != null)\n            {   \n                Metadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n                if (titleDC != null || titleDC.length > 0) \n                    title = titleDC[0].value; \n            }\n            request.setAttribute(\"request-name\", requestItem.getStringColumn(\"request_name\"));\n            request.setAttribute(\"handle\", item.getHandle());\n            request.setAttribute(\"title\", title);\n            \n            JSPManager.showJSP(request, response,\n                    \"/requestItem/request-information.jsp\");\n        }else{\n            JSPManager.showInvalidIDError(request, response, token, -1);\n        }\n        \n   }\n   \n\t/*\n\t * receive approvation and generate a letter\n\t * get all request data by token\n\t * send email to request user\n\t */\n\tprivate void processLetter(Context context, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException,\n\t\t\tSQLException, AuthorizeException, MessagingException {\n\t\t// Token\n\t\tString token = request.getParameter(\"token\");\n\t\tboolean yes = request.getParameter(\"submit_yes\") != null;\n\t\tboolean no = request.getParameter(\"submit_no\") != null;\n\n\t\t// get token, get register, get email template, format email, get\n\t\t// message to jsp\n\t\tTableRow requestItem = RequestItemManager.getRequestbyToken(context,\n\t\t\t\ttoken);\n\n\t\tif (requestItem != null && (yes || no)) {\n\t\t\tItem item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n\n\t\t\tMetadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n\t\t\tString title = titleDC.length > 0 ? titleDC[0].value : I18nUtil\n\t\t\t\t\t.getMessage(\"jsp.general.untitled\", context);\n\t\t\t\n\n\t\t\tEPerson submiter = item.getSubmitter();\n\n\t\t\tObject[] args = new String[]{\n\t\t\t\t\t\trequestItem.getStringColumn(\"request_name\"),\n\t\t\t\t\t\tHandleManager.getCanonicalForm(item.getHandle()), // User\n\t\t\t\t\t\ttitle, // request item title\n\t\t\t\t\t\tsubmiter.getFullName(), // # submmiter name\n\t\t\t\t\t\tsubmiter.getEmail() // # submmiter email\n\t\t\t\t\t};\n\t\t\t\n\t\t\tString subject = I18nUtil.getMessage(\"itemRequest.response.subject.\"\n\t\t\t\t\t+ (yes ? \"approve\" : \"reject\"), context);\n\t\t\tString message = MessageFormat.format(I18nUtil.getMessage(\"itemRequest.response.body.\"\n\t\t\t\t\t+ (yes ? \"approve\" : \"reject\"), context), args);\n\t\t\t\n\t\t\t// page\n\t\t\trequest.setAttribute(\"response\", yes);\n\t\t\trequest.setAttribute(\"subject\", subject);\n\t\t\trequest.setAttribute(\"message\", message);\n\t\t\tJSPManager.showJSP(request, response,\n\t\t\t\t\t\"/requestItem/request-letter.jsp\");\n\t\t} else {\n\t\t\tJSPManager.showInvalidIDError(request, response, token, -1);\n\t\t}\n\t}\n\n\t/*\n\t * receive token \n\t * get all request data by token \n\t * send email to request user\n\t */\n   private void processAttach (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n       // Token\n        String token = request.getParameter(\"token\");\n        \n        //buttom\n        boolean submit_next = (request.getParameter(\"submit_next\") != null);\n       \n        if (submit_next)\n        {\n            TableRow requestItem = RequestItemManager.getRequestbyToken( context, token);\n            // validate\n            if (requestItem != null)\n            {\n                // Token\n                String subject = request.getParameter(\"subject\");\n                String message = request.getParameter(\"message\");\n                boolean accept = UIUtil.getBoolParameter(request, \"accept_request\");\n                try\n                {\n                    Item item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n                    Email email = new Email();\n                    email.setSubject(subject);\n                    email.setContent(\"{0}\");\n        \t\t\temail.addRecipient(requestItem.getStringColumn(\"request_email\"));\n                    email.addArgument(message);\n                    \n\t\t\t\t\t// add attach\n\t\t\t\t\tif (accept) {\n\t\t\t\t\t\tif (requestItem.getBooleanColumn(\"allfiles\")) {\n\t\t\t\t\t\t\tBundle[] bundles = item.getBundles(\"ORIGINAL\");\n\t\t\t\t\t\t\tfor (int i = 0; i < bundles.length; i++) {\n\t\t\t\t\t\t\t\tBitstream[] bitstreams = bundles[i]\n\t\t\t\t\t\t\t\t\t\t.getBitstreams();\n\t\t\t\t\t\t\t\tfor (int k = 0; k < bitstreams.length; k++) {\n\t\t\t\t\t\t\t\t\tif (!bitstreams[k].getFormat().isInternal()\n\t\t\t\t\t\t\t\t\t\t\t&& RequestItemManager.isRestricted(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext, bitstreams[k])) {\n\t\t\t\t\t\t\t\t\t\temail.addAttachment(\n\t\t\t\t\t\t\t\t\t\t\t\tBitstreamStorageManager\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.retrieve(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getID()),\n\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k].getName(),\n\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k].getFormat()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMIMEType());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tBitstream bit = Bitstream.find(context,\n\t\t\t\t\t\t\t\t\trequestItem.getIntColumn(\"bitstream_id\"));\n\t\t\t\t\t\t\temail.addAttachment(BitstreamStorageManager\n\t\t\t\t\t\t\t\t\t.retrieve(context, requestItem\n\t\t\t\t\t\t\t\t\t\t\t.getIntColumn(\"bitstream_id\")), bit\n\t\t\t\t\t\t\t\t\t.getName(), bit.getFormat().getMIMEType());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                    email.send();\n\n                    requestItem.setColumn(\"accept_request\",accept);\n                    requestItem.setColumn(\"decision_date\",new Date());\n                    DatabaseManager.update(context, requestItem);\n\n                    log.info(LogManager.getHeader(context,\n                        \"sent_attach_requestItem\",\n                        \"token=\" + token));\n\n                    JSPManager.showJSP(request, response,\n                        \"/requestItem/request-free-access.jsp\");\n                }\n                catch (MessagingException me)\n                {\n                    log.warn(LogManager.getHeader(context,\n                        \"error_mailing_requestItem\",\n                        \"\"), me);\n                   JSPManager.showInternalError(request, response);\n                }            \n\t\t\t} else\n\t\t\t\tJSPManager.showInvalidIDError(request, response, null, -1);\n\t\t} else {\n\t\t\tprocessToken(context, request, response);\n\t\t}\n   }\n\n\t/*\n\t * receive approvation and generate a letter \n\t * get all request data by token\n\t * send email to request user\n\t */\n\tprivate void processAdmin(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n\t\t// Token\n\t\tString token = request.getParameter(\"token\");\n\t\tboolean free = request.getParameter(\"submit_free\") != null;\n\t\tString name = request.getParameter(\"name\");\n\t\tString mail = request.getParameter(\"email\");\n\t\t// get token, get register, get email template, format email, get\n\t\t// message to jsp\n\t\tTableRow requestItem = RequestItemManager.getRequestbyToken(context,\n\t\t\t\ttoken);\n\n\t\tif (requestItem != null && free) {\n\t\t\ttry {\n\t\t\t\tItem item = Item.find(context,\n\t\t\t\t\t\trequestItem.getIntColumn(\"item_id\"));\n\n\t\t\t\tString emailRequest;\n\t\t\t\tEPerson submiter = item.getSubmitter();\n\t\t\t\tif (submiter != null) {\n\t\t\t\t\temailRequest = submiter.getEmail();\n\t\t\t\t} else {\n\t\t\t\t\temailRequest = ConfigurationManager\n\t\t\t\t\t\t\t.getProperty(\"mail.helpdesk\");\n\t\t\t\t}\n\t\t\t\tif (emailRequest == null) {\n\t\t\t\t\temailRequest = ConfigurationManager\n\t\t\t\t\t\t\t.getProperty(\"mail.admin\");\n\t\t\t\t}\n\t\t\t\tEmail email = Email.getEmail(I18nUtil.getEmailFilename(\n\t\t\t\t\t\tcontext.getCurrentLocale(), \"request_item.admin\"));\n\t\t\t\temail.addRecipient(emailRequest);\n\n\t\t\t\temail.addArgument(Bitstream.find(context,\n\t\t\t\t\t\trequestItem.getIntColumn(\"bitstream_id\")).getName());\n\t\t\t\temail.addArgument(HandleManager.getCanonicalForm(item\n\t\t\t\t\t\t.getHandle()));\n\t\t\t\temail.addArgument(requestItem.getStringColumn(\"token\"));\n\t\t\t\temail.addArgument(name);\n\t\t\t\temail.addArgument(mail);\n\n\t\t\t\temail.send();\n\n\t\t\t\tlog.info(LogManager.getHeader(context, \"sent_adm_requestItem\",\n\t\t\t\t\t\t\"token=\" + requestItem.getStringColumn(\"token\")\n\t\t\t\t\t\t\t\t+ \"item_id=\" + item.getID()));\n\n\t\t\t\tJSPManager.showJSP(request, response,\n\t\t\t\t\t\t\"/requestItem/response-send.jsp\");\n\t\t\t} catch (MessagingException me) {\n\t\t\t\tlog.warn(LogManager.getHeader(context,\n\t\t\t\t\t\t\"error_mailing_requestItem\", \"\"), me);\n\t\t\t\tJSPManager.showInternalError(request, response);\n\t\t\t}\n\t\t} else {\n\t\t\tJSPManager.showInvalidIDError(request, response, token, -1);\n\t\t}\n   }\n}\n", "/**\n * The contents of this file are subject to the license and copyright\n * detailed in the LICENSE and NOTICE files at the root of the source\n * tree and available online at\n *\n * http://www.dspace.org/license/\n */\n/*\n * RequestItemManager.java\n *\n * Created on 27 de Marco de 2006, 17:12 by Arnaldo Dantas\n *\n */\n\npackage org.dspace.app.webui.util;\n\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.apache.log4j.Logger;\nimport org.dspace.app.webui.servlet.RequestItemServlet;\nimport org.dspace.authorize.AuthorizeManager;\nimport org.dspace.authorize.ResourcePolicy;\nimport org.dspace.content.DSpaceObject;\nimport org.dspace.core.ConfigurationManager;\nimport org.dspace.core.Constants;\nimport org.dspace.core.Context;\nimport org.dspace.core.Utils;\nimport org.dspace.storage.rdbms.DatabaseManager;\nimport org.dspace.storage.rdbms.TableRow;\n\n/**\n *\n * @author Arnaldo Dantas\n */\npublic class RequestItemManager {\n    \n    /** log4j log */\n    private static Logger log = Logger.getLogger(RequestItemManager.class);\n    \n    /* tablerow of requestitem table*/\n    TableRow requestitem;\n    \n    /** Creates a new instance of RequestItemManager */\n    public RequestItemManager(){}\n\n    /**\n     * Return the e-mail address referred to by a token, or null if email\n     * address can't be found ignores expiration of token\n     * \n     * @param context\n     *            DSpace context\n     * @param token\n     *            Account token\n     * @return The email address corresponding to token, or null.\n     */\n    public static TableRow getRequestbyToken(Context context, String token)\n            throws SQLException\n    {\n        TableRow rd = DatabaseManager.findByUnique(context, \"requestitem\",\n                \"token\", token);\n\n        if (rd == null)\n        {\n            return null;\n        }\n\n        /*\n         * ignore the expiration date on tokens Date expires =\n         * rd.getDateColumn(\"expires\"); if (expires != null) { if ((new\n         * java.util.Date()).after(expires)) return null; }\n         */\n        return rd;\n    }\n    \n    /*\n     *\n     */\n    protected static String getNewToken(Context context, int bitstreamId\n            , int itemID, String reqEmail, String reqName, boolean allfiles) throws SQLException\n    {\n        TableRow rd = DatabaseManager.create(context, \"requestitem\");\n        rd.setColumn(\"token\", Utils.generateHexKey());\n        rd.setColumn(\"bitstream_id\", bitstreamId);\n        rd.setColumn(\"item_id\",itemID);\n        rd.setColumn(\"allfiles\", allfiles);\n        rd.setColumn(\"request_email\", reqEmail);\n        rd.setColumn(\"request_name\", reqName);\n        rd.setColumnNull(\"accept_request\");\n        rd.setColumn(\"request_date\", new Date());\n        rd.setColumnNull(\"decision_date\");\n        rd.setColumnNull(\"expires\");\n        // don't set expiration date any more\n        //rd.setColumn(\"expires\", getDefaultExpirationDate());\n        DatabaseManager.update(context, rd);\n\n        // This is a potential problem -- if we create the callback\n        // and then crash, registration will get SNAFU-ed.\n        // So FIRST leave some breadcrumbs\n        if (log.isDebugEnabled())\n        {\n            log.debug(\"Created requestitem_token \"\n                    + rd.getIntColumn(\"requestitem_id\")\n                    + \" with token \" + rd.getStringColumn(\"token\")\n                    +  \"\\\"\");\n        }\n        return rd.getStringColumn(\"token\");\n         \n    }\n\n    /**\n     * Get the link to the author in RequestLink email.\n     * \n     * @param email\n     *            The email address to mail to\n     *\n     * @exception SQLExeption\n     *\n     */\n    public static String getLinkTokenEmail(Context context, String bitstreamId\n            , int itemID, String reqEmail, String reqName, boolean allfiles)\n            throws SQLException\n    {\n        String base = ConfigurationManager.getProperty(\"dspace.url\");\n\n        String specialLink = (new StringBuffer()).append(base).append(\n                base.endsWith(\"/\") ? \"\" : \"/\").append(\n                \"request-item\").append(\"?step=\" + RequestItemServlet.ENTER_TOKEN)\n                .append(\"&token=\")\n                .append(getNewToken(context, Integer.parseInt(bitstreamId), itemID, reqEmail, reqName, allfiles))\n                .toString();\n        \n        return specialLink;\n    }\n    \n     public static boolean isRestricted(Context context, DSpaceObject o) throws SQLException\n    {\n\t\tList<ResourcePolicy> policies = AuthorizeManager\n\t\t\t\t.getPoliciesActionFilter(context, o, Constants.READ);\n\t\tfor (ResourcePolicy rp : policies)\n\t\t{\n\t\t\tif (rp.isDateValid())\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n        return true;\n    }\n    \n    \n}\n"], "fixing_code": ["/**\n * The contents of this file are subject to the license and copyright\n * detailed in the LICENSE and NOTICE files at the root of the source\n * tree and available online at\n *\n * http://www.dspace.org/license/\n */\npackage org.dspace.app.webui.servlet;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.log4j.Logger;\nimport org.dspace.app.requestitem.RequestItemAuthor;\nimport org.dspace.app.requestitem.RequestItemAuthorExtractor;\nimport org.dspace.app.webui.util.JSPManager;\nimport org.dspace.app.webui.util.RequestItemManager;\nimport org.dspace.app.webui.util.UIUtil;\nimport org.dspace.authorize.AuthorizeException;\nimport org.dspace.content.Bitstream;\nimport org.dspace.content.Bundle;\nimport org.dspace.content.Metadatum;\nimport org.dspace.content.Item;\nimport org.dspace.core.*;\nimport org.dspace.eperson.EPerson;\nimport org.dspace.handle.HandleManager;\nimport org.dspace.storage.bitstore.BitstreamStorageManager;\nimport org.dspace.storage.rdbms.DatabaseManager;\nimport org.dspace.storage.rdbms.TableRow;\nimport org.dspace.utils.DSpace;\n\nimport javax.mail.MessagingException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.text.MessageFormat;\nimport java.util.Date;\n\n/**\n * Servlet for generate a statistisc report\n *\n * @author  Arnaldo Dantas\n * @version $Revision: 1.0 $\n */\npublic class RequestItemServlet extends DSpaceServlet\n{\n    /** log4j category */\n    private static Logger log = Logger.getLogger(RequestItemServlet.class);\n    \n    /** The information get by form step */\n    public static final int ENTER_FORM_PAGE = 1;\n\n    /** The link by submmiter email step*/\n    public static final int ENTER_TOKEN = 2;\n    \n    /** The link Aproved genarate letter step*/\n    public static final int APROVE_TOKEN = 3;\n\n    /* resume leter for request user*/\n    public static final int RESUME_REQUEST = 4;\n\n    /* resume leter for request dspace administrator*/\n    public static final int RESUME_FREEACESS = 5;\n\n    protected void doDSGet(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n        // First get the step\n        int step = UIUtil.getIntParameter(request, \"step\");\n\n        try\n        {\n\t        switch (step)\n\t        {\n\t        case ENTER_FORM_PAGE:\n\t            processForm(context, request, response);\n\t            break;\n\t\n\t        case ENTER_TOKEN:\n\t            processToken(context, request, response);\n\t            break;\n\t\n\t        case APROVE_TOKEN:\n\t            processLetter(context, request, response);\n\t            break;\n\t\n\t        case RESUME_REQUEST:\n\t            processAttach(context, request, response);\n\t            break;\n\t\n\t        case RESUME_FREEACESS:\n\t            processAdmin(context, request, response);\n\t            break;\n\t            \n\t        default:\n\t            processForm(context, request, response);\n\t        }\n\t        context.complete();\n        }\n        catch (MessagingException e)\n        {\n        \tthrow new RuntimeException(e.getMessage(), e);\n        }\n    }\n\n    protected void doDSPost(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n        // Treat as a GET\n        doDSGet(context, request, response);\n    }\n \n    private void processForm (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n    \tboolean showRequestCopy = false;\n\t\tif (\"all\".equalsIgnoreCase(ConfigurationManager.getProperty(\"request.item.type\")) || \n\t\t\t\t(\"logged\".equalsIgnoreCase(ConfigurationManager.getProperty(\"request.item.type\")) &&\n\t\t\t\t\t\tcontext.getCurrentUser() != null))\n\t\t{\n\t\t\tshowRequestCopy = true;\n\t\t}\n\t\t\n\t\tif (!showRequestCopy)\n\t\t{\n\t\t\tthrow new AuthorizeException(\"The request copy feature is disabled\");\n\t\t}\n\t\t\n        // handle\n        String handle = request.getParameter(\"handle\");\n        \n        int  bitstream_id= UIUtil.getIntParameter(request, \"bitstream-id\");\n        \n        // Title\n        String title = null;\n        Item item = null;\n        if (StringUtils.isNotBlank(handle))\n        {\n            item = (Item) HandleManager.resolveToObject(context, handle);\n            \n        }\n        if (item == null)\n        {   \n        \tJSPManager.showInvalidIDError(request, response, handle, -1);\n        }\n        Metadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n        if (titleDC != null || titleDC.length > 0)\n        {\n            title = titleDC[0].value;\n        }\n        else\n\t\t{\n\t\t\ttitle = I18nUtil.getMessage(\"jsp.general.untitled\", context);\n\t\t}\n          \n        // User email from context\n        String requesterEmail = StringEscapeUtils.escapeHtml4(request.getParameter(\"email\"));\n        EPerson currentUser = context.getCurrentUser();\n        String userName = null;\n        \n        if (currentUser != null)\n        {\n            requesterEmail = currentUser.getEmail();\n            userName = currentUser.getFullName();\n        }\n        \n        if (request.getParameter(\"submit\") != null)\n        {\n            String reqname = StringEscapeUtils.escapeHtml4(request.getParameter(\"reqname\"));\n            String coment = StringEscapeUtils.escapeHtml4(request.getParameter(\"coment\"));\n            if (coment == null || coment.equals(\"\"))\n                coment = \"\";\n            boolean allfiles = \"true\".equals(request.getParameter(\"allfiles\"));\n            \n            // Check all data is there\n            if (requesterEmail == null || requesterEmail.equals(\"\") ||\n                reqname == null || reqname.equals(\"\")) \n            {\n                request.setAttribute(\"handle\",handle);\n                request.setAttribute(\"bitstream-id\", bitstream_id);\n                request.setAttribute(\"reqname\", reqname);\n                request.setAttribute(\"email\", requesterEmail);\n                request.setAttribute(\"coment\", coment);\n                request.setAttribute(\"title\", title); \n                request.setAttribute(\"allfiles\", allfiles?\"true\":null); \n                \n                request.setAttribute(\"requestItem.problem\", new Boolean(true));\n                JSPManager.showJSP(request, response, \"/requestItem/request-form.jsp\");\n                return;\n            }\n\n            try\n            {\n                // All data is there, send the email\n\t\t\t\tEmail email = Email.getEmail(I18nUtil.getEmailFilename(\n\t\t\t\t\t\tcontext.getCurrentLocale(), \"request_item.author\"));\n\t\t\t\t\n\t\t\t\tRequestItemAuthor author = new DSpace()\n\t\t\t\t\t\t.getServiceManager()\n\t\t\t\t\t\t.getServiceByName(\n\t\t\t\t\t\t\t\tRequestItemAuthorExtractor.class.getName(),\n\t\t\t\t\t\t\t\tRequestItemAuthorExtractor.class)\n\t\t\t\t\t\t.getRequestItemAuthor(context, item);\n\t\t\t\t\n\t\t\t\tString authorEmail = author.getEmail();\n\t\t\t\tString authorName = author.getFullName();\n\t\t\t\t\n\t\t\t\temail.addRecipient(authorEmail);\n\n\t\t\t\temail.addArgument(reqname);\n\t\t\t\temail.addArgument(requesterEmail);\n\t\t\t\temail.addArgument(allfiles ? I18nUtil\n\t\t\t\t\t\t.getMessage(\"itemRequest.all\") : Bitstream.find(\n\t\t\t\t\t\tcontext, bitstream_id).getName());\n\t\t\t\temail.addArgument(HandleManager.getCanonicalForm(item\n\t\t\t\t\t\t.getHandle()));\n\t\t\t\temail.addArgument(title); // request item title\n\t\t\t\temail.addArgument(coment); // message\n\t\t\t\temail.addArgument(RequestItemManager.getLinkTokenEmail(context,\n\t\t\t\t\t\tbitstream_id, item.getID(), requesterEmail, reqname,\n\t\t\t\t\t\tallfiles));\n\t\t\t\t\n\t\t\t\temail.addArgument(authorName); // corresponding author name\n\t\t\t\temail.addArgument(authorEmail); // corresponding author email\n\t\t\t\temail.addArgument(ConfigurationManager\n\t\t\t\t\t\t.getProperty(\"dspace.name\"));\n\t\t\t\temail.addArgument(ConfigurationManager\n\t\t\t\t\t\t.getProperty(\"mail.helpdesk\"));\n\t\t\t\temail.setReplyTo(requesterEmail);\n\t\t\t\temail.send();\n\n                log.info(LogManager.getHeader(context,\n                    \"sent_email_requestItem\",\n                    \"submitter_id=\" + requesterEmail\n                        + \",bitstream_id=\"+bitstream_id\n                        + \",requestEmail=\"+requesterEmail));\n\n                request.setAttribute(\"handle\", handle);\n                JSPManager.showJSP(request, response,\n                    \"/requestItem/request-send.jsp\");\n            }\n            catch (MessagingException me)\n            {\n                log.warn(LogManager.getHeader(context,\n                    \"error_mailing_requestItem\",\n                    \"\"), me);\n               JSPManager.showInternalError(request, response);\n            }\n        }\n        else\n        {\n            // Display request copy form\n            log.info(LogManager.getHeader(context,\n                \"show_requestItem_form\",\n                \"problem=false\"));\n            request.setAttribute(\"handle\", handle);\n            request.setAttribute(\"bitstream-id\", bitstream_id);\n            request.setAttribute(\"email\", requesterEmail);\n            request.setAttribute(\"reqname\", userName);\n            request.setAttribute(\"title\", title);\n            request.setAttribute(\"allfiles\", \"true\");\n            JSPManager.showJSP(request, response, \"/requestItem/request-form.jsp\"); \n        }\n   }\n\n\n    /* receive token\n     * get all request data by token\n     * send email to request user\n     */\n   private void processToken (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n       // Token\n        String token = request.getParameter(\"token\");\n       \n        TableRow requestItem = RequestItemManager.getRequestbyToken( context, token);\n        // validate\n        if (requestItem != null)\n        {\n            Item item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n            String title = \"\";\n             if (item != null)\n            {   \n                Metadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n                if (titleDC != null || titleDC.length > 0) \n                    title = titleDC[0].value; \n            }\n            request.setAttribute(\"request-name\", requestItem.getStringColumn(\"request_name\"));\n            request.setAttribute(\"handle\", item.getHandle());\n            request.setAttribute(\"title\", title);\n            \n            JSPManager.showJSP(request, response,\n                    \"/requestItem/request-information.jsp\");\n        }else{\n            JSPManager.showInvalidIDError(request, response, token, -1);\n        }\n        \n   }\n   \n\t/*\n\t * receive approvation and generate a letter\n\t * get all request data by token\n\t * send email to request user\n\t */\n\tprivate void processLetter(Context context, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws ServletException, IOException,\n\t\t\tSQLException, AuthorizeException, MessagingException {\n\t\t// Token\n\t\tString token = request.getParameter(\"token\");\n\t\tboolean yes = request.getParameter(\"submit_yes\") != null;\n\t\tboolean no = request.getParameter(\"submit_no\") != null;\n\n\t\t// get token, get register, get email template, format email, get\n\t\t// message to jsp\n\t\tTableRow requestItem = RequestItemManager.getRequestbyToken(context,\n\t\t\t\ttoken);\n\n\t\tif (requestItem != null && (yes || no)) {\n\t\t\tItem item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n\n\t\t\tMetadatum[] titleDC = item.getDC(\"title\", null, Item.ANY);\n\t\t\tString title = titleDC.length > 0 ? titleDC[0].value : I18nUtil\n\t\t\t\t\t.getMessage(\"jsp.general.untitled\", context);\n\t\t\t\n\n\t\t\tEPerson submiter = item.getSubmitter();\n\n\t\t\tObject[] args = new String[]{\n\t\t\t\t\t\trequestItem.getStringColumn(\"request_name\"),\n\t\t\t\t\t\tHandleManager.getCanonicalForm(item.getHandle()), // User\n\t\t\t\t\t\ttitle, // request item title\n\t\t\t\t\t\tsubmiter.getFullName(), // # submmiter name\n\t\t\t\t\t\tsubmiter.getEmail() // # submmiter email\n\t\t\t\t\t};\n\t\t\t\n\t\t\tString subject = I18nUtil.getMessage(\"itemRequest.response.subject.\"\n\t\t\t\t\t+ (yes ? \"approve\" : \"reject\"), context);\n\t\t\tString message = MessageFormat.format(I18nUtil.getMessage(\"itemRequest.response.body.\"\n\t\t\t\t\t+ (yes ? \"approve\" : \"reject\"), context), args);\n\t\t\t\n\t\t\t// page\n\t\t\trequest.setAttribute(\"response\", yes);\n\t\t\trequest.setAttribute(\"subject\", subject);\n\t\t\trequest.setAttribute(\"message\", message);\n\t\t\tJSPManager.showJSP(request, response,\n\t\t\t\t\t\"/requestItem/request-letter.jsp\");\n\t\t} else {\n\t\t\tJSPManager.showInvalidIDError(request, response, token, -1);\n\t\t}\n\t}\n\n\t/*\n\t * receive token \n\t * get all request data by token \n\t * send email to request user\n\t */\n   private void processAttach (Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n       // Token\n        String token = request.getParameter(\"token\");\n        \n        //buttom\n        boolean submit_next = (request.getParameter(\"submit_next\") != null);\n       \n        if (submit_next)\n        {\n            TableRow requestItem = RequestItemManager.getRequestbyToken( context, token);\n            // validate\n            if (requestItem != null)\n            {\n                // Token\n                String subject = request.getParameter(\"subject\");\n                String message = request.getParameter(\"message\");\n                boolean accept = UIUtil.getBoolParameter(request, \"accept_request\");\n                try\n                {\n                    Item item = Item.find(context, requestItem.getIntColumn(\"item_id\"));\n                    Email email = new Email();\n                    email.setSubject(subject);\n                    email.setContent(\"{0}\");\n        \t\t\temail.addRecipient(requestItem.getStringColumn(\"request_email\"));\n                    email.addArgument(message);\n                    \n\t\t\t\t\t// add attach\n\t\t\t\t\tif (accept) {\n\t\t\t\t\t\tif (requestItem.getBooleanColumn(\"allfiles\")) {\n\t\t\t\t\t\t\tBundle[] bundles = item.getBundles(\"ORIGINAL\");\n\t\t\t\t\t\t\tfor (int i = 0; i < bundles.length; i++) {\n\t\t\t\t\t\t\t\tBitstream[] bitstreams = bundles[i]\n\t\t\t\t\t\t\t\t\t\t.getBitstreams();\n\t\t\t\t\t\t\t\tfor (int k = 0; k < bitstreams.length; k++) {\n\t\t\t\t\t\t\t\t\tif (!bitstreams[k].getFormat().isInternal()\n\t\t\t\t\t\t\t\t\t\t\t&& RequestItemManager.isRestricted(\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontext, bitstreams[k])) {\n\t\t\t\t\t\t\t\t\t\temail.addAttachment(\n\t\t\t\t\t\t\t\t\t\t\t\tBitstreamStorageManager\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.retrieve(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getID()),\n\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k].getName(),\n\t\t\t\t\t\t\t\t\t\t\t\tbitstreams[k].getFormat()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.getMIMEType());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tBitstream bit = Bitstream.find(context,\n\t\t\t\t\t\t\t\t\trequestItem.getIntColumn(\"bitstream_id\"));\n\t\t\t\t\t\t\temail.addAttachment(BitstreamStorageManager\n\t\t\t\t\t\t\t\t\t.retrieve(context, requestItem\n\t\t\t\t\t\t\t\t\t\t\t.getIntColumn(\"bitstream_id\")), bit\n\t\t\t\t\t\t\t\t\t.getName(), bit.getFormat().getMIMEType());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                    email.send();\n\n                    requestItem.setColumn(\"accept_request\",accept);\n                    requestItem.setColumn(\"decision_date\",new Date());\n                    DatabaseManager.update(context, requestItem);\n\n                    log.info(LogManager.getHeader(context,\n                        \"sent_attach_requestItem\",\n                        \"token=\" + token));\n\n                    JSPManager.showJSP(request, response,\n                        \"/requestItem/request-free-access.jsp\");\n                }\n                catch (MessagingException me)\n                {\n                    log.warn(LogManager.getHeader(context,\n                        \"error_mailing_requestItem\",\n                        \"\"), me);\n                   JSPManager.showInternalError(request, response);\n                }            \n\t\t\t} else\n\t\t\t\tJSPManager.showInvalidIDError(request, response, null, -1);\n\t\t} else {\n\t\t\tprocessToken(context, request, response);\n\t\t}\n   }\n\n\t/*\n\t * receive approvation and generate a letter \n\t * get all request data by token\n\t * send email to request user\n\t */\n\tprivate void processAdmin(Context context,\n        HttpServletRequest request,\n        HttpServletResponse response)\n        throws ServletException, IOException, SQLException, AuthorizeException\n    {\n\t\t// Token\n\t\tString token = request.getParameter(\"token\");\n\t\tboolean free = request.getParameter(\"submit_free\") != null;\n\t\tString name = request.getParameter(\"name\");\n\t\tString mail = request.getParameter(\"email\");\n\t\t// get token, get register, get email template, format email, get\n\t\t// message to jsp\n\t\tTableRow requestItem = RequestItemManager.getRequestbyToken(context,\n\t\t\t\ttoken);\n\n\t\tif (requestItem != null && free) {\n\t\t\ttry {\n\t\t\t\tItem item = Item.find(context,\n\t\t\t\t\t\trequestItem.getIntColumn(\"item_id\"));\n\n\t\t\t\tString emailRequest;\n\t\t\t\tEPerson submiter = item.getSubmitter();\n\t\t\t\tif (submiter != null) {\n\t\t\t\t\temailRequest = submiter.getEmail();\n\t\t\t\t} else {\n\t\t\t\t\temailRequest = ConfigurationManager\n\t\t\t\t\t\t\t.getProperty(\"mail.helpdesk\");\n\t\t\t\t}\n\t\t\t\tif (emailRequest == null) {\n\t\t\t\t\temailRequest = ConfigurationManager\n\t\t\t\t\t\t\t.getProperty(\"mail.admin\");\n\t\t\t\t}\n\t\t\t\tEmail email = Email.getEmail(I18nUtil.getEmailFilename(\n\t\t\t\t\t\tcontext.getCurrentLocale(), \"request_item.admin\"));\n\t\t\t\temail.addRecipient(emailRequest);\n\n\t\t\t\temail.addArgument(Bitstream.find(context,\n\t\t\t\t\t\trequestItem.getIntColumn(\"bitstream_id\")).getName());\n\t\t\t\temail.addArgument(HandleManager.getCanonicalForm(item\n\t\t\t\t\t\t.getHandle()));\n\t\t\t\temail.addArgument(requestItem.getStringColumn(\"token\"));\n\t\t\t\temail.addArgument(name);\n\t\t\t\temail.addArgument(mail);\n\n\t\t\t\temail.send();\n\n\t\t\t\tlog.info(LogManager.getHeader(context, \"sent_adm_requestItem\",\n\t\t\t\t\t\t\"token=\" + requestItem.getStringColumn(\"token\")\n\t\t\t\t\t\t\t\t+ \"item_id=\" + item.getID()));\n\n\t\t\t\tJSPManager.showJSP(request, response,\n\t\t\t\t\t\t\"/requestItem/response-send.jsp\");\n\t\t\t} catch (MessagingException me) {\n\t\t\t\tlog.warn(LogManager.getHeader(context,\n\t\t\t\t\t\t\"error_mailing_requestItem\", \"\"), me);\n\t\t\t\tJSPManager.showInternalError(request, response);\n\t\t\t}\n\t\t} else {\n\t\t\tJSPManager.showInvalidIDError(request, response, token, -1);\n\t\t}\n   }\n}\n", "/**\n * The contents of this file are subject to the license and copyright\n * detailed in the LICENSE and NOTICE files at the root of the source\n * tree and available online at\n *\n * http://www.dspace.org/license/\n */\n/*\n * RequestItemManager.java\n *\n * Created on 27 de Marco de 2006, 17:12 by Arnaldo Dantas\n *\n */\n\npackage org.dspace.app.webui.util;\n\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.apache.log4j.Logger;\nimport org.dspace.app.webui.servlet.RequestItemServlet;\nimport org.dspace.authorize.AuthorizeManager;\nimport org.dspace.authorize.ResourcePolicy;\nimport org.dspace.content.DSpaceObject;\nimport org.dspace.core.ConfigurationManager;\nimport org.dspace.core.Constants;\nimport org.dspace.core.Context;\nimport org.dspace.core.Utils;\nimport org.dspace.storage.rdbms.DatabaseManager;\nimport org.dspace.storage.rdbms.TableRow;\n\n/**\n *\n * @author Arnaldo Dantas\n */\npublic class RequestItemManager {\n    \n    /** log4j log */\n    private static Logger log = Logger.getLogger(RequestItemManager.class);\n    \n    /* tablerow of requestitem table*/\n    TableRow requestitem;\n    \n    /** Creates a new instance of RequestItemManager */\n    public RequestItemManager(){}\n\n    /**\n     * Return the e-mail address referred to by a token, or null if email\n     * address can't be found ignores expiration of token\n     * \n     * @param context\n     *            DSpace context\n     * @param token\n     *            Account token\n     * @return The email address corresponding to token, or null.\n     */\n    public static TableRow getRequestbyToken(Context context, String token)\n            throws SQLException\n    {\n        TableRow rd = DatabaseManager.findByUnique(context, \"requestitem\",\n                \"token\", token);\n\n        if (rd == null)\n        {\n            return null;\n        }\n\n        /*\n         * ignore the expiration date on tokens Date expires =\n         * rd.getDateColumn(\"expires\"); if (expires != null) { if ((new\n         * java.util.Date()).after(expires)) return null; }\n         */\n        return rd;\n    }\n    \n    /*\n     *\n     */\n    protected static String getNewToken(Context context, int bitstreamId\n            , int itemID, String reqEmail, String reqName, boolean allfiles) throws SQLException\n    {\n        TableRow rd = DatabaseManager.create(context, \"requestitem\");\n        rd.setColumn(\"token\", Utils.generateHexKey());\n        rd.setColumn(\"bitstream_id\", bitstreamId);\n        rd.setColumn(\"item_id\",itemID);\n        rd.setColumn(\"allfiles\", allfiles);\n        rd.setColumn(\"request_email\", reqEmail);\n        rd.setColumn(\"request_name\", reqName);\n        rd.setColumnNull(\"accept_request\");\n        rd.setColumn(\"request_date\", new Date());\n        rd.setColumnNull(\"decision_date\");\n        rd.setColumnNull(\"expires\");\n        // don't set expiration date any more\n        //rd.setColumn(\"expires\", getDefaultExpirationDate());\n        DatabaseManager.update(context, rd);\n\n        // This is a potential problem -- if we create the callback\n        // and then crash, registration will get SNAFU-ed.\n        // So FIRST leave some breadcrumbs\n        if (log.isDebugEnabled())\n        {\n            log.debug(\"Created requestitem_token \"\n                    + rd.getIntColumn(\"requestitem_id\")\n                    + \" with token \" + rd.getStringColumn(\"token\")\n                    +  \"\\\"\");\n        }\n        return rd.getStringColumn(\"token\");\n         \n    }\n\n    /**\n     * Get the link to the author in RequestLink email.\n     * \n     * @param email\n     *            The email address to mail to\n     *\n     * @exception SQLExeption\n     *\n     */\n    public static String getLinkTokenEmail(Context context, int bitstreamId\n            , int itemID, String reqEmail, String reqName, boolean allfiles)\n            throws SQLException\n    {\n        String base = ConfigurationManager.getProperty(\"dspace.url\");\n\n        String specialLink = (new StringBuffer()).append(base).append(\n                base.endsWith(\"/\") ? \"\" : \"/\").append(\n                \"request-item\").append(\"?step=\" + RequestItemServlet.ENTER_TOKEN)\n                .append(\"&token=\")\n                .append(getNewToken(context, bitstreamId, itemID, reqEmail, reqName, allfiles))\n                .toString();\n        \n        return specialLink;\n    }\n    \n     public static boolean isRestricted(Context context, DSpaceObject o) throws SQLException\n    {\n\t\tList<ResourcePolicy> policies = AuthorizeManager\n\t\t\t\t.getPoliciesActionFilter(context, o, Constants.READ);\n\t\tfor (ResourcePolicy rp : policies)\n\t\t{\n\t\t\tif (rp.isDateValid())\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n        return true;\n    }\n    \n    \n}\n"], "filenames": ["dspace-jspui/src/main/java/org/dspace/app/webui/servlet/RequestItemServlet.java", "dspace-jspui/src/main/java/org/dspace/app/webui/util/RequestItemManager.java"], "buggy_code_start_loc": [10, 121], "buggy_code_end_loc": [221, 132], "fixing_code_start_loc": [11, 121], "fixing_code_end_loc": [222, 132], "type": "CWE-79", "message": "DSpace open source software is a repository application which provides durable access to digital resources. dspace-jspui is a UI component for DSpace. The JSPUI \"Request a Copy\" feature does not properly escape values submitted and stored from the \"Request a Copy\" form. This means that item requests could be vulnerable to XSS attacks. This vulnerability only impacts the JSPUI. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2022-31192", "sourceIdentifier": "security-advisories@github.com", "published": "2022-08-01T21:15:13.347", "lastModified": "2022-08-08T17:12:15.657", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "DSpace open source software is a repository application which provides durable access to digital resources. dspace-jspui is a UI component for DSpace. The JSPUI \"Request a Copy\" feature does not properly escape values submitted and stored from the \"Request a Copy\" form. This means that item requests could be vulnerable to XSS attacks. This vulnerability only impacts the JSPUI. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "El software de c\u00f3digo abierto DSpace es una aplicaci\u00f3n de repositorio que proporciona acceso duradero a recursos digitales. dspace-jspui es un componente de interfaz de usuario para DSpace. La funci\u00f3n \"Request a Copy\" de JSPUI no escapa adecuadamente de los valores enviados y almacenados desde el formulario \"Request a Copy\". Esto significa que las peticiones de elementos podr\u00edan ser vulnerables a ataques de tipo XSS. Esta vulnerabilidad s\u00f3lo afecta a la JSPUI. Es recomendado a usuarios actualizar. No se presentan mitigaciones conocidas para esta vulnerabilidad"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 3.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:duraspace:dspace:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0", "versionEndIncluding": "5.10", "matchCriteriaId": "D0931332-ACDA-450E-BDC7-BE5D44E27F66"}, {"vulnerable": true, "criteria": "cpe:2.3:a:duraspace:dspace:*:*:*:*:*:*:*:*", "versionStartExcluding": "6.0", "versionEndExcluding": "6.4", "matchCriteriaId": "27C1503E-2C8B-43CD-8937-9ABE6C24C67F"}]}]}], "references": [{"url": "https://github.com/DSpace/DSpace/commit/28eb8158210d41168a62ed5f9e044f754513bc37", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/DSpace/DSpace/commit/f7758457b7ec3489d525e39aa753cc70809d9ad9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/DSpace/DSpace/security/advisories/GHSA-4wm8-c2vv-xrpq", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/DSpace/DSpace/commit/28eb8158210d41168a62ed5f9e044f754513bc37"}}