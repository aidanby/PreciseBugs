{"buggy_code": ["<?php\n/**\n * These functions can be replaced via plugins. If plugins do not redefine these\n * functions, then these will be used instead.\n *\n * @package WordPress\n */\n\nif ( !function_exists('wp_set_current_user') ) :\n/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * Some WordPress functionality is based on the current user and not based on\n * the signed in user. Therefore, it opens the ability to edit and perform\n * actions on users who aren't signed in.\n *\n * @since 2.0.3\n * @global WP_User $current_user The current user object which holds the user data.\n *\n * @param int    $id   User ID\n * @param string $name User's username\n * @return WP_User Current user User object\n */\nfunction wp_set_current_user($id, $name = '') {\n\tglobal $current_user;\n\n\t// If `$id` matches the user who's already current, there's nothing to do.\n\tif ( isset( $current_user )\n\t\t&& ( $current_user instanceof WP_User )\n\t\t&& ( $id == $current_user->ID )\n\t\t&& ( null !== $id )\n\t) {\n\t\treturn $current_user;\n\t}\n\n\t$current_user = new WP_User( $id, $name );\n\n\tsetup_userdata( $current_user->ID );\n\n\t/**\n\t * Fires after the current user is set.\n\t *\n\t * @since 2.0.1\n\t */\n\tdo_action( 'set_current_user' );\n\n\treturn $current_user;\n}\nendif;\n\nif ( !function_exists('wp_get_current_user') ) :\n/**\n * Retrieve the current user object.\n *\n * Will set the current user, if the current user is not set. The current user\n * will be set to the logged-in person. If no user is logged-in, then it will\n * set the current user to 0, which is invalid and won't have any permissions.\n *\n * @since 2.0.3\n *\n * @see _wp_get_current_user()\n * @global WP_User $current_user Checks if the current user is set.\n *\n * @return WP_User Current WP_User instance.\n */\nfunction wp_get_current_user() {\n\treturn _wp_get_current_user();\n}\nendif;\n\nif ( !function_exists('get_userdata') ) :\n/**\n * Retrieve user info by user ID.\n *\n * @since 0.71\n *\n * @param int $user_id User ID\n * @return WP_User|false WP_User object on success, false on failure.\n */\nfunction get_userdata( $user_id ) {\n\treturn get_user_by( 'id', $user_id );\n}\nendif;\n\nif ( !function_exists('get_user_by') ) :\n/**\n * Retrieve user info by a given field\n *\n * @since 2.8.0\n * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.\n *\n * @param string     $field The field to retrieve the user with. id | ID | slug | email | login.\n * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n * @return WP_User|false WP_User object on success, false on failure.\n */\nfunction get_user_by( $field, $value ) {\n\t$userdata = WP_User::get_data_by( $field, $value );\n\n\tif ( !$userdata )\n\t\treturn false;\n\n\t$user = new WP_User;\n\t$user->init( $userdata );\n\n\treturn $user;\n}\nendif;\n\nif ( !function_exists('cache_users') ) :\n/**\n * Retrieve info for user lists to prevent multiple queries by get_userdata()\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $user_ids User ID numbers list\n */\nfunction cache_users( $user_ids ) {\n\tglobal $wpdb;\n\n\t$clean = _get_non_cached_ids( $user_ids, 'users' );\n\n\tif ( empty( $clean ) )\n\t\treturn;\n\n\t$list = implode( ',', $clean );\n\n\t$users = $wpdb->get_results( \"SELECT * FROM $wpdb->users WHERE ID IN ($list)\" );\n\n\t$ids = array();\n\tforeach ( $users as $user ) {\n\t\tupdate_user_caches( $user );\n\t\t$ids[] = $user->ID;\n\t}\n\tupdate_meta_cache( 'user', $ids );\n}\nendif;\n\nif ( !function_exists( 'wp_mail' ) ) :\n/**\n * Send mail, similar to PHP's mail\n *\n * A true return value does not automatically mean that the user received the\n * email successfully. It just only means that the method used was able to\n * process the request without any errors.\n *\n * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from\n * creating a from address like 'Name <email@address.com>' when both are set. If\n * just 'wp_mail_from' is set, then just the email address will be used with no\n * name.\n *\n * The default content type is 'text/plain' which does not allow using HTML.\n * However, you can set the content type of the email by using the\n * {@see 'wp_mail_content_type'} filter.\n *\n * The default charset is based on the charset used on the blog. The charset can\n * be set using the {@see 'wp_mail_charset'} filter.\n *\n * @since 1.2.1\n *\n * @global PHPMailer $phpmailer\n *\n * @param string|array $to          Array or comma-separated list of email addresses to send message.\n * @param string       $subject     Email subject\n * @param string       $message     Message contents\n * @param string|array $headers     Optional. Additional headers.\n * @param string|array $attachments Optional. Files to attach.\n * @return bool Whether the email contents were sent successfully.\n */\nfunction wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {\n\t// Compact the input, apply the filters, and extract them back out\n\n\t/**\n\t * Filters the wp_mail() arguments.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param array $args A compacted array of wp_mail() arguments, including the \"to\" email,\n\t *                    subject, message, headers, and attachments values.\n\t */\n\t$atts = apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) );\n\n\tif ( isset( $atts['to'] ) ) {\n\t\t$to = $atts['to'];\n\t}\n\n\tif ( !is_array( $to ) ) {\n\t\t$to = explode( ',', $to );\n\t}\n\n\tif ( isset( $atts['subject'] ) ) {\n\t\t$subject = $atts['subject'];\n\t}\n\n\tif ( isset( $atts['message'] ) ) {\n\t\t$message = $atts['message'];\n\t}\n\n\tif ( isset( $atts['headers'] ) ) {\n\t\t$headers = $atts['headers'];\n\t}\n\n\tif ( isset( $atts['attachments'] ) ) {\n\t\t$attachments = $atts['attachments'];\n\t}\n\n\tif ( ! is_array( $attachments ) ) {\n\t\t$attachments = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $attachments ) );\n\t}\n\tglobal $phpmailer;\n\n\t// (Re)create it, if it's gone missing\n\tif ( ! ( $phpmailer instanceof PHPMailer ) ) {\n\t\trequire_once ABSPATH . WPINC . '/class-phpmailer.php';\n\t\trequire_once ABSPATH . WPINC . '/class-smtp.php';\n\t\t$phpmailer = new PHPMailer( true );\n\t}\n\n\t// Headers\n\t$cc = $bcc = $reply_to = array();\n\n\tif ( empty( $headers ) ) {\n\t\t$headers = array();\n\t} else {\n\t\tif ( !is_array( $headers ) ) {\n\t\t\t// Explode the headers out, so this function can take both\n\t\t\t// string headers and an array of headers.\n\t\t\t$tempheaders = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $headers ) );\n\t\t} else {\n\t\t\t$tempheaders = $headers;\n\t\t}\n\t\t$headers = array();\n\n\t\t// If it's actually got contents\n\t\tif ( !empty( $tempheaders ) ) {\n\t\t\t// Iterate through the raw headers\n\t\t\tforeach ( (array) $tempheaders as $header ) {\n\t\t\t\tif ( strpos($header, ':') === false ) {\n\t\t\t\t\tif ( false !== stripos( $header, 'boundary=' ) ) {\n\t\t\t\t\t\t$parts = preg_split('/boundary=/i', trim( $header ) );\n\t\t\t\t\t\t$boundary = trim( str_replace( array( \"'\", '\"' ), '', $parts[1] ) );\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Explode them out\n\t\t\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t\t\t// Cleanup crew\n\t\t\t\t$name    = trim( $name    );\n\t\t\t\t$content = trim( $content );\n\n\t\t\t\tswitch ( strtolower( $name ) ) {\n\t\t\t\t\t// Mainly for legacy -- process a From: header if it's there\n\t\t\t\t\tcase 'from':\n\t\t\t\t\t\t$bracket_pos = strpos( $content, '<' );\n\t\t\t\t\t\tif ( $bracket_pos !== false ) {\n\t\t\t\t\t\t\t// Text before the bracketed email is the \"From\" name.\n\t\t\t\t\t\t\tif ( $bracket_pos > 0 ) {\n\t\t\t\t\t\t\t\t$from_name = substr( $content, 0, $bracket_pos - 1 );\n\t\t\t\t\t\t\t\t$from_name = str_replace( '\"', '', $from_name );\n\t\t\t\t\t\t\t\t$from_name = trim( $from_name );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$from_email = substr( $content, $bracket_pos + 1 );\n\t\t\t\t\t\t\t$from_email = str_replace( '>', '', $from_email );\n\t\t\t\t\t\t\t$from_email = trim( $from_email );\n\n\t\t\t\t\t\t// Avoid setting an empty $from_email.\n\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t$from_email = trim( $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'content-type':\n\t\t\t\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\t\t\t\tlist( $type, $charset_content ) = explode( ';', $content );\n\t\t\t\t\t\t\t$content_type = trim( $type );\n\t\t\t\t\t\t\tif ( false !== stripos( $charset_content, 'charset=' ) ) {\n\t\t\t\t\t\t\t\t$charset = trim( str_replace( array( 'charset=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t} elseif ( false !== stripos( $charset_content, 'boundary=' ) ) {\n\t\t\t\t\t\t\t\t$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t$charset = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Avoid setting an empty $content_type.\n\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t$content_type = trim( $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t$cc = array_merge( (array) $cc, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t$bcc = array_merge( (array) $bcc, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'reply-to':\n\t\t\t\t\t\t$reply_to = array_merge( (array) $reply_to, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Add it to our grand headers array\n\t\t\t\t\t\t$headers[trim( $name )] = trim( $content );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Empty out the values that may be set\n\t$phpmailer->ClearAllRecipients();\n\t$phpmailer->ClearAttachments();\n\t$phpmailer->ClearCustomHeaders();\n\t$phpmailer->ClearReplyTos();\n\n\t// From email and name\n\t// If we don't have a name from the input headers\n\tif ( !isset( $from_name ) )\n\t\t$from_name = 'WordPress';\n\n\t/* If we don't have an email from the input headers default to wordpress@$sitename\n\t * Some hosts will block outgoing mail from this address if it doesn't exist but\n\t * there's no easy alternative. Defaulting to admin_email might appear to be another\n\t * option but some hosts may refuse to relay mail from an unknown domain. See\n\t * https://core.trac.wordpress.org/ticket/5007.\n\t */\n\n\tif ( !isset( $from_email ) ) {\n\t\t// Get the site domain and get rid of www.\n\t\t$sitename = strtolower( $_SERVER['SERVER_NAME'] );\n\t\tif ( substr( $sitename, 0, 4 ) == 'www.' ) {\n\t\t\t$sitename = substr( $sitename, 4 );\n\t\t}\n\n\t\t$from_email = 'wordpress@' . $sitename;\n\t}\n\n\t/**\n\t * Filters the email address to send from.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $from_email Email address to send from.\n\t */\n\t$from_email = apply_filters( 'wp_mail_from', $from_email );\n\n\t/**\n\t * Filters the name to associate with the \"from\" email address.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $from_name Name associated with the \"from\" email address.\n\t */\n\t$from_name = apply_filters( 'wp_mail_from_name', $from_name );\n\n\ttry {\n\t\t$phpmailer->setFrom( $from_email, $from_name, false );\n\t} catch ( phpmailerException $e ) {\n\t\t$mail_error_data = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\treturn false;\n\t}\n\n\t// Set mail's subject and body\n\t$phpmailer->Subject = $subject;\n\t$phpmailer->Body    = $message;\n\n\t// Set destination addresses, using appropriate methods for handling addresses\n\t$address_headers = compact( 'to', 'cc', 'bcc', 'reply_to' );\n\n\tforeach ( $address_headers as $address_header => $addresses ) {\n\t\tif ( empty( $addresses ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tforeach ( (array) $addresses as $address ) {\n\t\t\ttry {\n\t\t\t\t// Break $recipient into name and address parts if in the format \"Foo <bar@baz.com>\"\n\t\t\t\t$recipient_name = '';\n\n\t\t\t\tif ( preg_match( '/(.*)<(.+)>/', $address, $matches ) ) {\n\t\t\t\t\tif ( count( $matches ) == 3 ) {\n\t\t\t\t\t\t$recipient_name = $matches[1];\n\t\t\t\t\t\t$address        = $matches[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch ( $address_header ) {\n\t\t\t\t\tcase 'to':\n\t\t\t\t\t\t$phpmailer->addAddress( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t$phpmailer->addCc( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t$phpmailer->addBcc( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'reply_to':\n\t\t\t\t\t\t$phpmailer->addReplyTo( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set to use PHP's mail()\n\t$phpmailer->IsMail();\n\n\t// Set Content-Type and charset\n\t// If we don't have a content-type from the input headers\n\tif ( !isset( $content_type ) )\n\t\t$content_type = 'text/plain';\n\n\t/**\n\t * Filters the wp_mail() content type.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $content_type Default wp_mail() content type.\n\t */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\t$phpmailer->ContentType = $content_type;\n\n\t// Set whether it's plaintext, depending on $content_type\n\tif ( 'text/html' == $content_type )\n\t\t$phpmailer->IsHTML( true );\n\n\t// If we don't have a charset from the input headers\n\tif ( !isset( $charset ) )\n\t\t$charset = get_bloginfo( 'charset' );\n\n\t// Set the content-type and charset\n\n\t/**\n\t * Filters the default wp_mail() charset.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $charset Default email charset.\n\t */\n\t$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );\n\n\t// Set custom headers\n\tif ( !empty( $headers ) ) {\n\t\tforeach ( (array) $headers as $name => $content ) {\n\t\t\t$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );\n\t\t}\n\n\t\tif ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )\n\t\t\t$phpmailer->AddCustomHeader( sprintf( \"Content-Type: %s;\\n\\t boundary=\\\"%s\\\"\", $content_type, $boundary ) );\n\t}\n\n\tif ( !empty( $attachments ) ) {\n\t\tforeach ( $attachments as $attachment ) {\n\t\t\ttry {\n\t\t\t\t$phpmailer->AddAttachment($attachment);\n\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fires after PHPMailer is initialized.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param PHPMailer &$phpmailer The PHPMailer instance, passed by reference.\n\t */\n\tdo_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );\n\n\t// Send!\n\ttry {\n\t\treturn $phpmailer->send();\n\t} catch ( phpmailerException $e ) {\n\n\t\t$mail_error_data = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t/**\n\t\t * Fires after a phpmailerException is caught.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param WP_Error $error A WP_Error object with the phpmailerException message, and an array\n\t\t *                        containing the mail recipient, subject, message, headers, and attachments.\n\t\t */\n\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\treturn false;\n\t}\n}\nendif;\n\nif ( !function_exists('wp_authenticate') ) :\n/**\n * Authenticate a user, confirming the login credentials are valid.\n *\n * @since 2.5.0\n * @since 4.5.0 `$username` now accepts an email address.\n *\n * @param string $username User's username or email address.\n * @param string $password User's password.\n * @return WP_User|WP_Error WP_User object if the credentials are valid,\n *                          otherwise WP_Error.\n */\nfunction wp_authenticate($username, $password) {\n\t$username = sanitize_user($username);\n\t$password = trim($password);\n\n\t/**\n\t * Filters whether a set of user login credentials are valid.\n\t *\n\t * A WP_User object is returned if the credentials authenticate a user.\n\t * WP_Error or null otherwise.\n\t *\n\t * @since 2.8.0\n\t * @since 4.5.0 `$username` now accepts an email address.\n\t *\n\t * @param null|WP_User|WP_Error $user     WP_User if the user is authenticated.\n\t *                                        WP_Error or null otherwise.\n\t * @param string                $username Username or email address.\n\t * @param string                $password User password\n\t */\n\t$user = apply_filters( 'authenticate', null, $username, $password );\n\n\tif ( $user == null ) {\n\t\t// TODO what should the error message be? (Or would these even happen?)\n\t\t// Only needed if all authentication handlers fail to return anything.\n\t\t$user = new WP_Error( 'authentication_failed', __( '<strong>ERROR</strong>: Invalid username, email address or incorrect password.' ) );\n\t}\n\n\t$ignore_codes = array('empty_username', 'empty_password');\n\n\tif (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {\n\t\t/**\n\t\t * Fires after a user login has failed.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.5.0 The value of `$username` can now be an email address.\n\t\t *\n\t\t * @param string $username Username or email address.\n\t\t */\n\t\tdo_action( 'wp_login_failed', $username );\n\t}\n\n\treturn $user;\n}\nendif;\n\nif ( !function_exists('wp_logout') ) :\n/**\n * Log the current user out.\n *\n * @since 2.5.0\n */\nfunction wp_logout() {\n\twp_destroy_current_session();\n\twp_clear_auth_cookie();\n\n\t/**\n\t * Fires after a user is logged-out.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_logout' );\n}\nendif;\n\nif ( !function_exists('wp_validate_auth_cookie') ) :\n/**\n * Validates authentication cookie.\n *\n * The checks include making sure that the authentication cookie is set and\n * pulling in the contents (if $cookie is not used).\n *\n * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n * should be and compares the two.\n *\n * @since 2.5.0\n *\n * @global int $login_grace_period\n *\n * @param string $cookie Optional. If used, will validate contents instead of cookie's\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return false|int False if invalid cookie, User ID if valid.\n */\nfunction wp_validate_auth_cookie($cookie = '', $scheme = '') {\n\tif ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {\n\t\t/**\n\t\t * Fires if an authentication cookie is malformed.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param string $cookie Malformed auth cookie.\n\t\t * @param string $scheme Authentication scheme. Values include 'auth', 'secure_auth',\n\t\t *                       or 'logged_in'.\n\t\t */\n\t\tdo_action( 'auth_cookie_malformed', $cookie, $scheme );\n\t\treturn false;\n\t}\n\n\t$scheme = $cookie_elements['scheme'];\n\t$username = $cookie_elements['username'];\n\t$hmac = $cookie_elements['hmac'];\n\t$token = $cookie_elements['token'];\n\t$expired = $expiration = $cookie_elements['expiration'];\n\n\t// Allow a grace period for POST and Ajax requests\n\tif ( wp_doing_ajax() || 'POST' == $_SERVER['REQUEST_METHOD'] ) {\n\t\t$expired += HOUR_IN_SECONDS;\n\t}\n\n\t// Quick check to see if an honest cookie has expired\n\tif ( $expired < time() ) {\n\t\t/**\n\t\t * Fires once an authentication cookie has expired.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_expired', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$user = get_user_by('login', $username);\n\tif ( ! $user ) {\n\t\t/**\n\t\t * Fires if a bad username is entered in the user authentication process.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_bad_username', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$pass_frag = substr($user->user_pass, 8, 4);\n\n\t$key = wp_hash( $username . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t$hash = hash_hmac( $algo, $username . '|' . $expiration . '|' . $token, $key );\n\n\tif ( ! hash_equals( $hash, $hmac ) ) {\n\t\t/**\n\t\t * Fires if a bad authentication cookie hash is encountered.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_bad_hash', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$manager = WP_Session_Tokens::get_instance( $user->ID );\n\tif ( ! $manager->verify( $token ) ) {\n\t\tdo_action( 'auth_cookie_bad_session_token', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t// Ajax/POST grace period set above\n\tif ( $expiration < time() ) {\n\t\t$GLOBALS['login_grace_period'] = 1;\n\t}\n\n\t/**\n\t * Fires once an authentication cookie has been validated.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param array   $cookie_elements An array of data for the authentication cookie.\n\t * @param WP_User $user            User object.\n\t */\n\tdo_action( 'auth_cookie_valid', $cookie_elements, $user );\n\n\treturn $user->ID;\n}\nendif;\n\nif ( !function_exists('wp_generate_auth_cookie') ) :\n/**\n * Generate authentication cookie contents.\n *\n * @since 2.5.0\n *\n * @param int    $user_id    User ID\n * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n * @param string $scheme     Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @param string $token      User's session token to use for this cookie\n * @return string Authentication cookie contents. Empty string if user does not exist.\n */\nfunction wp_generate_auth_cookie( $user_id, $expiration, $scheme = 'auth', $token = '' ) {\n\t$user = get_userdata($user_id);\n\tif ( ! $user ) {\n\t\treturn '';\n\t}\n\n\tif ( ! $token ) {\n\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t$token = $manager->create( $expiration );\n\t}\n\n\t$pass_frag = substr($user->user_pass, 8, 4);\n\n\t$key = wp_hash( $user->user_login . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t$hash = hash_hmac( $algo, $user->user_login . '|' . $expiration . '|' . $token, $key );\n\n\t$cookie = $user->user_login . '|' . $expiration . '|' . $token . '|' . $hash;\n\n\t/**\n\t * Filters the authentication cookie.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $cookie     Authentication cookie.\n\t * @param int    $user_id    User ID.\n\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t * @param string $scheme     Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.\n\t * @param string $token      User's session token used.\n\t */\n\treturn apply_filters( 'auth_cookie', $cookie, $user_id, $expiration, $scheme, $token );\n}\nendif;\n\nif ( !function_exists('wp_parse_auth_cookie') ) :\n/**\n * Parse a cookie into its components\n *\n * @since 2.7.0\n *\n * @param string $cookie\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return array|false Authentication cookie components\n */\nfunction wp_parse_auth_cookie($cookie = '', $scheme = '') {\n\tif ( empty($cookie) ) {\n\t\tswitch ($scheme){\n\t\t\tcase 'auth':\n\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\tbreak;\n\t\t\tcase 'secure_auth':\n\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\tbreak;\n\t\t\tcase \"logged_in\":\n\t\t\t\t$cookie_name = LOGGED_IN_COOKIE;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ( is_ssl() ) {\n\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\t$scheme = 'secure_auth';\n\t\t\t\t} else {\n\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\t$scheme = 'auth';\n\t\t\t\t}\n\t    }\n\n\t\tif ( empty($_COOKIE[$cookie_name]) )\n\t\t\treturn false;\n\t\t$cookie = $_COOKIE[$cookie_name];\n\t}\n\n\t$cookie_elements = explode('|', $cookie);\n\tif ( count( $cookie_elements ) !== 4 ) {\n\t\treturn false;\n\t}\n\n\tlist( $username, $expiration, $token, $hmac ) = $cookie_elements;\n\n\treturn compact( 'username', 'expiration', 'token', 'hmac', 'scheme' );\n}\nendif;\n\nif ( !function_exists('wp_set_auth_cookie') ) :\n/**\n * Log in a user by setting authentication cookies.\n *\n * The $remember parameter increases the time that the cookie will be kept. The\n * default the cookie is kept without remembering is two days. When $remember is\n * set, the cookies will be kept for 14 days or two weeks.\n *\n * @since 2.5.0\n * @since 4.3.0 Added the `$token` parameter.\n *\n * @param int    $user_id  User ID\n * @param bool   $remember Whether to remember the user\n * @param mixed  $secure   Whether the admin cookies should only be sent over HTTPS.\n *                         Default is_ssl().\n * @param string $token    Optional. User's session token to use for this cookie.\n */\nfunction wp_set_auth_cookie( $user_id, $remember = false, $secure = '', $token = '' ) {\n\tif ( $remember ) {\n\t\t/**\n\t\t * Filters the duration of the authentication cookie expiration period.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param int  $length   Duration of the expiration period in seconds.\n\t\t * @param int  $user_id  User ID.\n\t\t * @param bool $remember Whether to remember the user login. Default false.\n\t\t */\n\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 14 * DAY_IN_SECONDS, $user_id, $remember );\n\n\t\t/*\n\t\t * Ensure the browser will continue to send the cookie after the expiration time is reached.\n\t\t * Needed for the login grace period in wp_validate_auth_cookie().\n\t\t */\n\t\t$expire = $expiration + ( 12 * HOUR_IN_SECONDS );\n\t} else {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, $remember );\n\t\t$expire = 0;\n\t}\n\n\tif ( '' === $secure ) {\n\t\t$secure = is_ssl();\n\t}\n\n\t// Front-end cookie is secure when the auth cookie is secure and the site's home URL is forced HTTPS.\n\t$secure_logged_in_cookie = $secure && 'https' === parse_url( get_option( 'home' ), PHP_URL_SCHEME );\n\n\t/**\n\t * Filters whether the connection is secure.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure  Whether the connection is secure.\n\t * @param int  $user_id User ID.\n\t */\n\t$secure = apply_filters( 'secure_auth_cookie', $secure, $user_id );\n\n\t/**\n\t * Filters whether to use a secure cookie when logged-in.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure_logged_in_cookie Whether to use a secure cookie when logged-in.\n\t * @param int  $user_id                 User ID.\n\t * @param bool $secure                  Whether the connection is secure.\n\t */\n\t$secure_logged_in_cookie = apply_filters( 'secure_logged_in_cookie', $secure_logged_in_cookie, $user_id, $secure );\n\n\tif ( $secure ) {\n\t\t$auth_cookie_name = SECURE_AUTH_COOKIE;\n\t\t$scheme = 'secure_auth';\n\t} else {\n\t\t$auth_cookie_name = AUTH_COOKIE;\n\t\t$scheme = 'auth';\n\t}\n\n\tif ( '' === $token ) {\n\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t$token   = $manager->create( $expiration );\n\t}\n\n\t$auth_cookie = wp_generate_auth_cookie( $user_id, $expiration, $scheme, $token );\n\t$logged_in_cookie = wp_generate_auth_cookie( $user_id, $expiration, 'logged_in', $token );\n\n\t/**\n\t * Fires immediately before the authentication cookie is set.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $auth_cookie Authentication cookie.\n\t * @param int    $expire      The time the login grace period expires as a UNIX timestamp.\n\t *                            Default is 12 hours past the cookie's expiration time.\n\t * @param int    $expiration  The time when the authentication cookie expires as a UNIX timestamp.\n\t *                            Default is 14 days from now.\n\t * @param int    $user_id     User ID.\n\t * @param string $scheme      Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'.\n\t */\n\tdo_action( 'set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme );\n\n\t/**\n\t * Fires immediately before the logged-in authentication cookie is set.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $logged_in_cookie The logged-in cookie.\n\t * @param int    $expire           The time the login grace period expires as a UNIX timestamp.\n\t *                                 Default is 12 hours past the cookie's expiration time.\n\t * @param int    $expiration       The time when the logged-in authentication cookie expires as a UNIX timestamp.\n\t *                                 Default is 14 days from now.\n\t * @param int    $user_id          User ID.\n\t * @param string $scheme           Authentication scheme. Default 'logged_in'.\n\t */\n\tdo_action( 'set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in' );\n\n\tsetcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);\n\tsetcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);\n\tsetcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true);\n\tif ( COOKIEPATH != SITECOOKIEPATH )\n\t\tsetcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true);\n}\nendif;\n\nif ( !function_exists('wp_clear_auth_cookie') ) :\n/**\n * Removes all of the cookies associated with authentication.\n *\n * @since 2.5.0\n */\nfunction wp_clear_auth_cookie() {\n\t/**\n\t * Fires just before the authentication cookies are cleared.\n\t *\n\t * @since 2.7.0\n\t */\n\tdo_action( 'clear_auth_cookie' );\n\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH,   COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH,   COOKIE_DOMAIN );\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\tsetcookie( LOGGED_IN_COOKIE,   ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,          COOKIE_DOMAIN );\n\tsetcookie( LOGGED_IN_COOKIE,   ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH,      COOKIE_DOMAIN );\n\n\t// Old cookies\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t// Even older cookies\n\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n}\nendif;\n\nif ( !function_exists('is_user_logged_in') ) :\n/**\n * Checks if the current visitor is a logged in user.\n *\n * @since 2.0.0\n *\n * @return bool True if user is logged in, false if not logged in.\n */\nfunction is_user_logged_in() {\n\t$user = wp_get_current_user();\n\n\treturn $user->exists();\n}\nendif;\n\nif ( !function_exists('auth_redirect') ) :\n/**\n * Checks if a user is logged in, if not it redirects them to the login page.\n *\n * @since 1.5.0\n */\nfunction auth_redirect() {\n\t// Checks if a user is logged in, if not redirects them to the login page\n\n\t$secure = ( is_ssl() || force_ssl_admin() );\n\n\t/**\n\t * Filters whether to use a secure authentication redirect.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure Whether to use a secure authentication redirect. Default false.\n\t */\n\t$secure = apply_filters( 'secure_auth_redirect', $secure );\n\n\t// If https is required and request is http, redirect\n\tif ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {\n\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\texit();\n\t\t} else {\n\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\texit();\n\t\t}\n\t}\n\n\t/**\n\t * Filters the authentication redirect scheme.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $scheme Authentication redirect scheme. Default empty.\n\t */\n\t$scheme = apply_filters( 'auth_redirect_scheme', '' );\n\n\tif ( $user_id = wp_validate_auth_cookie( '',  $scheme) ) {\n\t\t/**\n\t\t * Fires before the authentication redirect.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param int $user_id User ID.\n\t\t */\n\t\tdo_action( 'auth_redirect', $user_id );\n\n\t\t// If the user wants ssl but the session is not ssl, redirect.\n\t\tif ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {\n\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\treturn;  // The cookie is good so we're done\n\t}\n\n\t// The cookie is no good so force login\n\tnocache_headers();\n\n\t$redirect = ( strpos( $_SERVER['REQUEST_URI'], '/options.php' ) && wp_get_referer() ) ? wp_get_referer() : set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\n\t$login_url = wp_login_url($redirect, true);\n\n\twp_redirect($login_url);\n\texit();\n}\nendif;\n\nif ( !function_exists('check_admin_referer') ) :\n/**\n * Makes sure that a user was referred from another admin page.\n *\n * To avoid security exploits.\n *\n * @since 1.2.0\n *\n * @param int|string $action    Action nonce.\n * @param string     $query_arg Optional. Key to check for nonce in `$_REQUEST` (since 2.5).\n *                              Default '_wpnonce'.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction check_admin_referer( $action = -1, $query_arg = '_wpnonce' ) {\n\tif ( -1 == $action )\n\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '3.2.0' );\n\n\t$adminurl = strtolower(admin_url());\n\t$referer = strtolower(wp_get_referer());\n\t$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;\n\n\t/**\n\t * Fires once the admin request has been validated or not.\n\t *\n\t * @since 1.5.1\n\t *\n\t * @param string    $action The nonce action.\n\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t */\n\tdo_action( 'check_admin_referer', $action, $result );\n\n\tif ( ! $result && ! ( -1 == $action && strpos( $referer, $adminurl ) === 0 ) ) {\n\t\twp_nonce_ays( $action );\n\t\tdie();\n\t}\n\n\treturn $result;\n}\nendif;\n\nif ( !function_exists('check_ajax_referer') ) :\n/**\n * Verifies the Ajax request to prevent processing requests external of the blog.\n *\n * @since 2.0.3\n *\n * @param int|string   $action    Action nonce.\n * @param false|string $query_arg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,\n *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'\n *                                (in that order). Default false.\n * @param bool         $die       Optional. Whether to die early when the nonce cannot be verified.\n *                                Default true.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {\n\tif ( -1 == $action ) {\n\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '4.7' );\n\t}\n\n\t$nonce = '';\n\n\tif ( $query_arg && isset( $_REQUEST[ $query_arg ] ) )\n\t\t$nonce = $_REQUEST[ $query_arg ];\n\telseif ( isset( $_REQUEST['_ajax_nonce'] ) )\n\t\t$nonce = $_REQUEST['_ajax_nonce'];\n\telseif ( isset( $_REQUEST['_wpnonce'] ) )\n\t\t$nonce = $_REQUEST['_wpnonce'];\n\n\t$result = wp_verify_nonce( $nonce, $action );\n\n\t/**\n\t * Fires once the Ajax request has been validated or not.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string    $action The Ajax nonce action.\n\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t */\n\tdo_action( 'check_ajax_referer', $action, $result );\n\n\tif ( $die && false === $result ) {\n\t\tif ( wp_doing_ajax() ) {\n\t\t\twp_die( -1, 403 );\n\t\t} else {\n\t\t\tdie( '-1' );\n\t\t}\n\t}\n\n\treturn $result;\n}\nendif;\n\nif ( !function_exists('wp_redirect') ) :\n/**\n * Redirects to another page.\n *\n * Note: wp_redirect() does not exit automatically, and should almost always be\n * followed by a call to `exit;`:\n *\n *     wp_redirect( $url );\n *     exit;\n *\n * Exiting can also be selectively manipulated by using wp_redirect() as a conditional\n * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} hooks:\n *\n *     if ( wp_redirect( $url ) ) {\n *         exit;\n *     }\n *\n * @since 1.5.1\n *\n * @global bool $is_IIS\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n * @return bool False if $location is not provided, true otherwise.\n */\nfunction wp_redirect($location, $status = 302) {\n\tglobal $is_IIS;\n\n\t/**\n\t * Filters the redirect location.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $location The path to redirect to.\n\t * @param int    $status   Status code to use.\n\t */\n\t$location = apply_filters( 'wp_redirect', $location, $status );\n\n\t/**\n\t * Filters the redirect status code.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param int    $status   Status code to use.\n\t * @param string $location The path to redirect to.\n\t */\n\t$status = apply_filters( 'wp_redirect_status', $status, $location );\n\n\tif ( ! $location )\n\t\treturn false;\n\n\t$location = wp_sanitize_redirect($location);\n\n\tif ( !$is_IIS && PHP_SAPI != 'cgi-fcgi' )\n\t\tstatus_header($status); // This causes problems on IIS and some FastCGI setups\n\n\theader(\"Location: $location\", true, $status);\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_sanitize_redirect') ) :\n/**\n * Sanitizes a URL for use in a redirect.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @return string Redirect-sanitized URL.\n **/\nfunction wp_sanitize_redirect($location) {\n\t$regex = '/\n\t\t(\n\t\t\t(?: [\\xC2-\\xDF][\\x80-\\xBF]        # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]    # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}\n\t\t\t|   \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t|   [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t|   \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t){1,40}                              # ...one or more times\n\t\t)/x';\n\t$location = preg_replace_callback( $regex, '_wp_sanitize_utf8_in_redirect', $location );\n\t$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!*\\[\\]()@]|i', '', $location);\n\t$location = wp_kses_no_null($location);\n\n\t// remove %0d and %0a from location\n\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\treturn _deep_replace( $strip, $location );\n}\n\n/**\n * URL encode UTF-8 characters in a URL.\n *\n * @ignore\n * @since 4.2.0\n * @access private\n *\n * @see wp_sanitize_redirect()\n *\n * @param array $matches RegEx matches against the redirect location.\n * @return string URL-encoded version of the first RegEx match.\n */\nfunction _wp_sanitize_utf8_in_redirect( $matches ) {\n\treturn urlencode( $matches[0] );\n}\nendif;\n\nif ( !function_exists('wp_safe_redirect') ) :\n/**\n * Performs a safe (local) redirect, using wp_redirect().\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl\n * instead. This prevents malicious redirects which redirect to another host,\n * but only used in a few places.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n */\nfunction wp_safe_redirect($location, $status = 302) {\n\n\t// Need to look at the URL the way it will end up in wp_redirect()\n\t$location = wp_sanitize_redirect($location);\n\n\t/**\n\t * Filters the redirect fallback URL for when the provided redirect is not safe (local).\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $fallback_url The fallback URL to use by default.\n\t * @param int    $status       The redirect status.\n\t */\n\t$location = wp_validate_redirect( $location, apply_filters( 'wp_safe_redirect_fallback', admin_url(), $status ) );\n\n\twp_redirect($location, $status);\n}\nendif;\n\nif ( !function_exists('wp_validate_redirect') ) :\n/**\n * Validates a URL for use in a redirect.\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect is to $default supplied\n *\n * @since 2.8.1\n *\n * @param string $location The redirect to validate\n * @param string $default  The value to return if $location is not allowed\n * @return string redirect-sanitized URL\n **/\nfunction wp_validate_redirect($location, $default = '') {\n\t$location = trim( $location );\n\t// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'\n\tif ( substr($location, 0, 2) == '//' )\n\t\t$location = 'http:' . $location;\n\n\t// In php 5 parse_url may fail if the URL query part contains http://, bug #38143\n\t$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;\n\n\t// @-operator is used to prevent possible warnings in PHP < 5.3.3.\n\t$lp = @parse_url($test);\n\n\t// Give up if malformed URL\n\tif ( false === $lp )\n\t\treturn $default;\n\n\t// Allow only http and https schemes. No data:, etc.\n\tif ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )\n\t\treturn $default;\n\n\t// Reject if certain components are set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.\n\tif ( ! isset( $lp['host'] ) && ( isset( $lp['scheme'] ) || isset( $lp['user'] ) || isset( $lp['pass'] ) || isset( $lp['port'] ) ) ) {\n\t\treturn $default;\n\t}\n\n\t// Reject malformed components parse_url() can return on odd inputs.\n\tforeach ( array( 'user', 'pass', 'host' ) as $component ) {\n\t\tif ( isset( $lp[ $component ] ) && strpbrk( $lp[ $component ], ':/?#@' ) ) {\n\t\t\treturn $default;\n\t\t}\n\t}\n\n\t$wpp = parse_url(home_url());\n\n\t/**\n\t * Filters the whitelist of hosts to redirect to.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array       $hosts An array of allowed hosts.\n\t * @param bool|string $host  The parsed host; empty if not isset.\n\t */\n\t$allowed_hosts = (array) apply_filters( 'allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '' );\n\n\tif ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )\n\t\t$location = $default;\n\n\treturn $location;\n}\nendif;\n\nif ( ! function_exists('wp_notify_postauthor') ) :\n/**\n * Notify an author (and/or others) of a comment/trackback/pingback on a post.\n *\n * @since 1.0.0\n *\n * @param int|WP_Comment  $comment_id Comment ID or WP_Comment object.\n * @param string          $deprecated Not used\n * @return bool True on completion. False if no email addresses were specified.\n */\nfunction wp_notify_postauthor( $comment_id, $deprecated = null ) {\n\tif ( null !== $deprecated ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.8.0' );\n\t}\n\n\t$comment = get_comment( $comment_id );\n\tif ( empty( $comment ) || empty( $comment->comment_post_ID ) )\n\t\treturn false;\n\n\t$post    = get_post( $comment->comment_post_ID );\n\t$author  = get_userdata( $post->post_author );\n\n\t// Who to notify? By default, just the post author, but others can be added.\n\t$emails = array();\n\tif ( $author ) {\n\t\t$emails[] = $author->user_email;\n\t}\n\n\t/**\n\t * Filters the list of email addresses to receive a comment notification.\n\t *\n\t * By default, only post authors are notified of comments. This filter allows\n\t * others to be added.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param array $emails     An array of email addresses to receive a comment notification.\n\t * @param int   $comment_id The comment ID.\n\t */\n\t$emails = apply_filters( 'comment_notification_recipients', $emails, $comment->comment_ID );\n\t$emails = array_filter( $emails );\n\n\t// If there are no addresses to send the comment to, bail.\n\tif ( ! count( $emails ) ) {\n\t\treturn false;\n\t}\n\n\t// Facilitate unsetting below without knowing the keys.\n\t$emails = array_flip( $emails );\n\n\t/**\n\t * Filters whether to notify comment authors of their comments on their own posts.\n\t *\n\t * By default, comment authors aren't notified of their comments on their own\n\t * posts. This filter allows you to override that.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @param bool $notify     Whether to notify the post author of their own comment.\n\t *                         Default false.\n\t * @param int  $comment_id The comment ID.\n\t */\n\t$notify_author = apply_filters( 'comment_notification_notify_author', false, $comment->comment_ID );\n\n\t// The comment was left by the author\n\tif ( $author && ! $notify_author && $comment->user_id == $post->post_author ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// The author moderated a comment on their own post\n\tif ( $author && ! $notify_author && $post->post_author == get_current_user_id() ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// The post author is no longer a member of the blog\n\tif ( $author && ! $notify_author && ! user_can( $post->post_author, 'read_post', $post->ID ) ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// If there's no email to send the comment to, bail, otherwise flip array back around for use below\n\tif ( ! count( $emails ) ) {\n\t\treturn false;\n\t} else {\n\t\t$emails = array_flip( $emails );\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\tswitch ( $comment->comment_type ) {\n\t\tcase 'trackback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __( 'New trackback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __('Website: %1$s (IP: %2$s, %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all trackbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Trackback: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t\tcase 'pingback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __( 'New pingback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __('Website: %1$s (IP: %2$s, %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all pingbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Pingback: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t\tdefault: // Comments\n\t\t\t$notify_message  = sprintf( __( 'New comment on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: comment author, 2: author IP, 3: author domain */\n\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __('Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all comments on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Comment: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t}\n\t$notify_message .= get_permalink($comment->comment_post_ID) . \"#comments\\r\\n\\r\\n\";\n\t$notify_message .= sprintf( __('Permalink: %s'), get_comment_link( $comment ) ) . \"\\r\\n\";\n\n\tif ( user_can( $post->post_author, 'edit_comment', $comment->comment_ID ) ) {\n\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t} else {\n\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t}\n\n\t$wp_email = 'wordpress@' . preg_replace('#^www\\.#', '', strtolower($_SERVER['SERVER_NAME']));\n\n\tif ( '' == $comment->comment_author ) {\n\t\t$from = \"From: \\\"$blogname\\\" <$wp_email>\";\n\t\tif ( '' != $comment->comment_author_email )\n\t\t\t$reply_to = \"Reply-To: $comment->comment_author_email\";\n\t} else {\n\t\t$from = \"From: \\\"$comment->comment_author\\\" <$wp_email>\";\n\t\tif ( '' != $comment->comment_author_email )\n\t\t\t$reply_to = \"Reply-To: \\\"$comment->comment_author_email\\\" <$comment->comment_author_email>\";\n\t}\n\n\t$message_headers = \"$from\\n\"\n\t\t. \"Content-Type: text/plain; charset=\\\"\" . get_option('blog_charset') . \"\\\"\\n\";\n\n\tif ( isset($reply_to) )\n\t\t$message_headers .= $reply_to . \"\\n\";\n\n\t/**\n\t * Filters the comment notification email text.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $notify_message The comment notification email text.\n\t * @param int    $comment_id     Comment ID.\n\t */\n\t$notify_message = apply_filters( 'comment_notification_text', $notify_message, $comment->comment_ID );\n\n\t/**\n\t * Filters the comment notification email subject.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $subject    The comment notification email subject.\n\t * @param int    $comment_id Comment ID.\n\t */\n\t$subject = apply_filters( 'comment_notification_subject', $subject, $comment->comment_ID );\n\n\t/**\n\t * Filters the comment notification email headers.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $message_headers Headers for the comment notification email.\n\t * @param int    $comment_id      Comment ID.\n\t */\n\t$message_headers = apply_filters( 'comment_notification_headers', $message_headers, $comment->comment_ID );\n\n\tforeach ( $emails as $email ) {\n\t\t@wp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t}\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_notify_moderator') ) :\n/**\n * Notifies the moderator of the site about a new comment that is awaiting approval.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator\n * should be notified, overriding the site setting.\n *\n * @param int $comment_id Comment ID.\n * @return true Always returns true.\n */\nfunction wp_notify_moderator($comment_id) {\n\tglobal $wpdb;\n\n\t$maybe_notify = get_option( 'moderation_notify' );\n\n\t/**\n\t * Filters whether to send the site moderator email notifications, overriding the site setting.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $maybe_notify Whether to notify blog moderator.\n\t * @param int  $comment_ID   The id of the comment for the notification.\n\t */\n\t$maybe_notify = apply_filters( 'notify_moderator', $maybe_notify, $comment_id );\n\n\tif ( ! $maybe_notify ) {\n\t\treturn true;\n\t}\n\n\t$comment = get_comment($comment_id);\n\t$post = get_post($comment->comment_post_ID);\n\t$user = get_userdata( $post->post_author );\n\t// Send to the administration and to the post author if the author can modify the comment.\n\t$emails = array( get_option( 'admin_email' ) );\n\tif ( $user && user_can( $user->ID, 'edit_comment', $comment_id ) && ! empty( $user->user_email ) ) {\n\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) )\n\t\t\t$emails[] = $user->user_email;\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);\n\t$comments_waiting = $wpdb->get_var(\"SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'\");\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\tswitch ( $comment->comment_type ) {\n\t\tcase 'trackback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new trackback on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= __('Trackback excerpt: ') . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t\tcase 'pingback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new pingback on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= __('Pingback excerpt: ') . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t\tdefault: // Comments\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new comment on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Comment author name, 2: comment author's IP, 3: comment author IP's hostname */\n\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Comment text */\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t}\n\n\t/* translators: Comment moderation. 1: Comment action URL */\n\t$notify_message .= sprintf( __( 'Approve it: %s' ), admin_url( \"comment.php?action=approve&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\tif ( EMPTY_TRASH_DAYS ) {\n\t\t/* translators: Comment moderation. 1: Comment action URL */\n\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t} else {\n\t\t/* translators: Comment moderation. 1: Comment action URL */\n\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t}\n\n\t/* translators: Comment moderation. 1: Comment action URL */\n\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t/* translators: Comment moderation. 1: Number of comments awaiting approval */\n\t$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:',\n \t\t'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . \"\\r\\n\";\n\t$notify_message .= admin_url( \"edit-comments.php?comment_status=moderated#wpbody-content\" ) . \"\\r\\n\";\n\n\t/* translators: Comment moderation notification email subject. 1: Site name, 2: Post title */\n\t$subject = sprintf( __('[%1$s] Please moderate: \"%2$s\"'), $blogname, $post->post_title );\n\t$message_headers = '';\n\n\t/**\n\t * Filters the list of recipients for comment moderation emails.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param array $emails     List of email addresses to notify for comment moderation.\n\t * @param int   $comment_id Comment ID.\n\t */\n\t$emails = apply_filters( 'comment_moderation_recipients', $emails, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email text.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $notify_message Text of the comment moderation email.\n\t * @param int    $comment_id     Comment ID.\n\t */\n\t$notify_message = apply_filters( 'comment_moderation_text', $notify_message, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email subject.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $subject    Subject of the comment moderation email.\n\t * @param int    $comment_id Comment ID.\n\t */\n\t$subject = apply_filters( 'comment_moderation_subject', $subject, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email headers.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $message_headers Headers for the comment moderation email.\n\t * @param int    $comment_id      Comment ID.\n\t */\n\t$message_headers = apply_filters( 'comment_moderation_headers', $message_headers, $comment_id );\n\n\tforeach ( $emails as $email ) {\n\t\t@wp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t}\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_password_change_notification') ) :\n/**\n * Notify the blog admin of a user changing password, normally via email.\n *\n * @since 2.7.0\n *\n * @param WP_User $user User object.\n */\nfunction wp_password_change_notification( $user ) {\n\t// send a copy of password change notification to the admin\n\t// but check to see if it's the admin whose password we're changing, and skip this\n\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t/* translators: %s: user name */\n\t\t$message = sprintf( __( 'Password changed for user: %s' ), $user->user_login ) . \"\\r\\n\";\n\t\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t\t// we want to reverse this for the plain text arena of emails.\n\t\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t\t/* translators: %s: site title */\n\t\twp_mail( get_option( 'admin_email' ), sprintf( __( '[%s] Password Changed' ), $blogname ), $message );\n\t}\n}\nendif;\n\nif ( !function_exists('wp_new_user_notification') ) :\n/**\n * Email login credentials to a newly-registered user.\n *\n * A new user registration notification is also sent to admin email.\n *\n * @since 2.0.0\n * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.\n * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.\n * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.\n *\n * @global wpdb         $wpdb      WordPress database object for queries.\n * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.\n *\n * @param int    $user_id    User ID.\n * @param null   $deprecated Not used (argument deprecated).\n * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty\n *                           string (admin only), 'user', or 'both' (admin and user). Default empty.\n */\nfunction wp_new_user_notification( $user_id, $deprecated = null, $notify = '' ) {\n\tif ( $deprecated !== null ) {\n\t\t_deprecated_argument( __FUNCTION__, '4.3.1' );\n\t}\n\n\tglobal $wpdb, $wp_hasher;\n\t$user = get_userdata( $user_id );\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\n\tif ( 'user' !== $notify ) {\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\t\t$message  = sprintf( __( 'New user registration on your site %s:' ), $blogname ) . \"\\r\\n\\r\\n\";\n\t\t$message .= sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t$message .= sprintf( __( 'Email: %s' ), $user->user_email ) . \"\\r\\n\";\n\n\t\t@wp_mail( get_option( 'admin_email' ), sprintf( __( '[%s] New User Registration' ), $blogname ), $message );\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\t}\n\n\t// `$deprecated was pre-4.3 `$plaintext_pass`. An empty `$plaintext_pass` didn't sent a user notification.\n\tif ( 'admin' === $notify || ( empty( $deprecated ) && empty( $notify ) ) ) {\n\t\treturn;\n\t}\n\n\t// Generate something random for a password reset key.\n\t$key = wp_generate_password( 20, false );\n\n\t/** This action is documented in wp-login.php */\n\tdo_action( 'retrieve_password_key', $user->user_login, $key );\n\n\t// Now insert the key, hashed, into the DB.\n\tif ( empty( $wp_hasher ) ) {\n\t\t$wp_hasher = new PasswordHash( 8, true );\n\t}\n\t$hashed = time() . ':' . $wp_hasher->HashPassword( $key );\n\t$wpdb->update( $wpdb->users, array( 'user_activation_key' => $hashed ), array( 'user_login' => $user->user_login ) );\n\n\t$switched_locale = switch_to_locale( get_user_locale( $user ) );\n\n\t$message = sprintf(__('Username: %s'), $user->user_login) . \"\\r\\n\\r\\n\";\n\t$message .= __('To set your password, visit the following address:') . \"\\r\\n\\r\\n\";\n\t$message .= '<' . network_site_url(\"wp-login.php?action=rp&key=$key&login=\" . rawurlencode($user->user_login), 'login') . \">\\r\\n\\r\\n\";\n\n\t$message .= wp_login_url() . \"\\r\\n\";\n\n\twp_mail($user->user_email, sprintf(__('[%s] Your username and password info'), $blogname), $message);\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n}\nendif;\n\nif ( !function_exists('wp_nonce_tick') ) :\n/**\n * Get the time-dependent variable for nonce creation.\n *\n * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n * updated, e.g. by autosave.\n *\n * @since 2.5.0\n *\n * @return float Float value rounded up to the next highest integer.\n */\nfunction wp_nonce_tick() {\n\t/**\n\t * Filters the lifespan of nonces in seconds.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int $lifespan Lifespan of nonces in seconds. Default 86,400 seconds, or one day.\n\t */\n\t$nonce_life = apply_filters( 'nonce_life', DAY_IN_SECONDS );\n\n\treturn ceil(time() / ( $nonce_life / 2 ));\n}\nendif;\n\nif ( !function_exists('wp_verify_nonce') ) :\n/**\n * Verify that correct nonce was used with time limit.\n *\n * The user is given an amount of time to use the token, so therefore, since the\n * UID and $action remain the same, the independent variable is the time.\n *\n * @since 2.0.3\n *\n * @param string     $nonce  Nonce that was used in the form to verify\n * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction wp_verify_nonce( $nonce, $action = -1 ) {\n\t$nonce = (string) $nonce;\n\t$user = wp_get_current_user();\n\t$uid = (int) $user->ID;\n\tif ( ! $uid ) {\n\t\t/**\n\t\t * Filters whether the user who generated the nonce is logged out.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param int    $uid    ID of the nonce-owning user.\n\t\t * @param string $action The nonce action.\n\t\t */\n\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t}\n\n\tif ( empty( $nonce ) ) {\n\t\treturn false;\n\t}\n\n\t$token = wp_get_session_token();\n\t$i = wp_nonce_tick();\n\n\t// Nonce generated 0-12 hours ago\n\t$expected = substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce'), -12, 10 );\n\tif ( hash_equals( $expected, $nonce ) ) {\n\t\treturn 1;\n\t}\n\n\t// Nonce generated 12-24 hours ago\n\t$expected = substr( wp_hash( ( $i - 1 ) . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\tif ( hash_equals( $expected, $nonce ) ) {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * Fires when nonce verification fails.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string     $nonce  The invalid nonce.\n\t * @param string|int $action The nonce action.\n\t * @param WP_User    $user   The current user object.\n\t * @param string     $token  The user's session token.\n\t */\n\tdo_action( 'wp_verify_nonce_failed', $nonce, $action, $user, $token );\n\n\t// Invalid nonce\n\treturn false;\n}\nendif;\n\nif ( !function_exists('wp_create_nonce') ) :\n/**\n * Creates a cryptographic token tied to a specific action, user, user session,\n * and window of time.\n *\n * @since 2.0.3\n * @since 4.0.0 Session tokens were integrated with nonce creation\n *\n * @param string|int $action Scalar value to add context to the nonce.\n * @return string The token.\n */\nfunction wp_create_nonce($action = -1) {\n\t$user = wp_get_current_user();\n\t$uid = (int) $user->ID;\n\tif ( ! $uid ) {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t}\n\n\t$token = wp_get_session_token();\n\t$i = wp_nonce_tick();\n\n\treturn substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n}\nendif;\n\nif ( !function_exists('wp_salt') ) :\n/**\n * Get salt to add to hashes.\n *\n * Salts are created using secret keys. Secret keys are located in two places:\n * in the database and in the wp-config.php file. The secret key in the database\n * is randomly generated and will be appended to the secret keys in wp-config.php.\n *\n * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n * security. Below is an example of how the secret key constants are defined.\n * Do not paste this example directly into wp-config.php. Instead, have a\n * {@link https://api.wordpress.org/secret-key/1.1/salt/ secret key created} just\n * for you.\n *\n *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%/U^O~');\n *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n *\n * Salting passwords helps against tools which has stored hashed values of\n * common dictionary strings. The added values makes it harder to crack.\n *\n * @since 2.5.0\n *\n * @link https://api.wordpress.org/secret-key/1.1/salt/ Create secrets for wp-config.php\n *\n * @staticvar array $cached_salts\n * @staticvar array $duplicated_keys\n *\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Salt value\n */\nfunction wp_salt( $scheme = 'auth' ) {\n\tstatic $cached_salts = array();\n\tif ( isset( $cached_salts[ $scheme ] ) ) {\n\t\t/**\n\t\t * Filters the WordPress salt.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $cached_salt Cached salt for the given scheme.\n\t\t * @param string $scheme      Authentication scheme. Values include 'auth',\n\t\t *                            'secure_auth', 'logged_in', and 'nonce'.\n\t\t */\n\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t}\n\n\tstatic $duplicated_keys;\n\tif ( null === $duplicated_keys ) {\n\t\t$duplicated_keys = array( 'put your unique phrase here' => true );\n\t\tforeach ( array( 'AUTH', 'SECURE_AUTH', 'LOGGED_IN', 'NONCE', 'SECRET' ) as $first ) {\n\t\t\tforeach ( array( 'KEY', 'SALT' ) as $second ) {\n\t\t\t\tif ( ! defined( \"{$first}_{$second}\" ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$value = constant( \"{$first}_{$second}\" );\n\t\t\t\t$duplicated_keys[ $value ] = isset( $duplicated_keys[ $value ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t$values = array(\n\t\t'key' => '',\n\t\t'salt' => ''\n\t);\n\tif ( defined( 'SECRET_KEY' ) && SECRET_KEY && empty( $duplicated_keys[ SECRET_KEY ] ) ) {\n\t\t$values['key'] = SECRET_KEY;\n\t}\n\tif ( 'auth' == $scheme && defined( 'SECRET_SALT' ) && SECRET_SALT && empty( $duplicated_keys[ SECRET_SALT ] ) ) {\n\t\t$values['salt'] = SECRET_SALT;\n\t}\n\n\tif ( in_array( $scheme, array( 'auth', 'secure_auth', 'logged_in', 'nonce' ) ) ) {\n\t\tforeach ( array( 'key', 'salt' ) as $type ) {\n\t\t\t$const = strtoupper( \"{$scheme}_{$type}\" );\n\t\t\tif ( defined( $const ) && constant( $const ) && empty( $duplicated_keys[ constant( $const ) ] ) ) {\n\t\t\t\t$values[ $type ] = constant( $const );\n\t\t\t} elseif ( ! $values[ $type ] ) {\n\t\t\t\t$values[ $type ] = get_site_option( \"{$scheme}_{$type}\" );\n\t\t\t\tif ( ! $values[ $type ] ) {\n\t\t\t\t\t$values[ $type ] = wp_generate_password( 64, true, true );\n\t\t\t\t\tupdate_site_option( \"{$scheme}_{$type}\", $values[ $type ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( ! $values['key'] ) {\n\t\t\t$values['key'] = get_site_option( 'secret_key' );\n\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t$values['key'] = wp_generate_password( 64, true, true );\n\t\t\t\tupdate_site_option( 'secret_key', $values['key'] );\n\t\t\t}\n\t\t}\n\t\t$values['salt'] = hash_hmac( 'md5', $scheme, $values['key'] );\n\t}\n\n\t$cached_salts[ $scheme ] = $values['key'] . $values['salt'];\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n}\nendif;\n\nif ( !function_exists('wp_hash') ) :\n/**\n * Get hash of given string.\n *\n * @since 2.0.3\n *\n * @param string $data   Plain text to hash\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Hash of $data\n */\nfunction wp_hash($data, $scheme = 'auth') {\n\t$salt = wp_salt($scheme);\n\n\treturn hash_hmac('md5', $data, $salt);\n}\nendif;\n\nif ( !function_exists('wp_hash_password') ) :\n/**\n * Create a hash (encrypt) of a plain text password.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object\n *\n * @param string $password Plain text user password to hash\n * @return string The hash string of the password\n */\nfunction wp_hash_password($password) {\n\tglobal $wp_hasher;\n\n\tif ( empty($wp_hasher) ) {\n\t\t// By default, use the portable hash from phpass\n\t\t$wp_hasher = new PasswordHash(8, true);\n\t}\n\n\treturn $wp_hasher->HashPassword( trim( $password ) );\n}\nendif;\n\nif ( !function_exists('wp_check_password') ) :\n/**\n * Checks the plaintext password against the encrypted Password.\n *\n * Maintains compatibility between old version and the new cookie authentication\n * protocol using PHPass library. The $hash parameter is the encrypted password\n * and the function compares the plain text password when encrypted similarly\n * against the already encrypted password to see if they match.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object used for checking the password\n *\tagainst the $hash + $password\n * @uses PasswordHash::CheckPassword\n *\n * @param string     $password Plaintext user's password\n * @param string     $hash     Hash of the user's password to check against.\n * @param string|int $user_id  Optional. User ID.\n * @return bool False, if the $password does not match the hashed password\n */\nfunction wp_check_password($password, $hash, $user_id = '') {\n\tglobal $wp_hasher;\n\n\t// If the hash is still md5...\n\tif ( strlen($hash) <= 32 ) {\n\t\t$check = hash_equals( $hash, md5( $password ) );\n\t\tif ( $check && $user_id ) {\n\t\t\t// Rehash using new hash.\n\t\t\twp_set_password($password, $user_id);\n\t\t\t$hash = wp_hash_password($password);\n\t\t}\n\n\t\t/**\n\t\t * Filters whether the plaintext password matches the encrypted password.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param bool       $check    Whether the passwords match.\n\t\t * @param string     $password The plaintext password.\n\t\t * @param string     $hash     The hashed password.\n\t\t * @param string|int $user_id  User ID. Can be empty.\n\t\t */\n\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t}\n\n\t// If the stored hash is longer than an MD5, presume the\n\t// new style phpass portable hash.\n\tif ( empty($wp_hasher) ) {\n\t\t// By default, use the portable hash from phpass\n\t\t$wp_hasher = new PasswordHash(8, true);\n\t}\n\n\t$check = $wp_hasher->CheckPassword($password, $hash);\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n}\nendif;\n\nif ( !function_exists('wp_generate_password') ) :\n/**\n * Generates a random password drawn from the defined set of characters.\n *\n * @since 2.5.0\n *\n * @param int  $length              Optional. The length of password to generate. Default 12.\n * @param bool $special_chars       Optional. Whether to include standard special characters.\n *                                  Default true.\n * @param bool $extra_special_chars Optional. Whether to include other special characters.\n *                                  Used when generating secret keys and salts. Default false.\n * @return string The random password.\n */\nfunction wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {\n\t$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\tif ( $special_chars )\n\t\t$chars .= '!@#$%^&*()';\n\tif ( $extra_special_chars )\n\t\t$chars .= '-_ []{}<>~`+=,.;:/?|';\n\n\t$password = '';\n\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);\n\t}\n\n\t/**\n\t * Filters the randomly-generated password.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $password The generated password.\n\t */\n\treturn apply_filters( 'random_password', $password );\n}\nendif;\n\nif ( !function_exists('wp_rand') ) :\n/**\n * Generates a random number\n *\n * @since 2.6.2\n * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.\n *\n * @global string $rnd_value\n * @staticvar string $seed\n * @staticvar bool $external_rand_source_available\n *\n * @param int $min Lower limit for the generated number\n * @param int $max Upper limit for the generated number\n * @return int A random number between min and max\n */\nfunction wp_rand( $min = 0, $max = 0 ) {\n\tglobal $rnd_value;\n\n\t// Some misconfigured 32bit environments (Entropy PHP, for example) truncate integers larger than PHP_INT_MAX to PHP_INT_MAX rather than overflowing them to floats.\n\t$max_random_number = 3000000000 === 2147483647 ? (float) \"4294967295\" : 4294967295; // 4294967295 = 0xffffffff\n\n\t// We only handle Ints, floats are truncated to their integer value.\n\t$min = (int) $min;\n\t$max = (int) $max;\n\n\t// Use PHP's CSPRNG, or a compatible method\n\tstatic $use_random_int_functionality = true;\n\tif ( $use_random_int_functionality ) {\n\t\ttry {\n\t\t\t$_max = ( 0 != $max ) ? $max : $max_random_number;\n\t\t\t// wp_rand() can accept arguments in either order, PHP cannot.\n\t\t\t$_max = max( $min, $_max );\n\t\t\t$_min = min( $min, $_max );\n\t\t\t$val = random_int( $_min, $_max );\n\t\t\tif ( false !== $val ) {\n\t\t\t\treturn absint( $val );\n\t\t\t} else {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t}\n\t\t} catch ( Error $e ) {\n\t\t\t$use_random_int_functionality = false;\n\t\t} catch ( Exception $e ) {\n\t\t\t$use_random_int_functionality = false;\n\t\t}\n\t}\n\n\t// Reset $rnd_value after 14 uses\n\t// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value\n\tif ( strlen($rnd_value) < 8 ) {\n\t\tif ( defined( 'WP_SETUP_CONFIG' ) )\n\t\t\tstatic $seed = '';\n\t\telse\n\t\t\t$seed = get_transient('random_seed');\n\t\t$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );\n\t\t$rnd_value .= sha1($rnd_value);\n\t\t$rnd_value .= sha1($rnd_value . $seed);\n\t\t$seed = md5($seed . $rnd_value);\n\t\tif ( ! defined( 'WP_SETUP_CONFIG' ) && ! defined( 'WP_INSTALLING' ) ) {\n\t\t\tset_transient( 'random_seed', $seed );\n\t\t}\n\t}\n\n\t// Take the first 8 digits for our value\n\t$value = substr($rnd_value, 0, 8);\n\n\t// Strip the first eight, leaving the remainder for the next call to wp_rand().\n\t$rnd_value = substr($rnd_value, 8);\n\n\t$value = abs(hexdec($value));\n\n\t// Reduce the value to be within the min - max range\n\tif ( $max != 0 )\n\t\t$value = $min + ( $max - $min + 1 ) * $value / ( $max_random_number + 1 );\n\n\treturn abs(intval($value));\n}\nendif;\n\nif ( !function_exists('wp_set_password') ) :\n/**\n * Updates the user's password with a new encrypted one.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * Please note: This function should be used sparingly and is really only meant for single-time\n * application. Leveraging this improperly in a plugin or theme could result in an endless loop\n * of password resets if precautions are not taken to ensure it does not execute on every page load.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $password The plaintext new user password\n * @param int    $user_id  User ID\n */\nfunction wp_set_password( $password, $user_id ) {\n\tglobal $wpdb;\n\n\t$hash = wp_hash_password( $password );\n\t$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );\n\n\twp_cache_delete($user_id, 'users');\n}\nendif;\n\nif ( !function_exists( 'get_avatar' ) ) :\n/**\n * Retrieve the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.\n *\n * @since 2.5.0\n * @since 4.2.0 Optional `$args` parameter added.\n *\n * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n * @param int    $size       Optional. Height and width of the avatar image file in pixels. Default 96.\n * @param string $default    Optional. URL for the default image or a default type. Accepts '404'\n *                           (return a 404 instead of a default image), 'retro' (8bit), 'monsterid'\n *                           (monster), 'wavatar' (cartoon face), 'indenticon' (the \"quilt\"),\n *                           'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF),\n *                           or 'gravatar_default' (the Gravatar logo). Default is the value of the\n *                           'avatar_default' option, with a fallback of 'mystery'.\n * @param string $alt        Optional. Alternative text to use in &lt;img&gt; tag. Default empty.\n * @param array  $args       {\n *     Optional. Extra arguments to retrieve the avatar.\n *\n *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.\n *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.\n *     @type bool         $force_default Whether to always show the default image, never the Gravatar. Default false.\n *     @type string       $rating        What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n *                                       judged in that order. Default is the value of the 'avatar_rating' option.\n *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.\n *                                       Default null.\n *     @type array|string $class         Array or string of additional classes to add to the &lt;img&gt; element.\n *                                       Default null.\n *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.\n *                                       Default false.\n *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n * }\n * @return false|string `<img>` tag for the user's avatar. False on failure.\n */\nfunction get_avatar( $id_or_email, $size = 96, $default = '', $alt = '', $args = null ) {\n\t$defaults = array(\n\t\t// get_avatar_data() args.\n\t\t'size'          => 96,\n\t\t'height'        => null,\n\t\t'width'         => null,\n\t\t'default'       => get_option( 'avatar_default', 'mystery' ),\n\t\t'force_default' => false,\n\t\t'rating'        => get_option( 'avatar_rating' ),\n\t\t'scheme'        => null,\n\t\t'alt'           => '',\n\t\t'class'         => null,\n\t\t'force_display' => false,\n\t\t'extra_attr'    => '',\n\t);\n\n\tif ( empty( $args ) ) {\n\t\t$args = array();\n\t}\n\n\t$args['size']    = (int) $size;\n\t$args['default'] = $default;\n\t$args['alt']     = $alt;\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( empty( $args['height'] ) ) {\n\t\t$args['height'] = $args['size'];\n\t}\n\tif ( empty( $args['width'] ) ) {\n\t\t$args['width'] = $args['size'];\n\t}\n\n\tif ( is_object( $id_or_email ) && isset( $id_or_email->comment_ID ) ) {\n\t\t$id_or_email = get_comment( $id_or_email );\n\t}\n\n\t/**\n\t * Filters whether to retrieve the avatar URL early.\n\t *\n\t * Passing a non-null value will effectively short-circuit get_avatar(), passing\n\t * the value through the {@see 'get_avatar'} filter and returning early.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $avatar      HTML for the user's avatar. Default null.\n\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param array  $args        Arguments passed to get_avatar_url(), after processing.\n\t */\n\t$avatar = apply_filters( 'pre_get_avatar', null, $id_or_email, $args );\n\n\tif ( ! is_null( $avatar ) ) {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t}\n\n\tif ( ! $args['force_display'] && ! get_option( 'show_avatars' ) ) {\n\t\treturn false;\n\t}\n\n\t$url2x = get_avatar_url( $id_or_email, array_merge( $args, array( 'size' => $args['size'] * 2 ) ) );\n\n\t$args = get_avatar_data( $id_or_email, $args );\n\n\t$url = $args['url'];\n\n\tif ( ! $url || is_wp_error( $url ) ) {\n\t\treturn false;\n\t}\n\n\t$class = array( 'avatar', 'avatar-' . (int) $args['size'], 'photo' );\n\n\tif ( ! $args['found_avatar'] || $args['force_default'] ) {\n\t\t$class[] = 'avatar-default';\n\t}\n\n\tif ( $args['class'] ) {\n\t\tif ( is_array( $args['class'] ) ) {\n\t\t\t$class = array_merge( $class, $args['class'] );\n\t\t} else {\n\t\t\t$class[] = $args['class'];\n\t\t}\n\t}\n\n\t$avatar = sprintf(\n\t\t\"<img alt='%s' src='%s' srcset='%s' class='%s' height='%d' width='%d' %s/>\",\n\t\tesc_attr( $args['alt'] ),\n\t\tesc_url( $url ),\n\t\tesc_attr( \"$url2x 2x\" ),\n\t\tesc_attr( join( ' ', $class ) ),\n\t\t(int) $args['height'],\n\t\t(int) $args['width'],\n\t\t$args['extra_attr']\n\t);\n\n\t/**\n\t * Filters the avatar to retrieve.\n\t *\n\t * @since 2.5.0\n\t * @since 4.2.0 The `$args` parameter was added.\n\t *\n\t * @param string $avatar      &lt;img&gt; tag for the user's avatar.\n\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param int    $size        Square avatar width and height in pixels to retrieve.\n\t * @param string $default     URL for the default image or a default type. Accepts '404', 'retro', 'monsterid',\n\t *                            'wavatar', 'indenticon','mystery' (or 'mm', or 'mysteryman'), 'blank', or 'gravatar_default'.\n\t *                            Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.\n\t * @param string $alt         Alternative text to use in the avatar image tag. Default empty.\n\t * @param array  $args        Arguments passed to get_avatar_data(), after processing.\n\t */\n\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n}\nendif;\n\nif ( !function_exists( 'wp_text_diff' ) ) :\n/**\n * Displays a human readable HTML representation of the difference between two strings.\n *\n * The Diff is available for getting the changes between versions. The output is\n * HTML, so the primary use is for displaying the changes. If the two strings\n * are equivalent, then an empty string will be returned.\n *\n * The arguments supported and can be changed are listed below.\n *\n * 'title' : Default is an empty string. Titles the diff in a manner compatible\n *\t\twith the output.\n * 'title_left' : Default is an empty string. Change the HTML to the left of the\n *\t\ttitle.\n * 'title_right' : Default is an empty string. Change the HTML to the right of\n *\t\tthe title.\n *\n * @since 2.6.0\n *\n * @see wp_parse_args() Used to change defaults to user defined settings.\n * @uses Text_Diff\n * @uses WP_Text_Diff_Renderer_Table\n *\n * @param string       $left_string  \"old\" (left) version of string\n * @param string       $right_string \"new\" (right) version of string\n * @param string|array $args         Optional. Change 'title', 'title_left', and 'title_right' defaults.\n * @return string Empty string if strings are equivalent or HTML with differences.\n */\nfunction wp_text_diff( $left_string, $right_string, $args = null ) {\n\t$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( ! class_exists( 'WP_Text_Diff_Renderer_Table', false ) )\n\t\trequire( ABSPATH . WPINC . '/wp-diff.php' );\n\n\t$left_string  = normalize_whitespace($left_string);\n\t$right_string = normalize_whitespace($right_string);\n\n\t$left_lines  = explode(\"\\n\", $left_string);\n\t$right_lines = explode(\"\\n\", $right_string);\n\t$text_diff = new Text_Diff($left_lines, $right_lines);\n\t$renderer  = new WP_Text_Diff_Renderer_Table( $args );\n\t$diff = $renderer->render($text_diff);\n\n\tif ( !$diff )\n\t\treturn '';\n\n\t$r  = \"<table class='diff'>\\n\";\n\n\tif ( ! empty( $args[ 'show_split_view' ] ) ) {\n\t\t$r .= \"<col class='content diffsplit left' /><col class='content diffsplit middle' /><col class='content diffsplit right' />\";\n\t} else {\n\t\t$r .= \"<col class='content' />\";\n\t}\n\n\tif ( $args['title'] || $args['title_left'] || $args['title_right'] )\n\t\t$r .= \"<thead>\";\n\tif ( $args['title'] )\n\t\t$r .= \"<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\\n\";\n\tif ( $args['title_left'] || $args['title_right'] ) {\n\t\t$r .= \"<tr class='diff-sub-title'>\\n\";\n\t\t$r .= \"\\t<td></td><th>$args[title_left]</th>\\n\";\n\t\t$r .= \"\\t<td></td><th>$args[title_right]</th>\\n\";\n\t\t$r .= \"</tr>\\n\";\n\t}\n\tif ( $args['title'] || $args['title_left'] || $args['title_right'] )\n\t\t$r .= \"</thead>\\n\";\n\n\t$r .= \"<tbody>\\n$diff\\n</tbody>\\n\";\n\t$r .= \"</table>\";\n\n\treturn $r;\n}\nendif;\n\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40181';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * These functions can be replaced via plugins. If plugins do not redefine these\n * functions, then these will be used instead.\n *\n * @package WordPress\n */\n\nif ( !function_exists('wp_set_current_user') ) :\n/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * Some WordPress functionality is based on the current user and not based on\n * the signed in user. Therefore, it opens the ability to edit and perform\n * actions on users who aren't signed in.\n *\n * @since 2.0.3\n * @global WP_User $current_user The current user object which holds the user data.\n *\n * @param int    $id   User ID\n * @param string $name User's username\n * @return WP_User Current user User object\n */\nfunction wp_set_current_user($id, $name = '') {\n\tglobal $current_user;\n\n\t// If `$id` matches the user who's already current, there's nothing to do.\n\tif ( isset( $current_user )\n\t\t&& ( $current_user instanceof WP_User )\n\t\t&& ( $id == $current_user->ID )\n\t\t&& ( null !== $id )\n\t) {\n\t\treturn $current_user;\n\t}\n\n\t$current_user = new WP_User( $id, $name );\n\n\tsetup_userdata( $current_user->ID );\n\n\t/**\n\t * Fires after the current user is set.\n\t *\n\t * @since 2.0.1\n\t */\n\tdo_action( 'set_current_user' );\n\n\treturn $current_user;\n}\nendif;\n\nif ( !function_exists('wp_get_current_user') ) :\n/**\n * Retrieve the current user object.\n *\n * Will set the current user, if the current user is not set. The current user\n * will be set to the logged-in person. If no user is logged-in, then it will\n * set the current user to 0, which is invalid and won't have any permissions.\n *\n * @since 2.0.3\n *\n * @see _wp_get_current_user()\n * @global WP_User $current_user Checks if the current user is set.\n *\n * @return WP_User Current WP_User instance.\n */\nfunction wp_get_current_user() {\n\treturn _wp_get_current_user();\n}\nendif;\n\nif ( !function_exists('get_userdata') ) :\n/**\n * Retrieve user info by user ID.\n *\n * @since 0.71\n *\n * @param int $user_id User ID\n * @return WP_User|false WP_User object on success, false on failure.\n */\nfunction get_userdata( $user_id ) {\n\treturn get_user_by( 'id', $user_id );\n}\nendif;\n\nif ( !function_exists('get_user_by') ) :\n/**\n * Retrieve user info by a given field\n *\n * @since 2.8.0\n * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.\n *\n * @param string     $field The field to retrieve the user with. id | ID | slug | email | login.\n * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n * @return WP_User|false WP_User object on success, false on failure.\n */\nfunction get_user_by( $field, $value ) {\n\t$userdata = WP_User::get_data_by( $field, $value );\n\n\tif ( !$userdata )\n\t\treturn false;\n\n\t$user = new WP_User;\n\t$user->init( $userdata );\n\n\treturn $user;\n}\nendif;\n\nif ( !function_exists('cache_users') ) :\n/**\n * Retrieve info for user lists to prevent multiple queries by get_userdata()\n *\n * @since 3.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $user_ids User ID numbers list\n */\nfunction cache_users( $user_ids ) {\n\tglobal $wpdb;\n\n\t$clean = _get_non_cached_ids( $user_ids, 'users' );\n\n\tif ( empty( $clean ) )\n\t\treturn;\n\n\t$list = implode( ',', $clean );\n\n\t$users = $wpdb->get_results( \"SELECT * FROM $wpdb->users WHERE ID IN ($list)\" );\n\n\t$ids = array();\n\tforeach ( $users as $user ) {\n\t\tupdate_user_caches( $user );\n\t\t$ids[] = $user->ID;\n\t}\n\tupdate_meta_cache( 'user', $ids );\n}\nendif;\n\nif ( !function_exists( 'wp_mail' ) ) :\n/**\n * Send mail, similar to PHP's mail\n *\n * A true return value does not automatically mean that the user received the\n * email successfully. It just only means that the method used was able to\n * process the request without any errors.\n *\n * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from\n * creating a from address like 'Name <email@address.com>' when both are set. If\n * just 'wp_mail_from' is set, then just the email address will be used with no\n * name.\n *\n * The default content type is 'text/plain' which does not allow using HTML.\n * However, you can set the content type of the email by using the\n * {@see 'wp_mail_content_type'} filter.\n *\n * The default charset is based on the charset used on the blog. The charset can\n * be set using the {@see 'wp_mail_charset'} filter.\n *\n * @since 1.2.1\n *\n * @global PHPMailer $phpmailer\n *\n * @param string|array $to          Array or comma-separated list of email addresses to send message.\n * @param string       $subject     Email subject\n * @param string       $message     Message contents\n * @param string|array $headers     Optional. Additional headers.\n * @param string|array $attachments Optional. Files to attach.\n * @return bool Whether the email contents were sent successfully.\n */\nfunction wp_mail( $to, $subject, $message, $headers = '', $attachments = array() ) {\n\t// Compact the input, apply the filters, and extract them back out\n\n\t/**\n\t * Filters the wp_mail() arguments.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param array $args A compacted array of wp_mail() arguments, including the \"to\" email,\n\t *                    subject, message, headers, and attachments values.\n\t */\n\t$atts = apply_filters( 'wp_mail', compact( 'to', 'subject', 'message', 'headers', 'attachments' ) );\n\n\tif ( isset( $atts['to'] ) ) {\n\t\t$to = $atts['to'];\n\t}\n\n\tif ( !is_array( $to ) ) {\n\t\t$to = explode( ',', $to );\n\t}\n\n\tif ( isset( $atts['subject'] ) ) {\n\t\t$subject = $atts['subject'];\n\t}\n\n\tif ( isset( $atts['message'] ) ) {\n\t\t$message = $atts['message'];\n\t}\n\n\tif ( isset( $atts['headers'] ) ) {\n\t\t$headers = $atts['headers'];\n\t}\n\n\tif ( isset( $atts['attachments'] ) ) {\n\t\t$attachments = $atts['attachments'];\n\t}\n\n\tif ( ! is_array( $attachments ) ) {\n\t\t$attachments = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $attachments ) );\n\t}\n\tglobal $phpmailer;\n\n\t// (Re)create it, if it's gone missing\n\tif ( ! ( $phpmailer instanceof PHPMailer ) ) {\n\t\trequire_once ABSPATH . WPINC . '/class-phpmailer.php';\n\t\trequire_once ABSPATH . WPINC . '/class-smtp.php';\n\t\t$phpmailer = new PHPMailer( true );\n\t}\n\n\t// Headers\n\t$cc = $bcc = $reply_to = array();\n\n\tif ( empty( $headers ) ) {\n\t\t$headers = array();\n\t} else {\n\t\tif ( !is_array( $headers ) ) {\n\t\t\t// Explode the headers out, so this function can take both\n\t\t\t// string headers and an array of headers.\n\t\t\t$tempheaders = explode( \"\\n\", str_replace( \"\\r\\n\", \"\\n\", $headers ) );\n\t\t} else {\n\t\t\t$tempheaders = $headers;\n\t\t}\n\t\t$headers = array();\n\n\t\t// If it's actually got contents\n\t\tif ( !empty( $tempheaders ) ) {\n\t\t\t// Iterate through the raw headers\n\t\t\tforeach ( (array) $tempheaders as $header ) {\n\t\t\t\tif ( strpos($header, ':') === false ) {\n\t\t\t\t\tif ( false !== stripos( $header, 'boundary=' ) ) {\n\t\t\t\t\t\t$parts = preg_split('/boundary=/i', trim( $header ) );\n\t\t\t\t\t\t$boundary = trim( str_replace( array( \"'\", '\"' ), '', $parts[1] ) );\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Explode them out\n\t\t\t\tlist( $name, $content ) = explode( ':', trim( $header ), 2 );\n\n\t\t\t\t// Cleanup crew\n\t\t\t\t$name    = trim( $name    );\n\t\t\t\t$content = trim( $content );\n\n\t\t\t\tswitch ( strtolower( $name ) ) {\n\t\t\t\t\t// Mainly for legacy -- process a From: header if it's there\n\t\t\t\t\tcase 'from':\n\t\t\t\t\t\t$bracket_pos = strpos( $content, '<' );\n\t\t\t\t\t\tif ( $bracket_pos !== false ) {\n\t\t\t\t\t\t\t// Text before the bracketed email is the \"From\" name.\n\t\t\t\t\t\t\tif ( $bracket_pos > 0 ) {\n\t\t\t\t\t\t\t\t$from_name = substr( $content, 0, $bracket_pos - 1 );\n\t\t\t\t\t\t\t\t$from_name = str_replace( '\"', '', $from_name );\n\t\t\t\t\t\t\t\t$from_name = trim( $from_name );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$from_email = substr( $content, $bracket_pos + 1 );\n\t\t\t\t\t\t\t$from_email = str_replace( '>', '', $from_email );\n\t\t\t\t\t\t\t$from_email = trim( $from_email );\n\n\t\t\t\t\t\t// Avoid setting an empty $from_email.\n\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t$from_email = trim( $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'content-type':\n\t\t\t\t\t\tif ( strpos( $content, ';' ) !== false ) {\n\t\t\t\t\t\t\tlist( $type, $charset_content ) = explode( ';', $content );\n\t\t\t\t\t\t\t$content_type = trim( $type );\n\t\t\t\t\t\t\tif ( false !== stripos( $charset_content, 'charset=' ) ) {\n\t\t\t\t\t\t\t\t$charset = trim( str_replace( array( 'charset=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t} elseif ( false !== stripos( $charset_content, 'boundary=' ) ) {\n\t\t\t\t\t\t\t\t$boundary = trim( str_replace( array( 'BOUNDARY=', 'boundary=', '\"' ), '', $charset_content ) );\n\t\t\t\t\t\t\t\t$charset = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Avoid setting an empty $content_type.\n\t\t\t\t\t\t} elseif ( '' !== trim( $content ) ) {\n\t\t\t\t\t\t\t$content_type = trim( $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t$cc = array_merge( (array) $cc, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t$bcc = array_merge( (array) $bcc, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'reply-to':\n\t\t\t\t\t\t$reply_to = array_merge( (array) $reply_to, explode( ',', $content ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Add it to our grand headers array\n\t\t\t\t\t\t$headers[trim( $name )] = trim( $content );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Empty out the values that may be set\n\t$phpmailer->ClearAllRecipients();\n\t$phpmailer->ClearAttachments();\n\t$phpmailer->ClearCustomHeaders();\n\t$phpmailer->ClearReplyTos();\n\n\t// From email and name\n\t// If we don't have a name from the input headers\n\tif ( !isset( $from_name ) )\n\t\t$from_name = 'WordPress';\n\n\t/* If we don't have an email from the input headers default to wordpress@$sitename\n\t * Some hosts will block outgoing mail from this address if it doesn't exist but\n\t * there's no easy alternative. Defaulting to admin_email might appear to be another\n\t * option but some hosts may refuse to relay mail from an unknown domain. See\n\t * https://core.trac.wordpress.org/ticket/5007.\n\t */\n\n\tif ( !isset( $from_email ) ) {\n\t\t// Get the site domain and get rid of www.\n\t\t$sitename = strtolower( $_SERVER['SERVER_NAME'] );\n\t\tif ( substr( $sitename, 0, 4 ) == 'www.' ) {\n\t\t\t$sitename = substr( $sitename, 4 );\n\t\t}\n\n\t\t$from_email = 'wordpress@' . $sitename;\n\t}\n\n\t/**\n\t * Filters the email address to send from.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param string $from_email Email address to send from.\n\t */\n\t$from_email = apply_filters( 'wp_mail_from', $from_email );\n\n\t/**\n\t * Filters the name to associate with the \"from\" email address.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $from_name Name associated with the \"from\" email address.\n\t */\n\t$from_name = apply_filters( 'wp_mail_from_name', $from_name );\n\n\ttry {\n\t\t$phpmailer->setFrom( $from_email, $from_name, false );\n\t} catch ( phpmailerException $e ) {\n\t\t$mail_error_data = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\treturn false;\n\t}\n\n\t// Set mail's subject and body\n\t$phpmailer->Subject = $subject;\n\t$phpmailer->Body    = $message;\n\n\t// Set destination addresses, using appropriate methods for handling addresses\n\t$address_headers = compact( 'to', 'cc', 'bcc', 'reply_to' );\n\n\tforeach ( $address_headers as $address_header => $addresses ) {\n\t\tif ( empty( $addresses ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tforeach ( (array) $addresses as $address ) {\n\t\t\ttry {\n\t\t\t\t// Break $recipient into name and address parts if in the format \"Foo <bar@baz.com>\"\n\t\t\t\t$recipient_name = '';\n\n\t\t\t\tif ( preg_match( '/(.*)<(.+)>/', $address, $matches ) ) {\n\t\t\t\t\tif ( count( $matches ) == 3 ) {\n\t\t\t\t\t\t$recipient_name = $matches[1];\n\t\t\t\t\t\t$address        = $matches[2];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch ( $address_header ) {\n\t\t\t\t\tcase 'to':\n\t\t\t\t\t\t$phpmailer->addAddress( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cc':\n\t\t\t\t\t\t$phpmailer->addCc( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bcc':\n\t\t\t\t\t\t$phpmailer->addBcc( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'reply_to':\n\t\t\t\t\t\t$phpmailer->addReplyTo( $address, $recipient_name );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set to use PHP's mail()\n\t$phpmailer->IsMail();\n\n\t// Set Content-Type and charset\n\t// If we don't have a content-type from the input headers\n\tif ( !isset( $content_type ) )\n\t\t$content_type = 'text/plain';\n\n\t/**\n\t * Filters the wp_mail() content type.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $content_type Default wp_mail() content type.\n\t */\n\t$content_type = apply_filters( 'wp_mail_content_type', $content_type );\n\n\t$phpmailer->ContentType = $content_type;\n\n\t// Set whether it's plaintext, depending on $content_type\n\tif ( 'text/html' == $content_type )\n\t\t$phpmailer->IsHTML( true );\n\n\t// If we don't have a charset from the input headers\n\tif ( !isset( $charset ) )\n\t\t$charset = get_bloginfo( 'charset' );\n\n\t// Set the content-type and charset\n\n\t/**\n\t * Filters the default wp_mail() charset.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param string $charset Default email charset.\n\t */\n\t$phpmailer->CharSet = apply_filters( 'wp_mail_charset', $charset );\n\n\t// Set custom headers\n\tif ( !empty( $headers ) ) {\n\t\tforeach ( (array) $headers as $name => $content ) {\n\t\t\t$phpmailer->AddCustomHeader( sprintf( '%1$s: %2$s', $name, $content ) );\n\t\t}\n\n\t\tif ( false !== stripos( $content_type, 'multipart' ) && ! empty($boundary) )\n\t\t\t$phpmailer->AddCustomHeader( sprintf( \"Content-Type: %s;\\n\\t boundary=\\\"%s\\\"\", $content_type, $boundary ) );\n\t}\n\n\tif ( !empty( $attachments ) ) {\n\t\tforeach ( $attachments as $attachment ) {\n\t\t\ttry {\n\t\t\t\t$phpmailer->AddAttachment($attachment);\n\t\t\t} catch ( phpmailerException $e ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fires after PHPMailer is initialized.\n\t *\n\t * @since 2.2.0\n\t *\n\t * @param PHPMailer &$phpmailer The PHPMailer instance, passed by reference.\n\t */\n\tdo_action_ref_array( 'phpmailer_init', array( &$phpmailer ) );\n\n\t// Send!\n\ttry {\n\t\treturn $phpmailer->send();\n\t} catch ( phpmailerException $e ) {\n\n\t\t$mail_error_data = compact( 'to', 'subject', 'message', 'headers', 'attachments' );\n\t\t$mail_error_data['phpmailer_exception_code'] = $e->getCode();\n\n\t\t/**\n\t\t * Fires after a phpmailerException is caught.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param WP_Error $error A WP_Error object with the phpmailerException message, and an array\n\t\t *                        containing the mail recipient, subject, message, headers, and attachments.\n\t\t */\n\t\tdo_action( 'wp_mail_failed', new WP_Error( 'wp_mail_failed', $e->getMessage(), $mail_error_data ) );\n\n\t\treturn false;\n\t}\n}\nendif;\n\nif ( !function_exists('wp_authenticate') ) :\n/**\n * Authenticate a user, confirming the login credentials are valid.\n *\n * @since 2.5.0\n * @since 4.5.0 `$username` now accepts an email address.\n *\n * @param string $username User's username or email address.\n * @param string $password User's password.\n * @return WP_User|WP_Error WP_User object if the credentials are valid,\n *                          otherwise WP_Error.\n */\nfunction wp_authenticate($username, $password) {\n\t$username = sanitize_user($username);\n\t$password = trim($password);\n\n\t/**\n\t * Filters whether a set of user login credentials are valid.\n\t *\n\t * A WP_User object is returned if the credentials authenticate a user.\n\t * WP_Error or null otherwise.\n\t *\n\t * @since 2.8.0\n\t * @since 4.5.0 `$username` now accepts an email address.\n\t *\n\t * @param null|WP_User|WP_Error $user     WP_User if the user is authenticated.\n\t *                                        WP_Error or null otherwise.\n\t * @param string                $username Username or email address.\n\t * @param string                $password User password\n\t */\n\t$user = apply_filters( 'authenticate', null, $username, $password );\n\n\tif ( $user == null ) {\n\t\t// TODO what should the error message be? (Or would these even happen?)\n\t\t// Only needed if all authentication handlers fail to return anything.\n\t\t$user = new WP_Error( 'authentication_failed', __( '<strong>ERROR</strong>: Invalid username, email address or incorrect password.' ) );\n\t}\n\n\t$ignore_codes = array('empty_username', 'empty_password');\n\n\tif (is_wp_error($user) && !in_array($user->get_error_code(), $ignore_codes) ) {\n\t\t/**\n\t\t * Fires after a user login has failed.\n\t\t *\n\t\t * @since 2.5.0\n\t\t * @since 4.5.0 The value of `$username` can now be an email address.\n\t\t *\n\t\t * @param string $username Username or email address.\n\t\t */\n\t\tdo_action( 'wp_login_failed', $username );\n\t}\n\n\treturn $user;\n}\nendif;\n\nif ( !function_exists('wp_logout') ) :\n/**\n * Log the current user out.\n *\n * @since 2.5.0\n */\nfunction wp_logout() {\n\twp_destroy_current_session();\n\twp_clear_auth_cookie();\n\n\t/**\n\t * Fires after a user is logged-out.\n\t *\n\t * @since 1.5.0\n\t */\n\tdo_action( 'wp_logout' );\n}\nendif;\n\nif ( !function_exists('wp_validate_auth_cookie') ) :\n/**\n * Validates authentication cookie.\n *\n * The checks include making sure that the authentication cookie is set and\n * pulling in the contents (if $cookie is not used).\n *\n * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n * should be and compares the two.\n *\n * @since 2.5.0\n *\n * @global int $login_grace_period\n *\n * @param string $cookie Optional. If used, will validate contents instead of cookie's\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return false|int False if invalid cookie, User ID if valid.\n */\nfunction wp_validate_auth_cookie($cookie = '', $scheme = '') {\n\tif ( ! $cookie_elements = wp_parse_auth_cookie($cookie, $scheme) ) {\n\t\t/**\n\t\t * Fires if an authentication cookie is malformed.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param string $cookie Malformed auth cookie.\n\t\t * @param string $scheme Authentication scheme. Values include 'auth', 'secure_auth',\n\t\t *                       or 'logged_in'.\n\t\t */\n\t\tdo_action( 'auth_cookie_malformed', $cookie, $scheme );\n\t\treturn false;\n\t}\n\n\t$scheme = $cookie_elements['scheme'];\n\t$username = $cookie_elements['username'];\n\t$hmac = $cookie_elements['hmac'];\n\t$token = $cookie_elements['token'];\n\t$expired = $expiration = $cookie_elements['expiration'];\n\n\t// Allow a grace period for POST and Ajax requests\n\tif ( wp_doing_ajax() || 'POST' == $_SERVER['REQUEST_METHOD'] ) {\n\t\t$expired += HOUR_IN_SECONDS;\n\t}\n\n\t// Quick check to see if an honest cookie has expired\n\tif ( $expired < time() ) {\n\t\t/**\n\t\t * Fires once an authentication cookie has expired.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_expired', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$user = get_user_by('login', $username);\n\tif ( ! $user ) {\n\t\t/**\n\t\t * Fires if a bad username is entered in the user authentication process.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_bad_username', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$pass_frag = substr($user->user_pass, 8, 4);\n\n\t$key = wp_hash( $username . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t$hash = hash_hmac( $algo, $username . '|' . $expiration . '|' . $token, $key );\n\n\tif ( ! hash_equals( $hash, $hmac ) ) {\n\t\t/**\n\t\t * Fires if a bad authentication cookie hash is encountered.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @param array $cookie_elements An array of data for the authentication cookie.\n\t\t */\n\t\tdo_action( 'auth_cookie_bad_hash', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t$manager = WP_Session_Tokens::get_instance( $user->ID );\n\tif ( ! $manager->verify( $token ) ) {\n\t\tdo_action( 'auth_cookie_bad_session_token', $cookie_elements );\n\t\treturn false;\n\t}\n\n\t// Ajax/POST grace period set above\n\tif ( $expiration < time() ) {\n\t\t$GLOBALS['login_grace_period'] = 1;\n\t}\n\n\t/**\n\t * Fires once an authentication cookie has been validated.\n\t *\n\t * @since 2.7.0\n\t *\n\t * @param array   $cookie_elements An array of data for the authentication cookie.\n\t * @param WP_User $user            User object.\n\t */\n\tdo_action( 'auth_cookie_valid', $cookie_elements, $user );\n\n\treturn $user->ID;\n}\nendif;\n\nif ( !function_exists('wp_generate_auth_cookie') ) :\n/**\n * Generate authentication cookie contents.\n *\n * @since 2.5.0\n *\n * @param int    $user_id    User ID\n * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n * @param string $scheme     Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @param string $token      User's session token to use for this cookie\n * @return string Authentication cookie contents. Empty string if user does not exist.\n */\nfunction wp_generate_auth_cookie( $user_id, $expiration, $scheme = 'auth', $token = '' ) {\n\t$user = get_userdata($user_id);\n\tif ( ! $user ) {\n\t\treturn '';\n\t}\n\n\tif ( ! $token ) {\n\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t$token = $manager->create( $expiration );\n\t}\n\n\t$pass_frag = substr($user->user_pass, 8, 4);\n\n\t$key = wp_hash( $user->user_login . '|' . $pass_frag . '|' . $expiration . '|' . $token, $scheme );\n\n\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n\t$hash = hash_hmac( $algo, $user->user_login . '|' . $expiration . '|' . $token, $key );\n\n\t$cookie = $user->user_login . '|' . $expiration . '|' . $token . '|' . $hash;\n\n\t/**\n\t * Filters the authentication cookie.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $cookie     Authentication cookie.\n\t * @param int    $user_id    User ID.\n\t * @param int    $expiration The time the cookie expires as a UNIX timestamp.\n\t * @param string $scheme     Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.\n\t * @param string $token      User's session token used.\n\t */\n\treturn apply_filters( 'auth_cookie', $cookie, $user_id, $expiration, $scheme, $token );\n}\nendif;\n\nif ( !function_exists('wp_parse_auth_cookie') ) :\n/**\n * Parse a cookie into its components\n *\n * @since 2.7.0\n *\n * @param string $cookie\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return array|false Authentication cookie components\n */\nfunction wp_parse_auth_cookie($cookie = '', $scheme = '') {\n\tif ( empty($cookie) ) {\n\t\tswitch ($scheme){\n\t\t\tcase 'auth':\n\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\tbreak;\n\t\t\tcase 'secure_auth':\n\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\tbreak;\n\t\t\tcase \"logged_in\":\n\t\t\t\t$cookie_name = LOGGED_IN_COOKIE;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ( is_ssl() ) {\n\t\t\t\t\t$cookie_name = SECURE_AUTH_COOKIE;\n\t\t\t\t\t$scheme = 'secure_auth';\n\t\t\t\t} else {\n\t\t\t\t\t$cookie_name = AUTH_COOKIE;\n\t\t\t\t\t$scheme = 'auth';\n\t\t\t\t}\n\t    }\n\n\t\tif ( empty($_COOKIE[$cookie_name]) )\n\t\t\treturn false;\n\t\t$cookie = $_COOKIE[$cookie_name];\n\t}\n\n\t$cookie_elements = explode('|', $cookie);\n\tif ( count( $cookie_elements ) !== 4 ) {\n\t\treturn false;\n\t}\n\n\tlist( $username, $expiration, $token, $hmac ) = $cookie_elements;\n\n\treturn compact( 'username', 'expiration', 'token', 'hmac', 'scheme' );\n}\nendif;\n\nif ( !function_exists('wp_set_auth_cookie') ) :\n/**\n * Log in a user by setting authentication cookies.\n *\n * The $remember parameter increases the time that the cookie will be kept. The\n * default the cookie is kept without remembering is two days. When $remember is\n * set, the cookies will be kept for 14 days or two weeks.\n *\n * @since 2.5.0\n * @since 4.3.0 Added the `$token` parameter.\n *\n * @param int    $user_id  User ID\n * @param bool   $remember Whether to remember the user\n * @param mixed  $secure   Whether the admin cookies should only be sent over HTTPS.\n *                         Default is_ssl().\n * @param string $token    Optional. User's session token to use for this cookie.\n */\nfunction wp_set_auth_cookie( $user_id, $remember = false, $secure = '', $token = '' ) {\n\tif ( $remember ) {\n\t\t/**\n\t\t * Filters the duration of the authentication cookie expiration period.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param int  $length   Duration of the expiration period in seconds.\n\t\t * @param int  $user_id  User ID.\n\t\t * @param bool $remember Whether to remember the user login. Default false.\n\t\t */\n\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 14 * DAY_IN_SECONDS, $user_id, $remember );\n\n\t\t/*\n\t\t * Ensure the browser will continue to send the cookie after the expiration time is reached.\n\t\t * Needed for the login grace period in wp_validate_auth_cookie().\n\t\t */\n\t\t$expire = $expiration + ( 12 * HOUR_IN_SECONDS );\n\t} else {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t$expiration = time() + apply_filters( 'auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, $remember );\n\t\t$expire = 0;\n\t}\n\n\tif ( '' === $secure ) {\n\t\t$secure = is_ssl();\n\t}\n\n\t// Front-end cookie is secure when the auth cookie is secure and the site's home URL is forced HTTPS.\n\t$secure_logged_in_cookie = $secure && 'https' === parse_url( get_option( 'home' ), PHP_URL_SCHEME );\n\n\t/**\n\t * Filters whether the connection is secure.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure  Whether the connection is secure.\n\t * @param int  $user_id User ID.\n\t */\n\t$secure = apply_filters( 'secure_auth_cookie', $secure, $user_id );\n\n\t/**\n\t * Filters whether to use a secure cookie when logged-in.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure_logged_in_cookie Whether to use a secure cookie when logged-in.\n\t * @param int  $user_id                 User ID.\n\t * @param bool $secure                  Whether the connection is secure.\n\t */\n\t$secure_logged_in_cookie = apply_filters( 'secure_logged_in_cookie', $secure_logged_in_cookie, $user_id, $secure );\n\n\tif ( $secure ) {\n\t\t$auth_cookie_name = SECURE_AUTH_COOKIE;\n\t\t$scheme = 'secure_auth';\n\t} else {\n\t\t$auth_cookie_name = AUTH_COOKIE;\n\t\t$scheme = 'auth';\n\t}\n\n\tif ( '' === $token ) {\n\t\t$manager = WP_Session_Tokens::get_instance( $user_id );\n\t\t$token   = $manager->create( $expiration );\n\t}\n\n\t$auth_cookie = wp_generate_auth_cookie( $user_id, $expiration, $scheme, $token );\n\t$logged_in_cookie = wp_generate_auth_cookie( $user_id, $expiration, 'logged_in', $token );\n\n\t/**\n\t * Fires immediately before the authentication cookie is set.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $auth_cookie Authentication cookie.\n\t * @param int    $expire      The time the login grace period expires as a UNIX timestamp.\n\t *                            Default is 12 hours past the cookie's expiration time.\n\t * @param int    $expiration  The time when the authentication cookie expires as a UNIX timestamp.\n\t *                            Default is 14 days from now.\n\t * @param int    $user_id     User ID.\n\t * @param string $scheme      Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'.\n\t */\n\tdo_action( 'set_auth_cookie', $auth_cookie, $expire, $expiration, $user_id, $scheme );\n\n\t/**\n\t * Fires immediately before the logged-in authentication cookie is set.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $logged_in_cookie The logged-in cookie.\n\t * @param int    $expire           The time the login grace period expires as a UNIX timestamp.\n\t *                                 Default is 12 hours past the cookie's expiration time.\n\t * @param int    $expiration       The time when the logged-in authentication cookie expires as a UNIX timestamp.\n\t *                                 Default is 14 days from now.\n\t * @param int    $user_id          User ID.\n\t * @param string $scheme           Authentication scheme. Default 'logged_in'.\n\t */\n\tdo_action( 'set_logged_in_cookie', $logged_in_cookie, $expire, $expiration, $user_id, 'logged_in' );\n\n\tsetcookie($auth_cookie_name, $auth_cookie, $expire, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);\n\tsetcookie($auth_cookie_name, $auth_cookie, $expire, ADMIN_COOKIE_PATH, COOKIE_DOMAIN, $secure, true);\n\tsetcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, COOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true);\n\tif ( COOKIEPATH != SITECOOKIEPATH )\n\t\tsetcookie(LOGGED_IN_COOKIE, $logged_in_cookie, $expire, SITECOOKIEPATH, COOKIE_DOMAIN, $secure_logged_in_cookie, true);\n}\nendif;\n\nif ( !function_exists('wp_clear_auth_cookie') ) :\n/**\n * Removes all of the cookies associated with authentication.\n *\n * @since 2.5.0\n */\nfunction wp_clear_auth_cookie() {\n\t/**\n\t * Fires just before the authentication cookies are cleared.\n\t *\n\t * @since 2.7.0\n\t */\n\tdo_action( 'clear_auth_cookie' );\n\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH,   COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, ADMIN_COOKIE_PATH,   COOKIE_DOMAIN );\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, PLUGINS_COOKIE_PATH, COOKIE_DOMAIN );\n\tsetcookie( LOGGED_IN_COOKIE,   ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,          COOKIE_DOMAIN );\n\tsetcookie( LOGGED_IN_COOKIE,   ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH,      COOKIE_DOMAIN );\n\n\t// Old cookies\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( AUTH_COOKIE,        ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( SECURE_AUTH_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\n\t// Even older cookies\n\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, COOKIEPATH,     COOKIE_DOMAIN );\n\tsetcookie( USER_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n\tsetcookie( PASS_COOKIE, ' ', time() - YEAR_IN_SECONDS, SITECOOKIEPATH, COOKIE_DOMAIN );\n}\nendif;\n\nif ( !function_exists('is_user_logged_in') ) :\n/**\n * Checks if the current visitor is a logged in user.\n *\n * @since 2.0.0\n *\n * @return bool True if user is logged in, false if not logged in.\n */\nfunction is_user_logged_in() {\n\t$user = wp_get_current_user();\n\n\treturn $user->exists();\n}\nendif;\n\nif ( !function_exists('auth_redirect') ) :\n/**\n * Checks if a user is logged in, if not it redirects them to the login page.\n *\n * @since 1.5.0\n */\nfunction auth_redirect() {\n\t// Checks if a user is logged in, if not redirects them to the login page\n\n\t$secure = ( is_ssl() || force_ssl_admin() );\n\n\t/**\n\t * Filters whether to use a secure authentication redirect.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $secure Whether to use a secure authentication redirect. Default false.\n\t */\n\t$secure = apply_filters( 'secure_auth_redirect', $secure );\n\n\t// If https is required and request is http, redirect\n\tif ( $secure && !is_ssl() && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {\n\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\texit();\n\t\t} else {\n\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\texit();\n\t\t}\n\t}\n\n\t/**\n\t * Filters the authentication redirect scheme.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param string $scheme Authentication redirect scheme. Default empty.\n\t */\n\t$scheme = apply_filters( 'auth_redirect_scheme', '' );\n\n\tif ( $user_id = wp_validate_auth_cookie( '',  $scheme) ) {\n\t\t/**\n\t\t * Fires before the authentication redirect.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param int $user_id User ID.\n\t\t */\n\t\tdo_action( 'auth_redirect', $user_id );\n\n\t\t// If the user wants ssl but the session is not ssl, redirect.\n\t\tif ( !$secure && get_user_option('use_ssl', $user_id) && false !== strpos($_SERVER['REQUEST_URI'], 'wp-admin') ) {\n\t\t\tif ( 0 === strpos( $_SERVER['REQUEST_URI'], 'http' ) ) {\n\t\t\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\t\t\texit();\n\t\t\t} else {\n\t\t\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\treturn;  // The cookie is good so we're done\n\t}\n\n\t// The cookie is no good so force login\n\tnocache_headers();\n\n\t$redirect = ( strpos( $_SERVER['REQUEST_URI'], '/options.php' ) && wp_get_referer() ) ? wp_get_referer() : set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\n\t$login_url = wp_login_url($redirect, true);\n\n\twp_redirect($login_url);\n\texit();\n}\nendif;\n\nif ( !function_exists('check_admin_referer') ) :\n/**\n * Makes sure that a user was referred from another admin page.\n *\n * To avoid security exploits.\n *\n * @since 1.2.0\n *\n * @param int|string $action    Action nonce.\n * @param string     $query_arg Optional. Key to check for nonce in `$_REQUEST` (since 2.5).\n *                              Default '_wpnonce'.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction check_admin_referer( $action = -1, $query_arg = '_wpnonce' ) {\n\tif ( -1 == $action )\n\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '3.2.0' );\n\n\t$adminurl = strtolower(admin_url());\n\t$referer = strtolower(wp_get_referer());\n\t$result = isset($_REQUEST[$query_arg]) ? wp_verify_nonce($_REQUEST[$query_arg], $action) : false;\n\n\t/**\n\t * Fires once the admin request has been validated or not.\n\t *\n\t * @since 1.5.1\n\t *\n\t * @param string    $action The nonce action.\n\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t */\n\tdo_action( 'check_admin_referer', $action, $result );\n\n\tif ( ! $result && ! ( -1 == $action && strpos( $referer, $adminurl ) === 0 ) ) {\n\t\twp_nonce_ays( $action );\n\t\tdie();\n\t}\n\n\treturn $result;\n}\nendif;\n\nif ( !function_exists('check_ajax_referer') ) :\n/**\n * Verifies the Ajax request to prevent processing requests external of the blog.\n *\n * @since 2.0.3\n *\n * @param int|string   $action    Action nonce.\n * @param false|string $query_arg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,\n *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'\n *                                (in that order). Default false.\n * @param bool         $die       Optional. Whether to die early when the nonce cannot be verified.\n *                                Default true.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction check_ajax_referer( $action = -1, $query_arg = false, $die = true ) {\n\tif ( -1 == $action ) {\n\t\t_doing_it_wrong( __FUNCTION__, __( 'You should specify a nonce action to be verified by using the first parameter.' ), '4.7' );\n\t}\n\n\t$nonce = '';\n\n\tif ( $query_arg && isset( $_REQUEST[ $query_arg ] ) )\n\t\t$nonce = $_REQUEST[ $query_arg ];\n\telseif ( isset( $_REQUEST['_ajax_nonce'] ) )\n\t\t$nonce = $_REQUEST['_ajax_nonce'];\n\telseif ( isset( $_REQUEST['_wpnonce'] ) )\n\t\t$nonce = $_REQUEST['_wpnonce'];\n\n\t$result = wp_verify_nonce( $nonce, $action );\n\n\t/**\n\t * Fires once the Ajax request has been validated or not.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string    $action The Ajax nonce action.\n\t * @param false|int $result False if the nonce is invalid, 1 if the nonce is valid and generated between\n\t *                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n\t */\n\tdo_action( 'check_ajax_referer', $action, $result );\n\n\tif ( $die && false === $result ) {\n\t\tif ( wp_doing_ajax() ) {\n\t\t\twp_die( -1, 403 );\n\t\t} else {\n\t\t\tdie( '-1' );\n\t\t}\n\t}\n\n\treturn $result;\n}\nendif;\n\nif ( !function_exists('wp_redirect') ) :\n/**\n * Redirects to another page.\n *\n * Note: wp_redirect() does not exit automatically, and should almost always be\n * followed by a call to `exit;`:\n *\n *     wp_redirect( $url );\n *     exit;\n *\n * Exiting can also be selectively manipulated by using wp_redirect() as a conditional\n * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_location'} hooks:\n *\n *     if ( wp_redirect( $url ) ) {\n *         exit;\n *     }\n *\n * @since 1.5.1\n *\n * @global bool $is_IIS\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n * @return bool False if $location is not provided, true otherwise.\n */\nfunction wp_redirect($location, $status = 302) {\n\tglobal $is_IIS;\n\n\t/**\n\t * Filters the redirect location.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $location The path to redirect to.\n\t * @param int    $status   Status code to use.\n\t */\n\t$location = apply_filters( 'wp_redirect', $location, $status );\n\n\t/**\n\t * Filters the redirect status code.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param int    $status   Status code to use.\n\t * @param string $location The path to redirect to.\n\t */\n\t$status = apply_filters( 'wp_redirect_status', $status, $location );\n\n\tif ( ! $location )\n\t\treturn false;\n\n\t$location = wp_sanitize_redirect($location);\n\n\tif ( !$is_IIS && PHP_SAPI != 'cgi-fcgi' )\n\t\tstatus_header($status); // This causes problems on IIS and some FastCGI setups\n\n\theader(\"Location: $location\", true, $status);\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_sanitize_redirect') ) :\n/**\n * Sanitizes a URL for use in a redirect.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @return string Redirect-sanitized URL.\n **/\nfunction wp_sanitize_redirect($location) {\n\t$regex = '/\n\t\t(\n\t\t\t(?: [\\xC2-\\xDF][\\x80-\\xBF]        # double-byte sequences   110xxxxx 10xxxxxx\n\t\t\t|   \\xE0[\\xA0-\\xBF][\\x80-\\xBF]    # triple-byte sequences   1110xxxx 10xxxxxx * 2\n\t\t\t|   [\\xE1-\\xEC][\\x80-\\xBF]{2}\n\t\t\t|   \\xED[\\x80-\\x9F][\\x80-\\xBF]\n\t\t\t|   [\\xEE-\\xEF][\\x80-\\xBF]{2}\n\t\t\t|   \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # four-byte sequences   11110xxx 10xxxxxx * 3\n\t\t\t|   [\\xF1-\\xF3][\\x80-\\xBF]{3}\n\t\t\t|   \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}\n\t\t){1,40}                              # ...one or more times\n\t\t)/x';\n\t$location = preg_replace_callback( $regex, '_wp_sanitize_utf8_in_redirect', $location );\n\t$location = preg_replace('|[^a-z0-9-~+_.?#=&;,/:%!*\\[\\]()@]|i', '', $location);\n\t$location = wp_kses_no_null($location);\n\n\t// remove %0d and %0a from location\n\t$strip = array('%0d', '%0a', '%0D', '%0A');\n\treturn _deep_replace( $strip, $location );\n}\n\n/**\n * URL encode UTF-8 characters in a URL.\n *\n * @ignore\n * @since 4.2.0\n * @access private\n *\n * @see wp_sanitize_redirect()\n *\n * @param array $matches RegEx matches against the redirect location.\n * @return string URL-encoded version of the first RegEx match.\n */\nfunction _wp_sanitize_utf8_in_redirect( $matches ) {\n\treturn urlencode( $matches[0] );\n}\nendif;\n\nif ( !function_exists('wp_safe_redirect') ) :\n/**\n * Performs a safe (local) redirect, using wp_redirect().\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl\n * instead. This prevents malicious redirects which redirect to another host,\n * but only used in a few places.\n *\n * @since 2.3.0\n *\n * @param string $location The path to redirect to.\n * @param int    $status   Status code to use.\n */\nfunction wp_safe_redirect($location, $status = 302) {\n\n\t// Need to look at the URL the way it will end up in wp_redirect()\n\t$location = wp_sanitize_redirect($location);\n\n\t/**\n\t * Filters the redirect fallback URL for when the provided redirect is not safe (local).\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param string $fallback_url The fallback URL to use by default.\n\t * @param int    $status       The redirect status.\n\t */\n\t$location = wp_validate_redirect( $location, apply_filters( 'wp_safe_redirect_fallback', admin_url(), $status ) );\n\n\twp_redirect($location, $status);\n}\nendif;\n\nif ( !function_exists('wp_validate_redirect') ) :\n/**\n * Validates a URL for use in a redirect.\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect is to $default supplied\n *\n * @since 2.8.1\n *\n * @param string $location The redirect to validate\n * @param string $default  The value to return if $location is not allowed\n * @return string redirect-sanitized URL\n **/\nfunction wp_validate_redirect($location, $default = '') {\n\t$location = trim( $location, \" \\t\\n\\r\\0\\x08\\x0B\" );\n\t// browsers will assume 'http' is your protocol, and will obey a redirect to a URL starting with '//'\n\tif ( substr($location, 0, 2) == '//' )\n\t\t$location = 'http:' . $location;\n\n\t// In php 5 parse_url may fail if the URL query part contains http://, bug #38143\n\t$test = ( $cut = strpos($location, '?') ) ? substr( $location, 0, $cut ) : $location;\n\n\t// @-operator is used to prevent possible warnings in PHP < 5.3.3.\n\t$lp = @parse_url($test);\n\n\t// Give up if malformed URL\n\tif ( false === $lp )\n\t\treturn $default;\n\n\t// Allow only http and https schemes. No data:, etc.\n\tif ( isset($lp['scheme']) && !('http' == $lp['scheme'] || 'https' == $lp['scheme']) )\n\t\treturn $default;\n\n\t// Reject if certain components are set but host is not. This catches urls like https:host.com for which parse_url does not set the host field.\n\tif ( ! isset( $lp['host'] ) && ( isset( $lp['scheme'] ) || isset( $lp['user'] ) || isset( $lp['pass'] ) || isset( $lp['port'] ) ) ) {\n\t\treturn $default;\n\t}\n\n\t// Reject malformed components parse_url() can return on odd inputs.\n\tforeach ( array( 'user', 'pass', 'host' ) as $component ) {\n\t\tif ( isset( $lp[ $component ] ) && strpbrk( $lp[ $component ], ':/?#@' ) ) {\n\t\t\treturn $default;\n\t\t}\n\t}\n\n\t$wpp = parse_url(home_url());\n\n\t/**\n\t * Filters the whitelist of hosts to redirect to.\n\t *\n\t * @since 2.3.0\n\t *\n\t * @param array       $hosts An array of allowed hosts.\n\t * @param bool|string $host  The parsed host; empty if not isset.\n\t */\n\t$allowed_hosts = (array) apply_filters( 'allowed_redirect_hosts', array($wpp['host']), isset($lp['host']) ? $lp['host'] : '' );\n\n\tif ( isset($lp['host']) && ( !in_array($lp['host'], $allowed_hosts) && $lp['host'] != strtolower($wpp['host'])) )\n\t\t$location = $default;\n\n\treturn $location;\n}\nendif;\n\nif ( ! function_exists('wp_notify_postauthor') ) :\n/**\n * Notify an author (and/or others) of a comment/trackback/pingback on a post.\n *\n * @since 1.0.0\n *\n * @param int|WP_Comment  $comment_id Comment ID or WP_Comment object.\n * @param string          $deprecated Not used\n * @return bool True on completion. False if no email addresses were specified.\n */\nfunction wp_notify_postauthor( $comment_id, $deprecated = null ) {\n\tif ( null !== $deprecated ) {\n\t\t_deprecated_argument( __FUNCTION__, '3.8.0' );\n\t}\n\n\t$comment = get_comment( $comment_id );\n\tif ( empty( $comment ) || empty( $comment->comment_post_ID ) )\n\t\treturn false;\n\n\t$post    = get_post( $comment->comment_post_ID );\n\t$author  = get_userdata( $post->post_author );\n\n\t// Who to notify? By default, just the post author, but others can be added.\n\t$emails = array();\n\tif ( $author ) {\n\t\t$emails[] = $author->user_email;\n\t}\n\n\t/**\n\t * Filters the list of email addresses to receive a comment notification.\n\t *\n\t * By default, only post authors are notified of comments. This filter allows\n\t * others to be added.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param array $emails     An array of email addresses to receive a comment notification.\n\t * @param int   $comment_id The comment ID.\n\t */\n\t$emails = apply_filters( 'comment_notification_recipients', $emails, $comment->comment_ID );\n\t$emails = array_filter( $emails );\n\n\t// If there are no addresses to send the comment to, bail.\n\tif ( ! count( $emails ) ) {\n\t\treturn false;\n\t}\n\n\t// Facilitate unsetting below without knowing the keys.\n\t$emails = array_flip( $emails );\n\n\t/**\n\t * Filters whether to notify comment authors of their comments on their own posts.\n\t *\n\t * By default, comment authors aren't notified of their comments on their own\n\t * posts. This filter allows you to override that.\n\t *\n\t * @since 3.8.0\n\t *\n\t * @param bool $notify     Whether to notify the post author of their own comment.\n\t *                         Default false.\n\t * @param int  $comment_id The comment ID.\n\t */\n\t$notify_author = apply_filters( 'comment_notification_notify_author', false, $comment->comment_ID );\n\n\t// The comment was left by the author\n\tif ( $author && ! $notify_author && $comment->user_id == $post->post_author ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// The author moderated a comment on their own post\n\tif ( $author && ! $notify_author && $post->post_author == get_current_user_id() ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// The post author is no longer a member of the blog\n\tif ( $author && ! $notify_author && ! user_can( $post->post_author, 'read_post', $post->ID ) ) {\n\t\tunset( $emails[ $author->user_email ] );\n\t}\n\n\t// If there's no email to send the comment to, bail, otherwise flip array back around for use below\n\tif ( ! count( $emails ) ) {\n\t\treturn false;\n\t} else {\n\t\t$emails = array_flip( $emails );\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\tswitch ( $comment->comment_type ) {\n\t\tcase 'trackback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __( 'New trackback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __('Website: %1$s (IP: %2$s, %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all trackbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Trackback: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t\tcase 'pingback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __( 'New pingback on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __('Website: %1$s (IP: %2$s, %3$s)'), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all pingbacks on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Pingback: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t\tdefault: // Comments\n\t\t\t$notify_message  = sprintf( __( 'New comment on your post \"%s\"' ), $post->post_title ) . \"\\r\\n\";\n\t\t\t/* translators: 1: comment author, 2: author IP, 3: author domain */\n\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= sprintf( __('Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\t$notify_message .= __( 'You can see all comments on this post here:' ) . \"\\r\\n\";\n\t\t\t/* translators: 1: blog name, 2: post title */\n\t\t\t$subject = sprintf( __('[%1$s] Comment: \"%2$s\"'), $blogname, $post->post_title );\n\t\t\tbreak;\n\t}\n\t$notify_message .= get_permalink($comment->comment_post_ID) . \"#comments\\r\\n\\r\\n\";\n\t$notify_message .= sprintf( __('Permalink: %s'), get_comment_link( $comment ) ) . \"\\r\\n\";\n\n\tif ( user_can( $post->post_author, 'edit_comment', $comment->comment_ID ) ) {\n\t\tif ( EMPTY_TRASH_DAYS ) {\n\t\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t} else {\n\t\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t\t}\n\t\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment->comment_ID}#wpbody-content\" ) ) . \"\\r\\n\";\n\t}\n\n\t$wp_email = 'wordpress@' . preg_replace('#^www\\.#', '', strtolower($_SERVER['SERVER_NAME']));\n\n\tif ( '' == $comment->comment_author ) {\n\t\t$from = \"From: \\\"$blogname\\\" <$wp_email>\";\n\t\tif ( '' != $comment->comment_author_email )\n\t\t\t$reply_to = \"Reply-To: $comment->comment_author_email\";\n\t} else {\n\t\t$from = \"From: \\\"$comment->comment_author\\\" <$wp_email>\";\n\t\tif ( '' != $comment->comment_author_email )\n\t\t\t$reply_to = \"Reply-To: \\\"$comment->comment_author_email\\\" <$comment->comment_author_email>\";\n\t}\n\n\t$message_headers = \"$from\\n\"\n\t\t. \"Content-Type: text/plain; charset=\\\"\" . get_option('blog_charset') . \"\\\"\\n\";\n\n\tif ( isset($reply_to) )\n\t\t$message_headers .= $reply_to . \"\\n\";\n\n\t/**\n\t * Filters the comment notification email text.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $notify_message The comment notification email text.\n\t * @param int    $comment_id     Comment ID.\n\t */\n\t$notify_message = apply_filters( 'comment_notification_text', $notify_message, $comment->comment_ID );\n\n\t/**\n\t * Filters the comment notification email subject.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $subject    The comment notification email subject.\n\t * @param int    $comment_id Comment ID.\n\t */\n\t$subject = apply_filters( 'comment_notification_subject', $subject, $comment->comment_ID );\n\n\t/**\n\t * Filters the comment notification email headers.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $message_headers Headers for the comment notification email.\n\t * @param int    $comment_id      Comment ID.\n\t */\n\t$message_headers = apply_filters( 'comment_notification_headers', $message_headers, $comment->comment_ID );\n\n\tforeach ( $emails as $email ) {\n\t\t@wp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t}\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_notify_moderator') ) :\n/**\n * Notifies the moderator of the site about a new comment that is awaiting approval.\n *\n * @since 1.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator\n * should be notified, overriding the site setting.\n *\n * @param int $comment_id Comment ID.\n * @return true Always returns true.\n */\nfunction wp_notify_moderator($comment_id) {\n\tglobal $wpdb;\n\n\t$maybe_notify = get_option( 'moderation_notify' );\n\n\t/**\n\t * Filters whether to send the site moderator email notifications, overriding the site setting.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param bool $maybe_notify Whether to notify blog moderator.\n\t * @param int  $comment_ID   The id of the comment for the notification.\n\t */\n\t$maybe_notify = apply_filters( 'notify_moderator', $maybe_notify, $comment_id );\n\n\tif ( ! $maybe_notify ) {\n\t\treturn true;\n\t}\n\n\t$comment = get_comment($comment_id);\n\t$post = get_post($comment->comment_post_ID);\n\t$user = get_userdata( $post->post_author );\n\t// Send to the administration and to the post author if the author can modify the comment.\n\t$emails = array( get_option( 'admin_email' ) );\n\tif ( $user && user_can( $user->ID, 'edit_comment', $comment_id ) && ! empty( $user->user_email ) ) {\n\t\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) )\n\t\t\t$emails[] = $user->user_email;\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$comment_author_domain = @gethostbyaddr($comment->comment_author_IP);\n\t$comments_waiting = $wpdb->get_var(\"SELECT count(comment_ID) FROM $wpdb->comments WHERE comment_approved = '0'\");\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t$comment_content = wp_specialchars_decode( $comment->comment_content );\n\n\tswitch ( $comment->comment_type ) {\n\t\tcase 'trackback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new trackback on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= __('Trackback excerpt: ') . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t\tcase 'pingback':\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new pingback on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback website name, 2: website IP, 3: website hostname */\n\t\t\t$notify_message .= sprintf( __( 'Website: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t$notify_message .= __('Pingback excerpt: ') . \"\\r\\n\" . $comment_content . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t\tdefault: // Comments\n\t\t\t/* translators: 1: Post title */\n\t\t\t$notify_message  = sprintf( __('A new comment on the post \"%s\" is waiting for your approval'), $post->post_title ) . \"\\r\\n\";\n\t\t\t$notify_message .= get_permalink($comment->comment_post_ID) . \"\\r\\n\\r\\n\";\n\t\t\t/* translators: 1: Comment author name, 2: comment author's IP, 3: comment author IP's hostname */\n\t\t\t$notify_message .= sprintf( __( 'Author: %1$s (IP: %2$s, %3$s)' ), $comment->comment_author, $comment->comment_author_IP, $comment_author_domain ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'Email: %s' ), $comment->comment_author_email ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Trackback/pingback/comment author URL */\n\t\t\t$notify_message .= sprintf( __( 'URL: %s' ), $comment->comment_author_url ) . \"\\r\\n\";\n\t\t\t/* translators: 1: Comment text */\n\t\t\t$notify_message .= sprintf( __( 'Comment: %s' ), \"\\r\\n\" . $comment_content ) . \"\\r\\n\\r\\n\";\n\t\t\tbreak;\n\t}\n\n\t/* translators: Comment moderation. 1: Comment action URL */\n\t$notify_message .= sprintf( __( 'Approve it: %s' ), admin_url( \"comment.php?action=approve&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\tif ( EMPTY_TRASH_DAYS ) {\n\t\t/* translators: Comment moderation. 1: Comment action URL */\n\t\t$notify_message .= sprintf( __( 'Trash it: %s' ), admin_url( \"comment.php?action=trash&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t} else {\n\t\t/* translators: Comment moderation. 1: Comment action URL */\n\t\t$notify_message .= sprintf( __( 'Delete it: %s' ), admin_url( \"comment.php?action=delete&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\t}\n\n\t/* translators: Comment moderation. 1: Comment action URL */\n\t$notify_message .= sprintf( __( 'Spam it: %s' ), admin_url( \"comment.php?action=spam&c={$comment_id}#wpbody-content\" ) ) . \"\\r\\n\";\n\n\t/* translators: Comment moderation. 1: Number of comments awaiting approval */\n\t$notify_message .= sprintf( _n('Currently %s comment is waiting for approval. Please visit the moderation panel:',\n \t\t'Currently %s comments are waiting for approval. Please visit the moderation panel:', $comments_waiting), number_format_i18n($comments_waiting) ) . \"\\r\\n\";\n\t$notify_message .= admin_url( \"edit-comments.php?comment_status=moderated#wpbody-content\" ) . \"\\r\\n\";\n\n\t/* translators: Comment moderation notification email subject. 1: Site name, 2: Post title */\n\t$subject = sprintf( __('[%1$s] Please moderate: \"%2$s\"'), $blogname, $post->post_title );\n\t$message_headers = '';\n\n\t/**\n\t * Filters the list of recipients for comment moderation emails.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param array $emails     List of email addresses to notify for comment moderation.\n\t * @param int   $comment_id Comment ID.\n\t */\n\t$emails = apply_filters( 'comment_moderation_recipients', $emails, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email text.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $notify_message Text of the comment moderation email.\n\t * @param int    $comment_id     Comment ID.\n\t */\n\t$notify_message = apply_filters( 'comment_moderation_text', $notify_message, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email subject.\n\t *\n\t * @since 1.5.2\n\t *\n\t * @param string $subject    Subject of the comment moderation email.\n\t * @param int    $comment_id Comment ID.\n\t */\n\t$subject = apply_filters( 'comment_moderation_subject', $subject, $comment_id );\n\n\t/**\n\t * Filters the comment moderation email headers.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $message_headers Headers for the comment moderation email.\n\t * @param int    $comment_id      Comment ID.\n\t */\n\t$message_headers = apply_filters( 'comment_moderation_headers', $message_headers, $comment_id );\n\n\tforeach ( $emails as $email ) {\n\t\t@wp_mail( $email, wp_specialchars_decode( $subject ), $notify_message, $message_headers );\n\t}\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\treturn true;\n}\nendif;\n\nif ( !function_exists('wp_password_change_notification') ) :\n/**\n * Notify the blog admin of a user changing password, normally via email.\n *\n * @since 2.7.0\n *\n * @param WP_User $user User object.\n */\nfunction wp_password_change_notification( $user ) {\n\t// send a copy of password change notification to the admin\n\t// but check to see if it's the admin whose password we're changing, and skip this\n\tif ( 0 !== strcasecmp( $user->user_email, get_option( 'admin_email' ) ) ) {\n\t\t/* translators: %s: user name */\n\t\t$message = sprintf( __( 'Password changed for user: %s' ), $user->user_login ) . \"\\r\\n\";\n\t\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t\t// we want to reverse this for the plain text arena of emails.\n\t\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\t\t/* translators: %s: site title */\n\t\twp_mail( get_option( 'admin_email' ), sprintf( __( '[%s] Password Changed' ), $blogname ), $message );\n\t}\n}\nendif;\n\nif ( !function_exists('wp_new_user_notification') ) :\n/**\n * Email login credentials to a newly-registered user.\n *\n * A new user registration notification is also sent to admin email.\n *\n * @since 2.0.0\n * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.\n * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.\n * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.\n *\n * @global wpdb         $wpdb      WordPress database object for queries.\n * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.\n *\n * @param int    $user_id    User ID.\n * @param null   $deprecated Not used (argument deprecated).\n * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty\n *                           string (admin only), 'user', or 'both' (admin and user). Default empty.\n */\nfunction wp_new_user_notification( $user_id, $deprecated = null, $notify = '' ) {\n\tif ( $deprecated !== null ) {\n\t\t_deprecated_argument( __FUNCTION__, '4.3.1' );\n\t}\n\n\tglobal $wpdb, $wp_hasher;\n\t$user = get_userdata( $user_id );\n\n\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t// we want to reverse this for the plain text arena of emails.\n\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\n\tif ( 'user' !== $notify ) {\n\t\t$switched_locale = switch_to_locale( get_locale() );\n\t\t$message  = sprintf( __( 'New user registration on your site %s:' ), $blogname ) . \"\\r\\n\\r\\n\";\n\t\t$message .= sprintf( __( 'Username: %s' ), $user->user_login ) . \"\\r\\n\\r\\n\";\n\t\t$message .= sprintf( __( 'Email: %s' ), $user->user_email ) . \"\\r\\n\";\n\n\t\t@wp_mail( get_option( 'admin_email' ), sprintf( __( '[%s] New User Registration' ), $blogname ), $message );\n\n\t\tif ( $switched_locale ) {\n\t\t\trestore_previous_locale();\n\t\t}\n\t}\n\n\t// `$deprecated was pre-4.3 `$plaintext_pass`. An empty `$plaintext_pass` didn't sent a user notification.\n\tif ( 'admin' === $notify || ( empty( $deprecated ) && empty( $notify ) ) ) {\n\t\treturn;\n\t}\n\n\t// Generate something random for a password reset key.\n\t$key = wp_generate_password( 20, false );\n\n\t/** This action is documented in wp-login.php */\n\tdo_action( 'retrieve_password_key', $user->user_login, $key );\n\n\t// Now insert the key, hashed, into the DB.\n\tif ( empty( $wp_hasher ) ) {\n\t\t$wp_hasher = new PasswordHash( 8, true );\n\t}\n\t$hashed = time() . ':' . $wp_hasher->HashPassword( $key );\n\t$wpdb->update( $wpdb->users, array( 'user_activation_key' => $hashed ), array( 'user_login' => $user->user_login ) );\n\n\t$switched_locale = switch_to_locale( get_user_locale( $user ) );\n\n\t$message = sprintf(__('Username: %s'), $user->user_login) . \"\\r\\n\\r\\n\";\n\t$message .= __('To set your password, visit the following address:') . \"\\r\\n\\r\\n\";\n\t$message .= '<' . network_site_url(\"wp-login.php?action=rp&key=$key&login=\" . rawurlencode($user->user_login), 'login') . \">\\r\\n\\r\\n\";\n\n\t$message .= wp_login_url() . \"\\r\\n\";\n\n\twp_mail($user->user_email, sprintf(__('[%s] Your username and password info'), $blogname), $message);\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n}\nendif;\n\nif ( !function_exists('wp_nonce_tick') ) :\n/**\n * Get the time-dependent variable for nonce creation.\n *\n * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n * updated, e.g. by autosave.\n *\n * @since 2.5.0\n *\n * @return float Float value rounded up to the next highest integer.\n */\nfunction wp_nonce_tick() {\n\t/**\n\t * Filters the lifespan of nonces in seconds.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param int $lifespan Lifespan of nonces in seconds. Default 86,400 seconds, or one day.\n\t */\n\t$nonce_life = apply_filters( 'nonce_life', DAY_IN_SECONDS );\n\n\treturn ceil(time() / ( $nonce_life / 2 ));\n}\nendif;\n\nif ( !function_exists('wp_verify_nonce') ) :\n/**\n * Verify that correct nonce was used with time limit.\n *\n * The user is given an amount of time to use the token, so therefore, since the\n * UID and $action remain the same, the independent variable is the time.\n *\n * @since 2.0.3\n *\n * @param string     $nonce  Nonce that was used in the form to verify\n * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n * @return false|int False if the nonce is invalid, 1 if the nonce is valid and generated between\n *                   0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago.\n */\nfunction wp_verify_nonce( $nonce, $action = -1 ) {\n\t$nonce = (string) $nonce;\n\t$user = wp_get_current_user();\n\t$uid = (int) $user->ID;\n\tif ( ! $uid ) {\n\t\t/**\n\t\t * Filters whether the user who generated the nonce is logged out.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param int    $uid    ID of the nonce-owning user.\n\t\t * @param string $action The nonce action.\n\t\t */\n\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t}\n\n\tif ( empty( $nonce ) ) {\n\t\treturn false;\n\t}\n\n\t$token = wp_get_session_token();\n\t$i = wp_nonce_tick();\n\n\t// Nonce generated 0-12 hours ago\n\t$expected = substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce'), -12, 10 );\n\tif ( hash_equals( $expected, $nonce ) ) {\n\t\treturn 1;\n\t}\n\n\t// Nonce generated 12-24 hours ago\n\t$expected = substr( wp_hash( ( $i - 1 ) . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n\tif ( hash_equals( $expected, $nonce ) ) {\n\t\treturn 2;\n\t}\n\n\t/**\n\t * Fires when nonce verification fails.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param string     $nonce  The invalid nonce.\n\t * @param string|int $action The nonce action.\n\t * @param WP_User    $user   The current user object.\n\t * @param string     $token  The user's session token.\n\t */\n\tdo_action( 'wp_verify_nonce_failed', $nonce, $action, $user, $token );\n\n\t// Invalid nonce\n\treturn false;\n}\nendif;\n\nif ( !function_exists('wp_create_nonce') ) :\n/**\n * Creates a cryptographic token tied to a specific action, user, user session,\n * and window of time.\n *\n * @since 2.0.3\n * @since 4.0.0 Session tokens were integrated with nonce creation\n *\n * @param string|int $action Scalar value to add context to the nonce.\n * @return string The token.\n */\nfunction wp_create_nonce($action = -1) {\n\t$user = wp_get_current_user();\n\t$uid = (int) $user->ID;\n\tif ( ! $uid ) {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\t$uid = apply_filters( 'nonce_user_logged_out', $uid, $action );\n\t}\n\n\t$token = wp_get_session_token();\n\t$i = wp_nonce_tick();\n\n\treturn substr( wp_hash( $i . '|' . $action . '|' . $uid . '|' . $token, 'nonce' ), -12, 10 );\n}\nendif;\n\nif ( !function_exists('wp_salt') ) :\n/**\n * Get salt to add to hashes.\n *\n * Salts are created using secret keys. Secret keys are located in two places:\n * in the database and in the wp-config.php file. The secret key in the database\n * is randomly generated and will be appended to the secret keys in wp-config.php.\n *\n * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n * security. Below is an example of how the secret key constants are defined.\n * Do not paste this example directly into wp-config.php. Instead, have a\n * {@link https://api.wordpress.org/secret-key/1.1/salt/ secret key created} just\n * for you.\n *\n *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%/U^O~');\n *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n *\n * Salting passwords helps against tools which has stored hashed values of\n * common dictionary strings. The added values makes it harder to crack.\n *\n * @since 2.5.0\n *\n * @link https://api.wordpress.org/secret-key/1.1/salt/ Create secrets for wp-config.php\n *\n * @staticvar array $cached_salts\n * @staticvar array $duplicated_keys\n *\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Salt value\n */\nfunction wp_salt( $scheme = 'auth' ) {\n\tstatic $cached_salts = array();\n\tif ( isset( $cached_salts[ $scheme ] ) ) {\n\t\t/**\n\t\t * Filters the WordPress salt.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param string $cached_salt Cached salt for the given scheme.\n\t\t * @param string $scheme      Authentication scheme. Values include 'auth',\n\t\t *                            'secure_auth', 'logged_in', and 'nonce'.\n\t\t */\n\t\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n\t}\n\n\tstatic $duplicated_keys;\n\tif ( null === $duplicated_keys ) {\n\t\t$duplicated_keys = array( 'put your unique phrase here' => true );\n\t\tforeach ( array( 'AUTH', 'SECURE_AUTH', 'LOGGED_IN', 'NONCE', 'SECRET' ) as $first ) {\n\t\t\tforeach ( array( 'KEY', 'SALT' ) as $second ) {\n\t\t\t\tif ( ! defined( \"{$first}_{$second}\" ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$value = constant( \"{$first}_{$second}\" );\n\t\t\t\t$duplicated_keys[ $value ] = isset( $duplicated_keys[ $value ] );\n\t\t\t}\n\t\t}\n\t}\n\n\t$values = array(\n\t\t'key' => '',\n\t\t'salt' => ''\n\t);\n\tif ( defined( 'SECRET_KEY' ) && SECRET_KEY && empty( $duplicated_keys[ SECRET_KEY ] ) ) {\n\t\t$values['key'] = SECRET_KEY;\n\t}\n\tif ( 'auth' == $scheme && defined( 'SECRET_SALT' ) && SECRET_SALT && empty( $duplicated_keys[ SECRET_SALT ] ) ) {\n\t\t$values['salt'] = SECRET_SALT;\n\t}\n\n\tif ( in_array( $scheme, array( 'auth', 'secure_auth', 'logged_in', 'nonce' ) ) ) {\n\t\tforeach ( array( 'key', 'salt' ) as $type ) {\n\t\t\t$const = strtoupper( \"{$scheme}_{$type}\" );\n\t\t\tif ( defined( $const ) && constant( $const ) && empty( $duplicated_keys[ constant( $const ) ] ) ) {\n\t\t\t\t$values[ $type ] = constant( $const );\n\t\t\t} elseif ( ! $values[ $type ] ) {\n\t\t\t\t$values[ $type ] = get_site_option( \"{$scheme}_{$type}\" );\n\t\t\t\tif ( ! $values[ $type ] ) {\n\t\t\t\t\t$values[ $type ] = wp_generate_password( 64, true, true );\n\t\t\t\t\tupdate_site_option( \"{$scheme}_{$type}\", $values[ $type ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( ! $values['key'] ) {\n\t\t\t$values['key'] = get_site_option( 'secret_key' );\n\t\t\tif ( ! $values['key'] ) {\n\t\t\t\t$values['key'] = wp_generate_password( 64, true, true );\n\t\t\t\tupdate_site_option( 'secret_key', $values['key'] );\n\t\t\t}\n\t\t}\n\t\t$values['salt'] = hash_hmac( 'md5', $scheme, $values['key'] );\n\t}\n\n\t$cached_salts[ $scheme ] = $values['key'] . $values['salt'];\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\treturn apply_filters( 'salt', $cached_salts[ $scheme ], $scheme );\n}\nendif;\n\nif ( !function_exists('wp_hash') ) :\n/**\n * Get hash of given string.\n *\n * @since 2.0.3\n *\n * @param string $data   Plain text to hash\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Hash of $data\n */\nfunction wp_hash($data, $scheme = 'auth') {\n\t$salt = wp_salt($scheme);\n\n\treturn hash_hmac('md5', $data, $salt);\n}\nendif;\n\nif ( !function_exists('wp_hash_password') ) :\n/**\n * Create a hash (encrypt) of a plain text password.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object\n *\n * @param string $password Plain text user password to hash\n * @return string The hash string of the password\n */\nfunction wp_hash_password($password) {\n\tglobal $wp_hasher;\n\n\tif ( empty($wp_hasher) ) {\n\t\t// By default, use the portable hash from phpass\n\t\t$wp_hasher = new PasswordHash(8, true);\n\t}\n\n\treturn $wp_hasher->HashPassword( trim( $password ) );\n}\nendif;\n\nif ( !function_exists('wp_check_password') ) :\n/**\n * Checks the plaintext password against the encrypted Password.\n *\n * Maintains compatibility between old version and the new cookie authentication\n * protocol using PHPass library. The $hash parameter is the encrypted password\n * and the function compares the plain text password when encrypted similarly\n * against the already encrypted password to see if they match.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5.0\n *\n * @global PasswordHash $wp_hasher PHPass object used for checking the password\n *\tagainst the $hash + $password\n * @uses PasswordHash::CheckPassword\n *\n * @param string     $password Plaintext user's password\n * @param string     $hash     Hash of the user's password to check against.\n * @param string|int $user_id  Optional. User ID.\n * @return bool False, if the $password does not match the hashed password\n */\nfunction wp_check_password($password, $hash, $user_id = '') {\n\tglobal $wp_hasher;\n\n\t// If the hash is still md5...\n\tif ( strlen($hash) <= 32 ) {\n\t\t$check = hash_equals( $hash, md5( $password ) );\n\t\tif ( $check && $user_id ) {\n\t\t\t// Rehash using new hash.\n\t\t\twp_set_password($password, $user_id);\n\t\t\t$hash = wp_hash_password($password);\n\t\t}\n\n\t\t/**\n\t\t * Filters whether the plaintext password matches the encrypted password.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @param bool       $check    Whether the passwords match.\n\t\t * @param string     $password The plaintext password.\n\t\t * @param string     $hash     The hashed password.\n\t\t * @param string|int $user_id  User ID. Can be empty.\n\t\t */\n\t\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n\t}\n\n\t// If the stored hash is longer than an MD5, presume the\n\t// new style phpass portable hash.\n\tif ( empty($wp_hasher) ) {\n\t\t// By default, use the portable hash from phpass\n\t\t$wp_hasher = new PasswordHash(8, true);\n\t}\n\n\t$check = $wp_hasher->CheckPassword($password, $hash);\n\n\t/** This filter is documented in wp-includes/pluggable.php */\n\treturn apply_filters( 'check_password', $check, $password, $hash, $user_id );\n}\nendif;\n\nif ( !function_exists('wp_generate_password') ) :\n/**\n * Generates a random password drawn from the defined set of characters.\n *\n * @since 2.5.0\n *\n * @param int  $length              Optional. The length of password to generate. Default 12.\n * @param bool $special_chars       Optional. Whether to include standard special characters.\n *                                  Default true.\n * @param bool $extra_special_chars Optional. Whether to include other special characters.\n *                                  Used when generating secret keys and salts. Default false.\n * @return string The random password.\n */\nfunction wp_generate_password( $length = 12, $special_chars = true, $extra_special_chars = false ) {\n\t$chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\tif ( $special_chars )\n\t\t$chars .= '!@#$%^&*()';\n\tif ( $extra_special_chars )\n\t\t$chars .= '-_ []{}<>~`+=,.;:/?|';\n\n\t$password = '';\n\tfor ( $i = 0; $i < $length; $i++ ) {\n\t\t$password .= substr($chars, wp_rand(0, strlen($chars) - 1), 1);\n\t}\n\n\t/**\n\t * Filters the randomly-generated password.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $password The generated password.\n\t */\n\treturn apply_filters( 'random_password', $password );\n}\nendif;\n\nif ( !function_exists('wp_rand') ) :\n/**\n * Generates a random number\n *\n * @since 2.6.2\n * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.\n *\n * @global string $rnd_value\n * @staticvar string $seed\n * @staticvar bool $external_rand_source_available\n *\n * @param int $min Lower limit for the generated number\n * @param int $max Upper limit for the generated number\n * @return int A random number between min and max\n */\nfunction wp_rand( $min = 0, $max = 0 ) {\n\tglobal $rnd_value;\n\n\t// Some misconfigured 32bit environments (Entropy PHP, for example) truncate integers larger than PHP_INT_MAX to PHP_INT_MAX rather than overflowing them to floats.\n\t$max_random_number = 3000000000 === 2147483647 ? (float) \"4294967295\" : 4294967295; // 4294967295 = 0xffffffff\n\n\t// We only handle Ints, floats are truncated to their integer value.\n\t$min = (int) $min;\n\t$max = (int) $max;\n\n\t// Use PHP's CSPRNG, or a compatible method\n\tstatic $use_random_int_functionality = true;\n\tif ( $use_random_int_functionality ) {\n\t\ttry {\n\t\t\t$_max = ( 0 != $max ) ? $max : $max_random_number;\n\t\t\t// wp_rand() can accept arguments in either order, PHP cannot.\n\t\t\t$_max = max( $min, $_max );\n\t\t\t$_min = min( $min, $_max );\n\t\t\t$val = random_int( $_min, $_max );\n\t\t\tif ( false !== $val ) {\n\t\t\t\treturn absint( $val );\n\t\t\t} else {\n\t\t\t\t$use_random_int_functionality = false;\n\t\t\t}\n\t\t} catch ( Error $e ) {\n\t\t\t$use_random_int_functionality = false;\n\t\t} catch ( Exception $e ) {\n\t\t\t$use_random_int_functionality = false;\n\t\t}\n\t}\n\n\t// Reset $rnd_value after 14 uses\n\t// 32(md5) + 40(sha1) + 40(sha1) / 8 = 14 random numbers from $rnd_value\n\tif ( strlen($rnd_value) < 8 ) {\n\t\tif ( defined( 'WP_SETUP_CONFIG' ) )\n\t\t\tstatic $seed = '';\n\t\telse\n\t\t\t$seed = get_transient('random_seed');\n\t\t$rnd_value = md5( uniqid(microtime() . mt_rand(), true ) . $seed );\n\t\t$rnd_value .= sha1($rnd_value);\n\t\t$rnd_value .= sha1($rnd_value . $seed);\n\t\t$seed = md5($seed . $rnd_value);\n\t\tif ( ! defined( 'WP_SETUP_CONFIG' ) && ! defined( 'WP_INSTALLING' ) ) {\n\t\t\tset_transient( 'random_seed', $seed );\n\t\t}\n\t}\n\n\t// Take the first 8 digits for our value\n\t$value = substr($rnd_value, 0, 8);\n\n\t// Strip the first eight, leaving the remainder for the next call to wp_rand().\n\t$rnd_value = substr($rnd_value, 8);\n\n\t$value = abs(hexdec($value));\n\n\t// Reduce the value to be within the min - max range\n\tif ( $max != 0 )\n\t\t$value = $min + ( $max - $min + 1 ) * $value / ( $max_random_number + 1 );\n\n\treturn abs(intval($value));\n}\nendif;\n\nif ( !function_exists('wp_set_password') ) :\n/**\n * Updates the user's password with a new encrypted one.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * Please note: This function should be used sparingly and is really only meant for single-time\n * application. Leveraging this improperly in a plugin or theme could result in an endless loop\n * of password resets if precautions are not taken to ensure it does not execute on every page load.\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $password The plaintext new user password\n * @param int    $user_id  User ID\n */\nfunction wp_set_password( $password, $user_id ) {\n\tglobal $wpdb;\n\n\t$hash = wp_hash_password( $password );\n\t$wpdb->update($wpdb->users, array('user_pass' => $hash, 'user_activation_key' => ''), array('ID' => $user_id) );\n\n\twp_cache_delete($user_id, 'users');\n}\nendif;\n\nif ( !function_exists( 'get_avatar' ) ) :\n/**\n * Retrieve the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.\n *\n * @since 2.5.0\n * @since 4.2.0 Optional `$args` parameter added.\n *\n * @param mixed $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n *                           user email, WP_User object, WP_Post object, or WP_Comment object.\n * @param int    $size       Optional. Height and width of the avatar image file in pixels. Default 96.\n * @param string $default    Optional. URL for the default image or a default type. Accepts '404'\n *                           (return a 404 instead of a default image), 'retro' (8bit), 'monsterid'\n *                           (monster), 'wavatar' (cartoon face), 'indenticon' (the \"quilt\"),\n *                           'mystery', 'mm', or 'mysteryman' (The Oyster Man), 'blank' (transparent GIF),\n *                           or 'gravatar_default' (the Gravatar logo). Default is the value of the\n *                           'avatar_default' option, with a fallback of 'mystery'.\n * @param string $alt        Optional. Alternative text to use in &lt;img&gt; tag. Default empty.\n * @param array  $args       {\n *     Optional. Extra arguments to retrieve the avatar.\n *\n *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.\n *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.\n *     @type bool         $force_default Whether to always show the default image, never the Gravatar. Default false.\n *     @type string       $rating        What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are\n *                                       judged in that order. Default is the value of the 'avatar_rating' option.\n *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.\n *                                       Default null.\n *     @type array|string $class         Array or string of additional classes to add to the &lt;img&gt; element.\n *                                       Default null.\n *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.\n *                                       Default false.\n *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized. Default empty.\n * }\n * @return false|string `<img>` tag for the user's avatar. False on failure.\n */\nfunction get_avatar( $id_or_email, $size = 96, $default = '', $alt = '', $args = null ) {\n\t$defaults = array(\n\t\t// get_avatar_data() args.\n\t\t'size'          => 96,\n\t\t'height'        => null,\n\t\t'width'         => null,\n\t\t'default'       => get_option( 'avatar_default', 'mystery' ),\n\t\t'force_default' => false,\n\t\t'rating'        => get_option( 'avatar_rating' ),\n\t\t'scheme'        => null,\n\t\t'alt'           => '',\n\t\t'class'         => null,\n\t\t'force_display' => false,\n\t\t'extra_attr'    => '',\n\t);\n\n\tif ( empty( $args ) ) {\n\t\t$args = array();\n\t}\n\n\t$args['size']    = (int) $size;\n\t$args['default'] = $default;\n\t$args['alt']     = $alt;\n\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( empty( $args['height'] ) ) {\n\t\t$args['height'] = $args['size'];\n\t}\n\tif ( empty( $args['width'] ) ) {\n\t\t$args['width'] = $args['size'];\n\t}\n\n\tif ( is_object( $id_or_email ) && isset( $id_or_email->comment_ID ) ) {\n\t\t$id_or_email = get_comment( $id_or_email );\n\t}\n\n\t/**\n\t * Filters whether to retrieve the avatar URL early.\n\t *\n\t * Passing a non-null value will effectively short-circuit get_avatar(), passing\n\t * the value through the {@see 'get_avatar'} filter and returning early.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param string $avatar      HTML for the user's avatar. Default null.\n\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param array  $args        Arguments passed to get_avatar_url(), after processing.\n\t */\n\t$avatar = apply_filters( 'pre_get_avatar', null, $id_or_email, $args );\n\n\tif ( ! is_null( $avatar ) ) {\n\t\t/** This filter is documented in wp-includes/pluggable.php */\n\t\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n\t}\n\n\tif ( ! $args['force_display'] && ! get_option( 'show_avatars' ) ) {\n\t\treturn false;\n\t}\n\n\t$url2x = get_avatar_url( $id_or_email, array_merge( $args, array( 'size' => $args['size'] * 2 ) ) );\n\n\t$args = get_avatar_data( $id_or_email, $args );\n\n\t$url = $args['url'];\n\n\tif ( ! $url || is_wp_error( $url ) ) {\n\t\treturn false;\n\t}\n\n\t$class = array( 'avatar', 'avatar-' . (int) $args['size'], 'photo' );\n\n\tif ( ! $args['found_avatar'] || $args['force_default'] ) {\n\t\t$class[] = 'avatar-default';\n\t}\n\n\tif ( $args['class'] ) {\n\t\tif ( is_array( $args['class'] ) ) {\n\t\t\t$class = array_merge( $class, $args['class'] );\n\t\t} else {\n\t\t\t$class[] = $args['class'];\n\t\t}\n\t}\n\n\t$avatar = sprintf(\n\t\t\"<img alt='%s' src='%s' srcset='%s' class='%s' height='%d' width='%d' %s/>\",\n\t\tesc_attr( $args['alt'] ),\n\t\tesc_url( $url ),\n\t\tesc_attr( \"$url2x 2x\" ),\n\t\tesc_attr( join( ' ', $class ) ),\n\t\t(int) $args['height'],\n\t\t(int) $args['width'],\n\t\t$args['extra_attr']\n\t);\n\n\t/**\n\t * Filters the avatar to retrieve.\n\t *\n\t * @since 2.5.0\n\t * @since 4.2.0 The `$args` parameter was added.\n\t *\n\t * @param string $avatar      &lt;img&gt; tag for the user's avatar.\n\t * @param mixed  $id_or_email The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,\n\t *                            user email, WP_User object, WP_Post object, or WP_Comment object.\n\t * @param int    $size        Square avatar width and height in pixels to retrieve.\n\t * @param string $default     URL for the default image or a default type. Accepts '404', 'retro', 'monsterid',\n\t *                            'wavatar', 'indenticon','mystery' (or 'mm', or 'mysteryman'), 'blank', or 'gravatar_default'.\n\t *                            Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.\n\t * @param string $alt         Alternative text to use in the avatar image tag. Default empty.\n\t * @param array  $args        Arguments passed to get_avatar_data(), after processing.\n\t */\n\treturn apply_filters( 'get_avatar', $avatar, $id_or_email, $args['size'], $args['default'], $args['alt'], $args );\n}\nendif;\n\nif ( !function_exists( 'wp_text_diff' ) ) :\n/**\n * Displays a human readable HTML representation of the difference between two strings.\n *\n * The Diff is available for getting the changes between versions. The output is\n * HTML, so the primary use is for displaying the changes. If the two strings\n * are equivalent, then an empty string will be returned.\n *\n * The arguments supported and can be changed are listed below.\n *\n * 'title' : Default is an empty string. Titles the diff in a manner compatible\n *\t\twith the output.\n * 'title_left' : Default is an empty string. Change the HTML to the left of the\n *\t\ttitle.\n * 'title_right' : Default is an empty string. Change the HTML to the right of\n *\t\tthe title.\n *\n * @since 2.6.0\n *\n * @see wp_parse_args() Used to change defaults to user defined settings.\n * @uses Text_Diff\n * @uses WP_Text_Diff_Renderer_Table\n *\n * @param string       $left_string  \"old\" (left) version of string\n * @param string       $right_string \"new\" (right) version of string\n * @param string|array $args         Optional. Change 'title', 'title_left', and 'title_right' defaults.\n * @return string Empty string if strings are equivalent or HTML with differences.\n */\nfunction wp_text_diff( $left_string, $right_string, $args = null ) {\n\t$defaults = array( 'title' => '', 'title_left' => '', 'title_right' => '' );\n\t$args = wp_parse_args( $args, $defaults );\n\n\tif ( ! class_exists( 'WP_Text_Diff_Renderer_Table', false ) )\n\t\trequire( ABSPATH . WPINC . '/wp-diff.php' );\n\n\t$left_string  = normalize_whitespace($left_string);\n\t$right_string = normalize_whitespace($right_string);\n\n\t$left_lines  = explode(\"\\n\", $left_string);\n\t$right_lines = explode(\"\\n\", $right_string);\n\t$text_diff = new Text_Diff($left_lines, $right_lines);\n\t$renderer  = new WP_Text_Diff_Renderer_Table( $args );\n\t$diff = $renderer->render($text_diff);\n\n\tif ( !$diff )\n\t\treturn '';\n\n\t$r  = \"<table class='diff'>\\n\";\n\n\tif ( ! empty( $args[ 'show_split_view' ] ) ) {\n\t\t$r .= \"<col class='content diffsplit left' /><col class='content diffsplit middle' /><col class='content diffsplit right' />\";\n\t} else {\n\t\t$r .= \"<col class='content' />\";\n\t}\n\n\tif ( $args['title'] || $args['title_left'] || $args['title_right'] )\n\t\t$r .= \"<thead>\";\n\tif ( $args['title'] )\n\t\t$r .= \"<tr class='diff-title'><th colspan='4'>$args[title]</th></tr>\\n\";\n\tif ( $args['title_left'] || $args['title_right'] ) {\n\t\t$r .= \"<tr class='diff-sub-title'>\\n\";\n\t\t$r .= \"\\t<td></td><th>$args[title_left]</th>\\n\";\n\t\t$r .= \"\\t<td></td><th>$args[title_right]</th>\\n\";\n\t\t$r .= \"</tr>\\n\";\n\t}\n\tif ( $args['title'] || $args['title_left'] || $args['title_right'] )\n\t\t$r .= \"</thead>\\n\";\n\n\t$r .= \"<tbody>\\n$diff\\n</tbody>\\n\";\n\t$r .= \"</table>\";\n\n\treturn $r;\n}\nendif;\n\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40183';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/pluggable.php", "wp-includes/version.php"], "buggy_code_start_loc": [1296, 7], "buggy_code_end_loc": [1297, 8], "fixing_code_start_loc": [1296, 7], "fixing_code_end_loc": [1297, 8], "type": "CWE-20", "message": "In WordPress before 4.7.3 (wp-includes/pluggable.php), control characters can trick redirect URL validation.", "other": {"cve": {"id": "CVE-2017-6815", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-12T01:59:00.207", "lastModified": "2019-03-19T12:43:01.017", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.3 (wp-includes/pluggable.php), control characters can trick redirect URL validation."}, {"lang": "es", "value": "En WordPress en versiones anteriores a 4.7.3 (wp-includes/pluggable.php), los caracteres de control pueden trucar la validaci\u00f3n de la URL de direccionamiento."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.2", "matchCriteriaId": "5A557EFF-02E2-499A-AA55-15F43DB9D820"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3815", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96600", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037959", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/288cd469396cfe7055972b457eb589cea51ce40e", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8766", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/288cd469396cfe7055972b457eb589cea51ce40e"}}