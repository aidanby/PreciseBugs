{"buggy_code": ["<template>\n  <div\n    v-if=\"contact && Object.keys(contact).length !== 0 && (contact.isEnabledUser === 'true' || contact.isEnabledRoom === 'true')\"\n    :class=\"{'is-apps-closed': appsClosed}\"\n    class=\"chat-message-composer\">\n    <div v-if=\"!miniChat\">\n      <div v-show=\"!appsClosed\" class=\"apps-container justify-center\">\n        <div\n          v-for=\"app in composerApplications\"\n          :key=\"app.key\"\n          class=\"apps-item\"\n          @click=\"openAppModal(app)\">\n          <div class=\"apps-item-icon\"><i :class=\"app.iconClass\"></i></div>\n          <div v-if=\"mq==='desktop'\" class=\"apps-item-label\">{{ $t(app.labelKey) }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"composer-container\">\n      <div class=\"composer-box\">\n        <div v-if=\"!miniChat\" class=\"composer-action\">\n          <div class=\"action-emoji\">\n            <i\n              v-exo-tooltip.top=\"$t('exoplatform.chat.emoji.tip')\"\n              class=\"uiIconChatSmile\"\n              @click.prevent.stop=\"showEmojiPanel = !showEmojiPanel\"></i>\n            <div v-show=\"showEmojiPanel\" class=\"composer-emoji-panel popover top\">\n              <div class=\"arrow\"></div>\n              <span\n                v-for=\"emoji in getEmoticons\"\n                :key=\"emoji.keys[0]\"\n                :class=\"emoji.class\"\n                class=\"chat-emoticon\"\n                @click=\"selectEmoji(emoji)\"></span>\n            </div>\n          </div>\n          <div\n            v-exo-tooltip.top=\"$t('exoplatform.chat.collaborative.actions.tip')\"\n            class=\"action-apps\"\n            @click=\"appsClosed = !appsClosed\">\n            <i class=\"uiIconPlusCircled\"></i>\n          </div>\n        </div>\n        <input\n          v-if=\"miniChat\"\n          id=\"messageComposerArea\"\n          ref=\"messageComposerArea\"\n          name=\"messageComposerArea\"\n          type=\"text\"\n          autofocus\n          @keydown.enter=\"preventDefault\"\n          @keypress.enter=\"preventDefault\"\n          @keyup.enter=\"sendMessageWithKey\">\n        <div\n          v-else\n          id=\"messageComposerArea\"\n          ref=\"messageComposerArea\"\n          contenteditable=\"true\"\n          name=\"messageComposerArea\"\n          @keydown.enter=\"preventDefault\"\n          @keypress.enter=\"preventDefault\"\n          @keyup.enter=\"sendMessageWithKey\"\n          @keyup.up=\"editLastMessage\"\n          @keyup=\"resizeTextarea($event)\"\n          @paste=\"paste\"></div>\n        <div\n          v-exo-tooltip.top=\"$t('exoplatform.chat.send')\"\n          v-if=\"!miniChat\"\n          class=\"composer-action\">\n          <div class=\"action-send\" @click=\"sendMessage\">\n            <i class=\"uiIconSend\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <exo-chat-apps-modal\n      v-if=\"appsModal.isOpned\"\n      :app=\"appsModal.app\"\n      :title=\"appsModal.title\"\n      :contact=\"contact\"\n      :room-id=\"contact.room\"\n      @modal-closed=\"appsModal.isOpned = false\" />\n  </div>\n</template>\n\n<script>\nimport * as chatServices from '../chatServices';\nimport {composerApplications, EMOTICONS} from '../extension';\nimport {chatConstants} from '../chatConstants';\nimport {getUserAvatar} from '../chatServices';\n\nexport default {\n  props: {\n    miniChat: {\n      type: Boolean,\n      default: false\n    },\n    contact: {\n      type: Object,\n      default: function () {\n        return {};\n      }\n    },\n    userSettings: {\n      type: Object,\n      default: function () {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      appsModal: {\n        title: '',\n        isOpned: false\n      },\n      appsClosed: true,\n      composerApplications: [],\n      showEmojiPanel: false,\n      participants: [],\n      mentionedUsers: [],\n      userAvatar: ''\n    };\n  },\n  computed: {\n    getEmoticons() {\n      if (eXo && eXo.chat && eXo.chat.room && eXo.chat.room.extraEmoticons) {\n        return EMOTICONS.concat(eXo.chat.room.extraEmoticons);\n      } else if (EMOTICONS) {\n        return EMOTICONS;\n      } else {\n        return [];\n      }\n    },\n  },\n  watch: {\n    userSettings() {\n      this.composerApplications = composerApplications;\n    }\n  },\n  updated() {\n    if (this.contact) {\n      if (this.contact.isEnabledUser === 'true' || this.contact.isEnabledUser === 'null') {\n        this.$nextTick(() => {\n          this.$refs.messageComposerArea.focus();\n          this.composerApplications.forEach(application => {\n            if (application.mount) {\n              application.mount($, chatServices);\n            }\n          });\n          this.initSuggester();\n        });\n      }\n    }\n  },\n  created() {\n    document.addEventListener('keyup', this.closeApps);\n    document.addEventListener('click', this.closeEmojiPanel);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_SEND, this.putFocusOnComposer);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_DELETE, this.putFocusOnComposer);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_QUOTE, this.quoteMessage);\n  },\n  mounted() {\n    this.composerApplications = composerApplications;\n  },\n  destroyed() {\n    document.removeEventListener('keyup', this.closeApps);\n    document.removeEventListener('click', this.closeEmojiPanel);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_SEND, this.putFocusOnComposer);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_DELETE, this.putFocusOnComposer);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_QUOTE, this.quoteMessage);\n  },\n  methods: {\n    initSuggester() {\n      const $messageSuggestor = $('#messageComposerArea');\n      const component = this;\n      const suggesterData = {\n        type: 'mix',\n        create: false,\n        createOnBlur: false,\n        highlight: false,\n        openOnFocus: false,\n        sourceProviders: ['exo:chatuser'],\n        valueField: 'name',\n        labelField: 'fullname',\n        searchField: ['fullname', 'name'],\n        closeAfterSelect: true,\n        dropdownParent: 'body',\n        hideSelected: true,\n        renderMenuItem: function (item) {\n          const avatar = getUserAvatar(item.name);\n          const defaultAvatar = '/chat/img/room-default.jpg';\n          return `<img src=\"${avatar}\" onerror=\"this.src='${defaultAvatar}'\" width=\"20px\" height=\"20px\">\n                      ${chatServices.escapeHtml(item.fullname)}<span style=\"float: right\" class=\"chat-status-task chat-status-'+item.status+'\"></span>`;\n        },\n        /* eslint-disable no-template-curly-in-string */\n        renderItem: '<div class=\"uiMention\">' +\n                '@${fullname}' +\n                '      <span class=\"remove\"><i class=\"uiIconClose\"></i></span>' +\n                '      </div>',\n        providers: {\n          'exo:chatuser': function (query, callback) {\n            if (!query || !query.trim().length) {\n              return callback();\n            }\n            chatServices.getUsersToMention(eXo.chat.userSettings, component.contact, query).then(function (data) {\n              if (data && data.users) {\n                chatServices.getRoomParticipantsToSuggest(data.users).then(users => {\n                  for (let i = 0; i < users.length; i++) {\n                    const index = component.participants.findIndex(user => user.name === users[i].name);\n                    if (index === -1){\n                      component.participants.push(users[i]);\n                    }\n                  }\n                  callback(users.filter(user => user.name !== eXo.chat.userSettings.username));\n                });\n              }\n            });\n          }\n        },\n      };\n      //init suggester\n      $messageSuggestor.suggester(suggesterData);\n    },\n    closeApps(e) {\n      const ESC_KEY = 27;\n      if (e.keyCode === ESC_KEY) {\n        this.appsClosed = true;\n      }\n    },\n    closeEmojiPanel() {\n      this.showEmojiPanel = false;\n    },\n    selectEmoji(emoji) {\n      let emojiKey = emoji.keys[0];\n      const $composer = $(this.$refs.messageComposerArea);\n      emojiKey = ` ${emojiKey} `;\n      $composer.insertAtCaret(emojiKey);\n      this.closeEmojiPanel();\n    },\n    preventDefault(event) {\n      if (event.keyCode === chatConstants.ENTER_CODE_KEY) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n    sendMessage() {\n      let newMessage = this.$refs.messageComposerArea.innerHTML;\n      if (newMessage.indexOf('@') > -1) {\n        newMessage = this.checkMention(newMessage);\n      }\n      if (!newMessage || !newMessage.trim()) {\n        return;\n      }\n      const message = {\n        message: newMessage.trim().replace(/(&nbsp;|<br>|<br \\/>)$/g, ''),\n        room: this.contact.room,\n        clientId: new Date().getTime().toString(),\n        timestamp: Date.now(),\n        user: eXo.chat.userSettings.username\n      };\n      newMessage = newMessage.replace(/<img src=\"data:image\\/.*;base64[^>]*>/g,'');\n      let found = false;\n      if (!this.miniChat) {\n        // shortcuts for specific applications actions\n        this.composerApplications.forEach(application => {\n          if (application.shortcutMatches && application.shortcutMatches(newMessage)) {\n            if (application.shortcutCallback) {\n              found = true;\n              application.shortcutCallback(chatServices, $, newMessage, this.contact);\n            } else if (application.shortcutTriggeredEvent) {\n              found = true;\n              document.dispatchEvent(new CustomEvent(application.shortcutTriggeredEvent, {\n                detail: {\n                  msg: newMessage,\n                  contact: this.contact\n                }\n              }));\n            }\n          }\n        });\n      }\n      if (!found) {\n        this.$emit('message-written', message);\n      }\n      chatServices.getReceiversForMessagePushNotif(this.userSettings,this.contact.room,).then(data=>{\n        chatServices.sendMessageReceivedNotification(this.contact.room, this.contact.fullName,message.message,data);\n      });\n      this.$refs.messageComposerArea.innerHTML = '';\n    },\n    sendMessageWithKey(event) {\n      if (event && event.keyCode === chatConstants.ENTER_CODE_KEY) {\n        if (event.ctrlKey || event.altKey || event.shiftKey) {\n          $(this.$refs.messageComposerArea).insertAtCaret('\\n');\n        } else {\n          this.sendMessage();\n        }\n      }\n    },\n    quoteMessage(e) {\n      const quotedMessage = e.detail;\n      const composer = $(this.$refs.messageComposerArea);\n      if (!quotedMessage) {\n        return;\n      }\n      let messageToSend = quotedMessage.msg ? quotedMessage.msg : quotedMessage.message;\n      if (!messageToSend) {\n        return;\n      }\n      messageToSend = messageToSend.replace(/<br\\/>/g, '\\n');\n      messageToSend = $('<div />').html(messageToSend).text();\n      messageToSend = `[quote=${quotedMessage.fullname}] ${messageToSend} [/quote]`;\n      composer.insertAtCaret(messageToSend);\n    },\n    openAppModal(app) {\n      this.appsClosed = true;\n      this.appsModal.app = app;\n      this.appsModal.title = this.$t(app.labelKey);\n      this.appsModal.isOpned = true;\n    },\n    editLastMessage() {\n      const newMessage = this.$refs.messageComposerArea.innerHTML;\n\n      if (!newMessage || !newMessage.trim().length) {\n        this.$refs.messageComposerArea.innerHTML = '';\n        document.dispatchEvent(new CustomEvent(chatConstants.ACTION_MESSAGE_EDIT_LAST));\n      }\n    },\n    putFocusOnComposer() {\n      this.$refs.messageComposerArea.focus();\n    },\n    resizeTextarea(e) {\n      if (this.mq !== 'mobile') {return;}\n      const BORDER_SIZE = 2;\n      const INITIAL_HEIGHT = '40px';\n      const elem = e.target;\n      elem.style.height = INITIAL_HEIGHT;\n      elem.style.height = `${elem.scrollHeight + BORDER_SIZE}px`;\n      elem.scrollTop = elem.scrollHeight;\n    },\n    checkMention(message) {\n      message = $('<div />').html(message).text();\n      message = message.replace(/\\s\\s+/g, ' ');\n      for (let i = 0; i < this.participants.length; i++) {\n        if (message.includes(`@${this.participants[i].fullname}`) ){\n          this.mentionedUsers.push(this.participants[i].name);\n          const profil = chatServices.getUserProfileLink(this.participants[i].name);\n          const html = `<a href='${profil}' target='_blank'>@${this.participants[i].fullname}</a>`;\n          message = message.replace(`@${this.participants[i].fullname}`, html);\n        }\n      }\n      chatServices.sendMentionNotification(this.contact.room, this.contact.fullName, this.mentionedUsers);\n      this.mentionedUsers = [];\n      return message;\n    },\n    paste(e) {\n      // consider the first item (can be easily extended for multiple items)\n      const item = e.clipboardData.items[0];\n      //test if the type of item e\n      if (item.type.indexOf('image') === 0) {\n        const pastedImage = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          this.$refs.messageComposerArea.src = event.target.result;\n        };\n        reader.readAsDataURL(pastedImage);\n      } else {\n        // cancel paste\n        e.preventDefault();\n        // get text representation of clipboard\n        this.text = (e.originalEvent || e).clipboardData.getData('text/plain');\n        // insert text manually\n        $(this.$refs.messageComposerArea).insertAtCaret(this.text);\n      }\n    },\n  }\n};\n</script>"], "fixing_code": ["<template>\n  <div\n    v-if=\"contact && Object.keys(contact).length !== 0 && (contact.isEnabledUser === 'true' || contact.isEnabledRoom === 'true')\"\n    :class=\"{'is-apps-closed': appsClosed}\"\n    class=\"chat-message-composer\">\n    <div v-if=\"!miniChat\">\n      <div v-show=\"!appsClosed\" class=\"apps-container justify-center\">\n        <div\n          v-for=\"app in composerApplications\"\n          :key=\"app.key\"\n          class=\"apps-item\"\n          @click=\"openAppModal(app)\">\n          <div class=\"apps-item-icon\"><i :class=\"app.iconClass\"></i></div>\n          <div v-if=\"mq==='desktop'\" class=\"apps-item-label\">{{ $t(app.labelKey) }}</div>\n        </div>\n      </div>\n    </div>\n    <div class=\"composer-container\">\n      <div class=\"composer-box\">\n        <div v-if=\"!miniChat\" class=\"composer-action\">\n          <div class=\"action-emoji\">\n            <i\n              v-exo-tooltip.top=\"$t('exoplatform.chat.emoji.tip')\"\n              class=\"uiIconChatSmile\"\n              @click.prevent.stop=\"showEmojiPanel = !showEmojiPanel\"></i>\n            <div v-show=\"showEmojiPanel\" class=\"composer-emoji-panel popover top\">\n              <div class=\"arrow\"></div>\n              <span\n                v-for=\"emoji in getEmoticons\"\n                :key=\"emoji.keys[0]\"\n                :class=\"emoji.class\"\n                class=\"chat-emoticon\"\n                @click=\"selectEmoji(emoji)\"></span>\n            </div>\n          </div>\n          <div\n            v-exo-tooltip.top=\"$t('exoplatform.chat.collaborative.actions.tip')\"\n            class=\"action-apps\"\n            @click=\"appsClosed = !appsClosed\">\n            <i class=\"uiIconPlusCircled\"></i>\n          </div>\n        </div>\n        <input\n          v-if=\"miniChat\"\n          id=\"messageComposerArea\"\n          ref=\"messageComposerArea\"\n          name=\"messageComposerArea\"\n          type=\"text\"\n          autofocus\n          @keydown.enter=\"preventDefault\"\n          @keypress.enter=\"preventDefault\"\n          @keyup.enter=\"sendMessageWithKey\">\n        <div\n          v-else\n          id=\"messageComposerArea\"\n          ref=\"messageComposerArea\"\n          contenteditable=\"true\"\n          name=\"messageComposerArea\"\n          @keydown.enter=\"preventDefault\"\n          @keypress.enter=\"preventDefault\"\n          @keyup.enter=\"sendMessageWithKey\"\n          @keyup.up=\"editLastMessage\"\n          @keyup=\"resizeTextarea($event)\"\n          @paste=\"paste\"></div>\n        <div\n          v-exo-tooltip.top=\"$t('exoplatform.chat.send')\"\n          v-if=\"!miniChat\"\n          class=\"composer-action\">\n          <div class=\"action-send\" @click=\"sendMessage\">\n            <i class=\"uiIconSend\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n    <exo-chat-apps-modal\n      v-if=\"appsModal.isOpned\"\n      :app=\"appsModal.app\"\n      :title=\"appsModal.title\"\n      :contact=\"contact\"\n      :room-id=\"contact.room\"\n      @modal-closed=\"appsModal.isOpned = false\" />\n  </div>\n</template>\n\n<script>\nimport * as chatServices from '../chatServices';\nimport {composerApplications, EMOTICONS} from '../extension';\nimport {chatConstants} from '../chatConstants';\nimport {getUserAvatar} from '../chatServices';\n\nexport default {\n  props: {\n    miniChat: {\n      type: Boolean,\n      default: false\n    },\n    contact: {\n      type: Object,\n      default: function () {\n        return {};\n      }\n    },\n    userSettings: {\n      type: Object,\n      default: function () {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      appsModal: {\n        title: '',\n        isOpned: false\n      },\n      appsClosed: true,\n      composerApplications: [],\n      showEmojiPanel: false,\n      participants: [],\n      mentionedUsers: [],\n      userAvatar: ''\n    };\n  },\n  computed: {\n    getEmoticons() {\n      if (eXo && eXo.chat && eXo.chat.room && eXo.chat.room.extraEmoticons) {\n        return EMOTICONS.concat(eXo.chat.room.extraEmoticons);\n      } else if (EMOTICONS) {\n        return EMOTICONS;\n      } else {\n        return [];\n      }\n    },\n  },\n  watch: {\n    userSettings() {\n      this.composerApplications = composerApplications;\n    }\n  },\n  updated() {\n    if (this.contact) {\n      if (this.contact.isEnabledUser === 'true' || this.contact.isEnabledUser === 'null') {\n        this.$nextTick(() => {\n          this.$refs.messageComposerArea.focus();\n          this.composerApplications.forEach(application => {\n            if (application.mount) {\n              application.mount($, chatServices);\n            }\n          });\n          this.initSuggester();\n        });\n      }\n    }\n  },\n  created() {\n    document.addEventListener('keyup', this.closeApps);\n    document.addEventListener('click', this.closeEmojiPanel);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_SEND, this.putFocusOnComposer);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_DELETE, this.putFocusOnComposer);\n    document.addEventListener(chatConstants.ACTION_MESSAGE_QUOTE, this.quoteMessage);\n  },\n  mounted() {\n    this.composerApplications = composerApplications;\n  },\n  destroyed() {\n    document.removeEventListener('keyup', this.closeApps);\n    document.removeEventListener('click', this.closeEmojiPanel);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_SEND, this.putFocusOnComposer);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_DELETE, this.putFocusOnComposer);\n    document.removeEventListener(chatConstants.ACTION_MESSAGE_QUOTE, this.quoteMessage);\n  },\n  methods: {\n    initSuggester() {\n      const $messageSuggestor = $('#messageComposerArea');\n      const component = this;\n      const suggesterData = {\n        type: 'mix',\n        create: false,\n        createOnBlur: false,\n        highlight: false,\n        openOnFocus: false,\n        sourceProviders: ['exo:chatuser'],\n        valueField: 'name',\n        labelField: 'fullname',\n        searchField: ['fullname', 'name'],\n        closeAfterSelect: true,\n        dropdownParent: 'body',\n        hideSelected: true,\n        renderMenuItem: function (item) {\n          const avatar = getUserAvatar(item.name);\n          const defaultAvatar = '/chat/img/room-default.jpg';\n          return `<img src=\"${avatar}\" onerror=\"this.src='${defaultAvatar}'\" width=\"20px\" height=\"20px\">\n                      ${chatServices.escapeHtml(item.fullname)}<span style=\"float: right\" class=\"chat-status-task chat-status-'+item.status+'\"></span>`;\n        },\n        /* eslint-disable no-template-curly-in-string */\n        renderItem: '<div class=\"uiMention\">' +\n                '@${fullname}' +\n                '      <span class=\"remove\"><i class=\"uiIconClose\"></i></span>' +\n                '      </div>',\n        providers: {\n          'exo:chatuser': function (query, callback) {\n            if (!query || !query.trim().length) {\n              return callback();\n            }\n            chatServices.getUsersToMention(eXo.chat.userSettings, component.contact, query).then(function (data) {\n              if (data && data.users) {\n                chatServices.getRoomParticipantsToSuggest(data.users).then(users => {\n                  for (let i = 0; i < users.length; i++) {\n                    const index = component.participants.findIndex(user => user.name === users[i].name);\n                    if (index === -1){\n                      component.participants.push(users[i]);\n                    }\n                  }\n                  callback(users.filter(user => user.name !== eXo.chat.userSettings.username));\n                });\n              }\n            });\n          }\n        },\n      };\n      //init suggester\n      $messageSuggestor.suggester(suggesterData);\n    },\n    closeApps(e) {\n      const ESC_KEY = 27;\n      if (e.keyCode === ESC_KEY) {\n        this.appsClosed = true;\n      }\n    },\n    closeEmojiPanel() {\n      this.showEmojiPanel = false;\n    },\n    selectEmoji(emoji) {\n      let emojiKey = emoji.keys[0];\n      const $composer = $(this.$refs.messageComposerArea);\n      emojiKey = ` ${emojiKey} `;\n      $composer.insertAtCaret(emojiKey);\n      this.closeEmojiPanel();\n    },\n    preventDefault(event) {\n      if (event.keyCode === chatConstants.ENTER_CODE_KEY) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n    sendMessage() {\n      let newMessage = this.$refs.messageComposerArea.innerHTML;\n      if (newMessage.indexOf('@') > -1) {\n        newMessage = this.checkMention(newMessage);\n      }\n      if (!newMessage || !newMessage.trim()) {\n        return;\n      }\n      const message = {\n        message: newMessage.trim().replace(/(&nbsp;|<br>|<br \\/>)$/g, ''),\n        room: this.contact.room,\n        clientId: new Date().getTime().toString(),\n        timestamp: Date.now(),\n        user: eXo.chat.userSettings.username\n      };\n      newMessage = newMessage.replace(/<img src=\"data:image\\/.*;base64[^>]*>/g,'');\n      let found = false;\n      if (!this.miniChat) {\n        // shortcuts for specific applications actions\n        this.composerApplications.forEach(application => {\n          if (application.shortcutMatches && application.shortcutMatches(newMessage)) {\n            if (application.shortcutCallback) {\n              found = true;\n              application.shortcutCallback(chatServices, $, newMessage, this.contact);\n            } else if (application.shortcutTriggeredEvent) {\n              found = true;\n              document.dispatchEvent(new CustomEvent(application.shortcutTriggeredEvent, {\n                detail: {\n                  msg: newMessage,\n                  contact: this.contact\n                }\n              }));\n            }\n          }\n        });\n      }\n      if (!found) {\n        this.$emit('message-written', message);\n      }\n      chatServices.getReceiversForMessagePushNotif(this.userSettings,this.contact.room,).then(data=>{\n        chatServices.sendMessageReceivedNotification(this.contact.room, this.contact.fullName,message.message,data);\n      });\n      this.$refs.messageComposerArea.innerHTML = '';\n    },\n    sendMessageWithKey(event) {\n      if (event && event.keyCode === chatConstants.ENTER_CODE_KEY) {\n        if (event.ctrlKey || event.altKey || event.shiftKey) {\n          $(this.$refs.messageComposerArea).insertAtCaret('\\n');\n        } else {\n          this.sendMessage();\n        }\n      }\n    },\n    quoteMessage(e) {\n      const quotedMessage = e.detail;\n      const composer = $(this.$refs.messageComposerArea);\n      if (!quotedMessage) {\n        return;\n      }\n      let messageToSend = quotedMessage.msg ? quotedMessage.msg : quotedMessage.message;\n      if (!messageToSend) {\n        return;\n      }\n      messageToSend = messageToSend.replace(/<br\\/>/g, '\\n');\n      messageToSend = $('<div />').html(messageToSend).text();\n      messageToSend = `[quote=${quotedMessage.fullname}] ${messageToSend} [/quote]`;\n      composer.insertAtCaret(messageToSend);\n    },\n    openAppModal(app) {\n      this.appsClosed = true;\n      this.appsModal.app = app;\n      this.appsModal.title = this.$t(app.labelKey);\n      this.appsModal.isOpned = true;\n    },\n    editLastMessage() {\n      const newMessage = this.$refs.messageComposerArea.innerHTML;\n\n      if (!newMessage || !newMessage.trim().length) {\n        this.$refs.messageComposerArea.innerHTML = '';\n        document.dispatchEvent(new CustomEvent(chatConstants.ACTION_MESSAGE_EDIT_LAST));\n      }\n    },\n    putFocusOnComposer() {\n      this.$refs.messageComposerArea.focus();\n    },\n    resizeTextarea(e) {\n      if (this.mq !== 'mobile') {return;}\n      const BORDER_SIZE = 2;\n      const INITIAL_HEIGHT = '40px';\n      const elem = e.target;\n      elem.style.height = INITIAL_HEIGHT;\n      elem.style.height = `${elem.scrollHeight + BORDER_SIZE}px`;\n      elem.scrollTop = elem.scrollHeight;\n    },\n    checkMention(message) {\n      message = $('<div />').html(message).text();\n      message = message.replace(/\\s\\s+/g, ' ');\n      message = this.encodeHTMLEntities(message);\n      for (let i = 0; i < this.participants.length; i++) {\n        if (message.includes(`@${this.participants[i].fullname}`) ){\n          this.mentionedUsers.push(this.participants[i].name);\n          const profil = chatServices.getUserProfileLink(this.participants[i].name);\n          const html = `<a href='${profil}' target='_blank'>@${this.participants[i].fullname}</a>`;\n          message = message.replace(`@${this.participants[i].fullname}`, html);\n        }\n      }\n      chatServices.sendMentionNotification(this.contact.room, this.contact.fullName, this.mentionedUsers);\n      this.mentionedUsers = [];\n      return message;\n    },\n    encodeHTMLEntities(text) {\n      const textArea = document.createElement('p');\n      textArea.innerText = text;\n      return textArea.innerHTML;\n    },\n    paste(e) {\n      // consider the first item (can be easily extended for multiple items)\n      const item = e.clipboardData.items[0];\n      //test if the type of item e\n      if (item.type.indexOf('image') === 0) {\n        const pastedImage = item.getAsFile();\n        const reader = new FileReader();\n        reader.onload = function (event) {\n          this.$refs.messageComposerArea.src = event.target.result;\n        };\n        reader.readAsDataURL(pastedImage);\n      } else {\n        // cancel paste\n        e.preventDefault();\n        // get text representation of clipboard\n        this.text = this.encodeHTMLEntities((e.originalEvent || e).clipboardData.getData('text/plain'));\n        // insert text manually\n        $(this.$refs.messageComposerArea).insertAtCaret(this.text);\n      }\n    },\n  }\n};\n</script>\n"], "filenames": ["application/src/main/webapp/vue-app/components/ExoChatMessageComposer.vue"], "buggy_code_start_loc": [342], "buggy_code_end_loc": [378], "fixing_code_start_loc": [343], "fixing_code_end_loc": [384], "type": "CWE-79", "message": "A vulnerability classified as problematic has been found in eXo Chat Application. Affected is an unknown function of the file application/src/main/webapp/vue-app/components/ExoChatMessageComposer.vue of the component Mention Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 3.3.0-20220417 is able to address this issue. The name of the patch is 26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-220212.", "other": {"cve": {"id": "CVE-2022-4902", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-06T19:15:10.090", "lastModified": "2023-02-14T18:22:15.847", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in eXo Chat Application. Affected is an unknown function of the file application/src/main/webapp/vue-app/components/ExoChatMessageComposer.vue of the component Mention Handler. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 3.3.0-20220417 is able to address this issue. The name of the patch is 26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-220212."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exoplatform:chat_application:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-202204117", "matchCriteriaId": "6230238C-46D4-43A0-AA2C-B78259EA4090"}]}]}], "references": [{"url": "https://community.exoplatform.com/portal/dw/tasks/taskDetail/56304", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Vendor Advisory"]}, {"url": "https://github.com/exoplatform/chat-application/commit/26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/exoplatform/chat-application/pull/485", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/exoplatform/chat-application/releases/tag/3.3.0-20220417", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.220212", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220212", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/exoplatform/chat-application/commit/26bf307d3658d1403cfd5c3ad423ce4c4d1cb2dc"}}