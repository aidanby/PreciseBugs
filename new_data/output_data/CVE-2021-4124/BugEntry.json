{"buggy_code": ["// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar textroom = null;\nvar opaqueId = \"textroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar participants = {}\nvar transactions = {}\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to TextRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.textroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\ttextroom = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + textroom.getPlugin() + \", id=\" + textroom.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup the DataChannel\n\t\t\t\t\t\t\t\t\tvar body = { request: \"setup\" };\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Sending message:\", body);\n\t\t\t\t\t\t\t\t\ttextroom.send({ message: body });\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t// Answer\n\t\t\t\t\t\t\t\t\t\ttextroom.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audio: false, video: false, data: true },\t// We only use datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"ack\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\ttextroom.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t// Prompt for a display name to join the default room\n\t\t\t\t\t\t\t\t\t$('#roomjoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t//~ $('#datarecv').val(data);\n\t\t\t\t\t\t\t\t\tvar json = JSON.parse(data);\n\t\t\t\t\t\t\t\t\tvar transaction = json[\"transaction\"];\n\t\t\t\t\t\t\t\t\tif(transactions[transaction]) {\n\t\t\t\t\t\t\t\t\t\t// Someone was waiting for this\n\t\t\t\t\t\t\t\t\t\ttransactions[transaction](json);\n\t\t\t\t\t\t\t\t\t\tdelete transactions[transaction];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar what = json[\"textroom\"];\n\t\t\t\t\t\t\t\t\tif(what === \"message\") {\n\t\t\t\t\t\t\t\t\t\t// Incoming message: public or private?\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar from = json[\"from\"];\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\tvar whisper = json[\"whisper\"];\n\t\t\t\t\t\t\t\t\t\tvar sender = participants[from] ? participants[from] : escapeXmlTags(json[\"display\"]);\n\t\t\t\t\t\t\t\t\t\tif(whisper === true) {\n\t\t\t\t\t\t\t\t\t\t\t// Private message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <b>[whisper from ' + sender + ']</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Public message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p>[' + dateString + '] <b>' + sender + ':</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"announcement\") {\n\t\t\t\t\t\t\t\t\t\t// Room announcement\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <i>' + msg + '</i>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"join\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody joined\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar display = json[\"display\"];\n\t\t\t\t\t\t\t\t\t\tparticipants[username] = escapeXmlTags(display ? display : username);\n\t\t\t\t\t\t\t\t\t\tif(username !== myid && $('#rp' + username).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + username + '\" class=\"list-group-item\">' + participants[username] + '</li>');\n\t\t\t\t\t\t\t\t\t\t\t$('#rp' + username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' joined</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"leave\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody left\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' left</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t} else if(what === \"kicked\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody was kicked\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' was kicked from the room</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t\tif(username === myid) {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"You have been kicked from the room\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\tif(json[\"room\"] !== myroom)\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t// Room was destroyed, goodbye!\n\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#datasend').attr('disabled', true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tmyid = randomString(12);\n\t\tvar transaction = randomString(12);\n\t\tvar register = {\n\t\t\ttextroom: \"join\",\n\t\t\ttransaction: transaction,\n\t\t\troom: myroom,\n\t\t\tusername: myid,\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = escapeXmlTags(username);\n\t\ttransactions[transaction] = function(response) {\n\t\t\tif(response[\"textroom\"] === \"error\") {\n\t\t\t\t// Something went wrong\n\t\t\t\tif(response[\"error_code\"] === 417) {\n\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.textroom.jcfg</code> \" +\n\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(response[\"error\"]);\n\t\t\t\t}\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We're in\n\t\t\t$('#roomjoin').hide();\n\t\t\t$('#room').removeClass('hide').show();\n\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t$('#chatroom').css('height', ($(window).height()-420)+\"px\");\n\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t// Any participants already in?\n\t\t\tconsole.log(\"Participants:\", response.participants);\n\t\t\tif(response.participants && response.participants.length > 0) {\n\t\t\t\tfor(var i in response.participants) {\n\t\t\t\t\tvar p = response.participants[i];\n\t\t\t\t\tparticipants[p.username] = escapeXmlTags(p.display ? p.display : p.username);\n\t\t\t\t\tif(p.username !== myid && $('#rp' + p.username).length === 0) {\n\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t$('#list').append('<li id=\"rp' + p.username + '\" class=\"list-group-item\">' + participants[p.username] + '</li>');\n\t\t\t\t\t\t$('#rp' + p.username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[p.username] + ' joined</i></p>');\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttextroom.data({\n\t\t\ttext: JSON.stringify(register),\n\t\t\terror: function(reason) {\n\t\t\t\tbootbox.alert(reason);\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction sendPrivateMsg(username) {\n\tvar display = participants[username];\n\tif(!display)\n\t\treturn;\n\tbootbox.prompt(\"Private message to \" + display, function(result) {\n\t\tif(result && result !== \"\") {\n\t\t\tvar message = {\n\t\t\t\ttextroom: \"message\",\n\t\t\t\ttransaction: randomString(12),\n\t\t\t\troom: myroom,\n\t\t\t\tto: username,\n\t\t\t\ttext: result\n\t\t\t};\n\t\t\ttextroom.data({\n\t\t\t\ttext: JSON.stringify(message),\n\t\t\t\terror: function(reason) { bootbox.alert(reason); },\n\t\t\t\tsuccess: function() {\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + getDateString() + '] <b>[whisper to ' + display + ']</b> ' + result);\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\tvar message = {\n\t\ttextroom: \"message\",\n\t\ttransaction: randomString(12),\n\t\troom: myroom,\n \t\ttext: data,\n\t};\n\t// Note: messages are always acknowledged by default. This means that you'll\n\t// always receive a confirmation back that the message has been received by the\n\t// server and forwarded to the recipients. If you do not want this to happen,\n\t// just add an ack:false property to the message above, and server won't send\n\t// you a response (meaning you just have to hope it succeeded).\n\ttextroom.data({\n\t\ttext: JSON.stringify(message),\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); }\n\t});\n}\n\n// Helper to format times\nfunction getDateString(jsonDate) {\n\tvar when = new Date();\n\tif(jsonDate) {\n\t\twhen = new Date(Date.parse(jsonDate));\n\t}\n\tvar dateString =\n\t\t\t(\"0\" + when.getUTCHours()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCMinutes()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCSeconds()).slice(-2);\n\treturn dateString;\n}\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n"], "fixing_code": ["// We make use of this 'server' variable to provide the address of the\n// REST Janus API. By default, in this example we assume that Janus is\n// co-located with the web server hosting the HTML pages but listening\n// on a different port (8088, the default for HTTP in Janus), which is\n// why we make use of the 'window.location.hostname' base address. Since\n// Janus can also do HTTPS, and considering we don't really want to make\n// use of HTTP for Janus if your demos are served on HTTPS, we also rely\n// on the 'window.location.protocol' prefix to build the variable, in\n// particular to also change the port used to contact Janus (8088 for\n// HTTP and 8089 for HTTPS, if enabled).\n// In case you place Janus behind an Apache frontend (as we did on the\n// online demos at http://janus.conf.meetecho.com) you can just use a\n// relative path for the variable, e.g.:\n//\n// \t\tvar server = \"/janus\";\n//\n// which will take care of this on its own.\n//\n//\n// If you want to use the WebSockets frontend to Janus, instead, you'll\n// have to pass a different kind of address, e.g.:\n//\n// \t\tvar server = \"ws://\" + window.location.hostname + \":8188\";\n//\n// Of course this assumes that support for WebSockets has been built in\n// when compiling the server. WebSockets support has not been tested\n// as much as the REST API, so handle with care!\n//\n//\n// If you have multiple options available, and want to let the library\n// autodetect the best way to contact your server (or pool of servers),\n// you can also pass an array of servers, e.g., to provide alternative\n// means of access (e.g., try WebSockets first and, if that fails, fall\n// back to plain HTTP) or just have failover servers:\n//\n//\t\tvar server = [\n//\t\t\t\"ws://\" + window.location.hostname + \":8188\",\n//\t\t\t\"/janus\"\n//\t\t];\n//\n// This will tell the library to try connecting to each of the servers\n// in the presented order. The first working server will be used for\n// the whole session.\n//\nvar server = null;\nif(window.location.protocol === 'http:')\n\tserver = \"http://\" + window.location.hostname + \":8088/janus\";\nelse\n\tserver = \"https://\" + window.location.hostname + \":8089/janus\";\n\nvar janus = null;\nvar textroom = null;\nvar opaqueId = \"textroomtest-\"+Janus.randomString(12);\n\nvar myroom = 1234;\t// Demo room\nif(getQueryStringValue(\"room\") !== \"\")\n\tmyroom = parseInt(getQueryStringValue(\"room\"));\nvar myusername = null;\nvar myid = null;\nvar participants = {}\nvar transactions = {}\n\n$(document).ready(function() {\n\t// Initialize the library (all console debuggers enabled)\n\tJanus.init({debug: \"all\", callback: function() {\n\t\t// Use a button to start the demo\n\t\t$('#start').one('click', function() {\n\t\t\t$(this).attr('disabled', true).unbind('click');\n\t\t\t// Make sure the browser supports WebRTC\n\t\t\tif(!Janus.isWebrtcSupported()) {\n\t\t\t\tbootbox.alert(\"No WebRTC support... \");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Create session\n\t\t\tjanus = new Janus(\n\t\t\t\t{\n\t\t\t\t\tserver: server,\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\t// Attach to TextRoom plugin\n\t\t\t\t\t\tjanus.attach(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tplugin: \"janus.plugin.textroom\",\n\t\t\t\t\t\t\t\topaqueId: opaqueId,\n\t\t\t\t\t\t\t\tsuccess: function(pluginHandle) {\n\t\t\t\t\t\t\t\t\t$('#details').remove();\n\t\t\t\t\t\t\t\t\ttextroom = pluginHandle;\n\t\t\t\t\t\t\t\t\tJanus.log(\"Plugin attached! (\" + textroom.getPlugin() + \", id=\" + textroom.getId() + \")\");\n\t\t\t\t\t\t\t\t\t// Setup the DataChannel\n\t\t\t\t\t\t\t\t\tvar body = { request: \"setup\" };\n\t\t\t\t\t\t\t\t\tJanus.debug(\"Sending message:\", body);\n\t\t\t\t\t\t\t\t\ttextroom.send({ message: body });\n\t\t\t\t\t\t\t\t\t$('#start').removeAttr('disabled').html(\"Stop\")\n\t\t\t\t\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t\t\t\t\t$(this).attr('disabled', true);\n\t\t\t\t\t\t\t\t\t\t\tjanus.destroy();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"  -- Error attaching plugin...\", error);\n\t\t\t\t\t\t\t\t\tbootbox.alert(\"Error attaching plugin... \" + error);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ticeState: function(state) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"ICE state changed to \" + state);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmediaState: function(medium, on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\twebrtcState: function(on) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonmessage: function(msg, jsep) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\" ::: Got a message :::\", msg);\n\t\t\t\t\t\t\t\t\tif(msg[\"error\"]) {\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(msg[\"error\"]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(jsep) {\n\t\t\t\t\t\t\t\t\t\t// Answer\n\t\t\t\t\t\t\t\t\t\ttextroom.createAnswer(\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tjsep: jsep,\n\t\t\t\t\t\t\t\t\t\t\t\tmedia: { audio: false, video: false, data: true },\t// We only use datachannels\n\t\t\t\t\t\t\t\t\t\t\t\tsuccess: function(jsep) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.debug(\"Got SDP!\", jsep);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar body = { request: \"ack\" };\n\t\t\t\t\t\t\t\t\t\t\t\t\ttextroom.send({ message: body, jsep: jsep });\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tJanus.error(\"WebRTC error:\", error);\n\t\t\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"WebRTC error... \" + error.message);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondataopen: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.log(\"The DataChannel is available!\");\n\t\t\t\t\t\t\t\t\t// Prompt for a display name to join the default room\n\t\t\t\t\t\t\t\t\t$('#roomjoin').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#registernow').removeClass('hide').show();\n\t\t\t\t\t\t\t\t\t$('#register').click(registerUsername);\n\t\t\t\t\t\t\t\t\t$('#username').focus();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tondata: function(data) {\n\t\t\t\t\t\t\t\t\tJanus.debug(\"We got data from the DataChannel!\", data);\n\t\t\t\t\t\t\t\t\t//~ $('#datarecv').val(data);\n\t\t\t\t\t\t\t\t\tvar json = JSON.parse(data);\n\t\t\t\t\t\t\t\t\tvar transaction = json[\"transaction\"];\n\t\t\t\t\t\t\t\t\tif(transactions[transaction]) {\n\t\t\t\t\t\t\t\t\t\t// Someone was waiting for this\n\t\t\t\t\t\t\t\t\t\ttransactions[transaction](json);\n\t\t\t\t\t\t\t\t\t\tdelete transactions[transaction];\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar what = json[\"textroom\"];\n\t\t\t\t\t\t\t\t\tif(what === \"message\") {\n\t\t\t\t\t\t\t\t\t\t// Incoming message: public or private?\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar from = json[\"from\"];\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\tvar whisper = json[\"whisper\"];\n\t\t\t\t\t\t\t\t\t\tvar sender = participants[from] ? participants[from] : escapeXmlTags(json[\"display\"]);\n\t\t\t\t\t\t\t\t\t\tif(whisper === true) {\n\t\t\t\t\t\t\t\t\t\t\t// Private message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <b>[whisper from ' + sender + ']</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// Public message\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p>[' + dateString + '] <b>' + sender + ':</b> ' + msg);\n\t\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"announcement\") {\n\t\t\t\t\t\t\t\t\t\t// Room announcement\n\t\t\t\t\t\t\t\t\t\tvar msg = escapeXmlTags(json[\"text\"]);\n\t\t\t\t\t\t\t\t\t\tvar dateString = getDateString(json[\"date\"]);\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + dateString + '] <i>' + msg + '</i>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"join\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody joined\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar display = json[\"display\"];\n\t\t\t\t\t\t\t\t\t\tparticipants[username] = escapeXmlTags(display ? display : username);\n\t\t\t\t\t\t\t\t\t\tif(username !== myid && $('#rp' + username).length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t\t\t\t\t\t$('#list').append('<li id=\"rp' + username + '\" class=\"list-group-item\">' + participants[username] + '</li>');\n\t\t\t\t\t\t\t\t\t\t\t$('#rp' + username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' joined</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t} else if(what === \"leave\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody left\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' left</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t} else if(what === \"kicked\") {\n\t\t\t\t\t\t\t\t\t\t// Somebody was kicked\n\t\t\t\t\t\t\t\t\t\tvar username = json[\"username\"];\n\t\t\t\t\t\t\t\t\t\tvar when = new Date();\n\t\t\t\t\t\t\t\t\t\t$('#rp' + username).remove();\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[username] + ' was kicked from the room</i></p>');\n\t\t\t\t\t\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t\t\t\t\t\t\tdelete participants[username];\n\t\t\t\t\t\t\t\t\t\tif(username === myid) {\n\t\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"You have been kicked from the room\", function() {\n\t\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if(what === \"destroyed\") {\n\t\t\t\t\t\t\t\t\t\tif(json[\"room\"] !== myroom)\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t// Room was destroyed, goodbye!\n\t\t\t\t\t\t\t\t\t\tJanus.warn(\"The room has been destroyed!\");\n\t\t\t\t\t\t\t\t\t\tbootbox.alert(\"The room has been destroyed\", function() {\n\t\t\t\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toncleanup: function() {\n\t\t\t\t\t\t\t\t\tJanus.log(\" ::: Got a cleanup notification :::\");\n\t\t\t\t\t\t\t\t\t$('#datasend').attr('disabled', true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: function(error) {\n\t\t\t\t\t\tJanus.error(error);\n\t\t\t\t\t\tbootbox.alert(error, function() {\n\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdestroyed: function() {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}});\n});\n\nfunction checkEnter(field, event) {\n\tvar theCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n\tif(theCode == 13) {\n\t\tif(field.id == 'username')\n\t\t\tregisterUsername();\n\t\telse if(field.id == 'datasend')\n\t\t\tsendData();\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nfunction registerUsername() {\n\tif($('#username').length === 0) {\n\t\t// Create fields to register\n\t\t$('#register').click(registerUsername);\n\t\t$('#username').focus();\n\t} else {\n\t\t// Try a registration\n\t\t$('#username').attr('disabled', true);\n\t\t$('#register').attr('disabled', true).unbind('click');\n\t\tvar username = $('#username').val();\n\t\tif(username === \"\") {\n\t\t\t$('#you')\n\t\t\t\t.removeClass().addClass('label label-warning')\n\t\t\t\t.html(\"Insert your display name (e.g., pippo)\");\n\t\t\t$('#username').removeAttr('disabled');\n\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\treturn;\n\t\t}\n\t\tmyid = randomString(12);\n\t\tvar transaction = randomString(12);\n\t\tvar register = {\n\t\t\ttextroom: \"join\",\n\t\t\ttransaction: transaction,\n\t\t\troom: myroom,\n\t\t\tusername: myid,\n\t\t\tdisplay: username\n\t\t};\n\t\tmyusername = escapeXmlTags(username);\n\t\ttransactions[transaction] = function(response) {\n\t\t\tif(response[\"textroom\"] === \"error\") {\n\t\t\t\t// Something went wrong\n\t\t\t\tif(response[\"error_code\"] === 417) {\n\t\t\t\t\t// This is a \"no such room\" error: give a more meaningful description\n\t\t\t\t\tbootbox.alert(\n\t\t\t\t\t\t\"<p>Apparently room <code>\" + myroom + \"</code> (the one this demo uses as a test room) \" +\n\t\t\t\t\t\t\"does not exist...</p><p>Do you have an updated <code>janus.plugin.textroom.jcfg</code> \" +\n\t\t\t\t\t\t\"configuration file? If not, make sure you copy the details of room <code>\" + myroom + \"</code> \" +\n\t\t\t\t\t\t\"from that sample in your current configuration file, then restart Janus and try again.\"\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tbootbox.alert(response[\"error\"]);\n\t\t\t\t}\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We're in\n\t\t\t$('#roomjoin').hide();\n\t\t\t$('#room').removeClass('hide').show();\n\t\t\t$('#participant').removeClass('hide').html(myusername).show();\n\t\t\t$('#chatroom').css('height', ($(window).height()-420)+\"px\");\n\t\t\t$('#datasend').removeAttr('disabled');\n\t\t\t// Any participants already in?\n\t\t\tconsole.log(\"Participants:\", response.participants);\n\t\t\tif(response.participants && response.participants.length > 0) {\n\t\t\t\tfor(var i in response.participants) {\n\t\t\t\t\tvar p = response.participants[i];\n\t\t\t\t\tparticipants[p.username] = escapeXmlTags(p.display ? p.display : p.username);\n\t\t\t\t\tif(p.username !== myid && $('#rp' + p.username).length === 0) {\n\t\t\t\t\t\t// Add to the participants list\n\t\t\t\t\t\t$('#list').append('<li id=\"rp' + p.username + '\" class=\"list-group-item\">' + participants[p.username] + '</li>');\n\t\t\t\t\t\t$('#rp' + p.username).css('cursor', 'pointer').click(function() {\n\t\t\t\t\t\t\tvar username = $(this).attr('id').split(\"rp\")[1];\n\t\t\t\t\t\t\tsendPrivateMsg(username);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: green;\">[' + getDateString() + '] <i>' + participants[p.username] + ' joined</i></p>');\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\ttextroom.data({\n\t\t\ttext: JSON.stringify(register),\n\t\t\terror: function(reason) {\n\t\t\t\tbootbox.alert(reason);\n\t\t\t\t$('#username').removeAttr('disabled').val(\"\");\n\t\t\t\t$('#register').removeAttr('disabled').click(registerUsername);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction sendPrivateMsg(username) {\n\tvar display = participants[username];\n\tif(!display)\n\t\treturn;\n\tbootbox.prompt(\"Private message to \" + display, function(result) {\n\t\tif(result && result !== \"\") {\n\t\t\tvar message = {\n\t\t\t\ttextroom: \"message\",\n\t\t\t\ttransaction: randomString(12),\n\t\t\t\troom: myroom,\n\t\t\t\tto: username,\n\t\t\t\ttext: result\n\t\t\t};\n\t\t\ttextroom.data({\n\t\t\t\ttext: JSON.stringify(message),\n\t\t\t\terror: function(reason) { bootbox.alert(reason); },\n\t\t\t\tsuccess: function() {\n\t\t\t\t\t$('#chatroom').append('<p style=\"color: purple;\">[' + getDateString() + '] <b>[whisper to ' + display + ']</b> ' + escapeXmlTags(result));\n\t\t\t\t\t$('#chatroom').get(0).scrollTop = $('#chatroom').get(0).scrollHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn;\n}\n\nfunction sendData() {\n\tvar data = $('#datasend').val();\n\tif(data === \"\") {\n\t\tbootbox.alert('Insert a message to send on the DataChannel');\n\t\treturn;\n\t}\n\tvar message = {\n\t\ttextroom: \"message\",\n\t\ttransaction: randomString(12),\n\t\troom: myroom,\n \t\ttext: data,\n\t};\n\t// Note: messages are always acknowledged by default. This means that you'll\n\t// always receive a confirmation back that the message has been received by the\n\t// server and forwarded to the recipients. If you do not want this to happen,\n\t// just add an ack:false property to the message above, and server won't send\n\t// you a response (meaning you just have to hope it succeeded).\n\ttextroom.data({\n\t\ttext: JSON.stringify(message),\n\t\terror: function(reason) { bootbox.alert(reason); },\n\t\tsuccess: function() { $('#datasend').val(''); }\n\t});\n}\n\n// Helper to format times\nfunction getDateString(jsonDate) {\n\tvar when = new Date();\n\tif(jsonDate) {\n\t\twhen = new Date(Date.parse(jsonDate));\n\t}\n\tvar dateString =\n\t\t\t(\"0\" + when.getUTCHours()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCMinutes()).slice(-2) + \":\" +\n\t\t\t(\"0\" + when.getUTCSeconds()).slice(-2);\n\treturn dateString;\n}\n\n// Just an helper to generate random usernames\nfunction randomString(len, charSet) {\n    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var randomString = '';\n    for (var i = 0; i < len; i++) {\n    \tvar randomPoz = Math.floor(Math.random() * charSet.length);\n    \trandomString += charSet.substring(randomPoz,randomPoz+1);\n    }\n    return randomString;\n}\n\n// Helper to parse query string\nfunction getQueryStringValue(name) {\n\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\tresults = regex.exec(location.search);\n\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n// Helper to escape XML tags\nfunction escapeXmlTags(value) {\n\tif(value) {\n\t\tvar escapedValue = value.replace(new RegExp('<', 'g'), '&lt');\n\t\tescapedValue = escapedValue.replace(new RegExp('>', 'g'), '&gt');\n\t\treturn escapedValue;\n\t}\n}\n"], "filenames": ["html/textroomtest.js"], "buggy_code_start_loc": [354], "buggy_code_end_loc": [355], "fixing_code_start_loc": [354], "fixing_code_end_loc": [355], "type": "CWE-79", "message": "janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4124", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-16T14:15:08.187", "lastModified": "2021-12-20T13:34:40.513", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "janus-gateway is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "janus-gateway es vulnerable a Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:meetecho:janus:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.11.6", "matchCriteriaId": "904346B7-246D-4D81-B727-9B635D69C88A"}]}]}], "references": [{"url": "https://github.com/meetecho/janus-gateway/commit/f62bba6513ec840761f2434b93168106c7c65a3d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/a6ca142e-60aa-4d6f-b231-5d1bcd1b7190", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/meetecho/janus-gateway/commit/f62bba6513ec840761f2434b93168106c7c65a3d"}}