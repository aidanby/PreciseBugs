{"buggy_code": ["/*\n * Copyright (C) 2004-2013  See the AUTHORS file for details.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 as published\n * by the Free Software Foundation.\n */\n\n#include <znc/Chan.h>\n#include <znc/Server.h>\n#include <znc/User.h>\n#include <znc/IRCNetwork.h>\n#include <znc/IRCSock.h>\n\nusing std::stringstream;\nusing std::make_pair;\nusing std::set;\nusing std::vector;\nusing std::map;\n\n/* Stuff to be able to write this:\n   // i will be name of local variable, see below\n   // pUser can be NULL if only global modules are needed\n   FOR_EACH_MODULE(i, pUser) {\n       // i is local variable of type CModules::iterator,\n\t   // so *i has type CModule*\n   }\n*/\nstruct FOR_EACH_MODULE_Type {\n\tenum {\n\t\tAtGlobal,\n\t\tAtUser,\n\t\tAtNetwork,\n\t} where;\n\tCModules CMtemp;\n\tCModules& CMuser;\n\tCModules& CMnet;\n\tFOR_EACH_MODULE_Type(CUser* pUser) : CMuser(pUser ? pUser->GetModules() : CMtemp), CMnet(CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\tFOR_EACH_MODULE_Type(CIRCNetwork* pNetwork) : CMuser(pNetwork ? pNetwork->GetUser()->GetModules() : CMtemp), CMnet(pNetwork ? pNetwork->GetModules() : CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\tFOR_EACH_MODULE_Type(std::pair<CUser*, CIRCNetwork*> arg) : CMuser(arg.first ? arg.first->GetModules() : CMtemp), CMnet(arg.second ? arg.second->GetModules() : CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\toperator bool() { return false; }\n};\n\ninline bool FOR_EACH_MODULE_CanContinue(FOR_EACH_MODULE_Type& state, CModules::iterator& i) {\n\tif (state.where == FOR_EACH_MODULE_Type::AtGlobal && i == CZNC::Get().GetModules().end()) {\n\t\ti = state.CMuser.begin();\n\t\tstate.where = FOR_EACH_MODULE_Type::AtUser;\n\t}\n\tif (state.where == FOR_EACH_MODULE_Type::AtUser && i == state.CMuser.end()) {\n\t\ti = state.CMnet.begin();\n\t\tstate.where = FOR_EACH_MODULE_Type::AtNetwork;\n\t}\n\treturn !(state.where == FOR_EACH_MODULE_Type::AtNetwork && i == state.CMnet.end());\n}\n\n#define FOR_EACH_MODULE(I, pUserOrNetwork)\\\n\tif (FOR_EACH_MODULE_Type FOR_EACH_MODULE_Var = pUserOrNetwork) {} else\\\n\tfor (CModules::iterator I = CZNC::Get().GetModules().begin(); FOR_EACH_MODULE_CanContinue(FOR_EACH_MODULE_Var, I); ++I)\n\nclass CWebAdminMod : public CModule {\npublic:\n\tMODCONSTRUCTOR(CWebAdminMod) {\n\t\tVPair vParams;\n\t\tvParams.push_back(make_pair(\"user\", \"\"));\n\t\tAddSubPage(new CWebSubPage(\"settings\", \"Global Settings\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"edituser\", \"Your Settings\", vParams));\n\t\tAddSubPage(new CWebSubPage(\"traffic\", \"Traffic Info\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"listusers\", \"List Users\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"adduser\", \"Add User\", CWebSubPage::F_ADMIN));\n\t}\n\n\tvirtual ~CWebAdminMod() {\n\t}\n\n\tvirtual bool OnLoad(const CString& sArgStr, CString& sMessage) {\n\t\tif (sArgStr.empty() || CModInfo::GlobalModule != GetType())\n\t\t\treturn true;\n\n\t\t// We don't accept any arguments, but for backwards\n\t\t// compatibility we have to do some magic here.\n\t\tsMessage = \"Arguments converted to new syntax\";\n\n\t\tbool bSSL = false;\n\t\tbool bIPv6 = false;\n\t\tbool bShareIRCPorts = true;\n\t\tunsigned short uPort = 8080;\n\t\tCString sArgs(sArgStr);\n\t\tCString sPort;\n\t\tCString sListenHost;\n\n\t\twhile (sArgs.Left(1) == \"-\") {\n\t\t\tCString sOpt = sArgs.Token(0);\n\t\t\tsArgs = sArgs.Token(1, true);\n\n\t\t\tif (sOpt.Equals(\"-IPV6\")) {\n\t\t\t\tbIPv6 = true;\n\t\t\t} else if (sOpt.Equals(\"-IPV4\")) {\n\t\t\t\tbIPv6 = false;\n\t\t\t} else if (sOpt.Equals(\"-noircport\")) {\n\t\t\t\tbShareIRCPorts = false;\n\t\t\t} else {\n\t\t\t\t// Uhm... Unknown option? Let's just ignore all\n\t\t\t\t// arguments, older versions would have returned\n\t\t\t\t// an error and denied loading\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// No arguments left: Only port sharing\n\t\tif (sArgs.empty() && bShareIRCPorts)\n\t\t\treturn true;\n\n\t\tif (sArgs.find(\" \") != CString::npos) {\n\t\t\tsListenHost = sArgs.Token(0);\n\t\t\tsPort = sArgs.Token(1, true);\n\t\t} else {\n\t\t\tsPort = sArgs;\n\t\t}\n\n\t\tif (sPort.Left(1) == \"+\") {\n\t\t\tsPort.TrimLeft(\"+\");\n\t\t\tbSSL = true;\n\t\t}\n\n\t\tif (!sPort.empty()) {\n\t\t\tuPort = sPort.ToUShort();\n\t\t}\n\n\t\tif (!bShareIRCPorts) {\n\t\t\t// Make all existing listeners IRC-only\n\t\t\tconst vector<CListener*>& vListeners = CZNC::Get().GetListeners();\n\t\t\tvector<CListener*>::const_iterator it;\n\t\t\tfor (it = vListeners.begin(); it != vListeners.end(); ++it) {\n\t\t\t\t(*it)->SetAcceptType(CListener::ACCEPT_IRC);\n\t\t\t}\n\t\t}\n\n\t\t// Now turn that into a listener instance\n\t\tCListener *pListener = new CListener(uPort, sListenHost, bSSL,\n\t\t\t\t(!bIPv6 ? ADDR_IPV4ONLY : ADDR_ALL), CListener::ACCEPT_HTTP);\n\n\t\tif (!pListener->Listen()) {\n\t\t\tsMessage = \"Failed to add backwards-compatible listener\";\n\t\t\treturn false;\n\t\t}\n\t\tCZNC::Get().AddListener(pListener);\n\n\t\tSetArgs(\"\");\n\t\treturn true;\n\t}\n\n\tCUser* GetNewUser(CWebSock& WebSock, CUser* pUser) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tCString sUsername = WebSock.GetParam(\"newuser\");\n\n\t\tif (sUsername.empty()) {\n\t\t\tsUsername = WebSock.GetParam(\"user\");\n\t\t}\n\n\t\tif (sUsername.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [Username is required]\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tif (pUser) {\n\t\t\t/* If we are editing a user we must not change the user name */\n\t\t\tsUsername = pUser->GetUserName();\n\t\t}\n\n\t\tCString sArg = WebSock.GetParam(\"password\");\n\n\t\tif (sArg != WebSock.GetParam(\"password2\")) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [Passwords do not match]\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tCUser* pNewUser = new CUser(sUsername);\n\n\t\tif (!sArg.empty()) {\n\t\t\tCString sSalt = CUtils::GetSalt();\n\t\t\tCString sHash = CUser::SaltedHash(sArg, sSalt);\n\t\t\tpNewUser->SetPass(sHash, CUser::HASH_DEFAULT, sSalt);\n\t\t}\n\n\t\tVCString vsArgs;\n\t\tunsigned int a = 0;\n\n\t\tWebSock.GetRawParam(\"allowedips\").Split(\"\\n\", vsArgs);\n\t\tif (vsArgs.size()) {\n\t\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\t\tpNewUser->AddAllowedHost(vsArgs[a].Trim_n());\n\t\t\t}\n\t\t} else {\n\t\t\tpNewUser->AddAllowedHost(\"*\");\n\t\t}\n\n\t\tWebSock.GetRawParam(\"ctcpreplies\").Split(\"\\n\", vsArgs);\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCString sReply = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\tpNewUser->AddCTCPReply(sReply.Token(0).Trim_n(), sReply.Token(1, true).Trim_n());\n\t\t}\n\n\t\tsArg = WebSock.GetParam(\"nick\"); if (!sArg.empty()) { pNewUser->SetNick(sArg); }\n\t\tsArg = WebSock.GetParam(\"altnick\"); if (!sArg.empty()) { pNewUser->SetAltNick(sArg); }\n\t\tsArg = WebSock.GetParam(\"statusprefix\"); if (!sArg.empty()) { pNewUser->SetStatusPrefix(sArg); }\n\t\tsArg = WebSock.GetParam(\"ident\"); if (!sArg.empty()) { pNewUser->SetIdent(sArg); }\n\t\tsArg = WebSock.GetParam(\"skin\"); if (!sArg.empty()) { pNewUser->SetSkinName(sArg); }\n\t\tsArg = WebSock.GetParam(\"realname\"); if (!sArg.empty()) { pNewUser->SetRealName(sArg); }\n\t\tsArg = WebSock.GetParam(\"quitmsg\"); if (!sArg.empty()) { pNewUser->SetQuitMsg(sArg); }\n\t\tsArg = WebSock.GetParam(\"chanmodes\"); if (!sArg.empty()) { pNewUser->SetDefaultChanModes(sArg); }\n\t\tsArg = WebSock.GetParam(\"timestampformat\"); if (!sArg.empty()) { pNewUser->SetTimestampFormat(sArg); }\n\n\t\tsArg = WebSock.GetParam(\"bindhost\");\n\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\tCString sArg2 = WebSock.GetParam(\"dccbindhost\");\n\t\t\tif (!sArg.empty()) {\n\t\t\t\tpNewUser->SetBindHost(sArg);\n\t\t\t}\n\t\t\tif (!sArg2.empty()) {\n\t\t\t\tpNewUser->SetDCCBindHost(sArg2);\n\t\t\t}\n\n\t\t\tconst VCString& vsHosts = CZNC::Get().GetBindHosts();\n\t\t\tif (!spSession->IsAdmin() && !vsHosts.empty()) {\n\t\t\t\tVCString::const_iterator it;\n\t\t\t\tbool bFound = false;\n\t\t\t\tbool bFoundDCC = false;\n\n\t\t\t\tfor (it = vsHosts.begin(); it != vsHosts.end(); ++it) {\n\t\t\t\t\tif (sArg.Equals(*it)) {\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (sArg2.Equals(*it)) {\n\t\t\t\t\t\tbFoundDCC = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!bFound) {\n\t\t\t\t\tpNewUser->SetBindHost(pUser ? pUser->GetBindHost() : \"\");\n\t\t\t\t}\n\t\t\t\tif (!bFoundDCC) {\n\t\t\t\t\tpNewUser->SetDCCBindHost(pUser ? pUser->GetDCCBindHost() : \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (pUser){\n\t\t\tpNewUser->SetBindHost(pUser->GetBindHost());\n\t\t\tpNewUser->SetDCCBindHost(pUser->GetDCCBindHost());\n\t\t}\n\n\t\tsArg = WebSock.GetParam(\"bufsize\"); if (!sArg.empty()) pNewUser->SetBufferCount(sArg.ToUInt(), spSession->IsAdmin());\n\t\tif (!sArg.empty()) {\n\t\t\t// First apply the old limit in case the new one is too high\n\t\t\tif (pUser)\n\t\t\t\tpNewUser->SetBufferCount(pUser->GetBufferCount(), true);\n\t\t\tpNewUser->SetBufferCount(sArg.ToUInt(), spSession->IsAdmin());\n\t\t}\n\n\t\tpNewUser->SetSkinName(WebSock.GetParam(\"skin\"));\n\t\tpNewUser->SetAutoClearChanBuffer(WebSock.GetParam(\"autoclearchanbuffer\").ToBool());\n\t\tpNewUser->SetMultiClients(WebSock.GetParam(\"multiclients\").ToBool());\n\t\tpNewUser->SetTimestampAppend(WebSock.GetParam(\"appendtimestamp\").ToBool());\n\t\tpNewUser->SetTimestampPrepend(WebSock.GetParam(\"prependtimestamp\").ToBool());\n\t\tpNewUser->SetTimezone(WebSock.GetParam(\"timezone\"));\n\t\tpNewUser->SetJoinTries(WebSock.GetParam(\"jointries\").ToUInt());\n\n\t\tif (spSession->IsAdmin()) {\n\t\t\tpNewUser->SetDenyLoadMod(WebSock.GetParam(\"denyloadmod\").ToBool());\n\t\t\tpNewUser->SetDenySetBindHost(WebSock.GetParam(\"denysetbindhost\").ToBool());\n\t\t\tsArg = WebSock.GetParam(\"maxnetworks\"); if (!sArg.empty()) pNewUser->SetMaxNetworks(sArg.ToUInt());\n\t\t} else if (pUser) {\n\t\t\tpNewUser->SetDenyLoadMod(pUser->DenyLoadMod());\n\t\t\tpNewUser->SetDenySetBindHost(pUser->DenySetBindHost());\n\t\t\tpNewUser->SetMaxNetworks(pUser->MaxNetworks());\n\t\t}\n\n\t\t// If pUser is not NULL, we are editing an existing user.\n\t\t// Users must not be able to change their own admin flag.\n\t\tif (pUser != CZNC::Get().FindUser(WebSock.GetUser())) {\n\t\t\tpNewUser->SetAdmin(WebSock.GetParam(\"isadmin\").ToBool());\n\t\t} else if (pUser) {\n\t\t\tpNewUser->SetAdmin(pUser->IsAdmin());\n\t\t}\n\n\t\tif (spSession->IsAdmin() || (pUser && !pUser->DenyLoadMod())) {\n\t\t\tWebSock.GetParamValues(\"loadmod\", vsArgs);\n\n\t\t\t// disallow unload webadmin from itself\n\t\t\tif (CModInfo::UserModule == GetType() && pUser == CZNC::Get().FindUser(WebSock.GetUser())) {\n\t\t\t\tbool bLoadedWebadmin = false;\n\t\t\t\tfor (a = 0; a < vsArgs.size(); ++a) {\n\t\t\t\t\tCString sModName = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\t\t\tif (sModName == GetModName()) {\n\t\t\t\t\t\tbLoadedWebadmin = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!bLoadedWebadmin) {\n\t\t\t\t\tvsArgs.push_back(GetModName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModName = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\tif (!sModName.empty()) {\n\t\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!pNewUser->GetModules().LoadModule(sModName, sArgs, CModInfo::UserModule, pNewUser, NULL, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (...) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sArgs + \"]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\t\tspSession->AddError(sModLoadError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (pUser) {\n\t\t\tCModules& Modules = pUser->GetModules();\n\n\t\t\tfor (a = 0; a < Modules.size(); a++) {\n\t\t\t\tCString sModName = Modules[a]->GetModName();\n\t\t\t\tCString sArgs = Modules[a]->GetArgs();\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!pNewUser->GetModules().LoadModule(sModName, sArgs, CModInfo::UserModule, pNewUser, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t} catch (...) {\n\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"]\";\n\t\t\t\t}\n\n\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\tspSession->AddError(sModLoadError);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn pNewUser;\n\t}\n\n\tCString SafeGetUserNameParam(CWebSock& WebSock) {\n\t\tCString sUserName = WebSock.GetParam(\"user\"); // check for POST param\n\t\tif(sUserName.empty() && !WebSock.IsPost()) {\n\t\t\t// if no POST param named user has been given and we are not\n\t\t\t// saving this form, fall back to using the GET parameter.\n\t\t\tsUserName = WebSock.GetParam(\"user\", false);\n\t\t}\n\t\treturn sUserName;\n\t}\n\n\tCString SafeGetNetworkParam(CWebSock& WebSock) {\n\t\tCString sNetwork = WebSock.GetParam(\"network\"); // check for POST param\n\t\tif(sNetwork.empty() && !WebSock.IsPost()) {\n\t\t\t// if no POST param named user has been given and we are not\n\t\t\t// saving this form, fall back to using the GET parameter.\n\t\t\tsNetwork = WebSock.GetParam(\"network\", false);\n\t\t}\n\t\treturn sNetwork;\n\t}\n\n\tCUser* SafeGetUserFromParam(CWebSock& WebSock) {\n\t\treturn CZNC::Get().FindUser(SafeGetUserNameParam(WebSock));\n\t}\n\n\tCIRCNetwork* SafeGetNetworkFromParam(CWebSock& WebSock) {\n\t\tCUser* pUser = CZNC::Get().FindUser(SafeGetUserNameParam(WebSock));\n\t\tCIRCNetwork* pNetwork = NULL;\n\n\t\tif (pUser) {\n\t\t\tpNetwork = pUser->FindNetwork(SafeGetNetworkParam(WebSock));\n\t\t}\n\n\t\treturn pNetwork;\n\t}\n\n\tvirtual CString GetWebMenuTitle() { return \"webadmin\"; }\n\tvirtual bool OnWebRequest(CWebSock& WebSock, const CString& sPageName, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\n\t\tif (sPageName == \"settings\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"adduser\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn UserPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"addnetwork\") {\n\t\t\tCUser* pUser = SafeGetUserFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pUser) {\n\t\t\t\treturn NetworkPage(WebSock, Tmpl, pUser);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"editnetwork\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn NetworkPage(WebSock, Tmpl, pNetwork->GetUser(), pNetwork);\n\n\t\t} else if (sPageName == \"delnetwork\") {\n\t\t\tCString sUser = WebSock.GetParam(\"user\");\n\t\t\tif (sUser.empty() && !WebSock.IsPost()) {\n\t\t\t\tsUser = WebSock.GetParam(\"user\", false);\n\t\t\t}\n\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn DelNetwork(WebSock, pUser, Tmpl);\n\t\t} else if (sPageName == \"editchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tCString sChan = WebSock.GetParam(\"name\");\n\t\t\tif(sChan.empty() && !WebSock.IsPost()) {\n\t\t\t\tsChan = WebSock.GetParam(\"name\", false);\n\t\t\t}\n\t\t\tCChan* pChan = pNetwork->FindChan(sChan);\n\t\t\tif (!pChan) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such channel\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn ChanPage(WebSock, Tmpl, pNetwork, pChan);\n\t\t} else if (sPageName == \"addchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\treturn ChanPage(WebSock, Tmpl, pNetwork);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"delchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\treturn DelChan(WebSock, pNetwork);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"deluser\") {\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!WebSock.IsPost()) {\n\t\t\t\t// Show the \"Are you sure?\" page:\n\n\t\t\t\tCString sUser = WebSock.GetParam(\"user\", false);\n\t\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\t\tif (!pUser) {\n\t\t\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tTmpl.SetFile(\"del_user.tmpl\");\n\t\t\t\tTmpl[\"Username\"] = sUser;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// The \"Are you sure?\" page has been submitted with \"Yes\",\n\t\t\t// so we actually delete the user now:\n\n\t\t\tCString sUser = WebSock.GetParam(\"user\");\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\tif (pUser && pUser == spSession->GetUser()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Please don't delete yourself, suicide is not the answer!\");\n\t\t\t\treturn true;\n\t\t\t} else if (CZNC::Get().DeleteUser(sUser)) {\n\t\t\t\tWebSock.Redirect(\"listusers\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"edituser\") {\n\t\t\tCString sUserName = SafeGetUserNameParam(WebSock);\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUserName);\n\n\t\t\tif(!pUser) {\n\t\t\t\tif(sUserName.empty()) {\n\t\t\t\t\tpUser = spSession->GetUser();\n\t\t\t\t} // else: the \"no such user\" message will be printed.\n\t\t\t}\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pUser) {\n\t\t\t\treturn UserPage(WebSock, Tmpl, pUser);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"listusers\" && spSession->IsAdmin()) {\n\t\t\treturn ListUsersPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"traffic\" && spSession->IsAdmin()) {\n\t\t\treturn TrafficPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"index\") {\n\t\t\treturn true;\n\t\t} else if (sPageName == \"add_listener\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn AddListener(WebSock, Tmpl);\n\t\t} else if (sPageName == \"del_listener\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn DelListener(WebSock, Tmpl);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tbool ChanPage(CWebSock& WebSock, CTemplate& Tmpl, CIRCNetwork* pNetwork, CChan* pChan = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_chan.tmpl\");\n\t\tCUser* pUser = pNetwork->GetUser();\n\n\t\tif (!pUser) {\n\t\t\tWebSock.PrintErrorPage(\"That user doesn't exist\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tTmpl[\"User\"] = pUser->GetUserName();\n\t\t\tTmpl[\"Network\"] = pNetwork->GetName();\n\n\t\t\tif (pChan) {\n\t\t\t\tTmpl[\"Action\"] = \"editchan\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit Channel\" + CString(\" [\" + pChan->GetName() + \"]\") + \" of Network [\" + pNetwork->GetName() + \"] of User [\" + pNetwork->GetUser()->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"ChanName\"] = pChan->GetName();\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pChan->GetBufferCount());\n\t\t\t\tTmpl[\"DefModes\"] = pChan->GetDefaultModes();\n\t\t\t\tTmpl[\"Key\"] = pChan->GetKey();\n\n\t\t\t\tif (pChan->InConfig()) {\n\t\t\t\t\tTmpl[\"InConfig\"] = \"true\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tTmpl[\"Action\"] = \"addchan\";\n\t\t\t\tTmpl[\"Title\"] = \"Add Channel\" + CString(\" for User [\" + pUser->GetUserName() + \"]\");\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pUser->GetBufferCount());\n\t\t\t\tTmpl[\"DefModes\"] = CString(pUser->GetDefaultChanModes());\n\t\t\t\tTmpl[\"InConfig\"] = \"true\";\n\t\t\t}\n\n\t\t\t// o1 used to be AutoCycle which was removed\n\n\t\t\tCTemplate& o2 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to2[\"Name\"] = \"autoclearchanbuffer\";\n\t\t\to2[\"DisplayName\"] = \"Auto Clear Chan Buffer\";\n\t\t\to2[\"Tooltip\"] = \"Automatically Clear Channel Buffer After Playback\";\n\t\t\tif ((pChan && pChan->AutoClearChanBuffer()) || (!pChan && pUser->AutoClearChanBuffer())) { o2[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o3 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to3[\"Name\"] = \"detached\";\n\t\t\to3[\"DisplayName\"] = \"Detached\";\n\t\t\tif (pChan && pChan->IsDetached()) { o3[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o4 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to4[\"Name\"] = \"disabled\";\n\t\t\to4[\"DisplayName\"] = \"Disabled\";\n\t\t\tif (pChan && pChan->IsDisabled()) { o4[\"Checked\"] = \"true\"; }\n\n\t\t\tFOR_EACH_MODULE(i, pNetwork) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/channel\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminChan.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sChanName = WebSock.GetParam(\"name\").Trim_n();\n\n\t\tif (!pChan) {\n\t\t\tif (sChanName.empty()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Channel name is a required argument\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (pNetwork->FindChan(sChanName.Token(0))) {\n\t\t\t\tWebSock.PrintErrorPage(\"Channel [\" + sChanName.Token(0) + \"] already exists\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpChan = new CChan(sChanName, pNetwork, true);\n\t\t\tpNetwork->AddChan(pChan);\n\t\t}\n\n\t\tpChan->SetBufferCount(WebSock.GetParam(\"buffercount\").ToUInt(), spSession->IsAdmin());\n\t\tpChan->SetDefaultModes(WebSock.GetParam(\"defmodes\"));\n\t\tpChan->SetInConfig(WebSock.GetParam(\"save\").ToBool());\n\t\tpChan->SetAutoClearChanBuffer(WebSock.GetParam(\"autoclearchanbuffer\").ToBool());\n\t\tpChan->SetKey(WebSock.GetParam(\"key\"));\n\n\t\tbool bDetached = WebSock.GetParam(\"detached\").ToBool();\n\t\tif (pChan->IsDetached() != bDetached) {\n\t\t\tif (bDetached) {\n\t\t\t\tpChan->DetachUser();\n\t\t\t} else {\n\t\t\t\tpChan->AttachUser();\n\t\t\t}\n\t\t}\n\n\t\tbool bDisabled = WebSock.GetParam(\"disabled\").ToBool();\n\t\tif (bDisabled)\n\t\t\tpChan->Disable();\n\t\telse\n\t\t\tpChan->Enable();\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"User\"] = pUser->GetUserName();\n\t\tTmplMod[\"ChanName\"] = sChanName;\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, pNetwork) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/channel\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Channel added/modified, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"editnetwork?user=\" + pUser->GetUserName().Escape_n(CString::EURL) + \"&network=\" + pNetwork->GetName().Escape_n(CString::EURL));\n\t\treturn true;\n\t}\n\n\tbool NetworkPage(CWebSock& WebSock, CTemplate& Tmpl, CUser* pUser, CIRCNetwork* pNetwork = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_network.tmpl\");\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\n\t\t\tset<CModInfo> ssNetworkMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssNetworkMods, CModInfo::NetworkModule);\n\t\t\tfor (set<CModInfo>::iterator it = ssNetworkMods.begin(); it != ssNetworkMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\n\t\t\t\tif (pNetwork) {\n\t\t\t\t\tCModule *pModule = pNetwork->GetModules().FindModule(Info.GetName());\n\t\t\t\t\tif (pModule) {\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!spSession->IsAdmin() && pUser->DenyLoadMod()) {\n\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\t\tTmpl[\"BindHostEdit\"] = \"true\";\n\t\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\t\tif (vsBindHosts.empty()) {\n\t\t\t\t\tif (pNetwork) {\n\t\t\t\t\t\tTmpl[\"BindHost\"] = pNetwork->GetBindHost();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbool bFoundBindHost = false;\n\t\t\t\t\tfor (unsigned int b = 0; b < vsBindHosts.size(); b++) {\n\t\t\t\t\t\tconst CString& sBindHost = vsBindHosts[b];\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = sBindHost;\n\n\t\t\t\t\t\tif (pNetwork && pNetwork->GetBindHost() == sBindHost) {\n\t\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundBindHost = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If our current bindhost is not in the global list...\n\t\t\t\t\tif (pNetwork && !bFoundBindHost && !pNetwork->GetBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pNetwork->GetBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\tTmpl[\"Action\"] = \"editnetwork\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit Network\" + CString(\" [\" + pNetwork->GetName() + \"]\") + \" of User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"Name\"] = pNetwork->GetName();\n\n\t\t\t\tTmpl[\"Nick\"] = pNetwork->GetNick();\n\t\t\t\tTmpl[\"AltNick\"] = pNetwork->GetAltNick();\n\t\t\t\tTmpl[\"Ident\"] = pNetwork->GetIdent();\n\t\t\t\tTmpl[\"RealName\"] = pNetwork->GetRealName();\n\n\t\t\t\tTmpl[\"FloodProtection\"] = CString(CIRCSock::IsFloodProtected(pNetwork->GetFloodRate()));\n\t\t\t\tTmpl[\"FloodRate\"] = CString(pNetwork->GetFloodRate());\n\t\t\t\tTmpl[\"FloodBurst\"] = CString(pNetwork->GetFloodBurst());\n\n\t\t\t\tTmpl[\"IRCConnectEnabled\"] = CString(pNetwork->GetIRCConnectEnabled());\n\n\t\t\t\tconst vector<CServer*>& vServers = pNetwork->GetServers();\n\t\t\t\tfor (unsigned int a = 0; a < vServers.size(); a++) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ServerLoop\");\n\t\t\t\t\tl[\"Server\"] = vServers[a]->GetString();\n\t\t\t\t}\n\n\t\t\t\tconst vector<CChan*>& Channels = pNetwork->GetChans();\n\t\t\t\tfor (unsigned int c = 0; c < Channels.size(); c++) {\n\t\t\t\t\tCChan* pChan = Channels[c];\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ChannelLoop\");\n\n\t\t\t\t\tl[\"Network\"] = pNetwork->GetName();\n\t\t\t\t\tl[\"Username\"] = pUser->GetUserName();\n\t\t\t\t\tl[\"Name\"] = pChan->GetName();\n\t\t\t\t\tl[\"Perms\"] = pChan->GetPermStr();\n\t\t\t\t\tl[\"CurModes\"] = pChan->GetModeString();\n\t\t\t\t\tl[\"DefModes\"] = pChan->GetDefaultModes();\n\t\t\t\t\tl[\"BufferCount\"] = CString(pChan->GetBufferCount());\n\t\t\t\t\tl[\"Options\"] = pChan->GetOptions();\n\n\t\t\t\t\tif (pChan->InConfig()) {\n\t\t\t\t\t\tl[\"InConfig\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!spSession->IsAdmin() && !pUser->HasSpaceForNewNetwork()) {\n\t\t\t\t\tWebSock.PrintErrorPage(\"Network number limit reached. Ask an admin to increase the limit for you, or delete few old ones from Your Settings\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tTmpl[\"Action\"] = \"addnetwork\";\n\t\t\t\tTmpl[\"Title\"] = \"Add Network for User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"IRCConnectEnabled\"] = \"true\";\n\t\t\t\tTmpl[\"FloodProtection\"] = \"true\";\n\t\t\t\tTmpl[\"FloodRate\"] = \"1.0\";\n\t\t\t\tTmpl[\"FloodBurst\"] = \"4\";\n\t\t\t}\n\n\t\t\tFOR_EACH_MODULE(i, make_pair(pUser, pNetwork)) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/network\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminNetwork.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sName = WebSock.GetParam(\"network\").Trim_n();\n\t\tif (sName.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"Network name is a required argument\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!pNetwork) {\n\t\t\tif (!spSession->IsAdmin() && !pUser->HasSpaceForNewNetwork()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network number limit reached. Ask an admin to increase the limit for you, or delete few old ones from Your Settings\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!CIRCNetwork::IsValidNetwork(sName)) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network name should be alphanumeric\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tpNetwork = pUser->AddNetwork(sName);\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network [\" + sName.Token(0) + \"] already exists\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tCString sArg;\n\n\t\tpNetwork->SetNick(WebSock.GetParam(\"nick\"));\n\t\tpNetwork->SetAltNick(WebSock.GetParam(\"altnick\"));\n\t\tpNetwork->SetIdent(WebSock.GetParam(\"ident\"));\n\t\tpNetwork->SetRealName(WebSock.GetParam(\"realname\"));\n\n\t\tpNetwork->SetIRCConnectEnabled(WebSock.GetParam(\"doconnect\").ToBool());\n\n\t\tsArg = WebSock.GetParam(\"bindhost\");\n\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\tCString sHost = WebSock.GetParam(\"bindhost\");\n\t\t\tconst VCString& vsHosts = CZNC::Get().GetBindHosts();\n\t\t\tif (!spSession->IsAdmin() && !vsHosts.empty()) {\n\t\t\t\tVCString::const_iterator it;\n\t\t\t\tbool bFound = false;\n\n\t\t\t\tfor (it = vsHosts.begin(); it != vsHosts.end(); ++it) {\n\t\t\t\t\tif (sHost.Equals(*it)) {\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!bFound) {\n\t\t\t\t\tsHost = pNetwork->GetBindHost();\n\t\t\t\t}\n\t\t\t}\n\t\t\tpNetwork->SetBindHost(sHost);\n\t\t}\n\n\t\tif (WebSock.GetParam(\"floodprotection\").ToBool()) {\n\t\t\tpNetwork->SetFloodRate(WebSock.GetParam(\"floodrate\").ToDouble());\n\t\t\tpNetwork->SetFloodBurst(WebSock.GetParam(\"floodburst\").ToUShort());\n\t\t} else {\n\t\t\tpNetwork->SetFloodRate(-1);\n\t\t}\n\n\t\tVCString vsArgs;\n\n\t\tpNetwork->DelServers();\n\t\tWebSock.GetRawParam(\"servers\").Split(\"\\n\", vsArgs);\n\t\tfor (unsigned int a = 0; a < vsArgs.size(); a++) {\n\t\t\tpNetwork->AddServer(vsArgs[a].Trim_n());\n\t\t}\n\n\t\tWebSock.GetParamValues(\"channel\", vsArgs);\n\t\tfor (unsigned int a = 0; a < vsArgs.size(); a++) {\n\t\t\tconst CString& sChan = vsArgs[a];\n\t\t\tCChan *pChan = pNetwork->FindChan(sChan.TrimRight_n(\"\\r\"));\n\t\t\tif (pChan) {\n\t\t\t\tpChan->SetInConfig(WebSock.GetParam(\"save_\" + sChan).ToBool());\n\t\t\t}\n\t\t}\n\n\t\tset<CString> ssArgs;\n\t\tWebSock.GetParamValues(\"loadmod\", ssArgs);\n\t\tif (spSession->IsAdmin() || !pUser->DenyLoadMod()) {\n\t\t\tfor (set<CString>::iterator it = ssArgs.begin(); it != ssArgs.end(); ++it) {\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModName = (*it).TrimRight_n(\"\\r\");\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\tif (!sModName.empty()) {\n\t\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\t\tCModule *pMod = pNetwork->GetModules().FindModule(sModName);\n\n\t\t\t\t\tif (!pMod) {\n\t\t\t\t\t\tif (!pNetwork->GetModules().LoadModule(sModName, sArgs, CModInfo::NetworkModule, pUser, pNetwork, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (pMod->GetArgs() != sArgs) {\n\t\t\t\t\t\tif (!pNetwork->GetModules().ReloadModule(sModName, sArgs, pUser, pNetwork, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to reload module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\t\tWebSock.GetSession()->AddError(sModLoadError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst CModules& vCurMods = pNetwork->GetModules();\n\t\tset<CString> ssUnloadMods;\n\n\t\tfor (unsigned int a = 0; a < vCurMods.size(); a++) {\n\t\t\tCModule* pCurMod = vCurMods[a];\n\n\t\t\tif (ssArgs.find(pCurMod->GetModName()) == ssArgs.end() && pCurMod->GetModName() != GetModName()) {\n\t\t\t\tssUnloadMods.insert(pCurMod->GetModName());\n\t\t\t}\n\t\t}\n\n\t\tfor (set<CString>::iterator it2 = ssUnloadMods.begin(); it2 != ssUnloadMods.end(); ++it2) {\n\t\t\tpNetwork->GetModules().UnloadModule(*it2);\n\t\t}\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"Username\"] = pUser->GetUserName();\n\t\tTmplMod[\"Name\"] = pNetwork->GetName();\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, make_pair(pUser, pNetwork)) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/network\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Network added/modified, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"edituser?user=\" + pUser->GetUserName().Escape_n(CString::EURL));\n\t\treturn true;\n\t}\n\n\tbool DelNetwork(CWebSock& WebSock, CUser* pUser, CTemplate& Tmpl) {\n\t\tCString sNetwork = WebSock.GetParam(\"name\");\n\t\tif (sNetwork.empty() && !WebSock.IsPost()) {\n\t\t\tsNetwork = WebSock.GetParam(\"name\", false);\n\t\t}\n\n\t\tif (!pUser) {\n\t\t\tWebSock.PrintErrorPage(\"That user doesn't exist\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (sNetwork.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"That network doesn't exist for this user\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!WebSock.IsPost()) {\n\t\t\t// Show the \"Are you sure?\" page:\n\n\t\t\tTmpl.SetFile(\"del_network.tmpl\");\n\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\t\t\tTmpl[\"Network\"] = sNetwork;\n\t\t\treturn true;\n\t\t}\n\n\t\tpUser->DeleteNetwork(sNetwork);\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Network deleted, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"edituser?user=\" + pUser->GetUserName().Escape_n(CString::EURL));\n\t\treturn false;\n\t}\n\n\tbool DelChan(CWebSock& WebSock, CIRCNetwork* pNetwork) {\n\t\tCString sChan = WebSock.GetParam(\"name\", false);\n\n\t\tif (sChan.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"That channel doesn't exist for this user\");\n\t\t\treturn true;\n\t\t}\n\n\t\tpNetwork->DelChan(sChan);\n\t\tpNetwork->PutIRC(\"PART \" + sChan);\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Channel deleted, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"editnetwork?user=\" + pNetwork->GetUser()->GetUserName().Escape_n(CString::EURL) + \"&network=\" + pNetwork->GetName().Escape_n(CString::EURL));\n\t\treturn false;\n\t}\n\n\tbool UserPage(CWebSock& WebSock, CTemplate& Tmpl, CUser* pUser = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_user.tmpl\");\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tCString sAllowedHosts, sServers, sChans, sCTCPReplies;\n\n\t\t\tif (pUser) {\n\t\t\t\tTmpl[\"Action\"] = \"edituser\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t} else {\n\t\t\t\tCString sUsername = WebSock.GetParam(\"clone\", false);\n\t\t\t\tpUser = CZNC::Get().FindUser(sUsername);\n\n\t\t\t\tif (pUser) {\n\t\t\t\t\tTmpl[\"Title\"] = \"Clone User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\t\tTmpl[\"Clone\"] = \"true\";\n\t\t\t\t\tTmpl[\"CloneUsername\"] = pUser->GetUserName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTmpl[\"ImAdmin\"] = CString(spSession->IsAdmin());\n\n\t\t\tif (pUser) {\n\t\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\t\t\t\tTmpl[\"Nick\"] = pUser->GetNick();\n\t\t\t\tTmpl[\"AltNick\"] = pUser->GetAltNick();\n\t\t\t\tTmpl[\"StatusPrefix\"] = pUser->GetStatusPrefix();\n\t\t\t\tTmpl[\"Ident\"] = pUser->GetIdent();\n\t\t\t\tTmpl[\"RealName\"] = pUser->GetRealName();\n\t\t\t\tTmpl[\"QuitMsg\"] = pUser->GetQuitMsg();\n\t\t\t\tTmpl[\"DefaultChanModes\"] = pUser->GetDefaultChanModes();\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pUser->GetBufferCount());\n\t\t\t\tTmpl[\"TimestampFormat\"] = pUser->GetTimestampFormat();\n\t\t\t\tTmpl[\"Timezone\"] = pUser->GetTimezone();\n\t\t\t\tTmpl[\"JoinTries\"] = CString(pUser->JoinTries());\n\t\t\t\tTmpl[\"MaxNetworks\"] = CString(pUser->MaxNetworks());\n\n\t\t\t\tconst set<CString>& ssAllowedHosts = pUser->GetAllowedHosts();\n\t\t\t\tfor (set<CString>::const_iterator it = ssAllowedHosts.begin(); it != ssAllowedHosts.end(); ++it) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"AllowedHostLoop\");\n\t\t\t\t\tl[\"Host\"] = *it;\n\t\t\t\t}\n\n\t\t\t\tconst vector<CIRCNetwork*>& vNetworks = pUser->GetNetworks();\n\t\t\t\tfor (unsigned int a = 0; a < vNetworks.size(); a++) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"NetworkLoop\");\n\t\t\t\t\tl[\"Name\"] = vNetworks[a]->GetName();\n\t\t\t\t\tl[\"Username\"] = pUser->GetUserName();\n\t\t\t\t\tl[\"Clients\"] = CString(vNetworks[a]->GetClients().size());\n\t\t\t\t\tl[\"IRCNick\"] = vNetworks[a]->GetIRCNick().GetNick();\n\t\t\t\t\tCServer* pServer = vNetworks[a]->GetCurrentServer();\n\t\t\t\t\tif (pServer) {\n\t\t\t\t\t\tl[\"Server\"] = pServer->GetName();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst MCString& msCTCPReplies = pUser->GetCTCPReplies();\n\t\t\t\tfor (MCString::const_iterator it2 = msCTCPReplies.begin(); it2 != msCTCPReplies.end(); ++it2) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"CTCPLoop\");\n\t\t\t\t\tl[\"CTCP\"] = it2->first + \" \" + it2->second;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tTmpl[\"Action\"] = \"adduser\";\n\t\t\t\tTmpl[\"Title\"] = \"Add User\";\n\t\t\t\tTmpl[\"StatusPrefix\"] = \"*\";\n\t\t\t}\n\n\t\t\tSCString ssTimezones = CUtils::GetTimezones();\n\t\t\tfor (SCString::iterator i = ssTimezones.begin(); i != ssTimezones.end(); ++i) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"TZLoop\");\n\t\t\t\tl[\"TZ\"] = *i;\n\t\t\t}\n\n\t\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\t\tTmpl[\"BindHostEdit\"] = \"true\";\n\t\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\t\tif (vsBindHosts.empty()) {\n\t\t\t\t\tif (pUser) {\n\t\t\t\t\t\tTmpl[\"BindHost\"] = pUser->GetBindHost();\n\t\t\t\t\t\tTmpl[\"DCCBindHost\"] = pUser->GetDCCBindHost();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbool bFoundBindHost = false;\n\t\t\t\t\tbool bFoundDCCBindHost = false;\n\t\t\t\t\tfor (unsigned int b = 0; b < vsBindHosts.size(); b++) {\n\t\t\t\t\t\tconst CString& sBindHost = vsBindHosts[b];\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\t\t\t\t\t\tCTemplate& k = Tmpl.AddRow(\"DCCBindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = sBindHost;\n\t\t\t\t\t\tk[\"BindHost\"] = sBindHost;\n\n\t\t\t\t\t\tif (pUser && pUser->GetBindHost() == sBindHost) {\n\t\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundBindHost = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (pUser && pUser->GetDCCBindHost() == sBindHost) {\n\t\t\t\t\t\t\tk[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundDCCBindHost = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If our current bindhost is not in the global list...\n\t\t\t\t\tif (pUser && !bFoundBindHost && !pUser->GetBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pUser->GetBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t\tif (pUser && !bFoundDCCBindHost && !pUser->GetDCCBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"DCCBindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pUser->GetDCCBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvector<CString> vDirs;\n\t\t\tWebSock.GetAvailSkins(vDirs);\n\n\t\t\tfor (unsigned int d = 0; d < vDirs.size(); d++) {\n\t\t\t\tconst CString& SubDir = vDirs[d];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"SkinLoop\");\n\t\t\t\tl[\"Name\"] = SubDir;\n\n\t\t\t\tif (pUser && SubDir == pUser->GetSkinName()) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset<CModInfo> ssUserMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssUserMods);\n\n\t\t\tfor (set<CModInfo>::iterator it = ssUserMods.begin(); it != ssUserMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\n\t\t\t\tCModule *pModule = NULL;\n\t\t\t\tif (pUser)\n\t\t\t\t\tpModule = pUser->GetModules().FindModule(Info.GetName());\n\t\t\t\tif (pModule) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\tif (CModInfo::UserModule == GetType() && Info.GetName() == GetModName()) {\n\t\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!spSession->IsAdmin() && pUser && pUser->DenyLoadMod()) {\n\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCTemplate& o1 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to1[\"Name\"] = \"autoclearchanbuffer\";\n\t\t\to1[\"DisplayName\"] = \"Auto Clear Chan Buffer\";\n\t\t\to1[\"Tooltip\"] = \"Automatically Clear Channel Buffer After Playback (the default value for new channels)\";\n\t\t\tif (!pUser || pUser->AutoClearChanBuffer()) { o1[\"Checked\"] = \"true\"; }\n\n\t\t\t/* o2 used to be auto cycle which was removed */\n\n\t\t\tCTemplate& o4 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to4[\"Name\"] = \"multiclients\";\n\t\t\to4[\"DisplayName\"] = \"Multi Clients\";\n\t\t\tif (!pUser || pUser->MultiClients()) { o4[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o7 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to7[\"Name\"] = \"appendtimestamp\";\n\t\t\to7[\"DisplayName\"] = \"Append Timestamps\";\n\t\t\tif (pUser && pUser->GetTimestampAppend()) { o7[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o8 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to8[\"Name\"] = \"prependtimestamp\";\n\t\t\to8[\"DisplayName\"] = \"Prepend Timestamps\";\n\t\t\tif (pUser && pUser->GetTimestampPrepend()) { o8[\"Checked\"] = \"true\"; }\n\n\t\t\tif (spSession->IsAdmin()) {\n\t\t\t\tCTemplate& o9 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to9[\"Name\"] = \"denyloadmod\";\n\t\t\t\to9[\"DisplayName\"] = \"Deny LoadMod\";\n\t\t\t\tif (pUser && pUser->DenyLoadMod()) { o9[\"Checked\"] = \"true\"; }\n\n\t\t\t\tCTemplate& o10 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to10[\"Name\"] = \"isadmin\";\n\t\t\t\to10[\"DisplayName\"] = \"Admin\";\n\t\t\t\tif (pUser && pUser->IsAdmin()) { o10[\"Checked\"] = \"true\"; }\n\t\t\t\tif (pUser && pUser == CZNC::Get().FindUser(WebSock.GetUser())) { o10[\"Disabled\"] = \"true\"; }\n\n\t\t\t\tCTemplate& o11 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to11[\"Name\"] = \"denysetbindhost\";\n\t\t\t\to11[\"DisplayName\"] = \"Deny SetBindHost\";\n\t\t\t\tif (pUser && pUser->DenySetBindHost()) { o11[\"Checked\"] = \"true\"; }\n\t\t\t}\n\n\t\t\tFOR_EACH_MODULE(i, pUser) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/user\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminUser.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/* If pUser is NULL, we are adding a user, else we are editing this one */\n\n\t\tCString sUsername = WebSock.GetParam(\"user\");\n\t\tif (!pUser && CZNC::Get().FindUser(sUsername)) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [User \" + sUsername + \" already exists]\");\n\t\t\treturn true;\n\t\t}\n\n\t\tCUser* pNewUser = GetNewUser(WebSock, pUser);\n\t\tif (!pNewUser) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid user settings\");\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sErr;\n\t\tCString sAction;\n\n\t\tif (!pUser) {\n\t\t\tCString sClone = WebSock.GetParam(\"clone\");\n\t\t\tif (CUser *pCloneUser = CZNC::Get().FindUser(sClone)) {\n\t\t\t\tpNewUser->CloneNetworks(*pCloneUser);\n\t\t\t}\n\n\t\t\t// Add User Submission\n\t\t\tif (!CZNC::Get().AddUser(pNewUser, sErr)) {\n\t\t\t\tdelete pNewUser;\n\t\t\t\tWebSock.PrintErrorPage(\"Invalid submission [\" + sErr + \"]\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpUser = pNewUser;\n\t\t\tsAction = \"added\";\n\t\t} else {\n\t\t\t// Edit User Submission\n\t\t\tif (!pUser->Clone(*pNewUser, sErr, false)) {\n\t\t\t\tdelete pNewUser;\n\t\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [\" + sErr + \"]\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tdelete pNewUser;\n\t\t\tsAction = \"edited\";\n\t\t}\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"Username\"] = sUsername;\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, pUser) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/user\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"User \" + sAction + \", but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!spSession->IsAdmin()) {\n\t\t\tWebSock.Redirect(\"edituser\");\n\t\t} else {\n\t\t\tWebSock.Redirect(\"listusers\");\n\t\t}\n\n\t\t/* we don't want the template to be printed while we redirect */\n\t\treturn false;\n\t}\n\n\tbool ListUsersPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tconst map<CString,CUser*>& msUsers = CZNC::Get().GetUserMap();\n\t\tTmpl[\"Title\"] = \"List Users\";\n\t\tTmpl[\"Action\"] = \"listusers\";\n\n\t\tunsigned int a = 0;\n\n\t\tfor (map<CString,CUser*>::const_iterator it = msUsers.begin(); it != msUsers.end(); ++it, a++) {\n\t\t\tCTemplate& l = Tmpl.AddRow(\"UserLoop\");\n\t\t\tCUser& User = *it->second;\n\n\t\t\tl[\"Username\"] = User.GetUserName();\n\t\t\tl[\"Clients\"] = CString(User.GetAllClients().size());\n\t\t\tl[\"Networks\"] = CString(User.GetNetworks().size());\n\n\t\t\tif (&User == spSession->GetUser()) {\n\t\t\t\tl[\"IsSelf\"] = \"true\";\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tbool TrafficPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl[\"Uptime\"] = CZNC::Get().GetUptime();\n\n\t\tconst map<CString,CUser*>& msUsers = CZNC::Get().GetUserMap();\n\t\tTmpl[\"TotalUsers\"] = CString(msUsers.size());\n\n\t\tsize_t uiNetworks = 0, uiAttached = 0, uiClients = 0, uiServers = 0;\n\n\t\tfor (map<CString,CUser*>::const_iterator it = msUsers.begin(); it != msUsers.end(); ++it) {\n\t\t\tCUser& User = *it->second;\n\t\t\tvector<CIRCNetwork*> vNetworks = User.GetNetworks();\n\n\t\t\tfor (vector<CIRCNetwork*>::const_iterator it2 = vNetworks.begin(); it2 != vNetworks.end(); ++it2) {\n\t\t\t\tCIRCNetwork *pNetwork = *it2;\n\t\t\t\tuiNetworks++;\n\n\t\t\t\tif (pNetwork->IsIRCConnected()) {\n\t\t\t\t\tuiServers++;\n\t\t\t\t}\n\n\t\t\t\tif (pNetwork->IsNetworkAttached()) {\n\t\t\t\t\tuiAttached++;\n\t\t\t\t}\n\n\t\t\t\tuiClients += pNetwork->GetClients().size();\n\t\t\t}\n\n\t\t\tuiClients += User.GetUserClients().size();\n\t\t}\n\n\t\tTmpl[\"TotalNetworks\"] = CString(uiNetworks);\n\t\tTmpl[\"AttachedNetworks\"] = CString(uiAttached);\n\t\tTmpl[\"TotalCConnections\"] = CString(uiClients);\n\t\tTmpl[\"TotalIRCConnections\"] = CString(uiServers);\n\n\t\tCZNC::TrafficStatsPair Users, ZNC, Total;\n\t\tCZNC::TrafficStatsMap traffic = CZNC::Get().GetTrafficStats(Users, ZNC, Total);\n\t\tCZNC::TrafficStatsMap::const_iterator it;\n\n\t\tfor (it = traffic.begin(); it != traffic.end(); ++it) {\n\t\t\tCTemplate& l = Tmpl.AddRow(\"TrafficLoop\");\n\n\t\t\tl[\"Username\"] = it->first;\n\t\t\tl[\"In\"] = CString::ToByteStr(it->second.first);\n\t\t\tl[\"Out\"] = CString::ToByteStr(it->second.second);\n\t\t\tl[\"Total\"] = CString::ToByteStr(it->second.first + it->second.second);\n\t\t}\n\n\t\tTmpl[\"UserIn\"] = CString::ToByteStr(Users.first);\n\t\tTmpl[\"UserOut\"] = CString::ToByteStr(Users.second);\n\t\tTmpl[\"UserTotal\"] = CString::ToByteStr(Users.first + Users.second);\n\n\t\tTmpl[\"ZNCIn\"] = CString::ToByteStr(ZNC.first);\n\t\tTmpl[\"ZNCOut\"] = CString::ToByteStr(ZNC.second);\n\t\tTmpl[\"ZNCTotal\"] = CString::ToByteStr(ZNC.first + ZNC.second);\n\n\t\tTmpl[\"AllIn\"] = CString::ToByteStr(Total.first);\n\t\tTmpl[\"AllOut\"] = CString::ToByteStr(Total.second);\n\t\tTmpl[\"AllTotal\"] = CString::ToByteStr(Total.first + Total.second);\n\n\t\treturn true;\n\t}\n\n\tbool AddListener(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tunsigned short uPort = WebSock.GetParam(\"port\").ToUShort();\n\t\tCString sHost = WebSock.GetParam(\"host\");\n\t\tif (sHost == \"*\") sHost = \"\";\n\t\tbool bSSL = WebSock.GetParam(\"ssl\").ToBool();\n\t\tbool bIPv4 = WebSock.GetParam(\"ipv4\").ToBool();\n\t\tbool bIPv6 = WebSock.GetParam(\"ipv6\").ToBool();\n\t\tbool bIRC = WebSock.GetParam(\"irc\").ToBool();\n\t\tbool bWeb = WebSock.GetParam(\"web\").ToBool();\n\n\t\tEAddrType eAddr = ADDR_ALL;\n\t\tif (bIPv4) {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_ALL;\n\t\t\t} else {\n\t\t\t\teAddr = ADDR_IPV4ONLY;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_IPV6ONLY;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Choose either IPv4 or IPv6 or both.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCListener::EAcceptType eAccept;\n\t\tif (bIRC) {\n\t\t\tif (bWeb) {\n\t\t\t\teAccept = CListener::ACCEPT_ALL;\n\t\t\t} else {\n\t\t\t\teAccept = CListener::ACCEPT_IRC;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bWeb) {\n\t\t\t\teAccept = CListener::ACCEPT_HTTP;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Choose either IRC or Web or both.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCString sMessage;\n\t\tif (CZNC::Get().AddListener(uPort, sHost, bSSL, eAddr, eAccept, sMessage)) {\n\t\t\tif (!sMessage.empty()) {\n\t\t\t\tWebSock.GetSession()->AddSuccess(sMessage);\n\t\t\t}\n\t\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\t\tWebSock.GetSession()->AddError(\"Port changed, but config was not written\");\n\t\t\t}\n\t\t} else {\n\t\t\tWebSock.GetSession()->AddError(sMessage);\n\t\t}\n\n\t\treturn SettingsPage(WebSock, Tmpl);\n\t}\n\n\tbool DelListener(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tunsigned short uPort = WebSock.GetParam(\"port\").ToUShort();\n\t\tCString sHost = WebSock.GetParam(\"host\");\n\t\tbool bIPv4 = WebSock.GetParam(\"ipv4\").ToBool();\n\t\tbool bIPv6 = WebSock.GetParam(\"ipv6\").ToBool();\n\n\t\tEAddrType eAddr = ADDR_ALL;\n\t\tif (bIPv4) {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_ALL;\n\t\t\t} else {\n\t\t\t\teAddr = ADDR_IPV4ONLY;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_IPV6ONLY;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Invalid request.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCListener* pListener = CZNC::Get().FindListener(uPort, sHost, eAddr);\n\t\tif (pListener) {\n\t\t\tCZNC::Get().DelListener(pListener);\n\t\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\t\tWebSock.GetSession()->AddError(\"Port changed, but config was not written\");\n\t\t\t}\n\t\t} else {\n\t\t\tWebSock.GetSession()->AddError(\"The specified listener was not found.\");\n\t\t}\n\n\t\treturn SettingsPage(WebSock, Tmpl);\n\t}\n\n\tbool SettingsPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tTmpl.SetFile(\"settings.tmpl\");\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tCString sBindHosts, sMotd;\n\t\t\tTmpl[\"Action\"] = \"settings\";\n\t\t\tTmpl[\"Title\"] = \"Settings\";\n\t\t\tTmpl[\"StatusPrefix\"] = CZNC::Get().GetStatusPrefix();\n\t\t\tTmpl[\"MaxBufferSize\"] = CString(CZNC::Get().GetMaxBufferSize());\n\t\t\tTmpl[\"ConnectDelay\"] = CString(CZNC::Get().GetConnectDelay());\n\t\t\tTmpl[\"ServerThrottle\"] = CString(CZNC::Get().GetServerThrottle());\n\t\t\tTmpl[\"AnonIPLimit\"] = CString(CZNC::Get().GetAnonIPLimit());\n\t\t\tTmpl[\"ProtectWebSessions\"] = CString(CZNC::Get().GetProtectWebSessions());\n\n\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\tfor (unsigned int a = 0; a < vsBindHosts.size(); a++) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\t\t\t\tl[\"BindHost\"] = vsBindHosts[a];\n\t\t\t}\n\n\t\t\tconst VCString& vsMotd = CZNC::Get().GetMotd();\n\t\t\tfor (unsigned int b = 0; b < vsMotd.size(); b++) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"MOTDLoop\");\n\t\t\t\tl[\"Line\"] = vsMotd[b];\n\t\t\t}\n\n\t\t\tconst vector<CListener*>& vpListeners = CZNC::Get().GetListeners();\n\t\t\tfor (unsigned int c = 0; c < vpListeners.size(); c++) {\n\t\t\t\tCListener* pListener = vpListeners[c];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ListenLoop\");\n\n\t\t\t\tl[\"Port\"] = CString(pListener->GetPort());\n\t\t\t\tl[\"BindHost\"] = pListener->GetBindHost();\n\n\t\t\t\tl[\"IsWeb\"] = CString(pListener->GetAcceptType() != CListener::ACCEPT_IRC);\n\t\t\t\tl[\"IsIRC\"] = CString(pListener->GetAcceptType() != CListener::ACCEPT_HTTP);\n\n\t\t\t\t// simple protection for user from shooting his own foot\n\t\t\t\t// TODO check also for hosts/families\n\t\t\t\t// such check is only here, user still can forge HTTP request to delete web port\n\t\t\t\tl[\"SuggestDeletion\"] = CString(pListener->GetPort() != WebSock.GetLocalPort());\n\n#ifdef HAVE_LIBSSL\n\t\t\t\tif (pListener->IsSSL()) {\n\t\t\t\t\tl[\"IsSSL\"] = \"true\";\n\t\t\t\t}\n#endif\n\n#ifdef HAVE_IPV6\n\t\t\t\tswitch (pListener->GetAddrType()) {\n\t\t\t\t\tcase ADDR_IPV4ONLY:\n\t\t\t\t\t\tl[\"IsIPV4\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ADDR_IPV6ONLY:\n\t\t\t\t\t\tl[\"IsIPV6\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ADDR_ALL:\n\t\t\t\t\t\tl[\"IsIPV4\"] = \"true\";\n\t\t\t\t\t\tl[\"IsIPV6\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n#else\n\t\t\t\tl[\"IsIPV4\"] = \"true\";\n#endif\n\t\t\t}\n\n\t\t\tvector<CString> vDirs;\n\t\t\tWebSock.GetAvailSkins(vDirs);\n\n\t\t\tfor (unsigned int d = 0; d < vDirs.size(); d++) {\n\t\t\t\tconst CString& SubDir = vDirs[d];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"SkinLoop\");\n\t\t\t\tl[\"Name\"] = SubDir;\n\n\t\t\t\tif (SubDir == CZNC::Get().GetSkinName()) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset<CModInfo> ssGlobalMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssGlobalMods, CModInfo::GlobalModule);\n\n\t\t\tfor (set<CModInfo>::iterator it = ssGlobalMods.begin(); it != ssGlobalMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tCModule *pModule = CZNC::Get().GetModules().FindModule(Info.GetName());\n\t\t\t\tif (pModule) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\tif (CModInfo::GlobalModule == GetType() && Info.GetName() == GetModName()) {\n\t\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sArg;\n\t\tsArg = WebSock.GetParam(\"statusprefix\"); CZNC::Get().SetStatusPrefix(sArg);\n\t\tsArg = WebSock.GetParam(\"maxbufsize\"); CZNC::Get().SetMaxBufferSize(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"connectdelay\"); CZNC::Get().SetConnectDelay(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"serverthrottle\"); CZNC::Get().SetServerThrottle(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"anoniplimit\"); CZNC::Get().SetAnonIPLimit(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"protectwebsessions\"); CZNC::Get().SetProtectWebSessions(sArg.ToBool());\n\n\t\tVCString vsArgs;\n\t\tWebSock.GetRawParam(\"motd\").Split(\"\\n\", vsArgs);\n\t\tCZNC::Get().ClearMotd();\n\n\t\tunsigned int a = 0;\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCZNC::Get().AddMotd(vsArgs[a].TrimRight_n());\n\t\t}\n\n\t\tWebSock.GetRawParam(\"bindhosts\").Split(\"\\n\", vsArgs);\n\t\tCZNC::Get().ClearBindHosts();\n\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCZNC::Get().AddBindHost(vsArgs[a].Trim_n());\n\t\t}\n\n\t\tCZNC::Get().SetSkinName(WebSock.GetParam(\"skin\"));\n\n\t\tset<CString> ssArgs;\n\t\tWebSock.GetParamValues(\"loadmod\", ssArgs);\n\n\t\tfor (set<CString>::iterator it = ssArgs.begin(); it != ssArgs.end(); ++it) {\n\t\t\tCString sModRet;\n\t\t\tCString sModName = (*it).TrimRight_n(\"\\r\");\n\t\t\tCString sModLoadError;\n\n\t\t\tif (!sModName.empty()) {\n\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\tCModule *pMod = CZNC::Get().GetModules().FindModule(sModName);\n\t\t\t\tif (!pMod) {\n\t\t\t\t\tif (!CZNC::Get().GetModules().LoadModule(sModName, sArgs, CModInfo::GlobalModule, NULL, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t} else if (pMod->GetArgs() != sArgs) {\n\t\t\t\t\tif (!CZNC::Get().GetModules().ReloadModule(sModName, sArgs, NULL, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to reload module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\tWebSock.GetSession()->AddError(sModLoadError);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst CModules& vCurMods = CZNC::Get().GetModules();\n\t\tset<CString> ssUnloadMods;\n\n\t\tfor (a = 0; a < vCurMods.size(); a++) {\n\t\t\tCModule* pCurMod = vCurMods[a];\n\n\t\t\tif (ssArgs.find(pCurMod->GetModName()) == ssArgs.end() &&\n\t\t\t\t\t(CModInfo::GlobalModule != GetType() || pCurMod->GetModName() != GetModName())) {\n\t\t\t\tssUnloadMods.insert(pCurMod->GetModName());\n\t\t\t}\n\t\t}\n\n\t\tfor (set<CString>::iterator it2 = ssUnloadMods.begin(); it2 != ssUnloadMods.end(); ++it2) {\n\t\t\tCZNC::Get().GetModules().UnloadModule(*it2);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.GetSession()->AddError(\"Settings changed, but config was not written\");\n\t\t}\n\n\t\tWebSock.Redirect(\"settings\");\n\t\t/* we don't want the template to be printed while we redirect */\n\t\treturn false;\n\t}\n};\n\ntemplate<> void TModInfo<CWebAdminMod>(CModInfo& Info) {\n\tInfo.AddType(CModInfo::UserModule);\n\tInfo.SetWikiPage(\"webadmin\");\n}\n\nGLOBALMODULEDEFS(CWebAdminMod, \"Web based administration module\")\n"], "fixing_code": ["/*\n * Copyright (C) 2004-2013  See the AUTHORS file for details.\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 as published\n * by the Free Software Foundation.\n */\n\n#include <znc/Chan.h>\n#include <znc/Server.h>\n#include <znc/User.h>\n#include <znc/IRCNetwork.h>\n#include <znc/IRCSock.h>\n\nusing std::stringstream;\nusing std::make_pair;\nusing std::set;\nusing std::vector;\nusing std::map;\n\n/* Stuff to be able to write this:\n   // i will be name of local variable, see below\n   // pUser can be NULL if only global modules are needed\n   FOR_EACH_MODULE(i, pUser) {\n       // i is local variable of type CModules::iterator,\n\t   // so *i has type CModule*\n   }\n*/\nstruct FOR_EACH_MODULE_Type {\n\tenum {\n\t\tAtGlobal,\n\t\tAtUser,\n\t\tAtNetwork,\n\t} where;\n\tCModules CMtemp;\n\tCModules& CMuser;\n\tCModules& CMnet;\n\tFOR_EACH_MODULE_Type(CUser* pUser) : CMuser(pUser ? pUser->GetModules() : CMtemp), CMnet(CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\tFOR_EACH_MODULE_Type(CIRCNetwork* pNetwork) : CMuser(pNetwork ? pNetwork->GetUser()->GetModules() : CMtemp), CMnet(pNetwork ? pNetwork->GetModules() : CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\tFOR_EACH_MODULE_Type(std::pair<CUser*, CIRCNetwork*> arg) : CMuser(arg.first ? arg.first->GetModules() : CMtemp), CMnet(arg.second ? arg.second->GetModules() : CMtemp) {\n\t\twhere = AtGlobal;\n\t}\n\toperator bool() { return false; }\n};\n\ninline bool FOR_EACH_MODULE_CanContinue(FOR_EACH_MODULE_Type& state, CModules::iterator& i) {\n\tif (state.where == FOR_EACH_MODULE_Type::AtGlobal && i == CZNC::Get().GetModules().end()) {\n\t\ti = state.CMuser.begin();\n\t\tstate.where = FOR_EACH_MODULE_Type::AtUser;\n\t}\n\tif (state.where == FOR_EACH_MODULE_Type::AtUser && i == state.CMuser.end()) {\n\t\ti = state.CMnet.begin();\n\t\tstate.where = FOR_EACH_MODULE_Type::AtNetwork;\n\t}\n\treturn !(state.where == FOR_EACH_MODULE_Type::AtNetwork && i == state.CMnet.end());\n}\n\n#define FOR_EACH_MODULE(I, pUserOrNetwork)\\\n\tif (FOR_EACH_MODULE_Type FOR_EACH_MODULE_Var = pUserOrNetwork) {} else\\\n\tfor (CModules::iterator I = CZNC::Get().GetModules().begin(); FOR_EACH_MODULE_CanContinue(FOR_EACH_MODULE_Var, I); ++I)\n\nclass CWebAdminMod : public CModule {\npublic:\n\tMODCONSTRUCTOR(CWebAdminMod) {\n\t\tVPair vParams;\n\t\tvParams.push_back(make_pair(\"user\", \"\"));\n\t\tAddSubPage(new CWebSubPage(\"settings\", \"Global Settings\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"edituser\", \"Your Settings\", vParams));\n\t\tAddSubPage(new CWebSubPage(\"traffic\", \"Traffic Info\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"listusers\", \"List Users\", CWebSubPage::F_ADMIN));\n\t\tAddSubPage(new CWebSubPage(\"adduser\", \"Add User\", CWebSubPage::F_ADMIN));\n\t}\n\n\tvirtual ~CWebAdminMod() {\n\t}\n\n\tvirtual bool OnLoad(const CString& sArgStr, CString& sMessage) {\n\t\tif (sArgStr.empty() || CModInfo::GlobalModule != GetType())\n\t\t\treturn true;\n\n\t\t// We don't accept any arguments, but for backwards\n\t\t// compatibility we have to do some magic here.\n\t\tsMessage = \"Arguments converted to new syntax\";\n\n\t\tbool bSSL = false;\n\t\tbool bIPv6 = false;\n\t\tbool bShareIRCPorts = true;\n\t\tunsigned short uPort = 8080;\n\t\tCString sArgs(sArgStr);\n\t\tCString sPort;\n\t\tCString sListenHost;\n\n\t\twhile (sArgs.Left(1) == \"-\") {\n\t\t\tCString sOpt = sArgs.Token(0);\n\t\t\tsArgs = sArgs.Token(1, true);\n\n\t\t\tif (sOpt.Equals(\"-IPV6\")) {\n\t\t\t\tbIPv6 = true;\n\t\t\t} else if (sOpt.Equals(\"-IPV4\")) {\n\t\t\t\tbIPv6 = false;\n\t\t\t} else if (sOpt.Equals(\"-noircport\")) {\n\t\t\t\tbShareIRCPorts = false;\n\t\t\t} else {\n\t\t\t\t// Uhm... Unknown option? Let's just ignore all\n\t\t\t\t// arguments, older versions would have returned\n\t\t\t\t// an error and denied loading\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// No arguments left: Only port sharing\n\t\tif (sArgs.empty() && bShareIRCPorts)\n\t\t\treturn true;\n\n\t\tif (sArgs.find(\" \") != CString::npos) {\n\t\t\tsListenHost = sArgs.Token(0);\n\t\t\tsPort = sArgs.Token(1, true);\n\t\t} else {\n\t\t\tsPort = sArgs;\n\t\t}\n\n\t\tif (sPort.Left(1) == \"+\") {\n\t\t\tsPort.TrimLeft(\"+\");\n\t\t\tbSSL = true;\n\t\t}\n\n\t\tif (!sPort.empty()) {\n\t\t\tuPort = sPort.ToUShort();\n\t\t}\n\n\t\tif (!bShareIRCPorts) {\n\t\t\t// Make all existing listeners IRC-only\n\t\t\tconst vector<CListener*>& vListeners = CZNC::Get().GetListeners();\n\t\t\tvector<CListener*>::const_iterator it;\n\t\t\tfor (it = vListeners.begin(); it != vListeners.end(); ++it) {\n\t\t\t\t(*it)->SetAcceptType(CListener::ACCEPT_IRC);\n\t\t\t}\n\t\t}\n\n\t\t// Now turn that into a listener instance\n\t\tCListener *pListener = new CListener(uPort, sListenHost, bSSL,\n\t\t\t\t(!bIPv6 ? ADDR_IPV4ONLY : ADDR_ALL), CListener::ACCEPT_HTTP);\n\n\t\tif (!pListener->Listen()) {\n\t\t\tsMessage = \"Failed to add backwards-compatible listener\";\n\t\t\treturn false;\n\t\t}\n\t\tCZNC::Get().AddListener(pListener);\n\n\t\tSetArgs(\"\");\n\t\treturn true;\n\t}\n\n\tCUser* GetNewUser(CWebSock& WebSock, CUser* pUser) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tCString sUsername = WebSock.GetParam(\"newuser\");\n\n\t\tif (sUsername.empty()) {\n\t\t\tsUsername = WebSock.GetParam(\"user\");\n\t\t}\n\n\t\tif (sUsername.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [Username is required]\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tif (pUser) {\n\t\t\t/* If we are editing a user we must not change the user name */\n\t\t\tsUsername = pUser->GetUserName();\n\t\t}\n\n\t\tCString sArg = WebSock.GetParam(\"password\");\n\n\t\tif (sArg != WebSock.GetParam(\"password2\")) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [Passwords do not match]\");\n\t\t\treturn NULL;\n\t\t}\n\n\t\tCUser* pNewUser = new CUser(sUsername);\n\n\t\tif (!sArg.empty()) {\n\t\t\tCString sSalt = CUtils::GetSalt();\n\t\t\tCString sHash = CUser::SaltedHash(sArg, sSalt);\n\t\t\tpNewUser->SetPass(sHash, CUser::HASH_DEFAULT, sSalt);\n\t\t}\n\n\t\tVCString vsArgs;\n\t\tunsigned int a = 0;\n\n\t\tWebSock.GetRawParam(\"allowedips\").Split(\"\\n\", vsArgs);\n\t\tif (vsArgs.size()) {\n\t\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\t\tpNewUser->AddAllowedHost(vsArgs[a].Trim_n());\n\t\t\t}\n\t\t} else {\n\t\t\tpNewUser->AddAllowedHost(\"*\");\n\t\t}\n\n\t\tWebSock.GetRawParam(\"ctcpreplies\").Split(\"\\n\", vsArgs);\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCString sReply = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\tpNewUser->AddCTCPReply(sReply.Token(0).Trim_n(), sReply.Token(1, true).Trim_n());\n\t\t}\n\n\t\tsArg = WebSock.GetParam(\"nick\"); if (!sArg.empty()) { pNewUser->SetNick(sArg); }\n\t\tsArg = WebSock.GetParam(\"altnick\"); if (!sArg.empty()) { pNewUser->SetAltNick(sArg); }\n\t\tsArg = WebSock.GetParam(\"statusprefix\"); if (!sArg.empty()) { pNewUser->SetStatusPrefix(sArg); }\n\t\tsArg = WebSock.GetParam(\"ident\"); if (!sArg.empty()) { pNewUser->SetIdent(sArg); }\n\t\tsArg = WebSock.GetParam(\"skin\"); if (!sArg.empty()) { pNewUser->SetSkinName(sArg); }\n\t\tsArg = WebSock.GetParam(\"realname\"); if (!sArg.empty()) { pNewUser->SetRealName(sArg); }\n\t\tsArg = WebSock.GetParam(\"quitmsg\"); if (!sArg.empty()) { pNewUser->SetQuitMsg(sArg); }\n\t\tsArg = WebSock.GetParam(\"chanmodes\"); if (!sArg.empty()) { pNewUser->SetDefaultChanModes(sArg); }\n\t\tsArg = WebSock.GetParam(\"timestampformat\"); if (!sArg.empty()) { pNewUser->SetTimestampFormat(sArg); }\n\n\t\tsArg = WebSock.GetParam(\"bindhost\");\n\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\tCString sArg2 = WebSock.GetParam(\"dccbindhost\");\n\t\t\tif (!sArg.empty()) {\n\t\t\t\tpNewUser->SetBindHost(sArg);\n\t\t\t}\n\t\t\tif (!sArg2.empty()) {\n\t\t\t\tpNewUser->SetDCCBindHost(sArg2);\n\t\t\t}\n\n\t\t\tconst VCString& vsHosts = CZNC::Get().GetBindHosts();\n\t\t\tif (!spSession->IsAdmin() && !vsHosts.empty()) {\n\t\t\t\tVCString::const_iterator it;\n\t\t\t\tbool bFound = false;\n\t\t\t\tbool bFoundDCC = false;\n\n\t\t\t\tfor (it = vsHosts.begin(); it != vsHosts.end(); ++it) {\n\t\t\t\t\tif (sArg.Equals(*it)) {\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (sArg2.Equals(*it)) {\n\t\t\t\t\t\tbFoundDCC = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!bFound) {\n\t\t\t\t\tpNewUser->SetBindHost(pUser ? pUser->GetBindHost() : \"\");\n\t\t\t\t}\n\t\t\t\tif (!bFoundDCC) {\n\t\t\t\t\tpNewUser->SetDCCBindHost(pUser ? pUser->GetDCCBindHost() : \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (pUser){\n\t\t\tpNewUser->SetBindHost(pUser->GetBindHost());\n\t\t\tpNewUser->SetDCCBindHost(pUser->GetDCCBindHost());\n\t\t}\n\n\t\tsArg = WebSock.GetParam(\"bufsize\"); if (!sArg.empty()) pNewUser->SetBufferCount(sArg.ToUInt(), spSession->IsAdmin());\n\t\tif (!sArg.empty()) {\n\t\t\t// First apply the old limit in case the new one is too high\n\t\t\tif (pUser)\n\t\t\t\tpNewUser->SetBufferCount(pUser->GetBufferCount(), true);\n\t\t\tpNewUser->SetBufferCount(sArg.ToUInt(), spSession->IsAdmin());\n\t\t}\n\n\t\tpNewUser->SetSkinName(WebSock.GetParam(\"skin\"));\n\t\tpNewUser->SetAutoClearChanBuffer(WebSock.GetParam(\"autoclearchanbuffer\").ToBool());\n\t\tpNewUser->SetMultiClients(WebSock.GetParam(\"multiclients\").ToBool());\n\t\tpNewUser->SetTimestampAppend(WebSock.GetParam(\"appendtimestamp\").ToBool());\n\t\tpNewUser->SetTimestampPrepend(WebSock.GetParam(\"prependtimestamp\").ToBool());\n\t\tpNewUser->SetTimezone(WebSock.GetParam(\"timezone\"));\n\t\tpNewUser->SetJoinTries(WebSock.GetParam(\"jointries\").ToUInt());\n\n\t\tif (spSession->IsAdmin()) {\n\t\t\tpNewUser->SetDenyLoadMod(WebSock.GetParam(\"denyloadmod\").ToBool());\n\t\t\tpNewUser->SetDenySetBindHost(WebSock.GetParam(\"denysetbindhost\").ToBool());\n\t\t\tsArg = WebSock.GetParam(\"maxnetworks\"); if (!sArg.empty()) pNewUser->SetMaxNetworks(sArg.ToUInt());\n\t\t} else if (pUser) {\n\t\t\tpNewUser->SetDenyLoadMod(pUser->DenyLoadMod());\n\t\t\tpNewUser->SetDenySetBindHost(pUser->DenySetBindHost());\n\t\t\tpNewUser->SetMaxNetworks(pUser->MaxNetworks());\n\t\t}\n\n\t\t// If pUser is not NULL, we are editing an existing user.\n\t\t// Users must not be able to change their own admin flag.\n\t\tif (pUser != CZNC::Get().FindUser(WebSock.GetUser())) {\n\t\t\tpNewUser->SetAdmin(WebSock.GetParam(\"isadmin\").ToBool());\n\t\t} else if (pUser) {\n\t\t\tpNewUser->SetAdmin(pUser->IsAdmin());\n\t\t}\n\n\t\tif (spSession->IsAdmin() || (pUser && !pUser->DenyLoadMod())) {\n\t\t\tWebSock.GetParamValues(\"loadmod\", vsArgs);\n\n\t\t\t// disallow unload webadmin from itself\n\t\t\tif (CModInfo::UserModule == GetType() && pUser == CZNC::Get().FindUser(WebSock.GetUser())) {\n\t\t\t\tbool bLoadedWebadmin = false;\n\t\t\t\tfor (a = 0; a < vsArgs.size(); ++a) {\n\t\t\t\t\tCString sModName = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\t\t\tif (sModName == GetModName()) {\n\t\t\t\t\t\tbLoadedWebadmin = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!bLoadedWebadmin) {\n\t\t\t\t\tvsArgs.push_back(GetModName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModName = vsArgs[a].TrimRight_n(\"\\r\");\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\tif (!sModName.empty()) {\n\t\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!pNewUser->GetModules().LoadModule(sModName, sArgs, CModInfo::UserModule, pNewUser, NULL, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (...) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sArgs + \"]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\t\tspSession->AddError(sModLoadError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (pUser) {\n\t\t\tCModules& Modules = pUser->GetModules();\n\n\t\t\tfor (a = 0; a < Modules.size(); a++) {\n\t\t\t\tCString sModName = Modules[a]->GetModName();\n\t\t\t\tCString sArgs = Modules[a]->GetArgs();\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\ttry {\n\t\t\t\t\tif (!pNewUser->GetModules().LoadModule(sModName, sArgs, CModInfo::UserModule, pNewUser, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t} catch (...) {\n\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"]\";\n\t\t\t\t}\n\n\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\tspSession->AddError(sModLoadError);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn pNewUser;\n\t}\n\n\tCString SafeGetUserNameParam(CWebSock& WebSock) {\n\t\tCString sUserName = WebSock.GetParam(\"user\"); // check for POST param\n\t\tif(sUserName.empty() && !WebSock.IsPost()) {\n\t\t\t// if no POST param named user has been given and we are not\n\t\t\t// saving this form, fall back to using the GET parameter.\n\t\t\tsUserName = WebSock.GetParam(\"user\", false);\n\t\t}\n\t\treturn sUserName;\n\t}\n\n\tCString SafeGetNetworkParam(CWebSock& WebSock) {\n\t\tCString sNetwork = WebSock.GetParam(\"network\"); // check for POST param\n\t\tif(sNetwork.empty() && !WebSock.IsPost()) {\n\t\t\t// if no POST param named user has been given and we are not\n\t\t\t// saving this form, fall back to using the GET parameter.\n\t\t\tsNetwork = WebSock.GetParam(\"network\", false);\n\t\t}\n\t\treturn sNetwork;\n\t}\n\n\tCUser* SafeGetUserFromParam(CWebSock& WebSock) {\n\t\treturn CZNC::Get().FindUser(SafeGetUserNameParam(WebSock));\n\t}\n\n\tCIRCNetwork* SafeGetNetworkFromParam(CWebSock& WebSock) {\n\t\tCUser* pUser = CZNC::Get().FindUser(SafeGetUserNameParam(WebSock));\n\t\tCIRCNetwork* pNetwork = NULL;\n\n\t\tif (pUser) {\n\t\t\tpNetwork = pUser->FindNetwork(SafeGetNetworkParam(WebSock));\n\t\t}\n\n\t\treturn pNetwork;\n\t}\n\n\tvirtual CString GetWebMenuTitle() { return \"webadmin\"; }\n\tvirtual bool OnWebRequest(CWebSock& WebSock, const CString& sPageName, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\n\t\tif (sPageName == \"settings\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"adduser\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn UserPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"addnetwork\") {\n\t\t\tCUser* pUser = SafeGetUserFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pUser) {\n\t\t\t\treturn NetworkPage(WebSock, Tmpl, pUser);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"editnetwork\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || !pNetwork || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn NetworkPage(WebSock, Tmpl, pNetwork->GetUser(), pNetwork);\n\n\t\t} else if (sPageName == \"delnetwork\") {\n\t\t\tCString sUser = WebSock.GetParam(\"user\");\n\t\t\tif (sUser.empty() && !WebSock.IsPost()) {\n\t\t\t\tsUser = WebSock.GetParam(\"user\", false);\n\t\t\t}\n\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn DelNetwork(WebSock, pUser, Tmpl);\n\t\t} else if (sPageName == \"editchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || !pNetwork || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tCString sChan = WebSock.GetParam(\"name\");\n\t\t\tif(sChan.empty() && !WebSock.IsPost()) {\n\t\t\t\tsChan = WebSock.GetParam(\"name\", false);\n\t\t\t}\n\t\t\tCChan* pChan = pNetwork->FindChan(sChan);\n\t\t\tif (!pChan) {\n\t\t\t\tWebSock.PrintErrorPage(\"No such channel\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn ChanPage(WebSock, Tmpl, pNetwork, pChan);\n\t\t} else if (sPageName == \"addchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || !pNetwork || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\treturn ChanPage(WebSock, Tmpl, pNetwork);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"delchan\") {\n\t\t\tCIRCNetwork* pNetwork = SafeGetNetworkFromParam(WebSock);\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || !pNetwork || spSession->GetUser() != pNetwork->GetUser())) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\treturn DelChan(WebSock, pNetwork);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username or network\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"deluser\") {\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!WebSock.IsPost()) {\n\t\t\t\t// Show the \"Are you sure?\" page:\n\n\t\t\t\tCString sUser = WebSock.GetParam(\"user\", false);\n\t\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\t\tif (!pUser) {\n\t\t\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tTmpl.SetFile(\"del_user.tmpl\");\n\t\t\t\tTmpl[\"Username\"] = sUser;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// The \"Are you sure?\" page has been submitted with \"Yes\",\n\t\t\t// so we actually delete the user now:\n\n\t\t\tCString sUser = WebSock.GetParam(\"user\");\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUser);\n\n\t\t\tif (pUser && pUser == spSession->GetUser()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Please don't delete yourself, suicide is not the answer!\");\n\t\t\t\treturn true;\n\t\t\t} else if (CZNC::Get().DeleteUser(sUser)) {\n\t\t\t\tWebSock.Redirect(\"listusers\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"edituser\") {\n\t\t\tCString sUserName = SafeGetUserNameParam(WebSock);\n\t\t\tCUser* pUser = CZNC::Get().FindUser(sUserName);\n\n\t\t\tif(!pUser) {\n\t\t\t\tif(sUserName.empty()) {\n\t\t\t\t\tpUser = spSession->GetUser();\n\t\t\t\t} // else: the \"no such user\" message will be printed.\n\t\t\t}\n\n\t\t\t// Admin||Self Check\n\t\t\tif (!spSession->IsAdmin() && (!spSession->GetUser() || spSession->GetUser() != pUser)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (pUser) {\n\t\t\t\treturn UserPage(WebSock, Tmpl, pUser);\n\t\t\t}\n\n\t\t\tWebSock.PrintErrorPage(\"No such username\");\n\t\t\treturn true;\n\t\t} else if (sPageName == \"listusers\" && spSession->IsAdmin()) {\n\t\t\treturn ListUsersPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"traffic\" && spSession->IsAdmin()) {\n\t\t\treturn TrafficPage(WebSock, Tmpl);\n\t\t} else if (sPageName == \"index\") {\n\t\t\treturn true;\n\t\t} else if (sPageName == \"add_listener\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn AddListener(WebSock, Tmpl);\n\t\t} else if (sPageName == \"del_listener\") {\n\t\t\t// Admin Check\n\t\t\tif (!spSession->IsAdmin()) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn DelListener(WebSock, Tmpl);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tbool ChanPage(CWebSock& WebSock, CTemplate& Tmpl, CIRCNetwork* pNetwork, CChan* pChan = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_chan.tmpl\");\n\t\tCUser* pUser = pNetwork->GetUser();\n\n\t\tif (!pUser) {\n\t\t\tWebSock.PrintErrorPage(\"That user doesn't exist\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tTmpl[\"User\"] = pUser->GetUserName();\n\t\t\tTmpl[\"Network\"] = pNetwork->GetName();\n\n\t\t\tif (pChan) {\n\t\t\t\tTmpl[\"Action\"] = \"editchan\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit Channel\" + CString(\" [\" + pChan->GetName() + \"]\") + \" of Network [\" + pNetwork->GetName() + \"] of User [\" + pNetwork->GetUser()->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"ChanName\"] = pChan->GetName();\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pChan->GetBufferCount());\n\t\t\t\tTmpl[\"DefModes\"] = pChan->GetDefaultModes();\n\t\t\t\tTmpl[\"Key\"] = pChan->GetKey();\n\n\t\t\t\tif (pChan->InConfig()) {\n\t\t\t\t\tTmpl[\"InConfig\"] = \"true\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tTmpl[\"Action\"] = \"addchan\";\n\t\t\t\tTmpl[\"Title\"] = \"Add Channel\" + CString(\" for User [\" + pUser->GetUserName() + \"]\");\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pUser->GetBufferCount());\n\t\t\t\tTmpl[\"DefModes\"] = CString(pUser->GetDefaultChanModes());\n\t\t\t\tTmpl[\"InConfig\"] = \"true\";\n\t\t\t}\n\n\t\t\t// o1 used to be AutoCycle which was removed\n\n\t\t\tCTemplate& o2 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to2[\"Name\"] = \"autoclearchanbuffer\";\n\t\t\to2[\"DisplayName\"] = \"Auto Clear Chan Buffer\";\n\t\t\to2[\"Tooltip\"] = \"Automatically Clear Channel Buffer After Playback\";\n\t\t\tif ((pChan && pChan->AutoClearChanBuffer()) || (!pChan && pUser->AutoClearChanBuffer())) { o2[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o3 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to3[\"Name\"] = \"detached\";\n\t\t\to3[\"DisplayName\"] = \"Detached\";\n\t\t\tif (pChan && pChan->IsDetached()) { o3[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o4 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to4[\"Name\"] = \"disabled\";\n\t\t\to4[\"DisplayName\"] = \"Disabled\";\n\t\t\tif (pChan && pChan->IsDisabled()) { o4[\"Checked\"] = \"true\"; }\n\n\t\t\tFOR_EACH_MODULE(i, pNetwork) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/channel\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminChan.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sChanName = WebSock.GetParam(\"name\").Trim_n();\n\n\t\tif (!pChan) {\n\t\t\tif (sChanName.empty()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Channel name is a required argument\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (pNetwork->FindChan(sChanName.Token(0))) {\n\t\t\t\tWebSock.PrintErrorPage(\"Channel [\" + sChanName.Token(0) + \"] already exists\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpChan = new CChan(sChanName, pNetwork, true);\n\t\t\tpNetwork->AddChan(pChan);\n\t\t}\n\n\t\tpChan->SetBufferCount(WebSock.GetParam(\"buffercount\").ToUInt(), spSession->IsAdmin());\n\t\tpChan->SetDefaultModes(WebSock.GetParam(\"defmodes\"));\n\t\tpChan->SetInConfig(WebSock.GetParam(\"save\").ToBool());\n\t\tpChan->SetAutoClearChanBuffer(WebSock.GetParam(\"autoclearchanbuffer\").ToBool());\n\t\tpChan->SetKey(WebSock.GetParam(\"key\"));\n\n\t\tbool bDetached = WebSock.GetParam(\"detached\").ToBool();\n\t\tif (pChan->IsDetached() != bDetached) {\n\t\t\tif (bDetached) {\n\t\t\t\tpChan->DetachUser();\n\t\t\t} else {\n\t\t\t\tpChan->AttachUser();\n\t\t\t}\n\t\t}\n\n\t\tbool bDisabled = WebSock.GetParam(\"disabled\").ToBool();\n\t\tif (bDisabled)\n\t\t\tpChan->Disable();\n\t\telse\n\t\t\tpChan->Enable();\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"User\"] = pUser->GetUserName();\n\t\tTmplMod[\"ChanName\"] = sChanName;\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, pNetwork) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/channel\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Channel added/modified, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"editnetwork?user=\" + pUser->GetUserName().Escape_n(CString::EURL) + \"&network=\" + pNetwork->GetName().Escape_n(CString::EURL));\n\t\treturn true;\n\t}\n\n\tbool NetworkPage(CWebSock& WebSock, CTemplate& Tmpl, CUser* pUser, CIRCNetwork* pNetwork = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_network.tmpl\");\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\n\t\t\tset<CModInfo> ssNetworkMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssNetworkMods, CModInfo::NetworkModule);\n\t\t\tfor (set<CModInfo>::iterator it = ssNetworkMods.begin(); it != ssNetworkMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\n\t\t\t\tif (pNetwork) {\n\t\t\t\t\tCModule *pModule = pNetwork->GetModules().FindModule(Info.GetName());\n\t\t\t\t\tif (pModule) {\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!spSession->IsAdmin() && pUser->DenyLoadMod()) {\n\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\t\tTmpl[\"BindHostEdit\"] = \"true\";\n\t\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\t\tif (vsBindHosts.empty()) {\n\t\t\t\t\tif (pNetwork) {\n\t\t\t\t\t\tTmpl[\"BindHost\"] = pNetwork->GetBindHost();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbool bFoundBindHost = false;\n\t\t\t\t\tfor (unsigned int b = 0; b < vsBindHosts.size(); b++) {\n\t\t\t\t\t\tconst CString& sBindHost = vsBindHosts[b];\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = sBindHost;\n\n\t\t\t\t\t\tif (pNetwork && pNetwork->GetBindHost() == sBindHost) {\n\t\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundBindHost = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If our current bindhost is not in the global list...\n\t\t\t\t\tif (pNetwork && !bFoundBindHost && !pNetwork->GetBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pNetwork->GetBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (pNetwork) {\n\t\t\t\tTmpl[\"Action\"] = \"editnetwork\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit Network\" + CString(\" [\" + pNetwork->GetName() + \"]\") + \" of User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"Name\"] = pNetwork->GetName();\n\n\t\t\t\tTmpl[\"Nick\"] = pNetwork->GetNick();\n\t\t\t\tTmpl[\"AltNick\"] = pNetwork->GetAltNick();\n\t\t\t\tTmpl[\"Ident\"] = pNetwork->GetIdent();\n\t\t\t\tTmpl[\"RealName\"] = pNetwork->GetRealName();\n\n\t\t\t\tTmpl[\"FloodProtection\"] = CString(CIRCSock::IsFloodProtected(pNetwork->GetFloodRate()));\n\t\t\t\tTmpl[\"FloodRate\"] = CString(pNetwork->GetFloodRate());\n\t\t\t\tTmpl[\"FloodBurst\"] = CString(pNetwork->GetFloodBurst());\n\n\t\t\t\tTmpl[\"IRCConnectEnabled\"] = CString(pNetwork->GetIRCConnectEnabled());\n\n\t\t\t\tconst vector<CServer*>& vServers = pNetwork->GetServers();\n\t\t\t\tfor (unsigned int a = 0; a < vServers.size(); a++) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ServerLoop\");\n\t\t\t\t\tl[\"Server\"] = vServers[a]->GetString();\n\t\t\t\t}\n\n\t\t\t\tconst vector<CChan*>& Channels = pNetwork->GetChans();\n\t\t\t\tfor (unsigned int c = 0; c < Channels.size(); c++) {\n\t\t\t\t\tCChan* pChan = Channels[c];\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ChannelLoop\");\n\n\t\t\t\t\tl[\"Network\"] = pNetwork->GetName();\n\t\t\t\t\tl[\"Username\"] = pUser->GetUserName();\n\t\t\t\t\tl[\"Name\"] = pChan->GetName();\n\t\t\t\t\tl[\"Perms\"] = pChan->GetPermStr();\n\t\t\t\t\tl[\"CurModes\"] = pChan->GetModeString();\n\t\t\t\t\tl[\"DefModes\"] = pChan->GetDefaultModes();\n\t\t\t\t\tl[\"BufferCount\"] = CString(pChan->GetBufferCount());\n\t\t\t\t\tl[\"Options\"] = pChan->GetOptions();\n\n\t\t\t\t\tif (pChan->InConfig()) {\n\t\t\t\t\t\tl[\"InConfig\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!spSession->IsAdmin() && !pUser->HasSpaceForNewNetwork()) {\n\t\t\t\t\tWebSock.PrintErrorPage(\"Network number limit reached. Ask an admin to increase the limit for you, or delete few old ones from Your Settings\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tTmpl[\"Action\"] = \"addnetwork\";\n\t\t\t\tTmpl[\"Title\"] = \"Add Network for User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"IRCConnectEnabled\"] = \"true\";\n\t\t\t\tTmpl[\"FloodProtection\"] = \"true\";\n\t\t\t\tTmpl[\"FloodRate\"] = \"1.0\";\n\t\t\t\tTmpl[\"FloodBurst\"] = \"4\";\n\t\t\t}\n\n\t\t\tFOR_EACH_MODULE(i, make_pair(pUser, pNetwork)) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/network\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminNetwork.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sName = WebSock.GetParam(\"network\").Trim_n();\n\t\tif (sName.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"Network name is a required argument\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!pNetwork) {\n\t\t\tif (!spSession->IsAdmin() && !pUser->HasSpaceForNewNetwork()) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network number limit reached. Ask an admin to increase the limit for you, or delete few old ones from Your Settings\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (!CIRCNetwork::IsValidNetwork(sName)) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network name should be alphanumeric\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tpNetwork = pUser->AddNetwork(sName);\n\t\t\tif (!pNetwork) {\n\t\t\t\tWebSock.PrintErrorPage(\"Network [\" + sName.Token(0) + \"] already exists\");\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tCString sArg;\n\n\t\tpNetwork->SetNick(WebSock.GetParam(\"nick\"));\n\t\tpNetwork->SetAltNick(WebSock.GetParam(\"altnick\"));\n\t\tpNetwork->SetIdent(WebSock.GetParam(\"ident\"));\n\t\tpNetwork->SetRealName(WebSock.GetParam(\"realname\"));\n\n\t\tpNetwork->SetIRCConnectEnabled(WebSock.GetParam(\"doconnect\").ToBool());\n\n\t\tsArg = WebSock.GetParam(\"bindhost\");\n\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\tCString sHost = WebSock.GetParam(\"bindhost\");\n\t\t\tconst VCString& vsHosts = CZNC::Get().GetBindHosts();\n\t\t\tif (!spSession->IsAdmin() && !vsHosts.empty()) {\n\t\t\t\tVCString::const_iterator it;\n\t\t\t\tbool bFound = false;\n\n\t\t\t\tfor (it = vsHosts.begin(); it != vsHosts.end(); ++it) {\n\t\t\t\t\tif (sHost.Equals(*it)) {\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!bFound) {\n\t\t\t\t\tsHost = pNetwork->GetBindHost();\n\t\t\t\t}\n\t\t\t}\n\t\t\tpNetwork->SetBindHost(sHost);\n\t\t}\n\n\t\tif (WebSock.GetParam(\"floodprotection\").ToBool()) {\n\t\t\tpNetwork->SetFloodRate(WebSock.GetParam(\"floodrate\").ToDouble());\n\t\t\tpNetwork->SetFloodBurst(WebSock.GetParam(\"floodburst\").ToUShort());\n\t\t} else {\n\t\t\tpNetwork->SetFloodRate(-1);\n\t\t}\n\n\t\tVCString vsArgs;\n\n\t\tpNetwork->DelServers();\n\t\tWebSock.GetRawParam(\"servers\").Split(\"\\n\", vsArgs);\n\t\tfor (unsigned int a = 0; a < vsArgs.size(); a++) {\n\t\t\tpNetwork->AddServer(vsArgs[a].Trim_n());\n\t\t}\n\n\t\tWebSock.GetParamValues(\"channel\", vsArgs);\n\t\tfor (unsigned int a = 0; a < vsArgs.size(); a++) {\n\t\t\tconst CString& sChan = vsArgs[a];\n\t\t\tCChan *pChan = pNetwork->FindChan(sChan.TrimRight_n(\"\\r\"));\n\t\t\tif (pChan) {\n\t\t\t\tpChan->SetInConfig(WebSock.GetParam(\"save_\" + sChan).ToBool());\n\t\t\t}\n\t\t}\n\n\t\tset<CString> ssArgs;\n\t\tWebSock.GetParamValues(\"loadmod\", ssArgs);\n\t\tif (spSession->IsAdmin() || !pUser->DenyLoadMod()) {\n\t\t\tfor (set<CString>::iterator it = ssArgs.begin(); it != ssArgs.end(); ++it) {\n\t\t\t\tCString sModRet;\n\t\t\t\tCString sModName = (*it).TrimRight_n(\"\\r\");\n\t\t\t\tCString sModLoadError;\n\n\t\t\t\tif (!sModName.empty()) {\n\t\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\t\tCModule *pMod = pNetwork->GetModules().FindModule(sModName);\n\n\t\t\t\t\tif (!pMod) {\n\t\t\t\t\t\tif (!pNetwork->GetModules().LoadModule(sModName, sArgs, CModInfo::NetworkModule, pUser, pNetwork, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (pMod->GetArgs() != sArgs) {\n\t\t\t\t\t\tif (!pNetwork->GetModules().ReloadModule(sModName, sArgs, pUser, pNetwork, sModRet)) {\n\t\t\t\t\t\t\tsModLoadError = \"Unable to reload module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\t\tWebSock.GetSession()->AddError(sModLoadError);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst CModules& vCurMods = pNetwork->GetModules();\n\t\tset<CString> ssUnloadMods;\n\n\t\tfor (unsigned int a = 0; a < vCurMods.size(); a++) {\n\t\t\tCModule* pCurMod = vCurMods[a];\n\n\t\t\tif (ssArgs.find(pCurMod->GetModName()) == ssArgs.end() && pCurMod->GetModName() != GetModName()) {\n\t\t\t\tssUnloadMods.insert(pCurMod->GetModName());\n\t\t\t}\n\t\t}\n\n\t\tfor (set<CString>::iterator it2 = ssUnloadMods.begin(); it2 != ssUnloadMods.end(); ++it2) {\n\t\t\tpNetwork->GetModules().UnloadModule(*it2);\n\t\t}\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"Username\"] = pUser->GetUserName();\n\t\tTmplMod[\"Name\"] = pNetwork->GetName();\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, make_pair(pUser, pNetwork)) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/network\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Network added/modified, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"edituser?user=\" + pUser->GetUserName().Escape_n(CString::EURL));\n\t\treturn true;\n\t}\n\n\tbool DelNetwork(CWebSock& WebSock, CUser* pUser, CTemplate& Tmpl) {\n\t\tCString sNetwork = WebSock.GetParam(\"name\");\n\t\tif (sNetwork.empty() && !WebSock.IsPost()) {\n\t\t\tsNetwork = WebSock.GetParam(\"name\", false);\n\t\t}\n\n\t\tif (!pUser) {\n\t\t\tWebSock.PrintErrorPage(\"That user doesn't exist\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (sNetwork.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"That network doesn't exist for this user\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!WebSock.IsPost()) {\n\t\t\t// Show the \"Are you sure?\" page:\n\n\t\t\tTmpl.SetFile(\"del_network.tmpl\");\n\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\t\t\tTmpl[\"Network\"] = sNetwork;\n\t\t\treturn true;\n\t\t}\n\n\t\tpUser->DeleteNetwork(sNetwork);\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Network deleted, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"edituser?user=\" + pUser->GetUserName().Escape_n(CString::EURL));\n\t\treturn false;\n\t}\n\n\tbool DelChan(CWebSock& WebSock, CIRCNetwork* pNetwork) {\n\t\tCString sChan = WebSock.GetParam(\"name\", false);\n\n\t\tif (sChan.empty()) {\n\t\t\tWebSock.PrintErrorPage(\"That channel doesn't exist for this user\");\n\t\t\treturn true;\n\t\t}\n\n\t\tpNetwork->DelChan(sChan);\n\t\tpNetwork->PutIRC(\"PART \" + sChan);\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"Channel deleted, but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tWebSock.Redirect(\"editnetwork?user=\" + pNetwork->GetUser()->GetUserName().Escape_n(CString::EURL) + \"&network=\" + pNetwork->GetName().Escape_n(CString::EURL));\n\t\treturn false;\n\t}\n\n\tbool UserPage(CWebSock& WebSock, CTemplate& Tmpl, CUser* pUser = NULL) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl.SetFile(\"add_edit_user.tmpl\");\n\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tCString sAllowedHosts, sServers, sChans, sCTCPReplies;\n\n\t\t\tif (pUser) {\n\t\t\t\tTmpl[\"Action\"] = \"edituser\";\n\t\t\t\tTmpl[\"Title\"] = \"Edit User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\tTmpl[\"Edit\"] = \"true\";\n\t\t\t} else {\n\t\t\t\tCString sUsername = WebSock.GetParam(\"clone\", false);\n\t\t\t\tpUser = CZNC::Get().FindUser(sUsername);\n\n\t\t\t\tif (pUser) {\n\t\t\t\t\tTmpl[\"Title\"] = \"Clone User [\" + pUser->GetUserName() + \"]\";\n\t\t\t\t\tTmpl[\"Clone\"] = \"true\";\n\t\t\t\t\tTmpl[\"CloneUsername\"] = pUser->GetUserName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tTmpl[\"ImAdmin\"] = CString(spSession->IsAdmin());\n\n\t\t\tif (pUser) {\n\t\t\t\tTmpl[\"Username\"] = pUser->GetUserName();\n\t\t\t\tTmpl[\"Nick\"] = pUser->GetNick();\n\t\t\t\tTmpl[\"AltNick\"] = pUser->GetAltNick();\n\t\t\t\tTmpl[\"StatusPrefix\"] = pUser->GetStatusPrefix();\n\t\t\t\tTmpl[\"Ident\"] = pUser->GetIdent();\n\t\t\t\tTmpl[\"RealName\"] = pUser->GetRealName();\n\t\t\t\tTmpl[\"QuitMsg\"] = pUser->GetQuitMsg();\n\t\t\t\tTmpl[\"DefaultChanModes\"] = pUser->GetDefaultChanModes();\n\t\t\t\tTmpl[\"BufferCount\"] = CString(pUser->GetBufferCount());\n\t\t\t\tTmpl[\"TimestampFormat\"] = pUser->GetTimestampFormat();\n\t\t\t\tTmpl[\"Timezone\"] = pUser->GetTimezone();\n\t\t\t\tTmpl[\"JoinTries\"] = CString(pUser->JoinTries());\n\t\t\t\tTmpl[\"MaxNetworks\"] = CString(pUser->MaxNetworks());\n\n\t\t\t\tconst set<CString>& ssAllowedHosts = pUser->GetAllowedHosts();\n\t\t\t\tfor (set<CString>::const_iterator it = ssAllowedHosts.begin(); it != ssAllowedHosts.end(); ++it) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"AllowedHostLoop\");\n\t\t\t\t\tl[\"Host\"] = *it;\n\t\t\t\t}\n\n\t\t\t\tconst vector<CIRCNetwork*>& vNetworks = pUser->GetNetworks();\n\t\t\t\tfor (unsigned int a = 0; a < vNetworks.size(); a++) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"NetworkLoop\");\n\t\t\t\t\tl[\"Name\"] = vNetworks[a]->GetName();\n\t\t\t\t\tl[\"Username\"] = pUser->GetUserName();\n\t\t\t\t\tl[\"Clients\"] = CString(vNetworks[a]->GetClients().size());\n\t\t\t\t\tl[\"IRCNick\"] = vNetworks[a]->GetIRCNick().GetNick();\n\t\t\t\t\tCServer* pServer = vNetworks[a]->GetCurrentServer();\n\t\t\t\t\tif (pServer) {\n\t\t\t\t\t\tl[\"Server\"] = pServer->GetName();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst MCString& msCTCPReplies = pUser->GetCTCPReplies();\n\t\t\t\tfor (MCString::const_iterator it2 = msCTCPReplies.begin(); it2 != msCTCPReplies.end(); ++it2) {\n\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"CTCPLoop\");\n\t\t\t\t\tl[\"CTCP\"] = it2->first + \" \" + it2->second;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tTmpl[\"Action\"] = \"adduser\";\n\t\t\t\tTmpl[\"Title\"] = \"Add User\";\n\t\t\t\tTmpl[\"StatusPrefix\"] = \"*\";\n\t\t\t}\n\n\t\t\tSCString ssTimezones = CUtils::GetTimezones();\n\t\t\tfor (SCString::iterator i = ssTimezones.begin(); i != ssTimezones.end(); ++i) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"TZLoop\");\n\t\t\t\tl[\"TZ\"] = *i;\n\t\t\t}\n\n\t\t\t// To change BindHosts be admin or don't have DenySetBindHost\n\t\t\tif (spSession->IsAdmin() || !spSession->GetUser()->DenySetBindHost()) {\n\t\t\t\tTmpl[\"BindHostEdit\"] = \"true\";\n\t\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\t\tif (vsBindHosts.empty()) {\n\t\t\t\t\tif (pUser) {\n\t\t\t\t\t\tTmpl[\"BindHost\"] = pUser->GetBindHost();\n\t\t\t\t\t\tTmpl[\"DCCBindHost\"] = pUser->GetDCCBindHost();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbool bFoundBindHost = false;\n\t\t\t\t\tbool bFoundDCCBindHost = false;\n\t\t\t\t\tfor (unsigned int b = 0; b < vsBindHosts.size(); b++) {\n\t\t\t\t\t\tconst CString& sBindHost = vsBindHosts[b];\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\t\t\t\t\t\tCTemplate& k = Tmpl.AddRow(\"DCCBindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = sBindHost;\n\t\t\t\t\t\tk[\"BindHost\"] = sBindHost;\n\n\t\t\t\t\t\tif (pUser && pUser->GetBindHost() == sBindHost) {\n\t\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundBindHost = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (pUser && pUser->GetDCCBindHost() == sBindHost) {\n\t\t\t\t\t\t\tk[\"Checked\"] = \"true\";\n\t\t\t\t\t\t\tbFoundDCCBindHost = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If our current bindhost is not in the global list...\n\t\t\t\t\tif (pUser && !bFoundBindHost && !pUser->GetBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pUser->GetBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t\tif (pUser && !bFoundDCCBindHost && !pUser->GetDCCBindHost().empty()) {\n\t\t\t\t\t\tCTemplate& l = Tmpl.AddRow(\"DCCBindHostLoop\");\n\n\t\t\t\t\t\tl[\"BindHost\"] = pUser->GetDCCBindHost();\n\t\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvector<CString> vDirs;\n\t\t\tWebSock.GetAvailSkins(vDirs);\n\n\t\t\tfor (unsigned int d = 0; d < vDirs.size(); d++) {\n\t\t\t\tconst CString& SubDir = vDirs[d];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"SkinLoop\");\n\t\t\t\tl[\"Name\"] = SubDir;\n\n\t\t\t\tif (pUser && SubDir == pUser->GetSkinName()) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset<CModInfo> ssUserMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssUserMods);\n\n\t\t\tfor (set<CModInfo>::iterator it = ssUserMods.begin(); it != ssUserMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\n\t\t\t\tCModule *pModule = NULL;\n\t\t\t\tif (pUser)\n\t\t\t\t\tpModule = pUser->GetModules().FindModule(Info.GetName());\n\t\t\t\tif (pModule) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\tif (CModInfo::UserModule == GetType() && Info.GetName() == GetModName()) {\n\t\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!spSession->IsAdmin() && pUser && pUser->DenyLoadMod()) {\n\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCTemplate& o1 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to1[\"Name\"] = \"autoclearchanbuffer\";\n\t\t\to1[\"DisplayName\"] = \"Auto Clear Chan Buffer\";\n\t\t\to1[\"Tooltip\"] = \"Automatically Clear Channel Buffer After Playback (the default value for new channels)\";\n\t\t\tif (!pUser || pUser->AutoClearChanBuffer()) { o1[\"Checked\"] = \"true\"; }\n\n\t\t\t/* o2 used to be auto cycle which was removed */\n\n\t\t\tCTemplate& o4 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to4[\"Name\"] = \"multiclients\";\n\t\t\to4[\"DisplayName\"] = \"Multi Clients\";\n\t\t\tif (!pUser || pUser->MultiClients()) { o4[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o7 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to7[\"Name\"] = \"appendtimestamp\";\n\t\t\to7[\"DisplayName\"] = \"Append Timestamps\";\n\t\t\tif (pUser && pUser->GetTimestampAppend()) { o7[\"Checked\"] = \"true\"; }\n\n\t\t\tCTemplate& o8 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\to8[\"Name\"] = \"prependtimestamp\";\n\t\t\to8[\"DisplayName\"] = \"Prepend Timestamps\";\n\t\t\tif (pUser && pUser->GetTimestampPrepend()) { o8[\"Checked\"] = \"true\"; }\n\n\t\t\tif (spSession->IsAdmin()) {\n\t\t\t\tCTemplate& o9 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to9[\"Name\"] = \"denyloadmod\";\n\t\t\t\to9[\"DisplayName\"] = \"Deny LoadMod\";\n\t\t\t\tif (pUser && pUser->DenyLoadMod()) { o9[\"Checked\"] = \"true\"; }\n\n\t\t\t\tCTemplate& o10 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to10[\"Name\"] = \"isadmin\";\n\t\t\t\to10[\"DisplayName\"] = \"Admin\";\n\t\t\t\tif (pUser && pUser->IsAdmin()) { o10[\"Checked\"] = \"true\"; }\n\t\t\t\tif (pUser && pUser == CZNC::Get().FindUser(WebSock.GetUser())) { o10[\"Disabled\"] = \"true\"; }\n\n\t\t\t\tCTemplate& o11 = Tmpl.AddRow(\"OptionLoop\");\n\t\t\t\to11[\"Name\"] = \"denysetbindhost\";\n\t\t\t\to11[\"DisplayName\"] = \"Deny SetBindHost\";\n\t\t\t\tif (pUser && pUser->DenySetBindHost()) { o11[\"Checked\"] = \"true\"; }\n\t\t\t}\n\n\t\t\tFOR_EACH_MODULE(i, pUser) {\n\t\t\t\tCTemplate& mod = Tmpl.AddRow(\"EmbeddedModuleLoop\");\n\t\t\t\tmod.insert(Tmpl.begin(), Tmpl.end());\n\t\t\t\tmod[\"WebadminAction\"] = \"display\";\n\t\t\t\tif ((*i)->OnEmbeddedWebRequest(WebSock, \"webadmin/user\", mod)) {\n\t\t\t\t\tmod[\"Embed\"] = WebSock.FindTmpl(*i, \"WebadminUser.tmpl\");\n\t\t\t\t\tmod[\"ModName\"] = (*i)->GetModName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t/* If pUser is NULL, we are adding a user, else we are editing this one */\n\n\t\tCString sUsername = WebSock.GetParam(\"user\");\n\t\tif (!pUser && CZNC::Get().FindUser(sUsername)) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [User \" + sUsername + \" already exists]\");\n\t\t\treturn true;\n\t\t}\n\n\t\tCUser* pNewUser = GetNewUser(WebSock, pUser);\n\t\tif (!pNewUser) {\n\t\t\tWebSock.PrintErrorPage(\"Invalid user settings\");\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sErr;\n\t\tCString sAction;\n\n\t\tif (!pUser) {\n\t\t\tCString sClone = WebSock.GetParam(\"clone\");\n\t\t\tif (CUser *pCloneUser = CZNC::Get().FindUser(sClone)) {\n\t\t\t\tpNewUser->CloneNetworks(*pCloneUser);\n\t\t\t}\n\n\t\t\t// Add User Submission\n\t\t\tif (!CZNC::Get().AddUser(pNewUser, sErr)) {\n\t\t\t\tdelete pNewUser;\n\t\t\t\tWebSock.PrintErrorPage(\"Invalid submission [\" + sErr + \"]\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpUser = pNewUser;\n\t\t\tsAction = \"added\";\n\t\t} else {\n\t\t\t// Edit User Submission\n\t\t\tif (!pUser->Clone(*pNewUser, sErr, false)) {\n\t\t\t\tdelete pNewUser;\n\t\t\t\tWebSock.PrintErrorPage(\"Invalid Submission [\" + sErr + \"]\");\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tdelete pNewUser;\n\t\t\tsAction = \"edited\";\n\t\t}\n\n\t\tCTemplate TmplMod;\n\t\tTmplMod[\"Username\"] = sUsername;\n\t\tTmplMod[\"WebadminAction\"] = \"change\";\n\t\tFOR_EACH_MODULE(it, pUser) {\n\t\t\t(*it)->OnEmbeddedWebRequest(WebSock, \"webadmin/user\", TmplMod);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.PrintErrorPage(\"User \" + sAction + \", but config was not written\");\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!spSession->IsAdmin()) {\n\t\t\tWebSock.Redirect(\"edituser\");\n\t\t} else {\n\t\t\tWebSock.Redirect(\"listusers\");\n\t\t}\n\n\t\t/* we don't want the template to be printed while we redirect */\n\t\treturn false;\n\t}\n\n\tbool ListUsersPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tconst map<CString,CUser*>& msUsers = CZNC::Get().GetUserMap();\n\t\tTmpl[\"Title\"] = \"List Users\";\n\t\tTmpl[\"Action\"] = \"listusers\";\n\n\t\tunsigned int a = 0;\n\n\t\tfor (map<CString,CUser*>::const_iterator it = msUsers.begin(); it != msUsers.end(); ++it, a++) {\n\t\t\tCTemplate& l = Tmpl.AddRow(\"UserLoop\");\n\t\t\tCUser& User = *it->second;\n\n\t\t\tl[\"Username\"] = User.GetUserName();\n\t\t\tl[\"Clients\"] = CString(User.GetAllClients().size());\n\t\t\tl[\"Networks\"] = CString(User.GetNetworks().size());\n\n\t\t\tif (&User == spSession->GetUser()) {\n\t\t\t\tl[\"IsSelf\"] = \"true\";\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tbool TrafficPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tCSmartPtr<CWebSession> spSession = WebSock.GetSession();\n\t\tTmpl[\"Uptime\"] = CZNC::Get().GetUptime();\n\n\t\tconst map<CString,CUser*>& msUsers = CZNC::Get().GetUserMap();\n\t\tTmpl[\"TotalUsers\"] = CString(msUsers.size());\n\n\t\tsize_t uiNetworks = 0, uiAttached = 0, uiClients = 0, uiServers = 0;\n\n\t\tfor (map<CString,CUser*>::const_iterator it = msUsers.begin(); it != msUsers.end(); ++it) {\n\t\t\tCUser& User = *it->second;\n\t\t\tvector<CIRCNetwork*> vNetworks = User.GetNetworks();\n\n\t\t\tfor (vector<CIRCNetwork*>::const_iterator it2 = vNetworks.begin(); it2 != vNetworks.end(); ++it2) {\n\t\t\t\tCIRCNetwork *pNetwork = *it2;\n\t\t\t\tuiNetworks++;\n\n\t\t\t\tif (pNetwork->IsIRCConnected()) {\n\t\t\t\t\tuiServers++;\n\t\t\t\t}\n\n\t\t\t\tif (pNetwork->IsNetworkAttached()) {\n\t\t\t\t\tuiAttached++;\n\t\t\t\t}\n\n\t\t\t\tuiClients += pNetwork->GetClients().size();\n\t\t\t}\n\n\t\t\tuiClients += User.GetUserClients().size();\n\t\t}\n\n\t\tTmpl[\"TotalNetworks\"] = CString(uiNetworks);\n\t\tTmpl[\"AttachedNetworks\"] = CString(uiAttached);\n\t\tTmpl[\"TotalCConnections\"] = CString(uiClients);\n\t\tTmpl[\"TotalIRCConnections\"] = CString(uiServers);\n\n\t\tCZNC::TrafficStatsPair Users, ZNC, Total;\n\t\tCZNC::TrafficStatsMap traffic = CZNC::Get().GetTrafficStats(Users, ZNC, Total);\n\t\tCZNC::TrafficStatsMap::const_iterator it;\n\n\t\tfor (it = traffic.begin(); it != traffic.end(); ++it) {\n\t\t\tCTemplate& l = Tmpl.AddRow(\"TrafficLoop\");\n\n\t\t\tl[\"Username\"] = it->first;\n\t\t\tl[\"In\"] = CString::ToByteStr(it->second.first);\n\t\t\tl[\"Out\"] = CString::ToByteStr(it->second.second);\n\t\t\tl[\"Total\"] = CString::ToByteStr(it->second.first + it->second.second);\n\t\t}\n\n\t\tTmpl[\"UserIn\"] = CString::ToByteStr(Users.first);\n\t\tTmpl[\"UserOut\"] = CString::ToByteStr(Users.second);\n\t\tTmpl[\"UserTotal\"] = CString::ToByteStr(Users.first + Users.second);\n\n\t\tTmpl[\"ZNCIn\"] = CString::ToByteStr(ZNC.first);\n\t\tTmpl[\"ZNCOut\"] = CString::ToByteStr(ZNC.second);\n\t\tTmpl[\"ZNCTotal\"] = CString::ToByteStr(ZNC.first + ZNC.second);\n\n\t\tTmpl[\"AllIn\"] = CString::ToByteStr(Total.first);\n\t\tTmpl[\"AllOut\"] = CString::ToByteStr(Total.second);\n\t\tTmpl[\"AllTotal\"] = CString::ToByteStr(Total.first + Total.second);\n\n\t\treturn true;\n\t}\n\n\tbool AddListener(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tunsigned short uPort = WebSock.GetParam(\"port\").ToUShort();\n\t\tCString sHost = WebSock.GetParam(\"host\");\n\t\tif (sHost == \"*\") sHost = \"\";\n\t\tbool bSSL = WebSock.GetParam(\"ssl\").ToBool();\n\t\tbool bIPv4 = WebSock.GetParam(\"ipv4\").ToBool();\n\t\tbool bIPv6 = WebSock.GetParam(\"ipv6\").ToBool();\n\t\tbool bIRC = WebSock.GetParam(\"irc\").ToBool();\n\t\tbool bWeb = WebSock.GetParam(\"web\").ToBool();\n\n\t\tEAddrType eAddr = ADDR_ALL;\n\t\tif (bIPv4) {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_ALL;\n\t\t\t} else {\n\t\t\t\teAddr = ADDR_IPV4ONLY;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_IPV6ONLY;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Choose either IPv4 or IPv6 or both.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCListener::EAcceptType eAccept;\n\t\tif (bIRC) {\n\t\t\tif (bWeb) {\n\t\t\t\teAccept = CListener::ACCEPT_ALL;\n\t\t\t} else {\n\t\t\t\teAccept = CListener::ACCEPT_IRC;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bWeb) {\n\t\t\t\teAccept = CListener::ACCEPT_HTTP;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Choose either IRC or Web or both.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCString sMessage;\n\t\tif (CZNC::Get().AddListener(uPort, sHost, bSSL, eAddr, eAccept, sMessage)) {\n\t\t\tif (!sMessage.empty()) {\n\t\t\t\tWebSock.GetSession()->AddSuccess(sMessage);\n\t\t\t}\n\t\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\t\tWebSock.GetSession()->AddError(\"Port changed, but config was not written\");\n\t\t\t}\n\t\t} else {\n\t\t\tWebSock.GetSession()->AddError(sMessage);\n\t\t}\n\n\t\treturn SettingsPage(WebSock, Tmpl);\n\t}\n\n\tbool DelListener(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tunsigned short uPort = WebSock.GetParam(\"port\").ToUShort();\n\t\tCString sHost = WebSock.GetParam(\"host\");\n\t\tbool bIPv4 = WebSock.GetParam(\"ipv4\").ToBool();\n\t\tbool bIPv6 = WebSock.GetParam(\"ipv6\").ToBool();\n\n\t\tEAddrType eAddr = ADDR_ALL;\n\t\tif (bIPv4) {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_ALL;\n\t\t\t} else {\n\t\t\t\teAddr = ADDR_IPV4ONLY;\n\t\t\t}\n\t\t} else {\n\t\t\tif (bIPv6) {\n\t\t\t\teAddr = ADDR_IPV6ONLY;\n\t\t\t} else {\n\t\t\t\tWebSock.GetSession()->AddError(\"Invalid request.\");\n\t\t\t\treturn SettingsPage(WebSock, Tmpl);\n\t\t\t}\n\t\t}\n\n\t\tCListener* pListener = CZNC::Get().FindListener(uPort, sHost, eAddr);\n\t\tif (pListener) {\n\t\t\tCZNC::Get().DelListener(pListener);\n\t\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\t\tWebSock.GetSession()->AddError(\"Port changed, but config was not written\");\n\t\t\t}\n\t\t} else {\n\t\t\tWebSock.GetSession()->AddError(\"The specified listener was not found.\");\n\t\t}\n\n\t\treturn SettingsPage(WebSock, Tmpl);\n\t}\n\n\tbool SettingsPage(CWebSock& WebSock, CTemplate& Tmpl) {\n\t\tTmpl.SetFile(\"settings.tmpl\");\n\t\tif (!WebSock.GetParam(\"submitted\").ToUInt()) {\n\t\t\tCString sBindHosts, sMotd;\n\t\t\tTmpl[\"Action\"] = \"settings\";\n\t\t\tTmpl[\"Title\"] = \"Settings\";\n\t\t\tTmpl[\"StatusPrefix\"] = CZNC::Get().GetStatusPrefix();\n\t\t\tTmpl[\"MaxBufferSize\"] = CString(CZNC::Get().GetMaxBufferSize());\n\t\t\tTmpl[\"ConnectDelay\"] = CString(CZNC::Get().GetConnectDelay());\n\t\t\tTmpl[\"ServerThrottle\"] = CString(CZNC::Get().GetServerThrottle());\n\t\t\tTmpl[\"AnonIPLimit\"] = CString(CZNC::Get().GetAnonIPLimit());\n\t\t\tTmpl[\"ProtectWebSessions\"] = CString(CZNC::Get().GetProtectWebSessions());\n\n\t\t\tconst VCString& vsBindHosts = CZNC::Get().GetBindHosts();\n\t\t\tfor (unsigned int a = 0; a < vsBindHosts.size(); a++) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"BindHostLoop\");\n\t\t\t\tl[\"BindHost\"] = vsBindHosts[a];\n\t\t\t}\n\n\t\t\tconst VCString& vsMotd = CZNC::Get().GetMotd();\n\t\t\tfor (unsigned int b = 0; b < vsMotd.size(); b++) {\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"MOTDLoop\");\n\t\t\t\tl[\"Line\"] = vsMotd[b];\n\t\t\t}\n\n\t\t\tconst vector<CListener*>& vpListeners = CZNC::Get().GetListeners();\n\t\t\tfor (unsigned int c = 0; c < vpListeners.size(); c++) {\n\t\t\t\tCListener* pListener = vpListeners[c];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ListenLoop\");\n\n\t\t\t\tl[\"Port\"] = CString(pListener->GetPort());\n\t\t\t\tl[\"BindHost\"] = pListener->GetBindHost();\n\n\t\t\t\tl[\"IsWeb\"] = CString(pListener->GetAcceptType() != CListener::ACCEPT_IRC);\n\t\t\t\tl[\"IsIRC\"] = CString(pListener->GetAcceptType() != CListener::ACCEPT_HTTP);\n\n\t\t\t\t// simple protection for user from shooting his own foot\n\t\t\t\t// TODO check also for hosts/families\n\t\t\t\t// such check is only here, user still can forge HTTP request to delete web port\n\t\t\t\tl[\"SuggestDeletion\"] = CString(pListener->GetPort() != WebSock.GetLocalPort());\n\n#ifdef HAVE_LIBSSL\n\t\t\t\tif (pListener->IsSSL()) {\n\t\t\t\t\tl[\"IsSSL\"] = \"true\";\n\t\t\t\t}\n#endif\n\n#ifdef HAVE_IPV6\n\t\t\t\tswitch (pListener->GetAddrType()) {\n\t\t\t\t\tcase ADDR_IPV4ONLY:\n\t\t\t\t\t\tl[\"IsIPV4\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ADDR_IPV6ONLY:\n\t\t\t\t\t\tl[\"IsIPV6\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ADDR_ALL:\n\t\t\t\t\t\tl[\"IsIPV4\"] = \"true\";\n\t\t\t\t\t\tl[\"IsIPV6\"] = \"true\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n#else\n\t\t\t\tl[\"IsIPV4\"] = \"true\";\n#endif\n\t\t\t}\n\n\t\t\tvector<CString> vDirs;\n\t\t\tWebSock.GetAvailSkins(vDirs);\n\n\t\t\tfor (unsigned int d = 0; d < vDirs.size(); d++) {\n\t\t\t\tconst CString& SubDir = vDirs[d];\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"SkinLoop\");\n\t\t\t\tl[\"Name\"] = SubDir;\n\n\t\t\t\tif (SubDir == CZNC::Get().GetSkinName()) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tset<CModInfo> ssGlobalMods;\n\t\t\tCZNC::Get().GetModules().GetAvailableMods(ssGlobalMods, CModInfo::GlobalModule);\n\n\t\t\tfor (set<CModInfo>::iterator it = ssGlobalMods.begin(); it != ssGlobalMods.end(); ++it) {\n\t\t\t\tconst CModInfo& Info = *it;\n\t\t\t\tCTemplate& l = Tmpl.AddRow(\"ModuleLoop\");\n\n\t\t\t\tCModule *pModule = CZNC::Get().GetModules().FindModule(Info.GetName());\n\t\t\t\tif (pModule) {\n\t\t\t\t\tl[\"Checked\"] = \"true\";\n\t\t\t\t\tl[\"Args\"] = pModule->GetArgs();\n\t\t\t\t\tif (CModInfo::GlobalModule == GetType() && Info.GetName() == GetModName()) {\n\t\t\t\t\t\tl[\"Disabled\"] = \"true\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tl[\"Name\"] = Info.GetName();\n\t\t\t\tl[\"Description\"] = Info.GetDescription();\n\t\t\t\tl[\"Wiki\"] = Info.GetWikiPage();\n\t\t\t\tl[\"HasArgs\"] = CString(Info.GetHasArgs());\n\t\t\t\tl[\"ArgsHelpText\"] = Info.GetArgsHelpText();\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tCString sArg;\n\t\tsArg = WebSock.GetParam(\"statusprefix\"); CZNC::Get().SetStatusPrefix(sArg);\n\t\tsArg = WebSock.GetParam(\"maxbufsize\"); CZNC::Get().SetMaxBufferSize(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"connectdelay\"); CZNC::Get().SetConnectDelay(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"serverthrottle\"); CZNC::Get().SetServerThrottle(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"anoniplimit\"); CZNC::Get().SetAnonIPLimit(sArg.ToUInt());\n\t\tsArg = WebSock.GetParam(\"protectwebsessions\"); CZNC::Get().SetProtectWebSessions(sArg.ToBool());\n\n\t\tVCString vsArgs;\n\t\tWebSock.GetRawParam(\"motd\").Split(\"\\n\", vsArgs);\n\t\tCZNC::Get().ClearMotd();\n\n\t\tunsigned int a = 0;\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCZNC::Get().AddMotd(vsArgs[a].TrimRight_n());\n\t\t}\n\n\t\tWebSock.GetRawParam(\"bindhosts\").Split(\"\\n\", vsArgs);\n\t\tCZNC::Get().ClearBindHosts();\n\n\t\tfor (a = 0; a < vsArgs.size(); a++) {\n\t\t\tCZNC::Get().AddBindHost(vsArgs[a].Trim_n());\n\t\t}\n\n\t\tCZNC::Get().SetSkinName(WebSock.GetParam(\"skin\"));\n\n\t\tset<CString> ssArgs;\n\t\tWebSock.GetParamValues(\"loadmod\", ssArgs);\n\n\t\tfor (set<CString>::iterator it = ssArgs.begin(); it != ssArgs.end(); ++it) {\n\t\t\tCString sModRet;\n\t\t\tCString sModName = (*it).TrimRight_n(\"\\r\");\n\t\t\tCString sModLoadError;\n\n\t\t\tif (!sModName.empty()) {\n\t\t\t\tCString sArgs = WebSock.GetParam(\"modargs_\" + sModName);\n\n\t\t\t\tCModule *pMod = CZNC::Get().GetModules().FindModule(sModName);\n\t\t\t\tif (!pMod) {\n\t\t\t\t\tif (!CZNC::Get().GetModules().LoadModule(sModName, sArgs, CModInfo::GlobalModule, NULL, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to load module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t} else if (pMod->GetArgs() != sArgs) {\n\t\t\t\t\tif (!CZNC::Get().GetModules().ReloadModule(sModName, sArgs, NULL, NULL, sModRet)) {\n\t\t\t\t\t\tsModLoadError = \"Unable to reload module [\" + sModName + \"] [\" + sModRet + \"]\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!sModLoadError.empty()) {\n\t\t\t\t\tDEBUG(sModLoadError);\n\t\t\t\t\tWebSock.GetSession()->AddError(sModLoadError);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst CModules& vCurMods = CZNC::Get().GetModules();\n\t\tset<CString> ssUnloadMods;\n\n\t\tfor (a = 0; a < vCurMods.size(); a++) {\n\t\t\tCModule* pCurMod = vCurMods[a];\n\n\t\t\tif (ssArgs.find(pCurMod->GetModName()) == ssArgs.end() &&\n\t\t\t\t\t(CModInfo::GlobalModule != GetType() || pCurMod->GetModName() != GetModName())) {\n\t\t\t\tssUnloadMods.insert(pCurMod->GetModName());\n\t\t\t}\n\t\t}\n\n\t\tfor (set<CString>::iterator it2 = ssUnloadMods.begin(); it2 != ssUnloadMods.end(); ++it2) {\n\t\t\tCZNC::Get().GetModules().UnloadModule(*it2);\n\t\t}\n\n\t\tif (!CZNC::Get().WriteConfig()) {\n\t\t\tWebSock.GetSession()->AddError(\"Settings changed, but config was not written\");\n\t\t}\n\n\t\tWebSock.Redirect(\"settings\");\n\t\t/* we don't want the template to be printed while we redirect */\n\t\treturn false;\n\t}\n};\n\ntemplate<> void TModInfo<CWebAdminMod>(CModInfo& Info) {\n\tInfo.AddType(CModInfo::UserModule);\n\tInfo.SetWikiPage(\"webadmin\");\n}\n\nGLOBALMODULEDEFS(CWebAdminMod, \"Web based administration module\")\n"], "filenames": ["modules/webadmin.cpp"], "buggy_code_start_loc": [429], "buggy_code_end_loc": [497], "fixing_code_start_loc": [429], "fixing_code_end_loc": [497], "type": "NVD-CWE-Other", "message": "ZNC 1.0 allows remote authenticated users to cause a denial of service (NULL pointer reference and crash) via a crafted request to the (1) editnetwork, (2) editchan, (3) addchan, or (4) delchan page in modules/webadmin.cpp.", "other": {"cve": {"id": "CVE-2013-2130", "sourceIdentifier": "secalert@redhat.com", "published": "2014-06-05T20:55:04.517", "lastModified": "2015-09-10T15:24:57.847", "vulnStatus": "Analyzed", "evaluatorComment": "Per: http://cwe.mitre.org/data/definitions/476.html\n\n\"CWE-476: NULL Pointer Dereference\"", "descriptions": [{"lang": "en", "value": "ZNC 1.0 allows remote authenticated users to cause a denial of service (NULL pointer reference and crash) via a crafted request to the (1) editnetwork, (2) editchan, (3) addchan, or (4) delchan page in modules/webadmin.cpp."}, {"lang": "es", "value": "ZNC 1.0 permite a usuarios remotos autenticados causar una denegaci\u00f3n de servicio (referencia a puntero nulo y ca\u00edda) a trav\u00e9s de una solicitud manipulada en la p\u00e1gina (1) editnetwork, (2) editchan, (3) addchan o (4) delchan en modules/webadmin.cpp."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:znc:znc:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "33DB2465-0979-4EEF-B64B-F5F7D2A831C5"}]}]}], "references": [{"url": "http://advisories.mageia.org/MGASA-2013-0257.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114144.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114172.html", "source": "secalert@redhat.com"}, {"url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:013", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2013/05/30/3", "source": "secalert@redhat.com"}, {"url": "https://github.com/znc/znc/commit/2bd410ee5570cea127233f1133ea22f25174eb28", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/znc/znc/commit/2bd410ee5570cea127233f1133ea22f25174eb28"}}