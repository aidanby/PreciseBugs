{"buggy_code": ["/*\n * 32bit Socket syscall emulation. Based on arch/sparc64/kernel/sys_sparc32.c.\n *\n * Copyright (C) 2000\t\tVA Linux Co\n * Copyright (C) 2000\t\tDon Dugger <n0ano@valinux.com>\n * Copyright (C) 1999 \t\tArun Sharma <arun.sharma@intel.com>\n * Copyright (C) 1997,1998 \tJakub Jelinek (jj@sunsite.mff.cuni.cz)\n * Copyright (C) 1997 \t\tDavid S. Miller (davem@caip.rutgers.edu)\n * Copyright (C) 2000\t\tHewlett-Packard Co.\n * Copyright (C) 2000\t\tDavid Mosberger-Tang <davidm@hpl.hp.com>\n * Copyright (C) 2000,2001\tAndi Kleen, SuSE Labs\n */\n\n#include <linux/kernel.h>\n#include <linux/gfp.h>\n#include <linux/fs.h>\n#include <linux/types.h>\n#include <linux/file.h>\n#include <linux/icmpv6.h>\n#include <linux/socket.h>\n#include <linux/syscalls.h>\n#include <linux/filter.h>\n#include <linux/compat.h>\n#include <linux/security.h>\n#include <linux/export.h>\n\n#include <net/scm.h>\n#include <net/sock.h>\n#include <net/ip.h>\n#include <net/ipv6.h>\n#include <asm/uaccess.h>\n#include <net/compat.h>\n\nstatic inline int iov_from_user_compat_to_kern(struct iovec *kiov,\n\t\t\t\t\t  struct compat_iovec __user *uiov32,\n\t\t\t\t\t  int niov)\n{\n\tint tot_len = 0;\n\n\twhile (niov > 0) {\n\t\tcompat_uptr_t buf;\n\t\tcompat_size_t len;\n\n\t\tif (get_user(len, &uiov32->iov_len) ||\n\t\t    get_user(buf, &uiov32->iov_base))\n\t\t\treturn -EFAULT;\n\n\t\tif (len > INT_MAX - tot_len)\n\t\t\tlen = INT_MAX - tot_len;\n\n\t\ttot_len += len;\n\t\tkiov->iov_base = compat_ptr(buf);\n\t\tkiov->iov_len = (__kernel_size_t) len;\n\t\tuiov32++;\n\t\tkiov++;\n\t\tniov--;\n\t}\n\treturn tot_len;\n}\n\nint get_compat_msghdr(struct msghdr *kmsg, struct compat_msghdr __user *umsg)\n{\n\tcompat_uptr_t tmp1, tmp2, tmp3;\n\n\tif (!access_ok(VERIFY_READ, umsg, sizeof(*umsg)) ||\n\t    __get_user(tmp1, &umsg->msg_name) ||\n\t    __get_user(kmsg->msg_namelen, &umsg->msg_namelen) ||\n\t    __get_user(tmp2, &umsg->msg_iov) ||\n\t    __get_user(kmsg->msg_iovlen, &umsg->msg_iovlen) ||\n\t    __get_user(tmp3, &umsg->msg_control) ||\n\t    __get_user(kmsg->msg_controllen, &umsg->msg_controllen) ||\n\t    __get_user(kmsg->msg_flags, &umsg->msg_flags))\n\t\treturn -EFAULT;\n\tif (kmsg->msg_namelen > sizeof(struct sockaddr_storage))\n\t\tkmsg->msg_namelen = sizeof(struct sockaddr_storage);\n\tkmsg->msg_name = compat_ptr(tmp1);\n\tkmsg->msg_iov = compat_ptr(tmp2);\n\tkmsg->msg_control = compat_ptr(tmp3);\n\treturn 0;\n}\n\n/* I've named the args so it is easy to tell whose space the pointers are in. */\nint verify_compat_iovec(struct msghdr *kern_msg, struct iovec *kern_iov,\n\t\t   struct sockaddr_storage *kern_address, int mode)\n{\n\tint tot_len;\n\n\tif (kern_msg->msg_namelen) {\n\t\tif (mode == VERIFY_READ) {\n\t\t\tint err = move_addr_to_kernel(kern_msg->msg_name,\n\t\t\t\t\t\t      kern_msg->msg_namelen,\n\t\t\t\t\t\t      kern_address);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (kern_msg->msg_name)\n\t\t\tkern_msg->msg_name = kern_address;\n\t} else\n\t\tkern_msg->msg_name = NULL;\n\n\ttot_len = iov_from_user_compat_to_kern(kern_iov,\n\t\t\t\t\t  (struct compat_iovec __user *)kern_msg->msg_iov,\n\t\t\t\t\t  kern_msg->msg_iovlen);\n\tif (tot_len >= 0)\n\t\tkern_msg->msg_iov = kern_iov;\n\n\treturn tot_len;\n}\n\n/* Bleech... */\n#define CMSG_COMPAT_ALIGN(len)\tALIGN((len), sizeof(s32))\n\n#define CMSG_COMPAT_DATA(cmsg)\t\t\t\t\\\n\t((void __user *)((char __user *)(cmsg) + CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr))))\n#define CMSG_COMPAT_SPACE(len)\t\t\t\t\\\n\t(CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr)) + CMSG_COMPAT_ALIGN(len))\n#define CMSG_COMPAT_LEN(len)\t\t\t\t\\\n\t(CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr)) + (len))\n\n#define CMSG_COMPAT_FIRSTHDR(msg)\t\t\t\\\n\t(((msg)->msg_controllen) >= sizeof(struct compat_cmsghdr) ?\t\\\n\t (struct compat_cmsghdr __user *)((msg)->msg_control) :\t\t\\\n\t (struct compat_cmsghdr __user *)NULL)\n\n#define CMSG_COMPAT_OK(ucmlen, ucmsg, mhdr) \\\n\t((ucmlen) >= sizeof(struct compat_cmsghdr) && \\\n\t (ucmlen) <= (unsigned long) \\\n\t ((mhdr)->msg_controllen - \\\n\t  ((char *)(ucmsg) - (char *)(mhdr)->msg_control)))\n\nstatic inline struct compat_cmsghdr __user *cmsg_compat_nxthdr(struct msghdr *msg,\n\t\tstruct compat_cmsghdr __user *cmsg, int cmsg_len)\n{\n\tchar __user *ptr = (char __user *)cmsg + CMSG_COMPAT_ALIGN(cmsg_len);\n\tif ((unsigned long)(ptr + 1 - (char __user *)msg->msg_control) >\n\t\t\tmsg->msg_controllen)\n\t\treturn NULL;\n\treturn (struct compat_cmsghdr __user *)ptr;\n}\n\n/* There is a lot of hair here because the alignment rules (and\n * thus placement) of cmsg headers and length are different for\n * 32-bit apps.  -DaveM\n */\nint cmsghdr_from_user_compat_to_kern(struct msghdr *kmsg, struct sock *sk,\n\t\t\t       unsigned char *stackbuf, int stackbuf_size)\n{\n\tstruct compat_cmsghdr __user *ucmsg;\n\tstruct cmsghdr *kcmsg, *kcmsg_base;\n\tcompat_size_t ucmlen;\n\t__kernel_size_t kcmlen, tmp;\n\tint err = -EFAULT;\n\n\tkcmlen = 0;\n\tkcmsg_base = kcmsg = (struct cmsghdr *)stackbuf;\n\tucmsg = CMSG_COMPAT_FIRSTHDR(kmsg);\n\twhile (ucmsg != NULL) {\n\t\tif (get_user(ucmlen, &ucmsg->cmsg_len))\n\t\t\treturn -EFAULT;\n\n\t\t/* Catch bogons. */\n\t\tif (!CMSG_COMPAT_OK(ucmlen, ucmsg, kmsg))\n\t\t\treturn -EINVAL;\n\n\t\ttmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) +\n\t\t       CMSG_ALIGN(sizeof(struct cmsghdr)));\n\t\ttmp = CMSG_ALIGN(tmp);\n\t\tkcmlen += tmp;\n\t\tucmsg = cmsg_compat_nxthdr(kmsg, ucmsg, ucmlen);\n\t}\n\tif (kcmlen == 0)\n\t\treturn -EINVAL;\n\n\t/* The kcmlen holds the 64-bit version of the control length.\n\t * It may not be modified as we do not stick it into the kmsg\n\t * until we have successfully copied over all of the data\n\t * from the user.\n\t */\n\tif (kcmlen > stackbuf_size)\n\t\tkcmsg_base = kcmsg = sock_kmalloc(sk, kcmlen, GFP_KERNEL);\n\tif (kcmsg == NULL)\n\t\treturn -ENOBUFS;\n\n\t/* Now copy them over neatly. */\n\tmemset(kcmsg, 0, kcmlen);\n\tucmsg = CMSG_COMPAT_FIRSTHDR(kmsg);\n\twhile (ucmsg != NULL) {\n\t\tif (__get_user(ucmlen, &ucmsg->cmsg_len))\n\t\t\tgoto Efault;\n\t\tif (!CMSG_COMPAT_OK(ucmlen, ucmsg, kmsg))\n\t\t\tgoto Einval;\n\t\ttmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) +\n\t\t       CMSG_ALIGN(sizeof(struct cmsghdr)));\n\t\tif ((char *)kcmsg_base + kcmlen - (char *)kcmsg < CMSG_ALIGN(tmp))\n\t\t\tgoto Einval;\n\t\tkcmsg->cmsg_len = tmp;\n\t\ttmp = CMSG_ALIGN(tmp);\n\t\tif (__get_user(kcmsg->cmsg_level, &ucmsg->cmsg_level) ||\n\t\t    __get_user(kcmsg->cmsg_type, &ucmsg->cmsg_type) ||\n\t\t    copy_from_user(CMSG_DATA(kcmsg),\n\t\t\t\t   CMSG_COMPAT_DATA(ucmsg),\n\t\t\t\t   (ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg)))))\n\t\t\tgoto Efault;\n\n\t\t/* Advance. */\n\t\tkcmsg = (struct cmsghdr *)((char *)kcmsg + tmp);\n\t\tucmsg = cmsg_compat_nxthdr(kmsg, ucmsg, ucmlen);\n\t}\n\n\t/* Ok, looks like we made it.  Hook it up and return success. */\n\tkmsg->msg_control = kcmsg_base;\n\tkmsg->msg_controllen = kcmlen;\n\treturn 0;\n\nEinval:\n\terr = -EINVAL;\nEfault:\n\tif (kcmsg_base != (struct cmsghdr *)stackbuf)\n\t\tsock_kfree_s(sk, kcmsg_base, kcmlen);\n\treturn err;\n}\n\nint put_cmsg_compat(struct msghdr *kmsg, int level, int type, int len, void *data)\n{\n\tstruct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;\n\tstruct compat_cmsghdr cmhdr;\n\tstruct compat_timeval ctv;\n\tstruct compat_timespec cts[3];\n\tint cmlen;\n\n\tif (cm == NULL || kmsg->msg_controllen < sizeof(*cm)) {\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\t\treturn 0; /* XXX: return error? check spec. */\n\t}\n\n\tif (!COMPAT_USE_64BIT_TIME) {\n\t\tif (level == SOL_SOCKET && type == SCM_TIMESTAMP) {\n\t\t\tstruct timeval *tv = (struct timeval *)data;\n\t\t\tctv.tv_sec = tv->tv_sec;\n\t\t\tctv.tv_usec = tv->tv_usec;\n\t\t\tdata = &ctv;\n\t\t\tlen = sizeof(ctv);\n\t\t}\n\t\tif (level == SOL_SOCKET &&\n\t\t    (type == SCM_TIMESTAMPNS || type == SCM_TIMESTAMPING)) {\n\t\t\tint count = type == SCM_TIMESTAMPNS ? 1 : 3;\n\t\t\tint i;\n\t\t\tstruct timespec *ts = (struct timespec *)data;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tcts[i].tv_sec = ts[i].tv_sec;\n\t\t\t\tcts[i].tv_nsec = ts[i].tv_nsec;\n\t\t\t}\n\t\t\tdata = &cts;\n\t\t\tlen = sizeof(cts[0]) * count;\n\t\t}\n\t}\n\n\tcmlen = CMSG_COMPAT_LEN(len);\n\tif (kmsg->msg_controllen < cmlen) {\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\t\tcmlen = kmsg->msg_controllen;\n\t}\n\tcmhdr.cmsg_level = level;\n\tcmhdr.cmsg_type = type;\n\tcmhdr.cmsg_len = cmlen;\n\n\tif (copy_to_user(cm, &cmhdr, sizeof cmhdr))\n\t\treturn -EFAULT;\n\tif (copy_to_user(CMSG_COMPAT_DATA(cm), data, cmlen - sizeof(struct compat_cmsghdr)))\n\t\treturn -EFAULT;\n\tcmlen = CMSG_COMPAT_SPACE(len);\n\tif (kmsg->msg_controllen < cmlen)\n\t\tcmlen = kmsg->msg_controllen;\n\tkmsg->msg_control += cmlen;\n\tkmsg->msg_controllen -= cmlen;\n\treturn 0;\n}\n\nvoid scm_detach_fds_compat(struct msghdr *kmsg, struct scm_cookie *scm)\n{\n\tstruct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;\n\tint fdmax = (kmsg->msg_controllen - sizeof(struct compat_cmsghdr)) / sizeof(int);\n\tint fdnum = scm->fp->count;\n\tstruct file **fp = scm->fp->fp;\n\tint __user *cmfptr;\n\tint err = 0, i;\n\n\tif (fdnum < fdmax)\n\t\tfdmax = fdnum;\n\n\tfor (i = 0, cmfptr = (int __user *) CMSG_COMPAT_DATA(cm); i < fdmax; i++, cmfptr++) {\n\t\tint new_fd;\n\t\terr = security_file_receive(fp[i]);\n\t\tif (err)\n\t\t\tbreak;\n\t\terr = get_unused_fd_flags(MSG_CMSG_CLOEXEC & kmsg->msg_flags\n\t\t\t\t\t  ? O_CLOEXEC : 0);\n\t\tif (err < 0)\n\t\t\tbreak;\n\t\tnew_fd = err;\n\t\terr = put_user(new_fd, cmfptr);\n\t\tif (err) {\n\t\t\tput_unused_fd(new_fd);\n\t\t\tbreak;\n\t\t}\n\t\t/* Bump the usage count and install the file. */\n\t\tfd_install(new_fd, get_file(fp[i]));\n\t}\n\n\tif (i > 0) {\n\t\tint cmlen = CMSG_COMPAT_LEN(i * sizeof(int));\n\t\terr = put_user(SOL_SOCKET, &cm->cmsg_level);\n\t\tif (!err)\n\t\t\terr = put_user(SCM_RIGHTS, &cm->cmsg_type);\n\t\tif (!err)\n\t\t\terr = put_user(cmlen, &cm->cmsg_len);\n\t\tif (!err) {\n\t\t\tcmlen = CMSG_COMPAT_SPACE(i * sizeof(int));\n\t\t\tkmsg->msg_control += cmlen;\n\t\t\tkmsg->msg_controllen -= cmlen;\n\t\t}\n\t}\n\tif (i < fdnum)\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\n\t/*\n\t * All of the files that fit in the message have had their\n\t * usage counts incremented, so we just free the list.\n\t */\n\t__scm_destroy(scm);\n}\n\nstatic int do_set_attach_filter(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tstruct compat_sock_fprog __user *fprog32 = (struct compat_sock_fprog __user *)optval;\n\tstruct sock_fprog __user *kfprog = compat_alloc_user_space(sizeof(struct sock_fprog));\n\tcompat_uptr_t ptr;\n\tu16 len;\n\n\tif (!access_ok(VERIFY_READ, fprog32, sizeof(*fprog32)) ||\n\t    !access_ok(VERIFY_WRITE, kfprog, sizeof(struct sock_fprog)) ||\n\t    __get_user(len, &fprog32->len) ||\n\t    __get_user(ptr, &fprog32->filter) ||\n\t    __put_user(len, &kfprog->len) ||\n\t    __put_user(compat_ptr(ptr), &kfprog->filter))\n\t\treturn -EFAULT;\n\n\treturn sock_setsockopt(sock, level, optname, (char __user *)kfprog,\n\t\t\t      sizeof(struct sock_fprog));\n}\n\nstatic int do_set_sock_timeout(struct socket *sock, int level,\n\t\tint optname, char __user *optval, unsigned int optlen)\n{\n\tstruct compat_timeval __user *up = (struct compat_timeval __user *)optval;\n\tstruct timeval ktime;\n\tmm_segment_t old_fs;\n\tint err;\n\n\tif (optlen < sizeof(*up))\n\t\treturn -EINVAL;\n\tif (!access_ok(VERIFY_READ, up, sizeof(*up)) ||\n\t    __get_user(ktime.tv_sec, &up->tv_sec) ||\n\t    __get_user(ktime.tv_usec, &up->tv_usec))\n\t\treturn -EFAULT;\n\told_fs = get_fs();\n\tset_fs(KERNEL_DS);\n\terr = sock_setsockopt(sock, level, optname, (char *)&ktime, sizeof(ktime));\n\tset_fs(old_fs);\n\n\treturn err;\n}\n\nstatic int compat_sock_setsockopt(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tif (optname == SO_ATTACH_FILTER)\n\t\treturn do_set_attach_filter(sock, level, optname,\n\t\t\t\t\t    optval, optlen);\n\tif (optname == SO_RCVTIMEO || optname == SO_SNDTIMEO)\n\t\treturn do_set_sock_timeout(sock, level, optname, optval, optlen);\n\n\treturn sock_setsockopt(sock, level, optname, optval, optlen);\n}\n\nasmlinkage long compat_sys_setsockopt(int fd, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tint err;\n\tstruct socket *sock = sockfd_lookup(fd, &err);\n\n\tif (sock) {\n\t\terr = security_socket_setsockopt(sock, level, optname);\n\t\tif (err) {\n\t\t\tsockfd_put(sock);\n\t\t\treturn err;\n\t\t}\n\n\t\tif (level == SOL_SOCKET)\n\t\t\terr = compat_sock_setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse if (sock->ops->compat_setsockopt)\n\t\t\terr = sock->ops->compat_setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse\n\t\t\terr = sock->ops->setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\tsockfd_put(sock);\n\t}\n\treturn err;\n}\n\nstatic int do_get_sock_timeout(struct socket *sock, int level, int optname,\n\t\tchar __user *optval, int __user *optlen)\n{\n\tstruct compat_timeval __user *up;\n\tstruct timeval ktime;\n\tmm_segment_t old_fs;\n\tint len, err;\n\n\tup = (struct compat_timeval __user *) optval;\n\tif (get_user(len, optlen))\n\t\treturn -EFAULT;\n\tif (len < sizeof(*up))\n\t\treturn -EINVAL;\n\tlen = sizeof(ktime);\n\told_fs = get_fs();\n\tset_fs(KERNEL_DS);\n\terr = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);\n\tset_fs(old_fs);\n\n\tif (!err) {\n\t\tif (put_user(sizeof(*up), optlen) ||\n\t\t    !access_ok(VERIFY_WRITE, up, sizeof(*up)) ||\n\t\t    __put_user(ktime.tv_sec, &up->tv_sec) ||\n\t\t    __put_user(ktime.tv_usec, &up->tv_usec))\n\t\t\terr = -EFAULT;\n\t}\n\treturn err;\n}\n\nstatic int compat_sock_getsockopt(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, int __user *optlen)\n{\n\tif (optname == SO_RCVTIMEO || optname == SO_SNDTIMEO)\n\t\treturn do_get_sock_timeout(sock, level, optname, optval, optlen);\n\treturn sock_getsockopt(sock, level, optname, optval, optlen);\n}\n\nint compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)\n{\n\tstruct compat_timeval __user *ctv;\n\tint err;\n\tstruct timeval tv;\n\n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn sock_get_timestamp(sk, userstamp);\n\n\tctv = (struct compat_timeval __user *) userstamp;\n\terr = -ENOENT;\n\tif (!sock_flag(sk, SOCK_TIMESTAMP))\n\t\tsock_enable_timestamp(sk, SOCK_TIMESTAMP);\n\ttv = ktime_to_timeval(sk->sk_stamp);\n\tif (tv.tv_sec == -1)\n\t\treturn err;\n\tif (tv.tv_sec == 0) {\n\t\tsk->sk_stamp = ktime_get_real();\n\t\ttv = ktime_to_timeval(sk->sk_stamp);\n\t}\n\terr = 0;\n\tif (put_user(tv.tv_sec, &ctv->tv_sec) ||\n\t\t\tput_user(tv.tv_usec, &ctv->tv_usec))\n\t\terr = -EFAULT;\n\treturn err;\n}\nEXPORT_SYMBOL(compat_sock_get_timestamp);\n\nint compat_sock_get_timestampns(struct sock *sk, struct timespec __user *userstamp)\n{\n\tstruct compat_timespec __user *ctv;\n\tint err;\n\tstruct timespec ts;\n\n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn sock_get_timestampns (sk, userstamp);\n\n\tctv = (struct compat_timespec __user *) userstamp;\n\terr = -ENOENT;\n\tif (!sock_flag(sk, SOCK_TIMESTAMP))\n\t\tsock_enable_timestamp(sk, SOCK_TIMESTAMP);\n\tts = ktime_to_timespec(sk->sk_stamp);\n\tif (ts.tv_sec == -1)\n\t\treturn err;\n\tif (ts.tv_sec == 0) {\n\t\tsk->sk_stamp = ktime_get_real();\n\t\tts = ktime_to_timespec(sk->sk_stamp);\n\t}\n\terr = 0;\n\tif (put_user(ts.tv_sec, &ctv->tv_sec) ||\n\t\t\tput_user(ts.tv_nsec, &ctv->tv_nsec))\n\t\terr = -EFAULT;\n\treturn err;\n}\nEXPORT_SYMBOL(compat_sock_get_timestampns);\n\nasmlinkage long compat_sys_getsockopt(int fd, int level, int optname,\n\t\t\t\tchar __user *optval, int __user *optlen)\n{\n\tint err;\n\tstruct socket *sock = sockfd_lookup(fd, &err);\n\n\tif (sock) {\n\t\terr = security_socket_getsockopt(sock, level, optname);\n\t\tif (err) {\n\t\t\tsockfd_put(sock);\n\t\t\treturn err;\n\t\t}\n\n\t\tif (level == SOL_SOCKET)\n\t\t\terr = compat_sock_getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse if (sock->ops->compat_getsockopt)\n\t\t\terr = sock->ops->compat_getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse\n\t\t\terr = sock->ops->getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\tsockfd_put(sock);\n\t}\n\treturn err;\n}\n\nstruct compat_group_req {\n\t__u32\t\t\t\t gr_interface;\n\tstruct __kernel_sockaddr_storage gr_group\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\nstruct compat_group_source_req {\n\t__u32\t\t\t\t gsr_interface;\n\tstruct __kernel_sockaddr_storage gsr_group\n\t\t__attribute__ ((aligned(4)));\n\tstruct __kernel_sockaddr_storage gsr_source\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\nstruct compat_group_filter {\n\t__u32\t\t\t\t gf_interface;\n\tstruct __kernel_sockaddr_storage gf_group\n\t\t__attribute__ ((aligned(4)));\n\t__u32\t\t\t\t gf_fmode;\n\t__u32\t\t\t\t gf_numsrc;\n\tstruct __kernel_sockaddr_storage gf_slist[1]\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\n#define __COMPAT_GF0_SIZE (sizeof(struct compat_group_filter) - \\\n\t\t\tsizeof(struct __kernel_sockaddr_storage))\n\n\nint compat_mc_setsockopt(struct sock *sock, int level, int optname,\n\tchar __user *optval, unsigned int optlen,\n\tint (*setsockopt)(struct sock *, int, int, char __user *, unsigned int))\n{\n\tchar __user\t*koptval = optval;\n\tint\t\tkoptlen = optlen;\n\n\tswitch (optname) {\n\tcase MCAST_JOIN_GROUP:\n\tcase MCAST_LEAVE_GROUP:\n\t{\n\t\tstruct compat_group_req __user *gr32 = (void *)optval;\n\t\tstruct group_req __user *kgr =\n\t\t\tcompat_alloc_user_space(sizeof(struct group_req));\n\t\tu32 interface;\n\n\t\tif (!access_ok(VERIFY_READ, gr32, sizeof(*gr32)) ||\n\t\t    !access_ok(VERIFY_WRITE, kgr, sizeof(struct group_req)) ||\n\t\t    __get_user(interface, &gr32->gr_interface) ||\n\t\t    __put_user(interface, &kgr->gr_interface) ||\n\t\t    copy_in_user(&kgr->gr_group, &gr32->gr_group,\n\t\t\t\tsizeof(kgr->gr_group)))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgr;\n\t\tkoptlen = sizeof(struct group_req);\n\t\tbreak;\n\t}\n\tcase MCAST_JOIN_SOURCE_GROUP:\n\tcase MCAST_LEAVE_SOURCE_GROUP:\n\tcase MCAST_BLOCK_SOURCE:\n\tcase MCAST_UNBLOCK_SOURCE:\n\t{\n\t\tstruct compat_group_source_req __user *gsr32 = (void *)optval;\n\t\tstruct group_source_req __user *kgsr = compat_alloc_user_space(\n\t\t\tsizeof(struct group_source_req));\n\t\tu32 interface;\n\n\t\tif (!access_ok(VERIFY_READ, gsr32, sizeof(*gsr32)) ||\n\t\t    !access_ok(VERIFY_WRITE, kgsr,\n\t\t\tsizeof(struct group_source_req)) ||\n\t\t    __get_user(interface, &gsr32->gsr_interface) ||\n\t\t    __put_user(interface, &kgsr->gsr_interface) ||\n\t\t    copy_in_user(&kgsr->gsr_group, &gsr32->gsr_group,\n\t\t\t\tsizeof(kgsr->gsr_group)) ||\n\t\t    copy_in_user(&kgsr->gsr_source, &gsr32->gsr_source,\n\t\t\t\tsizeof(kgsr->gsr_source)))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgsr;\n\t\tkoptlen = sizeof(struct group_source_req);\n\t\tbreak;\n\t}\n\tcase MCAST_MSFILTER:\n\t{\n\t\tstruct compat_group_filter __user *gf32 = (void *)optval;\n\t\tstruct group_filter __user *kgf;\n\t\tu32 interface, fmode, numsrc;\n\n\t\tif (!access_ok(VERIFY_READ, gf32, __COMPAT_GF0_SIZE) ||\n\t\t    __get_user(interface, &gf32->gf_interface) ||\n\t\t    __get_user(fmode, &gf32->gf_fmode) ||\n\t\t    __get_user(numsrc, &gf32->gf_numsrc))\n\t\t\treturn -EFAULT;\n\t\tkoptlen = optlen + sizeof(struct group_filter) -\n\t\t\t\tsizeof(struct compat_group_filter);\n\t\tif (koptlen < GROUP_FILTER_SIZE(numsrc))\n\t\t\treturn -EINVAL;\n\t\tkgf = compat_alloc_user_space(koptlen);\n\t\tif (!access_ok(VERIFY_WRITE, kgf, koptlen) ||\n\t\t    __put_user(interface, &kgf->gf_interface) ||\n\t\t    __put_user(fmode, &kgf->gf_fmode) ||\n\t\t    __put_user(numsrc, &kgf->gf_numsrc) ||\n\t\t    copy_in_user(&kgf->gf_group, &gf32->gf_group,\n\t\t\t\tsizeof(kgf->gf_group)) ||\n\t\t    (numsrc && copy_in_user(kgf->gf_slist, gf32->gf_slist,\n\t\t\t\tnumsrc * sizeof(kgf->gf_slist[0]))))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgf;\n\t\tbreak;\n\t}\n\n\tdefault:\n\t\tbreak;\n\t}\n\treturn setsockopt(sock, level, optname, koptval, koptlen);\n}\nEXPORT_SYMBOL(compat_mc_setsockopt);\n\nint compat_mc_getsockopt(struct sock *sock, int level, int optname,\n\tchar __user *optval, int __user *optlen,\n\tint (*getsockopt)(struct sock *, int, int, char __user *, int __user *))\n{\n\tstruct compat_group_filter __user *gf32 = (void *)optval;\n\tstruct group_filter __user *kgf;\n\tint __user\t*koptlen;\n\tu32 interface, fmode, numsrc;\n\tint klen, ulen, err;\n\n\tif (optname != MCAST_MSFILTER)\n\t\treturn getsockopt(sock, level, optname, optval, optlen);\n\n\tkoptlen = compat_alloc_user_space(sizeof(*koptlen));\n\tif (!access_ok(VERIFY_READ, optlen, sizeof(*optlen)) ||\n\t    __get_user(ulen, optlen))\n\t\treturn -EFAULT;\n\n\t/* adjust len for pad */\n\tklen = ulen + sizeof(*kgf) - sizeof(*gf32);\n\n\tif (klen < GROUP_FILTER_SIZE(0))\n\t\treturn -EINVAL;\n\n\tif (!access_ok(VERIFY_WRITE, koptlen, sizeof(*koptlen)) ||\n\t    __put_user(klen, koptlen))\n\t\treturn -EFAULT;\n\n\t/* have to allow space for previous compat_alloc_user_space, too */\n\tkgf = compat_alloc_user_space(klen+sizeof(*optlen));\n\n\tif (!access_ok(VERIFY_READ, gf32, __COMPAT_GF0_SIZE) ||\n\t    __get_user(interface, &gf32->gf_interface) ||\n\t    __get_user(fmode, &gf32->gf_fmode) ||\n\t    __get_user(numsrc, &gf32->gf_numsrc) ||\n\t    __put_user(interface, &kgf->gf_interface) ||\n\t    __put_user(fmode, &kgf->gf_fmode) ||\n\t    __put_user(numsrc, &kgf->gf_numsrc) ||\n\t    copy_in_user(&kgf->gf_group, &gf32->gf_group, sizeof(kgf->gf_group)))\n\t\treturn -EFAULT;\n\n\terr = getsockopt(sock, level, optname, (char __user *)kgf, koptlen);\n\tif (err)\n\t\treturn err;\n\n\tif (!access_ok(VERIFY_READ, koptlen, sizeof(*koptlen)) ||\n\t    __get_user(klen, koptlen))\n\t\treturn -EFAULT;\n\n\tulen = klen - (sizeof(*kgf)-sizeof(*gf32));\n\n\tif (!access_ok(VERIFY_WRITE, optlen, sizeof(*optlen)) ||\n\t    __put_user(ulen, optlen))\n\t\treturn -EFAULT;\n\n\tif (!access_ok(VERIFY_READ, kgf, klen) ||\n\t    !access_ok(VERIFY_WRITE, gf32, ulen) ||\n\t    __get_user(interface, &kgf->gf_interface) ||\n\t    __get_user(fmode, &kgf->gf_fmode) ||\n\t    __get_user(numsrc, &kgf->gf_numsrc) ||\n\t    __put_user(interface, &gf32->gf_interface) ||\n\t    __put_user(fmode, &gf32->gf_fmode) ||\n\t    __put_user(numsrc, &gf32->gf_numsrc))\n\t\treturn -EFAULT;\n\tif (numsrc) {\n\t\tint copylen;\n\n\t\tklen -= GROUP_FILTER_SIZE(0);\n\t\tcopylen = numsrc * sizeof(gf32->gf_slist[0]);\n\t\tif (copylen > klen)\n\t\t\tcopylen = klen;\n\t\tif (copy_in_user(gf32->gf_slist, kgf->gf_slist, copylen))\n\t\t\treturn -EFAULT;\n\t}\n\treturn err;\n}\nEXPORT_SYMBOL(compat_mc_getsockopt);\n\n\n/* Argument list sizes for compat_sys_socketcall */\n#define AL(x) ((x) * sizeof(u32))\nstatic unsigned char nas[21] = {\n\tAL(0), AL(3), AL(3), AL(3), AL(2), AL(3),\n\tAL(3), AL(3), AL(4), AL(4), AL(4), AL(6),\n\tAL(6), AL(2), AL(5), AL(5), AL(3), AL(3),\n\tAL(4), AL(5), AL(4)\n};\n#undef AL\n\nasmlinkage long compat_sys_sendmsg(int fd, struct compat_msghdr __user *msg, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_sendmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_sendmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_sendmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t      flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recvmsg(int fd, struct compat_msghdr __user *msg, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_recvmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recv(int fd, void __user *buf, size_t len, unsigned int flags)\n{\n\treturn sys_recv(fd, buf, len, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recvfrom(int fd, void __user *buf, size_t len,\n\t\t\t\t    unsigned int flags, struct sockaddr __user *addr,\n\t\t\t\t    int __user *addrlen)\n{\n\treturn sys_recvfrom(fd, buf, len, flags | MSG_CMSG_COMPAT, addr, addrlen);\n}\n\nasmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags,\n\t\t\t\t    struct compat_timespec __user *timeout)\n{\n\tint datagrams;\n\tstruct timespec ktspec;\n\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t      flags | MSG_CMSG_COMPAT,\n\t\t\t\t      (struct timespec *) timeout);\n\n\tif (timeout == NULL)\n\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t      flags | MSG_CMSG_COMPAT, NULL);\n\n\tif (get_compat_timespec(&ktspec, timeout))\n\t\treturn -EFAULT;\n\n\tdatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);\n\tif (datagrams > 0 && put_compat_timespec(&ktspec, timeout))\n\t\tdatagrams = -EFAULT;\n\n\treturn datagrams;\n}\n\nasmlinkage long compat_sys_socketcall(int call, u32 __user *args)\n{\n\tint ret;\n\tu32 a[6];\n\tu32 a0, a1;\n\n\tif (call < SYS_SOCKET || call > SYS_SENDMMSG)\n\t\treturn -EINVAL;\n\tif (copy_from_user(a, args, nas[call]))\n\t\treturn -EFAULT;\n\ta0 = a[0];\n\ta1 = a[1];\n\n\tswitch (call) {\n\tcase SYS_SOCKET:\n\t\tret = sys_socket(a0, a1, a[2]);\n\t\tbreak;\n\tcase SYS_BIND:\n\t\tret = sys_bind(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_CONNECT:\n\t\tret = sys_connect(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_LISTEN:\n\t\tret = sys_listen(a0, a1);\n\t\tbreak;\n\tcase SYS_ACCEPT:\n\t\tret = sys_accept4(a0, compat_ptr(a1), compat_ptr(a[2]), 0);\n\t\tbreak;\n\tcase SYS_GETSOCKNAME:\n\t\tret = sys_getsockname(a0, compat_ptr(a1), compat_ptr(a[2]));\n\t\tbreak;\n\tcase SYS_GETPEERNAME:\n\t\tret = sys_getpeername(a0, compat_ptr(a1), compat_ptr(a[2]));\n\t\tbreak;\n\tcase SYS_SOCKETPAIR:\n\t\tret = sys_socketpair(a0, a1, a[2], compat_ptr(a[3]));\n\t\tbreak;\n\tcase SYS_SEND:\n\t\tret = sys_send(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_SENDTO:\n\t\tret = sys_sendto(a0, compat_ptr(a1), a[2], a[3], compat_ptr(a[4]), a[5]);\n\t\tbreak;\n\tcase SYS_RECV:\n\t\tret = compat_sys_recv(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_RECVFROM:\n\t\tret = compat_sys_recvfrom(a0, compat_ptr(a1), a[2], a[3],\n\t\t\t\t\t  compat_ptr(a[4]), compat_ptr(a[5]));\n\t\tbreak;\n\tcase SYS_SHUTDOWN:\n\t\tret = sys_shutdown(a0, a1);\n\t\tbreak;\n\tcase SYS_SETSOCKOPT:\n\t\tret = compat_sys_setsockopt(a0, a1, a[2],\n\t\t\t\tcompat_ptr(a[3]), a[4]);\n\t\tbreak;\n\tcase SYS_GETSOCKOPT:\n\t\tret = compat_sys_getsockopt(a0, a1, a[2],\n\t\t\t\tcompat_ptr(a[3]), compat_ptr(a[4]));\n\t\tbreak;\n\tcase SYS_SENDMSG:\n\t\tret = compat_sys_sendmsg(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_SENDMMSG:\n\t\tret = compat_sys_sendmmsg(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_RECVMSG:\n\t\tret = compat_sys_recvmsg(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_RECVMMSG:\n\t\tret = compat_sys_recvmmsg(a0, compat_ptr(a1), a[2], a[3],\n\t\t\t\t\t  compat_ptr(a[4]));\n\t\tbreak;\n\tcase SYS_ACCEPT4:\n\t\tret = sys_accept4(a0, compat_ptr(a1), compat_ptr(a[2]), a[3]);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n"], "fixing_code": ["/*\n * 32bit Socket syscall emulation. Based on arch/sparc64/kernel/sys_sparc32.c.\n *\n * Copyright (C) 2000\t\tVA Linux Co\n * Copyright (C) 2000\t\tDon Dugger <n0ano@valinux.com>\n * Copyright (C) 1999 \t\tArun Sharma <arun.sharma@intel.com>\n * Copyright (C) 1997,1998 \tJakub Jelinek (jj@sunsite.mff.cuni.cz)\n * Copyright (C) 1997 \t\tDavid S. Miller (davem@caip.rutgers.edu)\n * Copyright (C) 2000\t\tHewlett-Packard Co.\n * Copyright (C) 2000\t\tDavid Mosberger-Tang <davidm@hpl.hp.com>\n * Copyright (C) 2000,2001\tAndi Kleen, SuSE Labs\n */\n\n#include <linux/kernel.h>\n#include <linux/gfp.h>\n#include <linux/fs.h>\n#include <linux/types.h>\n#include <linux/file.h>\n#include <linux/icmpv6.h>\n#include <linux/socket.h>\n#include <linux/syscalls.h>\n#include <linux/filter.h>\n#include <linux/compat.h>\n#include <linux/security.h>\n#include <linux/export.h>\n\n#include <net/scm.h>\n#include <net/sock.h>\n#include <net/ip.h>\n#include <net/ipv6.h>\n#include <asm/uaccess.h>\n#include <net/compat.h>\n\nstatic inline int iov_from_user_compat_to_kern(struct iovec *kiov,\n\t\t\t\t\t  struct compat_iovec __user *uiov32,\n\t\t\t\t\t  int niov)\n{\n\tint tot_len = 0;\n\n\twhile (niov > 0) {\n\t\tcompat_uptr_t buf;\n\t\tcompat_size_t len;\n\n\t\tif (get_user(len, &uiov32->iov_len) ||\n\t\t    get_user(buf, &uiov32->iov_base))\n\t\t\treturn -EFAULT;\n\n\t\tif (len > INT_MAX - tot_len)\n\t\t\tlen = INT_MAX - tot_len;\n\n\t\ttot_len += len;\n\t\tkiov->iov_base = compat_ptr(buf);\n\t\tkiov->iov_len = (__kernel_size_t) len;\n\t\tuiov32++;\n\t\tkiov++;\n\t\tniov--;\n\t}\n\treturn tot_len;\n}\n\nint get_compat_msghdr(struct msghdr *kmsg, struct compat_msghdr __user *umsg)\n{\n\tcompat_uptr_t tmp1, tmp2, tmp3;\n\n\tif (!access_ok(VERIFY_READ, umsg, sizeof(*umsg)) ||\n\t    __get_user(tmp1, &umsg->msg_name) ||\n\t    __get_user(kmsg->msg_namelen, &umsg->msg_namelen) ||\n\t    __get_user(tmp2, &umsg->msg_iov) ||\n\t    __get_user(kmsg->msg_iovlen, &umsg->msg_iovlen) ||\n\t    __get_user(tmp3, &umsg->msg_control) ||\n\t    __get_user(kmsg->msg_controllen, &umsg->msg_controllen) ||\n\t    __get_user(kmsg->msg_flags, &umsg->msg_flags))\n\t\treturn -EFAULT;\n\tif (kmsg->msg_namelen > sizeof(struct sockaddr_storage))\n\t\tkmsg->msg_namelen = sizeof(struct sockaddr_storage);\n\tkmsg->msg_name = compat_ptr(tmp1);\n\tkmsg->msg_iov = compat_ptr(tmp2);\n\tkmsg->msg_control = compat_ptr(tmp3);\n\treturn 0;\n}\n\n/* I've named the args so it is easy to tell whose space the pointers are in. */\nint verify_compat_iovec(struct msghdr *kern_msg, struct iovec *kern_iov,\n\t\t   struct sockaddr_storage *kern_address, int mode)\n{\n\tint tot_len;\n\n\tif (kern_msg->msg_namelen) {\n\t\tif (mode == VERIFY_READ) {\n\t\t\tint err = move_addr_to_kernel(kern_msg->msg_name,\n\t\t\t\t\t\t      kern_msg->msg_namelen,\n\t\t\t\t\t\t      kern_address);\n\t\t\tif (err < 0)\n\t\t\t\treturn err;\n\t\t}\n\t\tif (kern_msg->msg_name)\n\t\t\tkern_msg->msg_name = kern_address;\n\t} else\n\t\tkern_msg->msg_name = NULL;\n\n\ttot_len = iov_from_user_compat_to_kern(kern_iov,\n\t\t\t\t\t  (struct compat_iovec __user *)kern_msg->msg_iov,\n\t\t\t\t\t  kern_msg->msg_iovlen);\n\tif (tot_len >= 0)\n\t\tkern_msg->msg_iov = kern_iov;\n\n\treturn tot_len;\n}\n\n/* Bleech... */\n#define CMSG_COMPAT_ALIGN(len)\tALIGN((len), sizeof(s32))\n\n#define CMSG_COMPAT_DATA(cmsg)\t\t\t\t\\\n\t((void __user *)((char __user *)(cmsg) + CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr))))\n#define CMSG_COMPAT_SPACE(len)\t\t\t\t\\\n\t(CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr)) + CMSG_COMPAT_ALIGN(len))\n#define CMSG_COMPAT_LEN(len)\t\t\t\t\\\n\t(CMSG_COMPAT_ALIGN(sizeof(struct compat_cmsghdr)) + (len))\n\n#define CMSG_COMPAT_FIRSTHDR(msg)\t\t\t\\\n\t(((msg)->msg_controllen) >= sizeof(struct compat_cmsghdr) ?\t\\\n\t (struct compat_cmsghdr __user *)((msg)->msg_control) :\t\t\\\n\t (struct compat_cmsghdr __user *)NULL)\n\n#define CMSG_COMPAT_OK(ucmlen, ucmsg, mhdr) \\\n\t((ucmlen) >= sizeof(struct compat_cmsghdr) && \\\n\t (ucmlen) <= (unsigned long) \\\n\t ((mhdr)->msg_controllen - \\\n\t  ((char *)(ucmsg) - (char *)(mhdr)->msg_control)))\n\nstatic inline struct compat_cmsghdr __user *cmsg_compat_nxthdr(struct msghdr *msg,\n\t\tstruct compat_cmsghdr __user *cmsg, int cmsg_len)\n{\n\tchar __user *ptr = (char __user *)cmsg + CMSG_COMPAT_ALIGN(cmsg_len);\n\tif ((unsigned long)(ptr + 1 - (char __user *)msg->msg_control) >\n\t\t\tmsg->msg_controllen)\n\t\treturn NULL;\n\treturn (struct compat_cmsghdr __user *)ptr;\n}\n\n/* There is a lot of hair here because the alignment rules (and\n * thus placement) of cmsg headers and length are different for\n * 32-bit apps.  -DaveM\n */\nint cmsghdr_from_user_compat_to_kern(struct msghdr *kmsg, struct sock *sk,\n\t\t\t       unsigned char *stackbuf, int stackbuf_size)\n{\n\tstruct compat_cmsghdr __user *ucmsg;\n\tstruct cmsghdr *kcmsg, *kcmsg_base;\n\tcompat_size_t ucmlen;\n\t__kernel_size_t kcmlen, tmp;\n\tint err = -EFAULT;\n\n\tkcmlen = 0;\n\tkcmsg_base = kcmsg = (struct cmsghdr *)stackbuf;\n\tucmsg = CMSG_COMPAT_FIRSTHDR(kmsg);\n\twhile (ucmsg != NULL) {\n\t\tif (get_user(ucmlen, &ucmsg->cmsg_len))\n\t\t\treturn -EFAULT;\n\n\t\t/* Catch bogons. */\n\t\tif (!CMSG_COMPAT_OK(ucmlen, ucmsg, kmsg))\n\t\t\treturn -EINVAL;\n\n\t\ttmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) +\n\t\t       CMSG_ALIGN(sizeof(struct cmsghdr)));\n\t\ttmp = CMSG_ALIGN(tmp);\n\t\tkcmlen += tmp;\n\t\tucmsg = cmsg_compat_nxthdr(kmsg, ucmsg, ucmlen);\n\t}\n\tif (kcmlen == 0)\n\t\treturn -EINVAL;\n\n\t/* The kcmlen holds the 64-bit version of the control length.\n\t * It may not be modified as we do not stick it into the kmsg\n\t * until we have successfully copied over all of the data\n\t * from the user.\n\t */\n\tif (kcmlen > stackbuf_size)\n\t\tkcmsg_base = kcmsg = sock_kmalloc(sk, kcmlen, GFP_KERNEL);\n\tif (kcmsg == NULL)\n\t\treturn -ENOBUFS;\n\n\t/* Now copy them over neatly. */\n\tmemset(kcmsg, 0, kcmlen);\n\tucmsg = CMSG_COMPAT_FIRSTHDR(kmsg);\n\twhile (ucmsg != NULL) {\n\t\tif (__get_user(ucmlen, &ucmsg->cmsg_len))\n\t\t\tgoto Efault;\n\t\tif (!CMSG_COMPAT_OK(ucmlen, ucmsg, kmsg))\n\t\t\tgoto Einval;\n\t\ttmp = ((ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg))) +\n\t\t       CMSG_ALIGN(sizeof(struct cmsghdr)));\n\t\tif ((char *)kcmsg_base + kcmlen - (char *)kcmsg < CMSG_ALIGN(tmp))\n\t\t\tgoto Einval;\n\t\tkcmsg->cmsg_len = tmp;\n\t\ttmp = CMSG_ALIGN(tmp);\n\t\tif (__get_user(kcmsg->cmsg_level, &ucmsg->cmsg_level) ||\n\t\t    __get_user(kcmsg->cmsg_type, &ucmsg->cmsg_type) ||\n\t\t    copy_from_user(CMSG_DATA(kcmsg),\n\t\t\t\t   CMSG_COMPAT_DATA(ucmsg),\n\t\t\t\t   (ucmlen - CMSG_COMPAT_ALIGN(sizeof(*ucmsg)))))\n\t\t\tgoto Efault;\n\n\t\t/* Advance. */\n\t\tkcmsg = (struct cmsghdr *)((char *)kcmsg + tmp);\n\t\tucmsg = cmsg_compat_nxthdr(kmsg, ucmsg, ucmlen);\n\t}\n\n\t/* Ok, looks like we made it.  Hook it up and return success. */\n\tkmsg->msg_control = kcmsg_base;\n\tkmsg->msg_controllen = kcmlen;\n\treturn 0;\n\nEinval:\n\terr = -EINVAL;\nEfault:\n\tif (kcmsg_base != (struct cmsghdr *)stackbuf)\n\t\tsock_kfree_s(sk, kcmsg_base, kcmlen);\n\treturn err;\n}\n\nint put_cmsg_compat(struct msghdr *kmsg, int level, int type, int len, void *data)\n{\n\tstruct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;\n\tstruct compat_cmsghdr cmhdr;\n\tstruct compat_timeval ctv;\n\tstruct compat_timespec cts[3];\n\tint cmlen;\n\n\tif (cm == NULL || kmsg->msg_controllen < sizeof(*cm)) {\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\t\treturn 0; /* XXX: return error? check spec. */\n\t}\n\n\tif (!COMPAT_USE_64BIT_TIME) {\n\t\tif (level == SOL_SOCKET && type == SCM_TIMESTAMP) {\n\t\t\tstruct timeval *tv = (struct timeval *)data;\n\t\t\tctv.tv_sec = tv->tv_sec;\n\t\t\tctv.tv_usec = tv->tv_usec;\n\t\t\tdata = &ctv;\n\t\t\tlen = sizeof(ctv);\n\t\t}\n\t\tif (level == SOL_SOCKET &&\n\t\t    (type == SCM_TIMESTAMPNS || type == SCM_TIMESTAMPING)) {\n\t\t\tint count = type == SCM_TIMESTAMPNS ? 1 : 3;\n\t\t\tint i;\n\t\t\tstruct timespec *ts = (struct timespec *)data;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tcts[i].tv_sec = ts[i].tv_sec;\n\t\t\t\tcts[i].tv_nsec = ts[i].tv_nsec;\n\t\t\t}\n\t\t\tdata = &cts;\n\t\t\tlen = sizeof(cts[0]) * count;\n\t\t}\n\t}\n\n\tcmlen = CMSG_COMPAT_LEN(len);\n\tif (kmsg->msg_controllen < cmlen) {\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\t\tcmlen = kmsg->msg_controllen;\n\t}\n\tcmhdr.cmsg_level = level;\n\tcmhdr.cmsg_type = type;\n\tcmhdr.cmsg_len = cmlen;\n\n\tif (copy_to_user(cm, &cmhdr, sizeof cmhdr))\n\t\treturn -EFAULT;\n\tif (copy_to_user(CMSG_COMPAT_DATA(cm), data, cmlen - sizeof(struct compat_cmsghdr)))\n\t\treturn -EFAULT;\n\tcmlen = CMSG_COMPAT_SPACE(len);\n\tif (kmsg->msg_controllen < cmlen)\n\t\tcmlen = kmsg->msg_controllen;\n\tkmsg->msg_control += cmlen;\n\tkmsg->msg_controllen -= cmlen;\n\treturn 0;\n}\n\nvoid scm_detach_fds_compat(struct msghdr *kmsg, struct scm_cookie *scm)\n{\n\tstruct compat_cmsghdr __user *cm = (struct compat_cmsghdr __user *) kmsg->msg_control;\n\tint fdmax = (kmsg->msg_controllen - sizeof(struct compat_cmsghdr)) / sizeof(int);\n\tint fdnum = scm->fp->count;\n\tstruct file **fp = scm->fp->fp;\n\tint __user *cmfptr;\n\tint err = 0, i;\n\n\tif (fdnum < fdmax)\n\t\tfdmax = fdnum;\n\n\tfor (i = 0, cmfptr = (int __user *) CMSG_COMPAT_DATA(cm); i < fdmax; i++, cmfptr++) {\n\t\tint new_fd;\n\t\terr = security_file_receive(fp[i]);\n\t\tif (err)\n\t\t\tbreak;\n\t\terr = get_unused_fd_flags(MSG_CMSG_CLOEXEC & kmsg->msg_flags\n\t\t\t\t\t  ? O_CLOEXEC : 0);\n\t\tif (err < 0)\n\t\t\tbreak;\n\t\tnew_fd = err;\n\t\terr = put_user(new_fd, cmfptr);\n\t\tif (err) {\n\t\t\tput_unused_fd(new_fd);\n\t\t\tbreak;\n\t\t}\n\t\t/* Bump the usage count and install the file. */\n\t\tfd_install(new_fd, get_file(fp[i]));\n\t}\n\n\tif (i > 0) {\n\t\tint cmlen = CMSG_COMPAT_LEN(i * sizeof(int));\n\t\terr = put_user(SOL_SOCKET, &cm->cmsg_level);\n\t\tif (!err)\n\t\t\terr = put_user(SCM_RIGHTS, &cm->cmsg_type);\n\t\tif (!err)\n\t\t\terr = put_user(cmlen, &cm->cmsg_len);\n\t\tif (!err) {\n\t\t\tcmlen = CMSG_COMPAT_SPACE(i * sizeof(int));\n\t\t\tkmsg->msg_control += cmlen;\n\t\t\tkmsg->msg_controllen -= cmlen;\n\t\t}\n\t}\n\tif (i < fdnum)\n\t\tkmsg->msg_flags |= MSG_CTRUNC;\n\n\t/*\n\t * All of the files that fit in the message have had their\n\t * usage counts incremented, so we just free the list.\n\t */\n\t__scm_destroy(scm);\n}\n\nstatic int do_set_attach_filter(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tstruct compat_sock_fprog __user *fprog32 = (struct compat_sock_fprog __user *)optval;\n\tstruct sock_fprog __user *kfprog = compat_alloc_user_space(sizeof(struct sock_fprog));\n\tcompat_uptr_t ptr;\n\tu16 len;\n\n\tif (!access_ok(VERIFY_READ, fprog32, sizeof(*fprog32)) ||\n\t    !access_ok(VERIFY_WRITE, kfprog, sizeof(struct sock_fprog)) ||\n\t    __get_user(len, &fprog32->len) ||\n\t    __get_user(ptr, &fprog32->filter) ||\n\t    __put_user(len, &kfprog->len) ||\n\t    __put_user(compat_ptr(ptr), &kfprog->filter))\n\t\treturn -EFAULT;\n\n\treturn sock_setsockopt(sock, level, optname, (char __user *)kfprog,\n\t\t\t      sizeof(struct sock_fprog));\n}\n\nstatic int do_set_sock_timeout(struct socket *sock, int level,\n\t\tint optname, char __user *optval, unsigned int optlen)\n{\n\tstruct compat_timeval __user *up = (struct compat_timeval __user *)optval;\n\tstruct timeval ktime;\n\tmm_segment_t old_fs;\n\tint err;\n\n\tif (optlen < sizeof(*up))\n\t\treturn -EINVAL;\n\tif (!access_ok(VERIFY_READ, up, sizeof(*up)) ||\n\t    __get_user(ktime.tv_sec, &up->tv_sec) ||\n\t    __get_user(ktime.tv_usec, &up->tv_usec))\n\t\treturn -EFAULT;\n\told_fs = get_fs();\n\tset_fs(KERNEL_DS);\n\terr = sock_setsockopt(sock, level, optname, (char *)&ktime, sizeof(ktime));\n\tset_fs(old_fs);\n\n\treturn err;\n}\n\nstatic int compat_sock_setsockopt(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tif (optname == SO_ATTACH_FILTER)\n\t\treturn do_set_attach_filter(sock, level, optname,\n\t\t\t\t\t    optval, optlen);\n\tif (optname == SO_RCVTIMEO || optname == SO_SNDTIMEO)\n\t\treturn do_set_sock_timeout(sock, level, optname, optval, optlen);\n\n\treturn sock_setsockopt(sock, level, optname, optval, optlen);\n}\n\nasmlinkage long compat_sys_setsockopt(int fd, int level, int optname,\n\t\t\t\tchar __user *optval, unsigned int optlen)\n{\n\tint err;\n\tstruct socket *sock = sockfd_lookup(fd, &err);\n\n\tif (sock) {\n\t\terr = security_socket_setsockopt(sock, level, optname);\n\t\tif (err) {\n\t\t\tsockfd_put(sock);\n\t\t\treturn err;\n\t\t}\n\n\t\tif (level == SOL_SOCKET)\n\t\t\terr = compat_sock_setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse if (sock->ops->compat_setsockopt)\n\t\t\terr = sock->ops->compat_setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse\n\t\t\terr = sock->ops->setsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\tsockfd_put(sock);\n\t}\n\treturn err;\n}\n\nstatic int do_get_sock_timeout(struct socket *sock, int level, int optname,\n\t\tchar __user *optval, int __user *optlen)\n{\n\tstruct compat_timeval __user *up;\n\tstruct timeval ktime;\n\tmm_segment_t old_fs;\n\tint len, err;\n\n\tup = (struct compat_timeval __user *) optval;\n\tif (get_user(len, optlen))\n\t\treturn -EFAULT;\n\tif (len < sizeof(*up))\n\t\treturn -EINVAL;\n\tlen = sizeof(ktime);\n\told_fs = get_fs();\n\tset_fs(KERNEL_DS);\n\terr = sock_getsockopt(sock, level, optname, (char *) &ktime, &len);\n\tset_fs(old_fs);\n\n\tif (!err) {\n\t\tif (put_user(sizeof(*up), optlen) ||\n\t\t    !access_ok(VERIFY_WRITE, up, sizeof(*up)) ||\n\t\t    __put_user(ktime.tv_sec, &up->tv_sec) ||\n\t\t    __put_user(ktime.tv_usec, &up->tv_usec))\n\t\t\terr = -EFAULT;\n\t}\n\treturn err;\n}\n\nstatic int compat_sock_getsockopt(struct socket *sock, int level, int optname,\n\t\t\t\tchar __user *optval, int __user *optlen)\n{\n\tif (optname == SO_RCVTIMEO || optname == SO_SNDTIMEO)\n\t\treturn do_get_sock_timeout(sock, level, optname, optval, optlen);\n\treturn sock_getsockopt(sock, level, optname, optval, optlen);\n}\n\nint compat_sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)\n{\n\tstruct compat_timeval __user *ctv;\n\tint err;\n\tstruct timeval tv;\n\n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn sock_get_timestamp(sk, userstamp);\n\n\tctv = (struct compat_timeval __user *) userstamp;\n\terr = -ENOENT;\n\tif (!sock_flag(sk, SOCK_TIMESTAMP))\n\t\tsock_enable_timestamp(sk, SOCK_TIMESTAMP);\n\ttv = ktime_to_timeval(sk->sk_stamp);\n\tif (tv.tv_sec == -1)\n\t\treturn err;\n\tif (tv.tv_sec == 0) {\n\t\tsk->sk_stamp = ktime_get_real();\n\t\ttv = ktime_to_timeval(sk->sk_stamp);\n\t}\n\terr = 0;\n\tif (put_user(tv.tv_sec, &ctv->tv_sec) ||\n\t\t\tput_user(tv.tv_usec, &ctv->tv_usec))\n\t\terr = -EFAULT;\n\treturn err;\n}\nEXPORT_SYMBOL(compat_sock_get_timestamp);\n\nint compat_sock_get_timestampns(struct sock *sk, struct timespec __user *userstamp)\n{\n\tstruct compat_timespec __user *ctv;\n\tint err;\n\tstruct timespec ts;\n\n\tif (COMPAT_USE_64BIT_TIME)\n\t\treturn sock_get_timestampns (sk, userstamp);\n\n\tctv = (struct compat_timespec __user *) userstamp;\n\terr = -ENOENT;\n\tif (!sock_flag(sk, SOCK_TIMESTAMP))\n\t\tsock_enable_timestamp(sk, SOCK_TIMESTAMP);\n\tts = ktime_to_timespec(sk->sk_stamp);\n\tif (ts.tv_sec == -1)\n\t\treturn err;\n\tif (ts.tv_sec == 0) {\n\t\tsk->sk_stamp = ktime_get_real();\n\t\tts = ktime_to_timespec(sk->sk_stamp);\n\t}\n\terr = 0;\n\tif (put_user(ts.tv_sec, &ctv->tv_sec) ||\n\t\t\tput_user(ts.tv_nsec, &ctv->tv_nsec))\n\t\terr = -EFAULT;\n\treturn err;\n}\nEXPORT_SYMBOL(compat_sock_get_timestampns);\n\nasmlinkage long compat_sys_getsockopt(int fd, int level, int optname,\n\t\t\t\tchar __user *optval, int __user *optlen)\n{\n\tint err;\n\tstruct socket *sock = sockfd_lookup(fd, &err);\n\n\tif (sock) {\n\t\terr = security_socket_getsockopt(sock, level, optname);\n\t\tif (err) {\n\t\t\tsockfd_put(sock);\n\t\t\treturn err;\n\t\t}\n\n\t\tif (level == SOL_SOCKET)\n\t\t\terr = compat_sock_getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse if (sock->ops->compat_getsockopt)\n\t\t\terr = sock->ops->compat_getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\telse\n\t\t\terr = sock->ops->getsockopt(sock, level,\n\t\t\t\t\toptname, optval, optlen);\n\t\tsockfd_put(sock);\n\t}\n\treturn err;\n}\n\nstruct compat_group_req {\n\t__u32\t\t\t\t gr_interface;\n\tstruct __kernel_sockaddr_storage gr_group\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\nstruct compat_group_source_req {\n\t__u32\t\t\t\t gsr_interface;\n\tstruct __kernel_sockaddr_storage gsr_group\n\t\t__attribute__ ((aligned(4)));\n\tstruct __kernel_sockaddr_storage gsr_source\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\nstruct compat_group_filter {\n\t__u32\t\t\t\t gf_interface;\n\tstruct __kernel_sockaddr_storage gf_group\n\t\t__attribute__ ((aligned(4)));\n\t__u32\t\t\t\t gf_fmode;\n\t__u32\t\t\t\t gf_numsrc;\n\tstruct __kernel_sockaddr_storage gf_slist[1]\n\t\t__attribute__ ((aligned(4)));\n} __packed;\n\n#define __COMPAT_GF0_SIZE (sizeof(struct compat_group_filter) - \\\n\t\t\tsizeof(struct __kernel_sockaddr_storage))\n\n\nint compat_mc_setsockopt(struct sock *sock, int level, int optname,\n\tchar __user *optval, unsigned int optlen,\n\tint (*setsockopt)(struct sock *, int, int, char __user *, unsigned int))\n{\n\tchar __user\t*koptval = optval;\n\tint\t\tkoptlen = optlen;\n\n\tswitch (optname) {\n\tcase MCAST_JOIN_GROUP:\n\tcase MCAST_LEAVE_GROUP:\n\t{\n\t\tstruct compat_group_req __user *gr32 = (void *)optval;\n\t\tstruct group_req __user *kgr =\n\t\t\tcompat_alloc_user_space(sizeof(struct group_req));\n\t\tu32 interface;\n\n\t\tif (!access_ok(VERIFY_READ, gr32, sizeof(*gr32)) ||\n\t\t    !access_ok(VERIFY_WRITE, kgr, sizeof(struct group_req)) ||\n\t\t    __get_user(interface, &gr32->gr_interface) ||\n\t\t    __put_user(interface, &kgr->gr_interface) ||\n\t\t    copy_in_user(&kgr->gr_group, &gr32->gr_group,\n\t\t\t\tsizeof(kgr->gr_group)))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgr;\n\t\tkoptlen = sizeof(struct group_req);\n\t\tbreak;\n\t}\n\tcase MCAST_JOIN_SOURCE_GROUP:\n\tcase MCAST_LEAVE_SOURCE_GROUP:\n\tcase MCAST_BLOCK_SOURCE:\n\tcase MCAST_UNBLOCK_SOURCE:\n\t{\n\t\tstruct compat_group_source_req __user *gsr32 = (void *)optval;\n\t\tstruct group_source_req __user *kgsr = compat_alloc_user_space(\n\t\t\tsizeof(struct group_source_req));\n\t\tu32 interface;\n\n\t\tif (!access_ok(VERIFY_READ, gsr32, sizeof(*gsr32)) ||\n\t\t    !access_ok(VERIFY_WRITE, kgsr,\n\t\t\tsizeof(struct group_source_req)) ||\n\t\t    __get_user(interface, &gsr32->gsr_interface) ||\n\t\t    __put_user(interface, &kgsr->gsr_interface) ||\n\t\t    copy_in_user(&kgsr->gsr_group, &gsr32->gsr_group,\n\t\t\t\tsizeof(kgsr->gsr_group)) ||\n\t\t    copy_in_user(&kgsr->gsr_source, &gsr32->gsr_source,\n\t\t\t\tsizeof(kgsr->gsr_source)))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgsr;\n\t\tkoptlen = sizeof(struct group_source_req);\n\t\tbreak;\n\t}\n\tcase MCAST_MSFILTER:\n\t{\n\t\tstruct compat_group_filter __user *gf32 = (void *)optval;\n\t\tstruct group_filter __user *kgf;\n\t\tu32 interface, fmode, numsrc;\n\n\t\tif (!access_ok(VERIFY_READ, gf32, __COMPAT_GF0_SIZE) ||\n\t\t    __get_user(interface, &gf32->gf_interface) ||\n\t\t    __get_user(fmode, &gf32->gf_fmode) ||\n\t\t    __get_user(numsrc, &gf32->gf_numsrc))\n\t\t\treturn -EFAULT;\n\t\tkoptlen = optlen + sizeof(struct group_filter) -\n\t\t\t\tsizeof(struct compat_group_filter);\n\t\tif (koptlen < GROUP_FILTER_SIZE(numsrc))\n\t\t\treturn -EINVAL;\n\t\tkgf = compat_alloc_user_space(koptlen);\n\t\tif (!access_ok(VERIFY_WRITE, kgf, koptlen) ||\n\t\t    __put_user(interface, &kgf->gf_interface) ||\n\t\t    __put_user(fmode, &kgf->gf_fmode) ||\n\t\t    __put_user(numsrc, &kgf->gf_numsrc) ||\n\t\t    copy_in_user(&kgf->gf_group, &gf32->gf_group,\n\t\t\t\tsizeof(kgf->gf_group)) ||\n\t\t    (numsrc && copy_in_user(kgf->gf_slist, gf32->gf_slist,\n\t\t\t\tnumsrc * sizeof(kgf->gf_slist[0]))))\n\t\t\treturn -EFAULT;\n\t\tkoptval = (char __user *)kgf;\n\t\tbreak;\n\t}\n\n\tdefault:\n\t\tbreak;\n\t}\n\treturn setsockopt(sock, level, optname, koptval, koptlen);\n}\nEXPORT_SYMBOL(compat_mc_setsockopt);\n\nint compat_mc_getsockopt(struct sock *sock, int level, int optname,\n\tchar __user *optval, int __user *optlen,\n\tint (*getsockopt)(struct sock *, int, int, char __user *, int __user *))\n{\n\tstruct compat_group_filter __user *gf32 = (void *)optval;\n\tstruct group_filter __user *kgf;\n\tint __user\t*koptlen;\n\tu32 interface, fmode, numsrc;\n\tint klen, ulen, err;\n\n\tif (optname != MCAST_MSFILTER)\n\t\treturn getsockopt(sock, level, optname, optval, optlen);\n\n\tkoptlen = compat_alloc_user_space(sizeof(*koptlen));\n\tif (!access_ok(VERIFY_READ, optlen, sizeof(*optlen)) ||\n\t    __get_user(ulen, optlen))\n\t\treturn -EFAULT;\n\n\t/* adjust len for pad */\n\tklen = ulen + sizeof(*kgf) - sizeof(*gf32);\n\n\tif (klen < GROUP_FILTER_SIZE(0))\n\t\treturn -EINVAL;\n\n\tif (!access_ok(VERIFY_WRITE, koptlen, sizeof(*koptlen)) ||\n\t    __put_user(klen, koptlen))\n\t\treturn -EFAULT;\n\n\t/* have to allow space for previous compat_alloc_user_space, too */\n\tkgf = compat_alloc_user_space(klen+sizeof(*optlen));\n\n\tif (!access_ok(VERIFY_READ, gf32, __COMPAT_GF0_SIZE) ||\n\t    __get_user(interface, &gf32->gf_interface) ||\n\t    __get_user(fmode, &gf32->gf_fmode) ||\n\t    __get_user(numsrc, &gf32->gf_numsrc) ||\n\t    __put_user(interface, &kgf->gf_interface) ||\n\t    __put_user(fmode, &kgf->gf_fmode) ||\n\t    __put_user(numsrc, &kgf->gf_numsrc) ||\n\t    copy_in_user(&kgf->gf_group, &gf32->gf_group, sizeof(kgf->gf_group)))\n\t\treturn -EFAULT;\n\n\terr = getsockopt(sock, level, optname, (char __user *)kgf, koptlen);\n\tif (err)\n\t\treturn err;\n\n\tif (!access_ok(VERIFY_READ, koptlen, sizeof(*koptlen)) ||\n\t    __get_user(klen, koptlen))\n\t\treturn -EFAULT;\n\n\tulen = klen - (sizeof(*kgf)-sizeof(*gf32));\n\n\tif (!access_ok(VERIFY_WRITE, optlen, sizeof(*optlen)) ||\n\t    __put_user(ulen, optlen))\n\t\treturn -EFAULT;\n\n\tif (!access_ok(VERIFY_READ, kgf, klen) ||\n\t    !access_ok(VERIFY_WRITE, gf32, ulen) ||\n\t    __get_user(interface, &kgf->gf_interface) ||\n\t    __get_user(fmode, &kgf->gf_fmode) ||\n\t    __get_user(numsrc, &kgf->gf_numsrc) ||\n\t    __put_user(interface, &gf32->gf_interface) ||\n\t    __put_user(fmode, &gf32->gf_fmode) ||\n\t    __put_user(numsrc, &gf32->gf_numsrc))\n\t\treturn -EFAULT;\n\tif (numsrc) {\n\t\tint copylen;\n\n\t\tklen -= GROUP_FILTER_SIZE(0);\n\t\tcopylen = numsrc * sizeof(gf32->gf_slist[0]);\n\t\tif (copylen > klen)\n\t\t\tcopylen = klen;\n\t\tif (copy_in_user(gf32->gf_slist, kgf->gf_slist, copylen))\n\t\t\treturn -EFAULT;\n\t}\n\treturn err;\n}\nEXPORT_SYMBOL(compat_mc_getsockopt);\n\n\n/* Argument list sizes for compat_sys_socketcall */\n#define AL(x) ((x) * sizeof(u32))\nstatic unsigned char nas[21] = {\n\tAL(0), AL(3), AL(3), AL(3), AL(2), AL(3),\n\tAL(3), AL(3), AL(4), AL(4), AL(4), AL(6),\n\tAL(6), AL(2), AL(5), AL(5), AL(3), AL(3),\n\tAL(4), AL(5), AL(4)\n};\n#undef AL\n\nasmlinkage long compat_sys_sendmsg(int fd, struct compat_msghdr __user *msg, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_sendmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_sendmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_sendmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t      flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recvmsg(int fd, struct compat_msghdr __user *msg, unsigned int flags)\n{\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\treturn __sys_recvmsg(fd, (struct msghdr __user *)msg, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recv(int fd, void __user *buf, size_t len, unsigned int flags)\n{\n\treturn sys_recv(fd, buf, len, flags | MSG_CMSG_COMPAT);\n}\n\nasmlinkage long compat_sys_recvfrom(int fd, void __user *buf, size_t len,\n\t\t\t\t    unsigned int flags, struct sockaddr __user *addr,\n\t\t\t\t    int __user *addrlen)\n{\n\treturn sys_recvfrom(fd, buf, len, flags | MSG_CMSG_COMPAT, addr, addrlen);\n}\n\nasmlinkage long compat_sys_recvmmsg(int fd, struct compat_mmsghdr __user *mmsg,\n\t\t\t\t    unsigned int vlen, unsigned int flags,\n\t\t\t\t    struct compat_timespec __user *timeout)\n{\n\tint datagrams;\n\tstruct timespec ktspec;\n\n\tif (flags & MSG_CMSG_COMPAT)\n\t\treturn -EINVAL;\n\n\tif (timeout == NULL)\n\t\treturn __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t      flags | MSG_CMSG_COMPAT, NULL);\n\n\tif (compat_get_timespec(&ktspec, timeout))\n\t\treturn -EFAULT;\n\n\tdatagrams = __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,\n\t\t\t\t   flags | MSG_CMSG_COMPAT, &ktspec);\n\tif (datagrams > 0 && compat_put_timespec(&ktspec, timeout))\n\t\tdatagrams = -EFAULT;\n\n\treturn datagrams;\n}\n\nasmlinkage long compat_sys_socketcall(int call, u32 __user *args)\n{\n\tint ret;\n\tu32 a[6];\n\tu32 a0, a1;\n\n\tif (call < SYS_SOCKET || call > SYS_SENDMMSG)\n\t\treturn -EINVAL;\n\tif (copy_from_user(a, args, nas[call]))\n\t\treturn -EFAULT;\n\ta0 = a[0];\n\ta1 = a[1];\n\n\tswitch (call) {\n\tcase SYS_SOCKET:\n\t\tret = sys_socket(a0, a1, a[2]);\n\t\tbreak;\n\tcase SYS_BIND:\n\t\tret = sys_bind(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_CONNECT:\n\t\tret = sys_connect(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_LISTEN:\n\t\tret = sys_listen(a0, a1);\n\t\tbreak;\n\tcase SYS_ACCEPT:\n\t\tret = sys_accept4(a0, compat_ptr(a1), compat_ptr(a[2]), 0);\n\t\tbreak;\n\tcase SYS_GETSOCKNAME:\n\t\tret = sys_getsockname(a0, compat_ptr(a1), compat_ptr(a[2]));\n\t\tbreak;\n\tcase SYS_GETPEERNAME:\n\t\tret = sys_getpeername(a0, compat_ptr(a1), compat_ptr(a[2]));\n\t\tbreak;\n\tcase SYS_SOCKETPAIR:\n\t\tret = sys_socketpair(a0, a1, a[2], compat_ptr(a[3]));\n\t\tbreak;\n\tcase SYS_SEND:\n\t\tret = sys_send(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_SENDTO:\n\t\tret = sys_sendto(a0, compat_ptr(a1), a[2], a[3], compat_ptr(a[4]), a[5]);\n\t\tbreak;\n\tcase SYS_RECV:\n\t\tret = compat_sys_recv(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_RECVFROM:\n\t\tret = compat_sys_recvfrom(a0, compat_ptr(a1), a[2], a[3],\n\t\t\t\t\t  compat_ptr(a[4]), compat_ptr(a[5]));\n\t\tbreak;\n\tcase SYS_SHUTDOWN:\n\t\tret = sys_shutdown(a0, a1);\n\t\tbreak;\n\tcase SYS_SETSOCKOPT:\n\t\tret = compat_sys_setsockopt(a0, a1, a[2],\n\t\t\t\tcompat_ptr(a[3]), a[4]);\n\t\tbreak;\n\tcase SYS_GETSOCKOPT:\n\t\tret = compat_sys_getsockopt(a0, a1, a[2],\n\t\t\t\tcompat_ptr(a[3]), compat_ptr(a[4]));\n\t\tbreak;\n\tcase SYS_SENDMSG:\n\t\tret = compat_sys_sendmsg(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_SENDMMSG:\n\t\tret = compat_sys_sendmmsg(a0, compat_ptr(a1), a[2], a[3]);\n\t\tbreak;\n\tcase SYS_RECVMSG:\n\t\tret = compat_sys_recvmsg(a0, compat_ptr(a1), a[2]);\n\t\tbreak;\n\tcase SYS_RECVMMSG:\n\t\tret = compat_sys_recvmmsg(a0, compat_ptr(a1), a[2], a[3],\n\t\t\t\t\t  compat_ptr(a[4]));\n\t\tbreak;\n\tcase SYS_ACCEPT4:\n\t\tret = sys_accept4(a0, compat_ptr(a1), compat_ptr(a[2]), a[3]);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\treturn ret;\n}\n"], "filenames": ["net/compat.c"], "buggy_code_start_loc": [783], "buggy_code_end_loc": [798], "fixing_code_start_loc": [782], "fixing_code_end_loc": [793], "type": "CWE-20", "message": "The compat_sys_recvmmsg function in net/compat.c in the Linux kernel before 3.13.2, when CONFIG_X86_X32 is enabled, allows local users to gain privileges via a recvmmsg system call with a crafted timeout pointer parameter.", "other": {"cve": {"id": "CVE-2014-0038", "sourceIdentifier": "secalert@redhat.com", "published": "2014-02-06T22:55:03.327", "lastModified": "2023-02-13T00:30:01.393", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The compat_sys_recvmmsg function in net/compat.c in the Linux kernel before 3.13.2, when CONFIG_X86_X32 is enabled, allows local users to gain privileges via a recvmmsg system call with a crafted timeout pointer parameter."}, {"lang": "es", "value": "La funci\u00f3n compat_sys_recvmmsg en net/compat.c en el kernel de Linux anterior a 3.13.2 cuando est\u00e1 habilitado CONFIG_X86_X32, permite a usuarios locales ganar privilegios a trav\u00e9s de una llamada al sistema recvmmsg manipulada con un par\u00e1metro puntero a \"timeout\" manipulado."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 6.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.13.1", "matchCriteriaId": "DCD68F67-324B-41AE-AC7B-5712150E501B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "D30AEC07-3CBD-4F4F-9646-BEAA1D98750B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C2AA8E68-691B-499C-AEDD-3C0BFFE70044"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "9440475B-5960-4066-A204-F30AAFC87846"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc4:*:*:*:*:*:*", "matchCriteriaId": "53BCFBFB-6AF0-4525-8623-7633CC5E17DB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc5:*:*:*:*:*:*", "matchCriteriaId": "6ED4E86A-74F0-436A-BEB4-3F4EE93A5421"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc6:*:*:*:*:*:*", "matchCriteriaId": "BF0365B0-8E16-4F30-BD92-5DD538CC8135"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0:rc7:*:*:*:*:*:*", "matchCriteriaId": "079505E8-2942-4C33-93D1-35ADA4C39E72"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "38989541-2360-4E0A-AE5A-3D6144AA6114"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "4E51646B-7A0E-40F3-B8C9-239C1DA81DD1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "42A8A507-F8E2-491C-A144-B2448A1DB26E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "901FC6F3-2C2A-4112-AE27-AB102BBE8DEE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "203AD334-DB9F-41B0-A4D1-A6C158EF8C40"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "B3611753-E440-410F-8250-600C996A4B8E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "9739BB47-EEAF-42F1-A557-2AE2EA9526A3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "5A95E3BB-0AFC-4C2E-B9BE-C975E902A266"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "482A6C9A-9B8E-4D1C-917A-F16370745E7C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "C6D87357-63E0-41D0-9F02-1BCBF9A77E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "3765A2D6-2D78-4FB1-989E-D5106BFA3F5E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "F54257DB-7023-43C4-AC4D-9590B815CD92"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "61FF5FCD-A4A1-4803-AC53-320A4C838AF6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "9F096553-064F-46A2-877B-F32F163A0F49"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "C0D762D1-E3AD-40EA-8D39-83EEB51B5E85"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.16:*:*:*:*:*:*:*", "matchCriteriaId": "A6187D19-7148-4B87-AD7E-244FF9EE0FA6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.17:*:*:*:*:*:*:*", "matchCriteriaId": "99AC64C2-E391-485C-9CD7-BA09C8FA5E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.18:*:*:*:*:*:*:*", "matchCriteriaId": "8CDA5E95-7805-441B-BEF7-4448EA45E964"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.19:*:*:*:*:*:*:*", "matchCriteriaId": "51561053-6C28-4F38-BC9B-3F7A7508EB72"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.20:*:*:*:*:*:*:*", "matchCriteriaId": "118F4A5B-C498-4FC3-BE28-50D18EBE4F22"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.21:*:*:*:*:*:*:*", "matchCriteriaId": "BD38EBE6-FE1A-4B55-9FB5-07952253B7A5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.22:*:*:*:*:*:*:*", "matchCriteriaId": "3A491E47-82AD-4055-9444-2EC0D6715326"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.23:*:*:*:*:*:*:*", "matchCriteriaId": "13C5FD16-23B6-467F-9438-5B554922F974"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.24:*:*:*:*:*:*:*", "matchCriteriaId": "9C67235F-5B51-4BF7-89EC-4810F720246F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.25:*:*:*:*:*:*:*", "matchCriteriaId": "08405DEF-05F4-45F0-AC95-DBF914A36D93"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.26:*:*:*:*:*:*:*", "matchCriteriaId": "1A7B9C4B-4A41-4175-9F07-191C1EE98C1F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.27:*:*:*:*:*:*:*", "matchCriteriaId": "B306E0A8-4D4A-4895-8128-A500D30A7E0C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.28:*:*:*:*:*:*:*", "matchCriteriaId": "295C839A-F34E-4853-A926-55EABC639412"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.29:*:*:*:*:*:*:*", "matchCriteriaId": "2AFD5F49-7EF9-4CFE-95BD-8FD19B500B0A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.30:*:*:*:*:*:*:*", "matchCriteriaId": "00B3DDDD-B2F6-4753-BA38-65A24017857D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.31:*:*:*:*:*:*:*", "matchCriteriaId": "33FCD39E-F4BF-432D-9CF9-F195CF5844F3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.32:*:*:*:*:*:*:*", "matchCriteriaId": "C7308690-CB0D-4758-B80F-D2ADCD2A9D66"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.33:*:*:*:*:*:*:*", "matchCriteriaId": "313A470B-8A2B-478A-82B5-B27D2718331C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.34:*:*:*:*:*:*:*", "matchCriteriaId": "83FF021E-07E3-41CC-AAE8-D99D7FF24B9D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.35:*:*:*:*:*:*:*", "matchCriteriaId": "F72412E3-8DA9-4CC9-A426-B534202ADBA4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.36:*:*:*:*:*:*:*", "matchCriteriaId": "FCAA9D7A-3C3E-4C0B-9D38-EA80E68C2E46"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.37:*:*:*:*:*:*:*", "matchCriteriaId": "4A9E3AE5-3FCF-4CBB-A30B-082BCFBFB0CB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.38:*:*:*:*:*:*:*", "matchCriteriaId": "CF715657-4C3A-4392-B85D-1BBF4DE45D89"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.39:*:*:*:*:*:*:*", "matchCriteriaId": "4B63C618-AC3D-4EF7-AFDF-27B9BF482B78"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.40:*:*:*:*:*:*:*", "matchCriteriaId": "C33DA5A9-5E40-4365-9602-82FB4DCD15B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.41:*:*:*:*:*:*:*", "matchCriteriaId": "EFAFDB74-40BD-46FA-89AC-617EB2C7160B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.42:*:*:*:*:*:*:*", "matchCriteriaId": "CF5F17DA-30A7-40CF-BD7C-CEDF06D64617"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.43:*:*:*:*:*:*:*", "matchCriteriaId": "71A276F5-BD9D-4C1B-90DF-9B0C15B6F7DF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.44:*:*:*:*:*:*:*", "matchCriteriaId": "F8F6EBEC-3C29-444B-BB85-6EF239B59EC1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.45:*:*:*:*:*:*:*", "matchCriteriaId": "FDB91302-FD18-44CF-A8A8-B31483328539"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.46:*:*:*:*:*:*:*", "matchCriteriaId": "9B81DC2B-46FA-4640-AD6C-2A404D94BA0B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.47:*:*:*:*:*:*:*", "matchCriteriaId": "BA6A1663-BC4C-4FC9-B5EB-A52EDED17B26"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.48:*:*:*:*:*:*:*", "matchCriteriaId": "69C33D6C-6B9F-49F4-B505-E7B589CDEC50"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.49:*:*:*:*:*:*:*", "matchCriteriaId": "C464796B-2F31-4159-A132-82A0C74137B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.50:*:*:*:*:*:*:*", "matchCriteriaId": "1D6C6E46-FE29-4D2D-A0EC-43DA5112BCC3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.51:*:*:*:*:*:*:*", "matchCriteriaId": "1A370E91-73A1-4D62-8E7B-696B920203F8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.52:*:*:*:*:*:*:*", "matchCriteriaId": "340197CD-9645-4B7E-B976-F3F5A7D4C5BE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.53:*:*:*:*:*:*:*", "matchCriteriaId": "96030636-0C4A-4A10-B768-525D6A0E18CB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.54:*:*:*:*:*:*:*", "matchCriteriaId": "A42D8419-914F-4AD6-B0E9-C1290D514FF1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.55:*:*:*:*:*:*:*", "matchCriteriaId": "F4E2C88B-42EA-4F4F-B1F6-A9332EC6888B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.56:*:*:*:*:*:*:*", "matchCriteriaId": "2449D13B-3314-4182-832F-03F6B11AA31F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.57:*:*:*:*:*:*:*", "matchCriteriaId": "9A35B66C-F050-4462-A58E-FEE061B5582E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.58:*:*:*:*:*:*:*", "matchCriteriaId": "1B551164-0167-49BB-A3AE-4034BDA3DCB4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.59:*:*:*:*:*:*:*", "matchCriteriaId": "7244278E-49B6-4405-A14C-F3540C8F5AF8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.60:*:*:*:*:*:*:*", "matchCriteriaId": "B4C3E4B8-7274-4ABB-B7CE-6A39C183CE18"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.61:*:*:*:*:*:*:*", "matchCriteriaId": "6501EDB9-4847-47F8-90EE-B295626E4CDC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.62:*:*:*:*:*:*:*", "matchCriteriaId": "2D676D48-7521-45E2-8563-6B966FF86A35"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.63:*:*:*:*:*:*:*", "matchCriteriaId": "3B69FA17-0AB9-4986-A5A7-2A4C1DD24222"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.64:*:*:*:*:*:*:*", "matchCriteriaId": "7BC35593-96C7-41F0-B738-1568F8129121"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.65:*:*:*:*:*:*:*", "matchCriteriaId": "38D23794-0E7C-4FA5-A7A8-CF940E3FA962"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.66:*:*:*:*:*:*:*", "matchCriteriaId": "008E1E7D-4C20-4560-9288-EF532ADB0029"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.67:*:*:*:*:*:*:*", "matchCriteriaId": "3B3A7044-A92E-47A9-A7BD-35E5B575F5FD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.0.68:*:*:*:*:*:*:*", "matchCriteriaId": "783E2980-B6AB-489E-B157-B6A2E10A32CA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "3DFFE5A6-6A67-4992-84A3-C0F05FACDEAD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc1:*:*:*:*:*:*", "matchCriteriaId": "13BBD2A3-AE10-48B9-8776-4FB1CAC37D44"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc2:*:*:*:*:*:*", "matchCriteriaId": "B25680CC-8918-4F27-8D7E-A6579215450B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc3:*:*:*:*:*:*", "matchCriteriaId": "92C48B4C-410C-4BA8-A28A-B2E928320FCC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1:rc4:*:*:*:*:*:*", "matchCriteriaId": "CB447523-855B-461E-8197-95169BE86EB0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "B155BBDF-6DF6-4FF5-9C41-D8A5266DCC67"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "28476DEC-9630-4B40-9D4D-9BC151DC4CA4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "5646880A-2355-4BDD-89E7-825863A0311F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "7FF99148-267A-46F8-9927-A9082269BAF6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "A783C083-5D9C-48F9-B5A6-A97A9604FB19"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "2B817A24-03AC-46CD-BEFA-505457FD2A5D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "51CF1BCE-090E-4B70-BA16-ACB74411293B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "187AAD67-10D7-4B57-B4C6-00443E246AF3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "F341CE88-C5BC-4CDD-9CB5-B6BAD7152E63"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.1.10:*:*:*:*:*:*:*", "matchCriteriaId": "37ACE2A6-C229-4236-8E9F-235F008F3AA0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "D3220B70-917F-4F9F-8A3B-2BF581281E8D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc2:*:*:*:*:*:*", "matchCriteriaId": "99372D07-C06A-41FA-9843-6D57F99AB5AF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc3:*:*:*:*:*:*", "matchCriteriaId": "2B9DC110-D260-4DB4-B8B0-EF1D160ADA07"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc4:*:*:*:*:*:*", "matchCriteriaId": "6192FE84-4D53-40D4-AF61-78CE7136141A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc5:*:*:*:*:*:*", "matchCriteriaId": "42FEF3CF-1302-45EB-89CC-3786FE4BAC1F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc6:*:*:*:*:*:*", "matchCriteriaId": "AE6A6B58-2C89-4DE4-BA57-78100818095C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2:rc7:*:*:*:*:*:*", "matchCriteriaId": "1D467F87-2F13-4D26-9A93-E0BA526FEA24"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "FE348F7B-02DE-47D5-8011-F83DA9426021"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "E91594EA-F0A3-41B3-A9C6-F7864FC2F229"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "9E1ECCDB-0208-48F6-B44F-16CC0ECE3503"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "FBA8B5DE-372E-47E0-A0F6-BE286D509CC3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "9A1CA083-2CF8-45AE-9E15-1AA3A8352E3B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "19D69A49-5290-4C5F-8157-719AD58D253D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "290BD969-42E7-47B0-B21B-06DE4865432C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.8:*:*:*:*:*:*:*", "matchCriteriaId": "23A9E29E-DE78-4C73-9FBD-C2410F5FC8B8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.9:*:*:*:*:*:*:*", "matchCriteriaId": "018434C9-E75F-45CB-A169-DAB4B1D864D7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.10:*:*:*:*:*:*:*", "matchCriteriaId": "DC0AC68F-EC58-4C4F-8CBC-A59ECC00CCDE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.11:*:*:*:*:*:*:*", "matchCriteriaId": "C123C844-F6D7-471E-A62E-F756042FB1CD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.12:*:*:*:*:*:*:*", "matchCriteriaId": "A11C38BB-7FA2-49B0-AAC9-83DB387A06DB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "61F3733C-E5F6-4855-B471-DF3FB823613B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.14:*:*:*:*:*:*:*", "matchCriteriaId": "1DDCA75F-9A06-4457-9A45-38A38E7F7086"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.15:*:*:*:*:*:*:*", "matchCriteriaId": "7AEA837E-7864-4003-8DB7-111ED710A7E1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.16:*:*:*:*:*:*:*", "matchCriteriaId": "B6FE471F-2D1F-4A1D-A197-7E46B75787E1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.17:*:*:*:*:*:*:*", "matchCriteriaId": "FDA9E6AB-58DC-4EC5-A25C-11F9D0B38BF7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.18:*:*:*:*:*:*:*", "matchCriteriaId": "DC6B8DB3-B05B-41A2-B091-342D66AAE8F5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.19:*:*:*:*:*:*:*", "matchCriteriaId": "958F0FF8-33EF-4A71-A0BD-572C85211DBA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.20:*:*:*:*:*:*:*", "matchCriteriaId": "FBA39F48-B02F-4C48-B304-DA9CCA055244"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.21:*:*:*:*:*:*:*", "matchCriteriaId": "1FF841F3-48A7-41D7-9C45-A8170435A5EB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.22:*:*:*:*:*:*:*", "matchCriteriaId": "EF506916-A6DC-4B1E-90E5-959492AF55F4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.23:*:*:*:*:*:*:*", "matchCriteriaId": "B3CDAD1F-2C6A-48C0-8FAB-C2659373FA25"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.24:*:*:*:*:*:*:*", "matchCriteriaId": "4FFE4B22-C96A-43D0-B993-F51EDD9C5E0E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.25:*:*:*:*:*:*:*", "matchCriteriaId": "F571CC8B-B212-4553-B463-1DB01D616E8A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.26:*:*:*:*:*:*:*", "matchCriteriaId": "84E3E151-D437-48ED-A529-731EEFF88567"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.27:*:*:*:*:*:*:*", "matchCriteriaId": "E9E3EA3C-CCA5-4433-86E0-3D02C4757A0A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.28:*:*:*:*:*:*:*", "matchCriteriaId": "F7AC4F7D-9FA6-4CF1-B2E9-70BF7D4D177C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.29:*:*:*:*:*:*:*", "matchCriteriaId": "3CE3A80D-9648-43CC-8F99-D741ED6552BF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.2.30:*:*:*:*:*:*:*", "matchCriteriaId": "C8A98C03-A465-41B4-A551-A26FEC7FFD94"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "AFB76697-1C2F-48C0-9B14-517EC053D4B3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc1:*:*:*:*:*:*", "matchCriteriaId": "BED88DFD-1DC5-4505-A441-44ECDEF0252D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc2:*:*:*:*:*:*", "matchCriteriaId": "DBFD2ACD-728A-4082-BB6A-A1EF6E58E47D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc3:*:*:*:*:*:*", "matchCriteriaId": "C31B0E51-F62D-4053-B04F-FC4D5BC373D2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc4:*:*:*:*:*:*", "matchCriteriaId": "A914303E-1CB6-4AAD-9F5F-DE5433C4E814"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc5:*:*:*:*:*:*", "matchCriteriaId": "203BBA69-90B2-4C5E-8023-C14180742421"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc6:*:*:*:*:*:*", "matchCriteriaId": "0DBFAB53-B889-4028-AC0E-7E165B152A18"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3:rc7:*:*:*:*:*:*", "matchCriteriaId": "FE409AEC-F677-4DEF-8EB7-2C35809043CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "578EC12B-402F-4AD4-B8F8-C9B2CAB06891"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "877002ED-8097-4BB4-BB88-6FC6306C38B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "76294CE3-D72C-41D5-9E0F-B693D0042699"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "916E97D4-1FAB-42F5-826B-653B1C0909A8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.5:*:*:*:*:*:*:*", "matchCriteriaId": "33FD2217-C5D0-48C1-AD74-3527127FEF9C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.6:*:*:*:*:*:*:*", "matchCriteriaId": "2E92971F-B629-4E0A-9A50-8B235F9704B8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.7:*:*:*:*:*:*:*", "matchCriteriaId": "EDD3A069-3829-4EE2-9D5A-29459F29D4C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.3.8:*:*:*:*:*:*:*", "matchCriteriaId": "A4A0964C-CEB2-41D7-A69C-1599B05B6171"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "0F960FA6-F904-4A4E-B483-44C70090E9A1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc1:*:*:*:*:*:*", "matchCriteriaId": "261C1B41-C9E0-414F-8368-51C0C0B8AD38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc2:*:*:*:*:*:*", "matchCriteriaId": "5CCA261D-2B97-492F-89A0-5F209A804350"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc3:*:*:*:*:*:*", "matchCriteriaId": "1B1C0C68-9194-473F-BE5E-EC7F184899FA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc4:*:*:*:*:*:*", "matchCriteriaId": "D7A6AC9E-BEA6-44B0-B3B3-F0F94E32424A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc5:*:*:*:*:*:*", "matchCriteriaId": "16038328-9399-4B85-B777-BA4757D02C9B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc6:*:*:*:*:*:*", "matchCriteriaId": "16CA2757-FA8D-43D9-96E8-D3C0EB6E1DEF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4:rc7:*:*:*:*:*:*", "matchCriteriaId": "E8CB5481-5EAE-401E-BD7E-D3095CCA9E94"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "A0F36FAC-141D-476D-84C5-A558C199F904"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "51D64824-25F6-4761-BD6A-29038A143744"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "E284C8A1-740F-454D-A774-99CD3A21B594"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "C70D72AE-0CBF-4324-9935-57E28EC6279C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "F674B06B-7E86-4E41-9126-8152D0DDABAE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "7039B3EC-8B22-413E-B582-B4BEC6181241"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "35CF1DD2-80B9-4476-8963-5C3EF52B33F4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "BFB0B05B-A5CE-4B9C-AE7F-83062868D35B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "D166A66E-7454-47EC-BB56-861A9AFEAFE1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "7DA94F50-2A62-4300-BF4D-A342AAE35629"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "252D937B-50DC-444F-AE73-5FCF6203DF27"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "F6D8EE51-02C1-47BC-A92C-0A8ABEFD28FF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "7F20A5D7-3B38-4911-861A-04C8310D5916"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.14:*:*:*:*:*:*:*", "matchCriteriaId": "D472DE3A-71D8-4F40-9DDE-85929A2B047D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "B2AED943-65A8-4FDB-BBD0-CCEF8682A48C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.16:*:*:*:*:*:*:*", "matchCriteriaId": "D4640185-F3D8-4575-A71D-4C889A93DE2C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.17:*:*:*:*:*:*:*", "matchCriteriaId": "144CCF7C-025E-4879-B2E7-ABB8E4390BE5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.18:*:*:*:*:*:*:*", "matchCriteriaId": "B6FAA052-0B2B-40CE-8C98-919B8D08A5ED"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.19:*:*:*:*:*:*:*", "matchCriteriaId": "4B5A53DE-9C83-4A6B-96F3-23C03BF445D9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.20:*:*:*:*:*:*:*", "matchCriteriaId": "063EB879-CB05-4E33-AA90-9E43516839B5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.21:*:*:*:*:*:*:*", "matchCriteriaId": "2D25764F-4B02-4C65-954E-8C7D6632DE00"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.22:*:*:*:*:*:*:*", "matchCriteriaId": "F31F5BF3-CD0A-465C-857F-273841BCD28A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.23:*:*:*:*:*:*:*", "matchCriteriaId": "FF302C8A-079B-42B9-B455-CD9083BFA067"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.24:*:*:*:*:*:*:*", "matchCriteriaId": "744999C0-33D3-4363-B3DB-E0D02CDD3918"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.25:*:*:*:*:*:*:*", "matchCriteriaId": "C2E77A76-2A60-45D8-9337-867BC22C5110"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.26:*:*:*:*:*:*:*", "matchCriteriaId": "C9F4AAE7-C870-46B7-B559-2949737BE777"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.27:*:*:*:*:*:*:*", "matchCriteriaId": "20FA2824-20B0-48B8-BB0A-4904C1D3E8AA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.28:*:*:*:*:*:*:*", "matchCriteriaId": "9F9B347E-61AC-419F-9701-B862BBFA46F2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.29:*:*:*:*:*:*:*", "matchCriteriaId": "989F351C-8B7C-4C1B-AFA2-AE9431576368"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.30:*:*:*:*:*:*:*", "matchCriteriaId": "8D22172A-9FA7-42E0-8451-165D8E47A573"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.31:*:*:*:*:*:*:*", "matchCriteriaId": "CE31624C-94F9-45D8-9B4A-D0028F10602F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.4.32:*:*:*:*:*:*:*", "matchCriteriaId": "70967A83-28F6-4568-9ADA-6EF232E5BBC2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "962B0C45-AB29-4383-AC16-C6E8245D0FF7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A0EE126B-74B2-4F79-BFE1-3DC169F3F9B2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "392075E0-A9C7-4B4A-90F9-7F1ADFF5EFA7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "ECC66968-06F0-4874-A95A-A292C36E45C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.5:*:*:*:*:*:*:*", "matchCriteriaId": "5FE986E6-1068-4E1B-8EAB-DF1EAF32B4E3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.6:*:*:*:*:*:*:*", "matchCriteriaId": "543E8536-1A8E-4E76-B89F-1B1F9F26FAB8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "EC2B45E3-31E1-4B46-85FA-3A84E75B8F84"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6:*:*:*:*:*:*:*", "matchCriteriaId": "DDB8CC75-D3EE-417C-A83D-CB6D666FE595"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "09A072F1-7BEE-4236-ACBB-55DB8FEF4A03"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E19D5A58-17D6-4502-A57A-70B2F84817A4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "D58BA035-1204-4DFA-98A1-12111FB6222E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "A17F2E87-8EB8-476A-B5B5-9AE5CF53D9FE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "A8CCC101-5852-4299-9B67-EA1B149D58C0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.6:*:*:*:*:*:*:*", "matchCriteriaId": "B8074D32-C252-4AD3-A579-1C5EDDD7014B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.7:*:*:*:*:*:*:*", "matchCriteriaId": "962AA802-8179-4606-AAC0-9363BAEABC9F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.8:*:*:*:*:*:*:*", "matchCriteriaId": "1286C858-D5A2-45F3-86D1-E50FE53FB23C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.9:*:*:*:*:*:*:*", "matchCriteriaId": "5AC4A13E-F560-4D01-98A3-E2A2B82EB25B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.10:*:*:*:*:*:*:*", "matchCriteriaId": "942C462A-5398-4BB9-A792-598682E1FEF2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.6.11:*:*:*:*:*:*:*", "matchCriteriaId": "B852F7E0-0282-483D-BB4D-18CB7A4F1392"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7:*:*:*:*:*:*:*", "matchCriteriaId": "53ED9A31-99CC-41C8-8B72-5B2A9B49AA6C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "EFD646BC-62F7-47CF-B0BE-768F701F7D9A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "F43D418E-87C1-4C83-9FF1-4F45B4F452DD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "680D0E00-F29A-487C-8770-8E7EAC672B7C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.4:*:*:*:*:*:*:*", "matchCriteriaId": "2DCA96A4-A836-4E94-A39C-3AD3EA1D9611"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "753C05E3-B603-4E36-B9BA-FAEDCBF62A7D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "E385C2E0-B9F1-4564-8E6D-56FD9E762405"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.7:*:*:*:*:*:*:*", "matchCriteriaId": "041335D4-05E1-4004-9381-28AAD5994B47"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.8:*:*:*:*:*:*:*", "matchCriteriaId": "370F2AE5-3DBC-46B9-AC70-F052C9229C00"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.9:*:*:*:*:*:*:*", "matchCriteriaId": "7A971BE3-259D-4494-BBC5-12793D92DB57"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.7.10:*:*:*:*:*:*:*", "matchCriteriaId": "8E4719A6-FDEA-4714-A830-E23A52AE90BC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "1A6E41FB-38CE-49F2-B796-9A5AA648E73F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.1:*:*:*:*:*:*:*", "matchCriteriaId": "93523FE1-5993-46CB-9299-7C8C1A04E873"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.2:*:*:*:*:*:*:*", "matchCriteriaId": "27ADC356-6BE9-43A3-9E0B-393DC4B1559A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.3:*:*:*:*:*:*:*", "matchCriteriaId": "4F543D23-1774-4D14-A7D1-AD49EDEA94DD"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.4:*:*:*:*:*:*:*", "matchCriteriaId": "FC323F58-CA00-4C3C-BA4D-CC2C0A6E5F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.5:*:*:*:*:*:*:*", "matchCriteriaId": "FEA0B2E3-668D-40ED-9D3D-709EB6449F8D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.6:*:*:*:*:*:*:*", "matchCriteriaId": "3431B258-4EC8-4E7F-87BB-4D934880601E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.7:*:*:*:*:*:*:*", "matchCriteriaId": "1B09FA1E-8B28-4F2A-BA7E-8E1C40365970"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.8:*:*:*:*:*:*:*", "matchCriteriaId": "91917120-9D68-41C0-8B5D-85C256BC6200"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.9:*:*:*:*:*:*:*", "matchCriteriaId": "AAD268A0-096C-4C31-BEC5-D47F5149D462"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.10:*:*:*:*:*:*:*", "matchCriteriaId": "32BD2427-C47F-4660-A1D9-448E500EF5B9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.11:*:*:*:*:*:*:*", "matchCriteriaId": "02048CE5-81C7-4DFB-BC40-CE4C86B7E022"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.12:*:*:*:*:*:*:*", "matchCriteriaId": "934D2B37-0575-4A75-B00B-0028316D6DF0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.8.13:*:*:*:*:*:*:*", "matchCriteriaId": "06754C21-995C-4850-A4DC-F21826C0F8C5"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc1:*:*:*:*:*:*", "matchCriteriaId": "42633FF9-FB0C-4095-B4A1-8D623A98683B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc2:*:*:*:*:*:*", "matchCriteriaId": "08C04619-89A2-4B15-82A2-48BCC662C1F1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc3:*:*:*:*:*:*", "matchCriteriaId": "5B039196-7159-476C-876A-C61242CC41DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc4:*:*:*:*:*:*", "matchCriteriaId": "3A9E0457-53C9-44DD-ACFB-31EE1D1E060E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc5:*:*:*:*:*:*", "matchCriteriaId": "BEE406E7-87BA-44BA-BF61-673E6CC44A2F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc6:*:*:*:*:*:*", "matchCriteriaId": "29FBA173-658F-45DC-8205-934CACD67166"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9:rc7:*:*:*:*:*:*", "matchCriteriaId": "139700F0-BA32-40CF-B9DF-C9C450384FDE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "E578085C-3968-4543-BEBA-EE3C3CB4FA02"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DCFA441-68FB-4559-A245-FF0B79DE43CA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.2:*:*:*:*:*:*:*", "matchCriteriaId": "8C2508D8-6571-4B81-A0D7-E494CCD039CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.3:*:*:*:*:*:*:*", "matchCriteriaId": "8B516926-5E86-4C0A-85F3-F64E1FCDA249"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.4:*:*:*:*:*:*:*", "matchCriteriaId": "069D774D-79BE-479F-BF4E-F021AD808114"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.5:*:*:*:*:*:*:*", "matchCriteriaId": "D15B27A9-46E0-4DDF-A00C-29F8F1F18D73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.6:*:*:*:*:*:*:*", "matchCriteriaId": "A381BB4A-28B4-4672-87EE-91B3DDD6C71A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.7:*:*:*:*:*:*:*", "matchCriteriaId": "922F80CF-937D-4FA2-AFF2-6E47FFE9E1E9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.8:*:*:*:*:*:*:*", "matchCriteriaId": "A548ADF4-9E3B-407C-A5ED-05150EB3A185"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.9:*:*:*:*:*:*:*", "matchCriteriaId": "9C623230-4497-41B9-9BD2-7A6CFDD77983"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.10:*:*:*:*:*:*:*", "matchCriteriaId": "C72FA8A6-60A6-4486-A245-7BEF8B2A2711"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.9.11:*:*:*:*:*:*:*", "matchCriteriaId": "0A498D90-BB99-405E-9FA6-1FBFE179787E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10:*:*:*:*:*:*:*", "matchCriteriaId": "1C37F47C-C217-4BCF-A758-14E1BDBAD63D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "D0D32776-8ADB-4E79-846A-C0C99FED19E0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "B7D01673-D13F-487F-81B6-1279C187277E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "ADB27A3E-78E4-40F7-9716-A1099B0D85FB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "16E7136A-A8A6-4BF5-AF5D-AFB5C7A10712"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "6FE127AC-E61D-427A-B998-D60DF5AABA21"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "3819FF99-AEC5-4466-8542-D395419E4308"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "E621FA1A-464B-4D2A-A0D6-EDA475A3709B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "B760B422-EA11-43AB-B6D2-CA54E7229663"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "D2CA7BBC-917C-4F31-A442-465C30444836"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "AE778000-4FD5-4032-86CE-5930EF4CB7C1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "B3344EEB-F037-48FE-81DC-67F6384F7D9A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "0244B0CA-9C67-4F06-BFBA-1F257112AC08"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.13:*:*:*:*:*:*:*", "matchCriteriaId": "2148C13F-4BB0-4D46-A688-F7C726D12497"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.14:*:*:*:*:*:*:*", "matchCriteriaId": "9871AF57-9158-4A41-8340-596B4463289A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.15:*:*:*:*:*:*:*", "matchCriteriaId": "2A875207-DF01-4240-8895-49B62693D27B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.16:*:*:*:*:*:*:*", "matchCriteriaId": "FE04A172-6F3B-4E3B-8D4D-564740FABAAF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.17:*:*:*:*:*:*:*", "matchCriteriaId": "CFEEF8C4-7DC2-4230-B58C-337F39A4DFAF"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.18:*:*:*:*:*:*:*", "matchCriteriaId": "9F74DB5C-5096-438C-8C8A-6D337A2FD06A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.19:*:*:*:*:*:*:*", "matchCriteriaId": "9DFF4564-6550-4839-B12A-EA379DDFE4F1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.20:*:*:*:*:*:*:*", "matchCriteriaId": "10184594-C707-4A2F-AE28-430EC3102AA4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.21:*:*:*:*:*:*:*", "matchCriteriaId": "9AD06026-B85F-412A-A44B-DAEF8D538327"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.22:*:*:*:*:*:*:*", "matchCriteriaId": "DCA2929F-EDF9-433B-9CD7-3EE9D2C5EDD4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.23:*:*:*:*:*:*:*", "matchCriteriaId": "80527FA6-39CD-4A85-BD3A-214AC617B995"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.24:*:*:*:*:*:*:*", "matchCriteriaId": "4DCA90D7-AF62-4576-9139-107842834066"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.25:*:*:*:*:*:*:*", "matchCriteriaId": "9B61F12C-8F6E-4BDD-8793-76E3BCAB73CE"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.26:*:*:*:*:*:*:*", "matchCriteriaId": "A569A978-0CF1-46BC-A174-7F7F2ADCE8A7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.27:*:*:*:*:*:*:*", "matchCriteriaId": "E2D473E1-3F56-4415-9ACB-4F4CA9707E78"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.28:*:*:*:*:*:*:*", "matchCriteriaId": "FF938D94-226A-4375-8DEF-B4019AE5AFC8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.10.29:*:*:*:*:*:*:*", "matchCriteriaId": "5EF4FFA5-BF94-4C87-ADB7-984111D98833"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11:*:*:*:*:*:*:*", "matchCriteriaId": "639E3A57-A9E7-40E6-8929-81CCC0060EFB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.1:*:*:*:*:*:*:*", "matchCriteriaId": "07012ADD-F521-40A8-B067-E87C2238A3D2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.2:*:*:*:*:*:*:*", "matchCriteriaId": "3F5FF393-3F89-4274-B82B-F671358072ED"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.3:*:*:*:*:*:*:*", "matchCriteriaId": "E348698F-54D1-4F5E-B701-CFAF50881E0A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.4:*:*:*:*:*:*:*", "matchCriteriaId": "932205D9-3514-4289-9B55-C7A169276930"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.5:*:*:*:*:*:*:*", "matchCriteriaId": "2ECB2D33-F517-480F-8A6F-99D9D6C49596"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.6:*:*:*:*:*:*:*", "matchCriteriaId": "D16F68DD-E2D4-4AA4-AB81-3796C2947E37"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.7:*:*:*:*:*:*:*", "matchCriteriaId": "2422AC23-8410-4524-A733-25E4ABC7515D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.8:*:*:*:*:*:*:*", "matchCriteriaId": "E1BEBC08-884B-4F58-B3C6-B26F1D5BE474"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.9:*:*:*:*:*:*:*", "matchCriteriaId": "B26B7E40-0EEB-44DF-BE2E-917947D41217"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.11.10:*:*:*:*:*:*:*", "matchCriteriaId": "EF5C073C-D0BF-4691-94C4-6E4582032F1E"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12:*:*:*:*:*:*:*", "matchCriteriaId": "B291154A-4B91-4A0E-AAAE-716A8BB7BF99"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.1:*:*:*:*:*:*:*", "matchCriteriaId": "D835FBA1-49DE-4184-BEC8-7ED2B3F7B0BB"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.2:*:*:*:*:*:*:*", "matchCriteriaId": "080BD3C9-0606-4D9A-B7AE-3DF9F75B8FF6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.3:*:*:*:*:*:*:*", "matchCriteriaId": "CCDF0F11-3DB4-41F6-B6D3-383857884258"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.4:*:*:*:*:*:*:*", "matchCriteriaId": "2FB1772A-F4AA-4AB8-9FC9-10993A6A5B46"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.5:*:*:*:*:*:*:*", "matchCriteriaId": "4DB5B4D7-C79C-448E-B0D4-A6A9C440F49C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.6:*:*:*:*:*:*:*", "matchCriteriaId": "7C9A32A2-C1EC-4463-B21F-79E6592C5339"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.7:*:*:*:*:*:*:*", "matchCriteriaId": "DD8683B9-63EF-43D0-8E4F-2909429B47E6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.8:*:*:*:*:*:*:*", "matchCriteriaId": "91F6A187-E8B1-47CF-B375-FB453F8000F2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.9:*:*:*:*:*:*:*", "matchCriteriaId": "97A4332E-E1D4-4B6E-B9FE-B33CCF083402"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.12.10:*:*:*:*:*:*:*", "matchCriteriaId": "1949D7D6-7DD2-458B-89D3-B0090C8E9984"}, {"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:3.13:*:*:*:*:*:*:*", "matchCriteriaId": "50513044-C297-4D5E-BD45-6FD603A29F25"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=2def2ef2ae5f3990aabdbe8a755911902707d268", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2014-02/msg00002.html", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2014-02/msg00003.html", "source": "secalert@redhat.com"}, {"url": "http://pastebin.com/raw.php?i=DH3Lbg54", "source": "secalert@redhat.com", "tags": ["Exploit"]}, {"url": "http://secunia.com/advisories/56669", "source": "secalert@redhat.com"}, {"url": "http://www.exploit-db.com/exploits/31346", "source": "secalert@redhat.com"}, {"url": "http://www.exploit-db.com/exploits/31347", "source": "secalert@redhat.com"}, {"url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.13.2", "source": "secalert@redhat.com"}, {"url": "http://www.mandriva.com/security/advisories?name=MDVSA-2014:038", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2014/01/31/2", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/65255", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2094-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2095-1", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-2096-1", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1060023", "source": "secalert@redhat.com"}, {"url": "https://code.google.com/p/chromium/issues/detail?id=338594", "source": "secalert@redhat.com"}, {"url": "https://github.com/saelo/cve-2014-0038", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/2def2ef2ae5f3990aabdbe8a755911902707d268", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://www.exploit-db.com/exploits/40503/", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/2def2ef2ae5f3990aabdbe8a755911902707d268"}}