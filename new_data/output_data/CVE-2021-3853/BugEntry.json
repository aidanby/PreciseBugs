{"buggy_code": ["export default function extractContent(html) {\n  return new DOMParser().parseFromString(html, 'text/html').documentElement\n    .textContent;\n}\n", "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport { readableColor } from 'polished';\nimport sanitizeHtml from '@chaskiq/components/src/utils/htmlSanitize';\nimport { LabelIcon } from '@chaskiq/components/src/components/icons';\nimport Avatar from '@chaskiq/components/src/components/Avatar';\n\nexport function textColor(color) {\n  const lightReturnColor = '#121212';\n  const darkReturnColor = '#f3f3f3';\n  return readableColor(color, lightReturnColor, darkReturnColor);\n}\n\nexport default function ConversationItemList({ app, conversation }) {\n  const renderConversationContent = (o) => {\n    const message = o.lastMessage.message;\n    if (message.htmlContent) {\n      return sanitizeHtml(message.htmlContent).substring(0, 250);\n    }\n  };\n\n  const user = conversation.mainParticipant;\n  const message = conversation.lastMessage;\n  const participant = conversation.mainParticipant;\n  const appUser = message.appUser;\n  const tags = conversation.tagList;\n\n  function tagColor(tag) {\n    const defaultColor = {\n      bgColor: '#fed7d7',\n      color: textColor('#fed7d7'),\n    };\n\n    if (!app.tagList) return defaultColor;\n\n    const findedTag = app.tagList.find((o) => o.name === tag);\n\n    if (!findedTag) return defaultColor;\n\n    let newColor = findedTag.color || '#444';\n    newColor = `#${newColor.replace('#', '')}`;\n\n    return {\n      bgColor: newColor,\n      color: textColor(newColor),\n    };\n  }\n\n  function renderTag(tag) {\n    const color = tagColor(tag);\n    return (\n      <span\n        key={`conversation-${conversation.key}-tag-${tag}`}\n        style={{\n          backgroundColor: color.bgColor,\n          color: color.color,\n        }}\n        className=\"mr-0.5 inline-flex items-center px-2.5 py-0.5\n        rounded-full text-xs font-light\n        bg-gray-100 text-blue-800\n        capitalize\"\n      >\n        #{tag}\n      </span>\n    );\n  }\n\n  function stateClass() {\n    return conversation.state == 'opened'\n      ? 'bg-red-200 dark:bg-red-600'\n      : 'bg-green-600';\n  }\n\n  return (\n    <Link\n      to={`/apps/${app.key}/conversations/${conversation.key}`}\n      className=\"flex justify-between hover:bg-gray-50 dark:hover:bg-gray-900 focus:outline-none focus:bg-gray-50 dark:focus:bg-gray-800 transition duration-150 ease-in-out\"\n      data-cy={`conversation-item`}\n    >\n      <div className={`block w-2 ${stateClass()}`}></div>\n      <div className=\"w-full px-4 py-4 whitespace-nowrap border-b border-gray-200 dark:border-gray-800 dark:hover:bg-gray-800\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0 h-10 w-10\">\n            <Avatar src={user.avatarUrl} alt={user.displayName} size=\"full\" />\n          </div>\n\n          <div className=\"ml-4 truncate w-full\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-md leading-5 font-semibold text-gray-800 dark:text-gray-100 truncate mr-2\">\n                {user.displayName}\n              </span>\n\n              <span className=\"text-xs leading-5 font-light text-gray-300 dark:text-gray-300\">\n                <Moment fromNow ago>\n                  {message.createdAt}\n                </Moment>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex flex-col mt-5 space-y-2\">\n          <div className=\"space-x-2 text-sm leading-5 text-gray-500 dark:text-gray-100 flex pb-2 pt-1\">\n            {appUser && appUser.id !== participant.id && (\n              <img\n                alt={appUser.displayName}\n                className=\"rounded-full h-5 w-5 self-start\"\n                src={appUser.avatarUrl}\n              />\n            )}\n\n            {message.privateNote && (\n              <span>\n                <LabelIcon />\n              </span>\n            )}\n\n            <span\n              className=\"truncate\"\n              dangerouslySetInnerHTML={{\n                __html: renderConversationContent(conversation),\n              }}\n            />\n          </div>\n\n          <div className=\"flex justify-between\">\n            <div className=\"flex\">\n              {conversation.conversationChannels &&\n                conversation.conversationChannels.map((o) => (\n                  <div\n                    key={`${conversation.key}-${o}`}\n                    className=\"mr-0.5 border inline-flex items-center px-2.5 py-0.5 \n                    rounded-full text-xs font-medium bg-gray-100 \n                    text-blue-800 capitalize dark:bg-gray-900 dark:text-gray-100\"\n                  >\n                    {o}\n                  </div>\n                ))}\n            </div>\n\n            {tags && tags.length > 0 && (\n              <div className=\"flex overflow-auto ml-4 mr-1\">\n                {tags.map((o) => renderTag(o))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n"], "fixing_code": ["export default function extractContent(html) {\n  return new DOMParser().parseFromString(html, 'text/html').documentElement\n    .textContent;\n}\n\nexport function escapeHTML(unsafe) {\n  return unsafe.replace(\n    /[\\u0000-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u00FF]/g,\n    (c) => '&#' + ('000' + c.charCodeAt(0)).substr(-4, 4) + ';'\n  );\n}\n", "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport { readableColor } from 'polished';\nimport sanitizeHtml, {\n  escapeHTML,\n} from '@chaskiq/components/src/utils/htmlSanitize';\nimport { LabelIcon } from '@chaskiq/components/src/components/icons';\nimport Avatar from '@chaskiq/components/src/components/Avatar';\n\nexport function textColor(color) {\n  const lightReturnColor = '#121212';\n  const darkReturnColor = '#f3f3f3';\n  return readableColor(color, lightReturnColor, darkReturnColor);\n}\n\nexport default function ConversationItemList({ app, conversation }) {\n  const renderConversationContent = (o) => {\n    const message = o.lastMessage.message;\n    if (message.htmlContent) {\n      return sanitizeHtml(escapeHTML(message.htmlContent)).substring(0, 250);\n    }\n  };\n\n  const user = conversation.mainParticipant;\n  const message = conversation.lastMessage;\n  const participant = conversation.mainParticipant;\n  const appUser = message.appUser;\n  const tags = conversation.tagList;\n\n  function tagColor(tag) {\n    const defaultColor = {\n      bgColor: '#fed7d7',\n      color: textColor('#fed7d7'),\n    };\n\n    if (!app.tagList) return defaultColor;\n\n    const findedTag = app.tagList.find((o) => o.name === tag);\n\n    if (!findedTag) return defaultColor;\n\n    let newColor = findedTag.color || '#444';\n    newColor = `#${newColor.replace('#', '')}`;\n\n    return {\n      bgColor: newColor,\n      color: textColor(newColor),\n    };\n  }\n\n  function renderTag(tag) {\n    const color = tagColor(tag);\n    return (\n      <span\n        key={`conversation-${conversation.key}-tag-${tag}`}\n        style={{\n          backgroundColor: color.bgColor,\n          color: color.color,\n        }}\n        className=\"mr-0.5 inline-flex items-center px-2.5 py-0.5\n        rounded-full text-xs font-light\n        bg-gray-100 text-blue-800\n        capitalize\"\n      >\n        #{tag}\n      </span>\n    );\n  }\n\n  function stateClass() {\n    return conversation.state == 'opened'\n      ? 'bg-red-200 dark:bg-red-600'\n      : 'bg-green-600';\n  }\n\n  return (\n    <Link\n      to={`/apps/${app.key}/conversations/${conversation.key}`}\n      className=\"flex justify-between hover:bg-gray-50 dark:hover:bg-gray-900 focus:outline-none focus:bg-gray-50 dark:focus:bg-gray-800 transition duration-150 ease-in-out\"\n      data-cy={`conversation-item`}\n    >\n      <div className={`block w-2 ${stateClass()}`}></div>\n      <div className=\"w-full px-4 py-4 whitespace-nowrap border-b border-gray-200 dark:border-gray-800 dark:hover:bg-gray-800\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0 h-10 w-10\">\n            <Avatar src={user.avatarUrl} alt={user.displayName} size=\"full\" />\n          </div>\n\n          <div className=\"ml-4 truncate w-full\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-md leading-5 font-semibold text-gray-800 dark:text-gray-100 truncate mr-2\">\n                {user.displayName}\n              </span>\n\n              <span className=\"text-xs leading-5 font-light text-gray-300 dark:text-gray-300\">\n                <Moment fromNow ago>\n                  {message.createdAt}\n                </Moment>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex flex-col mt-5 space-y-2\">\n          <div className=\"space-x-2 text-sm leading-5 text-gray-500 dark:text-gray-100 flex pb-2 pt-1\">\n            {appUser && appUser.id !== participant.id && (\n              <img\n                alt={appUser.displayName}\n                className=\"rounded-full h-5 w-5 self-start\"\n                src={appUser.avatarUrl}\n              />\n            )}\n\n            {message.privateNote && (\n              <span>\n                <LabelIcon />\n              </span>\n            )}\n\n            <span\n              className=\"truncate\"\n              dangerouslySetInnerHTML={{\n                __html: renderConversationContent(conversation),\n              }}\n            />\n          </div>\n\n          <div className=\"flex justify-between\">\n            <div className=\"flex\">\n              {conversation.conversationChannels &&\n                conversation.conversationChannels.map((o) => (\n                  <div\n                    key={`${conversation.key}-${o}`}\n                    className=\"mr-0.5 border inline-flex items-center px-2.5 py-0.5 \n                    rounded-full text-xs font-medium bg-gray-100 \n                    text-blue-800 capitalize dark:bg-gray-900 dark:text-gray-100\"\n                  >\n                    {o}\n                  </div>\n                ))}\n            </div>\n\n            {tags && tags.length > 0 && (\n              <div className=\"flex overflow-auto ml-4 mr-1\">\n                {tags.map((o) => renderTag(o))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n"], "filenames": ["app/javascript/packages/components/src/utils/htmlSanitize.ts", "app/javascript/src/pages/conversations/ItemList.tsx"], "buggy_code_start_loc": [4, 5], "buggy_code_end_loc": [4, 20], "fixing_code_start_loc": [5, 5], "fixing_code_end_loc": [12, 22], "type": "CWE-79", "message": "chaskiq is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3853", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-17T12:15:09.127", "lastModified": "2022-01-24T20:22:45.490", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "chaskiq is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "chaskiq es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada Durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chaskiq:chaskiq:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.8", "matchCriteriaId": "491213F6-0AC1-4A97-8A37-A16544C452B3"}]}]}], "references": [{"url": "https://github.com/chaskiq/chaskiq/commit/51768b21632dac89fd0dedb2b3b6d91bac732345", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/2b6a7647-8f2b-4510-b40f-c52aedc2820d", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/chaskiq/chaskiq/commit/51768b21632dac89fd0dedb2b3b6d91bac732345"}}