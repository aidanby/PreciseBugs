{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Calendar App\n *\n * @copyright 2021 Anna Larch <anna.larch@gmx.net>\n *\n * @author Anna Larch <anna.larch@gmx.net>\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\Calendar\\Controller;\n\nuse DateTimeImmutable;\nuse DateTimeZone;\nuse InvalidArgumentException;\nuse OC\\URLGenerator;\nuse OCA\\Calendar\\AppInfo\\Application;\nuse OCA\\Calendar\\Exception\\ClientException;\nuse OCA\\Calendar\\Exception\\NoSlotFoundException;\nuse OCA\\Calendar\\Exception\\ServiceException;\nuse OCA\\Calendar\\Http\\JsonResponse;\nuse OCA\\Calendar\\Service\\Appointments\\AppointmentConfigService;\nuse OCA\\Calendar\\Service\\Appointments\\BookingService;\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\TemplateResponse;\nuse OCP\\AppFramework\\Services\\IInitialState;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\DB\\Exception;\nuse OCP\\IRequest;\nuse Psr\\Log\\LoggerInterface;\n\nclass BookingController extends Controller {\n\n\t/** @var BookingService */\n\tprivate $bookingService;\n\n\t/** @var ITimeFactory */\n\tprivate $timeFactory;\n\n\t/** @var AppointmentConfigService */\n\tprivate $appointmentConfigService;\n\n\t/** @var IInitialState */\n\tprivate $initialState;\n\n\t/** @var URLGenerator */\n\tprivate $urlGenerator;\n\n\t/** @var LoggerInterface */\n\tprivate $logger;\n\n\tpublic function __construct(string                   $appName,\n\t\t\t\t\t\t\t\tIRequest                 $request,\n\t\t\t\t\t\t\t\tITimeFactory             $timeFactory,\n\t\t\t\t\t\t\t\tIInitialState            $initialState,\n\t\t\t\t\t\t\t\tBookingService           $bookingService,\n\t\t\t\t\t\t\t\tAppointmentConfigService $appointmentConfigService,\n\t\t\t\t\t\t\t\tURLGenerator             $urlGenerator,\n\t\t\t\t\t\t\t\tLoggerInterface $logger) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->bookingService = $bookingService;\n\t\t$this->timeFactory = $timeFactory;\n\t\t$this->appointmentConfigService = $appointmentConfigService;\n\t\t$this->initialState = $initialState;\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->logger = $logger;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @PublicPage\n\t *\n\t * @param int $appointmentConfigId\n\t * @param int $startTime UNIX time stamp for the start time in UTC\n\t * @param string $timeZone\n\t *\n\t * @return JsonResponse\n\t */\n\tpublic function getBookableSlots(int $appointmentConfigId,\n\t\t\t\t\t\t\t\t\t int $startTime,\n\t\t\t\t\t\t\t\t\t string $timeZone): JsonResponse {\n\t\t// Convert the timestamps to the beginning and end of the respective day in the specified timezone\n\t\ttry {\n\t\t\t$tz = new DateTimeZone($timeZone);\n\t\t} catch (Exception $e) {\n\t\t\t$this->logger->error('Timezone invalid', ['exception' => $e]);\n\t\t\treturn JsonResponse::fail('Invalid time zone', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t$startTimeInTz = (new DateTimeImmutable())\n\t\t\t->setTimestamp($startTime)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(0, 0)\n\t\t\t->getTimestamp();\n\t\t$endTimeInTz = (new DateTimeImmutable())\n\t\t\t->setTimestamp($startTime)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(23, 59, 59)\n\t\t\t->getTimestamp();\n\n\t\tif ($startTimeInTz > $endTimeInTz) {\n\t\t\t$this->logger->warning('Invalid time range - end time ' . $endTimeInTz . ' before start time ' . $startTimeInTz);\n\t\t\treturn JsonResponse::fail('Invalid time range', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t// rate limit this to only allow ranges between 0 and 7 days\n\t\tif (ceil(($endTimeInTz - $startTimeInTz) / 86400) > 7) {\n\t\t\t$this->logger->warning('Date range too large for start ' . $startTimeInTz . ' end ' . $endTimeInTz);\n\t\t\treturn JsonResponse::fail('Date Range too large.', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t$now = $this->timeFactory->getTime();\n\t\tif ($now > $endTimeInTz) {\n\t\t\t$this->logger->warning('Slot time must be in the future - now ' . $now . ' end ' . $endTimeInTz);\n\t\t\treturn JsonResponse::fail('Slot time range must be in the future', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($appointmentConfigId);\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error('No appointment config found for id ' . $appointmentConfigId, ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t}\n\n\t\treturn JsonResponse::success(\n\t\t\t$this->bookingService->getAvailableSlots($config, $startTimeInTz, $endTimeInTz)\n\t\t);\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @PublicPage\n\t *\n\t * @param int $appointmentConfigId\n\t * @param int $start\n\t * @param int $end\n\t * @param string $displayName\n\t * @param string $email\n\t * @param string $description\n\t * @param string $timeZone\n\t * @return JsonResponse\n\t */\n\tpublic function bookSlot(int    $appointmentConfigId,\n\t\t\t\t\t\t\t int    $start,\n\t\t\t\t\t\t\t int    $end,\n\t\t\t\t\t\t\t string $displayName,\n\t\t\t\t\t\t\t string $email,\n\t\t\t\t\t\t\t string $description,\n\t\t\t\t\t\t\t string $timeZone): JsonResponse {\n\t\tif ($start > $end) {\n\t\t\treturn JsonResponse::fail('Invalid time range', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($appointmentConfigId);\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error('No appointment config found for id ' . $appointmentConfigId, ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t}\n\t\ttry {\n\t\t\t$booking = $this->bookingService->book($config, $start, $end, $timeZone, $displayName, $email, $description);\n\t\t} catch (NoSlotFoundException $e) {\n\t\t\t$this->logger->warning('No slot available for start: ' . $start . ', end: ' . $end . ', config id: ' . $appointmentConfigId , ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t} catch (InvalidArgumentException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t} catch (ServiceException|ClientException $e) {\n\t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n\t\t\treturn JsonResponse::errorFromThrowable($e, $e->getHttpCode() ?? Http::STATUS_INTERNAL_SERVER_ERROR);\n\t\t}\n\n\t\treturn JsonResponse::success($booking);\n\t}\n\n\t/**\n\t * @PublicPage\n\t * @NoCSRFRequired\n\t *\n\t * @param string $token\n\t * @return TemplateResponse\n\t * @throws Exception\n\t */\n\tpublic function confirmBooking(string $token): TemplateResponse {\n\t\ttry {\n\t\t\t$booking = $this->bookingService->findByToken($token);\n\t\t} catch (ClientException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t\treturn new TemplateResponse(\n\t\t\t\tApplication::APP_ID,\n\t\t\t\t'appointments/404-booking',\n\t\t\t\t[],\n\t\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($booking->getApptConfigId());\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n\t\t\treturn new TemplateResponse(\n\t\t\t\tApplication::APP_ID,\n\t\t\t\t'appointments/404-booking',\n\t\t\t\t[],\n\t\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t\t);\n\t\t}\n\n\t\t$link = $this->urlGenerator->linkToRouteAbsolute('calendar.appointment.show', [ 'token' => $config->getToken() ]);\n\t\ttry {\n\t\t\t$booking = $this->bookingService->confirmBooking($booking, $config);\n\t\t} catch (ClientException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t}\n\n\t\t$this->initialState->provideInitialState(\n\t\t\t'appointment-link',\n\t\t\t$link\n\t\t);\n\t\t$this->initialState->provideInitialState(\n\t\t\t'booking',\n\t\t\t$booking\n\t\t);\n\n\t\treturn new TemplateResponse(\n\t\t\tApplication::APP_ID,\n\t\t\t'appointments/booking-conflict',\n\t\t\t[],\n\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t);\n\t}\n}\n", "<?php\n\ndeclare(strict_types=1);\n/**\n * Calendar App\n *\n * @copyright 2021 Anna Larch <anna.larch@gmx.net>\n *\n * @author Anna Larch <anna.larch@gmx.net>\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\Calendar\\Controller;\n\nuse ChristophWurst\\Nextcloud\\Testing\\TestCase;\nuse DateTimeZone;\nuse Exception;\nuse OC\\URLGenerator;\nuse OCA\\Calendar\\Db\\AppointmentConfig;\nuse OCA\\Calendar\\Service\\Appointments\\AppointmentConfigService;\nuse OCA\\Calendar\\Service\\Appointments\\BookingService;\nuse OCP\\AppFramework\\Services\\IInitialState;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\Calendar\\ICalendarQuery;\nuse OCP\\Contacts\\IManager;\nuse OCP\\IInitialStateService;\nuse OCP\\IRequest;\nuse OCP\\IUser;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Psr\\Log\\LoggerInterface;\nuse Safe\\DateTimeImmutable;\n\nclass BookingControllerTest extends TestCase {\n\n\t/** @var string */\n\tprotected $appName;\n\n\t/** @var IRequest|MockObject */\n\tprotected $request;\n\n\t/** @var IManager|MockObject */\n\tprotected $manager;\n\n\t/** @var IInitialStateService|MockObject */\n\tprotected $initialState;\n\n\t/** @var IUser|MockObject  */\n\tprotected $user;\n\n\t/** @var AppointmentConfigService|MockObject */\n\tprotected $service;\n\n\t/** @var AppointmentConfigController */\n\tprotected $controller;\n\n\t/** @var ITimeFactory|MockObject */\n\tprivate $time;\n\n\t/** @var BookingService|MockObject */\n\tprivate $bookingService;\n\n\t/** @var AppointmentConfigService|MockObject */\n\tprivate $apptService;\n\n\t/** @var URLGenerator|MockObject */\n\tprivate $urlGenerator;\n\n\t/** @var mixed|MockObject|LoggerInterface */\n\tprivate $logger;\n\n\tprotected function setUp():void {\n\t\tparent::setUp();\n\n\t\tif (!interface_exists(ICalendarQuery::class)) {\n\t\t\tself::markTestIncomplete();\n\t\t}\n\n\t\t$this->appName = 'calendar';\n\t\t$this->request = $this->createMock(IRequest::class);\n\t\t$this->time = $this->createMock(ITimeFactory::class);\n\t\t$this->initialState = $this->createMock(IInitialState::class);\n\t\t$this->bookingService = $this->createMock(BookingService::class);\n\t\t$this->apptService = $this->createMock(AppointmentConfigService::class);\n\t\t$this->urlGenerator = $this->createMock(URLGenerator::class);\n\t\t$this->logger = $this->createMock(LoggerInterface::class);\n\t\t$this->controller = new BookingController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->time,\n\t\t\t$this->initialState,\n\t\t\t$this->bookingService,\n\t\t\t$this->apptService,\n\t\t\t$this->urlGenerator,\n\t\t\t$this->logger\n\t\t);\n\t}\n\n\tpublic function testGetBookableSlots(): void {\n\t\t$start = time();\n\t\t$tz = new DateTimeZone('Europe/Berlin');\n\t\t$sDT = (new DateTimeImmutable())\n\t\t\t->setTimestamp($start)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(0, 0)\n\t\t\t->getTimestamp();\n\t\t$eDT = (new DateTimeImmutable())\n\t\t\t->setTimestamp($start)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(23, 59, 59)\n\t\t\t->getTimestamp();\n\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::once())\n\t\t\t->method('getTime')\n\t\t\t->willReturn($start);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->with(1)\n\t\t\t->willReturn($apptConfg);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('getAvailableSlots')\n\t\t\t->with($apptConfg, $sDT, $eDT);\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start,'Europe/Berlin');\n\t}\n\n\tpublic function testGetBookableSlotsInvalidTimezone(): void {\n\t\t$start = time();\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::never())\n\t\t\t->method('getTime');\n\t\t$this->apptService->expects(self::never())\n\t\t\t->method('findById')\n\t\t\t->with(1);\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('getAvailableSlots');\n\t\t$this->expectException(Exception::class);\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start, 'Hook/Neverland');\n\t}\n\n\tpublic function testGetBookableSlotsDatesInPast(): void {\n\t\t$start = time();\n\t\t$fakeFutureTimestamp = time() + (100 * 24 * 60 * 60);\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::once())\n\t\t\t->method('getTime')\n\t\t\t->willReturn($fakeFutureTimestamp);\n\t\t$this->apptService->expects(self::never())\n\t\t\t->method('findById')\n\t\t\t->with(1);\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('getAvailableSlots');\n\t\t$this->logger->expects(self::once())\n\t\t\t->method('warning');\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start,'Europe/Berlin');\n\t}\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Calendar App\n *\n * @copyright 2021 Anna Larch <anna.larch@gmx.net>\n *\n * @author Anna Larch <anna.larch@gmx.net>\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\Calendar\\Controller;\n\nuse DateTimeImmutable;\nuse DateTimeZone;\nuse InvalidArgumentException;\nuse OC\\URLGenerator;\nuse OCA\\Calendar\\AppInfo\\Application;\nuse OCA\\Calendar\\Exception\\ClientException;\nuse OCA\\Calendar\\Exception\\NoSlotFoundException;\nuse OCA\\Calendar\\Exception\\ServiceException;\nuse OCA\\Calendar\\Http\\JsonResponse;\nuse OCA\\Calendar\\Service\\Appointments\\AppointmentConfigService;\nuse OCA\\Calendar\\Service\\Appointments\\BookingService;\nuse OCP\\AppFramework\\Controller;\nuse OCP\\AppFramework\\Http;\nuse OCP\\AppFramework\\Http\\TemplateResponse;\nuse OCP\\AppFramework\\Services\\IInitialState;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\DB\\Exception;\nuse OCP\\IRequest;\nuse OCP\\Mail\\IMailer;\nuse Psr\\Log\\LoggerInterface;\n\nclass BookingController extends Controller {\n\n\t/** @var BookingService */\n\tprivate $bookingService;\n\n\t/** @var ITimeFactory */\n\tprivate $timeFactory;\n\n\t/** @var AppointmentConfigService */\n\tprivate $appointmentConfigService;\n\n\t/** @var IInitialState */\n\tprivate $initialState;\n\n\t/** @var URLGenerator */\n\tprivate $urlGenerator;\n\n\t/** @var LoggerInterface */\n\tprivate $logger;\n\n\t/** @var IMailer */\n\tprivate $mailer;\n\n\tpublic function __construct(string $appName,\n\t\t\t\t\t\t\t\tIRequest $request,\n\t\t\t\t\t\t\t\tITimeFactory $timeFactory,\n\t\t\t\t\t\t\t\tIInitialState $initialState,\n\t\t\t\t\t\t\t\tBookingService $bookingService,\n\t\t\t\t\t\t\t\tAppointmentConfigService $appointmentConfigService,\n\t\t\t\t\t\t\t\tURLGenerator $urlGenerator,\n\t\t\t\t\t\t\t\tLoggerInterface $logger,\n\t\t\t\t\t\t\t\tIMailer $mailer) {\n\t\tparent::__construct($appName, $request);\n\n\t\t$this->bookingService = $bookingService;\n\t\t$this->timeFactory = $timeFactory;\n\t\t$this->appointmentConfigService = $appointmentConfigService;\n\t\t$this->initialState = $initialState;\n\t\t$this->urlGenerator = $urlGenerator;\n\t\t$this->logger = $logger;\n\t\t$this->mailer = $mailer;\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @PublicPage\n\t *\n\t * @param int $appointmentConfigId\n\t * @param int $startTime UNIX time stamp for the start time in UTC\n\t * @param string $timeZone\n\t *\n\t * @return JsonResponse\n\t */\n\tpublic function getBookableSlots(int $appointmentConfigId,\n\t\t\t\t\t\t\t\t\t int $startTime,\n\t\t\t\t\t\t\t\t\t string $timeZone): JsonResponse {\n\t\t// Convert the timestamps to the beginning and end of the respective day in the specified timezone\n\t\ttry {\n\t\t\t$tz = new DateTimeZone($timeZone);\n\t\t} catch (Exception $e) {\n\t\t\t$this->logger->error('Timezone invalid', ['exception' => $e]);\n\t\t\treturn JsonResponse::fail('Invalid time zone', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t$startTimeInTz = (new DateTimeImmutable())\n\t\t\t->setTimestamp($startTime)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(0, 0)\n\t\t\t->getTimestamp();\n\t\t$endTimeInTz = (new DateTimeImmutable())\n\t\t\t->setTimestamp($startTime)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(23, 59, 59)\n\t\t\t->getTimestamp();\n\n\t\tif ($startTimeInTz > $endTimeInTz) {\n\t\t\t$this->logger->warning('Invalid time range - end time ' . $endTimeInTz . ' before start time ' . $startTimeInTz);\n\t\t\treturn JsonResponse::fail('Invalid time range', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t// rate limit this to only allow ranges between 0 and 7 days\n\t\tif (ceil(($endTimeInTz - $startTimeInTz) / 86400) > 7) {\n\t\t\t$this->logger->warning('Date range too large for start ' . $startTimeInTz . ' end ' . $endTimeInTz);\n\t\t\treturn JsonResponse::fail('Date Range too large.', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\t\t$now = $this->timeFactory->getTime();\n\t\tif ($now > $endTimeInTz) {\n\t\t\t$this->logger->warning('Slot time must be in the future - now ' . $now . ' end ' . $endTimeInTz);\n\t\t\treturn JsonResponse::fail('Slot time range must be in the future', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($appointmentConfigId);\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error('No appointment config found for id ' . $appointmentConfigId, ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t}\n\n\t\treturn JsonResponse::success(\n\t\t\t$this->bookingService->getAvailableSlots($config, $startTimeInTz, $endTimeInTz)\n\t\t);\n\t}\n\n\t/**\n\t * @NoAdminRequired\n\t * @PublicPage\n\t *\n\t * @param int $appointmentConfigId\n\t * @param int $start\n\t * @param int $end\n\t * @param string $displayName\n\t * @param string $email\n\t * @param string $description\n\t * @param string $timeZone\n\t * @return JsonResponse\n\t */\n\tpublic function bookSlot(int $appointmentConfigId,\n\t\t\t\t\t\t\t int $start,\n\t\t\t\t\t\t\t int $end,\n\t\t\t\t\t\t\t string $displayName,\n\t\t\t\t\t\t\t string $email,\n\t\t\t\t\t\t\t string $description,\n\t\t\t\t\t\t\t string $timeZone): JsonResponse {\n\t\tif (!$this->mailer->validateMailAddress($email)) {\n\t\t\treturn JsonResponse::fail('Invalid email address', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\n\t\tif ($start > $end) {\n\t\t\treturn JsonResponse::fail('Invalid time range', Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($appointmentConfigId);\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error('No appointment config found for id ' . $appointmentConfigId, ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t}\n\t\ttry {\n\t\t\t$booking = $this->bookingService->book($config, $start, $end, $timeZone, $displayName, $email, $description);\n\t\t} catch (NoSlotFoundException $e) {\n\t\t\t$this->logger->warning('No slot available for start: ' . $start . ', end: ' . $end . ', config id: ' . $appointmentConfigId , ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_NOT_FOUND);\n\t\t} catch (InvalidArgumentException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t\treturn JsonResponse::fail(null, Http::STATUS_UNPROCESSABLE_ENTITY);\n\t\t} catch (ServiceException|ClientException $e) {\n\t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n\t\t\treturn JsonResponse::errorFromThrowable($e, $e->getHttpCode() ?? Http::STATUS_INTERNAL_SERVER_ERROR);\n\t\t}\n\n\t\treturn JsonResponse::success($booking);\n\t}\n\n\t/**\n\t * @PublicPage\n\t * @NoCSRFRequired\n\t *\n\t * @param string $token\n\t * @return TemplateResponse\n\t * @throws Exception\n\t */\n\tpublic function confirmBooking(string $token): TemplateResponse {\n\t\ttry {\n\t\t\t$booking = $this->bookingService->findByToken($token);\n\t\t} catch (ClientException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t\treturn new TemplateResponse(\n\t\t\t\tApplication::APP_ID,\n\t\t\t\t'appointments/404-booking',\n\t\t\t\t[],\n\t\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t\t);\n\t\t}\n\n\t\ttry {\n\t\t\t$config = $this->appointmentConfigService->findById($booking->getApptConfigId());\n\t\t} catch (ServiceException $e) {\n\t\t\t$this->logger->error($e->getMessage(), ['exception' => $e]);\n\t\t\treturn new TemplateResponse(\n\t\t\t\tApplication::APP_ID,\n\t\t\t\t'appointments/404-booking',\n\t\t\t\t[],\n\t\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t\t);\n\t\t}\n\n\t\t$link = $this->urlGenerator->linkToRouteAbsolute('calendar.appointment.show', [ 'token' => $config->getToken() ]);\n\t\ttry {\n\t\t\t$booking = $this->bookingService->confirmBooking($booking, $config);\n\t\t} catch (ClientException $e) {\n\t\t\t$this->logger->warning($e->getMessage(), ['exception' => $e]);\n\t\t}\n\n\t\t$this->initialState->provideInitialState(\n\t\t\t'appointment-link',\n\t\t\t$link\n\t\t);\n\t\t$this->initialState->provideInitialState(\n\t\t\t'booking',\n\t\t\t$booking\n\t\t);\n\n\t\treturn new TemplateResponse(\n\t\t\tApplication::APP_ID,\n\t\t\t'appointments/booking-conflict',\n\t\t\t[],\n\t\t\tTemplateResponse::RENDER_AS_GUEST\n\t\t);\n\t}\n}\n", "<?php\n\ndeclare(strict_types=1);\n/**\n * Calendar App\n *\n * @copyright 2021 Anna Larch <anna.larch@gmx.net>\n *\n * @author Anna Larch <anna.larch@gmx.net>\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU AFFERO GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU Affero General Public\n * License along with this library.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\nnamespace OCA\\Calendar\\Controller;\n\nuse ChristophWurst\\Nextcloud\\Testing\\TestCase;\nuse DateTimeZone;\nuse Exception;\nuse InvalidArgumentException;\nuse OC\\URLGenerator;\nuse OCA\\Calendar\\Db\\AppointmentConfig;\nuse OCA\\Calendar\\Db\\Booking;\nuse OCA\\Calendar\\Exception\\NoSlotFoundException;\nuse OCA\\Calendar\\Exception\\ServiceException;\nuse OCA\\Calendar\\Service\\Appointments\\AppointmentConfigService;\nuse OCA\\Calendar\\Service\\Appointments\\BookingService;\nuse OCP\\AppFramework\\Services\\IInitialState;\nuse OCP\\AppFramework\\Utility\\ITimeFactory;\nuse OCP\\Calendar\\ICalendarQuery;\nuse OCP\\Contacts\\IManager;\nuse OCP\\IInitialStateService;\nuse OCP\\IRequest;\nuse OCP\\IUser;\nuse OCP\\Mail\\IMailer;\nuse PHPUnit\\Framework\\MockObject\\MockObject;\nuse Psr\\Log\\LoggerInterface;\nuse Safe\\DateTimeImmutable;\n\nclass BookingControllerTest extends TestCase {\n\n\t/** @var string */\n\tprotected $appName;\n\n\t/** @var IRequest|MockObject */\n\tprotected $request;\n\n\t/** @var IManager|MockObject */\n\tprotected $manager;\n\n\t/** @var IInitialStateService|MockObject */\n\tprotected $initialState;\n\n\t/** @var IUser|MockObject  */\n\tprotected $user;\n\n\t/** @var AppointmentConfigService|MockObject */\n\tprotected $service;\n\n\t/** @var AppointmentConfigController */\n\tprotected $controller;\n\n\t/** @var ITimeFactory|MockObject */\n\tprivate $time;\n\n\t/** @var BookingService|MockObject */\n\tprivate $bookingService;\n\n\t/** @var AppointmentConfigService|MockObject */\n\tprivate $apptService;\n\n\t/** @var URLGenerator|MockObject */\n\tprivate $urlGenerator;\n\n\t/** @var mixed|MockObject|LoggerInterface */\n\tprivate $logger;\n\n\t/** @var IMailer|MockObject */\n\tprivate $mailer;\n\n\tprotected function setUp():void {\n\t\tparent::setUp();\n\n\t\tif (!interface_exists(ICalendarQuery::class)) {\n\t\t\tself::markTestIncomplete();\n\t\t}\n\n\t\t$this->appName = 'calendar';\n\t\t$this->request = $this->createMock(IRequest::class);\n\t\t$this->time = $this->createMock(ITimeFactory::class);\n\t\t$this->initialState = $this->createMock(IInitialState::class);\n\t\t$this->bookingService = $this->createMock(BookingService::class);\n\t\t$this->apptService = $this->createMock(AppointmentConfigService::class);\n\t\t$this->urlGenerator = $this->createMock(URLGenerator::class);\n\t\t$this->logger = $this->createMock(LoggerInterface::class);\n\t\t$this->mailer = $this->createMock(IMailer::class);\n\t\t$this->controller = new BookingController(\n\t\t\t$this->appName,\n\t\t\t$this->request,\n\t\t\t$this->time,\n\t\t\t$this->initialState,\n\t\t\t$this->bookingService,\n\t\t\t$this->apptService,\n\t\t\t$this->urlGenerator,\n\t\t\t$this->logger,\n\t\t\t$this->mailer\n\t\t);\n\t}\n\n\tpublic function testGetBookableSlots(): void {\n\t\t$start = time();\n\t\t$tz = new DateTimeZone('Europe/Berlin');\n\t\t$sDT = (new DateTimeImmutable())\n\t\t\t->setTimestamp($start)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(0, 0)\n\t\t\t->getTimestamp();\n\t\t$eDT = (new DateTimeImmutable())\n\t\t\t->setTimestamp($start)\n\t\t\t->setTimezone($tz)\n\t\t\t->setTime(23, 59, 59)\n\t\t\t->getTimestamp();\n\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::once())\n\t\t\t->method('getTime')\n\t\t\t->willReturn($start);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->with(1)\n\t\t\t->willReturn($apptConfg);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('getAvailableSlots')\n\t\t\t->with($apptConfg, $sDT, $eDT);\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start,'Europe/Berlin');\n\t}\n\n\tpublic function testGetBookableSlotsInvalidTimezone(): void {\n\t\t$start = time();\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::never())\n\t\t\t->method('getTime');\n\t\t$this->apptService->expects(self::never())\n\t\t\t->method('findById')\n\t\t\t->with(1);\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('getAvailableSlots');\n\t\t$this->expectException(Exception::class);\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start, 'Hook/Neverland');\n\t}\n\n\tpublic function testGetBookableSlotsDatesInPast(): void {\n\t\t$start = time();\n\t\t$fakeFutureTimestamp = time() + (100 * 24 * 60 * 60);\n\t\t$apptConfg = new AppointmentConfig();\n\t\t$apptConfg->setId(1);\n\t\t$this->time->expects(self::once())\n\t\t\t->method('getTime')\n\t\t\t->willReturn($fakeFutureTimestamp);\n\t\t$this->apptService->expects(self::never())\n\t\t\t->method('findById')\n\t\t\t->with(1);\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('getAvailableSlots');\n\t\t$this->logger->expects(self::once())\n\t\t\t->method('warning');\n\n\t\t$this->controller->getBookableSlots($apptConfg->getId(), $start,'Europe/Berlin');\n\t}\n\n\tpublic function testBook(): void {\n\t\t$email = 'penny@stardewvalley.edu';\n\t\t$config = new AppointmentConfig();\n\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(true);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->willReturn($config);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('book')\n\t\t\t->with($config, 1, 1, 'Hook/Neverland', 'Test', $email, 'Test')\n\t\t\t->willReturn(new Booking());\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Hook/Neverland');\n\t}\n\n\n\tpublic function testBookInvalidTimeZone(): void {\n\t\t$email = 'penny@stardewvalley.edu';\n\t\t$config = new AppointmentConfig();\n\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(true);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->willReturn($config);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('book')\n\t\t\t->with($config, 1, 1, 'Hook/Neverland', 'Test', $email, 'Test')\n\t\t\t->willThrowException(new InvalidArgumentException());\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Hook/Neverland');\n\t}\n\n\tpublic function testBookInvalidSlot(): void {\n\t\t$email = 'penny@stardewvalley.edu';\n\t\t$config = new AppointmentConfig();\n\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(true);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->willReturn($config);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('book')\n\t\t\t->with($config, 1, 1, 'Europe/Berlin', 'Test', $email, 'Test')\n\t\t\t->willThrowException(new NoSlotFoundException());\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');\n\t}\n\n\tpublic function testBookInvalidBooking(): void {\n\t\t$email = 'penny@stardewvalley.edu';\n\t\t$config = new AppointmentConfig();\n\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(true);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->willReturn($config);\n\t\t$this->bookingService->expects(self::once())\n\t\t\t->method('book')\n\t\t\t->with($config, 1, 1, 'Europe/Berlin', 'Test', $email, 'Test')\n\t\t\t->willThrowException(new ServiceException());\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');\n\t}\n\n\tpublic function testBookInvalidId(): void {\n\t\t$email = 'penny@stardewvalley.edu';\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(true);\n\t\t$this->apptService->expects(self::once())\n\t\t\t->method('findById')\n\t\t\t->willThrowException(new ServiceException());\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('book');\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');\n\t}\n\n\n\tpublic function testBookInvalidEmail(): void {\n\t\t$email = 'testing-abcdef';\n\n\t\t$this->mailer->expects(self::once())\n\t\t\t->method('validateMailAddress')\n\t\t\t->with($email)\n\t\t\t->willReturn(false);\n\t\t$this->apptService->expects(self::never())\n\t\t\t->method('findById');\n\t\t$this->bookingService->expects(self::never())\n\t\t\t->method('book');\n\n\t\t$this->controller->bookSlot(1, 1, 1, 'Test', $email, 'Test', 'Europe/Berlin');\n\t}\n}\n"], "filenames": ["lib/Controller/BookingController.php", "tests/php/unit/Controller/BookingControllerTest.php"], "buggy_code_start_loc": [45, 29], "buggy_code_end_loc": [163, 173], "fixing_code_start_loc": [46, 30], "fixing_code_end_loc": [174, 292], "type": "CWE-77", "message": "Nextcloud Calendar is a calendar application for the nextcloud framework. SMTP Command Injection in Appointment Emails via Newlines: as newlines and special characters are not sanitized in the email value in the JSON request, a malicious attacker can inject newlines to break out of the `RCPT TO:<BOOKING USER'S EMAIL> ` SMTP command and begin injecting arbitrary SMTP commands. It is recommended that Calendar is upgraded to 3.2.2. There are no workaround available.", "other": {"cve": {"id": "CVE-2022-24838", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-11T21:15:08.760", "lastModified": "2022-04-19T15:32:08.713", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nextcloud Calendar is a calendar application for the nextcloud framework. SMTP Command Injection in Appointment Emails via Newlines: as newlines and special characters are not sanitized in the email value in the JSON request, a malicious attacker can inject newlines to break out of the `RCPT TO:<BOOKING USER'S EMAIL> ` SMTP command and begin injecting arbitrary SMTP commands. It is recommended that Calendar is upgraded to 3.2.2. There are no workaround available."}, {"lang": "es", "value": "Nextcloud Calendar es una aplicaci\u00f3n de calendario para el framework nextcloud. Una Inyecci\u00f3n de Comandos SMTP en Correos Electr\u00f3nicos de Citas por medio de Newlines: como las nuevas l\u00edneas y los caracteres especiales no son saneados en el valor del correo electr\u00f3nico en la petici\u00f3n JSON, un atacante malicioso puede inyectar nuevas l\u00edneas para salirse del comando SMTP \"RCPT TO:(BOOKING USER'S EMAIL)\" y comenzar a inyectar comandos SMTP arbitrarios. Es recomendado actualizar Calendar a la versi\u00f3n 3.2.2. No se presenta ninguna medida de mitigaci\u00f3n disponible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:calendar:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.2.2", "matchCriteriaId": "51E49865-DEC4-4532-BDCE-24F92C97C71F"}]}]}], "references": [{"url": "https://github.com/nextcloud/calendar/commit/7b70edfb8a0fcf0926f613ababcbd56c6ecd9f35", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/calendar/pull/4073", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/security-advisories/security/advisories/GHSA-8xv5-4855-24qf", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/calendar/commit/7b70edfb8a0fcf0926f613ababcbd56c6ecd9f35"}}