{"buggy_code": ["\npackage LedgerSMB::PSGI::Util;\n\n=head1 NAME\n\nLedgerSMB::PSGI::Util - LedgerSMB PSGI Utility functions\n\n=head1 SYNOPSIS\n\n  return\n     LedgerSMB::PSGI::Util::internal_server_error('error','Title',\n                                 'company', $request->{dbversion});\n\n=head1 DESCRIPTION\n\nLedgerSMB::Middleware::DynamicLoadWorkflow makes sure the new-style\nworkflow scripts have successfully been loaded before being dispatched to.\n\nThis module implements the C<Plack::Middleware> protocol.\n\n=cut\n\nuse strict;\nuse warnings;\n\nuse Carp;\nuse HTTP::Status qw( HTTP_OK HTTP_INTERNAL_SERVER_ERROR HTTP_SEE_OTHER\n    HTTP_BAD_REQUEST );\n\n=head1 METHODS\n\nThis module declares no methods.\n\n=head1 FUNCTIONS\n\n=head2 internal_server_error($msg, $title, $company, $dbversion)\n\nReturns a standard error representation for HTTP status 500\n\n=cut\n\n\nsub internal_server_error {\n    my ($msg, $title, $company, $dbversion) = @_;\n\n    $title //= 'Error!';\n    $msg =~ s/\\n/<br>/g;\n    my @body_lines = ( '<html><body>',\n                       q{<h2 class=\"error\">Error!</h2>},\n                       \"<p><b>$msg</b></p>\" );\n    push @body_lines, '<p>dbversion: ' . ($dbversion // '') .\n         ', company: ' . ($company // '') . '</p>'\n        if $company || $dbversion;\n\n    push @body_lines, '</body></html>';\n\n    return [ HTTP_INTERNAL_SERVER_ERROR,\n             [ 'Content-Type' => 'text/html; charset=UTF-8' ],\n             \\@body_lines ];\n}\n\n\n=head2 unauthorized()\n\nReturns a standard error representation for HTTP status 401\n\n=cut\n\nsub unauthorized {\n    return [ HTTP_BAD_REQUEST,\n             [ 'Content-Type' => 'text/plain; charset=utf-8' ],\n             [ 'Credentials invalid or session expired' ]\n        ];\n}\n\n=head2 session_timed_out()\n\nReturns a standard error representation for 'LedgerSMB session timed out'\n\n=cut\n\nsub session_timed_out {\n    return [ HTTP_SEE_OTHER,\n             [ 'Location' => 'login.pl?action=logout&reason=timeout' ],\n             [] ];\n}\n\n\n=head2 incompatible_database($expected, $actual)\n\nReturns a standard error representation for 'LedgerSMB database version\nincompatible'\n\n=cut\n\nsub incompatible_database {\n    my ($expected, $actual) = @_;\n\n    return\n        [ 521, ## no critic\n          [ 'Content-Type' => 'text/html; charset=utf-8' ],\n          [ 'Database is not the expected version.  ' .\n            \"Was $actual, expected $expected.  \" .\n            'Please re-run <a href=\"setup.pl\">setup.pl</a> to correct.' ] ];\n}\n\n\n=head2 cookie_path($script)\n\nReturns the C<path=> parameter to be used with the C<Set-Cookie>\n(authorization) header.\n\n=cut\n\nsub cookie_path {\n    my $script = shift;\n\n    return ($script =~ s|[^/]*$||r);\n}\n\n\n=head1 LICENSE AND COPYRIGHT\n\nCopyright (C) 2017 The LedgerSMB Core Team\n\nThis file is licensed under the GNU General Public License version 2, or at your\noption any later version.  A copy of the license should have been included with\nyour software.\n\n=cut\n\n\n1;\n", "######################################################################\n# LedgerSMB Accounting and ERP\n\n# http://www.ledgersmb.org/\n#\n# Copyright (C) 2006\n# This work contains copyrighted information from a number of sources all used\n# with permission.\n#\n# This file contains source code included with or based on SQL-Ledger which\n# is Copyright Dieter Simader and DWS Systems Inc. 2000-2005 and licensed\n# under the GNU General Public License version 2 or, at your option, any later\n# version.  For a full list including contact information of contributors,\n# maintainers, and copyright holders, see the CONTRIBUTORS file.\n#\n# Original Copyright Notice from SQL-Ledger 2.6.17 (before the fork):\n# Copyright (C) 2001\n#\n#  Author: Dieter Simader\n#   Email: dsimader@sql-ledger.org\n#     Web: http://www.sql-ledger.org\n#\n#  Contributors:\n#\n#\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n#######################################################################\n#\n# this script is the frontend called from old/bin/$terminal/$script\n# all the accounting modules are linked to this script which in\n# turn execute the same script in old/bin/$terminal/\n#\n#######################################################################\n\npackage lsmb_legacy;\n\nuse LedgerSMB::User;\nuse LedgerSMB::Form;\nuse LedgerSMB::Locale;\nuse LedgerSMB::App_State;\nuse LedgerSMB::Middleware::SessionStorage;\nuse LedgerSMB::Middleware::RequestID;\nuse LedgerSMB::PSGI::Util;\nuse LedgerSMB::Sysconfig;\n\nuse Cookie::Baker;\nuse Digest::MD5;\nuse Log::Log4perl;\nuse Feature::Compat::Try;\n\nour $logger;\n\n\nsub handle {\n    # WARNING !!\n    #\n    # This function *must* be called in a forked process\n    #\n    # because it changes global state without clean-up\n    #\n    #\n    # Note that this function can receive a PSGI environment, but\n    # modifications aren't marshalled back to the fork()ing process!\n    my ($class, $script_module, $psgi_env) = @_;\n    my $script = $script_module . '.pl';\n\n\n    binmode(STDIN,  ':utf8');\n    binmode(STDOUT, ':utf8');\n    binmode(STDERR, ':utf8');\n\n    my $params;\n    if ($ENV{CONTENT_LENGTH}!= 0) {\n        read( STDIN, $params, $ENV{CONTENT_LENGTH} );\n    }\n    elsif ( $ENV{QUERY_STRING} ) {\n        $params = $ENV{QUERY_STRING};\n    }\n\n    $form = Form->new($params);\n    my $session = $psgi_env->{'lsmb.session'};\n    $form->{_session} = $session;\n    @{$form}{qw/ session_id company /} =\n        @{$session}{qw/ session_id company /};\n\n    #make logger available to other old programs\n    $logger = Log::Log4perl->get_logger(\"lsmb.$script_module.$form->{action}\");\n\n    local $SIG{__WARN__} = sub {\n        my $msg = shift;\n\n        local $Log::Log4perl::caller_depth = $Log::Log4perl::caller_depth + 1;\n        $msg =~ s/\\n/\\\\n/g;\n        $logger->warn($msg);\n    };\n\n\n    $locale = LedgerSMB::Locale->get_handle( LedgerSMB::Sysconfig::language() )\n        or $form->error( __FILE__ . ':' . __LINE__ .\n                         \": Locale not loaded: $!\\n\" );\n\n\n    # we use $script for the language module\n    $form->{script} = $script;\n\n    # locale messages\n    #$form->{charset} = $locale->encoding;\n    $form->{charset} = 'UTF-8';\n    $locale->encoding('UTF-8');\n\n    try {\n        $psgi_env->{'lsmb.app_cb'}->($psgi_env);\n        LedgerSMB::App_State::set_DBH($psgi_env->{'lsmb.app'});\n\n        $form->{session_id} = $psgi_env->{'lsmb.session'}->{session_id};\n        $form->db_init( $psgi_env->{'lsmb.app'},  \\%myconfig );\n        my $path = LedgerSMB::PSGI::Util::cookie_path($ENV{SCRIPT_NAME});\n\n        # we get rid of myconfig and use User as a real object\n        %myconfig = %{ LedgerSMB::User->fetch_config( $form ) };\n        LedgerSMB::App_State::set_User(\\%myconfig);\n        map { $form->{$_} = $myconfig{$_} } qw(stylesheet timeout)\n            unless ( $form->{type} and $form->{type} eq 'preferences' );\n\n        if ($myconfig{language}){\n            $locale   = LedgerSMB::Locale->get_handle( $myconfig{language} )\n                or _error($form, __FILE__ . ':' . __LINE__\n                          . \": Locale not loaded: $!\\n\" );\n        }\n\n        $form->{_locale} = $locale;\n        # pull in the main code\n        $logger->trace(\"requiring old/bin/$script\");\n        require \"old/bin/$script\";\n\n        if ( $form->{action}\n             && $form->{action} ne 'redirect'\n             && \"lsmb_legacy\"->can($form->{action}) ) {\n            $logger->trace(\"action $form->{action}\");\n\n            &{ $form->{action} }();\n            $form->{dbh}->commit;\n        }\n        else {\n            $form->error( __FILE__ . ':' . __LINE__ . ': '\n                          . $locale->text('action not defined!'));\n        }\n    }\n    catch  ($err) {\n        # We have an exception here because otherwise we always get an exception\n        # when output terminates.  A mere 'die' will no longer trigger an automatic\n        # error, but die 'foo' will map to $form->error('foo')\n        # -- CT\n        $form->{_error} = 1;\n        if ($err =~ /^Died/i or $err =~ /^exit at /) {\n            $form->{dbh}->commit if defined $form->{dbh};\n        }\n        else {\n            $form->{dbh}->rollback if defined $form->{dbh};\n            _error($form, \"'$err'\");\n        }\n    }\n\n    $logger->trace(\"leaving after script=old/bin/$form->{script} action=$form->{action}\");#trace flow\n\n    $form->{dbh}->disconnect() if defined $form->{dbh};\n    return 1; # PSGI.pm expects a 'true' response\n}\n\n\nsub _error {\n    my ($form, $msg, $status) = @_;\n    $msg = \"? _error\" if !defined $msg;\n    $status = 500 if ! defined $status;\n\n    print qq|Status: $status ISE\nContent-Type: text/html; charset=utf-8\n\n<html>\n<body><h2 class=\"error\">Error!</h2> <p><b>$msg</b></p>\n<p>dbversion: $form->{dbversion}, company: $form->{company}</p>\n</body>\n</html>\n|;\n\n    local $Log::Log4perl::caller_depth = $Log::Log4perl::caller_depth + 1;\n    $msg =~ s/\\n/\\\\n/g;\n    $logger->error($msg);\n}\n\n\n1;\n"], "fixing_code": ["\npackage LedgerSMB::PSGI::Util;\n\n=head1 NAME\n\nLedgerSMB::PSGI::Util - LedgerSMB PSGI Utility functions\n\n=head1 SYNOPSIS\n\n  return\n     LedgerSMB::PSGI::Util::internal_server_error('error','Title',\n                                 'company', $request->{dbversion});\n\n=head1 DESCRIPTION\n\nLedgerSMB::Middleware::DynamicLoadWorkflow makes sure the new-style\nworkflow scripts have successfully been loaded before being dispatched to.\n\nThis module implements the C<Plack::Middleware> protocol.\n\n=cut\n\nuse strict;\nuse warnings;\n\nuse Carp;\nuse HTML::Escape;\nuse HTTP::Status qw( HTTP_OK HTTP_INTERNAL_SERVER_ERROR HTTP_SEE_OTHER\n    HTTP_BAD_REQUEST );\n\n=head1 METHODS\n\nThis module declares no methods.\n\n=head1 FUNCTIONS\n\n=head2 internal_server_error($msg, $title, $company, $dbversion)\n\nReturns a standard error representation for HTTP status 500\n\n=cut\n\n\nsub internal_server_error {\n    my ($msg, $title, $company, $dbversion) = map { escape_html($_ // '') } @_;\n\n    $title //= 'Error!';\n    $msg =~ s/\\n/<br>/g;\n    my @body_lines = ( '<html><body>',\n                       q{<h2 class=\"error\">Error!</h2>},\n                       \"<p><b>$msg</b></p>\" );\n    push @body_lines, '<p>dbversion: ' . ($dbversion // '') .\n         ', company: ' . ($company // '') . '</p>'\n        if $company || $dbversion;\n\n    push @body_lines, '</body></html>';\n\n    return [ HTTP_INTERNAL_SERVER_ERROR,\n             [ 'Content-Type' => 'text/html; charset=UTF-8' ],\n             \\@body_lines ];\n}\n\n\n=head2 unauthorized()\n\nReturns a standard error representation for HTTP status 401\n\n=cut\n\nsub unauthorized {\n    return [ HTTP_BAD_REQUEST,\n             [ 'Content-Type' => 'text/plain; charset=utf-8' ],\n             [ 'Credentials invalid or session expired' ]\n        ];\n}\n\n=head2 session_timed_out()\n\nReturns a standard error representation for 'LedgerSMB session timed out'\n\n=cut\n\nsub session_timed_out {\n    return [ HTTP_SEE_OTHER,\n             [ 'Location' => 'login.pl?action=logout&reason=timeout' ],\n             [] ];\n}\n\n\n=head2 incompatible_database($expected, $actual)\n\nReturns a standard error representation for 'LedgerSMB database version\nincompatible'\n\n=cut\n\nsub incompatible_database {\n    my ($expected, $actual) = @_;\n\n    return\n        [ 521, ## no critic\n          [ 'Content-Type' => 'text/html; charset=utf-8' ],\n          [ 'Database is not the expected version.  ' .\n            \"Was $actual, expected $expected.  \" .\n            'Please re-run <a href=\"setup.pl\">setup.pl</a> to correct.' ] ];\n}\n\n\n=head2 cookie_path($script)\n\nReturns the C<path=> parameter to be used with the C<Set-Cookie>\n(authorization) header.\n\n=cut\n\nsub cookie_path {\n    my $script = shift;\n\n    return ($script =~ s|[^/]*$||r);\n}\n\n\n=head1 LICENSE AND COPYRIGHT\n\nCopyright (C) 2017 The LedgerSMB Core Team\n\nThis file is licensed under the GNU General Public License version 2, or at your\noption any later version.  A copy of the license should have been included with\nyour software.\n\n=cut\n\n\n1;\n", "######################################################################\n# LedgerSMB Accounting and ERP\n\n# http://www.ledgersmb.org/\n#\n# Copyright (C) 2006\n# This work contains copyrighted information from a number of sources all used\n# with permission.\n#\n# This file contains source code included with or based on SQL-Ledger which\n# is Copyright Dieter Simader and DWS Systems Inc. 2000-2005 and licensed\n# under the GNU General Public License version 2 or, at your option, any later\n# version.  For a full list including contact information of contributors,\n# maintainers, and copyright holders, see the CONTRIBUTORS file.\n#\n# Original Copyright Notice from SQL-Ledger 2.6.17 (before the fork):\n# Copyright (C) 2001\n#\n#  Author: Dieter Simader\n#   Email: dsimader@sql-ledger.org\n#     Web: http://www.sql-ledger.org\n#\n#  Contributors:\n#\n#\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n#######################################################################\n#\n# this script is the frontend called from old/bin/$terminal/$script\n# all the accounting modules are linked to this script which in\n# turn execute the same script in old/bin/$terminal/\n#\n#######################################################################\n\npackage lsmb_legacy;\n\nuse LedgerSMB::User;\nuse LedgerSMB::Form;\nuse LedgerSMB::Locale;\nuse LedgerSMB::App_State;\nuse LedgerSMB::Middleware::SessionStorage;\nuse LedgerSMB::Middleware::RequestID;\nuse LedgerSMB::PSGI::Util;\nuse LedgerSMB::Sysconfig;\n\nuse Cookie::Baker;\nuse Digest::MD5;\nuse HTML::Escape;\nuse Log::Log4perl;\nuse Feature::Compat::Try;\n\nour $logger;\n\n\nsub handle {\n    # WARNING !!\n    #\n    # This function *must* be called in a forked process\n    #\n    # because it changes global state without clean-up\n    #\n    #\n    # Note that this function can receive a PSGI environment, but\n    # modifications aren't marshalled back to the fork()ing process!\n    my ($class, $script_module, $psgi_env) = @_;\n    my $script = $script_module . '.pl';\n\n\n    binmode(STDIN,  ':utf8');\n    binmode(STDOUT, ':utf8');\n    binmode(STDERR, ':utf8');\n\n    my $params;\n    if ($ENV{CONTENT_LENGTH}!= 0) {\n        read( STDIN, $params, $ENV{CONTENT_LENGTH} );\n    }\n    elsif ( $ENV{QUERY_STRING} ) {\n        $params = $ENV{QUERY_STRING};\n    }\n\n    $form = Form->new($params);\n    my $session = $psgi_env->{'lsmb.session'};\n    $form->{_session} = $session;\n    @{$form}{qw/ session_id company /} =\n        @{$session}{qw/ session_id company /};\n\n    #make logger available to other old programs\n    $logger = Log::Log4perl->get_logger(\"lsmb.$script_module.$form->{action}\");\n\n    local $SIG{__WARN__} = sub {\n        my $msg = shift;\n\n        local $Log::Log4perl::caller_depth = $Log::Log4perl::caller_depth + 1;\n        $msg =~ s/\\n/\\\\n/g;\n        $logger->warn($msg);\n    };\n\n\n    $locale = LedgerSMB::Locale->get_handle( LedgerSMB::Sysconfig::language() )\n        or $form->error( __FILE__ . ':' . __LINE__ .\n                         \": Locale not loaded: $!\\n\" );\n\n\n    # we use $script for the language module\n    $form->{script} = $script;\n\n    # locale messages\n    #$form->{charset} = $locale->encoding;\n    $form->{charset} = 'UTF-8';\n    $locale->encoding('UTF-8');\n\n    try {\n        $psgi_env->{'lsmb.app_cb'}->($psgi_env);\n        LedgerSMB::App_State::set_DBH($psgi_env->{'lsmb.app'});\n\n        $form->{session_id} = $psgi_env->{'lsmb.session'}->{session_id};\n        $form->db_init( $psgi_env->{'lsmb.app'},  \\%myconfig );\n        my $path = LedgerSMB::PSGI::Util::cookie_path($ENV{SCRIPT_NAME});\n\n        # we get rid of myconfig and use User as a real object\n        %myconfig = %{ LedgerSMB::User->fetch_config( $form ) };\n        LedgerSMB::App_State::set_User(\\%myconfig);\n        map { $form->{$_} = $myconfig{$_} } qw(stylesheet timeout)\n            unless ( $form->{type} and $form->{type} eq 'preferences' );\n\n        if ($myconfig{language}){\n            $locale   = LedgerSMB::Locale->get_handle( $myconfig{language} )\n                or _error($form, __FILE__ . ':' . __LINE__\n                          . \": Locale not loaded: $!\\n\" );\n        }\n\n        $form->{_locale} = $locale;\n        # pull in the main code\n        $logger->trace(\"requiring old/bin/$script\");\n        require \"old/bin/$script\";\n\n        if ( $form->{action}\n             && $form->{action} ne 'redirect'\n             && \"lsmb_legacy\"->can($form->{action}) ) {\n            $logger->trace(\"action $form->{action}\");\n\n            &{ $form->{action} }();\n            $form->{dbh}->commit;\n        }\n        else {\n            $form->error( __FILE__ . ':' . __LINE__ . ': '\n                          . $locale->text('action not defined!'));\n        }\n    }\n    catch  ($err) {\n        # We have an exception here because otherwise we always get an exception\n        # when output terminates.  A mere 'die' will no longer trigger an automatic\n        # error, but die 'foo' will map to $form->error('foo')\n        # -- CT\n        $form->{_error} = 1;\n        if ($err =~ /^Died/i or $err =~ /^exit at /) {\n            $form->{dbh}->commit if defined $form->{dbh};\n        }\n        else {\n            $form->{dbh}->rollback if defined $form->{dbh};\n            _error($form, \"'$err'\");\n        }\n    }\n\n    $logger->trace(\"leaving after script=old/bin/$form->{script} action=$form->{action}\");#trace flow\n\n    $form->{dbh}->disconnect() if defined $form->{dbh};\n    return 1; # PSGI.pm expects a 'true' response\n}\n\n\nsub _error {\n    my ($form, $msg, $status) = @_;\n    $msg = \"? _error\" if !defined $msg;\n    my $html_msg = escape_html($msg);\n    my $html_dbversion = escape_html($form->{dbversion});\n    my $html_company   = escape_html($form->{company});\n    $status = 500 if ! defined $status;\n\n    print qq|Status: $status ISE\nContent-Type: text/html; charset=utf-8\n\n<html>\n<body><h2 class=\"error\">Error!</h2> <p><b>$html_msg</b></p>\n<p>dbversion: $html_dbversion, company: $html_company</p>\n</body>\n</html>\n|;\n\n    local $Log::Log4perl::caller_depth = $Log::Log4perl::caller_depth + 1;\n    $msg =~ s/\\n/\\\\n/g;\n    $logger->error($msg);\n}\n\n\n1;\n"], "filenames": ["lib/LedgerSMB/PSGI/Util.pm", "old/lib/LedgerSMB/oldHandler.pm"], "buggy_code_start_loc": [26, 59], "buggy_code_end_loc": [45, 194], "fixing_code_start_loc": [27, 60], "fixing_code_end_loc": [46, 198], "type": "CWE-79", "message": "LedgerSMB does not sufficiently HTML-encode error messages sent to the browser. By sending a specially crafted URL to an authenticated user, this flaw can be abused for remote code execution and information disclosure.", "other": {"cve": {"id": "CVE-2021-3694", "sourceIdentifier": "security@huntr.dev", "published": "2021-08-23T13:15:07.780", "lastModified": "2021-08-27T15:02:29.647", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LedgerSMB does not sufficiently HTML-encode error messages sent to the browser. By sending a specially crafted URL to an authenticated user, this flaw can be abused for remote code execution and information disclosure."}, {"lang": "es", "value": "LedgerSMB, no codifica suficientemente los mensajes de error enviados al navegador. Mediante el env\u00edo de una URL especialmente dise\u00f1ada a un usuario autenticado, este fallo puede ser abusado para una ejecuci\u00f3n de c\u00f3digo remota y una divulgaci\u00f3n de informaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 6.0}, {"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.1.0", "versionEndIncluding": "1.1.12", "matchCriteriaId": "84D837D8-9CEB-4DAC-BEF6-CB0D7CBF3730"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.2.0", "versionEndIncluding": "1.2.26", "matchCriteriaId": "DAA91816-FE66-4662-A88B-08E45BE54C60"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.3.0", "versionEndIncluding": "1.3.47", "matchCriteriaId": "2AD1A858-F378-4C88-AC54-752BC352DA64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.4.0", "versionEndIncluding": "1.4.42", "matchCriteriaId": "A19049A3-4641-418B-AAB6-5D32D1FD6E28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.5.0", "versionEndIncluding": "1.5.30", "matchCriteriaId": "0EA19A56-9AD1-4EA9-B020-1930106FD308"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.6.0", "versionEndIncluding": "1.6.33", "matchCriteriaId": "C08AEF10-7BF9-4EEC-B7C1-F233FACEDE7F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.7.0", "versionEndIncluding": "1.7.32", "matchCriteriaId": "720FC128-BEE5-4D7C-86B8-438159E36475"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ledgersmb:ledgersmb:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.8.0", "versionEndIncluding": "1.8.17", "matchCriteriaId": "D4CE19F9-DE00-481E-AA8D-0EDD0B139E9B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}], "references": [{"url": "https://github.com/ledgersmb/ledgersmb/commit/98fa476d46a4a7e5e9492ed69b4fa190be5547fc", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ef7f4cf7-3a81-4516-b261-f5b6ac21430c", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}, {"url": "https://ledgersmb.org/cve-2021-3694-cross-site-scripting", "source": "security@huntr.dev", "tags": ["Vendor Advisory"]}, {"url": "https://www.debian.org/security/2021/dsa-4962", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ledgersmb/ledgersmb/commit/98fa476d46a4a7e5e9492ed69b4fa190be5547fc"}}