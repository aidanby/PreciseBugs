{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\Asset;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\ElementControllerBase;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Traits\\AdminStyleTrait;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Traits\\ApplySchedulerDataTrait;\nuse Pimcore\\Bundle\\AdminBundle\\Helper\\GridHelperService;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\Traits\\ElementEditLockHelperTrait;\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Event\\Admin\\ElementAdminStyleEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Event\\AssetEvents;\nuse Pimcore\\Event\\Model\\Asset\\ResolveUploadTargetEvent;\nuse Pimcore\\File;\nuse Pimcore\\Loader\\ImplementationLoader\\Exception\\UnsupportedException;\nuse Pimcore\\Logger;\nuse Pimcore\\Messenger\\AssetPreviewImageMessage;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\ManyToManyRelation;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\ValidationException;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Schedule\\Task;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Mime\\MimeTypes;\nuse Symfony\\Component\\Process\\Process;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/asset\")\n *\n * @internal\n */\nclass AssetController extends ElementControllerBase implements KernelControllerEventInterface\n{\n    use AdminStyleTrait;\n    use ElementEditLockHelperTrait;\n    use ApplySchedulerDataTrait;\n\n    /**\n     * @var Asset\\Service\n     */\n    protected $_assetService;\n\n    /**\n     * @Route(\"/tree-get-root\", name=\"pimcore_admin_asset_treegetroot\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetRootAction(Request $request)\n    {\n        return parent::treeGetRootAction($request);\n    }\n\n    /**\n     * @Route(\"/delete-info\", name=\"pimcore_admin_asset_deleteinfo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function deleteInfoAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        return parent::deleteInfoAction($request, $eventDispatcher);\n    }\n\n    /**\n     * @Route(\"/get-data-by-id\", name=\"pimcore_admin_asset_getdatabyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDataByIdAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $assetId = (int)$request->get('id');\n        $type = (string)$request->get('type');\n\n        $asset = Asset::getById($assetId);\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        // check for lock on non-folder items only.\n        if ($type !== 'folder' && ($asset->isAllowed('publish') || $asset->isAllowed('delete'))) {\n            if (Element\\Editlock::isLocked($assetId, 'asset')) {\n                return $this->getEditLockResponse($assetId, 'asset');\n            }\n\n            Element\\Editlock::lock($request->get('id'), 'asset');\n        }\n\n        $asset = clone $asset;\n        $asset->setParent(null);\n\n        $asset->setStream(null);\n        $data = $asset->getObjectVars();\n        $data['locked'] = $asset->isLocked();\n\n        if ($asset instanceof Asset\\Text) {\n            if ($asset->getFileSize() < 2000000) {\n                // it doesn't make sense to show a preview for files bigger than 2MB\n                $data['data'] = \\ForceUTF8\\Encoding::toUTF8($asset->getData());\n            } else {\n                $data['data'] = false;\n            }\n        } elseif ($asset instanceof Asset\\Document) {\n            $data['pdfPreviewAvailable'] = (bool)$this->getDocumentPreviewPdf($asset);\n        } elseif ($asset instanceof Asset\\Video) {\n            $videoInfo = [];\n\n            if (\\Pimcore\\Video::isAvailable()) {\n                $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n                $thumbnail = $asset->getThumbnail($config, ['mp4']);\n                if ($thumbnail) {\n                    if ($thumbnail['status'] == 'finished') {\n                        $videoInfo['previewUrl'] = $thumbnail['formats']['mp4'];\n                        $videoInfo['width'] = $asset->getWidth();\n                        $videoInfo['height'] = $asset->getHeight();\n\n                        $metaData = $asset->getSphericalMetaData();\n                        if (isset($metaData['ProjectionType']) && strtolower($metaData['ProjectionType']) == 'equirectangular') {\n                            $videoInfo['isVrVideo'] = true;\n                        }\n                    }\n                }\n            }\n\n            $data['videoInfo'] = $videoInfo;\n        } elseif ($asset instanceof Asset\\Image) {\n            $imageInfo = [];\n\n            $previewUrl = $this->generateUrl('pimcore_admin_asset_getimagethumbnail', [\n                'id' => $asset->getId(),\n                'treepreview' => true,\n                '_dc' => time(),\n            ]);\n\n            if ($asset->isAnimated()) {\n                $previewUrl = $this->generateUrl('pimcore_admin_asset_getasset', [\n                    'id' => $asset->getId(),\n                    '_dc' => time(),\n                ]);\n            }\n\n            $imageInfo['previewUrl'] = $previewUrl;\n\n            if ($asset->getWidth() && $asset->getHeight()) {\n                $imageInfo['dimensions'] = [];\n                $imageInfo['dimensions']['width'] = $asset->getWidth();\n                $imageInfo['dimensions']['height'] = $asset->getHeight();\n            }\n\n            $imageInfo['exiftoolAvailable'] = (bool)\\Pimcore\\Tool\\Console::getExecutable('exiftool');\n\n            if (!$asset->getEmbeddedMetaData(false)) {\n                $asset->getEmbeddedMetaData(true, false); // read Exif, IPTC and XPM like in the old days ...\n            }\n\n            $data['imageInfo'] = $imageInfo;\n        }\n\n        $predefinedMetaData = Metadata\\Predefined\\Listing::getByTargetType('asset', [$asset->getType()]);\n        $predefinedMetaDataGroups = [];\n        /** @var Metadata\\Predefined $item */\n        foreach ($predefinedMetaData as $item) {\n            if ($item->getGroup()) {\n                $predefinedMetaDataGroups[$item->getGroup()] = true;\n            }\n        }\n        $data['predefinedMetaDataGroups'] = array_keys($predefinedMetaDataGroups);\n        $data['properties'] = Element\\Service::minimizePropertiesForEditmode($asset->getProperties());\n        $data['metadata'] = Asset\\Service::expandMetadataForEditmode($asset->getMetadata());\n        $data['versionDate'] = $asset->getModificationDate();\n        $data['filesizeFormatted'] = $asset->getFileSize(true);\n        $data['filesize'] = $asset->getFileSize();\n        $data['fileExtension'] = File::getFileExtension($asset->getFilename());\n        $data['idPath'] = Element\\Service::getIdPath($asset);\n        $data['userPermissions'] = $asset->getUserPermissions($this->getAdminUser());\n        $frontendPath = $asset->getFrontendFullPath();\n        $data['url'] = preg_match('/^http(s)?:\\\\/\\\\/.+/', $frontendPath) ?\n            $frontendPath :\n            $request->getSchemeAndHttpHost() . $frontendPath;\n\n        $data['scheduledTasks'] = array_map(\n            static function (Task $task) {\n                return $task->getObjectVars();\n            },\n            $asset->getScheduledTasks()\n        );\n\n        $this->addAdminStyle($asset, ElementAdminStyleEvent::CONTEXT_EDITOR, $data);\n\n        $data['php'] = [\n            'classes' => array_merge([get_class($asset)], array_values(class_parents($asset))),\n            'interfaces' => array_values(class_implements($asset)),\n        ];\n\n        $event = new GenericEvent($this, [\n            'data' => $data,\n            'asset' => $asset,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::ASSET_GET_PRE_SEND_DATA);\n        $data = $event->getArgument('data');\n\n        if ($asset->isAllowed('view')) {\n            return $this->adminJson($data);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/tree-get-childs-by-id\", name=\"pimcore_admin_asset_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $assets = [];\n        $cv = false;\n        $asset = Asset::getById($allParams['node']);\n\n        $filter = $request->get('filter');\n        $limit = (int)$allParams['limit'];\n        if (!is_null($filter)) {\n            if (substr($filter, -1) != '*') {\n                $filter .= '*';\n            }\n            $filter = str_replace('*', '%', $filter);\n\n            $limit = 100;\n            $offset = 0;\n        } elseif (!$allParams['limit']) {\n            $limit = 100000000;\n        }\n\n        $offset = isset($allParams['start']) ? (int)$allParams['start'] : 0;\n\n        $filteredTotalCount = 0;\n\n        if ($asset->hasChildren()) {\n            if ($allParams['view']) {\n                $cv = \\Pimcore\\Model\\Element\\Service::getCustomViewById($allParams['view']);\n            }\n\n            // get assets\n            $childrenList = new Asset\\Listing();\n            $childrenList->addConditionParam('parentId = ?', [$asset->getId()]);\n            $childrenList->filterAccessibleByUser($this->getAdminUser(), $asset);\n\n            if (!is_null($filter)) {\n                $childrenList->addConditionParam('CAST(assets.filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci LIKE ?', [$filter]);\n            }\n\n            $childrenList->setLimit($limit);\n            $childrenList->setOffset($offset);\n            $childrenList->setOrderKey(\"FIELD(assets.type, 'folder') DESC, CAST(assets.filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci ASC\", false);\n\n            \\Pimcore\\Model\\Element\\Service::addTreeFilterJoins($cv, $childrenList);\n\n            $beforeListLoadEvent = new GenericEvent($this, [\n                'list' => $childrenList,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n            /** @var Asset\\Listing $childrenList */\n            $childrenList = $beforeListLoadEvent->getArgument('list');\n\n            $children = $childrenList->load();\n\n            $filteredTotalCount = $childrenList->getTotalCount();\n\n            foreach ($children as $childAsset) {\n                $assetTreeNode = $this->getTreeNodeConfig($childAsset);\n                if ($assetTreeNode['permissions']['list'] == 1) {\n                    $assets[] = $assetTreeNode;\n                }\n            }\n        }\n\n        //Hook for modifying return value - e.g. for changing permissions based on asset data\n        $event = new GenericEvent($this, [\n            'assets' => $assets,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::ASSET_TREE_GET_CHILDREN_BY_ID_PRE_SEND_DATA);\n        $assets = $event->getArgument('assets');\n\n        if ($allParams['limit']) {\n            return $this->adminJson([\n                'offset' => $offset,\n                'limit' => $limit,\n                'total' => $asset->getChildAmount($this->getAdminUser()),\n                'overflow' => !is_null($filter) && ($filteredTotalCount > $limit),\n                'nodes' => $assets,\n                'filter' => $request->get('filter') ? $request->get('filter') : '',\n                'inSearch' => (int)$request->get('inSearch'),\n            ]);\n        } else {\n            return $this->adminJson($assets);\n        }\n    }\n\n    /**\n     * @Route(\"/add-asset\", name=\"pimcore_admin_asset_addasset\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function addAssetAction(Request $request, Config $config)\n    {\n        try {\n            $res = $this->addAsset($request, $config);\n\n            $response = [\n                'success' => $res['success'],\n            ];\n\n            if ($res['success']) {\n                $response['asset'] = [\n                    'id' => $res['asset']->getId(),\n                    'path' => $res['asset']->getFullPath(),\n                    'type' => $res['asset']->getType(),\n                ];\n            }\n\n            return $this->adminJson($response);\n        } catch (\\Exception $e) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $e->getMessage(),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/add-asset-compatibility\", name=\"pimcore_admin_asset_addassetcompatibility\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function addAssetCompatibilityAction(Request $request, Config $config)\n    {\n        try {\n            // this is a special action for the compatibility mode upload (without flash)\n            $res = $this->addAsset($request, $config);\n\n            $response = $this->adminJson([\n                'success' => $res['success'],\n                'msg' => $res['success'] ? 'Success' : 'Error',\n                'id' => $res['asset'] ? $res['asset']->getId() : null,\n                'fullpath' => $res['asset'] ? $res['asset']->getRealFullPath() : null,\n                'type' => $res['asset'] ? $res['asset']->getType() : null,\n            ]);\n            $response->headers->set('Content-Type', 'text/html');\n\n            return $response;\n        } catch (\\Exception $e) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $e->getMessage(),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/exists\", name=\"pimcore_admin_asset_exists\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function existsAction(Request $request)\n    {\n        $parentAsset = \\Pimcore\\Model\\Asset::getById((int)$request->get('parentId'));\n\n        return new JsonResponse([\n            'exists' => Asset\\Service::pathExists($parentAsset->getRealFullPath().'/'.$request->get('filename')),\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function addAsset(Request $request, Config $config)\n    {\n        $defaultUploadPath = $config['assets']['default_upload_path'] ?? '/';\n\n        if (array_key_exists('Filedata', $_FILES)) {\n            $filename = $_FILES['Filedata']['name'];\n            $sourcePath = $_FILES['Filedata']['tmp_name'];\n        } elseif ($request->get('type') == 'base64') {\n            $filename = $request->get('filename');\n            $sourcePath = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/upload-base64' . uniqid() . '.tmp';\n            $data = preg_replace('@^data:[^,]+;base64,@', '', $request->get('data'));\n            File::put($sourcePath, base64_decode($data));\n        } else {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        $parentId = $request->get('parentId');\n        $parentPath = $request->get('parentPath');\n\n        if ($request->get('dir') && $request->get('parentId')) {\n            // this is for uploading folders with Drag&Drop\n            // param \"dir\" contains the relative path of the file\n            $parent = Asset::getById((int) $request->get('parentId'));\n            $dir = $request->get('dir');\n            if (strpos($dir, '..') !== false) {\n                throw new \\Exception('not allowed');\n            }\n\n            $newPath = $parent->getRealFullPath() . '/' . trim($dir, '/ ');\n\n            $maxRetries = 5;\n            $newParent = null;\n            for ($retries = 0; $retries < $maxRetries; $retries++) {\n                try {\n                    $newParent = Asset\\Service::createFolderByPath($newPath);\n\n                    break;\n                } catch (\\Exception $e) {\n                    if ($retries < ($maxRetries - 1)) {\n                        $waitTime = rand(100000, 900000); // microseconds\n                        usleep($waitTime); // wait specified time until we restart the transaction\n                    } else {\n                        // if the transaction still fail after $maxRetries retries, we throw out the exception\n                        throw $e;\n                    }\n                }\n            }\n            if ($newParent) {\n                $parentId = $newParent->getId();\n            }\n        } elseif (!$request->get('parentId') && $parentPath) {\n            $parent = Asset::getByPath($parentPath);\n            if ($parent instanceof Asset\\Folder) {\n                $parentId = $parent->getId();\n            }\n        }\n\n        $filename = Element\\Service::getValidKey($filename, 'asset');\n        if (empty($filename)) {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        $context = $request->get('context');\n        if ($context) {\n            $context = json_decode($context, true);\n            $context = $context ?: [];\n\n            $this->validateManyToManyRelationAssetType($context, $filename, $sourcePath);\n\n            $event = new ResolveUploadTargetEvent($parentId, $filename, $context);\n            \\Pimcore::getEventDispatcher()->dispatch($event, AssetEvents::RESOLVE_UPLOAD_TARGET);\n            $filename = Element\\Service::getValidKey($event->getFilename(), 'asset');\n            $parentId = $event->getParentId();\n        }\n\n        if (!$parentId) {\n            $parentId = Asset\\Service::createFolderByPath($defaultUploadPath)->getId();\n        }\n\n        $parentAsset = Asset::getById((int)$parentId);\n\n        if (!$request->get('allowOverwrite')) {\n            // check for duplicate filename\n            $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n        }\n\n        if (!$parentAsset->isAllowed('create')) {\n            throw $this->createAccessDeniedHttpException(\n                'Missing the permission to create new assets in the folder: ' . $parentAsset->getRealFullPath()\n            );\n        }\n\n        if (is_file($sourcePath) && filesize($sourcePath) < 1) {\n            throw new \\Exception('File is empty!');\n        } elseif (!is_file($sourcePath)) {\n            throw new \\Exception('Something went wrong, please check upload_max_filesize and post_max_size in your php.ini as well as the write permissions of your temporary directories.');\n        }\n\n        // check if there is a requested type and if matches the asset type of the uploaded file\n        $uploadAssetType = $request->get('uploadAssetType');\n        if ($uploadAssetType) {\n            $mimetype = MimeTypes::getDefault()->guessMimeType($sourcePath);\n            $assetType = Asset::getTypeFromMimeMapping($mimetype, $filename);\n\n            if ($uploadAssetType !== $assetType) {\n                throw new \\Exception(\"Mime type $mimetype does not match with asset type: $uploadAssetType\");\n            }\n        }\n\n        if ($request->get('allowOverwrite') && Asset\\Service::pathExists($parentAsset->getRealFullPath().'/'.$filename)) {\n            $asset = Asset::getByPath($parentAsset->getRealFullPath().'/'.$filename);\n            $asset->setStream(fopen($sourcePath, 'rb', false, File::getContext()));\n            $asset->save();\n        } else {\n            $asset = Asset::create($parentId, [\n                'filename' => $filename,\n                'sourcePath' => $sourcePath,\n                'userOwner' => $this->getAdminUser()->getId(),\n                'userModification' => $this->getAdminUser()->getId(),\n            ]);\n        }\n\n        @unlink($sourcePath);\n\n        return [\n            'success' => true,\n            'asset' => $asset,\n        ];\n    }\n\n    /**\n     * @param string $targetPath\n     * @param string $filename\n     *\n     * @return string\n     */\n    protected function getSafeFilename($targetPath, $filename)\n    {\n        $pathinfo = pathinfo($filename);\n        $originalFilename = $pathinfo['filename'];\n        $originalFileextension = empty($pathinfo['extension']) ? '' : '.' . $pathinfo['extension'];\n        $count = 1;\n\n        if ($targetPath == '/') {\n            $targetPath = '';\n        }\n\n        while (true) {\n            if (Asset\\Service::pathExists($targetPath . '/' . $filename)) {\n                $filename = $originalFilename . '_' . $count . $originalFileextension;\n                $count++;\n            } else {\n                return $filename;\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/replace-asset\", name=\"pimcore_admin_asset_replaceasset\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function replaceAssetAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        $newFilename = Element\\Service::getValidKey($_FILES['Filedata']['name'], 'asset');\n        $mimetype = MimeTypes::getDefault()->guessMimeType($_FILES['Filedata']['tmp_name']);\n        $newType = Asset::getTypeFromMimeMapping($mimetype, $newFilename);\n\n        if ($newType != $asset->getType()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => sprintf($this->trans('asset_type_change_not_allowed', [], 'admin'), $asset->getType(), $newType),\n            ]);\n        }\n\n        $stream = fopen($_FILES['Filedata']['tmp_name'], 'r+');\n        $asset->setStream($stream);\n        $asset->setCustomSetting('thumbnails', null);\n        $asset->setUserModification($this->getAdminUser()->getId());\n\n        $newFileExt = File::getFileExtension($newFilename);\n        $currentFileExt = File::getFileExtension($asset->getFilename());\n        if ($newFileExt != $currentFileExt) {\n            $newFilename = preg_replace('/\\.' . $currentFileExt . '$/i', '.' . $newFileExt, $asset->getFilename());\n            $newFilename = Element\\Service::getSafeCopyName($newFilename, $asset->getParent());\n            $asset->setFilename($newFilename);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->save();\n\n            $response = $this->adminJson([\n                'id' => $asset->getId(),\n                'path' => $asset->getRealFullPath(),\n                'success' => true,\n            ]);\n\n            // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n            // Ext.form.Action.Submit and mark the submission as failed\n            $response->headers->set('Content-Type', 'text/html');\n\n            return $response;\n        } else {\n            throw new \\Exception('missing permission');\n        }\n    }\n\n    /**\n     * @Route(\"/add-folder\", name=\"pimcore_admin_asset_addfolder\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addFolderAction(Request $request)\n    {\n        $success = false;\n        $parentAsset = Asset::getById((int)$request->get('parentId'));\n        $equalAsset = Asset::getByPath($parentAsset->getRealFullPath() . '/' . $request->get('name'));\n\n        if ($parentAsset->isAllowed('create')) {\n            if (!$equalAsset) {\n                $asset = Asset::create($request->get('parentId'), [\n                    'filename' => $request->get('name'),\n                    'type' => 'folder',\n                    'userOwner' => $this->getAdminUser()->getId(),\n                    'userModification' => $this->getAdminUser()->getId(),\n                ]);\n                $success = true;\n            }\n        } else {\n            Logger::debug('prevented creating asset because of missing permissions');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_asset_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $type = $request->get('type');\n\n        if ($type === 'childs') {\n            trigger_deprecation(\n                'pimcore/pimcore',\n                '10.4',\n                'Type childs is deprecated. Use children instead'\n            );\n            $type = 'children';\n        }\n        if ($type === 'children') {\n            $parentAsset = Asset::getById((int) $request->get('id'));\n\n            $list = new Asset\\Listing();\n            $list->setCondition('path LIKE ?', [Helper::escapeLike($parentAsset->getRealFullPath()) . '/%']);\n            $list->setLimit((int)$request->get('amount'));\n            $list->setOrderKey('LENGTH(path)', false);\n            $list->setOrder('DESC');\n\n            $deletedItems = [];\n            foreach ($list as $asset) {\n                $deletedItems[$asset->getId()] = $asset->getRealFullPath();\n                if ($asset->isAllowed('delete') && !$asset->isLocked()) {\n                    $asset->delete();\n                }\n            }\n\n            return $this->adminJson(['success' => true, 'deleted' => $deletedItems]);\n        }\n        if ($request->get('id')) {\n            $asset = Asset::getById((int) $request->get('id'));\n            if ($asset && $asset->isAllowed('delete')) {\n                if ($asset->isLocked()) {\n                    return $this->adminJson([\n                        'success' => false,\n                        'message' => 'prevented deleting asset, because it is locked: ID: ' . $asset->getId(),\n                    ]);\n                }\n\n                $asset->delete();\n\n                return $this->adminJson(['success' => true]);\n            }\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @param Asset $element\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($element)\n    {\n        $asset = $element;\n\n        $permissions =  $asset->getUserPermissions($this->getAdminUser());\n\n        $tmpAsset = [\n            'id' => $asset->getId(),\n            'key' => $element->getKey(),\n            'text' => htmlspecialchars($asset->getFilename()),\n            'type' => $asset->getType(),\n            'path' => $asset->getRealFullPath(),\n            'basePath' => $asset->getRealPath(),\n            'locked' => $asset->isLocked(),\n            'lockOwner' => $asset->getLocked() ? true : false,\n            'elementType' => 'asset',\n            'permissions' => [\n                'remove' => $permissions['delete'],\n                'settings' => $permissions['settings'],\n                'rename' => $permissions['rename'],\n                'publish' => $permissions['publish'],\n                'view' => $permissions['view'],\n                'list' => $permissions['list'],\n            ],\n        ];\n\n        $hasChildren = $asset->getDao()->hasChildren($this->getAdminUser());\n\n        // set type specific settings\n        if ($asset instanceof Asset\\Folder) {\n            $tmpAsset['leaf'] = false;\n            $tmpAsset['expanded'] = !$hasChildren;\n            $tmpAsset['loaded'] = !$hasChildren;\n            $tmpAsset['permissions']['create'] = $permissions['create'];\n            $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n        } else {\n            $tmpAsset['leaf'] = true;\n            $tmpAsset['expandable'] = false;\n            $tmpAsset['expanded'] = false;\n        }\n\n        $this->addAdminStyle($asset, ElementAdminStyleEvent::CONTEXT_TREE, $tmpAsset);\n\n        if ($asset instanceof Asset\\Image) {\n            try {\n                $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n\n                // we need the dimensions for the wysiwyg editors, so that they can resize the image immediately\n                if ($asset->getCustomSetting('imageDimensionsCalculated')) {\n                    $tmpAsset['imageWidth'] = $asset->getCustomSetting('imageWidth');\n                    $tmpAsset['imageHeight'] = $asset->getCustomSetting('imageHeight');\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of image, seems to be broken.');\n            }\n        } elseif ($asset->getType() == 'video') {\n            try {\n                if (\\Pimcore\\Video::isAvailable()) {\n                    $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of video, seems to be broken.');\n            }\n        } elseif ($asset->getType() == 'document') {\n            try {\n                // add the PDF check here, otherwise the preview layer in admin is shown without content\n                if (\\Pimcore\\Document::isAvailable() && \\Pimcore\\Document::isFileTypeSupported($asset->getFilename())) {\n                    $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of video, seems to be broken.');\n            }\n        }\n\n        $tmpAsset['cls'] = '';\n        if ($asset->isLocked()) {\n            $tmpAsset['cls'] .= 'pimcore_treenode_locked ';\n        }\n        if ($asset->getLocked()) {\n            $tmpAsset['cls'] .= 'pimcore_treenode_lockOwner ';\n        }\n\n        return $tmpAsset;\n    }\n\n    /**\n     * @param Asset $asset\n     * @param array $params\n     *\n     * @return null|string\n     */\n    protected function getThumbnailUrl(Asset $asset, array $params = [])\n    {\n        $defaults = [\n            'id' => $asset->getId(),\n            'treepreview' => true,\n            '_dc' => $asset->getModificationDate(),\n        ];\n\n        $params = array_merge($defaults, $params);\n\n        if ($asset instanceof Asset\\Image) {\n            return $this->generateUrl('pimcore_admin_asset_getimagethumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Folder) {\n            return $this->generateUrl('pimcore_admin_asset_getfolderthumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Video && \\Pimcore\\Video::isAvailable()) {\n            return $this->generateUrl('pimcore_admin_asset_getvideothumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Document && \\Pimcore\\Document::isAvailable() && $asset->getPageCount()) {\n            return $this->generateUrl('pimcore_admin_asset_getdocumentthumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Audio) {\n            return '/bundles/pimcoreadmin/img/flat-color-icons/speaker.svg';\n        }\n\n        if ($asset instanceof Asset) {\n            return '/bundles/pimcoreadmin/img/filetype-not-supported.svg';\n        }\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_asset_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $success = false;\n        $allowUpdate = true;\n\n        $updateData = array_merge($request->request->all(), $request->query->all());\n\n        $asset = Asset::getById((int) $request->get('id'));\n        if ($asset->isAllowed('settings')) {\n            $asset->setUserModification($this->getAdminUser()->getId());\n\n            // if the position is changed the path must be changed || also from the children\n            if ($parentId = $request->get('parentId')) {\n                $parentAsset = Asset::getById((int) $parentId);\n\n                //check if parent is changed i.e. asset is moved\n                if ($asset->getParentId() != $parentAsset->getId()) {\n                    if (!$parentAsset->isAllowed('create')) {\n                        throw new \\Exception('Prevented moving asset - no create permission on new parent ');\n                    }\n\n                    $intendedPath = $parentAsset->getRealPath();\n                    $pKey = $parentAsset->getKey();\n                    if (!empty($pKey)) {\n                        $intendedPath .= $parentAsset->getKey() . '/';\n                    }\n\n                    $assetWithSamePath = Asset::getByPath($intendedPath . $asset->getKey());\n\n                    if ($assetWithSamePath != null) {\n                        $allowUpdate = false;\n                    }\n\n                    if ($asset->isLocked()) {\n                        $allowUpdate = false;\n                    }\n                }\n            }\n\n            if ($allowUpdate) {\n                if ($request->get('filename') != $asset->getFilename() && !$asset->isAllowed('rename')) {\n                    unset($updateData['filename']);\n                    Logger::debug('prevented renaming asset because of missing permissions ');\n                }\n\n                $asset->setValues($updateData);\n\n                try {\n                    $asset->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                }\n            } else {\n                $msg = 'prevented moving asset, asset with same path+key already exists at target location or the asset is locked. ID: ' . $asset->getId();\n                Logger::debug($msg);\n\n                return $this->adminJson(['success' => $success, 'message' => $msg]);\n            }\n        } elseif ($asset->isAllowed('rename') && $request->get('filename')) {\n            //just rename\n            try {\n                $asset->setFilename($request->get('filename'));\n                $asset->save();\n                $success = true;\n            } catch (\\Exception $e) {\n                return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n            }\n        } else {\n            Logger::debug('prevented update asset because of missing permissions ');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/webdav{path}\", name=\"pimcore_admin_webdav\", requirements={\"path\"=\".*\"})\n     */\n    public function webdavAction()\n    {\n        $homeDir = Asset::getById(1);\n\n        try {\n            $publicDir = new Asset\\WebDAV\\Folder($homeDir);\n            $objectTree = new Asset\\WebDAV\\Tree($publicDir);\n            $server = new \\Sabre\\DAV\\Server($objectTree);\n            $server->setBaseUri($this->generateUrl('pimcore_admin_webdav', ['path' => '/']));\n\n            // lock plugin\n            /** @var \\Doctrine\\DBAL\\Driver\\PDOConnection $pdo */\n            $pdo = \\Pimcore\\Db::get()->getWrappedConnection();\n            $lockBackend = new \\Sabre\\DAV\\Locks\\Backend\\PDO($pdo);\n            $lockBackend->tableName = 'webdav_locks';\n\n            $lockPlugin = new \\Sabre\\DAV\\Locks\\Plugin($lockBackend);\n            $server->addPlugin($lockPlugin);\n\n            // browser plugin\n            $server->addPlugin(new \\Sabre\\DAV\\Browser\\Plugin());\n\n            $server->start();\n        } catch (\\Exception $e) {\n            Logger::error((string) $e);\n        }\n\n        exit;\n    }\n\n    /**\n     * @Route(\"/save\", name=\"pimcore_admin_asset_save\", methods={\"PUT\",\"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('publish')) {\n            // metadata\n            if ($request->get('metadata')) {\n                $metadata = $this->decodeJson($request->get('metadata'));\n\n                $metadataEvent = new GenericEvent($this, [\n                    'id' => $asset->getId(),\n                    'metadata' => $metadata,\n                ]);\n                $eventDispatcher->dispatch($metadataEvent, AdminEvents::ASSET_METADATA_PRE_SET);\n\n                $metadata = $metadataEvent->getArgument('metadata');\n                $metadataValues = $metadata['values'];\n\n                $metadataValues = Asset\\Service::minimizeMetadata($metadataValues, 'editor');\n                $asset->setMetadataRaw($metadataValues);\n            }\n\n            // properties\n            if ($request->get('properties')) {\n                $properties = [];\n                $propertiesData = $this->decodeJson($request->get('properties'));\n\n                if (is_array($propertiesData)) {\n                    foreach ($propertiesData as $propertyName => $propertyData) {\n                        $value = $propertyData['data'];\n\n                        try {\n                            $property = new Model\\Property();\n                            $property->setType($propertyData['type']);\n                            $property->setName($propertyName);\n                            $property->setCtype('asset');\n                            $property->setDataFromEditmode($value);\n                            $property->setInheritable($propertyData['inheritable']);\n\n                            $properties[$propertyName] = $property;\n                        } catch (\\Exception $e) {\n                            Logger::err(\"Can't add \" . $propertyName . ' to asset ' . $asset->getRealFullPath());\n                        }\n                    }\n\n                    $asset->setProperties($properties);\n                }\n            }\n\n            $this->applySchedulerDataToElement($request, $asset);\n\n            if ($request->get('data')) {\n                $asset->setData($request->get('data'));\n            }\n\n            // image specific data\n            if ($asset instanceof Asset\\Image) {\n                if ($request->get('image')) {\n                    $imageData = $this->decodeJson($request->get('image'));\n                    if (isset($imageData['focalPoint'])) {\n                        $asset->setCustomSetting('focalPointX', $imageData['focalPoint']['x']);\n                        $asset->setCustomSetting('focalPointY', $imageData['focalPoint']['y']);\n                        $asset->removeCustomSetting('disableFocalPointDetection');\n                    }\n                } else {\n                    // wipe all data\n                    $asset->removeCustomSetting('focalPointX');\n                    $asset->removeCustomSetting('focalPointY');\n                    $asset->setCustomSetting('disableFocalPointDetection', true);\n                }\n            }\n\n            $asset->setUserModification($this->getAdminUser()->getId());\n            if ($request->get('task') === 'session') {\n                // save to session only\n                Asset\\Service::saveElementToSession($asset);\n            } else {\n                $asset->save();\n            }\n\n            $treeData = $this->getTreeNodeConfig($asset);\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => [\n                    'versionDate' => $asset->getModificationDate(),\n                    'versionCount' => $asset->getVersionCount(),\n                ],\n                'treeData' => $treeData,\n            ]);\n        } else {\n            throw $this->createAccessDeniedHttpException();\n        }\n    }\n\n    /**\n     * @Route(\"/publish-version\", name=\"pimcore_admin_asset_publishversion\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function publishVersionAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $version = Model\\Version::getById($id);\n        $asset = $version?->loadData();\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Version with id [' . $id . \"] doesn't exist\");\n        }\n\n        $currentAsset = Asset::getById($asset->getId());\n        if ($currentAsset->isAllowed('publish')) {\n            try {\n                $asset->setUserModification($this->getAdminUser()->getId());\n                $asset->save();\n\n                $treeData = $this->getTreeNodeConfig($asset);\n\n                return $this->adminJson(['success' => true, 'treeData' => $treeData]);\n            } catch (\\Exception $e) {\n                return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n            }\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/show-version\", name=\"pimcore_admin_asset_showversion\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function showVersionAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $version = Model\\Version::getById($id);\n        $asset = $version?->loadData();\n        if (!$asset) {\n            throw $this->createNotFoundException('Version with id [' . $id . \"] doesn't exist\");\n        }\n\n        if (!$asset->isAllowed('versions')) {\n            throw $this->createAccessDeniedHttpException('Permission denied, version id [' . $id . ']');\n        }\n\n        $loader = \\Pimcore::getContainer()->get('pimcore.implementation_loader.asset.metadata.data');\n\n        return $this->render(\n            '@PimcoreAdmin/Admin/Asset/showVersion' . ucfirst($asset->getType()) . '.html.twig',\n            [\n                'asset' => $asset,\n                'loader' => $loader,\n            ]\n        );\n    }\n\n    /**\n     * @Route(\"/download\", name=\"pimcore_admin_asset_download\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function downloadAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view asset');\n        }\n\n        $stream = $asset->getStream();\n\n        if (!is_resource($stream)) {\n            throw $this->createNotFoundException('Unable to get resource for asset ' . $asset->getId());\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $asset->getMimeType(),\n            'Content-Disposition' => sprintf('attachment; filename=\"%s\"', $asset->getFilename()),\n            'Content-Length' => $asset->getFileSize(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-image-thumbnail\", name=\"pimcore_admin_asset_downloadimagethumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadImageThumbnailAction(Request $request)\n    {\n        $image = Asset\\Image::getById((int) $request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $config = null;\n        $thumbnail = null;\n        $thumbnailName = $request->get('thumbnail');\n        $thumbnailFile = null;\n        $deleteThumbnail = true;\n\n        if ($request->get('config')) {\n            $config = $this->decodeJson($request->get('config'));\n        } elseif ($request->get('type')) {\n            $predefined = [\n                'web' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 3500,\n                    'dpi' => 72,\n                    'format' => 'JPEG',\n                    'quality' => 85,\n                ],\n                'print' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 6000,\n                    'dpi' => 300,\n                    'format' => 'JPEG',\n                    'quality' => 95,\n                ],\n                'office' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 1190,\n                    'dpi' => 144,\n                    'format' => 'JPEG',\n                    'quality' => 90,\n                ],\n            ];\n\n            $config = $predefined[$request->get('type')];\n        } elseif ($thumbnailName) {\n            $thumbnail = $image->getThumbnail($thumbnailName);\n            $deleteThumbnail = false;\n        }\n\n        if ($config) {\n            $thumbnailConfig = new Asset\\Image\\Thumbnail\\Config();\n            $thumbnailConfig->setName('pimcore-download-' . $image->getId() . '-' . md5($request->get('config')));\n\n            if ($config['resize_mode'] == 'scaleByWidth') {\n                $thumbnailConfig->addItem('scaleByWidth', [\n                    'width' => $config['width'],\n                ]);\n            } elseif ($config['resize_mode'] == 'scaleByHeight') {\n                $thumbnailConfig->addItem('scaleByHeight', [\n                    'height' => $config['height'],\n                ]);\n            } else {\n                $thumbnailConfig->addItem('resize', [\n                    'width' => $config['width'],\n                    'height' => $config['height'],\n                ]);\n            }\n\n            $thumbnailConfig->setQuality($config['quality']);\n            $thumbnailConfig->setFormat($config['format']);\n            $thumbnailConfig->setRasterizeSVG(true);\n\n            if ($thumbnailConfig->getFormat() == 'JPEG') {\n                $thumbnailConfig->setPreserveMetaData(true);\n\n                if (empty($config['quality'])) {\n                    $thumbnailConfig->setPreserveColor(true);\n                }\n            }\n\n            $thumbnail = $image->getThumbnail($thumbnailConfig);\n            $thumbnailFile = $thumbnail->getLocalFile();\n\n            $exiftool = \\Pimcore\\Tool\\Console::getExecutable('exiftool');\n            if ($thumbnailConfig->getFormat() == 'JPEG' && $exiftool && isset($config['dpi']) && $config['dpi']) {\n                $process = new Process([$exiftool, '-overwrite_original', '-xresolution=' . (int)$config['dpi'], '-yresolution=' . (int)$config['dpi'], '-resolutionunit=inches', $thumbnailFile]);\n                $process->run();\n            }\n        }\n\n        if ($thumbnail) {\n            $thumbnailFile = $thumbnailFile ?: $thumbnail->getLocalFile();\n\n            $downloadFilename = preg_replace(\n                '/\\.' . preg_quote(File::getFileExtension($image->getFilename())) . '$/i',\n                '.' . $thumbnail->getFileExtension(),\n                $image->getFilename()\n            );\n            $downloadFilename = strtolower($downloadFilename);\n\n            clearstatcache();\n\n            $response = new BinaryFileResponse($thumbnailFile);\n            $response->headers->set('Content-Type', $thumbnail->getMimeType());\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $downloadFilename);\n            $this->addThumbnailCacheHeaders($response);\n            $response->deleteFileAfterSend($deleteThumbnail);\n\n            return $response;\n        }\n\n        throw $this->createNotFoundException('Thumbnail not found');\n    }\n\n    /**\n     * @Route(\"/get-asset\", name=\"pimcore_admin_asset_getasset\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getAssetAction(Request $request)\n    {\n        $image = Asset::getById((int)$request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view asset');\n        }\n\n        $stream = $image->getStream();\n\n        if (!is_resource($stream)) {\n            throw $this->createNotFoundException('Unable to get resource for asset ' . $image->getId());\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $image->getMimeType(),\n            'Access-Control-Allow-Origin' => '*',\n        ]);\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-image-thumbnail\", name=\"pimcore_admin_asset_getimagethumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse|JsonResponse|BinaryFileResponse\n     */\n    public function getImageThumbnailAction(Request $request)\n    {\n        $fileinfo = $request->get('fileinfo');\n        $image = Asset\\Image::getById((int)$request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnailConfig = null;\n\n        if ($request->get('thumbnail')) {\n            $thumbnailConfig = $image->getThumbnailConfig($request->get('thumbnail'));\n        }\n        if (!$thumbnailConfig) {\n            if ($request->get('config')) {\n                $thumbnailConfig = $image->getThumbnailConfig($this->decodeJson($request->get('config')));\n            } else {\n                $thumbnailConfig = $image->getThumbnailConfig(array_merge($request->request->all(), $request->query->all()));\n            }\n        } else {\n            // no high-res images in admin mode (editmode)\n            // this is mostly because of the document's image editable, which doesn't know anything about the thumbnail\n            // configuration, so the dimensions would be incorrect (double the size)\n            $thumbnailConfig->setHighResolution(1);\n        }\n\n        $format = strtolower($thumbnailConfig->getFormat());\n        if ($format == 'source' || $format == 'print') {\n            $thumbnailConfig->setFormat('PNG');\n            $thumbnailConfig->setRasterizeSVG(true);\n        }\n\n        if ($request->get('treepreview')) {\n            $thumbnailConfig = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n            if ($request->get('origin') === 'treeNode' && !$image->getThumbnail($thumbnailConfig)->exists()) {\n                \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                    new AssetPreviewImageMessage($image->getId())\n                );\n\n                throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $image->getId()));\n            }\n        }\n\n        $cropPercent = $request->get('cropPercent');\n        if ($cropPercent && filter_var($cropPercent, FILTER_VALIDATE_BOOLEAN)) {\n            $thumbnailConfig->addItemAt(0, 'cropPercent', [\n                'width' => $request->get('cropWidth'),\n                'height' => $request->get('cropHeight'),\n                'y' => $request->get('cropTop'),\n                'x' => $request->get('cropLeft'),\n            ]);\n\n            $hash = md5(Tool\\Serialize::serialize(array_merge($request->request->all(), $request->query->all())));\n            $thumbnailConfig->setName($thumbnailConfig->getName() . '_auto_' . $hash);\n        }\n\n        $thumbnail = $image->getThumbnail($thumbnailConfig);\n\n        if ($fileinfo) {\n            return $this->adminJson([\n                'width' => $thumbnail->getWidth(),\n                'height' => $thumbnail->getHeight(), ]);\n        }\n\n        $stream = $thumbnail->getStream();\n\n        if (!$stream) {\n            return new BinaryFileResponse(PIMCORE_PATH . '/bundles/AdminBundle/Resources/public/img/filetype-not-supported.svg');\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $thumbnail->getMimeType(),\n            'Access-Control-Allow-Origin', '*',\n        ]);\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-folder-thumbnail\", name=\"pimcore_admin_asset_getfolderthumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getFolderThumbnailAction(Request $request)\n    {\n        $folder = null;\n\n        if ($request->get('id')) {\n            $folder = Asset\\Folder::getById((int)$request->get('id'));\n            if ($folder instanceof  Asset\\Folder) {\n                if (!$folder->isAllowed('view')) {\n                    throw $this->createAccessDeniedException('not allowed to view thumbnail');\n                }\n\n                $stream = $folder->getPreviewImage();\n                if (!$stream) {\n                    throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $folder->getId()));\n                } else {\n                    $response = new StreamedResponse(function () use ($stream) {\n                        fpassthru($stream);\n                    }, 200, [\n                        'Content-Type' => 'image/jpg',\n                    ]);\n                }\n\n                $this->addThumbnailCacheHeaders($response);\n\n                return $response;\n            }\n        }\n\n        throw $this->createNotFoundException('could not load asset folder');\n    }\n\n    /**\n     * @Route(\"/get-video-thumbnail\", name=\"pimcore_admin_asset_getvideothumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getVideoThumbnailAction(Request $request)\n    {\n        $video = null;\n\n        if ($request->get('id')) {\n            $video = Asset\\Video::getById((int)$request->get('id'));\n        } elseif ($request->get('path')) {\n            $video = Asset\\Video::getByPath($request->get('path'));\n        }\n\n        if (!$video) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$video->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnail = array_merge($request->request->all(), $request->query->all());\n\n        if ($request->get('treepreview')) {\n            $thumbnail = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n        }\n\n        $time = null;\n        if (is_numeric($request->get('time'))) {\n            $time = (int)$request->get('time');\n        }\n\n        if ($request->get('settime')) {\n            $video->removeCustomSetting('image_thumbnail_asset');\n            $video->setCustomSetting('image_thumbnail_time', $time);\n            $video->save();\n        }\n\n        $image = null;\n        if ($request->get('image')) {\n            $image = Asset\\Image::getById((int)$request->get('image'));\n        }\n\n        if ($request->get('setimage') && $image) {\n            $video->removeCustomSetting('image_thumbnail_time');\n            $video->setCustomSetting('image_thumbnail_asset', $image->getId());\n            $video->save();\n        }\n\n        $thumb = $video->getImageThumbnail($thumbnail, $time, $image);\n\n        if ($request->get('origin') === 'treeNode' && !$thumb->exists()) {\n            \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                new AssetPreviewImageMessage($video->getId())\n            );\n\n            throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $video->getId()));\n        }\n\n        $stream = $thumb->getStream();\n        if (!$stream) {\n            throw $this->createNotFoundException('Unable to get video thumbnail for video ' . $video->getId());\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/' . $thumb->getFileExtension(),\n        ]);\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-document-thumbnail\", name=\"pimcore_admin_asset_getdocumentthumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse|BinaryFileResponse\n     */\n    public function getDocumentThumbnailAction(Request $request)\n    {\n        $document = Asset\\Document::getById((int)$request->get('id'));\n\n        if (!$document) {\n            throw $this->createNotFoundException('could not load document asset');\n        }\n\n        if (!$document->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnail = Asset\\Image\\Thumbnail\\Config::getByAutoDetect(array_merge($request->request->all(), $request->query->all()));\n\n        $format = strtolower($thumbnail->getFormat());\n        if ($format == 'source') {\n            $thumbnail->setFormat('jpeg'); // default format for documents is JPEG not PNG (=too big)\n        }\n\n        if ($request->get('treepreview')) {\n            $thumbnail = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n        }\n\n        $page = 1;\n        if (is_numeric($request->get('page'))) {\n            $page = (int)$request->get('page');\n        }\n\n        $thumb = $document->getImageThumbnail($thumbnail, $page);\n\n        if ($request->get('origin') === 'treeNode' && !$thumb->exists()) {\n            \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                new AssetPreviewImageMessage($document->getId())\n            );\n\n            throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $document->getId()));\n        }\n\n        $stream = $thumb->getStream();\n        if ($stream) {\n            $response = new StreamedResponse(function () use ($stream) {\n                fpassthru($stream);\n            }, 200, [\n                'Content-Type' => 'image/' . $thumb->getFileExtension(),\n            ]);\n        } else {\n            $response = new BinaryFileResponse(PIMCORE_PATH . '/bundles/AdminBundle/Resources/public/img/filetype-not-supported.svg');\n        }\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @param Response $response\n     */\n    protected function addThumbnailCacheHeaders(Response $response)\n    {\n        $lifetime = 300;\n        $date = new \\DateTime('now');\n        $date->add(new \\DateInterval('PT' . $lifetime . 'S'));\n\n        $response->setMaxAge($lifetime);\n        $response->setPublic();\n        $response->setExpires($date);\n        $response->headers->set('Pragma', '');\n    }\n\n    /**\n     * @Route(\"/get-preview-document\", name=\"pimcore_admin_asset_getpreviewdocument\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getPreviewDocumentAction(Request $request)\n    {\n        $asset = Asset\\Document::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load document asset');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $stream = $this->getDocumentPreviewPdf($asset);\n            if ($stream) {\n                return new StreamedResponse(function () use ($stream) {\n                    fpassthru($stream);\n                }, 200, [\n                    'Content-Type' => 'application/pdf',\n                ]);\n            } else {\n                throw $this->createNotFoundException('Unable to get preview for asset ' . $asset->getId());\n            }\n        } else {\n            throw $this->createAccessDeniedException('Access to asset ' . $asset->getId() . ' denied');\n        }\n    }\n\n    /**\n     * @param Asset\\Document $asset\n     *\n     * @return resource|null\n     */\n    protected function getDocumentPreviewPdf(Asset\\Document $asset)\n    {\n        $stream = null;\n\n        if ($asset->getMimeType() == 'application/pdf') {\n            $stream = $asset->getStream();\n        }\n\n        if (!$stream && $asset->getPageCount() && \\Pimcore\\Document::isAvailable() && \\Pimcore\\Document::isFileTypeSupported($asset->getFilename())) {\n            try {\n                $document = \\Pimcore\\Document::getInstance();\n                $stream = $document->getPdf($asset);\n            } catch (\\Exception $e) {\n                // nothing to do\n            }\n        }\n\n        return $stream;\n    }\n\n    /**\n     * @Route(\"/get-preview-video\", name=\"pimcore_admin_asset_getpreviewvideo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getPreviewVideoAction(Request $request)\n    {\n        $asset = Asset\\Video::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to preview');\n        }\n\n        $previewData = ['asset' => $asset];\n        $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n        $thumbnail = $asset->getThumbnail($config, ['mp4']);\n\n        if ($thumbnail) {\n            $previewData['asset'] = $asset;\n            $previewData['thumbnail'] = $thumbnail;\n\n            if ($thumbnail['status'] == 'finished') {\n                return $this->render(\n                    '@PimcoreAdmin/Admin/Asset/getPreviewVideoDisplay.html.twig',\n                    $previewData\n                );\n            } else {\n                return $this->render(\n                    '@PimcoreAdmin/Admin/Asset/getPreviewVideoError.html.twig',\n                    $previewData\n                );\n            }\n        } else {\n            return $this->render(\n                '@PimcoreAdmin/Admin/Asset/getPreviewVideoError.html.twig',\n                $previewData\n            );\n        }\n    }\n\n    /**\n     * @Route(\"/serve-video-preview\", name=\"pimcore_admin_asset_servevideopreview\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function serveVideoPreviewAction(Request $request)\n    {\n        $asset = Asset\\Video::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to preview');\n        }\n\n        $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n        $thumbnail = $asset->getThumbnail($config, ['mp4']);\n        $storagePath = $asset->getRealPath() . '/' . preg_replace('@^' . preg_quote($asset->getPath(), '@') . '@', '', urldecode($thumbnail['formats']['mp4']));\n\n        $storage = Tool\\Storage::get('thumbnail');\n        if ($storage->fileExists($storagePath)) {\n            $fs = $storage->fileSize($storagePath);\n            $stream = $storage->readStream($storagePath);\n\n            return new StreamedResponse(function () use ($stream) {\n                fpassthru($stream);\n            }, 200, [\n                'Content-Type' => 'video/mp4',\n                'Content-Length' => $fs,\n                'Accept-Ranges' => 'bytes',\n            ]);\n        } else {\n            throw $this->createNotFoundException('Video thumbnail not found');\n        }\n    }\n\n    /**\n     * @Route(\"/image-editor\", name=\"pimcore_admin_asset_imageeditor\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function imageEditorAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('Not allowed to preview');\n        }\n\n        return $this->render(\n            '@PimcoreAdmin/Admin/Asset/imageEditor.html.twig',\n            ['asset' => $asset]\n        );\n    }\n\n    /**\n     * @Route(\"/image-editor-save\", name=\"pimcore_admin_asset_imageeditorsave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function imageEditorSaveAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('publish')) {\n            throw $this->createAccessDeniedException('not allowed to publish');\n        }\n\n        $data = $request->get('dataUri');\n        $data = substr($data, strpos($data, ','));\n        $data = base64_decode($data);\n        $asset->setData($data);\n        $asset->setUserModification($this->getAdminUser()->getId());\n        $asset->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get-folder-content-preview\", name=\"pimcore_admin_asset_getfoldercontentpreview\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getFolderContentPreviewAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $filterPrepareEvent = new GenericEvent($this, [\n            'requestParams' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($filterPrepareEvent, AdminEvents::ASSET_LIST_BEFORE_FILTER_PREPARE);\n\n        $allParams = $filterPrepareEvent->getArgument('requestParams');\n\n        $folder = Asset::getById($allParams['id']);\n\n        $start = 0;\n        $limit = 10;\n\n        if ($allParams['limit']) {\n            $limit = $allParams['limit'];\n        }\n        if ($allParams['start']) {\n            $start = $allParams['start'];\n        }\n\n        $conditionFilters = [];\n        $list = new Asset\\Listing();\n        $conditionFilters[] = 'path LIKE ' . ($folder->getRealFullPath() == '/' ? \"'/%'\" : $list->quote(Helper::escapeLike($folder->getRealFullPath()) . '/%')) . \" AND type != 'folder'\";\n\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        $condition = implode(' AND ', $conditionFilters);\n\n        $list->setCondition($condition);\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrderKey('CAST(filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci ASC', false);\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $list,\n            'context' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n        /** @var Asset\\Listing $list */\n        $list = $beforeListLoadEvent->getArgument('list');\n\n        $list->load();\n\n        $assets = [];\n\n        foreach ($list as $asset) {\n            $filenameDisplay = $asset->getFilename();\n            if (strlen($filenameDisplay) > 32) {\n                $filenameDisplay = substr($filenameDisplay, 0, 25) . '...' . \\Pimcore\\File::getFileExtension($filenameDisplay);\n            }\n\n            // Like for treeGetChildsByIdAction, so we respect isAllowed method which can be extended (object DI) for custom permissions, so relying only users_workspaces_asset is insufficient and could lead security breach\n            if ($asset->isAllowed('list')) {\n                $assets[] = [\n                    'id' => $asset->getId(),\n                    'type' => $asset->getType(),\n                    'filename' => $asset->getFilename(),\n                    'filenameDisplay' => htmlspecialchars($filenameDisplay),\n                    'url' => $this->getThumbnailUrl($asset),\n                    'idPath' => $data['idPath'] = Element\\Service::getIdPath($asset),\n                ];\n            }\n        }\n\n        // We need to temporary use data key to be compatible with the ASSET_LIST_AFTER_LIST_LOAD global event\n        $result = ['data' => $assets, 'success' => true, 'total' => $list->getTotalCount()];\n\n        $afterListLoadEvent = new GenericEvent($this, [\n            'list' => $result,\n            'context' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($afterListLoadEvent, AdminEvents::ASSET_LIST_AFTER_LIST_LOAD);\n        $result = $afterListLoadEvent->getArgument('list');\n\n        // Here we revert to assets key\n        return $this->adminJson(['assets' => $result['data'], 'success' => $result['success'], 'total' => $result['total']]);\n    }\n\n    /**\n     * @Route(\"/copy-info\", name=\"pimcore_admin_asset_copyinfo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function copyInfoAction(Request $request)\n    {\n        $transactionId = time();\n        $pasteJobs = [];\n\n        Tool\\Session::useSession(function (AttributeBagInterface $session) use ($transactionId) {\n            $session->set((string) $transactionId, []);\n        }, 'pimcore_copy');\n\n        if ($request->get('type') == 'recursive') {\n            $asset = Asset::getById((int) $request->get('sourceId'));\n\n            if (!$asset) {\n                throw $this->createNotFoundException('Source not found');\n            }\n\n            // first of all the new parent\n            $pasteJobs[] = [[\n                'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                'method' => 'POST',\n                'params' => [\n                    'sourceId' => $request->get('sourceId'),\n                    'targetId' => $request->get('targetId'),\n                    'type' => 'child',\n                    'transactionId' => $transactionId,\n                    'saveParentId' => true,\n                ],\n            ]];\n\n            if ($asset->hasChildren()) {\n                // get amount of children\n                $list = new Asset\\Listing();\n                $list->setCondition('path LIKE ?', [$list->escapeLike($asset->getRealFullPath()) . '/%']);\n                $list->setOrderKey('LENGTH(path)', false);\n                $list->setOrder('ASC');\n                $childIds = $list->loadIdList();\n\n                if (count($childIds) > 0) {\n                    foreach ($childIds as $id) {\n                        $pasteJobs[] = [[\n                            'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                            'method' => 'POST',\n                            'params' => [\n                                'sourceId' => $id,\n                                'targetParentId' => $request->get('targetId'),\n                                'sourceParentId' => $request->get('sourceId'),\n                                'type' => 'child',\n                                'transactionId' => $transactionId,\n                            ],\n                        ]];\n                    }\n                }\n            }\n        } elseif ($request->get('type') == 'child' || $request->get('type') == 'replace') {\n            // the object itself is the last one\n            $pasteJobs[] = [[\n                'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                'method' => 'POST',\n                'params' => [\n                    'sourceId' => $request->get('sourceId'),\n                    'targetId' => $request->get('targetId'),\n                    'type' => $request->get('type'),\n                    'transactionId' => $transactionId,\n                ],\n            ]];\n        }\n\n        return $this->adminJson([\n            'pastejobs' => $pasteJobs,\n        ]);\n    }\n\n    /**\n     * @Route(\"/copy\", name=\"pimcore_admin_asset_copy\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function copyAction(Request $request)\n    {\n        $success = false;\n        $sourceId = (int)$request->get('sourceId');\n        $source = Asset::getById($sourceId);\n\n        $session = Tool\\Session::get('pimcore_copy');\n        $sessionBag = $session->get($request->get('transactionId'));\n\n        $targetId = (int)$request->get('targetId');\n        if ($request->get('targetParentId')) {\n            $sourceParent = Asset::getById((int) $request->get('sourceParentId'));\n\n            // this is because the key can get the prefix \"_copy\" if the target does already exists\n            if ($sessionBag['parentId']) {\n                $targetParent = Asset::getById($sessionBag['parentId']);\n            } else {\n                $targetParent = Asset::getById((int) $request->get('targetParentId'));\n            }\n\n            $targetPath = preg_replace('@^' . $sourceParent->getRealFullPath() . '@', $targetParent . '/', $source->getRealPath());\n            $target = Asset::getByPath($targetPath);\n        } else {\n            $target = Asset::getById($targetId);\n        }\n\n        if (!$target) {\n            throw $this->createNotFoundException('Target not found');\n        }\n\n        if ($target->isAllowed('create')) {\n            $source = Asset::getById($sourceId);\n            if ($source != null) {\n                if ($request->get('type') == 'child') {\n                    $newAsset = $this->_assetService->copyAsChild($target, $source);\n\n                    // this is because the key can get the prefix \"_copy\" if the target does already exists\n                    if ($request->get('saveParentId')) {\n                        $sessionBag['parentId'] = $newAsset->getId();\n                    }\n                } elseif ($request->get('type') == 'replace') {\n                    $this->_assetService->copyContents($target, $source);\n                }\n\n                $session->set($request->get('transactionId'), $sessionBag);\n                Tool\\Session::writeClose();\n\n                $success = true;\n            } else {\n                Logger::debug('prevended copy/paste because asset with same path+key already exists in this location');\n            }\n        } else {\n            Logger::error('could not execute copy/paste because of missing permissions on target [ ' . $targetId . ' ]');\n\n            throw $this->createAccessDeniedHttpException();\n        }\n\n        Tool\\Session::writeClose();\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip-jobs\", name=\"pimcore_admin_asset_downloadaszipjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function downloadAsZipJobsAction(Request $request)\n    {\n        $jobId = uniqid();\n        $filesPerJob = 5;\n        $jobs = [];\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $parentPath = $asset->getRealFullPath();\n            if ($asset->getId() == 1) {\n                $parentPath = '';\n            }\n\n            $db = \\Pimcore\\Db::get();\n            $conditionFilters = [];\n            $selectedIds = explode(',', $request->get('selectedIds', ''));\n            $quotedSelectedIds = [];\n            foreach ($selectedIds as $selectedId) {\n                if ($selectedId) {\n                    $quotedSelectedIds[] = $db->quote($selectedId);\n                }\n            }\n            if (!empty($quotedSelectedIds)) {\n                //add a condition if id numbers are specified\n                $conditionFilters[] = 'id IN (' . implode(',', $quotedSelectedIds) . ')';\n            }\n            $conditionFilters[] = 'path LIKE ' . $db->quote(Helper::escapeLike($parentPath) . '/%') . ' AND type != ' . $db->quote('folder');\n            if (!$this->getAdminUser()->isAdmin()) {\n                $userIds = $this->getAdminUser()->getRoles();\n                $userIds[] = $this->getAdminUser()->getId();\n                $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n            }\n\n            $condition = implode(' AND ', $conditionFilters);\n\n            $assetList = new Asset\\Listing();\n            $assetList->setCondition($condition);\n            $assetList->setOrderKey('LENGTH(path)', false);\n            $assetList->setOrder('ASC');\n\n            for ($i = 0; $i < ceil($assetList->getTotalCount() / $filesPerJob); $i++) {\n                $jobs[] = [[\n                    'url' => $this->generateUrl('pimcore_admin_asset_downloadaszipaddfiles'),\n                    'method' => 'GET',\n                    'params' => [\n                        'id' => $asset->getId(),\n                        'selectedIds' => implode(',', $selectedIds),\n                        'offset' => $i * $filesPerJob,\n                        'limit' => $filesPerJob,\n                        'jobId' => $jobId,\n                    ],\n                ]];\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'jobs' => $jobs,\n            'jobId' => $jobId,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip-add-files\", name=\"pimcore_admin_asset_downloadaszipaddfiles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function downloadAsZipAddFilesAction(Request $request)\n    {\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/download-zip-' . $request->get('jobId') . '.zip';\n        $asset = Asset::getById((int) $request->get('id'));\n        $success = false;\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $zip = new \\ZipArchive();\n            if (!is_file($zipFile)) {\n                $zipState = $zip->open($zipFile, \\ZipArchive::CREATE);\n            } else {\n                $zipState = $zip->open($zipFile);\n            }\n\n            if ($zipState === true) {\n                $parentPath = $asset->getRealFullPath();\n                if ($asset->getId() == 1) {\n                    $parentPath = '';\n                }\n\n                $db = \\Pimcore\\Db::get();\n                $conditionFilters = [];\n\n                $selectedIds = $request->get('selectedIds', []);\n\n                if (!empty($selectedIds)) {\n                    $selectedIds = explode(',', $selectedIds);\n                    //add a condition if id numbers are specified\n                    $conditionFilters[] = 'id IN (' . implode(',', $selectedIds) . ')';\n                }\n                $conditionFilters[] = \"type != 'folder' AND path LIKE \" . $db->quote(Helper::escapeLike($parentPath) . '/%');\n                if (!$this->getAdminUser()->isAdmin()) {\n                    $userIds = $this->getAdminUser()->getRoles();\n                    $userIds[] = $this->getAdminUser()->getId();\n                    $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n                }\n\n                $condition = implode(' AND ', $conditionFilters);\n\n                $assetList = new Asset\\Listing();\n                $assetList->setCondition($condition);\n                $assetList->setOrderKey('LENGTH(path) ASC, id ASC', false);\n                $assetList->setOffset((int)$request->get('offset'));\n                $assetList->setLimit((int)$request->get('limit'));\n\n                foreach ($assetList as $a) {\n                    if ($a->isAllowed('view')) {\n                        if (!$a instanceof Asset\\Folder) {\n                            // add the file with the relative path to the parent directory\n                            $zip->addFile($a->getLocalFile(), preg_replace('@^' . preg_quote($asset->getRealPath(), '@') . '@i', '', $a->getRealFullPath()));\n                        }\n                    }\n                }\n\n                $zip->close();\n                $success = true;\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip\", name=\"pimcore_admin_asset_downloadaszip\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     * Download all assets contained in the folder with parameter id as ZIP file.\n     * The suggested filename is either [folder name].zip or assets.zip for the root folder.\n     */\n    public function downloadAsZipAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/download-zip-' . $request->get('jobId') . '.zip';\n        $suggestedFilename = $asset->getFilename();\n        if (empty($suggestedFilename)) {\n            $suggestedFilename = 'assets';\n        }\n\n        $response = new BinaryFileResponse($zipFile);\n        $response->headers->set('Content-Type', 'application/zip');\n        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $suggestedFilename . '.zip');\n        $response->deleteFileAfterSend(true);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-zip\", name=\"pimcore_admin_asset_importzip\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importZipAction(Request $request)\n    {\n        $jobId = uniqid();\n        $filesPerJob = 5;\n        $jobs = [];\n        $asset = Asset::getById((int) $request->get('parentId'));\n\n        if (!is_file($_FILES['Filedata']['tmp_name'])) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => 'Something went wrong, please check upload_max_filesize and post_max_size in your php.ini as well as the write permissions on the file system',\n            ]);\n        }\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n\n        if (!$asset->isAllowed('create')) {\n            throw $this->createAccessDeniedException('not allowed to create');\n        }\n\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $jobId . '.zip';\n\n        copy($_FILES['Filedata']['tmp_name'], $zipFile);\n\n        $zip = new \\ZipArchive;\n        $retCode = $zip->open($zipFile);\n        if ($retCode === true) {\n            $jobAmount = ceil($zip->numFiles / $filesPerJob);\n            for ($i = 0; $i < $jobAmount; $i++) {\n                $jobs[] = [[\n                    'url' => $this->generateUrl('pimcore_admin_asset_importzipfiles'),\n                    'method' => 'POST',\n                    'params' => [\n                        'parentId' => $asset->getId(),\n                        'offset' => $i * $filesPerJob,\n                        'limit' => $filesPerJob,\n                        'jobId' => $jobId,\n                        'last' => (($i + 1) >= $jobAmount) ? 'true' : '',\n                    ],\n                ]];\n            }\n            $zip->close();\n\n            // here we have to use this method and not the JSON action helper ($this->_helper->json()) because this will add\n            // Content-Type: application/json which fires a download window in most browsers, because this is a normal POST\n            // request and not XHR where the content-type doesn't matter\n            $responseJson = $this->encodeJson([\n                'success' => true,\n                'jobs' => $jobs,\n                'jobId' => $jobId,\n            ]);\n\n            return new Response($responseJson);\n        } else {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('could_not_open_zip_file'),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-zip-files\", name=\"pimcore_admin_asset_importzipfiles\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importZipFilesAction(Request $request)\n    {\n        $jobId = $request->get('jobId');\n        $limit = (int)$request->get('limit');\n        $offset = (int)$request->get('offset');\n        $importAsset = Asset::getById((int) $request->get('parentId'));\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $jobId . '.zip';\n        $tmpDir = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/zip-import';\n\n        if (!is_dir($tmpDir)) {\n            File::mkdir($tmpDir, 0777, true);\n        }\n\n        $zip = new \\ZipArchive;\n        if ($zip->open($zipFile) === true) {\n            for ($i = $offset; $i < ($offset + $limit); $i++) {\n                $path = $zip->getNameIndex($i);\n\n                if (str_starts_with($path, '__MACOSX/') || str_ends_with($path, '/Thumbs.db')) {\n                    continue;\n                }\n\n                if ($path !== false) {\n                    if ($zip->extractTo($tmpDir . '/', $path)) {\n                        $tmpFile = $tmpDir . '/' . preg_replace('@^/@', '', $path);\n\n                        $filename = Element\\Service::getValidKey(basename($path), 'asset');\n\n                        $relativePath = '';\n                        if (dirname($path) != '.') {\n                            $relativePath = dirname($path);\n                        }\n\n                        $parentPath = $importAsset->getRealFullPath() . '/' . preg_replace('@^/@', '', $relativePath);\n                        $parent = Asset\\Service::createFolderByPath($parentPath);\n\n                        // check for duplicate filename\n                        $filename = $this->getSafeFilename($parent->getRealFullPath(), $filename);\n\n                        if ($parent->isAllowed('create')) {\n                            $asset = Asset::create($parent->getId(), [\n                                'filename' => $filename,\n                                'sourcePath' => $tmpFile,\n                                'userOwner' => $this->getAdminUser()->getId(),\n                                'userModification' => $this->getAdminUser()->getId(),\n                            ]);\n\n                            @unlink($tmpFile);\n                        } else {\n                            Logger::debug('prevented creating asset because of missing permissions');\n                        }\n                    }\n                }\n            }\n            $zip->close();\n        }\n\n        if ($request->get('last')) {\n            unlink($zipFile);\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/import-server\", name=\"pimcore_admin_asset_importserver\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importServerAction(Request $request)\n    {\n        $success = true;\n        $filesPerJob = 5;\n        $jobs = [];\n        $importDirectory = str_replace('/fileexplorer', PIMCORE_PROJECT_ROOT, $request->get('serverPath'));\n        if (preg_match('@^' . preg_quote(PIMCORE_PROJECT_ROOT, '@') . '@', $importDirectory) && is_dir($importDirectory)) {\n            $this->checkForPharStreamWrapper($importDirectory);\n            $files = rscandir($importDirectory . '/');\n            $count = count($files);\n            $jobFiles = [];\n\n            for ($i = 0; $i < $count; $i++) {\n                if (is_dir($files[$i])) {\n                    continue;\n                }\n\n                $jobFiles[] = preg_replace('@^' . preg_quote($importDirectory, '@') . '@', '', $files[$i]);\n\n                if (count($jobFiles) >= $filesPerJob || $i >= ($count - 1)) {\n                    $relativeImportDirectory = preg_replace('@^' . preg_quote(PIMCORE_PROJECT_ROOT, '@') . '@', '', $importDirectory);\n                    $jobs[] = [[\n                        'url' => $this->generateUrl('pimcore_admin_asset_importserverfiles'),\n                        'method' => 'POST',\n                        'params' => [\n                            'parentId' => $request->get('parentId'),\n                            'serverPath' => $relativeImportDirectory,\n                            'files' => implode('::', $jobFiles),\n                        ],\n                    ]];\n                    $jobFiles = [];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'jobs' => $jobs,\n        ]);\n    }\n\n    /**\n     * @Route(\"/import-server-files\", name=\"pimcore_admin_asset_importserverfiles\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importServerFilesAction(Request $request)\n    {\n        $assetFolder = Asset::getById((int) $request->get('parentId'));\n        if (!$assetFolder) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n        $serverPath = PIMCORE_PROJECT_ROOT . $request->get('serverPath');\n        $files = explode('::', $request->get('files'));\n\n        foreach ($files as $file) {\n            $absolutePath = $serverPath . $file;\n            $this->checkForPharStreamWrapper($absolutePath);\n            if (is_file($absolutePath)) {\n                $relFolderPath = str_replace('\\\\', '/', dirname($file));\n                $folder = Asset\\Service::createFolderByPath($assetFolder->getRealFullPath() . $relFolderPath);\n                $filename = basename($file);\n\n                // check for duplicate filename\n                $filename = Element\\Service::getValidKey($filename, 'asset');\n                $filename = $this->getSafeFilename($folder->getRealFullPath(), $filename);\n\n                if ($assetFolder->isAllowed('create')) {\n                    $asset = Asset::create($folder->getId(), [\n                        'filename' => $filename,\n                        'sourcePath' => $absolutePath,\n                        'userOwner' => $this->getAdminUser()->getId(),\n                        'userModification' => $this->getAdminUser()->getId(),\n                    ]);\n                } else {\n                    Logger::debug('prevented creating asset because of missing permissions ');\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    protected function checkForPharStreamWrapper($path)\n    {\n        if (stripos($path, 'phar://') !== false) {\n            throw $this->createAccessDeniedException('Using PHAR files is not allowed!');\n        }\n    }\n\n    /**\n     * @Route(\"/import-url\", name=\"pimcore_admin_asset_importurl\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function importUrlAction(Request $request)\n    {\n        $success = true;\n\n        $data = Tool::getHttpData($request->get('url'));\n        $filename = basename($request->get('url'));\n        $parentId = $request->get('id');\n        $parentAsset = Asset::getById((int)$parentId);\n\n        if (!$parentAsset) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n\n        $filename = Element\\Service::getValidKey($filename, 'asset');\n        $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n\n        if (empty($filename)) {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        // check for duplicate filename\n        $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n\n        if ($parentAsset->isAllowed('create')) {\n            $asset = Asset::create($parentId, [\n                'filename' => $filename,\n                'data' => $data,\n                'userOwner' => $this->getAdminUser()->getId(),\n                'userModification' => $this->getAdminUser()->getId(),\n            ]);\n            $success = true;\n        } else {\n            Logger::debug('prevented creating asset because of missing permissions');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/clear-thumbnail\", name=\"pimcore_admin_asset_clearthumbnail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function clearThumbnailAction(Request $request)\n    {\n        $success = false;\n\n        if ($asset = Asset::getById((int) $request->get('id'))) {\n            if (method_exists($asset, 'clearThumbnails')) {\n                if (!$asset->isAllowed('publish')) {\n                    throw $this->createAccessDeniedException('not allowed to publish');\n                }\n\n                $asset->clearThumbnails(true); // force clear\n                $asset->save();\n\n                $success = true;\n            }\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/grid-proxy\", name=\"pimcore_admin_asset_gridproxy\", methods={\"GET\", \"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param GridHelperService $gridHelperService\n     * @param CsrfProtectionHandler $csrfProtection\n     *\n     * @return JsonResponse\n     */\n    public function gridProxyAction(Request $request, EventDispatcherInterface $eventDispatcher, GridHelperService $gridHelperService, CsrfProtectionHandler $csrfProtection)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $filterPrepareEvent = new GenericEvent($this, [\n            'requestParams' => $allParams,\n        ]);\n        $language = $request->get('language') != 'default' ? $request->get('language') : null;\n\n        $eventDispatcher->dispatch($filterPrepareEvent, AdminEvents::ASSET_LIST_BEFORE_FILTER_PREPARE);\n\n        $allParams = $filterPrepareEvent->getArgument('requestParams');\n\n        $loader = \\Pimcore::getContainer()->get('pimcore.implementation_loader.asset.metadata.data');\n\n        if (isset($allParams['data']) && $allParams['data']) {\n            $csrfProtection->checkCsrfToken($request);\n            if ($allParams['xaction'] == 'update') {\n                try {\n                    $data = $this->decodeJson($allParams['data']);\n\n                    $updateEvent = new GenericEvent($this, [\n                        'data' => $data,\n                        'processed' => false,\n                    ]);\n\n                    $eventDispatcher->dispatch($updateEvent, AdminEvents::ASSET_LIST_BEFORE_UPDATE);\n\n                    $processed = $updateEvent->getArgument('processed');\n\n                    if ($processed) {\n                        // update already processed by event handler\n                        return $this->adminJson(['success' => true]);\n                    }\n\n                    $data = $updateEvent->getArgument('data');\n\n                    // save\n                    $asset = Asset::getById($data['id']);\n\n                    if (!$asset) {\n                        throw $this->createNotFoundException('Asset not found');\n                    }\n\n                    if (!$asset->isAllowed('publish')) {\n                        throw $this->createAccessDeniedException(\"Permission denied. You don't have the rights to save this asset.\");\n                    }\n\n                    $metadata = $asset->getMetadata(null, null, false, true);\n                    $dirty = false;\n\n                    unset($data['id']);\n                    foreach ($data as $key => $value) {\n                        $fieldDef = explode('~', $key);\n                        $key = $fieldDef[0];\n                        if (isset($fieldDef[1])) {\n                            $language = ($fieldDef[1] == 'none' ? '' : $fieldDef[1]);\n                        }\n\n                        foreach ($metadata as $idx => &$em) {\n                            if ($em['name'] == $key && $em['language'] == $language) {\n                                try {\n                                    $dataImpl = $loader->build($em['type']);\n                                    $value = $dataImpl->getDataFromListfolderGrid($value, $em);\n                                } catch (UnsupportedException $le) {\n                                    Logger::error('could not resolve metadata implementation for ' . $em['type']);\n                                }\n\n                                $em['data'] = $value;\n                                $dirty = true;\n\n                                break;\n                            }\n                        }\n\n                        if (!$dirty) {\n                            $defaulMetadata = ['title', 'alt', 'copyright'];\n                            if (in_array($key, $defaulMetadata)) {\n                                $newEm = [\n                                    'name' => $key,\n                                    'language' => $language,\n                                    'type' => 'input',\n                                    'data' => $value,\n                                ];\n\n                                try {\n                                    $dataImpl = $loader->build($newEm['type']);\n                                    $newEm['data'] = $dataImpl->getDataFromListfolderGrid($value, $newEm);\n                                } catch (UnsupportedException $le) {\n                                    Logger::error('could not resolve metadata implementation for ' . $newEm['type']);\n                                }\n\n                                $metadata[] = $newEm;\n\n                                $dirty = true;\n                            } else {\n                                $predefined = Model\\Metadata\\Predefined::getByName($key);\n                                if ($predefined && (empty($predefined->getTargetSubtype())\n                                        || $predefined->getTargetSubtype() == $asset->getType())) {\n                                    $newEm = [\n                                        'name' => $key,\n                                        'language' => $language,\n                                        'type' => $predefined->getType(),\n                                        'data' => $value,\n                                    ];\n\n                                    try {\n                                        $dataImpl = $loader->build($newEm['type']);\n                                        $newEm['data'] = $dataImpl->getDataFromListfolderGrid($value, $newEm);\n                                    } catch (UnsupportedException $le) {\n                                        Logger::error('could not resolve metadata implementation for ' . $newEm['type']);\n                                    }\n\n                                    $metadata[] = $newEm;\n                                    $dirty = true;\n                                }\n                            }\n                        }\n                    }\n\n                    if ($dirty) {\n                        // $metadata = Asset\\Service::minimizeMetadata($metadata, \"grid\");\n                        $asset->setMetadataRaw($metadata);\n                        $asset->save();\n\n                        return $this->adminJson(['success' => true]);\n                    }\n\n                    return $this->adminJson(['success' => false, 'message' => 'something went wrong.']);\n                } catch (\\Exception $e) {\n                    return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                }\n            }\n        } else {\n            $list = $gridHelperService->prepareAssetListingForGrid($allParams, $this->getAdminUser());\n\n            $beforeListLoadEvent = new GenericEvent($this, [\n                'list' => $list,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n            /** @var Asset\\Listing $list */\n            $list = $beforeListLoadEvent->getArgument('list');\n\n            $list->load();\n\n            $assets = [];\n            foreach ($list->getAssets() as $index => $asset) {\n                // Like for treeGetChildsByIdAction, so we respect isAllowed method which can be extended (object DI) for custom permissions, so relying only users_workspaces_asset is insufficient and could lead security breach\n                if ($asset->isAllowed('list')) {\n                    $a = Asset\\Service::gridAssetData($asset, $allParams['fields'], $allParams['language'] ?? '');\n                    $assets[] = $a;\n                }\n            }\n\n            $result = ['data' => $assets, 'success' => true, 'total' => $list->getTotalCount()];\n\n            $afterListLoadEvent = new GenericEvent($this, [\n                'list' => $result,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($afterListLoadEvent, AdminEvents::ASSET_LIST_AFTER_LIST_LOAD);\n            $result = $afterListLoadEvent->getArgument('list');\n\n            return $this->adminJson($result);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-text\", name=\"pimcore_admin_asset_gettext\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTextAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view');\n        }\n\n        $page = $request->get('page');\n        $text = null;\n        if ($asset instanceof Asset\\Document) {\n            $text = $asset->getText($page);\n        }\n\n        return $this->adminJson(['success' => 'true', 'text' => $text]);\n    }\n\n    /**\n     * @Route(\"/detect-image-features\", name=\"pimcore_admin_asset_detectimagefeatures\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function detectImageFeaturesAction(Request $request)\n    {\n        $asset = Asset\\Image::getById((int)$request->get('id'));\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->detectFaces();\n            $asset->removeCustomSetting('disableImageFeatureAutoDetection');\n            $asset->save();\n\n            return $this->adminJson(['success' => true]);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/delete-image-features\", name=\"pimcore_admin_asset_deleteimagefeatures\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageFeaturesAction(Request $request)\n    {\n        $asset = Asset::getById((int)$request->get('id'));\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->removeCustomSetting('faceCoordinates');\n            $asset->setCustomSetting('disableImageFeatureAutoDetection', true);\n            $asset->save();\n\n            return $this->adminJson(['success' => true]);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $this->checkActionPermission($event, 'assets', [\n            'getImageThumbnailAction', 'getVideoThumbnailAction', 'getDocumentThumbnailAction',\n        ]);\n\n        $this->_assetService = new Asset\\Service($this->getAdminUser());\n    }\n\n    /**\n     * @throws ValidationException\n     */\n    private function validateManyToManyRelationAssetType(array $context, string $filename, string $sourcePath): void\n    {\n        if (isset($context['containerType'], $context['objectId'], $context['fieldname'])\n            && 'object' === $context['containerType']\n            && $object = Concrete::getById($context['objectId'])\n        ) {\n            $fieldDefinition = $object->getClass()?->getFieldDefinition($context['fieldname']);\n            if (!$fieldDefinition instanceof ManyToManyRelation) {\n                return;\n            }\n\n            $mimeType = MimeTypes::getDefault()->guessMimeType($sourcePath);\n            $type = Asset::getTypeFromMimeMapping($mimeType, $filename);\n\n            $allowedAssetTypes = $fieldDefinition->getAssetTypes();\n            $allowedAssetTypes = array_column($allowedAssetTypes, 'assetTypes');\n\n            if (\n                !(\n                    $fieldDefinition->getAssetsAllowed()\n                    && ($allowedAssetTypes === [] || in_array($type, $allowedAssetTypes, true))\n                )\n            ) {\n                throw new ValidationException(sprintf('Invalid relation in field `%s` [type: %s]', $context['fieldname'], $type));\n            }\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\Asset;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\ElementControllerBase;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Traits\\AdminStyleTrait;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\Traits\\ApplySchedulerDataTrait;\nuse Pimcore\\Bundle\\AdminBundle\\Helper\\GridHelperService;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\Traits\\ElementEditLockHelperTrait;\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Event\\Admin\\ElementAdminStyleEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Event\\AssetEvents;\nuse Pimcore\\Event\\Model\\Asset\\ResolveUploadTargetEvent;\nuse Pimcore\\File;\nuse Pimcore\\Loader\\ImplementationLoader\\Exception\\UnsupportedException;\nuse Pimcore\\Logger;\nuse Pimcore\\Messenger\\AssetPreviewImageMessage;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\ManyToManyRelation;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\ValidationException;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Schedule\\Task;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Mime\\MimeTypes;\nuse Symfony\\Component\\Process\\Process;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @Route(\"/asset\")\n *\n * @internal\n */\nclass AssetController extends ElementControllerBase implements KernelControllerEventInterface\n{\n    use AdminStyleTrait;\n    use ElementEditLockHelperTrait;\n    use ApplySchedulerDataTrait;\n\n    /**\n     * @var Asset\\Service\n     */\n    protected $_assetService;\n\n    /**\n     * @Route(\"/tree-get-root\", name=\"pimcore_admin_asset_treegetroot\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetRootAction(Request $request)\n    {\n        return parent::treeGetRootAction($request);\n    }\n\n    /**\n     * @Route(\"/delete-info\", name=\"pimcore_admin_asset_deleteinfo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function deleteInfoAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        return parent::deleteInfoAction($request, $eventDispatcher);\n    }\n\n    /**\n     * @Route(\"/get-data-by-id\", name=\"pimcore_admin_asset_getdatabyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDataByIdAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $assetId = (int)$request->get('id');\n        $type = (string)$request->get('type');\n\n        $asset = Asset::getById($assetId);\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        // check for lock on non-folder items only.\n        if ($type !== 'folder' && ($asset->isAllowed('publish') || $asset->isAllowed('delete'))) {\n            if (Element\\Editlock::isLocked($assetId, 'asset')) {\n                return $this->getEditLockResponse($assetId, 'asset');\n            }\n\n            Element\\Editlock::lock($request->get('id'), 'asset');\n        }\n\n        $asset = clone $asset;\n        $asset->setParent(null);\n\n        $asset->setStream(null);\n        $data = $asset->getObjectVars();\n        $data['locked'] = $asset->isLocked();\n\n        if ($asset instanceof Asset\\Text) {\n            if ($asset->getFileSize() < 2000000) {\n                // it doesn't make sense to show a preview for files bigger than 2MB\n                $data['data'] = \\ForceUTF8\\Encoding::toUTF8($asset->getData());\n            } else {\n                $data['data'] = false;\n            }\n        } elseif ($asset instanceof Asset\\Document) {\n            $data['pdfPreviewAvailable'] = (bool)$this->getDocumentPreviewPdf($asset);\n        } elseif ($asset instanceof Asset\\Video) {\n            $videoInfo = [];\n\n            if (\\Pimcore\\Video::isAvailable()) {\n                $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n                $thumbnail = $asset->getThumbnail($config, ['mp4']);\n                if ($thumbnail) {\n                    if ($thumbnail['status'] == 'finished') {\n                        $videoInfo['previewUrl'] = $thumbnail['formats']['mp4'];\n                        $videoInfo['width'] = $asset->getWidth();\n                        $videoInfo['height'] = $asset->getHeight();\n\n                        $metaData = $asset->getSphericalMetaData();\n                        if (isset($metaData['ProjectionType']) && strtolower($metaData['ProjectionType']) == 'equirectangular') {\n                            $videoInfo['isVrVideo'] = true;\n                        }\n                    }\n                }\n            }\n\n            $data['videoInfo'] = $videoInfo;\n        } elseif ($asset instanceof Asset\\Image) {\n            $imageInfo = [];\n\n            $previewUrl = $this->generateUrl('pimcore_admin_asset_getimagethumbnail', [\n                'id' => $asset->getId(),\n                'treepreview' => true,\n                '_dc' => time(),\n            ]);\n\n            if ($asset->isAnimated()) {\n                $previewUrl = $this->generateUrl('pimcore_admin_asset_getasset', [\n                    'id' => $asset->getId(),\n                    '_dc' => time(),\n                ]);\n            }\n\n            $imageInfo['previewUrl'] = $previewUrl;\n\n            if ($asset->getWidth() && $asset->getHeight()) {\n                $imageInfo['dimensions'] = [];\n                $imageInfo['dimensions']['width'] = $asset->getWidth();\n                $imageInfo['dimensions']['height'] = $asset->getHeight();\n            }\n\n            $imageInfo['exiftoolAvailable'] = (bool)\\Pimcore\\Tool\\Console::getExecutable('exiftool');\n\n            if (!$asset->getEmbeddedMetaData(false)) {\n                $asset->getEmbeddedMetaData(true, false); // read Exif, IPTC and XPM like in the old days ...\n            }\n\n            $data['imageInfo'] = $imageInfo;\n        }\n\n        $predefinedMetaData = Metadata\\Predefined\\Listing::getByTargetType('asset', [$asset->getType()]);\n        $predefinedMetaDataGroups = [];\n        /** @var Metadata\\Predefined $item */\n        foreach ($predefinedMetaData as $item) {\n            if ($item->getGroup()) {\n                $predefinedMetaDataGroups[$item->getGroup()] = true;\n            }\n        }\n        $data['predefinedMetaDataGroups'] = array_keys($predefinedMetaDataGroups);\n        $data['properties'] = Element\\Service::minimizePropertiesForEditmode($asset->getProperties());\n        $data['metadata'] = Asset\\Service::expandMetadataForEditmode($asset->getMetadata());\n        $data['versionDate'] = $asset->getModificationDate();\n        $data['filesizeFormatted'] = $asset->getFileSize(true);\n        $data['filesize'] = $asset->getFileSize();\n        $data['fileExtension'] = File::getFileExtension($asset->getFilename());\n        $data['idPath'] = Element\\Service::getIdPath($asset);\n        $data['userPermissions'] = $asset->getUserPermissions($this->getAdminUser());\n        $frontendPath = $asset->getFrontendFullPath();\n        $data['url'] = preg_match('/^http(s)?:\\\\/\\\\/.+/', $frontendPath) ?\n            $frontendPath :\n            $request->getSchemeAndHttpHost() . $frontendPath;\n\n        $data['scheduledTasks'] = array_map(\n            static function (Task $task) {\n                return $task->getObjectVars();\n            },\n            $asset->getScheduledTasks()\n        );\n\n        $this->addAdminStyle($asset, ElementAdminStyleEvent::CONTEXT_EDITOR, $data);\n\n        $data['php'] = [\n            'classes' => array_merge([get_class($asset)], array_values(class_parents($asset))),\n            'interfaces' => array_values(class_implements($asset)),\n        ];\n\n        $event = new GenericEvent($this, [\n            'data' => $data,\n            'asset' => $asset,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::ASSET_GET_PRE_SEND_DATA);\n        $data = $event->getArgument('data');\n\n        if ($asset->isAllowed('view')) {\n            return $this->adminJson($data);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/tree-get-childs-by-id\", name=\"pimcore_admin_asset_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $assets = [];\n        $cv = false;\n        $asset = Asset::getById($allParams['node']);\n\n        $filter = $request->get('filter');\n        $limit = (int)$allParams['limit'];\n        if (!is_null($filter)) {\n            if (substr($filter, -1) != '*') {\n                $filter .= '*';\n            }\n            $filter = str_replace('*', '%', $filter);\n\n            $limit = 100;\n            $offset = 0;\n        } elseif (!$allParams['limit']) {\n            $limit = 100000000;\n        }\n\n        $offset = isset($allParams['start']) ? (int)$allParams['start'] : 0;\n\n        $filteredTotalCount = 0;\n\n        if ($asset->hasChildren()) {\n            if ($allParams['view']) {\n                $cv = \\Pimcore\\Model\\Element\\Service::getCustomViewById($allParams['view']);\n            }\n\n            // get assets\n            $childrenList = new Asset\\Listing();\n            $childrenList->addConditionParam('parentId = ?', [$asset->getId()]);\n            $childrenList->filterAccessibleByUser($this->getAdminUser(), $asset);\n\n            if (!is_null($filter)) {\n                $childrenList->addConditionParam('CAST(assets.filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci LIKE ?', [$filter]);\n            }\n\n            $childrenList->setLimit($limit);\n            $childrenList->setOffset($offset);\n            $childrenList->setOrderKey(\"FIELD(assets.type, 'folder') DESC, CAST(assets.filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci ASC\", false);\n\n            \\Pimcore\\Model\\Element\\Service::addTreeFilterJoins($cv, $childrenList);\n\n            $beforeListLoadEvent = new GenericEvent($this, [\n                'list' => $childrenList,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n            /** @var Asset\\Listing $childrenList */\n            $childrenList = $beforeListLoadEvent->getArgument('list');\n\n            $children = $childrenList->load();\n\n            $filteredTotalCount = $childrenList->getTotalCount();\n\n            foreach ($children as $childAsset) {\n                $assetTreeNode = $this->getTreeNodeConfig($childAsset);\n                if ($assetTreeNode['permissions']['list'] == 1) {\n                    $assets[] = $assetTreeNode;\n                }\n            }\n        }\n\n        //Hook for modifying return value - e.g. for changing permissions based on asset data\n        $event = new GenericEvent($this, [\n            'assets' => $assets,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::ASSET_TREE_GET_CHILDREN_BY_ID_PRE_SEND_DATA);\n        $assets = $event->getArgument('assets');\n\n        if ($allParams['limit']) {\n            return $this->adminJson([\n                'offset' => $offset,\n                'limit' => $limit,\n                'total' => $asset->getChildAmount($this->getAdminUser()),\n                'overflow' => !is_null($filter) && ($filteredTotalCount > $limit),\n                'nodes' => $assets,\n                'filter' => $request->get('filter') ? $request->get('filter') : '',\n                'inSearch' => (int)$request->get('inSearch'),\n            ]);\n        } else {\n            return $this->adminJson($assets);\n        }\n    }\n\n    /**\n     * @Route(\"/add-asset\", name=\"pimcore_admin_asset_addasset\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function addAssetAction(Request $request, Config $config)\n    {\n        try {\n            $res = $this->addAsset($request, $config);\n\n            $response = [\n                'success' => $res['success'],\n            ];\n\n            if ($res['success']) {\n                $response['asset'] = [\n                    'id' => $res['asset']->getId(),\n                    'path' => $res['asset']->getFullPath(),\n                    'type' => $res['asset']->getType(),\n                ];\n            }\n\n            return $this->adminJson($response);\n        } catch (\\Exception $e) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $e->getMessage(),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/add-asset-compatibility\", name=\"pimcore_admin_asset_addassetcompatibility\", methods={\"POST\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function addAssetCompatibilityAction(Request $request, Config $config)\n    {\n        try {\n            // this is a special action for the compatibility mode upload (without flash)\n            $res = $this->addAsset($request, $config);\n\n            $response = $this->adminJson([\n                'success' => $res['success'],\n                'msg' => $res['success'] ? 'Success' : 'Error',\n                'id' => $res['asset'] ? $res['asset']->getId() : null,\n                'fullpath' => $res['asset'] ? $res['asset']->getRealFullPath() : null,\n                'type' => $res['asset'] ? $res['asset']->getType() : null,\n            ]);\n            $response->headers->set('Content-Type', 'text/html');\n\n            return $response;\n        } catch (\\Exception $e) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $e->getMessage(),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/exists\", name=\"pimcore_admin_asset_exists\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function existsAction(Request $request)\n    {\n        $parentAsset = \\Pimcore\\Model\\Asset::getById((int)$request->get('parentId'));\n\n        return new JsonResponse([\n            'exists' => Asset\\Service::pathExists($parentAsset->getRealFullPath().'/'.$request->get('filename')),\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function addAsset(Request $request, Config $config)\n    {\n        $defaultUploadPath = $config['assets']['default_upload_path'] ?? '/';\n\n        if (array_key_exists('Filedata', $_FILES)) {\n            $filename = $_FILES['Filedata']['name'];\n            $sourcePath = $_FILES['Filedata']['tmp_name'];\n        } elseif ($request->get('type') == 'base64') {\n            $filename = $request->get('filename');\n            $sourcePath = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/upload-base64' . uniqid() . '.tmp';\n            $data = preg_replace('@^data:[^,]+;base64,@', '', $request->get('data'));\n            File::put($sourcePath, base64_decode($data));\n        } else {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        $parentId = $request->get('parentId');\n        $parentPath = $request->get('parentPath');\n\n        if ($request->get('dir') && $request->get('parentId')) {\n            // this is for uploading folders with Drag&Drop\n            // param \"dir\" contains the relative path of the file\n            $parent = Asset::getById((int) $request->get('parentId'));\n            $dir = $request->get('dir');\n            if (strpos($dir, '..') !== false) {\n                throw new \\Exception('not allowed');\n            }\n\n            $newPath = $parent->getRealFullPath() . '/' . trim($dir, '/ ');\n\n            $maxRetries = 5;\n            $newParent = null;\n            for ($retries = 0; $retries < $maxRetries; $retries++) {\n                try {\n                    $newParent = Asset\\Service::createFolderByPath($newPath);\n\n                    break;\n                } catch (\\Exception $e) {\n                    if ($retries < ($maxRetries - 1)) {\n                        $waitTime = rand(100000, 900000); // microseconds\n                        usleep($waitTime); // wait specified time until we restart the transaction\n                    } else {\n                        // if the transaction still fail after $maxRetries retries, we throw out the exception\n                        throw $e;\n                    }\n                }\n            }\n            if ($newParent) {\n                $parentId = $newParent->getId();\n            }\n        } elseif (!$request->get('parentId') && $parentPath) {\n            $parent = Asset::getByPath($parentPath);\n            if ($parent instanceof Asset\\Folder) {\n                $parentId = $parent->getId();\n            }\n        }\n\n        $filename = Element\\Service::getValidKey($filename, 'asset');\n        if (empty($filename)) {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        $context = $request->get('context');\n        if ($context) {\n            $context = json_decode($context, true);\n            $context = $context ?: [];\n\n            $this->validateManyToManyRelationAssetType($context, $filename, $sourcePath);\n\n            $event = new ResolveUploadTargetEvent($parentId, $filename, $context);\n            \\Pimcore::getEventDispatcher()->dispatch($event, AssetEvents::RESOLVE_UPLOAD_TARGET);\n            $filename = Element\\Service::getValidKey($event->getFilename(), 'asset');\n            $parentId = $event->getParentId();\n        }\n\n        if (!$parentId) {\n            $parentId = Asset\\Service::createFolderByPath($defaultUploadPath)->getId();\n        }\n\n        $parentAsset = Asset::getById((int)$parentId);\n\n        if (!$request->get('allowOverwrite')) {\n            // check for duplicate filename\n            $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n        }\n\n        if (!$parentAsset->isAllowed('create')) {\n            throw $this->createAccessDeniedHttpException(\n                'Missing the permission to create new assets in the folder: ' . $parentAsset->getRealFullPath()\n            );\n        }\n\n        if (is_file($sourcePath) && filesize($sourcePath) < 1) {\n            throw new \\Exception('File is empty!');\n        } elseif (!is_file($sourcePath)) {\n            throw new \\Exception('Something went wrong, please check upload_max_filesize and post_max_size in your php.ini as well as the write permissions of your temporary directories.');\n        }\n\n        // check if there is a requested type and if matches the asset type of the uploaded file\n        $uploadAssetType = $request->get('uploadAssetType');\n        if ($uploadAssetType) {\n            $mimetype = MimeTypes::getDefault()->guessMimeType($sourcePath);\n            $assetType = Asset::getTypeFromMimeMapping($mimetype, $filename);\n\n            if ($uploadAssetType !== $assetType) {\n                throw new \\Exception(\"Mime type $mimetype does not match with asset type: $uploadAssetType\");\n            }\n        }\n\n        if ($request->get('allowOverwrite') && Asset\\Service::pathExists($parentAsset->getRealFullPath().'/'.$filename)) {\n            $asset = Asset::getByPath($parentAsset->getRealFullPath().'/'.$filename);\n            $asset->setStream(fopen($sourcePath, 'rb', false, File::getContext()));\n            $asset->save();\n        } else {\n            $asset = Asset::create($parentId, [\n                'filename' => $filename,\n                'sourcePath' => $sourcePath,\n                'userOwner' => $this->getAdminUser()->getId(),\n                'userModification' => $this->getAdminUser()->getId(),\n            ]);\n        }\n\n        @unlink($sourcePath);\n\n        return [\n            'success' => true,\n            'asset' => $asset,\n        ];\n    }\n\n    /**\n     * @param string $targetPath\n     * @param string $filename\n     *\n     * @return string\n     */\n    protected function getSafeFilename($targetPath, $filename)\n    {\n        $pathinfo = pathinfo($filename);\n        $originalFilename = $pathinfo['filename'];\n        $originalFileextension = empty($pathinfo['extension']) ? '' : '.' . $pathinfo['extension'];\n        $count = 1;\n\n        if ($targetPath == '/') {\n            $targetPath = '';\n        }\n\n        while (true) {\n            if (Asset\\Service::pathExists($targetPath . '/' . $filename)) {\n                $filename = $originalFilename . '_' . $count . $originalFileextension;\n                $count++;\n            } else {\n                return $filename;\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/replace-asset\", name=\"pimcore_admin_asset_replaceasset\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function replaceAssetAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        $newFilename = Element\\Service::getValidKey($_FILES['Filedata']['name'], 'asset');\n        $mimetype = MimeTypes::getDefault()->guessMimeType($_FILES['Filedata']['tmp_name']);\n        $newType = Asset::getTypeFromMimeMapping($mimetype, $newFilename);\n\n        if ($newType != $asset->getType()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => sprintf($this->trans('asset_type_change_not_allowed', [], 'admin'), $asset->getType(), $newType),\n            ]);\n        }\n\n        $stream = fopen($_FILES['Filedata']['tmp_name'], 'r+');\n        $asset->setStream($stream);\n        $asset->setCustomSetting('thumbnails', null);\n        $asset->setUserModification($this->getAdminUser()->getId());\n\n        $newFileExt = File::getFileExtension($newFilename);\n        $currentFileExt = File::getFileExtension($asset->getFilename());\n        if ($newFileExt != $currentFileExt) {\n            $newFilename = preg_replace('/\\.' . $currentFileExt . '$/i', '.' . $newFileExt, $asset->getFilename());\n            $newFilename = Element\\Service::getSafeCopyName($newFilename, $asset->getParent());\n            $asset->setFilename($newFilename);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->save();\n\n            $response = $this->adminJson([\n                'id' => $asset->getId(),\n                'path' => $asset->getRealFullPath(),\n                'success' => true,\n            ]);\n\n            // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n            // Ext.form.Action.Submit and mark the submission as failed\n            $response->headers->set('Content-Type', 'text/html');\n\n            return $response;\n        } else {\n            throw new \\Exception('missing permission');\n        }\n    }\n\n    /**\n     * @Route(\"/add-folder\", name=\"pimcore_admin_asset_addfolder\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addFolderAction(Request $request)\n    {\n        $success = false;\n        $parentAsset = Asset::getById((int)$request->get('parentId'));\n        $equalAsset = Asset::getByPath($parentAsset->getRealFullPath() . '/' . $request->get('name'));\n\n        if ($parentAsset->isAllowed('create')) {\n            if (!$equalAsset) {\n                $asset = Asset::create($request->get('parentId'), [\n                    'filename' => $request->get('name'),\n                    'type' => 'folder',\n                    'userOwner' => $this->getAdminUser()->getId(),\n                    'userModification' => $this->getAdminUser()->getId(),\n                ]);\n                $success = true;\n            }\n        } else {\n            Logger::debug('prevented creating asset because of missing permissions');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_asset_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $type = $request->get('type');\n\n        if ($type === 'childs') {\n            trigger_deprecation(\n                'pimcore/pimcore',\n                '10.4',\n                'Type childs is deprecated. Use children instead'\n            );\n            $type = 'children';\n        }\n        if ($type === 'children') {\n            $parentAsset = Asset::getById((int) $request->get('id'));\n\n            $list = new Asset\\Listing();\n            $list->setCondition('path LIKE ?', [Helper::escapeLike($parentAsset->getRealFullPath()) . '/%']);\n            $list->setLimit((int)$request->get('amount'));\n            $list->setOrderKey('LENGTH(path)', false);\n            $list->setOrder('DESC');\n\n            $deletedItems = [];\n            foreach ($list as $asset) {\n                $deletedItems[$asset->getId()] = $asset->getRealFullPath();\n                if ($asset->isAllowed('delete') && !$asset->isLocked()) {\n                    $asset->delete();\n                }\n            }\n\n            return $this->adminJson(['success' => true, 'deleted' => $deletedItems]);\n        }\n        if ($request->get('id')) {\n            $asset = Asset::getById((int) $request->get('id'));\n            if ($asset && $asset->isAllowed('delete')) {\n                if ($asset->isLocked()) {\n                    return $this->adminJson([\n                        'success' => false,\n                        'message' => 'prevented deleting asset, because it is locked: ID: ' . $asset->getId(),\n                    ]);\n                }\n\n                $asset->delete();\n\n                return $this->adminJson(['success' => true]);\n            }\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @param Asset $element\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($element)\n    {\n        $asset = $element;\n\n        $permissions =  $asset->getUserPermissions($this->getAdminUser());\n\n        $tmpAsset = [\n            'id' => $asset->getId(),\n            'key' => $element->getKey(),\n            'text' => htmlspecialchars($asset->getFilename()),\n            'type' => $asset->getType(),\n            'path' => $asset->getRealFullPath(),\n            'basePath' => $asset->getRealPath(),\n            'locked' => $asset->isLocked(),\n            'lockOwner' => $asset->getLocked() ? true : false,\n            'elementType' => 'asset',\n            'permissions' => [\n                'remove' => $permissions['delete'],\n                'settings' => $permissions['settings'],\n                'rename' => $permissions['rename'],\n                'publish' => $permissions['publish'],\n                'view' => $permissions['view'],\n                'list' => $permissions['list'],\n            ],\n        ];\n\n        $hasChildren = $asset->getDao()->hasChildren($this->getAdminUser());\n\n        // set type specific settings\n        if ($asset instanceof Asset\\Folder) {\n            $tmpAsset['leaf'] = false;\n            $tmpAsset['expanded'] = !$hasChildren;\n            $tmpAsset['loaded'] = !$hasChildren;\n            $tmpAsset['permissions']['create'] = $permissions['create'];\n            $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n        } else {\n            $tmpAsset['leaf'] = true;\n            $tmpAsset['expandable'] = false;\n            $tmpAsset['expanded'] = false;\n        }\n\n        $this->addAdminStyle($asset, ElementAdminStyleEvent::CONTEXT_TREE, $tmpAsset);\n\n        if ($asset instanceof Asset\\Image) {\n            try {\n                $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n\n                // we need the dimensions for the wysiwyg editors, so that they can resize the image immediately\n                if ($asset->getCustomSetting('imageDimensionsCalculated')) {\n                    $tmpAsset['imageWidth'] = $asset->getCustomSetting('imageWidth');\n                    $tmpAsset['imageHeight'] = $asset->getCustomSetting('imageHeight');\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of image, seems to be broken.');\n            }\n        } elseif ($asset->getType() == 'video') {\n            try {\n                if (\\Pimcore\\Video::isAvailable()) {\n                    $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of video, seems to be broken.');\n            }\n        } elseif ($asset->getType() == 'document') {\n            try {\n                // add the PDF check here, otherwise the preview layer in admin is shown without content\n                if (\\Pimcore\\Document::isAvailable() && \\Pimcore\\Document::isFileTypeSupported($asset->getFilename())) {\n                    $tmpAsset['thumbnail'] = $this->getThumbnailUrl($asset, ['origin' => 'treeNode']);\n                }\n            } catch (\\Exception $e) {\n                Logger::debug('Cannot get dimensions of video, seems to be broken.');\n            }\n        }\n\n        $tmpAsset['cls'] = '';\n        if ($asset->isLocked()) {\n            $tmpAsset['cls'] .= 'pimcore_treenode_locked ';\n        }\n        if ($asset->getLocked()) {\n            $tmpAsset['cls'] .= 'pimcore_treenode_lockOwner ';\n        }\n\n        return $tmpAsset;\n    }\n\n    /**\n     * @param Asset $asset\n     * @param array $params\n     *\n     * @return null|string\n     */\n    protected function getThumbnailUrl(Asset $asset, array $params = [])\n    {\n        $defaults = [\n            'id' => $asset->getId(),\n            'treepreview' => true,\n            '_dc' => $asset->getModificationDate(),\n        ];\n\n        $params = array_merge($defaults, $params);\n\n        if ($asset instanceof Asset\\Image) {\n            return $this->generateUrl('pimcore_admin_asset_getimagethumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Folder) {\n            return $this->generateUrl('pimcore_admin_asset_getfolderthumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Video && \\Pimcore\\Video::isAvailable()) {\n            return $this->generateUrl('pimcore_admin_asset_getvideothumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Document && \\Pimcore\\Document::isAvailable() && $asset->getPageCount()) {\n            return $this->generateUrl('pimcore_admin_asset_getdocumentthumbnail', $params);\n        }\n\n        if ($asset instanceof Asset\\Audio) {\n            return '/bundles/pimcoreadmin/img/flat-color-icons/speaker.svg';\n        }\n\n        if ($asset instanceof Asset) {\n            return '/bundles/pimcoreadmin/img/filetype-not-supported.svg';\n        }\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_asset_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $success = false;\n        $allowUpdate = true;\n\n        $updateData = array_merge($request->request->all(), $request->query->all());\n\n        $asset = Asset::getById((int) $request->get('id'));\n        if ($asset->isAllowed('settings')) {\n            $asset->setUserModification($this->getAdminUser()->getId());\n\n            // if the position is changed the path must be changed || also from the children\n            if ($parentId = $request->get('parentId')) {\n                $parentAsset = Asset::getById((int) $parentId);\n\n                //check if parent is changed i.e. asset is moved\n                if ($asset->getParentId() != $parentAsset->getId()) {\n                    if (!$parentAsset->isAllowed('create')) {\n                        throw new \\Exception('Prevented moving asset - no create permission on new parent ');\n                    }\n\n                    $intendedPath = $parentAsset->getRealPath();\n                    $pKey = $parentAsset->getKey();\n                    if (!empty($pKey)) {\n                        $intendedPath .= $parentAsset->getKey() . '/';\n                    }\n\n                    $assetWithSamePath = Asset::getByPath($intendedPath . $asset->getKey());\n\n                    if ($assetWithSamePath != null) {\n                        $allowUpdate = false;\n                    }\n\n                    if ($asset->isLocked()) {\n                        $allowUpdate = false;\n                    }\n                }\n            }\n\n            if ($allowUpdate) {\n                if ($request->get('filename') != $asset->getFilename() && !$asset->isAllowed('rename')) {\n                    unset($updateData['filename']);\n                    Logger::debug('prevented renaming asset because of missing permissions ');\n                }\n\n                $asset->setValues($updateData);\n\n                try {\n                    $asset->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                }\n            } else {\n                $msg = 'prevented moving asset, asset with same path+key already exists at target location or the asset is locked. ID: ' . $asset->getId();\n                Logger::debug($msg);\n\n                return $this->adminJson(['success' => $success, 'message' => $msg]);\n            }\n        } elseif ($asset->isAllowed('rename') && $request->get('filename')) {\n            //just rename\n            try {\n                $asset->setFilename($request->get('filename'));\n                $asset->save();\n                $success = true;\n            } catch (\\Exception $e) {\n                return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n            }\n        } else {\n            Logger::debug('prevented update asset because of missing permissions ');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/webdav{path}\", name=\"pimcore_admin_webdav\", requirements={\"path\"=\".*\"})\n     */\n    public function webdavAction()\n    {\n        $homeDir = Asset::getById(1);\n\n        try {\n            $publicDir = new Asset\\WebDAV\\Folder($homeDir);\n            $objectTree = new Asset\\WebDAV\\Tree($publicDir);\n            $server = new \\Sabre\\DAV\\Server($objectTree);\n            $server->setBaseUri($this->generateUrl('pimcore_admin_webdav', ['path' => '/']));\n\n            // lock plugin\n            /** @var \\Doctrine\\DBAL\\Driver\\PDOConnection $pdo */\n            $pdo = \\Pimcore\\Db::get()->getWrappedConnection();\n            $lockBackend = new \\Sabre\\DAV\\Locks\\Backend\\PDO($pdo);\n            $lockBackend->tableName = 'webdav_locks';\n\n            $lockPlugin = new \\Sabre\\DAV\\Locks\\Plugin($lockBackend);\n            $server->addPlugin($lockPlugin);\n\n            // browser plugin\n            $server->addPlugin(new \\Sabre\\DAV\\Browser\\Plugin());\n\n            $server->start();\n        } catch (\\Exception $e) {\n            Logger::error((string) $e);\n        }\n\n        exit;\n    }\n\n    /**\n     * @Route(\"/save\", name=\"pimcore_admin_asset_save\", methods={\"PUT\",\"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('publish')) {\n            // metadata\n            if ($request->get('metadata')) {\n                $metadata = $this->decodeJson($request->get('metadata'));\n\n                $metadataEvent = new GenericEvent($this, [\n                    'id' => $asset->getId(),\n                    'metadata' => $metadata,\n                ]);\n                $eventDispatcher->dispatch($metadataEvent, AdminEvents::ASSET_METADATA_PRE_SET);\n\n                $metadata = $metadataEvent->getArgument('metadata');\n                $metadataValues = $metadata['values'];\n\n                $metadataValues = Asset\\Service::minimizeMetadata($metadataValues, 'editor');\n                $asset->setMetadataRaw($metadataValues);\n            }\n\n            // properties\n            if ($request->get('properties')) {\n                $properties = [];\n                $propertiesData = $this->decodeJson($request->get('properties'));\n\n                if (is_array($propertiesData)) {\n                    foreach ($propertiesData as $propertyName => $propertyData) {\n                        $value = $propertyData['data'];\n\n                        try {\n                            $property = new Model\\Property();\n                            $property->setType($propertyData['type']);\n                            $property->setName($propertyName);\n                            $property->setCtype('asset');\n                            $property->setDataFromEditmode($value);\n                            $property->setInheritable($propertyData['inheritable']);\n\n                            $properties[$propertyName] = $property;\n                        } catch (\\Exception $e) {\n                            Logger::err(\"Can't add \" . $propertyName . ' to asset ' . $asset->getRealFullPath());\n                        }\n                    }\n\n                    $asset->setProperties($properties);\n                }\n            }\n\n            $this->applySchedulerDataToElement($request, $asset);\n\n            if ($request->get('data')) {\n                $asset->setData($request->get('data'));\n            }\n\n            // image specific data\n            if ($asset instanceof Asset\\Image) {\n                if ($request->get('image')) {\n                    $imageData = $this->decodeJson($request->get('image'));\n                    if (isset($imageData['focalPoint'])) {\n                        $asset->setCustomSetting('focalPointX', $imageData['focalPoint']['x']);\n                        $asset->setCustomSetting('focalPointY', $imageData['focalPoint']['y']);\n                        $asset->removeCustomSetting('disableFocalPointDetection');\n                    }\n                } else {\n                    // wipe all data\n                    $asset->removeCustomSetting('focalPointX');\n                    $asset->removeCustomSetting('focalPointY');\n                    $asset->setCustomSetting('disableFocalPointDetection', true);\n                }\n            }\n\n            $asset->setUserModification($this->getAdminUser()->getId());\n            if ($request->get('task') === 'session') {\n                // save to session only\n                Asset\\Service::saveElementToSession($asset);\n            } else {\n                $asset->save();\n            }\n\n            $treeData = $this->getTreeNodeConfig($asset);\n\n            return $this->adminJson([\n                'success' => true,\n                'data' => [\n                    'versionDate' => $asset->getModificationDate(),\n                    'versionCount' => $asset->getVersionCount(),\n                ],\n                'treeData' => $treeData,\n            ]);\n        } else {\n            throw $this->createAccessDeniedHttpException();\n        }\n    }\n\n    /**\n     * @Route(\"/publish-version\", name=\"pimcore_admin_asset_publishversion\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function publishVersionAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $version = Model\\Version::getById($id);\n        $asset = $version?->loadData();\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Version with id [' . $id . \"] doesn't exist\");\n        }\n\n        $currentAsset = Asset::getById($asset->getId());\n        if ($currentAsset->isAllowed('publish')) {\n            try {\n                $asset->setUserModification($this->getAdminUser()->getId());\n                $asset->save();\n\n                $treeData = $this->getTreeNodeConfig($asset);\n\n                return $this->adminJson(['success' => true, 'treeData' => $treeData]);\n            } catch (\\Exception $e) {\n                return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n            }\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/show-version\", name=\"pimcore_admin_asset_showversion\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function showVersionAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $version = Model\\Version::getById($id);\n        $asset = $version?->loadData();\n        if (!$asset) {\n            throw $this->createNotFoundException('Version with id [' . $id . \"] doesn't exist\");\n        }\n\n        if (!$asset->isAllowed('versions')) {\n            throw $this->createAccessDeniedHttpException('Permission denied, version id [' . $id . ']');\n        }\n\n        $loader = \\Pimcore::getContainer()->get('pimcore.implementation_loader.asset.metadata.data');\n\n        return $this->render(\n            '@PimcoreAdmin/Admin/Asset/showVersion' . ucfirst($asset->getType()) . '.html.twig',\n            [\n                'asset' => $asset,\n                'loader' => $loader,\n            ]\n        );\n    }\n\n    /**\n     * @Route(\"/download\", name=\"pimcore_admin_asset_download\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function downloadAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view asset');\n        }\n\n        $stream = $asset->getStream();\n\n        if (!is_resource($stream)) {\n            throw $this->createNotFoundException('Unable to get resource for asset ' . $asset->getId());\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $asset->getMimeType(),\n            'Content-Disposition' => sprintf('attachment; filename=\"%s\"', $asset->getFilename()),\n            'Content-Length' => $asset->getFileSize(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-image-thumbnail\", name=\"pimcore_admin_asset_downloadimagethumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadImageThumbnailAction(Request $request)\n    {\n        $image = Asset\\Image::getById((int) $request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $config = null;\n        $thumbnail = null;\n        $thumbnailName = $request->get('thumbnail');\n        $thumbnailFile = null;\n        $deleteThumbnail = true;\n\n        if ($request->get('config')) {\n            $config = $this->decodeJson($request->get('config'));\n        } elseif ($request->get('type')) {\n            $predefined = [\n                'web' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 3500,\n                    'dpi' => 72,\n                    'format' => 'JPEG',\n                    'quality' => 85,\n                ],\n                'print' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 6000,\n                    'dpi' => 300,\n                    'format' => 'JPEG',\n                    'quality' => 95,\n                ],\n                'office' => [\n                    'resize_mode' => 'scaleByWidth',\n                    'width' => 1190,\n                    'dpi' => 144,\n                    'format' => 'JPEG',\n                    'quality' => 90,\n                ],\n            ];\n\n            $config = $predefined[$request->get('type')];\n        } elseif ($thumbnailName) {\n            $thumbnail = $image->getThumbnail($thumbnailName);\n            $deleteThumbnail = false;\n        }\n\n        if ($config) {\n            $thumbnailConfig = new Asset\\Image\\Thumbnail\\Config();\n            $thumbnailConfig->setName('pimcore-download-' . $image->getId() . '-' . md5($request->get('config')));\n\n            if ($config['resize_mode'] == 'scaleByWidth') {\n                $thumbnailConfig->addItem('scaleByWidth', [\n                    'width' => $config['width'],\n                ]);\n            } elseif ($config['resize_mode'] == 'scaleByHeight') {\n                $thumbnailConfig->addItem('scaleByHeight', [\n                    'height' => $config['height'],\n                ]);\n            } else {\n                $thumbnailConfig->addItem('resize', [\n                    'width' => $config['width'],\n                    'height' => $config['height'],\n                ]);\n            }\n\n            $thumbnailConfig->setQuality($config['quality']);\n            $thumbnailConfig->setFormat($config['format']);\n            $thumbnailConfig->setRasterizeSVG(true);\n\n            if ($thumbnailConfig->getFormat() == 'JPEG') {\n                $thumbnailConfig->setPreserveMetaData(true);\n\n                if (empty($config['quality'])) {\n                    $thumbnailConfig->setPreserveColor(true);\n                }\n            }\n\n            $thumbnail = $image->getThumbnail($thumbnailConfig);\n            $thumbnailFile = $thumbnail->getLocalFile();\n\n            $exiftool = \\Pimcore\\Tool\\Console::getExecutable('exiftool');\n            if ($thumbnailConfig->getFormat() == 'JPEG' && $exiftool && isset($config['dpi']) && $config['dpi']) {\n                $process = new Process([$exiftool, '-overwrite_original', '-xresolution=' . (int)$config['dpi'], '-yresolution=' . (int)$config['dpi'], '-resolutionunit=inches', $thumbnailFile]);\n                $process->run();\n            }\n        }\n\n        if ($thumbnail) {\n            $thumbnailFile = $thumbnailFile ?: $thumbnail->getLocalFile();\n\n            $downloadFilename = preg_replace(\n                '/\\.' . preg_quote(File::getFileExtension($image->getFilename())) . '$/i',\n                '.' . $thumbnail->getFileExtension(),\n                $image->getFilename()\n            );\n            $downloadFilename = strtolower($downloadFilename);\n\n            clearstatcache();\n\n            $response = new BinaryFileResponse($thumbnailFile);\n            $response->headers->set('Content-Type', $thumbnail->getMimeType());\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $downloadFilename);\n            $this->addThumbnailCacheHeaders($response);\n            $response->deleteFileAfterSend($deleteThumbnail);\n\n            return $response;\n        }\n\n        throw $this->createNotFoundException('Thumbnail not found');\n    }\n\n    /**\n     * @Route(\"/get-asset\", name=\"pimcore_admin_asset_getasset\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getAssetAction(Request $request)\n    {\n        $image = Asset::getById((int)$request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view asset');\n        }\n\n        $stream = $image->getStream();\n\n        if (!is_resource($stream)) {\n            throw $this->createNotFoundException('Unable to get resource for asset ' . $image->getId());\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $image->getMimeType(),\n            'Access-Control-Allow-Origin' => '*',\n        ]);\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-image-thumbnail\", name=\"pimcore_admin_asset_getimagethumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse|JsonResponse|BinaryFileResponse\n     */\n    public function getImageThumbnailAction(Request $request)\n    {\n        $fileinfo = $request->get('fileinfo');\n        $image = Asset\\Image::getById((int)$request->get('id'));\n\n        if (!$image) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$image->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnailConfig = null;\n\n        if ($request->get('thumbnail')) {\n            $thumbnailConfig = $image->getThumbnailConfig($request->get('thumbnail'));\n        }\n        if (!$thumbnailConfig) {\n            if ($request->get('config')) {\n                $thumbnailConfig = $image->getThumbnailConfig($this->decodeJson($request->get('config')));\n            } else {\n                $thumbnailConfig = $image->getThumbnailConfig(array_merge($request->request->all(), $request->query->all()));\n            }\n        } else {\n            // no high-res images in admin mode (editmode)\n            // this is mostly because of the document's image editable, which doesn't know anything about the thumbnail\n            // configuration, so the dimensions would be incorrect (double the size)\n            $thumbnailConfig->setHighResolution(1);\n        }\n\n        $format = strtolower($thumbnailConfig->getFormat());\n        if ($format == 'source' || $format == 'print') {\n            $thumbnailConfig->setFormat('PNG');\n            $thumbnailConfig->setRasterizeSVG(true);\n        }\n\n        if ($request->get('treepreview')) {\n            $thumbnailConfig = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n            if ($request->get('origin') === 'treeNode' && !$image->getThumbnail($thumbnailConfig)->exists()) {\n                \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                    new AssetPreviewImageMessage($image->getId())\n                );\n\n                throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $image->getId()));\n            }\n        }\n\n        $cropPercent = $request->get('cropPercent');\n        if ($cropPercent && filter_var($cropPercent, FILTER_VALIDATE_BOOLEAN)) {\n            $thumbnailConfig->addItemAt(0, 'cropPercent', [\n                'width' => $request->get('cropWidth'),\n                'height' => $request->get('cropHeight'),\n                'y' => $request->get('cropTop'),\n                'x' => $request->get('cropLeft'),\n            ]);\n\n            $hash = md5(Tool\\Serialize::serialize(array_merge($request->request->all(), $request->query->all())));\n            $thumbnailConfig->setName($thumbnailConfig->getName() . '_auto_' . $hash);\n        }\n\n        $thumbnail = $image->getThumbnail($thumbnailConfig);\n\n        if ($fileinfo) {\n            return $this->adminJson([\n                'width' => $thumbnail->getWidth(),\n                'height' => $thumbnail->getHeight(), ]);\n        }\n\n        $stream = $thumbnail->getStream();\n\n        if (!$stream) {\n            return new BinaryFileResponse(PIMCORE_PATH . '/bundles/AdminBundle/Resources/public/img/filetype-not-supported.svg');\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $thumbnail->getMimeType(),\n            'Access-Control-Allow-Origin', '*',\n        ]);\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-folder-thumbnail\", name=\"pimcore_admin_asset_getfolderthumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getFolderThumbnailAction(Request $request)\n    {\n        $folder = null;\n\n        if ($request->get('id')) {\n            $folder = Asset\\Folder::getById((int)$request->get('id'));\n            if ($folder instanceof  Asset\\Folder) {\n                if (!$folder->isAllowed('view')) {\n                    throw $this->createAccessDeniedException('not allowed to view thumbnail');\n                }\n\n                $stream = $folder->getPreviewImage();\n                if (!$stream) {\n                    throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $folder->getId()));\n                } else {\n                    $response = new StreamedResponse(function () use ($stream) {\n                        fpassthru($stream);\n                    }, 200, [\n                        'Content-Type' => 'image/jpg',\n                    ]);\n                }\n\n                $this->addThumbnailCacheHeaders($response);\n\n                return $response;\n            }\n        }\n\n        throw $this->createNotFoundException('could not load asset folder');\n    }\n\n    /**\n     * @Route(\"/get-video-thumbnail\", name=\"pimcore_admin_asset_getvideothumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getVideoThumbnailAction(Request $request)\n    {\n        $video = null;\n\n        if ($request->get('id')) {\n            $video = Asset\\Video::getById((int)$request->get('id'));\n        } elseif ($request->get('path')) {\n            $video = Asset\\Video::getByPath($request->get('path'));\n        }\n\n        if (!$video) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$video->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnail = array_merge($request->request->all(), $request->query->all());\n\n        if ($request->get('treepreview')) {\n            $thumbnail = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n        }\n\n        $time = null;\n        if (is_numeric($request->get('time'))) {\n            $time = (int)$request->get('time');\n        }\n\n        if ($request->get('settime')) {\n            $video->removeCustomSetting('image_thumbnail_asset');\n            $video->setCustomSetting('image_thumbnail_time', $time);\n            $video->save();\n        }\n\n        $image = null;\n        if ($request->get('image')) {\n            $image = Asset\\Image::getById((int)$request->get('image'));\n        }\n\n        if ($request->get('setimage') && $image) {\n            $video->removeCustomSetting('image_thumbnail_time');\n            $video->setCustomSetting('image_thumbnail_asset', $image->getId());\n            $video->save();\n        }\n\n        $thumb = $video->getImageThumbnail($thumbnail, $time, $image);\n\n        if ($request->get('origin') === 'treeNode' && !$thumb->exists()) {\n            \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                new AssetPreviewImageMessage($video->getId())\n            );\n\n            throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $video->getId()));\n        }\n\n        $stream = $thumb->getStream();\n        if (!$stream) {\n            throw $this->createNotFoundException('Unable to get video thumbnail for video ' . $video->getId());\n        }\n\n        $response = new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/' . $thumb->getFileExtension(),\n        ]);\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-document-thumbnail\", name=\"pimcore_admin_asset_getdocumentthumbnail\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse|BinaryFileResponse\n     */\n    public function getDocumentThumbnailAction(Request $request)\n    {\n        $document = Asset\\Document::getById((int)$request->get('id'));\n\n        if (!$document) {\n            throw $this->createNotFoundException('could not load document asset');\n        }\n\n        if (!$document->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view thumbnail');\n        }\n\n        $thumbnail = Asset\\Image\\Thumbnail\\Config::getByAutoDetect(array_merge($request->request->all(), $request->query->all()));\n\n        $format = strtolower($thumbnail->getFormat());\n        if ($format == 'source') {\n            $thumbnail->setFormat('jpeg'); // default format for documents is JPEG not PNG (=too big)\n        }\n\n        if ($request->get('treepreview')) {\n            $thumbnail = Asset\\Image\\Thumbnail\\Config::getPreviewConfig();\n        }\n\n        $page = 1;\n        if (is_numeric($request->get('page'))) {\n            $page = (int)$request->get('page');\n        }\n\n        $thumb = $document->getImageThumbnail($thumbnail, $page);\n\n        if ($request->get('origin') === 'treeNode' && !$thumb->exists()) {\n            \\Pimcore::getContainer()->get('messenger.bus.pimcore-core')->dispatch(\n                new AssetPreviewImageMessage($document->getId())\n            );\n\n            throw $this->createNotFoundException(sprintf('Tree preview thumbnail not available for asset %s', $document->getId()));\n        }\n\n        $stream = $thumb->getStream();\n        if ($stream) {\n            $response = new StreamedResponse(function () use ($stream) {\n                fpassthru($stream);\n            }, 200, [\n                'Content-Type' => 'image/' . $thumb->getFileExtension(),\n            ]);\n        } else {\n            $response = new BinaryFileResponse(PIMCORE_PATH . '/bundles/AdminBundle/Resources/public/img/filetype-not-supported.svg');\n        }\n\n        $this->addThumbnailCacheHeaders($response);\n\n        return $response;\n    }\n\n    /**\n     * @param Response $response\n     */\n    protected function addThumbnailCacheHeaders(Response $response)\n    {\n        $lifetime = 300;\n        $date = new \\DateTime('now');\n        $date->add(new \\DateInterval('PT' . $lifetime . 'S'));\n\n        $response->setMaxAge($lifetime);\n        $response->setPublic();\n        $response->setExpires($date);\n        $response->headers->set('Pragma', '');\n    }\n\n    /**\n     * @Route(\"/get-preview-document\", name=\"pimcore_admin_asset_getpreviewdocument\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getPreviewDocumentAction(Request $request)\n    {\n        $asset = Asset\\Document::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load document asset');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $stream = $this->getDocumentPreviewPdf($asset);\n            if ($stream) {\n                return new StreamedResponse(function () use ($stream) {\n                    fpassthru($stream);\n                }, 200, [\n                    'Content-Type' => 'application/pdf',\n                ]);\n            } else {\n                throw $this->createNotFoundException('Unable to get preview for asset ' . $asset->getId());\n            }\n        } else {\n            throw $this->createAccessDeniedException('Access to asset ' . $asset->getId() . ' denied');\n        }\n    }\n\n    /**\n     * @param Asset\\Document $asset\n     *\n     * @return resource|null\n     */\n    protected function getDocumentPreviewPdf(Asset\\Document $asset)\n    {\n        $stream = null;\n\n        if ($asset->getMimeType() == 'application/pdf') {\n            $stream = $asset->getStream();\n        }\n\n        if (!$stream && $asset->getPageCount() && \\Pimcore\\Document::isAvailable() && \\Pimcore\\Document::isFileTypeSupported($asset->getFilename())) {\n            try {\n                $document = \\Pimcore\\Document::getInstance();\n                $stream = $document->getPdf($asset);\n            } catch (\\Exception $e) {\n                // nothing to do\n            }\n        }\n\n        return $stream;\n    }\n\n    /**\n     * @Route(\"/get-preview-video\", name=\"pimcore_admin_asset_getpreviewvideo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getPreviewVideoAction(Request $request)\n    {\n        $asset = Asset\\Video::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to preview');\n        }\n\n        $previewData = ['asset' => $asset];\n        $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n        $thumbnail = $asset->getThumbnail($config, ['mp4']);\n\n        if ($thumbnail) {\n            $previewData['asset'] = $asset;\n            $previewData['thumbnail'] = $thumbnail;\n\n            if ($thumbnail['status'] == 'finished') {\n                return $this->render(\n                    '@PimcoreAdmin/Admin/Asset/getPreviewVideoDisplay.html.twig',\n                    $previewData\n                );\n            } else {\n                return $this->render(\n                    '@PimcoreAdmin/Admin/Asset/getPreviewVideoError.html.twig',\n                    $previewData\n                );\n            }\n        } else {\n            return $this->render(\n                '@PimcoreAdmin/Admin/Asset/getPreviewVideoError.html.twig',\n                $previewData\n            );\n        }\n    }\n\n    /**\n     * @Route(\"/serve-video-preview\", name=\"pimcore_admin_asset_servevideopreview\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function serveVideoPreviewAction(Request $request)\n    {\n        $asset = Asset\\Video::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('could not load video asset');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to preview');\n        }\n\n        $config = Asset\\Video\\Thumbnail\\Config::getPreviewConfig();\n        $thumbnail = $asset->getThumbnail($config, ['mp4']);\n        $storagePath = $asset->getRealPath() . '/' . preg_replace('@^' . preg_quote($asset->getPath(), '@') . '@', '', urldecode($thumbnail['formats']['mp4']));\n\n        $storage = Tool\\Storage::get('thumbnail');\n        if ($storage->fileExists($storagePath)) {\n            $fs = $storage->fileSize($storagePath);\n            $stream = $storage->readStream($storagePath);\n\n            return new StreamedResponse(function () use ($stream) {\n                fpassthru($stream);\n            }, 200, [\n                'Content-Type' => 'video/mp4',\n                'Content-Length' => $fs,\n                'Accept-Ranges' => 'bytes',\n            ]);\n        } else {\n            throw $this->createNotFoundException('Video thumbnail not found');\n        }\n    }\n\n    /**\n     * @Route(\"/image-editor\", name=\"pimcore_admin_asset_imageeditor\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function imageEditorAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('Not allowed to preview');\n        }\n\n        return $this->render(\n            '@PimcoreAdmin/Admin/Asset/imageEditor.html.twig',\n            ['asset' => $asset]\n        );\n    }\n\n    /**\n     * @Route(\"/image-editor-save\", name=\"pimcore_admin_asset_imageeditorsave\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function imageEditorSaveAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('publish')) {\n            throw $this->createAccessDeniedException('not allowed to publish');\n        }\n\n        $data = $request->get('dataUri');\n        $data = substr($data, strpos($data, ','));\n        $data = base64_decode($data);\n        $asset->setData($data);\n        $asset->setUserModification($this->getAdminUser()->getId());\n        $asset->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get-folder-content-preview\", name=\"pimcore_admin_asset_getfoldercontentpreview\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getFolderContentPreviewAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $filterPrepareEvent = new GenericEvent($this, [\n            'requestParams' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($filterPrepareEvent, AdminEvents::ASSET_LIST_BEFORE_FILTER_PREPARE);\n\n        $allParams = $filterPrepareEvent->getArgument('requestParams');\n\n        $folder = Asset::getById($allParams['id']);\n\n        $start = 0;\n        $limit = 10;\n\n        if ($allParams['limit']) {\n            $limit = $allParams['limit'];\n        }\n        if ($allParams['start']) {\n            $start = $allParams['start'];\n        }\n\n        $conditionFilters = [];\n        $list = new Asset\\Listing();\n        $conditionFilters[] = 'path LIKE ' . ($folder->getRealFullPath() == '/' ? \"'/%'\" : $list->quote(Helper::escapeLike($folder->getRealFullPath()) . '/%')) . \" AND type != 'folder'\";\n\n        if (!$this->getAdminUser()->isAdmin()) {\n            $userIds = $this->getAdminUser()->getRoles();\n            $userIds[] = $this->getAdminUser()->getId();\n            $conditionFilters[] = ' (\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                    OR\n                                                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                                                 )';\n        }\n\n        $condition = implode(' AND ', $conditionFilters);\n\n        $list->setCondition($condition);\n        $list->setLimit($limit);\n        $list->setOffset($start);\n        $list->setOrderKey('CAST(filename AS CHAR CHARACTER SET utf8) COLLATE utf8_general_ci ASC', false);\n\n        $beforeListLoadEvent = new GenericEvent($this, [\n            'list' => $list,\n            'context' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n        /** @var Asset\\Listing $list */\n        $list = $beforeListLoadEvent->getArgument('list');\n\n        $list->load();\n\n        $assets = [];\n\n        foreach ($list as $asset) {\n            $filenameDisplay = $asset->getFilename();\n            if (strlen($filenameDisplay) > 32) {\n                $filenameDisplay = substr($filenameDisplay, 0, 25) . '...' . \\Pimcore\\File::getFileExtension($filenameDisplay);\n            }\n\n            // Like for treeGetChildsByIdAction, so we respect isAllowed method which can be extended (object DI) for custom permissions, so relying only users_workspaces_asset is insufficient and could lead security breach\n            if ($asset->isAllowed('list')) {\n                $assets[] = [\n                    'id' => $asset->getId(),\n                    'type' => $asset->getType(),\n                    'filename' => $asset->getFilename(),\n                    'filenameDisplay' => htmlspecialchars($filenameDisplay),\n                    'url' => $this->getThumbnailUrl($asset),\n                    'idPath' => $data['idPath'] = Element\\Service::getIdPath($asset),\n                ];\n            }\n        }\n\n        // We need to temporary use data key to be compatible with the ASSET_LIST_AFTER_LIST_LOAD global event\n        $result = ['data' => $assets, 'success' => true, 'total' => $list->getTotalCount()];\n\n        $afterListLoadEvent = new GenericEvent($this, [\n            'list' => $result,\n            'context' => $allParams,\n        ]);\n        $eventDispatcher->dispatch($afterListLoadEvent, AdminEvents::ASSET_LIST_AFTER_LIST_LOAD);\n        $result = $afterListLoadEvent->getArgument('list');\n\n        // Here we revert to assets key\n        return $this->adminJson(['assets' => $result['data'], 'success' => $result['success'], 'total' => $result['total']]);\n    }\n\n    /**\n     * @Route(\"/copy-info\", name=\"pimcore_admin_asset_copyinfo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function copyInfoAction(Request $request)\n    {\n        $transactionId = time();\n        $pasteJobs = [];\n\n        Tool\\Session::useSession(function (AttributeBagInterface $session) use ($transactionId) {\n            $session->set((string) $transactionId, []);\n        }, 'pimcore_copy');\n\n        if ($request->get('type') == 'recursive') {\n            $asset = Asset::getById((int) $request->get('sourceId'));\n\n            if (!$asset) {\n                throw $this->createNotFoundException('Source not found');\n            }\n\n            // first of all the new parent\n            $pasteJobs[] = [[\n                'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                'method' => 'POST',\n                'params' => [\n                    'sourceId' => $request->get('sourceId'),\n                    'targetId' => $request->get('targetId'),\n                    'type' => 'child',\n                    'transactionId' => $transactionId,\n                    'saveParentId' => true,\n                ],\n            ]];\n\n            if ($asset->hasChildren()) {\n                // get amount of children\n                $list = new Asset\\Listing();\n                $list->setCondition('path LIKE ?', [$list->escapeLike($asset->getRealFullPath()) . '/%']);\n                $list->setOrderKey('LENGTH(path)', false);\n                $list->setOrder('ASC');\n                $childIds = $list->loadIdList();\n\n                if (count($childIds) > 0) {\n                    foreach ($childIds as $id) {\n                        $pasteJobs[] = [[\n                            'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                            'method' => 'POST',\n                            'params' => [\n                                'sourceId' => $id,\n                                'targetParentId' => $request->get('targetId'),\n                                'sourceParentId' => $request->get('sourceId'),\n                                'type' => 'child',\n                                'transactionId' => $transactionId,\n                            ],\n                        ]];\n                    }\n                }\n            }\n        } elseif ($request->get('type') == 'child' || $request->get('type') == 'replace') {\n            // the object itself is the last one\n            $pasteJobs[] = [[\n                'url' => $this->generateUrl('pimcore_admin_asset_copy'),\n                'method' => 'POST',\n                'params' => [\n                    'sourceId' => $request->get('sourceId'),\n                    'targetId' => $request->get('targetId'),\n                    'type' => $request->get('type'),\n                    'transactionId' => $transactionId,\n                ],\n            ]];\n        }\n\n        return $this->adminJson([\n            'pastejobs' => $pasteJobs,\n        ]);\n    }\n\n    /**\n     * @Route(\"/copy\", name=\"pimcore_admin_asset_copy\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function copyAction(Request $request)\n    {\n        $success = false;\n        $sourceId = (int)$request->get('sourceId');\n        $source = Asset::getById($sourceId);\n\n        $session = Tool\\Session::get('pimcore_copy');\n        $sessionBag = $session->get($request->get('transactionId'));\n\n        $targetId = (int)$request->get('targetId');\n        if ($request->get('targetParentId')) {\n            $sourceParent = Asset::getById((int) $request->get('sourceParentId'));\n\n            // this is because the key can get the prefix \"_copy\" if the target does already exists\n            if ($sessionBag['parentId']) {\n                $targetParent = Asset::getById($sessionBag['parentId']);\n            } else {\n                $targetParent = Asset::getById((int) $request->get('targetParentId'));\n            }\n\n            $targetPath = preg_replace('@^' . $sourceParent->getRealFullPath() . '@', $targetParent . '/', $source->getRealPath());\n            $target = Asset::getByPath($targetPath);\n        } else {\n            $target = Asset::getById($targetId);\n        }\n\n        if (!$target) {\n            throw $this->createNotFoundException('Target not found');\n        }\n\n        if ($target->isAllowed('create')) {\n            $source = Asset::getById($sourceId);\n            if ($source != null) {\n                if ($request->get('type') == 'child') {\n                    $newAsset = $this->_assetService->copyAsChild($target, $source);\n\n                    // this is because the key can get the prefix \"_copy\" if the target does already exists\n                    if ($request->get('saveParentId')) {\n                        $sessionBag['parentId'] = $newAsset->getId();\n                    }\n                } elseif ($request->get('type') == 'replace') {\n                    $this->_assetService->copyContents($target, $source);\n                }\n\n                $session->set($request->get('transactionId'), $sessionBag);\n                Tool\\Session::writeClose();\n\n                $success = true;\n            } else {\n                Logger::debug('prevended copy/paste because asset with same path+key already exists in this location');\n            }\n        } else {\n            Logger::error('could not execute copy/paste because of missing permissions on target [ ' . $targetId . ' ]');\n\n            throw $this->createAccessDeniedHttpException();\n        }\n\n        Tool\\Session::writeClose();\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip-jobs\", name=\"pimcore_admin_asset_downloadaszipjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function downloadAsZipJobsAction(Request $request)\n    {\n        $jobId = uniqid();\n        $filesPerJob = 5;\n        $jobs = [];\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $parentPath = $asset->getRealFullPath();\n            if ($asset->getId() == 1) {\n                $parentPath = '';\n            }\n\n            $db = \\Pimcore\\Db::get();\n            $conditionFilters = [];\n            $selectedIds = explode(',', $request->get('selectedIds', ''));\n            $quotedSelectedIds = [];\n            foreach ($selectedIds as $selectedId) {\n                if ($selectedId) {\n                    $quotedSelectedIds[] = $db->quote($selectedId);\n                }\n            }\n            if (!empty($quotedSelectedIds)) {\n                //add a condition if id numbers are specified\n                $conditionFilters[] = 'id IN (' . implode(',', $quotedSelectedIds) . ')';\n            }\n            $conditionFilters[] = 'path LIKE ' . $db->quote(Helper::escapeLike($parentPath) . '/%') . ' AND type != ' . $db->quote('folder');\n            if (!$this->getAdminUser()->isAdmin()) {\n                $userIds = $this->getAdminUser()->getRoles();\n                $userIds[] = $this->getAdminUser()->getId();\n                $conditionFilters[] = ' (\n                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    OR\n                    (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                )';\n            }\n\n            $condition = implode(' AND ', $conditionFilters);\n\n            $assetList = new Asset\\Listing();\n            $assetList->setCondition($condition);\n            $assetList->setOrderKey('LENGTH(path)', false);\n            $assetList->setOrder('ASC');\n\n            for ($i = 0; $i < ceil($assetList->getTotalCount() / $filesPerJob); $i++) {\n                $jobs[] = [[\n                    'url' => $this->generateUrl('pimcore_admin_asset_downloadaszipaddfiles'),\n                    'method' => 'GET',\n                    'params' => [\n                        'id' => $asset->getId(),\n                        'selectedIds' => implode(',', $selectedIds),\n                        'offset' => $i * $filesPerJob,\n                        'limit' => $filesPerJob,\n                        'jobId' => $jobId,\n                    ],\n                ]];\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'jobs' => $jobs,\n            'jobId' => $jobId,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip-add-files\", name=\"pimcore_admin_asset_downloadaszipaddfiles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function downloadAsZipAddFilesAction(Request $request)\n    {\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/download-zip-' . $request->get('jobId') . '.zip';\n        $asset = Asset::getById((int) $request->get('id'));\n        $success = false;\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if ($asset->isAllowed('view')) {\n            $zip = new \\ZipArchive();\n            if (!is_file($zipFile)) {\n                $zipState = $zip->open($zipFile, \\ZipArchive::CREATE);\n            } else {\n                $zipState = $zip->open($zipFile);\n            }\n\n            if ($zipState === true) {\n                $parentPath = $asset->getRealFullPath();\n                if ($asset->getId() == 1) {\n                    $parentPath = '';\n                }\n\n                $db = \\Pimcore\\Db::get();\n                $conditionFilters = [];\n                $selectedIds = $request->get('selectedIds', []);\n\n                if (!empty($selectedIds)) {\n                    $selectedIds = explode(',', $selectedIds);\n\n                    $quotedSelectedIds = [];\n                    foreach ($selectedIds as $selectedId) {\n                        if ($selectedId) {\n                            $quotedSelectedIds[] = $db->quote($selectedId);\n                        }\n                    }\n\n                    //add a condition if id numbers are specified\n                    $conditionFilters[] = 'id IN (' . implode(',', $quotedSelectedIds) . ')';\n                }\n                $conditionFilters[] = \"type != 'folder' AND path LIKE \" . $db->quote(Helper::escapeLike($parentPath) . '/%');\n                if (!$this->getAdminUser()->isAdmin()) {\n                    $userIds = $this->getAdminUser()->getRoles();\n                    $userIds[] = $this->getAdminUser()->getId();\n                    $conditionFilters[] = ' (\n                        (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(CONCAT(path, filename),cpath)=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                        OR\n                        (select list from users_workspaces_asset where userId in (' . implode(',', $userIds) . ') and LOCATE(cpath,CONCAT(path, filename))=1  ORDER BY LENGTH(cpath) DESC LIMIT 1)=1\n                    )';\n                }\n\n                $condition = implode(' AND ', $conditionFilters);\n\n                $assetList = new Asset\\Listing();\n                $assetList->setCondition($condition);\n                $assetList->setOrderKey('LENGTH(path) ASC, id ASC', false);\n                $assetList->setOffset((int)$request->get('offset'));\n                $assetList->setLimit((int)$request->get('limit'));\n\n                foreach ($assetList as $a) {\n                    if ($a->isAllowed('view')) {\n                        if (!$a instanceof Asset\\Folder) {\n                            // add the file with the relative path to the parent directory\n                            $zip->addFile($a->getLocalFile(), preg_replace('@^' . preg_quote($asset->getRealPath(), '@') . '@i', '', $a->getRealFullPath()));\n                        }\n                    }\n                }\n\n                $zip->close();\n                $success = true;\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-as-zip\", name=\"pimcore_admin_asset_downloadaszip\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     * Download all assets contained in the folder with parameter id as ZIP file.\n     * The suggested filename is either [folder name].zip or assets.zip for the root folder.\n     */\n    public function downloadAsZipAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/download-zip-' . $request->get('jobId') . '.zip';\n        $suggestedFilename = $asset->getFilename();\n        if (empty($suggestedFilename)) {\n            $suggestedFilename = 'assets';\n        }\n\n        $response = new BinaryFileResponse($zipFile);\n        $response->headers->set('Content-Type', 'application/zip');\n        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, $suggestedFilename . '.zip');\n        $response->deleteFileAfterSend(true);\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-zip\", name=\"pimcore_admin_asset_importzip\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importZipAction(Request $request)\n    {\n        $jobId = uniqid();\n        $filesPerJob = 5;\n        $jobs = [];\n        $asset = Asset::getById((int) $request->get('parentId'));\n\n        if (!is_file($_FILES['Filedata']['tmp_name'])) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => 'Something went wrong, please check upload_max_filesize and post_max_size in your php.ini as well as the write permissions on the file system',\n            ]);\n        }\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n\n        if (!$asset->isAllowed('create')) {\n            throw $this->createAccessDeniedException('not allowed to create');\n        }\n\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $jobId . '.zip';\n\n        copy($_FILES['Filedata']['tmp_name'], $zipFile);\n\n        $zip = new \\ZipArchive;\n        $retCode = $zip->open($zipFile);\n        if ($retCode === true) {\n            $jobAmount = ceil($zip->numFiles / $filesPerJob);\n            for ($i = 0; $i < $jobAmount; $i++) {\n                $jobs[] = [[\n                    'url' => $this->generateUrl('pimcore_admin_asset_importzipfiles'),\n                    'method' => 'POST',\n                    'params' => [\n                        'parentId' => $asset->getId(),\n                        'offset' => $i * $filesPerJob,\n                        'limit' => $filesPerJob,\n                        'jobId' => $jobId,\n                        'last' => (($i + 1) >= $jobAmount) ? 'true' : '',\n                    ],\n                ]];\n            }\n            $zip->close();\n\n            // here we have to use this method and not the JSON action helper ($this->_helper->json()) because this will add\n            // Content-Type: application/json which fires a download window in most browsers, because this is a normal POST\n            // request and not XHR where the content-type doesn't matter\n            $responseJson = $this->encodeJson([\n                'success' => true,\n                'jobs' => $jobs,\n                'jobId' => $jobId,\n            ]);\n\n            return new Response($responseJson);\n        } else {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('could_not_open_zip_file'),\n            ]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-zip-files\", name=\"pimcore_admin_asset_importzipfiles\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importZipFilesAction(Request $request)\n    {\n        $jobId = $request->get('jobId');\n        $limit = (int)$request->get('limit');\n        $offset = (int)$request->get('offset');\n        $importAsset = Asset::getById((int) $request->get('parentId'));\n        $zipFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $jobId . '.zip';\n        $tmpDir = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/zip-import';\n\n        if (!is_dir($tmpDir)) {\n            File::mkdir($tmpDir, 0777, true);\n        }\n\n        $zip = new \\ZipArchive;\n        if ($zip->open($zipFile) === true) {\n            for ($i = $offset; $i < ($offset + $limit); $i++) {\n                $path = $zip->getNameIndex($i);\n\n                if (str_starts_with($path, '__MACOSX/') || str_ends_with($path, '/Thumbs.db')) {\n                    continue;\n                }\n\n                if ($path !== false) {\n                    if ($zip->extractTo($tmpDir . '/', $path)) {\n                        $tmpFile = $tmpDir . '/' . preg_replace('@^/@', '', $path);\n\n                        $filename = Element\\Service::getValidKey(basename($path), 'asset');\n\n                        $relativePath = '';\n                        if (dirname($path) != '.') {\n                            $relativePath = dirname($path);\n                        }\n\n                        $parentPath = $importAsset->getRealFullPath() . '/' . preg_replace('@^/@', '', $relativePath);\n                        $parent = Asset\\Service::createFolderByPath($parentPath);\n\n                        // check for duplicate filename\n                        $filename = $this->getSafeFilename($parent->getRealFullPath(), $filename);\n\n                        if ($parent->isAllowed('create')) {\n                            $asset = Asset::create($parent->getId(), [\n                                'filename' => $filename,\n                                'sourcePath' => $tmpFile,\n                                'userOwner' => $this->getAdminUser()->getId(),\n                                'userModification' => $this->getAdminUser()->getId(),\n                            ]);\n\n                            @unlink($tmpFile);\n                        } else {\n                            Logger::debug('prevented creating asset because of missing permissions');\n                        }\n                    }\n                }\n            }\n            $zip->close();\n        }\n\n        if ($request->get('last')) {\n            unlink($zipFile);\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/import-server\", name=\"pimcore_admin_asset_importserver\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importServerAction(Request $request)\n    {\n        $success = true;\n        $filesPerJob = 5;\n        $jobs = [];\n        $importDirectory = str_replace('/fileexplorer', PIMCORE_PROJECT_ROOT, $request->get('serverPath'));\n        if (preg_match('@^' . preg_quote(PIMCORE_PROJECT_ROOT, '@') . '@', $importDirectory) && is_dir($importDirectory)) {\n            $this->checkForPharStreamWrapper($importDirectory);\n            $files = rscandir($importDirectory . '/');\n            $count = count($files);\n            $jobFiles = [];\n\n            for ($i = 0; $i < $count; $i++) {\n                if (is_dir($files[$i])) {\n                    continue;\n                }\n\n                $jobFiles[] = preg_replace('@^' . preg_quote($importDirectory, '@') . '@', '', $files[$i]);\n\n                if (count($jobFiles) >= $filesPerJob || $i >= ($count - 1)) {\n                    $relativeImportDirectory = preg_replace('@^' . preg_quote(PIMCORE_PROJECT_ROOT, '@') . '@', '', $importDirectory);\n                    $jobs[] = [[\n                        'url' => $this->generateUrl('pimcore_admin_asset_importserverfiles'),\n                        'method' => 'POST',\n                        'params' => [\n                            'parentId' => $request->get('parentId'),\n                            'serverPath' => $relativeImportDirectory,\n                            'files' => implode('::', $jobFiles),\n                        ],\n                    ]];\n                    $jobFiles = [];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'jobs' => $jobs,\n        ]);\n    }\n\n    /**\n     * @Route(\"/import-server-files\", name=\"pimcore_admin_asset_importserverfiles\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importServerFilesAction(Request $request)\n    {\n        $assetFolder = Asset::getById((int) $request->get('parentId'));\n        if (!$assetFolder) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n        $serverPath = PIMCORE_PROJECT_ROOT . $request->get('serverPath');\n        $files = explode('::', $request->get('files'));\n\n        foreach ($files as $file) {\n            $absolutePath = $serverPath . $file;\n            $this->checkForPharStreamWrapper($absolutePath);\n            if (is_file($absolutePath)) {\n                $relFolderPath = str_replace('\\\\', '/', dirname($file));\n                $folder = Asset\\Service::createFolderByPath($assetFolder->getRealFullPath() . $relFolderPath);\n                $filename = basename($file);\n\n                // check for duplicate filename\n                $filename = Element\\Service::getValidKey($filename, 'asset');\n                $filename = $this->getSafeFilename($folder->getRealFullPath(), $filename);\n\n                if ($assetFolder->isAllowed('create')) {\n                    $asset = Asset::create($folder->getId(), [\n                        'filename' => $filename,\n                        'sourcePath' => $absolutePath,\n                        'userOwner' => $this->getAdminUser()->getId(),\n                        'userModification' => $this->getAdminUser()->getId(),\n                    ]);\n                } else {\n                    Logger::debug('prevented creating asset because of missing permissions ');\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    protected function checkForPharStreamWrapper($path)\n    {\n        if (stripos($path, 'phar://') !== false) {\n            throw $this->createAccessDeniedException('Using PHAR files is not allowed!');\n        }\n    }\n\n    /**\n     * @Route(\"/import-url\", name=\"pimcore_admin_asset_importurl\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function importUrlAction(Request $request)\n    {\n        $success = true;\n\n        $data = Tool::getHttpData($request->get('url'));\n        $filename = basename($request->get('url'));\n        $parentId = $request->get('id');\n        $parentAsset = Asset::getById((int)$parentId);\n\n        if (!$parentAsset) {\n            throw $this->createNotFoundException('Parent asset not found');\n        }\n\n        $filename = Element\\Service::getValidKey($filename, 'asset');\n        $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n\n        if (empty($filename)) {\n            throw new \\Exception('The filename of the asset is empty');\n        }\n\n        // check for duplicate filename\n        $filename = $this->getSafeFilename($parentAsset->getRealFullPath(), $filename);\n\n        if ($parentAsset->isAllowed('create')) {\n            $asset = Asset::create($parentId, [\n                'filename' => $filename,\n                'data' => $data,\n                'userOwner' => $this->getAdminUser()->getId(),\n                'userModification' => $this->getAdminUser()->getId(),\n            ]);\n            $success = true;\n        } else {\n            Logger::debug('prevented creating asset because of missing permissions');\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/clear-thumbnail\", name=\"pimcore_admin_asset_clearthumbnail\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function clearThumbnailAction(Request $request)\n    {\n        $success = false;\n\n        if ($asset = Asset::getById((int) $request->get('id'))) {\n            if (method_exists($asset, 'clearThumbnails')) {\n                if (!$asset->isAllowed('publish')) {\n                    throw $this->createAccessDeniedException('not allowed to publish');\n                }\n\n                $asset->clearThumbnails(true); // force clear\n                $asset->save();\n\n                $success = true;\n            }\n        }\n\n        return $this->adminJson(['success' => $success]);\n    }\n\n    /**\n     * @Route(\"/grid-proxy\", name=\"pimcore_admin_asset_gridproxy\", methods={\"GET\", \"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param GridHelperService $gridHelperService\n     * @param CsrfProtectionHandler $csrfProtection\n     *\n     * @return JsonResponse\n     */\n    public function gridProxyAction(Request $request, EventDispatcherInterface $eventDispatcher, GridHelperService $gridHelperService, CsrfProtectionHandler $csrfProtection)\n    {\n        $allParams = array_merge($request->request->all(), $request->query->all());\n\n        $filterPrepareEvent = new GenericEvent($this, [\n            'requestParams' => $allParams,\n        ]);\n        $language = $request->get('language') != 'default' ? $request->get('language') : null;\n\n        $eventDispatcher->dispatch($filterPrepareEvent, AdminEvents::ASSET_LIST_BEFORE_FILTER_PREPARE);\n\n        $allParams = $filterPrepareEvent->getArgument('requestParams');\n\n        $loader = \\Pimcore::getContainer()->get('pimcore.implementation_loader.asset.metadata.data');\n\n        if (isset($allParams['data']) && $allParams['data']) {\n            $csrfProtection->checkCsrfToken($request);\n            if ($allParams['xaction'] == 'update') {\n                try {\n                    $data = $this->decodeJson($allParams['data']);\n\n                    $updateEvent = new GenericEvent($this, [\n                        'data' => $data,\n                        'processed' => false,\n                    ]);\n\n                    $eventDispatcher->dispatch($updateEvent, AdminEvents::ASSET_LIST_BEFORE_UPDATE);\n\n                    $processed = $updateEvent->getArgument('processed');\n\n                    if ($processed) {\n                        // update already processed by event handler\n                        return $this->adminJson(['success' => true]);\n                    }\n\n                    $data = $updateEvent->getArgument('data');\n\n                    // save\n                    $asset = Asset::getById($data['id']);\n\n                    if (!$asset) {\n                        throw $this->createNotFoundException('Asset not found');\n                    }\n\n                    if (!$asset->isAllowed('publish')) {\n                        throw $this->createAccessDeniedException(\"Permission denied. You don't have the rights to save this asset.\");\n                    }\n\n                    $metadata = $asset->getMetadata(null, null, false, true);\n                    $dirty = false;\n\n                    unset($data['id']);\n                    foreach ($data as $key => $value) {\n                        $fieldDef = explode('~', $key);\n                        $key = $fieldDef[0];\n                        if (isset($fieldDef[1])) {\n                            $language = ($fieldDef[1] == 'none' ? '' : $fieldDef[1]);\n                        }\n\n                        foreach ($metadata as $idx => &$em) {\n                            if ($em['name'] == $key && $em['language'] == $language) {\n                                try {\n                                    $dataImpl = $loader->build($em['type']);\n                                    $value = $dataImpl->getDataFromListfolderGrid($value, $em);\n                                } catch (UnsupportedException $le) {\n                                    Logger::error('could not resolve metadata implementation for ' . $em['type']);\n                                }\n\n                                $em['data'] = $value;\n                                $dirty = true;\n\n                                break;\n                            }\n                        }\n\n                        if (!$dirty) {\n                            $defaulMetadata = ['title', 'alt', 'copyright'];\n                            if (in_array($key, $defaulMetadata)) {\n                                $newEm = [\n                                    'name' => $key,\n                                    'language' => $language,\n                                    'type' => 'input',\n                                    'data' => $value,\n                                ];\n\n                                try {\n                                    $dataImpl = $loader->build($newEm['type']);\n                                    $newEm['data'] = $dataImpl->getDataFromListfolderGrid($value, $newEm);\n                                } catch (UnsupportedException $le) {\n                                    Logger::error('could not resolve metadata implementation for ' . $newEm['type']);\n                                }\n\n                                $metadata[] = $newEm;\n\n                                $dirty = true;\n                            } else {\n                                $predefined = Model\\Metadata\\Predefined::getByName($key);\n                                if ($predefined && (empty($predefined->getTargetSubtype())\n                                        || $predefined->getTargetSubtype() == $asset->getType())) {\n                                    $newEm = [\n                                        'name' => $key,\n                                        'language' => $language,\n                                        'type' => $predefined->getType(),\n                                        'data' => $value,\n                                    ];\n\n                                    try {\n                                        $dataImpl = $loader->build($newEm['type']);\n                                        $newEm['data'] = $dataImpl->getDataFromListfolderGrid($value, $newEm);\n                                    } catch (UnsupportedException $le) {\n                                        Logger::error('could not resolve metadata implementation for ' . $newEm['type']);\n                                    }\n\n                                    $metadata[] = $newEm;\n                                    $dirty = true;\n                                }\n                            }\n                        }\n                    }\n\n                    if ($dirty) {\n                        // $metadata = Asset\\Service::minimizeMetadata($metadata, \"grid\");\n                        $asset->setMetadataRaw($metadata);\n                        $asset->save();\n\n                        return $this->adminJson(['success' => true]);\n                    }\n\n                    return $this->adminJson(['success' => false, 'message' => 'something went wrong.']);\n                } catch (\\Exception $e) {\n                    return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                }\n            }\n        } else {\n            $list = $gridHelperService->prepareAssetListingForGrid($allParams, $this->getAdminUser());\n\n            $beforeListLoadEvent = new GenericEvent($this, [\n                'list' => $list,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($beforeListLoadEvent, AdminEvents::ASSET_LIST_BEFORE_LIST_LOAD);\n            /** @var Asset\\Listing $list */\n            $list = $beforeListLoadEvent->getArgument('list');\n\n            $list->load();\n\n            $assets = [];\n            foreach ($list->getAssets() as $index => $asset) {\n                // Like for treeGetChildsByIdAction, so we respect isAllowed method which can be extended (object DI) for custom permissions, so relying only users_workspaces_asset is insufficient and could lead security breach\n                if ($asset->isAllowed('list')) {\n                    $a = Asset\\Service::gridAssetData($asset, $allParams['fields'], $allParams['language'] ?? '');\n                    $assets[] = $a;\n                }\n            }\n\n            $result = ['data' => $assets, 'success' => true, 'total' => $list->getTotalCount()];\n\n            $afterListLoadEvent = new GenericEvent($this, [\n                'list' => $result,\n                'context' => $allParams,\n            ]);\n            $eventDispatcher->dispatch($afterListLoadEvent, AdminEvents::ASSET_LIST_AFTER_LIST_LOAD);\n            $result = $afterListLoadEvent->getArgument('list');\n\n            return $this->adminJson($result);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-text\", name=\"pimcore_admin_asset_gettext\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTextAction(Request $request)\n    {\n        $asset = Asset::getById((int) $request->get('id'));\n\n        if (!$asset) {\n            throw $this->createNotFoundException('Asset not found');\n        }\n\n        if (!$asset->isAllowed('view')) {\n            throw $this->createAccessDeniedException('not allowed to view');\n        }\n\n        $page = $request->get('page');\n        $text = null;\n        if ($asset instanceof Asset\\Document) {\n            $text = $asset->getText($page);\n        }\n\n        return $this->adminJson(['success' => 'true', 'text' => $text]);\n    }\n\n    /**\n     * @Route(\"/detect-image-features\", name=\"pimcore_admin_asset_detectimagefeatures\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function detectImageFeaturesAction(Request $request)\n    {\n        $asset = Asset\\Image::getById((int)$request->get('id'));\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->detectFaces();\n            $asset->removeCustomSetting('disableImageFeatureAutoDetection');\n            $asset->save();\n\n            return $this->adminJson(['success' => true]);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @Route(\"/delete-image-features\", name=\"pimcore_admin_asset_deleteimagefeatures\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageFeaturesAction(Request $request)\n    {\n        $asset = Asset::getById((int)$request->get('id'));\n        if (!$asset instanceof Asset) {\n            return $this->adminJson(['success' => false, 'message' => \"asset doesn't exist\"]);\n        }\n\n        if ($asset->isAllowed('publish')) {\n            $asset->removeCustomSetting('faceCoordinates');\n            $asset->setCustomSetting('disableImageFeatureAutoDetection', true);\n            $asset->save();\n\n            return $this->adminJson(['success' => true]);\n        }\n\n        throw $this->createAccessDeniedHttpException();\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        $this->checkActionPermission($event, 'assets', [\n            'getImageThumbnailAction', 'getVideoThumbnailAction', 'getDocumentThumbnailAction',\n        ]);\n\n        $this->_assetService = new Asset\\Service($this->getAdminUser());\n    }\n\n    /**\n     * @throws ValidationException\n     */\n    private function validateManyToManyRelationAssetType(array $context, string $filename, string $sourcePath): void\n    {\n        if (isset($context['containerType'], $context['objectId'], $context['fieldname'])\n            && 'object' === $context['containerType']\n            && $object = Concrete::getById($context['objectId'])\n        ) {\n            $fieldDefinition = $object->getClass()?->getFieldDefinition($context['fieldname']);\n            if (!$fieldDefinition instanceof ManyToManyRelation) {\n                return;\n            }\n\n            $mimeType = MimeTypes::getDefault()->guessMimeType($sourcePath);\n            $type = Asset::getTypeFromMimeMapping($mimeType, $filename);\n\n            $allowedAssetTypes = $fieldDefinition->getAssetTypes();\n            $allowedAssetTypes = array_column($allowedAssetTypes, 'assetTypes');\n\n            if (\n                !(\n                    $fieldDefinition->getAssetsAllowed()\n                    && ($allowedAssetTypes === [] || in_array($type, $allowedAssetTypes, true))\n                )\n            ) {\n                throw new ValidationException(sprintf('Invalid relation in field `%s` [type: %s]', $context['fieldname'], $type));\n            }\n        }\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/Asset/AssetController.php"], "buggy_code_start_loc": [2112], "buggy_code_end_loc": [2197], "fixing_code_start_loc": [2112], "fixing_code_end_loc": [2204], "type": "CWE-89", "message": "SQL Injection in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2338", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T12:15:09.237", "lastModified": "2023-05-04T20:02:34.583", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL Injection in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/21e35af721c375ef4676ed50835e30d828e76520", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/bbf59fa7-cf5b-4945-81b0-328adc710462", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/21e35af721c375ef4676ed50835e30d828e76520"}}