{"buggy_code": ["/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.servermaintenancemode.representers\n\nimport com.thoughtworks.go.helper.JobInstanceMother\nimport com.thoughtworks.go.helper.MaterialsMother\nimport com.thoughtworks.go.server.domain.ServerMaintenanceMode\nimport com.thoughtworks.go.server.service.MaintenanceModeService\nimport com.thoughtworks.go.util.SystemEnvironment\nimport com.thoughtworks.go.util.TimeProvider\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.mockito.Mock\n\nimport java.sql.Timestamp\n\nimport static com.thoughtworks.go.CurrentGoCDVersion.apiDocsUrl\nimport static com.thoughtworks.go.api.base.JsonOutputWriter.jsonDate\nimport static com.thoughtworks.go.api.base.JsonUtils.toObjectString\nimport static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson\nimport static org.mockito.Mockito.when\nimport static org.mockito.MockitoAnnotations.initMocks\n\nclass MaintenanceModeInfoRepresenterTest {\n  @BeforeEach\n  void setUp() {\n    initMocks(this)\n  }\n\n  @Mock\n  TimeProvider timeProvider\n\n  @Mock\n  SystemEnvironment systemEnvironment\n\n  @Test\n  void \"should represent maintenance mode info\"() {\n    def maintenanceModeService = new MaintenanceModeService(timeProvider, systemEnvironment)\n\n    def gitMaterial = MaterialsMother.gitMaterial(\"foo/bar\")\n    def hgMaterial = MaterialsMother.hgMaterial()\n    def svnMaterial = MaterialsMother.svnMaterial()\n\n    def gitMaterialMDUStartTime = 10000000l\n    def hgMaterialMDUStartTime = 20000000l\n    def svnMaterialMDUStartTime = 30000000l\n\n    when(timeProvider.currentTimeMillis())\n      .thenReturn(gitMaterialMDUStartTime)\n      .thenReturn(hgMaterialMDUStartTime)\n      .thenReturn(svnMaterialMDUStartTime)\n\n    maintenanceModeService.update(new ServerMaintenanceMode(true, \"admin\", new Date()))\n\n    maintenanceModeService.mduStartedForMaterial(gitMaterial)\n    maintenanceModeService.mduStartedForMaterial(hgMaterial)\n    maintenanceModeService.mduStartedForMaterial(svnMaterial)\n\n    def runningMDUs = maintenanceModeService.getRunningMDUs()\n    def scheduled = JobInstanceMother.scheduled(\"up42_job_1\")\n    def building = JobInstanceMother.building(\"up42_job_2\")\n\n    def buildingJobs = Arrays.asList(building)\n    def scheduledJobs = Arrays.asList(scheduled)\n\n    def actualJson = toObjectString({\n      MaintenanceModeInfoRepresenter.toJSON(it, maintenanceModeService.get(), true, runningMDUs, buildingJobs, scheduledJobs)\n    })\n\n    def expectedJson = [\n      _links         : [\n        self: [href: 'http://test.host/go/api/admin/maintenance_mode/info'],\n        doc : [href: apiDocsUrl('#maintenance-mode-info')]\n      ],\n      \"is_maintenance_mode\": true,\n      \"metadata\"     : [\n        \"updated_by\": maintenanceModeService.get().updatedBy(),\n        \"updated_on\": jsonDate(maintenanceModeService.get().updatedOn())\n      ],\n      \"attributes\"   : [\n        \"has_running_systems\": false,\n        \"running_systems\"      : [\n          \"material_update_in_progress\": [\n            [\n              \"type\"          : \"git\",\n              \"attributes\"    : [\n                \"url\"             : \"foo/bar\",\n                \"destination\"     : null,\n                \"filter\"          : null,\n                \"invert_filter\"   : false,\n                \"name\"            : null,\n                \"auto_update\"     : true,\n                \"branch\"          : \"master\",\n                \"submodule_folder\": null,\n                \"shallow_clone\"   : false\n              ],\n              \"mdu_start_time\": \"1970-01-01T02:46:40Z\"\n            ],\n            [\n              \"type\"          : \"hg\",\n              \"attributes\"    : [\n                \"url\"          : \"hg-url\",\n                \"destination\"  : null,\n                \"filter\"       : null,\n                \"invert_filter\": false,\n                \"name\"         : null,\n                \"auto_update\"  : true\n              ],\n              \"mdu_start_time\": \"1970-01-01T05:33:20Z\"\n            ],\n            [\n              \"type\"          : \"svn\",\n              \"attributes\"    : [\n                \"url\"               : \"url\",\n                \"destination\"       : \"svnDir\",\n                \"filter\"            : [\n                  \"ignore\": [\"*.doc\"]\n                ],\n                \"invert_filter\"     : false,\n                \"name\"              : null,\n                \"auto_update\"       : true,\n                \"check_externals\"   : true,\n                \"username\"          : \"user\",\n                \"encrypted_password\": svnMaterial.encryptedPassword\n              ],\n              \"mdu_start_time\": \"1970-01-01T08:20:00Z\"\n            ]\n          ],\n          building_jobs                : [\n            [\n              pipeline_name   : building.pipelineName,\n              pipeline_counter: building.pipelineCounter,\n              stage_name      : building.stageName,\n              stage_counter   : building.stageCounter,\n              name            : building.name,\n              state           : building.state,\n              scheduled_date  : jsonDate(new Timestamp(building.getScheduledDate().getTime())),\n              agent_uuid      : building.getAgentUuid()\n            ]\n          ],\n          scheduled_jobs               : [\n            [\n              pipeline_name   : scheduled.pipelineName,\n              pipeline_counter: scheduled.pipelineCounter,\n              stage_name      : scheduled.stageName,\n              stage_counter   : scheduled.stageCounter,\n              name            : scheduled.name,\n              state           : scheduled.state,\n              scheduled_date  : jsonDate(new Timestamp(scheduled.getScheduledDate().getTime())),\n              agent_uuid      : scheduled.getAgentUuid()\n            ]\n          ]\n        ]\n      ]\n    ]\n\n    assertThatJson(actualJson).isEqualTo(expectedJson)\n  }\n\n  @Test\n  void 'should not add attributes if server is not in maintenance mode'() {\n    def maintenanceModeService = new MaintenanceModeService(timeProvider, systemEnvironment)\n\n    def actualJson = toObjectString({\n      MaintenanceModeInfoRepresenter.toJSON(it, maintenanceModeService.get(), false, null, null, null)\n    })\n\n    def expectedJson = [\n      _links         : [\n        self: [href: 'http://test.host/go/api/admin/maintenance_mode/info'],\n        doc : [href: apiDocsUrl('#maintenance-mode-info')]\n      ],\n      \"is_maintenance_mode\": false,\n      \"metadata\"     : [\n        \"updated_by\": maintenanceModeService.get().updatedBy(),\n        \"updated_on\": jsonDate(maintenanceModeService.get().updatedOn())\n      ]\n    ]\n\n    assertThatJson(actualJson).isEqualTo(expectedJson)\n  }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.perforce;\n\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.Modification;\nimport com.thoughtworks.go.domain.materials.perforce.P4Client;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.helper.P4TestRepo;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class P4MaterialTest extends P4MaterialTestBase {\n\n    @Override\n    protected P4TestRepo createTestRepo() throws Exception {\n        P4TestRepo repo = P4TestRepo.createP4TestRepo(temporaryFolder, clientFolder);\n        repo.onSetup();\n        return repo;\n    }\n\n    @Test\n    void shouldAddServerSideEnvironmentVariablesClientNameEnvironmentVariable() throws IOException {\n        File p4_working_dir = temporaryFolder.newFolder();\n\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\", \"user\");\n        p4.setPassword(\"loser\");\n        EnvironmentVariableContext envVarCtx;\n\n        envVarCtx = new EnvironmentVariableContext();\n        p4.populateEnvironmentContext(envVarCtx, new MaterialRevision(p4, new Modification(\"loser\", \"loserish commit\", \"loser@boozer.com\", new Date(), \"123\")), p4_working_dir);\n        assertThat(envVarCtx.getProperty(\"GO_REVISION\")).isEqualTo(\"123\");\n        assertThat(envVarCtx.getProperty(\"GO_TO_REVISION\")).isEqualTo(\"123\");\n        assertThat(envVarCtx.getProperty(\"GO_FROM_REVISION\")).isEqualTo(\"123\");\n    }\n\n    @Test\n    void shouldAddClientNameEnvironmentVariable() throws IOException {\n        File p4_working_dir = temporaryFolder.newFolder();\n\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\", \"user\");\n        p4.setPassword(\"loser\");\n        EnvironmentVariableContext envVarCtx;\n\n        envVarCtx = new EnvironmentVariableContext();\n        p4.populateAgentSideEnvironmentContext(envVarCtx, p4_working_dir);\n        assertThat(envVarCtx.getProperty(\"GO_P4_CLIENT\")).isEqualTo(p4.clientName(p4_working_dir));\n    }\n\n    @Test\n    void shouldGenerateTheSameP4ClientValueForCommandAndEnvironment() throws Exception {\n\n        P4Material p4Material = new P4Material(\"server:10\", \"out-of-the-window\");\n        ReflectionUtil.setField(p4Material, \"folder\", \"crapy_dir\");\n\n        P4Client p4Client = p4Material._p4(tempDir, new InMemoryStreamConsumer(), false);\n\n        assertThat(p4Client).isNotNull();\n        String client = (String) ReflectionUtil.getField(p4Client, \"p4ClientName\");\n        assertThat(client).isEqualTo(p4Material.clientName(tempDir));\n    }\n\n    @Test\n    void shouldNotDisplayPasswordInStringRepresentation() {\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\");\n        p4.setUsername(\"user\");\n        p4.setPassword(\"loser\");\n        assertThat(p4.toString()).doesNotContain(\"loser\");\n    }\n\n    @Test\n    void shouldEncryptP4Password() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n\n        P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);\n        p4Material.setPassword(\"password\");\n        p4Material.ensureEncrypted();\n\n        assertThat(p4Material.getEncryptedPassword()).isEqualTo(\"encrypted\");\n        assertThat(p4Material.getPassword()).isNull();\n    }\n\n    @Test\n    void shouldDecryptP4Password() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);\n        ReflectionUtil.setField(p4Material, \"encryptedPassword\", \"encrypted\");\n        p4Material.getPassword();\n\n        assertThat(p4Material.getPassword()).isEqualTo(\"password\");\n    }\n\n    @Test\n    void shouldReturnEqualsEvenIfPasswordsAreDifferent() throws Exception {\n        P4Material material = MaterialsMother.p4Material();\n        material.setPassword(\"password\");\n\n        P4Material other = MaterialsMother.p4Material();\n        other.setPassword(\"password1\");\n        assertThat(material).isEqualTo(other);\n    }\n\n    @Test\n    void shouldNotConsiderPasswordForEqualityCheck() {\n        P4Material one = new P4Material(\"host:123\", \"through_window\");\n        one.setPassword(\"password\");\n        P4Material two = new P4Material(\"host:123\", \"through_window\");\n        two.setPassword(\"wordpass\");\n\n        assertThat(one).isEqualTo(two);\n        assertThat(one.hashCode()).isEqualTo(two.hashCode());\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        P4Material material = new P4Material(\"host:123\", \"through_window\", \"user\", \"folder\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: host:123, View: through_window, Username: user\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n        P4Material material = new P4Material(\"blah.com\", \"view\");\n        material.setPassword(\"password\");\n\n        P4MaterialConfig config = (P4MaterialConfig) material.config();\n\n        assertThat(config.getPassword()).isEqualTo(\"password\");\n        assertThat(config.getEncryptedPassword()).isNotNull();\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\");\n        material.setPassword(\"password\");\n        material.setUseTickets(true);\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"perforce\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"perforce-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"host:1234\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"view\")).isEqualTo(\"view\");\n        assertThat(configuration.get(\"use-tickets\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\");\n        material.setPassword(\"password\");\n        material.setUseTickets(true);\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"perforce\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"perforce-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"host:1234\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"view\")).isEqualTo(\"view\");\n        assertThat(configuration.get(\"use-tickets\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldSetGO_P4_CLIENT_toTheClientName() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\", \"destination\");\n        EnvironmentVariableContext environmentVariableContext = new EnvironmentVariableContext();\n        File agentWorkingDirectory = new File(\"pipelines/pipeline-name\");\n        material.populateAgentSideEnvironmentContext(environmentVariableContext, agentWorkingDirectory);\n        assertThat(environmentVariableContext.getProperty(\"GO_P4_CLIENT_DESTINATION\")).isEqualTo(material.clientName(material.workingdir(agentWorkingDirectory)));\n    }\n\n    @Nested\n    class hasSecretParams {\n        @Test\n        void shouldBeTrueIfMaterialUrlHasSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_password]}}\");\n\n            assertThat(p4Material.hasSecretParams()).isTrue();\n        }\n\n        @Test\n        void shouldBeFalseInMaterialUrlDoesNotHaveSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"foo\");\n\n            assertThat(p4Material.hasSecretParams()).isFalse();\n        }\n    }\n\n    @Nested\n    class getSecretParams {\n        @Test\n        void shouldReturnAListOfSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_password]}}\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_password\"));\n        }\n\n        @Test\n        void shouldBeAnEmptyListInAbsenceOfSecretParamsinMaterialUrl() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"pass\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(0);\n        }\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"badger\");\n\n            assertThat(p4Material.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            p4Material.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(p4Material.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            assertThatCode(p4Material::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.config.materials.AbstractMaterial;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.Modification;\nimport com.thoughtworks.go.domain.materials.TestSubprocessExecutionContext;\nimport com.thoughtworks.go.domain.materials.mercurial.StringRevision;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommand;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.TemporaryFolder;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterial.SQL_CRITERIA_TYPE;\nimport static com.thoughtworks.go.domain.materials.ValidationBean.valid;\nimport static com.thoughtworks.go.util.DataStructureUtils.m;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@EnableRuleMigrationSupport\npublic class TfsMaterialTest {\n    @Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n    private TfsMaterial tfsMaterialFirstCollectionFirstProject;\n    private TfsMaterial tfsMaterialFirstCollectionSecondProject;\n    private final String DOMAIN = \"domain\";\n    private final String USERNAME = \"username\";\n    private final String PASSWORD = \"password\";\n    private final String TFS_FIRST_COLLECTION_URL = \"http://some.tfs.repo.local\";\n    private final String TFS_FIRST_PROJECT = \"$/first_project\";\n    private final String TFS_SECOND_PROJECT = \"$/second_project\";\n\n    @BeforeEach\n    void setUp() {\n        GoCipher goCipher = mock(GoCipher.class);\n        tfsMaterialFirstCollectionFirstProject = new TfsMaterial(goCipher, new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_FIRST_PROJECT);\n        tfsMaterialFirstCollectionSecondProject = new TfsMaterial(goCipher, new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_SECOND_PROJECT);\n    }\n\n    @Test\n    void shouldShowLatestModification() throws IOException {\n        File dir = temporaryFolder.newFolder(\"tfs-dir\");\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionSecondProject);\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        when(tfsCommand.latestModification(dir)).thenReturn(new ArrayList<>());\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n\n        List<Modification> actual = spy.latestModification(dir, execCtx);\n\n        assertThat(actual).isEqualTo(new ArrayList<Modification>());\n        verify(tfsCommand).latestModification(dir);\n    }\n\n    @Test\n    void shouldLoadAllModificationsSinceAGivenRevision() throws IOException {\n        File dir = temporaryFolder.newFolder(\"tfs-dir\");\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionFirstProject);\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        when(tfsCommand.modificationsSince(dir, new StringRevision(\"5\"))).thenReturn(new ArrayList<>());\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n\n        List<Modification> actual = spy.modificationsSince(dir, new StringRevision(\"5\"), execCtx);\n\n        assertThat(actual).isEqualTo(new ArrayList<Modification>());\n        verify(tfsCommand).modificationsSince(dir, new StringRevision(\"5\"));\n    }\n\n    @Test\n    void shouldInjectAllRelevantAttributesInSqlCriteriaMap() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getSqlCriteria()).isEqualTo(m(\n                SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                \"url\", \"my-url\",\n                \"username\", \"loser\",\n                \"projectPath\", \"/dev/null\", \"domain\", DOMAIN));\n    }\n\n    @Test\n    void shouldInjectAllRelevantAttributesInAttributeMap() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getAttributesForXml()).isEqualTo(m(\n                AbstractMaterial.SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                \"url\", \"my-url\",\n                \"username\", \"loser\",\n                \"projectPath\", \"/dev/null\", \"domain\", DOMAIN));\n    }\n\n    @Test\n    void shouldReturnUrlForCommandLine_asUrl_IfSet() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n        );\n        assertThat(tfsMaterial.getUrl()).isEqualTo(\"http://foo:bar@my-url.com\");\n\n        tfsMaterial = new TfsMaterial(new GoCipher(), null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldReturnUrlForCommandLine_asLocation_IfSet() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n        );\n        assertThat(tfsMaterial.getLocation()).isEqualTo(\"http://foo:******@my-url.com\");\n\n        tfsMaterial = new TfsMaterial(new GoCipher(), null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getLocation()).isNull();\n    }\n\n    @Test\n    void shouldEncryptTfsPasswordAndMarkPasswordAsNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n\n        TfsMaterial tfsMaterial = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n        tfsMaterial.ensureEncrypted();\n\n        assertThat(tfsMaterial.getPassword()).isNull();\n        assertThat(tfsMaterial.getEncryptedPassword()).isEqualTo(\"encrypted\");\n    }\n\n    @Test\n    void shouldDecryptTfsPassword() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        TfsMaterial tfsMaterial = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, null, \"\");\n\n        ReflectionUtil.setField(tfsMaterial, \"encryptedPassword\", \"encrypted\");\n\n        tfsMaterial.ensureEncrypted();\n        assertThat(tfsMaterial.getPassword()).isEqualTo(\"password\");\n    }\n\n    @Test\n    void shouldNotDecryptPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        TfsMaterial material = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n        material.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        material.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(material.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        String fakeCipherText = \"fake cipher text\";\n        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n        TfsMaterial material = new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n        ReflectionUtil.setField(material, \"encryptedPassword\", fakeCipherText);\n        try {\n            material.getPassword();\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n        }\n    }\n\n    @Test\n    void shouldErrorOutIfEncryptionFails() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenThrow(new CryptoException(\"exception\"));\n        try {\n            new TfsMaterial(mockGoCipher, new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Password encryption failed. Please verify your cipher key.\");\n        }\n    }\n\n    @Test\n    void shouldBePasswordAware() {\n        assertThat(PasswordAwareMaterial.class.isAssignableFrom(TfsMaterial.class)).isTrue();\n    }\n\n    @Test\n    void shouldBePasswordEncrypter() {\n        assertThat(PasswordEncrypter.class.isAssignableFrom(TfsMaterial.class)).isTrue();\n    }\n\n    @Test\n    void shouldKnowItsType() {\n        assertThat(tfsMaterialFirstCollectionFirstProject.getTypeForDisplay()).isEqualTo(\"Tfs\");\n    }\n\n    @Test\n    void shouldCheckConnection() {\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        doNothing().when(tfsCommand).checkConnection();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionFirstProject);\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n        assertThat(spy.checkConnection(execCtx)).isEqualTo(valid());\n        verify(tfsCommand, times(1)).checkConnection();\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: http://url/, Username: user, Domain: domain, ProjectPath: $project/path/\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n\n        TfsMaterialConfig config = (TfsMaterialConfig) material.config();\n\n        assertThat(config.getPassword()).isEqualTo(\"password\");\n        assertThat(config.getEncryptedPassword()).isNotNull();\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"tfs-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:password@tfsrepo.com\");\n        assertThat(configuration.get(\"domain\")).isEqualTo(\"domain\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"project-path\")).isEqualTo(\"$project/path/\");\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        TfsMaterial material = new TfsMaterial(new GoCipher(), new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"tfs-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:******@tfsrepo.com\");\n        assertThat(configuration.get(\"domain\")).isEqualTo(\"domain\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"project-path\")).isEqualTo(\"$project/path/\");\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"badger\", null);\n\n            assertThat(tfsMaterial.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            tfsMaterial.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(tfsMaterial.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            assertThatCode(tfsMaterial::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            assertThat(tfsMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n\n    @Test\n    void populateEnvContextShouldSetMaterialEnvVars() {\n        EnvironmentVariableContext ctx = new EnvironmentVariableContext();\n        final ArrayList<Modification> modifications = new ArrayList<>();\n\n        modifications.add(new Modification(\"user2\", \"comment2\", \"email2\", new Date(), \"24\"));\n        modifications.add(new Modification(\"user1\", \"comment1\", \"email1\", new Date(), \"23\"));\n\n        MaterialRevision materialRevision = new MaterialRevision(tfsMaterialFirstCollectionFirstProject, modifications);\n        assertThat(ctx.getProperty(ScmMaterial.GO_MATERIAL_URL)).isNull();\n        assertThat(ctx.getProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isNull();\n\n        tfsMaterialFirstCollectionFirstProject.populateEnvironmentContext(ctx, materialRevision, new File(\".\"));\n\n        assertThat(ctx.getProperty(ScmMaterial.GO_MATERIAL_URL)).isEqualTo(TFS_FIRST_COLLECTION_URL);\n        assertThat(ctx.getProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isEqualTo(DOMAIN);\n    }\n\n    @Test\n    void shouldOnlyPopulateDomainEnvVarIfPresent() {\n        TfsMaterial material = new TfsMaterial(mock(GoCipher.class), new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, \"\", PASSWORD, TFS_FIRST_PROJECT);\n        EnvironmentVariableContext ctx = new EnvironmentVariableContext();\n        final ArrayList<Modification> modifications = new ArrayList<>();\n\n        modifications.add(new Modification(\"user2\", \"comment2\", \"email2\", new Date(), \"24\"));\n        modifications.add(new Modification(\"user1\", \"comment1\", \"email1\", new Date(), \"23\"));\n\n        MaterialRevision materialRevision = new MaterialRevision(material, modifications);\n        material.populateEnvironmentContext(ctx, materialRevision, new File(\".\"));\n\n        assertThat(ctx.hasProperty(ScmMaterial.GO_MATERIAL_URL)).isTrue();\n        assertThat(ctx.hasProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isFalse();\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials;\n\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * ChrisS and ChrisT :\n * Note iBatis requires a concrete class here for the XSD but it does not actually use it.\n * Dummy material is just used to help iBatis and should not be used in real code.\n */\npublic final class DummyMaterial extends ScmMaterial {\n    private String url;\n\n    public DummyMaterial() {\n        super(\"DummyMaterial\", new GoCipher());\n    }\n\n    @Override\n    public String getUrl() {\n        return url;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return \"Dummy\";\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrl();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Dummy\";\n    }\n\n    @Override\n    public Class getInstanceType() {\n        throw new UnsupportedOperationException(\"dummy material doens't have a type\");\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public void checkout(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        throw unsupported();\n    }\n\n    private UnsupportedOperationException unsupported() {\n        return new UnsupportedOperationException(\"This class is only for iBatis and should not be used.\");\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        throw unsupported();\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        throw unsupported();\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.svn;\n\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.materials.RevisionContext;\nimport com.thoughtworks.go.domain.materials.TestSubprocessExecutionContext;\nimport com.thoughtworks.go.helper.MaterialConfigsMother;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.JsonValue;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.TemporaryFolder;\n\nimport java.io.*;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.util.JsonUtils.from;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@EnableRuleMigrationSupport\npublic class SvnMaterialTest {\n    @Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n    private Subversion subversion;\n\n    private SvnMaterial svnMaterial;\n    private static final String URL = \"svn://something\";\n    private SubversionRevision revision = new SubversionRevision(\"1\");\n    private InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();\n\n    @BeforeEach\n    void setUp() throws IOException {\n        temporaryFolder.create();\n        subversion = mock(Subversion.class);\n\n        when(subversion.getUrl()).thenReturn(new UrlArgument(URL));\n        when(subversion.getPassword()).thenReturn(\"\");\n        when(subversion.getUserName()).thenReturn(\"\");\n        when(subversion.isCheckExternals()).thenReturn(false);\n\n        svnMaterial = SvnMaterial.createSvnMaterialWithMock(subversion);\n        svnMaterial.setUrl(URL);\n    }\n\n    @AfterEach\n    void tearDown() {\n        temporaryFolder.delete();\n    }\n\n    private File createSvnWorkingCopy(boolean withDotSvnFolder) throws IOException {\n        File folder = temporaryFolder.newFolder(\"testSvnWorkingCopy\");\n        if (withDotSvnFolder) {\n            File dotSvnFolder = new File(folder, \".svn\");\n            dotSvnFolder.mkdir();\n        }\n        return folder;\n    }\n\n    @Test\n    void shouldNotDisplayPasswordInStringRepresentation() {\n        SvnMaterial svn = new SvnMaterial(\"my-url\", \"user\", \"loser\", false);\n        assertThat(svn.toString()).doesNotContain(\"loser\");\n\n        svn = new SvnMaterial(\"https://user:loser@foo.bar/baz?quux=bang\", \"user\", \"loser\", false);\n        assertThat(svn.toString()).doesNotContain(\"loser\");\n    }\n\n    @Test\n    void shouldCheckoutWhenFolderDoesNotExist() {\n        final File workingCopy = new File(\"xyz\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldLogRepoInfoToConsoleOutWithOutFolder() throws Exception {\n        final File workingCopy = new File(\"xyz\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n        String stdout = outputStreamConsumer.getStdOut();\n        assertThat(stdout).contains(String.format(\"Start updating %s at revision %s from %s\", \"files\", revision.getRevision(),\n                svnMaterial.getUrl()));\n\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldCheckoutForInvalidSvnWorkingCopy() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(false);\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        assertThat(workingCopy.exists()).isFalse();\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    private void updateMaterial(SvnMaterial svnMaterial, SubversionRevision revision, File workingCopy) {\n        svnMaterial.updateTo(outputStreamConsumer, workingCopy, new RevisionContext(revision), new TestSubprocessExecutionContext());\n    }\n\n    @Test\n    void shouldCheckoutIfSvnRepositoryChanged() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(true);\n\n        when(subversion.workingRepositoryUrl(workingCopy)).thenReturn(\"new url\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n        assertThat(workingCopy.exists()).isFalse();\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldUpdateForValidSvnWorkingCopy() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(true);\n\n        when(subversion.workingRepositoryUrl(workingCopy)).thenReturn(URL);\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        verify(subversion).cleanupAndRevert(outputStreamConsumer, workingCopy);\n        verify(subversion).updateTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldBeEqualWhenUrlSameForSvnMaterial() {\n        final Material material1 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        final Material material = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        assertComplementaryEquals(material1, material, true);\n\n    }\n\n    @Test\n    void shouldNotBeEqualWhenUrlDifferent() {\n        final Material material1 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        final Material material2 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url2\").get(0);\n        assertComplementaryEquals(material1, material2, false);\n    }\n\n    @Test\n    void shouldNotBeEqualWhenTypeDifferent() {\n        final Material hgMaterial = MaterialsMother.hgMaterials(\"url1\", \"hgdir\").get(0);\n        final Material nonHgMaterial = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        assertComplementaryEquals(hgMaterial, nonHgMaterial, false);\n    }\n\n    @Test\n    void shouldNotBeEqualWhenAlternateFolderDifferent() {\n        final SvnMaterial material1 = MaterialsMother.svnMaterial(\"url1\");\n        final SvnMaterial material2 = MaterialsMother.svnMaterial(\"url1\");\n\n        assertComplementaryEquals(material1, material2, true);\n\n        material1.setFolder(\"foo\");\n        material2.setFolder(null);\n        assertComplementaryEquals(material1, material2, false);\n\n        material1.setFolder(\"foo\");\n        material2.setFolder(\"bar\");\n        assertComplementaryEquals(material1, material2, false);\n    }\n\n    @Test\n    void shouldSerializeAndDeserializeCorrectly() throws Exception {\n        final SvnMaterial material1 = MaterialsMother.svnMaterial(\"url1\", \"foo\");\n        ByteArrayOutputStream buf = new ByteArrayOutputStream();\n        ObjectOutputStream serialized = new ObjectOutputStream(buf);\n        serialized.writeObject(material1);\n        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buf.toByteArray()));\n        assertThat(in.readObject()).isEqualTo(material1);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenUrlIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"A\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial(\"B\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenUserNameIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\", \"svnDir\", \"userName\", null, false, \"*.txt\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial(\"url\", \"svnDir\", \"userName1\", null, false, \"*.txt\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnEqualsEvenIfPasswordsAreDifferent() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n        material.setPassword(\"password\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial();\n        other.setPassword(\"password1\");\n        assertThat(material).isEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenCheckExternalsIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\", \"svnDir\", null, null, true, \"*.txt\");\n        SvnMaterial other = MaterialsMother.svnMaterial(\"url\", \"svnDir\", null, null, false, \"*.txt\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnEqualsWhenEverythingIsSame() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"URL\", \"dummy-folder\", \"userName\", \"password\", true, \"*.doc\");\n        SvnMaterial other = MaterialsMother.svnMaterial(\"URL\", \"dummy-folder\", \"userName\", \"password\", true, \"*.doc\");\n\n        assertThat(other).isEqualTo(material);\n    }\n\n    /* TODO: *SBD* Move this test into SvnMaterialConfig test after mothers are moved. */\n    @Test\n    void shouldReturnEqualsWhenEverythingIsSameForSvnMaterialConfigs() {\n        SvnMaterialConfig svnMaterialConfig = MaterialConfigsMother.svnMaterialConfig();\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.CHECK_EXTERNALS, String.valueOf(true)));\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.USERNAME, \"userName\"));\n        svnMaterialConfig.setPassword(\"password\");\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.URL, \"URL\"));\n\n\n        SvnMaterialConfig other = MaterialConfigsMother.svnMaterialConfig();\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.CHECK_EXTERNALS, String.valueOf(true)));\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.USERNAME, \"userName\"));\n        other.setPassword(\"password\");\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.URL, \"URL\"));\n\n        assertThat(other).isEqualTo(svnMaterialConfig);\n    }\n\n    @Test\n    void shouldBeAbleToConvertToJson() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\");\n        Map<String, Object> json = new LinkedHashMap<>();\n        material.toJson(json, revision);\n\n        JsonValue jsonValue = from(json);\n        assertThat(jsonValue.getString(\"scmType\")).isEqualTo(\"Subversion\");\n        assertThat(new File(jsonValue.getString(\"location\"))).isEqualTo(new File(material.getUrl()));\n        assertThat(jsonValue.getString(\"action\")).isEqualTo(\"Modified\");\n    }\n\n    @Test\n    void shouldAddTheForwardSlashAndApplyThePattern() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n\n        assertThat(material.matches(\"/a.doc\", \"a.doc\")).isTrue();\n        assertThat(material.matches(\"a.doc\", \"a.doc\")).isFalse();\n    }\n\n    @Test\n    void shouldApplyThePatternDirectly() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n\n        assertThat(material.matches(\"/a.doc\", \"/a.doc\")).isTrue();\n    }\n\n    @Test\n    void shouldGenerateSqlCriteriaMapInSpecificOrder() {\n        SvnMaterial material = new SvnMaterial(\"url\", \"username\", \"password\", true);\n        Map<String, Object> map = material.getSqlCriteria();\n        assertThat(map.size()).isEqualTo(4);\n        Iterator<Map.Entry<String, Object>> iter = map.entrySet().iterator();\n        assertThat(iter.next().getKey()).isEqualTo(\"type\");\n        assertThat(iter.next().getKey()).isEqualTo(\"url\");\n        assertThat(iter.next().getKey()).isEqualTo(\"username\");\n        assertThat(iter.next().getKey()).isEqualTo(\"checkExternals\");\n    }\n\n    @Test\n    void shouldGenerateFingerprintBasedOnSqlCriteria() {\n        SvnMaterial one = new SvnMaterial(\"url\", \"username\", \"password\", true);\n        SvnMaterial two = new SvnMaterial(\"url\", \"username\", \"password\", false);\n        assertThat(one.getFingerprint()).isNotEqualTo(two.getFingerprint());\n        assertThat(one.getFingerprint()).isEqualTo(DigestUtils.sha256Hex(\"type=SvnMaterial<|>url=url<|>username=username<|>checkExternals=true\"));\n    }\n\n    @Test\n    void shouldGeneratePipelineUniqueFingerprintBasedOnFingerprintAndDest() {\n        SvnMaterial one = new SvnMaterial(\"url\", \"username\", \"password\", true, \"folder1\");\n        SvnMaterial two = new SvnMaterial(\"url\", \"username\", \"password\", true, \"folder2\");\n        assertThat(one.getPipelineUniqueFingerprint()).isNotEqualTo(two.getFingerprint());\n        assertThat(one.getPipelineUniqueFingerprint()).isEqualTo(DigestUtils.sha256Hex(\"type=SvnMaterial<|>url=url<|>username=username<|>checkExternals=true<|>dest=folder1\"));\n    }\n\n    @Test\n    void shouldNotUsePasswordForEquality() {\n        SvnMaterial svnBoozer = new SvnMaterial(\"foo.com\", \"loser\", \"boozer\", true);\n        SvnMaterial svnZooser = new SvnMaterial(\"foo.com\", \"loser\", \"zooser\", true);\n        assertThat(svnBoozer.hashCode()).isEqualTo(svnZooser.hashCode());\n        assertThat(svnBoozer).isEqualTo(svnZooser);\n    }\n\n    @Test\n    void shouldEncryptSvnPasswordAndMarkPasswordAsNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n\n        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n        material.ensureEncrypted();\n\n        assertThat(material.getPassword()).isNull();\n        assertThat(material.getEncryptedPassword()).isEqualTo(\"encrypted\");\n    }\n\n    @Test\n    void shouldDecryptSvnPassword() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);\n        ReflectionUtil.setField(material, \"encryptedPassword\", \"encrypted\");\n\n        material.ensureEncrypted();\n        assertThat(material.getPassword()).isEqualTo(\"password\");\n    }\n\n    @Test\n    void shouldNotDecryptSvnPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n        material.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        material.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(material.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldErrorOutIfDecryptionFails() throws CryptoException {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        String fakeCipherText = \"fake cipher text\";\n        when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));\n        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);\n        ReflectionUtil.setField(material, \"encryptedPassword\", fakeCipherText);\n        try {\n            material.getPassword();\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");\n        }\n    }\n\n    @Test\n    void shouldErrorOutIfEncryptionFails() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenThrow(new CryptoException(\"exception\"));\n        try {\n            new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n            fail(\"Should have thrown up\");\n        } catch (Exception e) {\n            assertThat(e.getMessage()).isEqualTo(\"Password encryption failed. Please verify your cipher key.\");\n        }\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        SvnMaterial material = new SvnMaterial(\"http://url/\", \"user\", \"password\", true, \"folder\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: http://url/, Username: user, CheckExternals: true\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() {\n        SvnMaterial material = new SvnMaterial(\"abc\", \"def\", \"ghi\", false);\n        SvnMaterialConfig config = (SvnMaterialConfig) material.config();\n\n        assertThat(config.getEncryptedPassword()).isNotNull();\n        assertThat(config.getPassword()).isEqualTo(\"ghi\");\n    }\n\n    private void assertComplementaryEquals(Object o1, Object o2, boolean value) {\n        assertThat(o1.equals(o2)).isEqualTo(value);\n        assertThat(o2.equals(o1)).isEqualTo(value);\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        SvnMaterial material = new SvnMaterial(\"http://username:password@svnrepo.com\", \"user\", \"password\", true);\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"svn\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"svn-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:password@svnrepo.com\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"user\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"check-externals\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        SvnMaterial material = new SvnMaterial(\"http://username:password@svnrepo.com\", \"user\", \"password\", true);\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"svn\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"svn-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:******@svnrepo.com\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"user\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"check-externals\")).isEqualTo(true);\n    }\n\n    @Nested\n    class hasSecretParams {\n        @Test\n        void shouldBeTrueIfPasswordHasSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"{{SECRET:[secret_config_id][lookup_password]}}\", false);\n\n            assertThat(svnMaterial.hasSecretParams()).isTrue();\n        }\n\n        @Test\n        void shouldBeFalseIfPasswordDoesNotHaveSecretParams() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"password\", false);\n\n            assertThat(svnMaterial.hasSecretParams()).isFalse();\n        }\n    }\n\n    @Nested\n    class getSecretParams {\n        @Test\n        void shouldReturnAListOfSecretParams() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\",\n                    \"username\", \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n\n        @Test\n        void shouldBeAnEmptyListInAbsenceOfSecretParamsInMaterialUrlOrPassword() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"pass\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(0);\n        }\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"badger\", false);\n\n            assertThat(svnMaterial.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            svnMaterial.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(svnMaterial.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThatCode(svnMaterial::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.server.service;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.PackageMaterialConfig;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.PluggableSCMMaterialConfig;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\nimport com.thoughtworks.go.config.materials.perforce.P4MaterialConfig;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterialConfig;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinition;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinitionMother;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepository;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepositoryMother;\nimport com.thoughtworks.go.domain.scm.SCM;\nimport com.thoughtworks.go.domain.scm.SCMMother;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.HgUrlArgument;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.Test;\nimport org.junit.experimental.theories.DataPoint;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.platform.commons.util.AnnotationUtils;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\nimport org.springframework.core.type.filter.AssignableTypeFilter;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport static com.thoughtworks.go.domain.packagerepository.ConfigurationPropertyMother.create;\nimport static com.thoughtworks.go.helper.FilterMother.filterFor;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.*;\nimport static org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals;\nimport static org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\n@RunWith(Theories.class)\npublic class MagicalMaterialAndMaterialConfigConversionTest {\n    private static PackageRepository packageRepo = PackageRepositoryMother.create(\"repo-id\", \"repo-name\", \"pluginid\", \"version\", new Configuration(create(\"k1\", false, \"v1\")));\n    private static PackageDefinition packageDefinition = PackageDefinitionMother.create(\"id\", \"name1\", new Configuration(create(\"k2\", false, \"v2\")), packageRepo);\n    public static SCM scmConfig = SCMMother.create(\"scm-id\", \"scm-name\", \"plugin-id\", \"1.0\", new Configuration(create(\"k1\", false, \"v1\")));\n\n    private static Map<Class, String[]> fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack = new HashMap<>();\n    private MaterialConfigConverter materialConfigConverter = new MaterialConfigConverter();\n\n    @DataPoint\n    public static MaterialConfig svnMaterialConfig = svn(url(\"svn-url\"), \"user\", \"pass\", true, new GoCipher(), true, filterFor(\"*.txt\"), false, \"folder\", cis(\"name1\"));\n    @DataPoint\n    public static MaterialConfig gitMaterialConfig = git(url(\"git-url\"), null, \"pass\", \"branch\", \"submodule\", true, filterFor(\"*.doc\"), false, \"folder\", cis(\"gitMaterial\"), false);\n    @DataPoint\n    public static MaterialConfig hgMaterialConfig = hg(new HgUrlArgument(\"hg-url\"), null, \"pass\", null, true, filterFor(\"*.png\"), false, \"folder\", cis(\"hgMaterial\"));\n    @DataPoint\n    public static MaterialConfig p4MaterialConfig = p4(\"localhost:9090\", \"user\", \"pass\", true, \"view\", new GoCipher(), cis(\"p4Material\"), true, filterFor(\"*.jpg\"), false, \"folder\");\n    @DataPoint\n    public static MaterialConfig tfsMaterialConfig = tfs(url(\"tfs-url\"), \"user\", \"domain\", \"pass\", \"prj-path\", new GoCipher(), true, filterFor(\"*.txt\"), false, \"folder\", cis(\"tfsMaterial\"));\n    @DataPoint\n    public static MaterialConfig pkgMaterialConfig = new PackageMaterialConfig(cis(\"name\"), \"pkg-id\", packageDefinition);\n    @DataPoint\n    public static MaterialConfig pluggableSCMMaterialConfig = new PluggableSCMMaterialConfig(cis(\"name\"), scmConfig, \"folder\", filterFor(\"*.txt\"), false);\n    @DataPoint\n    public static MaterialConfig dependencyMaterialConfig = new DependencyMaterialConfig(cis(\"name1\"), cis(\"pipeline1\"), cis(\"stage1\"));\n\n    static {\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(GitMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(HgMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(SvnMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(P4MaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(TfsMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(PackageMaterialConfig.class, new String[]{\"filter\", \"packageId\", \"packageDefinition\", \"fingerprint\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(PluggableSCMMaterialConfig.class, new String[]{\"filter\", \"scmId\", \"scmConfig\", \"fingerprint\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(DependencyMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n    }\n\n    @Theory\n    public void shouldBeSameObject_WhenConversionIsDoneFromMaterialConfigToMaterialAndBack(MaterialConfig materialConfig) {\n        Material materialFromConfig = materialConfigConverter.toMaterial(materialConfig);\n        MaterialConfig materialConfigConvertedBackFromMaterial = materialFromConfig.config();\n\n        assertThat(materialConfigConvertedBackFromMaterial, is(materialConfig));\n        assertTrue(message(\"Material <-> MaterialConfig conversion failed.\", materialConfigConvertedBackFromMaterial, materialConfig),\n                reflectionEquals(materialConfigConvertedBackFromMaterial, materialConfig, fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.get(materialConfig.getClass())));\n\n        assertThat(materialFromConfig.getFingerprint(), is(materialConfig.getFingerprint()));\n        assertThat(materialFromConfig.isAutoUpdate(), is(materialConfig.isAutoUpdate()));\n        assertThat(materialConfigConvertedBackFromMaterial.getFingerprint(), is(materialConfig.getFingerprint()));\n        assertPasswordIsCorrect(materialConfig);\n        assertPasswordIsCorrect(materialFromConfig);\n        assertPasswordIsCorrect(materialConfigConvertedBackFromMaterial);\n    }\n\n    @Theory\n    public void shouldBeSameObject_WhenConversionIsDoneFromMaterialToMaterialInstanceAndBack(MaterialConfig materialConfig) {\n        Material material = materialConfigConverter.toMaterial(materialConfig);\n\n        MaterialInstance materialInstance = material.createMaterialInstance();\n        Material materialConvertedBackFromInstance = materialInstance.toOldMaterial(materialConfig.getName().toString(), materialConfig.getFolder(), \"pass\");\n\n        assertTrue(message(\"Material <-> MaterialInstance conversion failed.\", material, materialConvertedBackFromInstance),\n                reflectionEquals(material, materialConvertedBackFromInstance, fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.get(materialConfig.getClass())));\n\n        assertThat(materialInstance.getFingerprint(), is(material.getFingerprint()));\n        assertThat(materialConvertedBackFromInstance.getFingerprint(), is(materialInstance.getFingerprint()));\n        assertPasswordIsCorrect(material);\n        assertPasswordIsCorrect(materialConvertedBackFromInstance);\n    }\n\n    @Test\n    public void failIfNewTypeOfMaterialIsNotAddedInTheAboveTest() throws Exception {\n        ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n        provider.addIncludeFilter(new AssignableTypeFilter(MaterialConfig.class));\n        Set<BeanDefinition> candidateComponents = provider.findCandidateComponents(\"com/thoughtworks\");\n        List<Class> reflectionsSubTypesOf = candidateComponents.stream().map(beanDefinition -> beanDefinition.getBeanClassName()).map(s -> {\n            try {\n                return Class.forName(s);\n            } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n        }).collect(Collectors.toList());\n\n        reflectionsSubTypesOf.removeIf(this::isNotAConcrete_NonTest_MaterialConfigImplementation);\n\n        List<Class> allExpectedMaterialConfigImplementations = allMaterialConfigsWhichAreDataPointsInThisTest();\n\n        assertThatAllMaterialConfigsInCodeAreTestedHere(reflectionsSubTypesOf, allExpectedMaterialConfigImplementations);\n    }\n\n    private void assertThatAllMaterialConfigsInCodeAreTestedHere(List<Class> reflectionsSubTypesOf, List<Class> allExpectedMaterialConfigImplementations) {\n        List<Class> missingImplementations = new ArrayList<>(reflectionsSubTypesOf);\n        missingImplementations.removeAll(allExpectedMaterialConfigImplementations);\n        String message = \"You need to add a DataPoint for these materials in this test: \" + missingImplementations;\n\n        assertThat(message, reflectionsSubTypesOf.size(), is(allExpectedMaterialConfigImplementations.size()));\n        assertThat(message, reflectionsSubTypesOf, hasItems(allExpectedMaterialConfigImplementations.toArray(new Class[allExpectedMaterialConfigImplementations.size()])));\n    }\n\n    private List<Class> allMaterialConfigsWhichAreDataPointsInThisTest() throws Exception {\n        List<Field> fields = AnnotationUtils.findAnnotatedFields(getClass(), DataPoint.class, field -> true);\n\n        ArrayList<Class> allDataPointMaterialConfigClasses = new ArrayList<>();\n        for (Field field : fields) {\n            allDataPointMaterialConfigClasses.add(field.get(this).getClass());\n        }\n        return allDataPointMaterialConfigClasses;\n    }\n\n    private boolean isNotAConcrete_NonTest_MaterialConfigImplementation(Class aClass) {\n        return Pattern.matches(\".*(Test|Dummy).*\", aClass.toString()) || Modifier.isAbstract(aClass.getModifiers());\n    }\n\n    private void assertPasswordIsCorrect(Material material) {\n        if (material instanceof PasswordAwareMaterial) {\n            assertThat(\"Password setting is wrong for: \" + material.getClass(), ((PasswordAwareMaterial) material).getPassword(), is(\"pass\"));\n            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"password\"), is(nullValue()));\n            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"encryptedPassword\"), is(not(nullValue())));\n        }\n    }\n\n    private void assertPasswordIsCorrect(MaterialConfig materialConfig) {\n        if (materialConfig instanceof PasswordAwareMaterial) {\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ((PasswordAwareMaterial) materialConfig).getPassword(), is(\"pass\"));\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ReflectionUtil.getField(materialConfig, \"password\"), is(nullValue()));\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ReflectionUtil.getField(materialConfig, \"encryptedPassword\"), is(not(nullValue())));\n        }\n    }\n\n    private String message(String prefix, Object expected, Object actual) {\n        return prefix + \"\\nExpected: \" + reflectionToString(expected) + \"\\n  Actual: \" + reflectionToString(actual);\n    }\n\n    private static CaseInsensitiveString cis(String value) {\n        return new CaseInsensitiveString(value);\n    }\n\n    private static UrlArgument url(String url) {\n        return new UrlArgument(url);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.perforce.P4MaterialConfig;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterialConfig;\nimport com.thoughtworks.go.domain.BaseCollection;\nimport com.thoughtworks.go.domain.ConfigVisitor;\nimport com.thoughtworks.go.domain.MaterialRevisions;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ArtifactLogUtil;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class Materials extends BaseCollection<Material> {\n    private static final int DEFAULT_INTERVAL = 100;\n    private int intervalInSeconds = DEFAULT_INTERVAL;\n\n    public Materials() {\n    }\n\n    public Materials(Material... materials) {\n        super(materials);\n    }\n\n    public Materials(List<Material> materials) {\n        this(DEFAULT_INTERVAL, materials);\n    }\n\n    public Materials(int intervalInSeconds, List<Material> materials) {\n        super(materials);\n        this.intervalInSeconds = intervalInSeconds;\n    }\n\n    public Materials(MaterialConfigs materialConfigs) {\n        for (MaterialConfig materialConfig : materialConfigs) {\n            add(convertToMaterial(materialConfig));\n        }\n    }\n\n    public int interval() {\n        return intervalInSeconds;\n    }\n\n    /**\n     * @deprecated Used only in tests\n     */\n    public MaterialRevisions latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        MaterialRevisions revisions = new MaterialRevisions();\n        for (Material material : this) {\n            List<Modification> modifications = new ArrayList<>();\n            if (material instanceof SvnMaterial) {\n                modifications = ((SvnMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof HgMaterial) {\n                modifications = ((HgMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof GitMaterial) {\n                modifications = ((GitMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof P4Material) {\n                modifications = ((P4Material) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof TfsMaterial) {\n                modifications = ((TfsMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof DependencyMaterial) {\n                modifications = ((DependencyMaterial) material).latestModification(baseDir, execCtx);\n            }\n            revisions.addRevision(material, modifications);\n        }\n        return revisions;\n    }\n\n    public void cleanUp(File baseFolder, ConsoleOutputStreamConsumer consumer) {\n        if (hasMaterialsWithNoDestinationFolder()) {\n            return;\n        }\n\n        DirectoryCleaner cleaner = new DirectoryCleaner(baseFolder, consumer);\n        cleaner.allowed(allowedFolders());\n        cleaner.clean();\n    }\n\n    private List<String> allowedFolders() {\n        ArrayList<String> allowed = new ArrayList<>();\n        for (Material material : this) {\n            if (!StringUtils.isBlank(material.getFolder())) {\n                allowed.add(material.getFolder());\n            }\n        }\n        allowed.add(ArtifactLogUtil.CRUISE_OUTPUT_FOLDER);\n        return allowed;\n    }\n\n    boolean hasMaterialsWithNoDestinationFolder() {\n        for (Material material : this) {\n            AbstractMaterial abstractMaterial = (AbstractMaterial) material;\n            if (abstractMaterial.supportsDestinationFolder() && !abstractMaterial.hasDestinationFolder()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void accept(ConfigVisitor visitor) {\n        for (Material material : this) {\n            visitor.visit(material);\n        }\n    }\n\n    public int count(Class<? extends Material> materialClass) {\n        int count = 0;\n        for (Material material : this) {\n            if (materialClass.isInstance(material)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public Material byFolder(String folder) {\n        for (Material material : this) {\n            if ((material instanceof ScmMaterial || material instanceof PluggableSCMMaterial) && Objects.equals(folder, material.getFolder())) {\n                return material;\n            }\n        }\n        return null;\n    }\n\n    public Material getByFingerPrint(String fingerPrint) {\n        for (Material material : this) {\n            if (material.getPipelineUniqueFingerprint().equals(fingerPrint)) {\n                return material;\n            }\n        }\n        return null;\n    }\n\n    public Material get(Material other) {\n        for (Material material : this) {\n            if (material.isSameFlyweight(other)) {\n                return material;\n            }\n        }\n        throw new RuntimeException(\"Material not found: \" + other);//IMP: because, config can change between BCPS call and build cause production - shilpa/jj\n    }\n\n    /*\n    To two methods below are to avoid creating methods on already long Material interface with a No Op implementations.\n */\n\n    private List<ScmMaterial> filterScmMaterials() {\n        List<ScmMaterial> scmMaterials = new ArrayList<>();\n        for (Material material : this) {\n            if (material instanceof ScmMaterial) {\n                scmMaterials.add((ScmMaterial) material);\n            }\n        }\n        return scmMaterials;\n    }\n\n    public boolean scmMaterialsHaveDestination() {\n        for (ScmMaterial scmMaterial : filterScmMaterials()) {\n            if (!scmMaterial.hasDestinationFolder()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public SvnMaterial getSvnMaterial() {\n        return getExistingOrDefaultMaterial(new SvnMaterial(\"\", \"\", \"\", false));\n    }\n\n    public TfsMaterial getTfsMaterial() {\n        return getExistingOrDefaultMaterial(new TfsMaterial(new GoCipher(), new UrlArgument(\"\"), \"\", \"\", \"\", \"\"));\n    }\n\n    public HgMaterial getHgMaterial() {\n        return getExistingOrDefaultMaterial(new HgMaterial(\"\", null));\n    }\n\n    public GitMaterial getGitMaterial() {\n        return getExistingOrDefaultMaterial(new GitMaterial(\"\"));\n    }\n\n    public P4Material getP4Material() {\n        return getExistingOrDefaultMaterial(new P4Material(\"\", \"\"));\n    }\n\n    public DependencyMaterial getDependencyMaterial() {\n        return getExistingOrDefaultMaterial(new DependencyMaterial(new CaseInsensitiveString(\"\"), new CaseInsensitiveString(\"\")));\n    }\n\n    private <T extends Material> T getExistingOrDefaultMaterial(T defaultMaterial) {\n        for (Material material : this) {\n            if (material.getClass().isAssignableFrom(defaultMaterial.getClass())) {\n                return (T) material;\n            }\n        }\n        return defaultMaterial;\n    }\n\n    public String getMaterialOptions() {\n        return first() == null ? \"\" : first().getType();\n    }\n\n    private Material convertToMaterial(MaterialConfig materialConfig) {\n        if (SvnMaterial.TYPE.equals(materialConfig.getType())) {\n            return new SvnMaterial((SvnMaterialConfig) materialConfig);\n        } else if (HgMaterial.TYPE.equals(materialConfig.getType())) {\n            return new HgMaterial((HgMaterialConfig) materialConfig);\n        } else if (GitMaterial.TYPE.equals(materialConfig.getType())) {\n            return new GitMaterial((GitMaterialConfig) materialConfig);\n        } else if (P4Material.TYPE.equals(materialConfig.getType())) {\n            return new P4Material((P4MaterialConfig) materialConfig);\n        } else if (DependencyMaterial.TYPE.equals(materialConfig.getType())) {\n            return new DependencyMaterial((DependencyMaterialConfig) materialConfig);\n        } else if (TfsMaterial.TYPE.equals(materialConfig.getType())) {\n            return new TfsMaterial((TfsMaterialConfig) materialConfig);\n        } else if (PackageMaterial.TYPE.equals(materialConfig.getType())) {\n            return new PackageMaterial((PackageMaterialConfig) materialConfig);\n        } else if (PluggableSCMMaterial.TYPE.equals(materialConfig.getType())) {\n            return new PluggableSCMMaterial((PluggableSCMMaterialConfig) materialConfig);\n        } else if (TestingMaterial.TYPE.equals(materialConfig.getType())) {\n            return new TestingMaterial((TestingMaterialConfig) materialConfig);\n        }\n        throw new RuntimeException(\"Unexpected material type: \" + materialConfig.getClass() + \": \" + materialConfig);\n    }\n\n    public MaterialConfigs convertToConfigs() {\n        MaterialConfigs configs = new MaterialConfigs();\n        for (Material material : this) {\n            configs.add(material.config());\n        }\n        return configs;\n    }\n\n    public boolean hasMaterialConfigWithFingerprint(MaterialConfig materialConfig) {\n        for (Material material : this) {\n            if (material.getFingerprint().equals(materialConfig.getFingerprint())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.PipelineConfig;\nimport com.thoughtworks.go.config.SecretParamAware;\nimport com.thoughtworks.go.config.SecretParams;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.ProcessOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.annotation.PostConstruct;\nimport java.io.File;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.command.EnvironmentVariableContext.escapeEnvironmentVariable;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\n\n/**\n * @understands a source control repository and its configuration\n */\npublic abstract class ScmMaterial extends AbstractMaterial implements SecretParamAware {\n\n    public static final String GO_REVISION = \"GO_REVISION\";\n    public static final String GO_TO_REVISION = \"GO_TO_REVISION\";\n    public static final String GO_FROM_REVISION = \"GO_FROM_REVISION\";\n    public static final String GO_MATERIAL_URL = \"GO_MATERIAL_URL\";\n    protected final GoCipher goCipher;\n\n    protected Filter filter;\n    protected String folder;\n    protected boolean autoUpdate = true;\n    protected boolean invertFilter = false;\n    protected String userName;\n    protected String password;\n    protected String encryptedPassword;\n    protected SecretParams secretParamsForPassword;\n\n    public ScmMaterial(String typeName, GoCipher goCipher) {\n        super(typeName);\n        this.goCipher = goCipher;\n    }\n\n    @Override\n    protected void appendPipelineUniqueCriteria(Map<String, Object> basicCriteria) {\n        basicCriteria.put(\"dest\", folder);\n    }\n\n    public File workingdir(File baseFolder) {\n        if (getFolder() == null) {\n            return baseFolder;\n        }\n        return new File(baseFolder, getFolder());\n    }\n\n    public String updatingTarget() {\n        return StringUtils.isEmpty(getFolder()) ? \"files\" : getFolder();\n    }\n\n    @Override\n    public void toJson(Map json, Revision revision) {\n        json.put(\"folder\", getFolder() == null ? \"\" : getFolder());\n        json.put(\"scmType\", getTypeForDisplay());\n        json.put(\"location\", getLocation());\n        if (!CaseInsensitiveString.isBlank(getName())) {\n            json.put(\"materialName\", CaseInsensitiveString.str(getName()));\n        }\n        json.put(\"action\", \"Modified\");\n    }\n\n    //most of the material such as hg, git, p4 all print the file from the root without '/'\n    //but subversion print it with '/', we standarize it here. look at the implementation of subversion as well.\n\n    @Override\n    public boolean matches(String name, String regex) {\n        if (regex.startsWith(\"/\")) {\n            regex = regex.substring(1);\n        }\n        return name.matches(regex);\n    }\n\n    public void checkout(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n        InMemoryStreamConsumer output = ProcessOutputStreamConsumer.inMemoryConsumer();\n        this.updateTo(output, baseDir, new RevisionContext(revision), execCtx);\n    }\n\n    public String getUserName() {\n        return this.userName;\n    }\n\n    /* Needed although there is a getUserName above */\n    public String getUsername() {\n        return userName;\n    }\n\n    public final void setPassword(String password) {\n        resetPassword(password);\n    }\n\n    private void resetPassword(String passwordToSet) {\n        if (StringUtils.isBlank(passwordToSet)) {\n            encryptedPassword = null;\n        }\n        setPasswordIfNotBlank(passwordToSet);\n    }\n\n    private void setPasswordIfNotBlank(String password) {\n        this.password = StringUtils.stripToNull(password);\n        this.secretParamsForPassword = SecretParams.parse(password);\n        this.encryptedPassword = StringUtils.stripToNull(encryptedPassword);\n\n        if (this.password == null) {\n            return;\n        }\n        try {\n            this.encryptedPassword = this.goCipher.encrypt(password);\n        } catch (Exception e) {\n            bomb(\"Password encryption failed. Please verify your cipher key.\", e);\n        }\n        this.password = null;\n    }\n\n    @PostConstruct\n    public void ensureEncrypted() {\n        this.userName = StringUtils.stripToNull(this.userName);\n        setPasswordIfNotBlank(password);\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public final void setEncryptedPassword(String encryptedPassword) {\n        this.encryptedPassword = encryptedPassword;\n    }\n\n    public final String getEncryptedPassword() {\n        return encryptedPassword;\n    }\n\n    public String getPassword() {\n        return currentPassword();\n    }\n\n    public String passwordForCommandLine() {\n        return secretParamsForPassword == null || secretParamsForPassword.isEmpty() ? getPassword() : secretParamsForPassword.substitute(getPassword());\n    }\n\n    @Override\n    public boolean hasSecretParams() {\n        return this.secretParamsForPassword != null && !this.secretParamsForPassword.isEmpty();\n    }\n\n    @Override\n    public SecretParams getSecretParams() {\n        return secretParamsForPassword;\n    }\n\n    public final String currentPassword() {\n        try {\n            return isBlank(encryptedPassword) ? null : this.goCipher.decrypt(encryptedPassword);\n        } catch (CryptoException e) {\n            throw new RuntimeException(\"Could not decrypt the password to get the real password\", e);\n        }\n    }\n\n    public abstract boolean isCheckExternals();\n\n    public abstract String getUrl();\n\n    public abstract String urlForCommandLine();\n\n    protected abstract UrlArgument getUrlArgument();\n\n    protected abstract String getLocation();\n\n    public void setFilter(Filter filter) {\n        this.filter = filter;\n    }\n\n    @Override\n    public void emailContent(StringBuilder content, Modification modification) {\n        content.append(getTypeForDisplay() + \": \" + getLocation()).append('\\n').append(\n                String.format(\"revision: %s, modified by %s on %s\", modification.getRevision(),\n                        modification.getUserName(), modification.getModifiedTime()))\n                .append('\\n')\n                .append(Optional.ofNullable(modification.getComment()).orElse(\"\"));\n\n    }\n\n    @Override\n    public String getDescription() {\n        return getUriForDisplay();\n    }\n\n    @Override\n    public String getUriForDisplay() {\n        return this.getUrlArgument().forDisplay();\n    }\n\n    @Override\n    public void populateEnvironmentContext(EnvironmentVariableContext environmentVariableContext, MaterialRevision materialRevision, File workingDir) {\n        String toRevision = materialRevision.getRevision().getRevision();\n        String fromRevision = materialRevision.getOldestRevision().getRevision();\n\n        setGoRevisionVariables(environmentVariableContext, fromRevision, toRevision);\n        setGoMaterialVariables(environmentVariableContext);\n    }\n\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        setVariableWithName(environmentVariableContext, this.getUrlArgument().withoutCredentials(), GO_MATERIAL_URL);\n    }\n\n    private void setGoRevisionVariables(EnvironmentVariableContext environmentVariableContext, String fromRevision, String toRevision) {\n        setVariableWithName(environmentVariableContext, toRevision, GO_REVISION);\n        setVariableWithName(environmentVariableContext, toRevision, GO_TO_REVISION);\n        setVariableWithName(environmentVariableContext, fromRevision, GO_FROM_REVISION);\n    }\n\n    protected void setVariableWithName(EnvironmentVariableContext environmentVariableContext, String value, String propertyName) {\n        String materialNameForEnvironmentVariable = getMaterialNameForEnvironmentVariable();\n        if (StringUtils.isNotBlank(materialNameForEnvironmentVariable)) {\n            environmentVariableContext.setProperty(propertyName + \"_\" + materialNameForEnvironmentVariable, value, false);\n        } else {\n            environmentVariableContext.setProperty(propertyName, value, false);\n        }\n    }\n\n    @Override\n    public String getMaterialNameForEnvironmentVariable() {\n        if (!CaseInsensitiveString.isBlank(this.name)) {\n            return escapeEnvironmentVariable(this.name.toUpper());\n        }\n\n        return escapeEnvironmentVariable(folder);\n    }\n\n    @Override\n    public String getFolder() {\n        return folder;\n    }\n\n    @Override\n    public String getDisplayName() {\n        return name == null ? getUriForDisplay() : CaseInsensitiveString.str(name);\n    }\n\n    @Override\n    public boolean isAutoUpdate() {\n        return autoUpdate;\n    }\n\n    public boolean getAutoUpdate() {\n        return autoUpdate;\n    }\n\n    public void setAutoUpdate(boolean value) {\n        autoUpdate = value;\n    }\n\n    public boolean isInvertFilter() {\n        return invertFilter;\n    }\n\n    public boolean getInvertFilter() {\n        return invertFilter;\n    }\n\n    public void setInvertFilter(boolean value) {\n        invertFilter = value;\n    }\n\n    @Override\n    public final MatchedRevision createMatchedRevision(Modification modification, String searchString) {\n        return new MatchedRevision(searchString, getShortRevision(modification.getRevision()), modification.getRevision(), modification.getUserName(), modification.getModifiedTime(), modification.getComment());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        ScmMaterial that = (ScmMaterial) o;\n\n        return folder != null ? folder.equals(that.folder) : that.folder == null;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (folder != null ? folder.hashCode() : 0);\n        return result;\n    }\n\n    public static String changesetUrl(Modification modification, String baseUrl, final long id) {\n        return baseUrl + \"/api/materials/\" + id + \"/changeset/\" + modification.getRevision() + \".xml\";\n    }\n\n    @Override\n    public Boolean isUsedInFetchArtifact(PipelineConfig pipelineConfig) {\n        return false;\n    }\n\n    // TODO: Consider renaming this to dest since we use that word in the UI & Config\n    public void setFolder(String folder) {\n        this.folder = folder;\n    }\n\n    @Override\n    public Revision oldestRevision(Modifications modifications) {\n        return Modification.oldestRevision(modifications);\n    }\n\n    @Override\n    public boolean supportsDestinationFolder() {\n        return true;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.git;\n\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.git.GitCommand;\nimport com.thoughtworks.go.domain.materials.git.GitMaterialInstance;\nimport com.thoughtworks.go.domain.materials.git.GitVersion;\nimport com.thoughtworks.go.domain.materials.svn.MaterialUrl;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.server.transaction.TransactionSynchronizationManager;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.*;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.transaction.support.TransactionSynchronization;\nimport org.springframework.transaction.support.TransactionSynchronizationAdapter;\n\nimport java.io.File;\nimport java.net.URISyntaxException;\nimport java.util.*;\n\nimport static com.thoughtworks.go.config.materials.git.RefSpecHelper.localBranch;\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfFailedToRunCommandLine;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static com.thoughtworks.go.util.FileUtil.deleteDirectoryNoisily;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\npublic class GitMaterial extends ScmMaterial implements PasswordAwareMaterial {\n    public static final int UNSHALLOW_TRYOUT_STEP = 100;\n    public static final int DEFAULT_SHALLOW_CLONE_DEPTH = 2;\n    public static final String GO_MATERIAL_BRANCH = \"GO_MATERIAL_BRANCH\";\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"GitMaterial\";\n    public static final String ERR_GIT_OLD_VERSION = \"Please install Git-core 1.9 or above. Currently installed version is \";\n    private static final Logger LOG = LoggerFactory.getLogger(GitMaterial.class);\n    private static final String ERR_GIT_NOT_FOUND = \"Failed to find 'git' on your PATH. Please ensure 'git' is executable by the Go Server and on the Go Agents where this material will be used.\";\n    private final UrlArgument url;\n    private String refSpecOrBranch = GitMaterialConfig.DEFAULT_BRANCH;\n    private boolean shallowClone = false;\n    private String submoduleFolder;\n\n    public GitMaterial(String url) {\n        super(TYPE, new GoCipher());\n        this.url = new UrlArgument(url);\n    }\n\n    public GitMaterial(String url, boolean shallowClone) {\n        this(url, null, null, shallowClone);\n    }\n\n\n    public GitMaterial(String url, String refSpecOrBranch) {\n        this(url);\n        if (refSpecOrBranch != null) {\n            this.refSpecOrBranch = refSpecOrBranch;\n        }\n    }\n\n    public GitMaterial(String url, String refSpecOrBranch, String folder) {\n        this(url, refSpecOrBranch);\n        this.folder = folder;\n    }\n\n    public GitMaterial(String url, String refSpecOrBranch, String folder, Boolean shallowClone) {\n        this(url, refSpecOrBranch, folder);\n        if (shallowClone != null) {\n            this.shallowClone = shallowClone;\n        }\n    }\n\n    public GitMaterial(GitMaterialConfig config) {\n        this(config.getUrl(), config.getBranch(), config.getFolder(), config.isShallowClone());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.name = config.getName();\n        this.submoduleFolder = config.getSubmoduleFolder();\n        this.invertFilter = config.getInvertFilter();\n        this.userName = config.getUserName();\n        setPassword(config.getPassword());\n    }\n\n    @Override\n    public MaterialConfig config() {\n        GitMaterialConfig gitMaterialConfig = new GitMaterialConfig();\n        gitMaterialConfig.setUrl(this.url.originalArgument());\n        gitMaterialConfig.setUserName(this.userName);\n        gitMaterialConfig.setPassword(getPassword());\n        gitMaterialConfig.setSubmoduleFolder(this.submoduleFolder);\n        gitMaterialConfig.setAutoUpdate(this.autoUpdate);\n        gitMaterialConfig.setFilter(this.filter);\n        gitMaterialConfig.setInvertFilter(this.invertFilter);\n        gitMaterialConfig.setFolder(this.folder);\n        gitMaterialConfig.setName(this.name);\n        gitMaterialConfig.setShallowClone(this.shallowClone);\n        Optional.ofNullable(this.refSpecOrBranch).ifPresent(gitMaterialConfig::setBranch);\n        return gitMaterialConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        return getGit(baseDir, execCtx).latestModification();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        GitCommand gitCommand = getGit(baseDir, execCtx);\n        if (!execCtx.isGitShallowClone()) {\n            fullyUnshallow(gitCommand, inMemoryConsumer());\n        }\n        if (gitCommand.containsRevisionInBranch(revision)) {\n            return gitCommand.modificationsSince(revision);\n        } else {\n            return latestModification(baseDir, execCtx);\n        }\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new GitMaterialInstance(url.originalArgument(), userName, refSpecOrBranch, submoduleFolder, UUID.randomUUID().toString());\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        try {\n            outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), getUriForDisplay()));\n            File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n            GitCommand git = git(outputStreamConsumer, workingDir, revisionContext.numberOfModifications() + 1, execCtx);\n            git.fetch(outputStreamConsumer);\n            unshallowIfNeeded(git, outputStreamConsumer, revisionContext.getOldestRevision());\n            git.resetWorkingDir(outputStreamConsumer, revision, shallowClone);\n            outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        GitCommand gitCommand = new GitCommand(null, null, refSpecOrBranch, false, secrets());\n        try {\n            gitCommand.checkConnection(new UrlArgument(urlForCommandLine()));\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            try {\n                return handleException(e, gitCommand.version());\n            } catch (Exception notInstallGitException) {\n                return ValidationBean.notValid(ERR_GIT_NOT_FOUND);\n            }\n        }\n    }\n\n    public ValidationBean handleException(Exception e, GitVersion gitVersion) {\n        ValidationBean defaultResponse = ValidationBean.notValid(e.getMessage());\n        try {\n            if (!gitVersion.isMinimumSupportedVersionOrHigher()) {\n                return ValidationBean.notValid(ERR_GIT_OLD_VERSION + gitVersion.getVersion().toString());\n            } else {\n                return defaultResponse;\n            }\n        } catch (Exception ex) {\n            return defaultResponse;\n        }\n    }\n\n    /**\n     * @deprecated Breaks encapsulation really badly. But we need it for IBatis :-(\n     */\n    @Override\n    public String getUrl() {\n        return url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        try {\n            if (credentialsAreNotProvided()) {\n                return this.url.originalArgument();\n            }\n\n            return new URIBuilder(this.url.originalArgument())\n                    .setUserInfo(new UrlUserInfo(this.userName, this.passwordForCommandLine()).asString())\n                    .build().toString();\n\n        } catch (URISyntaxException e) {\n            return this.url.originalArgument();\n        }\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Branch: %s\", url.forDisplay(), refSpecOrBranch);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n        GitMaterial that = (GitMaterial) o;\n        return Objects.equals(url, that.url) &&\n                Objects.equals(refSpecOrBranch, that.refSpecOrBranch) &&\n                Objects.equals(submoduleFolder, that.submoduleFolder);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(super.hashCode(), url, refSpecOrBranch, submoduleFolder);\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Git\";\n    }\n\n    public String getBranch() {\n        return this.refSpecOrBranch;\n    }\n\n    public String getSubmoduleFolder() {\n        return submoduleFolder;\n    }\n\n    public void setSubmoduleFolder(String submoduleFolder) {\n        this.submoduleFolder = submoduleFolder;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    public boolean isShallowClone() {\n        return shallowClone;\n    }\n\n    @Override\n    public String getShortRevision(String revision) {\n        if (revision == null) return null;\n        if (revision.length() < 7) return revision;\n        return revision.substring(0, 7);\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"git\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"branch\", refSpecOrBranch);\n        configurationMap.put(\"shallow-clone\", shallowClone);\n        materialMap.put(\"git-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return GitMaterialInstance.class;\n    }\n\n    @Override\n    public String toString() {\n        return \"GitMaterial{\" +\n                \"url=\" + url +\n                \", branch='\" + refSpecOrBranch + '\\'' +\n                \", shallowClone=\" + shallowClone +\n                \", submoduleFolder='\" + submoduleFolder + '\\'' +\n                '}';\n    }\n\n    @Override\n    public void updateFromConfig(MaterialConfig materialConfig) {\n        super.updateFromConfig(materialConfig);\n        this.shallowClone = ((GitMaterialConfig) materialConfig).isShallowClone();\n    }\n\n    public GitMaterial withShallowClone(boolean value) {\n        GitMaterialConfig config = (GitMaterialConfig) config();\n        config.setShallowClone(value);\n        GitMaterial gitMaterial = new GitMaterial(config);\n        gitMaterial.secretParamsForPassword = this.secretParamsForPassword;\n\n        return gitMaterial;\n    }\n\n    public String effectiveLocalBranch() {\n        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(\"branch\", refSpecOrBranch);\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        parameters.put(\"url\", url);\n        parameters.put(\"branch\", refSpecOrBranch);\n        parameters.put(\"shallowClone\", shallowClone);\n    }\n\n    @Override\n    protected String getLocation() {\n        return url.forDisplay();\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n    }\n\n    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n        InMemoryStreamConsumer output = inMemoryConsumer();\n        try {\n            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n        } catch (Exception e) {\n            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n        }\n    }\n\n    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n        if (isSubmoduleFolder()) {\n            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n        }\n\n        GitCommand gitCommand = new GitCommand(getFingerprint(), workingFolder, refSpecOrBranch, false, secrets());\n        if (!isGitRepository(workingFolder) || isRepositoryChanged(gitCommand, workingFolder)) {\n            LOG.debug(\"Invalid git working copy or repository changed. Delete folder: {}\", workingFolder);\n            deleteDirectoryNoisily(workingFolder);\n        }\n        createParentFolderIfNotExist(workingFolder);\n        if (!workingFolder.exists()) {\n            TransactionSynchronizationManager txManager = new TransactionSynchronizationManager();\n            if (txManager.isActualTransactionActive()) {\n                txManager.registerSynchronization(new TransactionSynchronizationAdapter() {\n                    @Override\n                    public void afterCompletion(int status) {\n                        if (status != TransactionSynchronization.STATUS_COMMITTED) {\n                            FileUtils.deleteQuietly(workingFolder);\n                        }\n                    }\n                });\n            }\n            int cloneDepth = shallowClone ? preferredCloneDepth : Integer.MAX_VALUE;\n            int returnValue;\n            if (executionContext.isServer()) {\n                returnValue = gitCommand.cloneWithNoCheckout(outputStreamConsumer, urlForCommandLine());\n            } else {\n                returnValue = gitCommand.clone(outputStreamConsumer, urlForCommandLine(), cloneDepth);\n            }\n            bombIfFailedToRunCommandLine(returnValue, \"Failed to run git clone command\");\n        }\n        return gitCommand;\n    }\n\n    private List<SecretString> secrets() {\n        SecretString secretSubstitution = line -> line.replace(urlForCommandLine(), getUriForDisplay());\n        return Collections.singletonList(secretSubstitution);\n    }\n\n    // Unshallow local repo to include a revision operating on via two step process:\n    // First try to fetch forward 100 level with \"git fetch -depth 100\". If revision still missing,\n    // unshallow the whole repo with \"git fetch --2147483647\".\n    private void unshallowIfNeeded(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer, Revision revision) {\n        if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n            gitCommand.unshallow(streamConsumer, UNSHALLOW_TRYOUT_STEP);\n\n            if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n                fullyUnshallow(gitCommand, streamConsumer);\n            }\n        }\n    }\n\n    private void fullyUnshallow(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer) {\n        if (gitCommand.isShallow()) {\n            gitCommand.unshallow(streamConsumer, Integer.MAX_VALUE);\n        }\n    }\n\n    private boolean isSubmoduleFolder() {\n        return getSubmoduleFolder() != null;\n    }\n\n    private boolean isGitRepository(File workingFolder) {\n        return new File(workingFolder, \".git\").isDirectory();\n    }\n\n    private boolean isRepositoryChanged(GitCommand command, File workingDirectory) {\n        UrlArgument currentWorkingUrl = command.workingRepositoryUrl();\n        LOG.trace(\"Current repository url of [{}]: {}\", workingDirectory, currentWorkingUrl);\n        LOG.trace(\"Target repository url: {}\", url);\n        return !MaterialUrl.sameUrl(url.forDisplay(), currentWorkingUrl.forDisplay())\n                || !isRemoteFetchConfigEqual(command)\n                || !isBranchEqual(command)\n                || (!shallowClone && command.isShallow());\n    }\n\n    private boolean isRemoteFetchConfigEqual(GitCommand command) {\n        if (command.hasRefSpec()) {\n            try {\n                return (\"+\" + command.expandRefSpec()).equals(command.getConfigValue(\"remote.origin.fetch\"));\n            } catch (Throwable ignored) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isBranchEqual(GitCommand command) {\n        return effectiveLocalBranch().equals(command.getCurrentBranch());\n    }\n\n    private boolean credentialsAreNotProvided() {\n        return isAllBlank(this.userName, this.getPassword());\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.mercurial;\n\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.mercurial.HgCommand;\nimport com.thoughtworks.go.domain.materials.mercurial.HgMaterialInstance;\nimport com.thoughtworks.go.domain.materials.mercurial.HgVersion;\nimport com.thoughtworks.go.domain.materials.svn.MaterialUrl;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.*;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.net.URISyntaxException;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfFailedToRunCommandLine;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n/**\n * @understands configuration for mercurial version control\n */\npublic class HgMaterial extends ScmMaterial implements PasswordAwareMaterial {\n    private static final Pattern HG_VERSION_PATTERN = Pattern.compile(\".*\\\\(.*\\\\s+(\\\\d(\\\\.\\\\d)+.*)\\\\)\");\n    private static final Logger LOGGER = LoggerFactory.getLogger(HgMaterial.class);\n    private HgUrlArgument url;\n\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"HgMaterial\";\n    private static final String ERROR_OLD_VERSION = \"Please install Mercurial Version 1.0 or above.\"\n            + \" The current installed hg is \";\n    private static final String ERR_NO_HG_INSTALLED =\n            \"Failed to find 'hg' on your PATH. Please ensure 'hg' is executable by the Go Server and on the Go Agents where this material will be used.\";\n\n    private final String HG_DEFAULT_BRANCH = \"default\";\n    private String branch;\n\n    private HgMaterial() {\n        super(TYPE, new GoCipher());\n    }\n\n    public HgMaterial(String url, String folder) {\n        this();\n        this.url = new HgUrlArgument(url);\n        this.folder = folder;\n    }\n\n    public HgMaterial(HgMaterialConfig config) {\n        this(config.getUrl(), config.getFolder());\n        this.userName = config.getUserName();\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.name = config.getName();\n        this.userName = config.getUserName();\n        this.branch = config.getBranch();\n        setPassword(config.getPassword());\n    }\n\n    @Override\n    public MaterialConfig config() {\n        HgMaterialConfig hgConfig = new HgMaterialConfig();\n        hgConfig.setUrl(this.url.originalArgument());\n        hgConfig.setUserName(this.userName);\n        hgConfig.setPassword(getPassword());\n        hgConfig.setBranchAttribute(this.branch);\n        hgConfig.setAutoUpdate(this.autoUpdate);\n        hgConfig.setFilter(this.filter);\n        hgConfig.setInvertFilter(this.invertFilter);\n        hgConfig.setFolder(this.folder);\n        hgConfig.setName(this.name);\n        return hgConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        HgCommand hgCommand = getHg(baseDir);\n        return hgCommand.latestOneModificationAsModifications();\n    }\n\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return getHg(baseDir).modificationsSince(revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new HgMaterialInstance(url.originalArgument(), userName, branch, UUID.randomUUID().toString());\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        if (isNotBlank(branch)) {\n            parameters.put(\"branch\", branch);\n        }\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        parameters.put(\"url\", url);\n    }\n\n    private HgCommand getHg(File baseDir) {\n        InMemoryStreamConsumer output =\n                ProcessOutputStreamConsumer.inMemoryConsumer();\n        HgCommand hgCommand = null;\n        try {\n            hgCommand = hg(baseDir, output);\n        } catch (Exception e) {\n            bomb(e.getMessage() + \" \" + output.getStdError(), e);\n        }\n\n        return hgCommand;\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        try {\n            outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url.forDisplay()));\n            File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n            hg(workingDir, outputStreamConsumer).updateTo(revision, outputStreamConsumer);\n            outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public void add(File baseDir, ProcessOutputStreamConsumer outputStreamConsumer, File file) throws Exception {\n        hg(baseDir, outputStreamConsumer).add(outputStreamConsumer, file);\n    }\n\n    public void commit(File baseDir, ProcessOutputStreamConsumer consumer, String comment, String username)\n            throws Exception {\n        hg(baseDir, consumer).commit(consumer, comment, username);\n    }\n\n    public void push(File baseDir, ProcessOutputStreamConsumer consumer) throws Exception {\n        hg(baseDir, consumer).push(consumer);\n    }\n\n    boolean isVersionOneDotZeroOrHigher(String hgout) {\n        String hgVersion = parseHgVersion(hgout);\n        Float aFloat = NumberUtils.createFloat(hgVersion.subSequence(0, 3).toString());\n        return aFloat >= 1;\n    }\n\n    private String parseHgVersion(String hgOut) {\n        String[] lines = hgOut.split(\"\\n\");\n        String firstLine = lines[0];\n        Matcher m = HG_VERSION_PATTERN.matcher(firstLine);\n        if (m.matches()) {\n            return m.group(1);\n        } else {\n            throw bomb(\"can not parse hgout : \" + hgOut);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        HgCommand hgCommand = new HgCommand(null, null, null, null, secrets());\n        try {\n            hgCommand.checkConnection(new HgUrlArgument(urlForCommandLine()));\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            try {\n                return handleException(e, hgCommand.version());\n            } catch (Exception ex) {\n                return ValidationBean.notValid(ERR_NO_HG_INSTALLED);\n            }\n        }\n    }\n\n    ValidationBean handleException(Exception e, HgVersion version) {\n        ValidationBean defaultResponse = ValidationBean.notValid(\n                \"Repository \" + url.forDisplay() + \" not found!\" + \" : \\n\" + e.getMessage());\n        try {\n            if (version.isOlderThanOneDotZero()) {\n                return ValidationBean.notValid(ERROR_OLD_VERSION + version.toString());\n            } else {\n                return defaultResponse;\n            }\n        } catch (Exception e1) {\n            LOGGER.debug(\"Problem validating HG\", e);\n            return defaultResponse;\n        }\n    }\n\n\n    private HgCommand hg(File workingFolder, ConsoleOutputStreamConsumer outputStreamConsumer) throws Exception {\n        UrlArgument urlArgument = new HgUrlArgument(urlForCommandLine());\n        HgCommand hgCommand = new HgCommand(getFingerprint(), workingFolder, getBranch(), urlArgument.forCommandLine(), secrets());\n        if (!isHgRepository(workingFolder) || isRepositoryChanged(hgCommand)) {\n            LOGGER.debug(\"Invalid hg working copy or repository changed. Delete folder: {}\", workingFolder);\n            FileUtils.deleteQuietly(workingFolder);\n        }\n        if (!workingFolder.exists()) {\n            createParentFolderIfNotExist(workingFolder);\n            int returnValue = hgCommand.clone(outputStreamConsumer, urlArgument);\n            bombIfFailedToRunCommandLine(returnValue, \"Failed to run hg clone command\");\n        }\n        return hgCommand;\n    }\n\n    protected List<SecretString> secrets() {\n        SecretString secretSubstitution = line -> line.replace(urlForCommandLine(), getUriForDisplay());\n        return Collections.singletonList(secretSubstitution);\n    }\n\n    private boolean isHgRepository(File workingFolder) {\n        return new File(workingFolder, \".hg\").isDirectory();\n    }\n\n    private boolean isRepositoryChanged(HgCommand hgCommand) {\n        ConsoleResult result = hgCommand.workingRepositoryUrl();\n        return !MaterialUrl.sameUrl(url.defaultRemoteUrl(), new HgUrlArgument(result.outputAsString()).defaultRemoteUrl());\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        try {\n            if (credentialsAreNotProvided()) {\n                return this.url.originalArgument();\n            }\n\n            return new URIBuilder(this.url.originalArgument())\n                    .setUserInfo(new UrlUserInfo(this.userName, this.passwordForCommandLine()).asString())\n                    .build().toString();\n\n        } catch (URISyntaxException e) {\n            return this.url.originalArgument();\n        }\n    }\n\n    private boolean credentialsAreNotProvided() {\n        return isAllBlank(this.userName, this.getPassword());\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    public HgUrlArgument getHgUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s\", url.forDisplay());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        HgMaterial that = (HgMaterial) o;\n\n        if (url != null ? !url.equals(that.url) : that.url != null) {\n            return false;\n        }\n\n        if (branch != null ? !branch.equals(that.branch) : that.branch != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (branch != null ? branch.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrlArgument().forDisplay();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Mercurial\";\n    }\n\n    @Override\n    public String getShortRevision(String revision) {\n        if (revision == null) return null;\n        if (revision.length() < 12) return revision;\n        return revision.substring(0, 12);\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"mercurial\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        materialMap.put(\"mercurial-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return HgMaterialInstance.class;\n    }\n\n    @Override\n    public String toString() {\n        return \"HgMaterial{\" +\n                \"url=\" + url +\n                '}';\n    }\n\n    public void setBranch(String branch) {\n        this.branch = branch;\n    }\n\n\n    public String getBranch() {\n        if (isNotBlank(branch)) {\n            return branch;\n        }\n\n        return getBranchFromUrl();\n    }\n\n    private String getBranchFromUrl() {\n        String[] componentsOfUrl = StringUtils.split(url.originalArgument(), HgUrlArgument.DOUBLE_HASH);\n        if (componentsOfUrl.length > 1) {\n            return componentsOfUrl[1];\n        }\n        return HG_DEFAULT_BRANCH;\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        setVariableWithName(environmentVariableContext, getBranch(), GitMaterial.GO_MATERIAL_BRANCH);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.perforce;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.perforce.P4Client;\nimport com.thoughtworks.go.domain.materials.perforce.P4MaterialInstance;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.FileUtil;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.SystemUtil;\nimport com.thoughtworks.go.util.TempFiles;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static java.lang.Long.parseLong;\nimport static java.lang.String.format;\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class P4Material extends ScmMaterial implements PasswordEncrypter, PasswordAwareMaterial {\n    private String serverAndPort;\n    private Boolean useTickets = false;\n    private P4MaterialView view;\n\n    // Database stuff\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"P4Material\";\n\n    private P4Material(GoCipher goCipher) {\n        super(TYPE, goCipher);\n    }\n\n    public P4Material(String serverAndPort, String view, GoCipher goCipher) {\n        this(goCipher);\n        bombIfNull(serverAndPort, \"null serverAndPort\");\n        this.serverAndPort = serverAndPort;\n        setView(view);\n    }\n\n    public P4Material(String serverAndPort, String view) {\n        this(serverAndPort, view, new GoCipher());\n    }\n\n    public P4Material(String url, String view, String userName) {\n        this(url, view);\n        this.userName = userName;\n    }\n\n    public P4Material(String url, String view, String userName, String folder) {\n        this(url, view, userName, folder, new GoCipher());\n    }\n\n    public P4Material(P4MaterialConfig config) {\n        this(config.getUrl(), config.getView(), config.getUserName(), config.getFolder(), config.getGoCipher());\n        this.name = config.getName();\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        setPassword(config.getPassword());\n        this.useTickets = config.getUseTickets();\n    }\n\n    private P4Material(String serverAndPort, String view, String userName, String folder, GoCipher goCipher) {\n        this(goCipher);\n        bombIfNull(serverAndPort, \"null serverAndPort\");\n        this.serverAndPort = serverAndPort;\n        setView(view);\n        this.userName = userName;\n        this.folder = folder;\n    }\n\n    @Override\n    public MaterialConfig config() {\n        P4MaterialConfig p4MaterialConfig = new P4MaterialConfig();\n        p4MaterialConfig.setServerAndPort(this.serverAndPort);\n        p4MaterialConfig.setUserName(this.userName);\n        p4MaterialConfig.setPassword(getPassword());\n        p4MaterialConfig.setUseTickets(this.useTickets);\n        p4MaterialConfig.setView(view == null ? null : view.getValue());\n        p4MaterialConfig.setName(this.name);\n        p4MaterialConfig.setAutoUpdate(this.autoUpdate);\n        p4MaterialConfig.setFilter(this.filter);\n        p4MaterialConfig.setInvertFilter(this.invertFilter);\n        p4MaterialConfig.setFolder(this.folder);\n        return p4MaterialConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        P4Client p4 = getP4(execCtx.isServer() ? baseDir : workingdir(baseDir));\n        return p4.latestChange();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        P4Client p4 = getP4(execCtx.isServer() ? baseDir : workingdir(baseDir));\n        return p4.changesSince(revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new P4MaterialInstance(serverAndPort, userName, view.getValue(), useTickets, UUID.randomUUID().toString());\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, serverAndPort);\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"view\", view.getValue());\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        appendCriteria(parameters);\n    }\n\n    protected P4Client getP4(File baseDir) {\n        InMemoryStreamConsumer outputConsumer = inMemoryConsumer();\n        P4Client p4 = null;\n        try {\n            p4 = p4(baseDir, outputConsumer);\n        } catch (Exception e) {\n            bomb(e.getMessage() + \" \" + outputConsumer.getStdError(), e);\n        }\n        return p4;\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        boolean cleaned = cleanDirectoryIfRepoChanged(workingDir, outputConsumer);\n        String revision = revisionContext.getLatestRevision().getRevision();\n        try {\n            outputConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision, serverAndPort));\n            p4(workingDir, outputConsumer).sync(parseLong(revision), cleaned, outputConsumer);\n            outputConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        File baseDir = new TempFiles().createUniqueFolder(\"for-p4\");\n        try {\n            getP4(baseDir).checkConnection();\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            return ValidationBean.notValid(\"Unable to connect to server \" + serverAndPort + \" : \\n\" + e.getMessage());\n        } finally {\n            FileUtils.deleteQuietly(baseDir);\n        }\n    }\n\n    public String getServerAndPort() {\n        return serverAndPort;\n    }\n\n    public String getView() {\n        return view == null ? null : view.getValue();\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return serverAndPort;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return serverAndPort;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(serverAndPort);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return format(\"URL: %s, View: %s, Username: %s\", serverAndPort, view.getValue(), userName);\n    }\n\n    P4Client p4(File baseDir, ConsoleOutputStreamConsumer consumer) throws Exception {\n        return _p4(baseDir, consumer, true);\n    }\n\n    /**\n     * not for use externally, created for testing convenience\n     */\n    P4Client _p4(File workDir, ConsoleOutputStreamConsumer consumer, boolean failOnError) throws Exception {\n        String clientName = clientName(workDir);\n        return P4Client.fromServerAndPort(getFingerprint(), serverAndPort, userName, passwordForCommandLine(), clientName, this.useTickets, workDir, p4view(clientName), consumer, failOnError);\n    }\n\n    @Override\n    public void populateAgentSideEnvironmentContext(EnvironmentVariableContext environmentVariableContext, File baseDir) {\n        super.populateAgentSideEnvironmentContext(environmentVariableContext, baseDir);\n        setVariableWithName(environmentVariableContext, clientName(workingdir(baseDir)), \"GO_P4_CLIENT\");\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"perforce\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        configurationMap.put(\"url\", serverAndPort);\n        configurationMap.put(\"username\", userName);\n        if (addSecureFields) {\n            configurationMap.put(\"password\", getPassword());\n        }\n        configurationMap.put(\"view\", getView());\n        configurationMap.put(\"use-tickets\", useTickets);\n        materialMap.put(\"perforce-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return P4MaterialInstance.class;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        P4Material that = (P4Material) o;\n\n        if (serverAndPort != null ? !serverAndPort.equals(that.serverAndPort) : that.serverAndPort != null) {\n            return false;\n        }\n        if (useTickets != null ? !useTickets.equals(that.useTickets) : that.useTickets != null) {\n            return false;\n        }\n        if (view != null ? !view.equals(that.view) : that.view != null) {\n            return false;\n        }\n\n        if (userName != null ? !userName.equals(that.userName) : that.userName != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (serverAndPort != null ? serverAndPort.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (useTickets != null ? useTickets.hashCode() : 0);\n        result = 31 * result + (view != null ? view.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getServerAndPort();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Perforce\";\n    }\n\n    public String p4view(String clientName) {\n        return view.viewUsing(clientName);\n    }\n\n    public String clientName(File workingDir) {\n        String hash = FileUtil.filesystemSafeFileHash(workingDir);\n        return \"cruise-\" + SystemUtil.getLocalhostName()\n                + \"-\" + workingDir.getName()\n                + \"-\" + hash;\n    }\n\n    private boolean cleanDirectoryIfRepoChanged(File workingDirectory, ConsoleOutputStreamConsumer outputConsumer) {\n        boolean cleaned = false;\n        try {\n            String p4RepoId = p4RepoId();\n            File file = new File(workingDirectory, \".cruise_p4repo\");\n            if (!file.exists()) {\n                FileUtils.writeStringToFile(file, p4RepoId, UTF_8);\n                return true;\n            }\n\n            String existingRepoId = FileUtils.readFileToString(file, UTF_8);\n            if (!p4RepoId.equals(existingRepoId)) {\n                outputConsumer.stdOutput(format(\"[%s] Working directory has changed. Deleting and re-creating it.\", GoConstants.PRODUCT_NAME));\n                FileUtils.deleteDirectory(workingDirectory);\n                workingDirectory.mkdirs();\n                FileUtils.writeStringToFile(file, p4RepoId, UTF_8);\n                cleaned = true;\n            }\n            return cleaned;\n        } catch (IOException e) {\n            throw bomb(e);\n        }\n    }\n\n    private String p4RepoId() {\n        return hasUser() ? userName + \"@\" + serverAndPort : serverAndPort;\n    }\n\n    private boolean hasUser() {\n        return userName != null && !userName.trim().isEmpty();\n    }\n\n    public boolean getUseTickets() {\n        return this.useTickets;\n    }\n\n    public void setUseTickets(boolean useTickets) {\n        this.useTickets = useTickets;\n    }\n\n    @Override\n    public String toString() {\n        return \"P4Material{\" +\n                \"serverAndPort='\" + serverAndPort + '\\'' +\n                \", userName='\" + userName + '\\'' +\n                \", view=\" + view.getValue() +\n                '}';\n    }\n\n    public void setUsername(String userName) {\n        this.userName = userName;\n    }\n\n    private void setView(String viewStr) {\n        this.view = new P4MaterialView(viewStr);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.svn;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.svn.*;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static java.lang.String.format;\n\n/**\n * @understands configuration for subversion\n */\npublic class SvnMaterial extends ScmMaterial implements PasswordEncrypter, PasswordAwareMaterial {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SvnMaterial.class);\n    private UrlArgument url;\n    private boolean checkExternals;\n    private transient Subversion svnLazyLoaded;\n\n    public static final String TYPE = \"SvnMaterial\";\n\n    private SvnMaterial(GoCipher goCipher) {\n        super(\"SvnMaterial\", goCipher);\n    }\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals) {\n        this(url, userName, password, checkExternals, new GoCipher());\n    }\n\n    public SvnMaterial(Subversion svn) {\n        this(svn.getUrl().originalArgument(), svn.getUserName(), svn.getPassword(), svn.isCheckExternals());\n        this.svnLazyLoaded = svn;\n    }\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals, String folder) {\n        this(url, userName, password, checkExternals);\n        this.folder = folder;\n    }\n\n    public SvnMaterial(SvnMaterialConfig config) {\n        this(config.getUrl(), config.getUserName(), config.getPassword(), config.isCheckExternals(), config.getGoCipher());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.folder = config.getFolder();\n        this.name = config.getName();\n    }\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals, GoCipher goCipher) {\n        super(\"SvnMaterial\", goCipher);\n        bombIfNull(url, \"null url\");\n        setUrl(url);\n        this.userName = userName;\n        setPassword(password);\n        this.checkExternals = checkExternals;\n    }\n\n    @Override\n    public MaterialConfig config() {\n        SvnMaterialConfig svnMaterialConfig = new SvnMaterialConfig();\n        svnMaterialConfig.setUrl(this.url.originalArgument());\n        svnMaterialConfig.setUserName(this.userName);\n        svnMaterialConfig.setPassword(getPassword());\n        svnMaterialConfig.setCheckExternals(this.checkExternals);\n        svnMaterialConfig.setAutoUpdate(this.autoUpdate);\n        svnMaterialConfig.setFilter(this.filter);\n        svnMaterialConfig.setInvertFilter(this.invertFilter);\n        svnMaterialConfig.setFolder(this.folder);\n        svnMaterialConfig.setName(this.name);\n        return svnMaterialConfig;\n    }\n\n    private Subversion svn() {\n        if (svnLazyLoaded == null || !svnLazyLoaded.getUrl().equals(url)) {\n            svnLazyLoaded = new SvnCommand(getFingerprint(), url.forCommandLine(), userName, passwordForCommandLine(), checkExternals);\n        }\n        return svnLazyLoaded;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        return svn().latestModification();\n    }\n\n    public List<Modification> modificationsSince(File workingDirectory, Revision revision, final SubprocessExecutionContext execCtx) {\n        return svn().modificationsSince(new SubversionRevision(revision.getRevision()));\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new SvnMaterialInstance(url.originalArgument(), userName, UUID.randomUUID().toString(), checkExternals);\n    }\n\n    @Override\n    protected void appendCriteria(Map parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"checkExternals\", checkExternals);\n    }\n\n    @Override\n    protected void appendAttributes(Map parameters) {\n        parameters.put(ScmMaterialConfig.URL, url);\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"checkExternals\", checkExternals);\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        LOGGER.debug(\"Updating to revision: {} in workingdirectory {}\", revision, workingDir);\n        outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url));\n        boolean shouldDoFreshCheckout = !workingDir.isDirectory() || isRepositoryChanged(workingDir);\n        if (shouldDoFreshCheckout) {\n            freshCheckout(outputStreamConsumer, new SubversionRevision(revision), workingDir);\n        } else {\n            cleanupAndUpdate(outputStreamConsumer, new SubversionRevision(revision), workingDir);\n        }\n        LOGGER.debug(\"done with update\");\n        outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n    }\n\n    public boolean isRepositoryChanged(File workingFolder) {\n        try {\n            File file = new File(workingFolder, \".svn\");\n            if (workingFolder.isDirectory() && file.exists() && file.isDirectory()) {\n                String workingUrl = svn().workingRepositoryUrl(workingFolder);\n                return !MaterialUrl.sameUrl(url.toString(), workingUrl);\n            } else {\n                return true;\n            }\n        } catch (IOException e) {\n            return true;\n        }\n    }\n\n    public void freshCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, SubversionRevision revision,\n                              File workingFolder) {\n        if (workingFolder.isDirectory()) {\n            FileUtils.deleteQuietly(workingFolder);\n        }\n        LOGGER.trace(\"Checking out to revision {} in {}\", revision, workingFolder);\n        createParentFolderIfNotExist(workingFolder);\n        svn().checkoutTo(outputStreamConsumer, workingFolder, revision);\n    }\n\n    public void cleanupAndUpdate(ConsoleOutputStreamConsumer outputStreamConsumer, SubversionRevision revision,\n                                 File workingFolder) {\n        try {\n            svn().cleanupAndRevert(outputStreamConsumer, workingFolder);\n        } catch (Exception e) {\n            String message = \"Failed to do cleanup and revert in \" + workingFolder.getAbsolutePath();\n            LOGGER.error(message);\n            LOGGER.debug(message, e);\n        }\n        LOGGER.trace(\"Updating to revision {} on {}\", revision, workingFolder);\n        svn().updateTo(outputStreamConsumer, workingFolder, revision);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        SvnMaterial that = (SvnMaterial) o;\n\n        if (checkExternals != that.checkExternals) {\n            return false;\n        }\n        if (url != null ? !url.equals(that.url) : that.url != null) {\n            return false;\n        }\n\n        if (userName != null ? !userName.equals(that.userName) : that.userName != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (checkExternals ? 1 : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return url == null ? null : url.forDisplay();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Subversion\";\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"svn\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n            configurationMap.put(\"password\", getPassword());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"username\", userName);\n        configurationMap.put(\"check-externals\", checkExternals);\n        materialMap.put(\"svn-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return SvnMaterialInstance.class;\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        return svn().checkConnection();\n    }\n\n    @Override\n    public String getUrl() {\n        return url == null ? null : url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url.forCommandLine();\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Username: %s, CheckExternals: %s\", url.forDisplay(), userName, checkExternals);\n    }\n\n    public void setUrl(String url) {\n        this.url = new UrlArgument(url);\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return checkExternals;\n    }\n\n    public void add(ConsoleOutputStreamConsumer outputStreamConsumer, File file) {\n        svn().add(outputStreamConsumer, file);\n    }\n\n    public void commit(ConsoleOutputStreamConsumer outputStreamConsumer, File workingDir, String message) {\n        svn().commit(outputStreamConsumer, workingDir, message);\n    }\n\n    @Override\n    public boolean matches(String name, String regex) {\n        if (!regex.startsWith(\"/\")) {\n            regex = \"/\" + regex;\n        }\n        return name.matches(regex);\n    }\n\n    @Override\n    public String toString() {\n        return \"SvnMaterial{\" +\n                \"url=\" + url +\n                \", userName='\" + userName + '\\'' +\n                \", checkExternals=\" + checkExternals +\n                '}';\n    }\n\n    /**\n     * @deprecated used only in tests - we need to disentangle this\n     */\n    public static SvnMaterial createSvnMaterialWithMock(Subversion svn) {\n        return new SvnMaterial(svn);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommand;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommandFactory;\nimport com.thoughtworks.go.domain.materials.tfs.TfsMaterialInstance;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\npublic class TfsMaterial extends ScmMaterial implements PasswordAwareMaterial, PasswordEncrypter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(TfsMaterial.class);\n\n    public static final String TYPE = \"TfsMaterial\";\n    public static final String GO_MATERIAL_DOMAIN = \"GO_MATERIAL_DOMAIN\";\n\n    private UrlArgument url;\n    private String domain = \"\";\n    private String projectPath;\n\n    public TfsMaterial(GoCipher goCipher) {\n        super(TYPE, goCipher);\n    }\n\n    public TfsMaterial(GoCipher goCipher, UrlArgument url, String userName, String domain, String password, String projectPath) {\n        this(goCipher);\n        this.url = url;\n        this.userName = userName;\n        this.domain = domain;\n        setPassword(password);\n        this.projectPath = projectPath;\n    }\n\n    public TfsMaterial(TfsMaterialConfig config) {\n        this(config.getGoCipher(), new UrlArgument(config.getUrl()), config.getUserName(), config.getDomain(), config.getPassword(), config.getProjectPath());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.folder = config.getFolder();\n        this.name = config.getName();\n    }\n\n    @Override\n    public MaterialConfig config() {\n        TfsMaterialConfig tfsMaterialConfig = new TfsMaterialConfig();\n        tfsMaterialConfig.setUrl(this.url.originalArgument());\n        tfsMaterialConfig.setUserName(this.userName);\n        tfsMaterialConfig.setDomain(this.domain);\n        tfsMaterialConfig.setPassword(getPassword());\n        tfsMaterialConfig.setProjectPath(this.projectPath);\n        tfsMaterialConfig.setAutoUpdate(this.autoUpdate);\n        tfsMaterialConfig.setFilter(this.filter);\n        tfsMaterialConfig.setInvertFilter(this.invertFilter);\n        tfsMaterialConfig.setFolder(this.folder);\n        tfsMaterialConfig.setName(this.name);\n        return tfsMaterialConfig;\n    }\n\n    public String getDomain() {\n        return domain;\n    }\n\n    public String getProjectPath() {\n        return projectPath;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url == null ? null : url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url.forCommandLine();\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Username: %s, Domain: %s, ProjectPath: %s\", url.forDisplay(), userName, domain, projectPath);\n    }\n\n    @Override\n    protected String getLocation() {\n        return url == null ? null : url.forDisplay();\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(TfsMaterialConfig.DOMAIN, domain);\n        parameters.put(TfsMaterialConfig.PROJECT_PATH, projectPath);\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        appendCriteria(parameters);\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        LOGGER.debug(\"[TFS] Updating to revision: {} in workingdirectory {}\", revision, workingDir);\n        outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url));\n        tfs(execCtx).checkout(workingDir, revision);\n        LOGGER.debug(\"[TFS] done with update\");\n        outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n    }\n\n    TfsCommand tfs(final SubprocessExecutionContext execCtx) {\n        return new TfsCommandFactory().create(execCtx, url, domain, userName, passwordForCommandLine(), getFingerprint(), projectPath);\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        try {\n            tfs(execCtx).checkConnection();\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            LOGGER.error(\"[TFS] Error during check connection\", e);\n            return ValidationBean.notValid(e.getMessage());\n        }\n    }\n\n    public List<Modification> latestModification(File workDir, final SubprocessExecutionContext execCtx) {\n        return tfs(execCtx).latestModification(workDir);\n    }\n\n    public List<Modification> modificationsSince(File workDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return tfs(execCtx).modificationsSince(workDir, revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new TfsMaterialInstance(url.originalArgument(), userName, domain, projectPath, UUID.randomUUID().toString());\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Tfs\";\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"tfs\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.originalArgument());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"domain\", domain);\n        configurationMap.put(\"username\", userName);\n        if (addSecureFields) {\n            configurationMap.put(\"password\", getPassword());\n        }\n        configurationMap.put(\"project-path\", projectPath);\n        materialMap.put(\"tfs-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return TfsMaterialInstance.class;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        TfsMaterial material = (TfsMaterial) o;\n\n        if (projectPath != null ? !projectPath.equals(material.projectPath) : material.projectPath != null) {\n            return false;\n        }\n        if (url != null ? !url.equals(material.url) : material.url != null) {\n            return false;\n        }\n        if (domain != null ? !domain.equals(material.domain) : material.domain != null) {\n            return false;\n        }\n        if (userName != null ? !userName.equals(material.userName) : material.userName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (domain != null ? domain.hashCode() : 0);\n        result = 31 * result + (projectPath != null ? projectPath.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this, ToStringStyle.DEFAULT_STYLE, true);\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        if (isNotBlank(domain)) {\n            setVariableWithName(environmentVariableContext, domain, GO_MATERIAL_DOMAIN);\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials;\n\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.joda.time.DateTime;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\npublic class TestingMaterial extends ScmMaterial {\n    public static final Date TWO_DAYS_AGO_CHECKIN = new DateTime().minusDays(2).toDate();\n\n    public static final String MOD_TYPE = \"svn\";\n    public static final String MOD_REVISION = \"98\";\n\n    public static final String TYPE = \"TestingMaterial\";\n\n    private String url;\n\n    public TestingMaterial() {\n        super(TYPE, new GoCipher());\n    }\n\n    public TestingMaterial(TestingMaterialConfig config) {\n        this();\n        this.url = config.getUrl();\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        throw new RuntimeException(\"NOT USED\");\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return multipleModificationList();\n    }\n\n    private List<Modification> multipleModificationList() {\n        List<Modification> modifications = new ArrayList<>();\n\n        Date today = new Date();\n        Date yesterday = new DateTime().minusDays(1).toDate();\n\n        Modification modification1 = new Modification(\"lgao\", \"Fixing the not checked in files\", \"foo@bar.com\", yesterday, \"99\");\n        modification1.createModifiedFile(\"build.xml\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification1);\n\n        Modification modification2 = new Modification(\"committer\", \"Added the README file\", \"foo@bar.com\", today, \"100\");\n        modification2.createModifiedFile(\"oldbuild.xml\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification2);\n\n        Modification modification3 = new Modification(\"committer <html />\", \"Added the README file with <html />\", \"foo@bar.com\", today, \"101\");\n        modification3.createModifiedFile(\"README.txt\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification3);\n\n        return modifications;\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new TestingMaterialInstance(url, \"FLYWEIGHTNAME\");\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"Url: %s\", url);\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        return null;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrl();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return TYPE;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return TestingMaterialInstance.class;\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n    }\n\n    @Override\n    public MaterialConfig config() {\n        return new TestingMaterialConfig(url);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.tfs;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\npublic class TfsMaterialInstance extends MaterialInstance {\n\n    private TfsMaterialInstance() {\n        super();\n    }\n\n    public TfsMaterialInstance(String url, String userName, String domain, String projectPath, final String flyweightName) {\n        super(url, userName, null, null, null, null, null, null, flyweightName, null, projectPath, domain, null);\n    }\n\n    @Override public Material toOldMaterial(String name, String folder, String password) {\n        TfsMaterial tfsMaterial = new TfsMaterial(new GoCipher(), new UrlArgument(url), username, domain, password, projectPath);\n        tfsMaterial.setFolder(folder);\n        setName(name,tfsMaterial);\n        return tfsMaterial;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.helper;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.config.ConfigurationProperty;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.packagerepository.*;\nimport com.thoughtworks.go.domain.scm.SCM;\nimport com.thoughtworks.go.domain.scm.SCMMother;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MaterialsMother {\n\n    public static Materials defaultMaterials() {\n        return defaultSvnMaterialsWithUrl(\"http://some/svn/url\");\n    }\n\n    public static Materials defaultSvnMaterialsWithUrl(String svnUrl) {\n        return new Materials(svnMaterial(svnUrl, \"svnDir\", null, null, false, null));\n    }\n\n    public static Materials multipleMaterials() {\n        Materials materials = new Materials();\n        materials.add(svnMaterial(\"http://svnurl\"));\n        materials.add(hgMaterial(\"http://hgurl\", \"hgdir\"));\n        materials.add(dependencyMaterial(\"cruise\", \"dev\"));\n        return materials;\n    }\n\n     public static Materials twoMaterials() {\n         Materials materials = new Materials();\n         materials.add(svnMaterial(\"http://svnurl\"));\n         materials.add(hgMaterial(\"http://hgurl\", \"hgdir\"));\n         return materials;\n    }\n\n    public static PackageMaterial packageMaterial(){\n        PackageMaterial material = new PackageMaterial(\"p-id\");\n        material.setId(1);\n        PackageRepository repository = PackageRepositoryMother.create(\"repo-id\", \"repo-name\", \"pluginid\", \"version\",\n                new Configuration(ConfigurationPropertyMother.create(\"k1\", false, \"repo-v1\"), ConfigurationPropertyMother.create(\"k2\", false, \"repo-v2\")));\n        PackageDefinition packageDefinition = PackageDefinitionMother.create(\"p-id\", \"package-name\", new Configuration(ConfigurationPropertyMother.create(\"k3\", false, \"package-v1\")), repository);\n        material.setPackageDefinition(packageDefinition);\n        repository.getPackages().add(packageDefinition);\n        return material;\n    }\n\n    public static PackageMaterial packageMaterial(String repoId, String repoName, String pkgId, String pkgName, ConfigurationProperty... properties) {\n        return packageMaterial(repoId, repoName, pkgId, pkgName, \"pluginid\", \"version\", Arrays.asList(properties), Arrays.asList(properties));\n    }\n\n    public static PackageMaterial packageMaterial(String repoId, String repoName, String pkgId, String pkgName, final String pluginid, final String version, List<ConfigurationProperty> repoProperties,\n                                                  List<ConfigurationProperty> packageProperties) {\n        PackageRepository repository = PackageRepositoryMother.create(repoId, repoName, pluginid, version, new Configuration(repoProperties));\n        PackageDefinition packageDefinition = PackageDefinitionMother.create(pkgId, pkgName, new Configuration(packageProperties), repository);\n        repository.getPackages().add(packageDefinition);\n\n        PackageMaterial material = new PackageMaterial(pkgId);\n        material.setId(1);\n        material.setPackageDefinition(packageDefinition);\n        return material;\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial() {\n        ConfigurationProperty k1 = ConfigurationPropertyMother.create(\"k1\", false, \"v1\");\n        ConfigurationProperty k2 = ConfigurationPropertyMother.create(\"k2\", false, \"v2\");\n        return pluggableSCMMaterial(\"scm-id\", \"scm-name\", k1, k2);\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial(String scmId, String scmName, ConfigurationProperty... properties) {\n        return pluggableSCMMaterial(scmId, scmName, \"pluginid\", \"version\", Arrays.asList(properties));\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial(String scmId, String scmName, final String pluginid, final String version, List<ConfigurationProperty> properties) {\n        PluggableSCMMaterial material = new PluggableSCMMaterial(scmId);\n        material.setId(1);\n        SCM scmConfig = SCMMother.create(scmId, scmName, pluginid, version, new Configuration(properties));\n        material.setSCMConfig(scmConfig);\n        return material;\n    }\n\n    public static DependencyMaterial dependencyMaterial(String pipelineName, String stageName) {\n        return new DependencyMaterial(new CaseInsensitiveString(pipelineName), new CaseInsensitiveString(stageName));\n    }\n\n    public static DependencyMaterial dependencyMaterial() {\n        return new DependencyMaterial(new CaseInsensitiveString(\"pipeline-name\"), new CaseInsensitiveString(\"stage-name\"));\n    }\n\n    public static Materials hgMaterials(String url) {\n        return hgMaterials(url, null);\n    }\n\n    public static Materials hgMaterials(String url, String folder) {\n        return new Materials(hgMaterial(url, folder));\n    }\n\n    public static HgMaterial hgMaterial(String url, String folder) {\n        final HgMaterial material = new HgMaterial(url, folder);\n        material.setAutoUpdate(true);\n        return material;\n    }\n\n    public static HgMaterial hgMaterial() {\n        return new HgMaterial(\"hg-url\", null);\n    }\n\n    public static HgMaterial hgMaterial(String url) {\n        return hgMaterial(url, null);\n    }\n\n    public static Materials gitMaterials(String url) {\n        return gitMaterials(url, null, null);\n    }\n\n    public static Materials gitMaterials(String url, String branch) {\n        return gitMaterials(url, null, branch);\n    }\n\n    public static Materials gitMaterials(String url, String submoduleFolder, String branch) {\n        return new Materials(gitMaterial(url, submoduleFolder, branch));\n    }\n\n    public static GitMaterial gitMaterial(String url) {\n        return gitMaterial(url, null, null);\n    }\n\n    public static GitMaterial gitMaterial(String url, String submoduleFolder, String branch) {\n        GitMaterial gitMaterial = new GitMaterial(url, branch);\n        gitMaterial.setSubmoduleFolder(submoduleFolder);\n        return gitMaterial;\n    }\n\n    public static Materials p4Materials(String view) {\n        P4Material material = p4Material(\"localhost:1666\", \"user\", \"password\", view, true);\n        return new Materials(material);\n    }\n\n    public static P4Material p4Material() {\n        return p4Material(\"serverAndPort\", null, null, \"view\", false);\n    }\n\n    public static P4Material p4Material(String serverAndPort, String userName, String password, String view, boolean useTickets) {\n        final P4Material material = new P4Material(serverAndPort, view, userName);\n        material.setAutoUpdate(true);\n        material.setPassword(password);\n        material.setUseTickets(useTickets);\n        return material;\n    }\n\n    public static TfsMaterial tfsMaterial(String url) {\n        return new TfsMaterial(new GoCipher(), new UrlArgument(url), \"username\", \"domain\", \"password\", \"project-path\");\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl, String folder) {\n        return svnMaterial(svnUrl, folder, \"user\", \"pass\", true, \"*.doc\");\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl, String folder, String userName, String password, boolean checkExternals, String filterPattern) {\n        SvnMaterial svnMaterial = new SvnMaterial(svnUrl, userName, password, checkExternals, folder);\n        if (filterPattern != null)\n            svnMaterial.setFilter(new Filter(new IgnoredFiles(filterPattern)));\n        return svnMaterial;\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl) {\n        return svnMaterial(svnUrl, \"svnDir\");\n    }\n\n    public static SvnMaterial svnMaterial() {\n        return svnMaterial(\"url\");\n    }\n\n    public static Material filteredHgMaterial(String pattern) {\n        HgMaterial material = hgMaterial();\n        material.setFilter(new Filter(new IgnoredFiles(pattern)));\n        return material;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.server.service;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.exceptions.BadRequestException;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.materials.PackageMaterial;\nimport com.thoughtworks.go.config.materials.PluggableSCMMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.MaterialRevisions;\nimport com.thoughtworks.go.domain.PipelineRunIdInfo;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.git.GitMaterialInstance;\nimport com.thoughtworks.go.domain.materials.packagematerial.PackageMaterialRevision;\nimport com.thoughtworks.go.domain.materials.scm.PluggableSCMMaterialRevision;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinition;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepositoryMother;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.helper.ModificationsMother;\nimport com.thoughtworks.go.plugin.access.packagematerial.PackageRepositoryExtension;\nimport com.thoughtworks.go.plugin.access.scm.SCMExtension;\nimport com.thoughtworks.go.plugin.access.scm.SCMPropertyConfiguration;\nimport com.thoughtworks.go.plugin.access.scm.material.MaterialPollResult;\nimport com.thoughtworks.go.plugin.access.scm.revision.SCMRevision;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.PackageRevision;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.RepositoryConfiguration;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.server.dao.FeedModifier;\nimport com.thoughtworks.go.server.domain.Username;\nimport com.thoughtworks.go.server.persistence.MaterialRepository;\nimport com.thoughtworks.go.server.service.materials.GitPoller;\nimport com.thoughtworks.go.server.service.materials.MaterialPoller;\nimport com.thoughtworks.go.server.service.materials.PluggableSCMMaterialPoller;\nimport com.thoughtworks.go.server.service.result.LocalizedOperationResult;\nimport com.thoughtworks.go.server.transaction.TransactionTemplate;\nimport com.thoughtworks.go.server.util.Pagination;\nimport com.thoughtworks.go.serverhealth.HealthStateScope;\nimport com.thoughtworks.go.serverhealth.HealthStateType;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.experimental.theories.DataPoint;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.domain.packagerepository.PackageDefinitionMother.create;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.emptyList;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.any;\nimport static org.mockito.Mockito.*;\nimport static org.mockito.MockitoAnnotations.initMocks;\n\n@RunWith(Theories.class)\npublic class MaterialServiceTest {\n    private static List MODIFICATIONS = new ArrayList<Modification>();\n\n    @Mock\n    private MaterialRepository materialRepository;\n    @Mock\n    private GoConfigService goConfigService;\n    @Mock\n    private SecurityService securityService;\n    @Mock\n    private PackageRepositoryExtension packageRepositoryExtension;\n    @Mock\n    private SCMExtension scmExtension;\n    @Mock\n    private TransactionTemplate transactionTemplate;\n    @Mock\n    private SecretParamResolver secretParamResolver;\n\n    private MaterialService materialService;\n\n    @Before\n    public void setUp() {\n        initMocks(this);\n        materialService = new MaterialService(materialRepository, goConfigService, securityService,\n                packageRepositoryExtension, scmExtension, transactionTemplate, secretParamResolver);\n    }\n\n    @Test\n    public void shouldUnderstandIfMaterialHasModifications() {\n        assertHasModification(new MaterialRevisions(new MaterialRevision(new HgMaterial(\"foo.com\", null), new Modification(new Date(), \"2\", \"MOCK_LABEL-12\", null))), true);\n        assertHasModification(new MaterialRevisions(), false);\n    }\n\n    @Test\n    public void shouldNotBeAuthorizedToViewAPipeline() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(false);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n        materialService.searchRevisions(\"pipeline\", \"sha\", \"search-string\", pavan, operationResult);\n        verify(operationResult).forbidden(EntityType.Pipeline.forbiddenToView(\"pipeline\", pavan.getUsername()), HealthStateType.general(HealthStateScope.forPipeline(\"pipeline\")));\n    }\n\n    @Test\n    public void shouldReturnTheRevisionsThatMatchTheGivenSearchString() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(true);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n        MaterialConfig materialConfig = mock(MaterialConfig.class);\n        when(goConfigService.materialForPipelineWithFingerprint(\"pipeline\", \"sha\")).thenReturn(materialConfig);\n\n        List<MatchedRevision> expected = asList(new MatchedRevision(\"23\", \"revision\", \"revision\", \"user\", new DateTime(2009, 10, 10, 12, 0, 0, 0).toDate(), \"comment\"));\n        when(materialRepository.findRevisionsMatching(materialConfig, \"23\")).thenReturn(expected);\n        assertThat(materialService.searchRevisions(\"pipeline\", \"sha\", \"23\", pavan, operationResult), is(expected));\n    }\n\n    @Test\n    public void shouldReturnNotFoundIfTheMaterialDoesNotBelongToTheGivenPipeline() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(true);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n\n        when(goConfigService.materialForPipelineWithFingerprint(\"pipeline\", \"sha\")).thenThrow(new RuntimeException(\"Not found\"));\n\n        materialService.searchRevisions(\"pipeline\", \"sha\", \"23\", pavan, operationResult);\n        verify(operationResult).notFound(\"Pipeline '\" + \"pipeline\" + \"' does not contain material with fingerprint '\" + \"sha\" + \"'.\", HealthStateType.general(HealthStateScope.forPipeline(\"pipeline\")));\n    }\n\n    @DataPoint\n    public static RequestDataPoints GIT_LATEST_MODIFICATIONS = new RequestDataPoints(new GitMaterial(\"url\") {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public GitMaterial withShallowClone(boolean value) {\n            return this;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, GitMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints SVN_LATEST_MODIFICATIONS = new RequestDataPoints(new SvnMaterial(\"url\", \"username\", \"password\", true) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, SvnMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints HG_LATEST_MODIFICATIONS = new RequestDataPoints(new HgMaterial(\"url\", null) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, HgMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints TFS_LATEST_MODIFICATIONS = new RequestDataPoints(new TfsMaterial(mock(GoCipher.class)) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n    }, TfsMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints P4_LATEST_MODIFICATIONS = new RequestDataPoints(new P4Material(\"url\", \"view\", \"user\") {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, P4Material.class);\n\n    @DataPoint\n    public static RequestDataPoints DEPENDENCY_LATEST_MODIFICATIONS = new RequestDataPoints(new DependencyMaterial(new CaseInsensitiveString(\"p1\"), new CaseInsensitiveString(\"s1\")) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, DependencyMaterial.class);\n\n\n    @Theory\n    public void shouldGetLatestModificationsForGivenMaterial(RequestDataPoints data) {\n        MaterialService spy = spy(materialService);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        List<Modification> actual = spy.latestModification(data.material, null, execCtx);\n        assertThat(actual, is(MODIFICATIONS));\n    }\n\n    @Theory\n    public void shouldGetModificationsSinceARevisionForGivenMaterial(RequestDataPoints data) {\n        Revision revision = mock(Revision.class);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n        MaterialService spy = spy(materialService);\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        List<Modification> actual = spy.modificationsSince(data.material, null, revision, execCtx);\n        assertThat(actual, is(MODIFICATIONS));\n    }\n\n    @Theory\n    public void shouldCheckoutAGivenRevision(RequestDataPoints data) {\n        Revision revision = mock(Revision.class);\n        MaterialPoller materialPoller = mock(MaterialPoller.class);\n        MaterialService spy = spy(materialService);\n        File baseDir = mock(File.class);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        doReturn(materialPoller).when(spy).getPollerImplementation(data.material);\n\n        spy.checkout(data.material, baseDir, revision, execCtx);\n\n        verify(materialPoller).checkout(data.material, baseDir, revision, execCtx);\n    }\n\n    @Test\n    public void shouldThrowExceptionWhenPollerForMaterialNotFound() {\n        try {\n            materialService.latestModification(mock(Material.class), null, null);\n            fail(\"Should have thrown up\");\n        } catch (RuntimeException e) {\n            assertThat(e.getMessage(), is(\"unknown material type null\"));\n        }\n    }\n\n    @Test\n    public void latestModification_shouldResolveSecretsForMaterialConfiguredWithSecretParams() {\n        GitMaterial gitMaterial = spy(new GitMaterial(\"https://example.com\"));\n        MaterialService spy = spy(materialService);\n        GitPoller gitPoller = mock(GitPoller.class);\n\n        doReturn(GitMaterial.class).when(spy).getMaterialClass(gitMaterial);\n        doReturn(true).when(gitMaterial).hasSecretParams();\n        doReturn(gitPoller).when(spy).getPollerImplementation(gitMaterial);\n        when(gitPoller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        spy.latestModification(gitMaterial, null, null);\n\n        verify(secretParamResolver).resolve(gitMaterial);\n    }\n\n    @Test\n    public void modificationsSince_shouldResolveSecretsForMaterialConfiguredWithSecretParams() {\n        GitMaterial gitMaterial = spy(new GitMaterial(\"https://example.com\"));\n        MaterialService spy = spy(materialService);\n        GitPoller gitPoller = mock(GitPoller.class);\n        Class<GitMaterial> toBeReturned = GitMaterial.class;\n\n        doReturn(toBeReturned).when(spy).getMaterialClass(gitMaterial);\n        doReturn(true).when(gitMaterial).hasSecretParams();\n        doReturn(gitPoller).when(spy).getPollerImplementation(gitMaterial);\n        when(gitPoller.modificationsSince(any(), any(), any(), any())).thenReturn(new ArrayList<>());\n\n        spy.modificationsSince(gitMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(gitMaterial);\n    }\n\n    @Test\n    public void shouldGetLatestModificationForPackageMaterial() {\n        PackageMaterial material = new PackageMaterial();\n        PackageDefinition packageDefinition = create(\"id\", \"package\", new Configuration(), PackageRepositoryMother.create(\"id\", \"name\", \"plugin-id\", \"plugin-version\", new Configuration()));\n        material.setPackageDefinition(packageDefinition);\n\n\n        when(packageRepositoryExtension.getLatestRevision(eq(\"plugin-id\"),\n                any(PackageConfiguration.class),\n                any(RepositoryConfiguration.class))).thenReturn(new PackageRevision(\"blah-123\", new Date(), \"user\"));\n\n\n        List<Modification> modifications = materialService.latestModification(material, null, null);\n        assertThat(modifications.get(0).getRevision(), is(\"blah-123\"));\n    }\n\n    @Test\n    public void shouldGetModificationSinceAGivenRevision() {\n        PackageMaterial material = new PackageMaterial();\n        PackageDefinition packageDefinition = create(\"id\", \"package\", new Configuration(), PackageRepositoryMother.create(\"id\", \"name\", \"plugin-id\", \"plugin-version\", new Configuration()));\n        material.setPackageDefinition(packageDefinition);\n\n        when(packageRepositoryExtension.latestModificationSince(eq(\"plugin-id\"),\n                any(PackageConfiguration.class),\n                any(RepositoryConfiguration.class),\n                any(PackageRevision.class))).thenReturn(new PackageRevision(\"new-revision-456\", new Date(), \"user\"));\n        List<Modification> modifications = materialService.modificationsSince(material, null, new PackageMaterialRevision(\"revision-124\", new Date()), null);\n        assertThat(modifications.get(0).getRevision(), is(\"new-revision-456\"));\n    }\n\n    @Test\n    public void shouldGetLatestModification_PluggableSCMMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = MaterialsMother.pluggableSCMMaterial();\n        MaterialInstance materialInstance = pluggableSCMMaterial.createMaterialInstance();\n        when(materialRepository.findMaterialInstance(any(Material.class))).thenReturn(materialInstance);\n        MaterialPollResult materialPollResult = new MaterialPollResult(null, new SCMRevision(\"blah-123\", new Date(), \"user\", \"comment\", null, null));\n        when(scmExtension.getLatestRevision(any(String.class), any(SCMPropertyConfiguration.class), any(Map.class), any(String.class))).thenReturn(materialPollResult);\n\n        List<Modification> modifications = materialService.latestModification(pluggableSCMMaterial, new File(\"/tmp/flyweight\"), null);\n\n        assertThat(modifications.get(0).getRevision(), is(\"blah-123\"));\n    }\n\n    @Test\n    public void shouldGetModificationSince_PluggableSCMMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = MaterialsMother.pluggableSCMMaterial();\n        MaterialInstance materialInstance = pluggableSCMMaterial.createMaterialInstance();\n        when(materialRepository.findMaterialInstance(any(Material.class))).thenReturn(materialInstance);\n        MaterialPollResult materialPollResult = new MaterialPollResult(null, asList(new SCMRevision(\"new-revision-456\", new Date(), \"user\", \"comment\", null, null)));\n        when(scmExtension.latestModificationSince(any(String.class), any(SCMPropertyConfiguration.class), any(Map.class), any(String.class),\n                any(SCMRevision.class))).thenReturn(materialPollResult);\n\n        PluggableSCMMaterialRevision previouslyKnownRevision = new PluggableSCMMaterialRevision(\"revision-124\", new Date());\n        List<Modification> modifications = materialService.modificationsSince(pluggableSCMMaterial, new File(\"/tmp/flyweight\"), previouslyKnownRevision, null);\n\n        assertThat(modifications.get(0).getRevision(), is(\"new-revision-456\"));\n    }\n\n    @Test\n    public void shouldDelegateToMaterialRepository_getTotalModificationsFor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        when(materialRepository.getTotalModificationsFor(gitMaterialInstance)).thenReturn(1L);\n\n        Long totalCount = materialService.getTotalModificationsFor(materialConfig);\n\n        assertThat(totalCount, is(1L));\n    }\n\n    @Test\n    public void shouldDelegateToMaterialRepository_getModificationsFor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Pagination pagination = Pagination.pageStartingAt(0, 10, 10);\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment\", \"email\", new Date(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        when(materialRepository.getModificationsFor(gitMaterialInstance, pagination)).thenReturn(modifications);\n\n        Modifications gotModifications = materialService.getModificationsFor(materialConfig, pagination);\n\n        assertThat(gotModifications, is(modifications));\n    }\n\n    @Test\n    public void shouldGetLatestModificationWithMaterial() {\n        MaterialInstance instance = MaterialsMother.gitMaterial(\"http://example.com/gocd.git\").createMaterialInstance();\n        Modification modification = ModificationsMother.withModifiedFileWhoseNameLengthIsOneK();\n        modification.setMaterialInstance(instance);\n        ArrayList<Modification> mods = new ArrayList<>();\n        mods.add(modification);\n\n        when(materialRepository.getLatestModificationForEachMaterial()).thenReturn(mods);\n\n        Map<String, Modification> modificationsMap = materialService.getLatestModificationForEachMaterial();\n\n        assertEquals(modificationsMap.size(), 1);\n        assertThat(modificationsMap.keySet(), containsInAnyOrder(instance.getFingerprint()));\n        assertEquals(modificationsMap.get(instance.getFingerprint()), modification);\n    }\n\n    @Test\n    public void shouldReturnEmptyMapIfNoMaterialAndModificationFound() {\n        when(materialRepository.getLatestModificationForEachMaterial()).thenReturn(emptyList());\n\n        Map<String, Modification> modificationsMap = materialService.getLatestModificationForEachMaterial();\n\n        assertEquals(modificationsMap.size(), 0);\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchLatestModificationData() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 0, 0, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.Latest), eq(0L), eq(3));\n        assertThat(gotModifications, is(modifications));\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchModificationDataAfterTheGivenCursor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 2, 0, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.After), eq(2L), eq(3));\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchModificationDataBeforeTheGivenCursor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 0, 2, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.Before), eq(2L), eq(3));\n    }\n\n    @Test\n    public void history_shouldThrowIfTheAfterCursorIsInvalid() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        assertThatCode(() -> materialService.getModificationsFor(materialConfig, \"\", -10, 0, 3))\n                .isInstanceOf(BadRequestException.class)\n                .hasMessage(\"The query parameter 'after', if specified, must be a positive integer.\");\n\n        verify(materialRepository).findMaterialInstance(materialConfig);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    @Test\n    public void history_shouldThrowIfTheBeforeCursorIsInvalid() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        assertThatCode(() -> materialService.getModificationsFor(materialConfig, \"\", 0, -10, 3))\n                .isInstanceOf(BadRequestException.class)\n                .hasMessage(\"The query parameter 'before', if specified, must be a positive integer.\");\n\n        verify(materialRepository).findMaterialInstance(materialConfig);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    @Test\n    public void shouldCallDaoToFetchLatestAndOlderModification() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        PipelineRunIdInfo value = new PipelineRunIdInfo(1, 2);\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.getOldestAndLatestModificationId(anyLong(), anyString())).thenReturn(value);\n\n        PipelineRunIdInfo info = materialService.getLatestAndOldestModification(materialConfig, \"\");\n\n        verify(materialRepository).getOldestAndLatestModificationId(anyLong(), eq(\"\"));\n        assertThat(info, is(value));\n    }\n\n    @Test\n    public void shouldReturnNullIfNoInstanceIsPresent() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(null);\n\n        PipelineRunIdInfo info = materialService.getLatestAndOldestModification(materialConfig, \"\");\n\n        verify(materialRepository, never()).getOldestAndLatestModificationId(anyLong(), anyString());\n        assertThat(info, is(nullValue()));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchLatestMatchingMods() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 0, 0, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.Latest), eq(0L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchMatchingModsAfterCursor() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 3, 0, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.After), eq(3L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchMatchingModsBeforeCursor() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 0, 3, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.Before), eq(3L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldReturnNullIfMaterialIsNotPresent() {\n        GitMaterialConfig material = git(\"http://test.com\");\n\n        when(materialRepository.findMaterialInstance(material)).thenReturn(null);\n\n        List<Modification> result = materialService.getModificationsFor(material, \"comment\", 0, 0, 10);\n\n        assertThat(result, is(nullValue()));\n        verify(materialRepository).findMaterialInstance(material);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    private void assertHasModification(MaterialRevisions materialRevisions, boolean b) {\n        HgMaterial hgMaterial = new HgMaterial(\"foo.com\", null);\n        when(materialRepository.findLatestModification(hgMaterial)).thenReturn(materialRevisions);\n        assertThat(materialService.hasModificationFor(hgMaterial), is(b));\n    }\n\n    private static class RequestDataPoints<T extends Material> {\n        final T material;\n        final Class klass;\n\n        public RequestDataPoints(T material, Class klass) {\n            this.material = material;\n            this.klass = klass;\n        }\n    }\n\n    @Test\n    public void latestModification_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.latestModification(pluggableSCMMaterial, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n\n    @Test\n    public void modificationsSince_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.modificationsSince(pluggableSCMMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n\n    @Test\n    public void checkout_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.checkout(pluggableSCMMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.tfs;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.server.cache.GoCache;\nimport com.thoughtworks.go.server.dao.DatabaseAccessHelper;\nimport com.thoughtworks.go.server.persistence.MaterialRepository;\nimport com.thoughtworks.go.util.GoConfigFileHelper;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\n        \"classpath:/applicationContext-global.xml\",\n        \"classpath:/applicationContext-dataLocalAccess.xml\",\n        \"classpath:/testPropertyConfigurer.xml\",\n        \"classpath:/spring-all-servlet.xml\",\n})\npublic class TfsMaterialPersistenceTest {\n    @Autowired private DatabaseAccessHelper dbHelper;\n    @Autowired private MaterialRepository materialRepository;\n    @Autowired private GoCache goCache;\n\n    private GoConfigFileHelper configHelper = new GoConfigFileHelper();\n\n    @Before\n    public void setUp() throws Exception {\n        goCache.clear();\n        configHelper.onSetUp();\n        dbHelper.onSetUp();\n    }\n\n    @After\n    public void teardown() throws Exception {\n        dbHelper.onTearDown();\n        configHelper.onTearDown();\n    }\n\n    @Test\n    public void shouldBeAbleToConvertAMaterialInstanceObjectToTfsMaterialObject() {\n        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"password\", \"/dev/null\");\n        tfsCfg.setFolder(\"folder\");\n        tfsCfg.setName(new CaseInsensitiveString(\"materialName\"));\n        MaterialInstance tfsInstance = materialRepository.findOrCreateFrom(tfsCfg);\n\n        Material material = tfsInstance.toOldMaterial(\"materialName\", \"folder\", \"password\");\n        assertThat(material, is(tfsCfg));\n    }\n\n    @Test\n    public void shouldFindOldMaterial() {\n        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n        MaterialInstance tfsInstance1 = materialRepository.findOrCreateFrom(tfsCfg);\n        goCache.clear();\n        MaterialInstance tfsInstance2 = materialRepository.findOrCreateFrom(tfsCfg);\n\n        assertThat(tfsInstance1, is(tfsInstance2));\n    }\n\n    @Test\n    public void shouldSaveMaterialInstance() throws Exception {\n        TfsMaterial tfsCfg = new TfsMaterial(new GoCipher(), new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n        MaterialInstance materialInstance = materialRepository.findOrCreateFrom(tfsCfg);\n        assertThat(materialRepository.findMaterialInstance(tfsCfg), is(materialInstance));\n    }\n\n}\n"], "fixing_code": ["/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.servermaintenancemode.representers\n\nimport com.thoughtworks.go.helper.JobInstanceMother\nimport com.thoughtworks.go.helper.MaterialsMother\nimport com.thoughtworks.go.server.domain.ServerMaintenanceMode\nimport com.thoughtworks.go.server.service.MaintenanceModeService\nimport com.thoughtworks.go.util.SystemEnvironment\nimport com.thoughtworks.go.util.TimeProvider\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.mockito.Mock\n\nimport java.sql.Timestamp\n\nimport static com.thoughtworks.go.CurrentGoCDVersion.apiDocsUrl\nimport static com.thoughtworks.go.api.base.JsonOutputWriter.jsonDate\nimport static com.thoughtworks.go.api.base.JsonUtils.toObjectString\nimport static net.javacrumbs.jsonunit.fluent.JsonFluentAssert.assertThatJson\nimport static org.mockito.Mockito.when\nimport static org.mockito.MockitoAnnotations.initMocks\n\nclass MaintenanceModeInfoRepresenterTest {\n  @BeforeEach\n  void setUp() {\n    initMocks(this)\n  }\n\n  @Mock\n  TimeProvider timeProvider\n\n  @Mock\n  SystemEnvironment systemEnvironment\n\n  @Test\n  void \"should represent maintenance mode info\"() {\n    def maintenanceModeService = new MaintenanceModeService(timeProvider, systemEnvironment)\n\n    def gitMaterial = MaterialsMother.gitMaterial(\"foo/bar\")\n    def hgMaterial = MaterialsMother.hgMaterial()\n    def svnMaterial = MaterialsMother.svnMaterial()\n\n    def gitMaterialMDUStartTime = 10000000l\n    def hgMaterialMDUStartTime = 20000000l\n    def svnMaterialMDUStartTime = 30000000l\n\n    when(timeProvider.currentTimeMillis())\n      .thenReturn(gitMaterialMDUStartTime)\n      .thenReturn(hgMaterialMDUStartTime)\n      .thenReturn(svnMaterialMDUStartTime)\n\n    maintenanceModeService.update(new ServerMaintenanceMode(true, \"admin\", new Date()))\n\n    maintenanceModeService.mduStartedForMaterial(gitMaterial)\n    maintenanceModeService.mduStartedForMaterial(hgMaterial)\n    maintenanceModeService.mduStartedForMaterial(svnMaterial)\n\n    def runningMDUs = maintenanceModeService.getRunningMDUs()\n    def scheduled = JobInstanceMother.scheduled(\"up42_job_1\")\n    def building = JobInstanceMother.building(\"up42_job_2\")\n\n    def buildingJobs = Arrays.asList(building)\n    def scheduledJobs = Arrays.asList(scheduled)\n\n    def actualJson = toObjectString({\n      MaintenanceModeInfoRepresenter.toJSON(it, maintenanceModeService.get(), true, runningMDUs, buildingJobs, scheduledJobs)\n    })\n\n    def expectedJson = [\n      _links         : [\n        self: [href: 'http://test.host/go/api/admin/maintenance_mode/info'],\n        doc : [href: apiDocsUrl('#maintenance-mode-info')]\n      ],\n      \"is_maintenance_mode\": true,\n      \"metadata\"     : [\n        \"updated_by\": maintenanceModeService.get().updatedBy(),\n        \"updated_on\": jsonDate(maintenanceModeService.get().updatedOn())\n      ],\n      \"attributes\"   : [\n        \"has_running_systems\": false,\n        \"running_systems\"      : [\n          \"material_update_in_progress\": [\n            [\n              \"type\"          : \"git\",\n              \"attributes\"    : [\n                \"url\"             : \"foo/bar\",\n                \"destination\"     : null,\n                \"filter\"          : null,\n                \"invert_filter\"   : false,\n                \"name\"            : null,\n                \"auto_update\"     : true,\n                \"branch\"          : \"master\",\n                \"submodule_folder\": null,\n                \"shallow_clone\"   : false\n              ],\n              \"mdu_start_time\": \"1970-01-01T02:46:40Z\"\n            ],\n            [\n              \"type\"          : \"hg\",\n              \"attributes\"    : [\n                \"url\"          : \"hg-url\",\n                \"destination\"  : null,\n                \"filter\"       : null,\n                \"invert_filter\": false,\n                \"name\"         : null,\n                \"auto_update\"  : true\n              ],\n              \"mdu_start_time\": \"1970-01-01T05:33:20Z\"\n            ],\n            [\n              \"type\"          : \"svn\",\n              \"attributes\"    : [\n                \"url\"               : \"url\",\n                \"destination\"       : \"svnDir\",\n                \"filter\"            : [\n                  \"ignore\": [\"*.doc\"]\n                ],\n                \"invert_filter\"     : false,\n                \"name\"              : null,\n                \"auto_update\"       : true,\n                \"check_externals\"   : true,\n                \"username\"          : \"user\",\n                \"encrypted_password\": svnMaterial.config().getEncryptedPassword()\n              ],\n              \"mdu_start_time\": \"1970-01-01T08:20:00Z\"\n            ]\n          ],\n          building_jobs                : [\n            [\n              pipeline_name   : building.pipelineName,\n              pipeline_counter: building.pipelineCounter,\n              stage_name      : building.stageName,\n              stage_counter   : building.stageCounter,\n              name            : building.name,\n              state           : building.state,\n              scheduled_date  : jsonDate(new Timestamp(building.getScheduledDate().getTime())),\n              agent_uuid      : building.getAgentUuid()\n            ]\n          ],\n          scheduled_jobs               : [\n            [\n              pipeline_name   : scheduled.pipelineName,\n              pipeline_counter: scheduled.pipelineCounter,\n              stage_name      : scheduled.stageName,\n              stage_counter   : scheduled.stageCounter,\n              name            : scheduled.name,\n              state           : scheduled.state,\n              scheduled_date  : jsonDate(new Timestamp(scheduled.getScheduledDate().getTime())),\n              agent_uuid      : scheduled.getAgentUuid()\n            ]\n          ]\n        ]\n      ]\n    ]\n\n    assertThatJson(actualJson).isEqualTo(expectedJson)\n  }\n\n  @Test\n  void 'should not add attributes if server is not in maintenance mode'() {\n    def maintenanceModeService = new MaintenanceModeService(timeProvider, systemEnvironment)\n\n    def actualJson = toObjectString({\n      MaintenanceModeInfoRepresenter.toJSON(it, maintenanceModeService.get(), false, null, null, null)\n    })\n\n    def expectedJson = [\n      _links         : [\n        self: [href: 'http://test.host/go/api/admin/maintenance_mode/info'],\n        doc : [href: apiDocsUrl('#maintenance-mode-info')]\n      ],\n      \"is_maintenance_mode\": false,\n      \"metadata\"     : [\n        \"updated_by\": maintenanceModeService.get().updatedBy(),\n        \"updated_on\": jsonDate(maintenanceModeService.get().updatedOn())\n      ]\n    ]\n\n    assertThatJson(actualJson).isEqualTo(expectedJson)\n  }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.perforce;\n\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.Modification;\nimport com.thoughtworks.go.domain.materials.perforce.P4Client;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.helper.P4TestRepo;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class P4MaterialTest extends P4MaterialTestBase {\n\n    @Override\n    protected P4TestRepo createTestRepo() throws Exception {\n        P4TestRepo repo = P4TestRepo.createP4TestRepo(temporaryFolder, clientFolder);\n        repo.onSetup();\n        return repo;\n    }\n\n    @Test\n    void shouldAddServerSideEnvironmentVariablesClientNameEnvironmentVariable() throws IOException {\n        File p4_working_dir = temporaryFolder.newFolder();\n\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\", \"user\");\n        p4.setPassword(\"loser\");\n        EnvironmentVariableContext envVarCtx;\n\n        envVarCtx = new EnvironmentVariableContext();\n        p4.populateEnvironmentContext(envVarCtx, new MaterialRevision(p4, new Modification(\"loser\", \"loserish commit\", \"loser@boozer.com\", new Date(), \"123\")), p4_working_dir);\n        assertThat(envVarCtx.getProperty(\"GO_REVISION\")).isEqualTo(\"123\");\n        assertThat(envVarCtx.getProperty(\"GO_TO_REVISION\")).isEqualTo(\"123\");\n        assertThat(envVarCtx.getProperty(\"GO_FROM_REVISION\")).isEqualTo(\"123\");\n    }\n\n    @Test\n    void shouldAddClientNameEnvironmentVariable() throws IOException {\n        File p4_working_dir = temporaryFolder.newFolder();\n\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\", \"user\");\n        p4.setPassword(\"loser\");\n        EnvironmentVariableContext envVarCtx;\n\n        envVarCtx = new EnvironmentVariableContext();\n        p4.populateAgentSideEnvironmentContext(envVarCtx, p4_working_dir);\n        assertThat(envVarCtx.getProperty(\"GO_P4_CLIENT\")).isEqualTo(p4.clientName(p4_working_dir));\n    }\n\n    @Test\n    void shouldGenerateTheSameP4ClientValueForCommandAndEnvironment() throws Exception {\n\n        P4Material p4Material = new P4Material(\"server:10\", \"out-of-the-window\");\n        ReflectionUtil.setField(p4Material, \"folder\", \"crapy_dir\");\n\n        P4Client p4Client = p4Material._p4(tempDir, new InMemoryStreamConsumer(), false);\n\n        assertThat(p4Client).isNotNull();\n        String client = (String) ReflectionUtil.getField(p4Client, \"p4ClientName\");\n        assertThat(client).isEqualTo(p4Material.clientName(tempDir));\n    }\n\n    @Test\n    void shouldNotDisplayPasswordInStringRepresentation() {\n        P4Material p4 = new P4Material(\"host:10\", \"beautiful\");\n        p4.setUsername(\"user\");\n        p4.setPassword(\"loser\");\n        assertThat(p4.toString()).doesNotContain(\"loser\");\n    }\n\n    @Test\n    void shouldReturnEqualsEvenIfPasswordsAreDifferent() throws Exception {\n        P4Material material = MaterialsMother.p4Material();\n        material.setPassword(\"password\");\n\n        P4Material other = MaterialsMother.p4Material();\n        other.setPassword(\"password1\");\n        assertThat(material).isEqualTo(other);\n    }\n\n    @Test\n    void shouldNotConsiderPasswordForEqualityCheck() {\n        P4Material one = new P4Material(\"host:123\", \"through_window\");\n        one.setPassword(\"password\");\n        P4Material two = new P4Material(\"host:123\", \"through_window\");\n        two.setPassword(\"wordpass\");\n\n        assertThat(one).isEqualTo(two);\n        assertThat(one.hashCode()).isEqualTo(two.hashCode());\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        P4Material material = new P4Material(\"host:123\", \"through_window\", \"user\", \"folder\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: host:123, View: through_window, Username: user\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n        P4Material material = new P4Material(\"blah.com\", \"view\");\n        material.setPassword(\"password\");\n\n        P4MaterialConfig config = (P4MaterialConfig) material.config();\n\n        assertThat(config.getPassword()).isEqualTo(\"password\");\n        assertThat(config.getEncryptedPassword()).isNotNull();\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\");\n        material.setPassword(\"password\");\n        material.setUseTickets(true);\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"perforce\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"perforce-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"host:1234\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"view\")).isEqualTo(\"view\");\n        assertThat(configuration.get(\"use-tickets\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\");\n        material.setPassword(\"password\");\n        material.setUseTickets(true);\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"perforce\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"perforce-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"host:1234\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"view\")).isEqualTo(\"view\");\n        assertThat(configuration.get(\"use-tickets\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldSetGO_P4_CLIENT_toTheClientName() {\n        P4Material material = new P4Material(\"host:1234\", \"view\", \"username\", \"destination\");\n        EnvironmentVariableContext environmentVariableContext = new EnvironmentVariableContext();\n        File agentWorkingDirectory = new File(\"pipelines/pipeline-name\");\n        material.populateAgentSideEnvironmentContext(environmentVariableContext, agentWorkingDirectory);\n        assertThat(environmentVariableContext.getProperty(\"GO_P4_CLIENT_DESTINATION\")).isEqualTo(material.clientName(material.workingdir(agentWorkingDirectory)));\n    }\n\n    @Nested\n    class hasSecretParams {\n        @Test\n        void shouldBeTrueIfMaterialUrlHasSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_password]}}\");\n\n            assertThat(p4Material.hasSecretParams()).isTrue();\n        }\n\n        @Test\n        void shouldBeFalseInMaterialUrlDoesNotHaveSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"foo\");\n\n            assertThat(p4Material.hasSecretParams()).isFalse();\n        }\n    }\n\n    @Nested\n    class getSecretParams {\n        @Test\n        void shouldReturnAListOfSecretParams() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_password]}}\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_password\"));\n        }\n\n        @Test\n        void shouldBeAnEmptyListInAbsenceOfSecretParamsinMaterialUrl() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"pass\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(0);\n        }\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"badger\");\n\n            assertThat(p4Material.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            p4Material.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(p4Material.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            assertThatCode(p4Material::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            P4Material p4Material = new P4Material(\"host:10\", \"beautiful\");\n            p4Material.setPassword(\"{{SECRET:[secret_config_id][lookup_pass]}}\");\n\n            assertThat(p4Material.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.config.materials.AbstractMaterial;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.Modification;\nimport com.thoughtworks.go.domain.materials.TestSubprocessExecutionContext;\nimport com.thoughtworks.go.domain.materials.mercurial.StringRevision;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommand;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.TemporaryFolder;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.config.materials.AbstractMaterial.SQL_CRITERIA_TYPE;\nimport static com.thoughtworks.go.domain.materials.ValidationBean.valid;\nimport static com.thoughtworks.go.util.DataStructureUtils.m;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@EnableRuleMigrationSupport\npublic class TfsMaterialTest {\n    @Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n    private TfsMaterial tfsMaterialFirstCollectionFirstProject;\n    private TfsMaterial tfsMaterialFirstCollectionSecondProject;\n    private final String DOMAIN = \"domain\";\n    private final String USERNAME = \"username\";\n    private final String PASSWORD = \"password\";\n    private final String TFS_FIRST_COLLECTION_URL = \"http://some.tfs.repo.local\";\n    private final String TFS_FIRST_PROJECT = \"$/first_project\";\n    private final String TFS_SECOND_PROJECT = \"$/second_project\";\n\n    @BeforeEach\n    void setUp() {\n        GoCipher goCipher = mock(GoCipher.class);\n        tfsMaterialFirstCollectionFirstProject = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_FIRST_PROJECT);\n        tfsMaterialFirstCollectionSecondProject = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, DOMAIN, PASSWORD, TFS_SECOND_PROJECT);\n    }\n\n    @Test\n    void shouldShowLatestModification() throws IOException {\n        File dir = temporaryFolder.newFolder(\"tfs-dir\");\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionSecondProject);\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        when(tfsCommand.latestModification(dir)).thenReturn(new ArrayList<>());\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n\n        List<Modification> actual = spy.latestModification(dir, execCtx);\n\n        assertThat(actual).isEqualTo(new ArrayList<Modification>());\n        verify(tfsCommand).latestModification(dir);\n    }\n\n    @Test\n    void shouldLoadAllModificationsSinceAGivenRevision() throws IOException {\n        File dir = temporaryFolder.newFolder(\"tfs-dir\");\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionFirstProject);\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        when(tfsCommand.modificationsSince(dir, new StringRevision(\"5\"))).thenReturn(new ArrayList<>());\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n\n        List<Modification> actual = spy.modificationsSince(dir, new StringRevision(\"5\"), execCtx);\n\n        assertThat(actual).isEqualTo(new ArrayList<Modification>());\n        verify(tfsCommand).modificationsSince(dir, new StringRevision(\"5\"));\n    }\n\n    @Test\n    void shouldInjectAllRelevantAttributesInSqlCriteriaMap() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getSqlCriteria()).isEqualTo(m(\n                SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                \"url\", \"my-url\",\n                \"username\", \"loser\",\n                \"projectPath\", \"/dev/null\", \"domain\", DOMAIN));\n    }\n\n    @Test\n    void shouldInjectAllRelevantAttributesInAttributeMap() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"my-url\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getAttributesForXml()).isEqualTo(m(\n                AbstractMaterial.SQL_CRITERIA_TYPE, (Object) \"TfsMaterial\",\n                \"url\", \"my-url\",\n                \"username\", \"loser\",\n                \"projectPath\", \"/dev/null\", \"domain\", DOMAIN));\n    }\n\n    @Test\n    void shouldReturnUrlForCommandLine_asUrl_IfSet() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n        );\n        assertThat(tfsMaterial.getUrl()).isEqualTo(\"http://foo:bar@my-url.com\");\n\n        tfsMaterial = new TfsMaterial(null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getUrl()).isNull();\n    }\n\n    @Test\n    void shouldReturnUrlForCommandLine_asLocation_IfSet() {\n        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"http://foo:bar@my-url.com\"), \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\"\n        );\n        assertThat(tfsMaterial.getLocation()).isEqualTo(\"http://foo:******@my-url.com\");\n\n        tfsMaterial = new TfsMaterial(null, \"loser\", DOMAIN, \"foo_bar_baz\", \"/dev/null\");\n        assertThat(tfsMaterial.getLocation()).isNull();\n    }\n\n    @Test\n    void shouldNotDecryptPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        TfsMaterial material = new TfsMaterial(new UrlArgument(\"/foo\"), \"username\", DOMAIN, \"password\", \"\");\n        material.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        material.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(material.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldBePasswordAware() {\n        assertThat(PasswordAwareMaterial.class.isAssignableFrom(TfsMaterial.class)).isTrue();\n    }\n\n    @Test\n    void shouldBePasswordEncrypter() {\n        assertThat(PasswordEncrypter.class.isAssignableFrom(TfsMaterial.class)).isTrue();\n    }\n\n    @Test\n    void shouldKnowItsType() {\n        assertThat(tfsMaterialFirstCollectionFirstProject.getTypeForDisplay()).isEqualTo(\"Tfs\");\n    }\n\n    @Test\n    void shouldCheckConnection() {\n        TestSubprocessExecutionContext execCtx = new TestSubprocessExecutionContext();\n        TfsCommand tfsCommand = mock(TfsCommand.class);\n        doNothing().when(tfsCommand).checkConnection();\n        TfsMaterial spy = spy(tfsMaterialFirstCollectionFirstProject);\n        doReturn(tfsCommand).when(spy).tfs(execCtx);\n        assertThat(spy.checkConnection(execCtx)).isEqualTo(valid());\n        verify(tfsCommand, times(1)).checkConnection();\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: http://url/, Username: user, Domain: domain, ProjectPath: $project/path/\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() throws Exception {\n        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://url/\"), \"user\", \"domain\", \"password\", \"$project/path/\");\n\n        TfsMaterialConfig config = (TfsMaterialConfig) material.config();\n\n        assertThat(config.getPassword()).isEqualTo(\"password\");\n        assertThat(config.getEncryptedPassword()).isNotNull();\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"tfs-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:password@tfsrepo.com\");\n        assertThat(configuration.get(\"domain\")).isEqualTo(\"domain\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"project-path\")).isEqualTo(\"$project/path/\");\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        TfsMaterial material = new TfsMaterial(new UrlArgument(\"http://username:password@tfsrepo.com\"), \"username\", \"domain\", \"password\", \"$project/path/\");\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"tfs\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"tfs-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:******@tfsrepo.com\");\n        assertThat(configuration.get(\"domain\")).isEqualTo(\"domain\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"username\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"project-path\")).isEqualTo(\"$project/path/\");\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"badger\", null);\n\n            assertThat(tfsMaterial.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            tfsMaterial.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(tfsMaterial.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            assertThatCode(tfsMaterial::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(\"some-url\"), null, null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", null);\n\n            assertThat(tfsMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n\n    @Test\n    void populateEnvContextShouldSetMaterialEnvVars() {\n        EnvironmentVariableContext ctx = new EnvironmentVariableContext();\n        final ArrayList<Modification> modifications = new ArrayList<>();\n\n        modifications.add(new Modification(\"user2\", \"comment2\", \"email2\", new Date(), \"24\"));\n        modifications.add(new Modification(\"user1\", \"comment1\", \"email1\", new Date(), \"23\"));\n\n        MaterialRevision materialRevision = new MaterialRevision(tfsMaterialFirstCollectionFirstProject, modifications);\n        assertThat(ctx.getProperty(ScmMaterial.GO_MATERIAL_URL)).isNull();\n        assertThat(ctx.getProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isNull();\n\n        tfsMaterialFirstCollectionFirstProject.populateEnvironmentContext(ctx, materialRevision, new File(\".\"));\n\n        assertThat(ctx.getProperty(ScmMaterial.GO_MATERIAL_URL)).isEqualTo(TFS_FIRST_COLLECTION_URL);\n        assertThat(ctx.getProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isEqualTo(DOMAIN);\n    }\n\n    @Test\n    void shouldOnlyPopulateDomainEnvVarIfPresent() {\n        TfsMaterial material = new TfsMaterial(new UrlArgument(TFS_FIRST_COLLECTION_URL), USERNAME, \"\", PASSWORD, TFS_FIRST_PROJECT);\n        EnvironmentVariableContext ctx = new EnvironmentVariableContext();\n        final ArrayList<Modification> modifications = new ArrayList<>();\n\n        modifications.add(new Modification(\"user2\", \"comment2\", \"email2\", new Date(), \"24\"));\n        modifications.add(new Modification(\"user1\", \"comment1\", \"email1\", new Date(), \"23\"));\n\n        MaterialRevision materialRevision = new MaterialRevision(material, modifications);\n        material.populateEnvironmentContext(ctx, materialRevision, new File(\".\"));\n\n        assertThat(ctx.hasProperty(ScmMaterial.GO_MATERIAL_URL)).isTrue();\n        assertThat(ctx.hasProperty(TfsMaterial.GO_MATERIAL_DOMAIN)).isFalse();\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials;\n\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * ChrisS and ChrisT :\n * Note iBatis requires a concrete class here for the XSD but it does not actually use it.\n * Dummy material is just used to help iBatis and should not be used in real code.\n */\npublic final class DummyMaterial extends ScmMaterial {\n    private String url;\n\n    public DummyMaterial() {\n        super(\"DummyMaterial\");\n    }\n\n    @Override\n    public String getUrl() {\n        return url;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return \"Dummy\";\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrl();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Dummy\";\n    }\n\n    @Override\n    public Class getInstanceType() {\n        throw new UnsupportedOperationException(\"dummy material doens't have a type\");\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public void checkout(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        throw unsupported();\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        throw unsupported();\n    }\n\n    private UnsupportedOperationException unsupported() {\n        return new UnsupportedOperationException(\"This class is only for iBatis and should not be used.\");\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        throw unsupported();\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        throw unsupported();\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.svn;\n\nimport com.thoughtworks.go.config.SecretParam;\nimport com.thoughtworks.go.config.exceptions.UnresolvedSecretParamException;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.materials.RevisionContext;\nimport com.thoughtworks.go.domain.materials.TestSubprocessExecutionContext;\nimport com.thoughtworks.go.helper.MaterialConfigsMother;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.security.CryptoException;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.JsonValue;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.junit.Rule;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport org.junit.rules.TemporaryFolder;\n\nimport java.io.*;\nimport java.util.Collections;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.util.JsonUtils.from;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@EnableRuleMigrationSupport\npublic class SvnMaterialTest {\n    @Rule\n    public final TemporaryFolder temporaryFolder = new TemporaryFolder();\n\n    private Subversion subversion;\n\n    private SvnMaterial svnMaterial;\n    private static final String URL = \"svn://something\";\n    private SubversionRevision revision = new SubversionRevision(\"1\");\n    private InMemoryStreamConsumer outputStreamConsumer = inMemoryConsumer();\n\n    @BeforeEach\n    void setUp() throws IOException {\n        temporaryFolder.create();\n        subversion = mock(Subversion.class);\n\n        when(subversion.getUrl()).thenReturn(new UrlArgument(URL));\n        when(subversion.getPassword()).thenReturn(\"\");\n        when(subversion.getUserName()).thenReturn(\"\");\n        when(subversion.isCheckExternals()).thenReturn(false);\n\n        svnMaterial = SvnMaterial.createSvnMaterialWithMock(subversion);\n        svnMaterial.setUrl(URL);\n    }\n\n    @AfterEach\n    void tearDown() {\n        temporaryFolder.delete();\n    }\n\n    private File createSvnWorkingCopy(boolean withDotSvnFolder) throws IOException {\n        File folder = temporaryFolder.newFolder(\"testSvnWorkingCopy\");\n        if (withDotSvnFolder) {\n            File dotSvnFolder = new File(folder, \".svn\");\n            dotSvnFolder.mkdir();\n        }\n        return folder;\n    }\n\n    @Test\n    void shouldNotDisplayPasswordInStringRepresentation() {\n        SvnMaterial svn = new SvnMaterial(\"my-url\", \"user\", \"loser\", false);\n        assertThat(svn.toString()).doesNotContain(\"loser\");\n\n        svn = new SvnMaterial(\"https://user:loser@foo.bar/baz?quux=bang\", \"user\", \"loser\", false);\n        assertThat(svn.toString()).doesNotContain(\"loser\");\n    }\n\n    @Test\n    void shouldCheckoutWhenFolderDoesNotExist() {\n        final File workingCopy = new File(\"xyz\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldLogRepoInfoToConsoleOutWithOutFolder() throws Exception {\n        final File workingCopy = new File(\"xyz\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n        String stdout = outputStreamConsumer.getStdOut();\n        assertThat(stdout).contains(String.format(\"Start updating %s at revision %s from %s\", \"files\", revision.getRevision(),\n                svnMaterial.getUrl()));\n\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldCheckoutForInvalidSvnWorkingCopy() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(false);\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        assertThat(workingCopy.exists()).isFalse();\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    private void updateMaterial(SvnMaterial svnMaterial, SubversionRevision revision, File workingCopy) {\n        svnMaterial.updateTo(outputStreamConsumer, workingCopy, new RevisionContext(revision), new TestSubprocessExecutionContext());\n    }\n\n    @Test\n    void shouldCheckoutIfSvnRepositoryChanged() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(true);\n\n        when(subversion.workingRepositoryUrl(workingCopy)).thenReturn(\"new url\");\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n        assertThat(workingCopy.exists()).isFalse();\n        verify(subversion).checkoutTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldUpdateForValidSvnWorkingCopy() throws IOException {\n        final File workingCopy = createSvnWorkingCopy(true);\n\n        when(subversion.workingRepositoryUrl(workingCopy)).thenReturn(URL);\n\n        updateMaterial(svnMaterial, revision, workingCopy);\n\n        verify(subversion).cleanupAndRevert(outputStreamConsumer, workingCopy);\n        verify(subversion).updateTo(outputStreamConsumer, workingCopy, revision);\n    }\n\n    @Test\n    void shouldBeEqualWhenUrlSameForSvnMaterial() {\n        final Material material1 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        final Material material = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        assertComplementaryEquals(material1, material, true);\n\n    }\n\n    @Test\n    void shouldNotBeEqualWhenUrlDifferent() {\n        final Material material1 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        final Material material2 = MaterialsMother.defaultSvnMaterialsWithUrl(\"url2\").get(0);\n        assertComplementaryEquals(material1, material2, false);\n    }\n\n    @Test\n    void shouldNotBeEqualWhenTypeDifferent() {\n        final Material hgMaterial = MaterialsMother.hgMaterials(\"url1\", \"hgdir\").get(0);\n        final Material nonHgMaterial = MaterialsMother.defaultSvnMaterialsWithUrl(\"url1\").get(0);\n        assertComplementaryEquals(hgMaterial, nonHgMaterial, false);\n    }\n\n    @Test\n    void shouldNotBeEqualWhenAlternateFolderDifferent() {\n        final SvnMaterial material1 = MaterialsMother.svnMaterial(\"url1\");\n        final SvnMaterial material2 = MaterialsMother.svnMaterial(\"url1\");\n\n        assertComplementaryEquals(material1, material2, true);\n\n        material1.setFolder(\"foo\");\n        material2.setFolder(null);\n        assertComplementaryEquals(material1, material2, false);\n\n        material1.setFolder(\"foo\");\n        material2.setFolder(\"bar\");\n        assertComplementaryEquals(material1, material2, false);\n    }\n\n    @Test\n    void shouldSerializeAndDeserializeCorrectly() throws Exception {\n        final SvnMaterial material1 = MaterialsMother.svnMaterial(\"url1\", \"foo\");\n        ByteArrayOutputStream buf = new ByteArrayOutputStream();\n        ObjectOutputStream serialized = new ObjectOutputStream(buf);\n        serialized.writeObject(material1);\n        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buf.toByteArray()));\n        assertThat(in.readObject()).isEqualTo(material1);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenUrlIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"A\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial(\"B\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenUserNameIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\", \"svnDir\", \"userName\", null, false, \"*.txt\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial(\"url\", \"svnDir\", \"userName1\", null, false, \"*.txt\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnEqualsEvenIfPasswordsAreDifferent() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n        material.setPassword(\"password\");\n\n        SvnMaterial other = MaterialsMother.svnMaterial();\n        other.setPassword(\"password1\");\n        assertThat(material).isEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnNotEqualsWhenCheckExternalsIsChanged() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\", \"svnDir\", null, null, true, \"*.txt\");\n        SvnMaterial other = MaterialsMother.svnMaterial(\"url\", \"svnDir\", null, null, false, \"*.txt\");\n        assertThat(material).isNotEqualTo(other);\n    }\n\n    @Test\n    void shouldReturnEqualsWhenEverythingIsSame() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"URL\", \"dummy-folder\", \"userName\", \"password\", true, \"*.doc\");\n        SvnMaterial other = MaterialsMother.svnMaterial(\"URL\", \"dummy-folder\", \"userName\", \"password\", true, \"*.doc\");\n\n        assertThat(other).isEqualTo(material);\n    }\n\n    /* TODO: *SBD* Move this test into SvnMaterialConfig test after mothers are moved. */\n    @Test\n    void shouldReturnEqualsWhenEverythingIsSameForSvnMaterialConfigs() {\n        SvnMaterialConfig svnMaterialConfig = MaterialConfigsMother.svnMaterialConfig();\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.CHECK_EXTERNALS, String.valueOf(true)));\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.USERNAME, \"userName\"));\n        svnMaterialConfig.setPassword(\"password\");\n        svnMaterialConfig.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.URL, \"URL\"));\n\n\n        SvnMaterialConfig other = MaterialConfigsMother.svnMaterialConfig();\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.CHECK_EXTERNALS, String.valueOf(true)));\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.USERNAME, \"userName\"));\n        other.setPassword(\"password\");\n        other.setConfigAttributes(Collections.singletonMap(SvnMaterialConfig.URL, \"URL\"));\n\n        assertThat(other).isEqualTo(svnMaterialConfig);\n    }\n\n    @Test\n    void shouldBeAbleToConvertToJson() {\n        SvnMaterial material = MaterialsMother.svnMaterial(\"url\");\n        Map<String, Object> json = new LinkedHashMap<>();\n        material.toJson(json, revision);\n\n        JsonValue jsonValue = from(json);\n        assertThat(jsonValue.getString(\"scmType\")).isEqualTo(\"Subversion\");\n        assertThat(new File(jsonValue.getString(\"location\"))).isEqualTo(new File(material.getUrl()));\n        assertThat(jsonValue.getString(\"action\")).isEqualTo(\"Modified\");\n    }\n\n    @Test\n    void shouldAddTheForwardSlashAndApplyThePattern() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n\n        assertThat(material.matches(\"/a.doc\", \"a.doc\")).isTrue();\n        assertThat(material.matches(\"a.doc\", \"a.doc\")).isFalse();\n    }\n\n    @Test\n    void shouldApplyThePatternDirectly() {\n        SvnMaterial material = MaterialsMother.svnMaterial();\n\n        assertThat(material.matches(\"/a.doc\", \"/a.doc\")).isTrue();\n    }\n\n    @Test\n    void shouldGenerateSqlCriteriaMapInSpecificOrder() {\n        SvnMaterial material = new SvnMaterial(\"url\", \"username\", \"password\", true);\n        Map<String, Object> map = material.getSqlCriteria();\n        assertThat(map.size()).isEqualTo(4);\n        Iterator<Map.Entry<String, Object>> iter = map.entrySet().iterator();\n        assertThat(iter.next().getKey()).isEqualTo(\"type\");\n        assertThat(iter.next().getKey()).isEqualTo(\"url\");\n        assertThat(iter.next().getKey()).isEqualTo(\"username\");\n        assertThat(iter.next().getKey()).isEqualTo(\"checkExternals\");\n    }\n\n    @Test\n    void shouldGenerateFingerprintBasedOnSqlCriteria() {\n        SvnMaterial one = new SvnMaterial(\"url\", \"username\", \"password\", true);\n        SvnMaterial two = new SvnMaterial(\"url\", \"username\", \"password\", false);\n        assertThat(one.getFingerprint()).isNotEqualTo(two.getFingerprint());\n        assertThat(one.getFingerprint()).isEqualTo(DigestUtils.sha256Hex(\"type=SvnMaterial<|>url=url<|>username=username<|>checkExternals=true\"));\n    }\n\n    @Test\n    void shouldGeneratePipelineUniqueFingerprintBasedOnFingerprintAndDest() {\n        SvnMaterial one = new SvnMaterial(\"url\", \"username\", \"password\", true, \"folder1\");\n        SvnMaterial two = new SvnMaterial(\"url\", \"username\", \"password\", true, \"folder2\");\n        assertThat(one.getPipelineUniqueFingerprint()).isNotEqualTo(two.getFingerprint());\n        assertThat(one.getPipelineUniqueFingerprint()).isEqualTo(DigestUtils.sha256Hex(\"type=SvnMaterial<|>url=url<|>username=username<|>checkExternals=true<|>dest=folder1\"));\n    }\n\n    @Test\n    void shouldNotUsePasswordForEquality() {\n        SvnMaterial svnBoozer = new SvnMaterial(\"foo.com\", \"loser\", \"boozer\", true);\n        SvnMaterial svnZooser = new SvnMaterial(\"foo.com\", \"loser\", \"zooser\", true);\n        assertThat(svnBoozer.hashCode()).isEqualTo(svnZooser.hashCode());\n        assertThat(svnBoozer).isEqualTo(svnZooser);\n    }\n\n    @Test\n    void shouldNotDecryptSvnPasswordIfPasswordIsNotNull() throws Exception {\n        GoCipher mockGoCipher = mock(GoCipher.class);\n        when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");\n        when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");\n\n        SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);\n        material.ensureEncrypted();\n        when(mockGoCipher.encrypt(\"new_password\")).thenReturn(\"new_encrypted\");\n        material.setPassword(\"new_password\");\n        when(mockGoCipher.decrypt(\"new_encrypted\")).thenReturn(\"new_password\");\n\n        assertThat(material.getPassword()).isEqualTo(\"new_password\");\n    }\n\n    @Test\n    void shouldGetLongDescriptionForMaterial() {\n        SvnMaterial material = new SvnMaterial(\"http://url/\", \"user\", \"password\", true, \"folder\");\n        assertThat(material.getLongDescription()).isEqualTo(\"URL: http://url/, Username: user, CheckExternals: true\");\n    }\n\n    @Test\n    void shouldCopyOverPasswordWhenConvertingToConfig() {\n        SvnMaterial material = new SvnMaterial(\"abc\", \"def\", \"ghi\", false);\n        SvnMaterialConfig config = (SvnMaterialConfig) material.config();\n\n        assertThat(config.getEncryptedPassword()).isNotNull();\n        assertThat(config.getPassword()).isEqualTo(\"ghi\");\n    }\n\n    private void assertComplementaryEquals(Object o1, Object o2, boolean value) {\n        assertThat(o1.equals(o2)).isEqualTo(value);\n        assertThat(o2.equals(o1)).isEqualTo(value);\n    }\n\n    @Test\n    void shouldGetAttributesWithSecureFields() {\n        SvnMaterial material = new SvnMaterial(\"http://username:password@svnrepo.com\", \"user\", \"password\", true);\n        Map<String, Object> attributes = material.getAttributes(true);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"svn\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"svn-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:password@svnrepo.com\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"user\");\n        assertThat(configuration.get(\"password\")).isEqualTo(\"password\");\n        assertThat(configuration.get(\"check-externals\")).isEqualTo(true);\n    }\n\n    @Test\n    void shouldGetAttributesWithoutSecureFields() {\n        SvnMaterial material = new SvnMaterial(\"http://username:password@svnrepo.com\", \"user\", \"password\", true);\n        Map<String, Object> attributes = material.getAttributes(false);\n\n        assertThat(attributes.get(\"type\")).isEqualTo(\"svn\");\n        Map<String, Object> configuration = (Map<String, Object>) attributes.get(\"svn-configuration\");\n        assertThat(configuration.get(\"url\")).isEqualTo(\"http://username:******@svnrepo.com\");\n        assertThat(configuration.get(\"username\")).isEqualTo(\"user\");\n        assertThat(configuration.get(\"password\")).isNull();\n        assertThat(configuration.get(\"check-externals\")).isEqualTo(true);\n    }\n\n    @Nested\n    class hasSecretParams {\n        @Test\n        void shouldBeTrueIfPasswordHasSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"{{SECRET:[secret_config_id][lookup_password]}}\", false);\n\n            assertThat(svnMaterial.hasSecretParams()).isTrue();\n        }\n\n        @Test\n        void shouldBeFalseIfPasswordDoesNotHaveSecretParams() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"password\", false);\n\n            assertThat(svnMaterial.hasSecretParams()).isFalse();\n        }\n    }\n\n    @Nested\n    class getSecretParams {\n        @Test\n        void shouldReturnAListOfSecretParams() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\",\n                    \"username\", \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n\n        @Test\n        void shouldBeAnEmptyListInAbsenceOfSecretParamsInMaterialUrlOrPassword() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"http://foo.com\", null, \"pass\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(0);\n        }\n    }\n\n    @Nested\n    class passwordForCommandLine {\n        @Test\n        void shouldReturnPasswordAsConfigured_IfNotDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"badger\", false);\n\n            assertThat(svnMaterial.passwordForCommandLine()).isEqualTo(\"badger\");\n        }\n\n        @Test\n        void shouldReturnAResolvedPassword_IfPasswordDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            svnMaterial.getSecretParams().findFirst(\"lookup_pass\").ifPresent(secretParam -> secretParam.setValue(\"resolved_password\"));\n\n            assertThat(svnMaterial.passwordForCommandLine()).isEqualTo(\"resolved_password\");\n        }\n\n        @Test\n        void shouldErrorOutWhenCalledOnAUnResolvedSecretParam_IfPasswordDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThatCode(svnMaterial::passwordForCommandLine)\n                    .isInstanceOf(UnresolvedSecretParamException.class)\n                    .hasMessageContaining(\"SecretParam 'lookup_pass' is used before it is resolved.\");\n        }\n    }\n\n    @Nested\n    class setPassword {\n        @Test\n        void shouldParsePasswordString_IfDefinedAsSecretParam() {\n            SvnMaterial svnMaterial = new SvnMaterial(\"url\", null, \"{{SECRET:[secret_config_id][lookup_pass]}}\", false);\n\n            assertThat(svnMaterial.getSecretParams())\n                    .hasSize(1)\n                    .contains(new SecretParam(\"secret_config_id\", \"lookup_pass\"));\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.server.service;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.PackageMaterialConfig;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.PluggableSCMMaterialConfig;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\nimport com.thoughtworks.go.config.materials.perforce.P4MaterialConfig;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterialConfig;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.materials.MaterialConfig;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinition;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinitionMother;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepository;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepositoryMother;\nimport com.thoughtworks.go.domain.scm.SCM;\nimport com.thoughtworks.go.domain.scm.SCMMother;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.ReflectionUtil;\nimport com.thoughtworks.go.util.command.HgUrlArgument;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.Test;\nimport org.junit.experimental.theories.DataPoint;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.platform.commons.util.AnnotationUtils;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\nimport org.springframework.core.type.filter.AssignableTypeFilter;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport static com.thoughtworks.go.domain.packagerepository.ConfigurationPropertyMother.create;\nimport static com.thoughtworks.go.helper.FilterMother.filterFor;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.*;\nimport static org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals;\nimport static org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\n@RunWith(Theories.class)\npublic class MagicalMaterialAndMaterialConfigConversionTest {\n    private static PackageRepository packageRepo = PackageRepositoryMother.create(\"repo-id\", \"repo-name\", \"pluginid\", \"version\", new Configuration(create(\"k1\", false, \"v1\")));\n    private static PackageDefinition packageDefinition = PackageDefinitionMother.create(\"id\", \"name1\", new Configuration(create(\"k2\", false, \"v2\")), packageRepo);\n    public static SCM scmConfig = SCMMother.create(\"scm-id\", \"scm-name\", \"plugin-id\", \"1.0\", new Configuration(create(\"k1\", false, \"v1\")));\n\n    private static Map<Class, String[]> fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack = new HashMap<>();\n    private MaterialConfigConverter materialConfigConverter = new MaterialConfigConverter();\n\n    @DataPoint\n    public static MaterialConfig svnMaterialConfig = svn(url(\"svn-url\"), \"user\", \"pass\", true, new GoCipher(), true, filterFor(\"*.txt\"), false, \"folder\", cis(\"name1\"));\n    @DataPoint\n    public static MaterialConfig gitMaterialConfig = git(url(\"git-url\"), null, \"pass\", \"branch\", \"submodule\", true, filterFor(\"*.doc\"), false, \"folder\", cis(\"gitMaterial\"), false);\n    @DataPoint\n    public static MaterialConfig hgMaterialConfig = hg(new HgUrlArgument(\"hg-url\"), null, \"pass\", null, true, filterFor(\"*.png\"), false, \"folder\", cis(\"hgMaterial\"));\n    @DataPoint\n    public static MaterialConfig p4MaterialConfig = p4(\"localhost:9090\", \"user\", \"pass\", true, \"view\", new GoCipher(), cis(\"p4Material\"), true, filterFor(\"*.jpg\"), false, \"folder\");\n    @DataPoint\n    public static MaterialConfig tfsMaterialConfig = tfs(url(\"tfs-url\"), \"user\", \"domain\", \"pass\", \"prj-path\", new GoCipher(), true, filterFor(\"*.txt\"), false, \"folder\", cis(\"tfsMaterial\"));\n    @DataPoint\n    public static MaterialConfig pkgMaterialConfig = new PackageMaterialConfig(cis(\"name\"), \"pkg-id\", packageDefinition);\n    @DataPoint\n    public static MaterialConfig pluggableSCMMaterialConfig = new PluggableSCMMaterialConfig(cis(\"name\"), scmConfig, \"folder\", filterFor(\"*.txt\"), false);\n    @DataPoint\n    public static MaterialConfig dependencyMaterialConfig = new DependencyMaterialConfig(cis(\"name1\"), cis(\"pipeline1\"), cis(\"stage1\"));\n\n    static {\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(GitMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(HgMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(SvnMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(P4MaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(TfsMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(PackageMaterialConfig.class, new String[]{\"filter\", \"packageId\", \"packageDefinition\", \"fingerprint\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(PluggableSCMMaterialConfig.class, new String[]{\"filter\", \"scmId\", \"scmConfig\", \"fingerprint\"});\n        fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.put(DependencyMaterialConfig.class, new String[]{\"filter\", \"secretParamsForPassword\", \"goCipher\"});\n    }\n\n    @Theory\n    public void shouldBeSameObject_WhenConversionIsDoneFromMaterialConfigToMaterialAndBack(MaterialConfig materialConfig) {\n        Material materialFromConfig = materialConfigConverter.toMaterial(materialConfig);\n        MaterialConfig materialConfigConvertedBackFromMaterial = materialFromConfig.config();\n\n        assertThat(materialConfigConvertedBackFromMaterial, is(materialConfig));\n        assertTrue(message(\"Material <-> MaterialConfig conversion failed.\", materialConfigConvertedBackFromMaterial, materialConfig),\n                reflectionEquals(materialConfigConvertedBackFromMaterial, materialConfig, fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.get(materialConfig.getClass())));\n\n        assertThat(materialFromConfig.getFingerprint(), is(materialConfig.getFingerprint()));\n        assertThat(materialFromConfig.isAutoUpdate(), is(materialConfig.isAutoUpdate()));\n        assertThat(materialConfigConvertedBackFromMaterial.getFingerprint(), is(materialConfig.getFingerprint()));\n        assertPasswordIsCorrect(materialConfig);\n        assertPasswordIsCorrect(materialFromConfig);\n        assertPasswordIsCorrect(materialConfigConvertedBackFromMaterial);\n    }\n\n    @Theory\n    public void shouldBeSameObject_WhenConversionIsDoneFromMaterialToMaterialInstanceAndBack(MaterialConfig materialConfig) {\n        Material material = materialConfigConverter.toMaterial(materialConfig);\n\n        MaterialInstance materialInstance = material.createMaterialInstance();\n        Material materialConvertedBackFromInstance = materialInstance.toOldMaterial(materialConfig.getName().toString(), materialConfig.getFolder(), \"pass\");\n\n        assertTrue(message(\"Material <-> MaterialInstance conversion failed.\", material, materialConvertedBackFromInstance),\n                reflectionEquals(material, materialConvertedBackFromInstance, fieldsWhichShouldBeIgnoredWhenSavedInDbAndGotBack.get(materialConfig.getClass())));\n\n        assertThat(materialInstance.getFingerprint(), is(material.getFingerprint()));\n        assertThat(materialConvertedBackFromInstance.getFingerprint(), is(materialInstance.getFingerprint()));\n        assertPasswordIsCorrect(material);\n        assertPasswordIsCorrect(materialConvertedBackFromInstance);\n    }\n\n    @Test\n    public void failIfNewTypeOfMaterialIsNotAddedInTheAboveTest() throws Exception {\n        ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n        provider.addIncludeFilter(new AssignableTypeFilter(MaterialConfig.class));\n        Set<BeanDefinition> candidateComponents = provider.findCandidateComponents(\"com/thoughtworks\");\n        List<Class> reflectionsSubTypesOf = candidateComponents.stream().map(beanDefinition -> beanDefinition.getBeanClassName()).map(s -> {\n            try {\n                return Class.forName(s);\n            } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n            }\n        }).collect(Collectors.toList());\n\n        reflectionsSubTypesOf.removeIf(this::isNotAConcrete_NonTest_MaterialConfigImplementation);\n\n        List<Class> allExpectedMaterialConfigImplementations = allMaterialConfigsWhichAreDataPointsInThisTest();\n\n        assertThatAllMaterialConfigsInCodeAreTestedHere(reflectionsSubTypesOf, allExpectedMaterialConfigImplementations);\n    }\n\n    private void assertThatAllMaterialConfigsInCodeAreTestedHere(List<Class> reflectionsSubTypesOf, List<Class> allExpectedMaterialConfigImplementations) {\n        List<Class> missingImplementations = new ArrayList<>(reflectionsSubTypesOf);\n        missingImplementations.removeAll(allExpectedMaterialConfigImplementations);\n        String message = \"You need to add a DataPoint for these materials in this test: \" + missingImplementations;\n\n        assertThat(message, reflectionsSubTypesOf.size(), is(allExpectedMaterialConfigImplementations.size()));\n        assertThat(message, reflectionsSubTypesOf, hasItems(allExpectedMaterialConfigImplementations.toArray(new Class[allExpectedMaterialConfigImplementations.size()])));\n    }\n\n    private List<Class> allMaterialConfigsWhichAreDataPointsInThisTest() throws Exception {\n        List<Field> fields = AnnotationUtils.findAnnotatedFields(getClass(), DataPoint.class, field -> true);\n\n        ArrayList<Class> allDataPointMaterialConfigClasses = new ArrayList<>();\n        for (Field field : fields) {\n            allDataPointMaterialConfigClasses.add(field.get(this).getClass());\n        }\n        return allDataPointMaterialConfigClasses;\n    }\n\n    private boolean isNotAConcrete_NonTest_MaterialConfigImplementation(Class aClass) {\n        return Pattern.matches(\".*(Test|Dummy).*\", aClass.toString()) || Modifier.isAbstract(aClass.getModifiers());\n    }\n\n    private void assertPasswordIsCorrect(Material material) {\n        if (material instanceof PasswordAwareMaterial) {\n            assertThat(\"Password setting is wrong for: \" + material.getClass(), ((PasswordAwareMaterial) material).getPassword(), is(\"pass\"));\n            assertThat(\"Password setting is wrong for: \" + material.getClass(), ReflectionUtil.getField(material, \"password\"), is(\"pass\"));\n        }\n    }\n\n    private void assertPasswordIsCorrect(MaterialConfig materialConfig) {\n        if (materialConfig instanceof PasswordAwareMaterial) {\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ((PasswordAwareMaterial) materialConfig).getPassword(), is(\"pass\"));\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ReflectionUtil.getField(materialConfig, \"password\"), is(nullValue()));\n            assertThat(\"Password setting is wrong for: \" + materialConfig.getClass(), ReflectionUtil.getField(materialConfig, \"encryptedPassword\"), is(not(nullValue())));\n        }\n    }\n\n    private String message(String prefix, Object expected, Object actual) {\n        return prefix + \"\\nExpected: \" + reflectionToString(expected) + \"\\n  Actual: \" + reflectionToString(actual);\n    }\n\n    private static CaseInsensitiveString cis(String value) {\n        return new CaseInsensitiveString(value);\n    }\n\n    private static UrlArgument url(String url) {\n        return new UrlArgument(url);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterialConfig;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterialConfig;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.perforce.P4MaterialConfig;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterialConfig;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterialConfig;\nimport com.thoughtworks.go.domain.BaseCollection;\nimport com.thoughtworks.go.domain.ConfigVisitor;\nimport com.thoughtworks.go.domain.MaterialRevisions;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.util.ArtifactLogUtil;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\npublic class Materials extends BaseCollection<Material> {\n    private static final int DEFAULT_INTERVAL = 100;\n    private int intervalInSeconds = DEFAULT_INTERVAL;\n\n    public Materials() {\n    }\n\n    public Materials(Material... materials) {\n        super(materials);\n    }\n\n    public Materials(List<Material> materials) {\n        this(DEFAULT_INTERVAL, materials);\n    }\n\n    public Materials(int intervalInSeconds, List<Material> materials) {\n        super(materials);\n        this.intervalInSeconds = intervalInSeconds;\n    }\n\n    public Materials(MaterialConfigs materialConfigs) {\n        for (MaterialConfig materialConfig : materialConfigs) {\n            add(convertToMaterial(materialConfig));\n        }\n    }\n\n    public int interval() {\n        return intervalInSeconds;\n    }\n\n    /**\n     * @deprecated Used only in tests\n     */\n    public MaterialRevisions latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        MaterialRevisions revisions = new MaterialRevisions();\n        for (Material material : this) {\n            List<Modification> modifications = new ArrayList<>();\n            if (material instanceof SvnMaterial) {\n                modifications = ((SvnMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof HgMaterial) {\n                modifications = ((HgMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof GitMaterial) {\n                modifications = ((GitMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof P4Material) {\n                modifications = ((P4Material) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof TfsMaterial) {\n                modifications = ((TfsMaterial) material).latestModification(baseDir, execCtx);\n            }\n            if (material instanceof DependencyMaterial) {\n                modifications = ((DependencyMaterial) material).latestModification(baseDir, execCtx);\n            }\n            revisions.addRevision(material, modifications);\n        }\n        return revisions;\n    }\n\n    public void cleanUp(File baseFolder, ConsoleOutputStreamConsumer consumer) {\n        if (hasMaterialsWithNoDestinationFolder()) {\n            return;\n        }\n\n        DirectoryCleaner cleaner = new DirectoryCleaner(baseFolder, consumer);\n        cleaner.allowed(allowedFolders());\n        cleaner.clean();\n    }\n\n    private List<String> allowedFolders() {\n        ArrayList<String> allowed = new ArrayList<>();\n        for (Material material : this) {\n            if (!StringUtils.isBlank(material.getFolder())) {\n                allowed.add(material.getFolder());\n            }\n        }\n        allowed.add(ArtifactLogUtil.CRUISE_OUTPUT_FOLDER);\n        return allowed;\n    }\n\n    boolean hasMaterialsWithNoDestinationFolder() {\n        for (Material material : this) {\n            AbstractMaterial abstractMaterial = (AbstractMaterial) material;\n            if (abstractMaterial.supportsDestinationFolder() && !abstractMaterial.hasDestinationFolder()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void accept(ConfigVisitor visitor) {\n        for (Material material : this) {\n            visitor.visit(material);\n        }\n    }\n\n    public int count(Class<? extends Material> materialClass) {\n        int count = 0;\n        for (Material material : this) {\n            if (materialClass.isInstance(material)) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public Material byFolder(String folder) {\n        for (Material material : this) {\n            if ((material instanceof ScmMaterial || material instanceof PluggableSCMMaterial) && Objects.equals(folder, material.getFolder())) {\n                return material;\n            }\n        }\n        return null;\n    }\n\n    public Material getByFingerPrint(String fingerPrint) {\n        for (Material material : this) {\n            if (material.getPipelineUniqueFingerprint().equals(fingerPrint)) {\n                return material;\n            }\n        }\n        return null;\n    }\n\n    public Material get(Material other) {\n        for (Material material : this) {\n            if (material.isSameFlyweight(other)) {\n                return material;\n            }\n        }\n        throw new RuntimeException(\"Material not found: \" + other);//IMP: because, config can change between BCPS call and build cause production - shilpa/jj\n    }\n\n    /*\n    To two methods below are to avoid creating methods on already long Material interface with a No Op implementations.\n */\n\n    private List<ScmMaterial> filterScmMaterials() {\n        List<ScmMaterial> scmMaterials = new ArrayList<>();\n        for (Material material : this) {\n            if (material instanceof ScmMaterial) {\n                scmMaterials.add((ScmMaterial) material);\n            }\n        }\n        return scmMaterials;\n    }\n\n    public boolean scmMaterialsHaveDestination() {\n        for (ScmMaterial scmMaterial : filterScmMaterials()) {\n            if (!scmMaterial.hasDestinationFolder()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public SvnMaterial getSvnMaterial() {\n        return getExistingOrDefaultMaterial(new SvnMaterial(\"\", \"\", \"\", false));\n    }\n\n    public TfsMaterial getTfsMaterial() {\n        return getExistingOrDefaultMaterial(new TfsMaterial(new UrlArgument(\"\"), \"\", \"\", \"\", \"\"));\n    }\n\n    public HgMaterial getHgMaterial() {\n        return getExistingOrDefaultMaterial(new HgMaterial(\"\", null));\n    }\n\n    public GitMaterial getGitMaterial() {\n        return getExistingOrDefaultMaterial(new GitMaterial(\"\"));\n    }\n\n    public P4Material getP4Material() {\n        return getExistingOrDefaultMaterial(new P4Material(\"\", \"\"));\n    }\n\n    public DependencyMaterial getDependencyMaterial() {\n        return getExistingOrDefaultMaterial(new DependencyMaterial(new CaseInsensitiveString(\"\"), new CaseInsensitiveString(\"\")));\n    }\n\n    private <T extends Material> T getExistingOrDefaultMaterial(T defaultMaterial) {\n        for (Material material : this) {\n            if (material.getClass().isAssignableFrom(defaultMaterial.getClass())) {\n                return (T) material;\n            }\n        }\n        return defaultMaterial;\n    }\n\n    public String getMaterialOptions() {\n        return first() == null ? \"\" : first().getType();\n    }\n\n    private Material convertToMaterial(MaterialConfig materialConfig) {\n        if (SvnMaterial.TYPE.equals(materialConfig.getType())) {\n            return new SvnMaterial((SvnMaterialConfig) materialConfig);\n        } else if (HgMaterial.TYPE.equals(materialConfig.getType())) {\n            return new HgMaterial((HgMaterialConfig) materialConfig);\n        } else if (GitMaterial.TYPE.equals(materialConfig.getType())) {\n            return new GitMaterial((GitMaterialConfig) materialConfig);\n        } else if (P4Material.TYPE.equals(materialConfig.getType())) {\n            return new P4Material((P4MaterialConfig) materialConfig);\n        } else if (DependencyMaterial.TYPE.equals(materialConfig.getType())) {\n            return new DependencyMaterial((DependencyMaterialConfig) materialConfig);\n        } else if (TfsMaterial.TYPE.equals(materialConfig.getType())) {\n            return new TfsMaterial((TfsMaterialConfig) materialConfig);\n        } else if (PackageMaterial.TYPE.equals(materialConfig.getType())) {\n            return new PackageMaterial((PackageMaterialConfig) materialConfig);\n        } else if (PluggableSCMMaterial.TYPE.equals(materialConfig.getType())) {\n            return new PluggableSCMMaterial((PluggableSCMMaterialConfig) materialConfig);\n        } else if (TestingMaterial.TYPE.equals(materialConfig.getType())) {\n            return new TestingMaterial((TestingMaterialConfig) materialConfig);\n        }\n        throw new RuntimeException(\"Unexpected material type: \" + materialConfig.getClass() + \": \" + materialConfig);\n    }\n\n    public MaterialConfigs convertToConfigs() {\n        MaterialConfigs configs = new MaterialConfigs();\n        for (Material material : this) {\n            configs.add(material.config());\n        }\n        return configs;\n    }\n\n    public boolean hasMaterialConfigWithFingerprint(MaterialConfig materialConfig) {\n        for (Material material : this) {\n            if (material.getFingerprint().equals(materialConfig.getFingerprint())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.PipelineConfig;\nimport com.thoughtworks.go.config.SecretParamAware;\nimport com.thoughtworks.go.config.SecretParams;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.ProcessOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.annotation.PostConstruct;\nimport java.io.File;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static com.thoughtworks.go.util.command.EnvironmentVariableContext.escapeEnvironmentVariable;\n\n\n/**\n * @understands a source control repository and its configuration\n */\npublic abstract class ScmMaterial extends AbstractMaterial implements SecretParamAware {\n\n    public static final String GO_REVISION = \"GO_REVISION\";\n    public static final String GO_TO_REVISION = \"GO_TO_REVISION\";\n    public static final String GO_FROM_REVISION = \"GO_FROM_REVISION\";\n    public static final String GO_MATERIAL_URL = \"GO_MATERIAL_URL\";\n\n    protected Filter filter;\n    protected String folder;\n    protected boolean autoUpdate = true;\n    protected boolean invertFilter = false;\n    protected String userName;\n    protected String password;\n    protected SecretParams secretParamsForPassword;\n\n    public ScmMaterial(String typeName) {\n        super(typeName);\n    }\n\n    @Override\n    protected void appendPipelineUniqueCriteria(Map<String, Object> basicCriteria) {\n        basicCriteria.put(\"dest\", folder);\n    }\n\n    public File workingdir(File baseFolder) {\n        if (getFolder() == null) {\n            return baseFolder;\n        }\n        return new File(baseFolder, getFolder());\n    }\n\n    public String updatingTarget() {\n        return StringUtils.isEmpty(getFolder()) ? \"files\" : getFolder();\n    }\n\n    @Override\n    public void toJson(Map json, Revision revision) {\n        json.put(\"folder\", getFolder() == null ? \"\" : getFolder());\n        json.put(\"scmType\", getTypeForDisplay());\n        json.put(\"location\", getLocation());\n        if (!CaseInsensitiveString.isBlank(getName())) {\n            json.put(\"materialName\", CaseInsensitiveString.str(getName()));\n        }\n        json.put(\"action\", \"Modified\");\n    }\n\n    //most of the material such as hg, git, p4 all print the file from the root without '/'\n    //but subversion print it with '/', we standarize it here. look at the implementation of subversion as well.\n\n    @Override\n    public boolean matches(String name, String regex) {\n        if (regex.startsWith(\"/\")) {\n            regex = regex.substring(1);\n        }\n        return name.matches(regex);\n    }\n\n    public void checkout(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n        InMemoryStreamConsumer output = ProcessOutputStreamConsumer.inMemoryConsumer();\n        this.updateTo(output, baseDir, new RevisionContext(revision), execCtx);\n    }\n\n    public String getUserName() {\n        return this.userName;\n    }\n\n    /* Needed although there is a getUserName above */\n    public String getUsername() {\n        return userName;\n    }\n\n    public final void setPassword(String password) {\n        resetPassword(password);\n    }\n\n    private void resetPassword(String passwordToSet) {\n        setPasswordIfNotBlank(passwordToSet);\n    }\n\n    private void setPasswordIfNotBlank(String password) {\n        this.password = StringUtils.stripToNull(password);\n        this.secretParamsForPassword = SecretParams.parse(password);\n    }\n\n    @PostConstruct\n    public void ensureEncrypted() {\n        this.userName = StringUtils.stripToNull(this.userName);\n        setPasswordIfNotBlank(password);\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String passwordForCommandLine() {\n        return secretParamsForPassword == null || secretParamsForPassword.isEmpty() ? getPassword() : secretParamsForPassword.substitute(getPassword());\n    }\n\n    @Override\n    public boolean hasSecretParams() {\n        return this.secretParamsForPassword != null && !this.secretParamsForPassword.isEmpty();\n    }\n\n    @Override\n    public SecretParams getSecretParams() {\n        return secretParamsForPassword;\n    }\n\n    public abstract boolean isCheckExternals();\n\n    public abstract String getUrl();\n\n    public abstract String urlForCommandLine();\n\n    protected abstract UrlArgument getUrlArgument();\n\n    protected abstract String getLocation();\n\n    public void setFilter(Filter filter) {\n        this.filter = filter;\n    }\n\n    @Override\n    public void emailContent(StringBuilder content, Modification modification) {\n        content.append(getTypeForDisplay() + \": \" + getLocation()).append('\\n').append(\n                String.format(\"revision: %s, modified by %s on %s\", modification.getRevision(),\n                        modification.getUserName(), modification.getModifiedTime()))\n                .append('\\n')\n                .append(Optional.ofNullable(modification.getComment()).orElse(\"\"));\n\n    }\n\n    @Override\n    public String getDescription() {\n        return getUriForDisplay();\n    }\n\n    @Override\n    public String getUriForDisplay() {\n        return this.getUrlArgument().forDisplay();\n    }\n\n    @Override\n    public void populateEnvironmentContext(EnvironmentVariableContext environmentVariableContext, MaterialRevision materialRevision, File workingDir) {\n        String toRevision = materialRevision.getRevision().getRevision();\n        String fromRevision = materialRevision.getOldestRevision().getRevision();\n\n        setGoRevisionVariables(environmentVariableContext, fromRevision, toRevision);\n        setGoMaterialVariables(environmentVariableContext);\n    }\n\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        setVariableWithName(environmentVariableContext, this.getUrlArgument().withoutCredentials(), GO_MATERIAL_URL);\n    }\n\n    private void setGoRevisionVariables(EnvironmentVariableContext environmentVariableContext, String fromRevision, String toRevision) {\n        setVariableWithName(environmentVariableContext, toRevision, GO_REVISION);\n        setVariableWithName(environmentVariableContext, toRevision, GO_TO_REVISION);\n        setVariableWithName(environmentVariableContext, fromRevision, GO_FROM_REVISION);\n    }\n\n    protected void setVariableWithName(EnvironmentVariableContext environmentVariableContext, String value, String propertyName) {\n        String materialNameForEnvironmentVariable = getMaterialNameForEnvironmentVariable();\n        if (StringUtils.isNotBlank(materialNameForEnvironmentVariable)) {\n            environmentVariableContext.setProperty(propertyName + \"_\" + materialNameForEnvironmentVariable, value, false);\n        } else {\n            environmentVariableContext.setProperty(propertyName, value, false);\n        }\n    }\n\n    @Override\n    public String getMaterialNameForEnvironmentVariable() {\n        if (!CaseInsensitiveString.isBlank(this.name)) {\n            return escapeEnvironmentVariable(this.name.toUpper());\n        }\n\n        return escapeEnvironmentVariable(folder);\n    }\n\n    @Override\n    public String getFolder() {\n        return folder;\n    }\n\n    @Override\n    public String getDisplayName() {\n        return name == null ? getUriForDisplay() : CaseInsensitiveString.str(name);\n    }\n\n    @Override\n    public boolean isAutoUpdate() {\n        return autoUpdate;\n    }\n\n    public boolean getAutoUpdate() {\n        return autoUpdate;\n    }\n\n    public void setAutoUpdate(boolean value) {\n        autoUpdate = value;\n    }\n\n    public boolean isInvertFilter() {\n        return invertFilter;\n    }\n\n    public boolean getInvertFilter() {\n        return invertFilter;\n    }\n\n    public void setInvertFilter(boolean value) {\n        invertFilter = value;\n    }\n\n    @Override\n    public final MatchedRevision createMatchedRevision(Modification modification, String searchString) {\n        return new MatchedRevision(searchString, getShortRevision(modification.getRevision()), modification.getRevision(), modification.getUserName(), modification.getModifiedTime(), modification.getComment());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        ScmMaterial that = (ScmMaterial) o;\n\n        return folder != null ? folder.equals(that.folder) : that.folder == null;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (folder != null ? folder.hashCode() : 0);\n        return result;\n    }\n\n    public static String changesetUrl(Modification modification, String baseUrl, final long id) {\n        return baseUrl + \"/api/materials/\" + id + \"/changeset/\" + modification.getRevision() + \".xml\";\n    }\n\n    @Override\n    public Boolean isUsedInFetchArtifact(PipelineConfig pipelineConfig) {\n        return false;\n    }\n\n    // TODO: Consider renaming this to dest since we use that word in the UI & Config\n    public void setFolder(String folder) {\n        this.folder = folder;\n    }\n\n    @Override\n    public Revision oldestRevision(Modifications modifications) {\n        return Modification.oldestRevision(modifications);\n    }\n\n    @Override\n    public boolean supportsDestinationFolder() {\n        return true;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.git;\n\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.git.GitCommand;\nimport com.thoughtworks.go.domain.materials.git.GitMaterialInstance;\nimport com.thoughtworks.go.domain.materials.git.GitVersion;\nimport com.thoughtworks.go.domain.materials.svn.MaterialUrl;\nimport com.thoughtworks.go.server.transaction.TransactionSynchronizationManager;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.*;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.transaction.support.TransactionSynchronization;\nimport org.springframework.transaction.support.TransactionSynchronizationAdapter;\n\nimport java.io.File;\nimport java.net.URISyntaxException;\nimport java.util.*;\n\nimport static com.thoughtworks.go.config.materials.git.RefSpecHelper.localBranch;\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfFailedToRunCommandLine;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static com.thoughtworks.go.util.FileUtil.deleteDirectoryNoisily;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isBlank;\n\npublic class GitMaterial extends ScmMaterial implements PasswordAwareMaterial {\n    public static final int UNSHALLOW_TRYOUT_STEP = 100;\n    public static final int DEFAULT_SHALLOW_CLONE_DEPTH = 2;\n    public static final String GO_MATERIAL_BRANCH = \"GO_MATERIAL_BRANCH\";\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"GitMaterial\";\n    public static final String ERR_GIT_OLD_VERSION = \"Please install Git-core 1.9 or above. Currently installed version is \";\n    private static final Logger LOG = LoggerFactory.getLogger(GitMaterial.class);\n    private static final String ERR_GIT_NOT_FOUND = \"Failed to find 'git' on your PATH. Please ensure 'git' is executable by the Go Server and on the Go Agents where this material will be used.\";\n    private final UrlArgument url;\n    private String refSpecOrBranch = GitMaterialConfig.DEFAULT_BRANCH;\n    private boolean shallowClone = false;\n    private String submoduleFolder;\n\n    public GitMaterial(String url) {\n        super(TYPE);\n        this.url = new UrlArgument(url);\n    }\n\n    public GitMaterial(String url, boolean shallowClone) {\n        this(url, null, null, shallowClone);\n    }\n\n\n    public GitMaterial(String url, String refSpecOrBranch) {\n        this(url);\n        if (refSpecOrBranch != null) {\n            this.refSpecOrBranch = refSpecOrBranch;\n        }\n    }\n\n    public GitMaterial(String url, String refSpecOrBranch, String folder) {\n        this(url, refSpecOrBranch);\n        this.folder = folder;\n    }\n\n    public GitMaterial(String url, String refSpecOrBranch, String folder, Boolean shallowClone) {\n        this(url, refSpecOrBranch, folder);\n        if (shallowClone != null) {\n            this.shallowClone = shallowClone;\n        }\n    }\n\n    public GitMaterial(GitMaterialConfig config) {\n        this(config.getUrl(), config.getBranch(), config.getFolder(), config.isShallowClone());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.name = config.getName();\n        this.submoduleFolder = config.getSubmoduleFolder();\n        this.invertFilter = config.getInvertFilter();\n        this.userName = config.getUserName();\n        setPassword(config.getPassword());\n    }\n\n    @Override\n    public MaterialConfig config() {\n        GitMaterialConfig gitMaterialConfig = new GitMaterialConfig();\n        gitMaterialConfig.setUrl(this.url.originalArgument());\n        gitMaterialConfig.setUserName(this.userName);\n        gitMaterialConfig.setPassword(getPassword());\n        gitMaterialConfig.setSubmoduleFolder(this.submoduleFolder);\n        gitMaterialConfig.setAutoUpdate(this.autoUpdate);\n        gitMaterialConfig.setFilter(this.filter);\n        gitMaterialConfig.setInvertFilter(this.invertFilter);\n        gitMaterialConfig.setFolder(this.folder);\n        gitMaterialConfig.setName(this.name);\n        gitMaterialConfig.setShallowClone(this.shallowClone);\n        Optional.ofNullable(this.refSpecOrBranch).ifPresent(gitMaterialConfig::setBranch);\n        return gitMaterialConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        return getGit(baseDir, execCtx).latestModification();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        GitCommand gitCommand = getGit(baseDir, execCtx);\n        if (!execCtx.isGitShallowClone()) {\n            fullyUnshallow(gitCommand, inMemoryConsumer());\n        }\n        if (gitCommand.containsRevisionInBranch(revision)) {\n            return gitCommand.modificationsSince(revision);\n        } else {\n            return latestModification(baseDir, execCtx);\n        }\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new GitMaterialInstance(url.originalArgument(), userName, refSpecOrBranch, submoduleFolder, UUID.randomUUID().toString());\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        try {\n            outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), getUriForDisplay()));\n            File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n            GitCommand git = git(outputStreamConsumer, workingDir, revisionContext.numberOfModifications() + 1, execCtx);\n            git.fetch(outputStreamConsumer);\n            unshallowIfNeeded(git, outputStreamConsumer, revisionContext.getOldestRevision());\n            git.resetWorkingDir(outputStreamConsumer, revision, shallowClone);\n            outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        GitCommand gitCommand = new GitCommand(null, null, refSpecOrBranch, false, secrets());\n        try {\n            gitCommand.checkConnection(new UrlArgument(urlForCommandLine()));\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            try {\n                return handleException(e, gitCommand.version());\n            } catch (Exception notInstallGitException) {\n                return ValidationBean.notValid(ERR_GIT_NOT_FOUND);\n            }\n        }\n    }\n\n    public ValidationBean handleException(Exception e, GitVersion gitVersion) {\n        ValidationBean defaultResponse = ValidationBean.notValid(e.getMessage());\n        try {\n            if (!gitVersion.isMinimumSupportedVersionOrHigher()) {\n                return ValidationBean.notValid(ERR_GIT_OLD_VERSION + gitVersion.getVersion().toString());\n            } else {\n                return defaultResponse;\n            }\n        } catch (Exception ex) {\n            return defaultResponse;\n        }\n    }\n\n    /**\n     * @deprecated Breaks encapsulation really badly. But we need it for IBatis :-(\n     */\n    @Override\n    public String getUrl() {\n        return url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        try {\n            if (credentialsAreNotProvided()) {\n                return this.url.originalArgument();\n            }\n\n            return new URIBuilder(this.url.originalArgument())\n                    .setUserInfo(new UrlUserInfo(this.userName, this.passwordForCommandLine()).asString())\n                    .build().toString();\n\n        } catch (URISyntaxException e) {\n            return this.url.originalArgument();\n        }\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Branch: %s\", url.forDisplay(), refSpecOrBranch);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        if (!super.equals(o)) return false;\n        GitMaterial that = (GitMaterial) o;\n        return Objects.equals(url, that.url) &&\n                Objects.equals(refSpecOrBranch, that.refSpecOrBranch) &&\n                Objects.equals(submoduleFolder, that.submoduleFolder);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(super.hashCode(), url, refSpecOrBranch, submoduleFolder);\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Git\";\n    }\n\n    public String getBranch() {\n        return this.refSpecOrBranch;\n    }\n\n    public String getSubmoduleFolder() {\n        return submoduleFolder;\n    }\n\n    public void setSubmoduleFolder(String submoduleFolder) {\n        this.submoduleFolder = submoduleFolder;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    public boolean isShallowClone() {\n        return shallowClone;\n    }\n\n    @Override\n    public String getShortRevision(String revision) {\n        if (revision == null) return null;\n        if (revision.length() < 7) return revision;\n        return revision.substring(0, 7);\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"git\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"branch\", refSpecOrBranch);\n        configurationMap.put(\"shallow-clone\", shallowClone);\n        materialMap.put(\"git-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return GitMaterialInstance.class;\n    }\n\n    @Override\n    public String toString() {\n        return \"GitMaterial{\" +\n                \"url=\" + url +\n                \", branch='\" + refSpecOrBranch + '\\'' +\n                \", shallowClone=\" + shallowClone +\n                \", submoduleFolder='\" + submoduleFolder + '\\'' +\n                '}';\n    }\n\n    @Override\n    public void updateFromConfig(MaterialConfig materialConfig) {\n        super.updateFromConfig(materialConfig);\n        this.shallowClone = ((GitMaterialConfig) materialConfig).isShallowClone();\n    }\n\n    public GitMaterial withShallowClone(boolean value) {\n        GitMaterialConfig config = (GitMaterialConfig) config();\n        config.setShallowClone(value);\n        GitMaterial gitMaterial = new GitMaterial(config);\n        gitMaterial.secretParamsForPassword = this.secretParamsForPassword;\n\n        return gitMaterial;\n    }\n\n    public String effectiveLocalBranch() {\n        return localBranch(isBlank(refSpecOrBranch) ? GitMaterialConfig.DEFAULT_BRANCH : refSpecOrBranch);\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(\"branch\", refSpecOrBranch);\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        parameters.put(\"url\", url);\n        parameters.put(\"branch\", refSpecOrBranch);\n        parameters.put(\"shallowClone\", shallowClone);\n    }\n\n    @Override\n    protected String getLocation() {\n        return url.forDisplay();\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        setVariableWithName(environmentVariableContext, effectiveLocalBranch(), GO_MATERIAL_BRANCH);\n    }\n\n    private GitCommand getGit(File workingdir, SubprocessExecutionContext executionContext) {\n        InMemoryStreamConsumer output = inMemoryConsumer();\n        try {\n            return git(output, workingdir, DEFAULT_SHALLOW_CLONE_DEPTH, executionContext);\n        } catch (Exception e) {\n            throw bomb(e.getMessage() + \" \" + output.getStdError(), e);\n        }\n    }\n\n    private GitCommand git(ConsoleOutputStreamConsumer outputStreamConsumer, final File workingFolder, int preferredCloneDepth, SubprocessExecutionContext executionContext) throws Exception {\n        if (isSubmoduleFolder()) {\n            return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true, secrets());\n        }\n\n        GitCommand gitCommand = new GitCommand(getFingerprint(), workingFolder, refSpecOrBranch, false, secrets());\n        if (!isGitRepository(workingFolder) || isRepositoryChanged(gitCommand, workingFolder)) {\n            LOG.debug(\"Invalid git working copy or repository changed. Delete folder: {}\", workingFolder);\n            deleteDirectoryNoisily(workingFolder);\n        }\n        createParentFolderIfNotExist(workingFolder);\n        if (!workingFolder.exists()) {\n            TransactionSynchronizationManager txManager = new TransactionSynchronizationManager();\n            if (txManager.isActualTransactionActive()) {\n                txManager.registerSynchronization(new TransactionSynchronizationAdapter() {\n                    @Override\n                    public void afterCompletion(int status) {\n                        if (status != TransactionSynchronization.STATUS_COMMITTED) {\n                            FileUtils.deleteQuietly(workingFolder);\n                        }\n                    }\n                });\n            }\n            int cloneDepth = shallowClone ? preferredCloneDepth : Integer.MAX_VALUE;\n            int returnValue;\n            if (executionContext.isServer()) {\n                returnValue = gitCommand.cloneWithNoCheckout(outputStreamConsumer, urlForCommandLine());\n            } else {\n                returnValue = gitCommand.clone(outputStreamConsumer, urlForCommandLine(), cloneDepth);\n            }\n            bombIfFailedToRunCommandLine(returnValue, \"Failed to run git clone command\");\n        }\n        return gitCommand;\n    }\n\n    private List<SecretString> secrets() {\n        SecretString secretSubstitution = line -> line.replace(urlForCommandLine(), getUriForDisplay());\n        return Collections.singletonList(secretSubstitution);\n    }\n\n    // Unshallow local repo to include a revision operating on via two step process:\n    // First try to fetch forward 100 level with \"git fetch -depth 100\". If revision still missing,\n    // unshallow the whole repo with \"git fetch --2147483647\".\n    private void unshallowIfNeeded(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer, Revision revision) {\n        if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n            gitCommand.unshallow(streamConsumer, UNSHALLOW_TRYOUT_STEP);\n\n            if (gitCommand.isShallow() && !gitCommand.containsRevisionInBranch(revision)) {\n                fullyUnshallow(gitCommand, streamConsumer);\n            }\n        }\n    }\n\n    private void fullyUnshallow(GitCommand gitCommand, ConsoleOutputStreamConsumer streamConsumer) {\n        if (gitCommand.isShallow()) {\n            gitCommand.unshallow(streamConsumer, Integer.MAX_VALUE);\n        }\n    }\n\n    private boolean isSubmoduleFolder() {\n        return getSubmoduleFolder() != null;\n    }\n\n    private boolean isGitRepository(File workingFolder) {\n        return new File(workingFolder, \".git\").isDirectory();\n    }\n\n    private boolean isRepositoryChanged(GitCommand command, File workingDirectory) {\n        UrlArgument currentWorkingUrl = command.workingRepositoryUrl();\n        LOG.trace(\"Current repository url of [{}]: {}\", workingDirectory, currentWorkingUrl);\n        LOG.trace(\"Target repository url: {}\", url);\n        return !MaterialUrl.sameUrl(url.forDisplay(), currentWorkingUrl.forDisplay())\n                || !isRemoteFetchConfigEqual(command)\n                || !isBranchEqual(command)\n                || (!shallowClone && command.isShallow());\n    }\n\n    private boolean isRemoteFetchConfigEqual(GitCommand command) {\n        if (command.hasRefSpec()) {\n            try {\n                return (\"+\" + command.expandRefSpec()).equals(command.getConfigValue(\"remote.origin.fetch\"));\n            } catch (Throwable ignored) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isBranchEqual(GitCommand command) {\n        return effectiveLocalBranch().equals(command.getCurrentBranch());\n    }\n\n    private boolean credentialsAreNotProvided() {\n        return isAllBlank(this.userName, this.getPassword());\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.mercurial;\n\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.mercurial.HgCommand;\nimport com.thoughtworks.go.domain.materials.mercurial.HgMaterialInstance;\nimport com.thoughtworks.go.domain.materials.mercurial.HgVersion;\nimport com.thoughtworks.go.domain.materials.svn.MaterialUrl;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.*;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.net.URISyntaxException;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfFailedToRunCommandLine;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isAllBlank;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n/**\n * @understands configuration for mercurial version control\n */\npublic class HgMaterial extends ScmMaterial implements PasswordAwareMaterial {\n    private static final Pattern HG_VERSION_PATTERN = Pattern.compile(\".*\\\\(.*\\\\s+(\\\\d(\\\\.\\\\d)+.*)\\\\)\");\n    private static final Logger LOGGER = LoggerFactory.getLogger(HgMaterial.class);\n    private HgUrlArgument url;\n\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"HgMaterial\";\n    private static final String ERROR_OLD_VERSION = \"Please install Mercurial Version 1.0 or above.\"\n            + \" The current installed hg is \";\n    private static final String ERR_NO_HG_INSTALLED =\n            \"Failed to find 'hg' on your PATH. Please ensure 'hg' is executable by the Go Server and on the Go Agents where this material will be used.\";\n\n    private final String HG_DEFAULT_BRANCH = \"default\";\n    private String branch;\n\n    private HgMaterial() {\n        super(TYPE);\n    }\n\n    public HgMaterial(String url, String folder) {\n        this();\n        this.url = new HgUrlArgument(url);\n        this.folder = folder;\n    }\n\n    public HgMaterial(HgMaterialConfig config) {\n        this(config.getUrl(), config.getFolder());\n        this.userName = config.getUserName();\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.name = config.getName();\n        this.userName = config.getUserName();\n        this.branch = config.getBranch();\n        setPassword(config.getPassword());\n    }\n\n    @Override\n    public MaterialConfig config() {\n        HgMaterialConfig hgConfig = new HgMaterialConfig();\n        hgConfig.setUrl(this.url.originalArgument());\n        hgConfig.setUserName(this.userName);\n        hgConfig.setPassword(getPassword());\n        hgConfig.setBranchAttribute(this.branch);\n        hgConfig.setAutoUpdate(this.autoUpdate);\n        hgConfig.setFilter(this.filter);\n        hgConfig.setInvertFilter(this.invertFilter);\n        hgConfig.setFolder(this.folder);\n        hgConfig.setName(this.name);\n        return hgConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        HgCommand hgCommand = getHg(baseDir);\n        return hgCommand.latestOneModificationAsModifications();\n    }\n\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return getHg(baseDir).modificationsSince(revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new HgMaterialInstance(url.originalArgument(), userName, branch, UUID.randomUUID().toString());\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        if (isNotBlank(branch)) {\n            parameters.put(\"branch\", branch);\n        }\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        parameters.put(\"url\", url);\n    }\n\n    private HgCommand getHg(File baseDir) {\n        InMemoryStreamConsumer output =\n                ProcessOutputStreamConsumer.inMemoryConsumer();\n        HgCommand hgCommand = null;\n        try {\n            hgCommand = hg(baseDir, output);\n        } catch (Exception e) {\n            bomb(e.getMessage() + \" \" + output.getStdError(), e);\n        }\n\n        return hgCommand;\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        try {\n            outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url.forDisplay()));\n            File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n            hg(workingDir, outputStreamConsumer).updateTo(revision, outputStreamConsumer);\n            outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public void add(File baseDir, ProcessOutputStreamConsumer outputStreamConsumer, File file) throws Exception {\n        hg(baseDir, outputStreamConsumer).add(outputStreamConsumer, file);\n    }\n\n    public void commit(File baseDir, ProcessOutputStreamConsumer consumer, String comment, String username)\n            throws Exception {\n        hg(baseDir, consumer).commit(consumer, comment, username);\n    }\n\n    public void push(File baseDir, ProcessOutputStreamConsumer consumer) throws Exception {\n        hg(baseDir, consumer).push(consumer);\n    }\n\n    boolean isVersionOneDotZeroOrHigher(String hgout) {\n        String hgVersion = parseHgVersion(hgout);\n        Float aFloat = NumberUtils.createFloat(hgVersion.subSequence(0, 3).toString());\n        return aFloat >= 1;\n    }\n\n    private String parseHgVersion(String hgOut) {\n        String[] lines = hgOut.split(\"\\n\");\n        String firstLine = lines[0];\n        Matcher m = HG_VERSION_PATTERN.matcher(firstLine);\n        if (m.matches()) {\n            return m.group(1);\n        } else {\n            throw bomb(\"can not parse hgout : \" + hgOut);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        HgCommand hgCommand = new HgCommand(null, null, null, null, secrets());\n        try {\n            hgCommand.checkConnection(new HgUrlArgument(urlForCommandLine()));\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            try {\n                return handleException(e, hgCommand.version());\n            } catch (Exception ex) {\n                return ValidationBean.notValid(ERR_NO_HG_INSTALLED);\n            }\n        }\n    }\n\n    ValidationBean handleException(Exception e, HgVersion version) {\n        ValidationBean defaultResponse = ValidationBean.notValid(\n                \"Repository \" + url.forDisplay() + \" not found!\" + \" : \\n\" + e.getMessage());\n        try {\n            if (version.isOlderThanOneDotZero()) {\n                return ValidationBean.notValid(ERROR_OLD_VERSION + version.toString());\n            } else {\n                return defaultResponse;\n            }\n        } catch (Exception e1) {\n            LOGGER.debug(\"Problem validating HG\", e);\n            return defaultResponse;\n        }\n    }\n\n\n    private HgCommand hg(File workingFolder, ConsoleOutputStreamConsumer outputStreamConsumer) throws Exception {\n        UrlArgument urlArgument = new HgUrlArgument(urlForCommandLine());\n        HgCommand hgCommand = new HgCommand(getFingerprint(), workingFolder, getBranch(), urlArgument.forCommandLine(), secrets());\n        if (!isHgRepository(workingFolder) || isRepositoryChanged(hgCommand)) {\n            LOGGER.debug(\"Invalid hg working copy or repository changed. Delete folder: {}\", workingFolder);\n            FileUtils.deleteQuietly(workingFolder);\n        }\n        if (!workingFolder.exists()) {\n            createParentFolderIfNotExist(workingFolder);\n            int returnValue = hgCommand.clone(outputStreamConsumer, urlArgument);\n            bombIfFailedToRunCommandLine(returnValue, \"Failed to run hg clone command\");\n        }\n        return hgCommand;\n    }\n\n    protected List<SecretString> secrets() {\n        SecretString secretSubstitution = line -> line.replace(urlForCommandLine(), getUriForDisplay());\n        return Collections.singletonList(secretSubstitution);\n    }\n\n    private boolean isHgRepository(File workingFolder) {\n        return new File(workingFolder, \".hg\").isDirectory();\n    }\n\n    private boolean isRepositoryChanged(HgCommand hgCommand) {\n        ConsoleResult result = hgCommand.workingRepositoryUrl();\n        return !MaterialUrl.sameUrl(url.defaultRemoteUrl(), new HgUrlArgument(result.outputAsString()).defaultRemoteUrl());\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        try {\n            if (credentialsAreNotProvided()) {\n                return this.url.originalArgument();\n            }\n\n            return new URIBuilder(this.url.originalArgument())\n                    .setUserInfo(new UrlUserInfo(this.userName, this.passwordForCommandLine()).asString())\n                    .build().toString();\n\n        } catch (URISyntaxException e) {\n            return this.url.originalArgument();\n        }\n    }\n\n    private boolean credentialsAreNotProvided() {\n        return isAllBlank(this.userName, this.getPassword());\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    public HgUrlArgument getHgUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s\", url.forDisplay());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        HgMaterial that = (HgMaterial) o;\n\n        if (url != null ? !url.equals(that.url) : that.url != null) {\n            return false;\n        }\n\n        if (branch != null ? !branch.equals(that.branch) : that.branch != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (branch != null ? branch.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrlArgument().forDisplay();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Mercurial\";\n    }\n\n    @Override\n    public String getShortRevision(String revision) {\n        if (revision == null) return null;\n        if (revision.length() < 12) return revision;\n        return revision.substring(0, 12);\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"mercurial\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        materialMap.put(\"mercurial-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return HgMaterialInstance.class;\n    }\n\n    @Override\n    public String toString() {\n        return \"HgMaterial{\" +\n                \"url=\" + url +\n                '}';\n    }\n\n    public void setBranch(String branch) {\n        this.branch = branch;\n    }\n\n\n    public String getBranch() {\n        if (isNotBlank(branch)) {\n            return branch;\n        }\n\n        return getBranchFromUrl();\n    }\n\n    private String getBranchFromUrl() {\n        String[] componentsOfUrl = StringUtils.split(url.originalArgument(), HgUrlArgument.DOUBLE_HASH);\n        if (componentsOfUrl.length > 1) {\n            return componentsOfUrl[1];\n        }\n        return HG_DEFAULT_BRANCH;\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        setVariableWithName(environmentVariableContext, getBranch(), GitMaterial.GO_MATERIAL_BRANCH);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.perforce;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.perforce.P4Client;\nimport com.thoughtworks.go.domain.materials.perforce.P4MaterialInstance;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.FileUtil;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.SystemUtil;\nimport com.thoughtworks.go.util.TempFiles;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.InMemoryStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bomb;\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static com.thoughtworks.go.util.command.ProcessOutputStreamConsumer.inMemoryConsumer;\nimport static java.lang.Long.parseLong;\nimport static java.lang.String.format;\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class P4Material extends ScmMaterial implements PasswordEncrypter, PasswordAwareMaterial {\n    private String serverAndPort;\n    private Boolean useTickets = false;\n    private P4MaterialView view;\n\n    // Database stuff\n    //TODO: use iBatis to set the type for us, and we can get rid of this field.\n    public static final String TYPE = \"P4Material\";\n\n    private P4Material() {\n        super(TYPE);\n    }\n\n    public P4Material(String serverAndPort, String view) {\n        this();\n        bombIfNull(serverAndPort, \"null serverAndPort\");\n        this.serverAndPort = serverAndPort;\n        setView(view);\n    }\n\n    public P4Material(String serverAndPort, String view, String userName) {\n        this(serverAndPort, view);\n        this.userName = userName;\n    }\n\n    public P4Material(P4MaterialConfig config) {\n        this(config.getUrl(), config.getView(), config.getUserName(), config.getFolder());\n        this.name = config.getName();\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        setPassword(config.getPassword());\n        this.useTickets = config.getUseTickets();\n    }\n\n    public P4Material(String serverAndPort, String view, String userName, String folder) {\n        this();\n        bombIfNull(serverAndPort, \"null serverAndPort\");\n        this.serverAndPort = serverAndPort;\n        setView(view);\n        this.userName = userName;\n        this.folder = folder;\n    }\n\n    @Override\n    public MaterialConfig config() {\n        P4MaterialConfig p4MaterialConfig = new P4MaterialConfig();\n        p4MaterialConfig.setServerAndPort(this.serverAndPort);\n        p4MaterialConfig.setUserName(this.userName);\n        p4MaterialConfig.setPassword(getPassword());\n        p4MaterialConfig.setUseTickets(this.useTickets);\n        p4MaterialConfig.setView(view == null ? null : view.getValue());\n        p4MaterialConfig.setName(this.name);\n        p4MaterialConfig.setAutoUpdate(this.autoUpdate);\n        p4MaterialConfig.setFilter(this.filter);\n        p4MaterialConfig.setInvertFilter(this.invertFilter);\n        p4MaterialConfig.setFolder(this.folder);\n        return p4MaterialConfig;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        P4Client p4 = getP4(execCtx.isServer() ? baseDir : workingdir(baseDir));\n        return p4.latestChange();\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        P4Client p4 = getP4(execCtx.isServer() ? baseDir : workingdir(baseDir));\n        return p4.changesSince(revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new P4MaterialInstance(serverAndPort, userName, view.getValue(), useTickets, UUID.randomUUID().toString());\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, serverAndPort);\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"view\", view.getValue());\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        appendCriteria(parameters);\n    }\n\n    protected P4Client getP4(File baseDir) {\n        InMemoryStreamConsumer outputConsumer = inMemoryConsumer();\n        P4Client p4 = null;\n        try {\n            p4 = p4(baseDir, outputConsumer);\n        } catch (Exception e) {\n            bomb(e.getMessage() + \" \" + outputConsumer.getStdError(), e);\n        }\n        return p4;\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        boolean cleaned = cleanDirectoryIfRepoChanged(workingDir, outputConsumer);\n        String revision = revisionContext.getLatestRevision().getRevision();\n        try {\n            outputConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision, serverAndPort));\n            p4(workingDir, outputConsumer).sync(parseLong(revision), cleaned, outputConsumer);\n            outputConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n        } catch (Exception e) {\n            bomb(e);\n        }\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        File baseDir = new TempFiles().createUniqueFolder(\"for-p4\");\n        try {\n            getP4(baseDir).checkConnection();\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            return ValidationBean.notValid(\"Unable to connect to server \" + serverAndPort + \" : \\n\" + e.getMessage());\n        } finally {\n            FileUtils.deleteQuietly(baseDir);\n        }\n    }\n\n    public String getServerAndPort() {\n        return serverAndPort;\n    }\n\n    public String getView() {\n        return view == null ? null : view.getValue();\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return serverAndPort;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return serverAndPort;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(serverAndPort);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return format(\"URL: %s, View: %s, Username: %s\", serverAndPort, view.getValue(), userName);\n    }\n\n    P4Client p4(File baseDir, ConsoleOutputStreamConsumer consumer) throws Exception {\n        return _p4(baseDir, consumer, true);\n    }\n\n    /**\n     * not for use externally, created for testing convenience\n     */\n    P4Client _p4(File workDir, ConsoleOutputStreamConsumer consumer, boolean failOnError) throws Exception {\n        String clientName = clientName(workDir);\n        return P4Client.fromServerAndPort(getFingerprint(), serverAndPort, userName, passwordForCommandLine(), clientName, this.useTickets, workDir, p4view(clientName), consumer, failOnError);\n    }\n\n    @Override\n    public void populateAgentSideEnvironmentContext(EnvironmentVariableContext environmentVariableContext, File baseDir) {\n        super.populateAgentSideEnvironmentContext(environmentVariableContext, baseDir);\n        setVariableWithName(environmentVariableContext, clientName(workingdir(baseDir)), \"GO_P4_CLIENT\");\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"perforce\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        configurationMap.put(\"url\", serverAndPort);\n        configurationMap.put(\"username\", userName);\n        if (addSecureFields) {\n            configurationMap.put(\"password\", getPassword());\n        }\n        configurationMap.put(\"view\", getView());\n        configurationMap.put(\"use-tickets\", useTickets);\n        materialMap.put(\"perforce-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return P4MaterialInstance.class;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        P4Material that = (P4Material) o;\n\n        if (serverAndPort != null ? !serverAndPort.equals(that.serverAndPort) : that.serverAndPort != null) {\n            return false;\n        }\n        if (useTickets != null ? !useTickets.equals(that.useTickets) : that.useTickets != null) {\n            return false;\n        }\n        if (view != null ? !view.equals(that.view) : that.view != null) {\n            return false;\n        }\n\n        if (userName != null ? !userName.equals(that.userName) : that.userName != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (serverAndPort != null ? serverAndPort.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (useTickets != null ? useTickets.hashCode() : 0);\n        result = 31 * result + (view != null ? view.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getServerAndPort();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Perforce\";\n    }\n\n    public String p4view(String clientName) {\n        return view.viewUsing(clientName);\n    }\n\n    public String clientName(File workingDir) {\n        String hash = FileUtil.filesystemSafeFileHash(workingDir);\n        return \"cruise-\" + SystemUtil.getLocalhostName()\n                + \"-\" + workingDir.getName()\n                + \"-\" + hash;\n    }\n\n    private boolean cleanDirectoryIfRepoChanged(File workingDirectory, ConsoleOutputStreamConsumer outputConsumer) {\n        boolean cleaned = false;\n        try {\n            String p4RepoId = p4RepoId();\n            File file = new File(workingDirectory, \".cruise_p4repo\");\n            if (!file.exists()) {\n                FileUtils.writeStringToFile(file, p4RepoId, UTF_8);\n                return true;\n            }\n\n            String existingRepoId = FileUtils.readFileToString(file, UTF_8);\n            if (!p4RepoId.equals(existingRepoId)) {\n                outputConsumer.stdOutput(format(\"[%s] Working directory has changed. Deleting and re-creating it.\", GoConstants.PRODUCT_NAME));\n                FileUtils.deleteDirectory(workingDirectory);\n                workingDirectory.mkdirs();\n                FileUtils.writeStringToFile(file, p4RepoId, UTF_8);\n                cleaned = true;\n            }\n            return cleaned;\n        } catch (IOException e) {\n            throw bomb(e);\n        }\n    }\n\n    private String p4RepoId() {\n        return hasUser() ? userName + \"@\" + serverAndPort : serverAndPort;\n    }\n\n    private boolean hasUser() {\n        return userName != null && !userName.trim().isEmpty();\n    }\n\n    public boolean getUseTickets() {\n        return this.useTickets;\n    }\n\n    public void setUseTickets(boolean useTickets) {\n        this.useTickets = useTickets;\n    }\n\n    @Override\n    public String toString() {\n        return \"P4Material{\" +\n                \"serverAndPort='\" + serverAndPort + '\\'' +\n                \", userName='\" + userName + '\\'' +\n                \", view=\" + view.getValue() +\n                '}';\n    }\n\n    public void setUsername(String userName) {\n        this.userName = userName;\n    }\n\n    private void setView(String viewStr) {\n        this.view = new P4MaterialView(viewStr);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.svn;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.svn.*;\nimport com.thoughtworks.go.security.GoCipher;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static com.thoughtworks.go.util.ExceptionUtils.bombIfNull;\nimport static com.thoughtworks.go.util.FileUtil.createParentFolderIfNotExist;\nimport static java.lang.String.format;\n\n/**\n * @understands configuration for subversion\n */\npublic class SvnMaterial extends ScmMaterial implements PasswordEncrypter, PasswordAwareMaterial {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SvnMaterial.class);\n    private UrlArgument url;\n    private boolean checkExternals;\n    private transient Subversion svnLazyLoaded;\n\n    public static final String TYPE = \"SvnMaterial\";\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals) {\n        this(url, userName, password, checkExternals, new GoCipher());\n    }\n\n    public SvnMaterial(Subversion svn) {\n        this(svn.getUrl().originalArgument(), svn.getUserName(), svn.getPassword(), svn.isCheckExternals());\n        this.svnLazyLoaded = svn;\n    }\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals, String folder) {\n        this(url, userName, password, checkExternals);\n        this.folder = folder;\n    }\n\n    public SvnMaterial(SvnMaterialConfig config) {\n        this(config.getUrl(), config.getUserName(), config.getPassword(), config.isCheckExternals(), config.getGoCipher());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.folder = config.getFolder();\n        this.name = config.getName();\n    }\n\n    public SvnMaterial(String url, String userName, String password, boolean checkExternals, GoCipher goCipher) {\n        super(\"SvnMaterial\");\n        bombIfNull(url, \"null url\");\n        setUrl(url);\n        this.userName = userName;\n        setPassword(password);\n        this.checkExternals = checkExternals;\n    }\n\n    @Override\n    public MaterialConfig config() {\n        SvnMaterialConfig svnMaterialConfig = new SvnMaterialConfig();\n        svnMaterialConfig.setUrl(this.url.originalArgument());\n        svnMaterialConfig.setUserName(this.userName);\n        svnMaterialConfig.setPassword(getPassword());\n        svnMaterialConfig.setCheckExternals(this.checkExternals);\n        svnMaterialConfig.setAutoUpdate(this.autoUpdate);\n        svnMaterialConfig.setFilter(this.filter);\n        svnMaterialConfig.setInvertFilter(this.invertFilter);\n        svnMaterialConfig.setFolder(this.folder);\n        svnMaterialConfig.setName(this.name);\n        return svnMaterialConfig;\n    }\n\n    private Subversion svn() {\n        if (svnLazyLoaded == null || !svnLazyLoaded.getUrl().equals(url)) {\n            svnLazyLoaded = new SvnCommand(getFingerprint(), url.forCommandLine(), userName, passwordForCommandLine(), checkExternals);\n        }\n        return svnLazyLoaded;\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        return svn().latestModification();\n    }\n\n    public List<Modification> modificationsSince(File workingDirectory, Revision revision, final SubprocessExecutionContext execCtx) {\n        return svn().modificationsSince(new SubversionRevision(revision.getRevision()));\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new SvnMaterialInstance(url.originalArgument(), userName, UUID.randomUUID().toString(), checkExternals);\n    }\n\n    @Override\n    protected void appendCriteria(Map parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"checkExternals\", checkExternals);\n    }\n\n    @Override\n    protected void appendAttributes(Map parameters) {\n        parameters.put(ScmMaterialConfig.URL, url);\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(\"checkExternals\", checkExternals);\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        LOGGER.debug(\"Updating to revision: {} in workingdirectory {}\", revision, workingDir);\n        outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url));\n        boolean shouldDoFreshCheckout = !workingDir.isDirectory() || isRepositoryChanged(workingDir);\n        if (shouldDoFreshCheckout) {\n            freshCheckout(outputStreamConsumer, new SubversionRevision(revision), workingDir);\n        } else {\n            cleanupAndUpdate(outputStreamConsumer, new SubversionRevision(revision), workingDir);\n        }\n        LOGGER.debug(\"done with update\");\n        outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n    }\n\n    public boolean isRepositoryChanged(File workingFolder) {\n        try {\n            File file = new File(workingFolder, \".svn\");\n            if (workingFolder.isDirectory() && file.exists() && file.isDirectory()) {\n                String workingUrl = svn().workingRepositoryUrl(workingFolder);\n                return !MaterialUrl.sameUrl(url.toString(), workingUrl);\n            } else {\n                return true;\n            }\n        } catch (IOException e) {\n            return true;\n        }\n    }\n\n    public void freshCheckout(ConsoleOutputStreamConsumer outputStreamConsumer, SubversionRevision revision,\n                              File workingFolder) {\n        if (workingFolder.isDirectory()) {\n            FileUtils.deleteQuietly(workingFolder);\n        }\n        LOGGER.trace(\"Checking out to revision {} in {}\", revision, workingFolder);\n        createParentFolderIfNotExist(workingFolder);\n        svn().checkoutTo(outputStreamConsumer, workingFolder, revision);\n    }\n\n    public void cleanupAndUpdate(ConsoleOutputStreamConsumer outputStreamConsumer, SubversionRevision revision,\n                                 File workingFolder) {\n        try {\n            svn().cleanupAndRevert(outputStreamConsumer, workingFolder);\n        } catch (Exception e) {\n            String message = \"Failed to do cleanup and revert in \" + workingFolder.getAbsolutePath();\n            LOGGER.error(message);\n            LOGGER.debug(message, e);\n        }\n        LOGGER.trace(\"Updating to revision {} on {}\", revision, workingFolder);\n        svn().updateTo(outputStreamConsumer, workingFolder, revision);\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        SvnMaterial that = (SvnMaterial) o;\n\n        if (checkExternals != that.checkExternals) {\n            return false;\n        }\n        if (url != null ? !url.equals(that.url) : that.url != null) {\n            return false;\n        }\n\n        if (userName != null ? !userName.equals(that.userName) : that.userName != null) {\n            return false;\n        }\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (checkExternals ? 1 : 0);\n        return result;\n    }\n\n    @Override\n    protected String getLocation() {\n        return url == null ? null : url.forDisplay();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Subversion\";\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"svn\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.forCommandLine());\n            configurationMap.put(\"password\", getPassword());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"username\", userName);\n        configurationMap.put(\"check-externals\", checkExternals);\n        materialMap.put(\"svn-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return SvnMaterialInstance.class;\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        return svn().checkConnection();\n    }\n\n    @Override\n    public String getUrl() {\n        return url == null ? null : url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url.forCommandLine();\n    }\n\n    @Override\n    public UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Username: %s, CheckExternals: %s\", url.forDisplay(), userName, checkExternals);\n    }\n\n    public void setUrl(String url) {\n        this.url = new UrlArgument(url);\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return checkExternals;\n    }\n\n    public void add(ConsoleOutputStreamConsumer outputStreamConsumer, File file) {\n        svn().add(outputStreamConsumer, file);\n    }\n\n    public void commit(ConsoleOutputStreamConsumer outputStreamConsumer, File workingDir, String message) {\n        svn().commit(outputStreamConsumer, workingDir, message);\n    }\n\n    @Override\n    public boolean matches(String name, String regex) {\n        if (!regex.startsWith(\"/\")) {\n            regex = \"/\" + regex;\n        }\n        return name.matches(regex);\n    }\n\n    @Override\n    public String toString() {\n        return \"SvnMaterial{\" +\n                \"url=\" + url +\n                \", userName='\" + userName + '\\'' +\n                \", checkExternals=\" + checkExternals +\n                '}';\n    }\n\n    /**\n     * @deprecated used only in tests - we need to disentangle this\n     */\n    public static SvnMaterial createSvnMaterialWithMock(Subversion svn) {\n        return new SvnMaterial(svn);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.config.materials.tfs;\n\nimport com.thoughtworks.go.config.PasswordEncrypter;\nimport com.thoughtworks.go.config.materials.PasswordAwareMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.ScmMaterialConfig;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommand;\nimport com.thoughtworks.go.domain.materials.tfs.TfsCommandFactory;\nimport com.thoughtworks.go.domain.materials.tfs.TfsMaterialInstance;\nimport com.thoughtworks.go.util.GoConstants;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.EnvironmentVariableContext;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.apache.commons.lang3.builder.ToStringBuilder;\nimport org.apache.commons.lang3.builder.ToStringStyle;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport static java.lang.String.format;\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\npublic class TfsMaterial extends ScmMaterial implements PasswordAwareMaterial, PasswordEncrypter {\n    private static final Logger LOGGER = LoggerFactory.getLogger(TfsMaterial.class);\n\n    public static final String TYPE = \"TfsMaterial\";\n    public static final String GO_MATERIAL_DOMAIN = \"GO_MATERIAL_DOMAIN\";\n\n    private UrlArgument url;\n    private String domain = \"\";\n    private String projectPath;\n\n    public TfsMaterial() {\n        super(TYPE);\n    }\n\n    public TfsMaterial(UrlArgument url, String userName, String domain, String password, String projectPath) {\n        this();\n        this.url = url;\n        this.userName = userName;\n        this.domain = domain;\n        setPassword(password);\n        this.projectPath = projectPath;\n    }\n\n    public TfsMaterial(TfsMaterialConfig config) {\n        this(new UrlArgument(config.getUrl()), config.getUserName(), config.getDomain(), config.getPassword(), config.getProjectPath());\n        this.autoUpdate = config.getAutoUpdate();\n        this.filter = config.rawFilter();\n        this.invertFilter = config.getInvertFilter();\n        this.folder = config.getFolder();\n        this.name = config.getName();\n    }\n\n    @Override\n    public MaterialConfig config() {\n        TfsMaterialConfig tfsMaterialConfig = new TfsMaterialConfig();\n        tfsMaterialConfig.setUrl(this.url.originalArgument());\n        tfsMaterialConfig.setUserName(this.userName);\n        tfsMaterialConfig.setDomain(this.domain);\n        tfsMaterialConfig.setPassword(getPassword());\n        tfsMaterialConfig.setProjectPath(this.projectPath);\n        tfsMaterialConfig.setAutoUpdate(this.autoUpdate);\n        tfsMaterialConfig.setFilter(this.filter);\n        tfsMaterialConfig.setInvertFilter(this.invertFilter);\n        tfsMaterialConfig.setFolder(this.folder);\n        tfsMaterialConfig.setName(this.name);\n        return tfsMaterialConfig;\n    }\n\n    public String getDomain() {\n        return domain;\n    }\n\n    public String getProjectPath() {\n        return projectPath;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url == null ? null : url.originalArgument();\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url.forCommandLine();\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return url;\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"URL: %s, Username: %s, Domain: %s, ProjectPath: %s\", url.forDisplay(), userName, domain, projectPath);\n    }\n\n    @Override\n    protected String getLocation() {\n        return url == null ? null : url.forDisplay();\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n        parameters.put(ScmMaterialConfig.URL, url.originalArgument());\n        parameters.put(ScmMaterialConfig.USERNAME, userName);\n        parameters.put(TfsMaterialConfig.DOMAIN, domain);\n        parameters.put(TfsMaterialConfig.PROJECT_PATH, projectPath);\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n        appendCriteria(parameters);\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n        Revision revision = revisionContext.getLatestRevision();\n        File workingDir = execCtx.isServer() ? baseDir : workingdir(baseDir);\n        LOGGER.debug(\"[TFS] Updating to revision: {} in workingdirectory {}\", revision, workingDir);\n        outputStreamConsumer.stdOutput(format(\"[%s] Start updating %s at revision %s from %s\", GoConstants.PRODUCT_NAME, updatingTarget(), revision.getRevision(), url));\n        tfs(execCtx).checkout(workingDir, revision);\n        LOGGER.debug(\"[TFS] done with update\");\n        outputStreamConsumer.stdOutput(format(\"[%s] Done.\\n\", GoConstants.PRODUCT_NAME));\n    }\n\n    TfsCommand tfs(final SubprocessExecutionContext execCtx) {\n        return new TfsCommandFactory().create(execCtx, url, domain, userName, passwordForCommandLine(), getFingerprint(), projectPath);\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        try {\n            tfs(execCtx).checkConnection();\n            return ValidationBean.valid();\n        } catch (Exception e) {\n            LOGGER.error(\"[TFS] Error during check connection\", e);\n            return ValidationBean.notValid(e.getMessage());\n        }\n    }\n\n    public List<Modification> latestModification(File workDir, final SubprocessExecutionContext execCtx) {\n        return tfs(execCtx).latestModification(workDir);\n    }\n\n    public List<Modification> modificationsSince(File workDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return tfs(execCtx).modificationsSince(workDir, revision);\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new TfsMaterialInstance(url.originalArgument(), userName, domain, projectPath, UUID.randomUUID().toString());\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return \"Tfs\";\n    }\n\n    @Override\n    public Map<String, Object> getAttributes(boolean addSecureFields) {\n        Map<String, Object> materialMap = new HashMap<>();\n        materialMap.put(\"type\", \"tfs\");\n        Map<String, Object> configurationMap = new HashMap<>();\n        if (addSecureFields) {\n            configurationMap.put(\"url\", url.originalArgument());\n        } else {\n            configurationMap.put(\"url\", url.forDisplay());\n        }\n        configurationMap.put(\"domain\", domain);\n        configurationMap.put(\"username\", userName);\n        if (addSecureFields) {\n            configurationMap.put(\"password\", getPassword());\n        }\n        configurationMap.put(\"project-path\", projectPath);\n        materialMap.put(\"tfs-configuration\", configurationMap);\n        return materialMap;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return TfsMaterialInstance.class;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n\n        TfsMaterial material = (TfsMaterial) o;\n\n        if (projectPath != null ? !projectPath.equals(material.projectPath) : material.projectPath != null) {\n            return false;\n        }\n        if (url != null ? !url.equals(material.url) : material.url != null) {\n            return false;\n        }\n        if (domain != null ? !domain.equals(material.domain) : material.domain != null) {\n            return false;\n        }\n        if (userName != null ? !userName.equals(material.userName) : material.userName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (url != null ? url.hashCode() : 0);\n        result = 31 * result + (userName != null ? userName.hashCode() : 0);\n        result = 31 * result + (domain != null ? domain.hashCode() : 0);\n        result = 31 * result + (projectPath != null ? projectPath.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this, ToStringStyle.DEFAULT_STYLE, true);\n    }\n\n    @Override\n    protected void setGoMaterialVariables(EnvironmentVariableContext environmentVariableContext) {\n        super.setGoMaterialVariables(environmentVariableContext);\n        if (isNotBlank(domain)) {\n            setVariableWithName(environmentVariableContext, domain, GO_MATERIAL_DOMAIN);\n        }\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials;\n\nimport com.thoughtworks.go.config.materials.ScmMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.util.command.ConsoleOutputStreamConsumer;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.joda.time.DateTime;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\npublic class TestingMaterial extends ScmMaterial {\n    public static final Date TWO_DAYS_AGO_CHECKIN = new DateTime().minusDays(2).toDate();\n\n    public static final String MOD_TYPE = \"svn\";\n    public static final String MOD_REVISION = \"98\";\n\n    public static final String TYPE = \"TestingMaterial\";\n\n    private String url;\n\n    public TestingMaterial() {\n        super(TYPE);\n    }\n\n    public TestingMaterial(TestingMaterialConfig config) {\n        this();\n        this.url = config.getUrl();\n    }\n\n    public List<Modification> latestModification(File baseDir, final SubprocessExecutionContext execCtx) {\n        throw new RuntimeException(\"NOT USED\");\n    }\n\n    public List<Modification> modificationsSince(File baseDir, Revision revision, final SubprocessExecutionContext execCtx) {\n        return multipleModificationList();\n    }\n\n    private List<Modification> multipleModificationList() {\n        List<Modification> modifications = new ArrayList<>();\n\n        Date today = new Date();\n        Date yesterday = new DateTime().minusDays(1).toDate();\n\n        Modification modification1 = new Modification(\"lgao\", \"Fixing the not checked in files\", \"foo@bar.com\", yesterday, \"99\");\n        modification1.createModifiedFile(\"build.xml\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification1);\n\n        Modification modification2 = new Modification(\"committer\", \"Added the README file\", \"foo@bar.com\", today, \"100\");\n        modification2.createModifiedFile(\"oldbuild.xml\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification2);\n\n        Modification modification3 = new Modification(\"committer <html />\", \"Added the README file with <html />\", \"foo@bar.com\", today, \"101\");\n        modification3.createModifiedFile(\"README.txt\", \"\\\\build\", ModifiedAction.added);\n        modifications.add(modification3);\n\n        return modifications;\n    }\n\n    @Override\n    public MaterialInstance createMaterialInstance() {\n        return new TestingMaterialInstance(url, \"FLYWEIGHTNAME\");\n    }\n\n    @Override\n    public void updateTo(ConsoleOutputStreamConsumer outputStreamConsumer, File baseDir, RevisionContext revisionContext, final SubprocessExecutionContext execCtx) {\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    @Override\n    public boolean isCheckExternals() {\n        return false;\n    }\n\n    @Override\n    public String getUrl() {\n        return url;\n    }\n\n    @Override\n    public String urlForCommandLine() {\n        return url;\n    }\n\n    @Override\n    protected UrlArgument getUrlArgument() {\n        return new UrlArgument(url);\n    }\n\n    @Override\n    public String getLongDescription() {\n        return String.format(\"Url: %s\", url);\n    }\n\n    public ValidationBean checkConnection(final SubprocessExecutionContext execCtx) {\n        return null;\n    }\n\n    @Override\n    protected String getLocation() {\n        return getUrl();\n    }\n\n    @Override\n    public String getTypeForDisplay() {\n        return TYPE;\n    }\n\n    @Override\n    public Class getInstanceType() {\n        return TestingMaterialInstance.class;\n    }\n\n    @Override\n    protected void appendCriteria(Map<String, Object> parameters) {\n    }\n\n    @Override\n    protected void appendAttributes(Map<String, Object> parameters) {\n    }\n\n    @Override\n    public MaterialConfig config() {\n        return new TestingMaterialConfig(url);\n    }\n\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.tfs;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\npublic class TfsMaterialInstance extends MaterialInstance {\n\n    private TfsMaterialInstance() {\n        super();\n    }\n\n    public TfsMaterialInstance(String url, String userName, String domain, String projectPath, final String flyweightName) {\n        super(url, userName, null, null, null, null, null, null, flyweightName, null, projectPath, domain, null);\n    }\n\n    @Override public Material toOldMaterial(String name, String folder, String password) {\n        TfsMaterial tfsMaterial = new TfsMaterial(new UrlArgument(url), username, domain, password, projectPath);\n        tfsMaterial.setFolder(folder);\n        setName(name,tfsMaterial);\n        return tfsMaterial;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.helper;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.*;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.config.ConfigurationProperty;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.domain.packagerepository.*;\nimport com.thoughtworks.go.domain.scm.SCM;\nimport com.thoughtworks.go.domain.scm.SCMMother;\nimport com.thoughtworks.go.util.command.UrlArgument;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MaterialsMother {\n\n    public static Materials defaultMaterials() {\n        return defaultSvnMaterialsWithUrl(\"http://some/svn/url\");\n    }\n\n    public static Materials defaultSvnMaterialsWithUrl(String svnUrl) {\n        return new Materials(svnMaterial(svnUrl, \"svnDir\", null, null, false, null));\n    }\n\n    public static Materials multipleMaterials() {\n        Materials materials = new Materials();\n        materials.add(svnMaterial(\"http://svnurl\"));\n        materials.add(hgMaterial(\"http://hgurl\", \"hgdir\"));\n        materials.add(dependencyMaterial(\"cruise\", \"dev\"));\n        return materials;\n    }\n\n     public static Materials twoMaterials() {\n         Materials materials = new Materials();\n         materials.add(svnMaterial(\"http://svnurl\"));\n         materials.add(hgMaterial(\"http://hgurl\", \"hgdir\"));\n         return materials;\n    }\n\n    public static PackageMaterial packageMaterial(){\n        PackageMaterial material = new PackageMaterial(\"p-id\");\n        material.setId(1);\n        PackageRepository repository = PackageRepositoryMother.create(\"repo-id\", \"repo-name\", \"pluginid\", \"version\",\n                new Configuration(ConfigurationPropertyMother.create(\"k1\", false, \"repo-v1\"), ConfigurationPropertyMother.create(\"k2\", false, \"repo-v2\")));\n        PackageDefinition packageDefinition = PackageDefinitionMother.create(\"p-id\", \"package-name\", new Configuration(ConfigurationPropertyMother.create(\"k3\", false, \"package-v1\")), repository);\n        material.setPackageDefinition(packageDefinition);\n        repository.getPackages().add(packageDefinition);\n        return material;\n    }\n\n    public static PackageMaterial packageMaterial(String repoId, String repoName, String pkgId, String pkgName, ConfigurationProperty... properties) {\n        return packageMaterial(repoId, repoName, pkgId, pkgName, \"pluginid\", \"version\", Arrays.asList(properties), Arrays.asList(properties));\n    }\n\n    public static PackageMaterial packageMaterial(String repoId, String repoName, String pkgId, String pkgName, final String pluginid, final String version, List<ConfigurationProperty> repoProperties,\n                                                  List<ConfigurationProperty> packageProperties) {\n        PackageRepository repository = PackageRepositoryMother.create(repoId, repoName, pluginid, version, new Configuration(repoProperties));\n        PackageDefinition packageDefinition = PackageDefinitionMother.create(pkgId, pkgName, new Configuration(packageProperties), repository);\n        repository.getPackages().add(packageDefinition);\n\n        PackageMaterial material = new PackageMaterial(pkgId);\n        material.setId(1);\n        material.setPackageDefinition(packageDefinition);\n        return material;\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial() {\n        ConfigurationProperty k1 = ConfigurationPropertyMother.create(\"k1\", false, \"v1\");\n        ConfigurationProperty k2 = ConfigurationPropertyMother.create(\"k2\", false, \"v2\");\n        return pluggableSCMMaterial(\"scm-id\", \"scm-name\", k1, k2);\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial(String scmId, String scmName, ConfigurationProperty... properties) {\n        return pluggableSCMMaterial(scmId, scmName, \"pluginid\", \"version\", Arrays.asList(properties));\n    }\n\n    public static PluggableSCMMaterial pluggableSCMMaterial(String scmId, String scmName, final String pluginid, final String version, List<ConfigurationProperty> properties) {\n        PluggableSCMMaterial material = new PluggableSCMMaterial(scmId);\n        material.setId(1);\n        SCM scmConfig = SCMMother.create(scmId, scmName, pluginid, version, new Configuration(properties));\n        material.setSCMConfig(scmConfig);\n        return material;\n    }\n\n    public static DependencyMaterial dependencyMaterial(String pipelineName, String stageName) {\n        return new DependencyMaterial(new CaseInsensitiveString(pipelineName), new CaseInsensitiveString(stageName));\n    }\n\n    public static DependencyMaterial dependencyMaterial() {\n        return new DependencyMaterial(new CaseInsensitiveString(\"pipeline-name\"), new CaseInsensitiveString(\"stage-name\"));\n    }\n\n    public static Materials hgMaterials(String url) {\n        return hgMaterials(url, null);\n    }\n\n    public static Materials hgMaterials(String url, String folder) {\n        return new Materials(hgMaterial(url, folder));\n    }\n\n    public static HgMaterial hgMaterial(String url, String folder) {\n        final HgMaterial material = new HgMaterial(url, folder);\n        material.setAutoUpdate(true);\n        return material;\n    }\n\n    public static HgMaterial hgMaterial() {\n        return new HgMaterial(\"hg-url\", null);\n    }\n\n    public static HgMaterial hgMaterial(String url) {\n        return hgMaterial(url, null);\n    }\n\n    public static Materials gitMaterials(String url) {\n        return gitMaterials(url, null, null);\n    }\n\n    public static Materials gitMaterials(String url, String branch) {\n        return gitMaterials(url, null, branch);\n    }\n\n    public static Materials gitMaterials(String url, String submoduleFolder, String branch) {\n        return new Materials(gitMaterial(url, submoduleFolder, branch));\n    }\n\n    public static GitMaterial gitMaterial(String url) {\n        return gitMaterial(url, null, null);\n    }\n\n    public static GitMaterial gitMaterial(String url, String submoduleFolder, String branch) {\n        GitMaterial gitMaterial = new GitMaterial(url, branch);\n        gitMaterial.setSubmoduleFolder(submoduleFolder);\n        return gitMaterial;\n    }\n\n    public static Materials p4Materials(String view) {\n        P4Material material = p4Material(\"localhost:1666\", \"user\", \"password\", view, true);\n        return new Materials(material);\n    }\n\n    public static P4Material p4Material() {\n        return p4Material(\"serverAndPort\", null, null, \"view\", false);\n    }\n\n    public static P4Material p4Material(String serverAndPort, String userName, String password, String view, boolean useTickets) {\n        final P4Material material = new P4Material(serverAndPort, view, userName);\n        material.setAutoUpdate(true);\n        material.setPassword(password);\n        material.setUseTickets(useTickets);\n        return material;\n    }\n\n    public static TfsMaterial tfsMaterial(String url) {\n        return new TfsMaterial(new UrlArgument(url), \"username\", \"domain\", \"password\", \"project-path\");\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl, String folder) {\n        return svnMaterial(svnUrl, folder, \"user\", \"pass\", true, \"*.doc\");\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl, String folder, String userName, String password, boolean checkExternals, String filterPattern) {\n        SvnMaterial svnMaterial = new SvnMaterial(svnUrl, userName, password, checkExternals, folder);\n        if (filterPattern != null)\n            svnMaterial.setFilter(new Filter(new IgnoredFiles(filterPattern)));\n        return svnMaterial;\n    }\n\n    public static SvnMaterial svnMaterial(String svnUrl) {\n        return svnMaterial(svnUrl, \"svnDir\");\n    }\n\n    public static SvnMaterial svnMaterial() {\n        return svnMaterial(\"url\");\n    }\n\n    public static Material filteredHgMaterial(String pattern) {\n        HgMaterial material = hgMaterial();\n        material.setFilter(new Filter(new IgnoredFiles(pattern)));\n        return material;\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.server.service;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.exceptions.BadRequestException;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.materials.PackageMaterial;\nimport com.thoughtworks.go.config.materials.PluggableSCMMaterial;\nimport com.thoughtworks.go.config.materials.SubprocessExecutionContext;\nimport com.thoughtworks.go.config.materials.dependency.DependencyMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterial;\nimport com.thoughtworks.go.config.materials.git.GitMaterialConfig;\nimport com.thoughtworks.go.config.materials.mercurial.HgMaterial;\nimport com.thoughtworks.go.config.materials.perforce.P4Material;\nimport com.thoughtworks.go.config.materials.svn.SvnMaterial;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.MaterialRevision;\nimport com.thoughtworks.go.domain.MaterialRevisions;\nimport com.thoughtworks.go.domain.PipelineRunIdInfo;\nimport com.thoughtworks.go.domain.config.Configuration;\nimport com.thoughtworks.go.domain.materials.*;\nimport com.thoughtworks.go.domain.materials.git.GitMaterialInstance;\nimport com.thoughtworks.go.domain.materials.packagematerial.PackageMaterialRevision;\nimport com.thoughtworks.go.domain.materials.scm.PluggableSCMMaterialRevision;\nimport com.thoughtworks.go.domain.packagerepository.PackageDefinition;\nimport com.thoughtworks.go.domain.packagerepository.PackageRepositoryMother;\nimport com.thoughtworks.go.helper.MaterialsMother;\nimport com.thoughtworks.go.helper.ModificationsMother;\nimport com.thoughtworks.go.plugin.access.packagematerial.PackageRepositoryExtension;\nimport com.thoughtworks.go.plugin.access.scm.SCMExtension;\nimport com.thoughtworks.go.plugin.access.scm.SCMPropertyConfiguration;\nimport com.thoughtworks.go.plugin.access.scm.material.MaterialPollResult;\nimport com.thoughtworks.go.plugin.access.scm.revision.SCMRevision;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.PackageConfiguration;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.PackageRevision;\nimport com.thoughtworks.go.plugin.api.material.packagerepository.RepositoryConfiguration;\nimport com.thoughtworks.go.server.dao.FeedModifier;\nimport com.thoughtworks.go.server.domain.Username;\nimport com.thoughtworks.go.server.persistence.MaterialRepository;\nimport com.thoughtworks.go.server.service.materials.GitPoller;\nimport com.thoughtworks.go.server.service.materials.MaterialPoller;\nimport com.thoughtworks.go.server.service.materials.PluggableSCMMaterialPoller;\nimport com.thoughtworks.go.server.service.result.LocalizedOperationResult;\nimport com.thoughtworks.go.server.transaction.TransactionTemplate;\nimport com.thoughtworks.go.server.util.Pagination;\nimport com.thoughtworks.go.serverhealth.HealthStateScope;\nimport com.thoughtworks.go.serverhealth.HealthStateType;\nimport org.joda.time.DateTime;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.experimental.theories.DataPoint;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.domain.packagerepository.PackageDefinitionMother.create;\nimport static com.thoughtworks.go.helper.MaterialConfigsMother.git;\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.emptyList;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.any;\nimport static org.mockito.Mockito.*;\nimport static org.mockito.MockitoAnnotations.initMocks;\n\n@RunWith(Theories.class)\npublic class MaterialServiceTest {\n    private static List MODIFICATIONS = new ArrayList<Modification>();\n\n    @Mock\n    private MaterialRepository materialRepository;\n    @Mock\n    private GoConfigService goConfigService;\n    @Mock\n    private SecurityService securityService;\n    @Mock\n    private PackageRepositoryExtension packageRepositoryExtension;\n    @Mock\n    private SCMExtension scmExtension;\n    @Mock\n    private TransactionTemplate transactionTemplate;\n    @Mock\n    private SecretParamResolver secretParamResolver;\n\n    private MaterialService materialService;\n\n    @Before\n    public void setUp() {\n        initMocks(this);\n        materialService = new MaterialService(materialRepository, goConfigService, securityService,\n                packageRepositoryExtension, scmExtension, transactionTemplate, secretParamResolver);\n    }\n\n    @Test\n    public void shouldUnderstandIfMaterialHasModifications() {\n        assertHasModification(new MaterialRevisions(new MaterialRevision(new HgMaterial(\"foo.com\", null), new Modification(new Date(), \"2\", \"MOCK_LABEL-12\", null))), true);\n        assertHasModification(new MaterialRevisions(), false);\n    }\n\n    @Test\n    public void shouldNotBeAuthorizedToViewAPipeline() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(false);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n        materialService.searchRevisions(\"pipeline\", \"sha\", \"search-string\", pavan, operationResult);\n        verify(operationResult).forbidden(EntityType.Pipeline.forbiddenToView(\"pipeline\", pavan.getUsername()), HealthStateType.general(HealthStateScope.forPipeline(\"pipeline\")));\n    }\n\n    @Test\n    public void shouldReturnTheRevisionsThatMatchTheGivenSearchString() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(true);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n        MaterialConfig materialConfig = mock(MaterialConfig.class);\n        when(goConfigService.materialForPipelineWithFingerprint(\"pipeline\", \"sha\")).thenReturn(materialConfig);\n\n        List<MatchedRevision> expected = asList(new MatchedRevision(\"23\", \"revision\", \"revision\", \"user\", new DateTime(2009, 10, 10, 12, 0, 0, 0).toDate(), \"comment\"));\n        when(materialRepository.findRevisionsMatching(materialConfig, \"23\")).thenReturn(expected);\n        assertThat(materialService.searchRevisions(\"pipeline\", \"sha\", \"23\", pavan, operationResult), is(expected));\n    }\n\n    @Test\n    public void shouldReturnNotFoundIfTheMaterialDoesNotBelongToTheGivenPipeline() {\n        Username pavan = Username.valueOf(\"pavan\");\n        when(securityService.hasViewPermissionForPipeline(pavan, \"pipeline\")).thenReturn(true);\n        LocalizedOperationResult operationResult = mock(LocalizedOperationResult.class);\n\n        when(goConfigService.materialForPipelineWithFingerprint(\"pipeline\", \"sha\")).thenThrow(new RuntimeException(\"Not found\"));\n\n        materialService.searchRevisions(\"pipeline\", \"sha\", \"23\", pavan, operationResult);\n        verify(operationResult).notFound(\"Pipeline '\" + \"pipeline\" + \"' does not contain material with fingerprint '\" + \"sha\" + \"'.\", HealthStateType.general(HealthStateScope.forPipeline(\"pipeline\")));\n    }\n\n    @DataPoint\n    public static RequestDataPoints GIT_LATEST_MODIFICATIONS = new RequestDataPoints(new GitMaterial(\"url\") {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public GitMaterial withShallowClone(boolean value) {\n            return this;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, GitMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints SVN_LATEST_MODIFICATIONS = new RequestDataPoints(new SvnMaterial(\"url\", \"username\", \"password\", true) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, SvnMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints HG_LATEST_MODIFICATIONS = new RequestDataPoints(new HgMaterial(\"url\", null) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, HgMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints TFS_LATEST_MODIFICATIONS = new RequestDataPoints(new TfsMaterial() {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n    }, TfsMaterial.class);\n\n    @DataPoint\n    public static RequestDataPoints P4_LATEST_MODIFICATIONS = new RequestDataPoints(new P4Material(\"url\", \"view\", \"user\") {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, P4Material.class);\n\n    @DataPoint\n    public static RequestDataPoints DEPENDENCY_LATEST_MODIFICATIONS = new RequestDataPoints(new DependencyMaterial(new CaseInsensitiveString(\"p1\"), new CaseInsensitiveString(\"s1\")) {\n        @Override\n        public List<Modification> latestModification(File baseDir, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n\n        @Override\n        public List<Modification> modificationsSince(File baseDir, Revision revision, SubprocessExecutionContext execCtx) {\n            return (List<Modification>) MODIFICATIONS;\n        }\n    }, DependencyMaterial.class);\n\n\n    @Theory\n    public void shouldGetLatestModificationsForGivenMaterial(RequestDataPoints data) {\n        MaterialService spy = spy(materialService);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        List<Modification> actual = spy.latestModification(data.material, null, execCtx);\n        assertThat(actual, is(MODIFICATIONS));\n    }\n\n    @Theory\n    public void shouldGetModificationsSinceARevisionForGivenMaterial(RequestDataPoints data) {\n        Revision revision = mock(Revision.class);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n        MaterialService spy = spy(materialService);\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        List<Modification> actual = spy.modificationsSince(data.material, null, revision, execCtx);\n        assertThat(actual, is(MODIFICATIONS));\n    }\n\n    @Theory\n    public void shouldCheckoutAGivenRevision(RequestDataPoints data) {\n        Revision revision = mock(Revision.class);\n        MaterialPoller materialPoller = mock(MaterialPoller.class);\n        MaterialService spy = spy(materialService);\n        File baseDir = mock(File.class);\n        SubprocessExecutionContext execCtx = mock(SubprocessExecutionContext.class);\n\n        doReturn(data.klass).when(spy).getMaterialClass(data.material);\n        doReturn(materialPoller).when(spy).getPollerImplementation(data.material);\n\n        spy.checkout(data.material, baseDir, revision, execCtx);\n\n        verify(materialPoller).checkout(data.material, baseDir, revision, execCtx);\n    }\n\n    @Test\n    public void shouldThrowExceptionWhenPollerForMaterialNotFound() {\n        try {\n            materialService.latestModification(mock(Material.class), null, null);\n            fail(\"Should have thrown up\");\n        } catch (RuntimeException e) {\n            assertThat(e.getMessage(), is(\"unknown material type null\"));\n        }\n    }\n\n    @Test\n    public void latestModification_shouldResolveSecretsForMaterialConfiguredWithSecretParams() {\n        GitMaterial gitMaterial = spy(new GitMaterial(\"https://example.com\"));\n        MaterialService spy = spy(materialService);\n        GitPoller gitPoller = mock(GitPoller.class);\n\n        doReturn(GitMaterial.class).when(spy).getMaterialClass(gitMaterial);\n        doReturn(true).when(gitMaterial).hasSecretParams();\n        doReturn(gitPoller).when(spy).getPollerImplementation(gitMaterial);\n        when(gitPoller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        spy.latestModification(gitMaterial, null, null);\n\n        verify(secretParamResolver).resolve(gitMaterial);\n    }\n\n    @Test\n    public void modificationsSince_shouldResolveSecretsForMaterialConfiguredWithSecretParams() {\n        GitMaterial gitMaterial = spy(new GitMaterial(\"https://example.com\"));\n        MaterialService spy = spy(materialService);\n        GitPoller gitPoller = mock(GitPoller.class);\n        Class<GitMaterial> toBeReturned = GitMaterial.class;\n\n        doReturn(toBeReturned).when(spy).getMaterialClass(gitMaterial);\n        doReturn(true).when(gitMaterial).hasSecretParams();\n        doReturn(gitPoller).when(spy).getPollerImplementation(gitMaterial);\n        when(gitPoller.modificationsSince(any(), any(), any(), any())).thenReturn(new ArrayList<>());\n\n        spy.modificationsSince(gitMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(gitMaterial);\n    }\n\n    @Test\n    public void shouldGetLatestModificationForPackageMaterial() {\n        PackageMaterial material = new PackageMaterial();\n        PackageDefinition packageDefinition = create(\"id\", \"package\", new Configuration(), PackageRepositoryMother.create(\"id\", \"name\", \"plugin-id\", \"plugin-version\", new Configuration()));\n        material.setPackageDefinition(packageDefinition);\n\n\n        when(packageRepositoryExtension.getLatestRevision(eq(\"plugin-id\"),\n                any(PackageConfiguration.class),\n                any(RepositoryConfiguration.class))).thenReturn(new PackageRevision(\"blah-123\", new Date(), \"user\"));\n\n\n        List<Modification> modifications = materialService.latestModification(material, null, null);\n        assertThat(modifications.get(0).getRevision(), is(\"blah-123\"));\n    }\n\n    @Test\n    public void shouldGetModificationSinceAGivenRevision() {\n        PackageMaterial material = new PackageMaterial();\n        PackageDefinition packageDefinition = create(\"id\", \"package\", new Configuration(), PackageRepositoryMother.create(\"id\", \"name\", \"plugin-id\", \"plugin-version\", new Configuration()));\n        material.setPackageDefinition(packageDefinition);\n\n        when(packageRepositoryExtension.latestModificationSince(eq(\"plugin-id\"),\n                any(PackageConfiguration.class),\n                any(RepositoryConfiguration.class),\n                any(PackageRevision.class))).thenReturn(new PackageRevision(\"new-revision-456\", new Date(), \"user\"));\n        List<Modification> modifications = materialService.modificationsSince(material, null, new PackageMaterialRevision(\"revision-124\", new Date()), null);\n        assertThat(modifications.get(0).getRevision(), is(\"new-revision-456\"));\n    }\n\n    @Test\n    public void shouldGetLatestModification_PluggableSCMMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = MaterialsMother.pluggableSCMMaterial();\n        MaterialInstance materialInstance = pluggableSCMMaterial.createMaterialInstance();\n        when(materialRepository.findMaterialInstance(any(Material.class))).thenReturn(materialInstance);\n        MaterialPollResult materialPollResult = new MaterialPollResult(null, new SCMRevision(\"blah-123\", new Date(), \"user\", \"comment\", null, null));\n        when(scmExtension.getLatestRevision(any(String.class), any(SCMPropertyConfiguration.class), any(Map.class), any(String.class))).thenReturn(materialPollResult);\n\n        List<Modification> modifications = materialService.latestModification(pluggableSCMMaterial, new File(\"/tmp/flyweight\"), null);\n\n        assertThat(modifications.get(0).getRevision(), is(\"blah-123\"));\n    }\n\n    @Test\n    public void shouldGetModificationSince_PluggableSCMMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = MaterialsMother.pluggableSCMMaterial();\n        MaterialInstance materialInstance = pluggableSCMMaterial.createMaterialInstance();\n        when(materialRepository.findMaterialInstance(any(Material.class))).thenReturn(materialInstance);\n        MaterialPollResult materialPollResult = new MaterialPollResult(null, asList(new SCMRevision(\"new-revision-456\", new Date(), \"user\", \"comment\", null, null)));\n        when(scmExtension.latestModificationSince(any(String.class), any(SCMPropertyConfiguration.class), any(Map.class), any(String.class),\n                any(SCMRevision.class))).thenReturn(materialPollResult);\n\n        PluggableSCMMaterialRevision previouslyKnownRevision = new PluggableSCMMaterialRevision(\"revision-124\", new Date());\n        List<Modification> modifications = materialService.modificationsSince(pluggableSCMMaterial, new File(\"/tmp/flyweight\"), previouslyKnownRevision, null);\n\n        assertThat(modifications.get(0).getRevision(), is(\"new-revision-456\"));\n    }\n\n    @Test\n    public void shouldDelegateToMaterialRepository_getTotalModificationsFor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        when(materialRepository.getTotalModificationsFor(gitMaterialInstance)).thenReturn(1L);\n\n        Long totalCount = materialService.getTotalModificationsFor(materialConfig);\n\n        assertThat(totalCount, is(1L));\n    }\n\n    @Test\n    public void shouldDelegateToMaterialRepository_getModificationsFor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Pagination pagination = Pagination.pageStartingAt(0, 10, 10);\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment\", \"email\", new Date(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        when(materialRepository.getModificationsFor(gitMaterialInstance, pagination)).thenReturn(modifications);\n\n        Modifications gotModifications = materialService.getModificationsFor(materialConfig, pagination);\n\n        assertThat(gotModifications, is(modifications));\n    }\n\n    @Test\n    public void shouldGetLatestModificationWithMaterial() {\n        MaterialInstance instance = MaterialsMother.gitMaterial(\"http://example.com/gocd.git\").createMaterialInstance();\n        Modification modification = ModificationsMother.withModifiedFileWhoseNameLengthIsOneK();\n        modification.setMaterialInstance(instance);\n        ArrayList<Modification> mods = new ArrayList<>();\n        mods.add(modification);\n\n        when(materialRepository.getLatestModificationForEachMaterial()).thenReturn(mods);\n\n        Map<String, Modification> modificationsMap = materialService.getLatestModificationForEachMaterial();\n\n        assertEquals(modificationsMap.size(), 1);\n        assertThat(modificationsMap.keySet(), containsInAnyOrder(instance.getFingerprint()));\n        assertEquals(modificationsMap.get(instance.getFingerprint()), modification);\n    }\n\n    @Test\n    public void shouldReturnEmptyMapIfNoMaterialAndModificationFound() {\n        when(materialRepository.getLatestModificationForEachMaterial()).thenReturn(emptyList());\n\n        Map<String, Modification> modificationsMap = materialService.getLatestModificationForEachMaterial();\n\n        assertEquals(modificationsMap.size(), 0);\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchLatestModificationData() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 0, 0, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.Latest), eq(0L), eq(3));\n        assertThat(gotModifications, is(modifications));\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchModificationDataAfterTheGivenCursor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 2, 0, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.After), eq(2L), eq(3));\n    }\n\n    @Test\n    public void history_shouldCallDaoToFetchModificationDataBeforeTheGivenCursor() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.loadHistory(anyLong(), any(), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> gotModifications = materialService.getModificationsFor(materialConfig, \"\", 0, 2, 3);\n\n        verify(materialRepository).loadHistory(anyLong(), eq(FeedModifier.Before), eq(2L), eq(3));\n    }\n\n    @Test\n    public void history_shouldThrowIfTheAfterCursorIsInvalid() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        assertThatCode(() -> materialService.getModificationsFor(materialConfig, \"\", -10, 0, 3))\n                .isInstanceOf(BadRequestException.class)\n                .hasMessage(\"The query parameter 'after', if specified, must be a positive integer.\");\n\n        verify(materialRepository).findMaterialInstance(materialConfig);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    @Test\n    public void history_shouldThrowIfTheBeforeCursorIsInvalid() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n\n        assertThatCode(() -> materialService.getModificationsFor(materialConfig, \"\", 0, -10, 3))\n                .isInstanceOf(BadRequestException.class)\n                .hasMessage(\"The query parameter 'before', if specified, must be a positive integer.\");\n\n        verify(materialRepository).findMaterialInstance(materialConfig);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    @Test\n    public void shouldCallDaoToFetchLatestAndOlderModification() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n        GitMaterialInstance gitMaterialInstance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        PipelineRunIdInfo value = new PipelineRunIdInfo(1, 2);\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(gitMaterialInstance);\n        when(materialRepository.getOldestAndLatestModificationId(anyLong(), anyString())).thenReturn(value);\n\n        PipelineRunIdInfo info = materialService.getLatestAndOldestModification(materialConfig, \"\");\n\n        verify(materialRepository).getOldestAndLatestModificationId(anyLong(), eq(\"\"));\n        assertThat(info, is(value));\n    }\n\n    @Test\n    public void shouldReturnNullIfNoInstanceIsPresent() {\n        GitMaterialConfig materialConfig = git(\"http://test.com\");\n\n        when(materialRepository.findMaterialInstance(materialConfig)).thenReturn(null);\n\n        PipelineRunIdInfo info = materialService.getLatestAndOldestModification(materialConfig, \"\");\n\n        verify(materialRepository, never()).getOldestAndLatestModificationId(anyLong(), anyString());\n        assertThat(info, is(nullValue()));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchLatestMatchingMods() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 0, 0, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.Latest), eq(0L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchMatchingModsAfterCursor() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 3, 0, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.After), eq(3L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldCallDaoToFetchMatchingModsBeforeCursor() {\n        GitMaterialConfig config = git(\"http://test.com\");\n        GitMaterialInstance instance = new GitMaterialInstance(\"http://test.com\", null, null, null, \"flyweight\");\n        Modifications modifications = new Modifications();\n        modifications.add(new Modification(\"user\", \"comment 1\", \"email\", new DateTime().minusHours(1).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 2\", \"email\", new DateTime().minusHours(2).toDate(), \"revision\"));\n        modifications.add(new Modification(\"user\", \"comment 3\", \"email\", new DateTime().minusHours(3).toDate(), \"revision\"));\n\n        when(materialRepository.findMaterialInstance(config)).thenReturn(instance);\n        when(materialRepository.findMatchingModifications(anyLong(), anyString(), any(FeedModifier.class), anyLong(), anyInt())).thenReturn(modifications);\n\n        List<Modification> result = materialService.getModificationsFor(config, \"comment\", 0, 3, 10);\n\n        verify(materialRepository).findMatchingModifications(eq(instance.getId()), eq(\"comment\"), eq(FeedModifier.Before), eq(3L), eq(10));\n        assertThat(result, is(modifications));\n    }\n\n    @Test\n    public void findMatchingMods_shouldReturnNullIfMaterialIsNotPresent() {\n        GitMaterialConfig material = git(\"http://test.com\");\n\n        when(materialRepository.findMaterialInstance(material)).thenReturn(null);\n\n        List<Modification> result = materialService.getModificationsFor(material, \"comment\", 0, 0, 10);\n\n        assertThat(result, is(nullValue()));\n        verify(materialRepository).findMaterialInstance(material);\n        verifyNoMoreInteractions(materialRepository);\n    }\n\n    private void assertHasModification(MaterialRevisions materialRevisions, boolean b) {\n        HgMaterial hgMaterial = new HgMaterial(\"foo.com\", null);\n        when(materialRepository.findLatestModification(hgMaterial)).thenReturn(materialRevisions);\n        assertThat(materialService.hasModificationFor(hgMaterial), is(b));\n    }\n\n    private static class RequestDataPoints<T extends Material> {\n        final T material;\n        final Class klass;\n\n        public RequestDataPoints(T material, Class klass) {\n            this.material = material;\n            this.klass = klass;\n        }\n    }\n\n    @Test\n    public void latestModification_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.latestModification(pluggableSCMMaterial, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n\n    @Test\n    public void modificationsSince_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.modificationsSince(pluggableSCMMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n\n    @Test\n    public void checkout_shouldResolveSecretsForPluggableScmMaterial() {\n        PluggableSCMMaterial pluggableSCMMaterial = spy(new PluggableSCMMaterial());\n        MaterialService serviceSpy = spy(materialService);\n        PluggableSCMMaterialPoller poller = mock(PluggableSCMMaterialPoller.class);\n\n        doReturn(PluggableSCMMaterial.class).when(serviceSpy).getMaterialClass(pluggableSCMMaterial);\n        doReturn(true).when(pluggableSCMMaterial).hasSecretParams();\n        doReturn(poller).when(serviceSpy).getPollerImplementation(pluggableSCMMaterial);\n        when(poller.latestModification(any(), any(), any())).thenReturn(new ArrayList<>());\n\n        serviceSpy.checkout(pluggableSCMMaterial, null, null, null);\n\n        verify(secretParamResolver).resolve(pluggableSCMMaterial);\n    }\n}\n", "/*\n * Copyright 2020 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.domain.materials.tfs;\n\nimport com.thoughtworks.go.config.CaseInsensitiveString;\nimport com.thoughtworks.go.config.materials.tfs.TfsMaterial;\nimport com.thoughtworks.go.domain.MaterialInstance;\nimport com.thoughtworks.go.domain.materials.Material;\nimport com.thoughtworks.go.server.cache.GoCache;\nimport com.thoughtworks.go.server.dao.DatabaseAccessHelper;\nimport com.thoughtworks.go.server.persistence.MaterialRepository;\nimport com.thoughtworks.go.util.GoConfigFileHelper;\nimport com.thoughtworks.go.util.command.UrlArgument;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\n        \"classpath:/applicationContext-global.xml\",\n        \"classpath:/applicationContext-dataLocalAccess.xml\",\n        \"classpath:/testPropertyConfigurer.xml\",\n        \"classpath:/spring-all-servlet.xml\",\n})\npublic class TfsMaterialPersistenceTest {\n    @Autowired private DatabaseAccessHelper dbHelper;\n    @Autowired private MaterialRepository materialRepository;\n    @Autowired private GoCache goCache;\n\n    private GoConfigFileHelper configHelper = new GoConfigFileHelper();\n\n    @Before\n    public void setUp() throws Exception {\n        goCache.clear();\n        configHelper.onSetUp();\n        dbHelper.onSetUp();\n    }\n\n    @After\n    public void teardown() throws Exception {\n        dbHelper.onTearDown();\n        configHelper.onTearDown();\n    }\n\n    @Test\n    public void shouldBeAbleToConvertAMaterialInstanceObjectToTfsMaterialObject() {\n        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"password\", \"/dev/null\");\n        tfsCfg.setFolder(\"folder\");\n        tfsCfg.setName(new CaseInsensitiveString(\"materialName\"));\n        MaterialInstance tfsInstance = materialRepository.findOrCreateFrom(tfsCfg);\n\n        Material material = tfsInstance.toOldMaterial(\"materialName\", \"folder\", \"password\");\n        assertThat(material, is(tfsCfg));\n    }\n\n    @Test\n    public void shouldFindOldMaterial() {\n        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n        MaterialInstance tfsInstance1 = materialRepository.findOrCreateFrom(tfsCfg);\n        goCache.clear();\n        MaterialInstance tfsInstance2 = materialRepository.findOrCreateFrom(tfsCfg);\n\n        assertThat(tfsInstance1, is(tfsInstance2));\n    }\n\n    @Test\n    public void shouldSaveMaterialInstance() throws Exception {\n        TfsMaterial tfsCfg = new TfsMaterial(new UrlArgument(\"url\"), \"loser\", \"CORPORATE\", \"foo_bar_baz\", \"/dev/null\");\n        MaterialInstance materialInstance = materialRepository.findOrCreateFrom(tfsCfg);\n        assertThat(materialRepository.findMaterialInstance(tfsCfg), is(materialInstance));\n    }\n\n}\n"], "filenames": ["api/api-server-maintenance-mode-v1/src/test/groovy/com/thoughtworks/go/apiv1/servermaintenancemode/representers/MaintenanceModeInfoRepresenterTest.groovy", "common/src/test/java/com/thoughtworks/go/config/materials/perforce/P4MaterialTest.java", "common/src/test/java/com/thoughtworks/go/config/materials/tfs/TfsMaterialTest.java", "common/src/test/java/com/thoughtworks/go/domain/materials/DummyMaterial.java", "common/src/test/java/com/thoughtworks/go/domain/materials/svn/SvnMaterialTest.java", "common/src/test/java/com/thoughtworks/go/server/service/MagicalMaterialAndMaterialConfigConversionTest.java", "domain/src/main/java/com/thoughtworks/go/config/materials/Materials.java", "domain/src/main/java/com/thoughtworks/go/config/materials/ScmMaterial.java", "domain/src/main/java/com/thoughtworks/go/config/materials/git/GitMaterial.java", "domain/src/main/java/com/thoughtworks/go/config/materials/mercurial/HgMaterial.java", "domain/src/main/java/com/thoughtworks/go/config/materials/perforce/P4Material.java", "domain/src/main/java/com/thoughtworks/go/config/materials/svn/SvnMaterial.java", "domain/src/main/java/com/thoughtworks/go/config/materials/tfs/TfsMaterial.java", "domain/src/main/java/com/thoughtworks/go/domain/materials/TestingMaterial.java", "domain/src/main/java/com/thoughtworks/go/domain/materials/tfs/TfsMaterialInstance.java", "domain/src/test/java/com/thoughtworks/go/helper/MaterialsMother.java", "server/src/test-fast/java/com/thoughtworks/go/server/service/MaterialServiceTest.java", "server/src/test-integration/java/com/thoughtworks/go/domain/materials/tfs/TfsMaterialPersistenceTest.java"], "buggy_code_start_loc": [137, 101, 71, 21, 332, 183, 35, 24, 28, 29, 61, 56, 28, 21, 20, 32, 52, 22], "buggy_code_end_loc": [138, 126, 343, 39, 395, 185, 209, 188, 69, 72, 97, 85, 72, 44, 35, 179, 204, 89], "fixing_code_start_loc": [137, 100, 71, 20, 331, 183, 34, 23, 27, 28, 61, 55, 27, 20, 19, 31, 51, 21], "fixing_code_end_loc": [138, 100, 291, 38, 343, 184, 208, 150, 68, 71, 89, 81, 71, 43, 34, 178, 203, 88], "type": "CWE-668", "message": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 leak the symmetric key used to encrypt/decrypt any secure variables/secrets in GoCD configuration to authenticated agents. A malicious/compromised agent may then expose that key from memory, and potentially allow an attacker the ability to decrypt secrets intended for other agents/environments if they also are able to obtain access to encrypted configuration values from the GoCD server. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds.", "other": {"cve": {"id": "CVE-2022-39309", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-14T20:15:15.553", "lastModified": "2022-10-21T20:24:11.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 leak the symmetric key used to encrypt/decrypt any secure variables/secrets in GoCD configuration to authenticated agents. A malicious/compromised agent may then expose that key from memory, and potentially allow an attacker the ability to decrypt secrets intended for other agents/environments if they also are able to obtain access to encrypted configuration values from the GoCD server. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds."}, {"lang": "es", "value": "GoCD es un servidor de entrega continua. GoCD le ayuda a automatizar y agilizar el ciclo de construcci\u00f3n-prueba-lanzamiento para la entrega continua de su producto. Las versiones de GoCD anteriores a 21.1.0 filtran la clave sim\u00e9trica usada para cifrar/descifrar cualquier variable/secreto seguro en la configuraci\u00f3n de GoCD a los agentes autenticados. Un agente malicioso/comprometido puede entonces exponer esa clave desde la memoria, y potencialmente permitir a un atacante la capacidad de descifrar secretos destinados a otros agentes/entornos si tambi\u00e9n son capaces de obtener acceso a los valores de configuraci\u00f3n cifrados del servidor GoCD. Este problema ha sido corregido en GoCD versi\u00f3n 21.1.0. Actualmente no se presentan mitigaciones\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}, {"lang": "en", "value": "CWE-499"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thoughtworks:gocd:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.1.0", "matchCriteriaId": "AE600F59-5CB0-4E7F-B58F-16121BF8F61E"}]}]}], "references": [{"url": "https://github.com/gocd/gocd/commit/691b479f1310034992da141760e9c5d1f5b60e8a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/gocd/gocd/releases/tag/21.1.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/gocd/gocd/security/advisories/GHSA-f9qg-xcxq-cgv9", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://www.gocd.org/releases/#21-1-0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/gocd/gocd/commit/691b479f1310034992da141760e9c5d1f5b60e8a"}}