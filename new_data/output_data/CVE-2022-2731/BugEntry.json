{"buggy_code": ["<?php\n\n/**\n * This script creates a backup tarball, emr_backup.tar, and sends\n * it to the user's browser for download.  The tarball includes:\n *\n * an OpenEMR database dump  (openemr.sql.gz)\n * the OpenEMR web directory (openemr.tar.gz)\n *\n * The OpenEMR web directory is important because it includes config-\n * uration files, patient documents, and possible customizations, and\n * also because the database structure is dependent on the installed\n * OpenEMR version.\n *\n * This script depends on execution of some external programs:\n * mysqldump & pg_dump.  It has been tested with Debian and Ubuntu\n * Linux and with Windows XP.\n *\n * DO NOT PRESUME THAT IT WORKS FOR YOU until you have successfully\n * tested a restore!\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Bill Cernansky (www.mi-squared.com)\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Stephen Waite <stephen.waite@cmsvt.com>\n * @copyright Copyright (c) 2008-2014, 2016, 2021-2022 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2019 Stephen Waite <stephen.waite@cmsvt.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nset_time_limit(0);\nrequire_once(\"../globals.php\");\nrequire_once(\"$srcdir/layout.inc.php\");\nrequire_once(\"$srcdir/patient.inc\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Core\\Header;\n\nif (!empty($_POST)) {\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n}\n\nif (!extension_loaded('zlib')) {\n      die('Abort ' . basename(__FILE__) . ' : Missing zlib extensions');\n}\n\nif (!function_exists('gzopen') && function_exists('gzopen64')) {\n    function gzopen($filename, $mode, $use_include_path = 0)\n    {\n        return gzopen64($filename, $mode, $use_include_path);\n    }\n}\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Backup\")]);\n    exit;\n}\n\n// When automatically including lists used in selected layouts, these lists are not included.\n$excluded_lists = array(\n    'allergy_issue_list',\n    'boolean',\n    'education_level',\n    'ethrace',\n    'Gender',\n    'genhivhist',\n    'occupations',\n    'Relation_to_Client',\n    'sex',\n    'Sexual_Orientation',\n    'yesno',\n);\n\n$BTN_TEXT_CREATE = xl('Create Backup');\n$BTN_TEXT_EXPORT = xl('Export Configuration');\n$BTN_TEXT_IMPORT = xl('Import Configuration');\n$BTN_TEXT_LOG = xl('Backup/Delete Log Data');\n// ViSolve: Create Log  Backup button\n$BTN_TEXT_CREATE_EVENTLOG = xl('Create Eventlog Backup');\n\n$form_step   = isset($_POST['form_step']) ? trim($_POST['form_step']) : '0';\n$form_status = isset($_POST['form_status' ]) ? trim($_POST['form_status' ]) : '';\n\nif (!empty($_POST['form_export'])) {\n    $form_step = 101;\n}\n\nif (!empty($_POST['form_import'])) {\n    $form_step = 201;\n}\n\n//ViSolve: Assign Unique Number for the Log Creation\nif (!empty($_POST['form_backup'])) {\n    $form_step = 301;\n}\n\nif (!empty($_POST['form_logarchive'])) {\n    $form_step = 401;\n}\n\n// When true the current form will submit itself after a brief pause.\n$auto_continue = false;\n\n# set up main paths\n$backup_file_prefix = \"emr_backup\";\n$backup_file_suffix = \".tar\";\n$TMP_BASE = $GLOBALS['temporary_files_dir'] . \"/openemr_web_backup\";\n$BACKUP_DIR = $TMP_BASE . \"/emr_backup\";\n$TAR_FILE_PATH = $TMP_BASE . DIRECTORY_SEPARATOR . $backup_file_prefix . $backup_file_suffix;\n$EXPORT_FILE = $GLOBALS['temporary_files_dir'] . \"/openemr_config.sql\";\n$MYSQL_PATH = $GLOBALS['mysql_bin_dir'];\n$PERL_PATH = $GLOBALS['perl_bin_dir'];\n\nif ($form_step == 6) {\n    header(\"Pragma: public\");\n    header(\"Expires: 0\");\n    header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n    header(\"Content-Type: application/force-download\");\n    header(\"Content-Length: \" . filesize($TAR_FILE_PATH));\n    header(\"Content-Disposition: attachment; filename=\" . basename($TAR_FILE_PATH));\n    header(\"Content-Description: File Transfer\");\n\n    if (is_file($TAR_FILE_PATH)) {\n        $chunkSize = 1024 * 1024;\n        $handle = fopen($TAR_FILE_PATH, 'rb');\n        while (!feof($handle)) {\n            $buffer = fread($handle, $chunkSize);\n            echo $buffer;\n            ob_flush();\n            flush();\n        }\n        fclose($handle);\n    } else {\n        obliterate_dir($BACKUP_DIR);\n        $dieMsg = xlt(\"Backup Failed missing generated file\");\n        die($dieMsg);\n    }\n    unlink($TAR_FILE_PATH);\n    obliterate_dir($BACKUP_DIR);\n    exit(0);\n}\n\nif ($form_step == 104) {\n    header(\"Pragma: public\");\n    header(\"Expires: 0\");\n    header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n    header(\"Content-Type: application/force-download\");\n    header(\"Content-Length: \" . filesize($EXPORT_FILE));\n    header(\"Content-Disposition: attachment; filename=\" . basename($EXPORT_FILE));\n    header(\"Content-Description: File Transfer\");\n    readfile($EXPORT_FILE);\n    unlink($EXPORT_FILE);\n    exit(0);\n}\n\n// CSV export of lists.\n//\nif ($form_step == 102.1) {\n    if (is_array($_POST['form_sel_lists'] ?? '')) {\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=lists.csv\");\n        header(\"Content-Description: File Transfer\");\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        echo \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        echo csvEscape(xl('List')) . ',';\n        echo csvEscape(xl('ID')) . ',';\n        echo csvEscape(xl('Title')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('Order')) . ',';\n        echo csvEscape(xl('Default')) . ',';\n        echo csvEscape(xl('Active')) . ',';\n        echo csvEscape(xl('Global ID')) . ',';\n        echo csvEscape(xl('Notes')) . ',';\n        echo csvEscape(xl('Codes')) . '';\n        echo \"\\n\";\n        foreach ($_POST['form_sel_lists'] as $listid) {\n            $res = sqlStatement(\n                \"SELECT * FROM list_options WHERE list_id = ? ORDER BY seq, title\",\n                array($listid)\n            );\n            while ($row = sqlFetchArray($res)) {\n                $xtitle = xl_list_label($row['title']);\n                if ($xtitle === $row['title']) {\n                    $xtitle = '';\n                }\n                echo csvEscape($row['list_id']) . ',';\n                echo csvEscape($row['option_id']) . ',';\n                echo csvEscape($row['title']) . ',';\n                echo csvEscape($xtitle) . ',';\n                echo csvEscape($row['seq']) . ',';\n                echo csvEscape($row['is_default']) . ',';\n                echo csvEscape($row['activity']) . ',';\n                echo csvEscape($row['mapping']) . ',';\n                echo csvEscape($row['notes']) . ',';\n                echo csvEscape($row['codes']) . '';\n                echo \"\\n\";\n            }\n        }\n    }\n    exit(0);\n}\n\n// CSV export of layouts.\n//\nif ($form_step == 102.2) {\n    if (is_array($_POST['form_sel_layouts'] ?? '')) {\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=layouts.csv\");\n        header(\"Content-Description: File Transfer\");\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        echo \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        echo csvEscape(xl('Form')) . ',';\n        echo csvEscape(xl('Order')) . ',';\n        echo csvEscape(xl('Source')) . ',';\n        echo csvEscape(xl('Group')) . ',';\n        echo csvEscape(xl('ID')) . ',';\n        echo csvEscape(xl('Label')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('UOR')) . ',';\n        echo csvEscape(xl('Type')) . ',';\n        echo csvEscape(xl('Width')) . ',';\n        echo csvEscape(xl('Height')) . ',';\n        echo csvEscape(xl('Max')) . ',';\n        echo csvEscape(xl('List')) . ',';\n        echo csvEscape(xl('Label Cols')) . ',';\n        echo csvEscape(xl('Data Cols')) . ',';\n        echo csvEscape(xl('Options')) . ',';\n        echo csvEscape(xl('Description')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('Conditions')) . '';\n        echo \"\\n\";\n        foreach ($_POST['form_sel_layouts'] as $layoutid) {\n            $res = sqlStatement(\n                \"SELECT l.*, p.grp_title FROM layout_options AS l \" .\n                \"JOIN layout_group_properties AS p ON p.grp_form_id = l.form_id AND \" .\n                \"p.grp_group_id = l.group_id AND p.grp_activity = 1 \" .\n                \"WHERE l.form_id = ? ORDER BY l.group_id, l.seq, l.title\",\n                array($layoutid)\n            );\n            while ($row = sqlFetchArray($res)) {\n                $xtitle = xl_layout_label($row['title']);\n                if ($xtitle === $row['title']) {\n                    $xtitle = '';\n                }\n                $xdesc = $row['description'];\n                if (substr($xdesc, 0, 1) != '<') {\n                    $xdesc = xl_layout_label($xdesc);\n                }\n                if ($xdesc === $row['description']) {\n                    $xdesc = '';\n                }\n                echo csvEscape($row['form_id'     ]) . ',';\n                echo csvEscape($row['seq'         ]) . ',';\n                echo csvEscape($sources[$row['source']]) . ',';\n                echo csvEscape($row['grp_title'   ]) . ',';\n                echo csvEscape($row['field_id'    ]) . ',';\n                echo csvEscape($row['title'       ]) . ',';\n                echo csvEscape($xtitle) . ',';\n                echo csvEscape($UOR[$row['uor']]) . ',';\n                echo csvEscape($datatypes[$row['data_type']]) . ',';\n                echo csvEscape($row['fld_length'  ]) . ',';\n                echo csvEscape($row['fld_rows'    ]) . ',';\n                echo csvEscape($row['max_length'  ]) . ',';\n                echo csvEscape($row['list_id'     ]) . ',';\n                echo csvEscape($row['titlecols'   ]) . ',';\n                echo csvEscape($row['datacols'    ]) . ',';\n                echo csvEscape($row['edit_options']) . ',';\n                echo csvEscape($row['description' ]) . ',';\n                echo csvEscape($xdesc) . ',';\n                echo csvEscape($row['conditions'  ]) . '';\n                echo \"\\n\";\n            }\n        }\n    }\n    exit(0);\n}\n\n// CSV export of old log entries.\n//\nif ($form_step == 402) {\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n        // This is the \"filename\" for the Content-Disposition header.\n        $filename = \"log_archive_{$end_date}.csv\";\n\n        $outfile = tempnam($GLOBALS['temporary_files_dir'], 'OET');\n        if ($outfile === false) {\n            die(\"tempnam('\" . text($GLOBALS['temporary_files_dir']) . \"','OET') failed.\\n\");\n        }\n        $hout = fopen($outfile, \"w\");\n        $wcount = 0;\n\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        $out = \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        $out .= csvEscape(xl('id')) . ',';\n        $out .= csvEscape(xl('date')) . ',';\n        $out .= csvEscape(xl('event')) . ',';\n        $out .= csvEscape(xl('user')) . ',';\n        $out .= csvEscape(xl('groupname')) . ',';\n        $out .= csvEscape(xl('comments')) . ',';\n        $out .= csvEscape(xl('user_notes')) . ',';\n        $out .= csvEscape(xl('patient_id')) . ',';\n        $out .= csvEscape(xl('success')) . ',';\n        $out .= csvEscape(xl('checksum')) . ',';\n        $out .= csvEscape(xl('crt_user')) . '';\n        $out .= \"\\n\";\n        fwrite($hout, $out);\n\n        // Somewhere there's a memory leak in the ADODB stuff. We do multiple selects to\n        // work around this.\n        $lastid = 0;\n        while (true) {\n            $res = sqlStatementNoLog(\n                \"SELECT * FROM `log` WHERE `date` <= ? AND `id` > ? ORDER BY `id` LIMIT 50000\",\n                array(\"$end_date 23:59:59\", $lastid)\n            );\n            if (!sqlNumRows($res)) {\n                break;\n            }\n            while ($row = sqlFetchArray($res)) {\n                $out  = csvEscape($row['id'        ]) . ',' .\n                        csvEscape($row['date'      ]) . ',' .\n                        csvEscape($row['event'     ]) . ',' .\n                        csvEscape($row['user'      ]) . ',' .\n                        csvEscape($row['groupname' ]) . ',' .\n                        csvEscape($row['comments'  ]) . ',' .\n                        csvEscape($row['user_notes']) . ',' .\n                        csvEscape($row['patient_id']) . ',' .\n                        csvEscape($row['success'   ]) . ',' .\n                        csvEscape($row['checksum'  ]) . ',' .\n                        csvEscape($row['crt_user'  ]) . '' .\n                        \"\\n\";\n                if (!fwrite($hout, $out)) {\n                    die(\"fwrite() failed!\");\n                }\n                $lastid = $row['id'];\n            }\n        }\n\n        fclose($hout);\n\n        // Do compression if requested (it is!)\n        if (true) {\n            $zip = new ZipArchive();\n            $zippedoutfile = tempnam($GLOBALS['temporary_files_dir'], 'OEZ');\n            if ($zippedoutfile === false) {\n                die(\"tempnam('\" . text($GLOBALS['temporary_files_dir']) . \"','OEZ') failed.\\n\");\n            }\n            if ($zip->open($zippedoutfile, ZIPARCHIVE::OVERWRITE) !== true) {\n                die(xlt('Cannot create file') . \" '$zipname'\\n\");\n            }\n            if (!$zip->addFile($outfile, $filename)) {\n                die(xlt('Cannot add to archive') . \" '$zipname'\\n\");\n            }\n            $zip->close();\n            $filename .= '.zip';\n            unlink($outfile);\n            $outfile = $zippedoutfile;\n        }\n\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=$filename\");\n        header(\"Content-Description: File Transfer\");\n        header(\"Content-Length: \" . filesize($outfile));\n        readfile($outfile);\n        unlink($outfile);\n    } else {\n        die(xlt(\"End date is missing!\"));\n    }\n    exit(0);\n}\n\n?>\n<html>\n\n<head>\n<?php Header::setupHeader(['datetime-picker']); ?>\n<title><?php echo xlt('Backup'); ?></title>\n\n<script>\n\n$(function () {\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_showseconds = false; ?>\n        <?php $datetimepicker_formatInput = true; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n        <?php // can add any additional javascript settings to datetimepicker here; need to prepend first setting with a comma ?>\n    });\n});\n\n// Called from export page or log archive page to specify what it will do.\n//   102   = SQL export of selected tables, lists and layouts\n//   102.1 = Download selected lists as CSV\n//   102.2 = download selected layouts as CSV\n//   402   = CSV export of log archive\n//   405   = Delete from the log\n//\nfunction export_submit(step) {\n    var f = document.forms[0];\n    f.form_step.value = step;\n    top.restoreSession();\n    f.submit();\n}\n\n</script>\n\n</head>\n\n<body class=\"body_top\">\n<center>\n&nbsp;<br />\n<form method='post' action='backup.php' enctype='multipart/form-data' onsubmit='return top.restoreSession()'>\n<input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n\n<table<?php echo ($form_step != 101) ? \" style='width:50em'\" : \"\"; ?>>\n <tr>\n  <td>\n\n<?php\n$cmd = '';\n// $cmdarr exists because some commands may be too long for a single exec.\n$cmdarr = array();\n$mysql_cmd = $MYSQL_PATH . DIRECTORY_SEPARATOR . 'mysql';\n$mysql_dump_cmd = $mysql_cmd . 'dump';\n$mysql_ssl = '';\nif (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\")) {\n    // Support for mysql SSL encryption\n    $mysql_ssl = \" --ssl-ca=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\") . \" \";\n    if (\n        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") &&\n        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\")\n    ) {\n        // Support for mysql SSL client based cert authentication\n        $mysql_ssl .= \"--ssl-cert=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\") . \" \";\n        $mysql_ssl .= \"--ssl-key=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") . \" \";\n    }\n}\n\n$file_to_compress = '';  // if named, this iteration's file will be gzipped after it is created\n$eventlog = 0;  // Eventlog Flag\n\nif ($form_step == 0) {\n    echo \"<table>\\n\";\n    echo \" <tr>\\n\";\n    echo \"  <td><input class='btn btn-secondary' type='submit' name='form_create' value='\" . attr($BTN_TEXT_CREATE) . \"' /></td>\\n\";\n    echo \"  <td>\" . xlt('Create and download a full backup') . \"</td>\\n\";\n    echo \" </tr>\\n\";\n  // The config import/export feature is optional.\n    if (!empty($GLOBALS['configuration_import_export'])) {\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_export' value='\" . attr($BTN_TEXT_EXPORT) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Download configuration data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_import' value='\" . attr($BTN_TEXT_IMPORT) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Upload configuration data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_logarchive' value='\" . attr($BTN_TEXT_LOG) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Download and/or delete log data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n    }\n\n// ViSolve : Add ' Create Log table backup Button'\n    echo \" <tr>\\n\";\n    echo \"  <td><input class='btn btn-secondary' type='submit' name='form_backup' value='\" . attr($BTN_TEXT_CREATE_EVENTLOG) . \"' /></td>\\n\";\n    echo \"  <td>\" . xlt('Create Eventlog Backup') . \"</td>\\n\";\n    echo \" </tr>\\n\";\n    echo \" <tr>\\n\";\n    echo \"  <td></td><td class='text'>\" . xlt('Note that the Eventlog Backup is currently set to save in the following folder') . \": \" . text($GLOBALS['backup_log_dir']) . \" . \" . xlt('Recommend setting the Path for Event Log Backup in Globals settings in the Miscellaneous section to something other than your tmp/temp directory.') . \" \" . xlt('Please refer to') . ' README-Log-Backup.txt ' . xlt('file in the Documentation directory to learn how to automate the process of creating log backups') . \".</td>\\n\";\n    echo \" </tr>\\n\";\n    echo \"</table>\\n\";\n}\n\nif ($form_step == 1) {\n    $form_status .= xla('Dumping OpenEMR database') . \"...<br />\";\n    echo nl2br($form_status);\n    if (file_exists($TAR_FILE_PATH)) {\n        if (! unlink($TAR_FILE_PATH)) {\n            die(xlt(\"Couldn't remove old backup file:\") . \" \" . text($TAR_FILE_PATH));\n        }\n    }\n\n    if (! obliterate_dir($TMP_BASE)) {\n        die(xlt(\"Couldn't remove dir:\") . \" \" . text($TMP_BASE));\n    }\n\n    if (! mkdir($BACKUP_DIR, 0777, true)) {\n        die(xlt(\"Couldn't create backup dir:\") . \" \" . text($BACKUP_DIR));\n    }\n\n    $file_to_compress = \"$BACKUP_DIR/openemr.sql\";   // gzip this file after creation\n\n    if ($GLOBALS['include_de_identification'] == 1) {\n        //include routines during backup when de-identification is enabled\n        $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n        \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n        \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n        \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n        \" --routines\" .\n        \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n        \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($file_to_compress) . \" $mysql_ssl \" .\n        escapeshellarg($sqlconf[\"dbase\"]);\n    } else {\n        $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n        \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n        \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n        \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n        \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n        \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($file_to_compress) . \" $mysql_ssl \" .\n        escapeshellarg($sqlconf[\"dbase\"]);\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 2) {\n    ++$form_step;\n}\n\nif ($form_step == 3) {\n    $form_status .= xla('Dumping OpenEMR web directory tree') . \"...<br />\";\n    echo nl2br($form_status);\n    $cur_dir = getcwd();\n    chdir($webserver_root);\n\n    // Select the files and directories to archive.  Basically everything\n    // except site-specific data for other sites.\n    $file_list = array();\n    $dh = opendir($webserver_root);\n    if (!$dh) {\n        die(\"Cannot read directory '\" . text($webserver_root) . \"'.\");\n    }\n\n    while (false !== ($filename = readdir($dh))) {\n        if ($filename == '.' || $filename == '..') {\n            continue;\n        }\n\n        if ($filename == 'sites') {\n            // Omit other sites.\n            $file_list[] = \"$filename/\" . $_SESSION['site_id'];\n        } else {\n            $file_list[] = $filename;\n        }\n    }\n\n    closedir($dh);\n\n    $arch_file = $BACKUP_DIR . DIRECTORY_SEPARATOR . \"openemr.tar.gz\";\n    if (!create_tar_archive($arch_file, \"gz\", $file_list)) {\n        die(xlt(\"An error occurred while dumping OpenEMR web directory tree\"));\n    }\n\n    chdir($cur_dir);\n    $auto_continue = true;\n}\n\nif ($form_step == 4) {\n     ++$form_step;\n}\n\nif ($form_step == 5) {   // create the final compressed tar containing all files\n    $form_status .= xla('Backup file has been created. Will now send download.') . \"<br />\";\n    echo nl2br($form_status);\n    $cur_dir = getcwd();\n    chdir($BACKUP_DIR);\n    $file_list = array('.');\n    if (!create_tar_archive($TAR_FILE_PATH, '', $file_list)) {\n        die(xlt(\"Error: Unable to create downloadable archive\"));\n    }\n\n    chdir($cur_dir);\n    /* To log the backup event */\n    if ($GLOBALS['audit_events_backup']) {\n        EventAuditLogger::instance()->newEvent(\"backup\", $_SESSION['authUser'], $_SESSION['authProvider'], 0, \"Backup is completed\");\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 101) {\n    echo \"<p class='font-weight-bold'>&nbsp;\" . xlt('Select the configuration items to export') . \":</p>\";\n\n    echo \"<table cellspacing='10' cellpadding='0'>\\n<tr>\\n<td valign='top' nowrap>\\n\";\n\n    echo \"<strong>\" . xlt('Tables') . \"</strong><br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_services' value='1' />\\n\";\n    echo \" \" . xlt('Services') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_products' value='1' />\\n\";\n    echo \" \" . xlt('Products') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_prices' value='1' />\\n\";\n    echo \" \" . xlt('Prices') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_categories' value='1' />\\n\";\n    echo \" \" . xlt('Document Categories') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_feesheet' value='1' />\\n\";\n    echo \" \" . xlt('Fee Sheet Options') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_lab_config' value='1' />\\n\";\n    echo \" \" . xlt('Lab Configuration') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_lang' value='1' />\\n\";\n    echo \" \" . xlt('Translations') . \"<br />\\n\";\n\n  // Multi-select for lists.\n    echo \"</td><td valign='top'>\\n\";\n    echo \"<strong>\" . xlt('Lists') . \"</strong><br />\\n\";\n    echo \"<select class='form-control' multiple name='form_sel_lists[]' size='15'>\";\n    $lres = sqlStatement(\"SELECT option_id, title FROM list_options WHERE \" .\n    \"list_id = 'lists' AND activity = 1 ORDER BY title, seq\");\n    while ($lrow = sqlFetchArray($lres)) {\n        echo \"<option value='\" . attr($lrow['option_id']) . \"'\";\n        echo \">\" . text(xl_list_label($lrow['title'])) . \"</option>\\n\";\n    }\n    echo \"</select>\\n\";\n    echo \"<br /><a href='#' onclick='export_submit(102.1)'>\" . xlt('Download CSV') . \"</a>\";\n\n    // Multi-select for layouts.\n    echo \"</td><td valign='top'>\\n\";\n    echo \"<strong>\" . xlt('Layouts') . \"</strong><br />\\n\";\n    echo \"<select class='form-control' multiple name='form_sel_layouts[]' size='15'>\";\n    $lres = sqlStatement(\"SELECT grp_form_id, grp_title FROM layout_group_properties WHERE \" .\n      \"grp_group_id = '' AND grp_activity = 1 ORDER BY grp_form_id\");\n    while ($lrow = sqlFetchArray($lres)) {\n        $key = $lrow['grp_form_id'];\n        echo \"<option value='\" . attr($key) . \"'\";\n        echo \">\" . text($key) . \": \" . text(xl_layout_label($lrow['grp_title'])) . \"</option>\\n\";\n    }\n    echo \"</select>\\n\";\n    echo \"<br /><a href='#' onclick='export_submit(102.2)'>\" . xlt('Download CSV') . \"</a>\";\n    echo \"</td>\\n</tr>\\n</table>\\n\";\n\n    // Option to auto-export lists referenced by the chosen layouts.\n    echo \"&nbsp;<br /><input type='checkbox' name='form_cb_addlists' value='1' />\\n\";\n    echo \" \" . xlt('Include all lists referenced in chosen layouts') . \"<br />\\n\";\n\n    echo \"<br /><input class='btn btn-primary' type='submit' onclick='export_submit(102)' value='\" . xla('Continue') . \"' />\\n\";\n}\n\nif ($form_step == 102) {\n    $tables = '';\n    if (!empty($_POST['form_cb_services'  ])) {\n        $tables .= ' codes';\n    }\n\n    if (!empty($_POST['form_cb_products'  ])) {\n        $tables .= ' drugs drug_templates';\n    }\n\n    if (!empty($_POST['form_cb_prices'    ])) {\n        $tables .= ' prices';\n    }\n\n    if (!empty($_POST['form_cb_categories'])) {\n        $tables .= ' categories categories_seq';\n    }\n\n    if (!empty($_POST['form_cb_feesheet'  ])) {\n        $tables .= ' fee_sheet_options';\n    }\n\n    if (!empty($_POST['form_cb_lab_config'])) {\n        $tables .= ' procedure_type procedure_providers procedure_questions';\n    }\n\n    if (!empty($_POST['form_cb_lang'      ])) {\n        $tables .= ' lang_languages lang_constants lang_definitions';\n    }\n\n    if ($tables || is_array($_POST['form_sel_lists'] ?? '') || is_array($_POST['form_sel_layouts'] ?? '')) {\n        $form_status .= xla('Creating export file') . \"...<br />\";\n        echo nl2br($form_status);\n        if (file_exists($EXPORT_FILE)) {\n            if (! unlink($EXPORT_FILE)) {\n                die(xlt(\"Couldn't remove old export file: \") . text($EXPORT_FILE));\n            }\n        }\n\n        // The substitutions below use perl because sed's not usually on windows systems.\n        $perl = $PERL_PATH . DIRECTORY_SEPARATOR . 'perl';\n\n        # This condition was added because the windows operating system uses different syntax for the shell commands.\n        # The test is if it is the windows operating system.\n        if (IS_WINDOWS) {\n            # This section sets the character_set_client to utf8 in the sql file as part or the import property.\n            # windows will place the quotes in the outputted code if they are there. we removed them here.\n            $cmd = \"echo SET character_set_client = utf8; > \" . escapeshellarg($EXPORT_FILE) . \" & \";\n        } else {\n            $cmd = \"echo 'SET character_set_client = utf8;' > \" . escapeshellarg($EXPORT_FILE) . \";\";\n        }\n\n        if ($tables) {\n            if (IS_WINDOWS) {\n                $cmd .= escapeshellcmd('\"' . $mysql_dump_cmd . '\"') . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                    \" --hex-blob --opt --quote-names --skip-comments --no-tablespaces $mysql_ssl \" .\n                    escapeshellarg($sqlconf[\"dbase\"]) . \" $tables\";\n            } else {\n                $cmd .= escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                    \" --hex-blob --opt --quote-names --skip-comments --no-tablespaces $mysql_ssl \" .\n                    escapeshellarg($sqlconf[\"dbase\"]) . \" $tables\";\n            }\n            if (IS_WINDOWS) {\n                # The Perl script differs in windows also.\n                $cmd .= \" | \" . escapeshellcmd('\"' . $perl . '\"') . \" -pe \\\"s/ DEFAULT CHARSET=[A-Za-z0-9]*//i; s/ collate[ =][^ ;,]*//i;\\\"\" .\n                    \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n            } else {\n                $cmd .= \" | \" . escapeshellcmd($perl) . \" -pe 's/ DEFAULT CHARSET=[A-Za-z0-9]*//i; s/ collate[ =][^ ;,]*//i;'\" .\n                    \" > \" . escapeshellarg($EXPORT_FILE) . \";\";\n            }\n        }\n\n        $dumppfx = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                 \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                 \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                 \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                 \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                 \" --hex-blob --skip-opt --quote-names --no-tablespaces --complete-insert\" .\n                 \" --no-create-info --skip-comments $mysql_ssl\";\n\n        // Individual lists.\n        $form_sel_lists = is_array($_POST['form_sel_lists'] ?? '') ? $_POST['form_sel_lists'] : array();\n        if (!empty($_POST['form_cb_addlists']) && is_array($_POST['form_sel_layouts'] ?? '')) {\n            // Include all lists referenced by the exported layouts.\n            foreach ($_POST['form_sel_layouts'] as $layoutid) {\n                $tmpres = sqlStatement(\n                    \"SELECT a.list_id FROM layout_options AS a \" .\n                    \"JOIN list_options AS i ON i.list_id = 'lists' AND i.option_id = a.list_id AND \" .\n                    \"i.activity = 1 AND i.option_value = 0 \" .\n                    \"WHERE a.form_id = ? AND a.list_id != '' AND a.uor > 0\",\n                    array($layoutid)\n                );\n                while ($tmprow = sqlFetchArray($tmpres)) {\n                    if (!in_array($tmprow['list_id'], $form_sel_lists) && !in_array($tmprow['list_id'], $excluded_lists)) {\n                        $form_sel_lists[] = $tmprow['list_id'];\n                    }\n                }\n            }\n        }\n        if (!empty($form_sel_lists)) {\n            foreach ($form_sel_lists as $listid) {\n                // skip if have backtic(s)\n                if (strpos($listid, '`') !== false) {\n                    echo xlt(\"Skipping illegal list name\") . \": \" . text($listid) . \"<br>\";\n                    continue;\n                }\n                // whitelist the $listid\n                $listid_check = sqlQuery(\"SELECT `list_id` FROM `list_options` WHERE `list_id` = ? OR `option_id` = ?\", [$listid, $listid]);\n                if (empty($listid_check['list_id'])) {\n                    echo xlt(\"Skipping missing list name\") . \": \" . text($listid) . \"<br>\";\n                    continue;\n                }\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \" echo 'DELETE FROM list_options WHERE list_id = \\\"\" . add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    $cmd .= \" echo 'DELETE FROM list_options WHERE list_id = 'lists' AND option_id = \\\"\" . add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    # windows uses the & to join statements.\n                    $cmd .= $dumppfx . \" --where=\\\"list_id = 'lists' AND option_id = '$listid' OR list_id = '$listid' \" .\n                        \"ORDER BY list_id != 'lists', seq, title\\\" \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" list_options\";\n                    $cmd .=  \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmdarr[] = \"echo 'DELETE FROM list_options WHERE list_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\" .\n                        \"echo 'DELETE FROM list_options WHERE list_id = \\\"lists\\\" AND option_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\" .\n                        $dumppfx . \" --where='list_id = \\\"lists\\\" AND option_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\" OR list_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\" \" . \"ORDER BY list_id != \\\"lists\\\", seq, title' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" list_options\" .\n                        \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n            }\n        }\n\n        // Individual layouts.\n        if (is_array($_POST['form_sel_layouts'] ?? '')) {\n            $do_history_repair = false;\n            $do_demographics_repair = false;\n            foreach ($_POST['form_sel_layouts'] as $layoutid) {\n                // skip if have backtic(s)\n                if (strpos($layoutid, '`') !== false) {\n                    echo xlt(\"Skipping illegal layout name\") . \": \" . text($layoutid) . \"<br>\";\n                    continue;\n                }\n                // whitelist the $layoutid\n                $layoutid_check_one = sqlQuery(\"SELECT `form_id` FROM `layout_options` WHERE `form_id` = ?\", [$layoutid]);\n                $layoutid_check_two = sqlQuery(\"SELECT `grp_form_id` FROM `layout_group_properties` WHERE `grp_form_id` = ?\", [$layoutid]);\n                if (empty($layoutid_check_one['list_id']) && empty($layoutid_check_two['grp_form_id'])) {\n                    echo xlt(\"Skipping missing layout name\") . \": \" . text($layoutid) . \"<br>\";\n                    continue;\n                }\n                // Beware and keep in mind that Windows requires double quotes around arguments.\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \" echo 'DELETE FROM layout_options WHERE form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmd .= \"echo 'DELETE FROM layout_options WHERE form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \"echo 'DELETE FROM layout_group_properties WHERE grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" &;\";\n                } else {\n                    $cmd .= \"echo 'DELETE FROM layout_group_properties WHERE grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                if (IS_WINDOWS) {\n                    # windows uses the & to join statements.\n                    $cmd .= $dumppfx . ' --where=\"grp_form_id = \\'' . add_escape_custom($layoutid) . \"'\\\" \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_group_properties\";\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    $cmd .= $dumppfx . ' --where=\"form_id = \\'' . add_escape_custom($layoutid) . '\\' ORDER BY group_id, seq, title\" '  .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_options\" ;\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmd .= $dumppfx . \" --where='grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\"' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_group_properties\";\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                    $cmd .= $dumppfx . \" --where='form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\" ORDER BY group_id, seq, title' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_options\" ;\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                // History and demographics exports will get special treatment.\n                if (substr($layoutid, 0, 3) == 'HIS') {\n                    $do_history_repair = true;\n                }\n                if (substr($layoutid, 0, 3) == 'DEM') {\n                    $do_demographics_repair = true;\n                }\n            }\n            // If any HIS* layouts were exported then also write SQL to add missing history_data columns.\n            if ($do_history_repair) {\n                $cmd .= \"echo \\\"SET sql_mode = '';\\\"                  >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SET group_concat_max_len = 1000000;\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SELECT CONCAT(\\\"                      >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"'ALTER TABLE history_data ',\\\"        >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"COALESCE(GROUP_CONCAT(DISTINCT ' ADD \\`', lo.field_id, '\\` TEXT NOT NULL' ORDER BY lo.field_id), '')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\")\\\"                                   >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"FROM layout_options AS lo WHERE\\\"     >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(lo.form_id LIKE 'HIS%' OR lo.source = 'H') AND lo.field_id NOT IN\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(SELECT COLUMN_NAME FROM information_schema.COLUMNS WHERE TABLE_NAME = 'history_data')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"INTO @sql;\\\"                          >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"PREPARE stmt FROM @sql;\\\"             >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"EXECUTE stmt;\\\"                       >> $EXPORT_FILE;\";\n            }\n            // If the DEM layout was exported then also write SQL to add missing patient_data columns.\n            if ($do_demographics_repair) {\n                $cmd .= \"echo \\\"SET sql_mode = '';\\\"                  >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SET group_concat_max_len = 1000000;\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SELECT CONCAT(\\\"                      >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"'ALTER TABLE patient_data ',\\\"        >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"COALESCE(GROUP_CONCAT(DISTINCT ' ADD \\`', lo.field_id, '\\` TEXT NOT NULL' ORDER BY lo.field_id), '')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\")\\\"                                   >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"FROM layout_options AS lo WHERE\\\"     >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(lo.form_id LIKE 'DEM%' OR lo.source = 'D') AND lo.field_id NOT IN\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(SELECT COLUMN_NAME FROM information_schema.COLUMNS WHERE TABLE_NAME = 'patient_data')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"INTO @sql;\\\"                          >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"PREPARE stmt FROM @sql;\\\"             >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"EXECUTE stmt;\\\"                       >> $EXPORT_FILE;\";\n            }\n        }\n    } else {\n        echo xlt('No items were selected!');\n        $form_step = -1;\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 103) {\n    $form_status .= xla('Done.  Will now send download.') . \"<br />\";\n    echo nl2br($form_status);\n    $auto_continue = true;\n}\n\nif ($form_step == 201) {\n    echo xlt('WARNING: This will overwrite configuration information with data from the uploaded file!') . \" \\n\";\n    echo xlt('Use this feature only with newly installed sites, ');\n    echo xlt('otherwise you will destroy references to/from existing data.') . \"\\n\";\n    echo \"<br />&nbsp;<br />\\n\";\n    echo xlt('File to upload') . \":\\n\";\n    echo \"<input type='hidden' name='MAX_FILE_SIZE' value='32000000' />\\n\";\n    echo \"<input type='file' name='userfile' /><br />&nbsp;<br />\\n\";\n    echo \"<input class='btn btn-primary' type='submit' value='\" . xla('Continue') . \"' />\\n\";\n}\n\nif ($form_step == 202) {\n  // Process uploaded config file.\n    if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {\n        if (move_uploaded_file($_FILES['userfile']['tmp_name'], $EXPORT_FILE)) {\n            $form_status .= xla('Applying') . \"...<br />\";\n            echo nl2br($form_status);\n            $cmd = escapeshellcmd($mysql_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n            \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n            \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n            \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n            \" $mysql_ssl \" .\n            escapeshellarg($sqlconf[\"dbase\"]) .\n            \" < \" . escapeshellarg($EXPORT_FILE);\n        } else {\n            echo xlt('Internal error accessing uploaded file!');\n            $form_step = -1;\n        }\n    } else {\n        echo xlt('Upload failed!');\n        $form_step = -1;\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 203) {\n    $form_status .= xla('Done') . \".\";\n    echo nl2br($form_status);\n}\n\n/// ViSolve : EventLog Backup\nif ($form_step == 301) {\n# Get the Current Timestamp, to attach with the log backup file\n    $backuptime = date(\"Ymd_His\");\n# Eventlog backup directory\n    $BACKUP_EVENTLOG_DIR = $GLOBALS['backup_log_dir'];\n\n# Check if Eventlog Backup directory exists, if not create it with Write permission\n    if (!file_exists($BACKUP_EVENTLOG_DIR)) {\n        mkdir($BACKUP_EVENTLOG_DIR);\n        chmod($BACKUP_EVENTLOG_DIR, 0777);\n    }\n\n# Frame the Eventlog Backup File Name\n    $BACKUP_EVENTLOG_FILE = $BACKUP_EVENTLOG_DIR . '/eventlog_' . $backuptime . '.sql';\n# Create a new table similar to event table, rename the existing table as backup table, and rename the new table to event log table.  Then export the contents of the table into a text file and drop the table.\n    $res = sqlStatement(\"create table if not exists log_comment_encrypt_new like log_comment_encrypt\");\n    $res = sqlStatement(\"rename table log_comment_encrypt to log_comment_encrypt_backup,log_comment_encrypt_new to log_comment_encrypt\");\n    $res = sqlStatement(\"create table if not exists log_new like log\");\n    $res = sqlStatement(\"rename table log to log_backup,log_new to log\");\n    $res = sqlStatement(\"create table if not exists api_log_new like api_log\");\n    $res = sqlStatement(\"rename table api_log to api_log_backup, api_log_new to api_log\");\n    echo \"<br />\";\n    $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n    \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($BACKUP_EVENTLOG_FILE) . \" $mysql_ssl \" .\n    escapeshellarg($sqlconf[\"dbase\"]) . \" --tables log_comment_encrypt_backup log_backup api_log_backup\";\n# Set Eventlog Flag when it is done\n    $eventlog = 1;\n// 301 If ends here.\n}\n\nif ($form_step == 401) {\n    echo \"<p><b>&nbsp;\" . xlt('Download or Delete Old Log Entries') . \":</b></p>\";\n    $tmprow = sqlQuery(\"SELECT COUNT(*) AS count, MIN(date) AS date FROM log\");\n    echo \"<p>&nbsp;\" . xlt('The log has') . ' ' . $tmprow['count'] . ' '  .\n        xlt('entries with the oldest dated') . ' ' . $tmprow['date'] . \".</p>\";\n    // Default end date is end of year 2 years ago, ensuring 1 full year of log remaining.\n    $end_date = (date('Y') - 2) . '-12-31';\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n    }\n    echo \"<p>&nbsp;\" . xlt('Select an end date. Entries after this date will not be downloaded or deleted.') . \" \";\n    echo \"<input type='text' class='datepicker' name='form_end_date' id='form_end_date' size='10' \" .\n        \"value='\" . attr(oeFormatShortDate($end_date)) . \"' \" .\n        \"onkeyup='datekeyup(this,mypcc)' onblur='dateblur(this,mypcc)' title='End date yyyy-mm-dd' />\";\n    echo \"</p>\\n\";\n    echo \"<p><input type='button' onclick='export_submit(402)' value='\" . xla('Download Log Entries as Zipped CSV') . \"' />&nbsp;\\n\";\n    echo \"<input type='button' onclick='export_submit(405)' value='\" . xla('Delete Log Entries') . \"' /></p>\\n\";\n}\n\nif ($form_step == 405) {\n    // Process log delete, then optimize to reclaim the file space.\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n        sqlStatement(\n            \"DELETE log, lce, al FROM log \" .\n            \"LEFT JOIN log_comment_encrypt AS lce ON lce.log_id = log.id \" .\n            \"LEFT JOIN api_log AS al ON al.log_id = log.id \" .\n            \"WHERE log.date <= ?\",\n            array(\"$end_date 23:59:59\")\n        );\n        sqlStatement(\"OPTIMIZE TABLE log\");\n    } else {\n        die(xlt(\"End date is missing!\"));\n    }\n    $form_step = -1;\n    $auto_continue = true;\n}\n\n++$form_step;\n?>\n\n  </td>\n </tr>\n</table>\n\n<input type='hidden' name='form_step' value='<?php echo attr($form_step); ?>' />\n<input type='hidden' name='form_status' value='<?php echo $form_status; ?>' />\n\n</form>\n\n<?php\nob_flush();\nflush();\nif ($cmd) {\n    $tmp0 = exec($cmd, $tmp1, $tmp2);\n\n    if ($tmp2) {\n        if ($eventlog == 1) {\n          // ViSolve : Restore previous state, if backup fails.\n             $res = sqlStatement(\"drop table if exists log_comment_encrypt\");\n             $res = sqlStatement(\"rename table log_comment_encrypt_backup to log_comment_encrypt\");\n             $res = sqlStatement(\"drop table if exists log\");\n             $res = sqlStatement(\"rename table log_backup to log\");\n             $res = sqlStatement(\"drop table if exists api_log\");\n             $res = sqlStatement(\"rename table api_log_backup to api_log\");\n        }\n        //Removed the connection details as it exposes all the database credentials\n\n        die(\"There was an error on the backup\");\n    }\n\n  //  ViSolve:  If the Eventlog is set, then clear the temporary table  -- Start here\n    if ($eventlog == 1) {\n        $res = sqlStatement(\"drop table if exists log_backup\");\n        $res = sqlStatement(\"drop table if exists log_comment_encrypt_backup\");\n        $res = sqlStatement(\"drop table if exists api_log_backup\");\n        echo \"<br /><b>\";\n        echo xlt('Backup Successfully taken in') . \" \";\n        echo text($BACKUP_EVENTLOG_DIR);\n        echo \"</b>\";\n    }\n\n //  ViSolve:  If the Eventlog is set, then clear the temporary table  -- Ends here\n}\n\n// $cmdarr exists because some commands may be too long for a single exec.\n// Note eventlog stuff does not apply here.\nforeach ($cmdarr as $acmd) {\n    $tmp0 = exec($acmd, $tmp1, $tmp2);\n    if ($tmp2) {\n        die(\"Error $tmp2 in: \" . text($acmd));\n    }\n}\n\n// If a file was flagged to be gzip-compressed after this cmd, do it.\nif ($file_to_compress) {\n    if (!gz_compress_file($file_to_compress)) {\n        die(xlt(\"Error in gzip compression of file: \") . text($file_to_compress));\n    }\n}\n?>\n\n</center>\n\n<?php if ($auto_continue) { ?>\n<script>\n    setTimeout(\"document.forms[0].submit();\", 500);\n</script>\n<?php }\n\n// Recursive directory remove (like an O/S insensitive \"rm -rf dirname\")\nfunction obliterate_dir($dir)\n{\n    if (!file_exists($dir)) {\n        return true;\n    }\n\n    if (!is_dir($dir) || is_link($dir)) {\n        return unlink($dir);\n    }\n\n    foreach (scandir($dir) as $item) {\n        if ($item == '.' || $item == '..') {\n            continue;\n        }\n\n        if (!obliterate_dir($dir . DIRECTORY_SEPARATOR . $item)) {\n            chmod($dir . DIRECTORY_SEPARATOR . $item, 0777);\n            if (!obliterate_dir($dir . DIRECTORY_SEPARATOR . $item)) {\n                return false;\n            }\n        };\n    }\n\n    return rmdir($dir);\n}\n\n// Create a tar archive given the archive file name, compression method if any, and the\n// array of file/directory names to archive\nfunction create_tar_archive($archiveName, $compressMethod, $itemArray)\n{\n    // Create a tar object using the pear library\n    $tar = new Archive_Tar($archiveName, $compressMethod);\n    if ($tar->create($itemArray)) {\n        return true;\n    }\n\n    return false;\n}\n\n// Compress a file using gzip. Source file removed, leaving only the compressed\n// *.gz file, just like gzip command line would behave.\nfunction gz_compress_file($source)\n{\n    $dest = $source . '.gz';\n    $error = false;\n    if ($fp_in = fopen($source, 'rb')) {\n        if ($fp_out = gzopen($dest, 'wb')) {\n            while (!feof($fp_in)) {\n                gzwrite($fp_out, fread($fp_in, 1024 * 512));\n            }\n\n            gzclose($fp_out);\n            fclose($fp_in);\n            unlink($source);\n        } else {\n            $error = true;\n        }\n    } else {\n        $error = true;\n    }\n\n    if ($error) {\n        return false;\n    } else {\n        return $dest;\n    }\n}\n?>\n\n</body>\n</html>\n"], "fixing_code": ["<?php\n\n/**\n * This script creates a backup tarball, emr_backup.tar, and sends\n * it to the user's browser for download.  The tarball includes:\n *\n * an OpenEMR database dump  (openemr.sql.gz)\n * the OpenEMR web directory (openemr.tar.gz)\n *\n * The OpenEMR web directory is important because it includes config-\n * uration files, patient documents, and possible customizations, and\n * also because the database structure is dependent on the installed\n * OpenEMR version.\n *\n * This script depends on execution of some external programs:\n * mysqldump & pg_dump.  It has been tested with Debian and Ubuntu\n * Linux and with Windows XP.\n *\n * DO NOT PRESUME THAT IT WORKS FOR YOU until you have successfully\n * tested a restore!\n *\n * @package   OpenEMR\n * @link      http://www.open-emr.org\n * @author    Rod Roark <rod@sunsetsystems.com>\n * @author    Bill Cernansky (www.mi-squared.com)\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Stephen Waite <stephen.waite@cmsvt.com>\n * @copyright Copyright (c) 2008-2014, 2016, 2021-2022 Rod Roark <rod@sunsetsystems.com>\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2019 Stephen Waite <stephen.waite@cmsvt.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nset_time_limit(0);\nrequire_once(\"../globals.php\");\nrequire_once(\"$srcdir/layout.inc.php\");\nrequire_once(\"$srcdir/patient.inc\");\n\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Common\\Logging\\EventAuditLogger;\nuse OpenEMR\\Common\\Twig\\TwigContainer;\nuse OpenEMR\\Core\\Header;\n\nif (!empty($_POST)) {\n    if (!CsrfUtils::verifyCsrfToken($_POST[\"csrf_token_form\"])) {\n        CsrfUtils::csrfNotVerified();\n    }\n}\n\nif (!extension_loaded('zlib')) {\n      die('Abort ' . basename(__FILE__) . ' : Missing zlib extensions');\n}\n\nif (!function_exists('gzopen') && function_exists('gzopen64')) {\n    function gzopen($filename, $mode, $use_include_path = 0)\n    {\n        return gzopen64($filename, $mode, $use_include_path);\n    }\n}\n\nif (!AclMain::aclCheckCore('admin', 'super')) {\n    echo (new TwigContainer(null, $GLOBALS['kernel']))->getTwig()->render('core/unauthorized.html.twig', ['pageTitle' => xl(\"Backup\")]);\n    exit;\n}\n\n// When automatically including lists used in selected layouts, these lists are not included.\n$excluded_lists = array(\n    'allergy_issue_list',\n    'boolean',\n    'education_level',\n    'ethrace',\n    'Gender',\n    'genhivhist',\n    'occupations',\n    'Relation_to_Client',\n    'sex',\n    'Sexual_Orientation',\n    'yesno',\n);\n\n$BTN_TEXT_CREATE = xl('Create Backup');\n$BTN_TEXT_EXPORT = xl('Export Configuration');\n$BTN_TEXT_IMPORT = xl('Import Configuration');\n$BTN_TEXT_LOG = xl('Backup/Delete Log Data');\n// ViSolve: Create Log  Backup button\n$BTN_TEXT_CREATE_EVENTLOG = xl('Create Eventlog Backup');\n\n$form_step   = isset($_POST['form_step']) ? trim($_POST['form_step']) : '0';\n$form_status = isset($_POST['form_status' ]) ? trim($_POST['form_status' ]) : '';\n\nif (!empty($_POST['form_export'])) {\n    $form_step = 101;\n}\n\nif (!empty($_POST['form_import'])) {\n    $form_step = 201;\n}\n\n//ViSolve: Assign Unique Number for the Log Creation\nif (!empty($_POST['form_backup'])) {\n    $form_step = 301;\n}\n\nif (!empty($_POST['form_logarchive'])) {\n    $form_step = 401;\n}\n\n// When true the current form will submit itself after a brief pause.\n$auto_continue = false;\n\n# set up main paths\n$backup_file_prefix = \"emr_backup\";\n$backup_file_suffix = \".tar\";\n$TMP_BASE = $GLOBALS['temporary_files_dir'] . \"/openemr_web_backup\";\n$BACKUP_DIR = $TMP_BASE . \"/emr_backup\";\n$TAR_FILE_PATH = $TMP_BASE . DIRECTORY_SEPARATOR . $backup_file_prefix . $backup_file_suffix;\n$EXPORT_FILE = $GLOBALS['temporary_files_dir'] . \"/openemr_config.sql\";\n$MYSQL_PATH = $GLOBALS['mysql_bin_dir'];\n$PERL_PATH = $GLOBALS['perl_bin_dir'];\n\nif ($form_step == 6) {\n    header(\"Pragma: public\");\n    header(\"Expires: 0\");\n    header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n    header(\"Content-Type: application/force-download\");\n    header(\"Content-Length: \" . filesize($TAR_FILE_PATH));\n    header(\"Content-Disposition: attachment; filename=\" . basename($TAR_FILE_PATH));\n    header(\"Content-Description: File Transfer\");\n\n    if (is_file($TAR_FILE_PATH)) {\n        $chunkSize = 1024 * 1024;\n        $handle = fopen($TAR_FILE_PATH, 'rb');\n        while (!feof($handle)) {\n            $buffer = fread($handle, $chunkSize);\n            echo $buffer;\n            ob_flush();\n            flush();\n        }\n        fclose($handle);\n    } else {\n        obliterate_dir($BACKUP_DIR);\n        $dieMsg = xlt(\"Backup Failed missing generated file\");\n        die($dieMsg);\n    }\n    unlink($TAR_FILE_PATH);\n    obliterate_dir($BACKUP_DIR);\n    exit(0);\n}\n\nif ($form_step == 104) {\n    header(\"Pragma: public\");\n    header(\"Expires: 0\");\n    header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n    header(\"Content-Type: application/force-download\");\n    header(\"Content-Length: \" . filesize($EXPORT_FILE));\n    header(\"Content-Disposition: attachment; filename=\" . basename($EXPORT_FILE));\n    header(\"Content-Description: File Transfer\");\n    readfile($EXPORT_FILE);\n    unlink($EXPORT_FILE);\n    exit(0);\n}\n\n// CSV export of lists.\n//\nif ($form_step == 102.1) {\n    if (is_array($_POST['form_sel_lists'] ?? '')) {\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=lists.csv\");\n        header(\"Content-Description: File Transfer\");\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        echo \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        echo csvEscape(xl('List')) . ',';\n        echo csvEscape(xl('ID')) . ',';\n        echo csvEscape(xl('Title')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('Order')) . ',';\n        echo csvEscape(xl('Default')) . ',';\n        echo csvEscape(xl('Active')) . ',';\n        echo csvEscape(xl('Global ID')) . ',';\n        echo csvEscape(xl('Notes')) . ',';\n        echo csvEscape(xl('Codes')) . '';\n        echo \"\\n\";\n        foreach ($_POST['form_sel_lists'] as $listid) {\n            $res = sqlStatement(\n                \"SELECT * FROM list_options WHERE list_id = ? ORDER BY seq, title\",\n                array($listid)\n            );\n            while ($row = sqlFetchArray($res)) {\n                $xtitle = xl_list_label($row['title']);\n                if ($xtitle === $row['title']) {\n                    $xtitle = '';\n                }\n                echo csvEscape($row['list_id']) . ',';\n                echo csvEscape($row['option_id']) . ',';\n                echo csvEscape($row['title']) . ',';\n                echo csvEscape($xtitle) . ',';\n                echo csvEscape($row['seq']) . ',';\n                echo csvEscape($row['is_default']) . ',';\n                echo csvEscape($row['activity']) . ',';\n                echo csvEscape($row['mapping']) . ',';\n                echo csvEscape($row['notes']) . ',';\n                echo csvEscape($row['codes']) . '';\n                echo \"\\n\";\n            }\n        }\n    }\n    exit(0);\n}\n\n// CSV export of layouts.\n//\nif ($form_step == 102.2) {\n    if (is_array($_POST['form_sel_layouts'] ?? '')) {\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=layouts.csv\");\n        header(\"Content-Description: File Transfer\");\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        echo \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        echo csvEscape(xl('Form')) . ',';\n        echo csvEscape(xl('Order')) . ',';\n        echo csvEscape(xl('Source')) . ',';\n        echo csvEscape(xl('Group')) . ',';\n        echo csvEscape(xl('ID')) . ',';\n        echo csvEscape(xl('Label')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('UOR')) . ',';\n        echo csvEscape(xl('Type')) . ',';\n        echo csvEscape(xl('Width')) . ',';\n        echo csvEscape(xl('Height')) . ',';\n        echo csvEscape(xl('Max')) . ',';\n        echo csvEscape(xl('List')) . ',';\n        echo csvEscape(xl('Label Cols')) . ',';\n        echo csvEscape(xl('Data Cols')) . ',';\n        echo csvEscape(xl('Options')) . ',';\n        echo csvEscape(xl('Description')) . ',';\n        echo csvEscape(xl('Translated')) . ',';\n        echo csvEscape(xl('Conditions')) . '';\n        echo \"\\n\";\n        foreach ($_POST['form_sel_layouts'] as $layoutid) {\n            $res = sqlStatement(\n                \"SELECT l.*, p.grp_title FROM layout_options AS l \" .\n                \"JOIN layout_group_properties AS p ON p.grp_form_id = l.form_id AND \" .\n                \"p.grp_group_id = l.group_id AND p.grp_activity = 1 \" .\n                \"WHERE l.form_id = ? ORDER BY l.group_id, l.seq, l.title\",\n                array($layoutid)\n            );\n            while ($row = sqlFetchArray($res)) {\n                $xtitle = xl_layout_label($row['title']);\n                if ($xtitle === $row['title']) {\n                    $xtitle = '';\n                }\n                $xdesc = $row['description'];\n                if (substr($xdesc, 0, 1) != '<') {\n                    $xdesc = xl_layout_label($xdesc);\n                }\n                if ($xdesc === $row['description']) {\n                    $xdesc = '';\n                }\n                echo csvEscape($row['form_id'     ]) . ',';\n                echo csvEscape($row['seq'         ]) . ',';\n                echo csvEscape($sources[$row['source']]) . ',';\n                echo csvEscape($row['grp_title'   ]) . ',';\n                echo csvEscape($row['field_id'    ]) . ',';\n                echo csvEscape($row['title'       ]) . ',';\n                echo csvEscape($xtitle) . ',';\n                echo csvEscape($UOR[$row['uor']]) . ',';\n                echo csvEscape($datatypes[$row['data_type']]) . ',';\n                echo csvEscape($row['fld_length'  ]) . ',';\n                echo csvEscape($row['fld_rows'    ]) . ',';\n                echo csvEscape($row['max_length'  ]) . ',';\n                echo csvEscape($row['list_id'     ]) . ',';\n                echo csvEscape($row['titlecols'   ]) . ',';\n                echo csvEscape($row['datacols'    ]) . ',';\n                echo csvEscape($row['edit_options']) . ',';\n                echo csvEscape($row['description' ]) . ',';\n                echo csvEscape($xdesc) . ',';\n                echo csvEscape($row['conditions'  ]) . '';\n                echo \"\\n\";\n            }\n        }\n    }\n    exit(0);\n}\n\n// CSV export of old log entries.\n//\nif ($form_step == 402) {\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n        // This is the \"filename\" for the Content-Disposition header.\n        $filename = \"log_archive_{$end_date}.csv\";\n\n        $outfile = tempnam($GLOBALS['temporary_files_dir'], 'OET');\n        if ($outfile === false) {\n            die(\"tempnam('\" . text($GLOBALS['temporary_files_dir']) . \"','OET') failed.\\n\");\n        }\n        $hout = fopen($outfile, \"w\");\n        $wcount = 0;\n\n        // Prepend a BOM (Byte Order Mark) header to mark the data as UTF-8.  See:\n        // http://stackoverflow.com/questions/155097/microsoft-excel-mangles-diacritics-in-csv-files\n        // http://crashcoursing.blogspot.com/2011/05/exporting-csv-with-special-characters.html\n        $out = \"\\xEF\\xBB\\xBF\";\n        // CSV headers:\n        $out .= csvEscape(xl('id')) . ',';\n        $out .= csvEscape(xl('date')) . ',';\n        $out .= csvEscape(xl('event')) . ',';\n        $out .= csvEscape(xl('user')) . ',';\n        $out .= csvEscape(xl('groupname')) . ',';\n        $out .= csvEscape(xl('comments')) . ',';\n        $out .= csvEscape(xl('user_notes')) . ',';\n        $out .= csvEscape(xl('patient_id')) . ',';\n        $out .= csvEscape(xl('success')) . ',';\n        $out .= csvEscape(xl('checksum')) . ',';\n        $out .= csvEscape(xl('crt_user')) . '';\n        $out .= \"\\n\";\n        fwrite($hout, $out);\n\n        // Somewhere there's a memory leak in the ADODB stuff. We do multiple selects to\n        // work around this.\n        $lastid = 0;\n        while (true) {\n            $res = sqlStatementNoLog(\n                \"SELECT * FROM `log` WHERE `date` <= ? AND `id` > ? ORDER BY `id` LIMIT 50000\",\n                array(\"$end_date 23:59:59\", $lastid)\n            );\n            if (!sqlNumRows($res)) {\n                break;\n            }\n            while ($row = sqlFetchArray($res)) {\n                $out  = csvEscape($row['id'        ]) . ',' .\n                        csvEscape($row['date'      ]) . ',' .\n                        csvEscape($row['event'     ]) . ',' .\n                        csvEscape($row['user'      ]) . ',' .\n                        csvEscape($row['groupname' ]) . ',' .\n                        csvEscape($row['comments'  ]) . ',' .\n                        csvEscape($row['user_notes']) . ',' .\n                        csvEscape($row['patient_id']) . ',' .\n                        csvEscape($row['success'   ]) . ',' .\n                        csvEscape($row['checksum'  ]) . ',' .\n                        csvEscape($row['crt_user'  ]) . '' .\n                        \"\\n\";\n                if (!fwrite($hout, $out)) {\n                    die(\"fwrite() failed!\");\n                }\n                $lastid = $row['id'];\n            }\n        }\n\n        fclose($hout);\n\n        // Do compression if requested (it is!)\n        if (true) {\n            $zip = new ZipArchive();\n            $zippedoutfile = tempnam($GLOBALS['temporary_files_dir'], 'OEZ');\n            if ($zippedoutfile === false) {\n                die(\"tempnam('\" . text($GLOBALS['temporary_files_dir']) . \"','OEZ') failed.\\n\");\n            }\n            if ($zip->open($zippedoutfile, ZIPARCHIVE::OVERWRITE) !== true) {\n                die(xlt('Cannot create file') . \" '$zipname'\\n\");\n            }\n            if (!$zip->addFile($outfile, $filename)) {\n                die(xlt('Cannot add to archive') . \" '$zipname'\\n\");\n            }\n            $zip->close();\n            $filename .= '.zip';\n            unlink($outfile);\n            $outfile = $zippedoutfile;\n        }\n\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Content-Type: application/force-download; charset=utf-8\");\n        header(\"Content-Disposition: attachment; filename=$filename\");\n        header(\"Content-Description: File Transfer\");\n        header(\"Content-Length: \" . filesize($outfile));\n        readfile($outfile);\n        unlink($outfile);\n    } else {\n        die(xlt(\"End date is missing!\"));\n    }\n    exit(0);\n}\n\n?>\n<html>\n\n<head>\n<?php Header::setupHeader(['datetime-picker']); ?>\n<title><?php echo xlt('Backup'); ?></title>\n\n<script>\n\n$(function () {\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_showseconds = false; ?>\n        <?php $datetimepicker_formatInput = true; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n        <?php // can add any additional javascript settings to datetimepicker here; need to prepend first setting with a comma ?>\n    });\n});\n\n// Called from export page or log archive page to specify what it will do.\n//   102   = SQL export of selected tables, lists and layouts\n//   102.1 = Download selected lists as CSV\n//   102.2 = download selected layouts as CSV\n//   402   = CSV export of log archive\n//   405   = Delete from the log\n//\nfunction export_submit(step) {\n    var f = document.forms[0];\n    f.form_step.value = step;\n    top.restoreSession();\n    f.submit();\n}\n\n</script>\n\n</head>\n\n<body class=\"body_top\">\n<center>\n&nbsp;<br />\n<form method='post' action='backup.php' enctype='multipart/form-data' onsubmit='return top.restoreSession()'>\n<input type=\"hidden\" name=\"csrf_token_form\" value=\"<?php echo attr(CsrfUtils::collectCsrfToken()); ?>\" />\n\n<table<?php echo ($form_step != 101) ? \" style='width:50em'\" : \"\"; ?>>\n <tr>\n  <td>\n\n<?php\n$cmd = '';\n// $cmdarr exists because some commands may be too long for a single exec.\n$cmdarr = array();\n$mysql_cmd = $MYSQL_PATH . DIRECTORY_SEPARATOR . 'mysql';\n$mysql_dump_cmd = $mysql_cmd . 'dump';\n$mysql_ssl = '';\nif (file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\")) {\n    // Support for mysql SSL encryption\n    $mysql_ssl = \" --ssl-ca=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-ca\") . \" \";\n    if (\n        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") &&\n        file_exists($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\")\n    ) {\n        // Support for mysql SSL client based cert authentication\n        $mysql_ssl .= \"--ssl-cert=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-cert\") . \" \";\n        $mysql_ssl .= \"--ssl-key=\" . escapeshellarg($GLOBALS['OE_SITE_DIR'] . \"/documents/certificates/mysql-key\") . \" \";\n    }\n}\n\n$file_to_compress = '';  // if named, this iteration's file will be gzipped after it is created\n$eventlog = 0;  // Eventlog Flag\n\nif ($form_step == 0) {\n    echo \"<table>\\n\";\n    echo \" <tr>\\n\";\n    echo \"  <td><input class='btn btn-secondary' type='submit' name='form_create' value='\" . attr($BTN_TEXT_CREATE) . \"' /></td>\\n\";\n    echo \"  <td>\" . xlt('Create and download a full backup') . \"</td>\\n\";\n    echo \" </tr>\\n\";\n  // The config import/export feature is optional.\n    if (!empty($GLOBALS['configuration_import_export'])) {\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_export' value='\" . attr($BTN_TEXT_EXPORT) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Download configuration data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_import' value='\" . attr($BTN_TEXT_IMPORT) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Upload configuration data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n        echo \" <tr>\\n\";\n        echo \"  <td><input class='btn btn-secondary' type='submit' name='form_logarchive' value='\" . attr($BTN_TEXT_LOG) . \"' /></td>\\n\";\n        echo \"  <td>\" . xlt('Download and/or delete log data') . \"</td>\\n\";\n        echo \" </tr>\\n\";\n    }\n\n// ViSolve : Add ' Create Log table backup Button'\n    echo \" <tr>\\n\";\n    echo \"  <td><input class='btn btn-secondary' type='submit' name='form_backup' value='\" . attr($BTN_TEXT_CREATE_EVENTLOG) . \"' /></td>\\n\";\n    echo \"  <td>\" . xlt('Create Eventlog Backup') . \"</td>\\n\";\n    echo \" </tr>\\n\";\n    echo \" <tr>\\n\";\n    echo \"  <td></td><td class='text'>\" . xlt('Note that the Eventlog Backup is currently set to save in the following folder') . \": \" . text($GLOBALS['backup_log_dir']) . \" . \" . xlt('Recommend setting the Path for Event Log Backup in Globals settings in the Miscellaneous section to something other than your tmp/temp directory.') . \" \" . xlt('Please refer to') . ' README-Log-Backup.txt ' . xlt('file in the Documentation directory to learn how to automate the process of creating log backups') . \".</td>\\n\";\n    echo \" </tr>\\n\";\n    echo \"</table>\\n\";\n}\n\nif ($form_step == 1) {\n    $form_status .= xl('Dumping OpenEMR database') . \"...||br-placeholder||\";\n    echo brCustomPlaceholder(text($form_status));\n    if (file_exists($TAR_FILE_PATH)) {\n        if (! unlink($TAR_FILE_PATH)) {\n            die(xlt(\"Couldn't remove old backup file:\") . \" \" . text($TAR_FILE_PATH));\n        }\n    }\n\n    if (! obliterate_dir($TMP_BASE)) {\n        die(xlt(\"Couldn't remove dir:\") . \" \" . text($TMP_BASE));\n    }\n\n    if (! mkdir($BACKUP_DIR, 0777, true)) {\n        die(xlt(\"Couldn't create backup dir:\") . \" \" . text($BACKUP_DIR));\n    }\n\n    $file_to_compress = \"$BACKUP_DIR/openemr.sql\";   // gzip this file after creation\n\n    if ($GLOBALS['include_de_identification'] == 1) {\n        //include routines during backup when de-identification is enabled\n        $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n        \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n        \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n        \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n        \" --routines\" .\n        \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n        \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($file_to_compress) . \" $mysql_ssl \" .\n        escapeshellarg($sqlconf[\"dbase\"]);\n    } else {\n        $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n        \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n        \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n        \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n        \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n        \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($file_to_compress) . \" $mysql_ssl \" .\n        escapeshellarg($sqlconf[\"dbase\"]);\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 2) {\n    ++$form_step;\n}\n\nif ($form_step == 3) {\n    $form_status .= xl('Dumping OpenEMR web directory tree') . \"...||br-placeholder||\";\n    echo brCustomPlaceholder(text($form_status));\n    $cur_dir = getcwd();\n    chdir($webserver_root);\n\n    // Select the files and directories to archive.  Basically everything\n    // except site-specific data for other sites.\n    $file_list = array();\n    $dh = opendir($webserver_root);\n    if (!$dh) {\n        die(\"Cannot read directory '\" . text($webserver_root) . \"'.\");\n    }\n\n    while (false !== ($filename = readdir($dh))) {\n        if ($filename == '.' || $filename == '..') {\n            continue;\n        }\n\n        if ($filename == 'sites') {\n            // Omit other sites.\n            $file_list[] = \"$filename/\" . $_SESSION['site_id'];\n        } else {\n            $file_list[] = $filename;\n        }\n    }\n\n    closedir($dh);\n\n    $arch_file = $BACKUP_DIR . DIRECTORY_SEPARATOR . \"openemr.tar.gz\";\n    if (!create_tar_archive($arch_file, \"gz\", $file_list)) {\n        die(xlt(\"An error occurred while dumping OpenEMR web directory tree\"));\n    }\n\n    chdir($cur_dir);\n    $auto_continue = true;\n}\n\nif ($form_step == 4) {\n     ++$form_step;\n}\n\nif ($form_step == 5) {   // create the final compressed tar containing all files\n    $form_status .= xl('Backup file has been created. Will now send download.') . \"||br-placeholder||\";\n    echo brCustomPlaceholder(text($form_status));\n    $cur_dir = getcwd();\n    chdir($BACKUP_DIR);\n    $file_list = array('.');\n    if (!create_tar_archive($TAR_FILE_PATH, '', $file_list)) {\n        die(xlt(\"Error: Unable to create downloadable archive\"));\n    }\n\n    chdir($cur_dir);\n    /* To log the backup event */\n    if ($GLOBALS['audit_events_backup']) {\n        EventAuditLogger::instance()->newEvent(\"backup\", $_SESSION['authUser'], $_SESSION['authProvider'], 0, \"Backup is completed\");\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 101) {\n    echo \"<p class='font-weight-bold'>&nbsp;\" . xlt('Select the configuration items to export') . \":</p>\";\n\n    echo \"<table cellspacing='10' cellpadding='0'>\\n<tr>\\n<td valign='top' nowrap>\\n\";\n\n    echo \"<strong>\" . xlt('Tables') . \"</strong><br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_services' value='1' />\\n\";\n    echo \" \" . xlt('Services') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_products' value='1' />\\n\";\n    echo \" \" . xlt('Products') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_prices' value='1' />\\n\";\n    echo \" \" . xlt('Prices') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_categories' value='1' />\\n\";\n    echo \" \" . xlt('Document Categories') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_feesheet' value='1' />\\n\";\n    echo \" \" . xlt('Fee Sheet Options') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_lab_config' value='1' />\\n\";\n    echo \" \" . xlt('Lab Configuration') . \"<br />\\n\";\n    echo \"<input type='checkbox' name='form_cb_lang' value='1' />\\n\";\n    echo \" \" . xlt('Translations') . \"<br />\\n\";\n\n  // Multi-select for lists.\n    echo \"</td><td valign='top'>\\n\";\n    echo \"<strong>\" . xlt('Lists') . \"</strong><br />\\n\";\n    echo \"<select class='form-control' multiple name='form_sel_lists[]' size='15'>\";\n    $lres = sqlStatement(\"SELECT option_id, title FROM list_options WHERE \" .\n    \"list_id = 'lists' AND activity = 1 ORDER BY title, seq\");\n    while ($lrow = sqlFetchArray($lres)) {\n        echo \"<option value='\" . attr($lrow['option_id']) . \"'\";\n        echo \">\" . text(xl_list_label($lrow['title'])) . \"</option>\\n\";\n    }\n    echo \"</select>\\n\";\n    echo \"<br /><a href='#' onclick='export_submit(102.1)'>\" . xlt('Download CSV') . \"</a>\";\n\n    // Multi-select for layouts.\n    echo \"</td><td valign='top'>\\n\";\n    echo \"<strong>\" . xlt('Layouts') . \"</strong><br />\\n\";\n    echo \"<select class='form-control' multiple name='form_sel_layouts[]' size='15'>\";\n    $lres = sqlStatement(\"SELECT grp_form_id, grp_title FROM layout_group_properties WHERE \" .\n      \"grp_group_id = '' AND grp_activity = 1 ORDER BY grp_form_id\");\n    while ($lrow = sqlFetchArray($lres)) {\n        $key = $lrow['grp_form_id'];\n        echo \"<option value='\" . attr($key) . \"'\";\n        echo \">\" . text($key) . \": \" . text(xl_layout_label($lrow['grp_title'])) . \"</option>\\n\";\n    }\n    echo \"</select>\\n\";\n    echo \"<br /><a href='#' onclick='export_submit(102.2)'>\" . xlt('Download CSV') . \"</a>\";\n    echo \"</td>\\n</tr>\\n</table>\\n\";\n\n    // Option to auto-export lists referenced by the chosen layouts.\n    echo \"&nbsp;<br /><input type='checkbox' name='form_cb_addlists' value='1' />\\n\";\n    echo \" \" . xlt('Include all lists referenced in chosen layouts') . \"<br />\\n\";\n\n    echo \"<br /><input class='btn btn-primary' type='submit' onclick='export_submit(102)' value='\" . xla('Continue') . \"' />\\n\";\n}\n\nif ($form_step == 102) {\n    $tables = '';\n    if (!empty($_POST['form_cb_services'  ])) {\n        $tables .= ' codes';\n    }\n\n    if (!empty($_POST['form_cb_products'  ])) {\n        $tables .= ' drugs drug_templates';\n    }\n\n    if (!empty($_POST['form_cb_prices'    ])) {\n        $tables .= ' prices';\n    }\n\n    if (!empty($_POST['form_cb_categories'])) {\n        $tables .= ' categories categories_seq';\n    }\n\n    if (!empty($_POST['form_cb_feesheet'  ])) {\n        $tables .= ' fee_sheet_options';\n    }\n\n    if (!empty($_POST['form_cb_lab_config'])) {\n        $tables .= ' procedure_type procedure_providers procedure_questions';\n    }\n\n    if (!empty($_POST['form_cb_lang'      ])) {\n        $tables .= ' lang_languages lang_constants lang_definitions';\n    }\n\n    if ($tables || is_array($_POST['form_sel_lists'] ?? '') || is_array($_POST['form_sel_layouts'] ?? '')) {\n        $form_status .= xl('Creating export file') . \"...||br-placeholder||\";\n        echo brCustomPlaceholder(text($form_status));\n        if (file_exists($EXPORT_FILE)) {\n            if (! unlink($EXPORT_FILE)) {\n                die(xlt(\"Couldn't remove old export file: \") . text($EXPORT_FILE));\n            }\n        }\n\n        // The substitutions below use perl because sed's not usually on windows systems.\n        $perl = $PERL_PATH . DIRECTORY_SEPARATOR . 'perl';\n\n        # This condition was added because the windows operating system uses different syntax for the shell commands.\n        # The test is if it is the windows operating system.\n        if (IS_WINDOWS) {\n            # This section sets the character_set_client to utf8 in the sql file as part or the import property.\n            # windows will place the quotes in the outputted code if they are there. we removed them here.\n            $cmd = \"echo SET character_set_client = utf8; > \" . escapeshellarg($EXPORT_FILE) . \" & \";\n        } else {\n            $cmd = \"echo 'SET character_set_client = utf8;' > \" . escapeshellarg($EXPORT_FILE) . \";\";\n        }\n\n        if ($tables) {\n            if (IS_WINDOWS) {\n                $cmd .= escapeshellcmd('\"' . $mysql_dump_cmd . '\"') . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                    \" --hex-blob --opt --quote-names --skip-comments --no-tablespaces $mysql_ssl \" .\n                    escapeshellarg($sqlconf[\"dbase\"]) . \" $tables\";\n            } else {\n                $cmd .= escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                    \" --hex-blob --opt --quote-names --skip-comments --no-tablespaces $mysql_ssl \" .\n                    escapeshellarg($sqlconf[\"dbase\"]) . \" $tables\";\n            }\n            if (IS_WINDOWS) {\n                # The Perl script differs in windows also.\n                $cmd .= \" | \" . escapeshellcmd('\"' . $perl . '\"') . \" -pe \\\"s/ DEFAULT CHARSET=[A-Za-z0-9]*//i; s/ collate[ =][^ ;,]*//i;\\\"\" .\n                    \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n            } else {\n                $cmd .= \" | \" . escapeshellcmd($perl) . \" -pe 's/ DEFAULT CHARSET=[A-Za-z0-9]*//i; s/ collate[ =][^ ;,]*//i;'\" .\n                    \" > \" . escapeshellarg($EXPORT_FILE) . \";\";\n            }\n        }\n\n        $dumppfx = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n                 \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n                 \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n                 \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n                 \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n                 \" --hex-blob --skip-opt --quote-names --no-tablespaces --complete-insert\" .\n                 \" --no-create-info --skip-comments $mysql_ssl\";\n\n        // Individual lists.\n        $form_sel_lists = is_array($_POST['form_sel_lists'] ?? '') ? $_POST['form_sel_lists'] : array();\n        if (!empty($_POST['form_cb_addlists']) && is_array($_POST['form_sel_layouts'] ?? '')) {\n            // Include all lists referenced by the exported layouts.\n            foreach ($_POST['form_sel_layouts'] as $layoutid) {\n                $tmpres = sqlStatement(\n                    \"SELECT a.list_id FROM layout_options AS a \" .\n                    \"JOIN list_options AS i ON i.list_id = 'lists' AND i.option_id = a.list_id AND \" .\n                    \"i.activity = 1 AND i.option_value = 0 \" .\n                    \"WHERE a.form_id = ? AND a.list_id != '' AND a.uor > 0\",\n                    array($layoutid)\n                );\n                while ($tmprow = sqlFetchArray($tmpres)) {\n                    if (!in_array($tmprow['list_id'], $form_sel_lists) && !in_array($tmprow['list_id'], $excluded_lists)) {\n                        $form_sel_lists[] = $tmprow['list_id'];\n                    }\n                }\n            }\n        }\n        if (!empty($form_sel_lists)) {\n            foreach ($form_sel_lists as $listid) {\n                // skip if have backtic(s)\n                if (strpos($listid, '`') !== false) {\n                    echo xlt(\"Skipping illegal list name\") . \": \" . text($listid) . \"<br>\";\n                    continue;\n                }\n                // whitelist the $listid\n                $listid_check = sqlQuery(\"SELECT `list_id` FROM `list_options` WHERE `list_id` = ? OR `option_id` = ?\", [$listid, $listid]);\n                if (empty($listid_check['list_id'])) {\n                    echo xlt(\"Skipping missing list name\") . \": \" . text($listid) . \"<br>\";\n                    continue;\n                }\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \" echo 'DELETE FROM list_options WHERE list_id = \\\"\" . add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    $cmd .= \" echo 'DELETE FROM list_options WHERE list_id = 'lists' AND option_id = \\\"\" . add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    # windows uses the & to join statements.\n                    $cmd .= $dumppfx . \" --where=\\\"list_id = 'lists' AND option_id = '$listid' OR list_id = '$listid' \" .\n                        \"ORDER BY list_id != 'lists', seq, title\\\" \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" list_options\";\n                    $cmd .=  \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmdarr[] = \"echo 'DELETE FROM list_options WHERE list_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\" .\n                        \"echo 'DELETE FROM list_options WHERE list_id = \\\"lists\\\" AND option_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\" .\n                        $dumppfx . \" --where='list_id = \\\"lists\\\" AND option_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\" OR list_id = \\\"\" .\n                        add_escape_custom($listid) . \"\\\" \" . \"ORDER BY list_id != \\\"lists\\\", seq, title' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" list_options\" .\n                        \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n            }\n        }\n\n        // Individual layouts.\n        if (is_array($_POST['form_sel_layouts'] ?? '')) {\n            $do_history_repair = false;\n            $do_demographics_repair = false;\n            foreach ($_POST['form_sel_layouts'] as $layoutid) {\n                // skip if have backtic(s)\n                if (strpos($layoutid, '`') !== false) {\n                    echo xlt(\"Skipping illegal layout name\") . \": \" . text($layoutid) . \"<br>\";\n                    continue;\n                }\n                // whitelist the $layoutid\n                $layoutid_check_one = sqlQuery(\"SELECT `form_id` FROM `layout_options` WHERE `form_id` = ?\", [$layoutid]);\n                $layoutid_check_two = sqlQuery(\"SELECT `grp_form_id` FROM `layout_group_properties` WHERE `grp_form_id` = ?\", [$layoutid]);\n                if (empty($layoutid_check_one['list_id']) && empty($layoutid_check_two['grp_form_id'])) {\n                    echo xlt(\"Skipping missing layout name\") . \": \" . text($layoutid) . \"<br>\";\n                    continue;\n                }\n                // Beware and keep in mind that Windows requires double quotes around arguments.\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \" echo 'DELETE FROM layout_options WHERE form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmd .= \"echo 'DELETE FROM layout_options WHERE form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                if (IS_WINDOWS) {\n                    # windows will place the quotes in the outputted code if they are there. we removed them here.\n                    $cmd .= \"echo 'DELETE FROM layout_group_properties WHERE grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \" &;\";\n                } else {\n                    $cmd .= \"echo 'DELETE FROM layout_group_properties WHERE grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\";' >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                if (IS_WINDOWS) {\n                    # windows uses the & to join statements.\n                    $cmd .= $dumppfx . ' --where=\"grp_form_id = \\'' . add_escape_custom($layoutid) . \"'\\\" \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_group_properties\";\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                    $cmd .= $dumppfx . ' --where=\"form_id = \\'' . add_escape_custom($layoutid) . '\\' ORDER BY group_id, seq, title\" '  .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_options\" ;\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \" & \";\n                } else {\n                    $cmd .= $dumppfx . \" --where='grp_form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\"' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_group_properties\";\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                    $cmd .= $dumppfx . \" --where='form_id = \\\"\" . add_escape_custom($layoutid) . \"\\\" ORDER BY group_id, seq, title' \" .\n                        escapeshellarg($sqlconf[\"dbase\"]) . \" layout_options\" ;\n                    $cmd .= \" >> \" . escapeshellarg($EXPORT_FILE) . \";\";\n                }\n                // History and demographics exports will get special treatment.\n                if (substr($layoutid, 0, 3) == 'HIS') {\n                    $do_history_repair = true;\n                }\n                if (substr($layoutid, 0, 3) == 'DEM') {\n                    $do_demographics_repair = true;\n                }\n            }\n            // If any HIS* layouts were exported then also write SQL to add missing history_data columns.\n            if ($do_history_repair) {\n                $cmd .= \"echo \\\"SET sql_mode = '';\\\"                  >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SET group_concat_max_len = 1000000;\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SELECT CONCAT(\\\"                      >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"'ALTER TABLE history_data ',\\\"        >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"COALESCE(GROUP_CONCAT(DISTINCT ' ADD \\`', lo.field_id, '\\` TEXT NOT NULL' ORDER BY lo.field_id), '')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\")\\\"                                   >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"FROM layout_options AS lo WHERE\\\"     >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(lo.form_id LIKE 'HIS%' OR lo.source = 'H') AND lo.field_id NOT IN\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(SELECT COLUMN_NAME FROM information_schema.COLUMNS WHERE TABLE_NAME = 'history_data')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"INTO @sql;\\\"                          >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"PREPARE stmt FROM @sql;\\\"             >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"EXECUTE stmt;\\\"                       >> $EXPORT_FILE;\";\n            }\n            // If the DEM layout was exported then also write SQL to add missing patient_data columns.\n            if ($do_demographics_repair) {\n                $cmd .= \"echo \\\"SET sql_mode = '';\\\"                  >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SET group_concat_max_len = 1000000;\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"SELECT CONCAT(\\\"                      >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"'ALTER TABLE patient_data ',\\\"        >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"COALESCE(GROUP_CONCAT(DISTINCT ' ADD \\`', lo.field_id, '\\` TEXT NOT NULL' ORDER BY lo.field_id), '')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\")\\\"                                   >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"FROM layout_options AS lo WHERE\\\"     >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(lo.form_id LIKE 'DEM%' OR lo.source = 'D') AND lo.field_id NOT IN\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"(SELECT COLUMN_NAME FROM information_schema.COLUMNS WHERE TABLE_NAME = 'patient_data')\\\" >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"INTO @sql;\\\"                          >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"PREPARE stmt FROM @sql;\\\"             >> $EXPORT_FILE;\";\n                $cmd .= \"echo \\\"EXECUTE stmt;\\\"                       >> $EXPORT_FILE;\";\n            }\n        }\n    } else {\n        echo xlt('No items were selected!');\n        $form_step = -1;\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 103) {\n    $form_status .= xl('Done.  Will now send download.') . \"||br-placeholder||\";\n    echo brCustomPlaceholder(text($form_status));\n    $auto_continue = true;\n}\n\nif ($form_step == 201) {\n    echo xlt('WARNING: This will overwrite configuration information with data from the uploaded file!') . \" \\n\";\n    echo xlt('Use this feature only with newly installed sites, ');\n    echo xlt('otherwise you will destroy references to/from existing data.') . \"\\n\";\n    echo \"<br />&nbsp;<br />\\n\";\n    echo xlt('File to upload') . \":\\n\";\n    echo \"<input type='hidden' name='MAX_FILE_SIZE' value='32000000' />\\n\";\n    echo \"<input type='file' name='userfile' /><br />&nbsp;<br />\\n\";\n    echo \"<input class='btn btn-primary' type='submit' value='\" . xla('Continue') . \"' />\\n\";\n}\n\nif ($form_step == 202) {\n  // Process uploaded config file.\n    if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {\n        if (move_uploaded_file($_FILES['userfile']['tmp_name'], $EXPORT_FILE)) {\n            $form_status .= xl('Applying') . \"...||br-placeholder||\";\n            echo brCustomPlaceholder(text($form_status));\n            $cmd = escapeshellcmd($mysql_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n            \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n            \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n            \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n            \" $mysql_ssl \" .\n            escapeshellarg($sqlconf[\"dbase\"]) .\n            \" < \" . escapeshellarg($EXPORT_FILE);\n        } else {\n            echo xlt('Internal error accessing uploaded file!');\n            $form_step = -1;\n        }\n    } else {\n        echo xlt('Upload failed!');\n        $form_step = -1;\n    }\n\n    $auto_continue = true;\n}\n\nif ($form_step == 203) {\n    $form_status .= xl('Done') . \".\";\n    echo brCustomPlaceholder(text($form_status));\n}\n\n/// ViSolve : EventLog Backup\nif ($form_step == 301) {\n# Get the Current Timestamp, to attach with the log backup file\n    $backuptime = date(\"Ymd_His\");\n# Eventlog backup directory\n    $BACKUP_EVENTLOG_DIR = $GLOBALS['backup_log_dir'];\n\n# Check if Eventlog Backup directory exists, if not create it with Write permission\n    if (!file_exists($BACKUP_EVENTLOG_DIR)) {\n        mkdir($BACKUP_EVENTLOG_DIR);\n        chmod($BACKUP_EVENTLOG_DIR, 0777);\n    }\n\n# Frame the Eventlog Backup File Name\n    $BACKUP_EVENTLOG_FILE = $BACKUP_EVENTLOG_DIR . '/eventlog_' . $backuptime . '.sql';\n# Create a new table similar to event table, rename the existing table as backup table, and rename the new table to event log table.  Then export the contents of the table into a text file and drop the table.\n    $res = sqlStatement(\"create table if not exists log_comment_encrypt_new like log_comment_encrypt\");\n    $res = sqlStatement(\"rename table log_comment_encrypt to log_comment_encrypt_backup,log_comment_encrypt_new to log_comment_encrypt\");\n    $res = sqlStatement(\"create table if not exists log_new like log\");\n    $res = sqlStatement(\"rename table log to log_backup,log_new to log\");\n    $res = sqlStatement(\"create table if not exists api_log_new like api_log\");\n    $res = sqlStatement(\"rename table api_log to api_log_backup, api_log_new to api_log\");\n    echo \"<br />\";\n    $cmd = escapeshellcmd($mysql_dump_cmd) . \" -u \" . escapeshellarg($sqlconf[\"login\"]) .\n    \" -p\" . escapeshellarg($sqlconf[\"pass\"]) .\n    \" -h \" . escapeshellarg($sqlconf[\"host\"]) .\n    \" --port=\" . escapeshellarg($sqlconf[\"port\"]) .\n    \" --ignore-table=\" . escapeshellarg($sqlconf[\"dbase\"] . \".onsite_activity_view\") .\n    \" --hex-blob --opt --quote-names --no-tablespaces -r \" . escapeshellarg($BACKUP_EVENTLOG_FILE) . \" $mysql_ssl \" .\n    escapeshellarg($sqlconf[\"dbase\"]) . \" --tables log_comment_encrypt_backup log_backup api_log_backup\";\n# Set Eventlog Flag when it is done\n    $eventlog = 1;\n// 301 If ends here.\n}\n\nif ($form_step == 401) {\n    echo \"<p><b>&nbsp;\" . xlt('Download or Delete Old Log Entries') . \":</b></p>\";\n    $tmprow = sqlQuery(\"SELECT COUNT(*) AS count, MIN(date) AS date FROM log\");\n    echo \"<p>&nbsp;\" . xlt('The log has') . ' ' . $tmprow['count'] . ' '  .\n        xlt('entries with the oldest dated') . ' ' . $tmprow['date'] . \".</p>\";\n    // Default end date is end of year 2 years ago, ensuring 1 full year of log remaining.\n    $end_date = (date('Y') - 2) . '-12-31';\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n    }\n    echo \"<p>&nbsp;\" . xlt('Select an end date. Entries after this date will not be downloaded or deleted.') . \" \";\n    echo \"<input type='text' class='datepicker' name='form_end_date' id='form_end_date' size='10' \" .\n        \"value='\" . attr(oeFormatShortDate($end_date)) . \"' \" .\n        \"onkeyup='datekeyup(this,mypcc)' onblur='dateblur(this,mypcc)' title='End date yyyy-mm-dd' />\";\n    echo \"</p>\\n\";\n    echo \"<p><input type='button' onclick='export_submit(402)' value='\" . xla('Download Log Entries as Zipped CSV') . \"' />&nbsp;\\n\";\n    echo \"<input type='button' onclick='export_submit(405)' value='\" . xla('Delete Log Entries') . \"' /></p>\\n\";\n}\n\nif ($form_step == 405) {\n    // Process log delete, then optimize to reclaim the file space.\n    if (!empty($_POST['form_end_date'])) {\n        $end_date = DateToYYYYMMDD($_POST['form_end_date']);\n        sqlStatement(\n            \"DELETE log, lce, al FROM log \" .\n            \"LEFT JOIN log_comment_encrypt AS lce ON lce.log_id = log.id \" .\n            \"LEFT JOIN api_log AS al ON al.log_id = log.id \" .\n            \"WHERE log.date <= ?\",\n            array(\"$end_date 23:59:59\")\n        );\n        sqlStatement(\"OPTIMIZE TABLE log\");\n    } else {\n        die(xlt(\"End date is missing!\"));\n    }\n    $form_step = -1;\n    $auto_continue = true;\n}\n\n++$form_step;\n?>\n\n  </td>\n </tr>\n</table>\n\n<input type='hidden' name='form_step' value='<?php echo attr($form_step); ?>' />\n<input type='hidden' name='form_status' value='<?php echo attr($form_status); ?>' />\n\n</form>\n\n<?php\nob_flush();\nflush();\nif ($cmd) {\n    $tmp0 = exec($cmd, $tmp1, $tmp2);\n\n    if ($tmp2) {\n        if ($eventlog == 1) {\n          // ViSolve : Restore previous state, if backup fails.\n             $res = sqlStatement(\"drop table if exists log_comment_encrypt\");\n             $res = sqlStatement(\"rename table log_comment_encrypt_backup to log_comment_encrypt\");\n             $res = sqlStatement(\"drop table if exists log\");\n             $res = sqlStatement(\"rename table log_backup to log\");\n             $res = sqlStatement(\"drop table if exists api_log\");\n             $res = sqlStatement(\"rename table api_log_backup to api_log\");\n        }\n        //Removed the connection details as it exposes all the database credentials\n\n        die(\"There was an error on the backup\");\n    }\n\n  //  ViSolve:  If the Eventlog is set, then clear the temporary table  -- Start here\n    if ($eventlog == 1) {\n        $res = sqlStatement(\"drop table if exists log_backup\");\n        $res = sqlStatement(\"drop table if exists log_comment_encrypt_backup\");\n        $res = sqlStatement(\"drop table if exists api_log_backup\");\n        echo \"<br /><b>\";\n        echo xlt('Backup Successfully taken in') . \" \";\n        echo text($BACKUP_EVENTLOG_DIR);\n        echo \"</b>\";\n    }\n\n //  ViSolve:  If the Eventlog is set, then clear the temporary table  -- Ends here\n}\n\n// $cmdarr exists because some commands may be too long for a single exec.\n// Note eventlog stuff does not apply here.\nforeach ($cmdarr as $acmd) {\n    $tmp0 = exec($acmd, $tmp1, $tmp2);\n    if ($tmp2) {\n        die(\"Error $tmp2 in: \" . text($acmd));\n    }\n}\n\n// If a file was flagged to be gzip-compressed after this cmd, do it.\nif ($file_to_compress) {\n    if (!gz_compress_file($file_to_compress)) {\n        die(xlt(\"Error in gzip compression of file: \") . text($file_to_compress));\n    }\n}\n?>\n\n</center>\n\n<?php if ($auto_continue) { ?>\n<script>\n    setTimeout(\"document.forms[0].submit();\", 500);\n</script>\n<?php }\n\n// convert ||br-placeholder|| to <br>\n// (this is because the nl2br was not working for a reason I couldn't figure out)\nfunction brCustomPlaceholder(string $str): string\n{\n    return str_replace(\"||br-placeholder||\", \"<br />\", $str);\n}\n\n// Recursive directory remove (like an O/S insensitive \"rm -rf dirname\")\nfunction obliterate_dir($dir)\n{\n    if (!file_exists($dir)) {\n        return true;\n    }\n\n    if (!is_dir($dir) || is_link($dir)) {\n        return unlink($dir);\n    }\n\n    foreach (scandir($dir) as $item) {\n        if ($item == '.' || $item == '..') {\n            continue;\n        }\n\n        if (!obliterate_dir($dir . DIRECTORY_SEPARATOR . $item)) {\n            chmod($dir . DIRECTORY_SEPARATOR . $item, 0777);\n            if (!obliterate_dir($dir . DIRECTORY_SEPARATOR . $item)) {\n                return false;\n            }\n        };\n    }\n\n    return rmdir($dir);\n}\n\n// Create a tar archive given the archive file name, compression method if any, and the\n// array of file/directory names to archive\nfunction create_tar_archive($archiveName, $compressMethod, $itemArray)\n{\n    // Create a tar object using the pear library\n    $tar = new Archive_Tar($archiveName, $compressMethod);\n    if ($tar->create($itemArray)) {\n        return true;\n    }\n\n    return false;\n}\n\n// Compress a file using gzip. Source file removed, leaving only the compressed\n// *.gz file, just like gzip command line would behave.\nfunction gz_compress_file($source)\n{\n    $dest = $source . '.gz';\n    $error = false;\n    if ($fp_in = fopen($source, 'rb')) {\n        if ($fp_out = gzopen($dest, 'wb')) {\n            while (!feof($fp_in)) {\n                gzwrite($fp_out, fread($fp_in, 1024 * 512));\n            }\n\n            gzclose($fp_out);\n            fclose($fp_in);\n            unlink($source);\n        } else {\n            $error = true;\n        }\n    } else {\n        $error = true;\n    }\n\n    if ($error) {\n        return false;\n    } else {\n        return $dest;\n    }\n}\n?>\n\n</body>\n</html>\n"], "filenames": ["interface/main/backup.php"], "buggy_code_start_loc": [503], "buggy_code_end_loc": [1091], "fixing_code_start_loc": [503], "fixing_code_end_loc": [1099], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository openemr/openemr prior to 7.0.0.1.", "other": {"cve": {"id": "CVE-2022-2731", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-09T12:15:08.303", "lastModified": "2022-08-12T14:16:06.860", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository openemr/openemr prior to 7.0.0.1."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Reflejado en el repositorio de GitHub openemr/openemr versiones anteriores a 7.0.0.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.1", "matchCriteriaId": "5BE76D51-2D38-44E8-9ED0-630F49F42168"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/285fb234bd27ea4c46a29f2797edda7f38f1d8db", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/20b8d5c5-0764-4f0b-8ab3-b9f6b857175e", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/285fb234bd27ea4c46a29f2797edda7f38f1d8db"}}