{"buggy_code": ["<?php\n\nif(!defined('__IN_CLICK__'))\n    die('Hacking attempt!');\n\nclass BaseAction {\n    protected $mysql = null;\n    protected $message = null;\n\n    function __construct($message) {\n        global $CONFIG;\n        $this->message=$message;\n        $this->mysql = new mysqli($CONFIG['mysql_server'],$CONFIG['mysql_user'],\n                $CONFIG['mysql_password'],$CONFIG['mysql_database']);\n        if($this->mysql->connect_error) {\n            $mess=$this->mysql->error;\n            throw new Exception($mess,ERR_DB);\n        }\n    }\n\n    protected function getMessageParam($param,$err_message,$err_no) {\n        if(array_key_exists($param, $this->message))\n            if(is_string($this->message[$param]))\n                return htmlspecialchars($this->message[$param],ENT_QUOTES);\n            else\n                return $this->message[$param];\n        else\n            throw new Exception($err_message, $err_no);\n    }\n\n    /* returns true on successful call without result if affected rows>0\n     * returns result on successful call with result\n     * returns false on successful call without result if affected rows=0\n     * throws exception on unsuccessfull call.\n     */\n    protected function db_query($query) {\n        $query=str_replace(\"\\n\",\"\",$query);\n        $query=ereg_replace(\" +\",\" \",$query);\n        $result = $this->mysql->query($query);\n        if ($result === true) {\n            if($this->mysql->affected_rows>0)\n                return true;\n            else\n                return false;\n        } else if ($result === false){\n            $message='Error #'.$this->mysql->errno.' when executing \"'.\n                $query.'\": \"'.$this->mysql->error.'\"';\n            throw new Exception($message,ERR_DB);\n        } else {\n            $ret = $result->fetch_all(MYSQLI_BOTH);\n            $result->close();\n            return $ret;\n        }\n    }\n}\n\nclass UserAction extends BaseAction {\n    protected $sid = null;\n\n    private function checkSIDValid() {\n        global $DB;\n        $result = $this->db_query(\"SELECT session_id FROM $DB[sessions]\n                WHERE session_id='$this->sid' AND\n                ADDTIME(last_activity, '06:00:00:00')>NOW() LIMIT 1\");\n        if(empty($result)) {\n           throw new Exception(\"No such SID $this->sid or expired\", ERR_NO_SID);\n        }\n    }\n\n    private function updateLastActivity() {\n        global $DB;\n        $this->db_query(\"UPDATE $DB[sessions] SET\n            last_activity=NOW() WHERE session_id='$this->sid'\");\n    }\n\n    function  __construct($message) {\n        parent::__construct($message);\n        $this->sid = $this->getMessageParam('sid',\n                'No SID provided', ERR_NO_SID);\n        $this->checkSIDValid();\n        $this->updateLastActivity();\n    }\n}\n\nclass ItemAction extends UserAction {\n    protected $iid = null;\n\n    protected function checkItemBelongs() {\n        global $DB;\n        $result=$this->db_query(\"SELECT sessions.user_id\n            FROM $DB[sessions], $DB[items]\n            WHERE sessions.user_id=items.user_id\n                AND item_id=$this->iid\n                AND session_id='$this->sid'\n            LIMIT 1\");\n        if(empty($result))\n            throw new Exception(\"Item does not belong to user or invalid item\",\n                    ERR_NO_IID);\n    }\n\n    function  __construct($message) {\n        parent::__construct($message);\n        $this->iid = $this->getMessageParam('iid',\n                \"No IID provided\", ERR_NO_IID);\n    }\n}\n?>\n"], "fixing_code": ["<?php\n\nif(!defined('__IN_CLICK__'))\n    die('Hacking attempt!');\n\nclass BaseAction {\n    protected $mysql = null;\n    protected $message = null;\n\n    function __construct($message) {\n        global $CONFIG;\n        $this->message=$message;\n        $this->mysql = new mysqli($CONFIG['mysql_server'],$CONFIG['mysql_user'],\n                $CONFIG['mysql_password'],$CONFIG['mysql_database']);\n        if($this->mysql->connect_error) {\n            $mess=$this->mysql->error;\n            throw new Exception($mess,ERR_DB);\n        }\n    }\n\n    protected function getMessageParam($param,$err_message,$err_no) {\n        if(array_key_exists($param, $this->message))\n            if(is_string($this->message[$param]))\n                return htmlspecialchars($this->message[$param],ENT_QUOTES);\n            else\n                return $this->message[$param];\n        else\n            throw new Exception($err_message, $err_no);\n    }\n\n    /* returns true on successful call without result if affected rows>0\n     * returns result on successful call with result\n     * returns false on successful call without result if affected rows=0\n     * throws exception on unsuccessfull call.\n     */\n    protected function db_query($query) {\n        $query=str_replace(\"\\n\",\"\",$query);\n        $query=ereg_replace(\" +\",\" \",$query);\n        if(strpos($query, ';') !== false)\n            throw new Exception(\"Query '$query' contains ';'!\", ERR_DB);\n        $result = $this->mysql->query($query);\n        if ($result === true) {\n            if($this->mysql->affected_rows>0)\n                return true;\n            else\n                return false;\n        } else if ($result === false){\n            $message='Error #'.$this->mysql->errno.' when executing \"'.\n                $query.'\": \"'.$this->mysql->error.'\"';\n            throw new Exception($message,ERR_DB);\n        } else {\n            $ret = $result->fetch_all(MYSQLI_BOTH);\n            $result->close();\n            return $ret;\n        }\n    }\n}\n\nclass UserAction extends BaseAction {\n    protected $sid = null;\n\n    private function checkSIDValid() {\n        global $DB;\n        $result = $this->db_query(\"SELECT session_id FROM $DB[sessions]\n                WHERE session_id='$this->sid' AND\n                ADDTIME(last_activity, '06:00:00:00')>NOW() LIMIT 1\");\n        if(empty($result)) {\n           throw new Exception(\"No such SID $this->sid or expired\", ERR_NO_SID);\n        }\n    }\n\n    private function updateLastActivity() {\n        global $DB;\n        $this->db_query(\"UPDATE $DB[sessions] SET\n            last_activity=NOW() WHERE session_id='$this->sid'\");\n    }\n\n    function  __construct($message) {\n        parent::__construct($message);\n        $this->sid = $this->getMessageParam('sid',\n                'No SID provided', ERR_NO_SID);\n        $this->checkSIDValid();\n        $this->updateLastActivity();\n    }\n}\n\nclass ItemAction extends UserAction {\n    protected $iid = null;\n\n    protected function checkItemBelongs() {\n        global $DB;\n        $result=$this->db_query(\"SELECT sessions.user_id\n            FROM $DB[sessions], $DB[items]\n            WHERE sessions.user_id=items.user_id\n                AND item_id=$this->iid\n                AND session_id='$this->sid'\n            LIMIT 1\");\n        if(empty($result))\n            throw new Exception(\"Item does not belong to user or invalid item\",\n                    ERR_NO_IID);\n    }\n\n    function  __construct($message) {\n        parent::__construct($message);\n        $this->iid = $this->getMessageParam('iid',\n                \"No IID provided\", ERR_NO_IID);\n        #iid MUST be numeric. If not, it's not an IID!\n        if(!is_numeric($this->iid)) \n            throw new Exception(\"Malformed IID '$this->iid'!\", ERR_NO_IID);\n    }\n}\n?>\n"], "filenames": ["src/backend/include/BaseAction.php"], "buggy_code_start_loc": [38], "buggy_code_end_loc": [104], "fixing_code_start_loc": [39], "fixing_code_end_loc": [110], "type": "CWE-89", "message": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in lierdakil click-reminder. It has been rated as critical. This issue affects the function db_query of the file src/backend/include/BaseAction.php. The manipulation leads to sql injection. The name of the patch is 41213b660e8eb01b22c8074f06208f59a73ca8dc. It is recommended to apply a patch to fix this issue. The identifier VDB-218465 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2010-10007", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-18T06:15:11.023", "lastModified": "2023-01-25T18:22:31.723", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPPORTED WHEN ASSIGNED **** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in lierdakil click-reminder. It has been rated as critical. This issue affects the function db_query of the file src/backend/include/BaseAction.php. The manipulation leads to sql injection. The name of the patch is 41213b660e8eb01b22c8074f06208f59a73ca8dc. It is recommended to apply a patch to fix this issue. The identifier VDB-218465 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:click-reminder_project:click-reminder:*:*:*:*:*:*:*:*", "versionEndExcluding": "2010-09-17", "matchCriteriaId": "FEA3E51F-6F46-4029-A601-72ADF2ED29A9"}]}]}], "references": [{"url": "https://github.com/lierdakil/click-reminder/commit/41213b660e8eb01b22c8074f06208f59a73ca8dc", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218465", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218465", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/lierdakil/click-reminder/commit/41213b660e8eb01b22c8074f06208f59a73ca8dc"}}