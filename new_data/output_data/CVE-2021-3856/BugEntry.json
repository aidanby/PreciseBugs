{"buggy_code": ["/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.keycloak.theme;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.Locale;\nimport java.util.Properties;\n\n/**\n * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n */\npublic class ClassLoaderTheme implements Theme {\n\n    private String name;\n\n    private String parentName;\n\n    private String importName;\n\n    private Type type;\n\n    private ClassLoader classLoader;\n\n    private String templateRoot;\n\n    private String resourceRoot;\n\n    private String messageRoot;\n\n    private Properties properties;\n\n    public ClassLoaderTheme(String name, Type type, ClassLoader classLoader) throws IOException {\n        init(name, type, classLoader);\n    }\n\n    public void init(String name, Type type, ClassLoader classLoader) throws IOException {\n        this.name = name;\n        this.type = type;\n        this.classLoader = classLoader;\n\n        String themeRoot = \"theme/\" + name + \"/\" + type.toString().toLowerCase() + \"/\";\n\n        this.templateRoot = themeRoot;\n        this.resourceRoot = themeRoot + \"resources/\";\n        this.messageRoot = themeRoot + \"messages/\";\n        this.properties = new Properties();\n\n        URL p = classLoader.getResource(themeRoot + \"theme.properties\");\n        if (p != null) {\n            Charset encoding = PropertiesUtil.detectEncoding(p.openStream());\n            try (Reader reader = new InputStreamReader(p.openStream(), encoding)) {\n                properties.load(reader);\n            }\n            this.parentName = properties.getProperty(\"parent\");\n            this.importName = properties.getProperty(\"import\");\n        } else {\n            this.parentName = null;\n            this.importName = null;\n        }\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String getParentName() {\n        return parentName;\n    }\n\n    @Override\n    public String getImportName() {\n        return importName;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public URL getTemplate(String name) {\n        return classLoader.getResource(templateRoot + name);\n    }\n\n    @Override\n    public InputStream getResourceAsStream(String path) {\n        return classLoader.getResourceAsStream(resourceRoot + path);\n    }\n\n    @Override\n    public Properties getMessages(Locale locale) throws IOException {\n        return getMessages(\"messages\", locale);\n    }\n\n    @Override\n    public Properties getMessages(String baseBundlename, Locale locale) throws IOException {\n        if(locale == null){\n            return null;\n        }\n        Properties m = new Properties();\n\n        URL url = classLoader.getResource(this.messageRoot + baseBundlename + \"_\" + locale.toString() + \".properties\");\n        if (url != null) {\n            Charset encoding = PropertiesUtil.detectEncoding(url.openStream());\n            try (Reader reader = new InputStreamReader(url.openStream(), encoding)) {\n                m.load(reader);\n            }\n        }\n        return m;\n    }\n\n    @Override\n    public Properties getProperties() {\n        return properties;\n    }\n\n}\n", "package org.keycloak.theme;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.Locale;\nimport java.util.Properties;\n\nimport org.keycloak.Config;\nimport org.keycloak.models.KeycloakSession;\nimport org.keycloak.models.KeycloakSessionFactory;\n\npublic class ClasspathThemeResourceProviderFactory implements ThemeResourceProviderFactory, ThemeResourceProvider {\n\n    public static final String THEME_RESOURCES_TEMPLATES = \"theme-resources/templates/\";\n    public static final String THEME_RESOURCES_RESOURCES = \"theme-resources/resources/\";\n    public static final String THEME_RESOURCES_MESSAGES = \"theme-resources/messages/\";\n\n    private final String id;\n    private final ClassLoader classLoader;\n\n    public ClasspathThemeResourceProviderFactory(String id, ClassLoader classLoader) {\n        this.id = id;\n        this.classLoader = classLoader;\n    }\n\n    @Override\n    public ThemeResourceProvider create(KeycloakSession session) {\n        return this;\n    }\n\n    @Override\n    public URL getTemplate(String name) throws IOException {\n        return classLoader.getResource(THEME_RESOURCES_TEMPLATES + name);\n    }\n\n    @Override\n    public InputStream getResourceAsStream(String path) throws IOException {\n        return classLoader.getResourceAsStream(THEME_RESOURCES_RESOURCES + path);\n    }\n\n    @Override\n    public Properties getMessages(String baseBundlename, Locale locale) throws IOException {\n        Properties m = new Properties();\n        InputStream in = classLoader.getResourceAsStream(THEME_RESOURCES_MESSAGES + baseBundlename + \"_\" + locale.toString() + \".properties\");\n        if(in != null){\n            Charset encoding = PropertiesUtil.detectEncoding(in);\n            // detectEncoding closes the stream\n            try (Reader reader = new InputStreamReader(\n                        classLoader.getResourceAsStream(THEME_RESOURCES_MESSAGES + baseBundlename + \"_\" + locale.toString() + \".properties\"), encoding)) {\n                m.load(reader);\n            }\n        }\n        return m;\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public void init(Config.Scope config) {\n    }\n\n    @Override\n    public void postInit(KeycloakSessionFactory factory) {\n    }\n\n    @Override\n    public void close() {\n    }\n\n}\n", "package org.keycloak.testsuite.theme;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.keycloak.common.Version;\nimport org.keycloak.platform.Platform;\nimport org.keycloak.representations.idm.RealmRepresentation;\nimport org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\nimport org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\nimport org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\nimport org.keycloak.theme.Theme;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Paths;\nimport java.util.Locale;\nimport java.util.zip.GZIPInputStream;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\n@AuthServerContainerExclude(AuthServer.REMOTE)\npublic class ThemeResourceProviderTest extends AbstractTestRealmKeycloakTest {\n\n    @Override\n    public void configureTestRealm(RealmRepresentation testRealm) {\n\n    }\n\n    @Test\n    public void getTheme() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getTemplate(\"test.ftl\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void getResourceAsStream() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getResourceAsStream(\"test.js\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void getMessages() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-8818\"));\n                Assert.assertNotEquals(\"Full name (Theme-resources)\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"fullName\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void gzipEncoding() throws IOException {\n        final String resourcesVersion = testingClient.server().fetch(session -> Version.RESOURCES_VERSION, String.class);\n\n        // This will return true if files did not exists before the test OR they did exists, but were successfully deleted.\n        // False will be returned just in case that files were exists, but were NOT successfully deleted.\n        // This can happen in rare case when the file were created before in \"tmp\" directory by different system user and current user can't delete them\n        boolean filesNotExistsInTmp = testingClient.server().fetch(session -> {\n            boolean deleted = true;\n            File file1 = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile();\n            if (file1.isFile()) {\n                deleted = file1.delete();\n            }\n\n            File file2 = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile();\n            if (file2.isFile()) {\n                deleted = deleted && file2.delete();\n            }\n\n            return deleted;\n        }, Boolean.class);\n\n        assertEncoded(suiteContext.getAuthServerInfo().getContextRoot().toString() + \"/auth/resources/\" + resourcesVersion + \"/welcome/keycloak/css/welcome.css\", \"body {\");\n        assertEncoded(suiteContext.getAuthServerInfo().getContextRoot().toString() + \"/auth/js/keycloak.js\", \"function(root, factory)\");\n\n        // Check no files exists inside \"/tmp\" directory. We need to skip this test in the rare case when there are thombstone files created by different user\n        if (filesNotExistsInTmp) {\n            testingClient.server().run(session -> {\n                assertFalse(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile().isFile());\n                assertFalse(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile().isFile());\n            });\n        }\n\n        testingClient.server().run(session -> {\n            String serverTmpDir = Platform.getPlatform().getTmpDirectory().toString();\n            assertTrue(Paths.get(serverTmpDir, \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile().isFile());\n            assertTrue(Paths.get(serverTmpDir, \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile().isFile());\n        });\n    }\n\n    private void assertEncoded(String url, String expectedContent) throws IOException {\n        try (CloseableHttpClient httpClient = HttpClientBuilder.create().disableContentCompression().build()) {\n            HttpGet get = new HttpGet(url);\n            CloseableHttpResponse response = httpClient.execute(get);\n\n            InputStream is = response.getEntity().getContent();\n            assertNull(response.getFirstHeader(\"Content-Encoding\"));\n\n            String plain = IOUtils.toString(is, StandardCharsets.UTF_8);\n\n            response.close();\n\n            get = new HttpGet(url);\n            get.addHeader(\"Accept-Encoding\", \"gzip\");\n            response = httpClient.execute(get);\n\n\n            is = response.getEntity().getContent();\n            assertEquals(\"gzip\", response.getFirstHeader(\"Content-Encoding\").getValue());\n\n            String gzip = IOUtils.toString(new GZIPInputStream(is), StandardCharsets.UTF_8);\n\n            response.close();\n\n            assertEquals(plain, gzip);\n            assertTrue(plain.contains(expectedContent));\n        }\n    }\n\n    /**\n     * See KEYCLOAK-12926\n     */\n    @Test\n    public void getMessagesLocaleResolving() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                assertEquals(\"Test en_US_variant\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\", \"variant\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en_US\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en_US\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926\"));\n\n                assertEquals(\"only de_AT_variant\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving1\"));\n                assertNull(theme.getMessages(\"messages\", new Locale(\"de\", \"AT\")).get(\"test.keycloak-12926-resolving1\"));\n\n                assertEquals(\"only de_AT\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving2\"));\n                assertNull(theme.getMessages(\"messages\", new Locale(\"de\")).get(\"test.keycloak-12926-resolving2\"));\n\n                assertEquals(\"only de\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-only_de\"));\n                assertNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926-only_de\"));\n\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving3\"));\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\")).get(\"test.keycloak-12926-resolving3\"));\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\")).get(\"test.keycloak-12926-resolving3\"));\n                assertNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"fallback en\"));\n\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2016 Red Hat, Inc. and/or its affiliates\n * and other contributors as indicated by the @author tags.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.keycloak.theme;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.Locale;\nimport java.util.Properties;\n\n/**\n * @author <a href=\"mailto:sthorger@redhat.com\">Stian Thorgersen</a>\n */\npublic class ClassLoaderTheme implements Theme {\n\n    private String name;\n\n    private String parentName;\n\n    private String importName;\n\n    private Type type;\n\n    private ClassLoader classLoader;\n\n    private String templateRoot;\n\n    private String resourceRoot;\n\n    private String messageRoot;\n\n    private Properties properties;\n\n    public ClassLoaderTheme(String name, Type type, ClassLoader classLoader) throws IOException {\n        init(name, type, classLoader);\n    }\n\n    public void init(String name, Type type, ClassLoader classLoader) throws IOException {\n        this.name = name;\n        this.type = type;\n        this.classLoader = classLoader;\n\n        String themeRoot = \"theme/\" + name + \"/\" + type.toString().toLowerCase() + \"/\";\n\n        this.templateRoot = themeRoot;\n        this.resourceRoot = themeRoot + \"resources/\";\n        this.messageRoot = themeRoot + \"messages/\";\n        this.properties = new Properties();\n\n        URL p = classLoader.getResource(themeRoot + \"theme.properties\");\n        if (p != null) {\n            Charset encoding = PropertiesUtil.detectEncoding(p.openStream());\n            try (Reader reader = new InputStreamReader(p.openStream(), encoding)) {\n                properties.load(reader);\n            }\n            this.parentName = properties.getProperty(\"parent\");\n            this.importName = properties.getProperty(\"import\");\n        } else {\n            this.parentName = null;\n            this.importName = null;\n        }\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String getParentName() {\n        return parentName;\n    }\n\n    @Override\n    public String getImportName() {\n        return importName;\n    }\n\n    @Override\n    public Type getType() {\n        return type;\n    }\n\n    @Override\n    public URL getTemplate(String name) {\n        return classLoader.getResource(templateRoot + name);\n    }\n\n    @Override\n    public InputStream getResourceAsStream(String path) throws IOException {\n        final URL rootResourceURL = classLoader.getResource(resourceRoot);\n        if (rootResourceURL == null) {\n            return null;\n        }\n        final String rootPath = rootResourceURL.getPath();\n        final URL resourceURL = classLoader.getResource(resourceRoot + path);\n        if(resourceURL == null || !resourceURL.getPath().startsWith(rootPath)) {\n            return null;\n        }\n        else {\n            return resourceURL.openConnection().getInputStream();\n        }\n    }\n\n    @Override\n    public Properties getMessages(Locale locale) throws IOException {\n        return getMessages(\"messages\", locale);\n    }\n\n    @Override\n    public Properties getMessages(String baseBundlename, Locale locale) throws IOException {\n        if(locale == null){\n            return null;\n        }\n        Properties m = new Properties();\n\n        URL url = classLoader.getResource(this.messageRoot + baseBundlename + \"_\" + locale.toString() + \".properties\");\n        if (url != null) {\n            Charset encoding = PropertiesUtil.detectEncoding(url.openStream());\n            try (Reader reader = new InputStreamReader(url.openStream(), encoding)) {\n                m.load(reader);\n            }\n        }\n        return m;\n    }\n\n    @Override\n    public Properties getProperties() {\n        return properties;\n    }\n\n}\n", "package org.keycloak.theme;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.Locale;\nimport java.util.Properties;\n\nimport org.keycloak.Config;\nimport org.keycloak.models.KeycloakSession;\nimport org.keycloak.models.KeycloakSessionFactory;\n\npublic class ClasspathThemeResourceProviderFactory implements ThemeResourceProviderFactory, ThemeResourceProvider {\n\n    public static final String THEME_RESOURCES_TEMPLATES = \"theme-resources/templates/\";\n    public static final String THEME_RESOURCES_RESOURCES = \"theme-resources/resources/\";\n    public static final String THEME_RESOURCES_MESSAGES = \"theme-resources/messages/\";\n\n    private final String id;\n    private final ClassLoader classLoader;\n\n    public ClasspathThemeResourceProviderFactory(String id, ClassLoader classLoader) {\n        this.id = id;\n        this.classLoader = classLoader;\n    }\n\n    @Override\n    public ThemeResourceProvider create(KeycloakSession session) {\n        return this;\n    }\n\n    @Override\n    public URL getTemplate(String name) throws IOException {\n        return classLoader.getResource(THEME_RESOURCES_TEMPLATES + name);\n    }\n\n    @Override\n    public InputStream getResourceAsStream(String path) throws IOException {\n        final URL rootResourceURL = classLoader.getResource(THEME_RESOURCES_RESOURCES);\n        if (rootResourceURL == null) {\n            return null;\n        }\n        final String rootPath = rootResourceURL.getPath();\n        final URL resourceURL = classLoader.getResource(THEME_RESOURCES_RESOURCES + path);\n        if(resourceURL == null || !resourceURL.getPath().startsWith(rootPath)) {\n            return null;\n        }\n        else {\n            return resourceURL.openConnection().getInputStream();\n        }\n    }\n\n    @Override\n    public Properties getMessages(String baseBundlename, Locale locale) throws IOException {\n        Properties m = new Properties();\n        InputStream in = classLoader.getResourceAsStream(THEME_RESOURCES_MESSAGES + baseBundlename + \"_\" + locale.toString() + \".properties\");\n        if(in != null){\n            Charset encoding = PropertiesUtil.detectEncoding(in);\n            // detectEncoding closes the stream\n            try (Reader reader = new InputStreamReader(\n                        classLoader.getResourceAsStream(THEME_RESOURCES_MESSAGES + baseBundlename + \"_\" + locale.toString() + \".properties\"), encoding)) {\n                m.load(reader);\n            }\n        }\n        return m;\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public void init(Config.Scope config) {\n    }\n\n    @Override\n    public void postInit(KeycloakSessionFactory factory) {\n    }\n\n    @Override\n    public void close() {\n    }\n\n}\n", "package org.keycloak.testsuite.theme;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.keycloak.common.Version;\nimport org.keycloak.platform.Platform;\nimport org.keycloak.representations.idm.RealmRepresentation;\nimport org.keycloak.testsuite.AbstractTestRealmKeycloakTest;\nimport org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude;\nimport org.keycloak.testsuite.arquillian.annotation.AuthServerContainerExclude.AuthServer;\nimport org.keycloak.theme.Theme;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Paths;\nimport java.util.Locale;\nimport java.util.zip.GZIPInputStream;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\n@AuthServerContainerExclude(AuthServer.REMOTE)\npublic class ThemeResourceProviderTest extends AbstractTestRealmKeycloakTest {\n\n    @Override\n    public void configureTestRealm(RealmRepresentation testRealm) {\n\n    }\n\n    @Test\n    public void getTheme() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getTemplate(\"test.ftl\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void getResourceAsStream() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getResourceAsStream(\"test.js\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void getMessages() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNotNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-8818\"));\n                Assert.assertNotEquals(\"Full name (Theme-resources)\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"fullName\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void getResourceIllegalTraversal() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                Assert.assertNull(theme.getResourceAsStream(\"../templates/test.ftl\"));\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n\n    @Test\n    public void gzipEncoding() throws IOException {\n        final String resourcesVersion = testingClient.server().fetch(session -> Version.RESOURCES_VERSION, String.class);\n\n        // This will return true if files did not exists before the test OR they did exists, but were successfully deleted.\n        // False will be returned just in case that files were exists, but were NOT successfully deleted.\n        // This can happen in rare case when the file were created before in \"tmp\" directory by different system user and current user can't delete them\n        boolean filesNotExistsInTmp = testingClient.server().fetch(session -> {\n            boolean deleted = true;\n            File file1 = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile();\n            if (file1.isFile()) {\n                deleted = file1.delete();\n            }\n\n            File file2 = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile();\n            if (file2.isFile()) {\n                deleted = deleted && file2.delete();\n            }\n\n            return deleted;\n        }, Boolean.class);\n\n        assertEncoded(suiteContext.getAuthServerInfo().getContextRoot().toString() + \"/auth/resources/\" + resourcesVersion + \"/welcome/keycloak/css/welcome.css\", \"body {\");\n        assertEncoded(suiteContext.getAuthServerInfo().getContextRoot().toString() + \"/auth/js/keycloak.js\", \"function(root, factory)\");\n\n        // Check no files exists inside \"/tmp\" directory. We need to skip this test in the rare case when there are thombstone files created by different user\n        if (filesNotExistsInTmp) {\n            testingClient.server().run(session -> {\n                assertFalse(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile().isFile());\n                assertFalse(Paths.get(System.getProperty(\"java.io.tmpdir\"), \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile().isFile());\n            });\n        }\n\n        testingClient.server().run(session -> {\n            String serverTmpDir = Platform.getPlatform().getTmpDirectory().toString();\n            assertTrue(Paths.get(serverTmpDir, \"kc-gzip-cache\", resourcesVersion, \"welcome\", \"keycloak\", \"css\", \"welcome.css.gz\").toFile().isFile());\n            assertTrue(Paths.get(serverTmpDir, \"kc-gzip-cache\", resourcesVersion, \"js\", \"keycloak.js.gz\").toFile().isFile());\n        });\n    }\n\n    private void assertEncoded(String url, String expectedContent) throws IOException {\n        try (CloseableHttpClient httpClient = HttpClientBuilder.create().disableContentCompression().build()) {\n            HttpGet get = new HttpGet(url);\n            CloseableHttpResponse response = httpClient.execute(get);\n\n            InputStream is = response.getEntity().getContent();\n            assertNull(response.getFirstHeader(\"Content-Encoding\"));\n\n            String plain = IOUtils.toString(is, StandardCharsets.UTF_8);\n\n            response.close();\n\n            get = new HttpGet(url);\n            get.addHeader(\"Accept-Encoding\", \"gzip\");\n            response = httpClient.execute(get);\n\n\n            is = response.getEntity().getContent();\n            assertEquals(\"gzip\", response.getFirstHeader(\"Content-Encoding\").getValue());\n\n            String gzip = IOUtils.toString(new GZIPInputStream(is), StandardCharsets.UTF_8);\n\n            response.close();\n\n            assertEquals(plain, gzip);\n            assertTrue(plain.contains(expectedContent));\n        }\n    }\n\n    /**\n     * See KEYCLOAK-12926\n     */\n    @Test\n    public void getMessagesLocaleResolving() {\n        testingClient.server().run(session -> {\n            try {\n                Theme theme = session.theme().getTheme(\"base\", Theme.Type.LOGIN);\n                assertEquals(\"Test en_US_variant\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\", \"variant\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en_US\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en_US\", theme.getMessages(\"messages\", new Locale(\"en\", \"US\")).get(\"test.keycloak-12926\"));\n                assertEquals(\"Test en\", theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926\"));\n\n                assertEquals(\"only de_AT_variant\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving1\"));\n                assertNull(theme.getMessages(\"messages\", new Locale(\"de\", \"AT\")).get(\"test.keycloak-12926-resolving1\"));\n\n                assertEquals(\"only de_AT\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving2\"));\n                assertNull(theme.getMessages(\"messages\", new Locale(\"de\")).get(\"test.keycloak-12926-resolving2\"));\n\n                assertEquals(\"only de\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-only_de\"));\n                assertNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"test.keycloak-12926-only_de\"));\n\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\", \"variant\")).get(\"test.keycloak-12926-resolving3\"));\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\", \"AT\")).get(\"test.keycloak-12926-resolving3\"));\n                assertEquals(\"fallback en\", theme.getMessages(\"messages\", new Locale(\"de\")).get(\"test.keycloak-12926-resolving3\"));\n                assertNull(theme.getMessages(\"messages\", Locale.ENGLISH).get(\"fallback en\"));\n\n            } catch (IOException e) {\n                Assert.fail(e.getMessage());\n            }\n        });\n    }\n}\n"], "filenames": ["services/src/main/java/org/keycloak/theme/ClassLoaderTheme.java", "services/src/main/java/org/keycloak/theme/ClasspathThemeResourceProviderFactory.java", "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/theme/ThemeResourceProviderTest.java"], "buggy_code_start_loc": [108, 42, 69], "buggy_code_end_loc": [110, 43, 69], "fixing_code_start_loc": [108, 42, 70], "fixing_code_end_loc": [121, 54, 82], "type": "CWE-552", "message": "ClassLoaderTheme and ClasspathThemeResourceProviderFactory allows reading any file available as a resource to the classloader. By sending requests for theme resources with a relative path from an external HTTP client, the client will receive the content of random files if available.", "other": {"cve": {"id": "CVE-2021-3856", "sourceIdentifier": "secalert@redhat.com", "published": "2022-08-26T16:15:09.570", "lastModified": "2022-09-01T15:59:27.393", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ClassLoaderTheme and ClasspathThemeResourceProviderFactory allows reading any file available as a resource to the classloader. By sending requests for theme resources with a relative path from an external HTTP client, the client will receive the content of random files if available."}, {"lang": "es", "value": "ClassLoaderTheme y ClasspathThemeResourceProviderFactory permiten leer cualquier archivo disponible como recurso para el cargador de clases. Al enviar peticiones de recursos de temas con una ruta relativa desde un cliente HTTP externo, el cliente recibir\u00e1 el contenido de archivos aleatorios si est\u00e1n disponibles."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-552"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-552"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:keycloak:*:*:*:*:*:*:*:*", "versionEndExcluding": "15.1.0", "matchCriteriaId": "08FEF5EB-2BDF-45E6-988A-D9B04FC9281D"}]}]}], "references": [{"url": "https://access.redhat.com/security/cve/CVE-2021-3856", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2010164", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://github.com/keycloak/keycloak/commit/73f0474008e1bebd0733e62a22aceda9e5de6743", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/keycloak/keycloak/pull/8588", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://issues.redhat.com/browse/KEYCLOAK-19422", "source": "secalert@redhat.com", "tags": ["Permissions Required", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/keycloak/keycloak/commit/73f0474008e1bebd0733e62a22aceda9e5de6743"}}