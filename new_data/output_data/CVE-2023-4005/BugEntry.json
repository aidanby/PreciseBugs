{"buggy_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n * Client management.\n */\n\nnamespace Box\\Mod\\Client\\Api;\n\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Get a list of clients.\n     * \n     * @param array $data Filtering options.\n     * \n     * @param string $data['status'] [optional] Filter clients by status. Available options: 'active', 'suspended', 'canceled'.\n     * \n     * @param int $data['per_page'] [optional] Number of clients to display per page.\n     * \n     * @return array List of clients in a paginated manner.\n     */\n    public function get_list($data)\n    {\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        [$sql, $params] = $this->getService()->getSearchQuery($data);\n        $pager = $this->di['pager']->getSimpleResultSet($sql, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $clientArr) {\n            $client = $this->di['db']->getExistingModelById('Client', $clientArr['id'], 'Client not found');\n            $pager['list'][$key] = $this->getService()->toApiArray($client, true, $this->getIdentity());\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Get a list of clients.\n     * \n     * @param array $data Filtering options\n     * \n     * @param int $data['per_page'] [optional] Number of clients to display per page.\n     * \n     * @return array List of clients in a paginated manner\n     */\n    public function get_pairs($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->getPairs($data);\n    }\n\n    /**\n     * Get client by id or email. Email is also unique in database.\n     *\n     * @param int $id - client ID\n     *\n     * @optional string $email - client email\n     *\n     * @return array - client details\n     */\n    public function get($data)\n    {\n        $service = $this->getService();\n        $client = $service->get($data);\n\n        return $service->toApiArray($client, true, $this->getIdentity());\n    }\n\n    /**\n     * Login to clients area with client id.\n     *\n     * @param int $id - client ID\n     *\n     * @return array - client details\n     */\n    public function login($data)\n    {\n        $required = [\n            'id' => 'ID required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n        $result = $service->toSessionArray($client);\n\n        $session = $this->di['session'];\n        $session->set('client_id', $client->id);\n        $this->di['logger']->info('Logged in as client #%s', $client->id);\n\n        return $result;\n    }\n\n    /**\n     * Creates new client.\n     *\n     * @param string $email      - client email, must not be registered on system\n     * @param string $first_name - client first name\n     *\n     * @optional string $password - client password\n     * @optional string $auth_type - client authorization type. Default null\n     * @optional string $last_name - client last name\n     * @optional string $aid - alternative ID. If you import clients from other systems you can use this field to store foreign system ID\n     * @optional string $group_id - client group id\n     * @optional string $status - client status: \"active, suspended, canceled\"\n     * @optional string $created_at - ISO 8601 date for client creation date\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $lang - Client language\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return int - client id\n     */\n    public function create($data)\n    {\n        $required = [\n            'email' => 'Email required',\n            'first_name' => 'First name is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $validator = $this->di['validator'];\n        $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n\n        $service = $this->getService();\n        if ($service->emailAlreadyRegistered($data['email'])) {\n            throw new \\Box_Exception('Email is already registered.');\n        }\n\n        $validator->isPasswordStrong($data['password']);\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientCreate', 'params' => $data]);\n        $id = $service->adminCreateClient($data);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientCreate', 'params' => $data]);\n\n        return $id;\n    }\n\n    /**\n     * Deletes client from system.\n     *\n     * @param string $id - client ID\n     *\n     * @return bool\n     */\n    public function delete($data)\n    {\n        $required = [\n            'id' => 'Client id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientDelete', 'params' => ['id' => $model->id]]);\n\n        $id = $model->id;\n        $this->getService()->remove($model);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientDelete', 'params' => ['id' => $id]]);\n\n        $this->di['logger']->info('Removed client #%s', $id);\n\n        return true;\n    }\n\n    /**\n     * Update client profile.\n     *\n     * @param string $id - client ID\n     *\n     * @optional string $email - client email\n     * @optional string $first_name - client first_name\n     * @optional string $last_name - client last_name\n     * @optional string $status - client status\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $lang - Client language\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return bool\n     */\n    public function update($data = [])\n    {\n        $required = ['id' => 'Id required'];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n\n        if (!is_null($data['email'] ?? null)) {\n            $email = $data['email'];\n            $email = $this->di['tools']->validateAndSanitizeEmail($email);\n            if ($service->emailAlreadyRegistered($email, $client)) {\n                throw new \\Box_Exception('Can not change email. It is already registered.');\n            }\n        }\n\n        if (!empty($data['birthday'])) {\n            $this->di['validator']->isBirthdayValid($data['birthday']);\n        }\n\n        if (($data['currency'] ?? null) && $service->canChangeCurrency($client, ($data['currency'] ?? null))) {\n            $client->currency = $data['currency'] ?? $client->currency;\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientUpdate', 'params' => $data]);\n\n        $phoneCC = $data['phone_cc'] ?? $client->phone_cc;\n        if (!empty($phoneCC)) {\n            $client->phone_cc = intval($phoneCC);\n        }\n\n        $client->email = (!empty($data['email']) ? $data['email'] : $client->email);\n        $client->first_name = (!empty($data['first_name']) ? $data['first_name'] : $client->first_name);\n        $client->last_name = (!empty($data['last_name']) ? $data['last_name'] : $client->last_name);\n        $client->aid = (!empty($data['aid']) ? $data['aid'] : $client->aid);\n        $client->gender = (!empty($data['gender']) ? $data['gender'] : $client->gender);\n        $client->birthday = (!empty($data['birthday']) ? $data['birthday'] : $client->birthday);\n        $client->company = (!empty($data['company']) ? $data['company'] : $client->company);\n        $client->company_vat = (!empty($data['company_vat']) ? $data['company_vat'] : $client->company_vat);\n        $client->address_1 = (!empty($data['address_1']) ? $data['address_1'] : $client->address_1);\n        $client->address_2 = (!empty($data['address_2']) ? $data['address_2'] : $client->address_2);\n        $client->phone = (!empty($data['phone']) ? $data['phone'] : $client->phone);\n        $client->document_type = (!empty($data['document_type']) ? $data['document_type'] : $client->document_type);\n        $client->document_nr = (!empty($data['document_nr']) ? $data['document_nr'] : $client->document_nr);\n        $client->notes = (!empty($data['notes']) ? $data['notes'] : $client->notes);\n        $client->country = (!empty($data['country']) ? $data['country'] : $client->country);\n        $client->postcode = (!empty($data['postcode']) ? $data['postcode'] : $client->postcode);\n        $client->state = (!empty($data['state']) ? $data['state'] : $client->state);\n        $client->city = (!empty($data['city']) ? $data['city'] : $client->city);\n\n        $client->status = (!empty($data['status']) ? $data['status'] : $client->status);\n        $client->email_approved = (!empty($data['email_approved']) ? $data['email_approved'] : $client->email_approved);\n        $client->tax_exempt = (!empty($data['tax_exempt']) ? $data['tax_exempt'] : $client->tax_exempt);\n        $client->created_at = (!empty($data['created_at']) ? $data['created_at'] : $client->created_at);\n\n        $client->custom_1 = (!empty($data['custom_1']) ? $data['custom_1'] : $client->custom_1);\n        $client->custom_2 = (!empty($data['custom_2']) ? $data['custom_2'] : $client->custom_2);\n        $client->custom_3 = (!empty($data['custom_3']) ? $data['custom_3'] : $client->custom_3);\n        $client->custom_4 = (!empty($data['custom_4']) ? $data['custom_4'] : $client->custom_4);\n        $client->custom_5 = (!empty($data['custom_5']) ? $data['custom_5'] : $client->custom_5);\n        $client->custom_6 = (!empty($data['custom_6']) ? $data['custom_6'] : $client->custom_6);\n        $client->custom_7 = (!empty($data['custom_7']) ? $data['custom_7'] : $client->custom_7);\n        $client->custom_8 = (!empty($data['custom_8']) ? $data['custom_8'] : $client->custom_8);\n        $client->custom_9 = (!empty($data['custom_9']) ? $data['custom_9'] : $client->custom_9);\n        $client->custom_10 = (!empty($data['custom_10']) ? $data['custom_10'] : $client->custom_10);\n\n        $client->client_group_id = (!empty($data['group_id']) ? $data['group_id'] : $client->client_group_id);\n        $client->company_number = (!empty($data['company_number']) ? $data['company_number'] : $client->company_number);\n        $client->type = (!empty($data['type']) ? $data['type'] : $client->type);\n        $client->lang = (!empty($data['lang']) ? $data['lang'] : $client->lang);\n\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($client);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientUpdate', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Updated client #%s profile', $client->id);\n\n        return true;\n    }\n\n    /**\n     * Change client password.\n     *\n     * @param int    $id               - Client ID\n     * @param string $password         - new client password\n     * @param string $password_confirm - repeat same new client password\n     *\n     * @return bool\n     */\n    public function change_password($data)\n    {\n        $required = [\n            'id' => 'ID required',\n            'password' => 'Password required',\n            'password_confirm' => 'Password confirmation required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        if ($data['password'] != $data['password_confirm']) {\n            throw new \\Box_Exception('Passwords do not match');\n        }\n\n        $this->di['validator']->isPasswordStrong($data['password']);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientPasswordChange', 'params' => $data]);\n\n        $client->pass = $this->di['password']->hashIt($data['password']);\n        $client->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($client);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientPasswordChange', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n\n        $this->di['logger']->info('Changed client #%s password', $client->id);\n\n        return true;\n    }\n\n    /**\n     * Returns list of client payments.\n     *\n     * @return array\n     */\n    public function balance_get_list($data)\n    {\n        $service = $this->di['mod_service']('Client', 'Balance');\n        [$q, $params] = $service->getSearchQuery($data);\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        $pager = $this->di['pager']->getSimpleResultSet($q, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $item) {\n            $pager['list'][$key] = [\n                'id' => $item['id'],\n                'description' => $item['description'],\n                'amount' => $item['amount'],\n                'currency' => $item['currency'],\n                'created_at' => $item['created_at'],\n            ];\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Remove row from clients balance.\n     *\n     * @param int $id - Balance line id\n     *\n     * @return bool\n     */\n    public function balance_delete($data)\n    {\n        $required = [\n            'id' => 'Client ID is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientBalance', $data['id'], 'Balance line not found');\n\n        $id = $model->id;\n        $client_id = $model->client_id;\n        $amount = $model->amount;\n\n        $this->di['db']->trash($model);\n\n        $this->di['logger']->info('Removed line %s from client #%s balance for %s', $id, $client_id, $amount);\n\n        return true;\n    }\n\n    /**\n     * Adds funds to clients balance.\n     *\n     * @param int $id          - Client ID\n     * @param int $amount      - Amount of clients currency to added to balance\n     * @param int $description - Description of this transaction\n     *\n     * @optional string $type - Related item type\n     * @optional string $rel_id - Related item id\n     *\n     * @return bool\n     */\n    public function balance_add_funds($data)\n    {\n        $required = [\n            'id' => 'Client ID required',\n            'amount' => 'Amount is required',\n            'description' => 'Description is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n        $service->addFunds($client, $data['amount'], $data['description'], $data);\n\n        return true;\n    }\n\n    /**\n     * Remove password reminders which were not confirmed in 2 hours.\n     *\n     * @return bool\n     */\n    public function batch_expire_password_reminders()\n    {\n        $service = $this->di['mod_service']('client');\n        $expired = $service->getExpiredPasswordReminders();\n        foreach ($expired as $model) {\n            $this->di['db']->trash($model);\n        }\n\n        $this->di['logger']->info('Executed action to delete expired clients password reminders');\n\n        return true;\n    }\n\n    /**\n     * Get list of clients logins history.\n     *\n     * @optional int $client_id - filter by client\n     *\n     * @return array\n     */\n    public function login_history_get_list($data)\n    {\n        [$q, $params] = $this->getService()->getHistorySearchQuery($data);\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        $pager = $this->di['pager']->getSimpleResultSet($q, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $item) {\n            $pager['list'][$key] = [\n                'id' => $item['id'],\n                'ip' => $item['ip'],\n                'created_at' => $item['created_at'],\n                'client' => [\n                    'id' => $item['client_id'],\n                    'first_name' => $item['first_name'],\n                    'last_name' => $item['last_name'],\n                    'email' => $item['email'],\n                ],\n            ];\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Remove log entry form clients logins history.\n     *\n     * @param int $id - Log entry ID\n     *\n     * @return bool\n     */\n    public function login_history_delete($data)\n    {\n        $required = [\n            'id' => 'Id not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n        $model = $this->di['db']->getExistingModelById('ActivityClientHistory', $data['id']);\n\n        if (!$model instanceof \\Model_ActivityClientHistory) {\n            throw new \\Box_Exception('Event not found');\n        }\n        $this->di['db']->trash($model);\n\n        return true;\n    }\n\n    /**\n     * Return client statuses with counter.\n     *\n     * @return array\n     */\n    public function get_statuses($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->counter();\n    }\n\n    /**\n     * Return client groups. Id and title pairs.\n     *\n     * @return array\n     */\n    public function group_get_pairs($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->getGroupPairs();\n    }\n\n    /**\n     * Create new clients group.\n     *\n     * @param string $title - New group title\n     *\n     * @return int $id - newly created group id\n     */\n    public function group_create($data)\n    {\n        $required = [\n            'title' => 'Group title is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        return $this->getService()->createGroup($data);\n    }\n\n    /**\n     * Update client group.\n     *\n     * @param int $id - client group ID\n     *\n     * @optional string $title - new group title\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     */\n    public function group_update($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        $model->title = $data['title'] ?? $model->title;\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        return true;\n    }\n\n    /**\n     * Delete client group.\n     *\n     * @param int $id - client group ID\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     */\n    public function group_delete($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        return $this->getService()->deleteGroup($model);\n    }\n\n    /**\n     * Get client group details.\n     *\n     * @param int $id - client group ID\n     *\n     * @return array\n     *\n     * @throws ErrorException\n     */\n    public function group_get($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        return $this->di['db']->toArray($model);\n    }\n\n    /**\n     * Deletes clients with given IDs.\n     *\n     * @param array $ids - IDs for deletion\n     *\n     * @return bool\n     */\n    public function batch_delete($data)\n    {\n        $required = [\n            'ids' => 'IDs not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        foreach ($data['ids'] as $id) {\n            $this->delete(['id' => $id]);\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes client login logs with given IDs.\n     *\n     * @param array $ids - IDs for deletion\n     *\n     * @return bool\n     */\n    public function batch_delete_log($data)\n    {\n        $required = [\n            'ids' => 'IDs not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        foreach ($data['ids'] as $id) {\n            $this->login_history_delete(['id' => $id]);\n        }\n\n        return true;\n    }\n\n    public function export_csv($data)\n    {\n        $data['headers'] ??= [];\n        return $this->getService()->exportCSV($data['headers']);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n * Admin profile management.\n */\n\nnamespace Box\\Mod\\Profile\\Api;\n\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Returns currently logged in staff member profile information.\n     *\n     * @return array\n     *\n     * @example\n     * <code class=\"response\">\n     * Array\n     * (\n     * \t\t[id] => 1\n     *\t\t[role] => staff\n     *\t\t[admin_group_id] => 1\n     *\t\t[email] => demo@fossbilling.org\n     *\t\t[pass] => 89e495e7941cf9e40e6980d14a16bf023ccd4c91\n     *\t\t[name] => Demo Administrator\n     *\t\t[signature] => Sincerely Yours, Demo Administrator\n     * \t\t[status] => active\n     *\t\t[api_token] => 29baba87f1c120f1b7fc6b0139167003\n     *\t\t[created_at] => 1310024416\n     *\t\t[updated_at] => 1310024416\n     * )\n     * </code>\n     */\n    public function get()\n    {\n        return $this->getService()->getAdminIdentityArray($this->getIdentity());\n    }\n\n    /**\n     * Clear session data and logout from system.\n     *\n     * @return bool\n     */\n    public function logout()\n    {\n        unset($_COOKIE['BOXADMR']);\n        $this->di['session']->destroy('admin');\n        $this->di['logger']->info('Admin logged out');\n\n        return true;\n    }\n\n    /**\n     * Update currently logged in staff member details.\n     *\n     * @optional string $email - new email\n     * @optional string $name - new name\n     * @optional string $signature - new signature\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function update($data)\n    {\n        if (!is_null($data['email'])) {\n            $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n        }\n\n        return $this->getService()->updateAdmin($this->getIdentity(), $data);\n    }\n\n    /**\n     * Generates new API token for currently logged in staff member.\n     *\n     * @return bool\n     */\n    public function generate_api_key($data)\n    {\n        return $this->getService()->generateNewApiKey($this->getIdentity());\n    }\n\n    /**\n     * Change password for currently logged in staff member.\n     *\n     * @param string $current_password - staff member current password\n     * @param string $new_password     - staff member new password\n     * @param string $confirm_password - staff member new password confirmation\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function change_password($data)\n    {\n        $required = [\n            'current_password' => 'Current password required',\n            'new_password' => 'New password required',\n            'confirm_password' => 'New password confirmation required',\n        ];\n        $validator = $this->di['validator'];\n        $validator->checkRequiredParamsForArray($required, $data);\n        $validator->isPasswordStrong($data['new_password']);\n\n        if ($data['new_password'] != $data['confirm_password']) {\n            throw new \\Exception('Passwords do not match');\n        }\n\n        $staff = $this->getIdentity();\n\n        if(!$this->di['password']->verify($data['current_password'], $staff->pass)) {\n            throw new \\Exception('Current password incorrect');\n        }\n\n        return $this->getService()->changeAdminPassword($staff, $data['new_password']);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n *Client profile management.\n */\n\nnamespace Box\\Mod\\Profile\\Api;\n\nclass Client extends \\Api_Abstract\n{\n    /**\n     * Get currently logged in client details.\n     */\n    public function get()\n    {\n        $clientService = $this->di['mod_service']('client');\n\n        return $clientService->toApiArray($this->getIdentity(), true, $this->getIdentity());\n    }\n\n    /**\n     * Update currently logged in client details.\n     *\n     * @optional string $email - new client email. Must not exist on system\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $lang - language option\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function update($data)\n    {\n        if (!is_null($data['email'])) {\n            $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n        }\n\n        return $this->getService()->updateClient($this->getIdentity(), $data);\n    }\n\n    /**\n     * Retrieve current API key.\n     */\n    public function api_key_get($data)\n    {\n        $client = $this->getIdentity();\n\n        return $client->api_token;\n    }\n\n    /**\n     * Generate new API key.\n     */\n    public function api_key_reset($data)\n    {\n        return $this->getService()->resetApiKey($this->getIdentity());\n    }\n\n    /**\n     * Change password for currently logged in client.\n     * \n     * @param string $current_password - client current password\n     * @param string $new_password     - client new password\n     * @param string $confirm_password - client new password confirmation\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     * \n     */\n    public function change_password($data)\n    {\n        $required = [\n            'current_password' => 'Current password required',\n            'new_password' => 'New password required',\n            'confirm_password' => 'New password confirmation required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n        $this->di['validator']->isPasswordStrong($data['new_password']);\n\n        if ($data['new_password'] != $data['confirm_password']) {\n            throw new \\Exception('Passwords do not match');\n        }\n\n        $client = $this->getIdentity();\n\n        if(!$this->di['password']->verify($data['current_password'], $client->pass)) {\n            throw new \\Exception('Current password incorrect');\n        }\n\n        return $this->getService()->changeClientPassword($client, $data['new_password']);\n    }\n\n    /**\n     * Clear session and logout.\n     *\n     * @return bool\n     */\n    public function logout()\n    {\n        return $this->getService()->logoutClient();\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Profile;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function changeAdminPassword(\\Model_Admin $admin, $new_password)\n    {\n        $event_params = [];\n        $event_params['password'] = $new_password;\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffProfilePasswordChange', 'params' => $event_params]);\n\n        $admin->pass = $this->di['password']->hashIt($new_password);\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffProfilePasswordChange', 'params' => $event_params]);\n\n        $this->di['logger']->info('Changed profile password');\n\n        return true;\n    }\n\n    public function generateNewApiKey(\\Model_Admin $admin)\n    {\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffApiKeyChange', 'params' => $event_params]);\n\n        $admin->api_token = $this->di['tools']->generatePassword(32);\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffApiKeyChange', 'params' => $event_params]);\n\n        $this->di['logger']->info('Generated new API key');\n\n        return true;\n    }\n\n    public function updateAdmin(\\Model_Admin $admin, array $data)\n    {\n        $event_params = $data;\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffProfileUpdate', 'params' => $event_params]);\n\n        $admin->email = $data['email'] ?? $admin->email;\n        $admin->name = $data['name'] ?? $admin->name;\n        $admin->signature = $data['signature'] ?? $admin->signature;\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffProfileUpdate', 'params' => $event_params]);\n\n        $this->di['logger']->info('Updated profile');\n\n        return true;\n    }\n\n    public function getAdminIdentityArray(\\Model_Admin $identity)\n    {\n        return [\n            'id' => $identity->id,\n            'role' => $identity->role,\n            'admin_group_id' => $identity->admin_group_id,\n            'email' => $identity->email,\n            'name' => $identity->name,\n            'signature' => $identity->signature,\n            'status' => $identity->status,\n            'api_token' => $identity->api_token,\n            'created_at' => $identity->created_at,\n            'updated_at' => $identity->updated_at,\n        ];\n    }\n\n    public function updateClient(\\Model_Client $client, array $data = [])\n    {\n        $event_params = $data;\n        $event_params['id'] = $client->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientProfileUpdate', 'params' => $event_params]);\n\n        $mod = $this->di['mod']('client');\n        $config = $mod->getConfig();\n        $email = $data['email'] ?? '';\n        if (\n            $client->email != $email\n            && isset($config['disable_change_email'])\n            && $config['disable_change_email']\n        ) {\n            throw new \\Box_Exception('Email can not be changed');\n        }\n\n        if (!empty($email)) {\n            $this->di['tools']->validateAndSanitizeEmail($data['email']);\n\n            $clientService = $this->di['mod_service']('client');\n            if ($clientService->emailAlreadyRegistered($email, $client)) {\n                throw new \\Box_Exception('Can not change email. It is already registered.');\n            }\n\n            $client->email = $email;\n        }\n\n        $client->first_name = $data['first_name'] ?? $client->first_name;\n        $client->last_name = $data['last_name'] ?? $client->last_name;\n        $client->gender = $data['gender'] ?? $client->gender;\n\n        $birthday = $data['birthday'] ?? null;\n        if (strlen(trim($birthday)) > 0 && false === strtotime($birthday)) {\n            throw new \\Box_Exception('Invalid birthdate value');\n        }\n        $client->birthday = $birthday;\n\n        $client->company = $data['company'] ?? $client->company;\n        $client->company_vat = $data['company_vat'] ?? $client->company_vat;\n        $client->company_number = $data['company_number'] ?? $client->company_number;\n        $client->type = $data['type'] ?? $client->type;\n        $client->address_1 = $data['address_1'] ?? $client->address_1;\n        $client->address_2 = $data['address_2'] ?? $client->address_2;\n        $client->phone_cc = $data['phone_cc'] ?? $client->phone_cc;\n        $client->phone = $data['phone'] ?? $client->phone;\n        $client->country = $data['country'] ?? $client->country;\n        $client->postcode = $data['postcode'] ?? $client->postcode;\n        $client->city = $data['city'] ?? $client->city;\n        $client->state = $data['state'] ?? $client->state;\n        $client->document_type = $data['document_type'] ?? $client->document_type;\n        $client->document_nr = $data['document_nr'] ?? $client->document_nr;\n\n        if (isset($client->document_nr)) {\n            $client->document_type = $data['document_type'] ?? 'passport';\n        }\n        $client->lang = $data['lang'] ?? $client->lang;\n        $client->notes = $data['notes'] ?? $client->notes;\n        $client->custom_1 = $data['custom_1'] ?? $client->custom_1;\n        $client->custom_2 = $data['custom_2'] ?? $client->custom_2;\n        $client->custom_3 = $data['custom_3'] ?? $client->custom_3;\n        $client->custom_4 = $data['custom_4'] ?? $client->custom_4;\n        $client->custom_5 = $data['custom_5'] ?? $client->custom_5;\n        $client->custom_6 = $data['custom_6'] ?? $client->custom_6;\n        $client->custom_7 = $data['custom_7'] ?? $client->custom_7;\n        $client->custom_8 = $data['custom_8'] ?? $client->custom_8;\n        $client->custom_9 = $data['custom_9'] ?? $client->custom_9;\n        $client->custom_10 = $data['custom_10'] ?? $client->custom_10;\n\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        foreach ($client as $key => $value) {\n            if (empty($value)) {\n                $client->$key = null;\n            }\n        }\n\n        $this->di['db']->store($client);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientProfileUpdate', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Updated profile');\n\n        return true;\n    }\n\n    public function resetApiKey(\\Model_Client $client)\n    {\n        $client->api_token = $this->di['tools']->generatePassword(32);\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($client);\n\n        $this->di['logger']->info('Generated new API key');\n\n        return $client->api_token;\n    }\n\n    public function changeClientPassword(\\Model_Client $client, $new_password)\n    {\n        $event_params = [];\n        $event_params['password'] = $new_password;\n        $event_params['id'] = $client->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientProfilePasswordChange', 'params' => $event_params]);\n\n        $client->pass = $this->di['password']->hashIt($new_password);\n        $this->di['db']->store($client);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientProfilePasswordChange', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Changed profile password');\n\n        return true;\n    }\n\n    public function logoutClient()\n    {\n        $this->di['session']->destroy('client');\n        $this->di['logger']->info('Logged out');\n\n        return true;\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Staff;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function login($email, $password, $ip)\n    {\n        $event_params = [];\n        $event_params['email'] = $email;\n        $event_params['password'] = $password;\n        $event_params['ip'] = $ip;\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminLogin', 'params' => $event_params]);\n\n        $model = $this->authorizeAdmin($email, $password);\n        if (!$model instanceof \\Model_Admin) {\n            $this->di['events_manager']->fire(['event' => 'onEventAdminLoginFailed', 'params' => $event_params]);\n            throw new \\Box_Exception('Check your login details', null, 403);\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminLogin', 'params' => ['id' => $model->id, 'ip' => $ip]]);\n\n        $result = [\n            'id' => $model->id,\n            'email' => $model->email,\n            'name' => $model->name,\n            'role' => $model->role,\n        ];\n\n        session_regenerate_id();\n        $this->di['session']->set('admin', $result);\n\n        $this->di['logger']->info(sprintf('Staff member %s logged in', $model->id));\n\n        return $result;\n    }\n\n    public function getAdminsCount()\n    {\n        $sql = 'SELECT COUNT(*) FROM admin WHERE 1';\n\n        return $this->di['db']->getCell($sql);\n    }\n\n    public function setPermissions($member_id, $array)\n    {\n        $array = array_filter($array);\n        $sql = 'UPDATE admin SET permissions = :p WHERE id = :id';\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindValue('p', json_encode($array));\n        $stmt->bindValue('id', $member_id);\n        $stmt->execute();\n\n        return true;\n    }\n\n    public function getPermissions($member_id)\n    {\n        $sql = 'SELECT permissions FROM admin WHERE id = :id';\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute(['id' => $member_id]);\n        $json = $stmt->fetchColumn() ?? '';\n        $permissions = json_decode($json, 1);\n        if (!$permissions) {\n            return [];\n        }\n\n        return $permissions;\n    }\n\n    public function hasPermission($member, $mod, $method = null)\n    {\n        if (\\Model_Admin::ROLE_CRON == $member->role || \\Model_Admin::ROLE_ADMIN == $member->role) {\n            return true;\n        }\n\n        $permissions = null;\n        if (is_null($permissions)) {\n            $permissions = $this->getPermissions($member->id);\n        }\n\n        if (empty($permissions)) {\n            return false;\n        }\n\n        if (!array_key_exists($mod, $permissions)) {\n            return false;\n        }\n\n        if (!is_null($method) && is_array($permissions[$mod]) && !in_array($method, $permissions[$mod])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function onAfterClientOrderCreate(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n\n        try {\n            $orderModel = $di['db']->load('ClientOrder', $params['id']);\n            $orderTicketService = $di['mod_service']('order');\n            $order = $orderTicketService->toApiArray($orderModel, true);\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_client_order';\n            $email['order'] = $order;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientOpenTicket(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n\n            $helpdeskModel = $di['db']->load('SupportHelpdesk', $ticketModel->support_helpdesk_id);\n            $emailService = $di['mod_service']('email');\n            if (!empty($helpdeskModel->email)) {\n                $email = [];\n                $email['to'] = $helpdeskModel->email;\n                $email['code'] = 'mod_support_helpdesk_ticket_open';\n                $email['ticket'] = $ticket;\n                $emailService->sendTemplate($email);\n\n                return true;\n            }\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_open';\n            $email['ticket'] = $ticket;\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientReplyTicket(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_reply';\n            $email['ticket'] = $ticket;\n\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientCloseTicket(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_close';\n            $email['ticket'] = $ticket;\n\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterGuestPublicTicketOpen(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getPublicTicketById($params['id']);\n            $ticket = $supportTicketService->publicToApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_open';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientSignUp(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $clientService = $di['mod_service']('client');\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_client_signup';\n            $email['c'] = $clientService->get(['id' => $params['id']]);\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n\n        return true;\n    }\n\n    public static function onAfterGuestPublicTicketReply(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getPublicTicketById($params['id']);\n            $ticket = $supportTicketService->publicToApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_reply';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterGuestPublicTicketClose(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportService = $di['mod_service']('Support');\n            $publicTicket = $di['db']->load('SupportPTicket', $params['id']);\n            $ticket = $supportService->publicToApiArray($publicTicket);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_close';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('Email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public function getList($data)\n    {\n        $data['no_cron'] = true;\n\n        [$query, $params] = $this->getSearchQuery($data);\n\n        $di = $this->getDi();\n        $pager = $di['pager'];\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n\n        return $pager->getSimpleResultSet($query, $params, $per_page);\n    }\n\n    public function getSearchQuery($data)\n    {\n        $query = 'SELECT * FROM admin';\n\n        $search = $data['search'] ?? null;\n        $status = $data['status'] ?? null;\n        $no_cron = (bool) ($data['no_cron'] ?? false);\n\n        $where = [];\n        $bindings = [];\n\n        if ($search) {\n            $search = \"%$search%\";\n            $where[] = '(name LIKE :name OR email LIKE :email )';\n            $bindings[':name'] = $search;\n            $bindings[':email'] = $search;\n        }\n\n        if ($status) {\n            $where[] = 'status = :status';\n            $bindings[':status'] = $status;\n        }\n\n        if ($no_cron) {\n            $where[] = 'role != :role';\n            $bindings[':role'] = \\Model_Admin::ROLE_CRON;\n        }\n\n        if (!empty($where)) {\n            $query = $query . ' WHERE ' . implode(' AND ', $where);\n        }\n        $query .= ' ORDER BY `admin_group_id` ASC, id ASC';\n\n        return [$query, $bindings];\n    }\n\n    /**\n     * @return \\Model_Admin\n     */\n    public function getCronAdmin()\n    {\n        $cron = $this->di['db']->findOne('Admin', 'role = :role', [':role' => \\Model_Admin::ROLE_CRON]);\n        if ($cron instanceof \\Model_Admin) {\n            return $cron;\n        }\n\n        $cronEmail = $this->di['tools']->generatePassword() . '@' . $this->di['tools']->generatePassword() . '.com';\n        $cronEmail = filter_var($cronEmail, FILTER_SANITIZE_EMAIL);\n\n        $CronPass = $this->di['tools']->generatePassword(256, 4);\n\n        $cron = $this->di['db']->dispense('Admin');\n        $cron->role = \\Model_Admin::ROLE_CRON;\n        $cron->admin_group_id = 1;\n        $cron->email = $cronEmail;\n        $cron->pass = $this->di['password']->hashIt($CronPass);\n        $cron->name = 'System Cron Job';\n        $cron->signature = '';\n        $cron->protected = 1;\n        $cron->status = 'active';\n        $cron->created_at = date('Y-m-d H:i:s');\n        $cron->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cron);\n\n        return $cron;\n    }\n\n    public function toModel_AdminApiArray(\\Model_Admin $model, $deep = false)\n    {\n        $data = [\n            'id' => $model->id,\n            'role' => $model->role,\n            'admin_group_id' => $model->admin_group_id,\n            'email' => $model->email,\n            'name' => $model->name,\n            'status' => $model->status,\n            'signature' => $model->signature,\n            'created_at' => $model->created_at,\n            'updated_at' => $model->updated_at,\n        ];\n\n        $data['protected'] = $model->protected;\n\n        $adminGroupModel = $this->di['db']->load('AdminGroup', $model->admin_group_id);\n        $data['group']['id'] = $adminGroupModel->id;\n        $data['group']['name'] = $adminGroupModel->name;\n\n        return $data;\n    }\n\n    public function update(\\Model_Admin $model, $data)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffUpdate', 'params' => ['id' => $model->id]]);\n\n        $model->email = $data['email'] ?? $model->email;\n        $model->admin_group_id = $data['admin_group_id'] ?? $model->admin_group_id;\n        $model->name = $data['name'] ?? $model->name;\n        $model->status = $data['status'] ?? $model->status;\n        $model->signature = $data['signature'] ?? $model->signature;\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffUpdate', 'params' => ['id' => $model->id]]);\n\n        $this->di['logger']->info('Updated staff member %s details', $model->id);\n\n        return true;\n    }\n\n    public function delete(\\Model_Admin $model)\n    {\n        if ($model->protected) {\n            throw new \\Box_Exception('This administrator account is protected and can not be removed');\n        }\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffDelete', 'params' => ['id' => $model->id]]);\n\n        $id = $model->id;\n        $this->di['db']->trash($model);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffDelete', 'params' => ['id' => $id]]);\n\n        $this->di['logger']->info('Deleted staff member %s', $id);\n\n        return true;\n    }\n\n    public function changePassword(\\Model_Admin $model, $password)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffPasswordChange', 'params' => ['id' => $model->id]]);\n\n        $model->pass = $this->di['password']->hashIt($password);\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffPasswordChange', 'params' => ['id' => $model->id]]);\n\n        $this->di['logger']->info('Changed staff member %s password', $model->id);\n\n        return true;\n    }\n\n    public function create(array $data)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_Admin', 3);\n\n        $signature = $data['signature'] ?? null;\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffCreate', 'params' => $data]);\n\n        $model = $this->di['db']->dispense('Admin');\n        $model->role = \\Model_Admin::ROLE_STAFF;\n        $model->admin_group_id = $data['admin_group_id'];\n        $model->email = $data['email'];\n        $model->pass = $this->di['password']->hashIt($data['password']);\n        $model->name = $data['name'];\n        $model->status = $model->getStatus($data['status']);\n        $model->signature = $signature;\n        $model->created_at = date('Y-m-d H:i:s');\n        $model->updated_at = date('Y-m-d H:i:s');\n\n        try {\n            $newId = $this->di['db']->store($model);\n        } catch (\\RedBeanPHP\\RedException) {\n            throw new \\Box_Exception('Staff member with email :email is already registered', [':email' => $data['email']], 788954);\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffCreate', 'params' => ['id' => $newId]]);\n\n        $this->di['logger']->info('Created new staff member %s', $newId);\n\n        return (int) $newId;\n    }\n\n    public function createAdmin(array $data)\n    {\n        $admin = $this->di['db']->dispense('Admin');\n        $admin->role = 'admin';\n        $admin->admin_group_id = 1;\n        $admin->name = 'Administrator';\n        $admin->email = $data['email'];\n        $admin->pass = $this->di['password']->hashIt($data['password']);\n        $admin->protected = 1;\n        $admin->status = 'active';\n        $admin->created_at = date('Y-m-d H:i:s');\n        $admin->updated_at = date('Y-m-d H:i:s');\n\n        $newId = $this->di['db']->store($admin);\n\n        $this->di['logger']->info('Main administrator %s account created', $admin->email);\n        $data['remember'] = true;\n\n        return $newId;\n    }\n\n    public function getAdminGroupPair()\n    {\n        $sql = 'SELECT id, name\n                FROM  admin_group';\n        $rows = $this->di['db']->getAll($sql);\n        $result = [];\n\n        foreach ($rows as $row) {\n            $result[$row['id']] = $row['name'];\n        }\n\n        return $result;\n    }\n\n    public function getAdminGroupSearchQuery($data)\n    {\n        $sql = 'SELECT *\n                FROM admin_group\n                order by id asc';\n\n        return [$sql, []];\n    }\n\n    public function createGroup($name)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_AdminGroup', 2);\n\n        $model = $this->di['db']->dispense('AdminGroup');\n        $model->name = $name;\n\n        $model->created_at = date('Y-m-d H:i:s');\n        $model->updated_at = date('Y-m-d H:i:s');\n        $groupId = $this->di['db']->store($model);\n\n        $this->di['logger']->info('Created new staff group %s', $groupId);\n\n        return (int) $groupId;\n    }\n\n    public function toAdminGroupApiArray(\\Model_AdminGroup $model, $deep = false, $identity = null)\n    {\n        $data = [];\n        $data['id'] = $model->id;\n        $data['name'] = $model->name;\n        $data['created_at'] = $model->created_at;\n        $data['updated_at'] = $model->updated_at;\n\n        return $data;\n    }\n\n    public function deleteGroup(\\Model_AdminGroup $model)\n    {\n        $id = $model->id;\n        if (1 == $model->id) {\n            throw new \\Box_Exception('Administrators group can not be removed');\n        }\n\n        $sql = 'SELECT count(1)\n                FROM admin\n                WHERE admin_group_id = :id';\n        $staffMembersInGroup = $this->di['db']->getCell($sql, ['id' => $model->id]);\n        if ($staffMembersInGroup > 0) {\n            throw new \\Box_Exception('Can not remove group which has staff members');\n        }\n\n        $this->di['db']->trash($model);\n\n        $this->di['logger']->info('Deleted staff group %s', $id);\n\n        return true;\n    }\n\n    public function updateGroup(\\Model_AdminGroup $model, $data)\n    {\n        if (isset($data['name'])) {\n            $model->name = $data['name'];\n        }\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $this->di['logger']->info('Updated staff group %s', $model->id);\n\n        return true;\n    }\n\n    public function getActivityAdminHistorySearchQuery($data)\n    {\n        $sql = 'SELECT m.*, a.email, a.name\n                FROM activity_admin_history as m\n                LEFT JOIN admin as a on m.admin_id = a.id\n                ';\n\n        $search = $data['search'] ?? null;\n        $admin_id = $data['admin_id'] ?? null;\n\n        $where = [];\n        $params = [];\n        if ($search) {\n            $where[] = ' a.name LIKE :name OR a.id LIKE :id OR a.email LIKE :email ';\n            $params['name'] = \"%$search%\";\n            $params['id'] = \"%$search%\";\n            $params['email'] = \"%$search%\";\n        }\n\n        if ($admin_id) {\n            $where[] = 'm.admin_id = :admin_id';\n            $params['admin_id'] = $admin_id;\n        }\n\n        if (!empty($where)) {\n            $sql .= ' WHERE ' . implode(' AND ', $where);\n        }\n        $sql .= ' ORDER BY m.id DESC';\n\n        return [$sql, $params];\n    }\n\n    public function toActivityAdminHistoryApiArray(\\Model_ActivityAdminHistory $model, $deep = false)\n    {\n        $result = [\n            'id' => $model->id,\n            'ip' => $model->ip,\n            'created_at' => $model->created_at,\n        ];\n        if ($model->admin_id) {\n            $adminModel = $this->di['db']->load('Admin', $model->admin_id);\n            if ($adminModel instanceof \\Model_Admin && $adminModel->id) {\n                $result['staff']['id'] = $adminModel->id;\n                $result['staff']['name'] = $adminModel->name;\n                $result['staff']['email'] = $adminModel->email;\n            }\n        }\n\n        return $result;\n    }\n\n    public function deleteLoginHistory(\\Model_ActivityAdminHistory $model)\n    {\n        $this->di['db']->trash($model);\n\n        return true;\n    }\n\n    public function authorizeAdmin($email, $plainTextPassword)\n    {\n        $model = $this->di['db']->findOne('Admin', 'email = ? AND status = ?', [$email, \\Model_Admin::STATUS_ACTIVE]);\n        if (null == $model) {\n            return null;\n        }\n\n        return $this->di['auth']->authorizeUser($model, $plainTextPassword);\n    }\n}\n", "<?php\n\nnamespace Box\\Tests\\Mod\\Client\\Api;\n\nclass AdminTest extends \\BBTestCase\n{\n\n    public function testgetDi()\n    {\n        $di           = new \\Pimple\\Container();\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $getDi = $admin_Client->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testget_list()\n    {\n        $simpleResultArr = array(\n            'list' => array(\n                array('id' => 1),\n            ),\n        );\n        $pagerMock       = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($simpleResultArr));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getSearchQuery');\n        $serviceMock->expects($this->atLeastOnce())->\n        method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')\n            ->will($this->returnValue($model));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n        $di['db']        = $dbMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n        $admin_Client->setDi($di);\n        $data = array();\n\n        $result = $admin_Client->get_list($data);\n        $this->assertIsArray($result);\n\n    }\n\n    public function test_get_pairs()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getPairs')->will($this->returnValue(array()));\n\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->get_pairs($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testget()\n    {\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('get')->will($this->returnValue($model));\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->get(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testlogin()\n    {\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $sessionArray = array(\n            'id'    => 1,\n            'email' => 'email@example.com',\n            'name'  => 'John Smith',\n            'role'  => 'client',\n        );\n        $serviceMock  = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('toSessionArray')->will($this->returnValue($sessionArray));\n\n        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n        $sessionMock->expects($this->atLeastOnce())->\n        method('set');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['session']     = $sessionMock;\n        $di['logger']      = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->login($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testCreate()\n    {\n        $data = array(\n            'email'      => 'email@example.com',\n            'first_name' => 'John',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(false));\n        $serviceMock->expects($this->atLeastOnce())->\n        method('adminCreateClient')->will($this->returnValue(1));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())->method('checkRequiredParamsForArray');\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['events_manager'] = $eventMock;\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->create($data);\n\n        $this->assertIsInt($result, 'create() returned: ' . $result);\n    }\n\n    public function testCreateEmailRegisteredException()\n    {\n        $data = array(\n            'email'      => 'email@example.com',\n            'first_name' => 'John',\n        );\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Email is already registered.');\n        $admin_Client->create($data);\n    }\n\n    public function testdelete()\n    {\n        $data = array('id' => 1);\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Client\\Service')\n            ->setMethods(array('remove'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('remove')\n            ->will($this->returnValue(true));\n\n        $di                   = new \\Pimple\\Container();\n        $di['db']             = $dbMock;\n        $di['events_manager'] = $eventMock;\n        $di['logger']         = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n        $result = $admin_Client->delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testupdate()\n    {\n        $data = array(\n            'id'             => 1,\n            'first_name'     => 'John',\n            'last_name'      => 'Smith',\n            'aid'            => '0',\n            'gender'         => 'male',\n            'birthday'       => '1999-01-01',\n            'company'        => 'LTD Testing',\n            'company_vat'    => 'VAT0007',\n            'address_1'      => 'United States',\n            'address_2'      => 'Utah',\n            'phone_cc'       => '+1',\n            'phone'          => '555-345-345',\n            'document_type'  => 'doc',\n            'document_nr'    => '1',\n            'notes'          => 'none',\n            'country'        => 'Moon',\n            'postcode'       => 'IL-11123',\n            'city'           => 'Chicaco',\n            'state'          => 'IL',\n            'currency'       => 'USD',\n            'tax_exempt'     => 'n/a',\n            'created_at'     => '2012-05-10',\n            'email'          => 'test@example.com',\n            'group_id'       => 1,\n            'status'         => 'test status',\n            'company_number' => '1234',\n            'type'           => '',\n            'lang'           => 'en',\n            'custom_1'       => '',\n            'custom_2'       => '',\n            'custom_3'       => '',\n            'custom_4'       => '',\n            'custom_5'       => '',\n            'custom_6'       => '',\n            'custom_7'       => '',\n            'custom_8'       => '',\n            'custom_9'       => '',\n            'custom_10'      => '',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(false));\n        $serviceMock->expects($this->atLeastOnce())->\n        method('canChangeCurrency')->will($this->returnValue(true));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });;\n        $di['events_manager'] = $eventMock;\n        $di['validator']      = $validatorMock;\n        $di['logger']         = new \\Box_Log();\n\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $result = $admin_Client->update($data);\n        $this->assertTrue($result);\n    }\n\n    public function testupdate_EmailALreadyRegistered()\n    {\n        $data = array(\n            'id'             => 1,\n            'first_name'     => 'John',\n            'last_name'      => 'Smith',\n            'aid'            => '0',\n            'gender'         => 'male',\n            'birthday'       => '1999-01-01',\n            'company'        => 'LTD Testing',\n            'company_vat'    => 'VAT0007',\n            'address_1'      => 'United States',\n            'address_2'      => 'Utah',\n            'phone_cc'       => '+1',\n            'phone'          => '555-345-345',\n            'document_type'  => 'doc',\n            'document_nr'    => '1',\n            'notes'          => 'none',\n            'country'        => 'Moon',\n            'postcode'       => 'IL-11123',\n            'city'           => 'Chicaco',\n            'state'          => 'IL',\n            'currency'       => 'USD',\n            'tax_exempt'     => 'n/a',\n            'created_at'     => '2012-05-10',\n            'email'          => 'test@example.com',\n            'group_id'       => 1,\n            'status'         => 'test status',\n            'company_number' => '1234',\n            'type'           => '',\n            'lang'           => 'en',\n            'custom_1'       => '',\n            'custom_2'       => '',\n            'custom_3'       => '',\n            'custom_4'       => '',\n            'custom_5'       => '',\n            'custom_6'       => '',\n            'custom_7'       => '',\n            'custom_8'       => '',\n            'custom_9'       => '',\n            'custom_10'      => '',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(true));\n        $serviceMock->expects($this->never())->\n        method('canChangeCurrency')->will($this->returnValue(true));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->never())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });;\n        $di['events_manager'] = $eventMock;\n        $di['validator']      = $validatorMock;\n        $di['logger']         = new \\Box_Log();\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Can not change email. It is already registered.');\n        $admin_Client->update($data);\n    }\n\n    public function testUpdateIdException()\n    {\n        $data         = array();\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $di              = new \\Pimple\\Container();\n\n        $di['validator'] = new \\FOSSBilling\\Validate();\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Id required');\n        $admin_Client->update($data);\n    }\n\n    public function testchange_password()\n    {\n        $data = array(\n            'id'               => 1,\n            'password'         => 'strongPass',\n            'password_confirm' => 'strongPass',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                   = new \\Pimple\\Container();\n        $di['db']             = $dbMock;\n        $di['events_manager'] = $eventMock;\n        $di['logger']         = new \\Box_Log();\n        $di['password']       = $passwordMock;\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->change_password($data);\n        $this->assertTrue($result);\n    }\n\n\n    public function testchange_passwordPasswordMismatch()\n    {\n        $data         = array(\n            'id'               => 1,\n            'password'         => 'strongPass',\n            'password_confirm' => 'NotIdentical',\n        );\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Passwords do not match');\n        $admin_Client->change_password($data);\n    }\n\n    public function testbalance_get_list()\n    {\n        $simpleResultArr = array(\n            'list' => array(\n                array(\n                    'id'          => 1,\n                    'description' => 'Testing',\n                    'amount'      => '1.00',\n                    'currency'    => 'USD',\n                    'created_at'  => date('Y:m:d H:i:s'),\n                ),\n            ),\n        );\n\n        $data      = array();\n        $pagerMock = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($simpleResultArr));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\ServiceBalance')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getSearchQuery');\n\n        $model = new \\Model_ClientBalance();\n        $model->loadBean(new \\DummyBean());\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['pager']       = $pagerMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_get_list($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testbalance_delete()\n    {\n        $data = array(\n            'id' => 1,\n        );\n\n        $model = new \\Model_ClientBalance();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testbalance_add_funds()\n    {\n        $data = array(\n            'id'          => 1,\n            'amount'      => '1.00',\n            'description' => 'testDescription',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('addFunds');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_add_funds($data);\n        $this->assertTrue($result);\n    }\n\n    public function testbatch_expire_password_reminders()\n    {\n        $expiredArr = array(\n            new \\Model_ClientPasswordReset(),\n        );\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getExpiredPasswordReminders')->will($this->returnValue($expiredArr));\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['logger']      = new \\Box_Log();\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->batch_expire_password_reminders();\n        $this->assertTrue($result);\n    }\n\n    public function testlogin_history_get_list()\n    {\n        $data = array();\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getHistorySearchQuery')->will($this->returnValue(array('sql', 'params')));\n\n        $pagerMock      = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerResultSet = array(\n            'list' => array(),\n        );\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($pagerResultSet));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->login_history_get_list($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testget_statuses()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('counter')->will($this->returnValue(array()));\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->get_statuses(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testgroup_get_pairs()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getGroupPairs')->will($this->returnValue(array()));\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_get_pairs(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testgroup_create()\n    {\n        $data['title'] = 'test Group';\n\n        $newGroupId  = 1;\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('createGroup')\n            ->will($this->returnValue($newGroupId));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n        $admin_Client->setDi($di);\n        $result = $admin_Client->group_create($data);\n\n        $this->assertIsInt($result);\n        $this->assertEquals($newGroupId, $result);\n    }\n\n\n    public function testgroup_update()\n    {\n        $data['id']    = '2';\n        $data['title'] = 'test Group updated';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n\n        $di              = new \\Pimple\\Container();\n        $di['db']        = $dbMock;\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_update($data);\n\n        $this->assertTrue($result);\n    }\n\n    public function testgroup_delete()\n    {\n        $data['id'] = '2';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Client\\Service')\n            ->setMethods(array('deleteGroup'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('deleteGroup')\n            ->will($this->returnValue(true));\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->group_delete($data);\n\n        $this->assertTrue($result);\n    }\n\n    public function testgroup_get()\n    {\n        $data['id'] = '2';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('toArray')->will($this->returnValue(array()));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_get($data);\n\n        $this->assertIsArray($result);\n    }\n\n    public function testlogin_history_delete()\n    {\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')\n            ->will($this->returnValue(new \\Model_ActivityClientHistory()));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['db']        = $dbMock;\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->login_history_delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testBatch_delete()\n    {\n        $activityMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Api\\Admin')->setMethods(array('delete'))->getMock();\n        $activityMock->expects($this->atLeastOnce())->method('delete')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $activityMock->setDi($di);\n\n        $result = $activityMock->batch_delete(array('ids' => array(1, 2, 3)));\n        $this->assertEquals(true, $result);\n    }\n\n    public function testBatch_delete_log()\n    {\n        $activityMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Api\\Admin')->setMethods(array('login_history_delete'))->getMock();\n        $activityMock->expects($this->atLeastOnce())->method('login_history_delete')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $activityMock->setDi($di);\n\n        $result = $activityMock->batch_delete_log(array('ids' => array(1, 2, 3)));\n        $this->assertEquals(true, $result);\n    }\n\n\n}\n", "<?php\n\nnamespace Box\\Mod\\Staff;\n\nclass PdoMock extends \\PDO\n{\n    public function __construct() { }\n}\n\nclass PdoStatementMock extends \\PDOStatement\n{\n    public function __construct() { }\n}\n\nclass ServiceTest extends \\BBTestCase\n{\n\n    public function testLogin()\n    {\n        $email    = 'email@domain.com';\n        $password = 'pass';\n        $ip       = '127.0.0.1';\n\n        $admin = new \\Model_Admin();\n        $admin->loadBean(new \\DummyBean());\n        $admin->id    = 1;\n        $admin->email = $email;\n        $admin->name  = 'Admin';\n        $admin->role  = 'admin';\n\n\n        $emMock = $this->getMockBuilder('\\Box_EventManager')\n            ->getMock();\n        $emMock->expects($this->atLeastOnce())\n            ->method('fire')\n            ->will($this->returnValue(true));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($admin));\n\n        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $sessionMock->expects($this->atLeastOnce())\n            ->method('set')\n            ->will($this->returnValue(null));\n\n        $authMock = $this->getMockBuilder('\\Box_Authorization')->disableOriginalConstructor()->getMock();\n        $authMock->expects($this->atLeastOnce())\n            ->method('authorizeUser')\n            ->with($admin, $password)\n            ->willReturn($admin);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $emMock;\n        $di['db']             = $dbMock;\n        $di['session']        = $sessionMock;\n        $di['logger']         = new \\Box_Log();\n        $di['auth']           = $authMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->login($email, $password, $ip);\n\n        $expected = array(\n            'id'    => 1,\n            'email' => $email,\n            'name'  => 'Admin',\n            'role'  => 'admin',\n        );\n\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testLogin_Exception()\n    {\n        $email    = 'email@domain.com';\n        $password = 'pass';\n        $ip       = '127.0.0.1';\n\n        $emMock = $this->getMockBuilder('\\Box_EventManager')\n            ->getMock();\n        $emMock->expects($this->atLeastOnce())\n            ->method('fire')\n            ->will($this->returnValue(true));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $emMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionCode(403);\n        $this->expectExceptionMessage('Check your login details');\n        $service->login($email, $password, $ip);\n    }\n\n    public function testgetAdminCount()\n    {\n        $countResult = 3;\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue($countResult));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getAdminsCount();\n        $this->assertIsInt($result);\n        $this->assertEquals($countResult, $result);\n    }\n\n    public function testhasPermissionRoleAdmin()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'admin';\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->hasPermission($member, 'example');\n        $this->assertTrue($result);\n    }\n\n    public function testhasPermissionRoleStaffWithEmptyPerms()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions');\n\n        $result = $serviceMock->hasPermission($member, 'example');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithNoPerm()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('cart' => array(), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithNoMethodPerm()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('example' => array(), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example', 'get_list');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithGoodPerms()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('example' => array('get_list'), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example', 'get_list');\n        $this->assertTrue($result);\n    }\n\n    public function testonAfterClientReplyTicket()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientReplyTicket($eventMock);\n    }\n\n    public function testonAfterClientReplyTicket_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientReplyTicket($eventMock);\n    }\n\n    public function testonAfterClientCloseTicket()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientCloseTicket($eventMock);\n    }\n\n    public function testonAfterClientCloseTicket_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientCloseTicket($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketOpen()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketOpen($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketOpen_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketOpen($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketReply()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketReply($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketReply_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketReply($eventMock);\n    }\n\n    public function testonAfterClientSignUp()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $clientMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $clientMock->expects($this->atLeastOnce())\n            ->method('get')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($clientMock, $emailServiceMock) {\n            if ($name == 'client') {\n                return $clientMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientSignUp($eventMock);\n    }\n\n    public function testonAfterClientSignUp_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $clientMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $clientMock->expects($this->atLeastOnce())\n            ->method('get')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($clientMock, $emailServiceMock) {\n            if ($name == 'client') {\n                return $clientMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientSignUp($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketClose()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'Support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'Email') {\n                return $emailServiceMock;\n            }\n        });\n        $di['db']          = $dbMock;\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketClose($eventMock);\n    }\n\n    public function testonAfterClientOpenTicket_mod_staff_ticket_open()\n    {\n        $di = new \\Pimple\\Container();\n\n        $ticketModel = new \\Model_SupportTicket();\n        $ticketModel->loadBean(new \\DummyBean());\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue($ticketModel));\n\n        $supportTicketArray = array();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->willReturn($supportTicketArray);\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n\n        $emailConfig = array(\n            'to_staff' => true,\n            'code' => 'mod_staff_ticket_open',\n            'ticket' => $supportTicketArray,\n        );\n        $emailServiceMock->expects($this->once())\n            ->method('sendTemplate')\n            ->with($emailConfig)\n            ->willReturn(true);\n\n\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->willReturn(null);\n        $di['db'] = $dbMock;\n        $di['loggedin_admin'] = new \\Model_Admin();\n\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->willReturn($di);\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->onAfterClientOpenTicket($eventMock);\n    }\n\n    public function testonAfterClientOpenTicket_mod_support_helpdesk_ticket_open()\n    {\n        $di = new \\Pimple\\Container();\n\n        $ticketModel = new \\Model_SupportTicket();\n        $ticketModel->loadBean(new \\DummyBean());\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue($ticketModel));\n\n        $supportTicketArray = array();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->willReturn($supportTicketArray);\n\n        $helpdeskModel = new \\Model_SupportHelpdesk();\n        $helpdeskModel->loadBean(new \\DummyBean());\n        $helpdeskModel->email = 'helpdesk@support.com';\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailConfig = array(\n            'to' => $helpdeskModel->email,\n            'code' => 'mod_support_helpdesk_ticket_open',\n            'ticket' => $supportTicketArray,\n        );\n        $emailServiceMock->expects($this->once())\n            ->method('sendTemplate')\n            ->with($emailConfig)\n            ->willReturn(true);\n\n\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->willReturn($helpdeskModel);\n        $di['db'] = $dbMock;\n        $di['loggedin_admin'] = new \\Model_Admin();\n\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->willReturn($di);\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->onAfterClientOpenTicket($eventMock);\n    }\n\n    public function testgetList()\n    {\n        $pagerMock = $this->getMockBuilder('\\Box_Pagination')->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue(array()));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getList(array());\n        $this->assertIsArray($result);\n    }\n\n    public function searchFilters()\n    {\n        return array(\n            array(\n                array(),\n                'SELECT * FROM admin',\n                array()),\n            array(\n                array('search' => 'keyword'),\n                '(name LIKE :name OR email LIKE :email )',\n                array(':name' => '%keyword%', ':email' => '%keyword%')),\n            array(\n                array('status' => 'active'),\n                'status = :status',\n                array(':status' => 'active')),\n            array(\n                array('no_cron' => 'true'),\n                'role != :role',\n                array(':role' => \\Model_Admin::ROLE_CRON)),\n        );\n    }\n\n    /**\n     * @dataProvider searchFilters\n     */\n    public function testgetSearchQuery($data, $expectedStr, $expectedParams)\n    {\n        $di              = new \\Pimple\\Container();\n\n        $service         = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->getSearchQuery($data);\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n\n        $this->assertTrue(strpos($result[0], $expectedStr) !== false, $result[0]);\n        $this->assertTrue(array_diff_key($result[1], $expectedParams) == array());\n    }\n\n    public function testgetCronAdminAlreadyExists()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($adminModel));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getCronAdmin();\n        $this->assertNotEmpty($result);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n\n    public function testgetCronAdminCreateCronAdminAndReturn()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt');\n\n        $di             = new \\Pimple\\Container();\n        $di['db']       = $dbMock;\n        $di['tools']    = new \\FOSSBilling\\Tools();\n        $di['password'] = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getCronAdmin();\n        $this->assertNotEmpty($result);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n\n    public function testtoModel_AdminApiArray()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $adminGroupModel = new \\Model_Admin();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue($adminGroupModel));\n\n        $expected =\n            array(\n                'id'             => '',\n                'role'           => '',\n                'admin_group_id' => '',\n                'email'          => '',\n                'name'           => '',\n                'status'         => '',\n                'signature'      => '',\n                'created_at'     => '',\n                'updated_at'     => '',\n                'protected'      => '',\n                'group'          => array('id' => '', 'name' => ''),\n            );\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->toModel_AdminApiArray($adminModel);\n\n        $this->assertNotEmpty($result);\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testupdate()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'signature'      => '1345',\n        );\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->update($adminModel, $data);\n        $this->assertTrue($result);\n    }\n\n    public function testdelete()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->delete($adminModel);\n        $this->assertTrue($result);\n    }\n\n    public function testdeleteProtectedAccount()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n        $adminModel->protected = 1;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('This administrator account is protected and can not be removed');\n        $service->delete($adminModel);\n    }\n\n    public function testchangePassword()\n    {\n        $plainTextPassword = 'password';\n        $adminModel        = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($plainTextPassword);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['password']       = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->changePassword($adminModel, $plainTextPassword);\n        $this->assertTrue($result);\n    }\n\n    public function testcreate()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newId));\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['mod_service']    = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n        $di['password']       = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->create($data);\n        $this->assertIsInt($result);\n        $this->assertEquals($newId, $result);\n    }\n\n    public function testcreate_Exception()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->willThrowException(new \\RedBeanPHP\\RedException());\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['mod_service']    = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n        $di['password']       = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionCode(788954);\n        $this->expectExceptionMessage(sprintf('Staff member with email %s is already registered', $data['email']));\n        $service->create($data);\n    }\n\n    public function testcreateAdmin()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newId));\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $systemService = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                = new \\Pimple\\Container();\n        $di['logger']      = $logMock;\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($serviceName) use ($systemService) {\n            if ('system' == $serviceName) {\n                return $systemService;\n            }\n        });\n        $di['password']    = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->createAdmin($data);\n        $this->assertIsInt($result);\n        $this->assertEquals($newId, $result);\n    }\n\n    public function testgetAdminGroupPair()\n    {\n        $rows = array(\n            array(\n                'id'   => '1',\n                'name' => 'First Jogh',\n            ),\n            array(\n                'id'   => '2',\n                'name' => 'Another Smith',\n            ),\n        );\n\n        $expected = array(\n            1 => 'First Jogh',\n            2 => 'Another Smith',\n        );\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAll')\n            ->will($this->returnValue($rows));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getAdminGroupPair();\n\n        $this->assertEquals($expected, $result);\n        $this->assertIsArray($result);\n    }\n\n    public function testgetAdminGroupSearchQuery()\n    {\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->getAdminGroupSearchQuery(array());\n\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n    }\n\n    public function testcreateGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n        $newGroupId = 1;\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminGroupModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newGroupId));\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['logger']      = new \\Box_Log();\n        $di['mod_service'] = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->createGroup('new_group_name');\n        $this->assertIsInt($result);\n        $this->assertEquals($newGroupId, $result);\n    }\n\n    public function testtoAdminGroupApiArray()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $expected =\n            array(\n                'id'         => '',\n                'name'       => '',\n                'created_at' => '',\n                'updated_at' => '',\n            );\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->toAdminGroupApiArray($adminGroupModel);\n\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testdeleteGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(0));\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->deleteGroup($adminGroupModel);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testdeleteGroupDeleteAdminGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n        $adminGroupModel->id = 1;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Administrators group can not be removed');\n        $service->deleteGroup($adminGroupModel);\n    }\n\n    public function testdeleteGroupGroupHasMembers()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(2));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Can not remove group which has staff members');\n        $service->deleteGroup($adminGroupModel);\n    }\n\n    public function testupdateGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $data   = array('name' => 'OhExampleName');\n        $result = $service->updateGroup($adminGroupModel, $data);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function ActivityAdminHistorySearchFilters()\n    {\n        return array(\n            array(\n                array(),\n                'SELECT m.*, a.email, a.name',\n                array()),\n            array(\n                array('search' => 'keyword'),\n                'a.name LIKE :name OR a.id LIKE :id OR a.email LIKE :email',\n                array('name' => '%keyword%', 'id' => '%keyword%', 'email' => '%keyword%')),\n            array(\n                array('admin_id' => '2'),\n                'm.admin_id = :admin_id',\n                array('admin_id' => '2')),\n        );\n    }\n\n    /**\n     * @dataProvider ActivityAdminHistorySearchFilters\n     */\n\n    public function testgetActivityAdminHistorySearchQuery($data, $expectedStr, $expectedParams)\n    {\n        $di              = new \\Pimple\\Container();\n\n        $service         = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->getActivityAdminHistorySearchQuery($data);\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n\n        $this->assertTrue(strpos($result[0], $expectedStr) !== false, $result[0]);\n        $this->assertTrue(array_diff_key($result[1], $expectedParams) == array());\n    }\n\n    public function testtoActivityAdminHistoryApiArray()\n    {\n        $adminHistoryModel = new \\Model_ActivityAdminHistory();\n        $adminHistoryModel->loadBean(new \\DummyBean());\n        $adminHistoryModel->admin_id = 2;\n\n        $expected = array(\n            'id'         => '',\n            'ip'         => '',\n            'created_at' => '',\n            'staff'      => array(\n                'id'    => $adminHistoryModel->admin_id,\n                'name'  => '',\n                'email' => '',\n\n            ),\n        );\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n        $adminModel->id = 2;\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue($adminModel));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->toActivityAdminHistoryApiArray($adminHistoryModel);\n\n        $this->assertNotEmpty($result);\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testdeleteLoginHistory()\n    {\n        $adminHistoryModel = new \\Model_ActivityAdminHistory();\n        $adminHistoryModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->deleteLoginHistory($adminHistoryModel);\n        $this->assertTrue($result);\n    }\n\n    public function testsetPermissions()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $result    = $service->setPermissions($member_id, array());\n        $this->assertTrue($result);\n    }\n\n    public function testgetPermissions_PermAreEmpty()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('fetchColumn')\n            ->will($this->returnValue('{}'));\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $result    = $service->getPermissions($member_id);\n        $this->assertIsArray($result);\n        $this->assertEquals(array(), $result);\n    }\n\n    public function testgetPermissions()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n        $queryResult = '{\"id\" : \"1\"}';\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('fetchColumn')\n            ->will($this->returnValue($queryResult));\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $expected  = json_decode($queryResult, 1);\n        $result    = $service->getPermissions($member_id);\n        $this->assertIsArray($result);\n        $this->assertEquals($expected, $result);\n    }\n\n\n    public function testauthorizeAdmin_DidntFoundEmail()\n    {\n        $email    = 'example@fossbilling.vm';\n        $password = '123456';\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->with('Admin', 'email = ? AND status = ?')\n            ->willReturn(null);\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->authorizeAdmin($email, $password);\n        $this->assertNull($result);\n    }\n\n    public function testauthorizeAdmin()\n    {\n        $email    = 'example@fossbilling.vm';\n        $password = '123456';\n\n        $model = new \\Model_Admin();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->with('Admin', 'email = ? AND status = ?')\n            ->willReturn($model);\n\n        $authMock = $this->getMockBuilder('\\Box_Authorization')->disableOriginalConstructor()->getMock();\n        $authMock->expects($this->atLeastOnce())\n            ->method('authorizeUser')\n            ->with($model, $password)\n            ->willReturn($model);\n\n        $di         = new \\Pimple\\Container();\n        $di['db']   = $dbMock;\n        $di['auth'] = $authMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->authorizeAdmin($email, $password);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n * Client management.\n */\n\nnamespace Box\\Mod\\Client\\Api;\n\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Get a list of clients.\n     * \n     * @param array $data Filtering options.\n     * \n     * @param string $data['status'] [optional] Filter clients by status. Available options: 'active', 'suspended', 'canceled'.\n     * \n     * @param int $data['per_page'] [optional] Number of clients to display per page.\n     * \n     * @return array List of clients in a paginated manner.\n     */\n    public function get_list($data)\n    {\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        [$sql, $params] = $this->getService()->getSearchQuery($data);\n        $pager = $this->di['pager']->getSimpleResultSet($sql, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $clientArr) {\n            $client = $this->di['db']->getExistingModelById('Client', $clientArr['id'], 'Client not found');\n            $pager['list'][$key] = $this->getService()->toApiArray($client, true, $this->getIdentity());\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Get a list of clients.\n     * \n     * @param array $data Filtering options\n     * \n     * @param int $data['per_page'] [optional] Number of clients to display per page.\n     * \n     * @return array List of clients in a paginated manner\n     */\n    public function get_pairs($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->getPairs($data);\n    }\n\n    /**\n     * Get client by id or email. Email is also unique in database.\n     *\n     * @param int $id - client ID\n     *\n     * @optional string $email - client email\n     *\n     * @return array - client details\n     */\n    public function get($data)\n    {\n        $service = $this->getService();\n        $client = $service->get($data);\n\n        return $service->toApiArray($client, true, $this->getIdentity());\n    }\n\n    /**\n     * Login to clients area with client id.\n     *\n     * @param int $id - client ID\n     *\n     * @return array - client details\n     */\n    public function login($data)\n    {\n        $required = [\n            'id' => 'ID required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n        $result = $service->toSessionArray($client);\n\n        $session = $this->di['session'];\n        $session->set('client_id', $client->id);\n        $this->di['logger']->info('Logged in as client #%s', $client->id);\n\n        return $result;\n    }\n\n    /**\n     * Creates new client.\n     *\n     * @param string $email      - client email, must not be registered on system\n     * @param string $first_name - client first name\n     *\n     * @optional string $password - client password\n     * @optional string $auth_type - client authorization type. Default null\n     * @optional string $last_name - client last name\n     * @optional string $aid - alternative ID. If you import clients from other systems you can use this field to store foreign system ID\n     * @optional string $group_id - client group id\n     * @optional string $status - client status: \"active, suspended, canceled\"\n     * @optional string $created_at - ISO 8601 date for client creation date\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $lang - Client language\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return int - client id\n     */\n    public function create($data)\n    {\n        $required = [\n            'email' => 'Email required',\n            'first_name' => 'First name is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $validator = $this->di['validator'];\n        $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n\n        $service = $this->getService();\n        if ($service->emailAlreadyRegistered($data['email'])) {\n            throw new \\Box_Exception('Email is already registered.');\n        }\n\n        $validator->isPasswordStrong($data['password']);\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientCreate', 'params' => $data]);\n        $id = $service->adminCreateClient($data);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientCreate', 'params' => $data]);\n\n        return $id;\n    }\n\n    /**\n     * Deletes client from system.\n     *\n     * @param string $id - client ID\n     *\n     * @return bool\n     */\n    public function delete($data)\n    {\n        $required = [\n            'id' => 'Client id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientDelete', 'params' => ['id' => $model->id]]);\n\n        $id = $model->id;\n        $this->getService()->remove($model);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientDelete', 'params' => ['id' => $id]]);\n\n        $this->di['logger']->info('Removed client #%s', $id);\n\n        return true;\n    }\n\n    /**\n     * Update client profile.\n     *\n     * @param string $id - client ID\n     *\n     * @optional string $email - client email\n     * @optional string $first_name - client first_name\n     * @optional string $last_name - client last_name\n     * @optional string $status - client status\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $lang - Client language\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return bool\n     */\n    public function update($data = [])\n    {\n        $required = ['id' => 'Id required'];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n\n        if (!is_null($data['email'] ?? null)) {\n            $email = $data['email'];\n            $email = $this->di['tools']->validateAndSanitizeEmail($email);\n            if ($service->emailAlreadyRegistered($email, $client)) {\n                throw new \\Box_Exception('Can not change email. It is already registered.');\n            }\n        }\n\n        if (!empty($data['birthday'])) {\n            $this->di['validator']->isBirthdayValid($data['birthday']);\n        }\n\n        if (($data['currency'] ?? null) && $service->canChangeCurrency($client, ($data['currency'] ?? null))) {\n            $client->currency = $data['currency'] ?? $client->currency;\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientUpdate', 'params' => $data]);\n\n        $phoneCC = $data['phone_cc'] ?? $client->phone_cc;\n        if (!empty($phoneCC)) {\n            $client->phone_cc = intval($phoneCC);\n        }\n\n        $client->email = (!empty($data['email']) ? $data['email'] : $client->email);\n        $client->first_name = (!empty($data['first_name']) ? $data['first_name'] : $client->first_name);\n        $client->last_name = (!empty($data['last_name']) ? $data['last_name'] : $client->last_name);\n        $client->aid = (!empty($data['aid']) ? $data['aid'] : $client->aid);\n        $client->gender = (!empty($data['gender']) ? $data['gender'] : $client->gender);\n        $client->birthday = (!empty($data['birthday']) ? $data['birthday'] : $client->birthday);\n        $client->company = (!empty($data['company']) ? $data['company'] : $client->company);\n        $client->company_vat = (!empty($data['company_vat']) ? $data['company_vat'] : $client->company_vat);\n        $client->address_1 = (!empty($data['address_1']) ? $data['address_1'] : $client->address_1);\n        $client->address_2 = (!empty($data['address_2']) ? $data['address_2'] : $client->address_2);\n        $client->phone = (!empty($data['phone']) ? $data['phone'] : $client->phone);\n        $client->document_type = (!empty($data['document_type']) ? $data['document_type'] : $client->document_type);\n        $client->document_nr = (!empty($data['document_nr']) ? $data['document_nr'] : $client->document_nr);\n        $client->notes = (!empty($data['notes']) ? $data['notes'] : $client->notes);\n        $client->country = (!empty($data['country']) ? $data['country'] : $client->country);\n        $client->postcode = (!empty($data['postcode']) ? $data['postcode'] : $client->postcode);\n        $client->state = (!empty($data['state']) ? $data['state'] : $client->state);\n        $client->city = (!empty($data['city']) ? $data['city'] : $client->city);\n\n        $client->status = (!empty($data['status']) ? $data['status'] : $client->status);\n        $client->email_approved = (!empty($data['email_approved']) ? $data['email_approved'] : $client->email_approved);\n        $client->tax_exempt = (!empty($data['tax_exempt']) ? $data['tax_exempt'] : $client->tax_exempt);\n        $client->created_at = (!empty($data['created_at']) ? $data['created_at'] : $client->created_at);\n\n        $client->custom_1 = (!empty($data['custom_1']) ? $data['custom_1'] : $client->custom_1);\n        $client->custom_2 = (!empty($data['custom_2']) ? $data['custom_2'] : $client->custom_2);\n        $client->custom_3 = (!empty($data['custom_3']) ? $data['custom_3'] : $client->custom_3);\n        $client->custom_4 = (!empty($data['custom_4']) ? $data['custom_4'] : $client->custom_4);\n        $client->custom_5 = (!empty($data['custom_5']) ? $data['custom_5'] : $client->custom_5);\n        $client->custom_6 = (!empty($data['custom_6']) ? $data['custom_6'] : $client->custom_6);\n        $client->custom_7 = (!empty($data['custom_7']) ? $data['custom_7'] : $client->custom_7);\n        $client->custom_8 = (!empty($data['custom_8']) ? $data['custom_8'] : $client->custom_8);\n        $client->custom_9 = (!empty($data['custom_9']) ? $data['custom_9'] : $client->custom_9);\n        $client->custom_10 = (!empty($data['custom_10']) ? $data['custom_10'] : $client->custom_10);\n\n        $client->client_group_id = (!empty($data['group_id']) ? $data['group_id'] : $client->client_group_id);\n        $client->company_number = (!empty($data['company_number']) ? $data['company_number'] : $client->company_number);\n        $client->type = (!empty($data['type']) ? $data['type'] : $client->type);\n        $client->lang = (!empty($data['lang']) ? $data['lang'] : $client->lang);\n\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($client);\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientUpdate', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Updated client #%s profile', $client->id);\n\n        return true;\n    }\n\n    /**\n     * Change client password.\n     *\n     * @param int    $id               - Client ID\n     * @param string $password         - new client password\n     * @param string $password_confirm - repeat same new client password\n     *\n     * @return bool\n     */\n    public function change_password($data)\n    {\n        $required = [\n            'id' => 'ID required',\n            'password' => 'Password required',\n            'password_confirm' => 'Password confirmation required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        if ($data['password'] != $data['password_confirm']) {\n            throw new \\Box_Exception('Passwords do not match');\n        }\n\n        $this->di['validator']->isPasswordStrong($data['password']);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminClientPasswordChange', 'params' => $data]);\n\n        $client->pass = $this->di['password']->hashIt($data['password']);\n        $client->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($client);\n\n        $profileService = $this->di['mod_service']('profile');\n        $profileService->invalidateSessions('client', $data['id']);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminClientPasswordChange', 'params' => ['id' => $client->id, 'password' => $data['password']]]);\n\n        $this->di['logger']->info('Changed client #%s password', $client->id);\n\n        return true;\n    }\n\n    /**\n     * Returns list of client payments.\n     *\n     * @return array\n     */\n    public function balance_get_list($data)\n    {\n        $service = $this->di['mod_service']('Client', 'Balance');\n        [$q, $params] = $service->getSearchQuery($data);\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        $pager = $this->di['pager']->getSimpleResultSet($q, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $item) {\n            $pager['list'][$key] = [\n                'id' => $item['id'],\n                'description' => $item['description'],\n                'amount' => $item['amount'],\n                'currency' => $item['currency'],\n                'created_at' => $item['created_at'],\n            ];\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Remove row from clients balance.\n     *\n     * @param int $id - Balance line id\n     *\n     * @return bool\n     */\n    public function balance_delete($data)\n    {\n        $required = [\n            'id' => 'Client ID is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientBalance', $data['id'], 'Balance line not found');\n\n        $id = $model->id;\n        $client_id = $model->client_id;\n        $amount = $model->amount;\n\n        $this->di['db']->trash($model);\n\n        $this->di['logger']->info('Removed line %s from client #%s balance for %s', $id, $client_id, $amount);\n\n        return true;\n    }\n\n    /**\n     * Adds funds to clients balance.\n     *\n     * @param int $id          - Client ID\n     * @param int $amount      - Amount of clients currency to added to balance\n     * @param int $description - Description of this transaction\n     *\n     * @optional string $type - Related item type\n     * @optional string $rel_id - Related item id\n     *\n     * @return bool\n     */\n    public function balance_add_funds($data)\n    {\n        $required = [\n            'id' => 'Client ID required',\n            'amount' => 'Amount is required',\n            'description' => 'Description is required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $client = $this->di['db']->getExistingModelById('Client', $data['id'], 'Client not found');\n\n        $service = $this->di['mod_service']('client');\n        $service->addFunds($client, $data['amount'], $data['description'], $data);\n\n        return true;\n    }\n\n    /**\n     * Remove password reminders which were not confirmed in 2 hours.\n     *\n     * @return bool\n     */\n    public function batch_expire_password_reminders()\n    {\n        $service = $this->di['mod_service']('client');\n        $expired = $service->getExpiredPasswordReminders();\n        foreach ($expired as $model) {\n            $this->di['db']->trash($model);\n        }\n\n        $this->di['logger']->info('Executed action to delete expired clients password reminders');\n\n        return true;\n    }\n\n    /**\n     * Get list of clients logins history.\n     *\n     * @optional int $client_id - filter by client\n     *\n     * @return array\n     */\n    public function login_history_get_list($data)\n    {\n        [$q, $params] = $this->getService()->getHistorySearchQuery($data);\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n        $pager = $this->di['pager']->getSimpleResultSet($q, $params, $per_page);\n\n        foreach ($pager['list'] as $key => $item) {\n            $pager['list'][$key] = [\n                'id' => $item['id'],\n                'ip' => $item['ip'],\n                'created_at' => $item['created_at'],\n                'client' => [\n                    'id' => $item['client_id'],\n                    'first_name' => $item['first_name'],\n                    'last_name' => $item['last_name'],\n                    'email' => $item['email'],\n                ],\n            ];\n        }\n\n        return $pager;\n    }\n\n    /**\n     * Remove log entry form clients logins history.\n     *\n     * @param int $id - Log entry ID\n     *\n     * @return bool\n     */\n    public function login_history_delete($data)\n    {\n        $required = [\n            'id' => 'Id not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n        $model = $this->di['db']->getExistingModelById('ActivityClientHistory', $data['id']);\n\n        if (!$model instanceof \\Model_ActivityClientHistory) {\n            throw new \\Box_Exception('Event not found');\n        }\n        $this->di['db']->trash($model);\n\n        return true;\n    }\n\n    /**\n     * Return client statuses with counter.\n     *\n     * @return array\n     */\n    public function get_statuses($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->counter();\n    }\n\n    /**\n     * Return client groups. Id and title pairs.\n     *\n     * @return array\n     */\n    public function group_get_pairs($data)\n    {\n        $service = $this->di['mod_service']('client');\n\n        return $service->getGroupPairs();\n    }\n\n    /**\n     * Create new clients group.\n     *\n     * @param string $title - New group title\n     *\n     * @return int $id - newly created group id\n     */\n    public function group_create($data)\n    {\n        $required = [\n            'title' => 'Group title is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        return $this->getService()->createGroup($data);\n    }\n\n    /**\n     * Update client group.\n     *\n     * @param int $id - client group ID\n     *\n     * @optional string $title - new group title\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     */\n    public function group_update($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        $model->title = $data['title'] ?? $model->title;\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        return true;\n    }\n\n    /**\n     * Delete client group.\n     *\n     * @param int $id - client group ID\n     *\n     * @return bool\n     *\n     * @throws ErrorException\n     */\n    public function group_delete($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        return $this->getService()->deleteGroup($model);\n    }\n\n    /**\n     * Get client group details.\n     *\n     * @param int $id - client group ID\n     *\n     * @return array\n     *\n     * @throws ErrorException\n     */\n    public function group_get($data)\n    {\n        $required = [\n            'id' => 'Group id is missing',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        $model = $this->di['db']->getExistingModelById('ClientGroup', $data['id'], 'Group not found');\n\n        return $this->di['db']->toArray($model);\n    }\n\n    /**\n     * Deletes clients with given IDs.\n     *\n     * @param array $ids - IDs for deletion\n     *\n     * @return bool\n     */\n    public function batch_delete($data)\n    {\n        $required = [\n            'ids' => 'IDs not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        foreach ($data['ids'] as $id) {\n            $this->delete(['id' => $id]);\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes client login logs with given IDs.\n     *\n     * @param array $ids - IDs for deletion\n     *\n     * @return bool\n     */\n    public function batch_delete_log($data)\n    {\n        $required = [\n            'ids' => 'IDs not passed',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n\n        foreach ($data['ids'] as $id) {\n            $this->login_history_delete(['id' => $id]);\n        }\n\n        return true;\n    }\n\n    public function export_csv($data)\n    {\n        $data['headers'] ??= [];\n        return $this->getService()->exportCSV($data['headers']);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n * Admin profile management.\n */\n\nnamespace Box\\Mod\\Profile\\Api;\n\nclass Admin extends \\Api_Abstract\n{\n    /**\n     * Returns currently logged in staff member profile information.\n     *\n     * @return array\n     *\n     * @example\n     * <code class=\"response\">\n     * Array\n     * (\n     * \t\t[id] => 1\n     *\t\t[role] => staff\n     *\t\t[admin_group_id] => 1\n     *\t\t[email] => demo@fossbilling.org\n     *\t\t[pass] => 89e495e7941cf9e40e6980d14a16bf023ccd4c91\n     *\t\t[name] => Demo Administrator\n     *\t\t[signature] => Sincerely Yours, Demo Administrator\n     * \t\t[status] => active\n     *\t\t[api_token] => 29baba87f1c120f1b7fc6b0139167003\n     *\t\t[created_at] => 1310024416\n     *\t\t[updated_at] => 1310024416\n     * )\n     * </code>\n     */\n    public function get()\n    {\n        return $this->getService()->getAdminIdentityArray($this->getIdentity());\n    }\n\n    /**\n     * Clear session data and logout from system.\n     *\n     * @return bool\n     */\n    public function logout()\n    {\n        unset($_COOKIE['BOXADMR']);\n        $this->di['session']->destroy('admin');\n        $this->di['logger']->info('Admin logged out');\n\n        return true;\n    }\n\n    /**\n     * Update currently logged in staff member details.\n     *\n     * @optional string $email - new email\n     * @optional string $name - new name\n     * @optional string $signature - new signature\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function update($data)\n    {\n        if (!is_null($data['email'])) {\n            $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n        }\n\n        return $this->getService()->updateAdmin($this->getIdentity(), $data);\n    }\n\n    /**\n     * Generates new API token for currently logged in staff member.\n     *\n     * @return bool\n     */\n    public function generate_api_key($data)\n    {\n        return $this->getService()->generateNewApiKey($this->getIdentity());\n    }\n\n    /**\n     * Change password for currently logged in staff member.\n     *\n     * @param string $current_password - staff member current password\n     * @param string $new_password     - staff member new password\n     * @param string $confirm_password - staff member new password confirmation\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function change_password($data)\n    {\n        $required = [\n            'current_password' => 'Current password required',\n            'new_password' => 'New password required',\n            'confirm_password' => 'New password confirmation required',\n        ];\n        $validator = $this->di['validator'];\n        $validator->checkRequiredParamsForArray($required, $data);\n        $validator->isPasswordStrong($data['new_password']);\n\n        if ($data['new_password'] != $data['confirm_password']) {\n            throw new \\Exception('Passwords do not match');\n        }\n\n        $staff = $this->getIdentity();\n\n        if (!$this->di['password']->verify($data['current_password'], $staff->pass)) {\n            throw new \\Exception('Current password incorrect');\n        }\n\n        $this->getService()->invalidateSessions();\n        return $this->getService()->changeAdminPassword($staff, $data['new_password']);\n    }\n\n    /**\n     * Used to destroy / invalidate all existing sessions for a given user\n     * @param array $data An array with the options.\n     *                    The array can contain the following sub-keys:\n     *                    - string|null $data['type'] The user type (admin or staff) (optional).\n     *                    - id|null $data['id'] The session ID (optional).\n     * @return bool \n     */\n    public function destroy_sessions(array $data): bool\n    {\n        $data['type'] ??= null;\n        $data['id'] ??= null;\n        return $this->getService()->invalidateSessions($data['type'], $data['id']);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\n/**\n *Client profile management.\n */\n\nnamespace Box\\Mod\\Profile\\Api;\n\nclass Client extends \\Api_Abstract\n{\n    /**\n     * Get currently logged in client details.\n     */\n    public function get()\n    {\n        $clientService = $this->di['mod_service']('client');\n\n        return $clientService->toApiArray($this->getIdentity(), true, $this->getIdentity());\n    }\n\n    /**\n     * Update currently logged in client details.\n     *\n     * @optional string $email - new client email. Must not exist on system\n     * @optional string $last_name - last name\n     * @optional string $aid - Alternative id. Usually used by import tools.\n     * @optional string $gender - Gender - values: male|female|nonbinary|other\n     * @optional string $country - Country\n     * @optional string $city - city\n     * @optional string $birthday - Birthday\n     * @optional string $company - Company\n     * @optional string $company_vat - Company VAT number\n     * @optional string $company_number - Company number\n     * @optional string $type - Identifies client type: company or individual\n     * @optional string $address_1 - Address line 1\n     * @optional string $address_2 - Address line 2\n     * @optional string $postcode - zip or postcode\n     * @optional string $state - country state\n     * @optional string $phone - Phone number\n     * @optional string $phone_cc - Phone country code\n     * @optional string $document_type - Related document type, ie: passport, driving license\n     * @optional string $document_nr - Related document number, ie: passport number: LC45698122\n     * @optional string $notes - Notes about client. Visible for admin only\n     * @optional string $lang - language option\n     * @optional string $custom_1 - Custom field 1\n     * @optional string $custom_2 - Custom field 2\n     * @optional string $custom_3 - Custom field 3\n     * @optional string $custom_4 - Custom field 4\n     * @optional string $custom_5 - Custom field 5\n     * @optional string $custom_6 - Custom field 6\n     * @optional string $custom_7 - Custom field 7\n     * @optional string $custom_8 - Custom field 8\n     * @optional string $custom_9 - Custom field 9\n     * @optional string $custom_10 - Custom field 10\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     */\n    public function update($data)\n    {\n        if (!is_null($data['email'])) {\n            $data['email'] = $this->di['tools']->validateAndSanitizeEmail($data['email']);\n        }\n\n        return $this->getService()->updateClient($this->getIdentity(), $data);\n    }\n\n    /**\n     * Retrieve current API key.\n     */\n    public function api_key_get($data)\n    {\n        $client = $this->getIdentity();\n\n        return $client->api_token;\n    }\n\n    /**\n     * Generate new API key.\n     */\n    public function api_key_reset($data)\n    {\n        return $this->getService()->resetApiKey($this->getIdentity());\n    }\n\n    /**\n     * Change password for currently logged in client.\n     * \n     * @param string $current_password - client current password\n     * @param string $new_password     - client new password\n     * @param string $confirm_password - client new password confirmation\n     *\n     * @return bool\n     *\n     * @throws \\Box_Exception\n     * \n     */\n    public function change_password($data)\n    {\n        $required = [\n            'current_password' => 'Current password required',\n            'new_password' => 'New password required',\n            'confirm_password' => 'New password confirmation required',\n        ];\n        $this->di['validator']->checkRequiredParamsForArray($required, $data);\n        $this->di['validator']->isPasswordStrong($data['new_password']);\n\n        if ($data['new_password'] != $data['confirm_password']) {\n            throw new \\Exception('Passwords do not match');\n        }\n\n        $client = $this->getIdentity();\n\n        if (!$this->di['password']->verify($data['current_password'], $client->pass)) {\n            throw new \\Exception('Current password incorrect');\n        }\n\n        $this->getService()->invalidateSessions();\n        return $this->getService()->changeClientPassword($client, $data['new_password']);\n    }\n\n    /**\n     * Clear session and logout.\n     *\n     * @return bool\n     */\n    public function logout()\n    {\n        return $this->getService()->logoutClient();\n    }\n\n    /**\n     * Used to destroy / invalidate all existing sessions for the current client\n     * @return bool \n     */\n    public function destroy_sessions(array $data): bool\n    {\n        return $this->getService()->invalidateSessions();\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Profile;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function changeAdminPassword(\\Model_Admin $admin, $new_password)\n    {\n        $event_params = [];\n        $event_params['password'] = $new_password;\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffProfilePasswordChange', 'params' => $event_params]);\n\n        $admin->pass = $this->di['password']->hashIt($new_password);\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffProfilePasswordChange', 'params' => $event_params]);\n\n        $this->di['logger']->info('Changed profile password');\n\n        return true;\n    }\n\n    public function generateNewApiKey(\\Model_Admin $admin)\n    {\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffApiKeyChange', 'params' => $event_params]);\n\n        $admin->api_token = $this->di['tools']->generatePassword(32);\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffApiKeyChange', 'params' => $event_params]);\n\n        $this->di['logger']->info('Generated new API key');\n\n        return true;\n    }\n\n    public function updateAdmin(\\Model_Admin $admin, array $data)\n    {\n        $event_params = $data;\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffProfileUpdate', 'params' => $event_params]);\n\n        $admin->email = $data['email'] ?? $admin->email;\n        $admin->name = $data['name'] ?? $admin->name;\n        $admin->signature = $data['signature'] ?? $admin->signature;\n        $admin->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($admin);\n\n        $event_params = [];\n        $event_params['id'] = $admin->id;\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffProfileUpdate', 'params' => $event_params]);\n\n        $this->di['logger']->info('Updated profile');\n\n        return true;\n    }\n\n    public function getAdminIdentityArray(\\Model_Admin $identity)\n    {\n        return [\n            'id' => $identity->id,\n            'role' => $identity->role,\n            'admin_group_id' => $identity->admin_group_id,\n            'email' => $identity->email,\n            'name' => $identity->name,\n            'signature' => $identity->signature,\n            'status' => $identity->status,\n            'api_token' => $identity->api_token,\n            'created_at' => $identity->created_at,\n            'updated_at' => $identity->updated_at,\n        ];\n    }\n\n    public function updateClient(\\Model_Client $client, array $data = [])\n    {\n        $event_params = $data;\n        $event_params['id'] = $client->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientProfileUpdate', 'params' => $event_params]);\n\n        $mod = $this->di['mod']('client');\n        $config = $mod->getConfig();\n        $email = $data['email'] ?? '';\n        if (\n            $client->email != $email\n            && isset($config['disable_change_email'])\n            && $config['disable_change_email']\n        ) {\n            throw new \\Box_Exception('Email can not be changed');\n        }\n\n        if (!empty($email)) {\n            $this->di['tools']->validateAndSanitizeEmail($data['email']);\n\n            $clientService = $this->di['mod_service']('client');\n            if ($clientService->emailAlreadyRegistered($email, $client)) {\n                throw new \\Box_Exception('Can not change email. It is already registered.');\n            }\n\n            $client->email = $email;\n        }\n\n        $client->first_name = $data['first_name'] ?? $client->first_name;\n        $client->last_name = $data['last_name'] ?? $client->last_name;\n        $client->gender = $data['gender'] ?? $client->gender;\n\n        $birthday = $data['birthday'] ?? null;\n        if (strlen(trim($birthday)) > 0 && false === strtotime($birthday)) {\n            throw new \\Box_Exception('Invalid birthdate value');\n        }\n        $client->birthday = $birthday;\n\n        $client->company = $data['company'] ?? $client->company;\n        $client->company_vat = $data['company_vat'] ?? $client->company_vat;\n        $client->company_number = $data['company_number'] ?? $client->company_number;\n        $client->type = $data['type'] ?? $client->type;\n        $client->address_1 = $data['address_1'] ?? $client->address_1;\n        $client->address_2 = $data['address_2'] ?? $client->address_2;\n        $client->phone_cc = $data['phone_cc'] ?? $client->phone_cc;\n        $client->phone = $data['phone'] ?? $client->phone;\n        $client->country = $data['country'] ?? $client->country;\n        $client->postcode = $data['postcode'] ?? $client->postcode;\n        $client->city = $data['city'] ?? $client->city;\n        $client->state = $data['state'] ?? $client->state;\n        $client->document_type = $data['document_type'] ?? $client->document_type;\n        $client->document_nr = $data['document_nr'] ?? $client->document_nr;\n\n        if (isset($client->document_nr)) {\n            $client->document_type = $data['document_type'] ?? 'passport';\n        }\n        $client->lang = $data['lang'] ?? $client->lang;\n        $client->notes = $data['notes'] ?? $client->notes;\n        $client->custom_1 = $data['custom_1'] ?? $client->custom_1;\n        $client->custom_2 = $data['custom_2'] ?? $client->custom_2;\n        $client->custom_3 = $data['custom_3'] ?? $client->custom_3;\n        $client->custom_4 = $data['custom_4'] ?? $client->custom_4;\n        $client->custom_5 = $data['custom_5'] ?? $client->custom_5;\n        $client->custom_6 = $data['custom_6'] ?? $client->custom_6;\n        $client->custom_7 = $data['custom_7'] ?? $client->custom_7;\n        $client->custom_8 = $data['custom_8'] ?? $client->custom_8;\n        $client->custom_9 = $data['custom_9'] ?? $client->custom_9;\n        $client->custom_10 = $data['custom_10'] ?? $client->custom_10;\n\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        foreach ($client as $key => $value) {\n            if (empty($value)) {\n                $client->$key = null;\n            }\n        }\n\n        $this->di['db']->store($client);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientProfileUpdate', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Updated profile');\n\n        return true;\n    }\n\n    public function resetApiKey(\\Model_Client $client)\n    {\n        $client->api_token = $this->di['tools']->generatePassword(32);\n        $client->updated_at = date('Y-m-d H:i:s');\n\n        $this->di['db']->store($client);\n\n        $this->di['logger']->info('Generated new API key');\n\n        return $client->api_token;\n    }\n\n    public function changeClientPassword(\\Model_Client $client, $new_password)\n    {\n        $event_params = [];\n        $event_params['password'] = $new_password;\n        $event_params['id'] = $client->id;\n        $this->di['events_manager']->fire(['event' => 'onBeforeClientProfilePasswordChange', 'params' => $event_params]);\n\n        $client->pass = $this->di['password']->hashIt($new_password);\n        $this->di['db']->store($client);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterClientProfilePasswordChange', 'params' => ['id' => $client->id]]);\n\n        $this->di['logger']->info('Changed profile password');\n\n        return true;\n    }\n\n    public function logoutClient()\n    {\n        $this->di['session']->destroy('client');\n        $this->di['logger']->info('Logged out');\n\n        return true;\n    }\n\n    public function invalidateSessions(?string $type = null, ?int $id = null): bool\n    {\n        if (empty($type)) {\n            $auth = new \\Box_Authorization($this->di);\n            if ($auth->isAdminLoggedIn()) {\n                $type = 'admin';\n            } elseif ($auth->isClientLoggedIn()) {\n                $type = 'client';\n            } else {\n                throw new \\Box_Exception(\"Unable to invalidate sessions, nobody is logged in\");\n            }\n        }\n\n        if (empty($id)) {\n            switch ($type) {\n                case 'admin':\n                    $admin = $this->di['session']->get('admin');\n                    $id = $admin['id'];\n                    break;\n                case 'client':\n                    $id = $this->di['session']->get('client_id');\n                    break;\n            }\n        }\n\n        if ($type !== 'admin' && $type !== 'client') {\n            throw new \\Box_Exception(\"Unable to invalidate sessions, an invalid type was used\");\n        }\n\n        $sessions = $this->getSessions();\n        foreach ($sessions as $session) {\n            $this->deleteSessionIfMatching($session, $type, $id);\n        }\n\n        return true;\n    }\n\n    private function getSessions(): array\n    {\n        $query = 'SELECT * FROM session WHERE content IS NOT NULL AND content <> \"\"';\n        $sessions = $this->di['db']->getAll($query);\n        return $sessions;\n    }\n\n    private function deleteSessionIfMatching(array $session, string $type, int $id): void\n    {\n        // Decode the data for the current session and then verify it is for the selected type\n        $data = base64_decode($session['content']);\n        $stringStart = ($type === 'admin') ? 'admin|' : 'client_id|';\n        if (!str_starts_with($data, $stringStart)) {\n            return;\n        }\n\n        // Now we strip off the starting portion so we can unserialize the data\n        $data = str_replace($stringStart, '', $data);\n\n        // Finally, perform the check depending on what type of session we are looking for and trash it if it's a match\n        if ($type === 'admin') {\n            $dataArray = unserialize($data);\n            if ($dataArray['id'] === $id) {\n                $this->trashSessionByArray($session);\n            }\n        } else {\n            if (unserialize($data) === $id) {\n                $this->trashSessionByArray($session);\n            }\n        }\n    }\n\n    private function trashSessionByArray(array $session): void\n    {\n        $bean = $this->di['db']->dispense('session');\n        $bean->import($session);\n        $this->di['db']->trash($bean);\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace Box\\Mod\\Staff;\n\nuse \\FOSSBilling\\InjectionAwareInterface;\n\nclass Service implements InjectionAwareInterface\n{\n    protected ?\\Pimple\\Container $di;\n\n    public function setDi(\\Pimple\\Container $di): void\n    {\n        $this->di = $di;\n    }\n\n    public function getDi(): ?\\Pimple\\Container\n    {\n        return $this->di;\n    }\n\n    public function login($email, $password, $ip)\n    {\n        $event_params = [];\n        $event_params['email'] = $email;\n        $event_params['password'] = $password;\n        $event_params['ip'] = $ip;\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminLogin', 'params' => $event_params]);\n\n        $model = $this->authorizeAdmin($email, $password);\n        if (!$model instanceof \\Model_Admin) {\n            $this->di['events_manager']->fire(['event' => 'onEventAdminLoginFailed', 'params' => $event_params]);\n            throw new \\Box_Exception('Check your login details', null, 403);\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminLogin', 'params' => ['id' => $model->id, 'ip' => $ip]]);\n\n        $result = [\n            'id' => $model->id,\n            'email' => $model->email,\n            'name' => $model->name,\n            'role' => $model->role,\n        ];\n\n        session_regenerate_id();\n        $this->di['session']->set('admin', $result);\n\n        $this->di['logger']->info(sprintf('Staff member %s logged in', $model->id));\n\n        return $result;\n    }\n\n    public function getAdminsCount()\n    {\n        $sql = 'SELECT COUNT(*) FROM admin WHERE 1';\n\n        return $this->di['db']->getCell($sql);\n    }\n\n    public function setPermissions($member_id, $array)\n    {\n        $array = array_filter($array);\n        $sql = 'UPDATE admin SET permissions = :p WHERE id = :id';\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare($sql);\n        $stmt->bindValue('p', json_encode($array));\n        $stmt->bindValue('id', $member_id);\n        $stmt->execute();\n\n        return true;\n    }\n\n    public function getPermissions($member_id)\n    {\n        $sql = 'SELECT permissions FROM admin WHERE id = :id';\n        $pdo = $this->di['pdo'];\n        $stmt = $pdo->prepare($sql);\n        $stmt->execute(['id' => $member_id]);\n        $json = $stmt->fetchColumn() ?? '';\n        $permissions = json_decode($json, 1);\n        if (!$permissions) {\n            return [];\n        }\n\n        return $permissions;\n    }\n\n    public function hasPermission($member, $mod, $method = null)\n    {\n        if (\\Model_Admin::ROLE_CRON == $member->role || \\Model_Admin::ROLE_ADMIN == $member->role) {\n            return true;\n        }\n\n        $permissions = null;\n        if (is_null($permissions)) {\n            $permissions = $this->getPermissions($member->id);\n        }\n\n        if (empty($permissions)) {\n            return false;\n        }\n\n        if (!array_key_exists($mod, $permissions)) {\n            return false;\n        }\n\n        if (!is_null($method) && is_array($permissions[$mod]) && !in_array($method, $permissions[$mod])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function onAfterClientOrderCreate(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n\n        try {\n            $orderModel = $di['db']->load('ClientOrder', $params['id']);\n            $orderTicketService = $di['mod_service']('order');\n            $order = $orderTicketService->toApiArray($orderModel, true);\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_client_order';\n            $email['order'] = $order;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientOpenTicket(\\Box_Event $event)\n    {\n        $di = $event->getDi();\n        $params = $event->getParameters();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n\n            $helpdeskModel = $di['db']->load('SupportHelpdesk', $ticketModel->support_helpdesk_id);\n            $emailService = $di['mod_service']('email');\n            if (!empty($helpdeskModel->email)) {\n                $email = [];\n                $email['to'] = $helpdeskModel->email;\n                $email['code'] = 'mod_support_helpdesk_ticket_open';\n                $email['ticket'] = $ticket;\n                $emailService->sendTemplate($email);\n\n                return true;\n            }\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_open';\n            $email['ticket'] = $ticket;\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientReplyTicket(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_reply';\n            $email['ticket'] = $ticket;\n\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientCloseTicket(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getTicketById($params['id']);\n            $ticket = $supportTicketService->toApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_ticket_close';\n            $email['ticket'] = $ticket;\n\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterGuestPublicTicketOpen(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getPublicTicketById($params['id']);\n            $ticket = $supportTicketService->publicToApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_open';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterClientSignUp(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $clientService = $di['mod_service']('client');\n\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_client_signup';\n            $email['c'] = $clientService->get(['id' => $params['id']]);\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n\n        return true;\n    }\n\n    public static function onAfterGuestPublicTicketReply(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportTicketService = $di['mod_service']('support');\n            $ticketModel = $supportTicketService->getPublicTicketById($params['id']);\n            $ticket = $supportTicketService->publicToApiArray($ticketModel, true);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_reply';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public static function onAfterGuestPublicTicketClose(\\Box_Event $event)\n    {\n        $params = $event->getParameters();\n        $di = $event->getDi();\n\n        try {\n            $supportService = $di['mod_service']('Support');\n            $publicTicket = $di['db']->load('SupportPTicket', $params['id']);\n            $ticket = $supportService->publicToApiArray($publicTicket);\n            $email = [];\n            $email['to_staff'] = true;\n            $email['code'] = 'mod_staff_pticket_close';\n            $email['ticket'] = $ticket;\n            $emailService = $di['mod_service']('Email');\n            $emailService->sendTemplate($email);\n        } catch (\\Exception $exc) {\n            error_log($exc->getMessage());\n        }\n    }\n\n    public function getList($data)\n    {\n        $data['no_cron'] = true;\n\n        [$query, $params] = $this->getSearchQuery($data);\n\n        $di = $this->getDi();\n        $pager = $di['pager'];\n        $per_page = $data['per_page'] ?? $this->di['pager']->getPer_page();\n\n        return $pager->getSimpleResultSet($query, $params, $per_page);\n    }\n\n    public function getSearchQuery($data)\n    {\n        $query = 'SELECT * FROM admin';\n\n        $search = $data['search'] ?? null;\n        $status = $data['status'] ?? null;\n        $no_cron = (bool) ($data['no_cron'] ?? false);\n\n        $where = [];\n        $bindings = [];\n\n        if ($search) {\n            $search = \"%$search%\";\n            $where[] = '(name LIKE :name OR email LIKE :email )';\n            $bindings[':name'] = $search;\n            $bindings[':email'] = $search;\n        }\n\n        if ($status) {\n            $where[] = 'status = :status';\n            $bindings[':status'] = $status;\n        }\n\n        if ($no_cron) {\n            $where[] = 'role != :role';\n            $bindings[':role'] = \\Model_Admin::ROLE_CRON;\n        }\n\n        if (!empty($where)) {\n            $query = $query . ' WHERE ' . implode(' AND ', $where);\n        }\n        $query .= ' ORDER BY `admin_group_id` ASC, id ASC';\n\n        return [$query, $bindings];\n    }\n\n    /**\n     * @return \\Model_Admin\n     */\n    public function getCronAdmin()\n    {\n        $cron = $this->di['db']->findOne('Admin', 'role = :role', [':role' => \\Model_Admin::ROLE_CRON]);\n        if ($cron instanceof \\Model_Admin) {\n            return $cron;\n        }\n\n        $cronEmail = $this->di['tools']->generatePassword() . '@' . $this->di['tools']->generatePassword() . '.com';\n        $cronEmail = filter_var($cronEmail, FILTER_SANITIZE_EMAIL);\n\n        $CronPass = $this->di['tools']->generatePassword(256, 4);\n\n        $cron = $this->di['db']->dispense('Admin');\n        $cron->role = \\Model_Admin::ROLE_CRON;\n        $cron->admin_group_id = 1;\n        $cron->email = $cronEmail;\n        $cron->pass = $this->di['password']->hashIt($CronPass);\n        $cron->name = 'System Cron Job';\n        $cron->signature = '';\n        $cron->protected = 1;\n        $cron->status = 'active';\n        $cron->created_at = date('Y-m-d H:i:s');\n        $cron->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($cron);\n\n        return $cron;\n    }\n\n    public function toModel_AdminApiArray(\\Model_Admin $model, $deep = false)\n    {\n        $data = [\n            'id' => $model->id,\n            'role' => $model->role,\n            'admin_group_id' => $model->admin_group_id,\n            'email' => $model->email,\n            'name' => $model->name,\n            'status' => $model->status,\n            'signature' => $model->signature,\n            'created_at' => $model->created_at,\n            'updated_at' => $model->updated_at,\n        ];\n\n        $data['protected'] = $model->protected;\n\n        $adminGroupModel = $this->di['db']->load('AdminGroup', $model->admin_group_id);\n        $data['group']['id'] = $adminGroupModel->id;\n        $data['group']['name'] = $adminGroupModel->name;\n\n        return $data;\n    }\n\n    public function update(\\Model_Admin $model, $data)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffUpdate', 'params' => ['id' => $model->id]]);\n\n        $model->email = $data['email'] ?? $model->email;\n        $model->admin_group_id = $data['admin_group_id'] ?? $model->admin_group_id;\n        $model->name = $data['name'] ?? $model->name;\n        $model->status = $data['status'] ?? $model->status;\n        $model->signature = $data['signature'] ?? $model->signature;\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffUpdate', 'params' => ['id' => $model->id]]);\n\n        $this->di['logger']->info('Updated staff member %s details', $model->id);\n\n        return true;\n    }\n\n    public function delete(\\Model_Admin $model)\n    {\n        if ($model->protected) {\n            throw new \\Box_Exception('This administrator account is protected and can not be removed');\n        }\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffDelete', 'params' => ['id' => $model->id]]);\n\n        $id = $model->id;\n        $this->di['db']->trash($model);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffDelete', 'params' => ['id' => $id]]);\n\n        $this->di['logger']->info('Deleted staff member %s', $id);\n\n        return true;\n    }\n\n    public function changePassword(\\Model_Admin $model, $password)\n    {\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffPasswordChange', 'params' => ['id' => $model->id]]);\n\n        $model->pass = $this->di['password']->hashIt($password);\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $profileService = $this->di['mod_service']('profile');\n        $profileService->invalidateSessions('admin', $model->id);\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffPasswordChange', 'params' => ['id' => $model->id]]);\n\n        $this->di['logger']->info('Changed staff member %s password', $model->id);\n\n        return true;\n    }\n\n    public function create(array $data)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_Admin', 3);\n\n        $signature = $data['signature'] ?? null;\n\n        $this->di['events_manager']->fire(['event' => 'onBeforeAdminStaffCreate', 'params' => $data]);\n\n        $model = $this->di['db']->dispense('Admin');\n        $model->role = \\Model_Admin::ROLE_STAFF;\n        $model->admin_group_id = $data['admin_group_id'];\n        $model->email = $data['email'];\n        $model->pass = $this->di['password']->hashIt($data['password']);\n        $model->name = $data['name'];\n        $model->status = $model->getStatus($data['status']);\n        $model->signature = $signature;\n        $model->created_at = date('Y-m-d H:i:s');\n        $model->updated_at = date('Y-m-d H:i:s');\n\n        try {\n            $newId = $this->di['db']->store($model);\n        } catch (\\RedBeanPHP\\RedException) {\n            throw new \\Box_Exception('Staff member with email :email is already registered', [':email' => $data['email']], 788954);\n        }\n\n        $this->di['events_manager']->fire(['event' => 'onAfterAdminStaffCreate', 'params' => ['id' => $newId]]);\n\n        $this->di['logger']->info('Created new staff member %s', $newId);\n\n        return (int) $newId;\n    }\n\n    public function createAdmin(array $data)\n    {\n        $admin = $this->di['db']->dispense('Admin');\n        $admin->role = 'admin';\n        $admin->admin_group_id = 1;\n        $admin->name = 'Administrator';\n        $admin->email = $data['email'];\n        $admin->pass = $this->di['password']->hashIt($data['password']);\n        $admin->protected = 1;\n        $admin->status = 'active';\n        $admin->created_at = date('Y-m-d H:i:s');\n        $admin->updated_at = date('Y-m-d H:i:s');\n\n        $newId = $this->di['db']->store($admin);\n\n        $this->di['logger']->info('Main administrator %s account created', $admin->email);\n        $data['remember'] = true;\n\n        return $newId;\n    }\n\n    public function getAdminGroupPair()\n    {\n        $sql = 'SELECT id, name\n                FROM  admin_group';\n        $rows = $this->di['db']->getAll($sql);\n        $result = [];\n\n        foreach ($rows as $row) {\n            $result[$row['id']] = $row['name'];\n        }\n\n        return $result;\n    }\n\n    public function getAdminGroupSearchQuery($data)\n    {\n        $sql = 'SELECT *\n                FROM admin_group\n                order by id asc';\n\n        return [$sql, []];\n    }\n\n    public function createGroup($name)\n    {\n        $systemService = $this->di['mod_service']('system');\n        $systemService->checkLimits('Model_AdminGroup', 2);\n\n        $model = $this->di['db']->dispense('AdminGroup');\n        $model->name = $name;\n\n        $model->created_at = date('Y-m-d H:i:s');\n        $model->updated_at = date('Y-m-d H:i:s');\n        $groupId = $this->di['db']->store($model);\n\n        $this->di['logger']->info('Created new staff group %s', $groupId);\n\n        return (int) $groupId;\n    }\n\n    public function toAdminGroupApiArray(\\Model_AdminGroup $model, $deep = false, $identity = null)\n    {\n        $data = [];\n        $data['id'] = $model->id;\n        $data['name'] = $model->name;\n        $data['created_at'] = $model->created_at;\n        $data['updated_at'] = $model->updated_at;\n\n        return $data;\n    }\n\n    public function deleteGroup(\\Model_AdminGroup $model)\n    {\n        $id = $model->id;\n        if (1 == $model->id) {\n            throw new \\Box_Exception('Administrators group can not be removed');\n        }\n\n        $sql = 'SELECT count(1)\n                FROM admin\n                WHERE admin_group_id = :id';\n        $staffMembersInGroup = $this->di['db']->getCell($sql, ['id' => $model->id]);\n        if ($staffMembersInGroup > 0) {\n            throw new \\Box_Exception('Can not remove group which has staff members');\n        }\n\n        $this->di['db']->trash($model);\n\n        $this->di['logger']->info('Deleted staff group %s', $id);\n\n        return true;\n    }\n\n    public function updateGroup(\\Model_AdminGroup $model, $data)\n    {\n        if (isset($data['name'])) {\n            $model->name = $data['name'];\n        }\n        $model->updated_at = date('Y-m-d H:i:s');\n        $this->di['db']->store($model);\n\n        $this->di['logger']->info('Updated staff group %s', $model->id);\n\n        return true;\n    }\n\n    public function getActivityAdminHistorySearchQuery($data)\n    {\n        $sql = 'SELECT m.*, a.email, a.name\n                FROM activity_admin_history as m\n                LEFT JOIN admin as a on m.admin_id = a.id\n                ';\n\n        $search = $data['search'] ?? null;\n        $admin_id = $data['admin_id'] ?? null;\n\n        $where = [];\n        $params = [];\n        if ($search) {\n            $where[] = ' a.name LIKE :name OR a.id LIKE :id OR a.email LIKE :email ';\n            $params['name'] = \"%$search%\";\n            $params['id'] = \"%$search%\";\n            $params['email'] = \"%$search%\";\n        }\n\n        if ($admin_id) {\n            $where[] = 'm.admin_id = :admin_id';\n            $params['admin_id'] = $admin_id;\n        }\n\n        if (!empty($where)) {\n            $sql .= ' WHERE ' . implode(' AND ', $where);\n        }\n        $sql .= ' ORDER BY m.id DESC';\n\n        return [$sql, $params];\n    }\n\n    public function toActivityAdminHistoryApiArray(\\Model_ActivityAdminHistory $model, $deep = false)\n    {\n        $result = [\n            'id' => $model->id,\n            'ip' => $model->ip,\n            'created_at' => $model->created_at,\n        ];\n        if ($model->admin_id) {\n            $adminModel = $this->di['db']->load('Admin', $model->admin_id);\n            if ($adminModel instanceof \\Model_Admin && $adminModel->id) {\n                $result['staff']['id'] = $adminModel->id;\n                $result['staff']['name'] = $adminModel->name;\n                $result['staff']['email'] = $adminModel->email;\n            }\n        }\n\n        return $result;\n    }\n\n    public function deleteLoginHistory(\\Model_ActivityAdminHistory $model)\n    {\n        $this->di['db']->trash($model);\n\n        return true;\n    }\n\n    public function authorizeAdmin($email, $plainTextPassword)\n    {\n        $model = $this->di['db']->findOne('Admin', 'email = ? AND status = ?', [$email, \\Model_Admin::STATUS_ACTIVE]);\n        if (null == $model) {\n            return null;\n        }\n\n        return $this->di['auth']->authorizeUser($model, $plainTextPassword);\n    }\n}\n", "<?php\n\nnamespace Box\\Tests\\Mod\\Client\\Api;\n\nclass AdminTest extends \\BBTestCase\n{\n\n    public function testgetDi()\n    {\n        $di           = new \\Pimple\\Container();\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $getDi = $admin_Client->getDi();\n        $this->assertEquals($di, $getDi);\n    }\n\n    public function testget_list()\n    {\n        $simpleResultArr = array(\n            'list' => array(\n                array('id' => 1),\n            ),\n        );\n        $pagerMock       = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($simpleResultArr));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getSearchQuery');\n        $serviceMock->expects($this->atLeastOnce())->\n        method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')\n            ->will($this->returnValue($model));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n        $di['db']        = $dbMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n        $admin_Client->setDi($di);\n        $data = array();\n\n        $result = $admin_Client->get_list($data);\n        $this->assertIsArray($result);\n\n    }\n\n    public function test_get_pairs()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getPairs')->will($this->returnValue(array()));\n\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->get_pairs($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testget()\n    {\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('get')->will($this->returnValue($model));\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->get(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testlogin()\n    {\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $sessionArray = array(\n            'id'    => 1,\n            'email' => 'email@example.com',\n            'name'  => 'John Smith',\n            'role'  => 'client',\n        );\n        $serviceMock  = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('toSessionArray')->will($this->returnValue($sessionArray));\n\n        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')->disableOriginalConstructor()->getMock();\n        $sessionMock->expects($this->atLeastOnce())->\n        method('set');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['session']     = $sessionMock;\n        $di['logger']      = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->login($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testCreate()\n    {\n        $data = array(\n            'email'      => 'email@example.com',\n            'first_name' => 'John',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(false));\n        $serviceMock->expects($this->atLeastOnce())->\n        method('adminCreateClient')->will($this->returnValue(1));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())->method('checkRequiredParamsForArray');\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['events_manager'] = $eventMock;\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->create($data);\n\n        $this->assertIsInt($result, 'create() returned: ' . $result);\n    }\n\n    public function testCreateEmailRegisteredException()\n    {\n        $data = array(\n            'email'      => 'email@example.com',\n            'first_name' => 'John',\n        );\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Email is already registered.');\n        $admin_Client->create($data);\n    }\n\n    public function testdelete()\n    {\n        $data = array('id' => 1);\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Client\\Service')\n            ->setMethods(array('remove'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('remove')\n            ->will($this->returnValue(true));\n\n        $di                   = new \\Pimple\\Container();\n        $di['db']             = $dbMock;\n        $di['events_manager'] = $eventMock;\n        $di['logger']         = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n        $result = $admin_Client->delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testupdate()\n    {\n        $data = array(\n            'id'             => 1,\n            'first_name'     => 'John',\n            'last_name'      => 'Smith',\n            'aid'            => '0',\n            'gender'         => 'male',\n            'birthday'       => '1999-01-01',\n            'company'        => 'LTD Testing',\n            'company_vat'    => 'VAT0007',\n            'address_1'      => 'United States',\n            'address_2'      => 'Utah',\n            'phone_cc'       => '+1',\n            'phone'          => '555-345-345',\n            'document_type'  => 'doc',\n            'document_nr'    => '1',\n            'notes'          => 'none',\n            'country'        => 'Moon',\n            'postcode'       => 'IL-11123',\n            'city'           => 'Chicaco',\n            'state'          => 'IL',\n            'currency'       => 'USD',\n            'tax_exempt'     => 'n/a',\n            'created_at'     => '2012-05-10',\n            'email'          => 'test@example.com',\n            'group_id'       => 1,\n            'status'         => 'test status',\n            'company_number' => '1234',\n            'type'           => '',\n            'lang'           => 'en',\n            'custom_1'       => '',\n            'custom_2'       => '',\n            'custom_3'       => '',\n            'custom_4'       => '',\n            'custom_5'       => '',\n            'custom_6'       => '',\n            'custom_7'       => '',\n            'custom_8'       => '',\n            'custom_9'       => '',\n            'custom_10'      => '',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(false));\n        $serviceMock->expects($this->atLeastOnce())->\n        method('canChangeCurrency')->will($this->returnValue(true));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });;\n        $di['events_manager'] = $eventMock;\n        $di['validator']      = $validatorMock;\n        $di['logger']         = new \\Box_Log();\n\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $result = $admin_Client->update($data);\n        $this->assertTrue($result);\n    }\n\n    public function testupdate_EmailALreadyRegistered()\n    {\n        $data = array(\n            'id'             => 1,\n            'first_name'     => 'John',\n            'last_name'      => 'Smith',\n            'aid'            => '0',\n            'gender'         => 'male',\n            'birthday'       => '1999-01-01',\n            'company'        => 'LTD Testing',\n            'company_vat'    => 'VAT0007',\n            'address_1'      => 'United States',\n            'address_2'      => 'Utah',\n            'phone_cc'       => '+1',\n            'phone'          => '555-345-345',\n            'document_type'  => 'doc',\n            'document_nr'    => '1',\n            'notes'          => 'none',\n            'country'        => 'Moon',\n            'postcode'       => 'IL-11123',\n            'city'           => 'Chicaco',\n            'state'          => 'IL',\n            'currency'       => 'USD',\n            'tax_exempt'     => 'n/a',\n            'created_at'     => '2012-05-10',\n            'email'          => 'test@example.com',\n            'group_id'       => 1,\n            'status'         => 'test status',\n            'company_number' => '1234',\n            'type'           => '',\n            'lang'           => 'en',\n            'custom_1'       => '',\n            'custom_2'       => '',\n            'custom_3'       => '',\n            'custom_4'       => '',\n            'custom_5'       => '',\n            'custom_6'       => '',\n            'custom_7'       => '',\n            'custom_8'       => '',\n            'custom_9'       => '',\n            'custom_10'      => '',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('emailAlreadyRegistered')->will($this->returnValue(true));\n        $serviceMock->expects($this->never())->\n        method('canChangeCurrency')->will($this->returnValue(true));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->never())->\n        method('fire');\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });;\n        $di['events_manager'] = $eventMock;\n        $di['validator']      = $validatorMock;\n        $di['logger']         = new \\Box_Log();\n\n        $toolsMock = $this->getMockBuilder('\\FOSSBilling\\Tools')->getMock();\n        $toolsMock->expects($this->atLeastOnce())->method('validateAndSanitizeEmail');\n        $di['tools'] = $toolsMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Can not change email. It is already registered.');\n        $admin_Client->update($data);\n    }\n\n    public function testUpdateIdException()\n    {\n        $data         = array();\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $di              = new \\Pimple\\Container();\n\n        $di['validator'] = new \\FOSSBilling\\Validate();\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Id required');\n        $admin_Client->update($data);\n    }\n\n    public function testchange_password()\n    {\n        $data = array(\n            'id'               => 1,\n            'password'         => 'strongPass',\n            'password_confirm' => 'strongPass',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n        $eventMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventMock->expects($this->atLeastOnce())->\n        method('fire');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $profileService = $this->getMockBuilder('\\Box\\Mod\\Profile\\Service')->getMock();\n\n        $di                   = new \\Pimple\\Container();\n        $di['db']             = $dbMock;\n        $di['events_manager'] = $eventMock;\n        $di['logger']         = new \\Box_Log();\n        $di['password']       = $passwordMock;\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n        $di['mod_service'] = $di->protect(function () use ($profileService) {\n            return $profileService;\n        });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->change_password($data);\n        $this->assertTrue($result);\n    }\n\n\n    public function testchange_passwordPasswordMismatch()\n    {\n        $data         = array(\n            'id'               => 1,\n            'password'         => 'strongPass',\n            'password_confirm' => 'NotIdentical',\n        );\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $admin_Client->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Passwords do not match');\n        $admin_Client->change_password($data);\n    }\n\n    public function testbalance_get_list()\n    {\n        $simpleResultArr = array(\n            'list' => array(\n                array(\n                    'id'          => 1,\n                    'description' => 'Testing',\n                    'amount'      => '1.00',\n                    'currency'    => 'USD',\n                    'created_at'  => date('Y:m:d H:i:s'),\n                ),\n            ),\n        );\n\n        $data      = array();\n        $pagerMock = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($simpleResultArr));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\ServiceBalance')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getSearchQuery');\n\n        $model = new \\Model_ClientBalance();\n        $model->loadBean(new \\DummyBean());\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['pager']       = $pagerMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_get_list($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testbalance_delete()\n    {\n        $data = array(\n            'id' => 1,\n        );\n\n        $model = new \\Model_ClientBalance();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testbalance_add_funds()\n    {\n        $data = array(\n            'id'          => 1,\n            'amount'      => '1.00',\n            'description' => 'testDescription',\n        );\n\n        $model = new \\Model_Client();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('addFunds');\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->balance_add_funds($data);\n        $this->assertTrue($result);\n    }\n\n    public function testbatch_expire_password_reminders()\n    {\n        $expiredArr = array(\n            new \\Model_ClientPasswordReset(),\n        );\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getExpiredPasswordReminders')->will($this->returnValue($expiredArr));\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n        $di['logger']      = new \\Box_Log();\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->batch_expire_password_reminders();\n        $this->assertTrue($result);\n    }\n\n    public function testlogin_history_get_list()\n    {\n        $data = array();\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getHistorySearchQuery')->will($this->returnValue(array('sql', 'params')));\n\n        $pagerMock      = $this->getMockBuilder('\\Box_Pagination')->disableOriginalConstructor()->getMock();\n        $pagerResultSet = array(\n            'list' => array(),\n        );\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue($pagerResultSet));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->login_history_get_list($data);\n        $this->assertIsArray($result);\n    }\n\n    public function testget_statuses()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('counter')->will($this->returnValue(array()));\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->get_statuses(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testgroup_get_pairs()\n    {\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('getGroupPairs')->will($this->returnValue(array()));\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($serviceMock) { return $serviceMock; });\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_get_pairs(array());\n        $this->assertIsArray($result);\n    }\n\n    public function testgroup_create()\n    {\n        $data['title'] = 'test Group';\n\n        $newGroupId  = 1;\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $serviceMock->expects($this->atLeastOnce())->\n        method('createGroup')\n            ->will($this->returnValue($newGroupId));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setService($serviceMock);\n        $admin_Client->setDi($di);\n        $result = $admin_Client->group_create($data);\n\n        $this->assertIsInt($result);\n        $this->assertEquals($newGroupId, $result);\n    }\n\n\n    public function testgroup_update()\n    {\n        $data['id']    = '2';\n        $data['title'] = 'test Group updated';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')->will($this->returnValue(1));\n\n\n        $di              = new \\Pimple\\Container();\n        $di['db']        = $dbMock;\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_update($data);\n\n        $this->assertTrue($result);\n    }\n\n    public function testgroup_delete()\n    {\n        $data['id'] = '2';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Client\\Service')\n            ->setMethods(array('deleteGroup'))\n            ->getMock();\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('deleteGroup')\n            ->will($this->returnValue(true));\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n        $admin_Client->setService($serviceMock);\n\n        $result = $admin_Client->group_delete($data);\n\n        $this->assertTrue($result);\n    }\n\n    public function testgroup_get()\n    {\n        $data['id'] = '2';\n\n        $model = new \\Model_ClientGroup();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')->will($this->returnValue($model));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('toArray')->will($this->returnValue(array()));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n        $di['validator'] = $validatorMock;\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n        $admin_Client->setDi($di);\n\n        $result = $admin_Client->group_get($data);\n\n        $this->assertIsArray($result);\n    }\n\n    public function testlogin_history_delete()\n    {\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray');\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getExistingModelById')\n            ->will($this->returnValue(new \\Model_ActivityClientHistory()));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $admin_Client = new \\Box\\Mod\\Client\\Api\\Admin();\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $di['db']        = $dbMock;\n        $admin_Client->setDi($di);\n\n        $data   = array('id' => 1);\n        $result = $admin_Client->login_history_delete($data);\n        $this->assertTrue($result);\n    }\n\n    public function testBatch_delete()\n    {\n        $activityMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Api\\Admin')->setMethods(array('delete'))->getMock();\n        $activityMock->expects($this->atLeastOnce())->method('delete')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $activityMock->setDi($di);\n\n        $result = $activityMock->batch_delete(array('ids' => array(1, 2, 3)));\n        $this->assertEquals(true, $result);\n    }\n\n    public function testBatch_delete_log()\n    {\n        $activityMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Api\\Admin')->setMethods(array('login_history_delete'))->getMock();\n        $activityMock->expects($this->atLeastOnce())->method('login_history_delete')->will($this->returnValue(true));\n\n        $validatorMock = $this->getMockBuilder('\\FOSSBilling\\Validate')->disableOriginalConstructor()->getMock();\n        $validatorMock->expects($this->atLeastOnce())\n            ->method('checkRequiredParamsForArray')\n            ->will($this->returnValue(null));\n\n        $di              = new \\Pimple\\Container();\n        $di['validator'] = $validatorMock;\n        $activityMock->setDi($di);\n\n        $result = $activityMock->batch_delete_log(array('ids' => array(1, 2, 3)));\n        $this->assertEquals(true, $result);\n    }\n\n\n}\n", "<?php\n\nnamespace Box\\Mod\\Staff;\n\nclass PdoMock extends \\PDO\n{\n    public function __construct() { }\n}\n\nclass PdoStatementMock extends \\PDOStatement\n{\n    public function __construct() { }\n}\n\nclass ServiceTest extends \\BBTestCase\n{\n\n    public function testLogin()\n    {\n        $email    = 'email@domain.com';\n        $password = 'pass';\n        $ip       = '127.0.0.1';\n\n        $admin = new \\Model_Admin();\n        $admin->loadBean(new \\DummyBean());\n        $admin->id    = 1;\n        $admin->email = $email;\n        $admin->name  = 'Admin';\n        $admin->role  = 'admin';\n\n\n        $emMock = $this->getMockBuilder('\\Box_EventManager')\n            ->getMock();\n        $emMock->expects($this->atLeastOnce())\n            ->method('fire')\n            ->will($this->returnValue(true));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($admin));\n\n        $sessionMock = $this->getMockBuilder('\\FOSSBilling\\Session')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $sessionMock->expects($this->atLeastOnce())\n            ->method('set')\n            ->will($this->returnValue(null));\n\n        $authMock = $this->getMockBuilder('\\Box_Authorization')->disableOriginalConstructor()->getMock();\n        $authMock->expects($this->atLeastOnce())\n            ->method('authorizeUser')\n            ->with($admin, $password)\n            ->willReturn($admin);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $emMock;\n        $di['db']             = $dbMock;\n        $di['session']        = $sessionMock;\n        $di['logger']         = new \\Box_Log();\n        $di['auth']           = $authMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->login($email, $password, $ip);\n\n        $expected = array(\n            'id'    => 1,\n            'email' => $email,\n            'name'  => 'Admin',\n            'role'  => 'admin',\n        );\n\n        $this->assertEquals($expected, $result);\n    }\n\n    public function testLogin_Exception()\n    {\n        $email    = 'email@domain.com';\n        $password = 'pass';\n        $ip       = '127.0.0.1';\n\n        $emMock = $this->getMockBuilder('\\Box_EventManager')\n            ->getMock();\n        $emMock->expects($this->atLeastOnce())\n            ->method('fire')\n            ->will($this->returnValue(true));\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $emMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionCode(403);\n        $this->expectExceptionMessage('Check your login details');\n        $service->login($email, $password, $ip);\n    }\n\n    public function testgetAdminCount()\n    {\n        $countResult = 3;\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')\n            ->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue($countResult));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getAdminsCount();\n        $this->assertIsInt($result);\n        $this->assertEquals($countResult, $result);\n    }\n\n    public function testhasPermissionRoleAdmin()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'admin';\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->hasPermission($member, 'example');\n        $this->assertTrue($result);\n    }\n\n    public function testhasPermissionRoleStaffWithEmptyPerms()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions');\n\n        $result = $serviceMock->hasPermission($member, 'example');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithNoPerm()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('cart' => array(), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithNoMethodPerm()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('example' => array(), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example', 'get_list');\n        $this->assertFalse($result);\n    }\n\n    public function testhasPermissionRoleStaffWithGoodPerms()\n    {\n        $member = new \\Model_Client();\n        $member->loadBean(new \\DummyBean());\n        $member->role = 'staff';\n\n        $serviceMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\Service')\n            ->setMethods(array('getPermissions'))\n            ->getMock();\n\n        $serviceMock->expects($this->atLeastOnce())\n            ->method('getPermissions')\n            ->will($this->returnValue(array('example' => array('get_list'), 'client' => array())));\n\n\n        $result = $serviceMock->hasPermission($member, 'example', 'get_list');\n        $this->assertTrue($result);\n    }\n\n    public function testonAfterClientReplyTicket()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientReplyTicket($eventMock);\n    }\n\n    public function testonAfterClientReplyTicket_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientReplyTicket($eventMock);\n    }\n\n    public function testonAfterClientCloseTicket()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientCloseTicket($eventMock);\n    }\n\n    public function testonAfterClientCloseTicket_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue(new \\Model_SupportTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientCloseTicket($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketOpen()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketOpen($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketOpen_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketOpen($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketReply()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketReply($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketReply_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getPublicTicketById')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketReply($eventMock);\n    }\n\n    public function testonAfterClientSignUp()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $clientMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $clientMock->expects($this->atLeastOnce())\n            ->method('get')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate');\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($clientMock, $emailServiceMock) {\n            if ($name == 'client') {\n                return $clientMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientSignUp($eventMock);\n    }\n\n    public function testonAfterClientSignUp_Exception()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $clientMock = $this->getMockBuilder('\\Box\\Mod\\Client\\Service')->getMock();\n        $clientMock->expects($this->atLeastOnce())\n            ->method('get')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($clientMock, $emailServiceMock) {\n            if ($name == 'client') {\n                return $clientMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterClientSignUp($eventMock);\n    }\n\n    public function testonAfterGuestPublicTicketClose()\n    {\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('publicToApiArray')\n            ->will($this->returnValue(array()));\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailServiceMock->expects($this->atLeastOnce())\n            ->method('sendTemplate')\n            ->willThrowException(new \\Exception('PHPunit controlled Exception'));\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue(new \\Model_SupportPTicket()));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di                = new \\Pimple\\Container();\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'Support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'Email') {\n                return $emailServiceMock;\n            }\n        });\n        $di['db']          = $dbMock;\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->will($this->returnValue($di));\n        $service->setDi($di);\n        $service->onAfterGuestPublicTicketClose($eventMock);\n    }\n\n    public function testonAfterClientOpenTicket_mod_staff_ticket_open()\n    {\n        $di = new \\Pimple\\Container();\n\n        $ticketModel = new \\Model_SupportTicket();\n        $ticketModel->loadBean(new \\DummyBean());\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue($ticketModel));\n\n        $supportTicketArray = array();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->willReturn($supportTicketArray);\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n\n        $emailConfig = array(\n            'to_staff' => true,\n            'code' => 'mod_staff_ticket_open',\n            'ticket' => $supportTicketArray,\n        );\n        $emailServiceMock->expects($this->once())\n            ->method('sendTemplate')\n            ->with($emailConfig)\n            ->willReturn(true);\n\n\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->willReturn(null);\n        $di['db'] = $dbMock;\n        $di['loggedin_admin'] = new \\Model_Admin();\n\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->willReturn($di);\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->onAfterClientOpenTicket($eventMock);\n    }\n\n    public function testonAfterClientOpenTicket_mod_support_helpdesk_ticket_open()\n    {\n        $di = new \\Pimple\\Container();\n\n        $ticketModel = new \\Model_SupportTicket();\n        $ticketModel->loadBean(new \\DummyBean());\n\n        $supportServiceMock = $this->getMockBuilder('\\Box\\Mod\\Support\\Service')->getMock();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('getTicketById')\n            ->will($this->returnValue($ticketModel));\n\n        $supportTicketArray = array();\n        $supportServiceMock->expects($this->atLeastOnce())\n            ->method('toApiArray')\n            ->willReturn($supportTicketArray);\n\n        $helpdeskModel = new \\Model_SupportHelpdesk();\n        $helpdeskModel->loadBean(new \\DummyBean());\n        $helpdeskModel->email = 'helpdesk@support.com';\n\n        $emailServiceMock = $this->getMockBuilder('\\Box\\Mod\\Email\\Service')->getMock();\n        $emailConfig = array(\n            'to' => $helpdeskModel->email,\n            'code' => 'mod_support_helpdesk_ticket_open',\n            'ticket' => $supportTicketArray,\n        );\n        $emailServiceMock->expects($this->once())\n            ->method('sendTemplate')\n            ->with($emailConfig)\n            ->willReturn(true);\n\n\n        $di['mod_service'] = $di->protect(function ($name) use ($supportServiceMock, $emailServiceMock) {\n            if ($name == 'support') {\n                return $supportServiceMock;\n            }\n            if ($name == 'email') {\n                return $emailServiceMock;\n            }\n        });\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->willReturn($helpdeskModel);\n        $di['db'] = $dbMock;\n        $di['loggedin_admin'] = new \\Model_Admin();\n\n        $eventMock = $this->getMockBuilder('\\Box_Event')\n            ->disableOriginalConstructor()\n            ->getMock();\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getDi')\n            ->willReturn($di);\n\n        $eventMock->expects($this->atLeastOnce())\n            ->method('getparameters');\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->onAfterClientOpenTicket($eventMock);\n    }\n\n    public function testgetList()\n    {\n        $pagerMock = $this->getMockBuilder('\\Box_Pagination')->getMock();\n        $pagerMock->expects($this->atLeastOnce())\n            ->method('getSimpleResultSet')\n            ->will($this->returnValue(array()));\n\n        $di              = new \\Pimple\\Container();\n        $di['pager']     = $pagerMock;\n\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getList(array());\n        $this->assertIsArray($result);\n    }\n\n    public function searchFilters()\n    {\n        return array(\n            array(\n                array(),\n                'SELECT * FROM admin',\n                array()),\n            array(\n                array('search' => 'keyword'),\n                '(name LIKE :name OR email LIKE :email )',\n                array(':name' => '%keyword%', ':email' => '%keyword%')),\n            array(\n                array('status' => 'active'),\n                'status = :status',\n                array(':status' => 'active')),\n            array(\n                array('no_cron' => 'true'),\n                'role != :role',\n                array(':role' => \\Model_Admin::ROLE_CRON)),\n        );\n    }\n\n    /**\n     * @dataProvider searchFilters\n     */\n    public function testgetSearchQuery($data, $expectedStr, $expectedParams)\n    {\n        $di              = new \\Pimple\\Container();\n\n        $service         = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->getSearchQuery($data);\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n\n        $this->assertTrue(strpos($result[0], $expectedStr) !== false, $result[0]);\n        $this->assertTrue(array_diff_key($result[1], $expectedParams) == array());\n    }\n\n    public function testgetCronAdminAlreadyExists()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue($adminModel));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getCronAdmin();\n        $this->assertNotEmpty($result);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n\n    public function testgetCronAdminCreateCronAdminAndReturn()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->will($this->returnValue(null));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt');\n\n        $di             = new \\Pimple\\Container();\n        $di['db']       = $dbMock;\n        $di['tools']    = new \\FOSSBilling\\Tools();\n        $di['password'] = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getCronAdmin();\n        $this->assertNotEmpty($result);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n\n    public function testtoModel_AdminApiArray()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $adminGroupModel = new \\Model_Admin();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue($adminGroupModel));\n\n        $expected =\n            array(\n                'id'             => '',\n                'role'           => '',\n                'admin_group_id' => '',\n                'email'          => '',\n                'name'           => '',\n                'status'         => '',\n                'signature'      => '',\n                'created_at'     => '',\n                'updated_at'     => '',\n                'protected'      => '',\n                'group'          => array('id' => '', 'name' => ''),\n            );\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->toModel_AdminApiArray($adminModel);\n\n        $this->assertNotEmpty($result);\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testupdate()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'signature'      => '1345',\n        );\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->update($adminModel, $data);\n        $this->assertTrue($result);\n    }\n\n    public function testdelete()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->delete($adminModel);\n        $this->assertTrue($result);\n    }\n\n    public function testdeleteProtectedAccount()\n    {\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n        $adminModel->protected = 1;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('This administrator account is protected and can not be removed');\n        $service->delete($adminModel);\n    }\n\n    public function testchangePassword()\n    {\n        $plainTextPassword = 'password';\n        $adminModel        = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($plainTextPassword);\n        \n        $profileService = $this->getMockBuilder('\\Box\\Mod\\Profile\\Service')->getMock();\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['password']       = $passwordMock;\n        $di['mod_service'] = $di->protect(function () use ($profileService) {\n            return $profileService;\n        });\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->changePassword($adminModel, $plainTextPassword);\n        $this->assertTrue($result);\n    }\n\n    public function testcreate()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newId));\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['mod_service']    = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n        $di['password']       = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->create($data);\n        $this->assertIsInt($result);\n        $this->assertEquals($newId, $result);\n    }\n\n    public function testcreate_Exception()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $eventsMock = $this->getMockBuilder('\\Box_EventManager')->getMock();\n        $eventsMock->expects($this->atLeastOnce())\n            ->method('fire');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->willThrowException(new \\RedBeanPHP\\RedException());\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                   = new \\Pimple\\Container();\n        $di['events_manager'] = $eventsMock;\n        $di['logger']         = $logMock;\n        $di['db']             = $dbMock;\n        $di['mod_service']    = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n        $di['password']       = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionCode(788954);\n        $this->expectExceptionMessage(sprintf('Staff member with email %s is already registered', $data['email']));\n        $service->create($data);\n    }\n\n    public function testcreateAdmin()\n    {\n        $data = array(\n            'email'          => 'test@example.com',\n            'admin_group_id' => '1',\n            'name'           => 'testJohn',\n            'status'         => 'active',\n            'password'       => '1345',\n        );\n\n        $newId = 1;\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newId));\n\n        $logMock = $this->getMockBuilder('\\Box_Log')->getMock();\n\n        $systemService = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n\n        $passwordMock = $this->getMockBuilder('\\Box_Password')->getMock();\n        $passwordMock->expects($this->atLeastOnce())\n            ->method('hashIt')\n            ->with($data['password']);\n\n        $di                = new \\Pimple\\Container();\n        $di['logger']      = $logMock;\n        $di['db']          = $dbMock;\n        $di['mod_service'] = $di->protect(function ($serviceName) use ($systemService) {\n            if ('system' == $serviceName) {\n                return $systemService;\n            }\n        });\n        $di['password']    = $passwordMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->createAdmin($data);\n        $this->assertIsInt($result);\n        $this->assertEquals($newId, $result);\n    }\n\n    public function testgetAdminGroupPair()\n    {\n        $rows = array(\n            array(\n                'id'   => '1',\n                'name' => 'First Jogh',\n            ),\n            array(\n                'id'   => '2',\n                'name' => 'Another Smith',\n            ),\n        );\n\n        $expected = array(\n            1 => 'First Jogh',\n            2 => 'Another Smith',\n        );\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getAll')\n            ->will($this->returnValue($rows));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->getAdminGroupPair();\n\n        $this->assertEquals($expected, $result);\n        $this->assertIsArray($result);\n    }\n\n    public function testgetAdminGroupSearchQuery()\n    {\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->getAdminGroupSearchQuery(array());\n\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n    }\n\n    public function testcreateGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n        $newGroupId = 1;\n\n        $systemServiceMock = $this->getMockBuilder('\\Box\\Mod\\System\\Service')->getMock();\n        $systemServiceMock->expects($this->atLeastOnce())\n            ->method('checkLimits');\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('dispense')\n            ->will($this->returnValue($adminGroupModel));\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store')\n            ->will($this->returnValue($newGroupId));\n\n        $di                = new \\Pimple\\Container();\n        $di['db']          = $dbMock;\n        $di['logger']      = new \\Box_Log();\n        $di['mod_service'] = $di->protect(function () use ($systemServiceMock) { return $systemServiceMock; });\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->createGroup('new_group_name');\n        $this->assertIsInt($result);\n        $this->assertEquals($newGroupId, $result);\n    }\n\n    public function testtoAdminGroupApiArray()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $expected =\n            array(\n                'id'         => '',\n                'name'       => '',\n                'created_at' => '',\n                'updated_at' => '',\n            );\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $result = $service->toAdminGroupApiArray($adminGroupModel);\n\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testdeleteGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(0));\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->deleteGroup($adminGroupModel);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function testdeleteGroupDeleteAdminGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n        $adminGroupModel->id = 1;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Administrators group can not be removed');\n        $service->deleteGroup($adminGroupModel);\n    }\n\n    public function testdeleteGroupGroupHasMembers()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('getCell')\n            ->will($this->returnValue(2));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $this->expectException(\\Box_Exception::class);\n        $this->expectExceptionMessage('Can not remove group which has staff members');\n        $service->deleteGroup($adminGroupModel);\n    }\n\n    public function testupdateGroup()\n    {\n        $adminGroupModel = new \\Model_AdminGroup();\n        $adminGroupModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('store');\n\n        $di           = new \\Pimple\\Container();\n        $di['db']     = $dbMock;\n        $di['logger'] = new \\Box_Log();\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $data   = array('name' => 'OhExampleName');\n        $result = $service->updateGroup($adminGroupModel, $data);\n        $this->assertIsBool($result);\n        $this->assertTrue($result);\n    }\n\n    public function ActivityAdminHistorySearchFilters()\n    {\n        return array(\n            array(\n                array(),\n                'SELECT m.*, a.email, a.name',\n                array()),\n            array(\n                array('search' => 'keyword'),\n                'a.name LIKE :name OR a.id LIKE :id OR a.email LIKE :email',\n                array('name' => '%keyword%', 'id' => '%keyword%', 'email' => '%keyword%')),\n            array(\n                array('admin_id' => '2'),\n                'm.admin_id = :admin_id',\n                array('admin_id' => '2')),\n        );\n    }\n\n    /**\n     * @dataProvider ActivityAdminHistorySearchFilters\n     */\n\n    public function testgetActivityAdminHistorySearchQuery($data, $expectedStr, $expectedParams)\n    {\n        $di              = new \\Pimple\\Container();\n\n        $service         = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->getActivityAdminHistorySearchQuery($data);\n        $this->assertIsString($result[0]);\n        $this->assertIsArray($result[1]);\n\n        $this->assertTrue(strpos($result[0], $expectedStr) !== false, $result[0]);\n        $this->assertTrue(array_diff_key($result[1], $expectedParams) == array());\n    }\n\n    public function testtoActivityAdminHistoryApiArray()\n    {\n        $adminHistoryModel = new \\Model_ActivityAdminHistory();\n        $adminHistoryModel->loadBean(new \\DummyBean());\n        $adminHistoryModel->admin_id = 2;\n\n        $expected = array(\n            'id'         => '',\n            'ip'         => '',\n            'created_at' => '',\n            'staff'      => array(\n                'id'    => $adminHistoryModel->admin_id,\n                'name'  => '',\n                'email' => '',\n\n            ),\n        );\n\n        $adminModel = new \\Model_Admin();\n        $adminModel->loadBean(new \\DummyBean());\n        $adminModel->id = 2;\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('load')\n            ->will($this->returnValue($adminModel));\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n        $result = $service->toActivityAdminHistoryApiArray($adminHistoryModel);\n\n        $this->assertNotEmpty($result);\n        $this->assertIsArray($result);\n        $this->assertTrue(count(array_diff(array_keys($expected), array_keys($result))) == 0, 'Missing array key values.');\n    }\n\n    public function testdeleteLoginHistory()\n    {\n        $adminHistoryModel = new \\Model_ActivityAdminHistory();\n        $adminHistoryModel->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder(('\\Box_Database'))->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('trash');\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->deleteLoginHistory($adminHistoryModel);\n        $this->assertTrue($result);\n    }\n\n    public function testsetPermissions()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $result    = $service->setPermissions($member_id, array());\n        $this->assertTrue($result);\n    }\n\n    public function testgetPermissions_PermAreEmpty()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('fetchColumn')\n            ->will($this->returnValue('{}'));\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $result    = $service->getPermissions($member_id);\n        $this->assertIsArray($result);\n        $this->assertEquals(array(), $result);\n    }\n\n    public function testgetPermissions()\n    {\n        $pdoStatementMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoStatementMock')\n            ->getMock();\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('execute');\n        $queryResult = '{\"id\" : \"1\"}';\n        $pdoStatementMock->expects($this->atLeastOnce())\n            ->method('fetchColumn')\n            ->will($this->returnValue($queryResult));\n\n        $pdoMock = $this->getMockBuilder('\\Box\\Mod\\Staff\\PdoMock')->getMock();\n        $pdoMock->expects($this->atLeastOnce())\n            ->method('prepare')\n            ->will($this->returnValue($pdoStatementMock));\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n\n        $di        = new \\Pimple\\Container();\n        $di['pdo'] = $pdoMock;\n        $service->setDi($di);\n\n        $member_id = 1;\n        $expected  = json_decode($queryResult, 1);\n        $result    = $service->getPermissions($member_id);\n        $this->assertIsArray($result);\n        $this->assertEquals($expected, $result);\n    }\n\n\n    public function testauthorizeAdmin_DidntFoundEmail()\n    {\n        $email    = 'example@fossbilling.vm';\n        $password = '123456';\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->with('Admin', 'email = ? AND status = ?')\n            ->willReturn(null);\n\n        $di       = new \\Pimple\\Container();\n        $di['db'] = $dbMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->authorizeAdmin($email, $password);\n        $this->assertNull($result);\n    }\n\n    public function testauthorizeAdmin()\n    {\n        $email    = 'example@fossbilling.vm';\n        $password = '123456';\n\n        $model = new \\Model_Admin();\n        $model->loadBean(new \\DummyBean());\n\n        $dbMock = $this->getMockBuilder('\\Box_Database')->getMock();\n        $dbMock->expects($this->atLeastOnce())\n            ->method('findOne')\n            ->with('Admin', 'email = ? AND status = ?')\n            ->willReturn($model);\n\n        $authMock = $this->getMockBuilder('\\Box_Authorization')->disableOriginalConstructor()->getMock();\n        $authMock->expects($this->atLeastOnce())\n            ->method('authorizeUser')\n            ->with($model, $password)\n            ->willReturn($model);\n\n        $di         = new \\Pimple\\Container();\n        $di['db']   = $dbMock;\n        $di['auth'] = $authMock;\n\n        $service = new \\Box\\Mod\\Staff\\Service();\n        $service->setDi($di);\n\n        $result = $service->authorizeAdmin($email, $password);\n        $this->assertInstanceOf('\\Model_Admin', $result);\n    }\n}\n"], "filenames": ["src/modules/Client/Api/Admin.php", "src/modules/Profile/Api/Admin.php", "src/modules/Profile/Api/Client.php", "src/modules/Profile/Service.php", "src/modules/Staff/Service.php", "tests/modules/Client/Api/AdminTest.php", "tests/modules/Staff/ServiceTest.php"], "buggy_code_start_loc": [356, 119, 123, 224, 445, 451, 1029], "buggy_code_end_loc": [356, 124, 138, 224, 445, 463, 1035], "fixing_code_start_loc": [357, 119, 123, 225, 446, 452, 1030], "fixing_code_end_loc": [360, 141, 149, 301, 449, 467, 1041], "type": "CWE-613", "message": "Insufficient Session Expiration in GitHub repository fossbilling/fossbilling prior to 0.5.5.", "other": {"cve": {"id": "CVE-2023-4005", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-31T01:15:09.840", "lastModified": "2023-08-03T20:40:43.133", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Insufficient Session Expiration in GitHub repository fossbilling/fossbilling prior to 0.5.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.8, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.5", "matchCriteriaId": "5064D6F1-C513-447E-9D1F-2523C10A0FB2"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/20c23b051eb690cb4ae60a257f6bb46eb3aae2d1", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f0aacce1-79bc-4765-95f1-7e824433b9e4", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/20c23b051eb690cb4ae60a257f6bb46eb3aae2d1"}}