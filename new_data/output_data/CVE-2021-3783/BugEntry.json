{"buggy_code": ["<?php\ndefine( 'YOURLS_ADMIN', true );\ndefine( 'YOURLS_UPGRADING', true );\nrequire_once( dirname( __DIR__ ).'/includes/load-yourls.php' );\nrequire_once( YOURLS_INC.'/functions-upgrade.php' );\nrequire_once( YOURLS_INC.'/functions-install.php' );\nyourls_maybe_require_auth();\n\nyourls_html_head( 'upgrade', yourls__( 'Upgrade YOURLS' ) );\nyourls_html_logo();\nyourls_html_menu();\n?>\n\t\t<h2><?php yourls_e( 'Upgrade YOURLS' ); ?></h2>\n<?php\n\n// Check if upgrade is needed\nif ( !yourls_upgrade_is_needed() ) {\n\techo '<p>' . yourls_s( 'Upgrade not required. Go <a href=\"%s\">back to play</a>!', yourls_admin_url('index.php') ) . '</p>';\n\n\n} else {\n\t/*\n\tstep 1: create new tables and populate them, update old tables structure,\n\tstep 2: convert each row of outdated tables if needed\n\tstep 3: - if applicable finish updating outdated tables (indexes etc)\n\t        - update version & db_version in options, this is all done!\n\t*/\n\n\t// From what are we upgrading?\n\tif ( isset( $_GET['oldver'] ) && isset( $_GET['oldsql'] ) ) {\n\t\t$oldver = (string)( $_GET['oldver'] );\n\t\t$oldsql = (string)( $_GET['oldsql'] );\n\t} else {\n\t\tlist( $oldver, $oldsql ) = yourls_get_current_version_from_sql();\n\t}\n\n\t// To what are we upgrading ?\n\t$newver = YOURLS_VERSION;\n\t$newsql = YOURLS_DB_VERSION;\n\n\t// Verbose & ugly details\n\tyourls_debug_mode(true);\n\n\t// Let's go\n\t$step = ( isset( $_GET['step'] ) ? intval( $_GET['step'] ) : 0 );\n\tswitch( $step ) {\n\n\t\tdefault:\n\t\tcase 0:\n\t\t\t?>\n\t\t\t<p><?php yourls_e( 'Your current installation needs to be upgraded.' ); ?></p>\n\t\t\t<p><?php yourls_e( 'Please, pretty please, it is recommended that you <strong>backup</strong> your database<br/>(you should do this regularly anyway)' ); ?></p>\n\t\t\t<p><?php yourls_e( \"Nothing awful <em>should</em> happen, but this doesn't mean it <em>won't</em> happen, right? ;)\" ); ?></p>\n\t\t\t<p><?php yourls_e( \"On every step, if <span class='error'>something goes wrong</span>, you'll see a message and hopefully a way to fix.\" ); ?></p>\n\t\t\t<p><?php yourls_e( 'If everything goes too fast and you cannot read, <span class=\"success\">good for you</span>, let it go :)' ); ?></p>\n\t\t\t<p><?php yourls_e( 'Once you are ready, press \"Upgrade\" !' ); ?></p>\n\t\t\t<?php\n\t\t\techo \"\n\t\t\t<form action='upgrade.php?' method='get'>\n\t\t\t<input type='hidden' name='step' value='1' />\n\t\t\t<input type='hidden' name='oldver' value='$oldver' />\n\t\t\t<input type='hidden' name='newver' value='$newver' />\n\t\t\t<input type='hidden' name='oldsql' value='$oldsql' />\n\t\t\t<input type='hidden' name='newsql' value='$newsql' />\n\t\t\t<input type='submit' class='primary' value='\" . yourls_esc_attr__( 'Upgrade' ) . \"' />\n\t\t\t</form>\";\n\n\t\t\tbreak;\n\n\t\tcase 1:\n\t\tcase 2:\n\t\t\t$upgrade = yourls_upgrade( $step, $oldver, $newver, $oldsql, $newsql );\n\t\t\tbreak;\n\n\t\tcase 3:\n\t\t\t$upgrade = yourls_upgrade( 3, $oldver, $newver, $oldsql, $newsql );\n\t\t\techo '<p>' . yourls__( 'Your installation is now up to date ! ' ) . '</p>';\n\t\t\techo '<p>' . yourls_s( 'Go back to <a href=\"%s\">the admin interface</a>', yourls_admin_url('index.php') ) . '</p>';\n\t}\n\n}\n\n?>\n\n<?php yourls_html_footer(); ?>\n", "<?php\n\n/**\n * Upgrade YOURLS and DB schema\n *\n * Note to devs : prefer update function names using the SQL version, eg yourls_update_to_506(),\n * rather than using the YOURLS version number, eg yourls_update_to_18(). This is to allow having\n * multiple SQL update during the dev cycle of the same Y0URLS version\n *\n */\nfunction yourls_upgrade( $step, $oldver, $newver, $oldsql, $newsql ) {\n\n    yourls_maintenance_mode(true);\n\n    // special case for 1.3: the upgrade is a multi step procedure\n\tif( $oldsql == 100 ) {\n\t\tyourls_upgrade_to_14( $step );\n\t}\n\n\t// other upgrades which are done in a single pass\n\tswitch( $step ) {\n\n\tcase 1:\n\tcase 2:\n\t\tif( $oldsql < 210 )\n\t\t\tyourls_upgrade_to_141();\n\n\t\tif( $oldsql < 220 )\n\t\t\tyourls_upgrade_to_143();\n\n\t\tif( $oldsql < 250 )\n\t\t\tyourls_upgrade_to_15();\n\n\t\tif( $oldsql < 482 )\n\t\t\tyourls_upgrade_482(); // that was somewhere 1.5 and 1.5.1 ...\n\n\t\tif( $oldsql < 506 ) {\n            /**\n             * 505 was the botched update with the wrong collation, see #2766\n             * 506 is the updated collation.\n             * We want :\n             *      people on 505 to update to 506\n             *      people before 505 to update to the FIXED complete upgrade\n             */\n\t\t\tif( $oldsql == 505 ) {\n                yourls_upgrade_505_to_506();\n            } else {\n                yourls_upgrade_to_506();\n            }\n        }\n\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=3\" ) );\n\n\t\tbreak;\n\n\tcase 3:\n\t\t// Update options to reflect latest version\n\t\tyourls_update_option( 'version', YOURLS_VERSION );\n\t\tyourls_update_option( 'db_version', YOURLS_DB_VERSION );\n        yourls_maintenance_mode(false);\n\t\tbreak;\n\t}\n}\n\n/************************** 1.6 -> 1.8 **************************/\n\n/**\n * Update to 506, just the fix for people who had updated to master on 1.7.10\n *\n */\nfunction yourls_upgrade_505_to_506() {\n    echo \"<p>Updating DB. Please wait...</p>\";\n\t// Fix collation which was wrongly set at first to utf8mb4_unicode_ci\n\t$query = sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;', YOURLS_DB_TABLE_URL);\n\n    try {\n        yourls_get_db()->perform($query);\n    } catch (\\Exception $e) {\n        echo \"<p class='error'>Unable to update the DB.</p>\";\n        echo \"<p>Could not change collation. You will have to fix things manually :(. The error was\n        <pre>\";\n        echo $e->getMessage();\n        echo \"/n</pre>\";\n        die();\n    }\n\n    echo \"<p class='success'>OK!</p>\";\n}\n\n/**\n * Update to 506\n *\n */\nfunction yourls_upgrade_to_506() {\n    $ydb = yourls_get_db();\n    $error_msg = [];\n\n    echo \"<p>Updating DB. Please wait...</p>\";\n\n    $queries = array(\n        'database charset'     => sprintf('ALTER DATABASE `%s` CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;', YOURLS_DB_NAME),\n        'options charset'      => sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;', YOURLS_DB_TABLE_OPTIONS),\n        'short URL varchar'    => sprintf(\"ALTER TABLE `%s` CHANGE `keyword` `keyword` VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT '';\", YOURLS_DB_TABLE_URL),\n        'short URL type url'   => sprintf(\"ALTER TABLE `%s` CHANGE `url` `url` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL;\", YOURLS_DB_TABLE_URL),\n        'short URL type title' => sprintf(\"ALTER TABLE `%s` CHANGE `title` `title` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci\", YOURLS_DB_TABLE_URL),\n        'short URL charset'    => sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;', YOURLS_DB_TABLE_URL),\n    );\n\n    foreach($queries as $what => $query) {\n        try {\n            $ydb->perform($query);\n        } catch (\\Exception $e) {\n            $error_msg[] = $e->getMessage();\n        }\n    }\n\n    if( $error_msg ) {\n        echo \"<p class='error'>Unable to update the DB.</p>\";\n        echo \"<p>You will have to manually fix things, sorry for the inconvenience :(</p>\";\n        echo \"<p>The errors were:\n        <pre>\";\n        foreach( $error_msg as $error ) {\n            echo \"$error\\n\";\n        }\n        echo \"</pre>\";\n        die();\n    }\n\n    echo \"<p class='success'>OK!</p>\";\n}\n\n/************************** 1.5 -> 1.6 **************************/\n\n/**\n * Upgrade r482\n *\n */\nfunction yourls_upgrade_482() {\n\t// Change URL title charset to UTF8\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$sql = \"ALTER TABLE `$table_url` CHANGE `title` `title` TEXT CHARACTER SET utf8;\";\n\tyourls_get_db()->perform( $sql );\n\techo \"<p>Updating table structure. Please wait...</p>\";\n}\n\n/************************** 1.4.3 -> 1.5 **************************/\n\n/**\n * Main func for upgrade from 1.4.3 to 1.5\n *\n */\nfunction yourls_upgrade_to_15( ) {\n\t// Create empty 'active_plugins' entry in the option if needed\n\tif( yourls_get_option( 'active_plugins' ) === false )\n\t\tyourls_add_option( 'active_plugins', array() );\n\techo \"<p>Enabling the plugin API. Please wait...</p>\";\n\n\t// Alter URL table to store titles\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$sql = \"ALTER TABLE `$table_url` ADD `title` TEXT AFTER `url`;\";\n\tyourls_get_db()->perform( $sql );\n\techo \"<p>Updating table structure. Please wait...</p>\";\n\n\t// Update .htaccess\n\tyourls_create_htaccess();\n\techo \"<p>Updating .htaccess file. Please wait...</p>\";\n}\n\n/************************** 1.4.1 -> 1.4.3 **************************/\n\n/**\n * Main func for upgrade from 1.4.1 to 1.4.3\n *\n */\nfunction yourls_upgrade_to_143( ) {\n\t// Check if we have 'keyword' (borked install) or 'shorturl' (ok install)\n\t$ydb = yourls_get_db();\n\t$table_log = YOURLS_DB_TABLE_LOG;\n\t$sql = \"SHOW COLUMNS FROM `$table_log`\";\n\t$cols = $ydb->fetchObjects( $sql );\n\tif ( $cols[2]->Field == 'keyword' ) {\n\t\t$sql = \"ALTER TABLE `$table_log` CHANGE `keyword` `shorturl` VARCHAR( 200 ) BINARY;\";\n\t\t$ydb->query( $sql );\n\t}\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n/************************** 1.4 -> 1.4.1 **************************/\n\n/**\n * Main func for upgrade from 1.4 to 1.4.1\n *\n */\nfunction yourls_upgrade_to_141( ) {\n\t// Kill old cookies from 1.3 and prior\n\tsetcookie('yourls_username', null, time() - 3600 );\n\tsetcookie('yourls_password', null, time() - 3600 );\n\t// alter table URL\n\tyourls_alter_url_table_to_141();\n\t// recreate the htaccess file if needed\n\tyourls_create_htaccess();\n}\n\n/**\n * Alter table URL to 1.4.1\n *\n */\nfunction yourls_alter_url_table_to_141() {\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$alter = \"ALTER TABLE `$table_url` CHANGE `keyword` `keyword` VARCHAR( 200 ) BINARY, CHANGE `url` `url` TEXT BINARY \";\n\tyourls_get_db()->perform( $alter );\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n\n/************************** 1.3 -> 1.4 **************************/\n\n/**\n * Main func for upgrade from 1.3-RC1 to 1.4\n *\n */\nfunction yourls_upgrade_to_14( $step ) {\n\n\tswitch( $step ) {\n\tcase 1:\n\t\t// create table log & table options\n\t\t// update table url structure\n\t\t// update .htaccess\n\t\tyourls_create_tables_for_14(); // no value returned, assuming it went OK\n\t\tyourls_alter_url_table_to_14(); // no value returned, assuming it went OK\n\t\t$clean = yourls_clean_htaccess_for_14(); // returns bool\n\t\t$create = yourls_create_htaccess(); // returns bool\n\t\tif ( !$create )\n\t\t\techo \"<p class='warning'>Please create your <tt>.htaccess</tt> file (I could not do it for you). Please refer to <a href='http://yourls.org/htaccess'>http://yourls.org/htaccess</a>.\";\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=2&oldver=1.3&newver=1.4&oldsql=100&newsql=200\" ), $create );\n\t\tbreak;\n\n\tcase 2:\n\t\t// convert each link in table url\n\t\tyourls_update_table_to_14();\n\t\tbreak;\n\n\tcase 3:\n\t\t// update table url structure part 2: recreate indexes\n\t\tyourls_alter_url_table_to_14_part_two();\n\t\t// update version & db_version & next_id in the option table\n\t\t// attempt to drop YOURLS_DB_TABLE_NEXTDEC\n\t\tyourls_update_options_to_14();\n\t\t// Now upgrade to 1.4.1\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=1&oldver=1.4&newver=1.4.1&oldsql=200&newsql=210\" ) );\n\t\tbreak;\n\t}\n}\n\n/**\n * Update options to reflect new version\n *\n */\nfunction yourls_update_options_to_14() {\n\tyourls_update_option( 'version', '1.4' );\n\tyourls_update_option( 'db_version', '200' );\n\n\tif( defined('YOURLS_DB_TABLE_NEXTDEC') ) {\n\t\t$table = YOURLS_DB_TABLE_NEXTDEC;\n\t\t$next_id = yourls_get_db()->fetchValue(\"SELECT `next_id` FROM `$table`\");\n\t\tyourls_update_option( 'next_id', $next_id );\n\t\tyourls_get_db()->perform( \"DROP TABLE `$table`\" );\n\t} else {\n\t\tyourls_update_option( 'next_id', 1 ); // In case someone mistakenly deleted the next_id constant or table too early\n\t}\n}\n\n/**\n * Create new tables for YOURLS 1.4: options & log\n *\n */\nfunction yourls_create_tables_for_14() {\n\t$ydb = yourls_get_db();\n\n\t$queries = array();\n\n\t$queries[YOURLS_DB_TABLE_OPTIONS] =\n\t\t'CREATE TABLE IF NOT EXISTS `'.YOURLS_DB_TABLE_OPTIONS.'` ('.\n\t\t'`option_id` int(11) unsigned NOT NULL auto_increment,'.\n\t\t'`option_name` varchar(64) NOT NULL default \"\",'.\n\t\t'`option_value` longtext NOT NULL,'.\n\t\t'PRIMARY KEY (`option_id`,`option_name`),'.\n\t\t'KEY `option_name` (`option_name`)'.\n\t\t');';\n\n\t$queries[YOURLS_DB_TABLE_LOG] =\n\t\t'CREATE TABLE IF NOT EXISTS `'.YOURLS_DB_TABLE_LOG.'` ('.\n\t\t'`click_id` int(11) NOT NULL auto_increment,'.\n\t\t'`click_time` datetime NOT NULL,'.\n\t\t'`shorturl` varchar(200) NOT NULL,'.\n\t\t'`referrer` varchar(200) NOT NULL,'.\n\t\t'`user_agent` varchar(255) NOT NULL,'.\n\t\t'`ip_address` varchar(41) NOT NULL,'.\n\t\t'`country_code` char(2) NOT NULL,'.\n\t\t'PRIMARY KEY (`click_id`),'.\n\t\t'KEY `shorturl` (`shorturl`)'.\n\t\t');';\n\n\tforeach( $queries as $query ) {\n\t\t$ydb->perform( $query ); // There's no result to be returned to check if table was created (except making another query to check table existence, which we'll avoid)\n\t}\n\n\techo \"<p>New tables created. Please wait...</p>\";\n\n}\n\n/**\n * Alter table structure, part 1 (change schema, drop index)\n *\n */\nfunction yourls_alter_url_table_to_14() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t$alters = array();\n\t$results = array();\n\t$alters[] = \"ALTER TABLE `$table` CHANGE `id` `keyword` VARCHAR( 200 ) NOT NULL\";\n\t$alters[] = \"ALTER TABLE `$table` CHANGE `url` `url` TEXT NOT NULL\";\n\t$alters[] = \"ALTER TABLE `$table` DROP PRIMARY KEY\";\n\n\tforeach ( $alters as $query ) {\n\t\t$ydb->perform( $query );\n\t}\n\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n/**\n * Alter table structure, part 2 (recreate indexes after the table is up to date)\n *\n */\nfunction yourls_alter_url_table_to_14_part_two() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t$alters = array();\n\t$alters[] = \"ALTER TABLE `$table` ADD PRIMARY KEY ( `keyword` )\";\n\t$alters[] = \"ALTER TABLE `$table` ADD INDEX ( `ip` )\";\n\t$alters[] = \"ALTER TABLE `$table` ADD INDEX ( `timestamp` )\";\n\n\tforeach ( $alters as $query ) {\n\t\t$ydb->perform( $query );\n\t}\n\n\techo \"<p>New table index created</p>\";\n}\n\n/**\n * Convert each link from 1.3 (id) to 1.4 (keyword) structure\n *\n */\nfunction yourls_update_table_to_14() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t// Modify each link to reflect new structure\n\t$chunk = 45;\n\t$from = isset($_GET['from']) ? intval( $_GET['from'] ) : 0 ;\n\t$total = yourls_get_db_stats();\n\t$total = $total['total_links'];\n\n\t$sql = \"SELECT `keyword`,`url` FROM `$table` WHERE 1=1 ORDER BY `url` ASC LIMIT $from, $chunk ;\";\n\n\t$rows = $ydb->fetchObjects($sql);\n\n\t$count = 0;\n\t$queries = 0;\n\tforeach( $rows as $row ) {\n\t\t$keyword = $row->keyword;\n\t\t$url = $row->url;\n\t\t$newkeyword = yourls_int2string( $keyword );\n\t\tif( true === $ydb->perform(\"UPDATE `$table` SET `keyword` = '$newkeyword' WHERE `url` = '$url';\") ) {\n\t\t\t$queries++;\n\t\t} else {\n\t\t\techo \"<p>Huho... Could not update rown with url='$url', from keyword '$keyword' to keyword '$newkeyword'</p>\"; // Find what went wrong :/\n\t\t}\n\t\t$count++;\n\t}\n\n\t// All done for this chunk of queries, did it all go as expected?\n\t$success = true;\n\tif( $count != $queries ) {\n\t\t$success = false;\n\t\t$num = $count - $queries;\n\t\techo \"<p>$num error(s) occured while updating the URL table :(</p>\";\n\t}\n\n\tif ( $count == $chunk ) {\n\t\t// there are probably other rows to convert\n\t\t$from = $from + $chunk;\n\t\t$remain = $total - $from;\n\t\techo \"<p>Converted $chunk database rows ($remain remaining). Continuing... Please do not close this window until it's finished!</p>\";\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=2&oldver=1.3&newver=1.4&oldsql=100&newsql=200&from=$from\" ), $success );\n\t} else {\n\t\t// All done\n\t\techo '<p>All rows converted! Please wait...</p>';\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=3&oldver=1.3&newver=1.4&oldsql=100&newsql=200\" ), $success );\n\t}\n\n}\n\n/**\n * Clean .htaccess as it existed before 1.4. Returns boolean\n *\n */\nfunction yourls_clean_htaccess_for_14() {\n\t$filename = YOURLS_ABSPATH.'/.htaccess';\n\n\t$result = false;\n\tif( is_writeable( $filename ) ) {\n\t\t$contents = implode( '', file( $filename ) );\n\t\t// remove \"ShortURL\" block\n\t\t$contents = preg_replace( '/# BEGIN ShortURL.*# END ShortURL/s', '', $contents );\n\t\t// comment out deprecated RewriteRule\n\t\t$find = 'RewriteRule .* - [E=REMOTE_USER:%{HTTP:Authorization},L]';\n\t\t$replace = \"# You can safely remove this 5 lines block -- it's no longer used in YOURLS\\n\".\n\t\t\t\t\"# $find\";\n\t\t$contents = str_replace( $find, $replace, $contents );\n\n\t\t// Write cleaned file\n\t\t$f = fopen( $filename, 'w' );\n\t\tfwrite( $f, $contents );\n\t\tfclose( $f );\n\n\t\t$result = true;\n\t}\n\n\treturn $result;\n}\n\n", "<?php\n/**\n * YOURLS version\n *\n */\ndefine( 'YOURLS_VERSION', '1.8.3-dev' );\n\n/**\n * YOURLS DB version. Increments when changes are made to the DB schema, to trigger a DB update\n *\n */\ndefine( 'YOURLS_DB_VERSION', '506' );\n"], "fixing_code": ["<?php\ndefine( 'YOURLS_ADMIN', true );\ndefine( 'YOURLS_UPGRADING', true );\nrequire_once( dirname( __DIR__ ).'/includes/load-yourls.php' );\nrequire_once( YOURLS_INC.'/functions-upgrade.php' );\nrequire_once( YOURLS_INC.'/functions-install.php' );\nyourls_maybe_require_auth();\n\nyourls_html_head( 'upgrade', yourls__( 'Upgrade YOURLS' ) );\nyourls_html_logo();\nyourls_html_menu();\n?>\n\t\t<h2><?php yourls_e( 'Upgrade YOURLS' ); ?></h2>\n<?php\n\n// Check if upgrade is needed\nif ( !yourls_upgrade_is_needed() ) {\n\techo '<p>' . yourls_s( 'Upgrade not required. Go <a href=\"%s\">back to play</a>!', yourls_admin_url('index.php') ) . '</p>';\n\n\n} else {\n\t/*\n\tstep 1: create new tables and populate them, update old tables structure,\n\tstep 2: convert each row of outdated tables if needed\n\tstep 3: - if applicable finish updating outdated tables (indexes etc)\n\t        - update version & db_version in options, this is all done!\n\t*/\n\n\t// From what are we upgrading?\n\tif ( isset( $_GET['oldver'] ) && isset( $_GET['oldsql'] ) ) {\n\t\t$oldver = yourls_sanitize_version($_GET['oldver']);\n\t\t$oldsql = (intval)($_GET['oldsql']);\n\t} else {\n\t\tlist( $oldver, $oldsql ) = yourls_get_current_version_from_sql();\n\t}\n\n\t// To what are we upgrading ?\n\t$newver = YOURLS_VERSION;\n\t$newsql = YOURLS_DB_VERSION;\n\n\t// Verbose & ugly details\n\tyourls_debug_mode(true);\n\n\t// Let's go\n\t$step = ( isset( $_GET['step'] ) ? intval( $_GET['step'] ) : 0 );\n\tswitch( $step ) {\n\n\t\tdefault:\n\t\tcase 0:\n\t\t\t?>\n\t\t\t<p><?php yourls_e( 'Your current installation needs to be upgraded.' ); ?></p>\n\t\t\t<p><?php yourls_e( 'Please, pretty please, it is recommended that you <strong>backup</strong> your database<br/>(you should do this regularly anyway)' ); ?></p>\n\t\t\t<p><?php yourls_e( \"Nothing awful <em>should</em> happen, but this doesn't mean it <em>won't</em> happen, right? ;)\" ); ?></p>\n\t\t\t<p><?php yourls_e( \"On every step, if <span class='error'>something goes wrong</span>, you'll see a message and hopefully a way to fix.\" ); ?></p>\n\t\t\t<p><?php yourls_e( 'If everything goes too fast and you cannot read, <span class=\"success\">good for you</span>, let it go :)' ); ?></p>\n\t\t\t<p><?php yourls_e( 'Once you are ready, press \"Upgrade\" !' ); ?></p>\n\t\t\t<?php\n\t\t\techo \"\n\t\t\t<form action='upgrade.php?' method='get'>\n\t\t\t<input type='hidden' name='step' value='1' />\n\t\t\t<input type='hidden' name='oldver' value='$oldver' />\n\t\t\t<input type='hidden' name='newver' value='$newver' />\n\t\t\t<input type='hidden' name='oldsql' value='$oldsql' />\n\t\t\t<input type='hidden' name='newsql' value='$newsql' />\n\t\t\t<input type='submit' class='primary' value='\" . yourls_esc_attr__( 'Upgrade' ) . \"' />\n\t\t\t</form>\";\n\n\t\t\tbreak;\n\n\t\tcase 1:\n\t\tcase 2:\n\t\t\t$upgrade = yourls_upgrade( $step, $oldver, $newver, $oldsql, $newsql );\n\t\t\tbreak;\n\n\t\tcase 3:\n\t\t\t$upgrade = yourls_upgrade( 3, $oldver, $newver, $oldsql, $newsql );\n\t\t\techo '<p>' . yourls__( 'Your installation is now up to date ! ' ) . '</p>';\n\t\t\techo '<p>' . yourls_s( 'Go back to <a href=\"%s\">the admin interface</a>', yourls_admin_url('index.php') ) . '</p>';\n\t}\n\n}\n\n?>\n\n<?php yourls_html_footer(); ?>\n", "<?php\n\n/**\n * Upgrade YOURLS and DB schema\n *\n * Note to devs : prefer update function names using the SQL version, eg yourls_update_to_506(),\n * rather than using the YOURLS version number, eg yourls_update_to_18(). This is to allow having\n * multiple SQL update during the dev cycle of the same Y0URLS version\n *\n */\nfunction yourls_upgrade( $step, $oldver, $newver, $oldsql, $newsql ) {\n\n    /**\n     *  Sanitize input. Two notes :\n     *  - they should already be sanitized in the caller, eg admin/upgrade.php\n     *    (but hey, let's make sure)\n     *  - some vars may not be used at the moment\n     *    (and this is ok, they are here in case a future upgrade procedure needs them)\n     */\n    $step   = intval($step);\n    $oldsql = intval($oldsql);\n    $newsql = intval($newsql);\n    $oldver = yourls_sanitize_version($oldver);\n    $newver = yourls_sanitize_version($newver);\n\n    yourls_maintenance_mode(true);\n\n    // special case for 1.3: the upgrade is a multi step procedure\n\tif( $oldsql == 100 ) {\n\t\tyourls_upgrade_to_14( $step );\n\t}\n\n\t// other upgrades which are done in a single pass\n\tswitch( $step ) {\n\n\tcase 1:\n\tcase 2:\n\t\tif( $oldsql < 210 )\n\t\t\tyourls_upgrade_to_141();\n\n\t\tif( $oldsql < 220 )\n\t\t\tyourls_upgrade_to_143();\n\n\t\tif( $oldsql < 250 )\n\t\t\tyourls_upgrade_to_15();\n\n\t\tif( $oldsql < 482 )\n\t\t\tyourls_upgrade_482(); // that was somewhere 1.5 and 1.5.1 ...\n\n\t\tif( $oldsql < 506 ) {\n            /**\n             * 505 was the botched update with the wrong collation, see #2766\n             * 506 is the updated collation.\n             * We want :\n             *      people on 505 to update to 506\n             *      people before 505 to update to the FIXED complete upgrade\n             */\n\t\t\tif( $oldsql == 505 ) {\n                yourls_upgrade_505_to_506();\n            } else {\n                yourls_upgrade_to_506();\n            }\n        }\n\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=3\" ) );\n\n\t\tbreak;\n\n\tcase 3:\n\t\t// Update options to reflect latest version\n\t\tyourls_update_option( 'version', YOURLS_VERSION );\n\t\tyourls_update_option( 'db_version', YOURLS_DB_VERSION );\n        yourls_maintenance_mode(false);\n\t\tbreak;\n\t}\n}\n\n/************************** 1.6 -> 1.8 **************************/\n\n/**\n * Update to 506, just the fix for people who had updated to master on 1.7.10\n *\n */\nfunction yourls_upgrade_505_to_506() {\n    echo \"<p>Updating DB. Please wait...</p>\";\n\t// Fix collation which was wrongly set at first to utf8mb4_unicode_ci\n\t$query = sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;', YOURLS_DB_TABLE_URL);\n\n    try {\n        yourls_get_db()->perform($query);\n    } catch (\\Exception $e) {\n        echo \"<p class='error'>Unable to update the DB.</p>\";\n        echo \"<p>Could not change collation. You will have to fix things manually :(. The error was\n        <pre>\";\n        echo $e->getMessage();\n        echo \"/n</pre>\";\n        die();\n    }\n\n    echo \"<p class='success'>OK!</p>\";\n}\n\n/**\n * Update to 506\n *\n */\nfunction yourls_upgrade_to_506() {\n    $ydb = yourls_get_db();\n    $error_msg = [];\n\n    echo \"<p>Updating DB. Please wait...</p>\";\n\n    $queries = array(\n        'database charset'     => sprintf('ALTER DATABASE `%s` CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;', YOURLS_DB_NAME),\n        'options charset'      => sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;', YOURLS_DB_TABLE_OPTIONS),\n        'short URL varchar'    => sprintf(\"ALTER TABLE `%s` CHANGE `keyword` `keyword` VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT '';\", YOURLS_DB_TABLE_URL),\n        'short URL type url'   => sprintf(\"ALTER TABLE `%s` CHANGE `url` `url` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL;\", YOURLS_DB_TABLE_URL),\n        'short URL type title' => sprintf(\"ALTER TABLE `%s` CHANGE `title` `title` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci\", YOURLS_DB_TABLE_URL),\n        'short URL charset'    => sprintf('ALTER TABLE `%s` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;', YOURLS_DB_TABLE_URL),\n    );\n\n    foreach($queries as $what => $query) {\n        try {\n            $ydb->perform($query);\n        } catch (\\Exception $e) {\n            $error_msg[] = $e->getMessage();\n        }\n    }\n\n    if( $error_msg ) {\n        echo \"<p class='error'>Unable to update the DB.</p>\";\n        echo \"<p>You will have to manually fix things, sorry for the inconvenience :(</p>\";\n        echo \"<p>The errors were:\n        <pre>\";\n        foreach( $error_msg as $error ) {\n            echo \"$error\\n\";\n        }\n        echo \"</pre>\";\n        die();\n    }\n\n    echo \"<p class='success'>OK!</p>\";\n}\n\n/************************** 1.5 -> 1.6 **************************/\n\n/**\n * Upgrade r482\n *\n */\nfunction yourls_upgrade_482() {\n\t// Change URL title charset to UTF8\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$sql = \"ALTER TABLE `$table_url` CHANGE `title` `title` TEXT CHARACTER SET utf8;\";\n\tyourls_get_db()->perform( $sql );\n\techo \"<p>Updating table structure. Please wait...</p>\";\n}\n\n/************************** 1.4.3 -> 1.5 **************************/\n\n/**\n * Main func for upgrade from 1.4.3 to 1.5\n *\n */\nfunction yourls_upgrade_to_15( ) {\n\t// Create empty 'active_plugins' entry in the option if needed\n\tif( yourls_get_option( 'active_plugins' ) === false )\n\t\tyourls_add_option( 'active_plugins', array() );\n\techo \"<p>Enabling the plugin API. Please wait...</p>\";\n\n\t// Alter URL table to store titles\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$sql = \"ALTER TABLE `$table_url` ADD `title` TEXT AFTER `url`;\";\n\tyourls_get_db()->perform( $sql );\n\techo \"<p>Updating table structure. Please wait...</p>\";\n\n\t// Update .htaccess\n\tyourls_create_htaccess();\n\techo \"<p>Updating .htaccess file. Please wait...</p>\";\n}\n\n/************************** 1.4.1 -> 1.4.3 **************************/\n\n/**\n * Main func for upgrade from 1.4.1 to 1.4.3\n *\n */\nfunction yourls_upgrade_to_143( ) {\n\t// Check if we have 'keyword' (borked install) or 'shorturl' (ok install)\n\t$ydb = yourls_get_db();\n\t$table_log = YOURLS_DB_TABLE_LOG;\n\t$sql = \"SHOW COLUMNS FROM `$table_log`\";\n\t$cols = $ydb->fetchObjects( $sql );\n\tif ( $cols[2]->Field == 'keyword' ) {\n\t\t$sql = \"ALTER TABLE `$table_log` CHANGE `keyword` `shorturl` VARCHAR( 200 ) BINARY;\";\n\t\t$ydb->query( $sql );\n\t}\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n/************************** 1.4 -> 1.4.1 **************************/\n\n/**\n * Main func for upgrade from 1.4 to 1.4.1\n *\n */\nfunction yourls_upgrade_to_141( ) {\n\t// Kill old cookies from 1.3 and prior\n\tsetcookie('yourls_username', null, time() - 3600 );\n\tsetcookie('yourls_password', null, time() - 3600 );\n\t// alter table URL\n\tyourls_alter_url_table_to_141();\n\t// recreate the htaccess file if needed\n\tyourls_create_htaccess();\n}\n\n/**\n * Alter table URL to 1.4.1\n *\n */\nfunction yourls_alter_url_table_to_141() {\n\t$table_url = YOURLS_DB_TABLE_URL;\n\t$alter = \"ALTER TABLE `$table_url` CHANGE `keyword` `keyword` VARCHAR( 200 ) BINARY, CHANGE `url` `url` TEXT BINARY \";\n\tyourls_get_db()->perform( $alter );\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n\n/************************** 1.3 -> 1.4 **************************/\n\n/**\n * Main func for upgrade from 1.3-RC1 to 1.4\n *\n */\nfunction yourls_upgrade_to_14( $step ) {\n\n\tswitch( $step ) {\n\tcase 1:\n\t\t// create table log & table options\n\t\t// update table url structure\n\t\t// update .htaccess\n\t\tyourls_create_tables_for_14(); // no value returned, assuming it went OK\n\t\tyourls_alter_url_table_to_14(); // no value returned, assuming it went OK\n\t\t$clean = yourls_clean_htaccess_for_14(); // returns bool\n\t\t$create = yourls_create_htaccess(); // returns bool\n\t\tif ( !$create )\n\t\t\techo \"<p class='warning'>Please create your <tt>.htaccess</tt> file (I could not do it for you). Please refer to <a href='http://yourls.org/htaccess'>http://yourls.org/htaccess</a>.\";\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=2&oldver=1.3&newver=1.4&oldsql=100&newsql=200\" ), $create );\n\t\tbreak;\n\n\tcase 2:\n\t\t// convert each link in table url\n\t\tyourls_update_table_to_14();\n\t\tbreak;\n\n\tcase 3:\n\t\t// update table url structure part 2: recreate indexes\n\t\tyourls_alter_url_table_to_14_part_two();\n\t\t// update version & db_version & next_id in the option table\n\t\t// attempt to drop YOURLS_DB_TABLE_NEXTDEC\n\t\tyourls_update_options_to_14();\n\t\t// Now upgrade to 1.4.1\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=1&oldver=1.4&newver=1.4.1&oldsql=200&newsql=210\" ) );\n\t\tbreak;\n\t}\n}\n\n/**\n * Update options to reflect new version\n *\n */\nfunction yourls_update_options_to_14() {\n\tyourls_update_option( 'version', '1.4' );\n\tyourls_update_option( 'db_version', '200' );\n\n\tif( defined('YOURLS_DB_TABLE_NEXTDEC') ) {\n\t\t$table = YOURLS_DB_TABLE_NEXTDEC;\n\t\t$next_id = yourls_get_db()->fetchValue(\"SELECT `next_id` FROM `$table`\");\n\t\tyourls_update_option( 'next_id', $next_id );\n\t\tyourls_get_db()->perform( \"DROP TABLE `$table`\" );\n\t} else {\n\t\tyourls_update_option( 'next_id', 1 ); // In case someone mistakenly deleted the next_id constant or table too early\n\t}\n}\n\n/**\n * Create new tables for YOURLS 1.4: options & log\n *\n */\nfunction yourls_create_tables_for_14() {\n\t$ydb = yourls_get_db();\n\n\t$queries = array();\n\n\t$queries[YOURLS_DB_TABLE_OPTIONS] =\n\t\t'CREATE TABLE IF NOT EXISTS `'.YOURLS_DB_TABLE_OPTIONS.'` ('.\n\t\t'`option_id` int(11) unsigned NOT NULL auto_increment,'.\n\t\t'`option_name` varchar(64) NOT NULL default \"\",'.\n\t\t'`option_value` longtext NOT NULL,'.\n\t\t'PRIMARY KEY (`option_id`,`option_name`),'.\n\t\t'KEY `option_name` (`option_name`)'.\n\t\t');';\n\n\t$queries[YOURLS_DB_TABLE_LOG] =\n\t\t'CREATE TABLE IF NOT EXISTS `'.YOURLS_DB_TABLE_LOG.'` ('.\n\t\t'`click_id` int(11) NOT NULL auto_increment,'.\n\t\t'`click_time` datetime NOT NULL,'.\n\t\t'`shorturl` varchar(200) NOT NULL,'.\n\t\t'`referrer` varchar(200) NOT NULL,'.\n\t\t'`user_agent` varchar(255) NOT NULL,'.\n\t\t'`ip_address` varchar(41) NOT NULL,'.\n\t\t'`country_code` char(2) NOT NULL,'.\n\t\t'PRIMARY KEY (`click_id`),'.\n\t\t'KEY `shorturl` (`shorturl`)'.\n\t\t');';\n\n\tforeach( $queries as $query ) {\n\t\t$ydb->perform( $query ); // There's no result to be returned to check if table was created (except making another query to check table existence, which we'll avoid)\n\t}\n\n\techo \"<p>New tables created. Please wait...</p>\";\n\n}\n\n/**\n * Alter table structure, part 1 (change schema, drop index)\n *\n */\nfunction yourls_alter_url_table_to_14() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t$alters = array();\n\t$results = array();\n\t$alters[] = \"ALTER TABLE `$table` CHANGE `id` `keyword` VARCHAR( 200 ) NOT NULL\";\n\t$alters[] = \"ALTER TABLE `$table` CHANGE `url` `url` TEXT NOT NULL\";\n\t$alters[] = \"ALTER TABLE `$table` DROP PRIMARY KEY\";\n\n\tforeach ( $alters as $query ) {\n\t\t$ydb->perform( $query );\n\t}\n\n\techo \"<p>Structure of existing tables updated. Please wait...</p>\";\n}\n\n/**\n * Alter table structure, part 2 (recreate indexes after the table is up to date)\n *\n */\nfunction yourls_alter_url_table_to_14_part_two() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t$alters = array();\n\t$alters[] = \"ALTER TABLE `$table` ADD PRIMARY KEY ( `keyword` )\";\n\t$alters[] = \"ALTER TABLE `$table` ADD INDEX ( `ip` )\";\n\t$alters[] = \"ALTER TABLE `$table` ADD INDEX ( `timestamp` )\";\n\n\tforeach ( $alters as $query ) {\n\t\t$ydb->perform( $query );\n\t}\n\n\techo \"<p>New table index created</p>\";\n}\n\n/**\n * Convert each link from 1.3 (id) to 1.4 (keyword) structure\n *\n */\nfunction yourls_update_table_to_14() {\n\t$ydb = yourls_get_db();\n\t$table = YOURLS_DB_TABLE_URL;\n\n\t// Modify each link to reflect new structure\n\t$chunk = 45;\n\t$from = isset($_GET['from']) ? intval( $_GET['from'] ) : 0 ;\n\t$total = yourls_get_db_stats();\n\t$total = $total['total_links'];\n\n\t$sql = \"SELECT `keyword`,`url` FROM `$table` WHERE 1=1 ORDER BY `url` ASC LIMIT $from, $chunk ;\";\n\n\t$rows = $ydb->fetchObjects($sql);\n\n\t$count = 0;\n\t$queries = 0;\n\tforeach( $rows as $row ) {\n\t\t$keyword = $row->keyword;\n\t\t$url = $row->url;\n\t\t$newkeyword = yourls_int2string( $keyword );\n\t\tif( true === $ydb->perform(\"UPDATE `$table` SET `keyword` = '$newkeyword' WHERE `url` = '$url';\") ) {\n\t\t\t$queries++;\n\t\t} else {\n\t\t\techo \"<p>Huho... Could not update rown with url='$url', from keyword '$keyword' to keyword '$newkeyword'</p>\"; // Find what went wrong :/\n\t\t}\n\t\t$count++;\n\t}\n\n\t// All done for this chunk of queries, did it all go as expected?\n\t$success = true;\n\tif( $count != $queries ) {\n\t\t$success = false;\n\t\t$num = $count - $queries;\n\t\techo \"<p>$num error(s) occured while updating the URL table :(</p>\";\n\t}\n\n\tif ( $count == $chunk ) {\n\t\t// there are probably other rows to convert\n\t\t$from = $from + $chunk;\n\t\t$remain = $total - $from;\n\t\techo \"<p>Converted $chunk database rows ($remain remaining). Continuing... Please do not close this window until it's finished!</p>\";\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=2&oldver=1.3&newver=1.4&oldsql=100&newsql=200&from=$from\" ), $success );\n\t} else {\n\t\t// All done\n\t\techo '<p>All rows converted! Please wait...</p>';\n\t\tyourls_redirect_javascript( yourls_admin_url( \"upgrade.php?step=3&oldver=1.3&newver=1.4&oldsql=100&newsql=200\" ), $success );\n\t}\n\n}\n\n/**\n * Clean .htaccess as it existed before 1.4. Returns boolean\n *\n */\nfunction yourls_clean_htaccess_for_14() {\n\t$filename = YOURLS_ABSPATH.'/.htaccess';\n\n\t$result = false;\n\tif( is_writeable( $filename ) ) {\n\t\t$contents = implode( '', file( $filename ) );\n\t\t// remove \"ShortURL\" block\n\t\t$contents = preg_replace( '/# BEGIN ShortURL.*# END ShortURL/s', '', $contents );\n\t\t// comment out deprecated RewriteRule\n\t\t$find = 'RewriteRule .* - [E=REMOTE_USER:%{HTTP:Authorization},L]';\n\t\t$replace = \"# You can safely remove this 5 lines block -- it's no longer used in YOURLS\\n\".\n\t\t\t\t\"# $find\";\n\t\t$contents = str_replace( $find, $replace, $contents );\n\n\t\t// Write cleaned file\n\t\t$f = fopen( $filename, 'w' );\n\t\tfwrite( $f, $contents );\n\t\tfclose( $f );\n\n\t\t$result = true;\n\t}\n\n\treturn $result;\n}\n\n", "<?php\n/**\n * YOURLS version\n *\n * Must be one of the following :\n *    MAJOR.MINOR (eg 1.8)\n *    MAJOR.MINOR.PATCH (1.8.1)\n *    MAJOR.MINOR-SOMETHING (1.8-dev)\n *    MAJOR.MINOR.PATCH-SOMETHING (1.8.1-donotuse)\n *\n */\ndefine( 'YOURLS_VERSION', '1.8.3-dev' );\n\n/**\n * YOURLS DB version. Increments when changes are made to the DB schema, to trigger a DB update\n *\n * Must be a string of an integer.\n *\n */\ndefine( 'YOURLS_DB_VERSION', '506' );\n"], "filenames": ["admin/upgrade.php", "includes/functions-upgrade.php", "includes/version.php"], "buggy_code_start_loc": [31, 11, 3], "buggy_code_end_loc": [33, 11, 10], "fixing_code_start_loc": [31, 12, 4], "fixing_code_end_loc": [33, 25, 19], "type": "CWE-79", "message": "yourls is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3783", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-15T12:15:16.207", "lastModified": "2021-09-23T19:37:08.887", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "yourls is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "yourls es vulnerable a una Neutralizaci\u00f3n Inapropiada de la Entrada durante la Generaci\u00f3n de la P\u00e1gina Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.7, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yourls:yourls:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.8.2", "matchCriteriaId": "A713109D-9139-4C07-BB32-CCBCE113330B"}]}]}], "references": [{"url": "https://github.com/yourls/yourls/commit/94f6bab91182142c96ff11f481585b445449efd4", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b688e553-d0d9-4ddf-95a3-ff4b78004984", "source": "security@huntr.dev", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yourls/yourls/commit/94f6bab91182142c96ff11f481585b445449efd4"}}