{"buggy_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// Disable mysqli fatal error behaviour when using php8.1 or greater.\n// See https://php.watch/versions/8.1/mysqli-error-mode\nif (version_compare(phpversion(), '8.1', '>=')) {\n  if (function_exists('mysqli_report'))\n    mysqli_report(MYSQLI_REPORT_OFF);\n  else\n    die(\"mysqli_report function is not available.\"); // No point to continue as mysqli will not work.\n}\n\ndefine(\"APP_VERSION\", \"1.22.11.5782\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('form.DefaultCellRenderer');\nimport('form.Table');\nimport('form.TextField');\nimport('ttUserHelper');\nimport('ttGroupHelper');\nimport('ttWeekViewHelper');\nimport('ttClientHelper');\nimport('ttTimeHelper');\nimport('ttDate');\n\n// Access checks.\nif (!(ttAccessAllowed('track_own_time') || ttAccessAllowed('track_time'))) {\n  header('Location: access_denied.php');\n  exit();\n}\nif (!$user->isPluginEnabled('wv')) {\n  header('Location: feature_disabled.php');\n  exit();\n}\nif ($user->behalf_id && (!$user->can('track_time') || !$user->checkBehalfId())) {\n  header('Location: access_denied.php'); // Trying on behalf, but no right or wrong user.\n  exit();\n}\nif (!$user->behalf_id && !$user->can('track_own_time') && !$user->adjustBehalfId()) {\n  header('Location: access_denied.php'); // Trying as self, but no right for self, and noone to work on behalf.\n  exit();\n}\nif ($request->isPost()) {\n  $userChanged = (bool)$request->getParameter('user_changed'); // Reused in multiple places below.\n  if ($userChanged && !($user->can('track_time') && $user->isUserValid((int)$request->getParameter('user')))) {\n    header('Location: access_denied.php'); // User changed, but no right or wrong user id.\n    exit();\n  }\n}\n// If we are passed in a date, make sure it is in correct format.\n$date = $request->getParameter('date');\nif ($date && !ttValidDbDateFormatDate($date)) {\n  header('Location: access_denied.php');\n  exit();\n}\nif ($request->isPost()) {\n  // Validate that browser_today parameter is in correct format.\n  $browser_today = $request->getParameter('browser_today');\n  if ($browser_today && !ttValidDbDateFormatDate($browser_today)) {\n    header('Location: access_denied.php');\n    exit();\n  }\n}\n// End of access checks.\n\n// Determine user for whom we display this page.\nif ($request->isPost() && $userChanged) {\n  $user_id = (int)$request->getParameter('user');\n  $user->setOnBehalfUser($user_id);\n} else {\n  $user_id = $user->getUser();\n}\n\n$group_id = $user->getGroup();\n\n$showClient = $user->isPluginEnabled('cl');\n$showBillable = $user->isPluginEnabled('iv');\n$trackingMode = $user->getTrackingMode();\n$showProject = MODE_PROJECTS == $trackingMode || MODE_PROJECTS_AND_TASKS == $trackingMode;\n$showTask = MODE_PROJECTS_AND_TASKS == $trackingMode;\n$taskRequired = false;\nif ($showTask) $taskRequired = $user->getConfigOption('task_required');\n$showWeekNote = $user->isOptionEnabled('week_note');\n$showWeekNotes = $user->isOptionEnabled('week_notes');\n$showWeekends = $user->isOptionEnabled('weekends');\n$recordType = $user->getRecordType();\n$showStart = TYPE_START_FINISH == $recordType || TYPE_ALL == $recordType;\n$showFiles = $user->isPluginEnabled('at');\n$showRecordCustomFields = $user->isOptionEnabled('record_custom_fields');\n\n// Initialize and store date in session.\n$cl_date = $request->getParameter('date', @$_SESSION['date']);\n$selected_date = new ttDate($cl_date);\nif(!$cl_date)\n  $cl_date = $selected_date->toString();\n$_SESSION['date'] = $cl_date;\n\n// Determine selected week start and end dates.\n$weekStartDay = $user->getWeekStart();\n$t_arr = localtime($selected_date->getTimestamp());\n$t_arr[5] = $t_arr[5] + 1900;\nif ($t_arr[6] < $weekStartDay)\n  $startWeekBias = $weekStartDay - 7;\nelse\n  $startWeekBias = $weekStartDay;\n$startDate = new ttDate();\n$startDate->setFromUnixTimestamp(mktime(0,0,0,$t_arr[4]+1,$t_arr[3]-$t_arr[6]+$startWeekBias,$t_arr[5]));\n$endDate = new ttDate();\n$endDate->setFromUnixTimestamp(mktime(0,0,0,$t_arr[4]+1,$t_arr[3]-$t_arr[6]+6+$startWeekBias,$t_arr[5]));\n// The above is needed to set date range (timestring) in page title.\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n  $smarty->assign('custom_fields', $custom_fields);\n}\n\n// Use Monthly Quotas plugin, if applicable.\nif ($user->isPluginEnabled('mq')){\n  require_once('plugins/MonthlyQuota.class.php');\n  $quota = new MonthlyQuota();\n  $month_quota_minutes = $quota->getUserQuota($selected_date->year, $selected_date->month);\n  $month_total = ttTimeHelper::getTimeForMonth($selected_date);\n  $minutes_left = $month_quota_minutes - ttTimeHelper::toMinutes($month_total);\n\n  $smarty->assign('month_total', $month_total);\n  $smarty->assign('over_quota', $minutes_left < 0);\n  $smarty->assign('quota_remaining', ttTimeHelper::toAbsDuration($minutes_left));\n}\n\n// Initialize variables.\n$cl_billable = 1;\nif ($showBillable) {\n  if ($request->isPost()) {\n    $cl_billable = $request->getParameter('billable');\n    $_SESSION['billable'] = (int) $cl_billable;\n  } else\n    if (isset($_SESSION['billable']))\n      $cl_billable = $_SESSION['billable'];\n}\n$cl_client = $request->getParameter('client', ($request->isPost() ? null : @$_SESSION['client']));\n$_SESSION['client'] = $cl_client;\n$cl_project = $request->getParameter('project', ($request->isPost() ? null : @$_SESSION['project']));\n$_SESSION['project'] = $cl_project;\n$cl_task = $request->getParameter('task', ($request->isPost() ? null : @$_SESSION['task']));\n$_SESSION['task'] = $cl_task;\n$cl_note = $request->getParameter('comment', ($request->isPost() ? null : @$_SESSION['comment']));\n$_SESSION['comment'] = $cl_note;\n\n$timeCustomFields = array();\n// If we have time custom fields - collect input.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $control_name = 'time_field_'.$timeField['id'];\n    $cl_control_name = $request->getParameter($control_name, ($request->isPost() ? null : @$_SESSION[$control_name]));\n    $_SESSION[$control_name] = $cl_control_name;\n    $timeCustomFields[$timeField['id']] = array('field_id' => $timeField['id'],\n      'control_name' => $control_name,\n      'label' => $timeField['label'],\n      'type' => $timeField['type'],\n      'required' => $timeField['required'],\n      'value' => trim($cl_control_name));\n  }\n}\n\n// Get the data we need to display week view.\n// Get column headers, which are day numbers in month.\n$dayHeaders = ttWeekViewHelper::getDayHeadersForWeek($startDate->toString());\n$lockedDays = ttWeekViewHelper::getLockedDaysForWeek($startDate->toString());\n// If we are not showing weekends, reduce the above arrays to 5 days only.\n$weekend_start_idx = $weekend_end_idx = 0;\nif (!$showWeekends) {\n  if (defined('WEEKEND_START_DAY')) {\n    $weekend_start_idx = (7 + WEEKEND_START_DAY - $weekStartDay) % 7;\n    $weekend_end_idx = (7 + WEEKEND_START_DAY + 1 - $weekStartDay) % 7;\n  } else {\n    $weekend_start_idx = 6 - $weekStartDay;\n    $weekend_end_idx = (7 - $weekStartDay) % 7;\n  }\n  unset($dayHeaders[$weekend_start_idx]);\n  unset($dayHeaders[$weekend_end_idx]);\n  unset($lockedDays[$weekend_start_idx]);\n  unset($lockedDays[$weekend_end_idx]);\n}\n\n// Get already existing records.\n$records = ttWeekViewHelper::getRecordsForInterval($startDate->toString(), $endDate->toString(), $showFiles);\n// Build data array for the table. Format is described in ttWeekViewHelper::getDataForWeekView function.\nif ($records)\n  $dataArray = ttWeekViewHelper::getDataForWeekView($records, $dayHeaders);\nelse\n  $dataArray = ttWeekViewHelper::prePopulateFromPastWeeks($startDate->toString(), $dayHeaders);\n\n// Build day totals (total durations for each day in week).\n$dayTotals = ttWeekViewHelper::getDayTotals($dataArray, $dayHeaders);\n\n// Define rendering class for a label field to the left of durations.\nclass LabelCellRenderer extends DefaultCellRenderer {\n  function render(&$table, $value, $row, $column, $selected = false) {\n    global $user;\n    $showNotes = $user->isOptionEnabled('week_notes');\n\n    $this->setOptions(array('width'=>200,'valign'=>'middle'));\n\n    // Special handling for a new week entry (row 0, or 0 and 1 if we show notes).\n    if (0 == $row) {\n      $this->setOptions(array('style'=>'text-align: center; font-weight: bold; vertical-align: top;'));\n    } else if ($showNotes && (1 == $row)) {\n      $this->setOptions(array('style'=>'text-align: right; vertical-align: top;'));\n    } else if ($showNotes && (0 != $row % 2)) {\n      $this->setOptions(array('style'=>'text-align: right;'));\n    }\n    // Special handling for not billable entries.\n    $ignoreRow = $showNotes ? 1 : 0;\n    if ($row > $ignoreRow) {\n      $row_id = $table->getValueAtName($row,'row_id');\n      $billable = ttWeekViewHelper::parseFromWeekViewRow($row_id, 'bl');\n      if (!$billable) {\n        if (($showNotes && (0 == $row % 2)) || !$showNotes) {\n          $this->setOptions(array('style'=>'color: red;')); // TODO: style it properly in CSS.\n        }\n      }\n    }\n    $this->setValue(htmlspecialchars($value)); // This escapes HTML for output.\n    return $this->toString();\n  }\n}\n\n// Define rendering class for a single cell for a time or a comment entry in week view table.\nclass WeekViewCellRenderer extends DefaultCellRenderer {\n  function render(&$table, $value, $row, $column, $selected = false) {\n    global $user;\n    $showNotes = $user->isOptionEnabled('week_notes');\n\n    $field_name = $table->getValueAt($row,$column)['control_id']; // Our text field names (and ids) are like x_y (row_column).\n    $field = new TextField($field_name);\n    // Disable control if the date is locked.\n    global $lockedDays;\n    if ($lockedDays[$column])\n      $field->setEnabled(false);\n    $field->setFormName($table->getFormName());\n    $field->setStyle('width: 60px;'); // TODO: need to style everything properly, eventually.\n    // Provide visual separation for new entry row.\n    $rowToSeparate = $showNotes ? 1 : 0;\n    if ($rowToSeparate == $row) {\n      $field->setStyle('width: 60px; margin-bottom: 40px');\n    }\n    if ($showNotes) {\n      if (0 == $row % 2) {\n        $field->setValue($table->getValueAt($row,$column)['duration']); // Duration for even rows.\n      } else {\n        $field->setValue($table->getValueAt($row,$column)['note']);     // Comment for odd rows.\n        $field->setTitle($table->getValueAt($row,$column)['note']);     // Tooltip to help view the entire comment.\n      }\n    } else {\n      $field->setValue($table->getValueAt($row,$column)['duration']);\n      // $field->setTitle($table->getValueAt($row,$column)['note']); // Tooltip to see comment. TODO - value not available.\n    }\n    // Disable control when time entry mode is TYPE_START_FINISH and there is no value in control\n    // because we can't supply start and finish times in week view - there are no fields for them.\n    if (!$field->getValue() && TYPE_START_FINISH == $user->getRecordType()) {\n        $field->setEnabled(false);\n    }\n    $this->setValue($field->getHtml());\n    return $this->toString();\n  }\n}\n\n// Elements of weekTimeForm.\n$form = new Form('weekTimeForm');\n$largeScreenCalendarRowSpan = 1; // Number of rows calendar spans on large screens.\n\nif ($user->can('track_time')) {\n  $rank = $user->getMaxRankForGroup($group_id);\n  if ($user->can('track_own_time'))\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank,'include_self'=>true,'self_first'=>true);\n  else\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n  $user_list = $user->getUsers($options);\n  if (count($user_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'document.weekTimeForm.user_changed.value=1;document.weekTimeForm.submit();',\n      'name'=>'user',\n      'value'=>$user_id,\n      'data'=>$user_list,\n      'datakeys'=>array('id','name')));\n    $form->addInput(array('type'=>'hidden','name'=>'user_changed'));\n    $largeScreenCalendarRowSpan += 2;\n    $smarty->assign('user_dropdown', 1);\n  }\n}\n\n// Create week_durations table.\n$table = new Table('week_durations');\n// $table->setCssClass('week_view_table'); // Currently not used. Fix this.\n$table->setTableOptions(array('width'=>'100%','cellspacing'=>'1','cellpadding'=>'3','border'=>'0'));\n$table->setRowOptions(array('class'=>'tableHeaderCentered'));\n$table->setData($dataArray);\n// Add columns to table.\n$table->addColumn(new TableColumn('label', '', new LabelCellRenderer(), $dayTotals['label']));\n\n\n\nfor ($i = 0; $i < 7; $i++) {\n  if ($showWeekends)\n    $table->addColumn(new TableColumn($dayHeaders[$i], $dayHeaders[$i], new WeekViewCellRenderer(), $dayTotals[$dayHeaders[$i]]));\n  else {\n    if ($i <> $weekend_start_idx && $i <> $weekend_end_idx)\n      $table->addColumn(new TableColumn($dayHeaders[$i], $dayHeaders[$i], new WeekViewCellRenderer(), $dayTotals[$dayHeaders[$i]]));\n  }\n}\n$table->setInteractive(false);\n$form->addInputElement($table);\n\n// Dropdown for clients in MODE_TIME. Use all active clients.\nif (MODE_TIME == $trackingMode && $showClient) {\n  $active_clients = ttGroupHelper::getActiveClients(true);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillProjectDropdown(this.value);',\n    'name'=>'client',\n    'value'=>$cl_client,\n    'data'=>$active_clients,\n    'datakeys'=>array('id', 'name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n  // Note: in other modes the client list is filtered to relevant clients only. See below.\n}\n\n// Billable checkbox.\nif ($showBillable) {\n  $form->addInput(array('type'=>'checkbox','name'=>'billable','value'=>$cl_billable));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have time custom fields - add controls for them.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $field_name = 'time_field_'.$timeField['id'];\n    if ($timeField['type'] == CustomFields::TYPE_TEXT) {\n      $form->addInput(array('type'=>'text','name'=>$field_name,'value'=>$timeCustomFields[$timeField['id']]['value']));\n    } elseif ($timeField['type'] == CustomFields::TYPE_DROPDOWN) {\n      $form->addInput(array('type'=>'combobox','name'=>$field_name,\n      'data'=>CustomFields::getOptions($timeField['id']),\n      'value'=>$timeCustomFields[$timeField['id']]['value'],\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    }\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// If we show project dropdown, add controls for project and client.\n$project_list = $client_list = array();\nif ($showProject) {\n  // Dropdown for projects assigned to user.\n  $project_list = $user->getAssignedProjects();\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillTaskDropdown(this.value);',\n    'name'=>'project',\n    'value'=>$cl_project,\n    'data'=>$project_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n\n  // Dropdown for clients if the clients plugin is enabled.\n  if ($showClient) {\n    $active_clients = ttGroupHelper::getActiveClients(true);\n    // We need an array of assigned project ids to do some trimming.\n    foreach($project_list as $project)\n      $projects_assigned_to_user[] = $project['id'];\n\n    // Build a client list out of active clients. Use only clients that are relevant to user.\n    // Also trim their associated project list to only assigned projects (to user).\n    foreach($active_clients as $client) {\n      $projects_assigned_to_client = explode(',', $client['projects']);\n      if (is_array($projects_assigned_to_client) && is_array($projects_assigned_to_user))\n        $intersection = array_intersect($projects_assigned_to_client, $projects_assigned_to_user);\n      if ($intersection) {\n        $client['projects'] = implode(',', $intersection);\n        $client_list[] = $client;\n      }\n    }\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillProjectDropdown(this.value);',\n      'name'=>'client',\n      'value'=>$cl_client,\n      'data'=>$client_list,\n      'datakeys'=>array('id', 'name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Task dropdown.\n$task_list = array();\nif ($showTask) {\n  $task_list = ttGroupHelper::getActiveTasks();\n  $form->addInput(array('type'=>'combobox',\n    'name'=>'task',\n    'value'=>$cl_task,\n    'data'=>$task_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Week note control.\nif ($showWeekNote) {\n  $form->addInput(array('type'=>'textarea','name'=>'comment','value'=>$cl_note));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Calendar.\n$form->addInput(array('type'=>'calendar','name'=>'date','value'=>$cl_date));\n\n// A hidden control for today's date from user's browser.\n$form->addInput(array('type'=>'hidden','name'=>'browser_today','value'=>'get_date()')); // User current date, which gets filled in on btn_submit click.\n\n// Submit button.\n$form->addInput(array('type'=>'submit','name'=>'btn_submit','onclick'=>'browser_today.value=get_date()','value'=>$i18n->get('button.submit')));\n\n// Submit.\nif ($request->isPost()) {\n  if ($request->getParameter('btn_submit')) {\n    // Validate user input for row 0.\n    // Determine if a new entry was posted.\n    $newEntryPosted = false;\n    foreach($dayHeaders as $dayHeader) {\n      $control_id = '0_'.$dayHeader;\n      if ($request->getParameter($control_id)) {\n        $newEntryPosted = true;\n        break;\n      }\n    }\n    if ($newEntryPosted) {\n      if ($showClient && $user->isOptionEnabled('client_required') && !$cl_client)\n        $err->add($i18n->get('error.client'));\n      // Validate input in time custom fields.\n      if (isset($custom_fields) && $custom_fields->timeFields) {\n        foreach ($timeCustomFields as $timeField) {\n          // Validation is the same for text and dropdown fields.\n          if (!ttValidString($timeField['value'], !$timeField['required'])) $err->add($i18n->get('error.field'), htmlspecialchars($timeField['label']));\n        }\n      }\n      if ($showProject) {\n        if (!$cl_project) $err->add($i18n->get('error.project'));\n      }\n      if ($showTask && $taskRequired) {\n        if (!$cl_task) $err->add($i18n->get('error.task'));\n      }\n    }\n    // Finished validating user input for row 0.\n\n    // Process the table of values.\n    if ($err->no()) {\n\n      // Obtain values. Iterate through posted parameters one by one,\n      // see if value changed, apply one change at a time until we see an error.\n      $result = true;\n      $rowNumber = 0;\n      // Iterate through existing rows.\n      foreach ($dataArray as $row) {\n        // Iterate through days.\n        foreach ($dayHeaders as $key => $dayHeader) {\n          // Do not process locked days.\n          if ($lockedDays[$key]) continue;\n          // Make control id for the cell.\n          $control_id = $rowNumber.'_'.$dayHeader;\n\n          // Handle durations and comments in separate blocks of code.\n          if (!$showWeekNotes || (0 == $rowNumber % 2)) {\n            // Handle durations row here.\n\n            // Obtain existing and posted durations.\n            $postedDuration = $request->getParameter($control_id);\n            $existingDuration = $dataArray[$rowNumber][$dayHeader]['duration'];\n            // If posted value is not null, check and normalize it.\n            if ($postedDuration) {\n              if (false === ttTimeHelper::postedDurationToMinutes($postedDuration)) {\n                $err->add($i18n->get('error.field'), $i18n->get('label.duration'));\n                $result = false; break; // Break out. Stop any further processing.\n              } else {\n                $minutes = ttTimeHelper::postedDurationToMinutes($postedDuration);\n                $postedDuration = ttTimeHelper::minutesToDuration($minutes);\n              }\n            }\n            // Do not process if value has not changed.\n            if ($postedDuration == $existingDuration)\n              continue;\n            // Posted value is different.\n            if ($existingDuration == null) {\n              // Skip inserting 0 duration values.\n              if (0 == ttTimeHelper::toMinutes($postedDuration))\n                continue;\n              // Insert a new record.\n              $fields = array();\n              $fields['row_id'] = $dataArray[$rowNumber]['row_id'];\n              if (!$fields['row_id']) {\n                // Special handling for row 0, a new entry. Need to construct new row_id.\n                $record = array();\n                $record['client_id'] = $cl_client;\n                $record['billable'] = $cl_billable ? '1' : '0';\n                $record['project_id'] = $cl_project;\n                $record['task_id'] = $cl_task;\n                if (isset($custom_fields) && $custom_fields->timeFields) {\n                  foreach ($custom_fields->timeFields as $timeField) {\n                    $field_name = 'time_field_'.$timeField['id'];\n                    if ($timeField['type'] == CustomFields::TYPE_TEXT)\n                      $record[$field_name] = $timeCustomFields[$timeField['id']]['value'];\n                    else if ($timeField['type'] == CustomFields::TYPE_DROPDOWN)\n                      $record[$field_name.'_option_id'] = $timeCustomFields[$timeField['id']]['value'];\n                  }\n                }\n                $fields['row_id'] = ttWeekViewHelper::makeRowIdentifier($record).'_0';\n                // Note: no need to check for a possible conflict with an already existing row\n                // because we are doing an insert that does not affect already existing data.\n\n                if ($showWeekNote) {\n                  $fields['note'] = $request->getParameter('comment');\n                }\n              }\n              $fields['day_header'] = $dayHeader;\n              $fields['start_date'] = $startDate->toString(); // To be able to determine date for the entry using $dayHeader.\n              $fields['duration'] = $postedDuration;\n              $fields['browser_today'] = $request->getParameter('browser_today', null);\n              if ($showWeekNotes) {\n                // Take note value from the control below duration.\n                $noteRowNumber = $rowNumber + 1;\n                $note_control_id =  $noteRowNumber.'_'.$dayHeader;\n                if ($request->getParameter($note_control_id)) {\n                  $fields['note'] = $request->getParameter($note_control_id); // This overwrites week note.\n                }\n              }\n              $result = ttWeekViewHelper::insertDurationFromWeekView($fields, $custom_fields, $err);\n            } elseif ($postedDuration == null || 0 == ttTimeHelper::toMinutes($postedDuration)) {\n              // Delete an already existing record here.\n              $result = ttTimeHelper::delete($dataArray[$rowNumber][$dayHeader]['tt_log_id']);\n            } else {\n              $fields = array();\n              $fields['tt_log_id'] = $dataArray[$rowNumber][$dayHeader]['tt_log_id'];\n              $fields['duration'] = $postedDuration;\n              $result = ttWeekViewHelper::modifyDurationFromWeekView($fields, $err);\n            }\n            if (!$result) break; // Break out of the loop in case of first error.\n\n          } else if ($showWeekNotes) {\n            // Handle commments row here.\n\n            // Obtain existing and posted comments.\n            $postedComment = $request->getParameter($control_id);\n            $existingComment = $dataArray[$rowNumber][$dayHeader]['note'];\n            // If posted value is not null, check it.\n            if ($postedComment && !ttValidString($postedComment, true)) {\n              $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n              $result = false; break; // Break out. Stop any further processing.\n            }\n            // Do not process if value has not changed.\n            if ($postedComment == $existingComment)\n              continue;\n\n            // Posted value is different.\n            // TODO: handle new entries separately in the durations block above.\n\n            // Here, only update the comment on an already existing record.\n            $fields = array();\n            $fields['tt_log_id'] = $dataArray[$rowNumber][$dayHeader]['tt_log_id'];\n            if ($fields['tt_log_id']) {\n              $fields['comment'] = $postedComment;\n              $result = ttWeekViewHelper::modifyCommentFromWeekView($fields);\n            }\n            if (!$result) break; // Break out of the loop on first error.\n          }\n        }\n        if (!$result) break; // Break out of the loop on first error.\n        $rowNumber++;\n      }\n      if ($result) {\n        header('Location: week.php'); // Normal exit.\n        exit();\n      }\n    }\n  }\n} // isPost\n\n$week_total = ttTimeHelper::getTimeForWeek($selected_date);\n\n$smarty->assign('large_screen_calendar_row_span', $largeScreenCalendarRowSpan);\n$smarty->assign('selected_date', $selected_date);\n$smarty->assign('week_total', $week_total);\n$smarty->assign('client_list', $client_list);\n$smarty->assign('project_list', $project_list);\n$smarty->assign('task_list', $task_list);\n$smarty->assign('forms', array($form->getName()=>$form->toArray()));\n$smarty->assign('onload', 'onLoad=\"fillDropdowns()\"');\n$smarty->assign('timestring', $startDate->toString($user->date_format).' - '.$endDate->toString($user->date_format));\n$smarty->assign('time_records', $records);\n$smarty->assign('show_record_custom_fields', $showRecordCustomFields);\n$smarty->assign('show_navigation', !$user->isOptionEnabled('week_menu'));\n$smarty->assign('show_client', $showClient);\n$smarty->assign('show_billable', $showBillable);\n$smarty->assign('show_project', $showProject);\n$smarty->assign('show_task', $showTask);\n$smarty->assign('task_required', $taskRequired);\n$smarty->assign('show_week_note', $showWeekNote);\n$smarty->assign('show_week_list', $user->isOptionEnabled('week_list'));\n$smarty->assign('show_start', $showStart);\n$smarty->assign('show_files', $showFiles);\n$smarty->assign('title', $i18n->get('menu.week'));\n$smarty->assign('content_page_name', 'week.tpl');\n$smarty->display('index.tpl');\n"], "fixing_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// Disable mysqli fatal error behaviour when using php8.1 or greater.\n// See https://php.watch/versions/8.1/mysqli-error-mode\nif (version_compare(phpversion(), '8.1', '>=')) {\n  if (function_exists('mysqli_report'))\n    mysqli_report(MYSQLI_REPORT_OFF);\n  else\n    die(\"mysqli_report function is not available.\"); // No point to continue as mysqli will not work.\n}\n\ndefine(\"APP_VERSION\", \"1.22.12.5783\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('form.DefaultCellRenderer');\nimport('form.Table');\nimport('form.TextField');\nimport('ttUserHelper');\nimport('ttGroupHelper');\nimport('ttWeekViewHelper');\nimport('ttClientHelper');\nimport('ttTimeHelper');\nimport('ttDate');\n\n// Access checks.\nif (!(ttAccessAllowed('track_own_time') || ttAccessAllowed('track_time'))) {\n  header('Location: access_denied.php');\n  exit();\n}\nif (!$user->isPluginEnabled('wv')) {\n  header('Location: feature_disabled.php');\n  exit();\n}\nif ($user->behalf_id && (!$user->can('track_time') || !$user->checkBehalfId())) {\n  header('Location: access_denied.php'); // Trying on behalf, but no right or wrong user.\n  exit();\n}\nif (!$user->behalf_id && !$user->can('track_own_time') && !$user->adjustBehalfId()) {\n  header('Location: access_denied.php'); // Trying as self, but no right for self, and noone to work on behalf.\n  exit();\n}\nif ($request->isPost()) {\n  $userChanged = (bool)$request->getParameter('user_changed'); // Reused in multiple places below.\n  if ($userChanged && !($user->can('track_time') && $user->isUserValid((int)$request->getParameter('user')))) {\n    header('Location: access_denied.php'); // User changed, but no right or wrong user id.\n    exit();\n  }\n}\n// If we are passed in a date, make sure it is in correct format.\n$date = $request->getParameter('date');\nif ($date && !ttValidDbDateFormatDate($date)) {\n  header('Location: access_denied.php');\n  exit();\n}\nif ($request->isPost()) {\n  // Validate that browser_today parameter is in correct format.\n  $browser_today = $request->getParameter('browser_today');\n  if ($browser_today && !ttValidDbDateFormatDate($browser_today)) {\n    header('Location: access_denied.php');\n    exit();\n  }\n}\n// End of access checks.\n\n// Determine user for whom we display this page.\nif ($request->isPost() && $userChanged) {\n  $user_id = (int)$request->getParameter('user');\n  $user->setOnBehalfUser($user_id);\n} else {\n  $user_id = $user->getUser();\n}\n\n$group_id = $user->getGroup();\n\n$showClient = $user->isPluginEnabled('cl');\n$showBillable = $user->isPluginEnabled('iv');\n$trackingMode = $user->getTrackingMode();\n$showProject = MODE_PROJECTS == $trackingMode || MODE_PROJECTS_AND_TASKS == $trackingMode;\n$showTask = MODE_PROJECTS_AND_TASKS == $trackingMode;\n$taskRequired = false;\nif ($showTask) $taskRequired = $user->getConfigOption('task_required');\n$showWeekNote = $user->isOptionEnabled('week_note');\n$showWeekNotes = $user->isOptionEnabled('week_notes');\n$showWeekends = $user->isOptionEnabled('weekends');\n$recordType = $user->getRecordType();\n$showStart = TYPE_START_FINISH == $recordType || TYPE_ALL == $recordType;\n$showFiles = $user->isPluginEnabled('at');\n$showRecordCustomFields = $user->isOptionEnabled('record_custom_fields');\n\n// Initialize and store date in session.\n$cl_date = $request->getParameter('date', @$_SESSION['date']);\n$selected_date = new ttDate($cl_date);\nif(!$cl_date)\n  $cl_date = $selected_date->toString();\n$_SESSION['date'] = $cl_date;\n\n// Determine selected week start and end dates.\n$weekStartDay = $user->getWeekStart();\n$t_arr = localtime($selected_date->getTimestamp());\n$t_arr[5] = $t_arr[5] + 1900;\nif ($t_arr[6] < $weekStartDay)\n  $startWeekBias = $weekStartDay - 7;\nelse\n  $startWeekBias = $weekStartDay;\n$startDate = new ttDate();\n$startDate->setFromUnixTimestamp(mktime(0,0,0,$t_arr[4]+1,$t_arr[3]-$t_arr[6]+$startWeekBias,$t_arr[5]));\n$endDate = new ttDate();\n$endDate->setFromUnixTimestamp(mktime(0,0,0,$t_arr[4]+1,$t_arr[3]-$t_arr[6]+6+$startWeekBias,$t_arr[5]));\n// The above is needed to set date range (timestring) in page title.\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n  $smarty->assign('custom_fields', $custom_fields);\n}\n\n// Use Monthly Quotas plugin, if applicable.\nif ($user->isPluginEnabled('mq')){\n  require_once('plugins/MonthlyQuota.class.php');\n  $quota = new MonthlyQuota();\n  $month_quota_minutes = $quota->getUserQuota($selected_date->year, $selected_date->month);\n  $month_total = ttTimeHelper::getTimeForMonth($selected_date);\n  $minutes_left = $month_quota_minutes - ttTimeHelper::toMinutes($month_total);\n\n  $smarty->assign('month_total', $month_total);\n  $smarty->assign('over_quota', $minutes_left < 0);\n  $smarty->assign('quota_remaining', ttTimeHelper::toAbsDuration($minutes_left));\n}\n\n// Initialize variables.\n$cl_billable = 1;\nif ($showBillable) {\n  if ($request->isPost()) {\n    $cl_billable = $request->getParameter('billable');\n    $_SESSION['billable'] = (int) $cl_billable;\n  } else\n    if (isset($_SESSION['billable']))\n      $cl_billable = $_SESSION['billable'];\n}\n$cl_client = $request->getParameter('client', ($request->isPost() ? null : @$_SESSION['client']));\n$_SESSION['client'] = $cl_client;\n$cl_project = $request->getParameter('project', ($request->isPost() ? null : @$_SESSION['project']));\n$_SESSION['project'] = $cl_project;\n$cl_task = $request->getParameter('task', ($request->isPost() ? null : @$_SESSION['task']));\n$_SESSION['task'] = $cl_task;\n$cl_note = $request->getParameter('comment', ($request->isPost() ? null : @$_SESSION['comment']));\n$_SESSION['comment'] = $cl_note;\n\n$timeCustomFields = array();\n// If we have time custom fields - collect input.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $control_name = 'time_field_'.$timeField['id'];\n    $cl_control_name = $request->getParameter($control_name, ($request->isPost() ? null : @$_SESSION[$control_name]));\n    $_SESSION[$control_name] = $cl_control_name;\n    $timeCustomFields[$timeField['id']] = array('field_id' => $timeField['id'],\n      'control_name' => $control_name,\n      'label' => $timeField['label'],\n      'type' => $timeField['type'],\n      'required' => $timeField['required'],\n      'value' => trim($cl_control_name));\n  }\n}\n\n// Get the data we need to display week view.\n// Get column headers, which are day numbers in month.\n$dayHeaders = ttWeekViewHelper::getDayHeadersForWeek($startDate->toString());\n$lockedDays = ttWeekViewHelper::getLockedDaysForWeek($startDate->toString());\n// If we are not showing weekends, reduce the above arrays to 5 days only.\n$weekend_start_idx = $weekend_end_idx = 0;\nif (!$showWeekends) {\n  if (defined('WEEKEND_START_DAY')) {\n    $weekend_start_idx = (7 + WEEKEND_START_DAY - $weekStartDay) % 7;\n    $weekend_end_idx = (7 + WEEKEND_START_DAY + 1 - $weekStartDay) % 7;\n  } else {\n    $weekend_start_idx = 6 - $weekStartDay;\n    $weekend_end_idx = (7 - $weekStartDay) % 7;\n  }\n  unset($dayHeaders[$weekend_start_idx]);\n  unset($dayHeaders[$weekend_end_idx]);\n  unset($lockedDays[$weekend_start_idx]);\n  unset($lockedDays[$weekend_end_idx]);\n}\n\n// Get already existing records.\n$records = ttWeekViewHelper::getRecordsForInterval($startDate->toString(), $endDate->toString(), $showFiles);\n// Build data array for the table. Format is described in ttWeekViewHelper::getDataForWeekView function.\nif ($records)\n  $dataArray = ttWeekViewHelper::getDataForWeekView($records, $dayHeaders);\nelse\n  $dataArray = ttWeekViewHelper::prePopulateFromPastWeeks($startDate->toString(), $dayHeaders);\n\n// Build day totals (total durations for each day in week).\n$dayTotals = ttWeekViewHelper::getDayTotals($dataArray, $dayHeaders);\n\n// Define rendering class for a label field to the left of durations.\nclass LabelCellRenderer extends DefaultCellRenderer {\n  function render(&$table, $value, $row, $column, $selected = false) {\n    global $user;\n    $showNotes = $user->isOptionEnabled('week_notes');\n\n    $this->setOptions(array('width'=>200,'valign'=>'middle'));\n\n    // Special handling for a new week entry (row 0, or 0 and 1 if we show notes).\n    if (0 == $row) {\n      $this->setOptions(array('style'=>'text-align: center; font-weight: bold; vertical-align: top;'));\n    } else if ($showNotes && (1 == $row)) {\n      $this->setOptions(array('style'=>'text-align: right; vertical-align: top;'));\n    } else if ($showNotes && (0 != $row % 2)) {\n      $this->setOptions(array('style'=>'text-align: right;'));\n    }\n    // Special handling for not billable entries.\n    $ignoreRow = $showNotes ? 1 : 0;\n    if ($row > $ignoreRow) {\n      $row_id = $table->getValueAtName($row,'row_id');\n      $billable = ttWeekViewHelper::parseFromWeekViewRow($row_id, 'bl');\n      if (!$billable) {\n        if (($showNotes && (0 == $row % 2)) || !$showNotes) {\n          $this->setOptions(array('style'=>'color: red;')); // TODO: style it properly in CSS.\n        }\n      }\n    }\n    $this->setValue(htmlspecialchars($value)); // This escapes HTML for output.\n    return $this->toString();\n  }\n}\n\n// Define rendering class for a single cell for a time or a comment entry in week view table.\nclass WeekViewCellRenderer extends DefaultCellRenderer {\n  function render(&$table, $value, $row, $column, $selected = false) {\n    global $user;\n    $showNotes = $user->isOptionEnabled('week_notes');\n\n    $field_name = $table->getValueAt($row,$column)['control_id']; // Our text field names (and ids) are like x_y (row_column).\n    $field = new TextField($field_name);\n    // Disable control if the date is locked.\n    global $lockedDays;\n    if ($lockedDays[$column])\n      $field->setEnabled(false);\n    $field->setFormName($table->getFormName());\n    $field->setStyle('width: 60px;'); // TODO: need to style everything properly, eventually.\n    // Provide visual separation for new entry row.\n    $rowToSeparate = $showNotes ? 1 : 0;\n    if ($rowToSeparate == $row) {\n      $field->setStyle('width: 60px; margin-bottom: 40px');\n    }\n    if ($showNotes) {\n      if (0 == $row % 2) {\n        $field->setValue($table->getValueAt($row,$column)['duration']); // Duration for even rows.\n      } else {\n        $field->setValue($table->getValueAt($row,$column)['note']);     // Comment for odd rows.\n        $field->setTitle(htmlspecialchars($table->getValueAt($row,$column)['note'])); // Tooltip to help view the entire comment.\n      }\n    } else {\n      $field->setValue($table->getValueAt($row,$column)['duration']);\n      // $field->setTitle($table->getValueAt($row,$column)['note']); // Tooltip to see comment. TODO - value not available.\n    }\n    // Disable control when time entry mode is TYPE_START_FINISH and there is no value in control\n    // because we can't supply start and finish times in week view - there are no fields for them.\n    if (!$field->getValue() && TYPE_START_FINISH == $user->getRecordType()) {\n        $field->setEnabled(false);\n    }\n    $this->setValue($field->getHtml());\n    return $this->toString();\n  }\n}\n\n// Elements of weekTimeForm.\n$form = new Form('weekTimeForm');\n$largeScreenCalendarRowSpan = 1; // Number of rows calendar spans on large screens.\n\nif ($user->can('track_time')) {\n  $rank = $user->getMaxRankForGroup($group_id);\n  if ($user->can('track_own_time'))\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank,'include_self'=>true,'self_first'=>true);\n  else\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n  $user_list = $user->getUsers($options);\n  if (count($user_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'document.weekTimeForm.user_changed.value=1;document.weekTimeForm.submit();',\n      'name'=>'user',\n      'value'=>$user_id,\n      'data'=>$user_list,\n      'datakeys'=>array('id','name')));\n    $form->addInput(array('type'=>'hidden','name'=>'user_changed'));\n    $largeScreenCalendarRowSpan += 2;\n    $smarty->assign('user_dropdown', 1);\n  }\n}\n\n// Create week_durations table.\n$table = new Table('week_durations');\n// $table->setCssClass('week_view_table'); // Currently not used. Fix this.\n$table->setTableOptions(array('width'=>'100%','cellspacing'=>'1','cellpadding'=>'3','border'=>'0'));\n$table->setRowOptions(array('class'=>'tableHeaderCentered'));\n$table->setData($dataArray);\n// Add columns to table.\n$table->addColumn(new TableColumn('label', '', new LabelCellRenderer(), $dayTotals['label']));\n\n\n\nfor ($i = 0; $i < 7; $i++) {\n  if ($showWeekends)\n    $table->addColumn(new TableColumn($dayHeaders[$i], $dayHeaders[$i], new WeekViewCellRenderer(), $dayTotals[$dayHeaders[$i]]));\n  else {\n    if ($i <> $weekend_start_idx && $i <> $weekend_end_idx)\n      $table->addColumn(new TableColumn($dayHeaders[$i], $dayHeaders[$i], new WeekViewCellRenderer(), $dayTotals[$dayHeaders[$i]]));\n  }\n}\n$table->setInteractive(false);\n$form->addInputElement($table);\n\n// Dropdown for clients in MODE_TIME. Use all active clients.\nif (MODE_TIME == $trackingMode && $showClient) {\n  $active_clients = ttGroupHelper::getActiveClients(true);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillProjectDropdown(this.value);',\n    'name'=>'client',\n    'value'=>$cl_client,\n    'data'=>$active_clients,\n    'datakeys'=>array('id', 'name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n  // Note: in other modes the client list is filtered to relevant clients only. See below.\n}\n\n// Billable checkbox.\nif ($showBillable) {\n  $form->addInput(array('type'=>'checkbox','name'=>'billable','value'=>$cl_billable));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have time custom fields - add controls for them.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $field_name = 'time_field_'.$timeField['id'];\n    if ($timeField['type'] == CustomFields::TYPE_TEXT) {\n      $form->addInput(array('type'=>'text','name'=>$field_name,'value'=>$timeCustomFields[$timeField['id']]['value']));\n    } elseif ($timeField['type'] == CustomFields::TYPE_DROPDOWN) {\n      $form->addInput(array('type'=>'combobox','name'=>$field_name,\n      'data'=>CustomFields::getOptions($timeField['id']),\n      'value'=>$timeCustomFields[$timeField['id']]['value'],\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    }\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// If we show project dropdown, add controls for project and client.\n$project_list = $client_list = array();\nif ($showProject) {\n  // Dropdown for projects assigned to user.\n  $project_list = $user->getAssignedProjects();\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillTaskDropdown(this.value);',\n    'name'=>'project',\n    'value'=>$cl_project,\n    'data'=>$project_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n\n  // Dropdown for clients if the clients plugin is enabled.\n  if ($showClient) {\n    $active_clients = ttGroupHelper::getActiveClients(true);\n    // We need an array of assigned project ids to do some trimming.\n    foreach($project_list as $project)\n      $projects_assigned_to_user[] = $project['id'];\n\n    // Build a client list out of active clients. Use only clients that are relevant to user.\n    // Also trim their associated project list to only assigned projects (to user).\n    foreach($active_clients as $client) {\n      $projects_assigned_to_client = explode(',', $client['projects']);\n      if (is_array($projects_assigned_to_client) && is_array($projects_assigned_to_user))\n        $intersection = array_intersect($projects_assigned_to_client, $projects_assigned_to_user);\n      if ($intersection) {\n        $client['projects'] = implode(',', $intersection);\n        $client_list[] = $client;\n      }\n    }\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillProjectDropdown(this.value);',\n      'name'=>'client',\n      'value'=>$cl_client,\n      'data'=>$client_list,\n      'datakeys'=>array('id', 'name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Task dropdown.\n$task_list = array();\nif ($showTask) {\n  $task_list = ttGroupHelper::getActiveTasks();\n  $form->addInput(array('type'=>'combobox',\n    'name'=>'task',\n    'value'=>$cl_task,\n    'data'=>$task_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Week note control.\nif ($showWeekNote) {\n  $form->addInput(array('type'=>'textarea','name'=>'comment','value'=>$cl_note));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Calendar.\n$form->addInput(array('type'=>'calendar','name'=>'date','value'=>$cl_date));\n\n// A hidden control for today's date from user's browser.\n$form->addInput(array('type'=>'hidden','name'=>'browser_today','value'=>'get_date()')); // User current date, which gets filled in on btn_submit click.\n\n// Submit button.\n$form->addInput(array('type'=>'submit','name'=>'btn_submit','onclick'=>'browser_today.value=get_date()','value'=>$i18n->get('button.submit')));\n\n// Submit.\nif ($request->isPost()) {\n  if ($request->getParameter('btn_submit')) {\n    // Validate user input for row 0.\n    // Determine if a new entry was posted.\n    $newEntryPosted = false;\n    foreach($dayHeaders as $dayHeader) {\n      $control_id = '0_'.$dayHeader;\n      if ($request->getParameter($control_id)) {\n        $newEntryPosted = true;\n        break;\n      }\n    }\n    if ($newEntryPosted) {\n      if ($showClient && $user->isOptionEnabled('client_required') && !$cl_client)\n        $err->add($i18n->get('error.client'));\n      // Validate input in time custom fields.\n      if (isset($custom_fields) && $custom_fields->timeFields) {\n        foreach ($timeCustomFields as $timeField) {\n          // Validation is the same for text and dropdown fields.\n          if (!ttValidString($timeField['value'], !$timeField['required'])) $err->add($i18n->get('error.field'), htmlspecialchars($timeField['label']));\n        }\n      }\n      if ($showProject) {\n        if (!$cl_project) $err->add($i18n->get('error.project'));\n      }\n      if ($showTask && $taskRequired) {\n        if (!$cl_task) $err->add($i18n->get('error.task'));\n      }\n    }\n    // Finished validating user input for row 0.\n\n    // Process the table of values.\n    if ($err->no()) {\n\n      // Obtain values. Iterate through posted parameters one by one,\n      // see if value changed, apply one change at a time until we see an error.\n      $result = true;\n      $rowNumber = 0;\n      // Iterate through existing rows.\n      foreach ($dataArray as $row) {\n        // Iterate through days.\n        foreach ($dayHeaders as $key => $dayHeader) {\n          // Do not process locked days.\n          if ($lockedDays[$key]) continue;\n          // Make control id for the cell.\n          $control_id = $rowNumber.'_'.$dayHeader;\n\n          // Handle durations and comments in separate blocks of code.\n          if (!$showWeekNotes || (0 == $rowNumber % 2)) {\n            // Handle durations row here.\n\n            // Obtain existing and posted durations.\n            $postedDuration = $request->getParameter($control_id);\n            $existingDuration = $dataArray[$rowNumber][$dayHeader]['duration'];\n            // If posted value is not null, check and normalize it.\n            if ($postedDuration) {\n              if (false === ttTimeHelper::postedDurationToMinutes($postedDuration)) {\n                $err->add($i18n->get('error.field'), $i18n->get('label.duration'));\n                $result = false; break; // Break out. Stop any further processing.\n              } else {\n                $minutes = ttTimeHelper::postedDurationToMinutes($postedDuration);\n                $postedDuration = ttTimeHelper::minutesToDuration($minutes);\n              }\n            }\n            // Do not process if value has not changed.\n            if ($postedDuration == $existingDuration)\n              continue;\n            // Posted value is different.\n            if ($existingDuration == null) {\n              // Skip inserting 0 duration values.\n              if (0 == ttTimeHelper::toMinutes($postedDuration))\n                continue;\n              // Insert a new record.\n              $fields = array();\n              $fields['row_id'] = $dataArray[$rowNumber]['row_id'];\n              if (!$fields['row_id']) {\n                // Special handling for row 0, a new entry. Need to construct new row_id.\n                $record = array();\n                $record['client_id'] = $cl_client;\n                $record['billable'] = $cl_billable ? '1' : '0';\n                $record['project_id'] = $cl_project;\n                $record['task_id'] = $cl_task;\n                if (isset($custom_fields) && $custom_fields->timeFields) {\n                  foreach ($custom_fields->timeFields as $timeField) {\n                    $field_name = 'time_field_'.$timeField['id'];\n                    if ($timeField['type'] == CustomFields::TYPE_TEXT)\n                      $record[$field_name] = $timeCustomFields[$timeField['id']]['value'];\n                    else if ($timeField['type'] == CustomFields::TYPE_DROPDOWN)\n                      $record[$field_name.'_option_id'] = $timeCustomFields[$timeField['id']]['value'];\n                  }\n                }\n                $fields['row_id'] = ttWeekViewHelper::makeRowIdentifier($record).'_0';\n                // Note: no need to check for a possible conflict with an already existing row\n                // because we are doing an insert that does not affect already existing data.\n\n                if ($showWeekNote) {\n                  $fields['note'] = $request->getParameter('comment');\n                }\n              }\n              $fields['day_header'] = $dayHeader;\n              $fields['start_date'] = $startDate->toString(); // To be able to determine date for the entry using $dayHeader.\n              $fields['duration'] = $postedDuration;\n              $fields['browser_today'] = $request->getParameter('browser_today', null);\n              if ($showWeekNotes) {\n                // Take note value from the control below duration.\n                $noteRowNumber = $rowNumber + 1;\n                $note_control_id =  $noteRowNumber.'_'.$dayHeader;\n                if ($request->getParameter($note_control_id)) {\n                  $fields['note'] = $request->getParameter($note_control_id); // This overwrites week note.\n                }\n              }\n              $result = ttWeekViewHelper::insertDurationFromWeekView($fields, $custom_fields, $err);\n            } elseif ($postedDuration == null || 0 == ttTimeHelper::toMinutes($postedDuration)) {\n              // Delete an already existing record here.\n              $result = ttTimeHelper::delete($dataArray[$rowNumber][$dayHeader]['tt_log_id']);\n            } else {\n              $fields = array();\n              $fields['tt_log_id'] = $dataArray[$rowNumber][$dayHeader]['tt_log_id'];\n              $fields['duration'] = $postedDuration;\n              $result = ttWeekViewHelper::modifyDurationFromWeekView($fields, $err);\n            }\n            if (!$result) break; // Break out of the loop in case of first error.\n\n          } else if ($showWeekNotes) {\n            // Handle commments row here.\n\n            // Obtain existing and posted comments.\n            $postedComment = $request->getParameter($control_id);\n            $existingComment = $dataArray[$rowNumber][$dayHeader]['note'];\n            // If posted value is not null, check it.\n            if ($postedComment && !ttValidString($postedComment, true)) {\n              $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n              $result = false; break; // Break out. Stop any further processing.\n            }\n            // Do not process if value has not changed.\n            if ($postedComment == $existingComment)\n              continue;\n\n            // Posted value is different.\n            // TODO: handle new entries separately in the durations block above.\n\n            // Here, only update the comment on an already existing record.\n            $fields = array();\n            $fields['tt_log_id'] = $dataArray[$rowNumber][$dayHeader]['tt_log_id'];\n            if ($fields['tt_log_id']) {\n              $fields['comment'] = $postedComment;\n              $result = ttWeekViewHelper::modifyCommentFromWeekView($fields);\n            }\n            if (!$result) break; // Break out of the loop on first error.\n          }\n        }\n        if (!$result) break; // Break out of the loop on first error.\n        $rowNumber++;\n      }\n      if ($result) {\n        header('Location: week.php'); // Normal exit.\n        exit();\n      }\n    }\n  }\n} // isPost\n\n$week_total = ttTimeHelper::getTimeForWeek($selected_date);\n\n$smarty->assign('large_screen_calendar_row_span', $largeScreenCalendarRowSpan);\n$smarty->assign('selected_date', $selected_date);\n$smarty->assign('week_total', $week_total);\n$smarty->assign('client_list', $client_list);\n$smarty->assign('project_list', $project_list);\n$smarty->assign('task_list', $task_list);\n$smarty->assign('forms', array($form->getName()=>$form->toArray()));\n$smarty->assign('onload', 'onLoad=\"fillDropdowns()\"');\n$smarty->assign('timestring', $startDate->toString($user->date_format).' - '.$endDate->toString($user->date_format));\n$smarty->assign('time_records', $records);\n$smarty->assign('show_record_custom_fields', $showRecordCustomFields);\n$smarty->assign('show_navigation', !$user->isOptionEnabled('week_menu'));\n$smarty->assign('show_client', $showClient);\n$smarty->assign('show_billable', $showBillable);\n$smarty->assign('show_project', $showProject);\n$smarty->assign('show_task', $showTask);\n$smarty->assign('task_required', $taskRequired);\n$smarty->assign('show_week_note', $showWeekNote);\n$smarty->assign('show_week_list', $user->isOptionEnabled('week_list'));\n$smarty->assign('show_start', $showStart);\n$smarty->assign('show_files', $showFiles);\n$smarty->assign('title', $i18n->get('menu.week'));\n$smarty->assign('content_page_name', 'week.tpl');\n$smarty->display('index.tpl');\n"], "filenames": ["initialize.php", "week.php"], "buggy_code_start_loc": [24, 245], "buggy_code_end_loc": [25, 246], "fixing_code_start_loc": [24, 245], "fixing_code_end_loc": [25, 246], "type": "CWE-79", "message": "Time Tracker is an open source time tracking system. The week view plugin in Time Tracker versions 1.22.11.5782 and prior was not escaping titles for notes in week view table. Because of that, it was possible for a logged in user to enter notes with elements of JavaScript. Such script could then be executed in user browser on subsequent requests to week view. This issue is fixed in version 1.22.12.5783. As a workaround, use `htmlspecialchars` when calling `$field->setTitle` on line #245 in the `week.php` file,  as happens in version 1.22.12.5783.", "other": {"cve": {"id": "CVE-2023-32066", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-09T16:15:15.160", "lastModified": "2023-05-17T13:57:44.233", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Time Tracker is an open source time tracking system. The week view plugin in Time Tracker versions 1.22.11.5782 and prior was not escaping titles for notes in week view table. Because of that, it was possible for a logged in user to enter notes with elements of JavaScript. Such script could then be executed in user browser on subsequent requests to week view. This issue is fixed in version 1.22.12.5783. As a workaround, use `htmlspecialchars` when calling `$field->setTitle` on line #245 in the `week.php` file,  as happens in version 1.22.12.5783."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.22.12.5783", "matchCriteriaId": "144881B4-9A01-4919-BACC-8364C75FBF1C"}]}]}], "references": [{"url": "https://github.com/anuko/timetracker/commit/093cfe158099704ffd4a1624be217f9935e914eb", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-jw2g-8wvp-9frw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/093cfe158099704ffd4a1624be217f9935e914eb"}}