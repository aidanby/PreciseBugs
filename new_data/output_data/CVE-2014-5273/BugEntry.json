{"buggy_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.2.7.1 (2014-08-17)\n- bug #4501 [security] XSS in table browse page\n- bug #4505 [security] XSS in view operations page\n\n4.2.7.0 (2014-07-31)\n- bug       Broken links on home page\n- bug #4494 Overlap in navigation panel\n- bug #4427 Action icons not in horizontal order\n- bug #4493 s_attention.png is missing\n- bug #4499 Uncaught TypeError: Cannot call method 'substr' of undefined\n- bug #4498 PMA 4.2.x and HHVM\n- bug #4500 mysql_doc_template is not defined\n\n4.2.6.0 (2014-07-17)\n- bug #4471 Undefined index warning with referenced column.\n- bug #4027 $cfg['MaxExactCount'] is ignored when BROWSING is back\n- bug #4482 Multi Column sorting (improved user experience)\n- bug #4478 Server validation does not work while in setup/mysqli\n- bug       Undefined variable when grid editing a foreign key column\n- bug #4481 mult_submits.inc.php Undefined variable Error\n- bug #4485 Sorting breaks the copy column feature\n- bug #4440 Javascript error when renaming table\n- bug #4483 'New window' link (selflink) disappears, causing Javascript error\n- bug #4489 Incorrect detection of privileges for routine creation\n- bug #4459 First few characters of database name aren't clickable when expanded\n- bug #4486 [security] XSS injection due to unescaped table comment\n- bug #4488 [security] XSS injection due to unescaped table name (triggers)\n- bug #4492 [security] XSS in AJAX confirmation messages\n- bug #4491 [security] Missing validation for accessing User groups feature\n\n4.2.5.0 (2014-06-26)\n- bug #4467 shell_exec() has been disabled for security reasons\n- bug #4470 Error while submitting empty query\n- bug #4463 Fatal error: Class 'PMA_DatabaseInterface' not found\n- bug #4469 Fixed cookie based login for installations without mcrypt\n- bug #4473 incorrect result count when having clause is used\n-           mcrypt: remove the requirement (64-bit) and the related warning\n\n4.2.4.0 (2014-06-20)\n- bug #4449 Mediawiki export does not produce table header row; also fix related PHP warnings\n- bug #4442 New lines are added to query every time\n- bug #4445 Fatal error on SQL Export of join query\n- bug #4448 Dump binary columns in hexadecimal notation not working\n- Regenerate cookie encryption IV for every session\n- bug #4405 Cannot import (open_basedir): fix another case\n- bug #4457 SQL tab - Insert queries not showing affected row count\n- bug       Missing warning about existing account, on multi-server config\n- bug #4435 WHERE clause can be undefined\n- bug       SQL export views as tables option getting ignored\n- bug #4464 [security] XSS injection due to unescaped db/table name in navigation hiding\n- bug #4465 [security] XSS injection due to unescaped db/table name in recent/favorite tables\n\n4.2.3.0 (2014-06-08)\n- bug #4423 Moving fields not working\n- bug #4424 Table indexes disappear after altering field\n- bug #4432 Error while displaying chart at server level\n- bug #4405 Cannot import (open_basedir)\n- bug #4396 Problem copying constraints (such as Sakila)\n- bug #4433 Missing privileges submenu\n- bug #4394 Drop db confirmation message when dropping a user\n- bug #4436 Insert form numeric field with function drop-down list\n- bug #4437 Problems due to missing enforcement of the minimum supported MySQL version\n+ Add enforcement of the minimum supported PHP version (5.3.0)\n- bug       Query error on submitting a column change form containing a disabled input field\n- bug       Incorrect menu tab generation from usergroups\n- bug       Missing space in index creation/edit generated query\n- bug #4434 Unchecking 'Show SQL queries' results NaN\n\n4.2.2.0 (2014-05-20)\n- bug #4388 Disable database expansion when enabled throws Error 500 when database name is clicked in navigation tree\n- bug #4414 table display of performance_schema DB structure\n- bug #4411 Protect Binary Columns: many problems\n- bug #4395 BLOB link transformation is broken\n- bug       Respect ['ShowCreateDb'] in the navi panel\n- bug #4392 Cannot see databases in nav panel on databases grouping when disabled database expansion\n- bug #4419 No more calendar into search tab\n- bug #4398 Monitor should fit into screen width\n- bug #4418 When copying databases, primary key attributes get lost\n- bug #4421 empty maxInputVars on js/messages.php\n\n4.2.1.0 (2014-05-13)\n- bug #4380 Cannot display table structure with enums containing special characters\n- bug #4381 Cannot remove the last remembered sorted column\n- bug       Correctly fetch length of user and host fields in MySQL tables\n- bug #4364 examples/signon.php does not support the SessionSavePath directive\n- bug #4382 Missing source for OpenLayers library\n- bug       Incorrect attributes for number fields\n- bug #4383 Cannot update values in Zoom search\n- bug #4313 GIS Visualization Extension does not work with PointFromText() function\n- bug #4384 Incorrect \"Rows\" total shown when truncating or dropping a table on DB Structure page\n- bug #4385 Grid edit on sorted columns fails\n- bug #4389 Null checkbox covering data input when editing\n- bug #4390 Data type changing by itself (no size but attribute present)\n\n4.2.0.0 (2014-05-08)\n+ rfe #1403 Export only triggers\n+ rfe #1483 Export Server/Database/Table without triggers\n+ rfe #1662 Add table comment tool tip in database structure page\n+ rfe #1447 Single table for display Character Sets and Collations\n+ rfe #1455 Display icons/text/both for the table row actions\n+ rfe #1473 Transformation to convert Boolean value to text\n- bug #4157 Changing users password will delete it\n+ rfe #1474 Text transformation combines Append and Prepend\n+ Added warning about the mysql extension being deprecated\n  and removed the extension directive\n+ Added support for scatter charts\n+ rfe #1478 Make Column Headings Sticky\n+ rfe #1480 Enhance privileges initials table\n+ rfe #1472 [interface] Break \"Edit privileges\" with sub-menus\n+ rfe #1466 Minor refactoring required\n+ rfe #1004 Create indexes at the end in SQL export\n+ rfe #1479 Relations edit form for larger monitors\n+ rfe #1475 Inline query box vertical resize\n+ rfe #1500 [interface] Add bottom border to top menu container\n+ rfe #1498 Add datepicker for 'TIME' type\n- bug #4237 HTTP Referer disclosure in SQL links\n+ rfe       Show full names on navigation hover\n+ rfe #1505 Behaviour on click on a routine in nav panel\n+ rfe #1418 Support more than one separating character on CSV import\n+ rfe #569  Load/Save Query By Example\n- bug #4281 Grid edit ENUM field, dialog disappears when trying to select\n- bug #4304 DB export using zip compression generates an empty archive\n+ rfe #1508 confirmation message at the top\n- bug #4306 breadcrubs wrong on table create\n+ rfe #1511 better validate database name for copying\n+ rfe #1510 Database tab \"Drop\" button should be a link\n+ rfe #1513 Highlight required form fields after failed submission\n+ rfe #1460 Redirect to login page after session has expired\n- bug #4316 Grid edit: can't change month on date fields\n+ rfe #1501 add maxlength by field with length-spec\n+ rfe #1512 Import happily doesn't do anything with no file name provided\n+ rfe #1514 Add function to all the insert boxes automatically\n+ rfe #1515 Option to skip tables larger than n\n+ rfe #1486 Possibility of disabling database expansion\n+ rfe #1476 Favourite tables select box\n+ rfe #420  $cfg['CharEditing']='textarea' for structure edit\n+ rfe #1329 Avoid editing of fields which are part of relation\n+ rfe       [interface] Highlight active left menu item in setup\n+ rfe       Filter on-screen rows during Browse\n  Removed support for SQL Validator (SOAP service no longer offered)\n- bug #4352 Settings > Manage: incorrect messages\n- bug #4337 \"More\" in Actions area doesn't collapse to fit available space\n- bug #4375 Group two DB, one's name is the prefix of the other one\n- bug #4070 Confusing database/table grouping\n- bug #4366 Creating Index doesn't update index-list\n+ rfe #1507 Sort by multiple columns\n\n4.1.14.1 (2014-06-21)\n- bug #4464 [security] XSS injection due to unescaped db/table name in navigation hiding\n\n4.1.14.0 (2014-04-26)\n- bug #4365 Creating bookmark with multiple queries not working\n- bug #4375 Group two DB, one's name is the prefix of the other one\n- bug #4376 [interface] Login fields show in separate line\n- bug #4372 Changing browser transformation results in unnecessary table rebuild\n\n4.1.13.0 (2014-04-13)\n- bug #4279 CTRL + up or down moves 2 fields\n- bug #4336 List server css style wrong\n- bug       Missing value on the Status > Server page\n- bug #4347 Fixed PHP Parse error in Advisor\n- bug #4350 Deleting the DB if it is renamed by the same name\n- bug #4353 makeProfilingChart is not defined\n- bug #4355 Precision specifier for DOUBLE type is truncated\n- bug #4346 Incorrect \"Export incomplete\" message\n- bug #4359 Notices on create table page\n- bug #4356 GROUPed selects show number of rows as if not grouped\n- bug #4357 JS Form submitted on \"enter\" even if focus is inside a select field\n\n4.1.12.0 (2014-03-27)\n- bug #4334 Add event : datepicker won't open\n- bug #4338 Fix missing value error while executing SQL query\n- TCPDF library is now optional dependency\n- bug #4326 Cannot find the import plugins which start with uppercase 'I'\n\n4.1.11.0 (2014-03-23)\n- bug #4335 reCaptcha problem (4.1.10 regression)\n\n4.1.10.0 (2014-03-22)\n- bug #4301 Grid edit: \"SELECT\" query is replaced by \"UPDATE\" query after edit\n- bug #4278 reCaptcha re-login requires double effort\n- bug #4324 Datepicker not showing up on insert page\n- bug #3991 Problem selecting item in select boxes with the ENTER keystroke in some browsers\n- bug #4323 QueryWindow ignores CodeMirror\n- bug       None of the live charts shown on \"Status -> Monitor\" (Chrome)\n\n4.1.9.0 (2014-03-06)\n- bug #4279 CTRL + up or down moves two fields (part one)\n- bug #4294 output as text radio clickable for \"OpenDocument Text\" export\n- bug #4297 DROP DATABASE tick box in export no longer works\n- bug #4291 Unable to export comments in OpenDocument text format\n- bug #4299 Deletion even when the user says \"No\" to the confirmation message\n- bug #4303 \"New\" link in navi panel is shown even if no privileges\n- bug #4302 Some params are being omitted from microhistory\n- bug #4298 Missing validation on Import CSV: \"Columns enclosed with\" and \"Columns escaped with\"\n- bug #4040 Fatal error while resetting settings\n- bug #4305 JS error when editing procedure from nav panel\n- bug #4308 Edit routine form submitting when pressing enter\n- bug #4307 Nav: \"Columns\" won't expand with specific schema\n\n4.1.8.0 (2014-02-22)\n- bug #4276 Login loop on session expiry\n- bug #4249 Incorrect number of result rows for SQL with subqueries\n- bug #4275 Broken Link to php extension manual\n- bug #4053 List of procedures is not displayed after executing with Enter\n- bug #4081 Setup page content shifted to the right edge of its tabs\n- bug #4284 Reordering a column erases comments for other columns\n- bug #4286 Open \"Browse\" in a new tab\n- bug #4287 Printview - Always one column too much\n- bug #4288 Expand database (+ icon) after timeout doesn't do anything\n- bug #4285 Fixed CSS for setup\n- Fixed altering table to DOUBLE/FLOAT field\n- bug #4292 Success message and failure message being shown together\n- bug #4293 opening new tab (using selflink) for import.php based actions\n            results in error and logout\n\n4.1.7.0 (2014-02-09)\n- bug #4245 initial Browse query does not match sorting order\n- bug #4250 Notice on export page\n- bug #4253 \"New\" text in navigation frame acts like a database\n- bug #4262 Cannot define a column with fractional seconds\n- bug #4265 Missing datepicker icon for DATETIME(length)\n- bug #4257 Hide fractional seconds when applicable\n- bug #4264 Uncheck \"Ignore\" while inserting, upon leaving a textarea\n- bug #4260 reCaptcha is ignoring language settings\n- bug #4259 reCaptcha sound session expired problem\n- bug #4263 Japanese character encoding not working properly when exporting\n- bug #4269 Notice on table relation page\n- bug #4270 Bad text-color for table comments\n- bug #4272 Incorrect tabindex\n- bug #4271 Query by example and the second criteria line\n- bug #4242 Wildcard-containing only_db failure in sidebar\n\n4.1.6.0 (2014-01-26)\n- bug #4232 User not found after creating the user\n- bug #4241 Confusing dialog when trying to create an already existing user\n- bug #4239 Missing LIMIT clause for some queries\n- rfe #1489 Do not show create icon when user has no privileges\n- bug #4218 Chrome behavior with date fields\n- bug #3579 NOW() function incorrectly selected (regression)\n- bug #4244 Advisor complaints about MariaDB 10.x is version less than 5.1\n- bug #3889 When login fails and error display is active, login data is\ndisplayed (regression)\n- bug #4247 open_basedir warnings on export page\n- bug #4013 AJAX request waiting until version info is retrieved\n- bug #4248 js error when changing number of columns in status monitor\n\n4.1.5.0 (2014-01-17)\n- bug #3780 Allow aborting loading pages\n- bug #4223 Database list: Create database misses collation column\n- bug #4224 Empty table names when a table is \"inuse\"\n- bug #4225 Partition maintenance broken\n- bug #4219 Table list (left panel) does not reload when table renamed\n- bug #4230 \"in use\" displayed for all views in database print view\n- bug #4226 Notice: Undefined index: pma_config_loading\n- bug #4221 Bzip2 export cannot be directly imported (so withdraw bz2 export)\n- bug #4204 Reloading user privileges hides user groups submenu\n- bug #4231 DATE columns quick edit decrement by one day\n\n4.1.4.0 (2014-01-07)\n- bug #3840 (additional fix) When exporting to gzip format, the data is compressed 2 times\n- bug #4209 Missing compression in one case\n- bug #4208 Can't browse tables after sorting on columns with fieldnames that have a '-'\n- bug #4184 Switch to wrong page after adding an index\n- bug #3885 Additional fix for this bug\n- bug #4212 Table \"disappears\" if it has the same name as its tablegroup\n- bug #4213 Datetime Quick Edit decrements by one day\n- bug #4217 Current value not highlighted when browsing foreign values\n- bug #4220 Incorrect key values in foreign key browser\n- bug #4215 MariaDB 5.5: error in Drizzle detection\n\n         --- Older ChangeLogs can be found on our project website ---\n                     http://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var $table_clone reference to the action links on the tbl_structure page\n */\nvar $table_clone = false;\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox/querywindow\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = [];\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the query editor in SQL tab\n */\nvar codemirror_editor = false;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the inline query editor\n */\nvar codemirror_inline_editor = false;\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = {};\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache' : nocache});\n    }\n});\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param object   the form that holds the password fields\n *\n * @return boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    passwd.value = '';\n\n    for (var i = 0; i < passwordlength; i++) {\n        passwd.value += pwchars.charAt(Math.floor(Math.random() * pwchars.length));\n    }\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString(str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2), 10);\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4), 10);\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5), 10);\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0], 10) || 0;\n    var min = parseInt(x[1], 10) || 0;\n    var pat = parseInt(x[2], 10) || 0;\n    var hotfix = parseInt(x[3], 10) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version(data)\n{\n    if (data && data.version && data.date) {\n        var current = parseVersionString(pmaversion);\n        var latest = parseVersionString(data.version);\n        var version_information_message = '<span>'\n            + PMA_messages.strLatestAvailable\n            + ' ' + escapeHtml(data.version)\n            + '</span>';\n        if (latest > current) {\n            var message = $.sprintf(\n                PMA_messages.strNewerVersion,\n                escapeHtml(data.version),\n                escapeHtml(data.date)\n            );\n            var htmlClass = 'notice';\n            if (Math.floor(latest / 10000) === Math.floor(current / 10000)) {\n                /* Security update */\n                htmlClass = 'error';\n            }\n            $('#maincontainer').after('<div class=\"' + htmlClass + '\">' + message + '</div>');\n        }\n        if (latest === current) {\n            version_information_message = ' (' + PMA_messages.strUpToDate + ')';\n        }\n        $('#li_pma_version span').remove();\n        $('#li_pma_version').append(version_information_message);\n    }\n}\n\n/**\n * Loads Git revision data from ajax for index.php\n */\nfunction PMA_display_git_revision()\n{\n    $('#is_git_revision').remove();\n    $('#li_pma_version_git').remove();\n    $.get(\n        \"index.php\",\n        {\n            \"server\": PMA_commonParams.get('server'),\n            \"token\": PMA_commonParams.get('token'),\n            \"git_revision\": true,\n            \"ajax_request\": true\n        },\n        function (data) {\n            if (data.success === true) {\n                $(data.message).insertAfter('#li_pma_version');\n            }\n        }\n    );\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr class=\"vmiddle\"><td>' + PMA_messages.strGeneratePassword + '</td><td><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages.strGeneratePassword + ':</label><span class=\"options\"><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, type, options)\n{\n    var showTimepicker = true;\n    if (type==\"date\") {\n        showTimepicker = false;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showMillisec: true,\n        showMicrosec: true,\n        showTimepicker: showTimepicker,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'HH:mm:ss.lc',\n        constrainInput: false,\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function (input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function () {\n                $('#ui-timepicker-div').css('z-index', $('#ui-datepicker-div').css('z-index'));\n            }, 0);\n        },\n        onClose: function (dateText, dp_inst) {\n            // The value is no more from the date picker\n            $this_element.data('comes_from', '');\n        }\n    };\n    if (type == \"datetime\" || type == \"timestamp\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"date\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"time\") {\n        $this_element.timepicker($.extend(defaultOptions, options));\n    }\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param object  element     element of which the content will be selected\n * @param var     lock        variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param boolean only_once   if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent(element, lock, only_once)\n{\n    if (only_once && only_once_elements[element.name]) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if (lock) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param object   the link\n * @param object   the sql query to submit\n *\n * @return boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages.strDoYouReally === '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm($.sprintf(PMA_messages.strDoYouReally, theSqlQuery));\n    if (is_confirmed) {\n        if ($(theLink).hasClass('formLinkSubmit')) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if (typeof(theLink.href) != 'undefined') {\n            theLink.href += '&is_js_confirmed=1';\n        } else if (typeof(theLink.form) != 'undefined') {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * sumitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param object   the form\n * @param object   the sql query textarea\n *\n * @return boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages.strNoDropDatabases !== '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages.strNoDropDatabases);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value) ||\n        do_confirm_re_1.test(sqlQuery1.value) ||\n        do_confirm_re_2.test(sqlQuery1.value) ||\n        do_confirm_re_3.test(sqlQuery1.value)) {\n        var message;\n        if (sqlQuery1.value.length > 100) {\n            message = sqlQuery1.value.substr(0, 100) + '\\n    ...';\n        } else {\n            message = sqlQuery1.value;\n        }\n        var is_confirmed = confirm($.sprintf(PMA_messages.strDoYouReally, message));\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements['is_js_confirmed'].value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param object   the form\n *\n * @return boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    var sqlQuery;\n    // get the textarea element containing the query\n    if (codemirror_editor) {\n        codemirror_editor.save();\n        sqlQuery = codemirror_editor.getValue();\n    } else {\n        sqlQuery = theForm.elements.sql_query.value;\n    }\n    var isEmpty  = 1;\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements['sql_file']) != 'undefined' &&\n            theForm.elements['sql_file'].value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (typeof(theForm.elements['sql_localfile']) != 'undefined' &&\n            theForm.elements['sql_localfile'].value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements['id_bookmark']) != 'undefined' &&\n            (theForm.elements['id_bookmark'].value !== null || theForm.elements['id_bookmark'].value !== '') &&\n            theForm.elements['id_bookmark'].selectedIndex !== 0) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.replace(space_re, '') !== '') {\n        if (confirmQuery(theForm, sqlQuery)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        alert(PMA_messages.strFormEmpty);\n        codemirror_editor.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return (theField.value.replace(space_re, '') === '') ? 1 : 0;\n} // end of the 'emptyCheckTheField()' function\n\n\n/**\n * Check whether a form field is empty or not\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyFormElements(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var isEmpty = emptyCheckTheField(theForm, theFieldName);\n\n\n    return isEmpty;\n} // end of the 'emptyFormElements()' function\n\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param object   the form\n * @param string   the name of the form field to check\n * @param integer  the minimum authorized value\n * @param integer  the maximum authorized value\n *\n * @return boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value, 10);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages.strEnterValidNumber);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert($.sprintf(message, val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i = 0; i < fieldsCnt; i++) {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val();\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val(), 10);\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() !== \"\") {\n                elm2.select();\n                alert(PMA_messages.strEnterValidLength);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField === 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField === 0) {\n        var theField = theForm.elements[\"field_0_1\"];\n        alert(PMA_messages.strFormEmpty);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    if ($(\"input.textfield[name='table']\").val() === \"\") {\n        alert(PMA_messages.strFormEmpty);\n        $(\"input.textfield[name='table']\").focus();\n        return false;\n    }\n\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input:checkbox.checkall').die('click');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Row marking in horizontal mode (use \"live\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n\n    $('input:checkbox.checkall').live('click', function (e) {\n        var $tr = $(this).closest('tr');\n\n        // make the table unselectable (to prevent default highlighting when shift+click)\n        //$tr.parents('table').noSelect();\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n            var $checkbox = $tr.find(':checkbox');\n            if ($checkbox.length) {\n                // checkbox in a row, add or remove class depending on checkbox state\n                var checked = $checkbox.prop('checked');\n                if (!$(e.target).is(':checkbox, label')) {\n                    checked = !checked;\n                    $checkbox.prop('checked', checked).trigger('change');\n                }\n                if (checked) {\n                    $tr.addClass('marked');\n                } else {\n                    $tr.removeClass('marked');\n                }\n                last_click_checked = checked;\n            } else {\n                // normal data table, just toggle class\n                $tr.toggleClass('marked');\n                last_click_checked = false;\n            }\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .prop('checked', false)\n                    .trigger('change');\n            }\n\n            // handle new shift click\n            var curr_row = $('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .prop('checked', true)\n                .trigger('change');\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    addDateTimePicker();\n\n    /**\n     * Add attribute to text boxes for iOS devices (based on bugID: 3508912)\n     */\n    if (navigator.userAgent.match(/(iphone|ipod|ipad)/i)) {\n        $('input[type=text]').attr('autocapitalize', 'off').attr('autocorrect', 'off');\n    }\n});\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\n/**\n * Row highlighting in horizontal mode (use \"live\"\n * so that it works also for pages reached via AJAX)\n */\n/*AJAX.registerOnload('functions.js', function () {\n    $('tr.odd, tr.even').live('hover',function (event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = [];\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction markAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', true)\n    .trigger(\"change\")\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction unMarkAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', false)\n    .trigger(\"change\")\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given conainer (f.e. a form, fieldset or div)\n *\n * @param string   container_id  the container id\n * @param boolean  state         new value for checkbox (true or false)\n * @return boolean  always true\n */\nfunction setCheckboxes(container_id, state)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox\").prop('checked', state);\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param string   the form name\n  * @param string   the element name\n  * @param boolean  whether to check or to uncheck options\n  *\n  * @return boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\" + the_form + \"'] select[name='\" + the_select + \"']\").find(\"option\").prop('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n        codemirror_editor.focus();\n    } else {\n        document.sqlform.sql_query.value = query;\n        document.sqlform.sql_query.focus();\n    }\n}\n\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    }\n\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                columnsList += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            columnsList += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + columnsList + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n            query = \"INSERT INTO `\" + table + \"`(\" + columnsList + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if (queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    columnsList += \", \";\n                }\n                columnsList += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(columnsList);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            var sel = document.selection.createRange();\n            sel.text = columnsList;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var SqlString = document.sqlform.sql_query.value;\n\n            myQuery.value = SqlString.substring(0, startPos) + columnsList + SqlString.substring(endPos, SqlString.length);\n        } else {\n            myQuery.value += columnsList;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n * Add a date/time picker to each element that needs it\n * (only when jquery-ui-timepicker-addon.js is loaded)\n */\nfunction addDateTimePicker() {\n    if ($.timepicker !== undefined) {\n        $('input.timefield, input.datefield, input.datetimefield').each(function () {\n\n            no_decimals = $(this).parent().attr('data-decimals');\n            var showMillisec = false;\n            var showMicrosec = false;\n            var timeFormat = 'HH:mm:ss';\n            // check for decimal places of seconds\n            if (($(this).parent().attr('data-decimals') > 0) && ($(this).parent().attr('data-type').indexOf('time') != -1)){\n                showMillisec = true;\n                timeFormat = 'HH:mm:ss.lc';\n                if ($(this).parent().attr('data-decimals') > 3) {\n                    showMicrosec = true;\n                }\n            }\n            PMA_addDatepicker($(this), $(this).parent().attr('data-type'), {\n                showMillisec: showMillisec,\n                showMicrosec: showMicrosec,\n                timeFormat: timeFormat\n            });\n        });\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var $elm = $('#pdflayout');\n    var orientation = $('#orientation_opt').val();\n    var paper = 'A4';\n    if ($('#paper_opt').length == 1) {\n        paper = $('#paper_opt').val();\n    }\n    var posa = 'y';\n    var posb = 'x';\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    }\n    $elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    $elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n * Initializes positions of elements.\n */\nfunction TableDragInit() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var number = $this.data('number');\n        var x = $('#c_table_' + number + '_x').val();\n        var y = $('#c_table_' + number + '_y').val();\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n        /* Make elements draggable */\n        $this.draggable({\n            containment: \"parent\",\n            drag: function (evt, ui) {\n                var number = $this.data('number');\n                $('#c_table_' + number + '_x').val(parseInt(ui.position.left, 10));\n                $('#c_table_' + number + '_y').val(parseInt(ui.position.top, 10));\n            }\n        });\n    });\n}\n\n/**\n * Resets drag and drop positions.\n */\nfunction resetDrag() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var x = $this.data('x');\n        var y = $this.data('y');\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n    });\n}\n\n/**\n * User schema handlers.\n */\n$(function () {\n    /* Move in scratchboard on manual change */\n    $('.position-change').live('change', function () {\n        var $this = $(this);\n        var $elm = $('#table_' + $this.data('number'));\n        $elm.css($this.data('axis'), $this.val() + 'px');\n    });\n    /* Refresh on paper size/orientation change */\n    $('.paper-change').live('change', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'visible') {\n            refreshLayout();\n            TableDragInit();\n        }\n    });\n    /* Show/hide the WYSIWYG scratchboard */\n    $('#toggle-dragdrop').live('click', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'hidden') {\n            refreshLayout();\n            TableDragInit();\n            $elm.css('visibility', 'visible');\n            $elm.css('display', 'block');\n            $('#showwysiwyg').val('1');\n        } else {\n            $elm.css('visibility', 'hidden');\n            $elm.css('display', 'none');\n            $('#showwysiwyg').val('0');\n        }\n    });\n    /* Reset scratchboard */\n    $('#reset-dragdrop').live('click', function () {\n        resetDrag();\n    });\n});\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n    case '4A0':\n        if (axis == 'x') {\n            return 4767.87;\n        } else {\n            return 6740.79;\n        }\n        break;\n    case '2A0':\n        if (axis == 'x') {\n            return 3370.39;\n        } else {\n            return 4767.87;\n        }\n        break;\n    case 'A0':\n        if (axis == 'x') {\n            return 2383.94;\n        } else {\n            return 3370.39;\n        }\n        break;\n    case 'A1':\n        if (axis == 'x') {\n            return 1683.78;\n        } else {\n            return 2383.94;\n        }\n        break;\n    case 'A2':\n        if (axis == 'x') {\n            return 1190.55;\n        } else {\n            return 1683.78;\n        }\n        break;\n    case 'A3':\n        if (axis == 'x') {\n            return 841.89;\n        } else {\n            return 1190.55;\n        }\n        break;\n    case 'A4':\n        if (axis == 'x') {\n            return 595.28;\n        } else {\n            return 841.89;\n        }\n        break;\n    case 'A5':\n        if (axis == 'x') {\n            return 419.53;\n        } else {\n            return 595.28;\n        }\n        break;\n    case 'A6':\n        if (axis == 'x') {\n            return 297.64;\n        } else {\n            return 419.53;\n        }\n        break;\n    case 'A7':\n        if (axis == 'x') {\n            return 209.76;\n        } else {\n            return 297.64;\n        }\n        break;\n    case 'A8':\n        if (axis == 'x') {\n            return 147.40;\n        } else {\n            return 209.76;\n        }\n        break;\n    case 'A9':\n        if (axis == 'x') {\n            return 104.88;\n        } else {\n            return 147.40;\n        }\n        break;\n    case 'A10':\n        if (axis == 'x') {\n            return 73.70;\n        } else {\n            return 104.88;\n        }\n        break;\n    case 'B0':\n        if (axis == 'x') {\n            return 2834.65;\n        } else {\n            return 4008.19;\n        }\n        break;\n    case 'B1':\n        if (axis == 'x') {\n            return 2004.09;\n        } else {\n            return 2834.65;\n        }\n        break;\n    case 'B2':\n        if (axis == 'x') {\n            return 1417.32;\n        } else {\n            return 2004.09;\n        }\n        break;\n    case 'B3':\n        if (axis == 'x') {\n            return 1000.63;\n        } else {\n            return 1417.32;\n        }\n        break;\n    case 'B4':\n        if (axis == 'x') {\n            return 708.66;\n        } else {\n            return 1000.63;\n        }\n        break;\n    case 'B5':\n        if (axis == 'x') {\n            return 498.90;\n        } else {\n            return 708.66;\n        }\n        break;\n    case 'B6':\n        if (axis == 'x') {\n            return 354.33;\n        } else {\n            return 498.90;\n        }\n        break;\n    case 'B7':\n        if (axis == 'x') {\n            return 249.45;\n        } else {\n            return 354.33;\n        }\n        break;\n    case 'B8':\n        if (axis == 'x') {\n            return 175.75;\n        } else {\n            return 249.45;\n        }\n        break;\n    case 'B9':\n        if (axis == 'x') {\n            return 124.72;\n        } else {\n            return 175.75;\n        }\n        break;\n    case 'B10':\n        if (axis == 'x') {\n            return 87.87;\n        } else {\n            return 124.72;\n        }\n        break;\n    case 'C0':\n        if (axis == 'x') {\n            return 2599.37;\n        } else {\n            return 3676.54;\n        }\n        break;\n    case 'C1':\n        if (axis == 'x') {\n            return 1836.85;\n        } else {\n            return 2599.37;\n        }\n        break;\n    case 'C2':\n        if (axis == 'x') {\n            return 1298.27;\n        } else {\n            return 1836.85;\n        }\n        break;\n    case 'C3':\n        if (axis == 'x') {\n            return 918.43;\n        } else {\n            return 1298.27;\n        }\n        break;\n    case 'C4':\n        if (axis == 'x') {\n            return 649.13;\n        } else {\n            return 918.43;\n        }\n        break;\n    case 'C5':\n        if (axis == 'x') {\n            return 459.21;\n        } else {\n            return 649.13;\n        }\n        break;\n    case 'C6':\n        if (axis == 'x') {\n            return 323.15;\n        } else {\n            return 459.21;\n        }\n        break;\n    case 'C7':\n        if (axis == 'x') {\n            return 229.61;\n        } else {\n            return 323.15;\n        }\n        break;\n    case 'C8':\n        if (axis == 'x') {\n            return 161.57;\n        } else {\n            return 229.61;\n        }\n        break;\n    case 'C9':\n        if (axis == 'x') {\n            return 113.39;\n        } else {\n            return 161.57;\n        }\n        break;\n    case 'C10':\n        if (axis == 'x') {\n            return 79.37;\n        } else {\n            return 113.39;\n        }\n        break;\n    case 'RA0':\n        if (axis == 'x') {\n            return 2437.80;\n        } else {\n            return 3458.27;\n        }\n        break;\n    case 'RA1':\n        if (axis == 'x') {\n            return 1729.13;\n        } else {\n            return 2437.80;\n        }\n        break;\n    case 'RA2':\n        if (axis == 'x') {\n            return 1218.90;\n        } else {\n            return 1729.13;\n        }\n        break;\n    case 'RA3':\n        if (axis == 'x') {\n            return 864.57;\n        } else {\n            return 1218.90;\n        }\n        break;\n    case 'RA4':\n        if (axis == 'x') {\n            return 609.45;\n        } else {\n            return 864.57;\n        }\n        break;\n    case 'SRA0':\n        if (axis == 'x') {\n            return 2551.18;\n        } else {\n            return 3628.35;\n        }\n        break;\n    case 'SRA1':\n        if (axis == 'x') {\n            return 1814.17;\n        } else {\n            return 2551.18;\n        }\n        break;\n    case 'SRA2':\n        if (axis == 'x') {\n            return 1275.59;\n        } else {\n            return 1814.17;\n        }\n        break;\n    case 'SRA3':\n        if (axis == 'x') {\n            return 907.09;\n        } else {\n            return 1275.59;\n        }\n        break;\n    case 'SRA4':\n        if (axis == 'x') {\n            return 637.80;\n        } else {\n            return 907.09;\n        }\n        break;\n    case 'LETTER':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 792.00;\n        }\n        break;\n    case 'LEGAL':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 1008.00;\n        }\n        break;\n    case 'EXECUTIVE':\n        if (axis == 'x') {\n            return 521.86;\n        } else {\n            return 756.00;\n        }\n        break;\n    case 'FOLIO':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 936.00;\n        }\n        break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"a.inline_edit_sql\").die('click');\n    $(\"input#sql_query_edit_save\").die('click');\n    $(\"input#sql_query_edit_discard\").die('click');\n    $('input.sqlbutton').unbind('click');\n    $(\"#export_type\").unbind('change');\n    $('#sqlquery').unbind('keydown');\n    $('#sql_query_edit').unbind('keydown');\n\n    if (codemirror_inline_editor) {\n        // Copy the sql query to the text area to preserve it.\n        $('#sql_query_edit').text(codemirror_inline_editor.getValue());\n        $(codemirror_inline_editor.getWrapperElement()).unbind('keydown');\n        codemirror_inline_editor.toTextArea();\n        codemirror_inline_editor = false;\n    }\n    if (codemirror_editor) {\n        $(codemirror_editor.getWrapperElement()).unbind('keydown');\n    }\n});\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\nAJAX.registerOnload('functions.js', function () {\n    // If we are coming back to the page by clicking forward button\n    // of the browser, bind the code mirror to inline query editor.\n    bindCodeMirrorToInlineEditor();\n    $(\"a.inline_edit_sql\").live('click', function () {\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev('form');\n        var sql_query  = $form.find(\"input[name='sql_query']\").val().trim();\n        var $inner_sql = $(this).parent().prev().find('code.sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += \"<input type=\\\"submit\\\" id=\\\"sql_query_edit_save\\\" class=\\\"button btnSave\\\" value=\\\"\" + PMA_messages.strGo + \"\\\"/>\\n\";\n        new_content    += \"<input type=\\\"button\\\" id=\\\"sql_query_edit_discard\\\" class=\\\"button btnDiscard\\\" value=\\\"\" + PMA_messages.strCancel + \"\\\"/>\\n\";\n        var $editor_area = $('div#inline_editor');\n        if ($editor_area.length === 0) {\n            $editor_area = $('<div id=\"inline_editor_outer\"></div>');\n            $editor_area.insertBefore($inner_sql);\n        }\n        $editor_area.html(new_content);\n        $inner_sql.hide();\n\n        bindCodeMirrorToInlineEditor();\n        return false;\n    });\n\n    $(\"input#sql_query_edit_save\").live('click', function () {\n        $(\".success\").hide();\n        //hide already existing success message\n        var sql_query;\n        if (codemirror_inline_editor) {\n            codemirror_inline_editor.save();\n            sql_query = codemirror_inline_editor.getValue();\n        } else {\n            sql_query = $(this).prev().val();\n        }\n\n        var $form = $(\"a.inline_edit_sql\").prev('form');\n        var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                .append($('<input/>', {type: 'hidden', name: 'show_query', value: 1}))\n                .append($('<input/>', {type: 'hidden', name: 'is_js_confirmed', value: 0}))\n                .append($('<input/>', {type: 'hidden', name: 'sql_query', value: sql_query}));\n        if (! checkSqlQuery($fake_form[0])) {\n            return false;\n        }\n        $fake_form.appendTo($('body')).submit();\n    });\n\n    $(\"input#sql_query_edit_discard\").live('click', function () {\n        $('div#inline_editor_outer').siblings('code.sql').show();\n        $('div#inline_editor_outer').remove();\n    });\n\n    $('input.sqlbutton').click(function (evt) {\n        insertQuery(evt.target.id);\n        return false;\n    });\n\n    $(\"#export_type\").change(function () {\n        if ($(\"#export_type\").val() == 'svg') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#orientation_opt\").prop(\"disabled\", true);\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").removeProp(\"disabled\");\n            $(\"#all_tables_same_width\").removeProp(\"disabled\");\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n            //$(this).css(\"background-color\",\"yellow\");\n        } else if ($(\"#export_type\").val() == 'dia') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").prop(\"disabled\", true);\n            $(\"#all_tables_same_width\").prop(\"disabled\", true);\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n        } else if ($(\"#export_type\").val() == 'eps') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").prop(\"disabled\", true);\n            $(\"#all_tables_same_width\").prop(\"disabled\", true);\n            $(\"#paper_opt\").prop(\"disabled\", true);\n            $(\"#show_color_opt\").prop(\"disabled\", true);\n        } else if ($(\"#export_type\").val() == 'pdf') {\n            $(\"#show_grid_opt\").removeProp(\"disabled\");\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n            $(\"#with_doc\").removeProp(\"disabled\");\n            $(\"#show_table_dim_opt\").removeProp(\"disabled\");\n            $(\"#all_tables_same_width\").removeProp(\"disabled\");\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n        } else {\n            // nothing\n        }\n    });\n\n    if ($('#input_username')) {\n        if ($('#input_username').val() === '') {\n            $('#input_username').focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * Binds the CodeMirror to the text area used to inline edit a query.\n */\nfunction bindCodeMirrorToInlineEditor() {\n    var $inline_editor = $('#sql_query_edit');\n    if ($inline_editor.length > 0) {\n        if (typeof CodeMirror !== 'undefined') {\n            var height = $('#sql_query_edit').css('height');\n            codemirror_inline_editor = CodeMirror.fromTextArea($inline_editor[0], {\n                lineNumbers: true,\n                matchBrackets: true,\n                indentUnit: 4,\n                mode: \"text/x-mysql\",\n                lineWrapping: true\n            });\n            codemirror_inline_editor.getScrollerElement().style.height = height;\n            codemirror_inline_editor.refresh();\n            codemirror_inline_editor.focus();\n            $(codemirror_inline_editor.getWrapperElement()).bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        } else {\n            $inline_editor.focus().bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        }\n    }\n}\n\nfunction catchKeypressesFromSqlTextboxes(event) {\n    // ctrl-enter is 10 in chrome and ie, but 13 in ff\n    if (event.ctrlKey && (event.keyCode == 13 || event.keyCode == 10)) {\n        if ($('#sql_query_edit').length > 0) {\n            $(\"#sql_query_edit_save\").trigger('click');\n        } else if ($('#sqlquery').length > 0) {\n            $(\"#button_submit_query\").trigger('click');\n        }\n    }\n}\n\n/**\n * Adds doc link to single highlighted SQL element\n */\nfunction PMA_doc_add($elm, params)\n{\n    if (typeof mysql_doc_template == 'undefined') {\n        return;\n    }\n\n    var url = $.sprintf(\n        mysql_doc_template,\n        params[0]\n    );\n    if (params.length > 1) {\n        url += '#' + params[1];\n    }\n    var content = $elm.text();\n    $elm.text('');\n    $elm.append('<a target=\"mysql_doc\" class=\"cm-sql-doc\" href=\"' + url + '\">' + content + '</a>');\n}\n\n/**\n * Generates doc links for keywords inside highlighted SQL\n */\nfunction PMA_doc_keyword(idx, elm)\n{\n    var $elm = $(elm);\n    /* Skip already processed ones */\n    if ($elm.find('a').length > 0) {\n        return;\n    }\n    var keyword = $elm.text().toUpperCase();\n    var $next = $elm.next('.cm-keyword');\n    if ($next) {\n        var next_keyword = $next.text().toUpperCase();\n        var full = keyword + ' ' + next_keyword;\n\n        var $next2 = $next.next('.cm-keyword');\n        if ($next2) {\n            var next2_keyword = $next2.text().toUpperCase();\n            var full2 = full + ' ' + next2_keyword;\n            if (full2 in mysql_doc_keyword) {\n                PMA_doc_add($elm, mysql_doc_keyword[full2]);\n                PMA_doc_add($next, mysql_doc_keyword[full2]);\n                PMA_doc_add($next2, mysql_doc_keyword[full2]);\n                return;\n            }\n        }\n        if (full in mysql_doc_keyword) {\n            PMA_doc_add($elm, mysql_doc_keyword[full]);\n            PMA_doc_add($next, mysql_doc_keyword[full]);\n            return;\n        }\n    }\n    if (keyword in mysql_doc_keyword) {\n        PMA_doc_add($elm, mysql_doc_keyword[keyword]);\n    }\n}\n\n/**\n * Generates doc links for builtins inside highlighted SQL\n */\nfunction PMA_doc_builtin(idx, elm)\n{\n    var $elm = $(elm);\n    var builtin = $elm.text().toUpperCase();\n    if (builtin in mysql_doc_builtin) {\n        PMA_doc_add($elm, mysql_doc_builtin[builtin]);\n    }\n}\n\n/**\n * Higlights SQL using CodeMirror.\n */\nfunction PMA_highlightSQL(base)\n{\n    var $elm = base.find('code.sql');\n    $elm.each(function () {\n        var $sql = $(this);\n        var $pre = $sql.find('pre');\n        /* We only care about visible elements to avoid double processing */\n        if ($pre.is(\":visible\")) {\n            var $highlight = $('<div class=\"sql-highlight cm-s-default\"></div>');\n            $sql.append($highlight);\n            if (typeof CodeMirror != 'undefined') {\n                CodeMirror.runMode($sql.text(), 'text/x-mysql', $highlight[0]);\n                $pre.hide();\n                $highlight.find('.cm-keyword').each(PMA_doc_keyword);\n                $highlight.find('.cm-builtin').each(PMA_doc_builtin);\n            }\n        }\n    });\n}\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message === '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages.strLoading;\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages.strProcessingRequest) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout === undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length === 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"body\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\"span.ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_' +\n            ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .show();\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function () {\n            if ($(this).is(':data(tooltip)')) {\n                $(this).tooltip('destroy');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_tooltip(\n            $retval,\n            'span',\n            PMA_messages.strDismiss\n        );\n    }\n    PMA_highlightSQL($retval);\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox !== undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is(':data(tooltip)')) {\n            $this_msgbox.tooltip('destroy');\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n// This event only need to be fired once after the initial page load\n$(function () {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $('span.ajax_notification.dismissable').live('click', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $('span.ajax_notification a, span.ajax_notification button, span.ajax_notification input')\n    .live('mouseover', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('disable');\n        }\n    })\n    .live('mouseout', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('enable');\n        }\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2], 10) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p#enum_notice_\" + enum_notice_id).show();\n    } else {\n        $(\"p#enum_notice_\" + enum_notice_id).hide();\n    }\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n * and in server_status_monitor.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true\n                }\n            },\n            highlighter: {\n                show: true,\n                tooltipLocation: 'se',\n                sizeAdjust: 0,\n                tooltipAxes: 'pieref',\n                useAxesFormatters: false,\n                formatString: '%s, %.9Ps'\n            },\n            legend: {\n                show: true,\n                location: 'e',\n                rendererOptions: {numberColumns: 2}\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n                '#fce94f',\n                '#fcaf3e',\n                '#e9b96e',\n                '#8ae234',\n                '#729fcf',\n                '#ad7fa8',\n                '#ef2929',\n                '#eeeeec',\n                '#888a85',\n                '#c4a000',\n                '#ce5c00',\n                '#8f5902',\n                '#4e9a06',\n                '#204a87',\n                '#5c3566',\n                '#a40000',\n                '#babdb6',\n                '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time).\n * Used in server_status_monitor.js\n *\n * @param  integer    Number to be formatted, should be in the range of microsecond to second\n * @param  integer    Accuracy, how many numbers right to the comma should be\n * @return string     The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10, acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param string      Query to be formatted\n * @return string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    if (typeof CodeMirror == 'undefined') {\n        return string;\n    }\n\n    var mode = CodeMirror.getMode({}, \"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function (cnt) {\n        var ret = '';\n        for (var i = 0; i < 4 * cnt; i++) {\n            ret += \" \";\n        }\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from', 'on', 'where', 'having', 'limit', 'order by', 'group by'],\n        'update': ['update', 'set', 'where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = {';': true, ',': true, '.': true, '(': true};\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = {'.': true};\n\n    // Populate tokens array\n    var str = '';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if (token !== null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if (! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i + 1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i - 1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i + 1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i + 1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) {\n                output += \"\\n\";\n            }\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentatin and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]] &&\n               ! (i > 0 && spaceExceptionsAfter[tokens[i - 1][1]]) &&\n               output.charAt(output.length - 1) != ' ') {\n                output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if ((lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set') &&\n            tokens[i][1] == ',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where' &&\n            (tokens[i][1] == 'and' || tokens[i][1] == 'or' || tokens[i][1] == 'xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & identation++\n            //if (blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param string      question\n * @param string      url         URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param function    callbackFn  callback to execute after user clicks on OK\n */\n\njQuery.fn.PMA_confirm = function (question, url, callbackFn) {\n    var confirmState = PMA_commonParams.get('confirm');\n    // when the Confirm directive is set to false in config.inc.php\n    // and not changed in user prefs, confirmState is \"\"\n    // when it's unticked in user prefs, confirmState is 1\n    if (confirmState === \"\" || confirmState === \"1\") {\n        // user does not want to confirm\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n            return true;\n        }\n    }\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    /**\n     * @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strOK] = function () {\n        $(this).dialog(\"close\");\n\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n        }\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog(\"close\");\n    };\n\n    $('<div/>', {'id': 'confirm_dialog'})\n    .prepend(question)\n    .dialog({\n        buttons: button_options,\n        close: function () {\n            $(this).remove();\n        },\n        modal: true\n    });\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param string      text_selector   string to select the sortKey's text\n *\n * @return jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function (text_selector) {\n    return this.each(function () {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function (index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        });\n\n        //get the sorted order\n        rows.sort(function (a, b) {\n            if (a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if (a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        });\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function (index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        });\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#create_table_form_minimal.ajax\").die('submit');\n    $(\"form.create_table_form.ajax\").die('submit');\n    $(\"form.create_table_form.ajax input[name=submit_num_fields]\").die('click');\n    $(\"form.create_table_form.ajax input\").die('keyup');\n});\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Attach event handler for submission of create table form (save)\n     */\n    $(\"form.create_table_form.ajax\").live('submit', function (event) {\n        event.preventDefault();\n\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this);\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            PMA_prepareForAjaxRequest($form);\n            //User wants to submit the form\n            $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n                if (data.success === true) {\n                    $('#properties_message')\n                     .removeClass('error')\n                     .html('');\n                    PMA_ajaxShowMessage(data.message);\n                    // Only if the create table dialog (distinct panel) exists\n                    if ($(\"#create_table_dialog\").length > 0) {\n                        $(\"#create_table_dialog\").dialog(\"close\").remove();\n                    }\n                    $('#tableslistcontainer').before(data.formatted_sql);\n\n                    /**\n                     * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                     */\n                    var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                    // this is the first table created in this db\n                    if (tables_table.length === 0) {\n                        PMA_commonActions.refreshMain(\n                            PMA_commonParams.get('opendb_url')\n                        );\n                    } else {\n                        /**\n                         * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                         */\n                        var curr_last_row = $(tables_table).find('tr:last');\n                        /**\n                         * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                         */\n                        var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                        /**\n                         * @var curr_last_row_index Index of {@link curr_last_row}\n                         */\n                        var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                        /**\n                         * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                         */\n                        var new_last_row_index = curr_last_row_index + 1;\n                        /**\n                         * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                         */\n                        var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                        data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                        //append to table\n                        $(data.new_table_string)\n                         .appendTo(tables_table);\n\n                        //Sort the table\n                        $(tables_table).PMA_sort_table('th');\n\n                        // Adjust summary row\n                        PMA_adjustTotals();\n                    }\n\n                    //Refresh navigation as a new table has been added\n                    PMA_reloadNavigation();\n                } else {\n                    PMA_ajaxShowMessage(\n                        '<div class=\"error\">' + data.error + '</div>',\n                        false\n                    );\n                }\n            }); // end $.post()\n        } // end if (checkTableEditForm() )\n    }); // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     */\n    $(\"form.create_table_form.ajax input[name=submit_num_fields]\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this).closest('form');\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=1\", function (data) {\n            if (data.success) {\n                $(\"#page_content\").html(data.message);\n                PMA_highlightSQL($('#page_content'));\n                PMA_verifyColumnsProperties();\n                PMA_ajaxRemoveMessage($msgbox);\n            } else {\n                PMA_ajaxShowMessage(data.error);\n            }\n        }); //end $.post()\n    }); // end create table form (add fields)\n\n    $(\"form.create_table_form.ajax input\").live('keydown', function (event) {\n        if (event.keyCode == 13) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            $(this)\n                .closest('form')\n                .append('<input type=\"hidden\" name=\"do_save_data\" value=\"1\" />')\n                .submit();\n        }\n    });\n});\n\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#copyTable.ajax\").die('submit');\n    $(\"#moveTableForm\").die('submit');\n    $(\"#tableOptionsForm\").die('submit');\n    $(\"#tbl_maintenance li a.maintain_action.ajax\").die('click');\n});\n/**\n * jQuery coding for 'Table operations'.  Used on tbl_operations.php\n * Attach Ajax Event handlers for Table operations\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     *Ajax action for submitting the \"Copy table\"\n    **/\n    $(\"#copyTable.ajax\").live('submit', function (event) {\n        event.preventDefault();\n        var $form = $(this);\n        PMA_prepareForAjaxRequest($form);\n        $.post($form.attr('action'), $form.serialize() + \"&submit_copy=Go\", function (data) {\n            if (data.success === true) {\n                if ($form.find(\"input[name='switch_to_new']\").prop('checked')) {\n                    PMA_commonParams.set(\n                        'db',\n                        data.db\n                    );\n                    PMA_commonParams.set(\n                        'table',\n                        $form.find(\"input[name='new_name']\").val()\n                    );\n                    PMA_commonActions.refreshMain(false, function () {\n                        PMA_ajaxShowMessage(data.message);\n                    });\n                } else {\n                    PMA_ajaxShowMessage(data.message);\n                }\n                // Refresh navigation when the table is copied\n                PMA_reloadNavigation();\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.post()\n    });//end of copyTable ajax submit\n\n    /**\n     *Ajax action for submitting the \"Move table\"\n     */\n    $(\"#moveTableForm\").live('submit', function (event) {\n        event.preventDefault();\n        var $form = $(this);\n        var db = $form.find('select[name=target_db]').val();\n        var tbl = $form.find('input[name=new_name]').val();\n        PMA_prepareForAjaxRequest($form);\n        $.post($form.attr('action'), $form.serialize() + \"&submit_move=1\", function (data) {\n            if (data.success === true) {\n                PMA_commonParams.set('db', db);\n                PMA_commonParams.set('table', tbl);\n                PMA_commonActions.refreshMain(false, function () {\n                    PMA_ajaxShowMessage(data.message);\n                });\n                // Refresh navigation when the table is copied\n                PMA_reloadNavigation();\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.post()\n    });\n\n    /**\n     * Ajax action for submitting the \"Table options\"\n     */\n    $(\"#tableOptionsForm\").live('submit', function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var $form = $(this);\n        var $tblNameField = $form.find('input[name=new_name]');\n        if ($tblNameField.val() !== $tblNameField[0].defaultValue) {\n            // reload page and navigation if the table has been renamed\n            PMA_prepareForAjaxRequest($form);\n            var tbl = $tblNameField.val();\n            $.post($form.attr('action'), $form.serialize(), function (data) {\n                if (data.success === true) {\n                    PMA_commonParams.set('table', tbl);\n                    PMA_commonActions.refreshMain(false, function () {\n                        $('#page_content').html(data.message);\n                        PMA_highlightSQL($('#page_content'));\n                    });\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.post()\n        } else {\n            $form.removeClass('ajax').submit().addClass('ajax');\n        }\n    });\n\n    /**\n     *Ajax events for actions in the \"Table maintenance\"\n    **/\n    $(\"#tbl_maintenance li a.maintain_action.ajax\").live('click', function (event) {\n        event.preventDefault();\n        if ($(\"#sqlqueryresults\").length !== 0) {\n            $(\"#sqlqueryresults\").remove();\n        }\n        if ($(\"#result_query\").length !== 0) {\n            $(\"#result_query\").remove();\n        }\n        //variables which stores the common attributes\n        $.post($(this).attr('href'), { ajax_request: 1 }, function (data) {\n            function scrollToTop() {\n                $('html, body').animate({ scrollTop: 0 });\n            }\n            if (data.success === true && data.sql_query !== undefined) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").prependTo(\"#page_content\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n                PMA_highlightSQL($('#page_content'));\n                scrollToTop();\n            } else if (data.success === true) {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.message);\n                var $success = $temp_div.find(\"#result_query .success\");\n                PMA_ajaxShowMessage($success);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").prependTo(\"#page_content\");\n                $(\"#sqlqueryresults\").html(data.message);\n                PMA_highlightSQL($('#page_content'));\n                PMA_init_slider();\n                $(\"#sqlqueryresults\").children(\"fieldset,br\").remove();\n                scrollToTop();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    });//end of table maintanance ajax click\n}); //end $(document).ready for 'Table operations'\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#drop_db_anchor.ajax\").die('click');\n});\n/**\n * Attach Ajax event handlers for Drop Database. Moved here from db_structure.js\n * as it was also required on db_create.php\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"#drop_db_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropDatabaseStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP DATABASE ' + escapeHtml(PMA_commonParams.get('db'))\n        );\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success) {\n                    //Database deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('db', '');\n                    PMA_commonActions.refreshMain(\n                        'server_databases.php',\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            });\n        });\n    });\n}); // end of $() for Drop Database\n\n/**\n * Validates the password field in a form\n *\n * @see    PMA_messages.strPasswordEmpty\n * @see    PMA_messages.strPasswordNotSame\n * @param  object $the_form The form to be validated\n * @return bool\n */\nfunction PMA_checkPassword($the_form)\n{\n    // Did the user select 'no password'?\n    if ($the_form.find('#nopass_1').is(':checked')) {\n        return true;\n    } else {\n        var $pred = $the_form.find('#select_pred_password');\n        if ($pred.length && ($pred.val() == 'none' || $pred.val() == 'keep')) {\n            return true;\n        }\n    }\n\n    var $password = $the_form.find('input[name=pma_pw]');\n    var $password_repeat = $the_form.find('input[name=pma_pw2]');\n    var alert_msg = false;\n\n    if ($password.val() === '') {\n        alert_msg = PMA_messages.strPasswordEmpty;\n    } else if ($password.val() != $password_repeat.val()) {\n        alert_msg = PMA_messages.strPasswordNotSame;\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        $password.val('');\n        $password_repeat.val('');\n        $password.focus();\n        return false;\n    }\n    return true;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('#change_password_anchor.ajax').die('click');\n});\n/**\n * Attach Ajax event handlers for 'Change Password' on index.php\n */\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     */\n    $('#change_password_anchor.ajax').live('click', function (event) {\n        event.preventDefault();\n\n        var $msgbox = PMA_ajaxShowMessage();\n\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages.strGo] = function () {\n\n            event.preventDefault();\n\n            /**\n             * @var $the_form    Object referring to the change password form\n             */\n            var $the_form = $(\"#change_password_form\");\n\n            if (! PMA_checkPassword($the_form)) {\n                return false;\n            }\n\n            /**\n             * @var this_value  String containing the value of the submit button.\n             * Need to append this for the change password form on Server Privileges\n             * page to work\n             */\n            var this_value = $(this).val();\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $the_form.append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n            $.post($the_form.attr('action'), $the_form.serialize() + '&change_pw=' + this_value, function (data) {\n                if (data.success === true) {\n                    $(\"#page_content\").prepend(data.message);\n                    PMA_highlightSQL($('#page_content'));\n                    $(\"#change_password_dialog\").hide().remove();\n                    $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                    PMA_ajaxRemoveMessage($msgbox);\n                }\n                else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.post()\n        };\n\n        button_options[PMA_messages.strCancel] = function () {\n            $(this).dialog('close');\n        };\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success) {\n                $('<div id=\"change_password_dialog\"></div>')\n                .dialog({\n                    title: PMA_messages.strChangePassword,\n                    width: 600,\n                    close: function (ev, ui) {\n                        $(this).remove();\n                    },\n                    buttons : button_options,\n                    modal: true\n                })\n                .append(data.message);\n                // for this dialog, we remove the fieldset wrapping due to double headings\n                $(\"fieldset#fieldset_change_password\")\n                .find(\"legend\").remove().end()\n                .find(\"table.noclick\").unwrap().addClass(\"some-margin\")\n                .find(\"input#text_pma_pw\").focus();\n                displayPasswordGenerateButton();\n                $('#fieldset_change_password_footer').hide();\n                PMA_ajaxRemoveMessage($msgbox);\n                $('#change_password_form').bind('submit', function (e) {\n                    e.preventDefault();\n                    $(this)\n                        .closest('.ui-dialog')\n                        .find('.ui-dialog-buttonpane .ui-button')\n                        .first()\n                        .click();\n                });\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end handler for change password anchor\n}); // end $() for Change Password\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"select.column_type\").die('change');\n    $(\"select.default_type\").die('change');\n    $('input.allow_null').die('change');\n});\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\nAJAX.registerOnload('functions.js', function () {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs live() to work also in the Create Table dialog\n    $(\"select.column_type\").live('change', function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").live('change', function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $('input.allow_null').live('change', function () {\n        PMA_validateDefaultValue($(this));\n    });\n});\n\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select.column_type\").each(function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").each(function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n * Ticks the NULL checkbox if NULL is chosen as default value.\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n        if ($default_type.val() == 'NULL') {\n            var $null_checkbox = $default_type.closest('tr').find('.allow_null');\n            $null_checkbox.prop('checked', true);\n        }\n    }\n}\n\n/**\n * If the column does not allow NULL values, makes sure that default is not NULL\n */\nfunction PMA_validateDefaultValue($null_checkbox)\n{\n    if (! $null_checkbox.prop('checked')) {\n        var $default = $null_checkbox.closest('tr').find('.default_type');\n        if ($default.val() == 'NULL') {\n            $default.val('NONE');\n        }\n    }\n}\n\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"a.open_enum_editor\").die('click');\n    $(\"input.add_value\").die('click');\n    $(\"#enum_editor td.drop\").die('click');\n});\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"a.open_enum_editor\").live('click', function () {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        var title;\n        var i;\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            title = PMA_messages.enum_newColumnVals;\n        } else {\n            title = PMA_messages.enum_columnVals.replace(\n                /%s/,\n                '\"' + decodeURIComponent(colname) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (i = 0; i < inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i + 1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length === 0) {\n            values.push('', '', '', '');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (i = 0; i < values.length; i++) {\n            fields += \"<tr><td>\" +\n                   \"<input type='text' value='\" + values[i] + \"'/>\" +\n                   \"</td><td class='drop'>\" +\n                   drop_icon +\n                   \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\" +\n                   \"<fieldset>\" +\n                    \"<legend>\" + title + \"</legend>\" +\n                    \"<p>\" + PMA_getImage('s_notice.png') +\n                    PMA_messages.enum_hint + \"</p>\" +\n                    \"<table class='values'>\" + fields + \"</table>\" +\n                    \"</fieldset><fieldset class='tblFooters'>\" +\n                    \"<table class='add'><tr><td>\" +\n                    \"<div class='slider'></div>\" +\n                    \"</td><td>\" +\n                    \"<form><div><input type='submit' class='add_value' value='\" +\n                    $.sprintf(PMA_messages.enum_addValue, 1) +\n                    \"'/></div></form>\" +\n                    \"</td></tr></table>\" +\n                    \"<input type='hidden' value='\" + // So we know which column's data is being edited\n                    $(this).closest('td').find(\"input\").attr(\"id\") +\n                    \"' />\" +\n                    \"</fieldset>\" +\n                    \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages.strGo] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = [];\n            $(this).find(\".values input\").each(function (index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").val();\n            $(\"input#\" + values_id).val(value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages.strClose] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            modal: true,\n            title: PMA_messages.enum_editor,\n            buttons: buttonOptions,\n            open: function () {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function (event, ui) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    $.sprintf(PMA_messages.enum_addValue, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('a.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    // When \"add a new value\" is clicked, append an empty text field\n    $(\"input.add_value\").live('click', function (e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\" +\n                    \"<input type='text' />\" +\n                    \"</td><td class='drop'>\" +\n                    PMA_getImage('b_drop.png') +\n                    \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(\"#enum_editor td.drop\").live('click', function () {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param string   form_id  Variable which parses the form name as\n *                            the input\n * @return boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\" + form_id).length === 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_type = $(\"#select_index_type\");\n\n    // Index is a primary key\n    if ($the_idx_type.find(\"option:selected\").val() == 'PRIMARY') {\n        $the_idx_name.val('PRIMARY');\n        $the_idx_name.prop(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.val() == 'PRIMARY') {\n            $the_idx_name.val(\"\");\n        }\n        $the_idx_name.prop(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\nAJAX.registerTeardown('functions.js', function () {\n    $('#index_frm input[type=submit]').die('click');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handler for adding more columns to an index in the editor\n     */\n    $('#index_frm input[type=submit]').live('click', function (event) {\n        event.preventDefault();\n        var rows_to_add = $(this)\n            .closest('fieldset')\n            .find('.slider')\n            .slider('value');\n        while (rows_to_add--) {\n            var $newrow = $('#index_columns')\n                .find('tbody > tr:first')\n                .clone()\n                .appendTo(\n                    $('#index_columns').find('tbody')\n                );\n            $newrow.find(':input').each(function () {\n                $(this).val('');\n            });\n            // focus index size input on column picked\n            $newrow.find('select').change(function () {\n                if ($(this).find(\"option:selected\").val() === '') {\n                    return true;\n                }\n                $(this).closest(\"tr\").find(\"input\").focus();\n            });\n        }\n    });\n});\n\nfunction indexEditorDialog(url, title, callback_success, callback_failure)\n{\n    /*Remove the hidden dialogs if there are*/\n    if ($('#edit_index_dialog').length !== 0) {\n        $('#edit_index_dialog').remove();\n    }\n    var $div = $('<div id=\"edit_index_dialog\"></div>');\n\n    /**\n     * @var button_options Object that stores the options\n     *                     passed to jQueryUI dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strGo] = function () {\n        /**\n         * @var    the_form    object referring to the export form\n         */\n        var $form = $(\"#index_frm\");\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n        //User wants to submit the form\n        $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n            if ($(\"#sqlqueryresults\").length !== 0) {\n                $(\"#sqlqueryresults\").remove();\n            }\n            if (data.success === true) {\n                PMA_ajaxShowMessage(data.message);\n                if ($('#result_query').length) {\n                    $('#result_query').remove();\n                }\n                if (data.sql_query) {\n                    $('<div id=\"result_query\"></div>')\n                        .html(data.sql_query)\n                        .prependTo('#page_content');\n                    PMA_highlightSQL($('#page_content'));\n                }\n                $(\"#result_query .notice\").remove();\n                $(\"#result_query\").prepend(data.message);\n                /*Reload the field form*/\n                $(\"#table_index\").remove();\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.index_table);\n                $temp_div.find(\"#table_index\").insertAfter(\"#index_header\");\n                if ($(\"#edit_index_dialog\").length > 0) {\n                    $(\"#edit_index_dialog\").dialog(\"close\");\n                }\n                $('div.no_indexes_defined').hide();\n                if (callback_success) {\n                    callback_success();\n                }\n                PMA_reloadNavigation();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.error);\n                var $error;\n                if ($temp_div.find(\".error code\").length !== 0) {\n                    $error = $temp_div.find(\".error code\").addClass(\"error\");\n                } else {\n                    $error = $temp_div;\n                }\n                if (callback_failure) {\n                    callback_failure();\n                }\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog('close');\n    };\n    var $msgbox = PMA_ajaxShowMessage();\n    $.get(\"tbl_indexes.php\", url, function (data) {\n        if (data.success === false) {\n            //in the case of an error, show the error message returned.\n            PMA_ajaxShowMessage(data.error, false);\n        } else {\n            PMA_ajaxRemoveMessage($msgbox);\n            // Show dialog if the request was successful\n            $div\n            .append(data.message)\n            .dialog({\n                title: title,\n                width: 450,\n                // increase the chance that the footer will be visible:\n                height: 450,\n                open: PMA_verifyColumnsProperties,\n                modal: true,\n                buttons: button_options,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            checkIndexType();\n            checkIndexName(\"index_frm\");\n            PMA_showHints($div);\n            // Add a slider for selecting how many columns to add to the index\n            $div.find('.slider').slider({\n                animate: true,\n                value: 1,\n                min: 1,\n                max: 16,\n                slide: function (event, ui) {\n                    $(this).closest('fieldset').find('input[type=submit]').val(\n                        $.sprintf(PMA_messages.strAddToIndex, ui.value)\n                    );\n                }\n            });\n            // focus index size input on column picked\n            $div.find('table#index_columns select').change(function () {\n                if ($(this).find(\"option:selected\").val() === '') {\n                    return true;\n                }\n                $(this).closest(\"tr\").find(\"input\").focus();\n            });\n            // Focus the slider, otherwise it looks nearly transparent\n            $('a.ui-slider-handle').addClass('ui-state-focus');\n            // set focus on index name input, if empty\n            var input = $div.find('input#input_index_name');\n            input.val() || input.focus();\n        }\n    }); // end $.get()\n}\n\n/**\n * Function to display tooltips that were\n * generated on the PHP side by PMA_Util::showHint()\n *\n * @param object $div a div jquery object which specifies the\n *                    domain for searching for tooltips. If we\n *                    omit this parameter the function searches\n *                    in the whole body\n **/\nfunction PMA_showHints($div)\n{\n    if ($div === undefined || ! $div instanceof jQuery || $div.length === 0) {\n        $div = $(\"body\");\n    }\n    $div.find('.pma_hint').each(function () {\n        PMA_tooltip(\n            $(this).children('img'),\n            'img',\n            $(this).children('span').html()\n        );\n    });\n}\n\nAJAX.registerOnload('functions.js', function () {\n    PMA_showHints();\n});\n\nfunction PMA_mainMenuResizerCallback() {\n    // 5 px margin for jumping menu in Chrome\n    return $(document.body).width() - 5;\n}\n// This must be fired only once after the inital page load\n$(function () {\n    // Initialise the menu resize plugin\n    $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);\n    // register resize event\n    $(window).resize(function () {\n        $('#topmenu').menuResizer('resize');\n    });\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1], 10);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text;\n    if ($element.css('display') == 'none') {\n        text = '+ ';\n    } else {\n        text = '- ';\n    }\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    var right;\n    if ($('span.text_direction', $obj).text() == 'ltr') {\n        right = 'right';\n    } else {\n        right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h - 1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('td.toggleOn', $obj).width();\n    var off = $('td.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('td.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('td.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('td.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('td.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('div.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('div.container', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('div.container', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('div.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('span.callback', this).text();\n        var operator, url, removeClass, addClass;\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                operator = '-=';\n            } else {\n                operator = '+=';\n            }\n            url = $(this).find('td.toggleOff > span').text();\n            removeClass = 'on';\n            addClass = 'off';\n        } else {\n            if (right == 'right') {\n                operator = '+=';\n            } else {\n                operator = '-=';\n            }\n            url = $(this).find('td.toggleOn > span').text();\n            removeClass = 'off';\n            addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.container').unbind('click');\n});\n/**\n * Initialise all toggle buttons\n */\nAJAX.registerOnload('functions.js', function () {\n    $('div.toggleAjax').each(function () {\n        var $button = $(this).show();\n        $button.find('img').each(function () {\n            if (this.complete) {\n                toggleButton($button);\n            } else {\n                $(this).load(function () {\n                    toggleButton($button);\n                });\n            }\n        });\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('.vpointer').die('hover');\n    $('.vmarker').die('click');\n    $('#pageselector').die('change');\n    $('a.formLinkSubmit').die('click');\n    $('#update_recent_tables').unbind('ready');\n    $('#sync_favorite_tables').unbind('ready');\n});\n/**\n * Vertical pointer\n */\nAJAX.registerOnload('functions.js', function () {\n    $('.vpointer').live('hover',\n        //handlerInOut\n        function (e) {\n            var $this_td = $(this);\n            var row_num = PMA_getRowNumber($this_td.attr('class'));\n            // for all td of the same vertical row, toggle hover\n            $('.vpointer').filter('.row_' + row_num).toggleClass('hover');\n        }\n    );\n\n\n    /**\n     * Vertical marker\n     */\n    $('.vmarker').live('click', function (e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n\n        var $this_td = $(this);\n        var row_num = PMA_getRowNumber($this_td.attr('class'));\n\n        // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n        var $checkbox = $('.vmarker').filter('.row_' + row_num + ':first').find(':checkbox');\n        if ($checkbox.length) {\n            // checkbox in a row, add or remove class depending on checkbox state\n            var checked = $checkbox.prop('checked');\n            if (!$(e.target).is(':checkbox, label')) {\n                checked = !checked;\n                $checkbox.prop('checked', checked);\n            }\n            // for all td of the same vertical row, toggle the marked class\n            if (checked) {\n                $('.vmarker').filter('.row_' + row_num).addClass('marked');\n            } else {\n                $('.vmarker').filter('.row_' + row_num).removeClass('marked');\n            }\n        } else {\n            // normaln data table, just toggle class\n            $('.vmarker').filter('.row_' + row_num).toggleClass('marked');\n        }\n    });\n\n    /**\n     * Autosubmit page selector\n     */\n    $('select.pageselector').live('change', function (event) {\n        event.stopPropagation();\n        // Check where to load the new content\n        if ($(this).closest(\"#pma_navigation\").length === 0) {\n            // For the main page we don't need to do anything,\n            $(this).closest(\"form\").submit();\n        } else {\n            // but for the navigation we need to manually replace the content\n            PMA_navigationTreePagination($(this));\n        }\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('li.jsversioncheck').length > 0) {\n        $.getJSON('version_check.php', {}, PMA_current_version);\n    }\n\n    if ($('#is_git_revision').length > 0) {\n        setTimeout(PMA_display_git_revision, 10);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_Util::linkOrButton() to be clickable\n     */\n    $('a.formLinkSubmit').live('click', function (e) {\n\n        if ($(this).attr('href').indexOf('=') != -1) {\n            var data = $(this).attr('href').substr($(this).attr('href').indexOf('#') + 1).split('=', 2);\n            $(this).parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n        }\n        $(this).parents('form').submit();\n        return false;\n    });\n\n    if ($('#update_recent_tables').length) {\n        $.get(\n            $('#update_recent_tables').attr('href'),\n            function (data) {\n                if (data.success === true) {\n                    $('#pma_recent_list').html(data.list);\n                }\n            }\n        );\n    }\n\n    // Sync favorite tables from localStorage to pmadb.\n    if ($('#sync_favorite_tables').length) {\n        $.ajax({\n            url: $('#sync_favorite_tables').attr(\"href\"),\n            cache: false,\n            type: 'POST',\n            data: {\n                favorite_tables: (window.localStorage['favorite_tables']\n                    !== undefined)\n                    ? window.localStorage['favorite_tables']\n                    : ''\n            },\n            success: function (data) {\n                // Update localStorage.\n                if (window.localStorage !== undefined) {\n                    window.localStorage['favorite_tables']\n                        = data.favorite_tables;\n                }\n                $('#pma_favorite_list').html(data.list);\n            }\n        });\n    }\n}); // end of $()\n\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        if ($this.data('slider_init_done')) {\n            return;\n        }\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#' + this.id, \"class\": 'ajax'})\n            .text(this.title)\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function () {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function () {\n                    $wrapper.toggle(!visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        PMA_set_status_label($this);\n        $this.data('slider_init_done', 1);\n    });\n}\n\n/**\n * Initializes slider effect.\n */\nAJAX.registerOnload('functions.js', function () {\n    PMA_init_slider();\n});\n\n/**\n * Restores sliders to the state they were in before initialisation.\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        $this.removeData();\n        $this.parent().replaceWith($this);\n        $this.parent().children('a').remove();\n    });\n});\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param msg    A string containing the text to display\n * @param $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg === undefined || msg.length === 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj === undefined || ! $obj instanceof jQuery || $obj.length === 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length === 0) {\n            $('#page_content').prepend(\n                '<span id=\"PMA_slidingMessage\" ' +\n                'style=\"display: inline-block;\"></span>'\n            );\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div>' + msg + '</div>');\n            // highlight any sql before taking height;\n            PMA_highlightSQL($obj);\n            $obj.find('div')\n                .first()\n                .hide();\n            $obj\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        $obj.width('100%')\n            .html('<div>' + msg + '</div>');\n        // highlight any sql before taking height;\n        PMA_highlightSQL($obj);\n        var h = $obj\n            .find('div')\n            .first()\n            .hide()\n            .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function () {\n            // Set the height of the parent\n            // to the height of the child\n                $obj\n                .height(\n                    $obj\n                    .find('div')\n                    .first()\n                    .height()\n                );\n            });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#drop_tbl_anchor.ajax\").die('click');\n    $(\"#drop_view_anchor.ajax\").die('click');\n    $(\"#truncate_tbl_anchor.ajax\").die('click');\n});\n/**\n * Attach Ajax event handlers for Drop Table.\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"#drop_tbl_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP TABLE ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    PMA_ajaxRemoveMessage($msgbox);\n                    // Table deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('table', '');\n                    PMA_commonActions.refreshMain(\n                        PMA_commonParams.get('opendb_url'),\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Table Ajax action\n\n    $(\"#drop_view_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP VIEW ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    PMA_ajaxRemoveMessage($msgbox);\n                    // Table deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('table', '');\n                    PMA_commonActions.refreshMain(\n                        PMA_commonParams.get('opendb_url'),\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop View Ajax action\n\n    $(\"#truncate_tbl_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strTruncateTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'TRUNCATE ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if ($(\"#sqlqueryresults\").length !== 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length !== 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success === true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").prependTo(\"#page_content\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                    PMA_highlightSQL($('#page_content'));\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Truncate Table Ajax action\n}); // end of $() for Truncate Table\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\nAJAX.registerOnload('functions.js', function () {\n    var $elm = $('#sqlquery');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            // for codemirror\n            codemirror_editor = CodeMirror.fromTextArea($elm[0], {\n                lineNumbers: true,\n                matchBrackets: true,\n                indentUnit: 4,\n                mode: \"text/x-mysql\",\n                lineWrapping: true\n            });\n            codemirror_editor.focus();\n            $(codemirror_editor.getWrapperElement()).bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        } else {\n            // without codemirror\n            $elm.focus().bind('keydown', catchKeypressesFromSqlTextboxes);\n        }\n    }\n    PMA_highlightSQL($('body'));\n});\nAJAX.registerTeardown('functions.js', function () {\n    if (codemirror_editor) {\n        $('#sqlquery').text(codemirror_editor.getValue());\n        codemirror_editor.toTextArea();\n        codemirror_editor = false;\n    }\n});\n\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p === null) ? true : p;\n        if (prevent) {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) {\n                    $(this).bind('selectstart', function () {\n                        return false;\n                    });\n                } else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if ($.browser.opera) {\n                    $(this).bind('mousedown', function () {\n                        return false;\n                    });\n                } else {\n                    $(this).attr('unselectable', 'on');\n                }\n            });\n        } else {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) {\n                    $(this).unbind('selectstart');\n                } else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'inherit');\n                } else if ($.browser.opera) {\n                    $(this).unbind('mousedown');\n                } else {\n                    $(this).removeAttr('unselectable');\n                }\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value;\n        });\n    };\n})(jQuery);\n\n/**\n * Create a jQuery UI tooltip\n *\n * @param $elements     jQuery object representing the elements\n * @param item          the item\n *                      (see http://api.jqueryui.com/tooltip/#option-items)\n * @param myContent     content of the tooltip\n * @param additionalOptions to override the default options\n *\n */\nfunction PMA_tooltip($elements, item, myContent, additionalOptions)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var defaultOptions = {\n        content: myContent,\n        items:  item,\n        tooltipClass: \"tooltip\",\n        track: true,\n        show: false,\n        hide: false\n    };\n\n    $elements.tooltip($.extend(true, defaultOptions, additionalOptions));\n}\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    var $td = $(td);\n    if ($td.is('.null')) {\n        return '';\n    } else if (! $td.is('.to_be_saved') && $td.data('original_data')) {\n        return $td.data('original_data');\n    } else {\n        return $td.text();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('a.themeselect').die('click');\n    $('.autosubmit').die('change');\n    $('a.take_theme').unbind('click');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Theme selector.\n     */\n    $('a.themeselect').live('click', function (e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $('.autosubmit').live('change', function (e) {\n        $(this).closest('form').submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('a.take_theme').click(function (e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms['setTheme'].elements['set_theme']) {\n            window.opener.document.forms['setTheme'].elements['set_theme'].value = what;\n            window.opener.document.forms['setTheme'].submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if (document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if (window.getSelection) {\n        var sel = window.getSelection();\n        if (sel.empty) {\n            sel.empty();\n        }\n        if (sel.removeAllRanges) {\n            sel.removeAllRanges();\n        }\n    }\n}\n\n/**\n * HTML escaping\n */\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input#print').unbind('click');\n    $('a.create_view.ajax').die('click');\n    $('#createViewDialog').find('input, select').die('keydown');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    $('input#print').click(printPage);\n    /**\n     * Ajaxification for the \"Create View\" action\n     */\n    $('a.create_view.ajax').live('click', function (e) {\n        e.preventDefault();\n        PMA_createViewDialog($(this));\n    });\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and used to submit the Ajax request when the ENTER key is pressed.\n     */\n    if ($('#createViewDialog').length !== 0) {\n        $('#createViewDialog').find('input, select').live('keydown', function (e) {\n            if (e.which === 13) { // 13 is the ENTER key\n                e.preventDefault();\n\n                // with preventing default, selection by <select> tag\n                // was also prevented in IE\n                $(this).blur();\n\n                $(this).closest('.ui-dialog').find('.ui-button:first').click();\n            }\n        }); // end $.live()\n    }\n\n    var $elm = $('textarea[name=\"view[as]\"]');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            syntaxHighlighter = CodeMirror.fromTextArea(\n                $elm[0],\n                {\n                    lineNumbers: true,\n                    matchBrackets: true,\n                    indentUnit: 4,\n                    mode: \"text/x-mysql\",\n                    lineWrapping: true\n                }\n            );\n        }\n    }\n});\n\nfunction PMA_createViewDialog($this)\n{\n    var $msg = PMA_ajaxShowMessage();\n    var syntaxHighlighter = null;\n    $.get($this.attr('href') + '&ajax_request=1&ajax_dialog=1', function (data) {\n        if (data.success === true) {\n            PMA_ajaxRemoveMessage($msg);\n            var buttonOptions = {};\n            buttonOptions[PMA_messages.strGo] = function () {\n                if (typeof CodeMirror !== 'undefined') {\n                    syntaxHighlighter.save();\n                }\n                $msg = PMA_ajaxShowMessage();\n                $.get('view_create.php', $('#createViewDialog').find('form').serialize(), function (data) {\n                    PMA_ajaxRemoveMessage($msg);\n                    if (data.success === true) {\n                        $('#createViewDialog').dialog(\"close\");\n                        $('#result_query').html(data.message);\n                        PMA_reloadNavigation();\n                    } else {\n                        PMA_ajaxShowMessage(data.error, false);\n                    }\n                });\n            };\n            buttonOptions[PMA_messages.strClose] = function () {\n                $(this).dialog(\"close\");\n            };\n            var $dialog = $('<div/>').attr('id', 'createViewDialog').append(data.message).dialog({\n                width: 600,\n                minWidth: 400,\n                modal: true,\n                buttons: buttonOptions,\n                title: PMA_messages.strCreateView,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            // Attach syntax highlighted editor\n            if (typeof CodeMirror !== 'undefined') {\n                var $elm = $dialog.find('textarea');\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\", lineWrapping: true};\n                syntaxHighlighter = CodeMirror.fromTextArea($elm[0], opts);\n            }\n            $('input:visible[type=text]', $dialog).first().focus();\n        } else {\n            PMA_ajaxShowMessage(data.error);\n        }\n    });\n}\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length === 0) {\n        var left = $('html').attr('dir') == 'ltr' ? 'left' : 'right';\n        $(\"#floating_menubar\")\n            .css('margin-' + left, $('#pma_navigation').width() + $('#pma_navigation_resizer').width())\n            .css(left, 0)\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'width': '100%',\n                'z-index': 500\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        // Allow the DOM to render, then adjust the padding on the body\n        setTimeout(function () {\n            $('body').css(\n                'padding-top',\n                $('#floating_menubar').outerHeight(true)\n            );\n            $('#topmenu').menuResizer('resize');\n        }, 4);\n    }\n});\n\n/**\n * Scrolls the page to the top if clicking the serverinfo bar\n */\n$(function () {\n    $(document).delegate(\"#serverinfo, #goto_pagetop\", \"click\", function (event) {\n        event.preventDefault();\n        $('html, body').animate({scrollTop: 0}, 'fast');\n    });\n});\n\nvar checkboxes_sel = \"input.checkall:checkbox:enabled\";\n/**\n * Watches checkboxes in a form to set the checkall box accordingly\n */\nvar checkboxes_changed = function () {\n    var $form = $(this.form);\n    // total number of checkboxes in current form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(checkboxes_sel).live(\"change\", checkboxes_changed);\n\n$(\"input.checkall_box\").live(\"change\", function () {\n    var is_checked = $(this).is(\":checked\");\n    $(this.form).find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n\n/**\n * Formats a byte number to human-readable form\n *\n * @param bytes the bytes to format\n * @param optional subdecimals the number of digits after the point\n * @param optional pointchar the char to use as decimal point\n */\nfunction formatBytes(bytes, subdecimals, pointchar) {\n    if (!subdecimals) {\n        subdecimals = 0;\n    }\n    if (!pointchar) {\n        pointchar = '.';\n    }\n    var units = ['B', 'KiB', 'MiB', 'GiB'];\n    for (var i = 0; bytes > 1024 && i < units.length; i++) {\n        bytes /= 1024;\n    }\n    var factor = Math.pow(10, subdecimals);\n    bytes = Math.round(bytes * factor) / factor;\n    bytes = bytes.toString().split('.').join(pointchar);\n    return bytes + ' ' + units[i];\n}\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Opens pma more themes link in themes browser, in new window instead of popup\n     * This way, we don't break HTML validity\n     */\n    $(\"a._blank\").prop(\"target\", \"_blank\");\n    /**\n     * Reveal the login form to users with JS enabled\n     * and focus the appropriate input field\n     */\n    var $loginform = $('#loginform');\n    if ($loginform.length) {\n        $loginform.find('.js-show').show();\n        if ($('#input_username').val()) {\n            $('#input_password').focus();\n        } else {\n            $('#input_username').focus();\n        }\n    }\n});\n\n/**\n * When user gets an ajax session expiry message, we show a login link\n */\n$('a.login-link').live('click', function (e) {\n    e.preventDefault();\n    window.location.reload(true);\n});\n\n/**\n * Dynamically adjust the width of the boxes\n * on the table and db operations pages\n */\n(function () {\n    function DynamicBoxes() {\n        var $boxContainer = $('#boxContainer');\n        if ($boxContainer.length) {\n            var minWidth = $boxContainer.data('box-width');\n            var viewport = $(window).width() - $('#pma_navigation').width();\n            var slots = Math.floor(viewport / minWidth);\n            $boxContainer.children()\n            .each(function () {\n                if (viewport < minWidth) {\n                    $(this).width(minWidth);\n                } else {\n                    $(this).css('width', ((1 /  slots) * 100) + \"%\");\n                }\n            })\n            .removeClass('clearfloat')\n            .filter(':nth-child(' + slots + 'n+1)')\n            .addClass('clearfloat');\n        }\n    }\n    AJAX.registerOnload('functions.js', function () {\n        DynamicBoxes();\n    });\n    $(function () {\n        $(window).resize(DynamicBoxes);\n    });\n})();\n\n/**\n * Formats timestamp for display\n */\nfunction PMA_formatDateTime(date, seconds) {\n    var result = $.datepicker.formatDate('yy-mm-dd', date);\n    var timefmt = 'HH:mm';\n    if (seconds) {\n        timefmt = 'HH:mm:ss';\n    }\n    return result + ' ' + $.datepicker.formatTime(\n        timefmt, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds()\n        }\n    );\n}\n\n/**\n * Check than forms have less fields than max allowed by PHP.\n */\nfunction checkNumberOfFields() {\n    if (typeof maxInputVars === 'undefined') {\n        return false;\n    }\n    if (false === maxInputVars) {\n        return false;\n    }\n    $('form').each(function() {\n        var nbInputs = $(this).find(':input').length;\n        if (nbInputs > maxInputVars) {\n            var warning = $.sprintf(PMA_messages.strTooManyInputs, maxInputVars);\n            PMA_ajaxShowMessage(warning);\n            return false;\n        }\n        return true;\n    });\n\n    return true;\n}\n"], "fixing_code": ["phpMyAdmin - ChangeLog\n======================\n\n4.2.7.1 (2014-08-17)\n- bug #4501 [security] XSS in table browse page\n- bug #4502 [security] Self-XSS in enum value editor\n- bug #4505 [security] XSS in view operations page\n\n4.2.7.0 (2014-07-31)\n- bug       Broken links on home page\n- bug #4494 Overlap in navigation panel\n- bug #4427 Action icons not in horizontal order\n- bug #4493 s_attention.png is missing\n- bug #4499 Uncaught TypeError: Cannot call method 'substr' of undefined\n- bug #4498 PMA 4.2.x and HHVM\n- bug #4500 mysql_doc_template is not defined\n\n4.2.6.0 (2014-07-17)\n- bug #4471 Undefined index warning with referenced column.\n- bug #4027 $cfg['MaxExactCount'] is ignored when BROWSING is back\n- bug #4482 Multi Column sorting (improved user experience)\n- bug #4478 Server validation does not work while in setup/mysqli\n- bug       Undefined variable when grid editing a foreign key column\n- bug #4481 mult_submits.inc.php Undefined variable Error\n- bug #4485 Sorting breaks the copy column feature\n- bug #4440 Javascript error when renaming table\n- bug #4483 'New window' link (selflink) disappears, causing Javascript error\n- bug #4489 Incorrect detection of privileges for routine creation\n- bug #4459 First few characters of database name aren't clickable when expanded\n- bug #4486 [security] XSS injection due to unescaped table comment\n- bug #4488 [security] XSS injection due to unescaped table name (triggers)\n- bug #4492 [security] XSS in AJAX confirmation messages\n- bug #4491 [security] Missing validation for accessing User groups feature\n\n4.2.5.0 (2014-06-26)\n- bug #4467 shell_exec() has been disabled for security reasons\n- bug #4470 Error while submitting empty query\n- bug #4463 Fatal error: Class 'PMA_DatabaseInterface' not found\n- bug #4469 Fixed cookie based login for installations without mcrypt\n- bug #4473 incorrect result count when having clause is used\n-           mcrypt: remove the requirement (64-bit) and the related warning\n\n4.2.4.0 (2014-06-20)\n- bug #4449 Mediawiki export does not produce table header row; also fix related PHP warnings\n- bug #4442 New lines are added to query every time\n- bug #4445 Fatal error on SQL Export of join query\n- bug #4448 Dump binary columns in hexadecimal notation not working\n- Regenerate cookie encryption IV for every session\n- bug #4405 Cannot import (open_basedir): fix another case\n- bug #4457 SQL tab - Insert queries not showing affected row count\n- bug       Missing warning about existing account, on multi-server config\n- bug #4435 WHERE clause can be undefined\n- bug       SQL export views as tables option getting ignored\n- bug #4464 [security] XSS injection due to unescaped db/table name in navigation hiding\n- bug #4465 [security] XSS injection due to unescaped db/table name in recent/favorite tables\n\n4.2.3.0 (2014-06-08)\n- bug #4423 Moving fields not working\n- bug #4424 Table indexes disappear after altering field\n- bug #4432 Error while displaying chart at server level\n- bug #4405 Cannot import (open_basedir)\n- bug #4396 Problem copying constraints (such as Sakila)\n- bug #4433 Missing privileges submenu\n- bug #4394 Drop db confirmation message when dropping a user\n- bug #4436 Insert form numeric field with function drop-down list\n- bug #4437 Problems due to missing enforcement of the minimum supported MySQL version\n+ Add enforcement of the minimum supported PHP version (5.3.0)\n- bug       Query error on submitting a column change form containing a disabled input field\n- bug       Incorrect menu tab generation from usergroups\n- bug       Missing space in index creation/edit generated query\n- bug #4434 Unchecking 'Show SQL queries' results NaN\n\n4.2.2.0 (2014-05-20)\n- bug #4388 Disable database expansion when enabled throws Error 500 when database name is clicked in navigation tree\n- bug #4414 table display of performance_schema DB structure\n- bug #4411 Protect Binary Columns: many problems\n- bug #4395 BLOB link transformation is broken\n- bug       Respect ['ShowCreateDb'] in the navi panel\n- bug #4392 Cannot see databases in nav panel on databases grouping when disabled database expansion\n- bug #4419 No more calendar into search tab\n- bug #4398 Monitor should fit into screen width\n- bug #4418 When copying databases, primary key attributes get lost\n- bug #4421 empty maxInputVars on js/messages.php\n\n4.2.1.0 (2014-05-13)\n- bug #4380 Cannot display table structure with enums containing special characters\n- bug #4381 Cannot remove the last remembered sorted column\n- bug       Correctly fetch length of user and host fields in MySQL tables\n- bug #4364 examples/signon.php does not support the SessionSavePath directive\n- bug #4382 Missing source for OpenLayers library\n- bug       Incorrect attributes for number fields\n- bug #4383 Cannot update values in Zoom search\n- bug #4313 GIS Visualization Extension does not work with PointFromText() function\n- bug #4384 Incorrect \"Rows\" total shown when truncating or dropping a table on DB Structure page\n- bug #4385 Grid edit on sorted columns fails\n- bug #4389 Null checkbox covering data input when editing\n- bug #4390 Data type changing by itself (no size but attribute present)\n\n4.2.0.0 (2014-05-08)\n+ rfe #1403 Export only triggers\n+ rfe #1483 Export Server/Database/Table without triggers\n+ rfe #1662 Add table comment tool tip in database structure page\n+ rfe #1447 Single table for display Character Sets and Collations\n+ rfe #1455 Display icons/text/both for the table row actions\n+ rfe #1473 Transformation to convert Boolean value to text\n- bug #4157 Changing users password will delete it\n+ rfe #1474 Text transformation combines Append and Prepend\n+ Added warning about the mysql extension being deprecated\n  and removed the extension directive\n+ Added support for scatter charts\n+ rfe #1478 Make Column Headings Sticky\n+ rfe #1480 Enhance privileges initials table\n+ rfe #1472 [interface] Break \"Edit privileges\" with sub-menus\n+ rfe #1466 Minor refactoring required\n+ rfe #1004 Create indexes at the end in SQL export\n+ rfe #1479 Relations edit form for larger monitors\n+ rfe #1475 Inline query box vertical resize\n+ rfe #1500 [interface] Add bottom border to top menu container\n+ rfe #1498 Add datepicker for 'TIME' type\n- bug #4237 HTTP Referer disclosure in SQL links\n+ rfe       Show full names on navigation hover\n+ rfe #1505 Behaviour on click on a routine in nav panel\n+ rfe #1418 Support more than one separating character on CSV import\n+ rfe #569  Load/Save Query By Example\n- bug #4281 Grid edit ENUM field, dialog disappears when trying to select\n- bug #4304 DB export using zip compression generates an empty archive\n+ rfe #1508 confirmation message at the top\n- bug #4306 breadcrubs wrong on table create\n+ rfe #1511 better validate database name for copying\n+ rfe #1510 Database tab \"Drop\" button should be a link\n+ rfe #1513 Highlight required form fields after failed submission\n+ rfe #1460 Redirect to login page after session has expired\n- bug #4316 Grid edit: can't change month on date fields\n+ rfe #1501 add maxlength by field with length-spec\n+ rfe #1512 Import happily doesn't do anything with no file name provided\n+ rfe #1514 Add function to all the insert boxes automatically\n+ rfe #1515 Option to skip tables larger than n\n+ rfe #1486 Possibility of disabling database expansion\n+ rfe #1476 Favourite tables select box\n+ rfe #420  $cfg['CharEditing']='textarea' for structure edit\n+ rfe #1329 Avoid editing of fields which are part of relation\n+ rfe       [interface] Highlight active left menu item in setup\n+ rfe       Filter on-screen rows during Browse\n  Removed support for SQL Validator (SOAP service no longer offered)\n- bug #4352 Settings > Manage: incorrect messages\n- bug #4337 \"More\" in Actions area doesn't collapse to fit available space\n- bug #4375 Group two DB, one's name is the prefix of the other one\n- bug #4070 Confusing database/table grouping\n- bug #4366 Creating Index doesn't update index-list\n+ rfe #1507 Sort by multiple columns\n\n4.1.14.1 (2014-06-21)\n- bug #4464 [security] XSS injection due to unescaped db/table name in navigation hiding\n\n4.1.14.0 (2014-04-26)\n- bug #4365 Creating bookmark with multiple queries not working\n- bug #4375 Group two DB, one's name is the prefix of the other one\n- bug #4376 [interface] Login fields show in separate line\n- bug #4372 Changing browser transformation results in unnecessary table rebuild\n\n4.1.13.0 (2014-04-13)\n- bug #4279 CTRL + up or down moves 2 fields\n- bug #4336 List server css style wrong\n- bug       Missing value on the Status > Server page\n- bug #4347 Fixed PHP Parse error in Advisor\n- bug #4350 Deleting the DB if it is renamed by the same name\n- bug #4353 makeProfilingChart is not defined\n- bug #4355 Precision specifier for DOUBLE type is truncated\n- bug #4346 Incorrect \"Export incomplete\" message\n- bug #4359 Notices on create table page\n- bug #4356 GROUPed selects show number of rows as if not grouped\n- bug #4357 JS Form submitted on \"enter\" even if focus is inside a select field\n\n4.1.12.0 (2014-03-27)\n- bug #4334 Add event : datepicker won't open\n- bug #4338 Fix missing value error while executing SQL query\n- TCPDF library is now optional dependency\n- bug #4326 Cannot find the import plugins which start with uppercase 'I'\n\n4.1.11.0 (2014-03-23)\n- bug #4335 reCaptcha problem (4.1.10 regression)\n\n4.1.10.0 (2014-03-22)\n- bug #4301 Grid edit: \"SELECT\" query is replaced by \"UPDATE\" query after edit\n- bug #4278 reCaptcha re-login requires double effort\n- bug #4324 Datepicker not showing up on insert page\n- bug #3991 Problem selecting item in select boxes with the ENTER keystroke in some browsers\n- bug #4323 QueryWindow ignores CodeMirror\n- bug       None of the live charts shown on \"Status -> Monitor\" (Chrome)\n\n4.1.9.0 (2014-03-06)\n- bug #4279 CTRL + up or down moves two fields (part one)\n- bug #4294 output as text radio clickable for \"OpenDocument Text\" export\n- bug #4297 DROP DATABASE tick box in export no longer works\n- bug #4291 Unable to export comments in OpenDocument text format\n- bug #4299 Deletion even when the user says \"No\" to the confirmation message\n- bug #4303 \"New\" link in navi panel is shown even if no privileges\n- bug #4302 Some params are being omitted from microhistory\n- bug #4298 Missing validation on Import CSV: \"Columns enclosed with\" and \"Columns escaped with\"\n- bug #4040 Fatal error while resetting settings\n- bug #4305 JS error when editing procedure from nav panel\n- bug #4308 Edit routine form submitting when pressing enter\n- bug #4307 Nav: \"Columns\" won't expand with specific schema\n\n4.1.8.0 (2014-02-22)\n- bug #4276 Login loop on session expiry\n- bug #4249 Incorrect number of result rows for SQL with subqueries\n- bug #4275 Broken Link to php extension manual\n- bug #4053 List of procedures is not displayed after executing with Enter\n- bug #4081 Setup page content shifted to the right edge of its tabs\n- bug #4284 Reordering a column erases comments for other columns\n- bug #4286 Open \"Browse\" in a new tab\n- bug #4287 Printview - Always one column too much\n- bug #4288 Expand database (+ icon) after timeout doesn't do anything\n- bug #4285 Fixed CSS for setup\n- Fixed altering table to DOUBLE/FLOAT field\n- bug #4292 Success message and failure message being shown together\n- bug #4293 opening new tab (using selflink) for import.php based actions\n            results in error and logout\n\n4.1.7.0 (2014-02-09)\n- bug #4245 initial Browse query does not match sorting order\n- bug #4250 Notice on export page\n- bug #4253 \"New\" text in navigation frame acts like a database\n- bug #4262 Cannot define a column with fractional seconds\n- bug #4265 Missing datepicker icon for DATETIME(length)\n- bug #4257 Hide fractional seconds when applicable\n- bug #4264 Uncheck \"Ignore\" while inserting, upon leaving a textarea\n- bug #4260 reCaptcha is ignoring language settings\n- bug #4259 reCaptcha sound session expired problem\n- bug #4263 Japanese character encoding not working properly when exporting\n- bug #4269 Notice on table relation page\n- bug #4270 Bad text-color for table comments\n- bug #4272 Incorrect tabindex\n- bug #4271 Query by example and the second criteria line\n- bug #4242 Wildcard-containing only_db failure in sidebar\n\n4.1.6.0 (2014-01-26)\n- bug #4232 User not found after creating the user\n- bug #4241 Confusing dialog when trying to create an already existing user\n- bug #4239 Missing LIMIT clause for some queries\n- rfe #1489 Do not show create icon when user has no privileges\n- bug #4218 Chrome behavior with date fields\n- bug #3579 NOW() function incorrectly selected (regression)\n- bug #4244 Advisor complaints about MariaDB 10.x is version less than 5.1\n- bug #3889 When login fails and error display is active, login data is\ndisplayed (regression)\n- bug #4247 open_basedir warnings on export page\n- bug #4013 AJAX request waiting until version info is retrieved\n- bug #4248 js error when changing number of columns in status monitor\n\n4.1.5.0 (2014-01-17)\n- bug #3780 Allow aborting loading pages\n- bug #4223 Database list: Create database misses collation column\n- bug #4224 Empty table names when a table is \"inuse\"\n- bug #4225 Partition maintenance broken\n- bug #4219 Table list (left panel) does not reload when table renamed\n- bug #4230 \"in use\" displayed for all views in database print view\n- bug #4226 Notice: Undefined index: pma_config_loading\n- bug #4221 Bzip2 export cannot be directly imported (so withdraw bz2 export)\n- bug #4204 Reloading user privileges hides user groups submenu\n- bug #4231 DATE columns quick edit decrement by one day\n\n4.1.4.0 (2014-01-07)\n- bug #3840 (additional fix) When exporting to gzip format, the data is compressed 2 times\n- bug #4209 Missing compression in one case\n- bug #4208 Can't browse tables after sorting on columns with fieldnames that have a '-'\n- bug #4184 Switch to wrong page after adding an index\n- bug #3885 Additional fix for this bug\n- bug #4212 Table \"disappears\" if it has the same name as its tablegroup\n- bug #4213 Datetime Quick Edit decrements by one day\n- bug #4217 Current value not highlighted when browsing foreign values\n- bug #4220 Incorrect key values in foreign key browser\n- bug #4215 MariaDB 5.5: error in Drizzle detection\n\n         --- Older ChangeLogs can be found on our project website ---\n                     http://www.phpmyadmin.net/old-stuff/ChangeLogs/\n\n# vim: et ts=4 sw=4 sts=4\n# vim: ft=changelog fenc=utf-8\n# vim: fde=getline(v\\:lnum-1)=~'^\\\\s*$'&&getline(v\\:lnum)=~'\\\\S'?'>1'\\:1&&v\\:lnum>4&&getline(v\\:lnum)!~'^#'\n# vim: fdn=1 fdm=expr\n", "/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var $table_clone reference to the action links on the tbl_structure page\n */\nvar $table_clone = false;\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox/querywindow\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = [];\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the query editor in SQL tab\n */\nvar codemirror_editor = false;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the inline query editor\n */\nvar codemirror_inline_editor = false;\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = {};\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache' : nocache});\n    }\n});\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param object   the form that holds the password fields\n *\n * @return boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    passwd.value = '';\n\n    for (var i = 0; i < passwordlength; i++) {\n        passwd.value += pwchars.charAt(Math.floor(Math.random() * pwchars.length));\n    }\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString(str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2), 10);\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4), 10);\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5), 10);\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0], 10) || 0;\n    var min = parseInt(x[1], 10) || 0;\n    var pat = parseInt(x[2], 10) || 0;\n    var hotfix = parseInt(x[3], 10) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version(data)\n{\n    if (data && data.version && data.date) {\n        var current = parseVersionString(pmaversion);\n        var latest = parseVersionString(data.version);\n        var version_information_message = '<span>'\n            + PMA_messages.strLatestAvailable\n            + ' ' + escapeHtml(data.version)\n            + '</span>';\n        if (latest > current) {\n            var message = $.sprintf(\n                PMA_messages.strNewerVersion,\n                escapeHtml(data.version),\n                escapeHtml(data.date)\n            );\n            var htmlClass = 'notice';\n            if (Math.floor(latest / 10000) === Math.floor(current / 10000)) {\n                /* Security update */\n                htmlClass = 'error';\n            }\n            $('#maincontainer').after('<div class=\"' + htmlClass + '\">' + message + '</div>');\n        }\n        if (latest === current) {\n            version_information_message = ' (' + PMA_messages.strUpToDate + ')';\n        }\n        $('#li_pma_version span').remove();\n        $('#li_pma_version').append(version_information_message);\n    }\n}\n\n/**\n * Loads Git revision data from ajax for index.php\n */\nfunction PMA_display_git_revision()\n{\n    $('#is_git_revision').remove();\n    $('#li_pma_version_git').remove();\n    $.get(\n        \"index.php\",\n        {\n            \"server\": PMA_commonParams.get('server'),\n            \"token\": PMA_commonParams.get('token'),\n            \"git_revision\": true,\n            \"ajax_request\": true\n        },\n        function (data) {\n            if (data.success === true) {\n                $(data.message).insertAfter('#li_pma_version');\n            }\n        }\n    );\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr class=\"vmiddle\"><td>' + PMA_messages.strGeneratePassword + '</td><td><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages.strGeneratePassword + ':</label><span class=\"options\"><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, type, options)\n{\n    var showTimepicker = true;\n    if (type==\"date\") {\n        showTimepicker = false;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showMillisec: true,\n        showMicrosec: true,\n        showTimepicker: showTimepicker,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'HH:mm:ss.lc',\n        constrainInput: false,\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function (input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function () {\n                $('#ui-timepicker-div').css('z-index', $('#ui-datepicker-div').css('z-index'));\n            }, 0);\n        },\n        onClose: function (dateText, dp_inst) {\n            // The value is no more from the date picker\n            $this_element.data('comes_from', '');\n        }\n    };\n    if (type == \"datetime\" || type == \"timestamp\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"date\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"time\") {\n        $this_element.timepicker($.extend(defaultOptions, options));\n    }\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param object  element     element of which the content will be selected\n * @param var     lock        variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param boolean only_once   if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent(element, lock, only_once)\n{\n    if (only_once && only_once_elements[element.name]) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if (lock) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param object   the link\n * @param object   the sql query to submit\n *\n * @return boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages.strDoYouReally === '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm($.sprintf(PMA_messages.strDoYouReally, theSqlQuery));\n    if (is_confirmed) {\n        if ($(theLink).hasClass('formLinkSubmit')) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if (typeof(theLink.href) != 'undefined') {\n            theLink.href += '&is_js_confirmed=1';\n        } else if (typeof(theLink.form) != 'undefined') {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * sumitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param object   the form\n * @param object   the sql query textarea\n *\n * @return boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages.strNoDropDatabases !== '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages.strNoDropDatabases);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value) ||\n        do_confirm_re_1.test(sqlQuery1.value) ||\n        do_confirm_re_2.test(sqlQuery1.value) ||\n        do_confirm_re_3.test(sqlQuery1.value)) {\n        var message;\n        if (sqlQuery1.value.length > 100) {\n            message = sqlQuery1.value.substr(0, 100) + '\\n    ...';\n        } else {\n            message = sqlQuery1.value;\n        }\n        var is_confirmed = confirm($.sprintf(PMA_messages.strDoYouReally, message));\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements['is_js_confirmed'].value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param object   the form\n *\n * @return boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    var sqlQuery;\n    // get the textarea element containing the query\n    if (codemirror_editor) {\n        codemirror_editor.save();\n        sqlQuery = codemirror_editor.getValue();\n    } else {\n        sqlQuery = theForm.elements.sql_query.value;\n    }\n    var isEmpty  = 1;\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements['sql_file']) != 'undefined' &&\n            theForm.elements['sql_file'].value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (typeof(theForm.elements['sql_localfile']) != 'undefined' &&\n            theForm.elements['sql_localfile'].value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements['id_bookmark']) != 'undefined' &&\n            (theForm.elements['id_bookmark'].value !== null || theForm.elements['id_bookmark'].value !== '') &&\n            theForm.elements['id_bookmark'].selectedIndex !== 0) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.replace(space_re, '') !== '') {\n        if (confirmQuery(theForm, sqlQuery)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        alert(PMA_messages.strFormEmpty);\n        codemirror_editor.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return (theField.value.replace(space_re, '') === '') ? 1 : 0;\n} // end of the 'emptyCheckTheField()' function\n\n\n/**\n * Check whether a form field is empty or not\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyFormElements(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var isEmpty = emptyCheckTheField(theForm, theFieldName);\n\n\n    return isEmpty;\n} // end of the 'emptyFormElements()' function\n\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param object   the form\n * @param string   the name of the form field to check\n * @param integer  the minimum authorized value\n * @param integer  the maximum authorized value\n *\n * @return boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value, 10);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages.strEnterValidNumber);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert($.sprintf(message, val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i = 0; i < fieldsCnt; i++) {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val();\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val(), 10);\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() !== \"\") {\n                elm2.select();\n                alert(PMA_messages.strEnterValidLength);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField === 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField === 0) {\n        var theField = theForm.elements[\"field_0_1\"];\n        alert(PMA_messages.strFormEmpty);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    if ($(\"input.textfield[name='table']\").val() === \"\") {\n        alert(PMA_messages.strFormEmpty);\n        $(\"input.textfield[name='table']\").focus();\n        return false;\n    }\n\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input:checkbox.checkall').die('click');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Row marking in horizontal mode (use \"live\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n\n    $('input:checkbox.checkall').live('click', function (e) {\n        var $tr = $(this).closest('tr');\n\n        // make the table unselectable (to prevent default highlighting when shift+click)\n        //$tr.parents('table').noSelect();\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n            var $checkbox = $tr.find(':checkbox');\n            if ($checkbox.length) {\n                // checkbox in a row, add or remove class depending on checkbox state\n                var checked = $checkbox.prop('checked');\n                if (!$(e.target).is(':checkbox, label')) {\n                    checked = !checked;\n                    $checkbox.prop('checked', checked).trigger('change');\n                }\n                if (checked) {\n                    $tr.addClass('marked');\n                } else {\n                    $tr.removeClass('marked');\n                }\n                last_click_checked = checked;\n            } else {\n                // normal data table, just toggle class\n                $tr.toggleClass('marked');\n                last_click_checked = false;\n            }\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .prop('checked', false)\n                    .trigger('change');\n            }\n\n            // handle new shift click\n            var curr_row = $('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .prop('checked', true)\n                .trigger('change');\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    addDateTimePicker();\n\n    /**\n     * Add attribute to text boxes for iOS devices (based on bugID: 3508912)\n     */\n    if (navigator.userAgent.match(/(iphone|ipod|ipad)/i)) {\n        $('input[type=text]').attr('autocapitalize', 'off').attr('autocorrect', 'off');\n    }\n});\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\n/**\n * Row highlighting in horizontal mode (use \"live\"\n * so that it works also for pages reached via AJAX)\n */\n/*AJAX.registerOnload('functions.js', function () {\n    $('tr.odd, tr.even').live('hover',function (event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = [];\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction markAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', true)\n    .trigger(\"change\")\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usaly a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction unMarkAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', false)\n    .trigger(\"change\")\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given conainer (f.e. a form, fieldset or div)\n *\n * @param string   container_id  the container id\n * @param boolean  state         new value for checkbox (true or false)\n * @return boolean  always true\n */\nfunction setCheckboxes(container_id, state)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox\").prop('checked', state);\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param string   the form name\n  * @param string   the element name\n  * @param boolean  whether to check or to uncheck options\n  *\n  * @return boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\" + the_form + \"'] select[name='\" + the_select + \"']\").find(\"option\").prop('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n        codemirror_editor.focus();\n    } else {\n        document.sqlform.sql_query.value = query;\n        document.sqlform.sql_query.focus();\n    }\n}\n\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    }\n\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                columnsList += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            columnsList += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + columnsList + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n            query = \"INSERT INTO `\" + table + \"`(\" + columnsList + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if (queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    columnsList += \", \";\n                }\n                columnsList += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(columnsList);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            var sel = document.selection.createRange();\n            sel.text = columnsList;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var SqlString = document.sqlform.sql_query.value;\n\n            myQuery.value = SqlString.substring(0, startPos) + columnsList + SqlString.substring(endPos, SqlString.length);\n        } else {\n            myQuery.value += columnsList;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n * Add a date/time picker to each element that needs it\n * (only when jquery-ui-timepicker-addon.js is loaded)\n */\nfunction addDateTimePicker() {\n    if ($.timepicker !== undefined) {\n        $('input.timefield, input.datefield, input.datetimefield').each(function () {\n\n            no_decimals = $(this).parent().attr('data-decimals');\n            var showMillisec = false;\n            var showMicrosec = false;\n            var timeFormat = 'HH:mm:ss';\n            // check for decimal places of seconds\n            if (($(this).parent().attr('data-decimals') > 0) && ($(this).parent().attr('data-type').indexOf('time') != -1)){\n                showMillisec = true;\n                timeFormat = 'HH:mm:ss.lc';\n                if ($(this).parent().attr('data-decimals') > 3) {\n                    showMicrosec = true;\n                }\n            }\n            PMA_addDatepicker($(this), $(this).parent().attr('data-type'), {\n                showMillisec: showMillisec,\n                showMicrosec: showMicrosec,\n                timeFormat: timeFormat\n            });\n        });\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var $elm = $('#pdflayout');\n    var orientation = $('#orientation_opt').val();\n    var paper = 'A4';\n    if ($('#paper_opt').length == 1) {\n        paper = $('#paper_opt').val();\n    }\n    var posa = 'y';\n    var posb = 'x';\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    }\n    $elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    $elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n * Initializes positions of elements.\n */\nfunction TableDragInit() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var number = $this.data('number');\n        var x = $('#c_table_' + number + '_x').val();\n        var y = $('#c_table_' + number + '_y').val();\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n        /* Make elements draggable */\n        $this.draggable({\n            containment: \"parent\",\n            drag: function (evt, ui) {\n                var number = $this.data('number');\n                $('#c_table_' + number + '_x').val(parseInt(ui.position.left, 10));\n                $('#c_table_' + number + '_y').val(parseInt(ui.position.top, 10));\n            }\n        });\n    });\n}\n\n/**\n * Resets drag and drop positions.\n */\nfunction resetDrag() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var x = $this.data('x');\n        var y = $this.data('y');\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n    });\n}\n\n/**\n * User schema handlers.\n */\n$(function () {\n    /* Move in scratchboard on manual change */\n    $('.position-change').live('change', function () {\n        var $this = $(this);\n        var $elm = $('#table_' + $this.data('number'));\n        $elm.css($this.data('axis'), $this.val() + 'px');\n    });\n    /* Refresh on paper size/orientation change */\n    $('.paper-change').live('change', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'visible') {\n            refreshLayout();\n            TableDragInit();\n        }\n    });\n    /* Show/hide the WYSIWYG scratchboard */\n    $('#toggle-dragdrop').live('click', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'hidden') {\n            refreshLayout();\n            TableDragInit();\n            $elm.css('visibility', 'visible');\n            $elm.css('display', 'block');\n            $('#showwysiwyg').val('1');\n        } else {\n            $elm.css('visibility', 'hidden');\n            $elm.css('display', 'none');\n            $('#showwysiwyg').val('0');\n        }\n    });\n    /* Reset scratchboard */\n    $('#reset-dragdrop').live('click', function () {\n        resetDrag();\n    });\n});\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n    case '4A0':\n        if (axis == 'x') {\n            return 4767.87;\n        } else {\n            return 6740.79;\n        }\n        break;\n    case '2A0':\n        if (axis == 'x') {\n            return 3370.39;\n        } else {\n            return 4767.87;\n        }\n        break;\n    case 'A0':\n        if (axis == 'x') {\n            return 2383.94;\n        } else {\n            return 3370.39;\n        }\n        break;\n    case 'A1':\n        if (axis == 'x') {\n            return 1683.78;\n        } else {\n            return 2383.94;\n        }\n        break;\n    case 'A2':\n        if (axis == 'x') {\n            return 1190.55;\n        } else {\n            return 1683.78;\n        }\n        break;\n    case 'A3':\n        if (axis == 'x') {\n            return 841.89;\n        } else {\n            return 1190.55;\n        }\n        break;\n    case 'A4':\n        if (axis == 'x') {\n            return 595.28;\n        } else {\n            return 841.89;\n        }\n        break;\n    case 'A5':\n        if (axis == 'x') {\n            return 419.53;\n        } else {\n            return 595.28;\n        }\n        break;\n    case 'A6':\n        if (axis == 'x') {\n            return 297.64;\n        } else {\n            return 419.53;\n        }\n        break;\n    case 'A7':\n        if (axis == 'x') {\n            return 209.76;\n        } else {\n            return 297.64;\n        }\n        break;\n    case 'A8':\n        if (axis == 'x') {\n            return 147.40;\n        } else {\n            return 209.76;\n        }\n        break;\n    case 'A9':\n        if (axis == 'x') {\n            return 104.88;\n        } else {\n            return 147.40;\n        }\n        break;\n    case 'A10':\n        if (axis == 'x') {\n            return 73.70;\n        } else {\n            return 104.88;\n        }\n        break;\n    case 'B0':\n        if (axis == 'x') {\n            return 2834.65;\n        } else {\n            return 4008.19;\n        }\n        break;\n    case 'B1':\n        if (axis == 'x') {\n            return 2004.09;\n        } else {\n            return 2834.65;\n        }\n        break;\n    case 'B2':\n        if (axis == 'x') {\n            return 1417.32;\n        } else {\n            return 2004.09;\n        }\n        break;\n    case 'B3':\n        if (axis == 'x') {\n            return 1000.63;\n        } else {\n            return 1417.32;\n        }\n        break;\n    case 'B4':\n        if (axis == 'x') {\n            return 708.66;\n        } else {\n            return 1000.63;\n        }\n        break;\n    case 'B5':\n        if (axis == 'x') {\n            return 498.90;\n        } else {\n            return 708.66;\n        }\n        break;\n    case 'B6':\n        if (axis == 'x') {\n            return 354.33;\n        } else {\n            return 498.90;\n        }\n        break;\n    case 'B7':\n        if (axis == 'x') {\n            return 249.45;\n        } else {\n            return 354.33;\n        }\n        break;\n    case 'B8':\n        if (axis == 'x') {\n            return 175.75;\n        } else {\n            return 249.45;\n        }\n        break;\n    case 'B9':\n        if (axis == 'x') {\n            return 124.72;\n        } else {\n            return 175.75;\n        }\n        break;\n    case 'B10':\n        if (axis == 'x') {\n            return 87.87;\n        } else {\n            return 124.72;\n        }\n        break;\n    case 'C0':\n        if (axis == 'x') {\n            return 2599.37;\n        } else {\n            return 3676.54;\n        }\n        break;\n    case 'C1':\n        if (axis == 'x') {\n            return 1836.85;\n        } else {\n            return 2599.37;\n        }\n        break;\n    case 'C2':\n        if (axis == 'x') {\n            return 1298.27;\n        } else {\n            return 1836.85;\n        }\n        break;\n    case 'C3':\n        if (axis == 'x') {\n            return 918.43;\n        } else {\n            return 1298.27;\n        }\n        break;\n    case 'C4':\n        if (axis == 'x') {\n            return 649.13;\n        } else {\n            return 918.43;\n        }\n        break;\n    case 'C5':\n        if (axis == 'x') {\n            return 459.21;\n        } else {\n            return 649.13;\n        }\n        break;\n    case 'C6':\n        if (axis == 'x') {\n            return 323.15;\n        } else {\n            return 459.21;\n        }\n        break;\n    case 'C7':\n        if (axis == 'x') {\n            return 229.61;\n        } else {\n            return 323.15;\n        }\n        break;\n    case 'C8':\n        if (axis == 'x') {\n            return 161.57;\n        } else {\n            return 229.61;\n        }\n        break;\n    case 'C9':\n        if (axis == 'x') {\n            return 113.39;\n        } else {\n            return 161.57;\n        }\n        break;\n    case 'C10':\n        if (axis == 'x') {\n            return 79.37;\n        } else {\n            return 113.39;\n        }\n        break;\n    case 'RA0':\n        if (axis == 'x') {\n            return 2437.80;\n        } else {\n            return 3458.27;\n        }\n        break;\n    case 'RA1':\n        if (axis == 'x') {\n            return 1729.13;\n        } else {\n            return 2437.80;\n        }\n        break;\n    case 'RA2':\n        if (axis == 'x') {\n            return 1218.90;\n        } else {\n            return 1729.13;\n        }\n        break;\n    case 'RA3':\n        if (axis == 'x') {\n            return 864.57;\n        } else {\n            return 1218.90;\n        }\n        break;\n    case 'RA4':\n        if (axis == 'x') {\n            return 609.45;\n        } else {\n            return 864.57;\n        }\n        break;\n    case 'SRA0':\n        if (axis == 'x') {\n            return 2551.18;\n        } else {\n            return 3628.35;\n        }\n        break;\n    case 'SRA1':\n        if (axis == 'x') {\n            return 1814.17;\n        } else {\n            return 2551.18;\n        }\n        break;\n    case 'SRA2':\n        if (axis == 'x') {\n            return 1275.59;\n        } else {\n            return 1814.17;\n        }\n        break;\n    case 'SRA3':\n        if (axis == 'x') {\n            return 907.09;\n        } else {\n            return 1275.59;\n        }\n        break;\n    case 'SRA4':\n        if (axis == 'x') {\n            return 637.80;\n        } else {\n            return 907.09;\n        }\n        break;\n    case 'LETTER':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 792.00;\n        }\n        break;\n    case 'LEGAL':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 1008.00;\n        }\n        break;\n    case 'EXECUTIVE':\n        if (axis == 'x') {\n            return 521.86;\n        } else {\n            return 756.00;\n        }\n        break;\n    case 'FOLIO':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 936.00;\n        }\n        break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"a.inline_edit_sql\").die('click');\n    $(\"input#sql_query_edit_save\").die('click');\n    $(\"input#sql_query_edit_discard\").die('click');\n    $('input.sqlbutton').unbind('click');\n    $(\"#export_type\").unbind('change');\n    $('#sqlquery').unbind('keydown');\n    $('#sql_query_edit').unbind('keydown');\n\n    if (codemirror_inline_editor) {\n        // Copy the sql query to the text area to preserve it.\n        $('#sql_query_edit').text(codemirror_inline_editor.getValue());\n        $(codemirror_inline_editor.getWrapperElement()).unbind('keydown');\n        codemirror_inline_editor.toTextArea();\n        codemirror_inline_editor = false;\n    }\n    if (codemirror_editor) {\n        $(codemirror_editor.getWrapperElement()).unbind('keydown');\n    }\n});\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\nAJAX.registerOnload('functions.js', function () {\n    // If we are coming back to the page by clicking forward button\n    // of the browser, bind the code mirror to inline query editor.\n    bindCodeMirrorToInlineEditor();\n    $(\"a.inline_edit_sql\").live('click', function () {\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev('form');\n        var sql_query  = $form.find(\"input[name='sql_query']\").val().trim();\n        var $inner_sql = $(this).parent().prev().find('code.sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += \"<input type=\\\"submit\\\" id=\\\"sql_query_edit_save\\\" class=\\\"button btnSave\\\" value=\\\"\" + PMA_messages.strGo + \"\\\"/>\\n\";\n        new_content    += \"<input type=\\\"button\\\" id=\\\"sql_query_edit_discard\\\" class=\\\"button btnDiscard\\\" value=\\\"\" + PMA_messages.strCancel + \"\\\"/>\\n\";\n        var $editor_area = $('div#inline_editor');\n        if ($editor_area.length === 0) {\n            $editor_area = $('<div id=\"inline_editor_outer\"></div>');\n            $editor_area.insertBefore($inner_sql);\n        }\n        $editor_area.html(new_content);\n        $inner_sql.hide();\n\n        bindCodeMirrorToInlineEditor();\n        return false;\n    });\n\n    $(\"input#sql_query_edit_save\").live('click', function () {\n        $(\".success\").hide();\n        //hide already existing success message\n        var sql_query;\n        if (codemirror_inline_editor) {\n            codemirror_inline_editor.save();\n            sql_query = codemirror_inline_editor.getValue();\n        } else {\n            sql_query = $(this).prev().val();\n        }\n\n        var $form = $(\"a.inline_edit_sql\").prev('form');\n        var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                .append($('<input/>', {type: 'hidden', name: 'show_query', value: 1}))\n                .append($('<input/>', {type: 'hidden', name: 'is_js_confirmed', value: 0}))\n                .append($('<input/>', {type: 'hidden', name: 'sql_query', value: sql_query}));\n        if (! checkSqlQuery($fake_form[0])) {\n            return false;\n        }\n        $fake_form.appendTo($('body')).submit();\n    });\n\n    $(\"input#sql_query_edit_discard\").live('click', function () {\n        $('div#inline_editor_outer').siblings('code.sql').show();\n        $('div#inline_editor_outer').remove();\n    });\n\n    $('input.sqlbutton').click(function (evt) {\n        insertQuery(evt.target.id);\n        return false;\n    });\n\n    $(\"#export_type\").change(function () {\n        if ($(\"#export_type\").val() == 'svg') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#orientation_opt\").prop(\"disabled\", true);\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").removeProp(\"disabled\");\n            $(\"#all_tables_same_width\").removeProp(\"disabled\");\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n            //$(this).css(\"background-color\",\"yellow\");\n        } else if ($(\"#export_type\").val() == 'dia') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").prop(\"disabled\", true);\n            $(\"#all_tables_same_width\").prop(\"disabled\", true);\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n        } else if ($(\"#export_type\").val() == 'eps') {\n            $(\"#show_grid_opt\").prop(\"disabled\", true);\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n            $(\"#with_doc\").prop(\"disabled\", true);\n            $(\"#show_table_dim_opt\").prop(\"disabled\", true);\n            $(\"#all_tables_same_width\").prop(\"disabled\", true);\n            $(\"#paper_opt\").prop(\"disabled\", true);\n            $(\"#show_color_opt\").prop(\"disabled\", true);\n        } else if ($(\"#export_type\").val() == 'pdf') {\n            $(\"#show_grid_opt\").removeProp(\"disabled\");\n            $(\"#orientation_opt\").removeProp(\"disabled\");\n            $(\"#with_doc\").removeProp(\"disabled\");\n            $(\"#show_table_dim_opt\").removeProp(\"disabled\");\n            $(\"#all_tables_same_width\").removeProp(\"disabled\");\n            $(\"#paper_opt\").removeProp(\"disabled\");\n            $(\"#show_color_opt\").removeProp(\"disabled\");\n        } else {\n            // nothing\n        }\n    });\n\n    if ($('#input_username')) {\n        if ($('#input_username').val() === '') {\n            $('#input_username').focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * Binds the CodeMirror to the text area used to inline edit a query.\n */\nfunction bindCodeMirrorToInlineEditor() {\n    var $inline_editor = $('#sql_query_edit');\n    if ($inline_editor.length > 0) {\n        if (typeof CodeMirror !== 'undefined') {\n            var height = $('#sql_query_edit').css('height');\n            codemirror_inline_editor = CodeMirror.fromTextArea($inline_editor[0], {\n                lineNumbers: true,\n                matchBrackets: true,\n                indentUnit: 4,\n                mode: \"text/x-mysql\",\n                lineWrapping: true\n            });\n            codemirror_inline_editor.getScrollerElement().style.height = height;\n            codemirror_inline_editor.refresh();\n            codemirror_inline_editor.focus();\n            $(codemirror_inline_editor.getWrapperElement()).bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        } else {\n            $inline_editor.focus().bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        }\n    }\n}\n\nfunction catchKeypressesFromSqlTextboxes(event) {\n    // ctrl-enter is 10 in chrome and ie, but 13 in ff\n    if (event.ctrlKey && (event.keyCode == 13 || event.keyCode == 10)) {\n        if ($('#sql_query_edit').length > 0) {\n            $(\"#sql_query_edit_save\").trigger('click');\n        } else if ($('#sqlquery').length > 0) {\n            $(\"#button_submit_query\").trigger('click');\n        }\n    }\n}\n\n/**\n * Adds doc link to single highlighted SQL element\n */\nfunction PMA_doc_add($elm, params)\n{\n    if (typeof mysql_doc_template == 'undefined') {\n        return;\n    }\n\n    var url = $.sprintf(\n        mysql_doc_template,\n        params[0]\n    );\n    if (params.length > 1) {\n        url += '#' + params[1];\n    }\n    var content = $elm.text();\n    $elm.text('');\n    $elm.append('<a target=\"mysql_doc\" class=\"cm-sql-doc\" href=\"' + url + '\">' + content + '</a>');\n}\n\n/**\n * Generates doc links for keywords inside highlighted SQL\n */\nfunction PMA_doc_keyword(idx, elm)\n{\n    var $elm = $(elm);\n    /* Skip already processed ones */\n    if ($elm.find('a').length > 0) {\n        return;\n    }\n    var keyword = $elm.text().toUpperCase();\n    var $next = $elm.next('.cm-keyword');\n    if ($next) {\n        var next_keyword = $next.text().toUpperCase();\n        var full = keyword + ' ' + next_keyword;\n\n        var $next2 = $next.next('.cm-keyword');\n        if ($next2) {\n            var next2_keyword = $next2.text().toUpperCase();\n            var full2 = full + ' ' + next2_keyword;\n            if (full2 in mysql_doc_keyword) {\n                PMA_doc_add($elm, mysql_doc_keyword[full2]);\n                PMA_doc_add($next, mysql_doc_keyword[full2]);\n                PMA_doc_add($next2, mysql_doc_keyword[full2]);\n                return;\n            }\n        }\n        if (full in mysql_doc_keyword) {\n            PMA_doc_add($elm, mysql_doc_keyword[full]);\n            PMA_doc_add($next, mysql_doc_keyword[full]);\n            return;\n        }\n    }\n    if (keyword in mysql_doc_keyword) {\n        PMA_doc_add($elm, mysql_doc_keyword[keyword]);\n    }\n}\n\n/**\n * Generates doc links for builtins inside highlighted SQL\n */\nfunction PMA_doc_builtin(idx, elm)\n{\n    var $elm = $(elm);\n    var builtin = $elm.text().toUpperCase();\n    if (builtin in mysql_doc_builtin) {\n        PMA_doc_add($elm, mysql_doc_builtin[builtin]);\n    }\n}\n\n/**\n * Higlights SQL using CodeMirror.\n */\nfunction PMA_highlightSQL(base)\n{\n    var $elm = base.find('code.sql');\n    $elm.each(function () {\n        var $sql = $(this);\n        var $pre = $sql.find('pre');\n        /* We only care about visible elements to avoid double processing */\n        if ($pre.is(\":visible\")) {\n            var $highlight = $('<div class=\"sql-highlight cm-s-default\"></div>');\n            $sql.append($highlight);\n            if (typeof CodeMirror != 'undefined') {\n                CodeMirror.runMode($sql.text(), 'text/x-mysql', $highlight[0]);\n                $pre.hide();\n                $highlight.find('.cm-keyword').each(PMA_doc_keyword);\n                $highlight.find('.cm-builtin').each(PMA_doc_builtin);\n            }\n        }\n    });\n}\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message === '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages.strLoading;\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages.strProcessingRequest) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout === undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length === 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"body\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\"span.ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_' +\n            ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .show();\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function () {\n            if ($(this).is(':data(tooltip)')) {\n                $(this).tooltip('destroy');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_tooltip(\n            $retval,\n            'span',\n            PMA_messages.strDismiss\n        );\n    }\n    PMA_highlightSQL($retval);\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox !== undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is(':data(tooltip)')) {\n            $this_msgbox.tooltip('destroy');\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n// This event only need to be fired once after the initial page load\n$(function () {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $('span.ajax_notification.dismissable').live('click', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $('span.ajax_notification a, span.ajax_notification button, span.ajax_notification input')\n    .live('mouseover', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('disable');\n        }\n    })\n    .live('mouseout', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('enable');\n        }\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2], 10) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p#enum_notice_\" + enum_notice_id).show();\n    } else {\n        $(\"p#enum_notice_\" + enum_notice_id).hide();\n    }\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n * and in server_status_monitor.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true\n                }\n            },\n            highlighter: {\n                show: true,\n                tooltipLocation: 'se',\n                sizeAdjust: 0,\n                tooltipAxes: 'pieref',\n                useAxesFormatters: false,\n                formatString: '%s, %.9Ps'\n            },\n            legend: {\n                show: true,\n                location: 'e',\n                rendererOptions: {numberColumns: 2}\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n                '#fce94f',\n                '#fcaf3e',\n                '#e9b96e',\n                '#8ae234',\n                '#729fcf',\n                '#ad7fa8',\n                '#ef2929',\n                '#eeeeec',\n                '#888a85',\n                '#c4a000',\n                '#ce5c00',\n                '#8f5902',\n                '#4e9a06',\n                '#204a87',\n                '#5c3566',\n                '#a40000',\n                '#babdb6',\n                '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time).\n * Used in server_status_monitor.js\n *\n * @param  integer    Number to be formatted, should be in the range of microsecond to second\n * @param  integer    Accuracy, how many numbers right to the comma should be\n * @return string     The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10, acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param string      Query to be formatted\n * @return string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    if (typeof CodeMirror == 'undefined') {\n        return string;\n    }\n\n    var mode = CodeMirror.getMode({}, \"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function (cnt) {\n        var ret = '';\n        for (var i = 0; i < 4 * cnt; i++) {\n            ret += \" \";\n        }\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from', 'on', 'where', 'having', 'limit', 'order by', 'group by'],\n        'update': ['update', 'set', 'where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = {';': true, ',': true, '.': true, '(': true};\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = {'.': true};\n\n    // Populate tokens array\n    var str = '';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if (token !== null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if (! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i + 1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i - 1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i + 1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i + 1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) {\n                output += \"\\n\";\n            }\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentatin and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]] &&\n               ! (i > 0 && spaceExceptionsAfter[tokens[i - 1][1]]) &&\n               output.charAt(output.length - 1) != ' ') {\n                output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if ((lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set') &&\n            tokens[i][1] == ',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where' &&\n            (tokens[i][1] == 'and' || tokens[i][1] == 'or' || tokens[i][1] == 'xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & identation++\n            //if (blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param string      question\n * @param string      url         URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param function    callbackFn  callback to execute after user clicks on OK\n */\n\njQuery.fn.PMA_confirm = function (question, url, callbackFn) {\n    var confirmState = PMA_commonParams.get('confirm');\n    // when the Confirm directive is set to false in config.inc.php\n    // and not changed in user prefs, confirmState is \"\"\n    // when it's unticked in user prefs, confirmState is 1\n    if (confirmState === \"\" || confirmState === \"1\") {\n        // user does not want to confirm\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n            return true;\n        }\n    }\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    /**\n     * @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strOK] = function () {\n        $(this).dialog(\"close\");\n\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n        }\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog(\"close\");\n    };\n\n    $('<div/>', {'id': 'confirm_dialog'})\n    .prepend(question)\n    .dialog({\n        buttons: button_options,\n        close: function () {\n            $(this).remove();\n        },\n        modal: true\n    });\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param string      text_selector   string to select the sortKey's text\n *\n * @return jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function (text_selector) {\n    return this.each(function () {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function (index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        });\n\n        //get the sorted order\n        rows.sort(function (a, b) {\n            if (a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if (a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        });\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function (index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        });\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#create_table_form_minimal.ajax\").die('submit');\n    $(\"form.create_table_form.ajax\").die('submit');\n    $(\"form.create_table_form.ajax input[name=submit_num_fields]\").die('click');\n    $(\"form.create_table_form.ajax input\").die('keyup');\n});\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Attach event handler for submission of create table form (save)\n     */\n    $(\"form.create_table_form.ajax\").live('submit', function (event) {\n        event.preventDefault();\n\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this);\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            PMA_prepareForAjaxRequest($form);\n            //User wants to submit the form\n            $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n                if (data.success === true) {\n                    $('#properties_message')\n                     .removeClass('error')\n                     .html('');\n                    PMA_ajaxShowMessage(data.message);\n                    // Only if the create table dialog (distinct panel) exists\n                    if ($(\"#create_table_dialog\").length > 0) {\n                        $(\"#create_table_dialog\").dialog(\"close\").remove();\n                    }\n                    $('#tableslistcontainer').before(data.formatted_sql);\n\n                    /**\n                     * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                     */\n                    var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                    // this is the first table created in this db\n                    if (tables_table.length === 0) {\n                        PMA_commonActions.refreshMain(\n                            PMA_commonParams.get('opendb_url')\n                        );\n                    } else {\n                        /**\n                         * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                         */\n                        var curr_last_row = $(tables_table).find('tr:last');\n                        /**\n                         * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                         */\n                        var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                        /**\n                         * @var curr_last_row_index Index of {@link curr_last_row}\n                         */\n                        var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                        /**\n                         * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                         */\n                        var new_last_row_index = curr_last_row_index + 1;\n                        /**\n                         * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                         */\n                        var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                        data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                        //append to table\n                        $(data.new_table_string)\n                         .appendTo(tables_table);\n\n                        //Sort the table\n                        $(tables_table).PMA_sort_table('th');\n\n                        // Adjust summary row\n                        PMA_adjustTotals();\n                    }\n\n                    //Refresh navigation as a new table has been added\n                    PMA_reloadNavigation();\n                } else {\n                    PMA_ajaxShowMessage(\n                        '<div class=\"error\">' + data.error + '</div>',\n                        false\n                    );\n                }\n            }); // end $.post()\n        } // end if (checkTableEditForm() )\n    }); // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     */\n    $(\"form.create_table_form.ajax input[name=submit_num_fields]\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this).closest('form');\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=1\", function (data) {\n            if (data.success) {\n                $(\"#page_content\").html(data.message);\n                PMA_highlightSQL($('#page_content'));\n                PMA_verifyColumnsProperties();\n                PMA_ajaxRemoveMessage($msgbox);\n            } else {\n                PMA_ajaxShowMessage(data.error);\n            }\n        }); //end $.post()\n    }); // end create table form (add fields)\n\n    $(\"form.create_table_form.ajax input\").live('keydown', function (event) {\n        if (event.keyCode == 13) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            $(this)\n                .closest('form')\n                .append('<input type=\"hidden\" name=\"do_save_data\" value=\"1\" />')\n                .submit();\n        }\n    });\n});\n\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#copyTable.ajax\").die('submit');\n    $(\"#moveTableForm\").die('submit');\n    $(\"#tableOptionsForm\").die('submit');\n    $(\"#tbl_maintenance li a.maintain_action.ajax\").die('click');\n});\n/**\n * jQuery coding for 'Table operations'.  Used on tbl_operations.php\n * Attach Ajax Event handlers for Table operations\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     *Ajax action for submitting the \"Copy table\"\n    **/\n    $(\"#copyTable.ajax\").live('submit', function (event) {\n        event.preventDefault();\n        var $form = $(this);\n        PMA_prepareForAjaxRequest($form);\n        $.post($form.attr('action'), $form.serialize() + \"&submit_copy=Go\", function (data) {\n            if (data.success === true) {\n                if ($form.find(\"input[name='switch_to_new']\").prop('checked')) {\n                    PMA_commonParams.set(\n                        'db',\n                        data.db\n                    );\n                    PMA_commonParams.set(\n                        'table',\n                        $form.find(\"input[name='new_name']\").val()\n                    );\n                    PMA_commonActions.refreshMain(false, function () {\n                        PMA_ajaxShowMessage(data.message);\n                    });\n                } else {\n                    PMA_ajaxShowMessage(data.message);\n                }\n                // Refresh navigation when the table is copied\n                PMA_reloadNavigation();\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.post()\n    });//end of copyTable ajax submit\n\n    /**\n     *Ajax action for submitting the \"Move table\"\n     */\n    $(\"#moveTableForm\").live('submit', function (event) {\n        event.preventDefault();\n        var $form = $(this);\n        var db = $form.find('select[name=target_db]').val();\n        var tbl = $form.find('input[name=new_name]').val();\n        PMA_prepareForAjaxRequest($form);\n        $.post($form.attr('action'), $form.serialize() + \"&submit_move=1\", function (data) {\n            if (data.success === true) {\n                PMA_commonParams.set('db', db);\n                PMA_commonParams.set('table', tbl);\n                PMA_commonActions.refreshMain(false, function () {\n                    PMA_ajaxShowMessage(data.message);\n                });\n                // Refresh navigation when the table is copied\n                PMA_reloadNavigation();\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.post()\n    });\n\n    /**\n     * Ajax action for submitting the \"Table options\"\n     */\n    $(\"#tableOptionsForm\").live('submit', function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var $form = $(this);\n        var $tblNameField = $form.find('input[name=new_name]');\n        if ($tblNameField.val() !== $tblNameField[0].defaultValue) {\n            // reload page and navigation if the table has been renamed\n            PMA_prepareForAjaxRequest($form);\n            var tbl = $tblNameField.val();\n            $.post($form.attr('action'), $form.serialize(), function (data) {\n                if (data.success === true) {\n                    PMA_commonParams.set('table', tbl);\n                    PMA_commonActions.refreshMain(false, function () {\n                        $('#page_content').html(data.message);\n                        PMA_highlightSQL($('#page_content'));\n                    });\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.post()\n        } else {\n            $form.removeClass('ajax').submit().addClass('ajax');\n        }\n    });\n\n    /**\n     *Ajax events for actions in the \"Table maintenance\"\n    **/\n    $(\"#tbl_maintenance li a.maintain_action.ajax\").live('click', function (event) {\n        event.preventDefault();\n        if ($(\"#sqlqueryresults\").length !== 0) {\n            $(\"#sqlqueryresults\").remove();\n        }\n        if ($(\"#result_query\").length !== 0) {\n            $(\"#result_query\").remove();\n        }\n        //variables which stores the common attributes\n        $.post($(this).attr('href'), { ajax_request: 1 }, function (data) {\n            function scrollToTop() {\n                $('html, body').animate({ scrollTop: 0 });\n            }\n            if (data.success === true && data.sql_query !== undefined) {\n                PMA_ajaxShowMessage(data.message);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").prependTo(\"#page_content\");\n                $(\"#sqlqueryresults\").html(data.sql_query);\n                PMA_highlightSQL($('#page_content'));\n                scrollToTop();\n            } else if (data.success === true) {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.message);\n                var $success = $temp_div.find(\"#result_query .success\");\n                PMA_ajaxShowMessage($success);\n                $(\"<div id='sqlqueryresults' class='ajax'></div>\").prependTo(\"#page_content\");\n                $(\"#sqlqueryresults\").html(data.message);\n                PMA_highlightSQL($('#page_content'));\n                PMA_init_slider();\n                $(\"#sqlqueryresults\").children(\"fieldset,br\").remove();\n                scrollToTop();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'></div>\");\n                $temp_div.html(data.error);\n                var $error = $temp_div.find(\"code\").addClass(\"error\");\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    });//end of table maintanance ajax click\n}); //end $(document).ready for 'Table operations'\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#drop_db_anchor.ajax\").die('click');\n});\n/**\n * Attach Ajax event handlers for Drop Database. Moved here from db_structure.js\n * as it was also required on db_create.php\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"#drop_db_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropDatabaseStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP DATABASE ' + escapeHtml(PMA_commonParams.get('db'))\n        );\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success) {\n                    //Database deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('db', '');\n                    PMA_commonActions.refreshMain(\n                        'server_databases.php',\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            });\n        });\n    });\n}); // end of $() for Drop Database\n\n/**\n * Validates the password field in a form\n *\n * @see    PMA_messages.strPasswordEmpty\n * @see    PMA_messages.strPasswordNotSame\n * @param  object $the_form The form to be validated\n * @return bool\n */\nfunction PMA_checkPassword($the_form)\n{\n    // Did the user select 'no password'?\n    if ($the_form.find('#nopass_1').is(':checked')) {\n        return true;\n    } else {\n        var $pred = $the_form.find('#select_pred_password');\n        if ($pred.length && ($pred.val() == 'none' || $pred.val() == 'keep')) {\n            return true;\n        }\n    }\n\n    var $password = $the_form.find('input[name=pma_pw]');\n    var $password_repeat = $the_form.find('input[name=pma_pw2]');\n    var alert_msg = false;\n\n    if ($password.val() === '') {\n        alert_msg = PMA_messages.strPasswordEmpty;\n    } else if ($password.val() != $password_repeat.val()) {\n        alert_msg = PMA_messages.strPasswordNotSame;\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        $password.val('');\n        $password_repeat.val('');\n        $password.focus();\n        return false;\n    }\n    return true;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('#change_password_anchor.ajax').die('click');\n});\n/**\n * Attach Ajax event handlers for 'Change Password' on index.php\n */\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     */\n    $('#change_password_anchor.ajax').live('click', function (event) {\n        event.preventDefault();\n\n        var $msgbox = PMA_ajaxShowMessage();\n\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages.strGo] = function () {\n\n            event.preventDefault();\n\n            /**\n             * @var $the_form    Object referring to the change password form\n             */\n            var $the_form = $(\"#change_password_form\");\n\n            if (! PMA_checkPassword($the_form)) {\n                return false;\n            }\n\n            /**\n             * @var this_value  String containing the value of the submit button.\n             * Need to append this for the change password form on Server Privileges\n             * page to work\n             */\n            var this_value = $(this).val();\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $the_form.append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n            $.post($the_form.attr('action'), $the_form.serialize() + '&change_pw=' + this_value, function (data) {\n                if (data.success === true) {\n                    $(\"#page_content\").prepend(data.message);\n                    PMA_highlightSQL($('#page_content'));\n                    $(\"#change_password_dialog\").hide().remove();\n                    $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                    PMA_ajaxRemoveMessage($msgbox);\n                }\n                else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.post()\n        };\n\n        button_options[PMA_messages.strCancel] = function () {\n            $(this).dialog('close');\n        };\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (data.success) {\n                $('<div id=\"change_password_dialog\"></div>')\n                .dialog({\n                    title: PMA_messages.strChangePassword,\n                    width: 600,\n                    close: function (ev, ui) {\n                        $(this).remove();\n                    },\n                    buttons : button_options,\n                    modal: true\n                })\n                .append(data.message);\n                // for this dialog, we remove the fieldset wrapping due to double headings\n                $(\"fieldset#fieldset_change_password\")\n                .find(\"legend\").remove().end()\n                .find(\"table.noclick\").unwrap().addClass(\"some-margin\")\n                .find(\"input#text_pma_pw\").focus();\n                displayPasswordGenerateButton();\n                $('#fieldset_change_password_footer').hide();\n                PMA_ajaxRemoveMessage($msgbox);\n                $('#change_password_form').bind('submit', function (e) {\n                    e.preventDefault();\n                    $(this)\n                        .closest('.ui-dialog')\n                        .find('.ui-dialog-buttonpane .ui-button')\n                        .first()\n                        .click();\n                });\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n            }\n        }); // end $.get()\n    }); // end handler for change password anchor\n}); // end $() for Change Password\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"select.column_type\").die('change');\n    $(\"select.default_type\").die('change');\n    $('input.allow_null').die('change');\n});\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\nAJAX.registerOnload('functions.js', function () {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs live() to work also in the Create Table dialog\n    $(\"select.column_type\").live('change', function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").live('change', function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $('input.allow_null').live('change', function () {\n        PMA_validateDefaultValue($(this));\n    });\n});\n\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select.column_type\").each(function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").each(function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n * Ticks the NULL checkbox if NULL is chosen as default value.\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n        if ($default_type.val() == 'NULL') {\n            var $null_checkbox = $default_type.closest('tr').find('.allow_null');\n            $null_checkbox.prop('checked', true);\n        }\n    }\n}\n\n/**\n * If the column does not allow NULL values, makes sure that default is not NULL\n */\nfunction PMA_validateDefaultValue($null_checkbox)\n{\n    if (! $null_checkbox.prop('checked')) {\n        var $default = $null_checkbox.closest('tr').find('.default_type');\n        if ($default.val() == 'NULL') {\n            $default.val('NONE');\n        }\n    }\n}\n\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"a.open_enum_editor\").die('click');\n    $(\"input.add_value\").die('click');\n    $(\"#enum_editor td.drop\").die('click');\n});\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"a.open_enum_editor\").live('click', function () {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        var title;\n        var i;\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            title = PMA_messages.enum_newColumnVals;\n        } else {\n            title = PMA_messages.enum_columnVals.replace(\n                /%s/,\n                '\"' + escapeHtml(decodeURIComponent(colname)) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (i = 0; i < inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i + 1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length === 0) {\n            values.push('', '', '', '');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (i = 0; i < values.length; i++) {\n            fields += \"<tr><td>\" +\n                   \"<input type='text' value='\" + values[i] + \"'/>\" +\n                   \"</td><td class='drop'>\" +\n                   drop_icon +\n                   \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\" +\n                   \"<fieldset>\" +\n                    \"<legend>\" + title + \"</legend>\" +\n                    \"<p>\" + PMA_getImage('s_notice.png') +\n                    PMA_messages.enum_hint + \"</p>\" +\n                    \"<table class='values'>\" + fields + \"</table>\" +\n                    \"</fieldset><fieldset class='tblFooters'>\" +\n                    \"<table class='add'><tr><td>\" +\n                    \"<div class='slider'></div>\" +\n                    \"</td><td>\" +\n                    \"<form><div><input type='submit' class='add_value' value='\" +\n                    $.sprintf(PMA_messages.enum_addValue, 1) +\n                    \"'/></div></form>\" +\n                    \"</td></tr></table>\" +\n                    \"<input type='hidden' value='\" + // So we know which column's data is being edited\n                    $(this).closest('td').find(\"input\").attr(\"id\") +\n                    \"' />\" +\n                    \"</fieldset>\" +\n                    \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages.strGo] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = [];\n            $(this).find(\".values input\").each(function (index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").val();\n            $(\"input#\" + values_id).val(value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages.strClose] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            modal: true,\n            title: PMA_messages.enum_editor,\n            buttons: buttonOptions,\n            open: function () {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function (event, ui) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    $.sprintf(PMA_messages.enum_addValue, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('a.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    // When \"add a new value\" is clicked, append an empty text field\n    $(\"input.add_value\").live('click', function (e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\" +\n                    \"<input type='text' />\" +\n                    \"</td><td class='drop'>\" +\n                    PMA_getImage('b_drop.png') +\n                    \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(\"#enum_editor td.drop\").live('click', function () {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param string   form_id  Variable which parses the form name as\n *                            the input\n * @return boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\" + form_id).length === 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_type = $(\"#select_index_type\");\n\n    // Index is a primary key\n    if ($the_idx_type.find(\"option:selected\").val() == 'PRIMARY') {\n        $the_idx_name.val('PRIMARY');\n        $the_idx_name.prop(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.val() == 'PRIMARY') {\n            $the_idx_name.val(\"\");\n        }\n        $the_idx_name.prop(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\nAJAX.registerTeardown('functions.js', function () {\n    $('#index_frm input[type=submit]').die('click');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handler for adding more columns to an index in the editor\n     */\n    $('#index_frm input[type=submit]').live('click', function (event) {\n        event.preventDefault();\n        var rows_to_add = $(this)\n            .closest('fieldset')\n            .find('.slider')\n            .slider('value');\n        while (rows_to_add--) {\n            var $newrow = $('#index_columns')\n                .find('tbody > tr:first')\n                .clone()\n                .appendTo(\n                    $('#index_columns').find('tbody')\n                );\n            $newrow.find(':input').each(function () {\n                $(this).val('');\n            });\n            // focus index size input on column picked\n            $newrow.find('select').change(function () {\n                if ($(this).find(\"option:selected\").val() === '') {\n                    return true;\n                }\n                $(this).closest(\"tr\").find(\"input\").focus();\n            });\n        }\n    });\n});\n\nfunction indexEditorDialog(url, title, callback_success, callback_failure)\n{\n    /*Remove the hidden dialogs if there are*/\n    if ($('#edit_index_dialog').length !== 0) {\n        $('#edit_index_dialog').remove();\n    }\n    var $div = $('<div id=\"edit_index_dialog\"></div>');\n\n    /**\n     * @var button_options Object that stores the options\n     *                     passed to jQueryUI dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strGo] = function () {\n        /**\n         * @var    the_form    object referring to the export form\n         */\n        var $form = $(\"#index_frm\");\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages['strProcessingRequest']);\n        PMA_prepareForAjaxRequest($form);\n        //User wants to submit the form\n        $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n            if ($(\"#sqlqueryresults\").length !== 0) {\n                $(\"#sqlqueryresults\").remove();\n            }\n            if (data.success === true) {\n                PMA_ajaxShowMessage(data.message);\n                if ($('#result_query').length) {\n                    $('#result_query').remove();\n                }\n                if (data.sql_query) {\n                    $('<div id=\"result_query\"></div>')\n                        .html(data.sql_query)\n                        .prependTo('#page_content');\n                    PMA_highlightSQL($('#page_content'));\n                }\n                $(\"#result_query .notice\").remove();\n                $(\"#result_query\").prepend(data.message);\n                /*Reload the field form*/\n                $(\"#table_index\").remove();\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.index_table);\n                $temp_div.find(\"#table_index\").insertAfter(\"#index_header\");\n                if ($(\"#edit_index_dialog\").length > 0) {\n                    $(\"#edit_index_dialog\").dialog(\"close\");\n                }\n                $('div.no_indexes_defined').hide();\n                if (callback_success) {\n                    callback_success();\n                }\n                PMA_reloadNavigation();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.error);\n                var $error;\n                if ($temp_div.find(\".error code\").length !== 0) {\n                    $error = $temp_div.find(\".error code\").addClass(\"error\");\n                } else {\n                    $error = $temp_div;\n                }\n                if (callback_failure) {\n                    callback_failure();\n                }\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog('close');\n    };\n    var $msgbox = PMA_ajaxShowMessage();\n    $.get(\"tbl_indexes.php\", url, function (data) {\n        if (data.success === false) {\n            //in the case of an error, show the error message returned.\n            PMA_ajaxShowMessage(data.error, false);\n        } else {\n            PMA_ajaxRemoveMessage($msgbox);\n            // Show dialog if the request was successful\n            $div\n            .append(data.message)\n            .dialog({\n                title: title,\n                width: 450,\n                // increase the chance that the footer will be visible:\n                height: 450,\n                open: PMA_verifyColumnsProperties,\n                modal: true,\n                buttons: button_options,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            checkIndexType();\n            checkIndexName(\"index_frm\");\n            PMA_showHints($div);\n            // Add a slider for selecting how many columns to add to the index\n            $div.find('.slider').slider({\n                animate: true,\n                value: 1,\n                min: 1,\n                max: 16,\n                slide: function (event, ui) {\n                    $(this).closest('fieldset').find('input[type=submit]').val(\n                        $.sprintf(PMA_messages.strAddToIndex, ui.value)\n                    );\n                }\n            });\n            // focus index size input on column picked\n            $div.find('table#index_columns select').change(function () {\n                if ($(this).find(\"option:selected\").val() === '') {\n                    return true;\n                }\n                $(this).closest(\"tr\").find(\"input\").focus();\n            });\n            // Focus the slider, otherwise it looks nearly transparent\n            $('a.ui-slider-handle').addClass('ui-state-focus');\n            // set focus on index name input, if empty\n            var input = $div.find('input#input_index_name');\n            input.val() || input.focus();\n        }\n    }); // end $.get()\n}\n\n/**\n * Function to display tooltips that were\n * generated on the PHP side by PMA_Util::showHint()\n *\n * @param object $div a div jquery object which specifies the\n *                    domain for searching for tooltips. If we\n *                    omit this parameter the function searches\n *                    in the whole body\n **/\nfunction PMA_showHints($div)\n{\n    if ($div === undefined || ! $div instanceof jQuery || $div.length === 0) {\n        $div = $(\"body\");\n    }\n    $div.find('.pma_hint').each(function () {\n        PMA_tooltip(\n            $(this).children('img'),\n            'img',\n            $(this).children('span').html()\n        );\n    });\n}\n\nAJAX.registerOnload('functions.js', function () {\n    PMA_showHints();\n});\n\nfunction PMA_mainMenuResizerCallback() {\n    // 5 px margin for jumping menu in Chrome\n    return $(document.body).width() - 5;\n}\n// This must be fired only once after the inital page load\n$(function () {\n    // Initialise the menu resize plugin\n    $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);\n    // register resize event\n    $(window).resize(function () {\n        $('#topmenu').menuResizer('resize');\n    });\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1], 10);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text;\n    if ($element.css('display') == 'none') {\n        text = '+ ';\n    } else {\n        text = '- ';\n    }\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    var right;\n    if ($('span.text_direction', $obj).text() == 'ltr') {\n        right = 'right';\n    } else {\n        right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h - 1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('td.toggleOn', $obj).width();\n    var off = $('td.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('td.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('td.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('td.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('td.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('div.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('div.container', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('div.container', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('div.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('span.callback', this).text();\n        var operator, url, removeClass, addClass;\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                operator = '-=';\n            } else {\n                operator = '+=';\n            }\n            url = $(this).find('td.toggleOff > span').text();\n            removeClass = 'on';\n            addClass = 'off';\n        } else {\n            if (right == 'right') {\n                operator = '+=';\n            } else {\n                operator = '-=';\n            }\n            url = $(this).find('td.toggleOn > span').text();\n            removeClass = 'off';\n            addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function (data) {\n            if (data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.container').unbind('click');\n});\n/**\n * Initialise all toggle buttons\n */\nAJAX.registerOnload('functions.js', function () {\n    $('div.toggleAjax').each(function () {\n        var $button = $(this).show();\n        $button.find('img').each(function () {\n            if (this.complete) {\n                toggleButton($button);\n            } else {\n                $(this).load(function () {\n                    toggleButton($button);\n                });\n            }\n        });\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('.vpointer').die('hover');\n    $('.vmarker').die('click');\n    $('#pageselector').die('change');\n    $('a.formLinkSubmit').die('click');\n    $('#update_recent_tables').unbind('ready');\n    $('#sync_favorite_tables').unbind('ready');\n});\n/**\n * Vertical pointer\n */\nAJAX.registerOnload('functions.js', function () {\n    $('.vpointer').live('hover',\n        //handlerInOut\n        function (e) {\n            var $this_td = $(this);\n            var row_num = PMA_getRowNumber($this_td.attr('class'));\n            // for all td of the same vertical row, toggle hover\n            $('.vpointer').filter('.row_' + row_num).toggleClass('hover');\n        }\n    );\n\n\n    /**\n     * Vertical marker\n     */\n    $('.vmarker').live('click', function (e) {\n        // do not trigger when clicked on anchor\n        if ($(e.target).is('a, img, a *')) {\n            return;\n        }\n\n        var $this_td = $(this);\n        var row_num = PMA_getRowNumber($this_td.attr('class'));\n\n        // XXX: FF fires two click events for <label> (label and checkbox), so we need to handle this differently\n        var $checkbox = $('.vmarker').filter('.row_' + row_num + ':first').find(':checkbox');\n        if ($checkbox.length) {\n            // checkbox in a row, add or remove class depending on checkbox state\n            var checked = $checkbox.prop('checked');\n            if (!$(e.target).is(':checkbox, label')) {\n                checked = !checked;\n                $checkbox.prop('checked', checked);\n            }\n            // for all td of the same vertical row, toggle the marked class\n            if (checked) {\n                $('.vmarker').filter('.row_' + row_num).addClass('marked');\n            } else {\n                $('.vmarker').filter('.row_' + row_num).removeClass('marked');\n            }\n        } else {\n            // normaln data table, just toggle class\n            $('.vmarker').filter('.row_' + row_num).toggleClass('marked');\n        }\n    });\n\n    /**\n     * Autosubmit page selector\n     */\n    $('select.pageselector').live('change', function (event) {\n        event.stopPropagation();\n        // Check where to load the new content\n        if ($(this).closest(\"#pma_navigation\").length === 0) {\n            // For the main page we don't need to do anything,\n            $(this).closest(\"form\").submit();\n        } else {\n            // but for the navigation we need to manually replace the content\n            PMA_navigationTreePagination($(this));\n        }\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('li.jsversioncheck').length > 0) {\n        $.getJSON('version_check.php', {}, PMA_current_version);\n    }\n\n    if ($('#is_git_revision').length > 0) {\n        setTimeout(PMA_display_git_revision, 10);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_Util::linkOrButton() to be clickable\n     */\n    $('a.formLinkSubmit').live('click', function (e) {\n\n        if ($(this).attr('href').indexOf('=') != -1) {\n            var data = $(this).attr('href').substr($(this).attr('href').indexOf('#') + 1).split('=', 2);\n            $(this).parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n        }\n        $(this).parents('form').submit();\n        return false;\n    });\n\n    if ($('#update_recent_tables').length) {\n        $.get(\n            $('#update_recent_tables').attr('href'),\n            function (data) {\n                if (data.success === true) {\n                    $('#pma_recent_list').html(data.list);\n                }\n            }\n        );\n    }\n\n    // Sync favorite tables from localStorage to pmadb.\n    if ($('#sync_favorite_tables').length) {\n        $.ajax({\n            url: $('#sync_favorite_tables').attr(\"href\"),\n            cache: false,\n            type: 'POST',\n            data: {\n                favorite_tables: (window.localStorage['favorite_tables']\n                    !== undefined)\n                    ? window.localStorage['favorite_tables']\n                    : ''\n            },\n            success: function (data) {\n                // Update localStorage.\n                if (window.localStorage !== undefined) {\n                    window.localStorage['favorite_tables']\n                        = data.favorite_tables;\n                }\n                $('#pma_favorite_list').html(data.list);\n            }\n        });\n    }\n}); // end of $()\n\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        if ($this.data('slider_init_done')) {\n            return;\n        }\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#' + this.id, \"class\": 'ajax'})\n            .text(this.title)\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function () {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function () {\n                    $wrapper.toggle(!visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        PMA_set_status_label($this);\n        $this.data('slider_init_done', 1);\n    });\n}\n\n/**\n * Initializes slider effect.\n */\nAJAX.registerOnload('functions.js', function () {\n    PMA_init_slider();\n});\n\n/**\n * Restores sliders to the state they were in before initialisation.\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        $this.removeData();\n        $this.parent().replaceWith($this);\n        $this.parent().children('a').remove();\n    });\n});\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param msg    A string containing the text to display\n * @param $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg === undefined || msg.length === 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj === undefined || ! $obj instanceof jQuery || $obj.length === 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length === 0) {\n            $('#page_content').prepend(\n                '<span id=\"PMA_slidingMessage\" ' +\n                'style=\"display: inline-block;\"></span>'\n            );\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div>' + msg + '</div>');\n            // highlight any sql before taking height;\n            PMA_highlightSQL($obj);\n            $obj.find('div')\n                .first()\n                .hide();\n            $obj\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        $obj.width('100%')\n            .html('<div>' + msg + '</div>');\n        // highlight any sql before taking height;\n        PMA_highlightSQL($obj);\n        var h = $obj\n            .find('div')\n            .first()\n            .hide()\n            .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function () {\n            // Set the height of the parent\n            // to the height of the child\n                $obj\n                .height(\n                    $obj\n                    .find('div')\n                    .first()\n                    .height()\n                );\n            });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(\"#drop_tbl_anchor.ajax\").die('click');\n    $(\"#drop_view_anchor.ajax\").die('click');\n    $(\"#truncate_tbl_anchor.ajax\").die('click');\n});\n/**\n * Attach Ajax event handlers for Drop Table.\n */\nAJAX.registerOnload('functions.js', function () {\n    $(\"#drop_tbl_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP TABLE ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    PMA_ajaxRemoveMessage($msgbox);\n                    // Table deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('table', '');\n                    PMA_commonActions.refreshMain(\n                        PMA_commonParams.get('opendb_url'),\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop Table Ajax action\n\n    $(\"#drop_view_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strDropTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'DROP VIEW ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if (data.success === true) {\n                    PMA_ajaxRemoveMessage($msgbox);\n                    // Table deleted successfully, refresh both the frames\n                    PMA_reloadNavigation();\n                    PMA_commonParams.set('table', '');\n                    PMA_commonActions.refreshMain(\n                        PMA_commonParams.get('opendb_url'),\n                        function () {\n                            PMA_ajaxShowMessage(data.message);\n                        }\n                    );\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Drop View Ajax action\n\n    $(\"#truncate_tbl_anchor.ajax\").live('click', function (event) {\n        event.preventDefault();\n        /**\n         * @var question    String containing the question to be asked for confirmation\n         */\n        var question = PMA_messages.strTruncateTableStrongWarning + ' ';\n        question += $.sprintf(\n            PMA_messages.strDoYouReally,\n            'TRUNCATE ' + escapeHtml(PMA_commonParams.get('table'))\n        );\n        $(this).PMA_confirm(question, $(this).attr('href'), function (url) {\n            PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $.get(url, {'is_js_confirmed': '1', 'ajax_request': true}, function (data) {\n                if ($(\"#sqlqueryresults\").length !== 0) {\n                    $(\"#sqlqueryresults\").remove();\n                }\n                if ($(\"#result_query\").length !== 0) {\n                    $(\"#result_query\").remove();\n                }\n                if (data.success === true) {\n                    PMA_ajaxShowMessage(data.message);\n                    $(\"<div id='sqlqueryresults'></div>\").prependTo(\"#page_content\");\n                    $(\"#sqlqueryresults\").html(data.sql_query);\n                    PMA_highlightSQL($('#page_content'));\n                } else {\n                    PMA_ajaxShowMessage(data.error, false);\n                }\n            }); // end $.get()\n        }); // end $.PMA_confirm()\n    }); //end of Truncate Table Ajax action\n}); // end of $() for Truncate Table\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\nAJAX.registerOnload('functions.js', function () {\n    var $elm = $('#sqlquery');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            // for codemirror\n            codemirror_editor = CodeMirror.fromTextArea($elm[0], {\n                lineNumbers: true,\n                matchBrackets: true,\n                indentUnit: 4,\n                mode: \"text/x-mysql\",\n                lineWrapping: true\n            });\n            codemirror_editor.focus();\n            $(codemirror_editor.getWrapperElement()).bind(\n                'keydown',\n                catchKeypressesFromSqlTextboxes\n            );\n        } else {\n            // without codemirror\n            $elm.focus().bind('keydown', catchKeypressesFromSqlTextboxes);\n        }\n    }\n    PMA_highlightSQL($('body'));\n});\nAJAX.registerTeardown('functions.js', function () {\n    if (codemirror_editor) {\n        $('#sqlquery').text(codemirror_editor.getValue());\n        codemirror_editor.toTextArea();\n        codemirror_editor = false;\n    }\n});\n\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p === null) ? true : p;\n        if (prevent) {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) {\n                    $(this).bind('selectstart', function () {\n                        return false;\n                    });\n                } else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if ($.browser.opera) {\n                    $(this).bind('mousedown', function () {\n                        return false;\n                    });\n                } else {\n                    $(this).attr('unselectable', 'on');\n                }\n            });\n        } else {\n            return this.each(function () {\n                if ($.browser.msie || $.browser.safari) {\n                    $(this).unbind('selectstart');\n                } else if ($.browser.mozilla) {\n                    $(this).css('MozUserSelect', 'inherit');\n                } else if ($.browser.opera) {\n                    $(this).unbind('mousedown');\n                } else {\n                    $(this).removeAttr('unselectable');\n                }\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value;\n        });\n    };\n})(jQuery);\n\n/**\n * Create a jQuery UI tooltip\n *\n * @param $elements     jQuery object representing the elements\n * @param item          the item\n *                      (see http://api.jqueryui.com/tooltip/#option-items)\n * @param myContent     content of the tooltip\n * @param additionalOptions to override the default options\n *\n */\nfunction PMA_tooltip($elements, item, myContent, additionalOptions)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var defaultOptions = {\n        content: myContent,\n        items:  item,\n        tooltipClass: \"tooltip\",\n        track: true,\n        show: false,\n        hide: false\n    };\n\n    $elements.tooltip($.extend(true, defaultOptions, additionalOptions));\n}\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    var $td = $(td);\n    if ($td.is('.null')) {\n        return '';\n    } else if (! $td.is('.to_be_saved') && $td.data('original_data')) {\n        return $td.data('original_data');\n    } else {\n        return $td.text();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('a.themeselect').die('click');\n    $('.autosubmit').die('change');\n    $('a.take_theme').unbind('click');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Theme selector.\n     */\n    $('a.themeselect').live('click', function (e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $('.autosubmit').live('change', function (e) {\n        $(this).closest('form').submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('a.take_theme').click(function (e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms['setTheme'].elements['set_theme']) {\n            window.opener.document.forms['setTheme'].elements['set_theme'].value = what;\n            window.opener.document.forms['setTheme'].submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if (document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if (window.getSelection) {\n        var sel = window.getSelection();\n        if (sel.empty) {\n            sel.empty();\n        }\n        if (sel.removeAllRanges) {\n            sel.removeAllRanges();\n        }\n    }\n}\n\n/**\n * HTML escaping\n */\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input#print').unbind('click');\n    $('a.create_view.ajax').die('click');\n    $('#createViewDialog').find('input, select').die('keydown');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    $('input#print').click(printPage);\n    /**\n     * Ajaxification for the \"Create View\" action\n     */\n    $('a.create_view.ajax').live('click', function (e) {\n        e.preventDefault();\n        PMA_createViewDialog($(this));\n    });\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and used to submit the Ajax request when the ENTER key is pressed.\n     */\n    if ($('#createViewDialog').length !== 0) {\n        $('#createViewDialog').find('input, select').live('keydown', function (e) {\n            if (e.which === 13) { // 13 is the ENTER key\n                e.preventDefault();\n\n                // with preventing default, selection by <select> tag\n                // was also prevented in IE\n                $(this).blur();\n\n                $(this).closest('.ui-dialog').find('.ui-button:first').click();\n            }\n        }); // end $.live()\n    }\n\n    var $elm = $('textarea[name=\"view[as]\"]');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            syntaxHighlighter = CodeMirror.fromTextArea(\n                $elm[0],\n                {\n                    lineNumbers: true,\n                    matchBrackets: true,\n                    indentUnit: 4,\n                    mode: \"text/x-mysql\",\n                    lineWrapping: true\n                }\n            );\n        }\n    }\n});\n\nfunction PMA_createViewDialog($this)\n{\n    var $msg = PMA_ajaxShowMessage();\n    var syntaxHighlighter = null;\n    $.get($this.attr('href') + '&ajax_request=1&ajax_dialog=1', function (data) {\n        if (data.success === true) {\n            PMA_ajaxRemoveMessage($msg);\n            var buttonOptions = {};\n            buttonOptions[PMA_messages.strGo] = function () {\n                if (typeof CodeMirror !== 'undefined') {\n                    syntaxHighlighter.save();\n                }\n                $msg = PMA_ajaxShowMessage();\n                $.get('view_create.php', $('#createViewDialog').find('form').serialize(), function (data) {\n                    PMA_ajaxRemoveMessage($msg);\n                    if (data.success === true) {\n                        $('#createViewDialog').dialog(\"close\");\n                        $('#result_query').html(data.message);\n                        PMA_reloadNavigation();\n                    } else {\n                        PMA_ajaxShowMessage(data.error, false);\n                    }\n                });\n            };\n            buttonOptions[PMA_messages.strClose] = function () {\n                $(this).dialog(\"close\");\n            };\n            var $dialog = $('<div/>').attr('id', 'createViewDialog').append(data.message).dialog({\n                width: 600,\n                minWidth: 400,\n                modal: true,\n                buttons: buttonOptions,\n                title: PMA_messages.strCreateView,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            // Attach syntax highlighted editor\n            if (typeof CodeMirror !== 'undefined') {\n                var $elm = $dialog.find('textarea');\n                var opts = {lineNumbers: true, matchBrackets: true, indentUnit: 4, mode: \"text/x-mysql\", lineWrapping: true};\n                syntaxHighlighter = CodeMirror.fromTextArea($elm[0], opts);\n            }\n            $('input:visible[type=text]', $dialog).first().focus();\n        } else {\n            PMA_ajaxShowMessage(data.error);\n        }\n    });\n}\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length === 0) {\n        var left = $('html').attr('dir') == 'ltr' ? 'left' : 'right';\n        $(\"#floating_menubar\")\n            .css('margin-' + left, $('#pma_navigation').width() + $('#pma_navigation_resizer').width())\n            .css(left, 0)\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'width': '100%',\n                'z-index': 500\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        // Allow the DOM to render, then adjust the padding on the body\n        setTimeout(function () {\n            $('body').css(\n                'padding-top',\n                $('#floating_menubar').outerHeight(true)\n            );\n            $('#topmenu').menuResizer('resize');\n        }, 4);\n    }\n});\n\n/**\n * Scrolls the page to the top if clicking the serverinfo bar\n */\n$(function () {\n    $(document).delegate(\"#serverinfo, #goto_pagetop\", \"click\", function (event) {\n        event.preventDefault();\n        $('html, body').animate({scrollTop: 0}, 'fast');\n    });\n});\n\nvar checkboxes_sel = \"input.checkall:checkbox:enabled\";\n/**\n * Watches checkboxes in a form to set the checkall box accordingly\n */\nvar checkboxes_changed = function () {\n    var $form = $(this.form);\n    // total number of checkboxes in current form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(checkboxes_sel).live(\"change\", checkboxes_changed);\n\n$(\"input.checkall_box\").live(\"change\", function () {\n    var is_checked = $(this).is(\":checked\");\n    $(this.form).find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n\n/**\n * Formats a byte number to human-readable form\n *\n * @param bytes the bytes to format\n * @param optional subdecimals the number of digits after the point\n * @param optional pointchar the char to use as decimal point\n */\nfunction formatBytes(bytes, subdecimals, pointchar) {\n    if (!subdecimals) {\n        subdecimals = 0;\n    }\n    if (!pointchar) {\n        pointchar = '.';\n    }\n    var units = ['B', 'KiB', 'MiB', 'GiB'];\n    for (var i = 0; bytes > 1024 && i < units.length; i++) {\n        bytes /= 1024;\n    }\n    var factor = Math.pow(10, subdecimals);\n    bytes = Math.round(bytes * factor) / factor;\n    bytes = bytes.toString().split('.').join(pointchar);\n    return bytes + ' ' + units[i];\n}\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Opens pma more themes link in themes browser, in new window instead of popup\n     * This way, we don't break HTML validity\n     */\n    $(\"a._blank\").prop(\"target\", \"_blank\");\n    /**\n     * Reveal the login form to users with JS enabled\n     * and focus the appropriate input field\n     */\n    var $loginform = $('#loginform');\n    if ($loginform.length) {\n        $loginform.find('.js-show').show();\n        if ($('#input_username').val()) {\n            $('#input_password').focus();\n        } else {\n            $('#input_username').focus();\n        }\n    }\n});\n\n/**\n * When user gets an ajax session expiry message, we show a login link\n */\n$('a.login-link').live('click', function (e) {\n    e.preventDefault();\n    window.location.reload(true);\n});\n\n/**\n * Dynamically adjust the width of the boxes\n * on the table and db operations pages\n */\n(function () {\n    function DynamicBoxes() {\n        var $boxContainer = $('#boxContainer');\n        if ($boxContainer.length) {\n            var minWidth = $boxContainer.data('box-width');\n            var viewport = $(window).width() - $('#pma_navigation').width();\n            var slots = Math.floor(viewport / minWidth);\n            $boxContainer.children()\n            .each(function () {\n                if (viewport < minWidth) {\n                    $(this).width(minWidth);\n                } else {\n                    $(this).css('width', ((1 /  slots) * 100) + \"%\");\n                }\n            })\n            .removeClass('clearfloat')\n            .filter(':nth-child(' + slots + 'n+1)')\n            .addClass('clearfloat');\n        }\n    }\n    AJAX.registerOnload('functions.js', function () {\n        DynamicBoxes();\n    });\n    $(function () {\n        $(window).resize(DynamicBoxes);\n    });\n})();\n\n/**\n * Formats timestamp for display\n */\nfunction PMA_formatDateTime(date, seconds) {\n    var result = $.datepicker.formatDate('yy-mm-dd', date);\n    var timefmt = 'HH:mm';\n    if (seconds) {\n        timefmt = 'HH:mm:ss';\n    }\n    return result + ' ' + $.datepicker.formatTime(\n        timefmt, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds()\n        }\n    );\n}\n\n/**\n * Check than forms have less fields than max allowed by PHP.\n */\nfunction checkNumberOfFields() {\n    if (typeof maxInputVars === 'undefined') {\n        return false;\n    }\n    if (false === maxInputVars) {\n        return false;\n    }\n    $('form').each(function() {\n        var nbInputs = $(this).find(':input').length;\n        if (nbInputs > maxInputVars) {\n            var warning = $.sprintf(PMA_messages.strTooManyInputs, maxInputVars);\n            PMA_ajaxShowMessage(warning);\n            return false;\n        }\n        return true;\n    });\n\n    return true;\n}\n"], "filenames": ["ChangeLog", "js/functions.js"], "buggy_code_start_loc": [5, 2695], "buggy_code_end_loc": [5, 2696], "fixing_code_start_loc": [6, 2695], "fixing_code_end_loc": [7, 2696], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.2, 4.1.x before 4.1.14.3, and 4.2.x before 4.2.7.1 allow remote authenticated users to inject arbitrary web script or HTML via the (1) browse table page, related to js/sql.js; (2) ENUM editor page, related to js/functions.js; (3) monitor page, related to js/server_status_monitor.js; (4) query charts page, related to js/tbl_chart.js; or (5) table relations page, related to libraries/tbl_relation.lib.php.", "other": {"cve": {"id": "CVE-2014-5273", "sourceIdentifier": "cve@mitre.org", "published": "2014-08-22T01:55:08.717", "lastModified": "2014-10-16T07:23:33.003", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.0.x before 4.0.10.2, 4.1.x before 4.1.14.3, and 4.2.x before 4.2.7.1 allow remote authenticated users to inject arbitrary web script or HTML via the (1) browse table page, related to js/sql.js; (2) ENUM editor page, related to js/functions.js; (3) monitor page, related to js/server_status_monitor.js; (4) query charts page, related to js/tbl_chart.js; or (5) table relations page, related to libraries/tbl_relation.lib.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en phpMyAdmin 4.0.x anterior a 4.0.10.2, 4.1.x anterior a 4.1.14.3, y 4.2.x anterior a 4.2.7.1 permiten a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de (1) la p\u00e1gina de las tablas de navegaci\u00f3n, relacionado con js/sql.js; (2) la p\u00e1gina del editor ENUM, relacionado con js/functions.js; (3) la p\u00e1gina de monitorizaci\u00f3n, relacionado con js/server_status_monitor.js; (4) la p\u00e1gina de la consulta de gr\u00e1ficos, relacionado con js/tbl_chart.js; o (5) la p\u00e1gina de las relaciones de tablas, relacionado con libraries/tbl_relation.lib.php."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B406A721-0075-46C8-A920-3C9602AD667B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "C8AE4653-1911-4A58-85DD-51E0578E788E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "B8D28655-7F37-474D-A4E2-772AF24B94E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "1FA1951E-BD85-42BF-BF7F-79A14D165914"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "0D08BEE8-5ACF-438D-9F06-86C6227C9A5F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "58DD0910-DBBA-4858-B9B1-FA93D08323D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "50DA8EBE-52AA-45A5-A5FB-75AF84E415E4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "DC8D93A3-8997-4EB9-A411-74B296D1341F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "6E5A81B2-E16F-4AE2-9691-92D3E8A25CCB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "0245AF2D-F856-4CAA-A830-36D43026D1E4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "00BD9E52-A6BB-48BB-9FEE-D0272AD9B6DA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "C69E253E-157D-45BA-A977-079A49F74A72"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "6325E2AE-BB86-4953-AA9E-0433C00B096E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C54B828-8B23-4C62-907E-8EE7E757B721"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "8F0A53D6-E68D-417E-9B72-55F603EBDFD5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "2B45FC64-ECDF-474A-9151-30667543760E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "12D9ACD9-BA79-4AC0-800D-A66519799DBE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "2E5DD938-C9C2-4542-8AD5-4C11FBFA43CE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "0150F164-B7C2-4E5C-886C-49D651CF307F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "FB765223-DB56-4327-B150-1D633E4AB41C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "58102B9D-C071-43C0-B412-7733E302A944"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "45CDE76C-38B3-41F1-83E7-34F00A4E009A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "EA6AE567-72BB-4B5C-A9B3-AF406691491F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "A13760E1-EA18-434E-8075-D330AEE05D21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.10:*:*:*:*:*:*:*", "matchCriteriaId": "8A6A3056-B853-4880-BECF-799791B5C660"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.11:*:*:*:*:*:*:*", "matchCriteriaId": "09FA5A47-CEF2-4525-BBE4-D1205172300B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.12:*:*:*:*:*:*:*", "matchCriteriaId": "4D228D62-3E19-4005-A995-39AFF30A978B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.13:*:*:*:*:*:*:*", "matchCriteriaId": "C4FF2BA7-F240-4A5B-AC22-62F07D26BB29"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.14:*:*:*:*:*:*:*", "matchCriteriaId": "8AC849CA-2056-491C-B6B1-3D3A4825BF63"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "109C5928-FA6D-4835-B538-B235083AF38F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.1.14.2:*:*:*:*:*:*:*", "matchCriteriaId": "F9DF4655-0731-4C3D-A6D9-E4FFFC63AE08"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEC525D5-EA90-4F01-B1D3-64F4BFBFC4DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "8ACC297E-A54A-4C92-9BCB-CDDA0C7E56C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "4FA4B695-DD00-45FE-8A74-A34E9920EE23"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "BC38B8F8-DB1C-4A7D-A15B-390754687F18"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "CFA5B74C-F0E8-46D0-AF53-A25145DA3E9B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "A6DD88B5-9F4D-4B1C-8A36-CA9727514B42"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "E8645867-C499-41C6-8AA4-B5CB0DB4BB6D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "58EFA2AE-0CF3-47AE-9996-F3685851EA83"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2014-08/msg00045.html", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2014-8.php", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/2c45d7caa614afd71dbe3d0f7270f51ce5569614", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/3ffc967fb60cf2910cc2f571017e977558c67821", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/647c9d12e33a6b64e1c3ff7487f72696bdf2dccb", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/90ddeecf60fc029608b972e490b735f3a65ed0cb", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/cd9f302bf7f91a160fe7080f9a612019ef847f1c", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/2c45d7caa614afd71dbe3d0f7270f51ce5569614"}}