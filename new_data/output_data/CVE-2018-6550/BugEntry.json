{"buggy_code": ["<?php\n\n/**\n *\tPages plugin\n *\n *\t@package Monstra\n *  @subpackage Plugins\n *\t@author Romanenko Sergey / Awilum\n *\t@copyright 2012-2014 Romanenko Sergey / Awilum\n *\t@version 1.0.0\n *\n */\n\n// Register plugin\nPlugin::register( __FILE__,\n                __('Pages' , 'pages'),\n                __('Pages manager', 'pages'),\n                '1.0.0',\n                'Awilum',\n                'http://monstra.org/',\n                'pages',\n                'box');\n\nif (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor'))) {\n\n    // Include Admin\n    Plugin::Admin('pages', 'box');\n\n}\n\n// Add Plugin Javascript\nJavascript::add('plugins/box/pages/js/pages.js', 'backend');\n\n/**\n * Pages Class\n */\nclass Pages extends Frontend\n{\n    /**\n     * Current page data\n     *\n     * @var object\n     */\n    public static $page = null;\n\n    /**\n     * Pages tables\n     *\n     * @var object\n     */\n    public static $pages = null;\n\n    /**\n     * Requested page\n     *\n     * @var string\n     */\n    public static $requested_page = null;\n\n    /**\n     *  Main function\n     */\n    public static function main()\n    {\n        Pages::$pages = new Table('pages');\n        Pages::$page  = Pages::pageLoader();\n    }\n\n    /**\n     * Page loader\n     *\n     * @param  boolean $return_data data\n     * @return array\n     */\n    public static function pageLoader($return_data = true)\n    {\n        $requested_page = Pages::lowLoader(Uri::segments());\n        Pages::$requested_page = $requested_page;\n\n        return Pages::$pages->select('[slug=\"'.$requested_page.'\"]', null);\n    }\n\n    /**\n     * Load current page\n     *\n     * @global string $defpage default page\n     * @param  array  $data uri\n     * @return string\n     */\n    public static function lowLoader($data)\n    {\n        $defpage = Option::get('defaultpage');\n\n        // If data count 2 then it has Parent/Child\n        if (count($data) >= 2) {\n\n            // If exists parent file\n            if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]')) !== 0) {\n\n                // Get child file and get parent page name\n                $child_page = Pages::$pages->select('[slug=\"'.$data[1].'\"]', null);\n\n                // If child page parent is not empty then get his parent\n                if (count($child_page) == 0) {\n                    $c_p = '';\n                } else {\n                    if ($child_page['parent'] != '') {\n                        $c_p = $child_page['parent'];\n                    } else {\n                        $c_p = '';\n                    }\n                }\n\n                // Hack For old Monstra\n                $child_page['access'] = (isset($child_page['access'])) ? $child_page['access'] : 'public' ;\n\n                // Check is child_parent -> request parent\n                if ($c_p == $data[0]) {\n\n                    if (count($data) < 3) { // Checking only for the parent and one child, the remaining issue 404\n\n                        if ((($child_page['status'] == 'published') or\n                            (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                            ($child_page['access'] == 'public')) {\n\n                            $id = $data[1];\n\n                        } elseif (($child_page['access'] == 'registered') and\n                                 (Session::exists('user_id')) and\n                                 ($child_page['status'] == 'published')) {\n\n                            $id = $data[1];\n\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n\n                } else {\n                    $id = 'error404';\n                    Response::status(404);\n                }\n            } else {\n                $id = 'error404';\n                Response::status(404);\n            }\n\n        } else { // Only parent page come\n            if (empty($data[0])) {\n\n                $id = $defpage;\n\n            } else {\n\n                // Get current page\n                $current_page = Pages::$pages->select('[slug=\"'.$data[0].'\"]', null);\n\n                // Hack For old Monstra\n                $current_page['access'] = (isset($current_page['access'])) ? $current_page['access'] : 'public' ;\n\n                if (count($current_page) != 0) {\n                    if ( ! empty($current_page['parent'])) {\n                        $c_p = $current_page['parent'];\n                    } else {\n                        $c_p = '';\n                    }\n                } else {\n                    $c_p = '';\n                }\n\n                // Check if this page has parent\n                if ($c_p !== '') {\n\n                    if ($c_p == $data[0]) {\n                        if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]', null)) != 0) {\n\n                            if ((($current_page['status'] == 'published') or\n                                (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                                ($current_page['access'] == 'public')) {\n\n                                $id = $data[0];\n\n                            } elseif (($current_page['access'] == 'registered') and\n                                     (Session::exists('user_id')) and\n                                     ($current_page['status'] == 'published')) {\n\n                                $id = $data[0];\n\n                            } else {\n                                $id = 'error404';\n                                Response::status(404);\n                            }\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n                } else {\n\n                    if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]', null)) != 0) {\n                        if ((($current_page['status'] == 'published') or\n                            (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                            ($current_page['access'] == 'public')) {\n\n                            $id = $data[0];\n\n                        } elseif (($current_page['access'] == 'registered') and\n                                 (Session::exists('user_id')) and\n                                 ($current_page['status'] == 'published')) {\n\n                            $id = $data[0];\n\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n                }\n            }\n        }\n\n        // Return page name/id to load\n        return $id;\n    }\n\n    /**\n     * Get pages template\n     *\n     * @return string\n     */\n    public static function template()\n    {\n        if (Pages::$page['template'] == '') return 'index'; else return Pages::$page['template'];\n    }\n\n    /**\n     * Get pages contents\n     *\n     * @return string\n     */\n    public static function content($slug = '')\n    {\n        if ( ! empty($slug)) {\n\n            $page = Table::factory('pages')->select('[slug=\"'.$slug.'\"]', null);\n\n            if ( ! empty($page)) {\n\n                $content = Text::toHtml(File::getContent(STORAGE . DS . 'pages' . DS . $page['id'] . '.page.txt'));\n\n                $content = Filter::apply('content', $content);\n\n                return $content;\n\n            } else {\n                return '';\n            }\n\n        } else {\n            return Text::toHtml(File::getContent(STORAGE . DS . 'pages' . DS . Pages::$page['id'] . '.page.txt'));\n        }\n\n    }\n\n    /**\n     * Get pages title\n     *\n     *  <code>\n     *      echo Page::title();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function title()\n    {\n        return !empty(Pages::$page['meta_title']) ? Pages::$page['meta_title'] : Pages::$page['title'];\n    }\n\n    /**\n     * Get pages Description\n     *\n     *  <code>\n     *      echo Page::description();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function description()\n    {\n        return Pages::$page['description'];\n    }\n\n    /**\n     * Get pages Keywords\n     *\n     *  <code>\n     *      echo Page::keywords();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function keywords()\n    {\n        return Pages::$page['keywords'];\n    }\n\n\n    /**\n     * Get pages\n     */\n    public static function getPages()\n    {\n        // Init vars\n        $pages_array = array();\n        $count = 0;\n\n        // Get pages table\n        $pages = new Table('pages');\n\n        // Get Pages List\n        $pages_list = $pages->select('[slug!=\"error404\" and status=\"published\"]');\n\n        foreach ($pages_list as $page) {\n\n            $pages_array[$count]['title']   = Html::toText($page['title']);\n            $pages_array[$count]['meta_title'] = !empty($page['meta_title']) ? Html::toText($page['meta_title']) : $page['title'];\n            $pages_array[$count]['parent']  = $page['parent'];\n            $pages_array[$count]['date']    = $page['date'];\n            $pages_array[$count]['author']  = $page['author'];\n            $pages_array[$count]['slug']    = ($page['slug'] == Option::get('defaultpage')) ? '' : $page['slug'] ;\n\n            if (isset($page['parent'])) {\n                $c_p = $page['parent'];\n            } else {\n                $c_p = '';\n            }\n\n            if ($c_p != '') {\n                $_page = $pages->select('[slug=\"'.$page['parent'].'\"]', null);\n\n                if (isset($_page['title'])) {\n                    $_title = $_page['title'];\n                } else {\n                    $_title = '';\n                }\n                $pages_array[$count]['sort'] = $_title . ' ' . $page['title'];\n            } else {\n                $pages_array[$count]['sort'] = $page['title'];\n            }\n            $_title = '';\n            $count++;\n        }\n\n        // Sort pages\n        $_pages_list = Arr::subvalSort($pages_array, 'sort');\n\n        // return\n        return $_pages_list;\n    }\n\n}\n\n/**\n * Page class\n */\nclass Page extends Pages\n{\n    /**\n     * Get date of current page\n     *\n     *  <code>\n     *      echo Page::date();\n     *  </code>\n     *\n     * @param  string $format Date format\n     * @return string\n     */\n    public static function date($format = 'Y-m-d')\n    {\n        return Date::format(Pages::$page['date'], $format);\n    }\n\n    /**\n     * Get author of current page\n     *\n     *  <code>\n     *      echo Page::author();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function author()\n    {\n        return Pages::$page['author'];\n    }\n\n    /**\n     * Get children pages for a specific parent page\n     *\n     *  <code>\n     *      $pages = Page::children('page');\n     *  </code>\n     *\n     * @param  string $parent Parent page\n     * @return array\n     */\n    public static function children($parent)\n    {\n        return Pages::$pages->select('[parent=\"'.(string) $parent.'\"]', 'all');\n    }\n\n    /**\n     * Get the available children pages for requested page.\n     *\n     *  <code>\n     *      echo Page::available();\n     *  </code>\n     *\n     */\n    public static function available()\n    {\n        $pages = Pages::$pages->select('[parent=\"'.Pages::$requested_page.'\"]', 'all');\n\n        // Display view\n        View::factory('box/pages/views/frontend/available_pages')\n                ->assign('pages', $pages)\n                ->display();\n    }\n\n    /**\n     * Get page breadcrumbs\n     *\n     *  <code>\n     *      echo Page::breadcrumbs();\n     *  </code>\n     *\n     */\n    public static function breadcrumbs()\n    {\n        if (Uri::command() == 'pages') {\n            $current_page = Pages::$requested_page;\n            $parent_page = '';\n            if ($current_page !== 'error404') {\n                $page = Pages::$pages->select('[slug=\"'.$current_page.'\"]', null);\n                if (trim($page['parent']) !== '') {\n                    $parent = true;\n                    $parent_page = Pages::$pages->select('[slug=\"'.$page['parent'].'\"]', null);\n                } else {\n                    $parent = false;\n                }\n\n            // Display view\n            View::factory('box/pages/views/frontend/breadcrumbs')\n                    ->assign('current_page', $current_page)\n                    ->assign('page', $page)\n                    ->assign('parent', $parent)\n                    ->assign('parent_page', $parent_page)\n                    ->display();\n            }\n        }    \n    }\n\n    /**\n     * Get page url\n     *\n     *  <code>\n     *      echo Page::url();\n     *  </code>\n     *\n     */\n    public static function url()\n    {\n        return Option::get('siteurl').'/'.Pages::$page['slug'];\n    }\n\n    /**\n     * Get page slug\n     *\n     *  <code>\n     *      echo Page::slug();\n     *  </code>\n     *\n     */\n    public static function slug()\n    {\n        return Pages::$page['slug'];\n    }\n\n    /**\n     * Get page meta robots\n     *\n     *  <code>\n     *      echo Page::robots();\n     *  </code>\n     *\n     */\n    public static function robots()\n    {\n        if (Pages::$page !== null) {\n            $_index  = (isset(Pages::$page['robots_index'])) ? Pages::$page['robots_index'] : '';\n            $_follow = (isset(Pages::$page['robots_follow'])) ? Pages::$page['robots_follow'] : '';\n            $robots  = ( ! empty($_index) && ! empty($_follow)) ? $_index.', '.$_follow : '';\n        } else {\n            $robots = '';\n        }\n\n        return $robots;\n    }\n\n    public static function _date($attributes)\n    {\n        return Page::date((isset($attributes['format'])) ? $attributes['format'] : 'Y-m-d');\n    }\n\n    public static function _content($attributes)\n    {\n        return Pages::content((isset($attributes['name']) ? $attributes['name'] : ''));\n    }\n\n}\n\n\n/**\n * Add new shortcodes {page_author} {page_slug} {page_url} {page_date} {page_content}\n */\nShortcode::add('page_author', 'Page::author');\nShortcode::add('page_slug', 'Page::slug');\nShortcode::add('page_url', 'Page::url');\nShortcode::add('page_content', 'Page::_content');\nShortcode::add('page_date', 'Page::_date');\n"], "fixing_code": ["<?php\n\n/**\n *\tPages plugin\n *\n *\t@package Monstra\n *  @subpackage Plugins\n *\t@author Romanenko Sergey / Awilum\n *\t@copyright 2012-2014 Romanenko Sergey / Awilum\n *\t@version 1.0.0\n *\n */\n\n// Register plugin\nPlugin::register( __FILE__,\n                __('Pages' , 'pages'),\n                __('Pages manager', 'pages'),\n                '1.0.0',\n                'Awilum',\n                'http://monstra.org/',\n                'pages',\n                'box');\n\nif (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor'))) {\n\n    // Include Admin\n    Plugin::Admin('pages', 'box');\n\n}\n\n// Add Plugin Javascript\nJavascript::add('plugins/box/pages/js/pages.js', 'backend');\n\n/**\n * Pages Class\n */\nclass Pages extends Frontend\n{\n    /**\n     * Current page data\n     *\n     * @var object\n     */\n    public static $page = null;\n\n    /**\n     * Pages tables\n     *\n     * @var object\n     */\n    public static $pages = null;\n\n    /**\n     * Requested page\n     *\n     * @var string\n     */\n    public static $requested_page = null;\n\n    /**\n     *  Main function\n     */\n    public static function main()\n    {\n        Pages::$pages = new Table('pages');\n        Pages::$page  = Pages::pageLoader();\n    }\n\n    /**\n     * Page loader\n     *\n     * @param  boolean $return_data data\n     * @return array\n     */\n    public static function pageLoader($return_data = true)\n    {\n        $requested_page = Pages::lowLoader(Uri::segments());\n        Pages::$requested_page = $requested_page;\n\n        return Pages::$pages->select('[slug=\"'.$requested_page.'\"]', null);\n    }\n\n    /**\n     * Load current page\n     *\n     * @global string $defpage default page\n     * @param  array  $data uri\n     * @return string\n     */\n    public static function lowLoader($data)\n    {\n        $defpage = Option::get('defaultpage');\n\n        // If data count 2 then it has Parent/Child\n        if (count($data) >= 2) {\n\n            // If exists parent file\n            if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]')) !== 0) {\n\n                // Get child file and get parent page name\n                $child_page = Pages::$pages->select('[slug=\"'.$data[1].'\"]', null);\n\n                // If child page parent is not empty then get his parent\n                if (count($child_page) == 0) {\n                    $c_p = '';\n                } else {\n                    if ($child_page['parent'] != '') {\n                        $c_p = $child_page['parent'];\n                    } else {\n                        $c_p = '';\n                    }\n                }\n\n                // Hack For old Monstra\n                $child_page['access'] = (isset($child_page['access'])) ? $child_page['access'] : 'public' ;\n\n                // Check is child_parent -> request parent\n                if ($c_p == $data[0]) {\n\n                    if (count($data) < 3) { // Checking only for the parent and one child, the remaining issue 404\n\n                        if ((($child_page['status'] == 'published') or\n                            (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                            ($child_page['access'] == 'public')) {\n\n                            $id = $data[1];\n\n                        } elseif (($child_page['access'] == 'registered') and\n                                 (Session::exists('user_id')) and\n                                 ($child_page['status'] == 'published')) {\n\n                            $id = $data[1];\n\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n\n                } else {\n                    $id = 'error404';\n                    Response::status(404);\n                }\n            } else {\n                $id = 'error404';\n                Response::status(404);\n            }\n\n        } else { // Only parent page come\n            if (empty($data[0])) {\n\n                $id = $defpage;\n\n            } else {\n\n                // Get current page\n                $current_page = Pages::$pages->select('[slug=\"'.$data[0].'\"]', null);\n\n                // Hack For old Monstra\n                $current_page['access'] = (isset($current_page['access'])) ? $current_page['access'] : 'public' ;\n\n                if (count($current_page) != 0) {\n                    if ( ! empty($current_page['parent'])) {\n                        $c_p = $current_page['parent'];\n                    } else {\n                        $c_p = '';\n                    }\n                } else {\n                    $c_p = '';\n                }\n\n                // Check if this page has parent\n                if ($c_p !== '') {\n\n                    if ($c_p == $data[0]) {\n                        if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]', null)) != 0) {\n\n                            if ((($current_page['status'] == 'published') or\n                                (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                                ($current_page['access'] == 'public')) {\n\n                                $id = $data[0];\n\n                            } elseif (($current_page['access'] == 'registered') and\n                                     (Session::exists('user_id')) and\n                                     ($current_page['status'] == 'published')) {\n\n                                $id = $data[0];\n\n                            } else {\n                                $id = 'error404';\n                                Response::status(404);\n                            }\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n                } else {\n\n                    if (count(Pages::$pages->select('[slug=\"'.$data[0].'\"]', null)) != 0) {\n                        if ((($current_page['status'] == 'published') or\n                            (Session::exists('user_role') && in_array(Session::get('user_role'), array('admin', 'editor')))) and\n                            ($current_page['access'] == 'public')) {\n\n                            $id = $data[0];\n\n                        } elseif (($current_page['access'] == 'registered') and\n                                 (Session::exists('user_id')) and\n                                 ($current_page['status'] == 'published')) {\n\n                            $id = $data[0];\n\n                        } else {\n                            $id = 'error404';\n                            Response::status(404);\n                        }\n                    } else {\n                        $id = 'error404';\n                        Response::status(404);\n                    }\n                }\n            }\n        }\n\n        // Return page name/id to load\n        return $id;\n    }\n\n    /**\n     * Get pages template\n     *\n     * @return string\n     */\n    public static function template()\n    {\n        if (Pages::$page['template'] == '') return 'index'; else return Pages::$page['template'];\n    }\n\n    /**\n     * Get pages contents\n     *\n     * @return string\n     */\n    public static function content($slug = '')\n    {\n        if ( ! empty($slug)) {\n\n            $page = Table::factory('pages')->select('[slug=\"'.$slug.'\"]', null);\n\n            if ( ! empty($page)) {\n\n                $content = Text::toHtml(File::getContent(STORAGE . DS . 'pages' . DS . $page['id'] . '.page.txt'));\n\n                $content = Filter::apply('content', $content);\n\n                return $content;\n\n            } else {\n                return '';\n            }\n\n        } else {\n            return Text::toHtml(File::getContent(STORAGE . DS . 'pages' . DS . Pages::$page['id'] . '.page.txt'));\n        }\n\n    }\n\n    /**\n     * Get pages title\n     *\n     *  <code>\n     *      echo Page::title();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function title()\n    {\n       $test = !empty(Pages::$page['meta_title']) ? Pages::$page['meta_title'] : Pages::$page['title'];\n       return htmlspecialchars($test);\n    }\n\n    /**\n     * Get pages Description\n     *\n     *  <code>\n     *      echo Page::description();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function description()\n    {\n        return Pages::$page['description'];\n    }\n\n    /**\n     * Get pages Keywords\n     *\n     *  <code>\n     *      echo Page::keywords();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function keywords()\n    {\n        return Pages::$page['keywords'];\n    }\n\n\n    /**\n     * Get pages\n     */\n    public static function getPages()\n    {\n        // Init vars\n        $pages_array = array();\n        $count = 0;\n\n        // Get pages table\n        $pages = new Table('pages');\n\n        // Get Pages List\n        $pages_list = $pages->select('[slug!=\"error404\" and status=\"published\"]');\n\n        foreach ($pages_list as $page) {\n\n            $pages_array[$count]['title']   = Html::toText($page['title']);\n            $pages_array[$count]['meta_title'] = !empty($page['meta_title']) ? Html::toText($page['meta_title']) : $page['title'];\n            $pages_array[$count]['parent']  = $page['parent'];\n            $pages_array[$count]['date']    = $page['date'];\n            $pages_array[$count]['author']  = $page['author'];\n            $pages_array[$count]['slug']    = ($page['slug'] == Option::get('defaultpage')) ? '' : $page['slug'] ;\n\n            if (isset($page['parent'])) {\n                $c_p = $page['parent'];\n            } else {\n                $c_p = '';\n            }\n\n            if ($c_p != '') {\n                $_page = $pages->select('[slug=\"'.$page['parent'].'\"]', null);\n\n                if (isset($_page['title'])) {\n                    $_title = $_page['title'];\n                } else {\n                    $_title = '';\n                }\n                $pages_array[$count]['sort'] = $_title . ' ' . $page['title'];\n            } else {\n                $pages_array[$count]['sort'] = $page['title'];\n            }\n            $_title = '';\n            $count++;\n        }\n\n        // Sort pages\n        $_pages_list = Arr::subvalSort($pages_array, 'sort');\n\n        // return\n        return $_pages_list;\n    }\n\n}\n\n/**\n * Page class\n */\nclass Page extends Pages\n{\n    /**\n     * Get date of current page\n     *\n     *  <code>\n     *      echo Page::date();\n     *  </code>\n     *\n     * @param  string $format Date format\n     * @return string\n     */\n    public static function date($format = 'Y-m-d')\n    {\n        return Date::format(Pages::$page['date'], $format);\n    }\n\n    /**\n     * Get author of current page\n     *\n     *  <code>\n     *      echo Page::author();\n     *  </code>\n     *\n     * @return string\n     */\n    public static function author()\n    {\n        return Pages::$page['author'];\n    }\n\n    /**\n     * Get children pages for a specific parent page\n     *\n     *  <code>\n     *      $pages = Page::children('page');\n     *  </code>\n     *\n     * @param  string $parent Parent page\n     * @return array\n     */\n    public static function children($parent)\n    {\n        return Pages::$pages->select('[parent=\"'.(string) $parent.'\"]', 'all');\n    }\n\n    /**\n     * Get the available children pages for requested page.\n     *\n     *  <code>\n     *      echo Page::available();\n     *  </code>\n     *\n     */\n    public static function available()\n    {\n        $pages = Pages::$pages->select('[parent=\"'.Pages::$requested_page.'\"]', 'all');\n\n        // Display view\n        View::factory('box/pages/views/frontend/available_pages')\n                ->assign('pages', $pages)\n                ->display();\n    }\n\n    /**\n     * Get page breadcrumbs\n     *\n     *  <code>\n     *      echo Page::breadcrumbs();\n     *  </code>\n     *\n     */\n    public static function breadcrumbs()\n    {\n        if (Uri::command() == 'pages') {\n            $current_page = Pages::$requested_page;\n            $parent_page = '';\n            if ($current_page !== 'error404') {\n                $page = Pages::$pages->select('[slug=\"'.$current_page.'\"]', null);\n                if (trim($page['parent']) !== '') {\n                    $parent = true;\n                    $parent_page = Pages::$pages->select('[slug=\"'.$page['parent'].'\"]', null);\n                } else {\n                    $parent = false;\n                }\n\n            // Display view\n            View::factory('box/pages/views/frontend/breadcrumbs')\n                    ->assign('current_page', $current_page)\n                    ->assign('page', $page)\n                    ->assign('parent', $parent)\n                    ->assign('parent_page', $parent_page)\n                    ->display();\n            }\n        }    \n    }\n\n    /**\n     * Get page url\n     *\n     *  <code>\n     *      echo Page::url();\n     *  </code>\n     *\n     */\n    public static function url()\n    {\n        return Option::get('siteurl').'/'.Pages::$page['slug'];\n    }\n\n    /**\n     * Get page slug\n     *\n     *  <code>\n     *      echo Page::slug();\n     *  </code>\n     *\n     */\n    public static function slug()\n    {\n        return Pages::$page['slug'];\n    }\n\n    /**\n     * Get page meta robots\n     *\n     *  <code>\n     *      echo Page::robots();\n     *  </code>\n     *\n     */\n    public static function robots()\n    {\n        if (Pages::$page !== null) {\n            $_index  = (isset(Pages::$page['robots_index'])) ? Pages::$page['robots_index'] : '';\n            $_follow = (isset(Pages::$page['robots_follow'])) ? Pages::$page['robots_follow'] : '';\n            $robots  = ( ! empty($_index) && ! empty($_follow)) ? $_index.', '.$_follow : '';\n        } else {\n            $robots = '';\n        }\n\n        return $robots;\n    }\n\n    public static function _date($attributes)\n    {\n        return Page::date((isset($attributes['format'])) ? $attributes['format'] : 'Y-m-d');\n    }\n\n    public static function _content($attributes)\n    {\n        return Pages::content((isset($attributes['name']) ? $attributes['name'] : ''));\n    }\n\n}\n\n\n/**\n * Add new shortcodes {page_author} {page_slug} {page_url} {page_date} {page_content}\n */\nShortcode::add('page_author', 'Page::author');\nShortcode::add('page_slug', 'Page::slug');\nShortcode::add('page_url', 'Page::url');\nShortcode::add('page_content', 'Page::_content');\nShortcode::add('page_date', 'Page::_date');\n"], "filenames": ["plugins/box/pages/pages.plugin.php"], "buggy_code_start_loc": [286], "buggy_code_end_loc": [287], "fixing_code_start_loc": [286], "fixing_code_end_loc": [288], "type": "CWE-79", "message": "Monstra CMS through 3.0.4 has XSS in the title function in plugins/box/pages/pages.plugin.php via a page title to admin/index.php.", "other": {"cve": {"id": "CVE-2018-6550", "sourceIdentifier": "cve@mitre.org", "published": "2018-02-02T09:29:00.930", "lastModified": "2018-02-14T15:14:23.723", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Monstra CMS through 3.0.4 has XSS in the title function in plugins/box/pages/pages.plugin.php via a page title to admin/index.php."}, {"lang": "es", "value": "Monstra CMS hasta la versi\u00f3n 3.0.4 tiene Cross-Site Scripting (XSS) en la funci\u00f3n title en plugins/box/pages/pages.plugin.php mediante un t\u00edtulo de p\u00e1gina en admin/index.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:monstra:monstra:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.0.4", "matchCriteriaId": "7C0362B7-ED92-45D6-85C8-0329903E8E5F"}]}]}], "references": [{"url": "https://github.com/monstra-cms/monstra/commit/388ab412035474068758df6b07e7e06852f3747b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/monstra-cms/monstra/issues/427", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/monstra-cms/monstra/commit/388ab412035474068758df6b07e7e06852f3747b"}}