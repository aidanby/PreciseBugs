{"buggy_code": ["<?php\n/**\n * @copyright Copyright (c) 2016, ownCloud, Inc.\n *\n * @author Lukas Reschke <lukas@statuscode.ch>\n * @author Thomas M\u00fcller <thomas.mueller@tmit.eu>\n *\n * @license AGPL-3.0\n *\n * This code is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License, version 3,\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License, version 3,\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace OCA\\DAV\\Files;\n\nuse OC\\AppFramework\\Http\\Request;\nuse OC_Template;\nuse OCP\\IRequest;\nuse Sabre\\DAV\\Exception;\nuse Sabre\\DAV\\Server;\nuse Sabre\\DAV\\ServerPlugin;\n\nclass BrowserErrorPagePlugin extends ServerPlugin {\n\n\t/** @var Server */\n\tprivate $server;\n\n\t/**\n\t * This initializes the plugin.\n\t *\n\t * This function is called by Sabre\\DAV\\Server, after\n\t * addPlugin is called.\n\t *\n\t * This method should set up the required event subscriptions.\n\t *\n\t * @param Server $server\n\t * @return void\n\t */\n\tfunction initialize(Server $server) {\n\t\t$this->server = $server;\n\t\t$server->on('exception', array($this, 'logException'), 1000);\n\t}\n\n\t/**\n\t * @param IRequest $request\n\t * @return bool\n\t */\n\tpublic static function isBrowserRequest(IRequest $request) {\n\t\tif ($request->getMethod() !== 'GET') {\n\t\t\treturn false;\n\t\t}\n\t\treturn $request->isUserAgent([\n\t\t\tRequest::USER_AGENT_IE,\n\t\t\tRequest::USER_AGENT_MS_EDGE,\n\t\t\tRequest::USER_AGENT_CHROME,\n\t\t\tRequest::USER_AGENT_FIREFOX,\n\t\t\tRequest::USER_AGENT_SAFARI,\n\t\t]);\n\t}\n\n\t/**\n\t * @param \\Exception $ex\n\t */\n\tpublic function logException(\\Exception $ex) {\n\t\tif ($ex instanceof Exception) {\n\t\t\t$httpCode = $ex->getHTTPCode();\n\t\t\t$headers = $ex->getHTTPHeaders($this->server);\n\t\t} else {\n\t\t\t$httpCode = 500;\n\t\t\t$headers = [];\n\t\t}\n\t\t$this->server->httpResponse->addHeaders($headers);\n\t\t$this->server->httpResponse->setStatus($httpCode);\n\t\t$body = $this->generateBody($ex);\n\t\t$this->server->httpResponse->setBody($body);\n\t\t$this->sendResponse();\n\t}\n\n\t/**\n\t * @codeCoverageIgnore\n\t * @param \\Exception $ex\n\t * @param int $httpCode\n\t * @return bool|string\n\t */\n\tpublic function generateBody(\\Exception $exception) {\n\t\t$request = \\OC::$server->getRequest();\n\t\t$content = new OC_Template('dav', 'exception', 'guest');\n\t\t$content->assign('title', $this->server->httpResponse->getStatusText());\n\t\t$content->assign('message', $exception->getMessage());\n\t\t$content->assign('errorClass', get_class($exception));\n\t\t$content->assign('errorMsg', $exception->getMessage());\n\t\t$content->assign('errorCode', $exception->getCode());\n\t\t$content->assign('file', $exception->getFile());\n\t\t$content->assign('line', $exception->getLine());\n\t\t$content->assign('trace', $exception->getTraceAsString());\n\t\t$content->assign('debugMode', \\OC::$server->getSystemConfig()->getValue('debug', false));\n\t\t$content->assign('remoteAddr', $request->getRemoteAddress());\n\t\t$content->assign('requestID', $request->getId());\n\t\treturn $content->fetchPage();\n\t}\n\n\t/*\n\t * @codeCoverageIgnore\n\t */\n\tpublic function sendResponse() {\n\t\t$this->server->sapi->sendResponse($this->server->httpResponse);\n\t}\n}\n", "<?php\n\t/** @var array $_ */\n\t/** @var OC_L10N $l */\n\nstyle('core', ['styles', 'header']);\n?>\n<span class=\"error error-wide\">\n\t<h2><strong><?php p($_['title']) ?></strong></h2>\n\t\t<p><?php p($_['message']) ?></p>\n\t<br>\n\n\t<h2><strong><?php p($l->t('Technical details')) ?></strong></h2>\n\t<ul>\n\t\t<li><?php p($l->t('Remote Address: %s', $_['remoteAddr'])) ?></li>\n\t\t<li><?php p($l->t('Request ID: %s', $_['requestID'])) ?></li>\n\t\t<?php if($_['debugMode']): ?>\n\t\t\t<li><?php p($l->t('Type: %s', $_['errorClass'])) ?></li>\n\t\t\t<li><?php p($l->t('Code: %s', $_['errorCode'])) ?></li>\n\t\t\t<li><?php p($l->t('Message: %s', $_['errorMsg'])) ?></li>\n\t\t\t<li><?php p($l->t('File: %s', $_['file'])) ?></li>\n\t\t\t<li><?php p($l->t('Line: %s', $_['line'])) ?></li>\n\t\t<?php endif; ?>\n\t</ul>\n\n\t<?php if($_['debugMode']): ?>\n\t\t<br />\n\t\t<h2><strong><?php p($l->t('Trace')) ?></strong></h2>\n\t\t<pre><?php p($_['trace']) ?></pre>\n\t<?php endif; ?>\n</span>\n"], "fixing_code": ["<?php\n/**\n * @copyright Copyright (c) 2016, ownCloud, Inc.\n *\n * @author Lukas Reschke <lukas@statuscode.ch>\n * @author Thomas M\u00fcller <thomas.mueller@tmit.eu>\n *\n * @license AGPL-3.0\n *\n * This code is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License, version 3,\n * as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License, version 3,\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n *\n */\n\nnamespace OCA\\DAV\\Files;\n\nuse OC\\AppFramework\\Http\\Request;\nuse OC_Template;\nuse OCP\\IRequest;\nuse Sabre\\DAV\\Exception;\nuse Sabre\\DAV\\Server;\nuse Sabre\\DAV\\ServerPlugin;\n\nclass BrowserErrorPagePlugin extends ServerPlugin {\n\t/** @var Server */\n\tprivate $server;\n\n\t/**\n\t * This initializes the plugin.\n\t *\n\t * This function is called by Sabre\\DAV\\Server, after\n\t * addPlugin is called.\n\t *\n\t * This method should set up the required event subscriptions.\n\t *\n\t * @param Server $server\n\t * @return void\n\t */\n\tfunction initialize(Server $server) {\n\t\t$this->server = $server;\n\t\t$server->on('exception', array($this, 'logException'), 1000);\n\t}\n\n\t/**\n\t * @param IRequest $request\n\t * @return bool\n\t */\n\tpublic static function isBrowserRequest(IRequest $request) {\n\t\tif ($request->getMethod() !== 'GET') {\n\t\t\treturn false;\n\t\t}\n\t\treturn $request->isUserAgent([\n\t\t\tRequest::USER_AGENT_IE,\n\t\t\tRequest::USER_AGENT_MS_EDGE,\n\t\t\tRequest::USER_AGENT_CHROME,\n\t\t\tRequest::USER_AGENT_FIREFOX,\n\t\t\tRequest::USER_AGENT_SAFARI,\n\t\t]);\n\t}\n\n\t/**\n\t * @param \\Exception $ex\n\t */\n\tpublic function logException(\\Exception $ex) {\n\t\tif ($ex instanceof Exception) {\n\t\t\t$httpCode = $ex->getHTTPCode();\n\t\t\t$headers = $ex->getHTTPHeaders($this->server);\n\t\t} else {\n\t\t\t$httpCode = 500;\n\t\t\t$headers = [];\n\t\t}\n\t\t$this->server->httpResponse->addHeaders($headers);\n\t\t$this->server->httpResponse->setStatus($httpCode);\n\t\t$body = $this->generateBody($ex);\n\t\t$this->server->httpResponse->setBody($body);\n\t\t$this->sendResponse();\n\t}\n\n\t/**\n\t * @codeCoverageIgnore\n\t * @param \\Exception $exception\n\t * @return bool|string\n\t */\n\tpublic function generateBody(\\Exception $exception) {\n\t\t$request = \\OC::$server->getRequest();\n\t\t$content = new OC_Template('dav', 'exception', 'guest');\n\t\t$content->assign('title', $this->server->httpResponse->getStatusText());\n\t\t$content->assign('message', $exception->getMessage());\n\t\t$content->assign('errorClass', get_class($exception));\n\t\t$content->assign('errorMsg', $exception->getMessage());\n\t\t$content->assign('errorCode', $exception->getCode());\n\t\t$content->assign('file', $exception->getFile());\n\t\t$content->assign('line', $exception->getLine());\n\t\t$content->assign('trace', $exception->getTraceAsString());\n\t\t$content->assign('debugMode', \\OC::$server->getSystemConfig()->getValue('debug', false));\n\t\t$content->assign('remoteAddr', $request->getRemoteAddress());\n\t\t$content->assign('requestID', $request->getId());\n\t\treturn $content->fetchPage();\n\t}\n\n\t/**\n\t * @codeCoverageIgnore\n\t */\n\tpublic function sendResponse() {\n\t\t$this->server->sapi->sendResponse($this->server->httpResponse);\n\t\texit();\n\t}\n}\n", "<?php\n\t/** @var array $_ */\n\t/** @var OC_L10N $l */\n\nstyle('core', ['styles', 'header']);\n?>\n<span class=\"error error-wide\">\n\t<h2><strong><?php p($_['title']) ?></strong></h2>\n\t<br>\n\n\t<h2><strong><?php p($l->t('Technical details')) ?></strong></h2>\n\t<ul>\n\t\t<li><?php p($l->t('Remote Address: %s', $_['remoteAddr'])) ?></li>\n\t\t<li><?php p($l->t('Request ID: %s', $_['requestID'])) ?></li>\n\t\t<?php if($_['debugMode']): ?>\n\t\t\t<li><?php p($l->t('Type: %s', $_['errorClass'])) ?></li>\n\t\t\t<li><?php p($l->t('Code: %s', $_['errorCode'])) ?></li>\n\t\t\t<li><?php p($l->t('Message: %s', $_['errorMsg'])) ?></li>\n\t\t\t<li><?php p($l->t('File: %s', $_['file'])) ?></li>\n\t\t\t<li><?php p($l->t('Line: %s', $_['line'])) ?></li>\n\t\t<?php endif; ?>\n\t</ul>\n\n\t<?php if($_['debugMode']): ?>\n\t\t<br />\n\t\t<h2><strong><?php p($l->t('Trace')) ?></strong></h2>\n\t\t<pre><?php p($_['trace']) ?></pre>\n\t<?php endif; ?>\n</span>\n"], "filenames": ["apps/dav/lib/Files/BrowserErrorPagePlugin.php", "apps/dav/templates/exception.php"], "buggy_code_start_loc": [34, 9], "buggy_code_end_loc": [116, 10], "fixing_code_start_loc": [33, 8], "fixing_code_end_loc": [116, 8], "type": "CWE-284", "message": "Nextcloud Server before 9.0.54 and 10.0.1 & ownCloud Server before 9.0.6 and 9.1.2 suffer from content spoofing in the dav app. The exception message displayed on the DAV endpoints contained partially user-controllable input leading to a potential misrepresentation of information.", "other": {"cve": {"id": "CVE-2016-9468", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:01.200", "lastModified": "2019-10-09T23:20:29.867", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Nextcloud Server before 9.0.54 and 10.0.1 & ownCloud Server before 9.0.6 and 9.1.2 suffer from content spoofing in the dav app. The exception message displayed on the DAV endpoints contained partially user-controllable input leading to a potential misrepresentation of information."}, {"lang": "es", "value": "Nextcloud Server en versiones anteriores a 9.0.54 and 10.0.1 y ownCloud Server en versiones anteriores a 9.0.6 y 9.1.2 sufren de contenido de suplantaci\u00f3n en la aplicaci\u00f3n dav. El mensaje de excepci\u00f3n que se muestra en los puntos finales DAV conten\u00eda una entrada parcialmente controlable por el usuario que conduc\u00eda a una posible representaci\u00f3n err\u00f3nea de la informaci\u00f3n."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-451"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.54", "matchCriteriaId": "D6E3F368-B854-430E-AB8F-496675C4E210"}, {"vulnerable": true, "criteria": "cpe:2.3:a:nextcloud:nextcloud_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndIncluding": "10.0.1", "matchCriteriaId": "C5FD87EC-3ADE-457D-8397-6CD89D300ADF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.0.6", "matchCriteriaId": "CA8CCC5C-D019-4A80-BD8D-3914BFFC60C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:owncloud:owncloud:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.1.0", "versionEndExcluding": "9.1.2", "matchCriteriaId": "8E9501A9-E507-4A81-954B-D6D3223EE2F8"}]}]}], "references": [{"url": "https://github.com/nextcloud/server/commit/7350e13113c8ed484727a5c25331ec11d4d59f5f", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/nextcloud/server/commit/a4cfb3ddc1f4cdb585e05c0e9b2f8e52a0e2ee3e", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/96b8afe48570bc70088ccd8f897e9d71997d336e", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/owncloud/core/commit/bcc6c39ad8c22a00323a114e9c1a0a834983fb35", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/149798", "source": "support@hackerone.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://nextcloud.com/security/advisory/?id=nc-sa-2016-011", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://owncloud.org/security/advisory/?id=oc-sa-2016-021", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/nextcloud/server/commit/7350e13113c8ed484727a5c25331ec11d4d59f5f"}}