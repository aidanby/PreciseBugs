{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Import progress bar backend\n *\n * @package PhpMyAdmin\n */\n\n/* PHP 5.4 stores upload progress data only in the default session.\n * After calling session_name(), we won't find the progress data anymore.\n *\n * https://bugs.php.net/bug.php?id=64075\n *\n * The bug should be somewhere in\n * https://github.com/php/php-src/blob/master/ext/session/session.c#L2342\n *\n * Until this is fixed, we need to load the default session to load the data,\n * export the upload progress information from there,\n * and re-import after switching to our session.\n *\n * However, since https://github.com/phpmyadmin/phpmyadmin/commit/063a2d99\n * we have deactivated this feature, so the corresponding code is now\n * commented out.\n */\n\n/*\nif (version_compare(PHP_VERSION, '5.4.0', '>=')\n    && ini_get('session.upload_progress.enabled')\n) {\n\n    $sessionupload = array();\n    define('UPLOAD_PREFIX', ini_get('session.upload_progress.prefix'));\n\n    session_start();\n    foreach ($_SESSION as $key => $value) {\n        // only copy session-prefixed data\n        if (mb_substr($key, 0, mb_strlen(UPLOAD_PREFIX))\n            == UPLOAD_PREFIX) {\n            $sessionupload[$key] = $value;\n        }\n    }\n    // PMA will kill all variables, so let's use a constant\n    define('SESSIONUPLOAD', serialize($sessionupload));\n    session_write_close();\n\n    session_name('phpMyAdmin');\n    session_id($_COOKIE['phpMyAdmin']);\n}\n */\n\ndefine('PMA_MINIMUM_COMMON', 1);\n\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/Util.class.php';\nrequire_once 'libraries/display_import_ajax.lib.php';\n\n/*\nif (defined('SESSIONUPLOAD')) {\n    // write sessionupload back into the loaded PMA session\n\n    $sessionupload = unserialize(SESSIONUPLOAD);\n    foreach ($sessionupload as $key => $value) {\n        $_SESSION[$key] = $value;\n    }\n\n    // remove session upload data that are not set anymore\n    foreach ($_SESSION as $key => $value) {\n        if (mb_substr($key, 0, mb_strlen(UPLOAD_PREFIX))\n            == UPLOAD_PREFIX\n            && ! isset($sessionupload[$key])\n        ) {\n            unset($_SESSION[$key]);\n        }\n    }\n}\n */\n\n// AJAX requests can't be cached!\nPMA_noCacheHeader();\n\n// $_GET[\"message\"] is used for asking for an import message\nif (isset($_GET[\"message\"]) && $_GET[\"message\"]) {\n\n    header('Content-type: text/html');\n\n    // wait 0.3 sec before we check for $_SESSION variable,\n    // which is set inside import.php\n    usleep(300000);\n\n    $maximumTime = ini_get('max_execution_time');\n    $timestamp = time();\n    // wait until message is available\n    while ($_SESSION['Import_message']['message'] == null) {\n        // close session before sleeping\n        session_write_close();\n        // sleep\n        usleep(250000); // 0.25 sec\n        // reopen session\n        session_start();\n\n        if ((time() - $timestamp) > $maximumTime) {\n            $_SESSION['Import_message']['message'] = PMA_Message::error(\n                __('Could not load the progress of the import.')\n            )->getDisplay();\n            break;\n        }\n    }\n\n    echo $_SESSION['Import_message']['message'];\n    echo '<fieldset class=\"tblFooters\">' . \"\\n\";\n    echo '    [ <a href=\"' . $_SESSION['Import_message']['go_back_url']\n        . '\">' . __('Back') . '</a> ]' . \"\\n\";\n    echo '</fieldset>' . \"\\n\";\n\n} else {\n    PMA_importAjaxStatus($_GET[\"id\"]);\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Manages the rendering of pages in PMA\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once 'libraries/OutputBuffering.class.php';\nrequire_once 'libraries/Header.class.php';\nrequire_once 'libraries/Footer.class.php';\n\n/**\n * Singleton class used to manage the rendering of pages in PMA\n *\n * @package PhpMyAdmin\n */\nclass PMA_Response\n{\n    /**\n     * PMA_Response instance\n     *\n     * @access private\n     * @static\n     * @var PMA_Response\n     */\n    private static $_instance;\n    /**\n     * PMA_Header instance\n     *\n     * @access private\n     * @var PMA_Header\n     */\n    private $_header;\n    /**\n     * HTML data to be used in the response\n     *\n     * @access private\n     * @var string\n     */\n    private $_HTML;\n    /**\n     * An array of JSON key-value pairs\n     * to be sent back for ajax requests\n     *\n     * @access private\n     * @var array\n     */\n    private $_JSON;\n    /**\n     * PMA_Footer instance\n     *\n     * @access private\n     * @var PMA_Footer\n     */\n    private $_footer;\n    /**\n     * Whether we are servicing an ajax request.\n     * We can't simply use $GLOBALS['is_ajax_request']\n     * here since it may have not been initialised yet.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether we are servicing an ajax request for a page\n     * that was fired using the generic page handler in JS.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjaxPage;\n    /**\n     * Whether there were any errors during the processing of the request\n     * Only used for ajax responses\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isSuccess;\n    /**\n     * Workaround for PHP bug\n     *\n     * @access private\n     * @var string|bool\n     */\n    private $_CWD;\n\n    /**\n     * Creates a new class instance\n     */\n    private function __construct()\n    {\n        if (! defined('TESTSUITE')) {\n            $buffer = PMA_OutputBuffering::getInstance();\n            $buffer->start();\n            register_shutdown_function('PMA_Response::response');\n        }\n        $this->_header = new PMA_Header();\n        $this->_HTML   = '';\n        $this->_JSON   = array();\n        $this->_footer = new PMA_Footer();\n\n        $this->_isSuccess  = true;\n        $this->_isAjax     = false;\n        $this->_isAjaxPage = false;\n        if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {\n            $this->_isAjax = true;\n        }\n        if (isset($_REQUEST['ajax_page_request'])\n            && $_REQUEST['ajax_page_request'] == true\n        ) {\n            $this->_isAjaxPage = true;\n        }\n        $this->_header->setAjax($this->_isAjax);\n        $this->_footer->setAjax($this->_isAjax);\n        $this->_CWD = getcwd();\n    }\n\n    /**\n     * Returns the singleton PMA_Response object\n     *\n     * @return PMA_Response object\n     */\n    public static function getInstance()\n    {\n        if (empty(self::$_instance)) {\n            self::$_instance = new PMA_Response();\n        }\n        return self::$_instance;\n    }\n\n    /**\n     * Set the status of an ajax response,\n     * whether it is a success or an error\n     *\n     * @param bool $state Whether the request was successfully processed\n     *\n     * @return void\n     */\n    public function isSuccess($state)\n    {\n        $this->_isSuccess = ($state == true);\n    }\n\n    /**\n     * Returns true or false depending on whether\n     * we are servicing an ajax request\n     *\n     * @return bool\n     */\n    public function isAjax()\n    {\n        return $this->_isAjax;\n    }\n\n    /**\n     * Returns the path to the current working directory\n     * Necessary to work around a PHP bug where the CWD is\n     * reset after the initial script exits\n     *\n     * @return string\n     */\n    public function getCWD()\n    {\n        return $this->_CWD;\n    }\n\n    /**\n     * Disables the rendering of the header\n     * and the footer in responses\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_header->disable();\n        $this->_footer->disable();\n    }\n\n    /**\n     * Returns a PMA_Header object\n     *\n     * @return PMA_Header\n     */\n    public function getHeader()\n    {\n        return $this->_header;\n    }\n\n    /**\n     * Returns a PMA_Footer object\n     *\n     * @return PMA_Footer\n     */\n    public function getFooter()\n    {\n        return $this->_footer;\n    }\n\n    /**\n     * Add HTML code to the response\n     *\n     * @param string $content A string to be appended to\n     *                        the current output buffer\n     *\n     * @return void\n     */\n    public function addHTML($content)\n    {\n        if (is_array($content)) {\n            foreach ($content as $msg) {\n                $this->addHTML($msg);\n            }\n        } elseif ($content instanceof PMA_Message) {\n            $this->_HTML .= $content->getDisplay();\n        } else {\n            $this->_HTML .= $content;\n        }\n    }\n\n    /**\n     * Add JSON code to the response\n     *\n     * @param mixed $json  Either a key (string) or an\n     *                     array or key-value pairs\n     * @param mixed $value Null, if passing an array in $json otherwise\n     *                     it's a string value to the key\n     *\n     * @return void\n     */\n    public function addJSON($json, $value = null)\n    {\n        if (is_array($json)) {\n            foreach ($json as $key => $value) {\n                $this->addJSON($key, $value);\n            }\n        } else {\n            if ($value instanceof PMA_Message) {\n                $this->_JSON[$json] = $value->getDisplay();\n            } else {\n                $this->_JSON[$json] = $value;\n            }\n        }\n\n    }\n\n    /**\n     * Renders the HTML response text\n     *\n     * @return string\n     */\n    private function _getDisplay()\n    {\n        // The header may contain nothing at all,\n        // if its content was already rendered\n        // and, in this case, the header will be\n        // in the content part of the request\n        $retval  = $this->_header->getDisplay();\n        $retval .= $this->_HTML;\n        $retval .= $this->_footer->getDisplay();\n        return $retval;\n    }\n\n    /**\n     * Sends an HTML response to the browser\n     *\n     * @return void\n     */\n    private function _htmlResponse()\n    {\n        echo $this->_getDisplay();\n    }\n\n    /**\n     * Sends a JSON response to the browser\n     *\n     * @return void\n     */\n    private function _ajaxResponse()\n    {\n        if (! isset($this->_JSON['message'])) {\n            $this->_JSON['message'] = $this->_getDisplay();\n        } else if ($this->_JSON['message'] instanceof PMA_Message) {\n            $this->_JSON['message'] = $this->_JSON['message']->getDisplay();\n        }\n\n        if ($this->_isSuccess) {\n            $this->_JSON['success'] = true;\n        } else {\n            $this->_JSON['success'] = false;\n            $this->_JSON['error']   = $this->_JSON['message'];\n            unset($this->_JSON['message']);\n        }\n\n        if ($this->_isSuccess) {\n            // Note: the old judge sentence is:\n            // $this->_isAjaxPage && $this->_isSuccess\n            // Removal the first, because console need log all queries, if caused any\n            // bug, contact Edward Cheng\n            $this->addJSON('_title', $this->getHeader()->getTitleTag());\n\n            if (isset($GLOBALS['dbi'])) {\n                $menuHash = $this->getHeader()->getMenu()->getHash();\n                $this->addJSON('_menuHash', $menuHash);\n                $hashes = array();\n                if (isset($_REQUEST['menuHashes'])) {\n                    $hashes = explode('-', $_REQUEST['menuHashes']);\n                }\n                if (! in_array($menuHash, $hashes)) {\n                    $this->addJSON(\n                        '_menu',\n                        $this->getHeader()\n                            ->getMenu()\n                            ->getDisplay()\n                    );\n                }\n            }\n\n            $this->addJSON('_scripts', $this->getHeader()->getScripts()->getFiles());\n            $this->addJSON('_selflink', $this->getFooter()->getSelfUrl('unencoded'));\n            $this->addJSON('_displayMessage', $this->getHeader()->getMessage());\n\n            $debug = $this->_footer->getDebugMessage();\n            if (empty($_REQUEST['no_debug'])\n                && /*overload*/mb_strlen($debug)\n            ) {\n                $this->addJSON('_debug', $debug);\n            }\n\n            $errors = $this->_footer->getErrorMessages();\n            if (/*overload*/mb_strlen($errors)) {\n                $this->addJSON('_errors', $errors);\n            }\n            $promptPhpErrors = $GLOBALS['error_handler']->hasErrorsForPrompt();\n            $this->addJSON('_promptPhpErrors', $promptPhpErrors);\n\n            if (empty($GLOBALS['error_message'])) {\n                // set current db, table and sql query in the querywindow\n                // (this is for the bottom console)\n                $query = '';\n                $maxChars = $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'];\n                if (isset($GLOBALS['sql_query'])\n                    && /*overload*/mb_strlen($GLOBALS['sql_query']) < $maxChars\n                ) {\n                    $query = $GLOBALS['sql_query'];\n                }\n                $this->addJSON(\n                    '_reloadQuerywindow',\n                    array(\n                        'db' => PMA_ifSetOr($GLOBALS['db'], ''),\n                        'table' => PMA_ifSetOr($GLOBALS['table'], ''),\n                        'sql_query' => $query\n                    )\n                );\n                if (! empty($GLOBALS['focus_querywindow'])) {\n                    $this->addJSON('_focusQuerywindow', $query);\n                }\n                if (! empty($GLOBALS['reload'])) {\n                    $this->addJSON('_reloadNavigation', 1);\n                }\n                $this->addJSON('_params', $this->getHeader()->getJsParams());\n            }\n        }\n\n        // Set the Content-Type header to JSON so that jQuery parses the\n        // response correctly.\n        if (! defined('TESTSUITE')) {\n            header('Cache-Control: no-cache');\n            header('Content-Type: application/json');\n        }\n\n        echo json_encode($this->_JSON);\n    }\n\n    /**\n     * Sends an HTML response to the browser\n     *\n     * @static\n     * @return void\n     */\n    public static function response()\n    {\n        $response = PMA_Response::getInstance();\n        chdir($response->getCWD());\n        $buffer = PMA_OutputBuffering::getInstance();\n        if (empty($response->_HTML)) {\n            $response->_HTML = $buffer->getContents();\n        }\n        if ($response->isAjax()) {\n            $response->_ajaxResponse();\n        } else {\n            $response->_htmlResponse();\n        }\n        $buffer->flush();\n        exit;\n    }\n}\n\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core functions used all over the scripts.\n * This script is distinct from libraries/common.inc.php because this\n * script is called from /test.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * String handling (security)\n */\nrequire_once 'libraries/string.lib.php';\nrequire_once 'libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * checks given $var and returns it if valid, or $default of not valid\n * given $var is also checked for type being 'similar' as $default\n * or against any other type if $type is provided\n *\n * <code>\n * // $_REQUEST['db'] not set\n * echo PMA_ifSetOr($_REQUEST['db'], ''); // ''\n * // $_REQUEST['sql_query'] not set\n * echo PMA_ifSetOr($_REQUEST['sql_query']); // null\n * // $cfg['ForceSSL'] not set\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL']); // null\n * // $cfg['ForceSSL'] set to 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1\n * // $cfg['ForceSSL'] set to true\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true\n * </code>\n *\n * @param mixed &$var    param to check\n * @param mixed $default default value\n * @param mixed $type    var type or array of values to check against $var\n *\n * @return mixed   $var or $default\n *\n * @see     PMA_isValid()\n */\nfunction PMA_ifSetOr(&$var, $default = null, $type = 'similar')\n{\n    if (! PMA_isValid($var, $type, $default)) {\n        return $default;\n    }\n\n    return $var;\n}\n\n/**\n * checks given $var against $type or $compare\n *\n * $type can be:\n * - false       : no type checking\n * - 'scalar'    : whether type of $var is integer, float, string or boolean\n * - 'numeric'   : whether type of $var is any number representation\n * - 'length'    : whether type of $var is scalar with a string length > 0\n * - 'similar'   : whether type of $var is similar to type of $compare\n * - 'equal'     : whether type of $var is identical to type of $compare\n * - 'identical' : whether $var is identical to $compare, not only the type!\n * - or any other valid PHP variable type\n *\n * <code>\n * // $_REQUEST['doit'] = true;\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false\n * // $_REQUEST['doit'] = 'true';\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true\n * </code>\n *\n * NOTE: call-by-reference is used to not get NOTICE on undefined vars,\n * but the var is not altered inside this function, also after checking a var\n * this var exists nut is not set, example:\n * <code>\n * // $var is not set\n * isset($var); // false\n * functionCallByReference($var); // false\n * isset($var); // true\n * functionCallByReference($var); // true\n * </code>\n *\n * to avoid this we set this var to null if not isset\n *\n * @param mixed &$var    variable to check\n * @param mixed $type    var type or array of valid values to check against $var\n * @param mixed $compare var to compare with $var\n *\n * @return boolean whether valid or not\n *\n * @todo add some more var types like hex, bin, ...?\n * @see     http://php.net/gettype\n */\nfunction PMA_isValid(&$var, $type = 'length', $compare = null)\n{\n    if (! isset($var)) {\n        // var is not even set\n        return false;\n    }\n\n    if ($type === false) {\n        // no vartype requested\n        return true;\n    }\n\n    if (is_array($type)) {\n        return in_array($var, $type);\n    }\n\n    // allow some aliases of var types\n    $type = strtolower($type);\n    switch ($type) {\n    case 'identic' :\n        $type = 'identical';\n        break;\n    case 'len' :\n        $type = 'length';\n        break;\n    case 'bool' :\n        $type = 'boolean';\n        break;\n    case 'float' :\n        $type = 'double';\n        break;\n    case 'int' :\n        $type = 'integer';\n        break;\n    case 'null' :\n        $type = 'NULL';\n        break;\n    }\n\n    if ($type === 'identical') {\n        return $var === $compare;\n    }\n\n    // whether we should check against given $compare\n    if ($type === 'similar') {\n        switch (gettype($compare)) {\n        case 'string':\n        case 'boolean':\n            $type = 'scalar';\n            break;\n        case 'integer':\n        case 'double':\n            $type = 'numeric';\n            break;\n        default:\n            $type = gettype($compare);\n        }\n    } elseif ($type === 'equal') {\n        $type = gettype($compare);\n    }\n\n    // do the check\n    if ($type === 'length' || $type === 'scalar') {\n        $is_scalar = is_scalar($var);\n        if ($is_scalar && $type === 'length') {\n            return (bool) /*overload*/mb_strlen($var);\n        }\n        return $is_scalar;\n    }\n\n    if ($type === 'numeric') {\n        return is_numeric($var);\n    }\n\n    if (gettype($var) === $type) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Removes insecure parts in a path; used before include() or\n * require() when a part of the path comes from an insecure source\n * like a cookie or form.\n *\n * @param string $path The path to check\n *\n * @return string  The secured path\n *\n * @access  public\n */\nfunction PMA_securePath($path)\n{\n    // change .. to .\n    $path = preg_replace('@\\.\\.*@', '.', $path);\n\n    return $path;\n} // end function\n\n/**\n * displays the given error message on phpMyAdmin error page in foreign language,\n * ends script execution and closes session\n *\n * loads language file if not loaded already\n *\n * @param string       $error_message  the error message or named error message\n * @param string|array $message_args   arguments applied to $error_message\n * @param boolean      $delete_session whether to delete session cookie\n *\n * @return void\n */\nfunction PMA_fatalError(\n    $error_message, $message_args = null, $delete_session = true\n) {\n    /* Use format string if applicable */\n    if (is_string($message_args)) {\n        $error_message = sprintf($error_message, $message_args);\n    } elseif (is_array($message_args)) {\n        $error_message = vsprintf($error_message, $message_args);\n    }\n\n    if ($GLOBALS['is_ajax_request']) {\n        $response = PMA_Response::getInstance();\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($error_message));\n    } else {\n        $error_message = strtr($error_message, array('<br />' => '[br]'));\n\n        /* Load gettext for fatal errors */\n        if (!function_exists('__')) {\n            // It is possible that PMA_fatalError() is called before including\n            // vendor_config.php which defines GETTEXT_INC. See bug #4557\n            if (defined(GETTEXT_INC)) {\n                include_once GETTEXT_INC;\n            } else {\n                include_once './libraries/php-gettext/gettext.inc';\n            }\n        }\n\n        // these variables are used in the included file libraries/error.inc.php\n        //first check if php-mbstring is available\n        if (function_exists('mb_detect_encoding')) {\n            //If present use gettext\n            $error_header = __('Error');\n        } else {\n            $error_header = 'Error';\n        }\n        $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];\n        $dir = $GLOBALS['text_dir'];\n\n        // on fatal errors it cannot hurt to always delete the current session\n        if ($delete_session\n            && isset($GLOBALS['session_name'])\n            && isset($_COOKIE[$GLOBALS['session_name']])\n        ) {\n            $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n        }\n\n        // Displays the error message\n        include './libraries/error.inc.php';\n    }\n    if (! defined('TESTSUITE')) {\n        exit;\n    }\n}\n\n/**\n * Returns a link to the PHP documentation\n *\n * @param string $target anchor in documentation\n *\n * @return string  the URL\n *\n * @access  public\n */\nfunction PMA_getPHPDocLink($target)\n{\n    /* List of PHP documentation translations */\n    $php_doc_languages = array(\n        'pt_BR', 'zh', 'fr', 'de', 'it', 'ja', 'pl', 'ro', 'ru', 'fa', 'es', 'tr'\n    );\n\n    $lang = 'en';\n    if (in_array($GLOBALS['lang'], $php_doc_languages)) {\n        $lang = $GLOBALS['lang'];\n    }\n\n    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);\n}\n\n/**\n * Warn or fail on missing extension.\n *\n * @param string $extension Extension name\n * @param bool   $fatal     Whether the error is fatal.\n * @param string $extra     Extra string to append to message.\n *\n * @return void\n */\nfunction PMA_warnMissingExtension($extension, $fatal = false, $extra = '')\n{\n    /* Gettext does not have to be loaded yet here */\n    if (function_exists('__')) {\n        $message = __(\n            'The %s extension is missing. Please check your PHP configuration.'\n        );\n    } else {\n        $message\n            = 'The %s extension is missing. Please check your PHP configuration.';\n    }\n    $doclink = PMA_getPHPDocLink('book.' . $extension . '.php');\n    $message = sprintf(\n        $message,\n        '[a@' . $doclink . '@Documentation][em]' . $extension . '[/em][/a]'\n    );\n    if ($extra != '') {\n        $message .= ' ' . $extra;\n    }\n    if ($fatal) {\n        PMA_fatalError($message);\n        return;\n    }\n\n    $GLOBALS['error_handler']->addError(\n        $message,\n        E_USER_WARNING,\n        '',\n        '',\n        false\n    );\n}\n\n/**\n * returns count of tables in given db\n *\n * @param string $db database to count tables for\n *\n * @return integer count of tables in $db\n */\nfunction PMA_getTableCount($db)\n{\n    $tables = $GLOBALS['dbi']->tryQuery(\n        'SHOW TABLES FROM ' . PMA_Util::backquote($db) . ';',\n        null, PMA_DatabaseInterface::QUERY_STORE\n    );\n    if ($tables) {\n        $num_tables = $GLOBALS['dbi']->numRows($tables);\n        $GLOBALS['dbi']->freeResult($tables);\n    } else {\n        $num_tables = 0;\n    }\n\n    return $num_tables;\n}\n\n/**\n * Converts numbers like 10M into bytes\n * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas\n * (renamed with PMA prefix to avoid double definition when embedded\n * in Moodle)\n *\n * @param string|int $size size (Default = 0)\n *\n * @return integer $size\n */\nfunction PMA_getRealSize($size = 0)\n{\n    if (! $size) {\n        return 0;\n    }\n\n    $scan = array(\n        'gb' => 1073741824, //1024 * 1024 * 1024,\n        'g'  => 1073741824, //1024 * 1024 * 1024,\n        'mb' =>    1048576,\n        'm'  =>    1048576,\n        'kb' =>       1024,\n        'k'  =>       1024,\n        'b'  =>          1,\n    );\n\n    foreach ($scan as $unit => $factor) {\n        $sizeLength = strlen($size);\n        $unitLength = strlen($unit);\n        if ($sizeLength > $unitLength\n            && strtolower(\n                substr(\n                    $size,\n                    $sizeLength - $unitLength\n                )\n            ) == $unit\n        ) {\n            return substr(\n                $size,\n                0,\n                $sizeLength - $unitLength\n            ) * $factor;\n        }\n    }\n\n    return $size;\n} // end function PMA_getRealSize()\n\n/**\n * merges array recursive like array_merge_recursive() but keyed-values are\n * always overwritten.\n *\n * array PMA_arrayMergeRecursive(array $array1[, array $array2[, array ...]])\n *\n * @return array   merged array\n *\n * @see     http://php.net/array_merge\n * @see     http://php.net/array_merge_recursive\n */\nfunction PMA_arrayMergeRecursive()\n{\n    switch(func_num_args()) {\n    case 0 :\n        return false;\n    case 1 :\n        // when does that happen?\n        return func_get_arg(0);\n    case 2 :\n        $args = func_get_args();\n        if (! is_array($args[0]) || ! is_array($args[1])) {\n            return $args[1];\n        }\n        foreach ($args[1] as $key2 => $value2) {\n            if (isset($args[0][$key2]) && !is_int($key2)) {\n                $args[0][$key2] = PMA_arrayMergeRecursive(\n                    $args[0][$key2], $value2\n                );\n            } else {\n                // we erase the parent array, otherwise we cannot override\n                // a directive that contains array elements, like this:\n                // (in config.default.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('id-content','content-id');\n                // (in config.inc.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('content-id');\n                if (is_int($key2) && $key2 == 0) {\n                    unset($args[0]);\n                }\n                $args[0][$key2] = $value2;\n            }\n        }\n        return $args[0];\n    default :\n        $args = func_get_args();\n        $args[1] = PMA_arrayMergeRecursive($args[0], $args[1]);\n        array_shift($args);\n        return call_user_func_array('PMA_arrayMergeRecursive', $args);\n    }\n}\n\n/**\n * calls $function for every element in $array recursively\n *\n * this function is protected against deep recursion attack CVE-2006-1549,\n * 1000 seems to be more than enough\n *\n * @param array    &$array             array to walk\n * @param callable $function           function to call for every array element\n * @param bool     $apply_to_keys_also whether to call the function for the keys also\n *\n * @return void\n *\n * @see http://www.php-security.org/MOPB/MOPB-02-2007.html\n * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549\n */\nfunction PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false)\n{\n    static $recursive_counter = 0;\n    $walked_keys = array();\n\n    if (++$recursive_counter > 1000) {\n        PMA_fatalError(__('possible deep recursion attack'));\n    }\n    foreach ($array as $key => $value) {\n        if (isset($walked_keys[$key])) {\n            continue;\n        }\n        $walked_keys[$key] = true;\n\n        if (is_array($value)) {\n            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);\n        } else {\n            $array[$key] = $function($value);\n        }\n\n        if ($apply_to_keys_also && is_string($key)) {\n            $new_key = $function($key);\n            if ($new_key != $key) {\n                $array[$new_key] = $array[$key];\n                unset($array[$key]);\n                $walked_keys[$new_key] = true;\n            }\n        }\n    }\n    $recursive_counter--;\n}\n\n/**\n * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist)\n *\n * checks given $page against given $whitelist and returns true if valid\n * it optionally ignores query parameters in $page (script.php?ignored)\n *\n * @param string &$page     page to check\n * @param array  $whitelist whitelist to check page against\n *\n * @return boolean whether $page is valid or not (in $whitelist or not)\n */\nfunction PMA_checkPageValidity(&$page, $whitelist)\n{\n    if (! isset($page) || !is_string($page)) {\n        return false;\n    }\n\n    if (in_array($page, $whitelist)) {\n        return true;\n    }\n\n    $_page = /*overload*/mb_substr(\n        $page,\n        0,\n        /*overload*/mb_strpos($page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    $_page = urldecode($page);\n    $_page = /*overload*/mb_substr(\n        $_page,\n        0,\n        /*overload*/mb_strpos($_page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * tries to find the value for the given environment variable name\n *\n * searches in $_SERVER, $_ENV then tries getenv() and apache_getenv()\n * in this order\n *\n * @param string $var_name variable name\n *\n * @return string  value of $var or empty string\n */\nfunction PMA_getenv($var_name)\n{\n    if (isset($_SERVER[$var_name])) {\n        return $_SERVER[$var_name];\n    }\n\n    if (isset($_ENV[$var_name])) {\n        return $_ENV[$var_name];\n    }\n\n    if (getenv($var_name)) {\n        return getenv($var_name);\n    }\n\n    if (function_exists('apache_getenv')\n        && apache_getenv($var_name, true)\n    ) {\n        return apache_getenv($var_name, true);\n    }\n\n    return '';\n}\n\n/**\n * Send HTTP header, taking IIS limits into account (600 seems ok)\n *\n * @param string $uri         the header to send\n * @param bool   $use_refresh whether to use Refresh: header when running on IIS\n *\n * @return boolean  always true\n */\nfunction PMA_sendHeaderLocation($uri, $use_refresh = false)\n{\n    if (PMA_IS_IIS && /*overload*/mb_strlen($uri) > 600) {\n        include_once './libraries/js_escape.lib.php';\n        PMA_Response::getInstance()->disable();\n\n        include_once './libraries/Template.class.php';\n\n        echo PMA\\Template::get('header_location')\n            ->render(array('uri' => $uri));\n\n        return;\n    }\n\n    if (SID) {\n        if (/*overload*/mb_strpos($uri, '?') === false) {\n            header('Location: ' . $uri . '?' . SID);\n        } else {\n            $separator = PMA_URL_getArgSeparator();\n            header('Location: ' . $uri . $separator . SID);\n        }\n        return;\n    }\n\n    session_write_close();\n    if (headers_sent()) {\n        if (function_exists('debug_print_backtrace')) {\n            echo '<pre>';\n            debug_print_backtrace();\n            echo '</pre>';\n        }\n        trigger_error(\n            'PMA_sendHeaderLocation called when headers are already sent!',\n            E_USER_ERROR\n        );\n    }\n    // bug #1523784: IE6 does not like 'Refresh: 0', it\n    // results in a blank page\n    // but we need it when coming from the cookie login panel)\n    if (PMA_IS_IIS && $use_refresh) {\n        header('Refresh: 0; ' . $uri);\n    } else {\n        header('Location: ' . $uri);\n    }\n}\n\n/**\n * Outputs headers to prevent caching in browser (and on the way).\n *\n * @return void\n */\nfunction PMA_noCacheHeader()\n{\n    if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n        return;\n    }\n    // rfc2616 - Section 14.21\n    header('Expires: ' . date(DATE_RFC1123));\n    // HTTP/1.1\n    header(\n        'Cache-Control: no-store, no-cache, must-revalidate,'\n        . '  pre-check=0, post-check=0, max-age=0'\n    );\n    if (PMA_USR_BROWSER_AGENT == 'IE') {\n        /* On SSL IE sometimes fails with:\n         *\n         * Internet Explorer was not able to open this Internet site. The\n         * requested site is either unavailable or cannot be found. Please\n         * try again later.\n         *\n         * Adding Pragma: public fixes this.\n         */\n        header('Pragma: public');\n        return;\n    }\n\n    header('Pragma: no-cache'); // HTTP/1.0\n    // test case: exporting a database into a .gz file with Safari\n    // would produce files not having the current time\n    // (added this header for Safari but should not harm other browsers)\n    header('Last-Modified: ' . date(DATE_RFC1123));\n}\n\n\n/**\n * Sends header indicating file download.\n *\n * @param string $filename Filename to include in headers if empty,\n *                         none Content-Disposition header will be sent.\n * @param string $mimetype MIME type to include in headers.\n * @param int    $length   Length of content (optional)\n * @param bool   $no_cache Whether to include no-caching headers.\n *\n * @return void\n */\nfunction PMA_downloadHeader($filename, $mimetype, $length = 0, $no_cache = true)\n{\n    if ($no_cache) {\n        PMA_noCacheHeader();\n    }\n    /* Replace all possibly dangerous chars in filename */\n    $filename = str_replace(array(';', '\"', \"\\n\", \"\\r\"), '-', $filename);\n    if (!empty($filename)) {\n        header('Content-Description: File Transfer');\n        header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n    }\n    header('Content-Type: ' . $mimetype);\n    // inform the server that compression has been done,\n    // to avoid a double compression (for example with Apache + mod_deflate)\n    $notChromeOrLessThan43 = PMA_USR_BROWSER_AGENT != 'CHROME' // see bug #4942\n        || (PMA_USR_BROWSER_AGENT == 'CHROME' && PMA_USR_BROWSER_VER < 43);\n    if (strpos($mimetype, 'gzip') !== false && $notChromeOrLessThan43) {\n        header('Content-Encoding: gzip');\n    }\n    header('Content-Transfer-Encoding: binary');\n    if ($length > 0) {\n        header('Content-Length: ' . $length);\n    }\n}\n\n/**\n * Returns value of an element in $array given by $path.\n * $path is a string describing position of an element in an associative array,\n * eg. Servers/1/host refers to $array[Servers][1][host]\n *\n * @param string $path    path in the array\n * @param array  $array   the array\n * @param mixed  $default default value\n *\n * @return mixed    array element or $default\n */\nfunction PMA_arrayRead($path, $array, $default = null)\n{\n    $keys = explode('/', $path);\n    $value =& $array;\n    foreach ($keys as $key) {\n        if (! isset($value[$key])) {\n            return $default;\n        }\n        $value =& $value[$key];\n    }\n    return $value;\n}\n\n/**\n * Stores value in an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n * @param mixed  $value  value to store\n *\n * @return void\n */\nfunction PMA_arrayWrite($path, &$array, $value)\n{\n    $keys = explode('/', $path);\n    $last_key = array_pop($keys);\n    $a =& $array;\n    foreach ($keys as $key) {\n        if (! isset($a[$key])) {\n            $a[$key] = array();\n        }\n        $a =& $a[$key];\n    }\n    $a[$last_key] = $value;\n}\n\n/**\n * Removes value from an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n *\n * @return void\n */\nfunction PMA_arrayRemove($path, &$array)\n{\n    $keys = explode('/', $path);\n    $keys_last = array_pop($keys);\n    $path = array();\n    $depth = 0;\n\n    $path[0] =& $array;\n    $found = true;\n    // go as deep as required or possible\n    foreach ($keys as $key) {\n        if (! isset($path[$depth][$key])) {\n            $found = false;\n            break;\n        }\n        $depth++;\n        $path[$depth] =& $path[$depth - 1][$key];\n    }\n    // if element found, remove it\n    if ($found) {\n        unset($path[$depth][$keys_last]);\n        $depth--;\n    }\n\n    // remove empty nested arrays\n    for (; $depth >= 0; $depth--) {\n        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {\n            unset($path[$depth][$keys[$depth]]);\n        } else {\n            break;\n        }\n    }\n}\n\n/**\n * Returns link to (possibly) external site using defined redirector.\n *\n * @param string $url URL where to go.\n *\n * @return string URL for a link.\n */\nfunction PMA_linkURL($url)\n{\n    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {\n        return $url;\n    }\n\n    if (!function_exists('PMA_URL_getCommon')) {\n        include_once './libraries/url_generating.lib.php';\n    }\n    $params = array();\n    $params['url'] = $url;\n\n    $url = PMA_URL_getCommon($params);\n    //strip off token and such sensitive information. Just keep url.\n    $arr = parse_url($url);\n    parse_str($arr[\"query\"], $vars);\n    $query = http_build_query(array(\"url\" => $vars[\"url\"]));\n    $url = './url.php?' . $query;\n\n    return $url;\n}\n\n/**\n * Checks whether domain of URL is whitelisted domain or not.\n * Use only for URLs of external sites.\n *\n * @param string $url URL of external site.\n *\n * @return boolean True: if domain of $url is allowed domain,\n *                 False: otherwise.\n */\nfunction PMA_isAllowedDomain($url)\n{\n    $arr = parse_url($url);\n    $domain = $arr[\"host\"];\n    $domainWhiteList = array(\n        /* Include current domain */\n        $_SERVER['SERVER_NAME'],\n        /* phpMyAdmin domains */\n        'wiki.phpmyadmin.net', 'www.phpmyadmin.net', 'phpmyadmin.net',\n        'docs.phpmyadmin.net',\n        /* mysql.com domains */\n        'dev.mysql.com','bugs.mysql.com',\n        /* drizzle.org domains */\n        'www.drizzle.org',\n        /* mariadb domains */\n        'mariadb.org',\n        /* php.net domains */\n        'php.net',\n        /* Github domains*/\n        'github.com','www.github.com',\n        /* Following are doubtful ones. */\n        'www.primebase.com',\n        'pbxt.blogspot.com',\n        'www.percona.com',\n        'mysqldatabaseadministration.blogspot.com',\n        'ronaldbradford.com',\n        'xaprb.com',\n    );\n    if (in_array(/*overload*/mb_strtolower($domain), $domainWhiteList)) {\n        return true;\n    }\n\n    return false;\n}\n\n\n/**\n * Adds JS code snippets to be displayed by the PMA_Response class.\n * Adds a newline to each snippet.\n *\n * @param string $str Js code to be added (e.g. \"token=1234;\")\n *\n * @return void\n */\nfunction PMA_addJSCode($str)\n{\n    $response = PMA_Response::getInstance();\n    $header   = $response->getHeader();\n    $scripts  = $header->getScripts();\n    $scripts->addCode($str);\n}\n\n/**\n * Adds JS code snippet for variable assignment\n * to be displayed by the PMA_Response class.\n *\n * @param string $key    Name of value to set\n * @param mixed  $value  Value to set, can be either string or array of strings\n * @param bool   $escape Whether to escape value or keep it as it is\n *                       (for inclusion of js code)\n *\n * @return void\n */\nfunction PMA_addJSVar($key, $value, $escape = true)\n{\n    PMA_addJSCode(PMA_getJsValue($key, $value, $escape));\n}\n\n/**\n * Replace some html-unfriendly stuff\n *\n * @param string $buffer String to process\n *\n * @return string Escaped and cleaned up text suitable for html\n */\nfunction PMA_mimeDefaultFunction($buffer)\n{\n    $buffer = htmlspecialchars($buffer);\n    $buffer = str_replace('  ', ' &nbsp;', $buffer);\n    $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />' . \"\\n\", $buffer);\n\n    return $buffer;\n}\n\n/**\n * Displays SQL query before executing.\n *\n * @param array|string $query_data Array containing queries or query itself\n *\n * @return void\n */\nfunction PMA_previewSQL($query_data)\n{\n    $retval = '<div class=\"preview_sql\">';\n    if (empty($query_data)) {\n        $retval .= __('No change');\n    } elseif (is_array($query_data)) {\n        foreach ($query_data as $query) {\n            $retval .= PMA_Util::formatSql($query);\n        }\n    } else {\n        $retval .= PMA_Util::formatSql($query_data);\n    }\n    $retval .= '</div>';\n    $response = PMA_Response::getInstance();\n    $response->addJSON('sql_data', $retval);\n    exit;\n}\n\n/**\n * recursively check if variable is empty\n *\n * @param mixed $value the variable\n *\n * @return bool true if empty\n */\nfunction PMA_emptyRecursive($value)\n{\n    $empty = true;\n    if (is_array($value)) {\n        PMA_arrayWalkRecursive(\n            $value,\n            function ($item) use (&$empty) {\n                $empty = $empty && empty($item);\n            }\n        );\n    } else {\n        $empty = empty($value);\n    }\n    return $empty;\n}\n\n/**\n * Creates some globals from $_POST variables matching a pattern\n *\n * @param array $post_patterns The patterns to search for\n *\n * @return void\n */\nfunction PMA_setPostAsGlobal($post_patterns)\n{\n    foreach (array_keys($_POST) as $post_key) {\n        foreach ($post_patterns as $one_post_pattern) {\n            if (preg_match($one_post_pattern, $post_key)) {\n                $GLOBALS[$post_key] = $_POST[$post_key];\n            }\n        }\n    }\n}\n\n/**\n * Creates some globals from $_REQUEST\n *\n * @param string $param db|table\n *\n * @return void\n */\nfunction PMA_setGlobalDbOrTable($param)\n{\n    $GLOBALS[$param] = '';\n    if (PMA_isValid($_REQUEST[$param])) {\n        // can we strip tags from this?\n        // only \\ and / is not allowed in db names for MySQL\n        $GLOBALS[$param] = $_REQUEST[$param];\n        $GLOBALS['url_params'][$param] = $GLOBALS[$param];\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n* Handles plugins that show the upload progress\n*\n* @package PhpMyAdmin\n*/\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n  * constant for differentiating array in $_SESSION variable\n  */\n$SESSION_KEY = '__upload_status';\n\n/**\n  * sets default plugin for handling the import process\n  */\n$_SESSION[$SESSION_KEY][\"handler\"] = \"\";\n\n/**\n  * unique ID for each upload\n  */\n$upload_id = uniqid(\"\");\n\n/**\n  * list of available plugins\n  *\n  * Each plugin has own checkfunction in display_import_ajax.lib.php\n  * and own file with functions in upload_#KEY#.php\n  */\n$plugins = array(\n   // PHP 5.4 session-based upload progress is problematic, see bug 3964\n   //\"session\",\n   \"progress\",\n   \"apc\",\n   \"noplugin\"\n);\n\n// select available plugin\nforeach ($plugins as $plugin) {\n    $check = \"PMA_Import_\" . $plugin . \"Check\";\n\n    if ($check()) {\n        $upload_class = \"Upload\" . ucwords($plugin);\n        $_SESSION[$SESSION_KEY][\"handler\"] = $upload_class;\n        include_once \"plugins/import/upload/\" . $upload_class . \".class.php\";\n        break;\n    }\n}\n\n/**\n  * Checks if APC bar extension is available and configured correctly.\n  *\n  * @return boolean true if APC extension is available and if rfc1867 is enabled,\n  *                      false if it is not\n  */\nfunction PMA_Import_apcCheck()\n{\n    if (! extension_loaded('apc')\n        || ! function_exists('apc_fetch')\n        || ! function_exists('getallheaders')\n    ) {\n        return false;\n    }\n    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));\n}\n\n/**\n  * Checks if UploadProgress bar extension is available.\n  *\n  * @return boolean true if UploadProgress extension is available,\n  *                 false if it is not\n  */\nfunction PMA_Import_progressCheck()\n{\n    if (! function_exists(\"uploadprogress_get_info\")\n        || ! function_exists('getallheaders')\n    ) {\n        return false;\n    }\n    return true;\n}\n\n/**\n  * Checks if PHP 5.4 session upload-progress feature is available.\n  *\n  * @return boolean true if PHP 5.4 session upload-progress is available,\n  *                 false if it is not\n  */\nfunction PMA_Import_sessionCheck()\n{\n    if (PMA_PHP_INT_VERSION < 50400\n        || ! ini_get('session.upload_progress.enabled')\n    ) {\n        return false;\n    }\n    return true;\n}\n\n/**\n  * Default plugin for handling import.\n  * If no other plugin is available, noplugin is used.\n  *\n  * @return boolean true\n  */\nfunction PMA_Import_nopluginCheck()\n{\n    return true;\n}\n\n/**\n  * The function outputs json encoded status of uploaded.\n  * It uses PMA_getUploadStatus, which is defined in plugin's file.\n  *\n  * @param string $id ID of transfer, usually $upload_id\n  *                   from display_import_ajax.lib.php\n  *\n  * @return void\n  */\nfunction PMA_importAjaxStatus($id)\n{\n    header('Content-type: application/json');\n    echo json_encode(\n        $_SESSION[$GLOBALS['SESSION_KEY']]['handler']::getUploadStatus($id)\n    );\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Represents the interface between the linter and  the query editor.\n *\n * @package PhpMyAdmin\n */\n\n/**\n * Loading common files. Used to check for authorization, localization and to\n * load the parsing library.\n */\nrequire_once 'libraries/common.inc.php';\n\n/**\n * Loads the linter.\n */\nrequire_once 'libraries/Linter.class.php';\n\n/**\n * The SQL query to be analyzed.\n *\n * This does not need to be checked again XSS or MySQL injections because it is\n * never executed, just parsed.\n *\n * The client, which will recieve the JSON response will decode the message and\n * and any HTML fragments that are displayed to the user will be encoded anyway.\n *\n * @var string\n */\n$sql_query = !empty($_POST['sql_query']) ? $_POST['sql_query'] : '';\n\n// Disabling standard response.\n$response = PMA_Response::getInstance();\n$response->disable();\n\necho json_encode(PMA_Linter::lint($sql_query));\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Normalization process (temporarily specific to 1NF)\n *\n * @package PhpMyAdmin\n */\n\n/**\n *\n */\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/transformations.lib.php';\nrequire_once 'libraries/normalization.lib.php';\nrequire_once 'libraries/Index.class.php';\n\nif (isset($_REQUEST['getColumns'])) {\n    $html = '<option selected disabled>' . __('Select one\u2026') . '</option>'\n        . '<option value=\"no_such_col\">' . __('No such column') . '</option>';\n    //get column whose datatype falls under string category\n    $html .= PMA_getHtmlForColumnsList(\n        $db,\n        $table,\n        _pgettext('string types', 'String')\n    );\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['splitColumn'])) {\n    $num_fields = $_REQUEST['numFields'];\n    $html = PMA_getHtmlForCreateNewColumn($num_fields, $db, $table);\n    $html .= PMA_URL_getHiddenInputs($db, $table);\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['addNewPrimary'])) {\n    $num_fields = 1;\n    $columnMeta = array('Field'=>$table . \"_id\", 'Extra'=>'auto_increment');\n    $html = PMA_getHtmlForCreateNewColumn(\n        $num_fields, $db, $table, $columnMeta\n    );\n    $html .= PMA_URL_getHiddenInputs($db, $table);\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['findPdl'])) {\n    $html = PMA_findPartialDependencies($table, $db);\n    echo $html;\n    exit;\n}\n\nif (isset($_REQUEST['getNewTables2NF'])) {\n    $partialDependencies = json_decode($_REQUEST['pd']);\n    $html = PMA_getHtmlForNewTables2NF($partialDependencies, $table);\n    echo $html;\n    exit;\n}\n\nif (isset($_REQUEST['getNewTables3NF'])) {\n    $dependencies = json_decode($_REQUEST['pd']);\n    $tables = json_decode($_REQUEST['tables']);\n    $newTables = PMA_getHtmlForNewTables3NF($dependencies, $tables, $db);\n    echo json_encode($newTables);\n    exit;\n}\n\n$response = PMA_Response::getInstance();\n$header = $response->getHeader();\n$scripts = $header->getScripts();\n$scripts->addFile('normalization.js');\n$scripts->addFile('jquery/jquery.uitablefilter.js');\n$normalForm = '1nf';\nif (isset($_REQUEST['normalizeTo'])) {\n    $normalForm = $_REQUEST['normalizeTo'];\n}\nif (isset($_REQUEST['createNewTables2NF'])) {\n    $partialDependencies = json_decode($_REQUEST['pd']);\n    $tablesName = json_decode($_REQUEST['newTablesName']);\n    $res = PMA_createNewTablesFor2NF($partialDependencies, $tablesName, $table, $db);\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_REQUEST['createNewTables3NF'])) {\n    $newtables = json_decode($_REQUEST['newTables']);\n    $res = PMA_createNewTablesFor3NF($newtables, $db);\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_POST['repeatingColumns'])) {\n    $repeatingColumns = $_POST['repeatingColumns'];\n    $newTable = $_POST['newTable'];\n    $newColumn = $_POST['newColumn'];\n    $primary_columns = $_POST['primary_columns'];\n    $res = PMA_moveRepeatingGroup(\n        $repeatingColumns, $primary_columns, $newTable, $newColumn, $table, $db\n    );\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_REQUEST['step1'])) {\n    $html = PMA_getHtmlFor1NFStep1($db, $table, $normalForm);\n    $response->addHTML($html);\n} else if (isset($_REQUEST['step2'])) {\n    $res = PMA_getHtmlContentsFor1NFStep2($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step3'])) {\n    $res = PMA_getHtmlContentsFor1NFStep3($db, $table);\n    $response->addJSON($res);\n} else if (isset ($_REQUEST['step4'])) {\n    $res = PMA_getHtmlContentsFor1NFStep4($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step']) && $_REQUEST['step'] == 2.1) {\n    $res = PMA_getHtmlFor2NFstep1($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step']) && $_REQUEST['step'] == 3.1) {\n    $tables = $_REQUEST['tables'];\n    $res = PMA_getHtmlFor3NFstep1($db, $tables);\n    $response->addJSON($res);\n} else {\n    $response->addHTML(PMA_getHtmlForNormalizetable());\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Validation callback.\n *\n * @package PhpMyAdmin-Setup\n */\n\n/**\n * Core libraries.\n */\nrequire './lib/common.inc.php';\n\n$validators = array();\nrequire './libraries/config/Validator.class.php';\n\nheader('Content-type: application/json');\n\n$ids = isset($_POST['id']) ? $_POST['id'] : null;\n$vids = explode(',', $ids);\n$vals = isset($_POST['values']) ? $_POST['values'] : null;\n$values = json_decode($vals);\nif (!($values instanceof stdClass)) {\n    PMA_fatalError(__('Wrong data'));\n}\n$values = (array)$values;\n$result = PMA_Validator::validate($GLOBALS['ConfigFile'], $vids, $values, true);\nif ($result === false) {\n    $result = 'Wrong data or no validation for ' . $vids;\n}\necho $result !== true ? json_encode($result) : '';\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * A caching proxy for retrieving version information from phpmyadmin.net\n *\n * @package PhpMyAdmin\n */\n\n// Sets up the session\ndefine('PMA_MINIMUM_COMMON', true);\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/Util.class.php';\nrequire_once 'libraries/VersionInformation.php';\n\n// Always send the correct headers\nheader('Content-type: application/json; charset=UTF-8');\n\n$versionInformation = new VersionInformation();\n$versionDetails = $versionInformation->getLatestVersion();\n\nif (empty($versionDetails)) {\n    echo json_encode(array());\n} else {\n    $latestCompatible = $versionInformation->getLatestCompatibleVersion(\n        $versionDetails->releases\n    );\n    $version = '';\n    $date = '';\n    if ($latestCompatible != null) {\n        $version = $latestCompatible['version'];\n        $date = $latestCompatible['date'];\n    }\n    echo json_encode(\n        array(\n            'version' => (! empty($version) ? $version : ''),\n            'date' => (! empty($date) ? $date : ''),\n        )\n    );\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Import progress bar backend\n *\n * @package PhpMyAdmin\n */\n\n/* PHP 5.4 stores upload progress data only in the default session.\n * After calling session_name(), we won't find the progress data anymore.\n *\n * https://bugs.php.net/bug.php?id=64075\n *\n * The bug should be somewhere in\n * https://github.com/php/php-src/blob/master/ext/session/session.c#L2342\n *\n * Until this is fixed, we need to load the default session to load the data,\n * export the upload progress information from there,\n * and re-import after switching to our session.\n *\n * However, since https://github.com/phpmyadmin/phpmyadmin/commit/063a2d99\n * we have deactivated this feature, so the corresponding code is now\n * commented out.\n */\n\n/*\nif (version_compare(PHP_VERSION, '5.4.0', '>=')\n    && ini_get('session.upload_progress.enabled')\n) {\n\n    $sessionupload = array();\n    define('UPLOAD_PREFIX', ini_get('session.upload_progress.prefix'));\n\n    session_start();\n    foreach ($_SESSION as $key => $value) {\n        // only copy session-prefixed data\n        if (mb_substr($key, 0, mb_strlen(UPLOAD_PREFIX))\n            == UPLOAD_PREFIX) {\n            $sessionupload[$key] = $value;\n        }\n    }\n    // PMA will kill all variables, so let's use a constant\n    define('SESSIONUPLOAD', serialize($sessionupload));\n    session_write_close();\n\n    session_name('phpMyAdmin');\n    session_id($_COOKIE['phpMyAdmin']);\n}\n */\n\ndefine('PMA_MINIMUM_COMMON', 1);\n\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/Util.class.php';\nrequire_once 'libraries/display_import_ajax.lib.php';\n\n/*\nif (defined('SESSIONUPLOAD')) {\n    // write sessionupload back into the loaded PMA session\n\n    $sessionupload = unserialize(SESSIONUPLOAD);\n    foreach ($sessionupload as $key => $value) {\n        $_SESSION[$key] = $value;\n    }\n\n    // remove session upload data that are not set anymore\n    foreach ($_SESSION as $key => $value) {\n        if (mb_substr($key, 0, mb_strlen(UPLOAD_PREFIX))\n            == UPLOAD_PREFIX\n            && ! isset($sessionupload[$key])\n        ) {\n            unset($_SESSION[$key]);\n        }\n    }\n}\n */\n\n// $_GET[\"message\"] is used for asking for an import message\nif (isset($_GET[\"message\"]) && $_GET[\"message\"]) {\n\n    // AJAX requests can't be cached!\n    PMA_noCacheHeader();\n\n    header('Content-type: text/html');\n\n    // wait 0.3 sec before we check for $_SESSION variable,\n    // which is set inside import.php\n    usleep(300000);\n\n    $maximumTime = ini_get('max_execution_time');\n    $timestamp = time();\n    // wait until message is available\n    while ($_SESSION['Import_message']['message'] == null) {\n        // close session before sleeping\n        session_write_close();\n        // sleep\n        usleep(250000); // 0.25 sec\n        // reopen session\n        session_start();\n\n        if ((time() - $timestamp) > $maximumTime) {\n            $_SESSION['Import_message']['message'] = PMA_Message::error(\n                __('Could not load the progress of the import.')\n            )->getDisplay();\n            break;\n        }\n    }\n\n    echo $_SESSION['Import_message']['message'];\n    echo '<fieldset class=\"tblFooters\">' . \"\\n\";\n    echo '    [ <a href=\"' . $_SESSION['Import_message']['go_back_url']\n        . '\">' . __('Back') . '</a> ]' . \"\\n\";\n    echo '</fieldset>' . \"\\n\";\n\n} else {\n    PMA_importAjaxStatus($_GET[\"id\"]);\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Manages the rendering of pages in PMA\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\nrequire_once 'libraries/OutputBuffering.class.php';\nrequire_once 'libraries/Header.class.php';\nrequire_once 'libraries/Footer.class.php';\n\n/**\n * Singleton class used to manage the rendering of pages in PMA\n *\n * @package PhpMyAdmin\n */\nclass PMA_Response\n{\n    /**\n     * PMA_Response instance\n     *\n     * @access private\n     * @static\n     * @var PMA_Response\n     */\n    private static $_instance;\n    /**\n     * PMA_Header instance\n     *\n     * @access private\n     * @var PMA_Header\n     */\n    private $_header;\n    /**\n     * HTML data to be used in the response\n     *\n     * @access private\n     * @var string\n     */\n    private $_HTML;\n    /**\n     * An array of JSON key-value pairs\n     * to be sent back for ajax requests\n     *\n     * @access private\n     * @var array\n     */\n    private $_JSON;\n    /**\n     * PMA_Footer instance\n     *\n     * @access private\n     * @var PMA_Footer\n     */\n    private $_footer;\n    /**\n     * Whether we are servicing an ajax request.\n     * We can't simply use $GLOBALS['is_ajax_request']\n     * here since it may have not been initialised yet.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjax;\n    /**\n     * Whether we are servicing an ajax request for a page\n     * that was fired using the generic page handler in JS.\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isAjaxPage;\n    /**\n     * Whether there were any errors during the processing of the request\n     * Only used for ajax responses\n     *\n     * @access private\n     * @var bool\n     */\n    private $_isSuccess;\n    /**\n     * Workaround for PHP bug\n     *\n     * @access private\n     * @var string|bool\n     */\n    private $_CWD;\n\n    /**\n     * Creates a new class instance\n     */\n    private function __construct()\n    {\n        if (! defined('TESTSUITE')) {\n            $buffer = PMA_OutputBuffering::getInstance();\n            $buffer->start();\n            register_shutdown_function('PMA_Response::response');\n        }\n        $this->_header = new PMA_Header();\n        $this->_HTML   = '';\n        $this->_JSON   = array();\n        $this->_footer = new PMA_Footer();\n\n        $this->_isSuccess  = true;\n        $this->_isAjax     = false;\n        $this->_isAjaxPage = false;\n        if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {\n            $this->_isAjax = true;\n        }\n        if (isset($_REQUEST['ajax_page_request'])\n            && $_REQUEST['ajax_page_request'] == true\n        ) {\n            $this->_isAjaxPage = true;\n        }\n        $this->_header->setAjax($this->_isAjax);\n        $this->_footer->setAjax($this->_isAjax);\n        $this->_CWD = getcwd();\n    }\n\n    /**\n     * Returns the singleton PMA_Response object\n     *\n     * @return PMA_Response object\n     */\n    public static function getInstance()\n    {\n        if (empty(self::$_instance)) {\n            self::$_instance = new PMA_Response();\n        }\n        return self::$_instance;\n    }\n\n    /**\n     * Set the status of an ajax response,\n     * whether it is a success or an error\n     *\n     * @param bool $state Whether the request was successfully processed\n     *\n     * @return void\n     */\n    public function isSuccess($state)\n    {\n        $this->_isSuccess = ($state == true);\n    }\n\n    /**\n     * Returns true or false depending on whether\n     * we are servicing an ajax request\n     *\n     * @return bool\n     */\n    public function isAjax()\n    {\n        return $this->_isAjax;\n    }\n\n    /**\n     * Returns the path to the current working directory\n     * Necessary to work around a PHP bug where the CWD is\n     * reset after the initial script exits\n     *\n     * @return string\n     */\n    public function getCWD()\n    {\n        return $this->_CWD;\n    }\n\n    /**\n     * Disables the rendering of the header\n     * and the footer in responses\n     *\n     * @return void\n     */\n    public function disable()\n    {\n        $this->_header->disable();\n        $this->_footer->disable();\n    }\n\n    /**\n     * Returns a PMA_Header object\n     *\n     * @return PMA_Header\n     */\n    public function getHeader()\n    {\n        return $this->_header;\n    }\n\n    /**\n     * Returns a PMA_Footer object\n     *\n     * @return PMA_Footer\n     */\n    public function getFooter()\n    {\n        return $this->_footer;\n    }\n\n    /**\n     * Add HTML code to the response\n     *\n     * @param string $content A string to be appended to\n     *                        the current output buffer\n     *\n     * @return void\n     */\n    public function addHTML($content)\n    {\n        if (is_array($content)) {\n            foreach ($content as $msg) {\n                $this->addHTML($msg);\n            }\n        } elseif ($content instanceof PMA_Message) {\n            $this->_HTML .= $content->getDisplay();\n        } else {\n            $this->_HTML .= $content;\n        }\n    }\n\n    /**\n     * Add JSON code to the response\n     *\n     * @param mixed $json  Either a key (string) or an\n     *                     array or key-value pairs\n     * @param mixed $value Null, if passing an array in $json otherwise\n     *                     it's a string value to the key\n     *\n     * @return void\n     */\n    public function addJSON($json, $value = null)\n    {\n        if (is_array($json)) {\n            foreach ($json as $key => $value) {\n                $this->addJSON($key, $value);\n            }\n        } else {\n            if ($value instanceof PMA_Message) {\n                $this->_JSON[$json] = $value->getDisplay();\n            } else {\n                $this->_JSON[$json] = $value;\n            }\n        }\n\n    }\n\n    /**\n     * Renders the HTML response text\n     *\n     * @return string\n     */\n    private function _getDisplay()\n    {\n        // The header may contain nothing at all,\n        // if its content was already rendered\n        // and, in this case, the header will be\n        // in the content part of the request\n        $retval  = $this->_header->getDisplay();\n        $retval .= $this->_HTML;\n        $retval .= $this->_footer->getDisplay();\n        return $retval;\n    }\n\n    /**\n     * Sends an HTML response to the browser\n     *\n     * @return void\n     */\n    private function _htmlResponse()\n    {\n        echo $this->_getDisplay();\n    }\n\n    /**\n     * Sends a JSON response to the browser\n     *\n     * @return void\n     */\n    private function _ajaxResponse()\n    {\n        if (! isset($this->_JSON['message'])) {\n            $this->_JSON['message'] = $this->_getDisplay();\n        } else if ($this->_JSON['message'] instanceof PMA_Message) {\n            $this->_JSON['message'] = $this->_JSON['message']->getDisplay();\n        }\n\n        if ($this->_isSuccess) {\n            $this->_JSON['success'] = true;\n        } else {\n            $this->_JSON['success'] = false;\n            $this->_JSON['error']   = $this->_JSON['message'];\n            unset($this->_JSON['message']);\n        }\n\n        if ($this->_isSuccess) {\n            // Note: the old judge sentence is:\n            // $this->_isAjaxPage && $this->_isSuccess\n            // Removal the first, because console need log all queries, if caused any\n            // bug, contact Edward Cheng\n            $this->addJSON('_title', $this->getHeader()->getTitleTag());\n\n            if (isset($GLOBALS['dbi'])) {\n                $menuHash = $this->getHeader()->getMenu()->getHash();\n                $this->addJSON('_menuHash', $menuHash);\n                $hashes = array();\n                if (isset($_REQUEST['menuHashes'])) {\n                    $hashes = explode('-', $_REQUEST['menuHashes']);\n                }\n                if (! in_array($menuHash, $hashes)) {\n                    $this->addJSON(\n                        '_menu',\n                        $this->getHeader()\n                            ->getMenu()\n                            ->getDisplay()\n                    );\n                }\n            }\n\n            $this->addJSON('_scripts', $this->getHeader()->getScripts()->getFiles());\n            $this->addJSON('_selflink', $this->getFooter()->getSelfUrl('unencoded'));\n            $this->addJSON('_displayMessage', $this->getHeader()->getMessage());\n\n            $debug = $this->_footer->getDebugMessage();\n            if (empty($_REQUEST['no_debug'])\n                && /*overload*/mb_strlen($debug)\n            ) {\n                $this->addJSON('_debug', $debug);\n            }\n\n            $errors = $this->_footer->getErrorMessages();\n            if (/*overload*/mb_strlen($errors)) {\n                $this->addJSON('_errors', $errors);\n            }\n            $promptPhpErrors = $GLOBALS['error_handler']->hasErrorsForPrompt();\n            $this->addJSON('_promptPhpErrors', $promptPhpErrors);\n\n            if (empty($GLOBALS['error_message'])) {\n                // set current db, table and sql query in the querywindow\n                // (this is for the bottom console)\n                $query = '';\n                $maxChars = $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'];\n                if (isset($GLOBALS['sql_query'])\n                    && /*overload*/mb_strlen($GLOBALS['sql_query']) < $maxChars\n                ) {\n                    $query = $GLOBALS['sql_query'];\n                }\n                $this->addJSON(\n                    '_reloadQuerywindow',\n                    array(\n                        'db' => PMA_ifSetOr($GLOBALS['db'], ''),\n                        'table' => PMA_ifSetOr($GLOBALS['table'], ''),\n                        'sql_query' => $query\n                    )\n                );\n                if (! empty($GLOBALS['focus_querywindow'])) {\n                    $this->addJSON('_focusQuerywindow', $query);\n                }\n                if (! empty($GLOBALS['reload'])) {\n                    $this->addJSON('_reloadNavigation', 1);\n                }\n                $this->addJSON('_params', $this->getHeader()->getJsParams());\n            }\n        }\n\n        // Set the Content-Type header to JSON so that jQuery parses the\n        // response correctly.\n        PMA_headerJSON();\n\n        echo json_encode($this->_JSON);\n    }\n\n    /**\n     * Sends an HTML response to the browser\n     *\n     * @static\n     * @return void\n     */\n    public static function response()\n    {\n        $response = PMA_Response::getInstance();\n        chdir($response->getCWD());\n        $buffer = PMA_OutputBuffering::getInstance();\n        if (empty($response->_HTML)) {\n            $response->_HTML = $buffer->getContents();\n        }\n        if ($response->isAjax()) {\n            $response->_ajaxResponse();\n        } else {\n            $response->_htmlResponse();\n        }\n        $buffer->flush();\n        exit;\n    }\n}\n\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core functions used all over the scripts.\n * This script is distinct from libraries/common.inc.php because this\n * script is called from /test.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * String handling (security)\n */\nrequire_once 'libraries/string.lib.php';\nrequire_once 'libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * checks given $var and returns it if valid, or $default of not valid\n * given $var is also checked for type being 'similar' as $default\n * or against any other type if $type is provided\n *\n * <code>\n * // $_REQUEST['db'] not set\n * echo PMA_ifSetOr($_REQUEST['db'], ''); // ''\n * // $_REQUEST['sql_query'] not set\n * echo PMA_ifSetOr($_REQUEST['sql_query']); // null\n * // $cfg['ForceSSL'] not set\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL']); // null\n * // $cfg['ForceSSL'] set to 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1\n * // $cfg['ForceSSL'] set to true\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true\n * </code>\n *\n * @param mixed &$var    param to check\n * @param mixed $default default value\n * @param mixed $type    var type or array of values to check against $var\n *\n * @return mixed   $var or $default\n *\n * @see     PMA_isValid()\n */\nfunction PMA_ifSetOr(&$var, $default = null, $type = 'similar')\n{\n    if (! PMA_isValid($var, $type, $default)) {\n        return $default;\n    }\n\n    return $var;\n}\n\n/**\n * checks given $var against $type or $compare\n *\n * $type can be:\n * - false       : no type checking\n * - 'scalar'    : whether type of $var is integer, float, string or boolean\n * - 'numeric'   : whether type of $var is any number representation\n * - 'length'    : whether type of $var is scalar with a string length > 0\n * - 'similar'   : whether type of $var is similar to type of $compare\n * - 'equal'     : whether type of $var is identical to type of $compare\n * - 'identical' : whether $var is identical to $compare, not only the type!\n * - or any other valid PHP variable type\n *\n * <code>\n * // $_REQUEST['doit'] = true;\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false\n * // $_REQUEST['doit'] = 'true';\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true\n * </code>\n *\n * NOTE: call-by-reference is used to not get NOTICE on undefined vars,\n * but the var is not altered inside this function, also after checking a var\n * this var exists nut is not set, example:\n * <code>\n * // $var is not set\n * isset($var); // false\n * functionCallByReference($var); // false\n * isset($var); // true\n * functionCallByReference($var); // true\n * </code>\n *\n * to avoid this we set this var to null if not isset\n *\n * @param mixed &$var    variable to check\n * @param mixed $type    var type or array of valid values to check against $var\n * @param mixed $compare var to compare with $var\n *\n * @return boolean whether valid or not\n *\n * @todo add some more var types like hex, bin, ...?\n * @see     http://php.net/gettype\n */\nfunction PMA_isValid(&$var, $type = 'length', $compare = null)\n{\n    if (! isset($var)) {\n        // var is not even set\n        return false;\n    }\n\n    if ($type === false) {\n        // no vartype requested\n        return true;\n    }\n\n    if (is_array($type)) {\n        return in_array($var, $type);\n    }\n\n    // allow some aliases of var types\n    $type = strtolower($type);\n    switch ($type) {\n    case 'identic' :\n        $type = 'identical';\n        break;\n    case 'len' :\n        $type = 'length';\n        break;\n    case 'bool' :\n        $type = 'boolean';\n        break;\n    case 'float' :\n        $type = 'double';\n        break;\n    case 'int' :\n        $type = 'integer';\n        break;\n    case 'null' :\n        $type = 'NULL';\n        break;\n    }\n\n    if ($type === 'identical') {\n        return $var === $compare;\n    }\n\n    // whether we should check against given $compare\n    if ($type === 'similar') {\n        switch (gettype($compare)) {\n        case 'string':\n        case 'boolean':\n            $type = 'scalar';\n            break;\n        case 'integer':\n        case 'double':\n            $type = 'numeric';\n            break;\n        default:\n            $type = gettype($compare);\n        }\n    } elseif ($type === 'equal') {\n        $type = gettype($compare);\n    }\n\n    // do the check\n    if ($type === 'length' || $type === 'scalar') {\n        $is_scalar = is_scalar($var);\n        if ($is_scalar && $type === 'length') {\n            return (bool) /*overload*/mb_strlen($var);\n        }\n        return $is_scalar;\n    }\n\n    if ($type === 'numeric') {\n        return is_numeric($var);\n    }\n\n    if (gettype($var) === $type) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Removes insecure parts in a path; used before include() or\n * require() when a part of the path comes from an insecure source\n * like a cookie or form.\n *\n * @param string $path The path to check\n *\n * @return string  The secured path\n *\n * @access  public\n */\nfunction PMA_securePath($path)\n{\n    // change .. to .\n    $path = preg_replace('@\\.\\.*@', '.', $path);\n\n    return $path;\n} // end function\n\n/**\n * displays the given error message on phpMyAdmin error page in foreign language,\n * ends script execution and closes session\n *\n * loads language file if not loaded already\n *\n * @param string       $error_message  the error message or named error message\n * @param string|array $message_args   arguments applied to $error_message\n * @param boolean      $delete_session whether to delete session cookie\n *\n * @return void\n */\nfunction PMA_fatalError(\n    $error_message, $message_args = null, $delete_session = true\n) {\n    /* Use format string if applicable */\n    if (is_string($message_args)) {\n        $error_message = sprintf($error_message, $message_args);\n    } elseif (is_array($message_args)) {\n        $error_message = vsprintf($error_message, $message_args);\n    }\n\n    if ($GLOBALS['is_ajax_request']) {\n        $response = PMA_Response::getInstance();\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($error_message));\n    } else {\n        $error_message = strtr($error_message, array('<br />' => '[br]'));\n\n        /* Load gettext for fatal errors */\n        if (!function_exists('__')) {\n            // It is possible that PMA_fatalError() is called before including\n            // vendor_config.php which defines GETTEXT_INC. See bug #4557\n            if (defined(GETTEXT_INC)) {\n                include_once GETTEXT_INC;\n            } else {\n                include_once './libraries/php-gettext/gettext.inc';\n            }\n        }\n\n        // these variables are used in the included file libraries/error.inc.php\n        //first check if php-mbstring is available\n        if (function_exists('mb_detect_encoding')) {\n            //If present use gettext\n            $error_header = __('Error');\n        } else {\n            $error_header = 'Error';\n        }\n        $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];\n        $dir = $GLOBALS['text_dir'];\n\n        // on fatal errors it cannot hurt to always delete the current session\n        if ($delete_session\n            && isset($GLOBALS['session_name'])\n            && isset($_COOKIE[$GLOBALS['session_name']])\n        ) {\n            $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n        }\n\n        // Displays the error message\n        include './libraries/error.inc.php';\n    }\n    if (! defined('TESTSUITE')) {\n        exit;\n    }\n}\n\n/**\n * Returns a link to the PHP documentation\n *\n * @param string $target anchor in documentation\n *\n * @return string  the URL\n *\n * @access  public\n */\nfunction PMA_getPHPDocLink($target)\n{\n    /* List of PHP documentation translations */\n    $php_doc_languages = array(\n        'pt_BR', 'zh', 'fr', 'de', 'it', 'ja', 'pl', 'ro', 'ru', 'fa', 'es', 'tr'\n    );\n\n    $lang = 'en';\n    if (in_array($GLOBALS['lang'], $php_doc_languages)) {\n        $lang = $GLOBALS['lang'];\n    }\n\n    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);\n}\n\n/**\n * Warn or fail on missing extension.\n *\n * @param string $extension Extension name\n * @param bool   $fatal     Whether the error is fatal.\n * @param string $extra     Extra string to append to message.\n *\n * @return void\n */\nfunction PMA_warnMissingExtension($extension, $fatal = false, $extra = '')\n{\n    /* Gettext does not have to be loaded yet here */\n    if (function_exists('__')) {\n        $message = __(\n            'The %s extension is missing. Please check your PHP configuration.'\n        );\n    } else {\n        $message\n            = 'The %s extension is missing. Please check your PHP configuration.';\n    }\n    $doclink = PMA_getPHPDocLink('book.' . $extension . '.php');\n    $message = sprintf(\n        $message,\n        '[a@' . $doclink . '@Documentation][em]' . $extension . '[/em][/a]'\n    );\n    if ($extra != '') {\n        $message .= ' ' . $extra;\n    }\n    if ($fatal) {\n        PMA_fatalError($message);\n        return;\n    }\n\n    $GLOBALS['error_handler']->addError(\n        $message,\n        E_USER_WARNING,\n        '',\n        '',\n        false\n    );\n}\n\n/**\n * returns count of tables in given db\n *\n * @param string $db database to count tables for\n *\n * @return integer count of tables in $db\n */\nfunction PMA_getTableCount($db)\n{\n    $tables = $GLOBALS['dbi']->tryQuery(\n        'SHOW TABLES FROM ' . PMA_Util::backquote($db) . ';',\n        null, PMA_DatabaseInterface::QUERY_STORE\n    );\n    if ($tables) {\n        $num_tables = $GLOBALS['dbi']->numRows($tables);\n        $GLOBALS['dbi']->freeResult($tables);\n    } else {\n        $num_tables = 0;\n    }\n\n    return $num_tables;\n}\n\n/**\n * Converts numbers like 10M into bytes\n * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas\n * (renamed with PMA prefix to avoid double definition when embedded\n * in Moodle)\n *\n * @param string|int $size size (Default = 0)\n *\n * @return integer $size\n */\nfunction PMA_getRealSize($size = 0)\n{\n    if (! $size) {\n        return 0;\n    }\n\n    $scan = array(\n        'gb' => 1073741824, //1024 * 1024 * 1024,\n        'g'  => 1073741824, //1024 * 1024 * 1024,\n        'mb' =>    1048576,\n        'm'  =>    1048576,\n        'kb' =>       1024,\n        'k'  =>       1024,\n        'b'  =>          1,\n    );\n\n    foreach ($scan as $unit => $factor) {\n        $sizeLength = strlen($size);\n        $unitLength = strlen($unit);\n        if ($sizeLength > $unitLength\n            && strtolower(\n                substr(\n                    $size,\n                    $sizeLength - $unitLength\n                )\n            ) == $unit\n        ) {\n            return substr(\n                $size,\n                0,\n                $sizeLength - $unitLength\n            ) * $factor;\n        }\n    }\n\n    return $size;\n} // end function PMA_getRealSize()\n\n/**\n * merges array recursive like array_merge_recursive() but keyed-values are\n * always overwritten.\n *\n * array PMA_arrayMergeRecursive(array $array1[, array $array2[, array ...]])\n *\n * @return array   merged array\n *\n * @see     http://php.net/array_merge\n * @see     http://php.net/array_merge_recursive\n */\nfunction PMA_arrayMergeRecursive()\n{\n    switch(func_num_args()) {\n    case 0 :\n        return false;\n    case 1 :\n        // when does that happen?\n        return func_get_arg(0);\n    case 2 :\n        $args = func_get_args();\n        if (! is_array($args[0]) || ! is_array($args[1])) {\n            return $args[1];\n        }\n        foreach ($args[1] as $key2 => $value2) {\n            if (isset($args[0][$key2]) && !is_int($key2)) {\n                $args[0][$key2] = PMA_arrayMergeRecursive(\n                    $args[0][$key2], $value2\n                );\n            } else {\n                // we erase the parent array, otherwise we cannot override\n                // a directive that contains array elements, like this:\n                // (in config.default.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('id-content','content-id');\n                // (in config.inc.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('content-id');\n                if (is_int($key2) && $key2 == 0) {\n                    unset($args[0]);\n                }\n                $args[0][$key2] = $value2;\n            }\n        }\n        return $args[0];\n    default :\n        $args = func_get_args();\n        $args[1] = PMA_arrayMergeRecursive($args[0], $args[1]);\n        array_shift($args);\n        return call_user_func_array('PMA_arrayMergeRecursive', $args);\n    }\n}\n\n/**\n * calls $function for every element in $array recursively\n *\n * this function is protected against deep recursion attack CVE-2006-1549,\n * 1000 seems to be more than enough\n *\n * @param array    &$array             array to walk\n * @param callable $function           function to call for every array element\n * @param bool     $apply_to_keys_also whether to call the function for the keys also\n *\n * @return void\n *\n * @see http://www.php-security.org/MOPB/MOPB-02-2007.html\n * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549\n */\nfunction PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false)\n{\n    static $recursive_counter = 0;\n    $walked_keys = array();\n\n    if (++$recursive_counter > 1000) {\n        PMA_fatalError(__('possible deep recursion attack'));\n    }\n    foreach ($array as $key => $value) {\n        if (isset($walked_keys[$key])) {\n            continue;\n        }\n        $walked_keys[$key] = true;\n\n        if (is_array($value)) {\n            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);\n        } else {\n            $array[$key] = $function($value);\n        }\n\n        if ($apply_to_keys_also && is_string($key)) {\n            $new_key = $function($key);\n            if ($new_key != $key) {\n                $array[$new_key] = $array[$key];\n                unset($array[$key]);\n                $walked_keys[$new_key] = true;\n            }\n        }\n    }\n    $recursive_counter--;\n}\n\n/**\n * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist)\n *\n * checks given $page against given $whitelist and returns true if valid\n * it optionally ignores query parameters in $page (script.php?ignored)\n *\n * @param string &$page     page to check\n * @param array  $whitelist whitelist to check page against\n *\n * @return boolean whether $page is valid or not (in $whitelist or not)\n */\nfunction PMA_checkPageValidity(&$page, $whitelist)\n{\n    if (! isset($page) || !is_string($page)) {\n        return false;\n    }\n\n    if (in_array($page, $whitelist)) {\n        return true;\n    }\n\n    $_page = /*overload*/mb_substr(\n        $page,\n        0,\n        /*overload*/mb_strpos($page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    $_page = urldecode($page);\n    $_page = /*overload*/mb_substr(\n        $_page,\n        0,\n        /*overload*/mb_strpos($_page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * tries to find the value for the given environment variable name\n *\n * searches in $_SERVER, $_ENV then tries getenv() and apache_getenv()\n * in this order\n *\n * @param string $var_name variable name\n *\n * @return string  value of $var or empty string\n */\nfunction PMA_getenv($var_name)\n{\n    if (isset($_SERVER[$var_name])) {\n        return $_SERVER[$var_name];\n    }\n\n    if (isset($_ENV[$var_name])) {\n        return $_ENV[$var_name];\n    }\n\n    if (getenv($var_name)) {\n        return getenv($var_name);\n    }\n\n    if (function_exists('apache_getenv')\n        && apache_getenv($var_name, true)\n    ) {\n        return apache_getenv($var_name, true);\n    }\n\n    return '';\n}\n\n/**\n * Send HTTP header, taking IIS limits into account (600 seems ok)\n *\n * @param string $uri         the header to send\n * @param bool   $use_refresh whether to use Refresh: header when running on IIS\n *\n * @return boolean  always true\n */\nfunction PMA_sendHeaderLocation($uri, $use_refresh = false)\n{\n    if (PMA_IS_IIS && /*overload*/mb_strlen($uri) > 600) {\n        include_once './libraries/js_escape.lib.php';\n        PMA_Response::getInstance()->disable();\n\n        include_once './libraries/Template.class.php';\n\n        echo PMA\\Template::get('header_location')\n            ->render(array('uri' => $uri));\n\n        return;\n    }\n\n    if (SID) {\n        if (/*overload*/mb_strpos($uri, '?') === false) {\n            header('Location: ' . $uri . '?' . SID);\n        } else {\n            $separator = PMA_URL_getArgSeparator();\n            header('Location: ' . $uri . $separator . SID);\n        }\n        return;\n    }\n\n    session_write_close();\n    if (headers_sent()) {\n        if (function_exists('debug_print_backtrace')) {\n            echo '<pre>';\n            debug_print_backtrace();\n            echo '</pre>';\n        }\n        trigger_error(\n            'PMA_sendHeaderLocation called when headers are already sent!',\n            E_USER_ERROR\n        );\n    }\n    // bug #1523784: IE6 does not like 'Refresh: 0', it\n    // results in a blank page\n    // but we need it when coming from the cookie login panel)\n    if (PMA_IS_IIS && $use_refresh) {\n        header('Refresh: 0; ' . $uri);\n    } else {\n        header('Location: ' . $uri);\n    }\n}\n\n/**\n * Outputs application/json headers. This includes no caching.\n *\n * @return void\n */\nfunction PMA_headerJSON()\n{\n    if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n        return;\n    }\n    // No caching\n    PMA_noCacheHeader();\n    // MIME type\n    header('Content-Type: application/json; charset=UTF-8');\n    // Disable content sniffing in browser\n    // This is needed in case we include HTML in JSON, browser might assume it's\n    // html to display\n    header('X-Content-Type-Options: nosniff');\n}\n\n/**\n * Outputs headers to prevent caching in browser (and on the way).\n *\n * @return void\n */\nfunction PMA_noCacheHeader()\n{\n    if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n        return;\n    }\n    // rfc2616 - Section 14.21\n    header('Expires: ' . date(DATE_RFC1123));\n    // HTTP/1.1\n    header(\n        'Cache-Control: no-store, no-cache, must-revalidate,'\n        . '  pre-check=0, post-check=0, max-age=0'\n    );\n    if (PMA_USR_BROWSER_AGENT == 'IE') {\n        /* On SSL IE sometimes fails with:\n         *\n         * Internet Explorer was not able to open this Internet site. The\n         * requested site is either unavailable or cannot be found. Please\n         * try again later.\n         *\n         * Adding Pragma: public fixes this.\n         */\n        header('Pragma: public');\n        return;\n    }\n\n    header('Pragma: no-cache'); // HTTP/1.0\n    // test case: exporting a database into a .gz file with Safari\n    // would produce files not having the current time\n    // (added this header for Safari but should not harm other browsers)\n    header('Last-Modified: ' . date(DATE_RFC1123));\n}\n\n\n/**\n * Sends header indicating file download.\n *\n * @param string $filename Filename to include in headers if empty,\n *                         none Content-Disposition header will be sent.\n * @param string $mimetype MIME type to include in headers.\n * @param int    $length   Length of content (optional)\n * @param bool   $no_cache Whether to include no-caching headers.\n *\n * @return void\n */\nfunction PMA_downloadHeader($filename, $mimetype, $length = 0, $no_cache = true)\n{\n    if ($no_cache) {\n        PMA_noCacheHeader();\n    }\n    /* Replace all possibly dangerous chars in filename */\n    $filename = str_replace(array(';', '\"', \"\\n\", \"\\r\"), '-', $filename);\n    if (!empty($filename)) {\n        header('Content-Description: File Transfer');\n        header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n    }\n    header('Content-Type: ' . $mimetype);\n    // inform the server that compression has been done,\n    // to avoid a double compression (for example with Apache + mod_deflate)\n    $notChromeOrLessThan43 = PMA_USR_BROWSER_AGENT != 'CHROME' // see bug #4942\n        || (PMA_USR_BROWSER_AGENT == 'CHROME' && PMA_USR_BROWSER_VER < 43);\n    if (strpos($mimetype, 'gzip') !== false && $notChromeOrLessThan43) {\n        header('Content-Encoding: gzip');\n    }\n    header('Content-Transfer-Encoding: binary');\n    if ($length > 0) {\n        header('Content-Length: ' . $length);\n    }\n}\n\n/**\n * Returns value of an element in $array given by $path.\n * $path is a string describing position of an element in an associative array,\n * eg. Servers/1/host refers to $array[Servers][1][host]\n *\n * @param string $path    path in the array\n * @param array  $array   the array\n * @param mixed  $default default value\n *\n * @return mixed    array element or $default\n */\nfunction PMA_arrayRead($path, $array, $default = null)\n{\n    $keys = explode('/', $path);\n    $value =& $array;\n    foreach ($keys as $key) {\n        if (! isset($value[$key])) {\n            return $default;\n        }\n        $value =& $value[$key];\n    }\n    return $value;\n}\n\n/**\n * Stores value in an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n * @param mixed  $value  value to store\n *\n * @return void\n */\nfunction PMA_arrayWrite($path, &$array, $value)\n{\n    $keys = explode('/', $path);\n    $last_key = array_pop($keys);\n    $a =& $array;\n    foreach ($keys as $key) {\n        if (! isset($a[$key])) {\n            $a[$key] = array();\n        }\n        $a =& $a[$key];\n    }\n    $a[$last_key] = $value;\n}\n\n/**\n * Removes value from an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n *\n * @return void\n */\nfunction PMA_arrayRemove($path, &$array)\n{\n    $keys = explode('/', $path);\n    $keys_last = array_pop($keys);\n    $path = array();\n    $depth = 0;\n\n    $path[0] =& $array;\n    $found = true;\n    // go as deep as required or possible\n    foreach ($keys as $key) {\n        if (! isset($path[$depth][$key])) {\n            $found = false;\n            break;\n        }\n        $depth++;\n        $path[$depth] =& $path[$depth - 1][$key];\n    }\n    // if element found, remove it\n    if ($found) {\n        unset($path[$depth][$keys_last]);\n        $depth--;\n    }\n\n    // remove empty nested arrays\n    for (; $depth >= 0; $depth--) {\n        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {\n            unset($path[$depth][$keys[$depth]]);\n        } else {\n            break;\n        }\n    }\n}\n\n/**\n * Returns link to (possibly) external site using defined redirector.\n *\n * @param string $url URL where to go.\n *\n * @return string URL for a link.\n */\nfunction PMA_linkURL($url)\n{\n    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {\n        return $url;\n    }\n\n    if (!function_exists('PMA_URL_getCommon')) {\n        include_once './libraries/url_generating.lib.php';\n    }\n    $params = array();\n    $params['url'] = $url;\n\n    $url = PMA_URL_getCommon($params);\n    //strip off token and such sensitive information. Just keep url.\n    $arr = parse_url($url);\n    parse_str($arr[\"query\"], $vars);\n    $query = http_build_query(array(\"url\" => $vars[\"url\"]));\n    $url = './url.php?' . $query;\n\n    return $url;\n}\n\n/**\n * Checks whether domain of URL is whitelisted domain or not.\n * Use only for URLs of external sites.\n *\n * @param string $url URL of external site.\n *\n * @return boolean True: if domain of $url is allowed domain,\n *                 False: otherwise.\n */\nfunction PMA_isAllowedDomain($url)\n{\n    $arr = parse_url($url);\n    $domain = $arr[\"host\"];\n    $domainWhiteList = array(\n        /* Include current domain */\n        $_SERVER['SERVER_NAME'],\n        /* phpMyAdmin domains */\n        'wiki.phpmyadmin.net', 'www.phpmyadmin.net', 'phpmyadmin.net',\n        'docs.phpmyadmin.net',\n        /* mysql.com domains */\n        'dev.mysql.com','bugs.mysql.com',\n        /* drizzle.org domains */\n        'www.drizzle.org',\n        /* mariadb domains */\n        'mariadb.org',\n        /* php.net domains */\n        'php.net',\n        /* Github domains*/\n        'github.com','www.github.com',\n        /* Following are doubtful ones. */\n        'www.primebase.com',\n        'pbxt.blogspot.com',\n        'www.percona.com',\n        'mysqldatabaseadministration.blogspot.com',\n        'ronaldbradford.com',\n        'xaprb.com',\n    );\n    if (in_array(/*overload*/mb_strtolower($domain), $domainWhiteList)) {\n        return true;\n    }\n\n    return false;\n}\n\n\n/**\n * Adds JS code snippets to be displayed by the PMA_Response class.\n * Adds a newline to each snippet.\n *\n * @param string $str Js code to be added (e.g. \"token=1234;\")\n *\n * @return void\n */\nfunction PMA_addJSCode($str)\n{\n    $response = PMA_Response::getInstance();\n    $header   = $response->getHeader();\n    $scripts  = $header->getScripts();\n    $scripts->addCode($str);\n}\n\n/**\n * Adds JS code snippet for variable assignment\n * to be displayed by the PMA_Response class.\n *\n * @param string $key    Name of value to set\n * @param mixed  $value  Value to set, can be either string or array of strings\n * @param bool   $escape Whether to escape value or keep it as it is\n *                       (for inclusion of js code)\n *\n * @return void\n */\nfunction PMA_addJSVar($key, $value, $escape = true)\n{\n    PMA_addJSCode(PMA_getJsValue($key, $value, $escape));\n}\n\n/**\n * Replace some html-unfriendly stuff\n *\n * @param string $buffer String to process\n *\n * @return string Escaped and cleaned up text suitable for html\n */\nfunction PMA_mimeDefaultFunction($buffer)\n{\n    $buffer = htmlspecialchars($buffer);\n    $buffer = str_replace('  ', ' &nbsp;', $buffer);\n    $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />' . \"\\n\", $buffer);\n\n    return $buffer;\n}\n\n/**\n * Displays SQL query before executing.\n *\n * @param array|string $query_data Array containing queries or query itself\n *\n * @return void\n */\nfunction PMA_previewSQL($query_data)\n{\n    $retval = '<div class=\"preview_sql\">';\n    if (empty($query_data)) {\n        $retval .= __('No change');\n    } elseif (is_array($query_data)) {\n        foreach ($query_data as $query) {\n            $retval .= PMA_Util::formatSql($query);\n        }\n    } else {\n        $retval .= PMA_Util::formatSql($query_data);\n    }\n    $retval .= '</div>';\n    $response = PMA_Response::getInstance();\n    $response->addJSON('sql_data', $retval);\n    exit;\n}\n\n/**\n * recursively check if variable is empty\n *\n * @param mixed $value the variable\n *\n * @return bool true if empty\n */\nfunction PMA_emptyRecursive($value)\n{\n    $empty = true;\n    if (is_array($value)) {\n        PMA_arrayWalkRecursive(\n            $value,\n            function ($item) use (&$empty) {\n                $empty = $empty && empty($item);\n            }\n        );\n    } else {\n        $empty = empty($value);\n    }\n    return $empty;\n}\n\n/**\n * Creates some globals from $_POST variables matching a pattern\n *\n * @param array $post_patterns The patterns to search for\n *\n * @return void\n */\nfunction PMA_setPostAsGlobal($post_patterns)\n{\n    foreach (array_keys($_POST) as $post_key) {\n        foreach ($post_patterns as $one_post_pattern) {\n            if (preg_match($one_post_pattern, $post_key)) {\n                $GLOBALS[$post_key] = $_POST[$post_key];\n            }\n        }\n    }\n}\n\n/**\n * Creates some globals from $_REQUEST\n *\n * @param string $param db|table\n *\n * @return void\n */\nfunction PMA_setGlobalDbOrTable($param)\n{\n    $GLOBALS[$param] = '';\n    if (PMA_isValid($_REQUEST[$param])) {\n        // can we strip tags from this?\n        // only \\ and / is not allowed in db names for MySQL\n        $GLOBALS[$param] = $_REQUEST[$param];\n        $GLOBALS['url_params'][$param] = $GLOBALS[$param];\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n* Handles plugins that show the upload progress\n*\n* @package PhpMyAdmin\n*/\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n  * constant for differentiating array in $_SESSION variable\n  */\n$SESSION_KEY = '__upload_status';\n\n/**\n  * sets default plugin for handling the import process\n  */\n$_SESSION[$SESSION_KEY][\"handler\"] = \"\";\n\n/**\n  * unique ID for each upload\n  */\n$upload_id = uniqid(\"\");\n\n/**\n  * list of available plugins\n  *\n  * Each plugin has own checkfunction in display_import_ajax.lib.php\n  * and own file with functions in upload_#KEY#.php\n  */\n$plugins = array(\n   // PHP 5.4 session-based upload progress is problematic, see bug 3964\n   //\"session\",\n   \"progress\",\n   \"apc\",\n   \"noplugin\"\n);\n\n// select available plugin\nforeach ($plugins as $plugin) {\n    $check = \"PMA_Import_\" . $plugin . \"Check\";\n\n    if ($check()) {\n        $upload_class = \"Upload\" . ucwords($plugin);\n        $_SESSION[$SESSION_KEY][\"handler\"] = $upload_class;\n        include_once \"plugins/import/upload/\" . $upload_class . \".class.php\";\n        break;\n    }\n}\n\n/**\n  * Checks if APC bar extension is available and configured correctly.\n  *\n  * @return boolean true if APC extension is available and if rfc1867 is enabled,\n  *                      false if it is not\n  */\nfunction PMA_Import_apcCheck()\n{\n    if (! extension_loaded('apc')\n        || ! function_exists('apc_fetch')\n        || ! function_exists('getallheaders')\n    ) {\n        return false;\n    }\n    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));\n}\n\n/**\n  * Checks if UploadProgress bar extension is available.\n  *\n  * @return boolean true if UploadProgress extension is available,\n  *                 false if it is not\n  */\nfunction PMA_Import_progressCheck()\n{\n    if (! function_exists(\"uploadprogress_get_info\")\n        || ! function_exists('getallheaders')\n    ) {\n        return false;\n    }\n    return true;\n}\n\n/**\n  * Checks if PHP 5.4 session upload-progress feature is available.\n  *\n  * @return boolean true if PHP 5.4 session upload-progress is available,\n  *                 false if it is not\n  */\nfunction PMA_Import_sessionCheck()\n{\n    if (PMA_PHP_INT_VERSION < 50400\n        || ! ini_get('session.upload_progress.enabled')\n    ) {\n        return false;\n    }\n    return true;\n}\n\n/**\n  * Default plugin for handling import.\n  * If no other plugin is available, noplugin is used.\n  *\n  * @return boolean true\n  */\nfunction PMA_Import_nopluginCheck()\n{\n    return true;\n}\n\n/**\n  * The function outputs json encoded status of uploaded.\n  * It uses PMA_getUploadStatus, which is defined in plugin's file.\n  *\n  * @param string $id ID of transfer, usually $upload_id\n  *                   from display_import_ajax.lib.php\n  *\n  * @return void\n  */\nfunction PMA_importAjaxStatus($id)\n{\n    PMA_headerJSON();\n    echo json_encode(\n        $_SESSION[$GLOBALS['SESSION_KEY']]['handler']::getUploadStatus($id)\n    );\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Represents the interface between the linter and  the query editor.\n *\n * @package PhpMyAdmin\n */\n\n/**\n * Loading common files. Used to check for authorization, localization and to\n * load the parsing library.\n */\nrequire_once 'libraries/common.inc.php';\n\n/**\n * Loads the linter.\n */\nrequire_once 'libraries/Linter.class.php';\n\n/**\n * The SQL query to be analyzed.\n *\n * This does not need to be checked again XSS or MySQL injections because it is\n * never executed, just parsed.\n *\n * The client, which will recieve the JSON response will decode the message and\n * and any HTML fragments that are displayed to the user will be encoded anyway.\n *\n * @var string\n */\n$sql_query = !empty($_POST['sql_query']) ? $_POST['sql_query'] : '';\n\n// Disabling standard response.\nPMA_Response::getInstance()->disable();\n\nPMA_headerJSON();\n\necho json_encode(PMA_Linter::lint($sql_query));\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Normalization process (temporarily specific to 1NF)\n *\n * @package PhpMyAdmin\n */\n\n/**\n *\n */\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/transformations.lib.php';\nrequire_once 'libraries/normalization.lib.php';\nrequire_once 'libraries/Index.class.php';\n\nif (isset($_REQUEST['getColumns'])) {\n    $html = '<option selected disabled>' . __('Select one\u2026') . '</option>'\n        . '<option value=\"no_such_col\">' . __('No such column') . '</option>';\n    //get column whose datatype falls under string category\n    $html .= PMA_getHtmlForColumnsList(\n        $db,\n        $table,\n        _pgettext('string types', 'String')\n    );\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['splitColumn'])) {\n    $num_fields = $_REQUEST['numFields'];\n    $html = PMA_getHtmlForCreateNewColumn($num_fields, $db, $table);\n    $html .= PMA_URL_getHiddenInputs($db, $table);\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['addNewPrimary'])) {\n    $num_fields = 1;\n    $columnMeta = array('Field'=>$table . \"_id\", 'Extra'=>'auto_increment');\n    $html = PMA_getHtmlForCreateNewColumn(\n        $num_fields, $db, $table, $columnMeta\n    );\n    $html .= PMA_URL_getHiddenInputs($db, $table);\n    echo $html;\n    exit;\n}\nif (isset($_REQUEST['findPdl'])) {\n    $html = PMA_findPartialDependencies($table, $db);\n    echo $html;\n    exit;\n}\n\nif (isset($_REQUEST['getNewTables2NF'])) {\n    $partialDependencies = json_decode($_REQUEST['pd']);\n    $html = PMA_getHtmlForNewTables2NF($partialDependencies, $table);\n    echo $html;\n    exit;\n}\n\nif (isset($_REQUEST['getNewTables3NF'])) {\n    $dependencies = json_decode($_REQUEST['pd']);\n    $tables = json_decode($_REQUEST['tables']);\n    $newTables = PMA_getHtmlForNewTables3NF($dependencies, $tables, $db);\n    PMA_Response::getInstance()->disable();\n    PMA_headerJSON();\n    echo json_encode($newTables);\n    exit;\n}\n\n$response = PMA_Response::getInstance();\n$header = $response->getHeader();\n$scripts = $header->getScripts();\n$scripts->addFile('normalization.js');\n$scripts->addFile('jquery/jquery.uitablefilter.js');\n$normalForm = '1nf';\nif (isset($_REQUEST['normalizeTo'])) {\n    $normalForm = $_REQUEST['normalizeTo'];\n}\nif (isset($_REQUEST['createNewTables2NF'])) {\n    $partialDependencies = json_decode($_REQUEST['pd']);\n    $tablesName = json_decode($_REQUEST['newTablesName']);\n    $res = PMA_createNewTablesFor2NF($partialDependencies, $tablesName, $table, $db);\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_REQUEST['createNewTables3NF'])) {\n    $newtables = json_decode($_REQUEST['newTables']);\n    $res = PMA_createNewTablesFor3NF($newtables, $db);\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_POST['repeatingColumns'])) {\n    $repeatingColumns = $_POST['repeatingColumns'];\n    $newTable = $_POST['newTable'];\n    $newColumn = $_POST['newColumn'];\n    $primary_columns = $_POST['primary_columns'];\n    $res = PMA_moveRepeatingGroup(\n        $repeatingColumns, $primary_columns, $newTable, $newColumn, $table, $db\n    );\n    $response->addJSON($res);\n    exit;\n}\nif (isset($_REQUEST['step1'])) {\n    $html = PMA_getHtmlFor1NFStep1($db, $table, $normalForm);\n    $response->addHTML($html);\n} else if (isset($_REQUEST['step2'])) {\n    $res = PMA_getHtmlContentsFor1NFStep2($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step3'])) {\n    $res = PMA_getHtmlContentsFor1NFStep3($db, $table);\n    $response->addJSON($res);\n} else if (isset ($_REQUEST['step4'])) {\n    $res = PMA_getHtmlContentsFor1NFStep4($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step']) && $_REQUEST['step'] == 2.1) {\n    $res = PMA_getHtmlFor2NFstep1($db, $table);\n    $response->addJSON($res);\n} else if (isset($_REQUEST['step']) && $_REQUEST['step'] == 3.1) {\n    $tables = $_REQUEST['tables'];\n    $res = PMA_getHtmlFor3NFstep1($db, $tables);\n    $response->addJSON($res);\n} else {\n    $response->addHTML(PMA_getHtmlForNormalizetable());\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Validation callback.\n *\n * @package PhpMyAdmin-Setup\n */\n\n/**\n * Core libraries.\n */\nrequire './lib/common.inc.php';\n\n$validators = array();\nrequire './libraries/config/Validator.class.php';\n\nPMA_headerJSON();\n\n$ids = isset($_POST['id']) ? $_POST['id'] : null;\n$vids = explode(',', $ids);\n$vals = isset($_POST['values']) ? $_POST['values'] : null;\n$values = json_decode($vals);\nif (!($values instanceof stdClass)) {\n    PMA_fatalError(__('Wrong data'));\n}\n$values = (array)$values;\n$result = PMA_Validator::validate($GLOBALS['ConfigFile'], $vids, $values, true);\nif ($result === false) {\n    $result = 'Wrong data or no validation for ' . $vids;\n}\necho $result !== true ? json_encode($result) : '';\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * A caching proxy for retrieving version information from phpmyadmin.net\n *\n * @package PhpMyAdmin\n */\n\n// Sets up the session\ndefine('PMA_MINIMUM_COMMON', true);\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/Util.class.php';\nrequire_once 'libraries/VersionInformation.php';\n\n// Always send the correct headers\nPMA_headerJSON();\n\n$versionInformation = new VersionInformation();\n$versionDetails = $versionInformation->getLatestVersion();\n\nif (empty($versionDetails)) {\n    echo json_encode(array());\n} else {\n    $latestCompatible = $versionInformation->getLatestCompatibleVersion(\n        $versionDetails->releases\n    );\n    $version = '';\n    $date = '';\n    if ($latestCompatible != null) {\n        $version = $latestCompatible['version'];\n        $date = $latestCompatible['date'];\n    }\n    echo json_encode(\n        array(\n            'version' => (! empty($version) ? $version : ''),\n            'date' => (! empty($date) ? $date : ''),\n        )\n    );\n}\n"], "filenames": ["import_status.php", "libraries/Response.class.php", "libraries/core.lib.php", "libraries/display_import_ajax.lib.php", "lint.php", "normalization.php", "setup/validate.php", "version_check.php"], "buggy_code_start_loc": [78, 372, 630, 124, 34, 62, 17, 16], "buggy_code_end_loc": [82, 376, 630, 125, 36, 62, 18, 17], "fixing_code_start_loc": [77, 372, 631, 124, 34, 63, 17, 16], "fixing_code_end_loc": [83, 373, 651, 125, 37, 65, 18, 17], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the SQL editor in phpMyAdmin 4.5.x before 4.5.4 allows remote authenticated users to inject arbitrary web script or HTML via a SQL query that triggers JSON data in a response.", "other": {"cve": {"id": "CVE-2016-2045", "sourceIdentifier": "cve@mitre.org", "published": "2016-02-20T01:59:08.500", "lastModified": "2016-08-02T18:42:40.170", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the SQL editor in phpMyAdmin 4.5.x before 4.5.4 allows remote authenticated users to inject arbitrary web script or HTML via a SQL query that triggers JSON data in a response."}, {"lang": "es", "value": "Vulnerabilidad de XSS en el editor SQL en phpMyAdmin 4.5.x en versiones anteriores a 4.5.4 permite a usuarios remotos autenticados inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de una consulta SQL que desencadena datos JSON en una respuesta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4D7AAF1-64FF-40C9-90B2-DEC814157372"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "96D529F5-8870-4934-BCD8-E49095D21224"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "296EB2FA-FCAD-4BD5-A015-62765407AFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DBD0DC7-64D0-42B1-8EEE-73A0214680F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A6A15D1E-83ED-47EC-B17C-E6BCC49DE83D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4112ACFF-D40E-45BE-9307-F710E7B41ECD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:22:*:*:*:*:*:*:*", "matchCriteriaId": "253C303A-E577-4488-93E6-68A8DD942C38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-9.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/0a24f92d081033576bfdd9d4bdec1a54501734c1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/11496890d7e21786cbfd9fd17ab968f498116b3f", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/0a24f92d081033576bfdd9d4bdec1a54501734c1"}}