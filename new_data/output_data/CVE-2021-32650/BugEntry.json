{"buggy_code": ["<?php namespace Cms\\Controllers;\n\nuse File;\nuse Flash;\nuse Backend;\nuse Redirect;\nuse BackendMenu;\nuse ValidationException;\nuse ApplicationException;\nuse Cms\\Models\\ThemeExport;\nuse Cms\\Models\\ThemeImport;\nuse Cms\\Classes\\Theme as CmsTheme;\nuse Cms\\Classes\\ThemeManager;\nuse System\\Classes\\SettingsManager;\nuse Backend\\Classes\\Controller;\nuse Exception;\nuse Backend\\Widgets\\Form;\n\n/**\n * Theme selector controller\n *\n * @package october\\backend\n * @author Alexey Bobkov, Samuel Georges\n *\n */\nclass Themes extends Controller\n{\n    /**\n     * @var array Permissions required to view this page.\n     */\n    public $requiredPermissions = [\n        'cms.manage_themes',\n        'cms.manage_theme_options',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->addCss('/modules/cms/assets/css/october.theme-selector.css', 'core');\n\n        $this->pageTitle = 'cms::lang.theme.settings_menu';\n        BackendMenu::setContext('October.System', 'system', 'settings');\n        SettingsManager::setContext('October.Cms', 'theme');\n\n        /*\n         * Custom redirect for unauthorized request\n         */\n        $this->bindEvent('page.beforeDisplay', function () {\n            if (!$this->user->hasAccess('cms.manage_themes')) {\n                return Backend::redirect('cms/themeoptions/update');\n            }\n        });\n\n        /*\n         * Enable AJAX for Form widgets\n         */\n        if (post('mode') === 'import') {\n            $this->makeImportFormWidget($this->findThemeObject())->bindToController();\n        }\n    }\n\n    public function index()\n    {\n        $this->bodyClass = 'compact-container';\n    }\n\n    public function index_onSetActiveTheme()\n    {\n        CmsTheme::setActiveTheme(post('theme'));\n\n        return [\n            '#theme-list' => $this->makePartial('theme_list')\n        ];\n    }\n\n    public function index_onDelete()\n    {\n        ThemeManager::instance()->deleteTheme(post('theme'));\n\n        Flash::success(trans('cms::lang.theme.delete_theme_success'));\n        return Redirect::refresh();\n    }\n\n    //\n    // Theme properties\n    //\n\n    public function index_onLoadFieldsForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeFieldsFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_fields_form');\n    }\n\n    public function index_onSaveFields()\n    {\n        $theme = $this->findThemeObject();\n        $widget = $this->makeFieldsFormWidget($theme);\n        $theme->writeConfig($widget->getSaveData());\n\n        return ['#themeListItem-'.$theme->getId() => $this->makePartial('theme_list_item', ['theme' => $theme])];\n    }\n\n    protected function makeFieldsFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/classes/theme/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = $theme;\n        $widgetConfig->data = $theme->getConfig();\n        $widgetConfig->data['dir_name'] = $theme->getDirName();\n        $widgetConfig->arrayName = 'Theme';\n        $widgetConfig->context = 'update';\n\n        return $this->makeWidget(Form::class, $widgetConfig);\n    }\n\n    //\n    // Create theme\n    //\n\n    public function index_onLoadCreateForm()\n    {\n        $this->vars['widget'] = $this->makeCreateFormWidget();\n        return $this->makePartial('theme_create_form');\n    }\n\n    public function index_onCreate()\n    {\n        $widget = $this->makeCreateFormWidget();\n        $data = $widget->getSaveData();\n        $newDirName = trim(array_get($data, 'dir_name'));\n        $destinationPath = themes_path().'/'.$newDirName;\n\n        $data = array_except($data, 'dir_name');\n\n        if (!strlen(trim(array_get($data, 'name')))) {\n            throw new ValidationException(['name' => trans('cms::lang.theme.create_theme_required_name')]);\n        }\n\n        if (!preg_match('/^[a-z0-9\\_\\-]+$/i', $newDirName)) {\n            throw new ValidationException(['dir_name' => trans('cms::lang.theme.dir_name_invalid')]);\n        }\n\n        if (File::isDirectory($destinationPath)) {\n            throw new ValidationException(['dir_name' => trans('cms::lang.theme.dir_name_taken')]);\n        }\n\n        File::makeDirectory($destinationPath);\n        File::makeDirectory($destinationPath.'/assets');\n        File::makeDirectory($destinationPath.'/content');\n        File::makeDirectory($destinationPath.'/layouts');\n        File::makeDirectory($destinationPath.'/pages');\n        File::makeDirectory($destinationPath.'/partials');\n        File::put($destinationPath.'/theme.yaml', '');\n\n        $theme = CmsTheme::load($newDirName);\n        $theme->writeConfig($data);\n\n        Flash::success(trans('cms::lang.theme.create_theme_success'));\n        return Redirect::refresh();\n    }\n\n    protected function makeCreateFormWidget()\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/classes/theme/fields.yaml');\n        $widgetConfig->alias = 'formCreateTheme';\n        $widgetConfig->model = new CmsTheme;\n        $widgetConfig->arrayName = 'Theme';\n        $widgetConfig->context = 'create';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Duplicate\n    //\n\n    public function index_onLoadDuplicateForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_duplicate_form');\n    }\n\n    public function index_onDuplicateTheme()\n    {\n        $theme = $this->findThemeObject();\n        $newDirName = trim(post('new_dir_name'));\n        $sourcePath = $theme->getPath();\n        $destinationPath = themes_path().'/'.$newDirName;\n\n        if (!preg_match('/^[a-z0-9\\_\\-]+$/i', $newDirName)) {\n            throw new ValidationException(['new_dir_name' => trans('cms::lang.theme.dir_name_invalid')]);\n        }\n\n        if (File::isDirectory($destinationPath)) {\n            throw new ValidationException(['new_dir_name' => trans('cms::lang.theme.dir_name_taken')]);\n        }\n\n        File::copyDirectory($sourcePath, $destinationPath);\n        $newTheme = CmsTheme::load($newDirName);\n        $newName = $newTheme->getConfigValue('name') . ' - Copy';\n        $newTheme->writeConfig(['name' => $newName]);\n\n        Flash::success(trans('cms::lang.theme.duplicate_theme_success'));\n        return Redirect::refresh();\n    }\n\n    //\n    // Theme export\n    //\n\n    public function index_onLoadExportForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeExportFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_export_form');\n    }\n\n    public function index_onExport()\n    {\n        $theme = $this->findThemeObject();\n        $widget = $this->makeExportFormWidget($theme);\n\n        $model = new ThemeExport;\n        $file = $model->export($theme, $widget->getSaveData());\n\n        return Backend::redirect('cms/themes/download/'.$file.'/'.$theme->getDirName().'.zip');\n    }\n\n    public function download($name, $outputName = null)\n    {\n        try {\n            $this->pageTitle = 'Download theme export archive';\n            return ThemeExport::download($name, $outputName);\n        }\n        catch (Exception $ex) {\n            $this->handleError($ex);\n        }\n    }\n\n    protected function makeExportFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/models/themeexport/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = new ThemeExport;\n        $widgetConfig->model->theme = $theme;\n        $widgetConfig->arrayName = 'ThemeExport';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Theme import\n    //\n\n    public function index_onLoadImportForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeImportFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_import_form');\n    }\n\n    public function index_onImport()\n    {\n        $theme = $this->findThemeObject();\n        $widget = $this->makeImportFormWidget($theme);\n\n        $model = new ThemeImport;\n        $model->import($theme, $widget->getSaveData(), $widget->getSessionKey());\n\n        Flash::success(trans('cms::lang.theme.import_theme_success'));\n        return Redirect::refresh();\n    }\n\n    protected function makeImportFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/models/themeimport/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = new ThemeImport;\n        $widgetConfig->model->theme = $theme;\n        $widgetConfig->arrayName = 'ThemeImport';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Helpers\n    //\n\n    protected function findThemeObject($name = null)\n    {\n        if ($name === null) {\n            $name = post('theme');\n        }\n\n        if (!$name || (!$theme = CmsTheme::load($name))) {\n            throw new ApplicationException(trans('cms::lang.theme.not_found_name', ['name' => $name]));\n        }\n\n        return $theme;\n    }\n}\n", "<?php namespace System\\Twig;\n\nuse Twig\\Markup;\nuse Twig\\Template;\nuse Twig\\Sandbox\\SecurityPolicyInterface;\nuse Twig\\Sandbox\\SecurityNotAllowedMethodError;\nuse Twig\\Sandbox\\SecurityNotAllowedPropertyError;\n\n/**\n * SecurityPolicy globally blocks accessibility of certain methods and properties.\n *\n * @package october\\system\n * @author Alexey Bobkov, Samuel Georges, Luke Towers\n */\nfinal class SecurityPolicy implements SecurityPolicyInterface\n{\n    /**\n     * @var array List of forbidden methods.\n     */\n    protected $blockedMethods = [\n        // \\October\\Rain\\Extension\\ExtendableTrait\n        'addDynamicMethod',\n        'addDynamicProperty',\n\n        // \\October\\Rain\\Support\\Traits\\Emitter\n        'bindEvent',\n        'bindEventOnce',\n\n        // Eloquent & Halcyon data modification\n        'insert',\n        'update',\n        'delete',\n    ];\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        foreach ($this->blockedMethods as $i => $m) {\n            $this->blockedMethods[$i] = strtolower($m);\n        }\n    }\n\n    /**\n     * Check the provided arguments against this security policy\n     *\n     * @param array $tags Array of tags to be checked against the policy ['tag', 'tag2', 'etc']\n     * @param array $filters Array of filters to be checked against the policy ['filter', 'filter2', 'etc']\n     * @param array $functions Array of funtions to be checked against the policy ['function', 'function2', 'etc']\n     * @throws SecurityNotAllowedTagError if a given tag is not allowed\n     * @throws SecurityNotAllowedFilterError if a given filter is not allowed\n     * @throws SecurityNotAllowedFunctionError if a given function is not allowed\n     */\n    public function checkSecurity($tags, $filters, $functions)\n    {\n    }\n\n    /**\n     * Checks if a given property is permitted to be accessed on a given object\n     *\n     * @param object $obj\n     * @param string $property\n     * @throws SecurityNotAllowedPropertyError\n     */\n    public function checkPropertyAllowed($obj, $property)\n    {\n    }\n\n    /**\n     * Checks if a given method is allowed to be called on a given object\n     *\n     * @param object $obj\n     * @param string $method\n     * @throws SecurityNotAllowedMethodError\n     */\n    public function checkMethodAllowed($obj, $method)\n    {\n        // No need to check Twig internal objects\n        if ($obj instanceof Template || $obj instanceof Markup) {\n            return;\n        }\n\n        $blockedMethod = strtolower($method);\n        if (in_array($blockedMethod, $this->blockedMethods)) {\n            $class = get_class($obj);\n            throw new SecurityNotAllowedMethodError(sprintf('Calling \"%s\" method on a \"%s\" object is blocked.', $method, $class), $class, $method);\n        }\n    }\n}\n"], "fixing_code": ["<?php namespace Cms\\Controllers;\n\nuse File;\nuse Flash;\nuse Backend;\nuse Redirect;\nuse BackendMenu;\nuse ValidationException;\nuse ApplicationException;\nuse Cms\\Models\\ThemeExport;\nuse Cms\\Models\\ThemeImport;\nuse Cms\\Classes\\Theme as CmsTheme;\nuse Cms\\Classes\\ThemeManager;\nuse System\\Classes\\SettingsManager;\nuse Backend\\Classes\\Controller;\nuse Exception;\nuse Backend\\Widgets\\Form;\n\n/**\n * Theme selector controller\n *\n * @package october\\backend\n * @author Alexey Bobkov, Samuel Georges\n *\n */\nclass Themes extends Controller\n{\n    /**\n     * @var array Permissions required to view this page.\n     */\n    public $requiredPermissions = [\n        'cms.manage_themes',\n        'cms.manage_theme_options',\n    ];\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->addCss('/modules/cms/assets/css/october.theme-selector.css', 'core');\n\n        $this->pageTitle = 'cms::lang.theme.settings_menu';\n        BackendMenu::setContext('October.System', 'system', 'settings');\n        SettingsManager::setContext('October.Cms', 'theme');\n\n        /*\n         * Custom redirect for unauthorized request\n         */\n        $this->bindEvent('page.beforeDisplay', function () {\n            if (!$this->user->hasAccess('cms.manage_themes')) {\n                return Backend::redirect('cms/themeoptions/update');\n            }\n        });\n\n        /*\n         * Enable AJAX for Form widgets\n         */\n        if (post('mode') === 'import') {\n            $this->makeImportFormWidget($this->findThemeObject())->bindToController();\n        }\n    }\n\n    public function index()\n    {\n        $this->bodyClass = 'compact-container';\n    }\n\n    public function index_onSetActiveTheme()\n    {\n        CmsTheme::setActiveTheme(post('theme'));\n\n        return [\n            '#theme-list' => $this->makePartial('theme_list')\n        ];\n    }\n\n    public function index_onDelete()\n    {\n        ThemeManager::instance()->deleteTheme(post('theme'));\n\n        Flash::success(trans('cms::lang.theme.delete_theme_success'));\n        return Redirect::refresh();\n    }\n\n    //\n    // Theme properties\n    //\n\n    public function index_onLoadFieldsForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeFieldsFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_fields_form');\n    }\n\n    public function index_onSaveFields()\n    {\n        $theme = $this->findThemeObject();\n        $widget = $this->makeFieldsFormWidget($theme);\n        $theme->writeConfig($widget->getSaveData());\n\n        return ['#themeListItem-'.$theme->getId() => $this->makePartial('theme_list_item', ['theme' => $theme])];\n    }\n\n    protected function makeFieldsFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/classes/theme/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = $theme;\n        $widgetConfig->data = $theme->getConfig();\n        $widgetConfig->data['dir_name'] = $theme->getDirName();\n        $widgetConfig->arrayName = 'Theme';\n        $widgetConfig->context = 'update';\n\n        return $this->makeWidget(Form::class, $widgetConfig);\n    }\n\n    //\n    // Create theme\n    //\n\n    public function index_onLoadCreateForm()\n    {\n        $this->vars['widget'] = $this->makeCreateFormWidget();\n        return $this->makePartial('theme_create_form');\n    }\n\n    public function index_onCreate()\n    {\n        $widget = $this->makeCreateFormWidget();\n        $data = $widget->getSaveData();\n        $newDirName = trim(array_get($data, 'dir_name'));\n        $destinationPath = themes_path().'/'.$newDirName;\n\n        $data = array_except($data, 'dir_name');\n\n        if (!strlen(trim(array_get($data, 'name')))) {\n            throw new ValidationException(['name' => trans('cms::lang.theme.create_theme_required_name')]);\n        }\n\n        if (!preg_match('/^[a-z0-9\\_\\-]+$/i', $newDirName)) {\n            throw new ValidationException(['dir_name' => trans('cms::lang.theme.dir_name_invalid')]);\n        }\n\n        if (File::isDirectory($destinationPath)) {\n            throw new ValidationException(['dir_name' => trans('cms::lang.theme.dir_name_taken')]);\n        }\n\n        File::makeDirectory($destinationPath);\n        File::makeDirectory($destinationPath.'/assets');\n        File::makeDirectory($destinationPath.'/content');\n        File::makeDirectory($destinationPath.'/layouts');\n        File::makeDirectory($destinationPath.'/pages');\n        File::makeDirectory($destinationPath.'/partials');\n        File::put($destinationPath.'/theme.yaml', '');\n\n        $theme = CmsTheme::load($newDirName);\n        $theme->writeConfig($data);\n\n        Flash::success(trans('cms::lang.theme.create_theme_success'));\n        return Redirect::refresh();\n    }\n\n    protected function makeCreateFormWidget()\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/classes/theme/fields.yaml');\n        $widgetConfig->alias = 'formCreateTheme';\n        $widgetConfig->model = new CmsTheme;\n        $widgetConfig->arrayName = 'Theme';\n        $widgetConfig->context = 'create';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Duplicate\n    //\n\n    public function index_onLoadDuplicateForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_duplicate_form');\n    }\n\n    public function index_onDuplicateTheme()\n    {\n        $theme = $this->findThemeObject();\n        $newDirName = trim(post('new_dir_name'));\n        $sourcePath = $theme->getPath();\n        $destinationPath = themes_path().'/'.$newDirName;\n\n        if (!preg_match('/^[a-z0-9\\_\\-]+$/i', $newDirName)) {\n            throw new ValidationException(['new_dir_name' => trans('cms::lang.theme.dir_name_invalid')]);\n        }\n\n        if (File::isDirectory($destinationPath)) {\n            throw new ValidationException(['new_dir_name' => trans('cms::lang.theme.dir_name_taken')]);\n        }\n\n        File::copyDirectory($sourcePath, $destinationPath);\n        $newTheme = CmsTheme::load($newDirName);\n        $newName = $newTheme->getConfigValue('name') . ' - Copy';\n        $newTheme->writeConfig(['name' => $newName]);\n\n        Flash::success(trans('cms::lang.theme.duplicate_theme_success'));\n        return Redirect::refresh();\n    }\n\n    //\n    // Theme export\n    //\n\n    public function index_onLoadExportForm()\n    {\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeExportFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_export_form');\n    }\n\n    public function index_onExport()\n    {\n        $theme = $this->findThemeObject();\n        $widget = $this->makeExportFormWidget($theme);\n\n        $model = new ThemeExport;\n        $file = $model->export($theme, $widget->getSaveData());\n\n        return Backend::redirect('cms/themes/download/'.$file.'/'.$theme->getDirName().'.zip');\n    }\n\n    public function download($name, $outputName = null)\n    {\n        try {\n            $this->pageTitle = 'Download theme export archive';\n            return ThemeExport::download($name, $outputName);\n        }\n        catch (Exception $ex) {\n            $this->handleError($ex);\n        }\n    }\n\n    protected function makeExportFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/models/themeexport/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = new ThemeExport;\n        $widgetConfig->model->theme = $theme;\n        $widgetConfig->arrayName = 'ThemeExport';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Theme import\n    //\n\n    public function index_onLoadImportForm()\n    {\n        if (\\Cms\\Helpers\\Cms::safeModeEnabled()) {\n            throw new ApplicationException(trans('cms::lang.cms_object.safe_mode_enabled'));\n        }\n\n        $theme = $this->findThemeObject();\n        $this->vars['widget'] = $this->makeImportFormWidget($theme);\n        $this->vars['themeDir'] = $theme->getDirName();\n\n        return $this->makePartial('theme_import_form');\n    }\n\n    public function index_onImport()\n    {\n        if (\\Cms\\Helpers\\Cms::safeModeEnabled()) {\n            throw new ApplicationException(trans('cms::lang.cms_object.safe_mode_enabled'));\n        }\n\n        $theme = $this->findThemeObject();\n        $widget = $this->makeImportFormWidget($theme);\n\n        $model = new ThemeImport;\n        $model->import($theme, $widget->getSaveData(), $widget->getSessionKey());\n\n        Flash::success(trans('cms::lang.theme.import_theme_success'));\n        return Redirect::refresh();\n    }\n\n    protected function makeImportFormWidget($theme)\n    {\n        $widgetConfig = $this->makeConfig('~/modules/cms/models/themeimport/fields.yaml');\n        $widgetConfig->alias = 'form'.studly_case($theme->getDirName());\n        $widgetConfig->model = new ThemeImport;\n        $widgetConfig->model->theme = $theme;\n        $widgetConfig->arrayName = 'ThemeImport';\n\n        return $this->makeWidget('Backend\\Widgets\\Form', $widgetConfig);\n    }\n\n    //\n    // Helpers\n    //\n\n    protected function findThemeObject($name = null)\n    {\n        if ($name === null) {\n            $name = post('theme');\n        }\n\n        if (!$name || (!$theme = CmsTheme::load($name))) {\n            throw new ApplicationException(trans('cms::lang.theme.not_found_name', ['name' => $name]));\n        }\n\n        return $theme;\n    }\n}\n", "<?php namespace System\\Twig;\n\nuse Twig\\Markup;\nuse Twig\\Template;\nuse Twig\\Sandbox\\SecurityPolicyInterface;\nuse Twig\\Sandbox\\SecurityNotAllowedMethodError;\nuse Twig\\Sandbox\\SecurityNotAllowedPropertyError;\n\n/**\n * SecurityPolicy globally blocks accessibility of certain methods and properties.\n *\n * @package october\\system\n * @author Alexey Bobkov, Samuel Georges, Luke Towers\n */\nfinal class SecurityPolicy implements SecurityPolicyInterface\n{\n    /**\n     * @var array List of forbidden methods.\n     */\n    protected $blockedMethods = [\n        // Prevent manipulating Twig itself\n        'getTwig',\n\n        // Prevent dynamic methods and props\n        'addDynamicMethod',\n        'addDynamicProperty',\n\n        // Prevent binding event logic\n        'bindEvent',\n        'bindEventOnce',\n\n        // Eloquent & Halcyon data modification\n        'insert',\n        'update',\n        'delete',\n        'write',\n    ];\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        foreach ($this->blockedMethods as $i => $m) {\n            $this->blockedMethods[$i] = strtolower($m);\n        }\n    }\n\n    /**\n     * Check the provided arguments against this security policy\n     *\n     * @param array $tags Array of tags to be checked against the policy ['tag', 'tag2', 'etc']\n     * @param array $filters Array of filters to be checked against the policy ['filter', 'filter2', 'etc']\n     * @param array $functions Array of funtions to be checked against the policy ['function', 'function2', 'etc']\n     * @throws SecurityNotAllowedTagError if a given tag is not allowed\n     * @throws SecurityNotAllowedFilterError if a given filter is not allowed\n     * @throws SecurityNotAllowedFunctionError if a given function is not allowed\n     */\n    public function checkSecurity($tags, $filters, $functions)\n    {\n    }\n\n    /**\n     * Checks if a given property is permitted to be accessed on a given object\n     *\n     * @param object $obj\n     * @param string $property\n     * @throws SecurityNotAllowedPropertyError\n     */\n    public function checkPropertyAllowed($obj, $property)\n    {\n    }\n\n    /**\n     * Checks if a given method is allowed to be called on a given object\n     *\n     * @param object $obj\n     * @param string $method\n     * @throws SecurityNotAllowedMethodError\n     */\n    public function checkMethodAllowed($obj, $method)\n    {\n        // No need to check Twig internal objects\n        if ($obj instanceof Template || $obj instanceof Markup) {\n            return;\n        }\n\n        $blockedMethod = strtolower($method);\n        if (in_array($blockedMethod, $this->blockedMethods)) {\n            $class = get_class($obj);\n            throw new SecurityNotAllowedMethodError(sprintf('Calling \"%s\" method on a \"%s\" object is blocked.', $method, $class), $class, $method);\n        }\n    }\n}\n"], "filenames": ["modules/cms/controllers/Themes.php", "modules/system/twig/SecurityPolicy.php"], "buggy_code_start_loc": [267, 21], "buggy_code_end_loc": [276, 32], "fixing_code_start_loc": [268, 21], "fixing_code_end_loc": [285, 37], "type": "CWE-94", "message": "October CMS is a self-hosted content management system (CMS) platform based on the Laravel PHP Framework. Prior to versions 1.0.473 and 1.1.6, an attacker with access to the backend is able to execute PHP code by using the theme import feature. This will bypass the safe mode feature that prevents PHP execution in the CMS templates.The issue has been patched in Build 473 (v1.0.473) and v1.1.6. Those unable to upgrade may apply the patch to their installation manually as a workaround.", "other": {"cve": {"id": "CVE-2021-32650", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-14T15:15:07.587", "lastModified": "2022-08-05T11:09:41.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "October CMS is a self-hosted content management system (CMS) platform based on the Laravel PHP Framework. Prior to versions 1.0.473 and 1.1.6, an attacker with access to the backend is able to execute PHP code by using the theme import feature. This will bypass the safe mode feature that prevents PHP execution in the CMS templates.The issue has been patched in Build 473 (v1.0.473) and v1.1.6. Those unable to upgrade may apply the patch to their installation manually as a workaround."}, {"lang": "es", "value": "October CMS es una plataforma de sistema de administraci\u00f3n de contenidos (CMS) auto alojada basada en el framework PHP Laravel. En versiones anteriores a 1.0.473 y 1.1.6, un atacante con acceso al backend es capaz de ejecutar c\u00f3digo PHP usando la funcionalidad theme import. Esto evitar\u00e1 la funci\u00f3n de modo seguro que impide la ejecuci\u00f3n de PHP en las plantillas del CMS. El problema ha sido parcheado en la Build 473 (v1.0.473) y versi\u00f3n v1.1.6. Aquellos que no puedan actualizar pueden aplicar el parche a su instalaci\u00f3n manualmente como medida de mitigaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:1.0.472:*:*:*:*:*:*:*", "matchCriteriaId": "3F8F73AA-830A-4A7E-A184-BE8C74AE1867"}, {"vulnerable": true, "criteria": "cpe:2.3:a:octobercms:october:1.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "D6B78DE2-6AE9-4369-9DE6-7CF4E13FFD2B"}]}]}], "references": [{"url": "https://github.com/octobercms/october/commit/167b592eed291ae1563c8fcc5b9b34a03a300f26", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/octobercms/october/security/advisories/GHSA-5hfj-r725-wpc4", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/octobercms/october/commit/167b592eed291ae1563c8fcc5b9b34a03a300f26"}}