{"buggy_code": ["function filterPseudoHeaders (headers) {\n  const dest = {}\n  const headersKeys = Object.keys(headers)\n  let header\n  let i\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i]\n    if (header.charCodeAt(0) !== 58) { // fast path for indexOf(':') === 0\n      dest[header.toLowerCase()] = headers[header]\n    }\n  }\n  return dest\n}\n\nfunction copyHeaders (headers, reply) {\n  const headersKeys = Object.keys(headers)\n\n  let header\n  let i\n\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i]\n    if (header.charCodeAt(0) !== 58) { // fast path for indexOf(':') === 0\n      reply.header(header, headers[header])\n    }\n  }\n}\n\nfunction stripHttp1ConnectionHeaders (headers) {\n  const headersKeys = Object.keys(headers)\n  const dest = {}\n\n  let header\n  let i\n\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i].toLowerCase()\n\n    switch (header) {\n      case 'connection':\n      case 'upgrade':\n      case 'http2-settings':\n      case 'te':\n      case 'transfer-encoding':\n      case 'proxy-connection':\n      case 'keep-alive':\n      case 'host':\n        break\n      default:\n        dest[header] = headers[header]\n        break\n    }\n  }\n  return dest\n}\n\n// issue ref: https://github.com/fastify/fast-proxy/issues/42\nfunction buildURL (source, reqBase) {\n  const dest = new URL(source, reqBase)\n\n  // if base is specified, source url should not override it\n  if (reqBase && !reqBase.startsWith(dest.origin)) {\n    throw new Error('source must be a relative path string')\n  }\n\n  return dest\n}\n\nmodule.exports = {\n  copyHeaders,\n  stripHttp1ConnectionHeaders,\n  filterPseudoHeaders,\n  buildURL\n}\n", "'use strict'\n\nconst { test } = require('tap')\nconst { buildURL } = require('../lib/utils')\n\ntest('should produce valid URL', (t) => {\n  t.plan(1)\n  const url = buildURL('/hi', 'http://localhost')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\ntest('should produce valid URL', (t) => {\n  t.plan(1)\n  const url = buildURL('http://localhost/hi', 'http://localhost')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\ntest('should return same source when base is not specified', (t) => {\n  t.plan(1)\n  const url = buildURL('http://localhost/hi')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\nconst errorInputs = [\n  { source: '//10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'http://10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'https://10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'blah://10.0.0.10/hi', base: 'http://localhost' },\n  { source: '//httpbin.org/hi', base: 'http://localhost' },\n  { source: 'urn:foo:bar', base: 'http://localhost' }\n]\n\ntest('should throw when trying to override base', (t) => {\n  t.plan(errorInputs.length)\n\n  errorInputs.forEach(({ source, base }) => {\n    t.test(source, (t) => {\n      t.plan(1)\n      t.throws(() => buildURL(source, base))\n    })\n  })\n})\n", "'use strict'\n\nconst t = require('tap')\nconst Fastify = require('fastify')\nconst From = require('..')\nconst fs = require('fs')\nconst querystring = require('querystring')\nconst http = require('http')\nconst get = require('simple-get').concat\n\nif (process.platform === 'win32') {\n  t.pass()\n  process.exit(0)\n}\n\nconst instance = Fastify()\ninstance.register(From)\n\nt.plan(10)\nt.tearDown(instance.close.bind(instance))\n\nconst socketPath = `${__filename}.socket`\n\ntry {\n  fs.unlinkSync(socketPath)\n} catch (_) {\n}\n\nconst target = http.createServer((req, res) => {\n  t.pass('request proxied')\n  t.equal(req.method, 'GET')\n  t.equal(req.url, '/hello')\n  res.statusCode = 205\n  res.setHeader('Content-Type', 'text/plain')\n  res.setHeader('x-my-header', 'hello!')\n  res.end('hello world')\n})\n\ninstance.get('/', (request, reply) => {\n  reply.from(`unix+http://${querystring.escape(socketPath)}/hello`)\n})\n\nt.tearDown(target.close.bind(target))\n\ninstance.listen(0, (err) => {\n  t.error(err)\n\n  target.listen(socketPath, (err) => {\n    t.error(err)\n\n    get(`http://localhost:${instance.server.address().port}`, (err, res, data) => {\n      t.error(err)\n      t.equal(res.headers['content-type'], 'text/plain')\n      t.equal(res.headers['x-my-header'], 'hello!')\n      t.equal(res.statusCode, 205)\n      t.equal(data.toString(), 'hello world')\n    })\n  })\n})\n"], "fixing_code": ["function filterPseudoHeaders (headers) {\n  const dest = {}\n  const headersKeys = Object.keys(headers)\n  let header\n  let i\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i]\n    if (header.charCodeAt(0) !== 58) { // fast path for indexOf(':') === 0\n      dest[header.toLowerCase()] = headers[header]\n    }\n  }\n  return dest\n}\n\nfunction copyHeaders (headers, reply) {\n  const headersKeys = Object.keys(headers)\n\n  let header\n  let i\n\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i]\n    if (header.charCodeAt(0) !== 58) { // fast path for indexOf(':') === 0\n      reply.header(header, headers[header])\n    }\n  }\n}\n\nfunction stripHttp1ConnectionHeaders (headers) {\n  const headersKeys = Object.keys(headers)\n  const dest = {}\n\n  let header\n  let i\n\n  for (i = 0; i < headersKeys.length; i++) {\n    header = headersKeys[i].toLowerCase()\n\n    switch (header) {\n      case 'connection':\n      case 'upgrade':\n      case 'http2-settings':\n      case 'te':\n      case 'transfer-encoding':\n      case 'proxy-connection':\n      case 'keep-alive':\n      case 'host':\n        break\n      default:\n        dest[header] = headers[header]\n        break\n    }\n  }\n  return dest\n}\n\n// issue ref: https://github.com/fastify/fast-proxy/issues/42\nfunction buildURL (source, reqBase) {\n  const dest = new URL(source, reqBase)\n\n  // if base is specified, source url should not override it\n  if (reqBase) {\n    if (!reqBase.endsWith('/') && dest.href.length > reqBase.length) {\n      reqBase = reqBase + '/'\n    }\n\n    if (!dest.href.startsWith(reqBase)) {\n      throw new Error('source must be a relative path string')\n    }\n  }\n\n  return dest\n}\n\nmodule.exports = {\n  copyHeaders,\n  stripHttp1ConnectionHeaders,\n  filterPseudoHeaders,\n  buildURL\n}\n", "'use strict'\n\nconst { test } = require('tap')\nconst { buildURL } = require('../lib/utils')\n\ntest('should produce valid URL', (t) => {\n  t.plan(1)\n  const url = buildURL('/hi', 'http://localhost')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\ntest('should produce valid URL', (t) => {\n  t.plan(1)\n  const url = buildURL('http://localhost/hi', 'http://localhost')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\ntest('should return same source when base is not specified', (t) => {\n  t.plan(1)\n  const url = buildURL('http://localhost/hi')\n  t.equal(url.href, 'http://localhost/hi')\n})\n\ntest('should handle lack of trailing slash in base', (t) => {\n  t.plan(3)\n  let url = buildURL('hi', 'http://localhost/hi')\n  t.equal(url.href, 'http://localhost/hi')\n\n  url = buildURL('hi/', 'http://localhost/hi')\n  t.equal(url.href, 'http://localhost/hi/')\n\n  url = buildURL('hi/more', 'http://localhost/hi')\n  t.equal(url.href, 'http://localhost/hi/more')\n})\n\nconst errorInputs = [\n  { source: '//10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'http://10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'https://10.0.0.10/hi', base: 'http://localhost' },\n  { source: 'blah://10.0.0.10/hi', base: 'http://localhost' },\n  { source: '//httpbin.org/hi', base: 'http://localhost' },\n  { source: 'urn:foo:bar', base: 'http://localhost' },\n  { source: 'http://localhost/private', base: 'http://localhost/exposed/' },\n  { source: 'http://localhost/exposed-extra', base: 'http://localhost/exposed' },\n  { source: '/private', base: 'http://localhost/exposed/' },\n  { source: '/exposed-extra', base: 'http://localhost/exposed' },\n  { source: '../private', base: 'http://localhost/exposed/' },\n  { source: 'exposed-extra', base: 'http://localhost/exposed' }\n]\n\ntest('should throw when trying to override base', (t) => {\n  t.plan(errorInputs.length)\n\n  errorInputs.forEach(({ source, base }) => {\n    t.test(source, (t) => {\n      t.plan(1)\n      t.throws(() => buildURL(source, base))\n    })\n  })\n})\n", "'use strict'\n\nconst t = require('tap')\nconst Fastify = require('fastify')\nconst From = require('..')\nconst fs = require('fs')\nconst querystring = require('querystring')\nconst http = require('http')\nconst get = require('simple-get').concat\n\nif (process.platform === 'win32') {\n  t.pass()\n  process.exit(0)\n}\n\nconst socketPath = `${__filename}.socket`\nconst upstream = `unix+http://${querystring.escape(socketPath)}/`\n\nconst instance = Fastify()\ninstance.register(From, { base: upstream })\n\nt.plan(10)\nt.tearDown(instance.close.bind(instance))\n\ntry {\n  fs.unlinkSync(socketPath)\n} catch (_) {\n}\n\nconst target = http.createServer((req, res) => {\n  t.pass('request proxied')\n  t.equal(req.method, 'GET')\n  t.equal(req.url, '/hello')\n  res.statusCode = 205\n  res.setHeader('Content-Type', 'text/plain')\n  res.setHeader('x-my-header', 'hello!')\n  res.end('hello world')\n})\n\ninstance.get('/', (request, reply) => {\n  reply.from('hello')\n})\n\nt.tearDown(target.close.bind(target))\n\ninstance.listen(0, (err) => {\n  t.error(err)\n\n  target.listen(socketPath, (err) => {\n    t.error(err)\n\n    get(`http://localhost:${instance.server.address().port}`, (err, res, data) => {\n      t.error(err)\n      t.equal(res.headers['content-type'], 'text/plain')\n      t.equal(res.headers['x-my-header'], 'hello!')\n      t.equal(res.statusCode, 205)\n      t.equal(data.toString(), 'hello world')\n    })\n  })\n})\n"], "filenames": ["lib/utils.js", "test/build-url.js", "test/unix-http.js"], "buggy_code_start_loc": [62, 23, 15], "buggy_code_end_loc": [64, 31, 41], "fixing_code_start_loc": [62, 24, 16], "fixing_code_end_loc": [70, 49, 42], "type": "CWE-20", "message": "fastify-reply-from is an npm package which is a fastify plugin to forward the current http request to another server. In fastify-reply-from before version 4.0.2, by crafting a specific URL, it is possible to escape the prefix of the proxied backend service. If the base url of the proxied server is \"/pub/\", a user expect that accessing \"/priv\" on the target service would not be possible. In affected versions, it is possible. This is fixed in version 4.0.2.", "other": {"cve": {"id": "CVE-2021-21321", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-02T04:15:12.487", "lastModified": "2021-03-09T13:43:17.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "fastify-reply-from is an npm package which is a fastify plugin to forward the current http request to another server. In fastify-reply-from before version 4.0.2, by crafting a specific URL, it is possible to escape the prefix of the proxied backend service. If the base url of the proxied server is \"/pub/\", a user expect that accessing \"/priv\" on the target service would not be possible. In affected versions, it is possible. This is fixed in version 4.0.2."}, {"lang": "es", "value": "fastify-reply-from es un paquete npm que es un plugin fastify para reenviar la petici\u00f3n http actual a otro servidor.&#xa0;En fastify-reply-from anterior a la versi\u00f3n 4.0.2, al dise\u00f1ar una URL espec\u00edfica, es posible escapar del prefijo del servicio de backend proxy.&#xa0;Si la URL base del servidor proxy es \"/pub/\", el usuario espera que no sea posible acceder a \"/priv\" en el servicio de destino.&#xa0;En versiones afectadas, es posible.&#xa0;Esto se corrige en la versi\u00f3n 4.0.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fastify-reply-from_project:fastify-reply-from:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.0.2", "matchCriteriaId": "FABC1851-154A-4609-849E-ED8D1903E530"}]}]}], "references": [{"url": "https://github.com/fastify/fastify-reply-from/commit/dea227dda606900cc01870d08541b4dcc69d3889", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/fastify/fastify-reply-from/security/advisories/GHSA-qmw8-3v4g-gwj4", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/fastify-reply-from", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fastify/fastify-reply-from/commit/dea227dda606900cc01870d08541b4dcc69d3889"}}