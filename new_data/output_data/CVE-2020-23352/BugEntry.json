{"buggy_code": ["<?xml version=\"1.0\"?>\n<ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" name=\"PSR2\" xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\">\n\t<description>\n\t\tZ-BlogPHP Code Standard\n\t</description>\n\t<exclude-pattern>*.js</exclude-pattern>\n\t<exclude-pattern>*.css</exclude-pattern>\n\t<arg name=\"tab-width\" value=\"4\" />\n\t<rule ref=\"Internal.NoCodeFound\">\n\t\t<severity>0</severity>\n\t</rule>\n\t<rule ref=\"PSR2\">\n\t\t<exclude name=\"Generic.Files.LineEndings\" />\n\t\t<exclude name=\"Generic.Files.LineLength\" />\n\t\t<exclude name=\"PSR1.Files.SideEffects\" />\n\t\t<!-- \u90fd\u6ca1\u6709namespace\u8981\u4e86\u5e72\u561b -->\n\t\t<exclude name=\"PSR1.Classes.ClassDeclaration\" />\n\t\t<!-- \u91c7\u7528PascalCase\u5f0f\uff0c\u4e0d\u8003\u8651\u5c0f\u9a7c\u5cf0\uff1b\u4e0d\u8fc7PHPCS\u4e0d\u63d0\u4f9b\u914d\u7f6e\uff0c\u4e5f\u61d2\u5f97\u5199\u4e86 -->\n\t\t<exclude name=\"PSR1.Methods.CamelCapsMethodName\" />\n\t\t<!-- \u597d\u50cf\u548c\u4ec0\u4e48\u522b\u7684\u89c4\u5219\u51b2\u7a81\u4e86 -->\n\t\t<exclude name=\"PSR2.Classes.ClassDeclaration\" />\n\t</rule>\n\t<!-- \u8fd9\u91cc\u7684\u4ee3\u7801\u89c4\u8303\u662fPascalCase__XXX__XXX -->\n\t<rule ref=\"Squiz.Classes.ValidClassName\">\n\t\t<exclude-pattern>zb_system/function/lib/*/*</exclude-pattern>\n\t</rule>\n\t<!-- \u81ea\u5b9a\u4e49\u6d4b\u8bd5 -->\n\t<rule ref=\"PHPCompatibility\">\n\t\t<exclude name=\"PHPCompatibility.ParameterValues.NewHTMLEntitiesEncodingDefault\" />\n\t\t<exclude name=\"PHPCompatibility.ParameterValues.NewIconvMbstringCharsetDefault\" />\n\t\t<!-- \u5df2\u505a\u517c\u5bb9\u5904\u7406 -->\n\t\t<exclude name=\"PHPCompatibility.Classes.NewClasses.CURLFile.Found\" />\n\t\t<exclude name=\"PHPCompatibility.IniDirectives.RemovedIniDirectives.safe_mode.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Extensions.RemovedExtensions.sqlite.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Extensions.RemovedExtensions.mysql_.Found\" />\n\t\t<!-- \u5df2\u505a\u5e9f\u5f03\u5904\u7406\uff0c\u4e0d\u518d\u9700\u8981 -->\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.RemovedFunctions.get_magic_quotes_gpc.Found\" />\n\t\t<!-- \u6b64\u90e8\u4efd\u51fd\u6570\u7531\u4e8e\u5df2\u6709\u5b9a\u4e49\uff0c\u4e0d\u518d\u9700\u8981 -->\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.hex2bin.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.fnmatch.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.http_build_url.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.rrmdir.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.gzdecode.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.array_replace_recursive.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.PHP_VERSION_ID.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_PATHNAME.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_NOESCAPE.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_PERIOD.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_CASEFOLD.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_REPLACE.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_JOIN_PATH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_JOIN_QUERY.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_USER.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PASS.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_AUTH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PORT.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PATH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_QUERY.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_FRAGMENT.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_ALL.Found\" />\n\t</rule>\n\t<config name=\"testVersion\" value=\"5.2-\" />\n\t<rule ref=\"Squiz\">\n\t\t<exclude name=\"Squiz.Commenting\" />\n\t\t<exclude name=\"Squiz.NamingConventions\" />\n\t\t<exclude name=\"Squiz.Arrays.ArrayDeclaration\" />\n\t\t<exclude name=\"Squiz.Operators.ComparisonOperatorUsage\" />\n\t\t<exclude name=\"Squiz.Classes.ClassFileName\" />\n\t\t<exclude name=\"Squiz.ControlStructures.InlineIfDeclaration\" />\n\t\t<exclude name=\"Squiz.ControlStructures.ElseIfDeclaration\" />\n\t\t<exclude name=\"Squiz.ControlStructures.SwitchDeclaration\" />\n\t\t<exclude name=\"Squiz.Files.FileExtension\" />\n\t\t<exclude name=\"Squiz.Functions.GlobalFunction\" />\n\t\t<exclude name=\"Squiz.PHP.GlobalKeyword\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowInlineIf\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowComparisonAssignment\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowBooleanStatement\" />\n\t\t<exclude name=\"Squiz.PHP.CommentedOutCode\" />\n\t\t<exclude name=\"Squiz.Strings.DoubleQuoteUsage\" />\n\t\t<exclude name=\"Squiz.WhiteSpace.FunctionClosingBraceSpace\" />\n\t\t<exclude name=\"Generic.Commenting.DocComment\" />\n\t\t<exclude name=\"Generic.Arrays.DisallowLongArraySyntax\" />\n\t\t<exclude name=\"Generic.Formatting.MultipleStatementAlignment\" />\n\t\t<!-- \u8fd9\u4e24\u4e2a\u4e0d\u5e94\u8be5\u5173\u6389\uff0c\u4f46\u597d\u50cf\u4e0d\u5c11\u5730\u65b9\u7528\u4e86\u5947\u602a\u7684\u7279\u6027 -->\n\t\t<exclude name=\"Squiz.PHP.DisallowSizeFunctionsInLoops\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowMultipleAssignments\" />\n    <!-- \u559c\u6b22\u5c31\u7559\u7740 -->\n    <exclude name=\"Generic.Strings.UnnecessaryStringConcat\" />\n    <exclude name=\"Squiz.Operators.IncrementDecrementUsage\" />\n\t</rule>\n\t<rule ref=\"Squiz.Strings.ConcatenationSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t\t<property name=\"ignoreNewlines\" value=\"true\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Squiz.WhiteSpace.OperatorSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Squiz.WhiteSpace.FunctionSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Generic.PHP.ForbiddenFunctions\">\n\t\t<properties>\n\t\t\t<property name=\"forbiddenFunctions\" type=\"array\">\n\t\t\t\t<element key=\"sizeof\" value=\"count\" />\n\t\t\t\t<element key=\"delete\" value=\"unset\" />\n\t\t\t\t<element key=\"print\" value=\"echo\" />\n\t\t\t\t<element key=\"create_function\" value=\"null\" />\n\t\t\t</property>\n\t\t</properties>\n\t</rule>\n\n</ruleset>\n", "<?php\n\n/**\n * \u8f85\u52a9\u901a\u7528\u51fd\u6570.\n */\n\n/**\n * \u5f97\u5230\u8bf7\u6c42\u534f\u8bae\uff08\u8003\u8651\u5230\u4e0d\u6b63\u786e\u7684\u914d\u7f6e\u53cd\u5411\u4ee3\u7406\u7b49\u539f\u56e0\uff0c\u672a\u5fc5\u51c6\u786e\uff09\n * \u5982\u679c\u60f3\u83b7\u53d6\u51c6\u786e\u7684\u503c\uff0c\u8bf7zbp->Load\u540e\u4f7f\u7528$zbp->isHttps.\n *\n * @param array $array\n *\n * @return string\n */\nfunction GetScheme($array)\n{\n    $array = array_change_key_case($array, CASE_UPPER);\n\n    if (array_key_exists('REQUEST_SCHEME', $array) && (strtolower($array['REQUEST_SCHEME']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTPS', $array) && (strtolower($array['HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('SERVER_PORT', $array) && ($array['SERVER_PORT'] == 443)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PORT', $array) && ($array['HTTP_X_FORWARDED_PORT'] == 443)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PROTO', $array) && (strtolower($array['HTTP_X_FORWARDED_PROTO']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PROTOCOL', $array) && (strtolower($array['HTTP_X_FORWARDED_PROTOCOL']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_SSL', $array) && (strtolower($array['HTTP_X_FORWARDED_SSL']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_URL_SCHEME', $array) && (strtolower($array['HTTP_X_URL_SCHEME']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_CF_VISITOR', $array) && (stripos($array['HTTP_CF_VISITOR'], 'https') !== false)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_FROM_HTTPS', $array) && (strtolower($array['HTTP_FROM_HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_FRONT_END_HTTPS', $array) && (strtolower($array['HTTP_FRONT_END_HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('SERVER_PORT_SECURE', $array) && ($array['SERVER_PORT_SECURE'] == 1)) {\n        return 'https://';\n    }\n    return 'http://';\n}\n\n/**\n * \u83b7\u53d6\u670d\u52a1\u5668.\n *\n * @return int\n */\nfunction GetWebServer()\n{\n    if (!isset($_SERVER['SERVER_SOFTWARE'])) {\n        return SERVER_UNKNOWN;\n    }\n    $webServer = strtolower($_SERVER['SERVER_SOFTWARE']);\n    if (strpos($webServer, 'apache') !== false) {\n        return SERVER_APACHE;\n    } elseif (strpos($webServer, 'microsoft-iis') !== false) {\n        return SERVER_IIS;\n    } elseif (strpos($webServer, 'nginx') !== false) {\n        return SERVER_NGINX;\n    } elseif (strpos($webServer, 'lighttpd') !== false) {\n        return SERVER_LIGHTTPD;\n    } elseif (strpos($webServer, 'kangle') !== false) {\n        return SERVER_KANGLE;\n    } elseif (strpos($webServer, 'caddy') !== false) {\n        return SERVER_CADDY;\n    } elseif (strpos($webServer, 'development server') !== false) {\n        return SERVER_BUILTIN;\n    } else {\n        return SERVER_UNKNOWN;\n    }\n}\n\n/**\n * \u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\n *\n * @return int\n */\nfunction GetSystem()\n{\n    if (in_array(strtoupper(PHP_OS), array('WINNT', 'WIN32', 'WINDOWS'))) {\n        return SYSTEM_WINDOWS;\n    } elseif ((strtoupper(PHP_OS) === 'UNIX')) {\n        return SYSTEM_UNIX;\n    } elseif (strtoupper(PHP_OS) === 'LINUX') {\n        return SYSTEM_LINUX;\n    } elseif (strtoupper(PHP_OS) === 'DARWIN') {\n        return SYSTEM_DARWIN;\n    } elseif (strtoupper(substr(PHP_OS, 0, 6)) === 'CYGWIN') {\n        return SYSTEM_CYGWIN;\n    } elseif (in_array(strtoupper(PHP_OS), array('NETBSD', 'OPENBSD', 'FREEBSD'))) {\n        return SYSTEM_BSD;\n    } else {\n        return SYSTEM_UNKNOWN;\n    }\n}\n\n/**\n * \u83b7\u53d6PHP\u89e3\u6790\u5f15\u64ce.\n *\n * @return int\n */\nfunction GetPHPEngine()\n{\n    return ENGINE_PHP;\n}\n\n/**\n * \u83b7\u53d6PHP Version.\n *\n * @return string\n */\nfunction GetPHPVersion()\n{\n    $p = phpversion();\n    if (strpos($p, '-') !== false) {\n        $p = substr($p, 0, strpos($p, '-'));\n    }\n\n    return $p;\n}\n\n/**\n * \u81ea\u52a8\u52a0\u8f7d\u7c7b\u6587\u4ef6.\n *\n * @param string $className \u7c7b\u540d\n *\n * @api    Filter_Plugin_Autoload\n * *\n * @return mixed\n */\nfunction AutoloadClass($className)\n{\n    foreach ($GLOBALS['hooks']['Filter_Plugin_Autoload'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($className);\n        if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n            $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n            return $fpreturn;\n        }\n    }\n    $className = str_replace('__', '/', $className);\n    $fileName = ZBP_PATH . 'zb_system/function/lib/' . strtolower($className) . '.php';\n    if (is_readable($fileName)) {\n        include $fileName;\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * \u8bb0\u5f55\u65e5\u5fd7.\n *\n * @param string $logString\n * @param bool   $isError\n *\n * @return bool\n */\nfunction Logs($logString, $isError = false)\n{\n    global $zbp;\n    foreach ($GLOBALS['hooks']['Filter_Plugin_Logs'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($logString, $isError);\n        if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n            $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n            return $fpreturn;\n        }\n    }\n    if ($zbp->guid) {\n        if ($isError) {\n            $f = $zbp->usersdir . 'logs/' . $zbp->guid . '-error' . date(\"Ymd\") . '.txt';\n        } else {\n            $f = $zbp->usersdir . 'logs/' . $zbp->guid . '-log' . date(\"Ymd\") . '.txt';\n        }\n    } else {\n        if ($isError) {\n            $f = $zbp->usersdir . 'logs/' . md5($zbp->path) . '-error.txt';\n        } else {\n            $f = $zbp->usersdir . 'logs/' . md5($zbp->path) . '.txt';\n        }\n    }\n    ZBlogException::SuspendErrorHook();\n    $handle = @fopen($f, 'a+');\n    if ($handle) {\n        $t = date('Y-m-d') . ' ' . date('H:i:s') . ' ' . substr(microtime(), 1, 9) . ' ' . date('P');\n        @fwrite($handle, '[' . $t . ']' . \"\\r\\n\" . $logString . \"\\r\\n\");\n        @fclose($handle);\n    }\n    ZBlogException::ResumeErrorHook();\n\n    return true;\n}\n\n/**\n * \u8f93\u51fa\u9875\u9762\u8fd0\u884c\u65f6\u957f\n *\n * @param bool $isOutput \u662f\u5426\u8f93\u51fa\uff08\u8003\u8651\u5386\u53f2\u539f\u56e0\uff0c\u9ed8\u8ba4\u8f93\u51fa\uff09\n *\n * @return array\n */\nfunction RunTime($isOutput = true)\n{\n    global $zbp;\n\n    $rt = array();\n    $_end_time = microtime(true);\n    $rt['time'] = number_format((1000 * ($_end_time - $_SERVER['_start_time'])), 2);\n    $rt['query'] = $_SERVER['_query_count'];\n    $rt['memory'] = $_SERVER['_memory_usage'];\n    $rt['error'] = $_SERVER['_error_count'];\n    $rt['error_detail'] = ZBlogException::$errors_msg;\n    if (function_exists('memory_get_usage')) {\n        $rt['memory'] = (int) ((memory_get_usage() - $_SERVER['_memory_usage']) / 1024);\n    }\n\n    $_SERVER['_runtime_result'] = $rt;\n\n    if (array_key_exists('_end_time', $_SERVER)) {\n        return $rt;\n    } else {\n        $_SERVER['_end_time'] = $_end_time;\n    }\n\n    if (isset($zbp->option['ZC_RUNINFO_DISPLAY']) && $zbp->option['ZC_RUNINFO_DISPLAY'] == false) {\n        return $rt;\n    }\n\n    if ($isOutput) {\n        echo '<!--' . $rt['time'] . ' ms , ';\n        echo $rt['query'] . ' query';\n        echo ' , ' . $rt['memory'] . 'kb memory';\n        echo ' , ' . $rt['error'] . ' error';\n        echo '-->';\n    }\n\n    return $rt;\n}\n\n/**\n * \u83b7\u5f97\u7cfb\u7edf\u4fe1\u606f.\n *\n * @return string \u7cfb\u7edf\u4fe1\u606f\n *\n * @since 1.4\n */\nfunction GetEnvironment()\n{\n    global $zbp;\n    $ajax = Network::Create();\n    if ($ajax) {\n        $ajax = substr(get_class($ajax), 9);\n    }\n    if ($ajax == 'curl') {\n        if (ini_get(\"safe_mode\") || (version_compare(PHP_VERSION, '5.6.0', '<') && ini_get(\"open_basedir\"))) {\n            $ajax .= '-safemode';\n        }\n        $array = curl_version();\n        $ajax .= $array['version'];\n    }\n    if (function_exists('php_uname') == true) {\n        $uname = SplitAndGet(php_uname('r'), '-', 0);\n    } else {\n        $uname = '';\n    }\n    $system_environment = PHP_OS . $uname . '; ' .\n        GetValueInArray(\n            explode(\n                ' ',\n                str_replace(array('Microsoft-', '/'), array('', ''), GetVars('SERVER_SOFTWARE', 'SERVER'))\n            ),\n            0\n        ) . '; PHP' . GetPHPVersion() . (IS_X64 ? 'x64' : '') . '; ' .\n        $zbp->option['ZC_DATABASE_TYPE'] . $zbp->db->version . '; ' . $ajax;\n\n    if (defined('OPENSSL_VERSION_TEXT')) {\n        $system_environment .= '; ' . str_replace(' ', '', OPENSSL_VERSION_TEXT);\n    }\n\n    return $system_environment;\n}\n\n/**\n * \u901a\u8fc7\u6587\u4ef6\u83b7\u53d6\u5e94\u7528URL\u5730\u5740\n *\n * @param string $file \u6587\u4ef6\u540d\n *\n * @return string \u8fd4\u56deURL\u5730\u5740\n */\nfunction plugin_dir_url($file)\n{\n    global $zbp;\n    $s1 = $zbp->path;\n    $s2 = str_replace('\\\\', '/', dirname($file) . '/');\n    $s = substr($s2, strspn($s1, $s2, 0));\n    if (strpos($s, 'zb_users/plugin/') !== false) {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/plugin/', 0));\n    } else {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/theme/', 0));\n    }\n    $a = explode('/', $s);\n    $s = $a[0];\n    $s = $zbp->host . $s3 . $s . '/';\n\n    return $s;\n}\n\n/**\n * \u901a\u8fc7\u6587\u4ef6\u83b7\u53d6\u5e94\u7528\u76ee\u5f55\u8def\u5f84.\n *\n * @param $file\n *\n * @return string\n */\nfunction plugin_dir_path($file)\n{\n    global $zbp;\n    $s1 = $zbp->path;\n    $s2 = str_replace('\\\\', '/', dirname($file) . '/');\n    $s = substr($s2, strspn($s1, $s2, 0));\n    if (strpos($s, 'zb_users/plugin/') !== false) {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/plugin/', 0));\n    } else {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/theme/', 0));\n    }\n    $a = explode('/', $s);\n    $s = $a[0];\n    $s = $zbp->path . $s3 . $s . '/';\n\n    return $s;\n}\n\n/**\n * \u901a\u8fc7Key\u4ece\u6570\u7ec4\u83b7\u53d6\u6570\u636e.\n *\n * @param array  $array \u6570\u7ec4\u540d\n * @param string $name  \u4e0b\u6807key\n *\n * @return mixed\n */\nfunction GetValueInArray($array, $name)\n{\n    if (is_array($array)) {\n        if (array_key_exists($name, $array)) {\n            return $array[$name];\n        }\n    }\n}\n\n/**\n * \u83b7\u53d6\u6570\u7ec4\u4e2d\u7684\u5f53\u524d\u5143\u7d20\u6570\u636e.\n *\n * @param string $array \u6570\u7ec4\u540d\n * @param string $name  \u4e0b\u6807key\n *\n * @return mixed\n */\nfunction GetValueInArrayByCurrent($array, $name)\n{\n    if (is_array($array)) {\n        $array = current($array);\n\n        return GetValueInArray($array, $name);\n    }\n}\n\n/**\n * \u5206\u5272string\u5e76\u53d6\u67d0\u9879\u6570\u636e.\n *\n * @param string $string\n * @param string $delimiter\n * @param int    $n\n *\n * @return string\n */\nfunction SplitAndGet($string, $delimiter = ';', $n = 0)\n{\n    $a = explode($delimiter, $string);\n    if (!is_array($a)) {\n        $a = array();\n    }\n    if (isset($a[$n])) {\n        return (string) $a[$n];\n    }\n\n    return '';\n}\n\n/**\n * \u5220\u9664\u8fde\u7eed\u7a7a\u683c\n *\n * @param $s\n *\n * @return null|string|string[]\n */\nfunction RemoveMoreSpaces($s)\n{\n    return preg_replace(\"/\\s(?=\\s)/\", \"\\\\1\", $s);\n}\n\n/**\n * \u83b7\u53d6Guid.\n *\n * @return string\n */\nfunction GetGuid()\n{\n    $charid = strtolower(md5(uniqid(mt_rand(), true)));\n\n    return $charid;\n}\n\n/**\n * \u83b7\u53d6\u53c2\u6570\u503c\n *\n * @param string $name \u6570\u7ec4key\u540d\n * @param string $type \u9ed8\u8ba4\u4e3aREQUEST\n *\n * @return mixed|null\n */\nfunction GetVars($name, $type = 'REQUEST')\n{\n    $array = &$GLOBALS[strtoupper(\"_$type\")];\n\n    if (isset($array[$name])) {\n        return $array[$name];\n    } else {\n        return null;\n    }\n}\n\n/**\n * \u83b7\u53d6\u53c2\u6570\u503c\uff08\u53ef\u8bbe\u7f6e\u9ed8\u8ba4\u8fd4\u56de\u503c\uff09.\n *\n * @param string $name    \u6570\u7ec4key\u540d\n * @param string $type    \u9ed8\u8ba4\u4e3aREQUEST\n * @param string $default \u9ed8\u8ba4\u4e3anull\n *\n * @return mixed|null\n *\n * @since 1.3.140614\n */\nfunction GetVarsByDefault($name, $type = 'REQUEST', $default = null)\n{\n    $g = GetVars($name, $type);\n    if ($g == null || $g == '') {\n        return $default;\n    }\n\n    return $g;\n}\n\n/**\n * \u83b7\u53d6\u6570\u636e\u5e93\u540d.\n *\n * @return string \u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684SQLite\u6570\u636e\u6587\u4ef6\u540d\n */\nfunction GetDbName()\n{\n    return str_replace('-', '', '#%20' . strtolower(GetGuid())) . '.db';\n}\n\n/**\n * \u83b7\u53d6\u5f53\u524d\u7f51\u7ad9\u5730\u5740\n *\n * @param string $blogpath     \u7f51\u7ad9\u57df\u540d\n * @param string &$cookiesPath \u8fd4\u56decookie\u4f5c\u7528\u57df\u503c\uff0c\u8981\u4f20\u5f15\u5165\n *\n * @return string \u8fd4\u56de\u7f51\u7ad9\u5b8c\u6574\u5730\u5740\uff0c\u5982http://localhost/zbp/\n */\nfunction GetCurrentHost($blogpath, &$cookiesPath)\n{\n    $host = HTTP_SCHEME;\n\n    $host .= $_SERVER['HTTP_HOST'];\n\n    if (isset($_SERVER['SCRIPT_NAME']) && $_SERVER['SCRIPT_NAME']) {\n        $x = $_SERVER['SCRIPT_NAME'];\n        $y = $blogpath;\n        for ($i = 0; $i < strlen($x); $i++) {\n            $f = $y . substr($x, ($i - strlen($x)));\n            $z = substr($x, 0, $i);\n            if (file_exists($f) && is_file($f)) {\n                $z = trim($z, '/');\n                $z = '/' . $z . '/';\n                $z = str_replace('//', '/', $z);\n                $cookiesPath = $z;\n\n                return $host . $z;\n            }\n        }\n    }\n\n    $x = $_SERVER['SCRIPT_NAME'];\n    $y = $blogpath;\n    if (isset($_SERVER[\"CONTEXT_DOCUMENT_ROOT\"]) && isset($_SERVER[\"CONTEXT_PREFIX\"])) {\n        if ($_SERVER[\"CONTEXT_DOCUMENT_ROOT\"] && $_SERVER[\"CONTEXT_PREFIX\"]) {\n            $y = $_SERVER[\"CONTEXT_DOCUMENT_ROOT\"] . $_SERVER[\"CONTEXT_PREFIX\"] . '/';\n        }\n    }\n\n    $z = '';\n\n    for ($i = strlen($x); $i > 0; $i--) {\n        $z = substr($x, 0, $i);\n        if (strtolower(substr($y, (strlen($y) - $i))) == strtolower($z)) {\n            break;\n        }\n    }\n\n    $cookiesPath = $z;\n\n    return $host . $z;\n}\n\n/**\n * \u901a\u8fc7URL\u83b7\u53d6\u8fdc\u7a0b\u9875\u9762\u5185\u5bb9.\n *\n * @param string $url URL\u5730\u5740\n *\n * @return string \u8fd4\u56de\u9875\u9762\u6587\u672c\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3anull\n */\nfunction GetHttpContent($url)\n{\n    $ajax = Network::Create();\n    if (!$ajax) {\n        return;\n    }\n\n    $ajax->open('GET', $url);\n    $ajax->enableGzip();\n    $ajax->setTimeOuts(60, 60, 0, 0);\n    $ajax->send();\n\n    return ($ajax->status == 200) ? $ajax->responseText : null;\n}\n\n/**\n * \u83b7\u53d6\u76ee\u5f55\u4e0b\u6587\u4ef6\u5939\u5217\u8868.\n *\n * @param string $dir \u76ee\u5f55\n *\n * @return array \u6587\u4ef6\u5939\u5217\u8868\n */\nfunction GetDirsInDir($dir)\n{\n    $dirs = array();\n\n    if (!file_exists($dir)) {\n        return array();\n    }\n    if (!is_dir($dir)) {\n        return array();\n    }\n    $dir = str_replace('\\\\', '/', $dir);\n    if (substr($dir, -1) !== '/') {\n        $dir .= '/';\n    }\n\n    // \u6b64\u5904\u7684scandir\u867d\u7136\u662fPHP 5\u5c31\u5df2\u52a0\u5165\u7684\u5185\u5bb9\uff0c\u4f46\u5fc5\u987b\u52a0\u4e0a\u517c\u5bb9\u5904\u7406\n    // \u90e8\u5206\u4e00\u952e\u5b89\u88c5\u5305\u7684\u65e9\u671f\u7248\u672c\u5bf9\u5176\u8fdb\u884c\u4e86\u7981\u7528\n    // \u8fd9\u4e00\u7981\u7528\u5bf9\u5b89\u5168\u6ca1\u6709\u4efb\u4f55\u5e2e\u52a9\uff0c\u63a8\u6d4b\u662f\u65e9\u671f\u4e92\u8054\u7f51\u6d41\u4f20\u4e0b\u6765\u7684\u201c\u5b89\u5168\u79d8\u7b08\u201d\u3002\n    // @see: https://github.com/licess/lnmp/commit/bd34d5c803308afdac61626018e4168716d089ae#diff-6282e7667da1e2fc683bed06f87f74c1\n    if (function_exists('scandir')) {\n        foreach (scandir($dir, 0) as $d) {\n            if (is_dir($dir . $d)) {\n                if (($d != '.') && ($d != '..')) {\n                    $dirs[] = $d;\n                }\n            }\n        }\n    } else {\n        $handle = opendir($dir);\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if ($file != \".\" && $file != \"..\") {\n                    if (is_dir($dir . $file)) {\n                        $dirs[] = $file;\n                    }\n                }\n            }\n            closedir($handle);\n        }\n    }\n\n    return $dirs;\n}\n\n/**\n * \u83b7\u53d6\u76ee\u5f55\u4e0b\u6307\u5b9a\u7c7b\u578b\u6587\u4ef6\u5217\u8868.\n *\n * @param string $dir  \u76ee\u5f55\n * @param string $type \u6587\u4ef6\u7c7b\u578b\uff0c\u4ee5\uff5c\u5206\u9694\n *\n * @return array \u6587\u4ef6\u5217\u8868\n */\nfunction GetFilesInDir($dir, $type)\n{\n    $files = array();\n    $dir = str_replace('\\\\', '/', $dir);\n    if (substr($dir, -1) !== '/') {\n        $dir .= '/';\n    }\n    if (!is_dir($dir)) {\n        return array();\n    }\n\n    if (function_exists('scandir')) {\n        foreach (scandir($dir) as $f) {\n            if (is_file($dir . $f)) {\n                foreach (explode(\"|\", $type) as $t) {\n                    $t = '.' . $t;\n                    $i = strlen($t);\n                    if (substr($f, -$i, $i) == $t) {\n                        $sortname = substr($f, 0, (strlen($f) - $i));\n                        $files[$sortname] = $dir . $f;\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        $handle = opendir($dir);\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if ($file != \".\" && $file != \"..\") {\n                    if (is_file($dir . $file)) {\n                        foreach (explode(\"|\", $type) as $t) {\n                            $t = '.' . $t;\n                            $i = strlen($t);\n                            if (substr($file, -$i, $i) == $t) {\n                                $sortname = substr($file, 0, (strlen($file) - $i));\n                                $files[$sortname] = $dir . $file;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            closedir($handle);\n        }\n    }\n\n    return $files;\n}\n\n/**\n * \u8bbe\u7f6ehttp\u72b6\u6001\u5934.\n *\n * @param int $number HttpStatus\n *\n * @internal param string $status \u6210\u529f\u83b7\u53d6\u72b6\u6001\u7801\u8bbe\u7f6e\u9759\u6001\u53c2\u6570status\n *\n * @return bool\n */\nfunction SetHttpStatusCode($number, $force = false)\n{\n    static $status = '';\n    if ($status != '' && $force == false) {\n        return false;\n    }\n\n    $codes = array(\n        // Informational 1xx\n        100 => 'Continue',\n        101 => 'Switching Protocols',\n        102 => 'Processing',\n\n        // Success 2xx\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        203 => 'Non-Authoritative Information',\n        204 => 'No Content',\n        205 => 'Reset Content',\n        206 => 'Partial Content',\n        207 => 'Multi-Status',\n\n        // Redirection 3xx\n        300 => 'Multiple Choices',\n        301 => 'Moved Permanently',\n        302 => 'Found', // 1.1\n        303 => 'See Other',\n        304 => 'Not Modified',\n        305 => 'Use Proxy',\n        306 => 'Switch Proxy',\n        307 => 'Temporary Redirect',\n\n        // Client Error 4xx\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        402 => 'Payment Required',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        406 => 'Not Acceptable',\n        407 => 'Proxy Authentication Required',\n        408 => 'Request Timeout',\n        409 => 'Conflict',\n        410 => 'Gone',\n        411 => 'Length Required',\n        412 => 'Precondition Failed',\n        413 => 'Request Entity Too Large',\n        414 => 'Request-URI Too Long',\n        415 => 'Unsupported Media Type',\n        416 => 'Requested Range Not Satisfiable',\n        417 => 'Expectation Failed',\n        451 => 'Unavailable For Legal Reasons',\n\n        // Server Error 5xx\n        500 => 'Internal Server Error',\n        501 => 'Not Implemented',\n        502 => 'Bad Gateway',\n        503 => 'Service Unavailable',\n        504 => 'Gateway Timeout',\n        505 => 'HTTP Version Not Supported',\n        506 => 'Variant Also Negotiates',\n        507 => 'Insufficient Storage',\n        508 => 'Loop Detected',\n        509 => 'Bandwidth Limit Exceeded',\n        510 => 'Not Extended',\n    );\n\n    if (isset($codes[$number])) {\n        header('HTTP/1.1 ' . $number . ' ' . $codes[$number]);\n        $status = $number;\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * \u7528script\u6807\u7b7e\u8fdb\u884c\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction RedirectByScript($url)\n{\n    echo '<script>location.href = decodeURIComponent(\"' . urlencode($url) . '\");</script>';\n    die();\n}\n\n/**\n * 302\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction Redirect($url)\n{\n    SetHttpStatusCode(302);\n    header('Location: ' . $url);\n    die();\n}\n\n/**\n * 301\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction Redirect301($url)\n{\n    SetHttpStatusCode(301);\n    header('Location: ' . $url);\n    die();\n}\n\n/**\n * Http404\n */\nfunction Http404()\n{\n    SetHttpStatusCode(404);\n    header(\"Status: 404 Not Found\");\n}\n\n/**\n * Http500\n */\nfunction Http500()\n{\n    SetHttpStatusCode(500);\n}\n\n/**\n * Http503\n */\nfunction Http503()\n{\n    SetHttpStatusCode(503);\n}\n\n/**\n * \u8bbe\u7f6e304\u7f13\u5b58\u5934.\n *\n * @param string $filename \u6587\u4ef6\u540d\n * @param string $time     \u7f13\u5b58\u65f6\u95f4\n */\nfunction Http304($filename, $time)\n{\n    $url = $filename;\n    $md5 = md5($url . $time);\n    $etag = '\"' . $md5 . '\"';\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $time) . ' GMT');\n    header(\"ETag: $etag\");\n    if ((isset($_SERVER['HTTP_IF_NONE_MATCH']) && $_SERVER['HTTP_IF_NONE_MATCH'] == $etag)) {\n        SetHttpStatusCode(304);\n        die();\n    }\n}\n\n/**\n * \u83b7\u53d6\u5ba2\u6237\u7aefIP.\n *\n * @return string \u8fd4\u56deIP\u5730\u5740\n */\nfunction GetGuestIP()\n{\n    global $zbp;\n    if (isset($zbp->option['ZC_USING_CDN_GUESTIP_TYPE']) && $zbp->option['ZC_USING_CDN_GUESTIP_TYPE'] != '') {\n        $user_ip = GetVars($zbp->option['ZC_USING_CDN_GUESTIP_TYPE'], \"SERVER\");\n    } else {\n        $user_ip = GetVars(\"REMOTE_ADDR\", \"SERVER\");\n    }\n\n    return $user_ip;\n}\n\n/**\n * \u83b7\u53d6\u5ba2\u6237\u7aefAgent.\n *\n * @return string \u8fd4\u56deAgent\n */\nfunction GetGuestAgent()\n{\n    return GetVars(\"HTTP_USER_AGENT\", \"SERVER\");\n}\n\n/**\n * \u83b7\u53d6\u8bf7\u6c42\u6765\u6e90URL.\n *\n * @return string \u8fd4\u56deURL\n */\nfunction GetRequestUri()\n{\n    if (isset($_SERVER['HTTP_X_ORIGINAL_URL'])) {\n        $url = $_SERVER['HTTP_X_ORIGINAL_URL'];\n    } elseif (isset($_SERVER['HTTP_X_REWRITE_URL'])) {\n        $url = $_SERVER['HTTP_X_REWRITE_URL'];\n        if (strpos($url, '?') !== false) {\n            $queries = GetValueInArray(explode('?', $url), '1');\n            foreach (explode('&', $queries) as $query) {\n                $name = GetValueInArray(explode('=', $query), '0');\n                $value = GetValueInArray(explode('=', $query), '1');\n                $name = urldecode($name);\n                $value = urldecode($value);\n                if (!isset($_GET[$name])) {\n                    $_GET[$name] = $value;\n                }\n\n                if (!isset($_GET[$name])) {\n                    $_REQUEST[$name] = $value;\n                }\n            }\n        }\n    } elseif (isset($_SERVER['REQUEST_URI'])) {\n        $url = $_SERVER['REQUEST_URI'];\n    } elseif (isset($_SERVER['REDIRECT_URL'])) {\n        $url = $_SERVER['REDIRECT_URL'];\n        if (isset($_SERVER['REDIRECT_QUERY_STRIN'])) {\n            $url .= '?' . $_SERVER['REDIRECT_QUERY_STRIN'];\n        }\n    } else {\n        $url = $_SERVER['PHP_SELF'] . ($_SERVER['QUERY_STRING'] ? '?' . $_SERVER['QUERY_STRING'] : '');\n    }\n\n    return $url;\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\u540d.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string \u8fd4\u56de\u5c0f\u5199\u7684\u540e\u7f00\u540d\n */\nfunction GetFileExt($f)\n{\n    if (strpos($f, '.') === false) {\n        return '';\n    }\n\n    $a = explode('.', $f);\n\n    return strtolower(end($a));\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u6743\u9650.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string|null \u8fd4\u56de\u6587\u4ef6\u6743\u9650\uff0c\u6570\u503c\u683c\u5f0f\uff0c\u59820644\n */\nfunction GetFilePermsOct($f)\n{\n    if (!file_exists($f)) {\n        return;\n    }\n\n    return substr(sprintf('%o', fileperms($f)), -4);\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u6743\u9650.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string|null \u8fd4\u56de\u6587\u4ef6\u6743\u9650\uff0c\u5b57\u7b26\u8868\u8fbe\u683c\u5f0f\uff0c\u5982-rw-r--r--\n */\nfunction GetFilePerms($f)\n{\n    if (!file_exists($f)) {\n        return;\n    }\n\n    $perms = fileperms($f);\n    switch ($perms & 0xF000) {\n        case 0xC000: // socket\n            $info = 's';\n            break;\n        case 0xA000: // symbolic link\n            $info = 'l';\n            break;\n        case 0x8000: // regular\n            $info = '-';\n            break;\n        case 0x6000: // block special\n            $info = 'b';\n            break;\n        case 0x4000: // directory\n            $info = 'd';\n            break;\n        case 0x2000: // character special\n            $info = 'c';\n            break;\n        case 0x1000: // FIFO pipe\n            $info = 'p';\n            break;\n        default: // unknown\n            $info = 'u';\n    }\n\n    // Owner\n    $info .= (($perms & 0x0100) ? 'r' : '-');\n    $info .= (($perms & 0x0080) ? 'w' : '-');\n    $info .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x') : (($perms & 0x0800) ? 'S' : '-'));\n\n    // Group\n    $info .= (($perms & 0x0020) ? 'r' : '-');\n    $info .= (($perms & 0x0010) ? 'w' : '-');\n    $info .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x') : (($perms & 0x0400) ? 'S' : '-'));\n\n    // Other\n    $info .= (($perms & 0x0004) ? 'r' : '-');\n    $info .= (($perms & 0x0002) ? 'w' : '-');\n    $info .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x') : (($perms & 0x0200) ? 'T' : '-'));\n\n    return $info;\n}\n\n/**\n * \u5411\u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\u52a0\u5165\u4e00\u4e2a\u65b0\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return string \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n */\nfunction AddNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n    if (in_array($name, $apl) == false) {\n        $apl[] = $name;\n    }\n    $pl = trim(implode('|', $apl), '|');\n\n    return $pl;\n}\n\n/**\n * \u4ece\u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return string \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n */\nfunction DelNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n    for ($i = 0; $i <= (count($apl) - 1); $i++) {\n        if ($apl[$i] == $name) {\n            unset($apl[$i]);\n        }\n    }\n    $pl = trim(implode('|', $apl), '|');\n\n    return $pl;\n}\n\n/**\n * \u5728\u5b57\u7b26\u4e32\u53c2\u6570\u503c\u67e5\u627e\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return bool\n */\nfunction HasNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n\n    return in_array($name, $apl);\n}\n\n/**\n * \u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\uff08\u7528\u4e8eShowError\u63a5\u53e3\uff09.\n *\n * @param $errorCode\n * @param $errorString\n * @param $file\n * @param $line\n */\nfunction JsonError4ShowErrorHook($errorCode, $errorString, $file, $line)\n{\n    JsonError($errorCode, $errorString, null);\n}\n\n/**\n * \u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u9519\u8bef\u4fe1\u606f.\n *\n * @param string $errorCode   \u9519\u8bef\u7f16\u53f7\n * @param string $errorString \u9519\u8bef\u5185\u5bb9\n * @param object\n */\nfunction JsonError($errorCode, $errorString, $data)\n{\n    $result = array(\n        'data' => $data,\n        'err'  => array(\n            'code' => $errorCode,\n            'msg'  => $errorString,\n            //'runtime' => RunTime(),\n            'timestamp' => time(),\n        ),\n    );\n    @ob_clean();\n    echo json_encode($result);\n    if ($errorCode != 0) {\n        exit;\n    }\n}\n\n/**\n * \u5f53\u4ee3\u7801\u6b63\u5e38\u8fd0\u884c\u65f6\uff0c\u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u4fe1\u606f.\n *\n * @param object \u5f85\u8fd4\u56de\u5185\u5bb9\n */\nfunction JsonReturn($data)\n{\n    JsonError(0, \"\", $data);\n}\n\n/**\n * XML-RPC\u5e94\u7b54\u9519\u8bef\u9875\u9762.\n *\n * @param $errorCode\n * @param $errorString\n * @param $file\n * @param $line\n *\n * @return void\n */\nfunction RespondError($errorCode, $errorString = '', $file = '', $line = '')\n{\n    $strXML = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodResponse><fault><value><struct><member><name>faultCode</name><value><int>$1</int></value></member><member><name>faultString</name><value><string>$2</string></value></member></struct></value></fault></methodResponse>';\n    $strError = $strXML;\n    $strError = str_replace(\"$1\", FormatString($errorCode, \"[html-format]\"), $strError);\n    $strError = str_replace(\"$2\", FormatString($errorString, \"[html-format]\"), $strError);\n\n    ob_clean();\n    echo $strError;\n    exit;\n}\n\n/**\n * XML-RPC\u811a\u672c\u9519\u8bef\u9875\u9762.\n *\n * @param string $errorCode \u9519\u8bef\u63d0\u793a\u5b57\u7b26\u4e32\n * @param string $errorText\n * @param string $file\n * @param string $line\n *\n * @return void\n */\nfunction ScriptError($errorCode, $errorText = '', $file = '', $line = '')\n{\n    header('Content-type: application/x-javascript; Charset=utf-8');\n    ob_clean();\n    echo 'alert(\"' . str_replace('\"', '\\\"', $errorCode . ':' . $errorText) . '\")';\n    die();\n}\n\n/**\n *  \u9a8c\u8bc1\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f.\n *\n * @param string $source \u5b57\u7b26\u4e32\n * @param string $para   \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u7528[username]|[password]|[email]|[homepage]\u6216\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\n *\n * @return bool\n */\nfunction CheckRegExp($source, $para)\n{\n    if (strpos($para, '[username]') !== false) {\n        $para = \"/^[\\.\\_A-Za-z0-9\u00b7@\\x{4e00}-\\x{9fa5}]+$/u\";\n    } elseif (strpos($para, '[nickname]') !== false) {\n        $para = '/([^\\x{01}-\\x{1F}\\x{80}-\\x{FF}\\/:\\\\~&%;@\\'\"?<>|#$\\*}{,\\+=\\[\\]\\(\\)\\{\\}\\t\\r\\n\\p{C}])/u';\n    } elseif (strpos($para, '[password]') !== false) {\n        $para = \"/^[A-Za-z0-9`~!@#\\$%\\^&\\*\\-_\\?]+$/u\";\n    } elseif (strpos($para, '[email]') !== false) {\n        $para = \"/^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*\\.)+[a-zA-Z]*)$/u\";\n    } elseif (strpos($para, '[homepage]') !== false) {\n        $para = \"/^[a-zA-Z]+:\\/\\/[a-zA-Z0-9\\_\\-\\.\\&\\?\\/:=#\\x{4e00}-\\x{9fa5}]+$/u\";\n    } elseif (!$para) {\n        return false;\n    }\n\n    return (bool) preg_match($para, $source);\n}\n\n/**\n *  \u683c\u5f0f\u5316\u5b57\u7b26\u4e32.\n *\n * @param string $source \u5b57\u7b26\u4e32\n * @param string $para   \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u7528[html-format]|[nohtml]|[noscript]|[enter]|[noenter]|[filename]|[normalname]\u6216\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\n *\n * @return string\n */\nfunction FormatString($source, $para)\n{\n    if (strpos($para, '[html-format]') !== false) {\n        $source = htmlspecialchars($source);\n    }\n\n    if (strpos($para, '[nohtml]') !== false) {\n        $source = preg_replace(\"/<([^<>]*)>/si\", \"\", $source);\n        $source = str_replace(\"<\", \"\u02c2\", $source);\n        $source = str_replace(\">\", \"\u02c3\", $source);\n    }\n\n    if (strpos($para, '[noscript]') !== false) {\n        $class  = new XssHtml($source);\n        $source = trim($class->getHtml());\n    }\n    if (strpos($para, '[enter]') !== false) {\n        $source = str_replace(\"\\r\\n\", \"<br/>\", $source);\n        $source = str_replace(\"\\n\", \"<br/>\", $source);\n        $source = str_replace(\"\\r\", \"<br/>\", $source);\n        $source = preg_replace(\"/(<br\\/>)+/\", \"<br/>\", $source);\n    }\n    if (strpos($para, '[noenter]') !== false) {\n        $source = str_replace(\"\\r\\n\", \"\", $source);\n        $source = str_replace(\"\\n\", \"\", $source);\n        $source = str_replace(\"\\r\", \"\", $source);\n    }\n    if (strpos($para, '[filename]') !== false) {\n        $source = str_replace(array(\"/\", \"#\", \"$\", \"\\\\\", \":\", \"?\", \"*\", \"\\\"\", \"<\", \">\", \"|\", \" \"), array(\"\"), $source);\n    }\n    if (strpos($para, '[normalname]') !== false) {\n        $source = str_replace(array(\"#\", \"$\", \"(\", \")\", \"*\", \"+\", \"[\", \"]\", \"{\", \"}\", \"?\", \"\\\\\", \"^\", \"|\", \":\", \"'\", \"\\\"\", \";\", \"@\", \"~\", \"=\", \"%\", \"&\"), array(\"\"), $source);\n    }\n\n    return $source;\n}\n\n/**\n * \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n *\n * @param string $source\n * @param string $param\n *\n * @Deprecated\n **/\nfunction TransferHTML($source, $param)\n{\n    return FormatString($source, $param);\n}\n\n/**\n *  \u5c01\u88c5HTML\u6807\u7b7e.\n *\n * @param string $html html\u6e90\u7801\n *\n * @return string\n */\nfunction CloseTags($html)\n{\n    // strip fraction of open or close tag from end (e.g. if we take first x characters, we might cut off a tag at the end!)\n    $html = preg_replace('/<[^>]*$/', '', $html); // ending with fraction of open tag\n\n    // put open tags into an array\n    preg_match_all('#<([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result);\n    $opentags = $result[1];\n\n    // put all closed tags into an array\n    preg_match_all('#</([a-z]+)>#iU', $html, $result);\n    $closetags = $result[1];\n\n    $len_opened = count($opentags);\n\n    // if all tags are closed, we can return\n    if (count($closetags) == $len_opened) {\n        return $html;\n    }\n\n    // close tags in reverse order that they were opened\n    $opentags = array_reverse($opentags);\n\n    // self closing tags\n    $sc = array('br', 'input', 'img', 'hr', 'meta', 'link');\n    // ,'frame','iframe','param','area','base','basefont','col'\n    // should not skip tags that can have content inside!\n\n    for ($i = 0; $i < $len_opened; $i++) {\n        $ot = strtolower($opentags[$i]);\n\n        if (!in_array($opentags[$i], $closetags) && !in_array($ot, $sc)) {\n            $html .= '</' . $opentags[$i] . '>';\n        } else {\n            unset($closetags[array_search($opentags[$i], $closetags)]);\n        }\n    }\n\n    return $html;\n}\n\n/**\n * \u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr \u6e90\u5b57\u7b26\u4e32\n * @param int    $start     \u8d77\u59cb\u4f4d\u7f6e\n *\n * @return string\n */\nfunction SubStrUTF8_Start($sourcestr, $start)\n{\n    $args = func_get_args();\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return call_user_func_array('mb_substr', $args);\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n\n        return call_user_func_array('iconv_substr', $args);\n    }\n\n    return call_user_func_array('substr', $args);\n}\n\n/**\n *  \u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr \u6e90\u5b57\u7b26\u4e32\n * @param int    $cutlength \u5b50\u4e32\u957f\u5ea6\n *\n * @return string\n */\nfunction SubStrUTF8($sourcestr, $cutlength)\n{\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n\n        return mb_substr($sourcestr, 0, $cutlength);\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n\n        return iconv_substr($sourcestr, 0, $cutlength);\n    }\n\n    $ret = '';\n    $i = 0;\n    $n = 0;\n\n    $str_length = strlen($sourcestr); //\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\n\n    while (($n < $cutlength) && ($i <= $str_length)) {\n        $temp_str = substr($sourcestr, $i, 1);\n        $ascnum = ord($temp_str); //\u5f97\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c$i\u4f4d\u5b57\u7b26\u7684ascii\u7801\n        if ($ascnum >= 224) { //\u5982\u679cASCII\u4f4d\u9ad8\u4e0e224\uff0c\n            $ret = $ret . substr($sourcestr, $i, 3); //\u6839\u636eUTF-8\u7f16\u7801\u89c4\u8303\uff0c\u5c063\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u8ba1\u4e3a\u5355\u4e2a\u5b57\u7b26\n            $i = ($i + 3); //\u5b9e\u9645Byte\u8ba1\u4e3a3\n            $n++; //\u5b57\u4e32\u957f\u5ea6\u8ba11\n        } elseif ($ascnum >= 192) { //\u5982\u679cASCII\u4f4d\u9ad8\u4e0e192\uff0c\n            $ret = $ret . substr($sourcestr, $i, 2); //\u6839\u636eUTF-8\u7f16\u7801\u89c4\u8303\uff0c\u5c062\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u8ba1\u4e3a\u5355\u4e2a\u5b57\u7b26\n            $i = ($i + 2); //\u5b9e\u9645Byte\u8ba1\u4e3a2\n            $n++; //\u5b57\u4e32\u957f\u5ea6\u8ba11\n        } elseif ($ascnum >= 65 && $ascnum <= 90) { //\u5982\u679c\u662f\u5927\u5199\u5b57\u6bcd\uff0c\n            $ret = $ret . substr($sourcestr, $i, 1);\n            $i = ($i + 1); //\u5b9e\u9645\u7684Byte\u6570\u4ecd\u8ba11\u4e2a\n            $n++; //\u4f46\u8003\u8651\u6574\u4f53\u7f8e\u89c2\uff0c\u5927\u5199\u5b57\u6bcd\u8ba1\u6210\u4e00\u4e2a\u9ad8\u4f4d\u5b57\u7b26\n        } else {\n            //\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5305\u62ec\u5c0f\u5199\u5b57\u6bcd\u548c\u534a\u89d2\u6807\u70b9\u7b26\u53f7\uff0c\n\n            $ret = $ret . substr($sourcestr, $i, 1);\n            $i = ($i + 1); //\u5b9e\u9645\u7684Byte\u6570\u8ba11\u4e2a\n            $n = ($n + 0.5); //\u5c0f\u5199\u5b57\u6bcd\u548c\u534a\u89d2\u6807\u70b9\u7b49\u4e0e\u534a\u4e2a\u9ad8\u4f4d\u5b57\u7b26\u5bbd...\n        }\n        /*\n        if ($str_length > $cutlength) {\n            $ret = $ret;\n        }\n        */\n    }\n\n    return $ret;\n}\n\n/**\n *  ZBP\u7248\u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr\n * @param int    $start\n *\n * @return string\n */\nfunction Zbp_SubStr($sourcestr, $start)\n{\n    $args = func_get_args();\n    return call_user_func_array('SubStrUTF8_Start', $args);\n}\n\n/**\n *  ZBP\u7248StrLen.\n *\n * @param string $string\n *\n * @return string\n */\nfunction Zbp_StrLen($string)\n{\n    if (function_exists('mb_strlen') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_strlen($string);\n    }\n    if (function_exists('iconv_strlen') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        return iconv_strlen($string);\n    }\n    return strlen($string);\n}\n\n/**\n *  ZBP\u7248Strpos\n *\n * @param string $haystack\n * @param string $needle\n * @param int $offset\n *\n * @return string\n */\nfunction Zbp_Strpos($haystack, $needle, $offset = 0)\n{\n    if (function_exists('mb_strpos') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_strpos($haystack, $needle, $offset);\n    }\n    if (function_exists('iconv_strpos') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        return iconv_strpos($haystack, $needle, $offset);\n    }\n    return strpos($haystack, $needle, $offset);\n}\n\n/**\n *  ZBP\u7248Stripos\n *\n * @param string $haystack\n * @param string $needle\n * @param int $offset\n *\n * @return string\n */\nfunction Zbp_Stripos($haystack, $needle, $offset = 0)\n{\n    if (function_exists('mb_strpos') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_stripos($haystack, $needle, $offset);\n    }\n    if (function_exists('iconv_strpos') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        $haystack = strtolower($haystack);\n        $needle = strtolower($needle);\n        return iconv_strpos($haystack, $needle, $offset);\n    }\n    return stripos($haystack, $needle, $offset);\n}\n\n/**\n * \u622a\u53d6HTML\u683c\u5f0f\u7684UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $source \u6e90\u5b57\u7b26\u4e32\n * @param int    $length \u5b50\u4e32\u957f\u5ea6\n *\n * @return string\n */\nfunction SubStrUTF8_Html($source, $length)\n{\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        $j = mb_strlen($source);\n        $s = mb_substr($source, 0, $length);\n        $l = mb_substr_count($s, '<');\n        $r = mb_substr_count($s, '>');\n        if ($l > 0 && $l > $r) {\n            for ($i = $length; $i < $j; $i++) {\n                $s .= mb_substr($source, $i, 1);\n                if (mb_substr($source, $i, 1) == '>') {\n                    break;\n                }\n            }\n        }\n\n        return $s;\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        $j = iconv_strlen($source);\n        $s = iconv_substr($source, 0, $length);\n        $l = substr_count($s, '<');\n        $r = substr_count($s, '>');\n        if ($l > 0 && $l > $r) {\n            for ($i = $length; $i < $j; $i++) {\n                $s .= iconv_substr($source, $i, 1);\n                if (iconv_substr($source, $i, 1) == '>') {\n                    break;\n                }\n            }\n        }\n\n        return $s;\n    }\n\n    $j = strlen($source);\n    $s = substr($source, 0, $length);\n    $l = substr_count($s, '<');\n    $r = substr_count($s, '>');\n    if ($l > 0 && $l > $r) {\n        for ($i = $length; $i < $j; $i++) {\n            $s .= substr($source, $i, 1);\n            if (substr($source, $i, 1) == '>') {\n                break;\n            }\n        }\n    }\n\n    return $s;\n}\n\n/**\n * \u5220\u9664\u6587\u4ef6BOM\u5934.\n *\n * @param string $s \u6587\u4ef6\u5185\u5bb9\n *\n * @return string\n */\nfunction RemoveBOM($s)\n{\n    $charset = array();\n    $charset[1] = substr($s, 0, 1);\n    $charset[2] = substr($s, 1, 1);\n    $charset[3] = substr($s, 2, 1);\n    if (ord($charset[1]) == 239 && ord($charset[2]) == 187 && ord($charset[3]) == 191) {\n        $s = substr($s, 3);\n    }\n\n    return $s;\n}\n\n/**\n * \u83b7\u53d6\u6307\u5b9a\u65f6\u533a\u540d.\n *\n * @param int $z \u65f6\u533a\u53f7\n *\n * @return string \u65f6\u533a\u540d\n *\n * @since 1.3.140614\n */\nfunction GetTimeZoneByGMT($z)\n{\n    $timezones = array(\n        -12 => 'Etc/GMT+12',\n        -11 => 'Pacific/Midway',\n        -10 => 'Pacific/Honolulu',\n        -9  => 'America/Anchorage',\n        -8  => 'America/Los_Angeles',\n        -7  => 'America/Denver',\n        -6  => 'America/Tegucigalpa',\n        -5  => 'America/New_York',\n        -4  => 'America/Halifax',\n        -3  => 'America/Argentina/Buenos_Aires',\n        -2  => 'Atlantic/South_Georgia',\n        -1  => 'Atlantic/Azores',\n        0   => 'UTC',\n        1   => 'Europe/Berlin',\n        2   => 'Europe/Sofia',\n        3   => 'Africa/Nairobi',\n        4   => 'Europe/Moscow',\n        5   => 'Asia/Karachi',\n        6   => 'Asia/Dhaka',\n        7   => 'Asia/Bangkok',\n        8   => 'Asia/Shanghai',\n        9   => 'Asia/Tokyo',\n        10  => 'Pacific/Guam',\n        11  => 'Australia/Sydney',\n        12  => 'Pacific/Fiji',\n        13  => 'Pacific/Tongatapu',\n    );\n    if (!isset($timezones[$z])) {\n        return 'UTC';\n    }\n\n    return $timezones[$z];\n}\n\n/**\n * \u5bf9\u6570\u7ec4\u5185\u7684\u5b57\u7b26\u4e32\u8fdb\u884chtmlspecialchars.\n *\n * @param array $array \u5f85\u8fc7\u6ee4\u5b57\u7b26\u4e32\n *\n * @return array\n *\n * @since 1.4\n */\nfunction htmlspecialchars_array($array)\n{\n    $newArray = array();\n    foreach ($array as $key => $value) {\n        $newKey = htmlspecialchars($key);\n        if (is_array($value)) {\n            $newArray[$newKey] = htmlspecialchars_array($value);\n        } elseif (is_string($value)) {\n            $newArray[$newKey] = htmlspecialchars($value);\n        }\n    }\n\n    return $newArray;\n}\n\n/**\n * \u83b7\u5f97\u4e00\u4e2a\u53ea\u542b\u6570\u5b57\u5b57\u6bcd\u548c-\u7ebf\u7684string.\n *\n * @param string $s \u5f85\u8fc7\u6ee4\u5b57\u7b26\u4e32\n *\n * @return string|string[]\n *\n * @since 1.4\n */\nfunction FilterCorrectName($s)\n{\n    return preg_replace('|[^0-9a-zA-Z_/-]|', '', $s);\n}\n\n/**\n * \u786e\u8ba4\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u88ab\u8f6c\u6362\u4e3astring.\n *\n * @param object $obj\n *\n * @return bool\n *\n * @since 1.4\n */\nfunction CheckCanBeString($obj)\n{\n    // Fuck PHP 5.2!!!!\n    // return $obj === null || is_scalar($obj) || is_callable([$obj, '__toString']);\n    if (is_object($obj) && method_exists($obj, '__toString')) {\n        return true;\n    }\n\n    if ($obj === null) {\n        return true;\n    }\n\n    return is_scalar($obj);\n}\n\n/**\n * \u6784\u9020\u5e26Token\u7684\u5b89\u5168URL.\n *\n * @param string $url\n * @param string $appId \u5e94\u7528ID\uff0c\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5e94\u7528\u4e13\u5c5e\u7684Token\n *\n * @return string\n *\n * @since 1.5.2\n */\nfunction BuildSafeURL($url, $appId = '')\n{\n    global $zbp;\n    if (strpos($url, '?') !== false) {\n        $url .= '&csrfToken=';\n    } else {\n        $url .= '?csrfToken=';\n    }\n    if (substr($url, 0, 1) === '/') {\n        $url = $zbp->host . substr($url, 1);\n    }\n    $url = $url . $zbp->GetCSRFToken($appId);\n\n    return $url;\n}\n\n/**\n * \u6784\u9020cmd.php\u7684\u8bbf\u95ee\u94fe\u63a5.\n *\n * @param string $paramters cmd.php\u53c2\u6570\n *\n * @return bool\n *\n * @since 1.5.2\n */\nfunction BuildSafeCmdURL($paramters)\n{\n    return BuildSafeURL('/zb_system/cmd.php?' . $paramters);\n}\n\n/**\n * \u5b9e\u73b0utf84mb4\u7684\u8fc7\u6ee4\n *\n * @param string $sql\n *\n * @return string\n */\nfunction utf84mb_filter(&$sql)\n{\n    $sql = preg_replace_callback(\"/[\\x{10000}-\\x{10FFFF}]/u\", 'utf84mb_convertToUCS4', $sql);\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684fixHtmlSpecialChars\n *\n * @return string\n */\nfunction utf84mb_fixHtmlSpecialChars()\n{\n    global $article;\n    $article->Content = preg_replace_callback(\"/\\&\\#x([0-9A-Z]{2,6})\\;/u\", 'utf84mb_convertToUTF8', $article->Content);\n    $article->Intro = preg_replace_callback(\"/\\&\\#x([0-9A-Z]{2,6})\\;/u\", 'utf84mb_convertToUTF8', $article->Intro);\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684convertToUCS4\n *\n * @param string $matches\n *\n * @return string\n */\nfunction utf84mb_convertToUCS4($matches)\n{\n    return sprintf(\"&#x%s;\", ltrim(strtoupper(bin2hex(iconv('UTF-8', 'UCS-4', $matches[0]))), \"0\"));\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684convertToUTF8\n *\n * @param string $matches\n *\n * @return string\n */\nfunction utf84mb_convertToUTF8($matches)\n{\n    return iconv('UCS-4', 'UTF-8', hex2bin(str_pad($matches[1], 8, \"0\", STR_PAD_LEFT)));\n}\n\n/**\n * \u9a8c\u8bc1Web Token\u662f\u5426\u5408\u6cd5.\n *\n * @param $webTokenString\n * @param $webTokenId\n * @param string $key\n *\n * @return bool\n */\nfunction VerifyWebToken($webTokenString, $webTokenId, $key = '')\n{\n    global $zbp;\n    $args = array();\n    for ($i = 3; $i < func_num_args(); $i++) {\n        $args[] = func_get_arg($i);\n    }\n    $time = substr($webTokenString, 64);\n    $wt = substr($webTokenString, 0, 64);\n    if ($key == '') {\n        $key = $zbp->guid;\n    }\n    $sha = hash_hmac('sha256', $time . $webTokenId . implode($args), $key);\n    if ($wt === $sha) {\n        if ($time > time()) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * \u521b\u5efaWeb Token.\n *\n * @param $webTokenId\n * @param $time\n * @param string $key\n *\n * @return string\n */\nfunction CreateWebToken($webTokenId, $time, $key = '')\n{\n    global $zbp;\n    $args = array();\n    for ($i = 3; $i < func_num_args(); $i++) {\n        $args[] = func_get_arg($i);\n    }\n    if ($key == '') {\n        $key = $zbp->guid;\n    }\n    $time = (int) $time;\n    return hash_hmac('sha256', $time . $webTokenId . implode($args), $key) . $time;\n}\n\n/**\n * \u68c0\u6d4b\u6765\u6e90\u662f\u5426\u5408\u6cd5\uff0c\u8fd9\u5305\u62ecCSRF\u68c0\u6d4b\uff0c\u5728\u5f00\u542f\u589e\u5f3a\u5b89\u5168\u6a21\u5f0f\u65f6\u52a0\u5165\u6765\u6e90\u68c0\u6d4b.\n *\n * @throws Exception\n */\nfunction CheckIsRefererValid()\n{\n    global $zbp;\n    $flag = CheckCSRFTokenValid();\n    if ($flag && $zbp->option['ZC_ADDITIONAL_SECURITY']) {\n        $flag = CheckHTTPRefererValid();\n    }\n\n    if (!$flag) {\n        $zbp->ShowError(5, __FILE__, __LINE__);\n        exit;\n    }\n}\n\n/**\n * \u9a8c\u8bc1CSRF Token\u662f\u5426\u5408\u6cd5.\n *\n * @param string $fieldName\n * @param array  $methods\n *\n * @return bool\n */\nfunction CheckCSRFTokenValid($fieldName = 'csrfToken', $methods = array('get', 'post'))\n{\n    global $zbp;\n    $flag = false;\n    if (is_string($methods)) {\n        $methods = array($methods);\n    }\n    foreach ($methods as $method) {\n        if ($zbp->VerifyCSRFToken(GetVars($fieldName, $method))) {\n            $flag = true;\n            break;\n        }\n    }\n\n    return $flag;\n}\n\n/**\n * \u68c0\u6d4bHTTP Referer\u662f\u5426\u5408\u6cd5.\n *\n * @return bool\n */\nfunction CheckHTTPRefererValid()\n{\n    global $bloghost;\n    $referer = GetVars('HTTP_REFERER', 'SERVER');\n    if (trim($referer) === '') {\n        return true;\n    }\n    $s = $bloghost;\n    $s = str_replace(':80/', '/', $s);\n    $s = str_replace(':443/', '/', $s);\n    if (stripos($referer, $s) === false) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * \u6e05\u9664\u4e00\u4e32\u4ee3\u7801\u5185\u6240\u6709\u7684PHP\u4ee3\u7801\n *\n * @param string $code\n *\n * @return string\n */\nfunction RemovePHPCode($code)\n{\n    // PHP Start tags: <?php <? <?=\n    // PHP 5 supports: <% <script language=\"php\">\n    // Depends on PHP\n    $continue = true;\n    while ($continue) {\n        $tokens = token_get_all($code);\n        $continue = false;\n        foreach ($tokens as $tt) {\n            $name = is_numeric($tt[0]) ? token_name($tt[0]) : '';\n            if ($name === 'T_OPEN_TAG' || $name === 'T_OPEN_TAG_WITH_ECHO' || $name === 'T_CLOSE_TAG') {\n                $code = str_replace($tt[1], \"\", $code);\n                $continue = true;\n            }\n        }\n    }\n\n    return $code;\n}\n\n/**\n * \u62ff\u5230ID\u6570\u7ec4byList\u5217\u8868\n *\n * @param array $array\n * @param string $keyname\n *\n * @return array\n */\nfunction GetIDArrayByList($array, $keyname = null)\n{\n    $ids = array();\n    foreach ($array as $key => $value) {\n        if ($keyname == null) {\n            $ids[] = reset($value->GetData());\n        } else {\n            $a = $value->GetData();\n            $ids[] = $a[$keyname];\n        }\n    }\n\n    return $ids;\n}\n\n/**\n * \u62ff\u5230\u540e\u53f0\u7684CSP Heaeder\n *\n * @return string\n */\nfunction GetBackendCSPHeader()\n{\n    $defaultCSP = array(\n        'default-src' => \"'self' data: blob:\",\n        'img-src'     => \"* data: blob:\",\n        'media-src'   => \"* data: blob:\",\n        'script-src'  => \"'self' 'unsafe-inline' 'unsafe-eval'\",\n        'style-src'   => \"'self' 'unsafe-inline'\",\n    );\n    foreach ($GLOBALS['hooks']['Filter_Plugin_CSP_Backend'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($defaultCSP);\n    }\n    $ret = array();\n    foreach ($defaultCSP as $key => $value) {\n        $ret[] = $key . ' ' . $value;\n    }\n\n    return implode('; ', $ret);\n}\n\n/**\n * \u68c0\u67e5\u91cd\u590d\u52a0\u8f7d\u7684.\n *\n * @param string $file\n *\n * @return boolean\n */\nfunction CheckIncludedFiles($file)\n{\n    $a = get_included_files();\n    $file = str_replace('\\\\', '/', $file);\n    foreach ($a as $key => $value) {\n        $a[$key] = trim(str_replace('\\\\', '/', $value));\n    }\n\n    return in_array(trim($file), $a);\n}\n\n/**\n * Logs\u6307\u5b9a\u7684\u53d8\u91cf\u7684\u503c\n */\nfunction Logs_Dump()\n{\n    $a = func_get_args();\n    foreach ($a as $key => $value) {\n        $s = var_export($value, true);\n        Logs($s);\n    }\n}\n", "<?php\n\n/**\n * < PHP 5.2.7.\n */\nif (!defined('PHP_VERSION_ID')) {\n    $version = explode('.', PHP_VERSION);\n    define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));\n    unset($version);\n}\n\nif (!function_exists('fnmatch')) {\n    define('FNM_PATHNAME', 1);\n    define('FNM_NOESCAPE', 2);\n    define('FNM_PERIOD', 4);\n    define('FNM_CASEFOLD', 16);\n\n    function fnmatch($pattern, $string, $flags = 0)\n    {\n        return pcre_fnmatch($pattern, $string, $flags);\n    }\n\n    function pcre_fnmatch($pattern, $string, $flags = 0)\n    {\n        $modifiers = null;\n        $transforms = array(\n            '\\*'      => '.*',\n            '\\?'      => '.',\n            '\\[\\!'    => '[^',\n            '\\['      => '[',\n            '\\]'      => ']',\n            '\\.'      => '\\.',\n            '\\\\'      => '\\\\\\\\',\n        );\n\n        // Forward slash in string must be in pattern:\n        if (($flags & FNM_PATHNAME)) {\n            $transforms['\\*'] = '[^/]*';\n        }\n\n        // Back slash should not be escaped:\n        if (($flags & FNM_NOESCAPE)) {\n            unset($transforms['\\\\']);\n        }\n\n        // Perform case insensitive match:\n        if (($flags & FNM_CASEFOLD)) {\n            $modifiers .= 'i';\n        }\n\n        // Period at start must be the same as pattern:\n        if (($flags & FNM_PERIOD)) {\n            if (strpos($string, '.') === 0 && strpos($pattern, '.') !== 0) {\n                return false;\n            }\n        }\n\n        $pattern = '#^'\n            . strtr(preg_quote($pattern, '#'), $transforms)\n            . '$#'\n            . $modifiers;\n\n        return (bool) preg_match($pattern, $string);\n    }\n\n}\n\nif (!function_exists('hex2bin')) {\n\n    function hex2bin($str)\n    {\n        $sbin = \"\";\n        $len = strlen($str);\n        for ($i = 0; $i < $len; $i += 2) {\n            $sbin .= pack(\"H*\", substr($str, $i, 2));\n        }\n\n        return $sbin;\n    }\n\n}\n\nif (!function_exists('rrmdir')) {\n\n    function rrmdir($dir)\n    {\n        if (is_dir($dir)) {\n            if (function_exists('scandir')) {\n                $objects = scandir($dir);\n                foreach ($objects as $object) {\n                    if ($object != '.' && $object != '..') {\n                        if (filetype($dir . '/' . $object) == 'dir') {\n                            rrmdir($dir . '/' . $object);\n                        } else {\n                            unlink($dir . '/' . $object);\n                        }\n                    }\n                }\n                reset($objects);\n                rmdir($dir);\n            } else {\n                if ($handle = opendir($dir)) {\n                    while (false !== ($file = readdir($handle))) {\n                        if ($file != \".\" && $file != \"..\") {\n                            if (is_dir(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file)) {\n                                rrmdir(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file);\n                            } else {\n                                unlink(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file);\n                            }\n                        }\n                    }\n                    closedir($handle);\n                    rmdir($dir);\n                }\n            }\n        }\n    }\n\n}\n\n/*\n * URL constants as defined in the PHP Manual under \"Constants usable with\n * http_build_url()\".\n *\n * @see http://us2.php.net/manual/en/http.constants.php#http.constants.url\n * @see  https://github.com/jakeasmith/http_build_url/blob/master/src/http_build_url.php\n * @license  MIT\n */\nif (!defined('HTTP_URL_REPLACE')) {\n    define('HTTP_URL_REPLACE', 1);\n}\nif (!defined('HTTP_URL_JOIN_PATH')) {\n    define('HTTP_URL_JOIN_PATH', 2);\n}\nif (!defined('HTTP_URL_JOIN_QUERY')) {\n    define('HTTP_URL_JOIN_QUERY', 4);\n}\nif (!defined('HTTP_URL_STRIP_USER')) {\n    define('HTTP_URL_STRIP_USER', 8);\n}\nif (!defined('HTTP_URL_STRIP_PASS')) {\n    define('HTTP_URL_STRIP_PASS', 16);\n}\nif (!defined('HTTP_URL_STRIP_AUTH')) {\n    define('HTTP_URL_STRIP_AUTH', 32);\n}\nif (!defined('HTTP_URL_STRIP_PORT')) {\n    define('HTTP_URL_STRIP_PORT', 64);\n}\nif (!defined('HTTP_URL_STRIP_PATH')) {\n    define('HTTP_URL_STRIP_PATH', 128);\n}\nif (!defined('HTTP_URL_STRIP_QUERY')) {\n    define('HTTP_URL_STRIP_QUERY', 256);\n}\nif (!defined('HTTP_URL_STRIP_FRAGMENT')) {\n    define('HTTP_URL_STRIP_FRAGMENT', 512);\n}\nif (!defined('HTTP_URL_STRIP_ALL')) {\n    define('HTTP_URL_STRIP_ALL', 1024);\n}\n\nif (!function_exists('http_build_url')) {\n\n    /**\n     * Build a URL.\n     *\n     * The parts of the second URL will be merged into the first according to\n     * the flags argument.\n     *\n     * @param mixed $url     (part(s) of) an URL in form of a string or\n     *                       associative array like parse_url() returns\n     * @param mixed $parts   same as the first argument\n     * @param int   $flags   a bitmask of binary or'ed HTTP_URL constants;\n     *                       HTTP_URL_REPLACE is the default\n     * @param array $new_url if set, it will be filled with the parts of the\n     *                       composed url like parse_url() would return\n     *\n     * @return string\n     */\n    function http_build_url($url, $parts = array(), $flags = HTTP_URL_REPLACE, &$new_url = array())\n    {\n        is_array($url) || $url = parse_url($url);\n        is_array($parts) || $parts = parse_url($parts);\n        isset($url['query']) && is_string($url['query']) || $url['query'] = null;\n        isset($parts['query']) && is_string($parts['query']) || $parts['query'] = null;\n        $keys = array('user', 'pass', 'port', 'path', 'query', 'fragment');\n        // HTTP_URL_STRIP_ALL and HTTP_URL_STRIP_AUTH cover several other flags.\n        if (($flags & HTTP_URL_STRIP_ALL)) {\n            $flags |= (HTTP_URL_STRIP_USER | HTTP_URL_STRIP_PASS | HTTP_URL_STRIP_PORT | HTTP_URL_STRIP_PATH | HTTP_URL_STRIP_QUERY | HTTP_URL_STRIP_FRAGMENT);\n        } elseif (($flags & HTTP_URL_STRIP_AUTH)) {\n            $flags |= (HTTP_URL_STRIP_USER | HTTP_URL_STRIP_PASS);\n        }\n        // Schema and host are alwasy replaced\n        foreach (array('scheme', 'host') as $part) {\n            if (isset($parts[$part])) {\n                $url[$part] = $parts[$part];\n            }\n        }\n        if (($flags & HTTP_URL_REPLACE)) {\n            foreach ($keys as $key) {\n                if (isset($parts[$key])) {\n                    $url[$key] = $parts[$key];\n                }\n            }\n        } else {\n            if (isset($parts['path']) && ($flags & HTTP_URL_JOIN_PATH)) {\n                if (isset($url['path']) && substr($parts['path'], 0, 1) !== '/') {\n                    // Workaround for trailing slashes\n                    $url['path'] .= 'a';\n                    $url['path'] = rtrim(\n                        str_replace(basename($url['path']), '', $url['path']),\n                        '/'\n                    ) . '/' . ltrim($parts['path'], '/');\n                } else {\n                    $url['path'] = $parts['path'];\n                }\n            }\n            if (isset($parts['query']) && ($flags & HTTP_URL_JOIN_QUERY)) {\n                if (isset($url['query'])) {\n                    parse_str($url['query'], $url_query);\n                    parse_str($parts['query'], $parts_query);\n                    $url['query'] = http_build_query(\n                        array_replace_recursive(\n                            $url_query,\n                            $parts_query\n                        )\n                    );\n                } else {\n                    $url['query'] = $parts['query'];\n                }\n            }\n        }\n        if (isset($url['path']) && $url['path'] !== '' && substr($url['path'], 0, 1) !== '/') {\n            $url['path'] = '/' . $url['path'];\n        }\n        foreach ($keys as $key) {\n            $strip = 'HTTP_URL_STRIP_' . strtoupper($key);\n            if (($flags & constant($strip))) {\n                unset($url[$key]);\n            }\n        }\n        $parsed_string = '';\n        if (!empty($url['scheme'])) {\n            $parsed_string .= $url['scheme'] . '://';\n        }\n        if (!empty($url['user'])) {\n            $parsed_string .= $url['user'];\n            if (isset($url['pass'])) {\n                $parsed_string .= ':' . $url['pass'];\n            }\n            $parsed_string .= '@';\n        }\n        if (!empty($url['host'])) {\n            $parsed_string .= $url['host'];\n        }\n        if (!empty($url['port'])) {\n            $parsed_string .= ':' . $url['port'];\n        }\n        if (!empty($url['path'])) {\n            $parsed_string .= $url['path'];\n        }\n        if (!empty($url['query'])) {\n            $parsed_string .= '?' . $url['query'];\n        }\n        if (!empty($url['fragment'])) {\n            $parsed_string .= '#' . $url['fragment'];\n        }\n        $new_url = $url;\n\n        return $parsed_string;\n    }\n\n}\n\nif (!function_exists('gzdecode')) {\n\n    function gzdecode($data)\n    {\n        $len = strlen($data);\n        if ($len < 18 || strcmp(substr($data, 0, 2), \"\\x1f\\x8b\")) {\n            return;  // Not GZIP format (See RFC 1952)\n        }\n        $method = ord(substr($data, 2, 1));  // Compression method\n         $flags = ord(substr($data, 3, 1));  // Flags\n        if (($flags & 31) != $flags) {\n            // Reserved bits are set -- NOT ALLOWED by RFC 1952\n            return;\n        }\n        // NOTE: $mtime may be negative (PHP integer limitations)\n        $mtime = unpack(\"V\", substr($data, 4, 4));\n        $mtime = $mtime[1];\n        $xfl = substr($data, 8, 1);\n        $os = substr($data, 8, 1);\n        $headerlen = 10;\n        $extralen = 0;\n        $extra = \"\";\n        if (($flags & 4)) {\n            // 2-byte length prefixed EXTRA data in header\n            if (($len - $headerlen - 2) < 8) {\n                return false;    // Invalid format\n            }\n            $extralen = unpack(\"v\", substr($data, 8, 2));\n            $extralen = $extralen[1];\n            if (($len - $headerlen - 2 - $extralen) < 8) {\n                return false;    // Invalid format\n            }\n            $extra = substr($data, 10, $extralen);\n            $headerlen += (2 + $extralen);\n        }\n\n        $filenamelen = 0;\n        $filename = \"\";\n        if (($flags & 8)) {\n            // C-style string file NAME data in header\n            if (($len - $headerlen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $filenamelen = strpos(substr($data, (8 + $extralen)), chr(0));\n            if ($filenamelen === false || ($len - $headerlen - $filenamelen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $filename = substr($data, $headerlen, $filenamelen);\n            $headerlen += ($filenamelen + 1);\n        }\n\n        $commentlen = 0;\n        $comment = \"\";\n        if (($flags & 16)) {\n            // C-style string COMMENT data in header\n            if (($len - $headerlen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $commentlen = strpos(substr($data, (8 + $extralen + $filenamelen)), chr(0));\n            if ($commentlen === false || ($len - $headerlen - $commentlen - 1) < 8) {\n                return false;    // Invalid header format\n            }\n            $comment = substr($data, $headerlen, $commentlen);\n            $headerlen += ($commentlen + 1);\n        }\n\n        $headercrc = \"\";\n        if (($flags & 2)) {\n            // 2-bytes (lowest order) of CRC32 on header present\n            if (($len - $headerlen - 2) < 8) {\n                return false;    // Invalid format\n            }\n            $calccrc = (crc32(substr($data, 0, $headerlen)) & 0xffff);\n            $headercrc = unpack(\"v\", substr($data, $headerlen, 2));\n            $headercrc = $headercrc[1];\n            if ($headercrc != $calccrc) {\n                return false;    // Bad header CRC\n            }\n            $headerlen += 2;\n        }\n\n        // GZIP FOOTER - These be negative due to PHP's limitations\n        $datacrc = unpack(\"V\", substr($data, -8, 4));\n        $datacrc = $datacrc[1];\n        $isize = unpack(\"V\", substr($data, -4));\n        $isize = $isize[1];\n\n        // Perform the decompression:\n        $bodylen = ($len - $headerlen - 8);\n        if ($bodylen < 1) {\n            // This should never happen - IMPLEMENTATION BUG!\n            return;\n        }\n        $body = substr($data, $headerlen, $bodylen);\n        $data = \"\";\n        if ($bodylen > 0) {\n            switch ($method) {\n                case 8:\n                    // Currently the only supported compression method:\n                    $data = gzinflate($body);\n                    break;\n                default:\n                    // Unknown compression method\n                    return false;\n            }\n        } else {\n            // I'm not sure if zero-byte body content is allowed.\n            // Allow it for now...  Do nothing...\n        }\n\n        // Verifiy decompressed size and CRC32:\n        // NOTE: This may fail with large data sizes depending on how\n        //       PHP's integer limitations affect strlen() since $isize\n        //       may be negative for large sizes.\n        if ($isize != strlen($data) || crc32($data) != $datacrc) {\n            // Bad format!  Length or CRC doesn't match!\n            return false;\n        }\n\n        return $data;\n    }\n\n}\n\nif (!function_exists('session_status')) {\n\n    function session_status()\n    {\n        if (!extension_loaded('session')) {\n            return 0;\n        } elseif (!session_id()) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n}\n\nif (!function_exists('array_replace_recursive')) {\n\n    function array_replace_recursive($array, $array1)\n    {\n\n        function recurse($array, $array1)\n        {\n            foreach ($array1 as $key => $value) {\n                // create new key in $array, if it is empty or not an array\n                if (!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key]))) {\n                    $array[$key] = array();\n                }\n\n                // overwrite the value in the base array\n                if (is_array($value)) {\n                    $value = recurse($array[$key], $value);\n                }\n                $array[$key] = $value;\n            }\n\n            return $array;\n        }\n\n        // handle the arguments, merge one by one\n        $args = func_get_args();\n        $array = $args[0];\n        if (!is_array($array)) {\n            return $array;\n        }\n        for ($i = 1; $i < count($args); $i++) {\n            if (is_array($args[$i])) {\n                $array = recurse($array, $args[$i]);\n            }\n        }\n\n        return $array;\n    }\n\n}\n", "<?php\n\nif (!defined('ZBP_PATH')) {\n    exit('Access denied');\n}\n/**\n * zbp\u5168\u5c40\u64cd\u4f5c\u7c7b.\n */\nclass ZBlogPHP\n{\n\n    private static $private_zbp = null;\n\n    /**\n     * @var string \u7248\u672c\u53f7\n     */\n    public $version = null;\n\n    /**\n     * @var Database__Interface \u6570\u636e\u5e93\n     */\n    public $db = null;\n\n    /**\n     * @var array \u914d\u7f6e\u9009\u9879\n     */\n    public $option = array();\n\n    /**\n     * @var array \u8bed\u8a00\n     */\n    public $lang = array();\n\n    /**\n     * @var json\u7c7b\u578b \u8bed\u8a00\n     */\n    public $langs = null;\n\n    /**\n     * @var array \u8bed\u8a00\u5305list\n     */\n    public $langpacklist = array();\n\n    /**\n     * @var string \u8def\u5f84\n     */\n    public $path = null;\n\n    /**\n     * @var string \u57df\u540d\n     */\n    public $host = null;\n\n    /**\n     * @var string cookie\u4f5c\u7528\u57df\n     */\n    public $cookiespath = null;\n\n    /**\n     * @var string guid\n     */\n    public $guid = null;\n\n    /**\n     * @var string \u5f53\u524d\u94fe\u63a5\n     */\n    public $currenturl = null;\n\n    /**\n     * @var string \u5f53\u524d\u94fe\u63a5\n     */\n    public $fullcurrenturl = null;\n\n    /**\n     * @var string \u7528\u6237\u76ee\u5f55\n     */\n    public $usersdir = null;\n\n    /**\n     * @var string \u9a8c\u8bc1\u7801\u5730\u5740\n     */\n    public $verifyCodeUrl = null;\n\n    /**\n     * @var string \u9a8c\u8bc1\u7801\u5730\u5740\uff08\u62fc\u5199\u9519\u8bef\uff09\n     *\n     * @deprecated\n     */\n    public $validcodeurl = null;\n\n    /**\n     * @var string\n     */\n    public $feedurl = null;\n\n    /**\n     * @var string\n     */\n    public $searchurl = null;\n\n    /**\n     * @var string\n     */\n    public $ajaxurl = null;\n\n    /**\n     * @var string\n     */\n    public $xmlrpcurl = null;\n\n    /**\n     * @var string\n     */\n    public $apiurl = null;\n\n    /**\n     * @var Member[] \u7528\u6237\u6570\u7ec4\n     */\n    public $members = array();\n\n    /**\n     * @var Member[] \u7528\u6237\u6570\u7ec4\uff08\u4ee5\u7528\u6237\u540d\u4e3a\u952e\uff09\n     */\n    public $membersbyname = array();\n\n    /**\n     * @var Category[] \u5206\u7c7b\u6570\u7ec4\n     */\n    public $categorys = array();\n\n    public $categories = null;\n\n    /**\n     * @var Category[] \u5206\u7c7b\u6570\u7ec4\uff08\u5df2\u6392\u5e8f\uff09\n     */\n    public $categorysbyorder = array();\n\n    public $categoriesbyorder = null;\n\n    /**\n     * @var Module[] \u6a21\u5757\u6570\u7ec4\n     */\n    public $modules = array();\n\n    /**\n     * @var Module[] \u6a21\u5757\u6570\u7ec4\uff08\u4ee5\u6587\u4ef6\u540d\u4e3a\u952e\uff09\n     */\n    public $modulesbyfilename = array();\n\n    /**\n     * @var Config[] \u914d\u7f6e\u9009\u9879\n     */\n    public $configs = array();\n\n    /**\n     * @var Tag[] \u6807\u7b7e\u6570\u7ec4\n     */\n    public $tags = array();\n\n    /**\n     * @var Tag[] \u6807\u7b7e\u6570\u7ec4\uff08\u4ee5\u6807\u7b7e\u540d\u4e3a\u952e\uff09\n     */\n    public $tagsbyname = array();\n\n    /**\n     * @var Comment[] \u8bc4\u8bba\u6570\u7ec4\n     */\n    public $comments = array();\n\n    /**\n     * @var Post[] \u6587\u7ae0\u5217\u8868\u6570\u7ec4\n     */\n    public $posts = array();\n\n    /**\n     * @var string \u5f53\u524d\u9875\u9762\u6807\u9898\n     */\n    public $title = null;\n\n    /**\n     * @var string \u7f51\u7ad9\u540d\n     */\n    public $name = null;\n\n    /**\n     * @var string \u7f51\u7ad9\u5b50\u6807\u9898\n     */\n    public $subname = null;\n\n    /**\n     * @var App \u5f53\u524d\u4e3b\u9898\n     */\n    public $theme = null;\n\n    /**\n     * @var array() \u5f53\u524d\u4e3b\u9898\u7248\u672c\u4fe1\u606f\n     */\n    public $themeinfo = array();\n\n    /**\n     * @var string \u5f53\u524d\u4e3b\u9898\u98ce\u683c\n     */\n    public $style = null;\n\n    /**\n     * @var Member \u5f53\u524d\u7528\u6237\n     */\n    public $user = null;\n\n    /**\n     * @var Config \u7f13\u5b58\n     */\n    public $cache = null;\n\n    /**\n     * @var array|null \u6570\u636e\u8868\n     */\n    public $table = null;\n\n    public $t = null;\n\n    /**\n     * @var array|null \u6570\u636e\u8868\u4fe1\u606f\n     */\n    public $datainfo = null;\n\n    public $d = null;\n\n    /**\n     * @var array|null \u7c7b\u578b\u5e8f\u5217\n     */\n    public $posttype = null;\n\n    /**\n     * @var array|null \u64cd\u4f5c\u5217\u8868\n     */\n    public $actions = null;\n\n    /**\n     * @var mixed|null|string \u5f53\u524d\u64cd\u4f5c\n     */\n    public $action = null;\n\n    private $isinitialized = false; //\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\n\n    private $isconnected = false; //\u662f\u5426\u8fde\u63a5\u6210\u529f\n\n    private $isload = false; //\u662f\u5426\u8f7d\u5165\n\n    private $issession = false; //\u662f\u5426\u4f7f\u7528session\n\n    public $ismanage = false; //\u662f\u5426\u52a0\u8f7d\u7ba1\u7406\u6a21\u5f0f\n\n    private $isGzip = false; //\u662f\u5426\u5f00\u542fgzip\n\n    public $isHttps = false; //\u662f\u5426HTTPS\n\n    /**\n     * @var Template \u5f53\u524d\u6a21\u677f\n     */\n    public $template = null;\n\n    /**\n     * @var null \u793e\u4f1a\u5316\u8bc4\u8bba\n     */\n    public $socialcomment = null;\n\n    /**\n     * @var null \u6a21\u677f\u5934\u90e8\n     */\n    public $header = null;\n\n    /**\n     * @var null \u6a21\u677f\u5c3e\u90e8\n     */\n    public $footer = null;\n\n    /**\n     * @var array \u6fc0\u6d3b\u7684\u63d2\u4ef6\u5217\u8868\n     */\n    public $activedapps = array();\n\n    public $activeapps;\n\n    /**\n     * @var int \u7ba1\u7406\u9875\u9762\u663e\u793a\u6761\u6570\n     */\n    public $managecount = 50;\n\n    /**\n     * @var int \u9875\u7801\u663e\u793a\u6761\u6570\n     */\n    public $pagebarcount = 10;\n\n    /**\n     * @var int \u641c\u7d22\u8fd4\u56de\u6761\u6570\n     */\n    public $searchcount = 10;\n\n    /**\n     * @var int \u6587\u7ae0\u5217\u8868\u663e\u793a\u6761\u6570\n     */\n    public $displaycount = 10;\n\n    /**\n     * @var int \u8bc4\u8bba\u663e\u793a\u6570\u91cf\n     */\n    public $commentdisplaycount = 10;\n\n    /**\n     * @var int \u5f53\u524d\u5b9e\u4f8b\u4e0bCSRF Token\u8fc7\u671f\u65f6\u95f4\uff08\u5c0f\u65f6\uff09\n     */\n    public $csrfExpiration = 1;\n\n    /**\n     * @var App \u5f53\u524d\u4e3b\u9898\u7c7b\n     */\n    public $themeapp = null;\n\n    /**\n     * @var \u5206\u7c7b\u9012\u5f52\u5c42\u6570\n     */\n    public $category_recursion_level = 5;\n\n    /**\n     * @var \u8bc4\u8bba\u9012\u5f52\u5c42\u6570\n     */\n    public $comment_recursion_level = 4;\n\n    const OPTION_RESERVE_KEYS = 'ZC_DATABASE_TYPE|ZC_SQLITE_NAME|ZC_SQLITE_PRE|ZC_MYSQL_SERVER|ZC_MYSQL_USERNAME|ZC_MYSQL_PASSWORD|ZC_MYSQL_NAME|ZC_MYSQL_CHARSET|ZC_MYSQL_COLLATE|ZC_MYSQL_PRE|ZC_MYSQL_ENGINE|ZC_MYSQL_PORT|ZC_MYSQL_PERSISTENT|ZC_MYSQL_PORT|ZC_PGSQL_SERVER|ZC_PGSQL_USERNAME|ZC_PGSQL_PASSWORD|ZC_PGSQL_NAME|ZC_PGSQL_CHARSET|ZC_PGSQL_PRE|ZC_PGSQL_PORT|ZC_PGSQL_PERSISTENT|ZC_CLOSE_WHOLE_SITE|ZC_PERMANENT_DOMAIN_FORCED_URL|ZC_PERMANENT_DOMAIN_WHOLE_DISABLE';\n\n    /**\n     * \u83b7\u53d6\u552f\u4e00\u5b9e\u4f8b.\n     *\n     * @return null|ZBlogPHP\n     */\n    public static function GetInstance()\n    {\n        if (!isset(self::$private_zbp)) {\n            if (isset($GLOBALS['option']['ZC_GODZBP_FILE']) && isset($GLOBALS['option']['ZC_GODZBP_NAME']) && is_readable(ZBP_PATH . $GLOBALS['option']['ZC_GODZBP_FILE'])) {\n                include ZBP_PATH . $GLOBALS['option']['ZC_GODZBP_FILE'];\n                self::$private_zbp = new $GLOBALS['option']['ZC_GODZBP_NAME']();\n            } else {\n                self::$private_zbp = new self();\n            }\n        }\n\n        return self::$private_zbp;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5.\n     *\n     * @param string $type \u6570\u636e\u8fde\u63a5\u7c7b\u578b\n     *\n     * @return Database__Interface\n     */\n    public static function InitializeDB($type)\n    {\n        if (!trim($type)) {\n            return;\n        }\n\n        $newtype = 'Database__' . trim($type);\n\n        return new $newtype();\n    }\n\n    /**\n     * \u6784\u9020\u51fd\u6570\uff0c\u52a0\u8f7d\u57fa\u672c\u914d\u7f6e\u5230$zbp.\n     */\n    public function __construct()\n    {\n        global $option, $lang, $langs, $blogpath, $bloghost, $cookiespath, $usersdir, $table,\n            $datainfo, $actions, $action, $blogversion, $blogtitle, $blogname, $blogsubname,\n            $blogtheme, $blogstyle, $currenturl, $activedapps, $posttype;\n\n        if (ZBP_HOOKERROR) {\n            ZBlogException::SetErrorHook();\n        }\n\n        //\u57fa\u672c\u914d\u7f6e\u52a0\u8f7d\u5230$zbp\u5185\n        $this->version = &$blogversion;\n        $this->option = &$option;\n        $this->lang = &$lang;\n        $this->langs = &$langs;\n        $this->path = &$blogpath;\n        $this->host = &$bloghost; //\u6b64\u503c\u5728\u540e\u8fb9\u521d\u59cb\u5316\u65f6\u53ef\u80fd\u4f1a\u53d8\u5316!\n        $this->cookiespath = &$cookiespath;\n        $this->usersdir = &$usersdir;\n\n        $this->table = &$table;\n        $this->datainfo = &$datainfo;\n        $this->t = &$this->table;\n        $this->d = &$this->datainfo;\n        $this->actions = &$actions;\n        $this->posttype = &$posttype;\n        $this->currenturl = &$currenturl;\n\n        $this->action = &$action;\n        $this->activedapps = &$activedapps;\n        $this->activeapps = &$this->activedapps;\n\n        $this->guid = &$this->option['ZC_BLOG_CLSID'];\n\n        $this->title = &$blogtitle;\n        $this->name = &$blogname;\n        $this->subname = &$blogsubname;\n        $this->theme = &$blogtheme;\n        $this->style = &$blogstyle;\n\n        $this->managecount = &$this->option['ZC_MANAGE_COUNT'];\n        $this->pagebarcount = &$this->option['ZC_PAGEBAR_COUNT'];\n        $this->searchcount = &$this->option['ZC_SEARCH_COUNT'];\n        $this->displaycount = &$this->option['ZC_DISPLAY_COUNT'];\n        $this->commentdisplaycount = &$this->option['ZC_COMMENTS_DISPLAY_COUNT'];\n\n        $this->categories = &$this->categorys;\n        $this->categoriesbyorder = &$this->categorysbyorder;\n\n        $this->user = new stdClass();\n        foreach ($this->datainfo['Member'] as $key => $value) {\n            $this->user->$key = $value[3];\n        }\n        $this->user->Metas = new Metas();\n    }\n\n    /**\n     *\u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u8d44\u6e90.\n     */\n    public function __destruct()\n    {\n        $this->Terminate();\n    }\n\n    /**\n     * @api Filter_Plugin_Zbp_Call\n     *\n     * @param $method\n     * @param $args\n     *\n     * @return mixed\n     */\n    public function __call($method, $args)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Call'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($method, $args);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u8bbe\u7f6e\u53c2\u6570\u503c\n     *\n     * @param $name\n     * @param $value\n     *\n     * @return mixed\n     */\n    public function __set($name, $value)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Set'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($name, $value);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u83b7\u53d6\u53c2\u6570\u503c\n     *\n     * @param $name\n     *\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Get'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($name);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u521d\u59cb\u5316$zbp.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function Initialize()\n    {\n        $oldZone = $this->option['ZC_TIME_ZONE_NAME'];\n        date_default_timezone_set($oldZone);\n\n        $oldLang = $this->option['ZC_BLOG_LANGUAGEPACK'];\n        $this->LoadLanguage('system', '');\n\n        if ($this->option['ZC_CLOSE_WHOLE_SITE'] == true) {\n            Http503();\n            $this->ShowError(82, __FILE__, __LINE__);\n\n            return false;\n        }\n\n        if (!$this->OpenConnect()) {\n            return false;\n        }\n\n        $this->ConvertTableAndDatainfo();\n\n        $this->LoadConfigsOnlySystem(true);\n        $this->LoadOption();\n\n        $this->RegPostType(0, 'article', $this->option['ZC_ARTICLE_REGEX'], $this->option['ZC_POST_DEFAULT_TEMPLATE'], 0, 0);\n        $this->RegPostType(1, 'page', $this->option['ZC_PAGE_REGEX'], $this->option['ZC_POST_DEFAULT_TEMPLATE'], null, null);\n\n        if ($this->option['ZC_BLOG_LANGUAGEPACK'] === 'SimpChinese') {\n            $this->option['ZC_BLOG_LANGUAGEPACK'] = 'zh-cn';\n        }\n\n        if ($this->option['ZC_BLOG_LANGUAGEPACK'] === 'TradChinese') {\n            $this->option['ZC_BLOG_LANGUAGEPACK'] = 'zh-tw';\n        }\n\n        if ($oldLang != $this->option['ZC_BLOG_LANGUAGEPACK']) {\n            $this->LoadLanguage('system', '');\n        }\n\n        if (isset($this->option['ZC_DEBUG_MODE_WARNING'])) {\n            ZBlogException::$iswarning = (bool) $this->option['ZC_DEBUG_MODE_WARNING'];\n        }\n        if (isset($this->option['ZC_DEBUG_MODE_STRICT'])) {\n            ZBlogException::$isstrict = (bool) $this->option['ZC_DEBUG_MODE_STRICT'];\n        }\n        if (isset($this->option['ZC_DEBUG_LOG_ERROR'])) {\n            ZBlogException::$islogerror = (bool) $this->option['ZC_DEBUG_LOG_ERROR'];\n        }\n\n        //ZC_PERMANENT_DOMAIN_WHOLE_DISABLE\u4e0d\u5b58\u5728 \u6216\u662f ZC_PERMANENT_DOMAIN_WHOLE_DISABLE\u5b58\u5728\u4f46\u4e3a\u5047\n        $domain_disable = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_WHOLE_DISABLE');\n        if ($domain_disable == false) {\n            $forced_url = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_FORCED_URL');\n            if ($forced_url != '') {\n                //\u5982\u679cZC_PERMANENT_DOMAIN_FORCED_URL\u5b58\u5728 \u4e14\u4e0d\u4e3a\u7a7a\n                $this->host = (string) $forced_url;\n                $this->cookiespath = strstr(str_replace('://', '', $this->host), '/');\n            } elseif ($this->option['ZC_PERMANENT_DOMAIN_ENABLE'] == true) {\n                //\u5982\u679cZC_PERMANENT_DOMAIN_ENABLE\u5df2\u5f00\u542f\u7684\u8bdd\n                $this->host = $this->option['ZC_BLOG_HOST'];\n                $this->cookiespath = strstr(str_replace('://', '', $this->host), '/');\n            } else {\n                //\u9ed8\u8ba4\u81ea\u52a8\u8bc6\u522b\u57df\u540d\n                $this->option['ZC_BLOG_HOST'] = $this->host;\n            }\n        } else {\n            $this->option['ZC_BLOG_HOST'] = $this->host;\n        }\n\n        $this->option['ZC_BLOG_PRODUCT'] = 'Z-BlogPHP';\n        $this->option['ZC_BLOG_VERSION'] = ZC_BLOG_VERSION;\n        $this->option['ZC_NOW_VERSION'] = $this->version;  //ZC_LAST_VERSION\n        $this->option['ZC_BLOG_PRODUCT_FULL'] = $this->option['ZC_BLOG_PRODUCT'] . ' ' . ZC_VERSION_DISPLAY;\n        $this->option['ZC_BLOG_PRODUCT_FULLHTML'] = '<a href=\"https://www.zblogcn.com/\" title=\"Z-BlogPHP ' . ZC_BLOG_VERSION . '\" target=\"_blank\">' . $this->option['ZC_BLOG_PRODUCT_FULL'] . '</a>';\n        $this->option['ZC_BLOG_PRODUCT_HTML'] = '<a href=\"https://www.zblogcn.com/\" title=\"Z-BlogPHP ' . ZC_BLOG_VERSION . '\" target=\"_blank\">' . $this->option['ZC_BLOG_PRODUCT'] . '</a>';\n\n        if ($oldZone != $this->option['ZC_TIME_ZONE_NAME']) {\n            date_default_timezone_set($this->option['ZC_TIME_ZONE_NAME']);\n        }\n\n        /*if(isset($_COOKIE['timezone'])){\n            $tz=GetVars('timezone','COOKIE');\n            if(is_numeric($tz)){\n            $tz=sprintf('%+d',-$tz);\n            date_default_timezone_set('Etc/GMT' . $tz);\n            $this->timezone=date_default_timezone_get();\n            }\n        */\n\n        if ($this->option['ZC_VERSION_IN_HEADER'] && !headers_sent()) {\n            header('Product:' . $this->option['ZC_BLOG_PRODUCT_FULL']);\n        }\n\n        $parsedHost = parse_url($this->host);\n        $this->fullcurrenturl = $parsedHost['scheme'] . '://' . $parsedHost['host'] . $this->currenturl;\n        if (substr($this->host, 0, 8) == 'https://') {\n            $this->isHttps = true;\n        }\n\n        $this->verifyCodeUrl = $this->host . 'zb_system/script/c_validcode.php';\n        $this->validcodeurl = &$this->verifyCodeUrl;\n        $this->feedurl = $this->host . 'feed.php';\n        $this->searchurl = $this->host . 'search.php';\n        $this->ajaxurl = $this->host . 'zb_system/cmd.php?act=ajax&src=';\n        $this->xmlrpcurl = $this->host . 'zb_system/xml-rpc/index.php';\n        $this->apiurl = $this->host . 'zb_system/api/index.php';\n\n        $this->LoadConfigsOnlySystem(false);\n\n        $this->LoadCache();\n\n        $this->isinitialized = true;\n\n        return true;\n    }\n\n    /**\n     * \u4ece\u6570\u636e\u5e93\u91cc\u8bfb\u53d6\u4fe1\u606f\uff0c\u542f\u52a8\u6574\u4e2aZBP.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function Load()\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Load_Pre'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname();\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n\n        if (!$this->isinitialized) {\n            return false;\n        }\n\n        if ($this->isload) {\n            return false;\n        }\n\n        if (!headers_sent()) {\n            header('Content-type: text/html; charset=utf-8');\n        }\n\n        $this->ConvertTableAndDatainfo();\n        if ($this->option['ZC_LOADMEMBERS_LEVEL'] == 0) {\n            $this->option['ZC_LOADMEMBERS_LEVEL'] = 1;\n        }\n        $this->LoadMembers($this->option['ZC_LOADMEMBERS_LEVEL']);\n        $this->LoadCategories();\n        //$this->LoadTags();\n        $this->LoadModules();\n        $this->RegBuildModules();\n\n        if (!(get_class($this->user) === 'Member' && $this->user->Level > 0 && !empty($this->user->ID))) {\n            $this->Verify();\n        }\n\n        //\u521b\u5efa\u6a21\u677f\u7c7b\n        $this->template = $this->PrepareTemplate();\n\n        // \u8bfb\u4e3b\u9898\u7248\u672c\u4fe1\u606f\n        $this->themeapp = $this->LoadApp('theme', $this->theme);\n        $this->themeinfo = $this->themeapp->GetInfoArray();\n\n        if ($this->ismanage) {\n            $this->LoadManage();\n        }\n\n        Add_Filter_Plugin('Filter_Plugin_Login_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_Other_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_Admin_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_BatchPost', 'Include_BatchPost_Article');\n        Add_Filter_Plugin('Filter_Plugin_BatchPost', 'Include_BatchPost_Page');\n        Add_Filter_Plugin('Filter_Plugin_Index_End', 'Include_Index_End');\n        Add_Filter_Plugin('Filter_Plugin_Search_End', 'Include_Index_End');\n        Add_Filter_Plugin('Filter_Plugin_Index_Begin', 'Include_Index_Begin');\n        Add_Filter_Plugin('Filter_Plugin_Search_Begin', 'Include_Index_Begin');\n        Add_Filter_Plugin('Filter_Plugin_Feed_Begin', 'Include_Index_Begin');\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Load'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n\n        //\u8fdb\u540e\u53f0\u65f6\u5df2\u81ea\u52a8\u68c0\u6d4b\u6a21\u677f\u5e76\u81ea\u52a8\u91cd\u5efa\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u9488\u5bf9\u5f00\u8c03\u8bd5\u540e\u7684\u524d\u53f0\u7684\u8bbf\u95ee\u8fdb\u884c\n        if ($this->option['ZC_DEBUG_MODE'] && $this->ismanage == false) {\n            $this->CheckTemplate();\n        }\n\n        $this->ReflushLanguages();\n        $this->ConvertTableAndDatainfo();\n\n        $this->isload = true;\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u7ba1\u7406.\n     *\n     * @throws Exception\n     */\n    public function LoadManage()\n    {\n        if ($this->user->Status == ZC_MEMBER_STATUS_AUDITING) {\n            $this->ShowError(79, __FILE__, __LINE__);\n        }\n\n        if ($this->user->Status == ZC_MEMBER_STATUS_LOCKED) {\n            $this->ShowError(80, __FILE__, __LINE__);\n        }\n\n        Add_Filter_Plugin('Filter_Plugin_Admin_PageMng_SubMenu', 'Include_Admin_Addpagesubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_TagMng_SubMenu', 'Include_Admin_Addtagsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_CategoryMng_SubMenu', 'Include_Admin_Addcatesubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_MemberMng_SubMenu', 'Include_Admin_Addmemsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_ModuleMng_SubMenu', 'Include_Admin_Addmodsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_CommentMng_SubMenu', 'Include_Admin_Addcmtsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Zbp_LoadManage', 'Include_Admin_UpdateDB');\n        Add_Filter_Plugin('Filter_Plugin_Admin_End', 'Include_Admin_CheckHttp304OK');\n\n        $this->CheckTemplate();\n\n        if (isset($GLOBALS['zbpvers'])) {\n            $GLOBALS['zbpvers'][$GLOBALS['blogversion']] = ZC_VERSION_DISPLAY . ' Build ' . $GLOBALS['blogversion'];\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_LoadManage'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n    }\n\n    /**\n     * \u7ec8\u6b62\u8fde\u63a5\uff0c\u91ca\u653e\u8d44\u6e90.\n     */\n    public function Terminate()\n    {\n        if ($this->isinitialized) {\n            foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Terminate'] as $fpname => &$fpsignal) {\n                $fpname();\n            }\n\n            $this->CloseConnect();\n            unset($this->db);\n            $this->isinitialized = false;\n        }\n    }\n\n    /**\n     * \u8fde\u63a5\u6570\u636e\u5e93.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function OpenConnect()\n    {\n        if ($this->isconnected) {\n            return false;\n        }\n\n        if (!$this->option['ZC_DATABASE_TYPE']) {\n            return false;\n        }\n\n        switch ($this->option['ZC_DATABASE_TYPE']) {\n            case 'sqlite':\n            case 'sqlite3':\n            case 'pdo_sqlite':\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array($this->usersdir . 'data/' . $this->option['ZC_SQLITE_NAME'],\n                        $this->option['ZC_SQLITE_PRE'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(69, __FILE__, __LINE__);\n                }\n                break;\n            case 'postgresql':\n            case 'pdo_postgresql':\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array($this->option['ZC_PGSQL_SERVER'],\n                        $this->option['ZC_PGSQL_USERNAME'],\n                        $this->option['ZC_PGSQL_PASSWORD'],\n                        $this->option['ZC_PGSQL_NAME'],\n                        $this->option['ZC_PGSQL_PRE'],\n                        $this->option['ZC_PGSQL_PORT'],\n                        $this->option['ZC_PGSQL_PERSISTENT'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(67, __FILE__, __LINE__);\n                }\n                break;\n            case 'mysql':\n            case 'mysqli':\n            case 'pdo_mysql':\n            default:\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array(\n                        $this->option['ZC_MYSQL_SERVER'],\n                        $this->option['ZC_MYSQL_USERNAME'],\n                        $this->option['ZC_MYSQL_PASSWORD'],\n                        $this->option['ZC_MYSQL_NAME'],\n                        $this->option['ZC_MYSQL_PRE'],\n                        $this->option['ZC_MYSQL_PORT'],\n                        $this->option['ZC_MYSQL_PERSISTENT'],\n                        $this->option['ZC_MYSQL_ENGINE'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(67, __FILE__, __LINE__);\n                }\n                break;\n        }\n        // utf8mb4\u652f\u6301\n        if ($this->db->type == 'mysql' && version_compare($this->db->version, '5.5.3') < 0) {\n            Add_Filter_Plugin('Filter_Plugin_DbSql_Filter', 'utf84mb_filter');\n            Add_Filter_Plugin('Filter_Plugin_Edit_Begin', 'utf84mb_fixHtmlSpecialChars');\n        }\n        $this->isconnected = true;\n\n        return true;\n    }\n\n    /**\n     * \u5bf9\u8868\u540d\u548c\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u9884\u8f6c\u6362.\n     */\n    public function ConvertTableAndDatainfo()\n    {\n        if ($this->db->dbpre) {\n            $this->table = str_replace('%pre%', $this->db->dbpre, $this->table);\n        }\n        if ($this->db->type === 'postgresql') {\n            foreach ($this->datainfo as $key => &$value) {\n                foreach ($value as $k2 => &$v2) {\n                    $v2[0] = strtolower($v2[0]);\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5.\n     */\n    public function CloseConnect()\n    {\n        if ($this->isconnected) {\n            $this->db->Close();\n            $this->isconnected = false;\n        }\n    }\n\n    /**\n     * \u542f\u7528session.\n     *\n     * @return bool\n     */\n    public function StartSession()\n    {\n        if (session_status() == 1) {\n            session_start();\n            $this->issession = true;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * \u7ec8\u6b62session.\n     *\n     * @return bool\n     */\n    public function EndSession()\n    {\n        if (session_status() == 2) {\n            session_write_close();\n            $this->issession = false;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Load or ReLoad\u63d2\u4ef6Configs\u8868.\n     */\n    public function LoadConfigs()\n    {\n        $this->LoadConfigsOnlySystem(true);\n        $this->LoadConfigsOnlySystem(false);\n    }\n\n    /**\n     * \u8f7d\u5165\u63d2\u4ef6Configs\u8868 Only System Option.\n     */\n    private $prvConfigList = null;\n\n    public function LoadConfigsOnlySystem($onlysystemoption = true)\n    {\n        if ($onlysystemoption == true) {\n            $this->configs = array();\n            $this->prvConfigList = array();\n\n            $sql = $this->db->sql->get()->select($this->table['Config']);\n            /* @var Config[] $array */\n            $this->prvConfigList = $this->GetListOrigin($sql);\n        }\n\n        $type = 'Config';\n\n        foreach ($this->prvConfigList as $c) {\n            $name = $c[$this->d['Config']['Name'][0]];\n            if (($name == 'system' && $onlysystemoption == true) || ($name != 'system' && $onlysystemoption == false)) {\n                if (!isset($this->configs[$name])) {\n                    $l = new $type($name);\n                    $this->configs[$name] = $l;\n                } else {\n                    $l = $this->configs[$name];\n                }\n                if (get_class($l) != $type) {\n                    $l = new $type($name);\n                    $this->configs[$name] = $l;\n                }\n                if (isset($c[$this->d['Config']['Key'][0]]) && $c[$this->d['Config']['Key'][0]] != '') {\n                    $l->LoadInfoByAssocSingleWithPre($c);\n                } else {\n                    $l->LoadInfoByAssoc($c);\n                }\n            }\n        }\n        //\u5c06\u8bfb\u51fa\u6765\u7684\u6570\u7ec4\u518d\u62fc\u6210\u5e8f\u5217\u5316\u6570\u636e\u518d\u53cd\u5e8f\u5217\u5316\n        foreach ($this->configs as $key => $value) {\n            if (is_object($value) && ($key == 'system' && $onlysystemoption == true) || ($key != 'system' && $onlysystemoption == false)) {\n                $value->LoadInfoByAssocSingleWithAfter();\n            }\n        }\n\n        if ($onlysystemoption == false) {\n            $this->prvConfigList = array();\n        }\n    }\n\n    /**\n     * \u4fdd\u5b58Configs\u8868.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function SaveConfig($name)\n    {\n        if (!isset($this->configs[$name])) {\n            return false;\n        }\n\n        $this->configs[$name]->Save();\n\n        return true;\n    }\n\n    /**\n     * \u5220\u9664Configs\u8868.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function DelConfig($name)\n    {\n        if (!isset($this->configs[$name])) {\n            return false;\n        }\n\n        $this->configs[$name]->Delete();\n        unset($this->configs[$name]);\n\n        return true;\n    }\n\n    /**\n     * \u83b7\u53d6Configs\u8868\u503c\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return mixed\n     */\n    public function Config($name)\n    {\n        if (!isset($this->configs[$name])) {\n            $name = FilterCorrectName($name);\n            if (!$name) {\n                return;\n            }\n\n            $this->configs[$name] = new Config($name);\n        }\n\n        return $this->configs[$name];\n    }\n\n    /**\n     * \u67e5\u67d0Config\u662f\u5426\u5b58\u5728.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function HasConfig($name)\n    {\n        return isset($this->configs[$name]) && $this->configs[$name]->CountItem() > 0;\n    }\n\n    //###############################################################################################################\n    //Cache\u76f8\u5173\n    private $cache_hash = null;\n\n    /**\n     * \u4fdd\u5b58\u7f13\u5b58.\n     *\n     * @return bool\n     */\n    public function SaveCache()\n    {\n        //$s=$this->usersdir . 'cache/' . $this->guid . '.cache';\n        //$c=serialize($this->cache);\n        //@file_put_contents($s, $c);\n        //$this->configs['cache']=$this->cache;\n        $new_hash = md5($this->Config('cache'));\n        if ($this->cache_hash == $new_hash) {\n            return true;\n        }\n\n        $this->SaveConfig('cache');\n        $this->cache_hash = $new_hash;\n\n        return true;\n    }\n\n    /**\n     * \u52a0\u8f7d\u7f13\u5b58.\n     *\n     * @return bool\n     */\n    public function LoadCache()\n    {\n        $this->cache = $this->Config('cache');\n        $this->cache_hash = md5($this->Config('cache'));\n\n        return true;\n    }\n\n    /**\n     * \u4fdd\u5b58\u914d\u7f6e.\n     *\n     * @return bool\n     */\n    public function SaveOption()\n    {\n        $this->option['ZC_BLOG_CLSID'] = $this->guid;\n\n        unset($this->option['ZC_PERMANENT_DOMAIN_WHOLE_DISABLE']);\n        unset($this->option['ZC_PERMANENT_DOMAIN_FORCED_URL']);\n\n        $reserve_keys = explode('|', self::OPTION_RESERVE_KEYS);\n\n        if (file_exists($this->usersdir . 'c_option.php') == false) {\n            $s = \"<\";\n            $s .= \"?php\\r\\n\";\n            $s .= \"return \";\n            $option = array();\n            foreach ($this->option as $key => $value) {\n                if (in_array($key, $reserve_keys)) {\n                    $option[$key] = $value;\n                }\n            }\n            $s .= var_export($option, true);\n            $s .= \";\";\n            @file_put_contents($this->usersdir . 'c_option.php', $s);\n        }\n\n        foreach ($this->option as $key => $value) {\n            $this->Config('system')->$key = $value;\n        }\n        foreach ($reserve_keys as $key => $value) {\n            $this->Config('system')->DelKey($value);\n        }\n\n        $this->Config('system')->ZC_BLOG_HOST = chunk_split($this->Config('system')->ZC_BLOG_HOST, 1, \"|\");\n\n        $this->SaveConfig('system');\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u914d\u7f6e.\n     *\n     * @return bool\n     */\n    public function LoadOption()\n    {\n        $array = $this->Config('system')->GetData();\n\n        if (empty($array)) {\n            return false;\n        }\n\n        if (!is_array($array)) {\n            return false;\n        }\n\n        $reserve_keys = explode('|', self::OPTION_RESERVE_KEYS);\n\n        foreach ($array as $key => $value) {\n            if ($key == 'ZC_BLOG_HOST') {\n                $value = str_replace('|', '', $value);\n            }\n\n            if (in_array($key, $reserve_keys)) {\n                continue;\n            }\n\n            $this->option[$key] = $value;\n        }\n        if (!extension_loaded('gd')) {\n            $this->option['ZC_COMMENT_VERIFY_ENABLE'] = false;\n        }\n\n        return true;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u64cd\u4f5c\u6743\u9650.\n     *\n     * @param string     $action \u64cd\u4f5c\n     * @param int|string $level\n     *\n     * @return bool\n     */\n    public function CheckRights($action, $level = null)\n    {\n        if ($level === null) {\n            $level = $this->user->Level;\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_CheckRights'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($action, $level);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        if (!isset($this->actions[$action])) {\n            if (is_numeric($action)) {\n                return $level <= $action;\n            } else {\n                return false;\n            }\n        }\n\n        return $level <= $this->actions[$action];\n    }\n\n    /**\n     * \u6839\u636e\u7528\u6237\u7b49\u7ea7\u9a8c\u8bc1\u64cd\u4f5c\u6743\u9650 1.5\u5f00\u59cb\u53c2\u6570\u6362\u987a\u5e8f.\n     *\n     * @param string $action \u64cd\u4f5c\n     * @param int    $level  \u7528\u6237\u7b49\u7ea7\n     *\n     * @return bool\n     */\n    public function CheckRightsByLevel($action, $level)\n    {\n        return $this->CheckRights($action, $level);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55.\n     *\n     * @return bool\n     */\n    public function Verify()\n    {\n        $username = trim(GetVars('username', 'COOKIE'));\n        $token = trim(GetVars('token', 'COOKIE'));\n        $user = $this->VerifyUserToken($token, $username);\n        if (is_object($user)) {\n            $this->user = $user;\n\n            return true;\n        }\n        $this->user = new Member();\n        $this->user->Guid = GetGuid();\n\n        return false;\n    }\n\n    /**\n     * \u8fd4\u56de\u767b\u5f55\u6210\u529f\u540e\u5e94\u4fdd\u5b58\u7684cookie\u4fe1\u606f.\n     *\n     * @param Member $m \u5df2\u9a8c\u8fc7\u6210\u529f\u7684member\n     *\n     * @return string\n     */\n    public function VerifyResult($m)\n    {\n        return $this->GenerateUserToken($m);\n    }\n\n    /**\n     * \u751f\u6210User Token\uff0c\u7528\u4e8e\u767b\u5f55\u9a8c\u8bc1\n     *\n     * @param Member $user\n     * @param int    $time\n     *\n     * @return string\n     */\n    public function GenerateUserToken($user, $time = 0)\n    {\n        if ($time === 0) {\n            $time = (time() + 3600 * 24);\n        }\n\n        return CreateWebToken($user->ID, $time, $user->Guid, $user->PassWord_MD5Path);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55Token.\n     *\n     * @param string $token\n     * @param string $username\n     *\n     * @return Member\n     */\n    public function VerifyUserToken($token, $username)\n    {\n        $user = $this->GetMemberByName($username);\n        if ($user->ID != null) {\n            if (VerifyWebToken($token, $user->ID, $user->Guid, $user->PassWord_MD5Path)) {\n                return $user;\n            }\n        }\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u4e00\u6b21MD5\u5bc6\u7801\uff09.\n     *\n     * @param string $name   \u7528\u6237\u540d\n     * @param string $md5pw  md5\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\n     * @param Member $member \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_MD5($name, $md5pw, &$member)\n    {\n        if ($name == '' || $md5pw == '') {\n            return false;\n        }\n        $member = $this->GetMemberByName($name);\n        if ($member->ID != null) {\n            return $this->Verify_Final($name, md5($md5pw . $member->Guid), $member);\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u539f\u59cb\u660e\u6587\u5bc6\u7801\uff09.\n     *\n     * @param string $name       \u7528\u6237\u540d\n     * @param string $originalpw \u5bc6\u7801\u660e\u6587\n     * @param Member $member     \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Original($name, $originalpw, &$member = null)\n    {\n        if ($name == '' || $originalpw == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            return $this->Verify_MD5($name, md5($originalpw), $member);\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u6570\u636e\u5e93\u4fdd\u5b58\u7684\u6700\u7ec8\u8fd0\u7b97\u540e\u5bc6\u7801\uff09.\n     *\n     * @param string $name     \u7528\u6237\u540d\n     * @param string $password \u4e8c\u6b21\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\n     * @param object $member   \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Final($name, $password, &$member = null)\n    {\n        if ($name == '' || $password == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if (strcasecmp($m->Password, $password) == 0) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u4f7f\u7528Token\uff0c\u66ff\u4ee3\u5bc6\u7801\u4fdd\u5b58\uff09.\n     *\n     * @param string $name   \u7528\u6237\u540d\n     * @param string $wt     WebToken\n     * @param string $wt_id  WebToken\u7684ID\u8bc6\u522b\u7b26\n     * @param object $member \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Token($name, $wt, $wt_id, &$member = null)\n    {\n        if ($name == '' || $wt == '') {\n            return false;\n        }\n        $m = null;\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if (VerifyWebToken($wt, $wt_id, $this->guid, $m->ID, $m->Password) === true) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private $loadmembers_level = 0;\n\n    /**\n     * \u8f7d\u5165\u7528\u6237\u5217\u8868.\n     *\n     * @param int $level \u7528\u6237\u7b49\u7ea7\n     *\n     * @return bool\n     */\n    public function LoadMembers($level = 0)\n    {\n        $this->loadmembers_level = $level;\n        if ($this->loadmembers_level < 0) {\n            return false;\n        }\n\n        $where = null;\n        if ($this->loadmembers_level > 0) {\n            $where = array(array('<=', 'mem_Level', $this->loadmembers_level));\n        }\n        $this->members = array();\n        $this->membersbyname = array();\n        $array = $this->GetMemberList(null, $where);\n        foreach ($array as $m) {\n            $this->members[$m->ID] = $m;\n            $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n        }\n\n        return true;\n    }\n\n    private function LoadCategories_Recursion($deep, $id, &$lv)\n    {\n        $subarray = array();\n        for ($i = 0; $i < $this->category_recursion_level; $i++) {\n            $name = 'lv' . $i;\n            ${$name} = &$lv[$i];\n        }\n        $lvdeep = 'lv' . $deep;\n        $this->categoriesbyorder[$id] = &$this->categories[$id];\n        if ($deep < ($this->category_recursion_level - 1)) {\n            $deep += 1;\n            $lvdeepnext = 'lv' . $deep;\n            if (isset(${$lvdeepnext}[$id])) {\n                foreach (${$lvdeepnext}[$id] as $idnow) {\n                    $subarray[] = $idnow;\n                    $this->categoriesbyorder[$id]->SubCategories[] = &$this->categories[$idnow];\n                    //$this->categoriesbyorder[$id]->ChildrenCategories[] = &$this->categories[$idnow];\n                    $array = $this->LoadCategories_Recursion($deep, $idnow, $lv);\n                    foreach ($array as $key => $value) {\n                        $subarray[] = $value;\n                    }\n                }\n            }\n        }\n        $subarray = array_unique($subarray);\n        foreach ($subarray as $key => $value) {\n            $this->categoriesbyorder[$id]->ChildrenCategories[] = &$this->categories[$value];\n        }\n        return $subarray;\n    }\n\n    /**\n     * \u8f7d\u5165\u5206\u7c7b\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadCategories()\n    {\n        $this->categories = array();\n        $this->categoriesbyorder = array();\n\n        $lv = array();\n        for ($i = 0; $i < $this->category_recursion_level; $i++) {\n            $name = 'lv' . $i;\n            ${$name} = array();\n            $lv[$i] = &${$name};\n        }\n        $array = $this->GetCategoryList(null, null, array('cate_Order' => 'ASC'), null, null);\n        if (count($array) == 0) {\n            return false;\n        }\n\n        foreach ($array as $c) {\n            $this->categories[$c->ID] = $c;\n        }\n\n        foreach ($this->categories as $id => $c) {\n            $l = 'lv' . $c->Level;\n            ${$l}[$c->ParentID][] = $id;\n        }\n\n        if (!is_array($lv0[0])) {\n            $lv0[0] = array();\n        }\n\n        foreach ($lv0[0] as $id0) {\n            $this->LoadCategories_Recursion(0, $id0, $lv);\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u6807\u7b7e\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadTags()\n    {\n        $this->tags = array();\n        $this->tagsbyname = array();\n        $array = $this->GetTagList();\n        foreach ($array as $t) {\n            $this->tags[$t->ID] = $t;\n            $this->tagsbyname[$t->Name] = &$this->tags[$t->ID];\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u6a21\u5757\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadModules()\n    {\n        $this->modules = array();\n        $this->modulesbyfilename = array();\n        $array = $this->GetModuleList();\n        foreach ($array as $m) {\n            $this->modules[] = $m;\n            $this->modulesbyfilename[$m->FileName] = $m;\n        }\n\n        $dir = $this->usersdir . 'theme/' . $this->theme . '/include/';\n        if (file_exists($dir)) {\n            $files = GetFilesInDir($dir, 'php');\n            foreach ($files as $sortname => $fullname) {\n                $m = new Module();\n                $m->FileName = $sortname;\n                $m->HtmlID = $sortname;\n                $m->Content = file_get_contents($fullname);\n                if (stripos($m->Content, '<li') !== false && stripos($m->Content, '</li>') !== false) {\n                    $m->Type = 'ul';\n                } else {\n                    $m->Type = 'div';\n                }\n                $m->Source = 'theme_' . $this->theme;\n                $m->IsIncludeFile = true;\n                $this->modules[] = $m;\n                $this->modulesbyfilename[$m->FileName] = $m;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u4e3b\u9898\u5217\u8868.\n     *\n     * @return App[]\n     */\n    public function LoadThemes()\n    {\n        $allThemes = array();\n        $dirs = GetDirsInDir($this->usersdir . 'theme/');\n        natcasesort($dirs);\n        array_unshift($dirs, $this->theme);\n        $dirs = array_unique($dirs);\n        foreach ($dirs as $id) {\n            $app = new App();\n            if ($app->LoadInfoByXml('theme', $id) == true) {\n                $allThemes[] = $app;\n            }\n        }\n\n        return $allThemes;\n    }\n\n    /**\n     * \u8f7d\u5165\u63d2\u4ef6\u5217\u8868.\n     *\n     * @return App[]\n     */\n    public function LoadPlugins()\n    {\n        $allPlugins = array();\n        $dirs = GetDirsInDir($this->usersdir . 'plugin/');\n        natcasesort($dirs);\n\n        foreach ($dirs as $id) {\n            $app = new App();\n            if ($app->LoadInfoByXml('plugin', $id) == true) {\n                $allPlugins[] = $app;\n            }\n        }\n\n        return $allPlugins;\n    }\n\n    /**\n     * \u8f7d\u5165\u6307\u5b9a\u5e94\u7528.\n     *\n     * @param string $type \u5e94\u7528\u7c7b\u578b(theme|plugin)\n     * @param string $id   \u5e94\u7528ID\n     *\n     * @return App\n     */\n    public function LoadApp($type, $id)\n    {\n        $app = new App();\n        if ($app->LoadInfoByXml($type, $id) != true) {\n            $app->isloaded = false;\n        }\n\n        return $app;\n    }\n\n    /**\n     * \u68c0\u67e5\u5e94\u7528\u662f\u5426\u5b89\u88c5\u5e76\u542f\u7528.\n     *\n     * @param string $name \u5e94\u7528\uff08\u63d2\u4ef6\u6216\u4e3b\u9898\uff09\u7684ID\n     *\n     * @return bool\n     */\n    public function CheckPlugin($name)\n    {\n        return in_array($name, $this->activedapps);\n    }\n\n    /**\n     * \u68c0\u67e5\u5e94\u7528\u662f\u5426\u5b89\u88c5\u5e76\u542f\u7528.\n     *\n     * @param string $name \u5e94\u7528ID\uff08\u63d2\u4ef6\u6216\u4e3b\u9898\uff09\n     *\n     * @return bool\n     */\n    public function CheckApp($name)\n    {\n        return $this->CheckPlugin($name);\n    }\n\n    /**\n     * \u83b7\u53d6\u9884\u6fc0\u6d3b\u63d2\u4ef6\u540d\u6570\u7ec4.\n     *\n     * @return string[]\n     */\n    public function GetPreActivePlugin()\n    {\n        $ap = explode(\"|\", $this->option['ZC_USING_PLUGIN_LIST']);\n        $ap = array_unique($ap);\n\n        return $ap;\n    }\n\n    /**\n     * \u8f7d\u5165\u6307\u5b9a\u5e94\u7528\u8bed\u8a00\u5305.\n     *\n     * @param string $type    \u5e94\u7528\u7c7b\u578b(system|theme|plugin)\n     * @param string $id      \u5e94\u7528ID\n     * @param string $default \u9ed8\u8ba4\u8bed\u8a00\n     *\n     * @throws Exception\n     *\n     * @return null\n     */\n    public function LoadLanguage($type, $id, $default = '')\n    {\n        $languagePath = $this->path;\n        $languageRegEx = '/^([0-9A-Z\\-_]*)\\.php$/ui';\n        $languageList = array();\n        $language = '';\n        $default = str_replace(array('/', '\\\\'), '', $default);\n        $languagePtr = &$this->lang;\n\n        if ($default === '') {\n            $default = $this->option['ZC_BLOG_LANGUAGEPACK'];\n        }\n\n        $defaultLanguageList = array($default, 'zh-cn', 'zh-tw', 'en');\n\n        switch ($type) {\n            case 'system':\n                $languagePath .= 'zb_users/language/';\n                break;\n            case 'plugin':\n            case 'theme':\n                $languagePath .= 'zb_users/' . $type . '/' . $id . '/language/';\n                $languagePtr = &$this->lang[$id];\n                break;\n            default:\n                $languagePath .= $type . '/language/';\n                $languagePtr = &$this->lang[$id];\n                break;\n        }\n\n        $handle = @opendir($languagePath);\n        $match = null;\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if (preg_match($languageRegEx, $file, $match)) {\n                    $languageList[] = $match[1];\n                }\n            }\n            closedir($handle);\n        } else {\n            // \u8fd9\u91cc\u4e0d\u4f1a\u6267\u884c\u5230\uff0c\u5728opendir\u65f6\u5c31\u5df2\u7ecf\u629b\u51faE_WARNING\n            throw new Exception('Cannot opendir(' . $languagePath . ')');\n        }\n\n        if (count($languageList) === 0) {\n            throw new Exception('No language in ' . $languagePath);\n        }\n\n        for ($i = 0; $i < count($defaultLanguageList); $i++) {\n            // \u5728\u6548\u7387\u4e0a\uff0carray_search\u548c\u547d\u540d\u6570\u7ec4\u6ca1\u6709\u672c\u8d28\u533a\u522b\uff0c\u81f3\u5c11\u5728\u8fd9\u91cc\u5982\u6b64\u3002\n            if (false !== array_search($defaultLanguageList[$i], $languageList)) {\n                $language = $defaultLanguageList[$i];\n                break;\n            }\n        }\n        if ($language === '') {\n            throw new Exception('Language ' . $default . ' is not found in ' . $languagePath);\n        }\n\n        $languagePath .= $language . '.php';\n        $languagePtr = include $languagePath;\n        $this->langpacklist[] = array($type, $id, $language);\n        if ($type == 'system') {\n            $this->langs = json_decode(json_encode($this->lang));\n        } else {\n            if ($id != '' && isset($this->lang[$id])) {\n                $this->langs->$id = json_decode(json_encode($this->lang[$id]));\n            }\n        }\n\n        return true;\n    }\n\n    public function ReflushLanguages()\n    {\n        $this->langs = json_decode(json_encode($this->lang));\n    }\n\n    /**\n     * \u91cd\u65b0\u8bfb\u53d6\u8bed\u8a00\u5305.\n     *\n     * @throws Exception\n     */\n    public function ReloadLanguages()\n    {\n        $array = $this->langpacklist;\n        $this->lang = $this->langpacklist = array();\n        foreach ($array as $v) {\n            $this->LoadLanguage($v[0], $v[1], $v[2]);\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\uff0c\u9884\u52a0\u8f7d\u5df2\u7f16\u8bd1\u6a21\u677f\n     *\n     * @param string $theme \u6307\u5b9a\u4e3b\u9898\u540d\n     *\n     * @return Template\n     */\n    public function PrepareTemplate($theme = null)\n    {\n        if (is_null($theme)) {\n            $theme = &$this->theme;\n        }\n\n        $template = new Template();\n        $template->MakeTemplateTags();\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_MakeTemplatetags'] as $fpname => &$fpsignal) {\n            $fpname($template->templateTags);\n        }\n\n        $template->SetPath($this->usersdir . 'cache/compiled/' . $theme . '/');\n        $template->theme = $theme;\n\n        return $template;\n    }\n\n    /**\n     * \u6a21\u677f\u89e3\u6790.\n     *\n     * @return bool\n     */\n    public function BuildTemplate()\n    {\n        $this->template->LoadTemplates();\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_BuildTemplate'] as $fpname => &$fpsignal) {\n            $fpname($this->template->templates);\n        }\n\n        return $this->template->BuildTemplate();\n    }\n\n    /**\n     * \u66f4\u65b0\u6a21\u677f\u7f13\u5b58.\n     *\n     * @param bool $onlycheck  \u4e3a\u771f\u7684\u8bdd\uff0c\u53ea\u5224\u65ad\u662f\u5426\u9700\u8981\u800c\u4e0dBuild\n     * @param bool $forcebuild\n     *\n     * @return true or false\n     */\n    public function CheckTemplate($onlycheck = false, $forcebuild = false)\n    {\n        $this->template->LoadTemplates();\n        $s = implode($this->template->templates);\n        $md5 = md5($s);\n\n        //\u672c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5f88\u6709\u610f\u601d\uff0c\u4e3afalse\u8868\u793a\u9700\u8981rebuild \u4e3atrue\u8868\u793a\u5df2\u91cd\u5efa\u5b8c\u6210\u6216\u662f\u4e0d\u9700\u8981rebuild\n        //$zbp->CheckTemplate(true) == false \u7684\u610f\u601d\uff0c\u5c31\u662f\u5224\u65ad\u6a21\u677f\u9700\u9700\u8981\u91cd\u5237\u65b0\u5417\uff1f\n\n        //\u5982\u679c\u5bf9\u6bd4\u4e0d\u4e00\u6837,$onlycheck\u5c31\u6709\u7528\u4e86\n        if ($md5 != $this->cache->templates_md5) {\n            if ($onlycheck == true && $forcebuild == false) {\n                return false;\n            }\n            $this->BuildTemplate();\n            $this->cache->templates_md5 = $md5;\n            $this->SaveCache();\n\n            return true;\n        }\n        //\u5982\u679c\u5bf9\u6bd4\u4e00\u6837\u7684\u8bdd\uff0c$forcebuild\u5c31\u6709\u7528\u4e86\n        if ($md5 == $this->cache->templates_md5) {\n            if ($forcebuild == true) {\n                $this->BuildTemplate();\n                $this->cache->templates_md5 = $md5;\n                $this->SaveCache();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u751f\u6210\u6240\u6709\u8fdbReady List\u7684\u6a21\u5757\u7684Content\u5185\u5bb9\u5e76\u4fdd\u5b58.\n     */\n    public function BuildModule()\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_BuildModule'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n        ModuleBuilder::Build();\n    }\n\n    /**\n     * \u91cd\u5efa\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     * @param string $moduleFunction \u7528\u6237\u51fd\u6570\n     */\n    public function RegBuildModule($moduleFileName, $moduleFunction)\n    {\n        ModuleBuilder::Reg($moduleFileName, $moduleFunction);\n    }\n\n    /**\n     * \u7cfb\u7edf\u9ed8\u8ba4\u6ce8\u518c\u6a21\u5757.\n     */\n    public function RegBuildModules()\n    {\n        $this->RegBuildModule('catalog', 'ModuleBuilder::Catalog');\n        $this->RegBuildModule('calendar', 'ModuleBuilder::Calendar');\n        $this->RegBuildModule('comments', 'ModuleBuilder::Comments');\n        $this->RegBuildModule('previous', 'ModuleBuilder::LatestArticles');\n        $this->RegBuildModule('archives', 'ModuleBuilder::Archives');\n        $this->RegBuildModule('navbar', 'ModuleBuilder::Navbar');\n        $this->RegBuildModule('tags', 'ModuleBuilder::TagList');\n        $this->RegBuildModule('statistics', 'ModuleBuilder::Statistics');\n        $this->RegBuildModule('authors', 'ModuleBuilder::Authors');\n    }\n\n    /**\n     * \u6dfb\u52a0\u8fdb\u5165Build Ready\u5217\u8868\u7684\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     * @param null   $parameters     \u6a21\u5757\u53c2\u6570\n     */\n    public function AddBuildModule($moduleFileName, $parameters = null)\n    {\n        $p = func_get_args();\n        call_user_func_array('ModuleBuilder::Add', $p);\n    }\n\n    /**\n     * \u5220\u9664\u8fdb\u5165Build Ready\u5217\u8868\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     */\n    public function DelBuildModule($moduleFileName)\n    {\n        ModuleBuilder::Del($moduleFileName);\n    }\n\n    /**\n     * \u67e5\u8be2\u6307\u5b9a\u6570\u636e\u7ed3\u6784\u7684sql\u5e76\u8fd4\u56deBase\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string|array $table    \u6570\u636e\u8868\n     * @param array        $datainfo \u6570\u636e\u5b57\u6bb5\n     * @param string       $sql      SQL\u64cd\u4f5c\u8bed\u53e5\n     *\n     * @return array\n     */\n    public function GetListCustom($table, $datainfo, $sql)\n    {\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $l = new Base($table, $datainfo);\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u67e5\u8be2ID\u6570\u636e\u7684\u6307\u5b9a\u6570\u636e\u7ed3\u6784\u7684sql\u5e76\u8fd4\u56deBase\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string|array $table    \u6570\u636e\u8868\n     * @param array        $datainfo \u6570\u636e\u5b57\u6bb5\n     * @param array        $array    ID\u6570\u7ec4\n     *\n     * @return Base[]\n     */\n    public function GetListCustomByArray($table, $datainfo, $array)\n    {\n        if (!is_array($array)) {\n            return array();\n        }\n\n        if (count($array) == 0) {\n            return array();\n        }\n\n        $where = array();\n        $where[] = array('IN', $datainfo['ID'][0], implode(',', $array));\n        $sql = $this->db->sql->Select($table, '*', $where);\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $l = new Base($table, $datainfo);\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u5df2\u6539\u540dGetListType,1.5\u7248\u4e2d\u6254\u6389\u6709\u6b67\u4e49\u7684GetList.\n     *\n     * @param $type\n     * @param $sql\n     *\n     * @return Base[]\n     */\n    public function GetListType($type, $sql)\n    {\n        if (get_parent_class($sql) == 'SQL__Global') {\n            $sql = $sql->sql;\n        }\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            /** @var Base $l */\n            $l = new $type();\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * GetListOrigin.\n     *\n     * @param $sql\n     *\n     * @return Base[]\n     */\n    public function GetListOrigin($sql)\n    {\n        if (get_parent_class($sql) == 'SQL__Global') {\n            $sql = $sql->sql;\n        }\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $list[] = $a;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u67e5\u8be2ID\u6570\u636e\u7684\u6307\u5b9a\u7c7b\u578b\u7684sql\u5e76\u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string $type  \u7c7b\u578b\n     * @param mixed  $array ID\u6570\u7ec4\n     *\n     * @return Base[]\n     */\n    public function GetListTypeByArray($type, $array)\n    {\n        if (!is_array($array)) {\n            return array();\n        }\n\n        if (count($array) == 0) {\n            return array();\n        }\n\n        $where = array();\n        $where[] = array('IN', $this->datainfo[$type]['ID'][0], implode(',', $array));\n        $sql = $this->db->sql->Select($this->table[$type], '*', $where);\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            /** @var Base $l */\n            $l = new $type();\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Post[]\n     */\n    public function GetPostList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        return $array;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u6570\u7ec4\u83b7\u53d6\u6587\u7ae0\u5b9e\u4f8b.\n     *\n     * @param mixed[] $array\n     *\n     * @return Post[]|Base[] Posts\n     */\n    public function GetPostByArray($array)\n    {\n        return $this->GetListTypeByArray('Post', $array);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     * @param mixed $readtags\n     *\n     * @return Post[]\n     */\n    public function GetArticleList($select = null, $where = null, $order = null, $limit = null, $option = null, $readtags = true)\n    {\n        if (empty($where)) {\n            $where = array();\n        }\n\n        if (is_array($where)) {\n            array_unshift($where, array('=', 'log_Type', '0'));\n        }\n\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        if ($readtags) {\n            $tagstring = '';\n            foreach ($array as $a) {\n                $tagstring .= $a->Tag;\n            }\n            $this->LoadTagsByIDString($tagstring);\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Post[]\n     */\n    public function GetPageList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (empty($where)) {\n            $where = array();\n        }\n        if (is_array($where)) {\n            array_unshift($where, array('=', 'log_Type', '1'));\n        }\n\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Comment[]\n     */\n    public function GetCommentList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Comment'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Comment[] $array */\n        $array = $this->GetListType('Comment', $sql);\n        foreach ($array as $comment) {\n            $this->comments[$comment->ID] = $comment;\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Member[]|Base[]\n     */\n    public function GetMemberList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Member'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Member', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Tag[]|Base[]\n     */\n    public function GetTagList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Tag'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Tag', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Category[]|Base[]\n     */\n    public function GetCategoryList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Category'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Category', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Module[]|Base[]\n     */\n    public function GetModuleList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Module'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Module', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Upload[]|Base[]\n     */\n    public function GetUploadList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Upload'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Upload', $sql);\n    }\n\n    /**\n     * @param $sql\n     *\n     * @return mixed\n     */\n    public function get_results($sql)\n    {\n        return $this->db->Query($sql);\n    }\n\n    /**\n     * \u6839\u636e\u522b\u540d\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[]|string &$object   \u7f13\u5b58\u5bf9\u8c61\n     * @param string        $val\n     * @param string        $backAttr\n     * @param string        $className\n     *\n     * @return Base|null\n     */\n    private function GetSomeThingByAlias($object, $val, $backAttr = null, $className = null)\n    {\n        $ret = $this->GetSomeThing($object, 'Alias', $val);\n\n        if (!is_null($ret)) {\n            return $ret;\n        } else {\n            if (is_null($backAttr)) {\n                $backAttr = $this->option['ZC_ALIAS_BACK_ATTR'];\n            }\n\n            return $this->GetSomeThing($object, $backAttr, $val, $className);\n        }\n    }\n\n    /**\n     * \u6839\u636eID\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[]     &$object   \u7f13\u5b58\u5bf9\u8c61\n     * @param string     $className \u627e\u4e0d\u5230ID\u65f6\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u7c7b\u540d\n     * @param int|string $id        \u4e0e\u6b64\u7c7b\u76f8\u5173\u7684ID\n     *\n     * @return Base|null\n     */\n    private function GetSomeThingById(&$object, $className, $id)\n    {\n        if ($id == 0) {\n            return;\n        }\n        if ($object != null) {\n            //$modules\u975eID\u4e3akey\n            if ($className == \"Module\") {\n                if ($id > 0) {\n                    foreach ($object as $key => $value) {\n                        if ($value->ID == $id) {\n                            return $value;\n                        }\n                    }\n                }\n                $m = new Module();\n\n                return $m;\n            }\n\n            if (isset($object[$id])) {\n                return $object[$id];\n            } elseif ($className == \"Post\" || $className == \"Comment\" || $className == \"Tag\") {\n                // \u6587\u7ae0\u9700\u8981\u8bfb\u53d6\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u8fd4\u56de\u7a7a\u5bf9\u8c61\u5373\u53ef\n                /** @var Base $p */\n                $p = new $className();\n                $p->LoadInfoByID($id);\n                $object[$id] = $p;\n\n                return $p;\n            } else {\n                return $this->GetSomeThingByAttr($object, 'ID', $id);\n            }\n        } else {\n            /** @var Base $p */\n            $p = new $className();\n            $p->LoadInfoByID($id);\n\n            return $p;\n        }\n    }\n\n    /**\n     * \u6839\u636e\u5c5e\u6027\u503c\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[] &$object \u7f13\u5b58\u5bf9\u8c61\n     * @param string $attr    \u5c5e\u6027\u540d\n     * @param mixed  $val     \u8981\u67e5\u627e\u7684\u503c\n     *\n     * @return null\n     */\n    private function GetSomeThingByAttr(&$object, $attr, $val)\n    {\n        $val = trim($val);\n        foreach ($object as $key => &$value) {\n            if (is_null($value)) {\n                continue;\n            }\n            if ($value->$attr == $val) {\n                return $value;\n            }\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u6570\u636e\u901a\u7528\u51fd\u6570.\n     *\n     * @param Base[]|string $object    \u7f13\u5b58\u5bf9\u8c61\uff08string / object\uff09\n     * @param string        $attr      \u6b32\u67e5\u627e\u7684\u5c5e\u6027\n     * @param mixed         $val       \u8981\u67e5\u627e\u5185\u5bb9\n     * @param string        $className \u5bf9\u8c61\u672a\u627e\u5230\u65f6\uff0c\u521d\u59cb\u5316\u7c7b\u540d\n     *\n     * @return Base|null\n     */\n    public function GetSomeThing($object, $attr, $val, $className = null)\n    {\n        $cacheObject = null;\n        if (is_object($object)) {\n            $cacheObject = $object;\n        } elseif ($object != \"\") {\n            $cacheObject = &$this->$object;\n        }\n        if ($attr == \"ID\") {\n            $ret = $this->GetSomeThingById($cacheObject, $className, $val);\n        } else {\n            $ret = $this->GetSomeThingByAttr($cacheObject, $attr, $val);\n        }\n        if ($ret === null && !is_null($className)) {\n            /** @var Base $ret */\n            $ret = new $className();\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u6587\u7ae0\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Post|Base\n     */\n    public function GetPostByID($id)\n    {\n        return $this->GetSomeThing('posts', 'ID', $id, 'Post');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByID($id)\n    {\n        return $this->GetSomeThing('categories', 'ID', $id, 'Category');\n    }\n\n    /**\n     * \u901a\u8fc7\u5206\u7c7b\u540d\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param string $name\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByName($name)\n    {\n        return $this->GetSomeThing('categories', 'Name', $name, 'Category');\n    }\n\n    /**\n     * \u901a\u8fc7\u5206\u7c7b\u522b\u540d\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param string $name\n     * @param null   $backKey\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByAlias($name, $backKey = null)\n    {\n        return $this->GetSomeThingByAlias('categories', $name, $backKey, 'Category');\n    }\n\n    /**\n     * \u4e0e\u8001\u7248\u672c\u4fdd\u6301\u517c\u5bb9\u51fd\u6570.\n     *\n     * @param string $name\n     *\n     * @return Category\n     */\n    public function GetCategoryByAliasOrName($name)\n    {\n        return $this->GetCategoryByAlias($name, 'Name');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u6a21\u5757\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Module|Base\n     */\n    public function GetModuleByID($id)\n    {\n        return $this->GetSomeThing('modules', 'ID', $id, 'Module'); // What the fuck?\n    }\n\n    /**\n     * \u901a\u8fc7FileName\u83b7\u53d6\u6a21\u5757\u5b9e\u4f8b.\n     *\n     * @param string $fn\n     *\n     * @return Module|Base\n     */\n    public function GetModuleByFileName($fn)\n    {\n        return $this->GetSomeThing('modulesbyfilename', 'FileName', $fn, 'Module');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByID($id)\n    {\n        /** @var Member $ret */\n        $ret = $this->GetSomeThing('members', 'ID', $id, 'Member');\n        if ($ret->ID == null) {\n            $ret->Guid = GetGuid();\n            //\u5982\u679c\u662f\u90e8\u4efd\u52a0\u8f7d\u7528\u6237\n            if ($this->loadmembers_level != 0) {\n                if ($ret->LoadInfoByID($id) == true) {\n                    $this->members[$ret->ID] = $ret;\n                    $this->membersbyname[$ret->Name] = &$this->members[$ret->ID];\n                }\n            }\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7\u7528\u6237\u540d\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $name\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByName($name)\n    {\n        $name = trim($name);\n        if (!$name || !CheckRegExp($name, '[username]')) {\n            return new Member();\n        }\n\n        if (isset($this->membersbyname[$name])) {\n            return $this->membersbyname[$name];\n        } else {\n            $array = array_keys($this->membersbyname);\n            foreach ($array as $k => $v) {\n                if (strcasecmp($name, $v) == 0) {\n                    return $this->membersbyname[$v];\n                }\n            }\n        }\n\n        $like = ($this->db->type == 'pgsql') ? 'ILIKE' : 'LIKE';\n        $sql = $this->db->sql->Select($this->table['Member'], '*', array(array($like, 'mem_Name', $name)), array('mem_ID' => 'ASC'), 1, null);\n\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u901a\u8fc7\u83b7\u53d6\u7528\u6237\u540d\u6216\u522b\u540d\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $name\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByNameOrAlias($name)\n    {\n        $name = trim($name);\n        if (!$name || !(CheckRegExp($name, '[username]') || CheckRegExp($name, '[nickname]'))) {\n            return new Member();\n        }\n\n        foreach ($this->members as $key => &$value) {\n            if (strcasecmp($value->Name, $name) == 0 || strcasecmp($value->Alias, $name) == 0) {\n                return $value;\n            }\n        }\n\n        $like = ($this->db->type == 'pgsql') ? 'ILIKE' : 'LIKE';\n\n        $sql = $this->db->sql->get()->select($this->table['Member'])->where(\n            array(\n                \"$like array\", array(\n                    array('mem_Name', $name),\n                    array('mem_Alias', $name),\n                )\n            )\n        )->limit(1)->sql;\n\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u901a\u8fc7\u90ae\u7bb1\u540d\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $email\n     *\n     * @return Member\n     */\n    public function GetMemberByEmail($email)\n    {\n        $email = strtolower(trim($email));\n        if (!$email || !CheckRegExp($email, '[email]')) {\n            return new Member();\n        }\n\n        $sql = $this->db->sql->Select($this->table['Member'], '*', array(array('LIKE', 'mem_Email', $email)), null, 1, null);\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u540d\u79f0\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $name\n     *\n     * @return bool\n     */\n    public function CheckMemberNameExist($name)\n    {\n        $m = $this->GetMemberByName($name);\n\n        return $m->ID != null;\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u540d\u79f0\u6216\u522b\u540d\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $name\n     *\n     * @return bool\n     */\n    public function CheckMemberByNameOrAliasExist($name)\n    {\n        $m = $this->GetMemberByNameOrAlias($name);\n\n        return $m->ID > 0;\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u90ae\u7bb1\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $email\n     *\n     * @return bool\n     */\n    public function CheckMemberByEmailExist($email)\n    {\n        $m = $this->GetMemberByEmail($email);\n\n        return $m->ID > 0;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u8bc4\u8bba\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Comment|Base\n     */\n    public function GetCommentByID($id)\n    {\n        return $this->GetSomeThing('comments', 'ID', $id, 'Comment');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u9644\u4ef6\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Upload|Base\n     */\n    public function GetUploadByID($id)\n    {\n        return $this->GetSomeThing('', 'ID', $id, 'Upload');\n    }\n\n    /**\n     * \u901a\u8fc7tag\u540d\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param string $name\n     * @param null   $backKey\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByAlias($name, $backKey = null)\n    {\n        $ret = $this->GetSomeThingByAlias('tags', $name, $backKey, 'Tag');\n        if ($ret->ID >= 0) {\n            $this->tagsbyname[$ret->ID] = &$this->tags[$ret->ID];\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7tag\u540d\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param string $name\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByAliasOrName($name)\n    {\n        //return $this->GetTagByAlias($name, 'Name');\n        $a = array();\n        $a[] = array('tag_Alias', $name);\n        $a[] = array('tag_Name', $name);\n        $array = $this->GetTagList('*', array(array('array', $a)), '', 1, '');\n        if (count($array) == 0) {\n            return new Tag();\n        } else {\n            $this->tags[$array[0]->ID] = $array[0];\n            $this->tagsbyname[$array[0]->ID] = &$this->tags[$array[0]->ID];\n\n            return $this->tags[$array[0]->ID];\n        }\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByID($id)\n    {\n        $ret = $this->GetSomeThing('tags', 'ID', $id, 'Tag');\n        if ($ret->ID > 0) {\n            $this->tagsbyname[$ret->ID] = &$this->tags[$ret->ID];\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7\u7c7b\u4f3c'{1}{2}{3}{4}'\u8f7d\u5165tags.\n     *\n     * @param $s\n     *\n     * @return array\n     */\n    public function LoadTagsByIDString($s)\n    {\n        $s = trim($s);\n        if ($s === '') {\n            return array();\n        }\n\n        $s = str_replace('}{', '|', $s);\n        $s = str_replace('{', '', $s);\n        $s = str_replace('}', '', $s);\n        $a = explode('|', $s);\n        $b = array();\n        foreach ($a as &$value) {\n            $value = trim($value);\n            if ($value) {\n                $b[] = $value;\n            }\n        }\n        $t = array_unique($b);\n\n        if (count($t) === 0) {\n            return array();\n        }\n\n        $a = array();\n        $b = array();\n        $c = array();\n        foreach ($t as $v) {\n            if (!isset($this->tags[$v])) {\n                $a[] = array('tag_ID', $v);\n                $c[] = $v;\n            } else {\n                $b[$v] = &$this->tags[$v];\n            }\n        }\n\n        if (count($a) === 0) {\n            return $b;\n        } else {\n            $t = array();\n            //$array=$this->GetTagList('',array(array('array',$a)),'','','');\n            $array = $this->GetTagList('', array(array('IN', 'tag_ID', $c)), '', '', '');\n            foreach ($array as $v) {\n                $this->tags[$v->ID] = $v;\n                $this->tagsbyname[$v->Name] = &$this->tags[$v->ID];\n                $t[$v->ID] = &$this->tags[$v->ID];\n            }\n\n            return array_merge($b, $t);\n        }\n    }\n\n    /**\n     * \u901a\u8fc7\u7c7b\u4f3c'aaa,bbb,ccc,ddd'\u8f7d\u5165tags.\n     *\n     * @param string $s \u6807\u7b7e\u540d\u5b57\u7b26\u4e32\uff0c\u5982'aaa,bbb,ccc,ddd\n     *\n     * @return array\n     */\n    public function LoadTagsByNameString($s)\n    {\n        $s = trim($s);\n        $s = str_replace(';', ',', $s);\n        $s = str_replace('\uff0c', ',', $s);\n        $s = str_replace('\u3001', ',', $s);\n        $s = trim($s);\n        $s = strip_tags($s);\n        if ($s === '' || $s === ',') {\n            return array();\n        }\n\n        $a = explode(',', $s);\n        $t = array_unique($a);\n\n        if (count($t) === 0) {\n            return array();\n        }\n\n        $a = array();\n        $b = array();\n        foreach ($t as $value) {\n            $v = trim($value);\n            if (isset($this->tagsbyname[$v]) == false) {\n                $a[] = array('tag_Name', $v);\n            } else {\n                $b[$v] = &$this->tagsbyname[$v];\n            }\n        }\n\n        if (count($a) === 0) {\n            return $b;\n        } else {\n            $t = array();\n            $array = $this->GetTagList('', array(array('array', $a)), '', '', '');\n            foreach ($array as $v) {\n                $this->tags[$v->ID] = $v;\n                $this->tagsbyname[$v->Name] = &$this->tags[$v->ID];\n                $t[$v->Name] = &$this->tags[$v->ID];\n            }\n\n            return array_merge($b, $t);\n        }\n    }\n\n    /**\n     * \u901a\u8fc7\u6570\u7ec4array[111,333,444,555,666]\u8f6c\u6362\u6210\u5b58\u50a8\u4e32.\n     *\n     * @param array $array \u6807\u7b7eID\u6570\u7ec4\n     *\n     * @return string\n     */\n    public function ConvertTagIDtoString($array)\n    {\n        $s = '';\n        foreach ($array as $a) {\n            $s .= '{' . $a . '}';\n        }\n\n        return $s;\n    }\n\n    public function GetTopArticle($type = 0)\n    {\n        return $this->GetTopPost($type);\n    }\n\n    /**\n     * \u83b7\u53d6\u5168\u90e8\u7f6e\u9876\u6587\u7ae0\uff08\u4f18\u5148\u4ececache\u91cc\u8bfb\u6570\u7ec4\uff09.\n     *\n     * @param int $type\n     *\n     * @return array\n     */\n    public function GetTopPost($type = 0)\n    {\n        $varname = 'top_post_array_' . $type;\n        if ($this->cache->HasKey($varname) == false) {\n            return array();\n        }\n\n        $articles_top_notorder_idarray = unserialize($this->cache->$varname);\n        if (!is_array($articles_top_notorder_idarray)) {\n            CountTopPost($type, null, null);\n            $articles_top_notorder_idarray = unserialize($this->cache->$varname);\n        }\n        $articles_top_notorder = $this->GetPostByArray($articles_top_notorder_idarray);\n\n        return $articles_top_notorder;\n    }\n\n    //###############################################################################################################\n    //\u9a8c\u8bc1\u76f8\u5173\n\n    /**\n     * \u83b7\u53d6\u8bc4\u8bbakey.\n     *\n     * @param $id\n     *\n     * @return string\n     */\n    public function GetCmtKey($id)\n    {\n        return md5($this->guid . $id . date('Ymdh'));\n    }\n\n    /**\n     * \u9a8c\u8bc1\u8bc4\u8bbakey.\n     *\n     * @param $id\n     * @param $key\n     *\n     * @return bool\n     */\n    public function ValidCmtKey($id, $key)\n    {\n        $nowkey = md5($this->guid . $id . date('Ymdh'));\n        $nowkey2 = md5($this->guid . $id . date('Ymdh', (time() - (3600 * 1))));\n\n        return $key == $nowkey || $key == $nowkey2;\n    }\n\n    /**\n     * \u83b7\u53d6CSRF Token.\n     *\n     * @param string $id \u5e94\u7528ID\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5e94\u7528\u83b7\u53d6\u4e0d\u540c\u7684Token\n     *\n     * @return string\n     */\n    public function GetCSRFToken($id = '')\n    {\n        $s = $this->user->ID . $this->user->Password . $this->user->Status;\n\n        return md5($this->guid . $s . $id . date('Ymdh'));\n    }\n\n    /**\n     * \u9a8c\u8bc1CSRF Token.\n     *\n     * @param string $token\n     * @param string $id    \u5e94\u7528ID\uff0c\u53ef\u4e3a\u6bcf\u4e2a\u5e94\u7528\u751f\u6210\u4e00\u4e2a\u4e13\u5c5etoken\n     *\n     * @return bool\n     */\n    public function VerifyCSRFToken($token, $id = '')\n    {\n        $userString = $this->user->ID . $this->user->Password . $this->user->Status;\n        $tokenString = $this->guid . $userString . $id;\n\n        for ($i = 0; $i <= $this->csrfExpiration; $i++) {\n            if ($token === md5($tokenString . date('Ymdh', (time() - (3600 * $i))))) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u663e\u793a\u9a8c\u8bc1\u7801\n     *\n     * @api Filter_Plugin_Zbp_ShowValidCode \u5982\u8be5\u63a5\u53e3\u672a\u88ab\u6302\u8f7d\u5219\u663e\u793a\u9ed8\u8ba4\u9a8c\u8bc1\u56fe\u7247\n     *\n     * @param string $id \u547d\u540d\u4e8b\u4ef6\n     *\n     * @return bool\n     */\n    public function ShowValidCode($id = '')\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_ShowValidCode'] as $fpname => &$fpsignal) {\n            return $fpname($id); //*\n        }\n\n        $_vc = new ValidateCode();\n        $_vc->GetImg();\n        setcookie('captcha_' . crc32($this->guid . $id), md5($this->guid . date(\"Ymdh\") . $_vc->GetCode()), null, $this->cookiespath);\n\n        return true;\n    }\n\n    /**\n     * \u6bd4\u5bf9\u9a8c\u8bc1\u7801\n     *\n     * @api Filter_Plugin_Zbp_CheckValidCode \u5982\u8be5\u63a5\u53e3\u672a\u88ab\u6302\u8f7d\u5219\u6bd4\u5bf9\u9ed8\u8ba4\u9a8c\u8bc1\u7801\n     *\n     * @param string $verifyCode \u9a8c\u8bc1\u7801\u6570\u503c\n     * @param string $id         \u547d\u540d\u4e8b\u4ef6\n     *\n     * @return bool\n     */\n    public function CheckValidCode($verifyCode, $id = '')\n    {\n        $verifyCode = strtolower($verifyCode);\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_CheckValidCode'] as $fpname => &$fpsignal) {\n            return $fpname($verifyCode, $id); //*\n        }\n\n        $original = GetVars('captcha_' . crc32($this->guid . $id), 'COOKIE');\n        setcookie('captcha_' . crc32($this->guid . $id), '', (time() - 3600), $this->cookiespath);\n\n        return md5($this->guid . date(\"Ymdh\") . strtolower($verifyCode)) == $original\n            ||\n            md5($this->guid . date(\"Ymdh\", (time() - (3600 * 1))) . strtolower($verifyCode)) == $original;\n    }\n\n    /**\n     * \u5411\u5bfc\u822a\u83dc\u5355\u6dfb\u52a0\u76f8\u5e94\u6761\u76ee.\n     *\n     * @param string $type $type=category,tag,page,item\n     * @param string $id\n     * @param string $name\n     * @param string $url\n     */\n    public function AddItemToNavbar($type, $id, $name, $url)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        $a = '<li id=\"navbar-' . $type . '-' . $id . '\"><a href=\"' . $url . '\">' . $name . '</a></li>';\n\n        if ($this->CheckItemToNavbar($type, $id)) {\n            $s = preg_replace('/<li id=\"navbar-' . $type . '-' . $id . '\">.*?<\\/li>/', $a, $s);\n        } else {\n            $s .= '<li id=\"navbar-' . $type . '-' . $id . '\"><a href=\"' . $url . '\">' . $name . '</a></li>';\n        }\n\n        $m->Content = $s;\n        $m->Save();\n    }\n\n    /**\n     * \u5220\u9664\u5bfc\u822a\u83dc\u5355\u4e2d\u76f8\u5e94\u6761\u76ee.\n     *\n     * @param string $type\n     * @param $id\n     */\n    public function DelItemToNavbar($type, $id)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        $s = preg_replace('/<li id=\"navbar-' . $type . '-' . $id . '\">.*?<\\/li>/', '', $s);\n\n        $m->Content = $s;\n        $m->Save();\n    }\n\n    /**\n     * \u68c0\u67e5\u6761\u76ee\u662f\u5426\u5728\u5bfc\u822a\u83dc\u5355\u4e2d.\n     *\n     * @param string $type\n     * @param $id\n     *\n     * @return bool\n     */\n    public function CheckItemToNavbar($type, $id)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        return (bool) strpos($s, 'id=\"navbar-' . $type . '-' . $id . '\"');\n    }\n\n    //$signal = good,bad,tips\n    private $hint1 = null;\n\n    private $hint2 = null;\n\n    private $hint3 = null;\n\n    private $hint4 = null;\n\n    private $hint5 = null;\n\n    /**\n     * \u8bbe\u7f6e\u63d0\u793a\u6d88\u606f\u5e76\u5b58\u5165Cookie.\n     *\n     * @param string $signal  \u63d0\u793a\u7c7b\u578b\uff08good|bad|tips\uff09\n     * @param string $content \u63d0\u793a\u5185\u5bb9\n     */\n    public function SetHint($signal, $content = '')\n    {\n        if ($content == '') {\n            if ($signal == 'good') {\n                $content = $this->lang['msg']['operation_succeed'];\n            }\n\n            if ($signal == 'bad') {\n                $content = $this->lang['msg']['operation_failed'];\n            }\n        }\n        $content = substr($content, 0, 255);\n        if ($this->hint1 == null) {\n            $this->hint1 = $signal . '|' . $content;\n            setcookie(\"hint_signal1\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint2 == null) {\n            $this->hint2 = $signal . '|' . $content;\n            setcookie(\"hint_signal2\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint3 == null) {\n            $this->hint3 = $signal . '|' . $content;\n            setcookie(\"hint_signal3\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint4 == null) {\n            $this->hint4 = $signal . '|' . $content;\n            setcookie(\"hint_signal4\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint5 == null) {\n            $this->hint5 = $signal . '|' . $content;\n            setcookie(\"hint_signal5\", $signal . '|' . $content, 0, $this->cookiespath);\n        }\n    }\n\n    /**\n     * \u63d0\u53d6Cookie\u4e2d\u7684\u63d0\u793a\u6d88\u606f.\n     */\n    public function GetHint()\n    {\n        for ($i = 1; $i <= 5; $i++) {\n            $signal = 'hint' . $i;\n            $signal = $this->$signal;\n            if ($signal) {\n                $a = explode('|', $signal);\n                $this->ShowHint($a[0], $a[1]);\n                setcookie(\"hint_signal\" . $i, '', (time() - 3600), $this->cookiespath);\n            }\n        }\n        for ($i = 1; $i <= 5; $i++) {\n            $signal = GetVars('hint_signal' . $i, 'COOKIE');\n            if ($signal) {\n                $a = explode('|', $signal);\n                $this->ShowHint($a[0], $a[1]);\n                setcookie(\"hint_signal\" . $i, '', (time() - 3600), $this->cookiespath);\n            }\n        }\n    }\n\n    /**\n     * \u7531\u63d0\u793a\u6d88\u606f\u83b7\u53d6HTML.\n     *\n     * @param string $signal  \u63d0\u793a\u7c7b\u578b\uff08good|bad|tips\uff09\n     * @param string $content \u63d0\u793a\u5185\u5bb9\n     */\n    public function ShowHint($signal, $content = '')\n    {\n        if ($content == '') {\n            if ($signal == 'good') {\n                $content = $this->lang['msg']['operation_succeed'];\n            }\n\n            if ($signal == 'bad') {\n                $content = $this->lang['msg']['operation_failed'];\n            }\n        }\n        echo \"<div class=\\\"hint\\\"><p class=\\\"hint hint_$signal\\\">$content</p></div>\";\n    }\n\n    /**\n     * \u663e\u793a\u9519\u8bef\u4fe1\u606f.\n     *\n     * @api Filter_Plugin_Zbp_ShowError\n     *\n     * @param string/int $errorText\n     * @param null       $file\n     * @param null       $line\n     *\n     * @throws Exception\n     *\n     * @return mixed\n     */\n    public function ShowError($errorText, $file = null, $line = null)\n    {\n        $errorCode = 0;\n        if (is_numeric($errorText)) {\n            $errorCode = (int) $errorText;\n            $errorText = $this->lang['error'][$errorText];\n        }\n\n        if ($errorCode == 2) {\n            Http404();\n        }\n\n        ZBlogException::$error_id = $errorCode;\n        ZBlogException::$error_file = $file;\n        ZBlogException::$error_line = $line;\n\n        if (stripos('{' . sha1('mustshowerror') . '}', $errorText) === 0) {\n            $errorText = str_replace('{' . sha1('mustshowerror') . '}', '', $errorText);\n            $GLOBALS['hooks']['Filter_Plugin_Debug_Display'] = array();\n            $GLOBALS['hooks']['Filter_Plugin_Debug_Handler'] = array();\n\n            throw new Exception($errorText);\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_ShowError'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($errorCode, $errorText, $file, $line);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n\n        throw new Exception($errorText);\n    }\n\n    /**\n     * \u68c0\u6d4b\u7f51\u7ad9\u5173\u95ed\uff0c\u5982\u679c\u5173\u95ed\uff0c\u5219\u629b\u51fa\u9519\u8bef.\n     *\n     * @throws Exception\n     */\n    public function CheckSiteClosed()\n    {\n        if ($this->option['ZC_CLOSE_SITE']) {\n            Http503();\n            $this->ShowError(82, __FILE__, __LINE__);\n            exit;\n        }\n    }\n\n    /**\n     * \u8df3\u8f6c\u5230\u5b89\u88c5\u9875\u9762.\n     */\n    public function RedirectInstall()\n    {\n        if (!$this->option['ZC_DATABASE_TYPE']) {\n            $s = $_SERVER['QUERY_STRING'];\n            $s = empty($s) ? '' : '?' . $s;\n            Redirect('./zb_install/index.php' . $s);\n        }\n    }\n\n    /**\n     * \u68c0\u6d4b\u5f53\u524durl\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u8bbe\u7f6e\u5c31\u8df3\u8f6c\u5230\u56fa\u5b9a\u57df\u540d\u7684\u94fe\u63a5.\n     */\n    public function RedirectPermanentDomain()\n    {\n        $domain_disable = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_WHOLE_DISABLE');\n        if ($domain_disable == true) {\n            return;\n        }\n\n        $forced = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_FORCED_URL');\n        if ($this->option['ZC_PERMANENT_DOMAIN_ENABLE'] == false && $forced == '') {\n            return;\n        }\n\n        $host = str_replace(array('https://', 'http://'), array('', ''), GetCurrentHost(ZBP_PATH, $null));\n        $host2 = str_replace(array('https://', 'http://'), array('', ''), $this->host);\n\n        if ($host != $host2) {\n            $u = GetRequestUri();\n            $u = $this->host . substr($u, 1);\n            Redirect301($u);\n        }\n    }\n\n    /**\n     * \u6ce8\u518cPostType.\n     *\n     * @param $typeId\n     * @param $name\n     * @param string $urlRule      \u9ed8\u8ba4\u662f\u53d6Page\u7c7b\u578b\u7684Url Rule\n     * @param string $template     \u9ed8\u8ba4\u6a21\u677f\u540dpage\n     * @param string $categoryType \u5f53\u524d\u6587\u7ae0\u7c7b\u7684\u5206\u7c7bType\n     * @param string $tagType      \u5f53\u524d\u6587\u7ae0\u7c7b\u7684\u6807\u7b7eType\n     *\n     * @throws Exception\n     */\n    public function RegPostType($typeId, $name, $urlRule = '', $template = 'single', $categoryType = null, $tagType = null)\n    {\n        if ($urlRule == '') {\n            $urlRule = $this->option['ZC_PAGE_REGEX'];\n        }\n\n        $typeId = (int) $typeId;\n        $name = strtolower(trim($name));\n        if ($typeId > 99) {\n            if (isset($this->posttype[$typeId])) {\n                $this->ShowError(87, __FILE__, __LINE__);\n            }\n        }\n        $this->posttype[$typeId] = array($name, $urlRule, $template, $categoryType, $tagType);\n    }\n\n    /**\n     * @param $typeid\n     *\n     * @return string\n     */\n    public function GetPostType_Name($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][0];\n        }\n\n        return '';\n    }\n\n    public function GetPostType_UrlRule($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][1];\n        }\n\n        return $this->option['ZC_PAGE_REGEX'];\n    }\n\n    public function GetPostType_Template($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][2];\n        }\n\n        return 'single';\n    }\n\n    public function GetPostType_CategoryType($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][3];\n        }\n    }\n\n    public function GetPostType_TagType($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][4];\n        }\n    }\n\n    /**\n     * \u6ce8\u518cAction.\n     *\n     * @param $name\n     * @param $level\n     * @param $title\n     */\n    public function RegAction($name, $level, $title)\n    {\n        $this->actions[$name] = $level;\n        $this->lang['actions'][$name] = $title;\n    }\n\n    /**\n     * \u83b7\u5f97Action\u6743\u9650\u6ce8\u91ca.\n     *\n     * @param $name\n     *\n     * @return mixed\n     */\n    public function GetActionDescription($name)\n    {\n        if (isset($this->lang['actions'][$name])) {\n            return $this->lang['actions'][$name];\n        }\n\n        return $name;\n    }\n\n    //\u4e3e\u4f8b\uff1abackend-ui,,,\n    protected $protect_exclusive = array();\n\n    /**\n     * \u901a\u77e5\u7cfb\u7edf\u63a7\u5236\u6743.\n     */\n    public function SetExclusive($function, $appid)\n    {\n        if ($appid == false) {\n            return false;\n        }\n        $this->protect_exclusive[$function] = $appid;\n\n        return true;\n    }\n\n    /**\n     * \u67e5\u8be2\u7cfb\u7edf\u63a7\u5236\u6743.\n     */\n    public function IsExclusive($function)\n    {\n        if (isset($this->protect_exclusive[$function])) {\n            return $this->protect_exclusive[$function];\n        }\n\n        return false;\n    }\n\n    /**\n     * \u4ee5\u4e0b\u90e8\u5206\u4e3a\u5df2\u5e9f\u5f03\uff0c\u4f46\u8003\u8651\u5230\u517c\u5bb9\u6027\u4fdd\u7559\u7684\u4ee3\u7801**************************************************************.\n     */\n\n    /**\n     * \u68c0\u67e5\u5e76\u5f00\u542fGzip\u538b\u7f29.\n     */\n    public function CheckGzip()\n    {\n    }\n\n    /**\n     * \u542f\u7528Gzip.\n     */\n    public function StartGzip()\n    {\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08MD5\u52a0zbp->guid\u76d0\u540e\u7684\u5bc6\u7801\uff09.\n     *\n     * @deprecated\n     *\n     * @param string $name         \u7528\u6237\u540d\n     * @param string $ps_path_hash MD5\u52a0zbp->guid\u76d0\u540e\u7684\u5bc6\u7801\n     * @param object $member       \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_MD5Path($name, $ps_path_hash, &$member = null)\n    {\n        if ($name == '' || $ps_path_hash == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if ($m->PassWord_MD5Path == $ps_path_hash) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u83b7\u53d6CSRF Token\u7684\u9519\u8bef\u522b\u540d.\n     *\n     * @deprecated Use ``GetCSRFToken``\n     *\n     * @param string $id \u5e94\u7528ID\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5e94\u7528\u83b7\u53d6\u4e0d\u540c\u7684Token\n     *\n     * @return string\n     */\n    public function GetToken($id = '')\n    {\n        return $this->GetCSRFToken($id);\n    }\n\n    /**\n     * \u9a8c\u8bc1CSRF Token\u7684\u9519\u8bef\u522b\u540d.\n     *\n     * @deprecated Use ``VerifyCSRFToken``\n     *\n     * @param $t\n     * @param $id\n     *\n     * @return bool\n     */\n    public function ValidToken($t, $id = '')\n    {\n        return $this->VerifyCSRFToken($t, $id);\n    }\n\n    /**\n     * @deprecated\n     *\n     * @return bool\n     */\n    public function LoadCategorys()\n    {\n        return $this->LoadCategories();\n    }\n\n    /**\n     * \u83b7\u53d6\u4f1a\u8bddWebToken.\n     *\n     * @deprecated \u6beb\u65e0\u610f\u4e49\uff0c\u5373\u5c06\u5e9f\u5f03\n     *\n     * @param string $wt_id\n     * @param int    $day   \u9ed8\u8ba41\u5929\u6709\u6548\u671f\uff0c1\u5c0f\u65f6\u4e3a1/24\uff0c1\u5206\u949f\u4e3a1/(24*60)\n     *\n     * @return string\n     */\n    public function GetWebToken($wt_id = '', $day = 1)\n    {\n        $t = (intval($day * 24 * 3600) + time());\n\n        return CreateWebToken($wt_id, $t, $this->guid, $this->user->Status, $this->user->ID, $this->user->Password);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u4f1a\u8bddWebToken.\n     *\n     * @deprecated \u6beb\u65e0\u610f\u4e49\uff0c\u5373\u5c06\u5e9f\u5f03\n     *\n     * @param $wt\n     * @param $wt_id\n     *\n     * @return bool\n     */\n    public function ValidWebToken($wt, $wt_id = '')\n    {\n        if (VerifyWebToken($wt, $wt_id, $this->guid, $this->user->Status, $this->user->ID, $this->user->Password) === true) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n", "<?php\n\n//\u6ce8\u518c\u63d2\u4ef6\nRegisterPlugin(\"passwordvisit\", \"ActivePlugin_passwordvisit\");\n\nfunction ActivePlugin_passwordvisit()\n{\n    Add_Filter_Plugin('Filter_Plugin_Edit_Response3', 'passwordvisit_show_encrypt_button');\n    Add_Filter_Plugin('Filter_Plugin_PostArticle_Core', 'passwordvisit_save_postpassword');\n    Add_Filter_Plugin('Filter_Plugin_ViewList_Template', 'passwordvisit_list_password');\n    Add_Filter_Plugin('Filter_Plugin_ViewPost_Template', 'passwordvisit_input_password');\n}\n\nfunction passwordvisit_list_password($template)\n{\n    global $zbp;\n    $articles = $template->GetTags('articles');\n    foreach ($articles as $key => $article) {\n        if ($zbp->Config('passwordvisit')->all_encrypt || $article->Metas->passwordvisit_enable_encrypt) {\n            $article->Intro = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\" action=\"' . $article->Url . '\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n            $article->Content = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\" action=\"' . $article->Url . '\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n        }\n    }\n\n    $template->SetTags('articles', $articles);\n}\n\nfunction passwordvisit_input_password(&$template)\n{\n    global $zbp;\n    if (isset($_POST['password']) && $_POST['password'] != '') {\n        $article = $template->GetTags('article');\n        if ($article->Metas->passwordvisit_password != '') {\n            if (GetVars('password', 'POST') == $article->Metas->passwordvisit_password) {\n                return;\n            } else {\n                echo '<script type=\"text/javascript\">alert(\"\u5bc6\u7801\u9519\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");window.location=\"' . $article->Url . '\";</script>';\n                die();\n            }\n        } else {\n            if (GetVars('password', 'POST') == $zbp->Config('passwordvisit')->default_password) {\n                return;\n            } else {\n                echo '<script type=\"text/javascript\">alert(\"\u5bc6\u7801\u9519\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");window.location=\"' . $article->Url . '\";</script>';\n                die();\n            }\n        }\n    } else {\n        $article = $template->GetTags('article');\n        if ($zbp->Config('passwordvisit')->all_encrypt || $article->Metas->passwordvisit_enable_encrypt) {\n            $article->Content = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n            $template->SetTags('article', $article);\n        }\n    }\n}\n\nfunction passwordvisit_save_postpassword(&$article)\n{\n    $article->Metas->passwordvisit_enable_encrypt = $_POST['enable_encrypt'];\n    $article->Metas->passwordvisit_password = $_POST['password'];\n}\n\nfunction passwordvisit_show_encrypt_button()\n{\n    if ($_GET['act'] == 'PageEdt') {\n        return;\n    } //\u53bb\u6389\u9875\u9762\n\n    if (isset($_GET['id']) && $_GET['id'] != '') {\n        global $zbp,$article;\n        echo '<br>\u52a0\u5bc6\u6587\u7ae0<input id=\"enable_encrypt\" name=\"enable_encrypt\" style=\"display:none;\" type=\"text\" value=\"' . $article->Metas->passwordvisit_enable_encrypt . '\" class=\"checkbox\">';\n        echo '<p><label for=\"edtDateTime\" class=\"editinputname\">\u5bc6\u7801</label><input type=\"text\" name=\"password\" value=\"' . $article->Metas->passwordvisit_password . '\" style=\"width:110px;\" ><br>\u4e0d\u8f93\u4eba\u5bc6\u7801\u5219\u4f7f\u7528\u5168\u5c40\u5bc6\u7801</p>';\n    } else {\n        echo '<br>\u52a0\u5bc6\u6587\u7ae0<input id=\"enable_encrypt\" name=\"enable_encrypt\" style=\"display:none;\" type=\"text\" value=\"0\" class=\"checkbox\">';\n        echo '<p><label for=\"edtDateTime\" class=\"editinputname\">\u5bc6\u7801</label><input type=\"text\" name=\"password\" value=\"\" style=\"width:110px;\" ><br>\u4e0d\u8f93\u4eba\u5bc6\u7801\u5219\u4f7f\u7528\u5168\u5c40\u5bc6\u7801</p>';\n    }\n}\n\nfunction InstallPlugin_passwordvisit()\n{\n    global $zbp;\n    if (!$zbp->Config('passwordvisit')->HasKey('Version')) {\n        $zbp->Config('passwordvisit')->Version = '1.0';\n        $zbp->Config('passwordvisit')->default_password = 'imzhou';\n        $zbp->Config('passwordvisit')->default_text = '<p>\u672c\u7bc7\u6587\u7ae0\u5df2\u52a0\u5bc6\uff0c\u8bf7\u8f93\u5165\u5bc6\u7801\u540e\u67e5\u770b\u3002</p>';\n        $zbp->Config('passwordvisit')->all_encrypt = '0';\n        $zbp->SaveConfig('passwordvisit');\n    }\n    $zbp->SaveConfig('passwordvisit');\n}\nfunction UninstallPlugin_passwordvisit()\n{\n}\n"], "fixing_code": ["<?xml version=\"1.0\"?>\n<ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" name=\"PSR2\" xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\">\n\t<description>\n\t\tZ-BlogPHP Code Standard\n\t</description>\n\t<exclude-pattern>*.js</exclude-pattern>\n\t<exclude-pattern>*.css</exclude-pattern>\n\t<arg name=\"tab-width\" value=\"4\" />\n\t<rule ref=\"Internal.NoCodeFound\">\n\t\t<severity>0</severity>\n\t</rule>\n\t<rule ref=\"PSR2\">\n\t\t<exclude name=\"Generic.Files.LineEndings\" />\n\t\t<exclude name=\"Generic.Files.LineLength\" />\n\t\t<exclude name=\"PSR1.Files.SideEffects\" />\n\t\t<!-- \u90fd\u6ca1\u6709namespace\u8981\u4e86\u5e72\u561b -->\n\t\t<exclude name=\"PSR1.Classes.ClassDeclaration\" />\n\t\t<!-- \u91c7\u7528PascalCase\u5f0f\uff0c\u4e0d\u8003\u8651\u5c0f\u9a7c\u5cf0\uff1b\u4e0d\u8fc7PHPCS\u4e0d\u63d0\u4f9b\u914d\u7f6e\uff0c\u4e5f\u61d2\u5f97\u5199\u4e86 -->\n\t\t<exclude name=\"PSR1.Methods.CamelCapsMethodName\" />\n\t\t<!-- \u597d\u50cf\u548c\u4ec0\u4e48\u522b\u7684\u89c4\u5219\u51b2\u7a81\u4e86 -->\n\t\t<exclude name=\"PSR2.Classes.ClassDeclaration\" />\n\t</rule>\n\t<!-- \u8fd9\u91cc\u7684\u4ee3\u7801\u89c4\u8303\u662fPascalCase__XXX__XXX -->\n\t<rule ref=\"Squiz.Classes.ValidClassName\">\n\t\t<exclude-pattern>zb_system/function/lib/*/*</exclude-pattern>\n\t</rule>\n\t<!-- \u81ea\u5b9a\u4e49\u6d4b\u8bd5 -->\n\t<rule ref=\"PHPCompatibility\">\n\t\t<exclude name=\"PHPCompatibility.ParameterValues.NewHTMLEntitiesEncodingDefault\" />\n\t\t<exclude name=\"PHPCompatibility.ParameterValues.NewIconvMbstringCharsetDefault\" />\n\t\t<!-- \u5df2\u505a\u517c\u5bb9\u5904\u7406 -->\n\t\t<exclude name=\"PHPCompatibility.Classes.NewClasses.CURLFile.Found\" />\n\t\t<exclude name=\"PHPCompatibility.IniDirectives.RemovedIniDirectives.safe_mode.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Extensions.RemovedExtensions.sqlite.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Extensions.RemovedExtensions.mysql_.Found\" />\n\t\t<!-- \u5df2\u505a\u5e9f\u5f03\u5904\u7406\uff0c\u4e0d\u518d\u9700\u8981 -->\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.RemovedFunctions.get_magic_quotes_gpc.Found\" />\n\t\t<!-- \u6b64\u90e8\u4efd\u51fd\u6570\u7531\u4e8e\u5df2\u6709\u5b9a\u4e49\uff0c\u4e0d\u518d\u9700\u8981 -->\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.hex2bin.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.fnmatch.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.http_build_url.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.rrmdir.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.gzdecode.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.array_replace_recursive.Found\" />\n\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.hash_equals.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.PHP_VERSION_ID.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_PATHNAME.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_NOESCAPE.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_PERIOD.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_CASEFOLD.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_REPLACE.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_JOIN_PATH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_JOIN_QUERY.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_USER.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PASS.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_AUTH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PORT.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_PATH.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_QUERY.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_FRAGMENT.Found\" />\n\t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.HTTP_URL_STRIP_ALL.Found\" />\n\t</rule>\n\t<config name=\"testVersion\" value=\"5.2-\" />\n\t<rule ref=\"Squiz\">\n\t\t<exclude name=\"Squiz.Commenting\" />\n\t\t<exclude name=\"Squiz.NamingConventions\" />\n\t\t<exclude name=\"Squiz.Arrays.ArrayDeclaration\" />\n\t\t<exclude name=\"Squiz.Operators.ComparisonOperatorUsage\" />\n\t\t<exclude name=\"Squiz.Classes.ClassFileName\" />\n\t\t<exclude name=\"Squiz.ControlStructures.InlineIfDeclaration\" />\n\t\t<exclude name=\"Squiz.ControlStructures.ElseIfDeclaration\" />\n\t\t<exclude name=\"Squiz.ControlStructures.SwitchDeclaration\" />\n\t\t<exclude name=\"Squiz.Files.FileExtension\" />\n\t\t<exclude name=\"Squiz.Functions.GlobalFunction\" />\n\t\t<exclude name=\"Squiz.PHP.GlobalKeyword\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowInlineIf\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowComparisonAssignment\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowBooleanStatement\" />\n\t\t<exclude name=\"Squiz.PHP.CommentedOutCode\" />\n\t\t<exclude name=\"Squiz.Strings.DoubleQuoteUsage\" />\n\t\t<exclude name=\"Squiz.WhiteSpace.FunctionClosingBraceSpace\" />\n\t\t<exclude name=\"Generic.Commenting.DocComment\" />\n\t\t<exclude name=\"Generic.Arrays.DisallowLongArraySyntax\" />\n\t\t<exclude name=\"Generic.Formatting.MultipleStatementAlignment\" />\n\t\t<!-- \u8fd9\u4e24\u4e2a\u4e0d\u5e94\u8be5\u5173\u6389\uff0c\u4f46\u597d\u50cf\u4e0d\u5c11\u5730\u65b9\u7528\u4e86\u5947\u602a\u7684\u7279\u6027 -->\n\t\t<exclude name=\"Squiz.PHP.DisallowSizeFunctionsInLoops\" />\n\t\t<exclude name=\"Squiz.PHP.DisallowMultipleAssignments\" />\n    <!-- \u559c\u6b22\u5c31\u7559\u7740 -->\n    <exclude name=\"Generic.Strings.UnnecessaryStringConcat\" />\n    <exclude name=\"Squiz.Operators.IncrementDecrementUsage\" />\n\t</rule>\n\t<rule ref=\"Squiz.Strings.ConcatenationSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t\t<property name=\"ignoreNewlines\" value=\"true\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Squiz.WhiteSpace.OperatorSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Squiz.WhiteSpace.FunctionSpacing\">\n\t\t<properties>\n\t\t\t<property name=\"spacing\" value=\"1\" />\n\t\t</properties>\n\t</rule>\n\t<rule ref=\"Generic.PHP.ForbiddenFunctions\">\n\t\t<properties>\n\t\t\t<property name=\"forbiddenFunctions\" type=\"array\">\n\t\t\t\t<element key=\"sizeof\" value=\"count\" />\n\t\t\t\t<element key=\"delete\" value=\"unset\" />\n\t\t\t\t<element key=\"print\" value=\"echo\" />\n\t\t\t\t<element key=\"create_function\" value=\"null\" />\n\t\t\t</property>\n\t\t</properties>\n\t</rule>\n\n</ruleset>\n", "<?php\n\n/**\n * \u8f85\u52a9\u901a\u7528\u51fd\u6570.\n */\n\n/**\n * \u5f97\u5230\u8bf7\u6c42\u534f\u8bae\uff08\u8003\u8651\u5230\u4e0d\u6b63\u786e\u7684\u914d\u7f6e\u53cd\u5411\u4ee3\u7406\u7b49\u539f\u56e0\uff0c\u672a\u5fc5\u51c6\u786e\uff09\n * \u5982\u679c\u60f3\u83b7\u53d6\u51c6\u786e\u7684\u503c\uff0c\u8bf7zbp->Load\u540e\u4f7f\u7528$zbp->isHttps.\n *\n * @param array $array\n *\n * @return string\n */\nfunction GetScheme($array)\n{\n    $array = array_change_key_case($array, CASE_UPPER);\n\n    if (array_key_exists('REQUEST_SCHEME', $array) && (strtolower($array['REQUEST_SCHEME']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTPS', $array) && (strtolower($array['HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('SERVER_PORT', $array) && ($array['SERVER_PORT'] == 443)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PORT', $array) && ($array['HTTP_X_FORWARDED_PORT'] == 443)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PROTO', $array) && (strtolower($array['HTTP_X_FORWARDED_PROTO']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_PROTOCOL', $array) && (strtolower($array['HTTP_X_FORWARDED_PROTOCOL']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_FORWARDED_SSL', $array) && (strtolower($array['HTTP_X_FORWARDED_SSL']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_X_URL_SCHEME', $array) && (strtolower($array['HTTP_X_URL_SCHEME']) == 'https')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_CF_VISITOR', $array) && (stripos($array['HTTP_CF_VISITOR'], 'https') !== false)) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_FROM_HTTPS', $array) && (strtolower($array['HTTP_FROM_HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('HTTP_FRONT_END_HTTPS', $array) && (strtolower($array['HTTP_FRONT_END_HTTPS']) == 'on')) {\n        return 'https://';\n    } elseif (array_key_exists('SERVER_PORT_SECURE', $array) && ($array['SERVER_PORT_SECURE'] == 1)) {\n        return 'https://';\n    }\n    return 'http://';\n}\n\n/**\n * \u83b7\u53d6\u670d\u52a1\u5668.\n *\n * @return int\n */\nfunction GetWebServer()\n{\n    if (!isset($_SERVER['SERVER_SOFTWARE'])) {\n        return SERVER_UNKNOWN;\n    }\n    $webServer = strtolower($_SERVER['SERVER_SOFTWARE']);\n    if (strpos($webServer, 'apache') !== false) {\n        return SERVER_APACHE;\n    } elseif (strpos($webServer, 'microsoft-iis') !== false) {\n        return SERVER_IIS;\n    } elseif (strpos($webServer, 'nginx') !== false) {\n        return SERVER_NGINX;\n    } elseif (strpos($webServer, 'lighttpd') !== false) {\n        return SERVER_LIGHTTPD;\n    } elseif (strpos($webServer, 'kangle') !== false) {\n        return SERVER_KANGLE;\n    } elseif (strpos($webServer, 'caddy') !== false) {\n        return SERVER_CADDY;\n    } elseif (strpos($webServer, 'development server') !== false) {\n        return SERVER_BUILTIN;\n    } else {\n        return SERVER_UNKNOWN;\n    }\n}\n\n/**\n * \u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\n *\n * @return int\n */\nfunction GetSystem()\n{\n    if (in_array(strtoupper(PHP_OS), array('WINNT', 'WIN32', 'WINDOWS'))) {\n        return SYSTEM_WINDOWS;\n    } elseif ((strtoupper(PHP_OS) === 'UNIX')) {\n        return SYSTEM_UNIX;\n    } elseif (strtoupper(PHP_OS) === 'LINUX') {\n        return SYSTEM_LINUX;\n    } elseif (strtoupper(PHP_OS) === 'DARWIN') {\n        return SYSTEM_DARWIN;\n    } elseif (strtoupper(substr(PHP_OS, 0, 6)) === 'CYGWIN') {\n        return SYSTEM_CYGWIN;\n    } elseif (in_array(strtoupper(PHP_OS), array('NETBSD', 'OPENBSD', 'FREEBSD'))) {\n        return SYSTEM_BSD;\n    } else {\n        return SYSTEM_UNKNOWN;\n    }\n}\n\n/**\n * \u83b7\u53d6PHP\u89e3\u6790\u5f15\u64ce.\n *\n * @return int\n */\nfunction GetPHPEngine()\n{\n    return ENGINE_PHP;\n}\n\n/**\n * \u83b7\u53d6PHP Version.\n *\n * @return string\n */\nfunction GetPHPVersion()\n{\n    $p = phpversion();\n    if (strpos($p, '-') !== false) {\n        $p = substr($p, 0, strpos($p, '-'));\n    }\n\n    return $p;\n}\n\n/**\n * \u81ea\u52a8\u52a0\u8f7d\u7c7b\u6587\u4ef6.\n *\n * @param string $className \u7c7b\u540d\n *\n * @api    Filter_Plugin_Autoload\n * *\n * @return mixed\n */\nfunction AutoloadClass($className)\n{\n    foreach ($GLOBALS['hooks']['Filter_Plugin_Autoload'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($className);\n        if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n            $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n            return $fpreturn;\n        }\n    }\n    $className = str_replace('__', '/', $className);\n    $fileName = ZBP_PATH . 'zb_system/function/lib/' . strtolower($className) . '.php';\n    if (is_readable($fileName)) {\n        include $fileName;\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * \u8bb0\u5f55\u65e5\u5fd7.\n *\n * @param string $logString\n * @param bool   $isError\n *\n * @return bool\n */\nfunction Logs($logString, $isError = false)\n{\n    global $zbp;\n    foreach ($GLOBALS['hooks']['Filter_Plugin_Logs'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($logString, $isError);\n        if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n            $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n            return $fpreturn;\n        }\n    }\n    if ($zbp->guid) {\n        if ($isError) {\n            $f = $zbp->usersdir . 'logs/' . $zbp->guid . '-error' . date(\"Ymd\") . '.txt';\n        } else {\n            $f = $zbp->usersdir . 'logs/' . $zbp->guid . '-log' . date(\"Ymd\") . '.txt';\n        }\n    } else {\n        if ($isError) {\n            $f = $zbp->usersdir . 'logs/' . md5($zbp->path) . '-error.txt';\n        } else {\n            $f = $zbp->usersdir . 'logs/' . md5($zbp->path) . '.txt';\n        }\n    }\n    ZBlogException::SuspendErrorHook();\n    $handle = @fopen($f, 'a+');\n    if ($handle) {\n        $t = date('Y-m-d') . ' ' . date('H:i:s') . ' ' . substr(microtime(), 1, 9) . ' ' . date('P');\n        @fwrite($handle, '[' . $t . ']' . \"\\r\\n\" . $logString . \"\\r\\n\");\n        @fclose($handle);\n    }\n    ZBlogException::ResumeErrorHook();\n\n    return true;\n}\n\n/**\n * \u8f93\u51fa\u9875\u9762\u8fd0\u884c\u65f6\u957f\n *\n * @param bool $isOutput \u662f\u5426\u8f93\u51fa\uff08\u8003\u8651\u5386\u53f2\u539f\u56e0\uff0c\u9ed8\u8ba4\u8f93\u51fa\uff09\n *\n * @return array\n */\nfunction RunTime($isOutput = true)\n{\n    global $zbp;\n\n    $rt = array();\n    $_end_time = microtime(true);\n    $rt['time'] = number_format((1000 * ($_end_time - $_SERVER['_start_time'])), 2);\n    $rt['query'] = $_SERVER['_query_count'];\n    $rt['memory'] = $_SERVER['_memory_usage'];\n    $rt['error'] = $_SERVER['_error_count'];\n    $rt['error_detail'] = ZBlogException::$errors_msg;\n    if (function_exists('memory_get_usage')) {\n        $rt['memory'] = (int) ((memory_get_usage() - $_SERVER['_memory_usage']) / 1024);\n    }\n\n    $_SERVER['_runtime_result'] = $rt;\n\n    if (array_key_exists('_end_time', $_SERVER)) {\n        return $rt;\n    } else {\n        $_SERVER['_end_time'] = $_end_time;\n    }\n\n    if (isset($zbp->option['ZC_RUNINFO_DISPLAY']) && $zbp->option['ZC_RUNINFO_DISPLAY'] == false) {\n        return $rt;\n    }\n\n    if ($isOutput) {\n        echo '<!--' . $rt['time'] . ' ms , ';\n        echo $rt['query'] . ' query';\n        echo ' , ' . $rt['memory'] . 'kb memory';\n        echo ' , ' . $rt['error'] . ' error';\n        echo '-->';\n    }\n\n    return $rt;\n}\n\n/**\n * \u83b7\u5f97\u7cfb\u7edf\u4fe1\u606f.\n *\n * @return string \u7cfb\u7edf\u4fe1\u606f\n *\n * @since 1.4\n */\nfunction GetEnvironment()\n{\n    global $zbp;\n    $ajax = Network::Create();\n    if ($ajax) {\n        $ajax = substr(get_class($ajax), 9);\n    }\n    if ($ajax == 'curl') {\n        if (ini_get(\"safe_mode\") || (version_compare(PHP_VERSION, '5.6.0', '<') && ini_get(\"open_basedir\"))) {\n            $ajax .= '-safemode';\n        }\n        $array = curl_version();\n        $ajax .= $array['version'];\n    }\n    if (function_exists('php_uname') == true) {\n        $uname = SplitAndGet(php_uname('r'), '-', 0);\n    } else {\n        $uname = '';\n    }\n    $system_environment = PHP_OS . $uname . '; ' .\n        GetValueInArray(\n            explode(\n                ' ',\n                str_replace(array('Microsoft-', '/'), array('', ''), GetVars('SERVER_SOFTWARE', 'SERVER'))\n            ),\n            0\n        ) . '; PHP' . GetPHPVersion() . (IS_X64 ? 'x64' : '') . '; ' .\n        $zbp->option['ZC_DATABASE_TYPE'] . $zbp->db->version . '; ' . $ajax;\n\n    if (defined('OPENSSL_VERSION_TEXT')) {\n        $system_environment .= '; ' . str_replace(' ', '', OPENSSL_VERSION_TEXT);\n    }\n\n    return $system_environment;\n}\n\n/**\n * \u901a\u8fc7\u6587\u4ef6\u83b7\u53d6\u5e94\u7528URL\u5730\u5740\n *\n * @param string $file \u6587\u4ef6\u540d\n *\n * @return string \u8fd4\u56deURL\u5730\u5740\n */\nfunction plugin_dir_url($file)\n{\n    global $zbp;\n    $s1 = $zbp->path;\n    $s2 = str_replace('\\\\', '/', dirname($file) . '/');\n    $s = substr($s2, strspn($s1, $s2, 0));\n    if (strpos($s, 'zb_users/plugin/') !== false) {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/plugin/', 0));\n    } else {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/theme/', 0));\n    }\n    $a = explode('/', $s);\n    $s = $a[0];\n    $s = $zbp->host . $s3 . $s . '/';\n\n    return $s;\n}\n\n/**\n * \u901a\u8fc7\u6587\u4ef6\u83b7\u53d6\u5e94\u7528\u76ee\u5f55\u8def\u5f84.\n *\n * @param $file\n *\n * @return string\n */\nfunction plugin_dir_path($file)\n{\n    global $zbp;\n    $s1 = $zbp->path;\n    $s2 = str_replace('\\\\', '/', dirname($file) . '/');\n    $s = substr($s2, strspn($s1, $s2, 0));\n    if (strpos($s, 'zb_users/plugin/') !== false) {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/plugin/', 0));\n    } else {\n        $s = substr($s, strspn($s, $s3 = 'zb_users/theme/', 0));\n    }\n    $a = explode('/', $s);\n    $s = $a[0];\n    $s = $zbp->path . $s3 . $s . '/';\n\n    return $s;\n}\n\n/**\n * \u901a\u8fc7Key\u4ece\u6570\u7ec4\u83b7\u53d6\u6570\u636e.\n *\n * @param array  $array \u6570\u7ec4\u540d\n * @param string $name  \u4e0b\u6807key\n *\n * @return mixed\n */\nfunction GetValueInArray($array, $name)\n{\n    if (is_array($array)) {\n        if (array_key_exists($name, $array)) {\n            return $array[$name];\n        }\n    }\n}\n\n/**\n * \u83b7\u53d6\u6570\u7ec4\u4e2d\u7684\u5f53\u524d\u5143\u7d20\u6570\u636e.\n *\n * @param string $array \u6570\u7ec4\u540d\n * @param string $name  \u4e0b\u6807key\n *\n * @return mixed\n */\nfunction GetValueInArrayByCurrent($array, $name)\n{\n    if (is_array($array)) {\n        $array = current($array);\n\n        return GetValueInArray($array, $name);\n    }\n}\n\n/**\n * \u5206\u5272string\u5e76\u53d6\u67d0\u9879\u6570\u636e.\n *\n * @param string $string\n * @param string $delimiter\n * @param int    $n\n *\n * @return string\n */\nfunction SplitAndGet($string, $delimiter = ';', $n = 0)\n{\n    $a = explode($delimiter, $string);\n    if (!is_array($a)) {\n        $a = array();\n    }\n    if (isset($a[$n])) {\n        return (string) $a[$n];\n    }\n\n    return '';\n}\n\n/**\n * \u5220\u9664\u8fde\u7eed\u7a7a\u683c\n *\n * @param $s\n *\n * @return null|string|string[]\n */\nfunction RemoveMoreSpaces($s)\n{\n    return preg_replace(\"/\\s(?=\\s)/\", \"\\\\1\", $s);\n}\n\n/**\n * \u83b7\u53d6Guid.\n *\n * @return string\n */\nfunction GetGuid()\n{\n    $charid = strtolower(md5(uniqid(mt_rand(), true)));\n\n    return $charid;\n}\n\n/**\n * \u83b7\u53d6\u53c2\u6570\u503c\n *\n * @param string $name \u6570\u7ec4key\u540d\n * @param string $type \u9ed8\u8ba4\u4e3aREQUEST\n *\n * @return mixed|null\n */\nfunction GetVars($name, $type = 'REQUEST')\n{\n    $array = &$GLOBALS[strtoupper(\"_$type\")];\n\n    if (isset($array[$name])) {\n        return $array[$name];\n    } else {\n        return null;\n    }\n}\n\n/**\n * \u83b7\u53d6\u53c2\u6570\u503c\uff08\u53ef\u8bbe\u7f6e\u9ed8\u8ba4\u8fd4\u56de\u503c\uff09.\n *\n * @param string $name    \u6570\u7ec4key\u540d\n * @param string $type    \u9ed8\u8ba4\u4e3aREQUEST\n * @param string $default \u9ed8\u8ba4\u4e3anull\n *\n * @return mixed|null\n *\n * @since 1.3.140614\n */\nfunction GetVarsByDefault($name, $type = 'REQUEST', $default = null)\n{\n    $g = GetVars($name, $type);\n    if ($g == null || $g == '') {\n        return $default;\n    }\n\n    return $g;\n}\n\n/**\n * \u83b7\u53d6\u6570\u636e\u5e93\u540d.\n *\n * @return string \u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u7684SQLite\u6570\u636e\u6587\u4ef6\u540d\n */\nfunction GetDbName()\n{\n    return str_replace('-', '', '#%20' . strtolower(GetGuid())) . '.db';\n}\n\n/**\n * \u83b7\u53d6\u5f53\u524d\u7f51\u7ad9\u5730\u5740\n *\n * @param string $blogpath     \u7f51\u7ad9\u57df\u540d\n * @param string &$cookiesPath \u8fd4\u56decookie\u4f5c\u7528\u57df\u503c\uff0c\u8981\u4f20\u5f15\u5165\n *\n * @return string \u8fd4\u56de\u7f51\u7ad9\u5b8c\u6574\u5730\u5740\uff0c\u5982http://localhost/zbp/\n */\nfunction GetCurrentHost($blogpath, &$cookiesPath)\n{\n    $host = HTTP_SCHEME;\n\n    $host .= $_SERVER['HTTP_HOST'];\n\n    if (isset($_SERVER['SCRIPT_NAME']) && $_SERVER['SCRIPT_NAME']) {\n        $x = $_SERVER['SCRIPT_NAME'];\n        $y = $blogpath;\n        for ($i = 0; $i < strlen($x); $i++) {\n            $f = $y . substr($x, ($i - strlen($x)));\n            $z = substr($x, 0, $i);\n            if (file_exists($f) && is_file($f)) {\n                $z = trim($z, '/');\n                $z = '/' . $z . '/';\n                $z = str_replace('//', '/', $z);\n                $cookiesPath = $z;\n\n                return $host . $z;\n            }\n        }\n    }\n\n    $x = $_SERVER['SCRIPT_NAME'];\n    $y = $blogpath;\n    if (isset($_SERVER[\"CONTEXT_DOCUMENT_ROOT\"]) && isset($_SERVER[\"CONTEXT_PREFIX\"])) {\n        if ($_SERVER[\"CONTEXT_DOCUMENT_ROOT\"] && $_SERVER[\"CONTEXT_PREFIX\"]) {\n            $y = $_SERVER[\"CONTEXT_DOCUMENT_ROOT\"] . $_SERVER[\"CONTEXT_PREFIX\"] . '/';\n        }\n    }\n\n    $z = '';\n\n    for ($i = strlen($x); $i > 0; $i--) {\n        $z = substr($x, 0, $i);\n        if (strtolower(substr($y, (strlen($y) - $i))) == strtolower($z)) {\n            break;\n        }\n    }\n\n    $cookiesPath = $z;\n\n    return $host . $z;\n}\n\n/**\n * \u901a\u8fc7URL\u83b7\u53d6\u8fdc\u7a0b\u9875\u9762\u5185\u5bb9.\n *\n * @param string $url URL\u5730\u5740\n *\n * @return string \u8fd4\u56de\u9875\u9762\u6587\u672c\u5185\u5bb9\uff0c\u9ed8\u8ba4\u4e3anull\n */\nfunction GetHttpContent($url)\n{\n    $ajax = Network::Create();\n    if (!$ajax) {\n        return;\n    }\n\n    $ajax->open('GET', $url);\n    $ajax->enableGzip();\n    $ajax->setTimeOuts(60, 60, 0, 0);\n    $ajax->send();\n\n    return ($ajax->status == 200) ? $ajax->responseText : null;\n}\n\n/**\n * \u83b7\u53d6\u76ee\u5f55\u4e0b\u6587\u4ef6\u5939\u5217\u8868.\n *\n * @param string $dir \u76ee\u5f55\n *\n * @return array \u6587\u4ef6\u5939\u5217\u8868\n */\nfunction GetDirsInDir($dir)\n{\n    $dirs = array();\n\n    if (!file_exists($dir)) {\n        return array();\n    }\n    if (!is_dir($dir)) {\n        return array();\n    }\n    $dir = str_replace('\\\\', '/', $dir);\n    if (substr($dir, -1) !== '/') {\n        $dir .= '/';\n    }\n\n    // \u6b64\u5904\u7684scandir\u867d\u7136\u662fPHP 5\u5c31\u5df2\u52a0\u5165\u7684\u5185\u5bb9\uff0c\u4f46\u5fc5\u987b\u52a0\u4e0a\u517c\u5bb9\u5904\u7406\n    // \u90e8\u5206\u4e00\u952e\u5b89\u88c5\u5305\u7684\u65e9\u671f\u7248\u672c\u5bf9\u5176\u8fdb\u884c\u4e86\u7981\u7528\n    // \u8fd9\u4e00\u7981\u7528\u5bf9\u5b89\u5168\u6ca1\u6709\u4efb\u4f55\u5e2e\u52a9\uff0c\u63a8\u6d4b\u662f\u65e9\u671f\u4e92\u8054\u7f51\u6d41\u4f20\u4e0b\u6765\u7684\u201c\u5b89\u5168\u79d8\u7b08\u201d\u3002\n    // @see: https://github.com/licess/lnmp/commit/bd34d5c803308afdac61626018e4168716d089ae#diff-6282e7667da1e2fc683bed06f87f74c1\n    if (function_exists('scandir')) {\n        foreach (scandir($dir, 0) as $d) {\n            if (is_dir($dir . $d)) {\n                if (($d != '.') && ($d != '..')) {\n                    $dirs[] = $d;\n                }\n            }\n        }\n    } else {\n        $handle = opendir($dir);\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if ($file != \".\" && $file != \"..\") {\n                    if (is_dir($dir . $file)) {\n                        $dirs[] = $file;\n                    }\n                }\n            }\n            closedir($handle);\n        }\n    }\n\n    return $dirs;\n}\n\n/**\n * \u83b7\u53d6\u76ee\u5f55\u4e0b\u6307\u5b9a\u7c7b\u578b\u6587\u4ef6\u5217\u8868.\n *\n * @param string $dir  \u76ee\u5f55\n * @param string $type \u6587\u4ef6\u7c7b\u578b\uff0c\u4ee5\uff5c\u5206\u9694\n *\n * @return array \u6587\u4ef6\u5217\u8868\n */\nfunction GetFilesInDir($dir, $type)\n{\n    $files = array();\n    $dir = str_replace('\\\\', '/', $dir);\n    if (substr($dir, -1) !== '/') {\n        $dir .= '/';\n    }\n    if (!is_dir($dir)) {\n        return array();\n    }\n\n    if (function_exists('scandir')) {\n        foreach (scandir($dir) as $f) {\n            if (is_file($dir . $f)) {\n                foreach (explode(\"|\", $type) as $t) {\n                    $t = '.' . $t;\n                    $i = strlen($t);\n                    if (substr($f, -$i, $i) == $t) {\n                        $sortname = substr($f, 0, (strlen($f) - $i));\n                        $files[$sortname] = $dir . $f;\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        $handle = opendir($dir);\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if ($file != \".\" && $file != \"..\") {\n                    if (is_file($dir . $file)) {\n                        foreach (explode(\"|\", $type) as $t) {\n                            $t = '.' . $t;\n                            $i = strlen($t);\n                            if (substr($file, -$i, $i) == $t) {\n                                $sortname = substr($file, 0, (strlen($file) - $i));\n                                $files[$sortname] = $dir . $file;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            closedir($handle);\n        }\n    }\n\n    return $files;\n}\n\n/**\n * \u8bbe\u7f6ehttp\u72b6\u6001\u5934.\n *\n * @param int $number HttpStatus\n *\n * @internal param string $status \u6210\u529f\u83b7\u53d6\u72b6\u6001\u7801\u8bbe\u7f6e\u9759\u6001\u53c2\u6570status\n *\n * @return bool\n */\nfunction SetHttpStatusCode($number, $force = false)\n{\n    static $status = '';\n    if ($status != '' && $force == false) {\n        return false;\n    }\n\n    $codes = array(\n        // Informational 1xx\n        100 => 'Continue',\n        101 => 'Switching Protocols',\n        102 => 'Processing',\n\n        // Success 2xx\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        203 => 'Non-Authoritative Information',\n        204 => 'No Content',\n        205 => 'Reset Content',\n        206 => 'Partial Content',\n        207 => 'Multi-Status',\n\n        // Redirection 3xx\n        300 => 'Multiple Choices',\n        301 => 'Moved Permanently',\n        302 => 'Found', // 1.1\n        303 => 'See Other',\n        304 => 'Not Modified',\n        305 => 'Use Proxy',\n        306 => 'Switch Proxy',\n        307 => 'Temporary Redirect',\n\n        // Client Error 4xx\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        402 => 'Payment Required',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        406 => 'Not Acceptable',\n        407 => 'Proxy Authentication Required',\n        408 => 'Request Timeout',\n        409 => 'Conflict',\n        410 => 'Gone',\n        411 => 'Length Required',\n        412 => 'Precondition Failed',\n        413 => 'Request Entity Too Large',\n        414 => 'Request-URI Too Long',\n        415 => 'Unsupported Media Type',\n        416 => 'Requested Range Not Satisfiable',\n        417 => 'Expectation Failed',\n        451 => 'Unavailable For Legal Reasons',\n\n        // Server Error 5xx\n        500 => 'Internal Server Error',\n        501 => 'Not Implemented',\n        502 => 'Bad Gateway',\n        503 => 'Service Unavailable',\n        504 => 'Gateway Timeout',\n        505 => 'HTTP Version Not Supported',\n        506 => 'Variant Also Negotiates',\n        507 => 'Insufficient Storage',\n        508 => 'Loop Detected',\n        509 => 'Bandwidth Limit Exceeded',\n        510 => 'Not Extended',\n    );\n\n    if (isset($codes[$number])) {\n        header('HTTP/1.1 ' . $number . ' ' . $codes[$number]);\n        $status = $number;\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * \u7528script\u6807\u7b7e\u8fdb\u884c\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction RedirectByScript($url)\n{\n    echo '<script>location.href = decodeURIComponent(\"' . urlencode($url) . '\");</script>';\n    die();\n}\n\n/**\n * 302\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction Redirect($url)\n{\n    SetHttpStatusCode(302);\n    header('Location: ' . $url);\n    die();\n}\n\n/**\n * 301\u8df3\u8f6c.\n *\n * @param string $url \u8df3\u8f6c\u94fe\u63a5\n */\nfunction Redirect301($url)\n{\n    SetHttpStatusCode(301);\n    header('Location: ' . $url);\n    die();\n}\n\n/**\n * Http404\n */\nfunction Http404()\n{\n    SetHttpStatusCode(404);\n    header(\"Status: 404 Not Found\");\n}\n\n/**\n * Http500\n */\nfunction Http500()\n{\n    SetHttpStatusCode(500);\n}\n\n/**\n * Http503\n */\nfunction Http503()\n{\n    SetHttpStatusCode(503);\n}\n\n/**\n * \u8bbe\u7f6e304\u7f13\u5b58\u5934.\n *\n * @param string $filename \u6587\u4ef6\u540d\n * @param string $time     \u7f13\u5b58\u65f6\u95f4\n */\nfunction Http304($filename, $time)\n{\n    $url = $filename;\n    $md5 = md5($url . $time);\n    $etag = '\"' . $md5 . '\"';\n    header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $time) . ' GMT');\n    header(\"ETag: $etag\");\n    if ((isset($_SERVER['HTTP_IF_NONE_MATCH']) && $_SERVER['HTTP_IF_NONE_MATCH'] == $etag)) {\n        SetHttpStatusCode(304);\n        die();\n    }\n}\n\n/**\n * \u83b7\u53d6\u5ba2\u6237\u7aefIP.\n *\n * @return string \u8fd4\u56deIP\u5730\u5740\n */\nfunction GetGuestIP()\n{\n    global $zbp;\n    if (isset($zbp->option['ZC_USING_CDN_GUESTIP_TYPE']) && $zbp->option['ZC_USING_CDN_GUESTIP_TYPE'] != '') {\n        $user_ip = GetVars($zbp->option['ZC_USING_CDN_GUESTIP_TYPE'], \"SERVER\");\n    } else {\n        $user_ip = GetVars(\"REMOTE_ADDR\", \"SERVER\");\n    }\n\n    return $user_ip;\n}\n\n/**\n * \u83b7\u53d6\u5ba2\u6237\u7aefAgent.\n *\n * @return string \u8fd4\u56deAgent\n */\nfunction GetGuestAgent()\n{\n    return GetVars(\"HTTP_USER_AGENT\", \"SERVER\");\n}\n\n/**\n * \u83b7\u53d6\u8bf7\u6c42\u6765\u6e90URL.\n *\n * @return string \u8fd4\u56deURL\n */\nfunction GetRequestUri()\n{\n    if (isset($_SERVER['HTTP_X_ORIGINAL_URL'])) {\n        $url = $_SERVER['HTTP_X_ORIGINAL_URL'];\n    } elseif (isset($_SERVER['HTTP_X_REWRITE_URL'])) {\n        $url = $_SERVER['HTTP_X_REWRITE_URL'];\n        if (strpos($url, '?') !== false) {\n            $queries = GetValueInArray(explode('?', $url), '1');\n            foreach (explode('&', $queries) as $query) {\n                $name = GetValueInArray(explode('=', $query), '0');\n                $value = GetValueInArray(explode('=', $query), '1');\n                $name = urldecode($name);\n                $value = urldecode($value);\n                if (!isset($_GET[$name])) {\n                    $_GET[$name] = $value;\n                }\n\n                if (!isset($_GET[$name])) {\n                    $_REQUEST[$name] = $value;\n                }\n            }\n        }\n    } elseif (isset($_SERVER['REQUEST_URI'])) {\n        $url = $_SERVER['REQUEST_URI'];\n    } elseif (isset($_SERVER['REDIRECT_URL'])) {\n        $url = $_SERVER['REDIRECT_URL'];\n        if (isset($_SERVER['REDIRECT_QUERY_STRIN'])) {\n            $url .= '?' . $_SERVER['REDIRECT_QUERY_STRIN'];\n        }\n    } else {\n        $url = $_SERVER['PHP_SELF'] . ($_SERVER['QUERY_STRING'] ? '?' . $_SERVER['QUERY_STRING'] : '');\n    }\n\n    return $url;\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\u540d.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string \u8fd4\u56de\u5c0f\u5199\u7684\u540e\u7f00\u540d\n */\nfunction GetFileExt($f)\n{\n    if (strpos($f, '.') === false) {\n        return '';\n    }\n\n    $a = explode('.', $f);\n\n    return strtolower(end($a));\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u6743\u9650.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string|null \u8fd4\u56de\u6587\u4ef6\u6743\u9650\uff0c\u6570\u503c\u683c\u5f0f\uff0c\u59820644\n */\nfunction GetFilePermsOct($f)\n{\n    if (!file_exists($f)) {\n        return;\n    }\n\n    return substr(sprintf('%o', fileperms($f)), -4);\n}\n\n/**\n * \u83b7\u53d6\u6587\u4ef6\u6743\u9650.\n *\n * @param string $f \u6587\u4ef6\u540d\n *\n * @return string|null \u8fd4\u56de\u6587\u4ef6\u6743\u9650\uff0c\u5b57\u7b26\u8868\u8fbe\u683c\u5f0f\uff0c\u5982-rw-r--r--\n */\nfunction GetFilePerms($f)\n{\n    if (!file_exists($f)) {\n        return;\n    }\n\n    $perms = fileperms($f);\n    switch ($perms & 0xF000) {\n        case 0xC000: // socket\n            $info = 's';\n            break;\n        case 0xA000: // symbolic link\n            $info = 'l';\n            break;\n        case 0x8000: // regular\n            $info = '-';\n            break;\n        case 0x6000: // block special\n            $info = 'b';\n            break;\n        case 0x4000: // directory\n            $info = 'd';\n            break;\n        case 0x2000: // character special\n            $info = 'c';\n            break;\n        case 0x1000: // FIFO pipe\n            $info = 'p';\n            break;\n        default: // unknown\n            $info = 'u';\n    }\n\n    // Owner\n    $info .= (($perms & 0x0100) ? 'r' : '-');\n    $info .= (($perms & 0x0080) ? 'w' : '-');\n    $info .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x') : (($perms & 0x0800) ? 'S' : '-'));\n\n    // Group\n    $info .= (($perms & 0x0020) ? 'r' : '-');\n    $info .= (($perms & 0x0010) ? 'w' : '-');\n    $info .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x') : (($perms & 0x0400) ? 'S' : '-'));\n\n    // Other\n    $info .= (($perms & 0x0004) ? 'r' : '-');\n    $info .= (($perms & 0x0002) ? 'w' : '-');\n    $info .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x') : (($perms & 0x0200) ? 'T' : '-'));\n\n    return $info;\n}\n\n/**\n * \u5411\u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\u52a0\u5165\u4e00\u4e2a\u65b0\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return string \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n */\nfunction AddNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n    if (in_array($name, $apl) == false) {\n        $apl[] = $name;\n    }\n    $pl = trim(implode('|', $apl), '|');\n\n    return $pl;\n}\n\n/**\n * \u4ece\u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return string \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n */\nfunction DelNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n    for ($i = 0; $i <= (count($apl) - 1); $i++) {\n        if ($apl[$i] == $name) {\n            unset($apl[$i]);\n        }\n    }\n    $pl = trim(implode('|', $apl), '|');\n\n    return $pl;\n}\n\n/**\n * \u5728\u5b57\u7b26\u4e32\u53c2\u6570\u503c\u67e5\u627e\u53c2\u6570.\n *\n * @param string $s    \u5b57\u7b26\u4e32\u578b\u7684\u53c2\u6570\u8868\uff0c\u4ee5|\u7b26\u53f7\u5206\u9694\n * @param string $name \u53c2\u6570\u540d\n *\n * @return bool\n */\nfunction HasNameInString($s, $name)\n{\n    $pl = $s;\n    $name = (string) $name;\n    $apl = explode('|', $pl);\n\n    return in_array($name, $apl);\n}\n\n/**\n * \u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\uff08\u7528\u4e8eShowError\u63a5\u53e3\uff09.\n *\n * @param $errorCode\n * @param $errorString\n * @param $file\n * @param $line\n */\nfunction JsonError4ShowErrorHook($errorCode, $errorString, $file, $line)\n{\n    JsonError($errorCode, $errorString, null);\n}\n\n/**\n * \u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u9519\u8bef\u4fe1\u606f.\n *\n * @param string $errorCode   \u9519\u8bef\u7f16\u53f7\n * @param string $errorString \u9519\u8bef\u5185\u5bb9\n * @param object\n */\nfunction JsonError($errorCode, $errorString, $data)\n{\n    $result = array(\n        'data' => $data,\n        'err'  => array(\n            'code' => $errorCode,\n            'msg'  => $errorString,\n            //'runtime' => RunTime(),\n            'timestamp' => time(),\n        ),\n    );\n    @ob_clean();\n    echo json_encode($result);\n    if ($errorCode != 0) {\n        exit;\n    }\n}\n\n/**\n * \u5f53\u4ee3\u7801\u6b63\u5e38\u8fd0\u884c\u65f6\uff0c\u4ee5JSON\u5f62\u5f0f\u8f93\u51fa\u4fe1\u606f.\n *\n * @param object \u5f85\u8fd4\u56de\u5185\u5bb9\n */\nfunction JsonReturn($data)\n{\n    JsonError(0, \"\", $data);\n}\n\n/**\n * XML-RPC\u5e94\u7b54\u9519\u8bef\u9875\u9762.\n *\n * @param $errorCode\n * @param $errorString\n * @param $file\n * @param $line\n *\n * @return void\n */\nfunction RespondError($errorCode, $errorString = '', $file = '', $line = '')\n{\n    $strXML = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodResponse><fault><value><struct><member><name>faultCode</name><value><int>$1</int></value></member><member><name>faultString</name><value><string>$2</string></value></member></struct></value></fault></methodResponse>';\n    $strError = $strXML;\n    $strError = str_replace(\"$1\", FormatString($errorCode, \"[html-format]\"), $strError);\n    $strError = str_replace(\"$2\", FormatString($errorString, \"[html-format]\"), $strError);\n\n    ob_clean();\n    echo $strError;\n    exit;\n}\n\n/**\n * XML-RPC\u811a\u672c\u9519\u8bef\u9875\u9762.\n *\n * @param string $errorCode \u9519\u8bef\u63d0\u793a\u5b57\u7b26\u4e32\n * @param string $errorText\n * @param string $file\n * @param string $line\n *\n * @return void\n */\nfunction ScriptError($errorCode, $errorText = '', $file = '', $line = '')\n{\n    header('Content-type: application/x-javascript; Charset=utf-8');\n    ob_clean();\n    echo 'alert(\"' . str_replace('\"', '\\\"', $errorCode . ':' . $errorText) . '\")';\n    die();\n}\n\n/**\n *  \u9a8c\u8bc1\u5b57\u7b26\u4e32\u662f\u5426\u7b26\u5408\u6b63\u5219\u8868\u8fbe\u5f0f.\n *\n * @param string $source \u5b57\u7b26\u4e32\n * @param string $para   \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u7528[username]|[password]|[email]|[homepage]\u6216\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\n *\n * @return bool\n */\nfunction CheckRegExp($source, $para)\n{\n    if (strpos($para, '[username]') !== false) {\n        $para = \"/^[\\.\\_A-Za-z0-9\u00b7@\\x{4e00}-\\x{9fa5}]+$/u\";\n    } elseif (strpos($para, '[nickname]') !== false) {\n        $para = '/([^\\x{01}-\\x{1F}\\x{80}-\\x{FF}\\/:\\\\~&%;@\\'\"?<>|#$\\*}{,\\+=\\[\\]\\(\\)\\{\\}\\t\\r\\n\\p{C}])/u';\n    } elseif (strpos($para, '[password]') !== false) {\n        $para = \"/^[A-Za-z0-9`~!@#\\$%\\^&\\*\\-_\\?]+$/u\";\n    } elseif (strpos($para, '[email]') !== false) {\n        $para = \"/^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*\\.)+[a-zA-Z]*)$/u\";\n    } elseif (strpos($para, '[homepage]') !== false) {\n        $para = \"/^[a-zA-Z]+:\\/\\/[a-zA-Z0-9\\_\\-\\.\\&\\?\\/:=#\\x{4e00}-\\x{9fa5}]+$/u\";\n    } elseif (!$para) {\n        return false;\n    }\n\n    return (bool) preg_match($para, $source);\n}\n\n/**\n *  \u683c\u5f0f\u5316\u5b57\u7b26\u4e32.\n *\n * @param string $source \u5b57\u7b26\u4e32\n * @param string $para   \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u7528[html-format]|[nohtml]|[noscript]|[enter]|[noenter]|[filename]|[normalname]\u6216\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\n *\n * @return string\n */\nfunction FormatString($source, $para)\n{\n    if (strpos($para, '[html-format]') !== false) {\n        $source = htmlspecialchars($source);\n    }\n\n    if (strpos($para, '[nohtml]') !== false) {\n        $source = preg_replace(\"/<([^<>]*)>/si\", \"\", $source);\n        $source = str_replace(\"<\", \"\u02c2\", $source);\n        $source = str_replace(\">\", \"\u02c3\", $source);\n    }\n\n    if (strpos($para, '[noscript]') !== false) {\n        $class  = new XssHtml($source);\n        $source = trim($class->getHtml());\n    }\n    if (strpos($para, '[enter]') !== false) {\n        $source = str_replace(\"\\r\\n\", \"<br/>\", $source);\n        $source = str_replace(\"\\n\", \"<br/>\", $source);\n        $source = str_replace(\"\\r\", \"<br/>\", $source);\n        $source = preg_replace(\"/(<br\\/>)+/\", \"<br/>\", $source);\n    }\n    if (strpos($para, '[noenter]') !== false) {\n        $source = str_replace(\"\\r\\n\", \"\", $source);\n        $source = str_replace(\"\\n\", \"\", $source);\n        $source = str_replace(\"\\r\", \"\", $source);\n    }\n    if (strpos($para, '[filename]') !== false) {\n        $source = str_replace(array(\"/\", \"#\", \"$\", \"\\\\\", \":\", \"?\", \"*\", \"\\\"\", \"<\", \">\", \"|\", \" \"), array(\"\"), $source);\n    }\n    if (strpos($para, '[normalname]') !== false) {\n        $source = str_replace(array(\"#\", \"$\", \"(\", \")\", \"*\", \"+\", \"[\", \"]\", \"{\", \"}\", \"?\", \"\\\\\", \"^\", \"|\", \":\", \"'\", \"\\\"\", \";\", \"@\", \"~\", \"=\", \"%\", \"&\"), array(\"\"), $source);\n    }\n\n    return $source;\n}\n\n/**\n * \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\n *\n * @param string $source\n * @param string $param\n *\n * @Deprecated\n **/\nfunction TransferHTML($source, $param)\n{\n    return FormatString($source, $param);\n}\n\n/**\n *  \u5c01\u88c5HTML\u6807\u7b7e.\n *\n * @param string $html html\u6e90\u7801\n *\n * @return string\n */\nfunction CloseTags($html)\n{\n    preg_match_all('#<(?!meta|img|br|hr|input\\b)\\b([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result);\n    $openedtags = $result[1];\n    preg_match_all('#</([a-z]+)>#iU', $html, $result);\n    $closedtags = $result[1];\n    $len_opened = count($openedtags);\n    if (count($closedtags) == $len_opened) {\n        return $html;\n    }\n    $openedtags = array_reverse($openedtags);\n    for ($i=0; $i < $len_opened; $i++) {\n        if (!in_array($openedtags[$i], $closedtags)) {\n            $html .= '</'.$openedtags[$i].'>';\n        } else {\n            unset($closedtags[array_search($openedtags[$i], $closedtags)]);\n        }\n    }\n    return $html;\n}\n\n/**\n * \u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr \u6e90\u5b57\u7b26\u4e32\n * @param int    $start     \u8d77\u59cb\u4f4d\u7f6e\n *\n * @return string\n */\nfunction SubStrUTF8_Start($sourcestr, $start)\n{\n    $args = func_get_args();\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return call_user_func_array('mb_substr', $args);\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n\n        return call_user_func_array('iconv_substr', $args);\n    }\n\n    return call_user_func_array('substr', $args);\n}\n\n/**\n *  \u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr \u6e90\u5b57\u7b26\u4e32\n * @param int    $cutlength \u5b50\u4e32\u957f\u5ea6\n *\n * @return string\n */\nfunction SubStrUTF8($sourcestr, $cutlength)\n{\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n\n        return mb_substr($sourcestr, 0, $cutlength);\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n\n        return iconv_substr($sourcestr, 0, $cutlength);\n    }\n\n    $ret = '';\n    $i = 0;\n    $n = 0;\n\n    $str_length = strlen($sourcestr); //\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u6570\n\n    while (($n < $cutlength) && ($i <= $str_length)) {\n        $temp_str = substr($sourcestr, $i, 1);\n        $ascnum = ord($temp_str); //\u5f97\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c$i\u4f4d\u5b57\u7b26\u7684ascii\u7801\n        if ($ascnum >= 224) { //\u5982\u679cASCII\u4f4d\u9ad8\u4e0e224\uff0c\n            $ret = $ret . substr($sourcestr, $i, 3); //\u6839\u636eUTF-8\u7f16\u7801\u89c4\u8303\uff0c\u5c063\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u8ba1\u4e3a\u5355\u4e2a\u5b57\u7b26\n            $i = ($i + 3); //\u5b9e\u9645Byte\u8ba1\u4e3a3\n            $n++; //\u5b57\u4e32\u957f\u5ea6\u8ba11\n        } elseif ($ascnum >= 192) { //\u5982\u679cASCII\u4f4d\u9ad8\u4e0e192\uff0c\n            $ret = $ret . substr($sourcestr, $i, 2); //\u6839\u636eUTF-8\u7f16\u7801\u89c4\u8303\uff0c\u5c062\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u8ba1\u4e3a\u5355\u4e2a\u5b57\u7b26\n            $i = ($i + 2); //\u5b9e\u9645Byte\u8ba1\u4e3a2\n            $n++; //\u5b57\u4e32\u957f\u5ea6\u8ba11\n        } elseif ($ascnum >= 65 && $ascnum <= 90) { //\u5982\u679c\u662f\u5927\u5199\u5b57\u6bcd\uff0c\n            $ret = $ret . substr($sourcestr, $i, 1);\n            $i = ($i + 1); //\u5b9e\u9645\u7684Byte\u6570\u4ecd\u8ba11\u4e2a\n            $n++; //\u4f46\u8003\u8651\u6574\u4f53\u7f8e\u89c2\uff0c\u5927\u5199\u5b57\u6bcd\u8ba1\u6210\u4e00\u4e2a\u9ad8\u4f4d\u5b57\u7b26\n        } else {\n            //\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5305\u62ec\u5c0f\u5199\u5b57\u6bcd\u548c\u534a\u89d2\u6807\u70b9\u7b26\u53f7\uff0c\n\n            $ret = $ret . substr($sourcestr, $i, 1);\n            $i = ($i + 1); //\u5b9e\u9645\u7684Byte\u6570\u8ba11\u4e2a\n            $n = ($n + 0.5); //\u5c0f\u5199\u5b57\u6bcd\u548c\u534a\u89d2\u6807\u70b9\u7b49\u4e0e\u534a\u4e2a\u9ad8\u4f4d\u5b57\u7b26\u5bbd...\n        }\n        /*\n        if ($str_length > $cutlength) {\n            $ret = $ret;\n        }\n        */\n    }\n\n    return $ret;\n}\n\n/**\n *  ZBP\u7248\u83b7\u53d6UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $sourcestr\n * @param int    $start\n *\n * @return string\n */\nfunction Zbp_SubStr($sourcestr, $start)\n{\n    $args = func_get_args();\n    return call_user_func_array('SubStrUTF8_Start', $args);\n}\n\n/**\n *  ZBP\u7248StrLen.\n *\n * @param string $string\n *\n * @return string\n */\nfunction Zbp_StrLen($string)\n{\n    if (function_exists('mb_strlen') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_strlen($string);\n    }\n    if (function_exists('iconv_strlen') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        return iconv_strlen($string);\n    }\n    return strlen($string);\n}\n\n/**\n *  ZBP\u7248Strpos\n *\n * @param string $haystack\n * @param string $needle\n * @param int $offset\n *\n * @return string\n */\nfunction Zbp_Strpos($haystack, $needle, $offset = 0)\n{\n    if (function_exists('mb_strpos') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_strpos($haystack, $needle, $offset);\n    }\n    if (function_exists('iconv_strpos') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        return iconv_strpos($haystack, $needle, $offset);\n    }\n    return strpos($haystack, $needle, $offset);\n}\n\n/**\n *  ZBP\u7248Stripos\n *\n * @param string $haystack\n * @param string $needle\n * @param int $offset\n *\n * @return string\n */\nfunction Zbp_Stripos($haystack, $needle, $offset = 0)\n{\n    if (function_exists('mb_strpos') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        return mb_stripos($haystack, $needle, $offset);\n    }\n    if (function_exists('iconv_strpos') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        $haystack = strtolower($haystack);\n        $needle = strtolower($needle);\n        return iconv_strpos($haystack, $needle, $offset);\n    }\n    return stripos($haystack, $needle, $offset);\n}\n\n/**\n * \u622a\u53d6HTML\u683c\u5f0f\u7684UTF8\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5b50\u4e32.\n *\n * @param string $source \u6e90\u5b57\u7b26\u4e32\n * @param int    $length \u5b50\u4e32\u957f\u5ea6\n *\n * @return string\n */\nfunction SubStrUTF8_Html($source, $length)\n{\n    if (function_exists('mb_substr') && function_exists('mb_internal_encoding')) {\n        mb_internal_encoding('UTF-8');\n        $j = mb_strlen($source);\n        $s = mb_substr($source, 0, $length);\n        $l = mb_substr_count($s, '<');\n        $r = mb_substr_count($s, '>');\n        if ($l > 0 && $l > $r) {\n            for ($i = $length; $i < $j; $i++) {\n                $s .= mb_substr($source, $i, 1);\n                if (mb_substr($source, $i, 1) == '>') {\n                    break;\n                }\n            }\n        }\n\n        return $s;\n    }\n\n    if (function_exists('iconv_substr') && function_exists('iconv_set_encoding')) {\n        call_user_func('iconv_set_encoding', 'internal_encoding', \"UTF-8\");\n        call_user_func('iconv_set_encoding', 'output_encoding', \"UTF-8\");\n        $j = iconv_strlen($source);\n        $s = iconv_substr($source, 0, $length);\n        $l = substr_count($s, '<');\n        $r = substr_count($s, '>');\n        if ($l > 0 && $l > $r) {\n            for ($i = $length; $i < $j; $i++) {\n                $s .= iconv_substr($source, $i, 1);\n                if (iconv_substr($source, $i, 1) == '>') {\n                    break;\n                }\n            }\n        }\n\n        return $s;\n    }\n\n    $j = strlen($source);\n    $s = substr($source, 0, $length);\n    $l = substr_count($s, '<');\n    $r = substr_count($s, '>');\n    if ($l > 0 && $l > $r) {\n        for ($i = $length; $i < $j; $i++) {\n            $s .= substr($source, $i, 1);\n            if (substr($source, $i, 1) == '>') {\n                break;\n            }\n        }\n    }\n\n    return $s;\n}\n\n/**\n * \u5220\u9664\u6587\u4ef6BOM\u5934.\n *\n * @param string $s \u6587\u4ef6\u5185\u5bb9\n *\n * @return string\n */\nfunction RemoveBOM($s)\n{\n    $charset = array();\n    $charset[1] = substr($s, 0, 1);\n    $charset[2] = substr($s, 1, 1);\n    $charset[3] = substr($s, 2, 1);\n    if (ord($charset[1]) == 239 && ord($charset[2]) == 187 && ord($charset[3]) == 191) {\n        $s = substr($s, 3);\n    }\n\n    return $s;\n}\n\n/**\n * \u83b7\u53d6\u6307\u5b9a\u65f6\u533a\u540d.\n *\n * @param int $z \u65f6\u533a\u53f7\n *\n * @return string \u65f6\u533a\u540d\n *\n * @since 1.3.140614\n */\nfunction GetTimeZoneByGMT($z)\n{\n    $timezones = array(\n        -12 => 'Etc/GMT+12',\n        -11 => 'Pacific/Midway',\n        -10 => 'Pacific/Honolulu',\n        -9  => 'America/Anchorage',\n        -8  => 'America/Los_Angeles',\n        -7  => 'America/Denver',\n        -6  => 'America/Tegucigalpa',\n        -5  => 'America/New_York',\n        -4  => 'America/Halifax',\n        -3  => 'America/Argentina/Buenos_Aires',\n        -2  => 'Atlantic/South_Georgia',\n        -1  => 'Atlantic/Azores',\n        0   => 'UTC',\n        1   => 'Europe/Berlin',\n        2   => 'Europe/Sofia',\n        3   => 'Africa/Nairobi',\n        4   => 'Europe/Moscow',\n        5   => 'Asia/Karachi',\n        6   => 'Asia/Dhaka',\n        7   => 'Asia/Bangkok',\n        8   => 'Asia/Shanghai',\n        9   => 'Asia/Tokyo',\n        10  => 'Pacific/Guam',\n        11  => 'Australia/Sydney',\n        12  => 'Pacific/Fiji',\n        13  => 'Pacific/Tongatapu',\n    );\n    if (!isset($timezones[$z])) {\n        return 'UTC';\n    }\n\n    return $timezones[$z];\n}\n\n/**\n * \u5bf9\u6570\u7ec4\u5185\u7684\u5b57\u7b26\u4e32\u8fdb\u884chtmlspecialchars.\n *\n * @param array $array \u5f85\u8fc7\u6ee4\u5b57\u7b26\u4e32\n *\n * @return array\n *\n * @since 1.4\n */\nfunction htmlspecialchars_array($array)\n{\n    $newArray = array();\n    foreach ($array as $key => $value) {\n        $newKey = htmlspecialchars($key);\n        if (is_array($value)) {\n            $newArray[$newKey] = htmlspecialchars_array($value);\n        } elseif (is_string($value)) {\n            $newArray[$newKey] = htmlspecialchars($value);\n        }\n    }\n\n    return $newArray;\n}\n\n/**\n * \u83b7\u5f97\u4e00\u4e2a\u53ea\u542b\u6570\u5b57\u5b57\u6bcd\u548c-\u7ebf\u7684string.\n *\n * @param string $s \u5f85\u8fc7\u6ee4\u5b57\u7b26\u4e32\n *\n * @return string|string[]\n *\n * @since 1.4\n */\nfunction FilterCorrectName($s)\n{\n    return preg_replace('|[^0-9a-zA-Z_/-]|', '', $s);\n}\n\n/**\n * \u786e\u8ba4\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u88ab\u8f6c\u6362\u4e3astring.\n *\n * @param object $obj\n *\n * @return bool\n *\n * @since 1.4\n */\nfunction CheckCanBeString($obj)\n{\n    // Fuck PHP 5.2!!!!\n    // return $obj === null || is_scalar($obj) || is_callable([$obj, '__toString']);\n    if (is_object($obj) && method_exists($obj, '__toString')) {\n        return true;\n    }\n\n    if ($obj === null) {\n        return true;\n    }\n\n    return is_scalar($obj);\n}\n\n/**\n * \u6784\u9020\u5e26Token\u7684\u5b89\u5168URL.\n *\n * @param string $url\n * @param string $appId \u5e94\u7528ID\uff0c\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u5e94\u7528\u4e13\u5c5e\u7684Token\n *\n * @return string\n *\n * @since 1.5.2\n */\nfunction BuildSafeURL($url, $appId = '')\n{\n    global $zbp;\n    if (strpos($url, '?') !== false) {\n        $url .= '&csrfToken=';\n    } else {\n        $url .= '?csrfToken=';\n    }\n    if (substr($url, 0, 1) === '/') {\n        $url = $zbp->host . substr($url, 1);\n    }\n    $url = $url . $zbp->GetCSRFToken($appId);\n\n    return $url;\n}\n\n/**\n * \u6784\u9020cmd.php\u7684\u8bbf\u95ee\u94fe\u63a5.\n *\n * @param string $paramters cmd.php\u53c2\u6570\n *\n * @return bool\n *\n * @since 1.5.2\n */\nfunction BuildSafeCmdURL($paramters)\n{\n    return BuildSafeURL('/zb_system/cmd.php?' . $paramters);\n}\n\n/**\n * \u5b9e\u73b0utf84mb4\u7684\u8fc7\u6ee4\n *\n * @param string $sql\n *\n * @return string\n */\nfunction utf84mb_filter(&$sql)\n{\n    $sql = preg_replace_callback(\"/[\\x{10000}-\\x{10FFFF}]/u\", 'utf84mb_convertToUCS4', $sql);\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684fixHtmlSpecialChars\n *\n * @return string\n */\nfunction utf84mb_fixHtmlSpecialChars()\n{\n    global $article;\n    $article->Content = preg_replace_callback(\"/\\&\\#x([0-9A-Z]{2,6})\\;/u\", 'utf84mb_convertToUTF8', $article->Content);\n    $article->Intro = preg_replace_callback(\"/\\&\\#x([0-9A-Z]{2,6})\\;/u\", 'utf84mb_convertToUTF8', $article->Intro);\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684convertToUCS4\n *\n * @param string $matches\n *\n * @return string\n */\nfunction utf84mb_convertToUCS4($matches)\n{\n    return sprintf(\"&#x%s;\", ltrim(strtoupper(bin2hex(iconv('UTF-8', 'UCS-4', $matches[0]))), \"0\"));\n}\n\n/**\n * \u5b9e\u73b0utf84mb\u7684convertToUTF8\n *\n * @param string $matches\n *\n * @return string\n */\nfunction utf84mb_convertToUTF8($matches)\n{\n    return iconv('UCS-4', 'UTF-8', hex2bin(str_pad($matches[1], 8, \"0\", STR_PAD_LEFT)));\n}\n\n/**\n * \u9a8c\u8bc1Web Token\u662f\u5426\u5408\u6cd5.\n *\n * @param $webTokenString\n * @param $webTokenId\n * @param string $key\n *\n * @return bool\n */\nfunction VerifyWebToken($webTokenString, $webTokenId, $key = '')\n{\n    global $zbp;\n    $args = array();\n    for ($i = 3; $i < func_num_args(); $i++) {\n        $args[] = func_get_arg($i);\n    }\n    $time = substr($webTokenString, 64);\n    $wt = substr($webTokenString, 0, 64);\n    if ($key == '') {\n        $key = $zbp->guid;\n    }\n    $sha = hash_hmac('sha256', $time . $webTokenId . implode($args), $key);\n    if ($wt === $sha) {\n        if ($time > time()) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * \u521b\u5efaWeb Token.\n *\n * @param $webTokenId\n * @param $time\n * @param string $key\n *\n * @return string\n */\nfunction CreateWebToken($webTokenId, $time, $key = '')\n{\n    global $zbp;\n    $args = array();\n    for ($i = 3; $i < func_num_args(); $i++) {\n        $args[] = func_get_arg($i);\n    }\n    if ($key == '') {\n        $key = $zbp->guid;\n    }\n    $time = (int) $time;\n    return hash_hmac('sha256', $time . $webTokenId . implode($args), $key) . $time;\n}\n\n/**\n * \u68c0\u6d4b\u6765\u6e90\u662f\u5426\u5408\u6cd5\uff0c\u8fd9\u5305\u62ecCSRF\u68c0\u6d4b\uff0c\u5728\u5f00\u542f\u589e\u5f3a\u5b89\u5168\u6a21\u5f0f\u65f6\u52a0\u5165\u6765\u6e90\u68c0\u6d4b.\n *\n * @throws Exception\n */\nfunction CheckIsRefererValid()\n{\n    global $zbp;\n    $flag = CheckCSRFTokenValid();\n    if ($flag && $zbp->option['ZC_ADDITIONAL_SECURITY']) {\n        $flag = CheckHTTPRefererValid();\n    }\n\n    if (!$flag) {\n        $zbp->ShowError(5, __FILE__, __LINE__);\n        exit;\n    }\n}\n\n/**\n * \u9a8c\u8bc1CSRF Token\u662f\u5426\u5408\u6cd5.\n *\n * @param string $fieldName\n * @param array  $methods\n *\n * @return bool\n */\nfunction CheckCSRFTokenValid($fieldName = 'csrfToken', $methods = array('get', 'post'))\n{\n    global $zbp;\n    $flag = false;\n    if (is_string($methods)) {\n        $methods = array($methods);\n    }\n    foreach ($methods as $method) {\n        if ($zbp->VerifyCSRFToken(GetVars($fieldName, $method))) {\n            $flag = true;\n            break;\n        }\n    }\n\n    return $flag;\n}\n\n/**\n * \u68c0\u6d4bHTTP Referer\u662f\u5426\u5408\u6cd5.\n *\n * @return bool\n */\nfunction CheckHTTPRefererValid()\n{\n    global $bloghost;\n    $referer = GetVars('HTTP_REFERER', 'SERVER');\n    if (trim($referer) === '') {\n        return true;\n    }\n    $s = $bloghost;\n    $s = str_replace(':80/', '/', $s);\n    $s = str_replace(':443/', '/', $s);\n    if (stripos($referer, $s) === false) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * \u6e05\u9664\u4e00\u4e32\u4ee3\u7801\u5185\u6240\u6709\u7684PHP\u4ee3\u7801\n *\n * @param string $code\n *\n * @return string\n */\nfunction RemovePHPCode($code)\n{\n    // PHP Start tags: <?php <? <?=\n    // PHP 5 supports: <% <script language=\"php\">\n    // Depends on PHP\n    $continue = true;\n    while ($continue) {\n        $tokens = token_get_all($code);\n        $continue = false;\n        foreach ($tokens as $tt) {\n            $name = is_numeric($tt[0]) ? token_name($tt[0]) : '';\n            if ($name === 'T_OPEN_TAG' || $name === 'T_OPEN_TAG_WITH_ECHO' || $name === 'T_CLOSE_TAG') {\n                $code = str_replace($tt[1], \"\", $code);\n                $continue = true;\n            }\n        }\n    }\n\n    return $code;\n}\n\n/**\n * \u62ff\u5230ID\u6570\u7ec4byList\u5217\u8868\n *\n * @param array $array\n * @param string $keyname\n *\n * @return array\n */\nfunction GetIDArrayByList($array, $keyname = null)\n{\n    $ids = array();\n    foreach ($array as $key => $value) {\n        if ($keyname == null) {\n            $ids[] = reset($value->GetData());\n        } else {\n            $a = $value->GetData();\n            $ids[] = $a[$keyname];\n        }\n    }\n\n    return $ids;\n}\n\n/**\n * \u62ff\u5230\u540e\u53f0\u7684CSP Heaeder\n *\n * @return string\n */\nfunction GetBackendCSPHeader()\n{\n    $defaultCSP = array(\n        'default-src' => \"'self' data: blob:\",\n        'img-src'     => \"* data: blob:\",\n        'media-src'   => \"* data: blob:\",\n        'script-src'  => \"'self' 'unsafe-inline' 'unsafe-eval'\",\n        'style-src'   => \"'self' 'unsafe-inline'\",\n    );\n    foreach ($GLOBALS['hooks']['Filter_Plugin_CSP_Backend'] as $fpname => &$fpsignal) {\n        $fpreturn = $fpname($defaultCSP);\n    }\n    $ret = array();\n    foreach ($defaultCSP as $key => $value) {\n        $ret[] = $key . ' ' . $value;\n    }\n\n    return implode('; ', $ret);\n}\n\n/**\n * \u68c0\u67e5\u91cd\u590d\u52a0\u8f7d\u7684.\n *\n * @param string $file\n *\n * @return boolean\n */\nfunction CheckIncludedFiles($file)\n{\n    $a = get_included_files();\n    $file = str_replace('\\\\', '/', $file);\n    foreach ($a as $key => $value) {\n        $a[$key] = trim(str_replace('\\\\', '/', $value));\n    }\n\n    return in_array(trim($file), $a);\n}\n\n/**\n * Logs\u6307\u5b9a\u7684\u53d8\u91cf\u7684\u503c\n */\nfunction Logs_Dump()\n{\n    $a = func_get_args();\n    foreach ($a as $key => $value) {\n        $s = var_export($value, true);\n        Logs($s);\n    }\n}\n", "<?php\n\n/**\n * < PHP 5.2.7.\n */\nif (!defined('PHP_VERSION_ID')) {\n    $version = explode('.', PHP_VERSION);\n    define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2]));\n    unset($version);\n}\n\nif (!function_exists('fnmatch')) {\n    define('FNM_PATHNAME', 1);\n    define('FNM_NOESCAPE', 2);\n    define('FNM_PERIOD', 4);\n    define('FNM_CASEFOLD', 16);\n\n    function fnmatch($pattern, $string, $flags = 0)\n    {\n        return pcre_fnmatch($pattern, $string, $flags);\n    }\n\n    function pcre_fnmatch($pattern, $string, $flags = 0)\n    {\n        $modifiers = null;\n        $transforms = array(\n            '\\*'      => '.*',\n            '\\?'      => '.',\n            '\\[\\!'    => '[^',\n            '\\['      => '[',\n            '\\]'      => ']',\n            '\\.'      => '\\.',\n            '\\\\'      => '\\\\\\\\',\n        );\n\n        // Forward slash in string must be in pattern:\n        if (($flags & FNM_PATHNAME)) {\n            $transforms['\\*'] = '[^/]*';\n        }\n\n        // Back slash should not be escaped:\n        if (($flags & FNM_NOESCAPE)) {\n            unset($transforms['\\\\']);\n        }\n\n        // Perform case insensitive match:\n        if (($flags & FNM_CASEFOLD)) {\n            $modifiers .= 'i';\n        }\n\n        // Period at start must be the same as pattern:\n        if (($flags & FNM_PERIOD)) {\n            if (strpos($string, '.') === 0 && strpos($pattern, '.') !== 0) {\n                return false;\n            }\n        }\n\n        $pattern = '#^'\n            . strtr(preg_quote($pattern, '#'), $transforms)\n            . '$#'\n            . $modifiers;\n\n        return (bool) preg_match($pattern, $string);\n    }\n\n}\n\nif (!function_exists('hex2bin')) {\n\n    function hex2bin($str)\n    {\n        $sbin = \"\";\n        $len = strlen($str);\n        for ($i = 0; $i < $len; $i += 2) {\n            $sbin .= pack(\"H*\", substr($str, $i, 2));\n        }\n\n        return $sbin;\n    }\n\n}\n\nif (!function_exists('rrmdir')) {\n\n    function rrmdir($dir)\n    {\n        if (is_dir($dir)) {\n            if (function_exists('scandir')) {\n                $objects = scandir($dir);\n                foreach ($objects as $object) {\n                    if ($object != '.' && $object != '..') {\n                        if (filetype($dir . '/' . $object) == 'dir') {\n                            rrmdir($dir . '/' . $object);\n                        } else {\n                            unlink($dir . '/' . $object);\n                        }\n                    }\n                }\n                reset($objects);\n                rmdir($dir);\n            } else {\n                if ($handle = opendir($dir)) {\n                    while (false !== ($file = readdir($handle))) {\n                        if ($file != \".\" && $file != \"..\") {\n                            if (is_dir(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file)) {\n                                rrmdir(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file);\n                            } else {\n                                unlink(rtrim(rtrim($dir, '/'), '\\\\') . '/' . $file);\n                            }\n                        }\n                    }\n                    closedir($handle);\n                    rmdir($dir);\n                }\n            }\n        }\n    }\n\n}\n\n/*\n * URL constants as defined in the PHP Manual under \"Constants usable with\n * http_build_url()\".\n *\n * @see http://us2.php.net/manual/en/http.constants.php#http.constants.url\n * @see  https://github.com/jakeasmith/http_build_url/blob/master/src/http_build_url.php\n * @license  MIT\n */\nif (!defined('HTTP_URL_REPLACE')) {\n    define('HTTP_URL_REPLACE', 1);\n}\nif (!defined('HTTP_URL_JOIN_PATH')) {\n    define('HTTP_URL_JOIN_PATH', 2);\n}\nif (!defined('HTTP_URL_JOIN_QUERY')) {\n    define('HTTP_URL_JOIN_QUERY', 4);\n}\nif (!defined('HTTP_URL_STRIP_USER')) {\n    define('HTTP_URL_STRIP_USER', 8);\n}\nif (!defined('HTTP_URL_STRIP_PASS')) {\n    define('HTTP_URL_STRIP_PASS', 16);\n}\nif (!defined('HTTP_URL_STRIP_AUTH')) {\n    define('HTTP_URL_STRIP_AUTH', 32);\n}\nif (!defined('HTTP_URL_STRIP_PORT')) {\n    define('HTTP_URL_STRIP_PORT', 64);\n}\nif (!defined('HTTP_URL_STRIP_PATH')) {\n    define('HTTP_URL_STRIP_PATH', 128);\n}\nif (!defined('HTTP_URL_STRIP_QUERY')) {\n    define('HTTP_URL_STRIP_QUERY', 256);\n}\nif (!defined('HTTP_URL_STRIP_FRAGMENT')) {\n    define('HTTP_URL_STRIP_FRAGMENT', 512);\n}\nif (!defined('HTTP_URL_STRIP_ALL')) {\n    define('HTTP_URL_STRIP_ALL', 1024);\n}\n\nif (!function_exists('http_build_url')) {\n\n    /**\n     * Build a URL.\n     *\n     * The parts of the second URL will be merged into the first according to\n     * the flags argument.\n     *\n     * @param mixed $url     (part(s) of) an URL in form of a string or\n     *                       associative array like parse_url() returns\n     * @param mixed $parts   same as the first argument\n     * @param int   $flags   a bitmask of binary or'ed HTTP_URL constants;\n     *                       HTTP_URL_REPLACE is the default\n     * @param array $new_url if set, it will be filled with the parts of the\n     *                       composed url like parse_url() would return\n     *\n     * @return string\n     */\n    function http_build_url($url, $parts = array(), $flags = HTTP_URL_REPLACE, &$new_url = array())\n    {\n        is_array($url) || $url = parse_url($url);\n        is_array($parts) || $parts = parse_url($parts);\n        isset($url['query']) && is_string($url['query']) || $url['query'] = null;\n        isset($parts['query']) && is_string($parts['query']) || $parts['query'] = null;\n        $keys = array('user', 'pass', 'port', 'path', 'query', 'fragment');\n        // HTTP_URL_STRIP_ALL and HTTP_URL_STRIP_AUTH cover several other flags.\n        if (($flags & HTTP_URL_STRIP_ALL)) {\n            $flags |= (HTTP_URL_STRIP_USER | HTTP_URL_STRIP_PASS | HTTP_URL_STRIP_PORT | HTTP_URL_STRIP_PATH | HTTP_URL_STRIP_QUERY | HTTP_URL_STRIP_FRAGMENT);\n        } elseif (($flags & HTTP_URL_STRIP_AUTH)) {\n            $flags |= (HTTP_URL_STRIP_USER | HTTP_URL_STRIP_PASS);\n        }\n        // Schema and host are alwasy replaced\n        foreach (array('scheme', 'host') as $part) {\n            if (isset($parts[$part])) {\n                $url[$part] = $parts[$part];\n            }\n        }\n        if (($flags & HTTP_URL_REPLACE)) {\n            foreach ($keys as $key) {\n                if (isset($parts[$key])) {\n                    $url[$key] = $parts[$key];\n                }\n            }\n        } else {\n            if (isset($parts['path']) && ($flags & HTTP_URL_JOIN_PATH)) {\n                if (isset($url['path']) && substr($parts['path'], 0, 1) !== '/') {\n                    // Workaround for trailing slashes\n                    $url['path'] .= 'a';\n                    $url['path'] = rtrim(\n                        str_replace(basename($url['path']), '', $url['path']),\n                        '/'\n                    ) . '/' . ltrim($parts['path'], '/');\n                } else {\n                    $url['path'] = $parts['path'];\n                }\n            }\n            if (isset($parts['query']) && ($flags & HTTP_URL_JOIN_QUERY)) {\n                if (isset($url['query'])) {\n                    parse_str($url['query'], $url_query);\n                    parse_str($parts['query'], $parts_query);\n                    $url['query'] = http_build_query(\n                        array_replace_recursive(\n                            $url_query,\n                            $parts_query\n                        )\n                    );\n                } else {\n                    $url['query'] = $parts['query'];\n                }\n            }\n        }\n        if (isset($url['path']) && $url['path'] !== '' && substr($url['path'], 0, 1) !== '/') {\n            $url['path'] = '/' . $url['path'];\n        }\n        foreach ($keys as $key) {\n            $strip = 'HTTP_URL_STRIP_' . strtoupper($key);\n            if (($flags & constant($strip))) {\n                unset($url[$key]);\n            }\n        }\n        $parsed_string = '';\n        if (!empty($url['scheme'])) {\n            $parsed_string .= $url['scheme'] . '://';\n        }\n        if (!empty($url['user'])) {\n            $parsed_string .= $url['user'];\n            if (isset($url['pass'])) {\n                $parsed_string .= ':' . $url['pass'];\n            }\n            $parsed_string .= '@';\n        }\n        if (!empty($url['host'])) {\n            $parsed_string .= $url['host'];\n        }\n        if (!empty($url['port'])) {\n            $parsed_string .= ':' . $url['port'];\n        }\n        if (!empty($url['path'])) {\n            $parsed_string .= $url['path'];\n        }\n        if (!empty($url['query'])) {\n            $parsed_string .= '?' . $url['query'];\n        }\n        if (!empty($url['fragment'])) {\n            $parsed_string .= '#' . $url['fragment'];\n        }\n        $new_url = $url;\n\n        return $parsed_string;\n    }\n\n}\n\nif (!function_exists('gzdecode')) {\n\n    function gzdecode($data)\n    {\n        $len = strlen($data);\n        if ($len < 18 || strcmp(substr($data, 0, 2), \"\\x1f\\x8b\")) {\n            return;  // Not GZIP format (See RFC 1952)\n        }\n        $method = ord(substr($data, 2, 1));  // Compression method\n         $flags = ord(substr($data, 3, 1));  // Flags\n        if (($flags & 31) != $flags) {\n            // Reserved bits are set -- NOT ALLOWED by RFC 1952\n            return;\n        }\n        // NOTE: $mtime may be negative (PHP integer limitations)\n        $mtime = unpack(\"V\", substr($data, 4, 4));\n        $mtime = $mtime[1];\n        $xfl = substr($data, 8, 1);\n        $os = substr($data, 8, 1);\n        $headerlen = 10;\n        $extralen = 0;\n        $extra = \"\";\n        if (($flags & 4)) {\n            // 2-byte length prefixed EXTRA data in header\n            if (($len - $headerlen - 2) < 8) {\n                return false;    // Invalid format\n            }\n            $extralen = unpack(\"v\", substr($data, 8, 2));\n            $extralen = $extralen[1];\n            if (($len - $headerlen - 2 - $extralen) < 8) {\n                return false;    // Invalid format\n            }\n            $extra = substr($data, 10, $extralen);\n            $headerlen += (2 + $extralen);\n        }\n\n        $filenamelen = 0;\n        $filename = \"\";\n        if (($flags & 8)) {\n            // C-style string file NAME data in header\n            if (($len - $headerlen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $filenamelen = strpos(substr($data, (8 + $extralen)), chr(0));\n            if ($filenamelen === false || ($len - $headerlen - $filenamelen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $filename = substr($data, $headerlen, $filenamelen);\n            $headerlen += ($filenamelen + 1);\n        }\n\n        $commentlen = 0;\n        $comment = \"\";\n        if (($flags & 16)) {\n            // C-style string COMMENT data in header\n            if (($len - $headerlen - 1) < 8) {\n                return false;    // Invalid format\n            }\n            $commentlen = strpos(substr($data, (8 + $extralen + $filenamelen)), chr(0));\n            if ($commentlen === false || ($len - $headerlen - $commentlen - 1) < 8) {\n                return false;    // Invalid header format\n            }\n            $comment = substr($data, $headerlen, $commentlen);\n            $headerlen += ($commentlen + 1);\n        }\n\n        $headercrc = \"\";\n        if (($flags & 2)) {\n            // 2-bytes (lowest order) of CRC32 on header present\n            if (($len - $headerlen - 2) < 8) {\n                return false;    // Invalid format\n            }\n            $calccrc = (crc32(substr($data, 0, $headerlen)) & 0xffff);\n            $headercrc = unpack(\"v\", substr($data, $headerlen, 2));\n            $headercrc = $headercrc[1];\n            if ($headercrc != $calccrc) {\n                return false;    // Bad header CRC\n            }\n            $headerlen += 2;\n        }\n\n        // GZIP FOOTER - These be negative due to PHP's limitations\n        $datacrc = unpack(\"V\", substr($data, -8, 4));\n        $datacrc = $datacrc[1];\n        $isize = unpack(\"V\", substr($data, -4));\n        $isize = $isize[1];\n\n        // Perform the decompression:\n        $bodylen = ($len - $headerlen - 8);\n        if ($bodylen < 1) {\n            // This should never happen - IMPLEMENTATION BUG!\n            return;\n        }\n        $body = substr($data, $headerlen, $bodylen);\n        $data = \"\";\n        if ($bodylen > 0) {\n            switch ($method) {\n                case 8:\n                    // Currently the only supported compression method:\n                    $data = gzinflate($body);\n                    break;\n                default:\n                    // Unknown compression method\n                    return false;\n            }\n        } else {\n            // I'm not sure if zero-byte body content is allowed.\n            // Allow it for now...  Do nothing...\n        }\n\n        // Verifiy decompressed size and CRC32:\n        // NOTE: This may fail with large data sizes depending on how\n        //       PHP's integer limitations affect strlen() since $isize\n        //       may be negative for large sizes.\n        if ($isize != strlen($data) || crc32($data) != $datacrc) {\n            // Bad format!  Length or CRC doesn't match!\n            return false;\n        }\n\n        return $data;\n    }\n\n}\n\nif (!function_exists('session_status')) {\n\n    function session_status()\n    {\n        if (!extension_loaded('session')) {\n            return 0;\n        } elseif (!session_id()) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n}\n\nif (!function_exists('array_replace_recursive')) {\n\n    function array_replace_recursive($array, $array1)\n    {\n\n        function recurse($array, $array1)\n        {\n            foreach ($array1 as $key => $value) {\n                // create new key in $array, if it is empty or not an array\n                if (!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key]))) {\n                    $array[$key] = array();\n                }\n\n                // overwrite the value in the base array\n                if (is_array($value)) {\n                    $value = recurse($array[$key], $value);\n                }\n                $array[$key] = $value;\n            }\n\n            return $array;\n        }\n\n        // handle the arguments, merge one by one\n        $args = func_get_args();\n        $array = $args[0];\n        if (!is_array($array)) {\n            return $array;\n        }\n        for ($i = 1; $i < count($args); $i++) {\n            if (is_array($args[$i])) {\n                $array = recurse($array, $args[$i]);\n            }\n        }\n        return $array;\n    }\n\n}\n\n\nif (!function_exists('hash_equals')) {\n\n    /**\n     * Timing attack safe string comparison\n     *\n     * Compares two strings using the same time whether they're equal or not.\n     * This function should be used to mitigate timing attacks; for instance, when testing crypt() password hashes.\n     *\n     * @param string $known_string The string of known length to compare against\n     * @param string $user_string The user-supplied string\n     * @return boolean Returns TRUE when the two strings are equal, FALSE otherwise.\n     */\n    function hash_equals($known_string, $user_string)\n    {\n        if (func_num_args() !== 2) {\n            // handle wrong parameter count as the native implentation\n            trigger_error('hash_equals() expects exactly 2 parameters, ' . func_num_args() . ' given', E_USER_WARNING);\n            return null;\n        }\n        if (is_string($known_string) !== true) {\n            trigger_error('hash_equals(): Expected known_string to be a string, ' . gettype($known_string) . ' given', E_USER_WARNING);\n            return false;\n        }\n        $known_string_len = strlen($known_string);\n        $user_string_type_error = 'hash_equals(): Expected user_string to be a string, ' . gettype($user_string) . ' given'; // prepare wrong type error message now to reduce the impact of string concatenation and the gettype call\n        if (is_string($user_string) !== true) {\n            trigger_error($user_string_type_error, E_USER_WARNING);\n            // prevention of timing attacks might be still possible if we handle $user_string as a string of diffent length (the trigger_error() call increases the execution time a bit)\n            $user_string_len = strlen($user_string);\n            $user_string_len = $known_string_len + 1;\n        } else {\n            $user_string_len = $known_string_len + 1;\n            $user_string_len = strlen($user_string);\n        }\n        if ($known_string_len !== $user_string_len) {\n            $res = $known_string ^ $known_string; // use $known_string instead of $user_string to handle strings of diffrent length.\n            $ret = 1; // set $ret to 1 to make sure false is returned\n        } else {\n            $res = $known_string ^ $user_string;\n            $ret = 0;\n        }\n        for ($i = strlen($res) - 1; $i >= 0; $i--) {\n            $ret |= ord($res[$i]);\n        }\n        return $ret === 0;\n    }\n\n}\n", "<?php\n\nif (!defined('ZBP_PATH')) {\n    exit('Access denied');\n}\n/**\n * zbp\u5168\u5c40\u64cd\u4f5c\u7c7b.\n */\nclass ZBlogPHP\n{\n\n    private static $private_zbp = null;\n\n    /**\n     * @var string \u7248\u672c\u53f7\n     */\n    public $version = null;\n\n    /**\n     * @var Database__Interface \u6570\u636e\u5e93\n     */\n    public $db = null;\n\n    /**\n     * @var array \u914d\u7f6e\u9009\u9879\n     */\n    public $option = array();\n\n    /**\n     * @var array \u8bed\u8a00\n     */\n    public $lang = array();\n\n    /**\n     * @var json\u7c7b\u578b \u8bed\u8a00\n     */\n    public $langs = null;\n\n    /**\n     * @var array \u8bed\u8a00\u5305list\n     */\n    public $langpacklist = array();\n\n    /**\n     * @var string \u8def\u5f84\n     */\n    public $path = null;\n\n    /**\n     * @var string \u57df\u540d\n     */\n    public $host = null;\n\n    /**\n     * @var string cookie\u4f5c\u7528\u57df\n     */\n    public $cookiespath = null;\n\n    /**\n     * @var string guid\n     */\n    public $guid = null;\n\n    /**\n     * @var string \u5f53\u524d\u94fe\u63a5\n     */\n    public $currenturl = null;\n\n    /**\n     * @var string \u5f53\u524d\u94fe\u63a5\n     */\n    public $fullcurrenturl = null;\n\n    /**\n     * @var string \u7528\u6237\u76ee\u5f55\n     */\n    public $usersdir = null;\n\n    /**\n     * @var string \u9a8c\u8bc1\u7801\u5730\u5740\n     */\n    public $verifyCodeUrl = null;\n\n    /**\n     * @var string \u9a8c\u8bc1\u7801\u5730\u5740\uff08\u62fc\u5199\u9519\u8bef\uff09\n     *\n     * @deprecated\n     */\n    public $validcodeurl = null;\n\n    /**\n     * @var string\n     */\n    public $feedurl = null;\n\n    /**\n     * @var string\n     */\n    public $searchurl = null;\n\n    /**\n     * @var string\n     */\n    public $ajaxurl = null;\n\n    /**\n     * @var string\n     */\n    public $xmlrpcurl = null;\n\n    /**\n     * @var string\n     */\n    public $apiurl = null;\n\n    /**\n     * @var Member[] \u7528\u6237\u6570\u7ec4\n     */\n    public $members = array();\n\n    /**\n     * @var Member[] \u7528\u6237\u6570\u7ec4\uff08\u4ee5\u7528\u6237\u540d\u4e3a\u952e\uff09\n     */\n    public $membersbyname = array();\n\n    /**\n     * @var Category[] \u5206\u7c7b\u6570\u7ec4\n     */\n    public $categorys = array();\n\n    public $categories = null;\n\n    /**\n     * @var Category[] \u5206\u7c7b\u6570\u7ec4\uff08\u5df2\u6392\u5e8f\uff09\n     */\n    public $categorysbyorder = array();\n\n    public $categoriesbyorder = null;\n\n    /**\n     * @var Module[] \u6a21\u5757\u6570\u7ec4\n     */\n    public $modules = array();\n\n    /**\n     * @var Module[] \u6a21\u5757\u6570\u7ec4\uff08\u4ee5\u6587\u4ef6\u540d\u4e3a\u952e\uff09\n     */\n    public $modulesbyfilename = array();\n\n    /**\n     * @var Config[] \u914d\u7f6e\u9009\u9879\n     */\n    public $configs = array();\n\n    /**\n     * @var Tag[] \u6807\u7b7e\u6570\u7ec4\n     */\n    public $tags = array();\n\n    /**\n     * @var Tag[] \u6807\u7b7e\u6570\u7ec4\uff08\u4ee5\u6807\u7b7e\u540d\u4e3a\u952e\uff09\n     */\n    public $tagsbyname = array();\n\n    /**\n     * @var Comment[] \u8bc4\u8bba\u6570\u7ec4\n     */\n    public $comments = array();\n\n    /**\n     * @var Post[] \u6587\u7ae0\u5217\u8868\u6570\u7ec4\n     */\n    public $posts = array();\n\n    /**\n     * @var string \u5f53\u524d\u9875\u9762\u6807\u9898\n     */\n    public $title = null;\n\n    /**\n     * @var string \u7f51\u7ad9\u540d\n     */\n    public $name = null;\n\n    /**\n     * @var string \u7f51\u7ad9\u5b50\u6807\u9898\n     */\n    public $subname = null;\n\n    /**\n     * @var App \u5f53\u524d\u4e3b\u9898\n     */\n    public $theme = null;\n\n    /**\n     * @var array() \u5f53\u524d\u4e3b\u9898\u7248\u672c\u4fe1\u606f\n     */\n    public $themeinfo = array();\n\n    /**\n     * @var string \u5f53\u524d\u4e3b\u9898\u98ce\u683c\n     */\n    public $style = null;\n\n    /**\n     * @var Member \u5f53\u524d\u7528\u6237\n     */\n    public $user = null;\n\n    /**\n     * @var Config \u7f13\u5b58\n     */\n    public $cache = null;\n\n    /**\n     * @var array|null \u6570\u636e\u8868\n     */\n    public $table = null;\n\n    public $t = null;\n\n    /**\n     * @var array|null \u6570\u636e\u8868\u4fe1\u606f\n     */\n    public $datainfo = null;\n\n    public $d = null;\n\n    /**\n     * @var array|null \u7c7b\u578b\u5e8f\u5217\n     */\n    public $posttype = null;\n\n    /**\n     * @var array|null \u64cd\u4f5c\u5217\u8868\n     */\n    public $actions = null;\n\n    /**\n     * @var mixed|null|string \u5f53\u524d\u64cd\u4f5c\n     */\n    public $action = null;\n\n    private $isinitialized = false; //\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\n\n    private $isconnected = false; //\u662f\u5426\u8fde\u63a5\u6210\u529f\n\n    private $isload = false; //\u662f\u5426\u8f7d\u5165\n\n    private $issession = false; //\u662f\u5426\u4f7f\u7528session\n\n    public $ismanage = false; //\u662f\u5426\u52a0\u8f7d\u7ba1\u7406\u6a21\u5f0f\n\n    private $isGzip = false; //\u662f\u5426\u5f00\u542fgzip\n\n    public $isHttps = false; //\u662f\u5426HTTPS\n\n    /**\n     * @var Template \u5f53\u524d\u6a21\u677f\n     */\n    public $template = null;\n\n    /**\n     * @var null \u793e\u4f1a\u5316\u8bc4\u8bba\n     */\n    public $socialcomment = null;\n\n    /**\n     * @var null \u6a21\u677f\u5934\u90e8\n     */\n    public $header = null;\n\n    /**\n     * @var null \u6a21\u677f\u5c3e\u90e8\n     */\n    public $footer = null;\n\n    /**\n     * @var array \u6fc0\u6d3b\u7684\u63d2\u4ef6\u5217\u8868\n     */\n    public $activedapps = array();\n\n    public $activeapps;\n\n    /**\n     * @var int \u7ba1\u7406\u9875\u9762\u663e\u793a\u6761\u6570\n     */\n    public $managecount = 50;\n\n    /**\n     * @var int \u9875\u7801\u663e\u793a\u6761\u6570\n     */\n    public $pagebarcount = 10;\n\n    /**\n     * @var int \u641c\u7d22\u8fd4\u56de\u6761\u6570\n     */\n    public $searchcount = 10;\n\n    /**\n     * @var int \u6587\u7ae0\u5217\u8868\u663e\u793a\u6761\u6570\n     */\n    public $displaycount = 10;\n\n    /**\n     * @var int \u8bc4\u8bba\u663e\u793a\u6570\u91cf\n     */\n    public $commentdisplaycount = 10;\n\n    /**\n     * @var int \u5f53\u524d\u5b9e\u4f8b\u4e0bCSRF Token\u8fc7\u671f\u65f6\u95f4\uff08\u5c0f\u65f6\uff09\n     */\n    public $csrfExpiration = 1;\n\n    /**\n     * @var App \u5f53\u524d\u4e3b\u9898\u7c7b\n     */\n    public $themeapp = null;\n\n    /**\n     * @var \u5206\u7c7b\u9012\u5f52\u5c42\u6570\n     */\n    public $category_recursion_level = 5;\n\n    /**\n     * @var \u8bc4\u8bba\u9012\u5f52\u5c42\u6570\n     */\n    public $comment_recursion_level = 4;\n\n    const OPTION_RESERVE_KEYS = 'ZC_DATABASE_TYPE|ZC_SQLITE_NAME|ZC_SQLITE_PRE|ZC_MYSQL_SERVER|ZC_MYSQL_USERNAME|ZC_MYSQL_PASSWORD|ZC_MYSQL_NAME|ZC_MYSQL_CHARSET|ZC_MYSQL_COLLATE|ZC_MYSQL_PRE|ZC_MYSQL_ENGINE|ZC_MYSQL_PORT|ZC_MYSQL_PERSISTENT|ZC_MYSQL_PORT|ZC_PGSQL_SERVER|ZC_PGSQL_USERNAME|ZC_PGSQL_PASSWORD|ZC_PGSQL_NAME|ZC_PGSQL_CHARSET|ZC_PGSQL_PRE|ZC_PGSQL_PORT|ZC_PGSQL_PERSISTENT|ZC_CLOSE_WHOLE_SITE|ZC_PERMANENT_DOMAIN_FORCED_URL|ZC_PERMANENT_DOMAIN_WHOLE_DISABLE';\n\n    /**\n     * \u83b7\u53d6\u552f\u4e00\u5b9e\u4f8b.\n     *\n     * @return null|ZBlogPHP\n     */\n    public static function GetInstance()\n    {\n        if (!isset(self::$private_zbp)) {\n            if (isset($GLOBALS['option']['ZC_GODZBP_FILE']) && isset($GLOBALS['option']['ZC_GODZBP_NAME']) && is_readable(ZBP_PATH . $GLOBALS['option']['ZC_GODZBP_FILE'])) {\n                include ZBP_PATH . $GLOBALS['option']['ZC_GODZBP_FILE'];\n                self::$private_zbp = new $GLOBALS['option']['ZC_GODZBP_NAME']();\n            } else {\n                self::$private_zbp = new self();\n            }\n        }\n\n        return self::$private_zbp;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u6570\u636e\u5e93\u8fde\u63a5.\n     *\n     * @param string $type \u6570\u636e\u8fde\u63a5\u7c7b\u578b\n     *\n     * @return Database__Interface\n     */\n    public static function InitializeDB($type)\n    {\n        if (!trim($type)) {\n            return;\n        }\n\n        $newtype = 'Database__' . trim($type);\n\n        return new $newtype();\n    }\n\n    /**\n     * \u6784\u9020\u51fd\u6570\uff0c\u52a0\u8f7d\u57fa\u672c\u914d\u7f6e\u5230$zbp.\n     */\n    public function __construct()\n    {\n        global $option, $lang, $langs, $blogpath, $bloghost, $cookiespath, $usersdir, $table,\n            $datainfo, $actions, $action, $blogversion, $blogtitle, $blogname, $blogsubname,\n            $blogtheme, $blogstyle, $currenturl, $activedapps, $posttype;\n\n        if (ZBP_HOOKERROR) {\n            ZBlogException::SetErrorHook();\n        }\n\n        //\u57fa\u672c\u914d\u7f6e\u52a0\u8f7d\u5230$zbp\u5185\n        $this->version = &$blogversion;\n        $this->option = &$option;\n        $this->lang = &$lang;\n        $this->langs = &$langs;\n        $this->path = &$blogpath;\n        $this->host = &$bloghost; //\u6b64\u503c\u5728\u540e\u8fb9\u521d\u59cb\u5316\u65f6\u53ef\u80fd\u4f1a\u53d8\u5316!\n        $this->cookiespath = &$cookiespath;\n        $this->usersdir = &$usersdir;\n\n        $this->table = &$table;\n        $this->datainfo = &$datainfo;\n        $this->t = &$this->table;\n        $this->d = &$this->datainfo;\n        $this->actions = &$actions;\n        $this->posttype = &$posttype;\n        $this->currenturl = &$currenturl;\n\n        $this->action = &$action;\n        $this->activedapps = &$activedapps;\n        $this->activeapps = &$this->activedapps;\n\n        $this->guid = &$this->option['ZC_BLOG_CLSID'];\n\n        $this->title = &$blogtitle;\n        $this->name = &$blogname;\n        $this->subname = &$blogsubname;\n        $this->theme = &$blogtheme;\n        $this->style = &$blogstyle;\n\n        $this->managecount = &$this->option['ZC_MANAGE_COUNT'];\n        $this->pagebarcount = &$this->option['ZC_PAGEBAR_COUNT'];\n        $this->searchcount = &$this->option['ZC_SEARCH_COUNT'];\n        $this->displaycount = &$this->option['ZC_DISPLAY_COUNT'];\n        $this->commentdisplaycount = &$this->option['ZC_COMMENTS_DISPLAY_COUNT'];\n\n        $this->categories = &$this->categorys;\n        $this->categoriesbyorder = &$this->categorysbyorder;\n\n        $this->user = new stdClass();\n        foreach ($this->datainfo['Member'] as $key => $value) {\n            $this->user->$key = $value[3];\n        }\n        $this->user->Metas = new Metas();\n    }\n\n    /**\n     *\u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u8d44\u6e90.\n     */\n    public function __destruct()\n    {\n        $this->Terminate();\n    }\n\n    /**\n     * @api Filter_Plugin_Zbp_Call\n     *\n     * @param $method\n     * @param $args\n     *\n     * @return mixed\n     */\n    public function __call($method, $args)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Call'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($method, $args);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u8bbe\u7f6e\u53c2\u6570\u503c\n     *\n     * @param $name\n     * @param $value\n     *\n     * @return mixed\n     */\n    public function __set($name, $value)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Set'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($name, $value);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u83b7\u53d6\u53c2\u6570\u503c\n     *\n     * @param $name\n     *\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Get'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($name);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        trigger_error($this->lang['error'][81], E_USER_WARNING);\n    }\n\n    /**\n     * \u521d\u59cb\u5316$zbp.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function Initialize()\n    {\n        $oldZone = $this->option['ZC_TIME_ZONE_NAME'];\n        date_default_timezone_set($oldZone);\n\n        $oldLang = $this->option['ZC_BLOG_LANGUAGEPACK'];\n        $this->LoadLanguage('system', '');\n\n        if ($this->option['ZC_CLOSE_WHOLE_SITE'] == true) {\n            Http503();\n            $this->ShowError(82, __FILE__, __LINE__);\n\n            return false;\n        }\n\n        if (!$this->OpenConnect()) {\n            return false;\n        }\n\n        $this->ConvertTableAndDatainfo();\n\n        $this->LoadConfigsOnlySystem(true);\n        $this->LoadOption();\n\n        $this->RegPostType(0, 'article', $this->option['ZC_ARTICLE_REGEX'], $this->option['ZC_POST_DEFAULT_TEMPLATE'], 0, 0);\n        $this->RegPostType(1, 'page', $this->option['ZC_PAGE_REGEX'], $this->option['ZC_POST_DEFAULT_TEMPLATE'], null, null);\n\n        if ($this->option['ZC_BLOG_LANGUAGEPACK'] === 'SimpChinese') {\n            $this->option['ZC_BLOG_LANGUAGEPACK'] = 'zh-cn';\n        }\n\n        if ($this->option['ZC_BLOG_LANGUAGEPACK'] === 'TradChinese') {\n            $this->option['ZC_BLOG_LANGUAGEPACK'] = 'zh-tw';\n        }\n\n        if ($oldLang != $this->option['ZC_BLOG_LANGUAGEPACK']) {\n            $this->LoadLanguage('system', '');\n        }\n\n        if (isset($this->option['ZC_DEBUG_MODE_WARNING'])) {\n            ZBlogException::$iswarning = (bool) $this->option['ZC_DEBUG_MODE_WARNING'];\n        }\n        if (isset($this->option['ZC_DEBUG_MODE_STRICT'])) {\n            ZBlogException::$isstrict = (bool) $this->option['ZC_DEBUG_MODE_STRICT'];\n        }\n        if (isset($this->option['ZC_DEBUG_LOG_ERROR'])) {\n            ZBlogException::$islogerror = (bool) $this->option['ZC_DEBUG_LOG_ERROR'];\n        }\n\n        //ZC_PERMANENT_DOMAIN_WHOLE_DISABLE\u4e0d\u5b58\u5728 \u6216\u662f ZC_PERMANENT_DOMAIN_WHOLE_DISABLE\u5b58\u5728\u4f46\u4e3a\u5047\n        $domain_disable = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_WHOLE_DISABLE');\n        if ($domain_disable == false) {\n            $forced_url = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_FORCED_URL');\n            if ($forced_url != '') {\n                //\u5982\u679cZC_PERMANENT_DOMAIN_FORCED_URL\u5b58\u5728 \u4e14\u4e0d\u4e3a\u7a7a\n                $this->host = (string) $forced_url;\n                $this->cookiespath = strstr(str_replace('://', '', $this->host), '/');\n            } elseif ($this->option['ZC_PERMANENT_DOMAIN_ENABLE'] == true) {\n                //\u5982\u679cZC_PERMANENT_DOMAIN_ENABLE\u5df2\u5f00\u542f\u7684\u8bdd\n                $this->host = $this->option['ZC_BLOG_HOST'];\n                $this->cookiespath = strstr(str_replace('://', '', $this->host), '/');\n            } else {\n                //\u9ed8\u8ba4\u81ea\u52a8\u8bc6\u522b\u57df\u540d\n                $this->option['ZC_BLOG_HOST'] = $this->host;\n            }\n        } else {\n            $this->option['ZC_BLOG_HOST'] = $this->host;\n        }\n\n        $this->option['ZC_BLOG_PRODUCT'] = 'Z-BlogPHP';\n        $this->option['ZC_BLOG_VERSION'] = ZC_BLOG_VERSION;\n        $this->option['ZC_NOW_VERSION'] = $this->version;  //ZC_LAST_VERSION\n        $this->option['ZC_BLOG_PRODUCT_FULL'] = $this->option['ZC_BLOG_PRODUCT'] . ' ' . ZC_VERSION_DISPLAY;\n        $this->option['ZC_BLOG_PRODUCT_FULLHTML'] = '<a href=\"https://www.zblogcn.com/\" title=\"Z-BlogPHP ' . ZC_BLOG_VERSION . '\" target=\"_blank\">' . $this->option['ZC_BLOG_PRODUCT_FULL'] . '</a>';\n        $this->option['ZC_BLOG_PRODUCT_HTML'] = '<a href=\"https://www.zblogcn.com/\" title=\"Z-BlogPHP ' . ZC_BLOG_VERSION . '\" target=\"_blank\">' . $this->option['ZC_BLOG_PRODUCT'] . '</a>';\n\n        if ($oldZone != $this->option['ZC_TIME_ZONE_NAME']) {\n            date_default_timezone_set($this->option['ZC_TIME_ZONE_NAME']);\n        }\n\n        /*if(isset($_COOKIE['timezone'])){\n            $tz=GetVars('timezone','COOKIE');\n            if(is_numeric($tz)){\n            $tz=sprintf('%+d',-$tz);\n            date_default_timezone_set('Etc/GMT' . $tz);\n            $this->timezone=date_default_timezone_get();\n            }\n        */\n\n        if ($this->option['ZC_VERSION_IN_HEADER'] && !headers_sent()) {\n            header('Product:' . $this->option['ZC_BLOG_PRODUCT_FULL']);\n        }\n\n        $parsedHost = parse_url($this->host);\n        $this->fullcurrenturl = $parsedHost['scheme'] . '://' . $parsedHost['host'] . $this->currenturl;\n        if (substr($this->host, 0, 8) == 'https://') {\n            $this->isHttps = true;\n        }\n\n        $this->verifyCodeUrl = $this->host . 'zb_system/script/c_validcode.php';\n        $this->validcodeurl = &$this->verifyCodeUrl;\n        $this->feedurl = $this->host . 'feed.php';\n        $this->searchurl = $this->host . 'search.php';\n        $this->ajaxurl = $this->host . 'zb_system/cmd.php?act=ajax&src=';\n        $this->xmlrpcurl = $this->host . 'zb_system/xml-rpc/index.php';\n        $this->apiurl = $this->host . 'zb_system/api/index.php';\n\n        $this->LoadConfigsOnlySystem(false);\n\n        $this->LoadCache();\n\n        $this->isinitialized = true;\n\n        return true;\n    }\n\n    /**\n     * \u4ece\u6570\u636e\u5e93\u91cc\u8bfb\u53d6\u4fe1\u606f\uff0c\u542f\u52a8\u6574\u4e2aZBP.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function Load()\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Load_Pre'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname();\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n\n        if (!$this->isinitialized) {\n            return false;\n        }\n\n        if ($this->isload) {\n            return false;\n        }\n\n        if (!headers_sent()) {\n            header('Content-type: text/html; charset=utf-8');\n        }\n\n        $this->ConvertTableAndDatainfo();\n        if ($this->option['ZC_LOADMEMBERS_LEVEL'] == 0) {\n            $this->option['ZC_LOADMEMBERS_LEVEL'] = 1;\n        }\n        $this->LoadMembers($this->option['ZC_LOADMEMBERS_LEVEL']);\n        $this->LoadCategories();\n        //$this->LoadTags();\n        $this->LoadModules();\n        $this->RegBuildModules();\n\n        if (!(get_class($this->user) === 'Member' && $this->user->Level > 0 && !empty($this->user->ID))) {\n            $this->Verify();\n        }\n\n        //\u521b\u5efa\u6a21\u677f\u7c7b\n        $this->template = $this->PrepareTemplate();\n\n        // \u8bfb\u4e3b\u9898\u7248\u672c\u4fe1\u606f\n        $this->themeapp = $this->LoadApp('theme', $this->theme);\n        $this->themeinfo = $this->themeapp->GetInfoArray();\n\n        if ($this->ismanage) {\n            $this->LoadManage();\n        }\n\n        Add_Filter_Plugin('Filter_Plugin_Login_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_Other_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_Admin_Header', 'Include_AddonAdminFont');\n        Add_Filter_Plugin('Filter_Plugin_BatchPost', 'Include_BatchPost_Article');\n        Add_Filter_Plugin('Filter_Plugin_BatchPost', 'Include_BatchPost_Page');\n        Add_Filter_Plugin('Filter_Plugin_Index_End', 'Include_Index_End');\n        Add_Filter_Plugin('Filter_Plugin_Search_End', 'Include_Index_End');\n        Add_Filter_Plugin('Filter_Plugin_Index_Begin', 'Include_Index_Begin');\n        Add_Filter_Plugin('Filter_Plugin_Search_Begin', 'Include_Index_Begin');\n        Add_Filter_Plugin('Filter_Plugin_Feed_Begin', 'Include_Index_Begin');\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Load'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n\n        //\u8fdb\u540e\u53f0\u65f6\u5df2\u81ea\u52a8\u68c0\u6d4b\u6a21\u677f\u5e76\u81ea\u52a8\u91cd\u5efa\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u9488\u5bf9\u5f00\u8c03\u8bd5\u540e\u7684\u524d\u53f0\u7684\u8bbf\u95ee\u8fdb\u884c\n        if ($this->option['ZC_DEBUG_MODE'] && $this->ismanage == false) {\n            $this->CheckTemplate();\n        }\n\n        $this->ReflushLanguages();\n        $this->ConvertTableAndDatainfo();\n\n        $this->isload = true;\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u7ba1\u7406.\n     *\n     * @throws Exception\n     */\n    public function LoadManage()\n    {\n        if ($this->user->Status == ZC_MEMBER_STATUS_AUDITING) {\n            $this->ShowError(79, __FILE__, __LINE__);\n        }\n\n        if ($this->user->Status == ZC_MEMBER_STATUS_LOCKED) {\n            $this->ShowError(80, __FILE__, __LINE__);\n        }\n\n        Add_Filter_Plugin('Filter_Plugin_Admin_PageMng_SubMenu', 'Include_Admin_Addpagesubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_TagMng_SubMenu', 'Include_Admin_Addtagsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_CategoryMng_SubMenu', 'Include_Admin_Addcatesubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_MemberMng_SubMenu', 'Include_Admin_Addmemsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_ModuleMng_SubMenu', 'Include_Admin_Addmodsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Admin_CommentMng_SubMenu', 'Include_Admin_Addcmtsubmenu');\n        Add_Filter_Plugin('Filter_Plugin_Zbp_LoadManage', 'Include_Admin_UpdateDB');\n        Add_Filter_Plugin('Filter_Plugin_Admin_End', 'Include_Admin_CheckHttp304OK');\n\n        $this->CheckTemplate();\n\n        if (isset($GLOBALS['zbpvers'])) {\n            $GLOBALS['zbpvers'][$GLOBALS['blogversion']] = ZC_VERSION_DISPLAY . ' Build ' . $GLOBALS['blogversion'];\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_LoadManage'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n    }\n\n    /**\n     * \u7ec8\u6b62\u8fde\u63a5\uff0c\u91ca\u653e\u8d44\u6e90.\n     */\n    public function Terminate()\n    {\n        if ($this->isinitialized) {\n            foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_Terminate'] as $fpname => &$fpsignal) {\n                $fpname();\n            }\n\n            $this->CloseConnect();\n            unset($this->db);\n            $this->isinitialized = false;\n        }\n    }\n\n    /**\n     * \u8fde\u63a5\u6570\u636e\u5e93.\n     *\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function OpenConnect()\n    {\n        if ($this->isconnected) {\n            return false;\n        }\n\n        if (!$this->option['ZC_DATABASE_TYPE']) {\n            return false;\n        }\n\n        switch ($this->option['ZC_DATABASE_TYPE']) {\n            case 'sqlite':\n            case 'sqlite3':\n            case 'pdo_sqlite':\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array($this->usersdir . 'data/' . $this->option['ZC_SQLITE_NAME'],\n                        $this->option['ZC_SQLITE_PRE'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(69, __FILE__, __LINE__);\n                }\n                break;\n            case 'postgresql':\n            case 'pdo_postgresql':\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array($this->option['ZC_PGSQL_SERVER'],\n                        $this->option['ZC_PGSQL_USERNAME'],\n                        $this->option['ZC_PGSQL_PASSWORD'],\n                        $this->option['ZC_PGSQL_NAME'],\n                        $this->option['ZC_PGSQL_PRE'],\n                        $this->option['ZC_PGSQL_PORT'],\n                        $this->option['ZC_PGSQL_PERSISTENT'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(67, __FILE__, __LINE__);\n                }\n                break;\n            case 'mysql':\n            case 'mysqli':\n            case 'pdo_mysql':\n            default:\n                $this->db = self::InitializeDB($this->option['ZC_DATABASE_TYPE']);\n                if ($this->db->Open(\n                    array(\n                        $this->option['ZC_MYSQL_SERVER'],\n                        $this->option['ZC_MYSQL_USERNAME'],\n                        $this->option['ZC_MYSQL_PASSWORD'],\n                        $this->option['ZC_MYSQL_NAME'],\n                        $this->option['ZC_MYSQL_PRE'],\n                        $this->option['ZC_MYSQL_PORT'],\n                        $this->option['ZC_MYSQL_PERSISTENT'],\n                        $this->option['ZC_MYSQL_ENGINE'],\n                    )\n                ) == false\n                ) {\n                    $this->ShowError(67, __FILE__, __LINE__);\n                }\n                break;\n        }\n        // utf8mb4\u652f\u6301\n        if ($this->db->type == 'mysql' && version_compare($this->db->version, '5.5.3') < 0) {\n            Add_Filter_Plugin('Filter_Plugin_DbSql_Filter', 'utf84mb_filter');\n            Add_Filter_Plugin('Filter_Plugin_Edit_Begin', 'utf84mb_fixHtmlSpecialChars');\n        }\n        $this->isconnected = true;\n\n        return true;\n    }\n\n    /**\n     * \u5bf9\u8868\u540d\u548c\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u9884\u8f6c\u6362.\n     */\n    public function ConvertTableAndDatainfo()\n    {\n        if ($this->db->dbpre) {\n            $this->table = str_replace('%pre%', $this->db->dbpre, $this->table);\n        }\n        if ($this->db->type === 'postgresql') {\n            foreach ($this->datainfo as $key => &$value) {\n                foreach ($value as $k2 => &$v2) {\n                    $v2[0] = strtolower($v2[0]);\n                }\n            }\n        }\n    }\n\n    /**\n     * \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5.\n     */\n    public function CloseConnect()\n    {\n        if ($this->isconnected) {\n            $this->db->Close();\n            $this->isconnected = false;\n        }\n    }\n\n    /**\n     * \u542f\u7528session.\n     *\n     * @return bool\n     */\n    public function StartSession()\n    {\n        if (session_status() == 1) {\n            session_start();\n            $this->issession = true;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * \u7ec8\u6b62session.\n     *\n     * @return bool\n     */\n    public function EndSession()\n    {\n        if (session_status() == 2) {\n            session_write_close();\n            $this->issession = false;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Load or ReLoad\u63d2\u4ef6Configs\u8868.\n     */\n    public function LoadConfigs()\n    {\n        $this->LoadConfigsOnlySystem(true);\n        $this->LoadConfigsOnlySystem(false);\n    }\n\n    /**\n     * \u8f7d\u5165\u63d2\u4ef6Configs\u8868 Only System Option.\n     */\n    private $prvConfigList = null;\n\n    public function LoadConfigsOnlySystem($onlysystemoption = true)\n    {\n        if ($onlysystemoption == true) {\n            $this->configs = array();\n            $this->prvConfigList = array();\n\n            $sql = $this->db->sql->get()->select($this->table['Config']);\n            /* @var Config[] $array */\n            $this->prvConfigList = $this->GetListOrigin($sql);\n        }\n\n        $type = 'Config';\n\n        foreach ($this->prvConfigList as $c) {\n            $name = $c[$this->d['Config']['Name'][0]];\n            if (($name == 'system' && $onlysystemoption == true) || ($name != 'system' && $onlysystemoption == false)) {\n                if (!isset($this->configs[$name])) {\n                    $l = new $type($name);\n                    $this->configs[$name] = $l;\n                } else {\n                    $l = $this->configs[$name];\n                }\n                if (get_class($l) != $type) {\n                    $l = new $type($name);\n                    $this->configs[$name] = $l;\n                }\n                if (isset($c[$this->d['Config']['Key'][0]]) && $c[$this->d['Config']['Key'][0]] != '') {\n                    $l->LoadInfoByAssocSingleWithPre($c);\n                } else {\n                    $l->LoadInfoByAssoc($c);\n                }\n            }\n        }\n        //\u5c06\u8bfb\u51fa\u6765\u7684\u6570\u7ec4\u518d\u62fc\u6210\u5e8f\u5217\u5316\u6570\u636e\u518d\u53cd\u5e8f\u5217\u5316\n        foreach ($this->configs as $key => $value) {\n            if (is_object($value) && ($key == 'system' && $onlysystemoption == true) || ($key != 'system' && $onlysystemoption == false)) {\n                $value->LoadInfoByAssocSingleWithAfter();\n            }\n        }\n\n        if ($onlysystemoption == false) {\n            $this->prvConfigList = array();\n        }\n    }\n\n    /**\n     * \u4fdd\u5b58Configs\u8868.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function SaveConfig($name)\n    {\n        if (!isset($this->configs[$name])) {\n            return false;\n        }\n\n        $this->configs[$name]->Save();\n\n        return true;\n    }\n\n    /**\n     * \u5220\u9664Configs\u8868.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function DelConfig($name)\n    {\n        if (!isset($this->configs[$name])) {\n            return false;\n        }\n\n        $this->configs[$name]->Delete();\n        unset($this->configs[$name]);\n\n        return true;\n    }\n\n    /**\n     * \u83b7\u53d6Configs\u8868\u503c\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return mixed\n     */\n    public function Config($name)\n    {\n        if (!isset($this->configs[$name])) {\n            $name = FilterCorrectName($name);\n            if (!$name) {\n                return;\n            }\n\n            $this->configs[$name] = new Config($name);\n        }\n\n        return $this->configs[$name];\n    }\n\n    /**\n     * \u67e5\u67d0Config\u662f\u5426\u5b58\u5728.\n     *\n     * @param string $name Configs\u8868\u540d\n     *\n     * @return bool\n     */\n    public function HasConfig($name)\n    {\n        return isset($this->configs[$name]) && $this->configs[$name]->CountItem() > 0;\n    }\n\n    //###############################################################################################################\n    //Cache\u76f8\u5173\n    private $cache_hash = null;\n\n    /**\n     * \u4fdd\u5b58\u7f13\u5b58.\n     *\n     * @return bool\n     */\n    public function SaveCache()\n    {\n        //$s=$this->usersdir . 'cache/' . $this->guid . '.cache';\n        //$c=serialize($this->cache);\n        //@file_put_contents($s, $c);\n        //$this->configs['cache']=$this->cache;\n        $new_hash = md5($this->Config('cache'));\n        if ($this->cache_hash == $new_hash) {\n            return true;\n        }\n\n        $this->SaveConfig('cache');\n        $this->cache_hash = $new_hash;\n\n        return true;\n    }\n\n    /**\n     * \u52a0\u8f7d\u7f13\u5b58.\n     *\n     * @return bool\n     */\n    public function LoadCache()\n    {\n        $this->cache = $this->Config('cache');\n        $this->cache_hash = md5($this->Config('cache'));\n\n        return true;\n    }\n\n    /**\n     * \u4fdd\u5b58\u914d\u7f6e.\n     *\n     * @return bool\n     */\n    public function SaveOption()\n    {\n        $this->option['ZC_BLOG_CLSID'] = $this->guid;\n\n        unset($this->option['ZC_PERMANENT_DOMAIN_WHOLE_DISABLE']);\n        unset($this->option['ZC_PERMANENT_DOMAIN_FORCED_URL']);\n\n        $reserve_keys = explode('|', self::OPTION_RESERVE_KEYS);\n\n        if (file_exists($this->usersdir . 'c_option.php') == false) {\n            $s = \"<\";\n            $s .= \"?php\\r\\n\";\n            $s .= \"return \";\n            $option = array();\n            foreach ($this->option as $key => $value) {\n                if (in_array($key, $reserve_keys)) {\n                    $option[$key] = $value;\n                }\n            }\n            $s .= var_export($option, true);\n            $s .= \";\";\n            @file_put_contents($this->usersdir . 'c_option.php', $s);\n        }\n\n        foreach ($this->option as $key => $value) {\n            $this->Config('system')->$key = $value;\n        }\n        foreach ($reserve_keys as $key => $value) {\n            $this->Config('system')->DelKey($value);\n        }\n\n        $this->Config('system')->ZC_BLOG_HOST = chunk_split($this->Config('system')->ZC_BLOG_HOST, 1, \"|\");\n\n        $this->SaveConfig('system');\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u914d\u7f6e.\n     *\n     * @return bool\n     */\n    public function LoadOption()\n    {\n        $array = $this->Config('system')->GetData();\n\n        if (empty($array)) {\n            return false;\n        }\n\n        if (!is_array($array)) {\n            return false;\n        }\n\n        $reserve_keys = explode('|', self::OPTION_RESERVE_KEYS);\n\n        foreach ($array as $key => $value) {\n            if ($key == 'ZC_BLOG_HOST') {\n                $value = str_replace('|', '', $value);\n            }\n\n            if (in_array($key, $reserve_keys)) {\n                continue;\n            }\n\n            $this->option[$key] = $value;\n        }\n        if (!extension_loaded('gd')) {\n            $this->option['ZC_COMMENT_VERIFY_ENABLE'] = false;\n        }\n\n        return true;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u64cd\u4f5c\u6743\u9650.\n     *\n     * @param string     $action \u64cd\u4f5c\n     * @param int|string $level\n     *\n     * @return bool\n     */\n    public function CheckRights($action, $level = null)\n    {\n        if ($level === null) {\n            $level = $this->user->Level;\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_CheckRights'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($action, $level);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n        if (!isset($this->actions[$action])) {\n            if (is_numeric($action)) {\n                return $level <= $action;\n            } else {\n                return false;\n            }\n        }\n\n        return $level <= $this->actions[$action];\n    }\n\n    /**\n     * \u6839\u636e\u7528\u6237\u7b49\u7ea7\u9a8c\u8bc1\u64cd\u4f5c\u6743\u9650 1.5\u5f00\u59cb\u53c2\u6570\u6362\u987a\u5e8f.\n     *\n     * @param string $action \u64cd\u4f5c\n     * @param int    $level  \u7528\u6237\u7b49\u7ea7\n     *\n     * @return bool\n     */\n    public function CheckRightsByLevel($action, $level)\n    {\n        return $this->CheckRights($action, $level);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55.\n     *\n     * @return bool\n     */\n    public function Verify()\n    {\n        $username = trim(GetVars('username', 'COOKIE'));\n        $token = trim(GetVars('token', 'COOKIE'));\n        $user = $this->VerifyUserToken($token, $username);\n        if (is_object($user)) {\n            $this->user = $user;\n\n            return true;\n        }\n        $this->user = new Member();\n        $this->user->Guid = GetGuid();\n\n        return false;\n    }\n\n    /**\n     * \u8fd4\u56de\u767b\u5f55\u6210\u529f\u540e\u5e94\u4fdd\u5b58\u7684cookie\u4fe1\u606f.\n     *\n     * @param Member $m \u5df2\u9a8c\u8fc7\u6210\u529f\u7684member\n     *\n     * @return string\n     */\n    public function VerifyResult($m)\n    {\n        return $this->GenerateUserToken($m);\n    }\n\n    /**\n     * \u751f\u6210User Token\uff0c\u7528\u4e8e\u767b\u5f55\u9a8c\u8bc1\n     *\n     * @param Member $user\n     * @param int    $time\n     *\n     * @return string\n     */\n    public function GenerateUserToken($user, $time = 0)\n    {\n        if ($time === 0) {\n            $time = (time() + 3600 * 24);\n        }\n\n        return CreateWebToken($user->ID, $time, $user->Guid, $user->PassWord_MD5Path);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55Token.\n     *\n     * @param string $token\n     * @param string $username\n     *\n     * @return Member\n     */\n    public function VerifyUserToken($token, $username)\n    {\n        $user = $this->GetMemberByName($username);\n        if ($user->ID != null) {\n            if (VerifyWebToken($token, $user->ID, $user->Guid, $user->PassWord_MD5Path)) {\n                return $user;\n            }\n        }\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u4e00\u6b21MD5\u5bc6\u7801\uff09.\n     *\n     * @param string $name   \u7528\u6237\u540d\n     * @param string $md5pw  md5\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\n     * @param Member $member \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_MD5($name, $md5pw, &$member)\n    {\n        if ($name == '' || $md5pw == '') {\n            return false;\n        }\n        $member = $this->GetMemberByName($name);\n        if ($member->ID != null) {\n            return $this->Verify_Final($name, md5($md5pw . $member->Guid), $member);\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u539f\u59cb\u660e\u6587\u5bc6\u7801\uff09.\n     *\n     * @param string $name       \u7528\u6237\u540d\n     * @param string $originalpw \u5bc6\u7801\u660e\u6587\n     * @param Member $member     \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Original($name, $originalpw, &$member = null)\n    {\n        if ($name == '' || $originalpw == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            return $this->Verify_MD5($name, md5($originalpw), $member);\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u6570\u636e\u5e93\u4fdd\u5b58\u7684\u6700\u7ec8\u8fd0\u7b97\u540e\u5bc6\u7801\uff09.\n     *\n     * @param string $name     \u7528\u6237\u540d\n     * @param string $password \u4e8c\u6b21\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\n     * @param object $member   \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Final($name, $password, &$member = null)\n    {\n        if ($name == '' || $password == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if (hash_equals($m->Password, $password) === true) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08\u4f7f\u7528Token\uff0c\u66ff\u4ee3\u5bc6\u7801\u4fdd\u5b58\uff09.\n     *\n     * @param string $name   \u7528\u6237\u540d\n     * @param string $wt     WebToken\n     * @param string $wt_id  WebToken\u7684ID\u8bc6\u522b\u7b26\n     * @param object $member \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_Token($name, $wt, $wt_id, &$member = null)\n    {\n        if ($name == '' || $wt == '') {\n            return false;\n        }\n        $m = null;\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if (VerifyWebToken($wt, $wt_id, $this->guid, $m->ID, $m->Password) === true) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private $loadmembers_level = 0;\n\n    /**\n     * \u8f7d\u5165\u7528\u6237\u5217\u8868.\n     *\n     * @param int $level \u7528\u6237\u7b49\u7ea7\n     *\n     * @return bool\n     */\n    public function LoadMembers($level = 0)\n    {\n        $this->loadmembers_level = $level;\n        if ($this->loadmembers_level < 0) {\n            return false;\n        }\n\n        $where = null;\n        if ($this->loadmembers_level > 0) {\n            $where = array(array('<=', 'mem_Level', $this->loadmembers_level));\n        }\n        $this->members = array();\n        $this->membersbyname = array();\n        $array = $this->GetMemberList(null, $where);\n        foreach ($array as $m) {\n            $this->members[$m->ID] = $m;\n            $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n        }\n\n        return true;\n    }\n\n    private function LoadCategories_Recursion($deep, $id, &$lv)\n    {\n        $subarray = array();\n        for ($i = 0; $i < $this->category_recursion_level; $i++) {\n            $name = 'lv' . $i;\n            ${$name} = &$lv[$i];\n        }\n        $lvdeep = 'lv' . $deep;\n        $this->categoriesbyorder[$id] = &$this->categories[$id];\n        if ($deep < ($this->category_recursion_level - 1)) {\n            $deep += 1;\n            $lvdeepnext = 'lv' . $deep;\n            if (isset(${$lvdeepnext}[$id])) {\n                foreach (${$lvdeepnext}[$id] as $idnow) {\n                    $subarray[] = $idnow;\n                    $this->categoriesbyorder[$id]->SubCategories[] = &$this->categories[$idnow];\n                    //$this->categoriesbyorder[$id]->ChildrenCategories[] = &$this->categories[$idnow];\n                    $array = $this->LoadCategories_Recursion($deep, $idnow, $lv);\n                    foreach ($array as $key => $value) {\n                        $subarray[] = $value;\n                    }\n                }\n            }\n        }\n        $subarray = array_unique($subarray);\n        foreach ($subarray as $key => $value) {\n            $this->categoriesbyorder[$id]->ChildrenCategories[] = &$this->categories[$value];\n        }\n        return $subarray;\n    }\n\n    /**\n     * \u8f7d\u5165\u5206\u7c7b\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadCategories()\n    {\n        $this->categories = array();\n        $this->categoriesbyorder = array();\n\n        $lv = array();\n        for ($i = 0; $i < $this->category_recursion_level; $i++) {\n            $name = 'lv' . $i;\n            ${$name} = array();\n            $lv[$i] = &${$name};\n        }\n        $array = $this->GetCategoryList(null, null, array('cate_Order' => 'ASC'), null, null);\n        if (count($array) == 0) {\n            return false;\n        }\n\n        foreach ($array as $c) {\n            $this->categories[$c->ID] = $c;\n        }\n\n        foreach ($this->categories as $id => $c) {\n            $l = 'lv' . $c->Level;\n            ${$l}[$c->ParentID][] = $id;\n        }\n\n        if (!is_array($lv0[0])) {\n            $lv0[0] = array();\n        }\n\n        foreach ($lv0[0] as $id0) {\n            $this->LoadCategories_Recursion(0, $id0, $lv);\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u6807\u7b7e\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadTags()\n    {\n        $this->tags = array();\n        $this->tagsbyname = array();\n        $array = $this->GetTagList();\n        foreach ($array as $t) {\n            $this->tags[$t->ID] = $t;\n            $this->tagsbyname[$t->Name] = &$this->tags[$t->ID];\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u6a21\u5757\u5217\u8868.\n     *\n     * @return bool\n     */\n    public function LoadModules()\n    {\n        $this->modules = array();\n        $this->modulesbyfilename = array();\n        $array = $this->GetModuleList();\n        foreach ($array as $m) {\n            $this->modules[] = $m;\n            $this->modulesbyfilename[$m->FileName] = $m;\n        }\n\n        $dir = $this->usersdir . 'theme/' . $this->theme . '/include/';\n        if (file_exists($dir)) {\n            $files = GetFilesInDir($dir, 'php');\n            foreach ($files as $sortname => $fullname) {\n                $m = new Module();\n                $m->FileName = $sortname;\n                $m->HtmlID = $sortname;\n                $m->Content = file_get_contents($fullname);\n                if (stripos($m->Content, '<li') !== false && stripos($m->Content, '</li>') !== false) {\n                    $m->Type = 'ul';\n                } else {\n                    $m->Type = 'div';\n                }\n                $m->Source = 'theme_' . $this->theme;\n                $m->IsIncludeFile = true;\n                $this->modules[] = $m;\n                $this->modulesbyfilename[$m->FileName] = $m;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u8f7d\u5165\u4e3b\u9898\u5217\u8868.\n     *\n     * @return App[]\n     */\n    public function LoadThemes()\n    {\n        $allThemes = array();\n        $dirs = GetDirsInDir($this->usersdir . 'theme/');\n        natcasesort($dirs);\n        array_unshift($dirs, $this->theme);\n        $dirs = array_unique($dirs);\n        foreach ($dirs as $id) {\n            $app = new App();\n            if ($app->LoadInfoByXml('theme', $id) == true) {\n                $allThemes[] = $app;\n            }\n        }\n\n        return $allThemes;\n    }\n\n    /**\n     * \u8f7d\u5165\u63d2\u4ef6\u5217\u8868.\n     *\n     * @return App[]\n     */\n    public function LoadPlugins()\n    {\n        $allPlugins = array();\n        $dirs = GetDirsInDir($this->usersdir . 'plugin/');\n        natcasesort($dirs);\n\n        foreach ($dirs as $id) {\n            $app = new App();\n            if ($app->LoadInfoByXml('plugin', $id) == true) {\n                $allPlugins[] = $app;\n            }\n        }\n\n        return $allPlugins;\n    }\n\n    /**\n     * \u8f7d\u5165\u6307\u5b9a\u5e94\u7528.\n     *\n     * @param string $type \u5e94\u7528\u7c7b\u578b(theme|plugin)\n     * @param string $id   \u5e94\u7528ID\n     *\n     * @return App\n     */\n    public function LoadApp($type, $id)\n    {\n        $app = new App();\n        if ($app->LoadInfoByXml($type, $id) != true) {\n            $app->isloaded = false;\n        }\n\n        return $app;\n    }\n\n    /**\n     * \u68c0\u67e5\u5e94\u7528\u662f\u5426\u5b89\u88c5\u5e76\u542f\u7528.\n     *\n     * @param string $name \u5e94\u7528\uff08\u63d2\u4ef6\u6216\u4e3b\u9898\uff09\u7684ID\n     *\n     * @return bool\n     */\n    public function CheckPlugin($name)\n    {\n        return in_array($name, $this->activedapps);\n    }\n\n    /**\n     * \u68c0\u67e5\u5e94\u7528\u662f\u5426\u5b89\u88c5\u5e76\u542f\u7528.\n     *\n     * @param string $name \u5e94\u7528ID\uff08\u63d2\u4ef6\u6216\u4e3b\u9898\uff09\n     *\n     * @return bool\n     */\n    public function CheckApp($name)\n    {\n        return $this->CheckPlugin($name);\n    }\n\n    /**\n     * \u83b7\u53d6\u9884\u6fc0\u6d3b\u63d2\u4ef6\u540d\u6570\u7ec4.\n     *\n     * @return string[]\n     */\n    public function GetPreActivePlugin()\n    {\n        $ap = explode(\"|\", $this->option['ZC_USING_PLUGIN_LIST']);\n        $ap = array_unique($ap);\n\n        return $ap;\n    }\n\n    /**\n     * \u8f7d\u5165\u6307\u5b9a\u5e94\u7528\u8bed\u8a00\u5305.\n     *\n     * @param string $type    \u5e94\u7528\u7c7b\u578b(system|theme|plugin)\n     * @param string $id      \u5e94\u7528ID\n     * @param string $default \u9ed8\u8ba4\u8bed\u8a00\n     *\n     * @throws Exception\n     *\n     * @return null\n     */\n    public function LoadLanguage($type, $id, $default = '')\n    {\n        $languagePath = $this->path;\n        $languageRegEx = '/^([0-9A-Z\\-_]*)\\.php$/ui';\n        $languageList = array();\n        $language = '';\n        $default = str_replace(array('/', '\\\\'), '', $default);\n        $languagePtr = &$this->lang;\n\n        if ($default === '') {\n            $default = $this->option['ZC_BLOG_LANGUAGEPACK'];\n        }\n\n        $defaultLanguageList = array($default, 'zh-cn', 'zh-tw', 'en');\n\n        switch ($type) {\n            case 'system':\n                $languagePath .= 'zb_users/language/';\n                break;\n            case 'plugin':\n            case 'theme':\n                $languagePath .= 'zb_users/' . $type . '/' . $id . '/language/';\n                $languagePtr = &$this->lang[$id];\n                break;\n            default:\n                $languagePath .= $type . '/language/';\n                $languagePtr = &$this->lang[$id];\n                break;\n        }\n\n        $handle = @opendir($languagePath);\n        $match = null;\n        if ($handle) {\n            while (false !== ($file = readdir($handle))) {\n                if (preg_match($languageRegEx, $file, $match)) {\n                    $languageList[] = $match[1];\n                }\n            }\n            closedir($handle);\n        } else {\n            // \u8fd9\u91cc\u4e0d\u4f1a\u6267\u884c\u5230\uff0c\u5728opendir\u65f6\u5c31\u5df2\u7ecf\u629b\u51faE_WARNING\n            throw new Exception('Cannot opendir(' . $languagePath . ')');\n        }\n\n        if (count($languageList) === 0) {\n            throw new Exception('No language in ' . $languagePath);\n        }\n\n        for ($i = 0; $i < count($defaultLanguageList); $i++) {\n            // \u5728\u6548\u7387\u4e0a\uff0carray_search\u548c\u547d\u540d\u6570\u7ec4\u6ca1\u6709\u672c\u8d28\u533a\u522b\uff0c\u81f3\u5c11\u5728\u8fd9\u91cc\u5982\u6b64\u3002\n            if (false !== array_search($defaultLanguageList[$i], $languageList)) {\n                $language = $defaultLanguageList[$i];\n                break;\n            }\n        }\n        if ($language === '') {\n            throw new Exception('Language ' . $default . ' is not found in ' . $languagePath);\n        }\n\n        $languagePath .= $language . '.php';\n        $languagePtr = include $languagePath;\n        $this->langpacklist[] = array($type, $id, $language);\n        if ($type == 'system') {\n            $this->langs = json_decode(json_encode($this->lang));\n        } else {\n            if ($id != '' && isset($this->lang[$id])) {\n                $this->langs->$id = json_decode(json_encode($this->lang[$id]));\n            }\n        }\n\n        return true;\n    }\n\n    public function ReflushLanguages()\n    {\n        $this->langs = json_decode(json_encode($this->lang));\n    }\n\n    /**\n     * \u91cd\u65b0\u8bfb\u53d6\u8bed\u8a00\u5305.\n     *\n     * @throws Exception\n     */\n    public function ReloadLanguages()\n    {\n        $array = $this->langpacklist;\n        $this->lang = $this->langpacklist = array();\n        foreach ($array as $v) {\n            $this->LoadLanguage($v[0], $v[1], $v[2]);\n        }\n    }\n\n    /**\n     * \u521b\u5efa\u6a21\u677f\u5bf9\u8c61\uff0c\u9884\u52a0\u8f7d\u5df2\u7f16\u8bd1\u6a21\u677f\n     *\n     * @param string $theme \u6307\u5b9a\u4e3b\u9898\u540d\n     *\n     * @return Template\n     */\n    public function PrepareTemplate($theme = null)\n    {\n        if (is_null($theme)) {\n            $theme = &$this->theme;\n        }\n\n        $template = new Template();\n        $template->MakeTemplateTags();\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_MakeTemplatetags'] as $fpname => &$fpsignal) {\n            $fpname($template->templateTags);\n        }\n\n        $template->SetPath($this->usersdir . 'cache/compiled/' . $theme . '/');\n        $template->theme = $theme;\n\n        return $template;\n    }\n\n    /**\n     * \u6a21\u677f\u89e3\u6790.\n     *\n     * @return bool\n     */\n    public function BuildTemplate()\n    {\n        $this->template->LoadTemplates();\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_BuildTemplate'] as $fpname => &$fpsignal) {\n            $fpname($this->template->templates);\n        }\n\n        return $this->template->BuildTemplate();\n    }\n\n    /**\n     * \u66f4\u65b0\u6a21\u677f\u7f13\u5b58.\n     *\n     * @param bool $onlycheck  \u4e3a\u771f\u7684\u8bdd\uff0c\u53ea\u5224\u65ad\u662f\u5426\u9700\u8981\u800c\u4e0dBuild\n     * @param bool $forcebuild\n     *\n     * @return true or false\n     */\n    public function CheckTemplate($onlycheck = false, $forcebuild = false)\n    {\n        $this->template->LoadTemplates();\n        $s = implode($this->template->templates);\n        $md5 = md5($s);\n\n        //\u672c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5f88\u6709\u610f\u601d\uff0c\u4e3afalse\u8868\u793a\u9700\u8981rebuild \u4e3atrue\u8868\u793a\u5df2\u91cd\u5efa\u5b8c\u6210\u6216\u662f\u4e0d\u9700\u8981rebuild\n        //$zbp->CheckTemplate(true) == false \u7684\u610f\u601d\uff0c\u5c31\u662f\u5224\u65ad\u6a21\u677f\u9700\u9700\u8981\u91cd\u5237\u65b0\u5417\uff1f\n\n        //\u5982\u679c\u5bf9\u6bd4\u4e0d\u4e00\u6837,$onlycheck\u5c31\u6709\u7528\u4e86\n        if ($md5 != $this->cache->templates_md5) {\n            if ($onlycheck == true && $forcebuild == false) {\n                return false;\n            }\n            $this->BuildTemplate();\n            $this->cache->templates_md5 = $md5;\n            $this->SaveCache();\n\n            return true;\n        }\n        //\u5982\u679c\u5bf9\u6bd4\u4e00\u6837\u7684\u8bdd\uff0c$forcebuild\u5c31\u6709\u7528\u4e86\n        if ($md5 == $this->cache->templates_md5) {\n            if ($forcebuild == true) {\n                $this->BuildTemplate();\n                $this->cache->templates_md5 = $md5;\n                $this->SaveCache();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * \u751f\u6210\u6240\u6709\u8fdbReady List\u7684\u6a21\u5757\u7684Content\u5185\u5bb9\u5e76\u4fdd\u5b58.\n     */\n    public function BuildModule()\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_BuildModule'] as $fpname => &$fpsignal) {\n            $fpname();\n        }\n        ModuleBuilder::Build();\n    }\n\n    /**\n     * \u91cd\u5efa\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     * @param string $moduleFunction \u7528\u6237\u51fd\u6570\n     */\n    public function RegBuildModule($moduleFileName, $moduleFunction)\n    {\n        ModuleBuilder::Reg($moduleFileName, $moduleFunction);\n    }\n\n    /**\n     * \u7cfb\u7edf\u9ed8\u8ba4\u6ce8\u518c\u6a21\u5757.\n     */\n    public function RegBuildModules()\n    {\n        $this->RegBuildModule('catalog', 'ModuleBuilder::Catalog');\n        $this->RegBuildModule('calendar', 'ModuleBuilder::Calendar');\n        $this->RegBuildModule('comments', 'ModuleBuilder::Comments');\n        $this->RegBuildModule('previous', 'ModuleBuilder::LatestArticles');\n        $this->RegBuildModule('archives', 'ModuleBuilder::Archives');\n        $this->RegBuildModule('navbar', 'ModuleBuilder::Navbar');\n        $this->RegBuildModule('tags', 'ModuleBuilder::TagList');\n        $this->RegBuildModule('statistics', 'ModuleBuilder::Statistics');\n        $this->RegBuildModule('authors', 'ModuleBuilder::Authors');\n    }\n\n    /**\n     * \u6dfb\u52a0\u8fdb\u5165Build Ready\u5217\u8868\u7684\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     * @param null   $parameters     \u6a21\u5757\u53c2\u6570\n     */\n    public function AddBuildModule($moduleFileName, $parameters = null)\n    {\n        $p = func_get_args();\n        call_user_func_array('ModuleBuilder::Add', $p);\n    }\n\n    /**\n     * \u5220\u9664\u8fdb\u5165Build Ready\u5217\u8868\u6a21\u5757.\n     *\n     * @param string $moduleFileName \u6a21\u5757\u540d\n     */\n    public function DelBuildModule($moduleFileName)\n    {\n        ModuleBuilder::Del($moduleFileName);\n    }\n\n    /**\n     * \u67e5\u8be2\u6307\u5b9a\u6570\u636e\u7ed3\u6784\u7684sql\u5e76\u8fd4\u56deBase\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string|array $table    \u6570\u636e\u8868\n     * @param array        $datainfo \u6570\u636e\u5b57\u6bb5\n     * @param string       $sql      SQL\u64cd\u4f5c\u8bed\u53e5\n     *\n     * @return array\n     */\n    public function GetListCustom($table, $datainfo, $sql)\n    {\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $l = new Base($table, $datainfo);\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u67e5\u8be2ID\u6570\u636e\u7684\u6307\u5b9a\u6570\u636e\u7ed3\u6784\u7684sql\u5e76\u8fd4\u56deBase\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string|array $table    \u6570\u636e\u8868\n     * @param array        $datainfo \u6570\u636e\u5b57\u6bb5\n     * @param array        $array    ID\u6570\u7ec4\n     *\n     * @return Base[]\n     */\n    public function GetListCustomByArray($table, $datainfo, $array)\n    {\n        if (!is_array($array)) {\n            return array();\n        }\n\n        if (count($array) == 0) {\n            return array();\n        }\n\n        $where = array();\n        $where[] = array('IN', $datainfo['ID'][0], implode(',', $array));\n        $sql = $this->db->sql->Select($table, '*', $where);\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $l = new Base($table, $datainfo);\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u5df2\u6539\u540dGetListType,1.5\u7248\u4e2d\u6254\u6389\u6709\u6b67\u4e49\u7684GetList.\n     *\n     * @param $type\n     * @param $sql\n     *\n     * @return Base[]\n     */\n    public function GetListType($type, $sql)\n    {\n        if (get_parent_class($sql) == 'SQL__Global') {\n            $sql = $sql->sql;\n        }\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            /** @var Base $l */\n            $l = new $type();\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * GetListOrigin.\n     *\n     * @param $sql\n     *\n     * @return Base[]\n     */\n    public function GetListOrigin($sql)\n    {\n        if (get_parent_class($sql) == 'SQL__Global') {\n            $sql = $sql->sql;\n        }\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            $list[] = $a;\n        }\n\n        return $list;\n    }\n\n    /**\n     * \u67e5\u8be2ID\u6570\u636e\u7684\u6307\u5b9a\u7c7b\u578b\u7684sql\u5e76\u8fd4\u56de\u6307\u5b9a\u7c7b\u578b\u5bf9\u8c61\u5217\u8868.\n     *\n     * @param string $type  \u7c7b\u578b\n     * @param mixed  $array ID\u6570\u7ec4\n     *\n     * @return Base[]\n     */\n    public function GetListTypeByArray($type, $array)\n    {\n        if (!is_array($array)) {\n            return array();\n        }\n\n        if (count($array) == 0) {\n            return array();\n        }\n\n        $where = array();\n        $where[] = array('IN', $this->datainfo[$type]['ID'][0], implode(',', $array));\n        $sql = $this->db->sql->Select($this->table[$type], '*', $where);\n        $array = null;\n        $list = array();\n        $array = $this->db->Query($sql);\n        if (!isset($array)) {\n            return array();\n        }\n        foreach ($array as $a) {\n            /** @var Base $l */\n            $l = new $type();\n            $l->LoadInfoByAssoc($a);\n            $list[] = $l;\n        }\n\n        return $list;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Post[]\n     */\n    public function GetPostList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        return $array;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u6570\u7ec4\u83b7\u53d6\u6587\u7ae0\u5b9e\u4f8b.\n     *\n     * @param mixed[] $array\n     *\n     * @return Post[]|Base[] Posts\n     */\n    public function GetPostByArray($array)\n    {\n        return $this->GetListTypeByArray('Post', $array);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     * @param mixed $readtags\n     *\n     * @return Post[]\n     */\n    public function GetArticleList($select = null, $where = null, $order = null, $limit = null, $option = null, $readtags = true)\n    {\n        if (empty($where)) {\n            $where = array();\n        }\n\n        if (is_array($where)) {\n            array_unshift($where, array('=', 'log_Type', '0'));\n        }\n\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        if ($readtags) {\n            $tagstring = '';\n            foreach ($array as $a) {\n                $tagstring .= $a->Tag;\n            }\n            $this->LoadTagsByIDString($tagstring);\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Post[]\n     */\n    public function GetPageList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (empty($where)) {\n            $where = array();\n        }\n        if (is_array($where)) {\n            array_unshift($where, array('=', 'log_Type', '1'));\n        }\n\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Post'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Post[] $array */\n        $array = $this->GetListType('Post', $sql);\n        foreach ($array as $a) {\n            $this->posts[$a->ID] = $a;\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Comment[]\n     */\n    public function GetCommentList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Comment'], $select, $where, $order, $limit, $option);\n        }\n\n        /** @var Comment[] $array */\n        $array = $this->GetListType('Comment', $sql);\n        foreach ($array as $comment) {\n            $this->comments[$comment->ID] = $comment;\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Member[]|Base[]\n     */\n    public function GetMemberList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Member'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Member', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Tag[]|Base[]\n     */\n    public function GetTagList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Tag'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Tag', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Category[]|Base[]\n     */\n    public function GetCategoryList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Category'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Category', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Module[]|Base[]\n     */\n    public function GetModuleList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Module'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Module', $sql);\n    }\n\n    /**\n     * @param mixed $select\n     * @param mixed $where\n     * @param mixed $order\n     * @param mixed $limit\n     * @param mixed $option\n     *\n     * @return Upload[]|Base[]\n     */\n    public function GetUploadList($select = null, $where = null, $order = null, $limit = null, $option = null)\n    {\n        if (get_parent_class($select) == 'SQL__Global') {\n            $sql = $select->sql;\n        } else {\n            $sql = $this->db->sql->Select($this->table['Upload'], $select, $where, $order, $limit, $option);\n        }\n\n        return $this->GetListType('Upload', $sql);\n    }\n\n    /**\n     * @param $sql\n     *\n     * @return mixed\n     */\n    public function get_results($sql)\n    {\n        return $this->db->Query($sql);\n    }\n\n    /**\n     * \u6839\u636e\u522b\u540d\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[]|string &$object   \u7f13\u5b58\u5bf9\u8c61\n     * @param string        $val\n     * @param string        $backAttr\n     * @param string        $className\n     *\n     * @return Base|null\n     */\n    private function GetSomeThingByAlias($object, $val, $backAttr = null, $className = null)\n    {\n        $ret = $this->GetSomeThing($object, 'Alias', $val);\n\n        if (!is_null($ret)) {\n            return $ret;\n        } else {\n            if (is_null($backAttr)) {\n                $backAttr = $this->option['ZC_ALIAS_BACK_ATTR'];\n            }\n\n            return $this->GetSomeThing($object, $backAttr, $val, $className);\n        }\n    }\n\n    /**\n     * \u6839\u636eID\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[]     &$object   \u7f13\u5b58\u5bf9\u8c61\n     * @param string     $className \u627e\u4e0d\u5230ID\u65f6\u521d\u59cb\u5316\u5bf9\u8c61\u7684\u7c7b\u540d\n     * @param int|string $id        \u4e0e\u6b64\u7c7b\u76f8\u5173\u7684ID\n     *\n     * @return Base|null\n     */\n    private function GetSomeThingById(&$object, $className, $id)\n    {\n        if ($id == 0) {\n            return;\n        }\n        if ($object != null) {\n            //$modules\u975eID\u4e3akey\n            if ($className == \"Module\") {\n                if ($id > 0) {\n                    foreach ($object as $key => $value) {\n                        if ($value->ID == $id) {\n                            return $value;\n                        }\n                    }\n                }\n                $m = new Module();\n\n                return $m;\n            }\n\n            if (isset($object[$id])) {\n                return $object[$id];\n            } elseif ($className == \"Post\" || $className == \"Comment\" || $className == \"Tag\") {\n                // \u6587\u7ae0\u9700\u8981\u8bfb\u53d6\uff0c\u5176\u4ed6\u7684\u76f4\u63a5\u8fd4\u56de\u7a7a\u5bf9\u8c61\u5373\u53ef\n                /** @var Base $p */\n                $p = new $className();\n                $p->LoadInfoByID($id);\n                $object[$id] = $p;\n\n                return $p;\n            } else {\n                return $this->GetSomeThingByAttr($object, 'ID', $id);\n            }\n        } else {\n            /** @var Base $p */\n            $p = new $className();\n            $p->LoadInfoByID($id);\n\n            return $p;\n        }\n    }\n\n    /**\n     * \u6839\u636e\u5c5e\u6027\u503c\u5f97\u5230\u76f8\u5e94\u6570\u636e.\n     *\n     * @param Base[] &$object \u7f13\u5b58\u5bf9\u8c61\n     * @param string $attr    \u5c5e\u6027\u540d\n     * @param mixed  $val     \u8981\u67e5\u627e\u7684\u503c\n     *\n     * @return null\n     */\n    private function GetSomeThingByAttr(&$object, $attr, $val)\n    {\n        $val = trim($val);\n        foreach ($object as $key => &$value) {\n            if (is_null($value)) {\n                continue;\n            }\n            if ($value->$attr == $val) {\n                return $value;\n            }\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u6570\u636e\u901a\u7528\u51fd\u6570.\n     *\n     * @param Base[]|string $object    \u7f13\u5b58\u5bf9\u8c61\uff08string / object\uff09\n     * @param string        $attr      \u6b32\u67e5\u627e\u7684\u5c5e\u6027\n     * @param mixed         $val       \u8981\u67e5\u627e\u5185\u5bb9\n     * @param string        $className \u5bf9\u8c61\u672a\u627e\u5230\u65f6\uff0c\u521d\u59cb\u5316\u7c7b\u540d\n     *\n     * @return Base|null\n     */\n    public function GetSomeThing($object, $attr, $val, $className = null)\n    {\n        $cacheObject = null;\n        if (is_object($object)) {\n            $cacheObject = $object;\n        } elseif ($object != \"\") {\n            $cacheObject = &$this->$object;\n        }\n        if ($attr == \"ID\") {\n            $ret = $this->GetSomeThingById($cacheObject, $className, $val);\n        } else {\n            $ret = $this->GetSomeThingByAttr($cacheObject, $attr, $val);\n        }\n        if ($ret === null && !is_null($className)) {\n            /** @var Base $ret */\n            $ret = new $className();\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u6587\u7ae0\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Post|Base\n     */\n    public function GetPostByID($id)\n    {\n        return $this->GetSomeThing('posts', 'ID', $id, 'Post');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByID($id)\n    {\n        return $this->GetSomeThing('categories', 'ID', $id, 'Category');\n    }\n\n    /**\n     * \u901a\u8fc7\u5206\u7c7b\u540d\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param string $name\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByName($name)\n    {\n        return $this->GetSomeThing('categories', 'Name', $name, 'Category');\n    }\n\n    /**\n     * \u901a\u8fc7\u5206\u7c7b\u522b\u540d\u83b7\u53d6\u5206\u7c7b\u5b9e\u4f8b.\n     *\n     * @param string $name\n     * @param null   $backKey\n     *\n     * @return Category|Base\n     */\n    public function GetCategoryByAlias($name, $backKey = null)\n    {\n        return $this->GetSomeThingByAlias('categories', $name, $backKey, 'Category');\n    }\n\n    /**\n     * \u4e0e\u8001\u7248\u672c\u4fdd\u6301\u517c\u5bb9\u51fd\u6570.\n     *\n     * @param string $name\n     *\n     * @return Category\n     */\n    public function GetCategoryByAliasOrName($name)\n    {\n        return $this->GetCategoryByAlias($name, 'Name');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u6a21\u5757\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Module|Base\n     */\n    public function GetModuleByID($id)\n    {\n        return $this->GetSomeThing('modules', 'ID', $id, 'Module'); // What the fuck?\n    }\n\n    /**\n     * \u901a\u8fc7FileName\u83b7\u53d6\u6a21\u5757\u5b9e\u4f8b.\n     *\n     * @param string $fn\n     *\n     * @return Module|Base\n     */\n    public function GetModuleByFileName($fn)\n    {\n        return $this->GetSomeThing('modulesbyfilename', 'FileName', $fn, 'Module');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByID($id)\n    {\n        /** @var Member $ret */\n        $ret = $this->GetSomeThing('members', 'ID', $id, 'Member');\n        if ($ret->ID == null) {\n            $ret->Guid = GetGuid();\n            //\u5982\u679c\u662f\u90e8\u4efd\u52a0\u8f7d\u7528\u6237\n            if ($this->loadmembers_level != 0) {\n                if ($ret->LoadInfoByID($id) == true) {\n                    $this->members[$ret->ID] = $ret;\n                    $this->membersbyname[$ret->Name] = &$this->members[$ret->ID];\n                }\n            }\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7\u7528\u6237\u540d\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $name\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByName($name)\n    {\n        $name = trim($name);\n        if (!$name || !CheckRegExp($name, '[username]')) {\n            return new Member();\n        }\n\n        if (isset($this->membersbyname[$name])) {\n            return $this->membersbyname[$name];\n        } else {\n            $array = array_keys($this->membersbyname);\n            foreach ($array as $k => $v) {\n                if (strcasecmp($name, $v) == 0) {\n                    return $this->membersbyname[$v];\n                }\n            }\n        }\n\n        $like = ($this->db->type == 'pgsql') ? 'ILIKE' : 'LIKE';\n        $sql = $this->db->sql->Select($this->table['Member'], '*', array(array($like, 'mem_Name', $name)), array('mem_ID' => 'ASC'), 1, null);\n\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u901a\u8fc7\u83b7\u53d6\u7528\u6237\u540d\u6216\u522b\u540d\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $name\n     *\n     * @return Member|Base\n     */\n    public function GetMemberByNameOrAlias($name)\n    {\n        $name = trim($name);\n        if (!$name || !(CheckRegExp($name, '[username]') || CheckRegExp($name, '[nickname]'))) {\n            return new Member();\n        }\n\n        foreach ($this->members as $key => &$value) {\n            if (strcasecmp($value->Name, $name) == 0 || strcasecmp($value->Alias, $name) == 0) {\n                return $value;\n            }\n        }\n\n        $like = ($this->db->type == 'pgsql') ? 'ILIKE' : 'LIKE';\n\n        $sql = $this->db->sql->get()->select($this->table['Member'])->where(\n            array(\n                \"$like array\", array(\n                    array('mem_Name', $name),\n                    array('mem_Alias', $name),\n                )\n            )\n        )->limit(1)->sql;\n\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u901a\u8fc7\u90ae\u7bb1\u540d\u83b7\u53d6\u7528\u6237\u5b9e\u4f8b(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param string $email\n     *\n     * @return Member\n     */\n    public function GetMemberByEmail($email)\n    {\n        $email = strtolower(trim($email));\n        if (!$email || !CheckRegExp($email, '[email]')) {\n            return new Member();\n        }\n\n        $sql = $this->db->sql->Select($this->table['Member'], '*', array(array('LIKE', 'mem_Email', $email)), null, 1, null);\n        /** @var Member[] $am */\n        $am = $this->GetListType('Member', $sql);\n        if (count($am) > 0) {\n            $m = $am[0];\n            if (!isset($this->members[$m->ID])) {\n                $this->members[$m->ID] = $m;\n            }\n            if (!isset($this->membersbyname[$m->Name])) {\n                $this->membersbyname[$m->Name] = &$this->members[$m->ID];\n            }\n\n            return $m;\n        }\n\n        return new Member();\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u540d\u79f0\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $name\n     *\n     * @return bool\n     */\n    public function CheckMemberNameExist($name)\n    {\n        $m = $this->GetMemberByName($name);\n\n        return $m->ID != null;\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u540d\u79f0\u6216\u522b\u540d\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $name\n     *\n     * @return bool\n     */\n    public function CheckMemberByNameOrAliasExist($name)\n    {\n        $m = $this->GetMemberByNameOrAlias($name);\n\n        return $m->ID > 0;\n    }\n\n    /**\n     * \u68c0\u67e5\u6307\u5b9a\u90ae\u7bb1\u7684\u7528\u6237\u662f\u5426\u5b58\u5728(\u4e0d\u533a\u5206\u5927\u5c0f\u5199).\n     *\n     * @param $email\n     *\n     * @return bool\n     */\n    public function CheckMemberByEmailExist($email)\n    {\n        $m = $this->GetMemberByEmail($email);\n\n        return $m->ID > 0;\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u8bc4\u8bba\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Comment|Base\n     */\n    public function GetCommentByID($id)\n    {\n        return $this->GetSomeThing('comments', 'ID', $id, 'Comment');\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6\u9644\u4ef6\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Upload|Base\n     */\n    public function GetUploadByID($id)\n    {\n        return $this->GetSomeThing('', 'ID', $id, 'Upload');\n    }\n\n    /**\n     * \u901a\u8fc7tag\u540d\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param string $name\n     * @param null   $backKey\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByAlias($name, $backKey = null)\n    {\n        $ret = $this->GetSomeThingByAlias('tags', $name, $backKey, 'Tag');\n        if ($ret->ID >= 0) {\n            $this->tagsbyname[$ret->ID] = &$this->tags[$ret->ID];\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7tag\u540d\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param string $name\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByAliasOrName($name)\n    {\n        //return $this->GetTagByAlias($name, 'Name');\n        $a = array();\n        $a[] = array('tag_Alias', $name);\n        $a[] = array('tag_Name', $name);\n        $array = $this->GetTagList('*', array(array('array', $a)), '', 1, '');\n        if (count($array) == 0) {\n            return new Tag();\n        } else {\n            $this->tags[$array[0]->ID] = $array[0];\n            $this->tagsbyname[$array[0]->ID] = &$this->tags[$array[0]->ID];\n\n            return $this->tags[$array[0]->ID];\n        }\n    }\n\n    /**\n     * \u901a\u8fc7ID\u83b7\u53d6tag\u5b9e\u4f8b.\n     *\n     * @param int $id\n     *\n     * @return Tag|Base\n     */\n    public function GetTagByID($id)\n    {\n        $ret = $this->GetSomeThing('tags', 'ID', $id, 'Tag');\n        if ($ret->ID > 0) {\n            $this->tagsbyname[$ret->ID] = &$this->tags[$ret->ID];\n        }\n\n        return $ret;\n    }\n\n    /**\n     * \u901a\u8fc7\u7c7b\u4f3c'{1}{2}{3}{4}'\u8f7d\u5165tags.\n     *\n     * @param $s\n     *\n     * @return array\n     */\n    public function LoadTagsByIDString($s)\n    {\n        $s = trim($s);\n        if ($s === '') {\n            return array();\n        }\n\n        $s = str_replace('}{', '|', $s);\n        $s = str_replace('{', '', $s);\n        $s = str_replace('}', '', $s);\n        $a = explode('|', $s);\n        $b = array();\n        foreach ($a as &$value) {\n            $value = trim($value);\n            if ($value) {\n                $b[] = $value;\n            }\n        }\n        $t = array_unique($b);\n\n        if (count($t) === 0) {\n            return array();\n        }\n\n        $a = array();\n        $b = array();\n        $c = array();\n        foreach ($t as $v) {\n            if (!isset($this->tags[$v])) {\n                $a[] = array('tag_ID', $v);\n                $c[] = $v;\n            } else {\n                $b[$v] = &$this->tags[$v];\n            }\n        }\n\n        if (count($a) === 0) {\n            return $b;\n        } else {\n            $t = array();\n            //$array=$this->GetTagList('',array(array('array',$a)),'','','');\n            $array = $this->GetTagList('', array(array('IN', 'tag_ID', $c)), '', '', '');\n            foreach ($array as $v) {\n                $this->tags[$v->ID] = $v;\n                $this->tagsbyname[$v->Name] = &$this->tags[$v->ID];\n                $t[$v->ID] = &$this->tags[$v->ID];\n            }\n\n            return array_merge($b, $t);\n        }\n    }\n\n    /**\n     * \u901a\u8fc7\u7c7b\u4f3c'aaa,bbb,ccc,ddd'\u8f7d\u5165tags.\n     *\n     * @param string $s \u6807\u7b7e\u540d\u5b57\u7b26\u4e32\uff0c\u5982'aaa,bbb,ccc,ddd\n     *\n     * @return array\n     */\n    public function LoadTagsByNameString($s)\n    {\n        $s = trim($s);\n        $s = str_replace(';', ',', $s);\n        $s = str_replace('\uff0c', ',', $s);\n        $s = str_replace('\u3001', ',', $s);\n        $s = trim($s);\n        $s = strip_tags($s);\n        if ($s === '' || $s === ',') {\n            return array();\n        }\n\n        $a = explode(',', $s);\n        $t = array_unique($a);\n\n        if (count($t) === 0) {\n            return array();\n        }\n\n        $a = array();\n        $b = array();\n        foreach ($t as $value) {\n            $v = trim($value);\n            if (isset($this->tagsbyname[$v]) == false) {\n                $a[] = array('tag_Name', $v);\n            } else {\n                $b[$v] = &$this->tagsbyname[$v];\n            }\n        }\n\n        if (count($a) === 0) {\n            return $b;\n        } else {\n            $t = array();\n            $array = $this->GetTagList('', array(array('array', $a)), '', '', '');\n            foreach ($array as $v) {\n                $this->tags[$v->ID] = $v;\n                $this->tagsbyname[$v->Name] = &$this->tags[$v->ID];\n                $t[$v->Name] = &$this->tags[$v->ID];\n            }\n\n            return array_merge($b, $t);\n        }\n    }\n\n    /**\n     * \u901a\u8fc7\u6570\u7ec4array[111,333,444,555,666]\u8f6c\u6362\u6210\u5b58\u50a8\u4e32.\n     *\n     * @param array $array \u6807\u7b7eID\u6570\u7ec4\n     *\n     * @return string\n     */\n    public function ConvertTagIDtoString($array)\n    {\n        $s = '';\n        foreach ($array as $a) {\n            $s .= '{' . $a . '}';\n        }\n\n        return $s;\n    }\n\n    public function GetTopArticle($type = 0)\n    {\n        return $this->GetTopPost($type);\n    }\n\n    /**\n     * \u83b7\u53d6\u5168\u90e8\u7f6e\u9876\u6587\u7ae0\uff08\u4f18\u5148\u4ececache\u91cc\u8bfb\u6570\u7ec4\uff09.\n     *\n     * @param int $type\n     *\n     * @return array\n     */\n    public function GetTopPost($type = 0)\n    {\n        $varname = 'top_post_array_' . $type;\n        if ($this->cache->HasKey($varname) == false) {\n            return array();\n        }\n\n        $articles_top_notorder_idarray = unserialize($this->cache->$varname);\n        if (!is_array($articles_top_notorder_idarray)) {\n            CountTopPost($type, null, null);\n            $articles_top_notorder_idarray = unserialize($this->cache->$varname);\n        }\n        $articles_top_notorder = $this->GetPostByArray($articles_top_notorder_idarray);\n\n        return $articles_top_notorder;\n    }\n\n    //###############################################################################################################\n    //\u9a8c\u8bc1\u76f8\u5173\n\n    /**\n     * \u83b7\u53d6\u8bc4\u8bbakey.\n     *\n     * @param $id\n     *\n     * @return string\n     */\n    public function GetCmtKey($id)\n    {\n        return md5($this->guid . $id . date('Ymdh'));\n    }\n\n    /**\n     * \u9a8c\u8bc1\u8bc4\u8bbakey.\n     *\n     * @param $id\n     * @param $key\n     *\n     * @return bool\n     */\n    public function ValidCmtKey($id, $key)\n    {\n        $nowkey = md5($this->guid . $id . date('Ymdh'));\n        $nowkey2 = md5($this->guid . $id . date('Ymdh', (time() - (3600 * 1))));\n\n        return $key == $nowkey || $key == $nowkey2;\n    }\n\n    /**\n     * \u83b7\u53d6CSRF Token.\n     *\n     * @param string $id \u5e94\u7528ID\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5e94\u7528\u83b7\u53d6\u4e0d\u540c\u7684Token\n     *\n     * @return string\n     */\n    public function GetCSRFToken($id = '')\n    {\n        $s = $this->user->ID . $this->user->Password . $this->user->Status;\n\n        return md5($this->guid . $s . $id . date('Ymdh'));\n    }\n\n    /**\n     * \u9a8c\u8bc1CSRF Token.\n     *\n     * @param string $token\n     * @param string $id    \u5e94\u7528ID\uff0c\u53ef\u4e3a\u6bcf\u4e2a\u5e94\u7528\u751f\u6210\u4e00\u4e2a\u4e13\u5c5etoken\n     *\n     * @return bool\n     */\n    public function VerifyCSRFToken($token, $id = '')\n    {\n        $userString = $this->user->ID . $this->user->Password . $this->user->Status;\n        $tokenString = $this->guid . $userString . $id;\n\n        for ($i = 0; $i <= $this->csrfExpiration; $i++) {\n            if ($token === md5($tokenString . date('Ymdh', (time() - (3600 * $i))))) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u663e\u793a\u9a8c\u8bc1\u7801\n     *\n     * @api Filter_Plugin_Zbp_ShowValidCode \u5982\u8be5\u63a5\u53e3\u672a\u88ab\u6302\u8f7d\u5219\u663e\u793a\u9ed8\u8ba4\u9a8c\u8bc1\u56fe\u7247\n     *\n     * @param string $id \u547d\u540d\u4e8b\u4ef6\n     *\n     * @return bool\n     */\n    public function ShowValidCode($id = '')\n    {\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_ShowValidCode'] as $fpname => &$fpsignal) {\n            return $fpname($id); //*\n        }\n\n        $_vc = new ValidateCode();\n        $_vc->GetImg();\n        setcookie('captcha_' . crc32($this->guid . $id), md5($this->guid . date(\"Ymdh\") . $_vc->GetCode()), null, $this->cookiespath);\n\n        return true;\n    }\n\n    /**\n     * \u6bd4\u5bf9\u9a8c\u8bc1\u7801\n     *\n     * @api Filter_Plugin_Zbp_CheckValidCode \u5982\u8be5\u63a5\u53e3\u672a\u88ab\u6302\u8f7d\u5219\u6bd4\u5bf9\u9ed8\u8ba4\u9a8c\u8bc1\u7801\n     *\n     * @param string $verifyCode \u9a8c\u8bc1\u7801\u6570\u503c\n     * @param string $id         \u547d\u540d\u4e8b\u4ef6\n     *\n     * @return bool\n     */\n    public function CheckValidCode($verifyCode, $id = '')\n    {\n        $verifyCode = strtolower($verifyCode);\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_CheckValidCode'] as $fpname => &$fpsignal) {\n            return $fpname($verifyCode, $id); //*\n        }\n\n        $original = GetVars('captcha_' . crc32($this->guid . $id), 'COOKIE');\n        setcookie('captcha_' . crc32($this->guid . $id), '', (time() - 3600), $this->cookiespath);\n\n        return md5($this->guid . date(\"Ymdh\") . strtolower($verifyCode)) == $original\n            ||\n            md5($this->guid . date(\"Ymdh\", (time() - (3600 * 1))) . strtolower($verifyCode)) == $original;\n    }\n\n    /**\n     * \u5411\u5bfc\u822a\u83dc\u5355\u6dfb\u52a0\u76f8\u5e94\u6761\u76ee.\n     *\n     * @param string $type $type=category,tag,page,item\n     * @param string $id\n     * @param string $name\n     * @param string $url\n     */\n    public function AddItemToNavbar($type, $id, $name, $url)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        $a = '<li id=\"navbar-' . $type . '-' . $id . '\"><a href=\"' . $url . '\">' . $name . '</a></li>';\n\n        if ($this->CheckItemToNavbar($type, $id)) {\n            $s = preg_replace('/<li id=\"navbar-' . $type . '-' . $id . '\">.*?<\\/li>/', $a, $s);\n        } else {\n            $s .= '<li id=\"navbar-' . $type . '-' . $id . '\"><a href=\"' . $url . '\">' . $name . '</a></li>';\n        }\n\n        $m->Content = $s;\n        $m->Save();\n    }\n\n    /**\n     * \u5220\u9664\u5bfc\u822a\u83dc\u5355\u4e2d\u76f8\u5e94\u6761\u76ee.\n     *\n     * @param string $type\n     * @param $id\n     */\n    public function DelItemToNavbar($type, $id)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        $s = preg_replace('/<li id=\"navbar-' . $type . '-' . $id . '\">.*?<\\/li>/', '', $s);\n\n        $m->Content = $s;\n        $m->Save();\n    }\n\n    /**\n     * \u68c0\u67e5\u6761\u76ee\u662f\u5426\u5728\u5bfc\u822a\u83dc\u5355\u4e2d.\n     *\n     * @param string $type\n     * @param $id\n     *\n     * @return bool\n     */\n    public function CheckItemToNavbar($type, $id)\n    {\n        if (!$type) {\n            $type = 'item';\n        }\n\n        $m = $this->modulesbyfilename['navbar'];\n        $s = $m->Content;\n\n        return (bool) strpos($s, 'id=\"navbar-' . $type . '-' . $id . '\"');\n    }\n\n    //$signal = good,bad,tips\n    private $hint1 = null;\n\n    private $hint2 = null;\n\n    private $hint3 = null;\n\n    private $hint4 = null;\n\n    private $hint5 = null;\n\n    /**\n     * \u8bbe\u7f6e\u63d0\u793a\u6d88\u606f\u5e76\u5b58\u5165Cookie.\n     *\n     * @param string $signal  \u63d0\u793a\u7c7b\u578b\uff08good|bad|tips\uff09\n     * @param string $content \u63d0\u793a\u5185\u5bb9\n     */\n    public function SetHint($signal, $content = '')\n    {\n        if ($content == '') {\n            if ($signal == 'good') {\n                $content = $this->lang['msg']['operation_succeed'];\n            }\n\n            if ($signal == 'bad') {\n                $content = $this->lang['msg']['operation_failed'];\n            }\n        }\n        $content = substr($content, 0, 255);\n        if ($this->hint1 == null) {\n            $this->hint1 = $signal . '|' . $content;\n            setcookie(\"hint_signal1\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint2 == null) {\n            $this->hint2 = $signal . '|' . $content;\n            setcookie(\"hint_signal2\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint3 == null) {\n            $this->hint3 = $signal . '|' . $content;\n            setcookie(\"hint_signal3\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint4 == null) {\n            $this->hint4 = $signal . '|' . $content;\n            setcookie(\"hint_signal4\", $signal . '|' . $content, 0, $this->cookiespath);\n        } elseif ($this->hint5 == null) {\n            $this->hint5 = $signal . '|' . $content;\n            setcookie(\"hint_signal5\", $signal . '|' . $content, 0, $this->cookiespath);\n        }\n    }\n\n    /**\n     * \u63d0\u53d6Cookie\u4e2d\u7684\u63d0\u793a\u6d88\u606f.\n     */\n    public function GetHint()\n    {\n        for ($i = 1; $i <= 5; $i++) {\n            $signal = 'hint' . $i;\n            $signal = $this->$signal;\n            if ($signal) {\n                $a = explode('|', $signal);\n                $this->ShowHint($a[0], $a[1]);\n                setcookie(\"hint_signal\" . $i, '', (time() - 3600), $this->cookiespath);\n            }\n        }\n        for ($i = 1; $i <= 5; $i++) {\n            $signal = GetVars('hint_signal' . $i, 'COOKIE');\n            if ($signal) {\n                $a = explode('|', $signal);\n                $this->ShowHint($a[0], $a[1]);\n                setcookie(\"hint_signal\" . $i, '', (time() - 3600), $this->cookiespath);\n            }\n        }\n    }\n\n    /**\n     * \u7531\u63d0\u793a\u6d88\u606f\u83b7\u53d6HTML.\n     *\n     * @param string $signal  \u63d0\u793a\u7c7b\u578b\uff08good|bad|tips\uff09\n     * @param string $content \u63d0\u793a\u5185\u5bb9\n     */\n    public function ShowHint($signal, $content = '')\n    {\n        if ($content == '') {\n            if ($signal == 'good') {\n                $content = $this->lang['msg']['operation_succeed'];\n            }\n\n            if ($signal == 'bad') {\n                $content = $this->lang['msg']['operation_failed'];\n            }\n        }\n        echo \"<div class=\\\"hint\\\"><p class=\\\"hint hint_$signal\\\">$content</p></div>\";\n    }\n\n    /**\n     * \u663e\u793a\u9519\u8bef\u4fe1\u606f.\n     *\n     * @api Filter_Plugin_Zbp_ShowError\n     *\n     * @param string/int $errorText\n     * @param null       $file\n     * @param null       $line\n     *\n     * @throws Exception\n     *\n     * @return mixed\n     */\n    public function ShowError($errorText, $file = null, $line = null)\n    {\n        $errorCode = 0;\n        if (is_numeric($errorText)) {\n            $errorCode = (int) $errorText;\n            $errorText = $this->lang['error'][$errorText];\n        }\n\n        if ($errorCode == 2) {\n            Http404();\n        }\n\n        ZBlogException::$error_id = $errorCode;\n        ZBlogException::$error_file = $file;\n        ZBlogException::$error_line = $line;\n\n        if (stripos('{' . sha1('mustshowerror') . '}', $errorText) === 0) {\n            $errorText = str_replace('{' . sha1('mustshowerror') . '}', '', $errorText);\n            $GLOBALS['hooks']['Filter_Plugin_Debug_Display'] = array();\n            $GLOBALS['hooks']['Filter_Plugin_Debug_Handler'] = array();\n\n            throw new Exception($errorText);\n        }\n\n        foreach ($GLOBALS['hooks']['Filter_Plugin_Zbp_ShowError'] as $fpname => &$fpsignal) {\n            $fpreturn = $fpname($errorCode, $errorText, $file, $line);\n            if ($fpsignal == PLUGIN_EXITSIGNAL_RETURN) {\n                $fpsignal = PLUGIN_EXITSIGNAL_NONE;\n\n                return $fpreturn;\n            }\n        }\n\n        throw new Exception($errorText);\n    }\n\n    /**\n     * \u68c0\u6d4b\u7f51\u7ad9\u5173\u95ed\uff0c\u5982\u679c\u5173\u95ed\uff0c\u5219\u629b\u51fa\u9519\u8bef.\n     *\n     * @throws Exception\n     */\n    public function CheckSiteClosed()\n    {\n        if ($this->option['ZC_CLOSE_SITE']) {\n            Http503();\n            $this->ShowError(82, __FILE__, __LINE__);\n            exit;\n        }\n    }\n\n    /**\n     * \u8df3\u8f6c\u5230\u5b89\u88c5\u9875\u9762.\n     */\n    public function RedirectInstall()\n    {\n        if (!$this->option['ZC_DATABASE_TYPE']) {\n            $s = $_SERVER['QUERY_STRING'];\n            $s = empty($s) ? '' : '?' . $s;\n            Redirect('./zb_install/index.php' . $s);\n        }\n    }\n\n    /**\n     * \u68c0\u6d4b\u5f53\u524durl\uff0c\u5982\u679c\u4e0d\u7b26\u5408\u8bbe\u7f6e\u5c31\u8df3\u8f6c\u5230\u56fa\u5b9a\u57df\u540d\u7684\u94fe\u63a5.\n     */\n    public function RedirectPermanentDomain()\n    {\n        $domain_disable = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_WHOLE_DISABLE');\n        if ($domain_disable == true) {\n            return;\n        }\n\n        $forced = GetValueInArray($this->option, 'ZC_PERMANENT_DOMAIN_FORCED_URL');\n        if ($this->option['ZC_PERMANENT_DOMAIN_ENABLE'] == false && $forced == '') {\n            return;\n        }\n\n        $host = str_replace(array('https://', 'http://'), array('', ''), GetCurrentHost(ZBP_PATH, $null));\n        $host2 = str_replace(array('https://', 'http://'), array('', ''), $this->host);\n\n        if ($host != $host2) {\n            $u = GetRequestUri();\n            $u = $this->host . substr($u, 1);\n            Redirect301($u);\n        }\n    }\n\n    /**\n     * \u6ce8\u518cPostType.\n     *\n     * @param $typeId\n     * @param $name\n     * @param string $urlRule      \u9ed8\u8ba4\u662f\u53d6Page\u7c7b\u578b\u7684Url Rule\n     * @param string $template     \u9ed8\u8ba4\u6a21\u677f\u540dpage\n     * @param string $categoryType \u5f53\u524d\u6587\u7ae0\u7c7b\u7684\u5206\u7c7bType\n     * @param string $tagType      \u5f53\u524d\u6587\u7ae0\u7c7b\u7684\u6807\u7b7eType\n     *\n     * @throws Exception\n     */\n    public function RegPostType($typeId, $name, $urlRule = '', $template = 'single', $categoryType = null, $tagType = null)\n    {\n        if ($urlRule == '') {\n            $urlRule = $this->option['ZC_PAGE_REGEX'];\n        }\n\n        $typeId = (int) $typeId;\n        $name = strtolower(trim($name));\n        if ($typeId > 99) {\n            if (isset($this->posttype[$typeId])) {\n                $this->ShowError(87, __FILE__, __LINE__);\n            }\n        }\n        $this->posttype[$typeId] = array($name, $urlRule, $template, $categoryType, $tagType);\n    }\n\n    /**\n     * @param $typeid\n     *\n     * @return string\n     */\n    public function GetPostType_Name($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][0];\n        }\n\n        return '';\n    }\n\n    public function GetPostType_UrlRule($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][1];\n        }\n\n        return $this->option['ZC_PAGE_REGEX'];\n    }\n\n    public function GetPostType_Template($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][2];\n        }\n\n        return 'single';\n    }\n\n    public function GetPostType_CategoryType($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][3];\n        }\n    }\n\n    public function GetPostType_TagType($typeid)\n    {\n        if (isset($this->posttype[$typeid])) {\n            return $this->posttype[$typeid][4];\n        }\n    }\n\n    /**\n     * \u6ce8\u518cAction.\n     *\n     * @param $name\n     * @param $level\n     * @param $title\n     */\n    public function RegAction($name, $level, $title)\n    {\n        $this->actions[$name] = $level;\n        $this->lang['actions'][$name] = $title;\n    }\n\n    /**\n     * \u83b7\u5f97Action\u6743\u9650\u6ce8\u91ca.\n     *\n     * @param $name\n     *\n     * @return mixed\n     */\n    public function GetActionDescription($name)\n    {\n        if (isset($this->lang['actions'][$name])) {\n            return $this->lang['actions'][$name];\n        }\n\n        return $name;\n    }\n\n    //\u4e3e\u4f8b\uff1abackend-ui,,,\n    protected $protect_exclusive = array();\n\n    /**\n     * \u901a\u77e5\u7cfb\u7edf\u63a7\u5236\u6743.\n     */\n    public function SetExclusive($function, $appid)\n    {\n        if ($appid == false) {\n            return false;\n        }\n        $this->protect_exclusive[$function] = $appid;\n\n        return true;\n    }\n\n    /**\n     * \u67e5\u8be2\u7cfb\u7edf\u63a7\u5236\u6743.\n     */\n    public function IsExclusive($function)\n    {\n        if (isset($this->protect_exclusive[$function])) {\n            return $this->protect_exclusive[$function];\n        }\n\n        return false;\n    }\n\n    /**\n     * \u4ee5\u4e0b\u90e8\u5206\u4e3a\u5df2\u5e9f\u5f03\uff0c\u4f46\u8003\u8651\u5230\u517c\u5bb9\u6027\u4fdd\u7559\u7684\u4ee3\u7801**************************************************************.\n     */\n\n    /**\n     * \u68c0\u67e5\u5e76\u5f00\u542fGzip\u538b\u7f29.\n     */\n    public function CheckGzip()\n    {\n    }\n\n    /**\n     * \u542f\u7528Gzip.\n     */\n    public function StartGzip()\n    {\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7528\u6237\u767b\u5f55\uff08MD5\u52a0zbp->guid\u76d0\u540e\u7684\u5bc6\u7801\uff09.\n     *\n     * @deprecated\n     *\n     * @param string $name         \u7528\u6237\u540d\n     * @param string $ps_path_hash MD5\u52a0zbp->guid\u76d0\u540e\u7684\u5bc6\u7801\n     * @param object $member       \u8fd4\u56de\u8bfb\u53d6\u6210\u529f\u7684member\u5bf9\u8c61\n     *\n     * @return bool\n     */\n    public function Verify_MD5Path($name, $ps_path_hash, &$member = null)\n    {\n        if ($name == '' || $ps_path_hash == '') {\n            return false;\n        }\n        $m = $this->GetMemberByName($name);\n        if ($m->ID != null) {\n            if ($m->PassWord_MD5Path == $ps_path_hash) {\n                $member = $m;\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * \u83b7\u53d6CSRF Token\u7684\u9519\u8bef\u522b\u540d.\n     *\n     * @deprecated Use ``GetCSRFToken``\n     *\n     * @param string $id \u5e94\u7528ID\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u4e2a\u5e94\u7528\u83b7\u53d6\u4e0d\u540c\u7684Token\n     *\n     * @return string\n     */\n    public function GetToken($id = '')\n    {\n        return $this->GetCSRFToken($id);\n    }\n\n    /**\n     * \u9a8c\u8bc1CSRF Token\u7684\u9519\u8bef\u522b\u540d.\n     *\n     * @deprecated Use ``VerifyCSRFToken``\n     *\n     * @param $t\n     * @param $id\n     *\n     * @return bool\n     */\n    public function ValidToken($t, $id = '')\n    {\n        return $this->VerifyCSRFToken($t, $id);\n    }\n\n    /**\n     * @deprecated\n     *\n     * @return bool\n     */\n    public function LoadCategorys()\n    {\n        return $this->LoadCategories();\n    }\n\n    /**\n     * \u83b7\u53d6\u4f1a\u8bddWebToken.\n     *\n     * @deprecated \u6beb\u65e0\u610f\u4e49\uff0c\u5373\u5c06\u5e9f\u5f03\n     *\n     * @param string $wt_id\n     * @param int    $day   \u9ed8\u8ba41\u5929\u6709\u6548\u671f\uff0c1\u5c0f\u65f6\u4e3a1/24\uff0c1\u5206\u949f\u4e3a1/(24*60)\n     *\n     * @return string\n     */\n    public function GetWebToken($wt_id = '', $day = 1)\n    {\n        $t = (intval($day * 24 * 3600) + time());\n\n        return CreateWebToken($wt_id, $t, $this->guid, $this->user->Status, $this->user->ID, $this->user->Password);\n    }\n\n    /**\n     * \u9a8c\u8bc1\u4f1a\u8bddWebToken.\n     *\n     * @deprecated \u6beb\u65e0\u610f\u4e49\uff0c\u5373\u5c06\u5e9f\u5f03\n     *\n     * @param $wt\n     * @param $wt_id\n     *\n     * @return bool\n     */\n    public function ValidWebToken($wt, $wt_id = '')\n    {\n        if (VerifyWebToken($wt, $wt_id, $this->guid, $this->user->Status, $this->user->ID, $this->user->Password) === true) {\n            return true;\n        }\n\n        return false;\n    }\n\n}\n", "<?php\n\n//\u6ce8\u518c\u63d2\u4ef6\nRegisterPlugin(\"passwordvisit\", \"ActivePlugin_passwordvisit\");\n\nfunction ActivePlugin_passwordvisit()\n{\n    Add_Filter_Plugin('Filter_Plugin_Edit_Response3', 'passwordvisit_show_encrypt_button');\n    Add_Filter_Plugin('Filter_Plugin_PostArticle_Core', 'passwordvisit_save_postpassword');\n    Add_Filter_Plugin('Filter_Plugin_ViewList_Template', 'passwordvisit_list_password');\n    Add_Filter_Plugin('Filter_Plugin_ViewPost_Template', 'passwordvisit_input_password');\n}\n\nfunction passwordvisit_list_password($template)\n{\n    global $zbp;\n    $articles = $template->GetTags('articles');\n    foreach ($articles as $key => $article) {\n        if ($zbp->Config('passwordvisit')->all_encrypt || $article->Metas->passwordvisit_enable_encrypt) {\n            $article->Intro = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\" action=\"' . $article->Url . '\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n            $article->Content = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\" action=\"' . $article->Url . '\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n        }\n    }\n\n    $template->SetTags('articles', $articles);\n}\n\nfunction passwordvisit_input_password(&$template)\n{\n    global $zbp;\n    if (isset($_POST['password']) && $_POST['password'] != '') {\n        $article = $template->GetTags('article');\n        if ($article->Metas->passwordvisit_password != '') {\n            if (GetVars('password', 'POST') === $article->Metas->passwordvisit_password) {\n                return;\n            } else {\n                echo '<script type=\"text/javascript\">alert(\"\u5bc6\u7801\u9519\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");window.location=\"' . $article->Url . '\";</script>';\n                die();\n            }\n        } else {\n            if (GetVars('password', 'POST') == $zbp->Config('passwordvisit')->default_password) {\n                return;\n            } else {\n                echo '<script type=\"text/javascript\">alert(\"\u5bc6\u7801\u9519\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");window.location=\"' . $article->Url . '\";</script>';\n                die();\n            }\n        }\n    } else {\n        $article = $template->GetTags('article');\n        if ($zbp->Config('passwordvisit')->all_encrypt || $article->Metas->passwordvisit_enable_encrypt) {\n            $article->Content = $zbp->Config('passwordvisit')->default_text . '<form id=\"form1\" name=\"form1\" method=\"post\"><input name=\"password\" type=\"password\" width=\"100px\" /><input name=\"submit\" type=\"submit\" value=\"\u67e5\u770b\"/></form>';\n            $template->SetTags('article', $article);\n        }\n    }\n}\n\nfunction passwordvisit_save_postpassword(&$article)\n{\n    $article->Metas->passwordvisit_enable_encrypt = $_POST['enable_encrypt'];\n    $article->Metas->passwordvisit_password = $_POST['password'];\n}\n\nfunction passwordvisit_show_encrypt_button()\n{\n    if ($_GET['act'] == 'PageEdt') {\n        return;\n    } //\u53bb\u6389\u9875\u9762\n\n    if (isset($_GET['id']) && $_GET['id'] != '') {\n        global $zbp,$article;\n        echo '<br>\u52a0\u5bc6\u6587\u7ae0<input id=\"enable_encrypt\" name=\"enable_encrypt\" style=\"display:none;\" type=\"text\" value=\"' . $article->Metas->passwordvisit_enable_encrypt . '\" class=\"checkbox\">';\n        echo '<p><label for=\"edtDateTime\" class=\"editinputname\">\u5bc6\u7801</label><input type=\"text\" name=\"password\" value=\"' . $article->Metas->passwordvisit_password . '\" style=\"width:110px;\" ><br>\u4e0d\u8f93\u4eba\u5bc6\u7801\u5219\u4f7f\u7528\u5168\u5c40\u5bc6\u7801</p>';\n    } else {\n        echo '<br>\u52a0\u5bc6\u6587\u7ae0<input id=\"enable_encrypt\" name=\"enable_encrypt\" style=\"display:none;\" type=\"text\" value=\"0\" class=\"checkbox\">';\n        echo '<p><label for=\"edtDateTime\" class=\"editinputname\">\u5bc6\u7801</label><input type=\"text\" name=\"password\" value=\"\" style=\"width:110px;\" ><br>\u4e0d\u8f93\u4eba\u5bc6\u7801\u5219\u4f7f\u7528\u5168\u5c40\u5bc6\u7801</p>';\n    }\n}\n\nfunction InstallPlugin_passwordvisit()\n{\n    global $zbp;\n    if (!$zbp->Config('passwordvisit')->HasKey('Version')) {\n        $zbp->Config('passwordvisit')->Version = '1.0';\n        $zbp->Config('passwordvisit')->default_password = 'imzhou';\n        $zbp->Config('passwordvisit')->default_text = '<p>\u672c\u7bc7\u6587\u7ae0\u5df2\u52a0\u5bc6\uff0c\u8bf7\u8f93\u5165\u5bc6\u7801\u540e\u67e5\u770b\u3002</p>';\n        $zbp->Config('passwordvisit')->all_encrypt = '0';\n        $zbp->SaveConfig('passwordvisit');\n    }\n    $zbp->SaveConfig('passwordvisit');\n}\nfunction UninstallPlugin_passwordvisit()\n{\n}\n"], "filenames": ["phpcs.xml", "zb_system/function/c_system_common.php", "zb_system/function/c_system_compat.php", "zb_system/function/lib/zblogphp.php", "zb_users/plugin/passwordvisit/include.php"], "buggy_code_start_loc": [44, 1221, 449, 1319, 34], "buggy_code_end_loc": [44, 1257, 453, 1320, 35], "fixing_code_start_loc": [45, 1221, 448, 1319, 34], "fixing_code_end_loc": [46, 1237, 503, 1320, 35], "type": "NVD-CWE-Other", "message": "Z-BlogPHP 1.6.0 Valyria is affected by incorrect access control. PHP loose comparison and a magic hash can be used to bypass authentication. zb_user/plugin/passwordvisit/include.php:passwordvisit_input_password() uses loose comparison to authenticate, which can be bypassed via magic hash values.", "other": {"cve": {"id": "CVE-2020-23352", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-27T16:15:12.717", "lastModified": "2021-02-04T14:56:44.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Z-BlogPHP 1.6.0 Valyria is affected by incorrect access control. PHP loose comparison and a magic hash can be used to bypass authentication. zb_user/plugin/passwordvisit/include.php:passwordvisit_input_password() uses loose comparison to authenticate, which can be bypassed via magic hash values."}, {"lang": "es", "value": "Z-BlogPHP versi\u00f3n 1.6.0, Valyria est\u00e1 afectado por un control de acceso incorrecto. Una comparaci\u00f3n imprecisa de PHP y un hash m\u00e1gico puede ser usado para omitir una autenticaci\u00f3n.&#xa0;zb_user/plugin/passwordvisit/include.php:passwordvisit_input_password() usa una comparaci\u00f3n imprecisa para autenticarse, que puede ser omitida por medio de valores de hash m\u00e1gicos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zblogcn:z-blogphp:1.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "8CDB4E88-4BF6-439E-9410-9208A307B9F3"}]}]}], "references": [{"url": "https://github.com/zblogcn/zblogphp/commit/a67607fc984f976d6b36b8870dffaabd9d6c9d5e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/zblogcn/zblogphp/commit/a67607fc984f976d6b36b8870dffaabd9d6c9d5e"}}