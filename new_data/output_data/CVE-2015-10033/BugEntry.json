{"buggy_code": ["MerlinsBoard.Collections.Grades = Backbone.Collection.extend({\n  initialize: function (options) {\n    // this.owner = options[\"owner\"];\n    this.course_id = options[\"course_id\"]\n    this.url = \"api/users/\" + options[\"user_id\"] + \"/grades\"\n  },\n\n  model: MerlinsBoard.Models.Grade,\n\n  getOrFetch: function (id) {\n    var grade = this.get(id);\n    var grades = this;\n\n    if (!grade) {\n      grade = new MerlinsBoard.Models.Grade({id: id});\n      grade.fetch({ success: function () {\n        this.add(grade);\n      }\n      })\n    } else {\n      grade.fetch();\n    }\n\n    return grade\n  },\n\n  fetch: function(options) {\n    if (!options) {\n      options = {};\n    }\n\n    //some logic here to check if \"data\" was already passed in, and fusing that to the data parameter...\n\n    _.extend(options,{ data: $.param({ course_id: this.course_id}) }); //options is changed\n    //with this, I might always have to bind fetch - be mindful of this in case I need to fetch more data\n    return Backbone.Collection.prototype.fetch.call(this, options);\n  },\n\n  parse: function (resp) {\n    this.student = new MerlinsBoard.Models.User({fname: resp.student_fname,lname: resp.student_lname});\n\n    resp.student_fname.delete //is there a better way to clean this up?\n    resp.student_fname.delete\n    return resp.grades\n  }\n\n})\n", "MerlinsBoard.Models.Grade = Backbone.Model.extend({\n  urlRoot: 'api/grades',\n  validate: function () {}\n})", "MerlinsBoard.Routers.Router = Backbone.Router.extend({\n  initialize: function (options) {\n    this.$rootEl = options[\"rootEl\"];\n    this.$sideNav = options[\"sideNav\"];\n    this.$tabNav = options[\"tabNav\"];\n    this.currentUser = MerlinsBoard.CurrentUser\n\n    var courseTabs = new MerlinsBoard.Views.CourseTabs({collection: this.currentUser.courses()})\n    var courseDetails = new MerlinsBoard.Views.CourseDetails();\n\n    this.currentUser.fetch();\n\n    this.$tabNav.html(courseTabs.$el)\n    this.$sideNav.html(courseDetails.$el)\n  },\n\n\troutes: {\n    //course resources\n    \"course/search\" : \"enrollcourses\",\n    \"course/:id/enroll\" : \"showcourse\",\n    \"course/new\": \"newcourse\",\n    \"course/:id/edit\": \"editcourse\",\n    \"course/taught\": \"taughtcourses\",\n    //announcement resources\n    \"\" : \"homeAnnouncements\",\n    \"course/:id/announcements/new\": \"newAnnouncement\",\n    \"course/:course_id/announcements/:id/edit\":\"editAnnouncement\",\n    \"course/:id/announcements\" : \"courseAnnouncements\", //shows announcements for course + navView\n    //assignment resources\n    \"course/:id/assignments/new\" : \"newAssignment\",\n    \"course/:id/assignments\" : \"showAssignments\",\n    \"course/:course_id/assignments/:id/edit\" : \"editAssignment\",\n    //grades\n    \"course/:id/grades/student-search\" : \"gradeSearch\",\n    \"course/:course_id/grades/user/:user_id\" : \"gradesShow\"\n    //misc\n//     \"user/:id\": \"showuser\"\n    //\":wildcard\": \"does not exist\" --self explanatory\n\t},\n\n\n  //course resources\n\tenrollcourses: function () {\n    var allcourses = new MerlinsBoard.Collections.Courses([],{owner: this.currentUser});\n\n    allcourses.fetch();\n\n    var enrollView = new MerlinsBoard.Views.CoursesEnroll({collection: allcourses,model: this.currentUser});\n    this.swapView(enrollView);\n  },\n\n\tshowuser: function () {\n    var userView = new MerlinsBoard.Views.UserShow({model: this.currentUser});\n    this.swapView(userView);\n  },\n\n\tnewcourse: function () {\n    var newcourse = new MerlinsBoard.Models.Course();\n    var courseform = new MerlinsBoard.Views.CourseForm({model: newcourse});\n    this.swapView(courseform);\n  },\n\n\teditcourse: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var courseform = new MerlinsBoard.Views.CourseForm({model: course});\n    this.swapView(courseform);\n  },\n\n\tshowcourse: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id); //here\n    var showCourse = new MerlinsBoard.Views.CoursesShow({model: course});\n    this.swapView(showCourse);\n  },\n\n  taughtcourses: function () {\n    var taughtCourses = this.currentUser.taughtcourses();\n    var taughtCourseView = new MerlinsBoard.Views.CoursesTaught({collection: taughtCourses});\n    this.swapView(taughtCourseView);\n  },\n\n  //announcements\n  homeAnnouncements: function () {\n    this.currentUser.fetch()\n\n    var allAnnouncements = this.currentUser.announcements();\n    var allAnnouncementsView = new MerlinsBoard.Views.announcementHome({collection: allAnnouncements});\n    this.swapView(allAnnouncementsView)\n\n    MerlinsBoard.Vent.trigger(\"homeRender\");\n  },\n\n  courseAnnouncements: function (id) {\n    //course detail nav should be instantiated here + announcements!\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var announcements = course.announcements();\n\n\n    var courseAnnouncements = new MerlinsBoard.Views.announcementList({collection: announcements});\n    this.swapView(courseAnnouncements);\n\n    MerlinsBoard.Vent.trigger(\"courseRender\",{courseID: id}); //for more functionality - it should pass in the reference to the course model instead\n  },\n\n  newAnnouncement: function (id) {\n    var newAnnouncement = new MerlinsBoard.Models.Announcement();\n    var announcementForm = new MerlinsBoard.Views.announcementForm({model: newAnnouncement, course_id: id});\n    this.swapView(announcementForm);\n  },\n\n  editAnnouncement: function (course_id,id) {\n    var announcement = new MerlinsBoard.Models.Announcement({id: id})\n    announcement.fetch()\n\n    var announcementForm = new MerlinsBoard.Views.announcementForm({model: announcement, course_id: course_id});\n    this.swapView(announcementForm);\n  },\n\n  //assignments\n\n  showAssignments: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var assignments = course.assignments();\n\n    var courseAssignments = new MerlinsBoard.Views.assignmentList({collection: assignments});\n    this.swapView(courseAssignments);\n\n    MerlinsBoard.Vent.trigger(\"courseRender\",{courseID: id});\n  },\n\n  newAssignment: function (id) {\n    var newAssignment = new MerlinsBoard.Models.Assignment();\n    var assignmentForm = new MerlinsBoard.Views.assignmentForm({model: newAssignment, course_id: id});\n    this.swapView(assignmentForm);\n  },\n\n  editAssignment: function (course_id,id) {\n    var assignment = new MerlinsBoard.Models.Assignment({id: id});\n    assignment.fetch();\n\n    var assignmentForm = new MerlinsBoard.Views.assignmentForm({model: assignment, course_id: course_id});\n    this.swapView(assignmentForm);\n  },\n\n  //grades\n\n  gradeSearch: function () {\n  //I will have to call the course fetch here to determine privileges\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var users = course.users()\n\n    // var usersList = MerlinsBoard.Views.\n  },\n\n  gradeShow: function (course_id, user_id) {\n    // var course = MerlinsBoard.Courses.getOrFetch(id);\n    var grades = new MerlinsBoard.Collections.Grades({course_id: course_id, user_id: user_id});\n    grades.fetch();\n\n    var gradesList = new MerlinsBoard.Views.GradesStudent({collection: grades});\n    this.swapView(gradesList)\n  },\n\n  // utils\n  resourceNotFound: function () {\n    //this.swapView();\n  },\n\n  swapView: function (newView, navView) {\n    if (!this._currentView) {\n      this._currentView = newView;\n    } else {\n      this._currentView.remove();\n      this._currentView = newView;\n    }\n\n    this.$rootEl.html(newView.render().$el);\n  }\n})\n\n//var course = new MerlinsBoard.Models.Course({id: course_id})\n//course.fetch()\n", "MerlinsBoard.Views.CourseForm = Backbone.View.extend({\n  initialize: function () {\n\n    this.listenTo(this.model,\"sync\",this.render)\n  },\n\n\ttemplate: JST[\"courses/form\"],\n\n\trender: function () {\n\t\tvar renderedContent = this.template({course: this.model})\n    this.$el.html(renderedContent);\n    return this\n\t},\n\n\tevents: {\n\t\t\"submit form.course-form\": \"submitform\"\n\t},\n\n\tsubmitform: function (event) {\n\t\tevent.preventDefault();\n\t\tvar attrs = $(event.target).serializeJSON();\n    debugger\n\t\tthis.model.save(attrs, {\n\t\t\tsuccess: function () {\n\t\t\t\tMerlinsBoard.Courses.add(this.model,{merge: true})\n\t\t\t\tBackbone.history.navigate(\"\",{trigger: true}) //instead do a \"course created/saved\"\n\t\t\t}.bind(this),\n\t\t\terror: function (model,resp) {\n\t\t\t\tvar errorArray = resp.responseJSON;\n        var $errorList = $(\"<ul>\").addClass(\"errors\");\n        _.each(errorArray, function (error) {\n          var $error = $(\"<li>\").text(error).addClass(\"error\");\n          $errorList.append($error);\n        })\n\n        $(\"section.form-errors\").html($errorList);\n\t\t\t}\n\t\t})\n\t}\n\n  //should refactor the above by abstracting with \".bindAll\"..or just abstracting\n})\n", "MerlinsBoard.Views.CoursesList = Backbone.View.extend({\n\tinitialize: function () {\n \t\tthis.listenTo(this.collection, \"add remove sync\", this.render);\n\t},\n\n\n\ttemplate: JST[\"courses/list\"],\n\n\ttagName: \"ul\",\n\n\tclassName: \"course-list\",\n\n\trender: function () {\n\t\tvar renderedContent = this.template({courses: this.collection});\n\t\tthis.$el.html(renderedContent);\n\t\treturn this\n\t}\n\n})\n", "MerlinsBoard.Views.CoursesSearch = Backbone.View.extend({\n\tinitialize: function () {\n\t\tthis.searchCollection = new MerlinsBoard.Collections.CoursesSearch();\n\t},\n\n\ttemplate: JST[\"courses/coursesearch\"],\n\n\trender: function () {\n\t\tvar renderedContent = this.template({courses: this.collection});\n\t\tthis.$el.html(renderedContent);\n\t\treturn this\n\t},\n\n  tagName: \"section\",\n\n  className: \"course-search\",\n\n\tevents: {\n\t\t\"submit form.course-find\":\"search\"\n\t},\n\n\t// search: function (event) {\n\t// \tevent.preventDefault();\n  //  var query = $(\"input.course-find-input\").val();\n  //\n  //   var filtered = this.collection.filter(function (course) {\n  //     var pattern = new RegExp(query, \"gi\");\n  //     var result = course.get(\"name\").match(pattern);\n  //     return result\n  //   })\n  //\n  //   var filteredCollection = new MerlinsBoard.Collections.Courses([],{owner: MerlinsBoard.CurrentUser});\n  //   filteredCollection.set(filtered);\n  //\n  //   var searchList = new MerlinsBoard.Views.CoursesList({collection: filteredCollection});\n\t// \tthis.$('section.course-results').html(searchList.render().$el);\n\t// }\n\n\tsearch: function (event) {\n\t\tevent.preventDefault();\n\t  var queryCourse = $(\"input.course-find-input\").val();\n\t\tthis.searchCollection.fetch({data: $.param(query: queryCourse)});\n\n\t\tvar searchList = new MerlinsBoard.Views.CoursesList({collection: this.searchCollection});\n\t\t$('section.course-results').html(searchList.render.$el); //needs to be global from DOM.\n\t}\n\n})\n", "MerlinsBoard.Views.CoursesEnroll = Backbone.View.extend({\n\tinitialize: function () {\n\t\tthis.coursesearchView = new MerlinsBoard.Views.CoursesSearch({collection: this.collection}); //render will put these in manually\n\t\tthis.usercoursesView = new MerlinsBoard.Views.CoursesList({collection: this.model.courses()});\n\t\tthis.usertaughtcoursesView = new MerlinsBoard.Views.CoursesList({collection: this.model.taughtcourses()});\n\t},\n\t\n  template: JST['courses/enroll'],\n\t\n\trender: function () {\n\t\tthis.$el.html(this.template());\n    \n    this.$(\"section.courses-attended\").html(this.usercoursesView.render().$el);\n    this.$(\"section.courses-taught\").html(this.usertaughtcoursesView.render().$el);\n    this.$(\"section.course-search\").html(this.coursesearchView.render().$el);\n\t\t\n    return this\n\t},\n  \n  //below two, again - hardcode URLs instead\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tshow: function (event) {\n\t\tevent.preventDefault();\n\t\tvar id = $(event.currentTarget).data(\"id\");\n\t\tBackbone.history.navigate(\"course/\" + id + \"/enroll\", {trigger:true})\n\t},\n\n\tevents: {\n\t\t\"click a\": \"show\"\n\t}\n\n});\n", "MerlinsBoard.Views.SearchStudent = Backbone.View.extend({\n  initialize: function () {\n    this.listenTo(this.collection, \"add remove reset\", this.render)\n  },\n\n  className: \"grades-studentsearch\",\n\n  template: JST[\"grades/grades-student-search\"],\n\n  render: function () {\n    var renderedContent = this.template({students: this.collection});\n    this.$el.html(renderedContent);\n    return this.$el\n  }\n})\n", "//Lists a students grade - an admin has access to this view to edit grades\nMerlinsBoard.Views.GradesStudent = Backbone.View.extend({\n  initialize: function () {\n    this.listenTo(this.collection, \"add change:grade remove\", this.render)\n    _.bindAll(this, \"gradeSaveCallback\", \"gradeSaveErrorCallback\")\n    //for jbuidler - nest each of a student's grade under them along with basic information about the assignment\n  },\n\n  template: JST[\"grades/grades-student\"],\n\n  events: {\n    \"click .grade-number\":\"editGrade\",\n    \"blur .grade-input\": \"saveGrade\"\n  },\n\n  className: \"grade-list\",\n\n  tagName: \"section\",\n\n  render: function () {\n    var renderedContent = this.template({grades: this.collection});\n    this.$el.html(renderedContent);\n    return this.$el\n  },\n\n  editGrade: function (event) {\n    var gradeString = $(event.currentTarget).text();\n    var num = parseInt(gradeString);\n    var $input = $(\"<input type='number'>\").addClass('grade-input').val(num);\n\n    this.modelNumber = $(event.currentTarget).data('id');\n\n    $(\".grade-number\").html(input)\n  },\n\n  saveGrade: function (event) {\n    var editedGrade = this.collection.getOrFetch(this.modelNumber);\n    var newGrade = $('input.grade-input').val();\n    var courseID = this.collection.course_id;\n\n    editedGrade.set({grade: newGrade});\n    //two options, send in the params with the model and strong params takes care of it\n    //or send it in as an option for the save option\n    editedGrade.save({},{success: this.gradeSaveCallback,\n    error: this.gradeSaveErrorCallback,\n    data: $.param({course_id: courseID})\n    });\n  },\n\n  gradeSaveCallback: function () {\n    this.collection.add(editedGrade,{merge: true})//this should be a closure - also editedGrade I think should persist as a variable...\n    // $(\".grade-number\").html(editedGrade.get('grade')); this wont work because I'm inspecific, but I may not need it anyway to rerender\n  },\n\n  gradeSaveErrorCallback: function (model, response) {\n    var errorArray = resp.responseJSON\n    var $errorList = $(\"<ul>\").addClass('errors');\n    _.each(errorArray, function (error) {\n      var $error = $(\"<li>\").text(error).addClass('error');\n      $errorList.append($error);\n    })\n\n    $(\"section.grade-errors\").html($errorList);\n  }\n})\n", "<!-- This will be the view for all courses...eventually a search should go here..http://stackoverflow.com/questions/14206259/backbone-structure-for-search-form-and-results\n\nall this will be is organized links-->\n\n<form class = \"course-find\">\n\t<label> Find Course\n\t<input type=\"text\" class=\"course-find-input\">\n\t</label>\n\t<input type=\"submit\" value=\"Search\">\n</form>\n\n<section class=\"course-results\">\n\n</section>\n", "<% courses.each( function (course) { %>\n\t<li><a href=\"#\" data-id=\"<%=course.id%>\"><%= course.escape(\"name\") %></a></li>\n<% })%>", "<h1>Grades for <%=grades.escape('fname') + \" \" + grades.escape('lname')%></h1>\n\n<section class=\"grade-errors\"></section>\n\n<% grades.each(function (grade) { %>\n  <h4> grade.escape('assignment_title') </h4>\n  <p> grade.escape('description')</p>\n  Grade: <strong class=\"grade-number\" data-id=\"<%= grade.id %>\"><%= grade.get('grade')%></strong>\n  <br>\n<% }) %>\n\n//I think all I'll do is just pretend like nothing happened if the entry is invalid\n", "class Api::GradesController < Api::ApiController\n  before_action(except: [:index]) {admins_only(params[\"course_id\"])} #wil always need to pass this in on every fetch\n  before_action :is_user_or_instructor?, only: [:index]\n\n  def index\n    #I may want an internal control here instead of using the before_action...\n    @grades = Grade.includes(:assignment,:course,:user).where(\"user_id = ?\", params[\"user_id\"])\n    @student = @grades.first.user\n    @grades = @grades.select {|grade| grade.course.id == params[\"course_id\"].to_i}\n  end\n\n  def destroy\n    @grade = Grade.find(params[:id])\n    @grade.destroy\n    render json: {}\n  end\n\n  # def create\n  #   @grade = Grade.new(grade_params)\n  #\n  #   if @grade.save\n  #     render json: @grade\n  #   else\n  #     render json: @grade.errors.full_messages, status: 422\n  #   end\n  # end\n\n  def update\n    @grade = Grade.find(params[:id])\n\n    if @grade.save\n      render json: @grades\n    else\n      render json: @grade.errors.full_messages, status: 422\n    end\n  end\n\n  private\n\n  def is_user_or_instructor?\n    return if current_user.id == params[\"user_id\"].to_i\n    admins_only(params[\"course_id\"])\n  end\n\n  def grade_params\n    params.require(:grade).permit(:grade, :assignment_id, :user_id)\n  end\n  \nend\n", "json.grades @grades do |grade_obj|\n  json.grade grade_obj.grade\n  json.assignment_id grade_obj.assignment_id\n  json.user_id grade_obj.user_id\n  json.assignment_title grade_obj.assignment.title\n  json.assignment_description grade_obj.assignment.description\nend\n\njson.student_fname @student.fname\njson.student_lname @student.lname\njson.course_id @student.course.id\n\n#remember then that for a single model, only top-level attrs will be assigned\n# for a collection, each entry in the array should be top-level attrs (or wrapped in only a single object wrapper)\n# but the array itself must be top-level\n# weird: Cannot mix json.array! with other top-level attrs", "Rails.application.routes.draw do\n  resources :resources\n\n\troot to: \"static_pages#root\"\n\n \tresources :users, only: [:new, :create, :show]\n\tresource :session, only: [:new, :create, :destroy]\n#   resources :coursesinstructors, only: [:create, :destroy]\n# \tresources :coursesstudents, only: [:create, :destroy], controller: \"courses_students\"\n#   resources :courses, only: [:create, :index, :destroy, :new, :show]\n\n  namespace :api, defaults: { format: :json } do\n    resources :coursesinstructors, only: [:create, :destroy]\n    resources :coursesstudents, only: [:create, :destroy], controller: \"courses_students\"\n    resources :announcements #might have to \"member do\" for easy-access custom routes from a particular course\n    resources :assignments\n    resources :resources\n    resources :courses do\n      get \"course_search\", on: :collection\n    end\n    resources :users, only: [:show, :index] do\n      get \"users_search\", on: :collection\n      resources :grades, only: [:index]\n    end\n  end\n\nend\n", "# This file should contain all the record creation needed to seed the database with its default values.\n# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).\n#\n# Examples:\n#\n#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])\n#   Mayor.create(name: 'Emanuel', city: cities.first)\n\n#should create master user that has most functionality available to it.\n\nUser.create(fname:\"Jonathan\", lname: \"Lee\", email: \"l33.jonathan@gmail.com\", password: \"testing\")\n\n(1..10).each do |user_no|\n  User.create(\n    fname: Faker::Name.first_name,\n    lname: Faker::Name.last_name,\n    email: Faker::Internet.email,\n    password: Faker::Internet.password(8),\n  )\nend\n\nweekdays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]\n\n(1..5).each do |course_no|\n  time_string = \"12:0\" + course_no.to_s\n  end_time_string = \"12:0\" + (course_no+2).to_s\n\n  Course.create(\n    name: Faker::Lorem.word,\n    location: Faker::Address.street_address,\n    day: weekdays[rand(5)],\n    description: Faker::Lorem.sentence,\n    start_time: time_string,\n    end_time: end_time_string\n  )\nend\n\n\n#enrollment\n[1,3].each do |odd|\n  CoursesStudents.create(user_id: 1, course_id: odd)\nend\n\n2.times{\n  (2..11).each do |enroll|\n    course_no = (rand(5)+1)\n    student_no = enroll\n\n    CoursesStudents.create( #to make this less haphazard, I could just iterate over the courses and users and match up it to avoid collisions.\n      user_id: student_no,\n      course_id: course_no\n    )\n  end\n}\n\n[2,4].each do |even|\n  CoursesInstructors.create(user_id: 1, course_id: even)\nend\n\n(2..11).each do |teacher| #not getting hit enough times, need to rejigger to avoid conflicts or just increase number to increase chances of seeding database\n  course_no = (rand(5)+1)\n  instructor_no = (rand(11)+1)\n\n  CoursesInstructors.create(\n    user_id: instructor_no,\n    course_id: course_no\n  )\nend\n\n#for announcements and assignments, need to set up inverse relationship... maybe. Will need to think about it for a bit\n\nCoursesInstructors.all.each do |admin_link|\n  course_no = admin_link.course_id\n  admin_id = admin_link.user_id\n\n  3.times {\n    Announcement.create(\n      title: Faker::Lorem.word.capitalize,\n      body: Faker::Lorem.paragraph,\n      user_id: admin_id,\n      course_id: course_no,\n    )\n  }\n\nend\n\nCourse.all.each do |course|\n  2.times {\n    Assignment.create(\n      title: Faker::Lorem.word.capitalize,\n      description: Faker::Lorem.sentence,\n      due_date: Faker::Date.forward(10), #should find someway to exclude weekends\n      course_id: course.id\n    )\n  }\nend\n\n#grades\n\nCoursesStudents.all.each do |student_link|\n  course_id = student_link.course_id\n  user_id = student_link.user_id\n\n  course = Course.find(course_id)\n\n  course.assignments.each do |assignment|\n    Grade.create(user_id: user_id, assignment_id: assignment.id, grade: rand(101))\n  end\n  # A note- creating entries haphazardly like this may cause there to be an grade for an class assignment that user doesn't even attend - in this particular case it can't happen, but its in the realm of possibility\nend\n"], "fixing_code": ["MerlinsBoard.Collections.Grades = Backbone.Collection.extend({\n  initialize: function (options) {\n    // this.owner = options[\"owner\"];\n    this.course_id = options[\"course_id\"]\n    this.url = \"api/users/\" + options[\"user_id\"] + \"/grades\"\n  },\n\n  model: MerlinsBoard.Models.Grade,\n\n  getOrFetch: function (id, course_id) {\n    var grade = this.get(id);\n    var grades = this;\n\n    if (!grade) {\n      grade = new MerlinsBoard.Models.Grade({id: id});\n      grade.fetch({ success: function () {\n        this.add(grade);\n      }\n      })\n    } else {\n      grade.fetch();\n    }\n\n    return grade\n  },\n\n  fetch: function(options) {\n    if (!options) {\n      options = {};\n    }\n\n    //some logic here to check if \"data\" was already passed in, and fusing that to the data parameter...\n\n    _.extend(options,{ data: $.param({ course_id: this.course_id}) });\n    return Backbone.Collection.prototype.fetch.call(this, options);\n  },\n\n  student: function () {\n    if (!this._student) {\n      this._student = new MerlinsBoard.Models.User();\n    }\n\n    return this._student\n  },\n\n  parse: function (resp) {\n    this.student().set({fname: resp.student_fname,lname: resp.student_lname});\n    // this.course_id = resp.course_id should only set once and then never again\n\n    resp.student_fname.delete //is there a better way to clean this up?\n    resp.student_fname.delete\n    resp.course_id.delete\n\n    return resp.grades\n  }\n\n})\n", "MerlinsBoard.Models.Grade = Backbone.Model.extend({\n  urlRoot: 'api/grades',\n  validate: function () {}\n})\n", "MerlinsBoard.Routers.Router = Backbone.Router.extend({\n  initialize: function (options) {\n    this.$rootEl = options[\"rootEl\"];\n    this.$sideNav = options[\"sideNav\"];\n    this.$tabNav = options[\"tabNav\"];\n    this.currentUser = MerlinsBoard.CurrentUser\n\n    var courseTabs = new MerlinsBoard.Views.CourseTabs({collection: this.currentUser.courses()})\n    var courseDetails = new MerlinsBoard.Views.CourseDetails();\n\n    this.currentUser.fetch();\n\n    this.$tabNav.html(courseTabs.$el)\n    this.$sideNav.html(courseDetails.$el)\n  },\n\n\troutes: {\n    //course resources\n    \"course/search\" : \"enrollcourses\",\n    \"course/:id/enroll\" : \"showcourse\",\n    \"course/new\": \"newcourse\",\n    \"course/:id/edit\": \"editcourse\",\n    \"course/taught\": \"taughtcourses\",\n    //announcement resources\n    \"\" : \"homeAnnouncements\",\n    \"course/:id/announcements/new\": \"newAnnouncement\",\n    \"course/:course_id/announcements/:id/edit\":\"editAnnouncement\",\n    \"course/:id/announcements\" : \"courseAnnouncements\", //shows announcements for course + navView\n    //assignment resources\n    \"course/:id/assignments/new\" : \"newAssignment\",\n    \"course/:id/assignments\" : \"showAssignments\",\n    \"course/:course_id/assignments/:id/edit\" : \"editAssignment\",\n    //grades\n    \"course/:id/grades/student-search\" : \"gradeSearch\",\n    \"course/:course_id/grades/user/:user_id\" : \"gradeShow\"\n    //misc\n//     \"user/:id\": \"showuser\"\n    //\":wildcard\": \"does not exist\" --self explanatory\n\t},\n\n\n  //course resources\n\tenrollcourses: function () {\n    var allcourses = new MerlinsBoard.Collections.Courses([],{owner: this.currentUser});\n\n    this.currentUser.fetch()\n\n    var enrollView = new MerlinsBoard.Views.CoursesEnroll({model: this.currentUser});\n    this.swapView(enrollView);\n  },\n\n\tshowuser: function () {\n    var userView = new MerlinsBoard.Views.UserShow({model: this.currentUser});\n    this.swapView(userView);\n  },\n\n\tnewcourse: function () {\n    var newcourse = new MerlinsBoard.Models.Course();\n    var courseform = new MerlinsBoard.Views.CourseForm({model: newcourse});\n    this.swapView(courseform);\n  },\n\n\teditcourse: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var courseform = new MerlinsBoard.Views.CourseForm({model: course});\n    this.swapView(courseform);\n  },\n\n\tshowcourse: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id); //here\n    var showCourse = new MerlinsBoard.Views.CoursesShow({model: course});\n    this.swapView(showCourse);\n  },\n\n  taughtcourses: function () {\n    var taughtCourses = this.currentUser.taughtcourses();\n    var taughtCourseView = new MerlinsBoard.Views.CoursesTaught({collection: taughtCourses});\n    this.swapView(taughtCourseView);\n  },\n\n  //announcements\n  homeAnnouncements: function () {\n    this.currentUser.fetch()\n\n    var allAnnouncements = this.currentUser.announcements();\n    var allAnnouncementsView = new MerlinsBoard.Views.announcementHome({collection: allAnnouncements});\n    this.swapView(allAnnouncementsView)\n\n    MerlinsBoard.Vent.trigger(\"homeRender\");\n  },\n\n  courseAnnouncements: function (id) {\n    //course detail nav should be instantiated here + announcements!\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var announcements = course.announcements();\n\n\n    var courseAnnouncements = new MerlinsBoard.Views.announcementList({collection: announcements});\n    this.swapView(courseAnnouncements);\n\n    MerlinsBoard.Vent.trigger(\"courseRender\",{courseID: id}); //for more functionality - it should pass in the reference to the course model instead\n  },\n\n  newAnnouncement: function (id) {\n    var newAnnouncement = new MerlinsBoard.Models.Announcement();\n    var announcementForm = new MerlinsBoard.Views.announcementForm({model: newAnnouncement, course_id: id});\n    this.swapView(announcementForm);\n  },\n\n  editAnnouncement: function (course_id,id) {\n    var announcement = new MerlinsBoard.Models.Announcement({id: id})\n    announcement.fetch()\n\n    var announcementForm = new MerlinsBoard.Views.announcementForm({model: announcement, course_id: course_id});\n    this.swapView(announcementForm);\n  },\n\n  //assignments\n\n  showAssignments: function (id) {\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var assignments = course.assignments();\n\n    var courseAssignments = new MerlinsBoard.Views.assignmentList({collection: assignments});\n    this.swapView(courseAssignments);\n\n    MerlinsBoard.Vent.trigger(\"courseRender\",{courseID: id});\n  },\n\n  newAssignment: function (id) {\n    var newAssignment = new MerlinsBoard.Models.Assignment();\n    var assignmentForm = new MerlinsBoard.Views.assignmentForm({model: newAssignment, course_id: id});\n    this.swapView(assignmentForm);\n  },\n\n  editAssignment: function (course_id,id) {\n    var assignment = new MerlinsBoard.Models.Assignment({id: id});\n    assignment.fetch();\n\n    var assignmentForm = new MerlinsBoard.Views.assignmentForm({model: assignment, course_id: course_id});\n    this.swapView(assignmentForm);\n  },\n\n  //grades\n\n  gradeSearch: function () {\n  //I will have to call the course fetch here to determine privileges\n    var course = MerlinsBoard.Courses.getOrFetch(id);\n    var users = course.users()\n\n    // var usersList = MerlinsBoard.Views.\n  },\n\n  gradeShow: function (course_id, user_id) {\n    // var course = MerlinsBoard.Courses.getOrFetch(id);\n    var grades = new MerlinsBoard.Collections.Grades({course_id: course_id, user_id: user_id});\n\n    grades.fetch();\n\n    var gradesList = new MerlinsBoard.Views.GradesStudent({collection: grades});\n    this.swapView(gradesList)\n  },\n\n  // utils\n  resourceNotFound: function () {\n    //this.swapView();\n  },\n\n  swapView: function (newView, navView) {\n    if (!this._currentView) {\n      this._currentView = newView;\n    } else {\n      this._currentView.remove();\n      this._currentView = newView;\n    }\n\n    this.$rootEl.html(newView.render().$el);\n  }\n})\n\n//var course = new MerlinsBoard.Models.Course({id: course_id})\n//course.fetch()\n", "MerlinsBoard.Views.CourseForm = Backbone.View.extend({\n  initialize: function () {\n\n    this.listenTo(this.model,\"sync\",this.render)\n  },\n\n\ttemplate: JST[\"courses/form\"],\n\n\trender: function () {\n\t\tvar renderedContent = this.template({course: this.model})\n    this.$el.html(renderedContent);\n    return this\n\t},\n\n\tevents: {\n\t\t\"submit form.course-form\": \"submitform\"\n\t},\n\n\tsubmitform: function (event) {\n\t\tevent.preventDefault();\n\t\tvar attrs = $(event.target).serializeJSON();\n    debugger\n\t\tthis.model.save(attrs, {\n\t\t\tsuccess: function () {\n\t\t\t\tMerlinsBoard.Courses.add(this.model,{merge: true})\n\t\t\t\tBackbone.history.navigate(\"course/search\",{trigger: true}) \n\t\t\t}.bind(this),\n\t\t\terror: function (model,resp) {\n\t\t\t\tvar errorArray = resp.responseJSON;\n        var $errorList = $(\"<ul>\").addClass(\"errors\");\n        _.each(errorArray, function (error) {\n          var $error = $(\"<li>\").text(error).addClass(\"error\");\n          $errorList.append($error);\n        })\n\n        $(\"section.form-errors\").html($errorList);\n\t\t\t}\n\t\t})\n\t}\n\n  //should refactor the above by abstracting with \".bindAll\"..or just abstracting\n})\n", "MerlinsBoard.Views.CoursesList = Backbone.View.extend({\n\tinitialize: function () {\n \t\tthis.listenTo(this.collection, \"reset add sync\", this.render);\n\t},\n\n\ttemplate: JST[\"courses/list\"],\n\n\ttagName: \"ul\",\n\n\tclassName: \"course-list\",\n\n\trender: function () {\n\t\tvar renderedContent = this.template({courses: this.collection});\n\t\tthis.$el.html(renderedContent);\n\t\treturn this\n\t}\n\n})\n", "MerlinsBoard.Views.CoursesSearch = Backbone.View.extend({\n\tinitialize: function () {\n\t},\n\n\ttemplate: JST[\"courses/coursesearch\"],\n\n\trender: function () {\n\t\tvar renderedContent = this.template({courses: this.collection});\n\t\tthis.$el.html(renderedContent);\n\t\treturn this\n\t},\n\n\tsearchCollection: function () {\n\t\tif (!this._searchCollection) {\n\t\t\tthis._searchCollection = new MerlinsBoard.Collections.CoursesSearch();\n\t\t}\n\n\t\treturn this._searchCollection\n\t},\n\n  tagName: \"section\",\n\n  className: \"course-search\",\n\n\tevents: {\n\t\t\"submit form.course-find\":\"search\"\n\t},\n\n\tsearch: function (event) {\n\t\tevent.preventDefault();\n\t  var queryCourse = $(\"input.course-find-input\").val();\n\t\tthis.searchCollection().fetch({data: $.param({query: queryCourse})});\n\n\t\tvar searchList = new MerlinsBoard.Views.CoursesList({collection: this.searchCollection()});\n\t\t//want to call remove on search results\n\t\t$('section.course-results').html(searchList.render().$el);\n\t}\n\n})\n", "MerlinsBoard.Views.CoursesEnroll = Backbone.View.extend({\n\tinitialize: function () {\n\t\tthis.coursesearchView = new MerlinsBoard.Views.CoursesSearch();\n\t\tthis.usercoursesView = new MerlinsBoard.Views.CoursesList({collection: this.model.courses()});\n\t\tthis.usertaughtcoursesView = new MerlinsBoard.Views.CoursesList({collection: this.model.taughtcourses()});\n\t},\n\n  template: JST['courses/enroll'],\n\n\trender: function () {\n\t\tthis.$el.html(this.template());\n\n    this.$(\"section.courses-attended\").html(this.usercoursesView.render().$el);\n    this.$(\"section.courses-taught\").html(this.usertaughtcoursesView.render().$el);\n    this.$(\"section.course-search\").html(this.coursesearchView.render().$el);\n\n    return this\n\t}\n\n});\n", "MerlinsBoard.Views.SearchStudentGradesResults = Backbone.View.extend({\n  initialize: function () {\n    this.listenTo(this.collection, \"add remove reset\", this.render)\n  },\n\n  className: \"grades-student-search\",\n\n  template: JST[\"grades/grades-student-search\"],\n\n  render: function () {\n    var renderedContent = this.template({students: this.collection});\n    this.$el.html(renderedContent);\n    return this.$el\n  }\n})\n", "//Lists a students grade - an admin has access to this view to edit grades\nMerlinsBoard.Views.GradesStudent = Backbone.View.extend({\n  initialize: function () {\n    this.listenTo(this.collection, \"add change:grade remove sync\", this.render)\n    _.bindAll(this, \"gradeSaveCallback\", \"gradeSaveErrorCallback\")\n    //for jbuidler - nest each of a student's grade under them along with basic information about the assignmen\n  },\n\n  template: JST[\"grades/grades-student-list\"],\n\n  events: {\n    \"click .grade-number\":\"editGrade\",\n    \"blur .grade-input\": \"saveGrade\"\n  },\n\n  className: \"grade-list\",\n\n  tagName: \"section\",\n\n  render: function () {\n    var renderedContent = this.template({grades: this.collection, student: this.collection.student()});\n    this.$el.html(renderedContent);\n    return this\n  },\n\n  editGrade: function (event) {\n    var gradeString = $(event.currentTarget).val();\n    var num = parseInt(gradeString);\n    var $input = $(\"<input type='number' min='0' step='1' max='100'>\").addClass('grade-input').val(num);\n    this.modelNumber = $(event.currentTarget).data('id');\n    $(\".grade-number[data-id=\".concat(this.modelNumber,\"]\")).html($input)\n  },\n\n  saveGrade: function (event) {\n    var editedGrade = this.collection.getOrFetch(this.modelNumber);\n    var newGrade = parseInt($('input.grade-input').val());\n    var courseID = this.collection.course_id;\n\n    debugger\n\n    editedGrade.set({grade: newGrade});\n    editedGrade.save({course_id: courseID},{success: this.gradeSaveCallback(editedGrade),\n    error: this.gradeSaveErrorCallback\n    });\n  },\n\n  gradeSaveCallback: function (editedGrade) {\n    this.collection.fetch(); //unideal - needs to be banished with composite view paradigm.\n    // this.collection.add(editedGrade,{merge: true});\n  },\n\n  gradeSaveErrorCallback: function (model, resp) {\n\n    var errorArray = resp.responseJSON\n    var $errorList = $(\"<ul>\").addClass('errors');\n    _.each(errorArray, function (error) {\n      var $error = $(\"<li>\").text(error).addClass('error');\n      $errorList.append($error);\n    })\n\n    $(\"section.grade-errors\").html($errorList);\n  }\n})\n", "<!-- This will be the view for all courses...eventually a search should go here..http://stackoverflow.com/questions/14206259/backbone-structure-for-search-form-and-results\n\nall this will be is organized links-->\n\n<form class = \"course-find\">\n\t<label> Find Course\n\t<input type=\"text\" class=\"course-find-input\">\n\t</label>\n\t<input type=\"submit\" value=\"Search\">\n</form>\n\n<section class=\"course-results\">\n</section>\n", "<% courses.each( function (course) { %>\n\t<li><a href=\"<%= '#course/' + course.id + '/enroll'%>\"><%= course.escape(\"name\") %></a></li>\n<% })%>\n", "<h1>Grades for <%= student.escape('fname') + \" \" + student.escape('lname')%></h1>\n\n<section class=\"grade-errors\"></section>\n\n<% grades.each(function (grade) { %>\n  <h4> Assignment name:<%= grade.escape('title') %></h4>\n  <p> description: <%= grade.escape('description') %></p>\n  Grade: <strong class=\"grade-number\" data-id=\"<%= grade.id %>\"><%= grade.get('grade')%></strong>\n  <br>\n<% }) %>\n", "class Api::GradesController < Api::ApiController\n  before_action(only: [:update, :show]) {admins_only(params[\"course_id\"])}\n  before_action :is_user_or_instructor?, only: [:index]\n\n  def index\n    #I may want an internal control here instead of using the before_action...\n    @grades = Grade.includes(:assignment,:course,:user).where(\"user_id = ?\", params[\"user_id\"])\n    @student = @grades.first.user\n    @course_id = params[\"course_id\"].to_i\n\n    @grades = @grades.select {|grade| grade.course.id == params[\"course_id\"].to_i}\n  end\n\n  #Neither of these may be needed because they should only be created/destroyed depending on the assignment\n\n  # def destroy\n  #   @grade = Grade.find(params[:id])\n  #   @grade.destroy\n  #   render json: {}\n  # end\n  # def create\n  #   @grade = Grade.new(grade_params)\n  #\n  #   if @grade.save\n  #     render json: @grade\n  #   else\n  #     render json: @grade.errors.full_messages, status: 422\n  #   end\n  # end\n\n  def show\n    @grade = Grade.find(params[:id])\n    render json: @grade\n  end\n  #will need to create unique validator to ensure congruency between course auth and resource id course....\n  def update\n    @grade = Grade.find(params[:id])\n\n    if @grade.update(grade_params)\n      render json: @grades\n    else\n      render json: @grade.errors.full_messages, status: 422\n    end\n  end\n\n  private\n\n  def is_user_or_instructor?\n    return if current_user.id == params[\"user_id\"].to_i\n    admins_only(params[\"course_id\"])\n  end\n\n  def grade_params\n    params.permit(:grade, :assignment_id, :user_id) #need to change grade column - it confuses params_wrapper\n  end\n\nend\n", "json.grades @grades do |grade_obj|\n  json.id grade_obj.id\n  json.grade grade_obj.grade\n  json.id grade_obj.assignment_id\n  json.user_id grade_obj.user_id\n  json.title grade_obj.assignment.title\n  json.description grade_obj.assignment.description\nend\n\njson.student_fname @student.fname\njson.student_lname @student.lname\njson.course_id @course_id\n\n#remember then that for a single model, only top-level attrs will be assigned\n# for a collection, each entry in the array should be top-level attrs (or wrapped in only a single object wrapper)\n# but the array itself must be top-level\n# weird: Cannot mix json.array! with other top-level attrs\n", "Rails.application.routes.draw do\n  resources :resources\n\n\troot to: \"static_pages#root\"\n\n \tresources :users, only: [:new, :create, :show]\n\tresource :session, only: [:new, :create, :destroy]\n#   resources :coursesinstructors, only: [:create, :destroy]\n# \tresources :coursesstudents, only: [:create, :destroy], controller: \"courses_students\"\n#   resources :courses, only: [:create, :index, :destroy, :new, :show]\n\n  namespace :api, defaults: { format: :json } do\n    resources :coursesinstructors, only: [:create, :destroy]\n    resources :coursesstudents, only: [:create, :destroy], controller: \"courses_students\"\n    resources :announcements #might have to \"member do\" for easy-access custom routes from a particular course\n    resources :assignments\n    resources :resources\n    resources :grades, only: [:update, :show]\n    resources :courses do\n      get \"course_search\", on: :collection\n    end\n    resources :users, only: [:show, :index] do\n      get \"users_search\", on: :collection\n      resources :grades, only: [:index]\n    end\n  end\n\nend\n", "# This file should contain all the record creation needed to seed the database with its default values.\n# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).\n#\n# Examples:\n#\n#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])\n#   Mayor.create(name: 'Emanuel', city: cities.first)\n\n#should create master user that has most functionality available to it.\n\nUser.create(fname:\"Jonathan\", lname: \"Lee\", email: \"l33.jonathan@gmail.com\", password: \"testing\")\nUser.create(fname:\"John\", lname: \"Doe\", email: \"johndoe@gmail.com\",\npassword: \"testing\")\n\n(1..10).each do |user_no|\n  User.create(\n    fname: Faker::Name.first_name,\n    lname: Faker::Name.last_name,\n    email: Faker::Internet.email,\n    password: Faker::Internet.password(8),\n  )\nend\n\nweekdays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\"]\n\n(1..5).each do |course_no|\n  time_string = \"12:0\" + course_no.to_s\n  end_time_string = \"12:0\" + (course_no+2).to_s\n\n  Course.create(\n    name: Faker::Lorem.word,\n    location: Faker::Address.street_address,\n    day: weekdays[rand(5)],\n    description: Faker::Lorem.sentence,\n    start_time: time_string,\n    end_time: end_time_string\n  )\nend\n\n\n#enrollment\n[1,3].each do |odd|\n  CoursesStudents.create(user_id: 1, course_id: odd)\nend\n\n2.times{\n  (2..11).each do |enroll|\n    course_no = (rand(5)+1)\n    student_no = enroll\n\n    CoursesStudents.create( #to make this less haphazard, I could just iterate over the courses and users and match up it to avoid collisions.\n      user_id: student_no,\n      course_id: course_no\n    )\n  end\n}\n\n[2,4].each do |even|\n  CoursesInstructors.create(user_id: 1, course_id: even)\nend\n\n(2..11).each do |teacher| #not getting hit enough times, need to rejigger to avoid conflicts or just increase number to increase chances of seeding database\n  course_no = (rand(5)+1)\n  instructor_no = (rand(11)+1)\n\n  CoursesInstructors.create(\n    user_id: instructor_no,\n    course_id: course_no\n  )\nend\n\n#for announcements and assignments, need to set up inverse relationship... maybe. Will need to think about it for a bit\n\nCoursesInstructors.all.each do |admin_link|\n  course_no = admin_link.course_id\n  admin_id = admin_link.user_id\n\n  3.times {\n    Announcement.create(\n      title: Faker::Lorem.word.capitalize,\n      body: Faker::Lorem.paragraph,\n      user_id: admin_id,\n      course_id: course_no,\n    )\n  }\n\nend\n\nCourse.all.each do |course|\n  2.times {\n    Assignment.create(\n      title: Faker::Lorem.word.capitalize,\n      description: Faker::Lorem.sentence,\n      due_date: Faker::Date.forward(10), #should find someway to exclude weekends\n      course_id: course.id\n    )\n  }\nend\n\n#grades\n\nCoursesStudents.all.each do |student_link|\n  course_id = student_link.course_id\n  user_id = student_link.user_id\n\n  course = Course.find(course_id)\n\n  course.assignments.each do |assignment|\n    Grade.create(user_id: user_id, assignment_id: assignment.id, grade: rand(101))\n  end\n  # A note- creating entries haphazardly like this may cause there to be an grade for an class assignment that user doesn't even attend - in this particular case it can't happen, but its in the realm of possibility\nend\n"], "filenames": ["app/assets/javascripts/collections/grades.js", "app/assets/javascripts/models/grade.js", "app/assets/javascripts/routers/router.js", "app/assets/javascripts/views/courses/course-form.js", "app/assets/javascripts/views/courses/course-list.js", "app/assets/javascripts/views/courses/course_search.js", "app/assets/javascripts/views/courses/courses_enroll.js", "app/assets/javascripts/views/grades/grade-search-student.js", "app/assets/javascripts/views/grades/grades-student.js", "app/assets/templates/courses/coursesearch.jst.ejs", "app/assets/templates/courses/list.jst.ejs", "app/assets/templates/grades/grades-student-list.jst.ejs", "app/controllers/api/grades_controller.rb", "app/views/api/grades/index.json.jbuilder", "config/routes.rb", "db/seeds.rb"], "buggy_code_start_loc": [10, 4, 35, 26, 3, 3, 3, 1, 4, 13, 2, 1, 2, 1, 17, 11], "buggy_code_end_loc": [43, 5, 156, 27, 6, 46, 30, 7, 56, 14, 4, 13, 49, 17, 17, 11], "fixing_code_start_loc": [10, 4, 35, 26, 3, 2, 3, 1, 4, 12, 2, 1, 2, 2, 18, 12], "fixing_code_end_loc": [54, 5, 158, 27, 4, 37, 17, 7, 54, 12, 4, 10, 57, 18, 19, 14], "type": "CWE-863", "message": "A vulnerability, which was classified as problematic, was found in jvvlee MerlinsBoard. This affects an unknown part of the component Grade Handler. The manipulation leads to improper authorization. The name of the patch is 134f5481e2914b7f096cd92a22b1e6bcb8e6dfe5. It is recommended to apply a patch to fix this issue. The identifier VDB-217713 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10033", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-09T21:15:10.210", "lastModified": "2023-01-13T18:21:16.730", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in jvvlee MerlinsBoard. This affects an unknown part of the component Grade Handler. The manipulation leads to improper authorization. The name of the patch is 134f5481e2914b7f096cd92a22b1e6bcb8e6dfe5. It is recommended to apply a patch to fix this issue. The identifier VDB-217713 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 2.5}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:M/C:N/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "MULTIPLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 3.7}, "baseSeverity": "LOW", "exploitabilityScore": 4.1, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:merlinsboard_project:merlinsboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-03-19", "matchCriteriaId": "9414ED47-1FC1-4072-BDB9-DF7C47A53F84"}]}]}], "references": [{"url": "https://github.com/jvvlee/MerlinsBoard/commit/134f5481e2914b7f096cd92a22b1e6bcb8e6dfe5", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217713", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217713", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jvvlee/MerlinsBoard/commit/134f5481e2914b7f096cd92a22b1e6bcb8e6dfe5"}}