{"buggy_code": ["<?php\n\n/**\n * List all categories in the admin section.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-12-20\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryImage;\nuse phpMyFAQ\\Category\\CategoryPermission;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Filter;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n?>\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-folder\"></i> <?= $PMF_LANG['ad_menu_categ_edit'] ?>\n    </h1>\n    <div class=\"btn-toolbar mb-2 mb-md-0\">\n      <div class=\"btn-group mr-2\">\n        <a class=\"btn btn-sm btn-success\" href=\"?action=addcategory\">\n          <i aria-hidden=\"true\" class=\"fa fa-folder-plus\"></i> <?= $PMF_LANG['ad_kateg_add']; ?>\n        </a>\n        <a class=\"btn btn-sm btn-info\" href=\"?action=showcategory\">\n          <i aria-hidden=\"true\" class=\"fa fa-list\"></i> <?= $PMF_LANG['ad_categ_show']; ?>\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n        <?php\n        //\n        // CSRF Check\n        //\n        $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n        if (\n            'category' != $action && 'content' != $action &&\n            (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken)\n        ) {\n            $csrfCheck = false;\n        } else {\n            $csrfCheck = true;\n        }\n\n        //\n        // Image upload\n        //\n        $uploadedFile = (isset($_FILES['image']['size']) && $_FILES['image']['size'] > 0) ? $_FILES['image'] : [];\n        $categoryImage = new CategoryImage($faqConfig);\n        $categoryImage->setUploadedFile($uploadedFile);\n\n        $categoryPermission = new CategoryPermission($faqConfig);\n\n        if ($user->perm->hasPermission($user->getUserId(), 'editcateg') && $csrfCheck) {\n            // Save a new category\n            if ($action == 'savecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n                $parentId = Filter::filterInput(INPUT_POST, 'parent_id', FILTER_VALIDATE_INT);\n                $categoryId = $faqConfig->getDb()->nextId(Database::getTablePrefix() . 'faqcategories', 'id');\n                $categoryLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n                $categoryData = [\n                    'lang' => $categoryLang,\n                    'name' => Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW),\n                    'description' => Filter::filterInput(INPUT_POST, 'description', FILTER_UNSAFE_RAW),\n                    'user_id' => Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT),\n                    'group_id' => Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT),\n                    'active' => Filter::filterInput(INPUT_POST, 'active', FILTER_VALIDATE_INT),\n                    'image' => $categoryImage->getFileName($categoryId, $categoryLang),\n                    'show_home' => Filter::filterInput(INPUT_POST, 'show_home', FILTER_VALIDATE_INT)\n                ];\n\n                $permissions = [];\n                if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_user' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += [\n                    'restricted_user' => [\n                        Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n                    ],\n                    ];\n                }\n\n                if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_groups' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += Filter::filterInputArray(\n                        INPUT_POST,\n                        [\n                        'restricted_groups' => [\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags' => FILTER_REQUIRE_ARRAY,\n                        ],\n                        ]\n                    );\n                }\n\n                if ($category->checkIfCategoryExists($categoryData) > 0) {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_categ_existing']);\n                    exit();\n                }\n\n                $categoryId = $category->addCategory($categoryData, $parentId);\n\n                if ($categoryId) {\n                    $categoryPermission->add(CategoryPermission::USER, [$categoryId], $permissions['restricted_user']);\n                    $categoryPermission->add(\n                        CategoryPermission::GROUP,\n                        [$categoryId],\n                        $permissions['restricted_groups']\n                    );\n\n                    $categoryImage->upload();\n\n                    // All the other translations\n                    $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_UNSAFE_RAW);\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_added']);\n                } else {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                }\n            }\n\n            // Updates an existing category\n            if ($action == 'updatecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n\n                $parentId = Filter::filterInput(INPUT_POST, 'parent_id', FILTER_VALIDATE_INT);\n                $categoryId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n                $categoryLang = Filter::filterInput(INPUT_POST, 'catlang', FILTER_UNSAFE_RAW);\n                $existingImage = Filter::filterInput(INPUT_POST, 'existing_image', FILTER_UNSAFE_RAW);\n                $image = count($uploadedFile) ? $categoryImage->getFileName(\n                    $categoryId,\n                    $categoryLang\n                ) : $existingImage;\n                $categoryData = [\n                    'id' => $categoryId,\n                    'lang' => $categoryLang,\n                    'parent_id' => $parentId,\n                    'name' => Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW),\n                    'description' => Filter::filterInput(INPUT_POST, 'description', FILTER_UNSAFE_RAW),\n                    'user_id' => Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT),\n                    'group_id' => Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT),\n                    'active' => Filter::filterInput(INPUT_POST, 'active', FILTER_VALIDATE_INT),\n                    'image' => $image,\n                    'show_home' => Filter::filterInput(INPUT_POST, 'show_home', FILTER_VALIDATE_INT),\n                ];\n\n                $permissions = [];\n                if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_user' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += [\n                    'restricted_user' => [\n                        Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n                    ],\n                    ];\n                }\n\n                if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_groups' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += Filter::filterInputArray(\n                        INPUT_POST,\n                        [\n                        'restricted_groups' => [\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags' => FILTER_REQUIRE_ARRAY,\n                        ],\n                        ]\n                    );\n                }\n\n                if (!$category->checkLanguage($categoryData['id'], $categoryData['lang'])) {\n                    if (\n                        $category->addCategory($categoryData, $parentId, $categoryData['id']) &&\n                        $categoryPermission->add(\n                            CategoryPermission::USER,\n                            [$categoryData['id']],\n                            $permissions['restricted_user']\n                        ) &&\n                        $categoryPermission->add(\n                            CategoryPermission::GROUP,\n                            [$categoryData['id']],\n                            $permissions['restricted_groups']\n                        )\n                    ) {\n                        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_translated']);\n                    } else {\n                        printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                    }\n                } else {\n                    if ($category->updateCategory($categoryData)) {\n                        $categoryPermission->delete(CategoryPermission::USER, [$categoryData['id']]);\n                        $categoryPermission->delete(CategoryPermission::GROUP, [$categoryData['id']]);\n                        $categoryPermission->add(\n                            CategoryPermission::USER,\n                            [$categoryData['id']],\n                            $permissions['restricted_user']\n                        );\n                        $categoryPermission->add(\n                            CategoryPermission::GROUP,\n                            [$categoryData['id']],\n                            $permissions['restricted_groups']\n                        );\n\n                        $categoryImage->upload();\n\n                        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_updated']);\n                    } else {\n                        printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                    }\n                }\n\n                // All the other translations\n                $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_UNSAFE_RAW);\n            }\n\n            // Deletes an existing category\n            if ($user->perm->hasPermission($user->getUserId(), 'delcateg') && $action == 'removecategory') {\n                $categoryId = Filter::filterInput(INPUT_POST, 'cat', FILTER_VALIDATE_INT);\n                $categoryLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n\n                $categoryRelation = new CategoryRelation($faqConfig);\n\n                $categoryImage = new CategoryImage($faqConfig);\n                $categoryImage->setFileName($category->getCategoryData($categoryId)->getImage());\n\n                if (count($category->getCategoryLanguagesTranslated($categoryId)) === 1) {\n                    $categoryPermission->delete(CategoryPermission::USER, [$categoryId]);\n                    $categoryPermission->delete(CategoryPermission::GROUP, [$categoryId]);\n                    $categoryImage->delete();\n                }\n\n                if (\n                    $category->deleteCategory($categoryId, $categoryLang) &&\n                    $categoryRelation->delete($categoryId, $categoryLang)\n                ) {\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_deleted']);\n                } else {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                }\n            }\n\n            // Pastes a category\n            if ($action == 'pastecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n                $categoryId = Filter::filterInput(INPUT_POST, 'cat', FILTER_VALIDATE_INT);\n                $parentId = Filter::filterInput(INPUT_POST, 'after', FILTER_VALIDATE_INT);\n                if ($category->updateParentCategory((int) $categoryId, (int) $parentId)) {\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_updated']);\n                } else {\n                    printf(\n                        '<p class=\"alert alert-danger\">%s<br>%s</p>',\n                        $PMF_LANG['ad_categ_paste_error'],\n                        $faqConfig->getDb()->error()\n                    );\n                }\n            }\n\n            // Lists all categories\n            $lang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW, $faqLangCode);\n\n            // If we changed the category tree, unset the object\n            if (isset($category)) {\n                unset($category);\n            }\n\n            $category = new Category($faqConfig, $currentAdminGroups, true);\n            $category->setUser($currentAdminUser);\n            $category->setGroups($currentAdminGroups);\n            $category->getMissingCategories();\n            $category->buildCategoryTree();\n\n            $open = $lastCatId = $openDiv = 0;\n\n            echo '<div class=\"list-group list-group-root\">';\n            foreach ($category->getCategoryTree() as $id => $cat) {\n                // CategoryHelper translated in this language?\n                if ($cat['lang'] == $lang) {\n                    $categoryName = $cat['name'];\n                } else {\n                    $categoryName = $cat['name'] . ' (' . $languageCodes[strtoupper($cat['lang'])] . ')';\n                }\n\n\n                // Has permissions, show lock icon\n                if ($categoryPermission->isRestricted($cat['id'])) {\n                    $categoryName .= ' <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>';\n                }\n\n                   // Category is shown on start page\n                if ((int)$cat['show_home'] === 1) {\n                    $categoryName .= ' <i class=\"fa fa-star\" aria-hidden=\"true\"></i>';\n                }\n\n                // Category is inactive\n                if ((int)$cat['active'] === 0) {\n                    $categoryName .= ' <i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>';\n                }\n\n                // Level of the category\n                $level = $cat['indent'];\n\n                // Any sub-categories?\n                $subCategories = $category->getChildren($cat['id']);\n                $numSubCategories = count($subCategories);\n\n                $hasParent = (bool) $cat['parent_id'];\n\n                if ($hasParent) {\n                    printf(\n                        '<div class=\"list-group collapse\" id=\"category-id-%d\">',\n                        $cat['parent_id']\n                    );\n                }\n\n                printf(\n                    '<div href=\"#category-id-%d\" id=\"%s-%d\" class=\"list-group-item list-group-item-action border-left-0 border-right-0 d-flex justify-content-between align-items-center\" %s>',\n                    $cat['id'],\n                    trim(strip_tags($categoryName)),\n                    $cat['id'],\n                    $numSubCategories > 0 ? 'data-toggle=\"collapse\"' : ''\n                );\n                printf(\n                    '<span>%s %s</span>',\n                    $numSubCategories > 0 ? '<i class=\"fa fa-caret-right pmf-has-subcategories\"></i>' : '',\n                    $categoryName\n                );\n\n                // Buttons:\n                echo '<span>';\n                // Add FAQ to category (always)\n                printf(\n                    '<a class=\"btn btn-info btn-sm\" href=\"?action=editentry&amp;cat=%s&amp;lang=%s\"><i aria-hidden=\"true\" class=\"fa fa-indent\" title=\"%s\"></i></a></a> ',\n                    $cat['id'],\n                    $cat['lang'],\n                    $PMF_LANG['ad_quick_entry']\n                );\n\n                if ($cat['lang'] == $lang) {\n                    // add sub category (if current language)\n                    printf(\n                        '<a class=\"btn btn-info btn-sm\" href=\"?action=addcategory&amp;cat=%s&amp;lang=%s\"><i aria-hidden=\"true\" class=\"fa fa-plus-square\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $cat['lang'],\n                        $PMF_LANG['ad_quick_category']\n                    );\n\n                    // rename (sub) category (if current language)\n                    printf(\n                        '<a class=\"btn btn-info btn-sm\" href=\"?action=editcategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-edit\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $PMF_LANG['ad_kateg_rename']\n                    );\n                }\n\n                // translate category (always)\n                printf(\n                    '<a class=\"btn btn-info btn-sm\" href=\"?action=translatecategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-globe\" title=\"%s\"></i></a> ',\n                    $cat['id'],\n                    $PMF_LANG['ad_categ_translate']\n                );\n\n                // delete (sub) category (if current language)\n                if (count($category->getChildren($cat['id'])) == 0 && $cat['lang'] == $lang) {\n                    printf(\n                        '<a class=\"btn btn-danger btn-sm\" href=\"?action=deletecategory&amp;cat=%s&amp;catlang=%s\"><i aria-hidden=\"true\" class=\"fa fa-trash\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $cat['lang'],\n                        $PMF_LANG['ad_categ_delete']\n                    );\n                } else {\n                    echo '<a class=\"btn btn-inverse btn-sm\" style=\"cursor: not-allowed;\"><i aria-hidden=\"true\" class=\"fa fa-trash\"></i></a>';\n                }\n\n                if ($cat['lang'] == $lang) {\n                    // cut category (if current language)\n                    printf(\n                        '<a class=\"btn btn-warning btn-sm\" href=\"?action=cutcategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-cut\" title=\"%s\"></i></a>  ',\n                        $cat['id'],\n                        $PMF_LANG['ad_categ_cut']\n                    );\n                }\n                echo '</span>';\n                echo '</div>';\n\n                if ($hasParent) {\n                    echo '</div>';\n                }\n\n                $lastCatId = $cat['id'];\n            }\n            ?>\n      <div class=\"d-flex flex-row\">\n      <form method=\"post\">\n        <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n        <button class=\"pmf-save-category-order text-white btn btn-primary mt-3 mr-1\">\n            <?= $PMF_LANG['ad_categ_save_order'] ?>\n        </button>\n      </form>\n      </div>\n      <p class=\"alert alert-info mt-4\"><?= $PMF_LANG['ad_categ_remark'] ?></p>\n    </div>\n  </div>\n  <script src=\"assets/js/category.js\"></script>\n            <?php\n        } else {\n            echo $PMF_LANG['err_NotAuth'];\n        }\n", "<?php\n\n/**\n * The main administration file for the news.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-02-23\n */\n\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\News;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$news = new News($faqConfig);\n\n$csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfCheck = false;\n} else {\n    $csrfCheck = true;\n}\n\nif ('add-news' == $action && $user->perm->hasPermission($user->getUserId(), 'addnews')) { ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_add'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <form id=\"faqEditor\" name=\"faqEditor\" action=\"?action=save-news\" method=\"post\" novalidate>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"newsheader\">\n                            <?= $PMF_LANG['ad_news_header'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"newsheader\" id=\"newsheader\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"news\"><?= $PMF_LANG['ad_news_text'] ?>:</label>\n                        <div class=\"col-9\">\n                            <textarea name=\"news\" rows=\"5\" class=\"form-control\" id=\"news\"></textarea>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorName\"><?= $PMF_LANG['ad_news_author_name'] ?></label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"authorName\" id=\"authorName\"\n                                   value=\"<?= $user->getUserData('display_name') ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorEmail\"><?= $PMF_LANG['ad_news_author_email'] ?></label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"email\" name=\"authorEmail\" id=\"authorEmail\"\n                                   value=\"<?= $user->getUserData('email') ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"active\">\n                            <?= $PMF_LANG['ad_news_set_active'] ?>:\n                        </label>\n                        <div class=\"col-9 checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"active\" id=\"active\" value=\"y\">\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"comment\"><?= $PMF_LANG['ad_news_allowComments'] ?></label>\n                        <div class=\"col-9 checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"comment\" id=\"comment\" value=\"y\">\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"link\"><?= $PMF_LANG['ad_news_link_url'] ?></label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"link\" id=\"link\" placeholder=\"http://www.example.com/\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"linkTitle\"><?= $PMF_LANG['ad_news_link_title'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"linkTitle\" id=\"linkTitle\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" ><?= $PMF_LANG['ad_news_link_target'] ?></label>\n                        <div class=\"col-9 radio\">\n                            <label>\n                                <input type=\"radio\" name=\"target\" value=\"blank\">\n                                <?= $PMF_LANG['ad_news_link_window'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"self\">\n                                <?= $PMF_LANG['ad_news_link_faq'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"parent\">\n                                <?= $PMF_LANG['ad_news_link_parent'] ?>\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"langTo\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n                        <div class=\"col-9\">\n                            <?= LanguageHelper::renderSelectLanguage($faqLangCode, false, [], 'langTo') ?>\n                        </div>\n                    </div>\n\n                    <legend><?= $PMF_LANG['ad_news_expiration_window'] ?></legend>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateStart\"><?= $PMF_LANG['ad_news_from'] ?></label>\n                        <div class=\"col-3\">\n                            <input type=\"date\" name=\"dateStart\" id=\"dateStart\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateEnd\"><?= $PMF_LANG['ad_news_to'] ?></label>\n                        <div class=\"col-3\">\n                            <input type=\"date\" name=\"dateEnd\" id=\"dateEnd\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                      <div class=\"col-12\">\n                        <div class=\"btn-group float-right mt-2\" role=\"group\">\n                          <a class=\"btn btn-info\" href=\"?action=news\">\n                            <?= $PMF_LANG['ad_entry_back'] ?>\n                          </a>\n                          <button class=\"btn btn-primary\" type=\"submit\">\n                            <?= $PMF_LANG['ad_news_add'] ?>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    <?php\n} elseif ('news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    ?>\n         <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n              <?= $PMF_LANG['msgNews'] ?>\n          </h1>\n          <div class=\"btn-toolbar mb-2 mb-md-0\">\n            <div class=\"btn-group mr-2\">\n              <a href=\"?action=add-news\">\n                  <button class=\"btn btn-sm     btn-success\">\n                    <i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_menu_news_add'] ?>\n                  </button>\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <table class=\"table table-hover\">\n                <thead class=\"thead-dark\">\n                    <tr>\n                        <th><?= $PMF_LANG['ad_news_headline'] ?></th>\n                        <th><?= $PMF_LANG['ad_news_date'] ?></th>\n                        <th colspan=\"2\">&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n    <?php\n    $newsHeader = $news->getNewsHeader();\n    $date = new Date($faqConfig);\n    if (count($newsHeader)) {\n        foreach ($newsHeader as $newsItem) {\n            ?>\n                    <tr>\n                        <td><?= $newsItem['header'] ?></td>\n                        <td><?= $date->format($newsItem['date']) ?></td>\n                        <td>\n                            <a class=\"btn btn-primary\" href=\"?action=edit-news&amp;id=<?= $newsItem['id'] ?>\">\n                                <span title=\"<?= $PMF_LANG['ad_news_update'] ?>\" class=\"fa fa-edit\"></span>\n                            </a>\n                        </td>\n                        <td>\n                            <a class=\"btn btn-danger\" href=\"?action=delete-news&amp;id=<?= $newsItem['id'] ?>\">\n                                <span title=\"<?= $PMF_LANG['ad_news_delete'] ?>\" class=\"fa fa-trash\"></span>\n                            </a>\n                        </td>\n                    </tr>\n            <?php\n        }\n    } else {\n        printf(\n            '<tr><td colspan=\"3\">%s</td></tr>',\n            $PMF_LANG['ad_news_nodata']\n        );\n    }\n    ?>\n                </tbody>\n                </table>\n            </div>\n        </div>\n    <?php\n} elseif ('edit-news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n    $newsData = $news->getNewsEntry($id, true);\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_edit'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <form  action=\"?action=update-news\" method=\"post\" accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"id\" value=\"<?= $newsData['id'] ?>\">\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"newsheader\"><?= $PMF_LANG['ad_news_header'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"newsheader\" id=\"newsheader\" class=\"form-control\"\n                                   value=\"<?= $newsData['header'] ?? '' ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"news\"><?= $PMF_LANG['ad_news_text'] ?>:</label>\n                        <div class=\"col-9\">\n                            <noscript>Please enable JavaScript to use the WYSIWYG editor!</noscript>\n                            <textarea id=\"news\" name=\"news\" class=\"form-control\" rows=\"5\"><?php\n                            if (isset($newsData['content'])) {\n                                echo htmlspecialchars($newsData['content'], ENT_QUOTES);\n                            } ?></textarea>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorName\"><?= $PMF_LANG['ad_news_author_name'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"authorName\" value=\"<?= $newsData['authorName'] ?>\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorEmail\"><?= $PMF_LANG['ad_news_author_email'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"email\" name=\"authorEmail\" value=\"<?= $newsData['authorEmail'] ?>\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"active\">\n                            <?= $PMF_LANG['ad_news_set_active'] ?>:\n                        </label>\n                        <div class=\"col-9\">\n                            <label>\n                                <input type=\"checkbox\" name=\"active\" id=\"active\" value=\"y\"\n                                    <?php if (isset($newsData['active']) && $newsData['active']) {\n                                        echo ' checked';\n                                    } ?>\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"comment\"><?= $PMF_LANG['ad_news_allowComments'] ?></label>\n                        <div class=\"col-9\">\n                            <label>\n                                <input type=\"checkbox\" name=\"comment\" id=\"comment\" value=\"y\"\n                                <?php if (isset($newsData['allowComments']) && $newsData['allowComments']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"link\"><?= $PMF_LANG['ad_news_link_url'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" id=\"link\" name=\"link\" value=\"<?= $newsData['link'] ?>\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"linkTitle\"><?= $PMF_LANG['ad_news_link_title'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" id=\"linkTitle\" name=\"linkTitle\" value=\"<?= $newsData['linkTitle'] ?>\"\n                            class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"target\"><?= $PMF_LANG['ad_news_link_target'] ?></label>\n                        <div class=\"col-9\">\n                        <label>\n                                <input type=\"radio\" name=\"target\" value=\"blank\"\n                                <?php if ('blank' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_window'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"self\"\n                                <?php if ('self' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_faq'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"parent\"\n                                <?php if ('parent' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_parent'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"langTo\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n                        <div class=\"col-9\">\n                        <?= LanguageHelper::renderSelectLanguage($newsData['lang'], false, [], 'langTo') ?>\n                        </div>\n                    </div>\n    <?php\n    $dateStart = ($newsData['dateStart'] != '00000000000000' ? Date::createIsoDate($newsData['dateStart'], 'Y-m-d') : '');\n    $dateEnd = ($newsData['dateEnd'] != '99991231235959' ? Date::createIsoDate($newsData['dateEnd'], 'Y-m-d') : '');\n    ?>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateStart\"><?= $PMF_LANG['ad_news_from'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"date\" name=\"dateStart\" id=\"dateStart\" class=\"form-control\" value=\"<?= $dateStart ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateEnd\"><?= $PMF_LANG['ad_news_to'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"date\"  name=\"dateEnd\" id=\"dateEnd\" class=\"form-control\" value=\"<?= $dateEnd ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                      <div class=\"col-12\">\n                        <div class=\"btn-group float-right mt-2\" role=\"group\">\n                          <button class=\"btn btn-primary\" type=\"submit\">\n                            <?= $PMF_LANG['ad_news_edit'] ?>\n                          </button>\n                          <a class=\"btn btn-info\" href=\"?action=news\">\n                            <?= $PMF_LANG['ad_entry_back'] ?>\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                </form>\n    <?php\n    $newsId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n    $oComment = new Comments($faqConfig);\n    $comments = $oComment->getCommentsData($newsId, CommentType::NEWS);\n    if (count($comments) > 0) {\n        ?>\n                <div class=\"form-group row\"><strong><?= $PMF_LANG['ad_entry_comment'] ?></strong></div>\n        <?php\n    }\n    foreach ($comments as $item) {\n        ?>\n                <div class=\"form-group row\">\n                    <?= $PMF_LANG['ad_entry_commentby'] ?>\n                    <a href=\"mailto:<?= $item['email'] ?>\">\n                        <?= $item['user'] ?>\n                    </a>:<br>\n                    <?= $item['content'] ?><br>\n                    <?= $PMF_LANG['newsCommentDate'] . Date::createIsoDate($item['date'], 'Y-m-d H:i', false) ?>\n                    <a href=\"?action=delcomment&artid=<?= $newsId ?>&cmtid=<?= $item['id'] ?>&type=<?= CommentType::NEWS ?>\">\n                        <i aria-hidden=\"true\" class=\"fa fa-trash\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <?php\n    }\n} elseif ('save-news' == $action && $user->perm->hasPermission($user->getUserId(), 'addnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $header = Filter::filterInput(INPUT_POST, 'newsheader', FILTER_UNSAFE_RAW);\n    $content = Filter::filterInput(INPUT_POST, 'news', FILTER_SANITIZE_SPECIAL_CHARS);\n    $author = Filter::filterInput(INPUT_POST, 'authorName', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'authorEmail', FILTER_VALIDATE_EMAIL);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $link = Filter::filterInput(INPUT_POST, 'link', FILTER_UNSAFE_RAW);\n    $linkTitle = Filter::filterInput(INPUT_POST, 'linkTitle', FILTER_UNSAFE_RAW);\n    $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_UNSAFE_RAW);\n    $target = Filter::filterInput(INPUT_POST, 'target', FILTER_UNSAFE_RAW);\n\n    $newsData = array(\n        'lang' => $newsLang,\n        'header' => $header,\n        'content' => html_entity_decode($content),\n        'authorName' => $author,\n        'authorEmail' => $email,\n        'active' => (is_null($active)) ? 'n' : 'y',\n        'comment' => (is_null($comment)) ? 'n' : 'y',\n        'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000',\n        'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959',\n        'link' => $link,\n        'linkTitle' => $linkTitle,\n        'date' => date('YmdHis'),\n        'target' => (is_null($target)) ? '' : $target,\n    );\n\n    if ($news->addNewsEntry($newsData)) {\n        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_updatesuc']);\n    } else {\n        printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_news_insertfail']);\n    }\n    printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n    ?>\n            </div>\n        </div>\n    <?php\n} elseif ('update-news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $header = Filter::filterInput(INPUT_POST, 'newsheader', FILTER_UNSAFE_RAW);\n    $content = Filter::filterInput(INPUT_POST, 'news', FILTER_SANITIZE_SPECIAL_CHARS);\n    $author = Filter::filterInput(INPUT_POST, 'authorName', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'authorEmail', FILTER_VALIDATE_EMAIL);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $link = Filter::filterInput(INPUT_POST, 'link', FILTER_UNSAFE_RAW);\n    $linkTitle = Filter::filterInput(INPUT_POST, 'linkTitle', FILTER_UNSAFE_RAW);\n    $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_UNSAFE_RAW);\n    $target = Filter::filterInput(INPUT_POST, 'target', FILTER_UNSAFE_RAW);\n\n    $newsData = [\n        'lang' => $newsLang,\n        'header' => $header,\n        'content' => html_entity_decode($content),\n        'authorName' => $author,\n        'authorEmail' => $email,\n        'active' => (is_null($active)) ? 'n' : 'y',\n        'comment' => (is_null($comment)) ? 'n' : 'y',\n        'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000',\n        'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959',\n        'link' => $link,\n        'linkTitle' => $linkTitle,\n        'date' => date('YmdHis'),\n        'target' => (is_null($target)) ? '' : $target,\n    ];\n\n    $newsId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n    if ($news->updateNewsEntry((int) $newsId, $newsData)) {\n        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_updatesuc']);\n    } else {\n        printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_news_updatefail']);\n    }\n    printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n    ?>\n            </div>\n        </div>\n    <?php\n} elseif ('delete-news' == $action && $user->perm->hasPermission($user->getUserId(), 'delnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $precheck = Filter::filterInput(INPUT_POST, 'really', FILTER_UNSAFE_RAW, 'no');\n    $deleteId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n\n    if ('no' == $precheck) {\n        ?>\n    <div class=\"form-group row\"><?= $PMF_LANG['ad_news_del'];\n    ?></div>\n    <div class=\"text-center\">\n    <form action=\"?action=delete-news\" method=\"post\" accept-charset=\"utf-8\">\n    <input type=\"hidden\" name=\"id\" value=\"<?= $deleteId ?>\">\n    <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n    <input type=\"hidden\" name=\"really\" value=\"yes\">\n        <button class=\"btn btn-warning\" type=\"submit\" name=\"submit\">\n            <?= $PMF_LANG['ad_news_yesdelete'];\n            ?>\n        </button>\n        <a class=\"btn btn-inverse\" onclick=\"history.back();\">\n            <?= $PMF_LANG['ad_news_nodelete'];\n            ?>\n        </a>\n    </form>\n    </div>\n    \n        <?php\n    } else {\n        if ($csrfCheck) {\n            $deleteId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n            $news->deleteNews((int)$deleteId);\n            printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_delsuc']);\n            printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n        }\n    }\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * Shows the page with the FAQ record and - when available - the user comments.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <larstiedemann@yahoo.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2002-08-27\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentException;\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Glossary;\nuse phpMyFAQ\\Helper\\AttachmentHelper;\nuse phpMyFAQ\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\Helper\\FaqHelper as HelperFaq;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Helper\\SearchHelper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\LinkVerifier;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Relation;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Services;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\nuse phpMyFAQ\\Visits;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = new Captcha($faqConfig);\n$oGlossary = new Glossary($faqConfig);\n$faqTagging = new Tags($faqConfig);\n$faqRelation = new Relation($faqConfig);\n$faqRating = new Rating($faqConfig);\n$faqComment = new Comments($faqConfig);\n$markDown = new \\ParsedownExtra();\n$faqHelper = new HelperFaq($faqConfig);\n$faqPermission = new FaqPermission($faqConfig);\n$attachmentHelper = new AttachmentHelper();\n\nif (is_null($user)) {\n    $user = new CurrentUser($faqConfig);\n}\n\n$faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n\n$captcha->setSessionId($sids);\nif (!is_null($showCaptcha)) {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\n$currentCategory = $cat;\n\n$recordId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\n\n// Get all data from the FAQ record\nif (0 === (int)$solutionId) {\n    $faq->getRecord($recordId);\n} else {\n    $faq->getRecordBySolutionId($solutionId);\n}\n\nif (isset($faq->faqRecord['id'])) {\n    $recordId = $faq->faqRecord['id'];\n}\n\ntry {\n    $faqSession->userTracking('article_view', $recordId);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n$faqVisits = new Visits($faqConfig);\n$faqVisits->logViews((int) $recordId);\n\n$question = $faq->getRecordTitle($recordId);\nif ($faqConfig->get('main.enableMarkdownEditor')) {\n    $answer = $markDown->text($faq->faqRecord['content']);\n} else {\n    $answer = $faqHelper->renderMarkupContent($faq->faqRecord['content']);\n}\n\n// Rewrite URL fragments\n$currentUrl = htmlspecialchars(\"//{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}\", ENT_QUOTES, 'UTF-8');\n$answer = $faqHelper->rewriteUrlFragments($answer, $currentUrl);\n\n// Add Glossary entries for answers only\n$answer = $oGlossary->insertItemsIntoContent($answer);\n\n// Set the path of the current category\n$categoryName = $category->getPath($currentCategory, ' &raquo; ', true, '');\n\n$highlight = Filter::filterInput(INPUT_GET, 'highlight', FILTER_UNSAFE_RAW);\nif (\n    !is_null($highlight) && $highlight != '/' && $highlight != '<' && $highlight != '>' && Strings::strlen(\n        $highlight\n    ) > 3\n) {\n    $highlight = str_replace(\"'\", '\u00b4', $highlight);\n    $highlight = str_replace(['^', '.', '?', '*', '+', '{', '}', '(', ')', '[', ']'], '', $highlight);\n    $highlight = preg_quote($highlight, '/');\n    $searchItems = explode(' ', $highlight);\n\n    foreach ($searchItems as $item) {\n        if (Strings::strlen($item) > 2) {\n            $question = Utils::setHighlightedString($question, $item);\n            $answer = Utils::setHighlightedString($answer, $item);\n        }\n    }\n}\n\n$linkVerifier = new LinkVerifier($faqConfig);\n$linkArray = $linkVerifier->getUrlPool();\nif (isset($linkArray['href'])) {\n    foreach (array_unique($linkArray['href']) as $_url) {\n        $xpos = strpos($_url, 'index.php?action=faq');\n        if (!($xpos === false)) {\n            // Get the FaqHelper link title\n            $matches = [];\n            preg_match('/id=([\\d]+)/ism', $_url, $matches);\n            $_id = $matches[1];\n            $_title = $faq->getRecordTitle($_id);\n            $_link = substr($_url, $xpos + 9);\n            if (strpos($_url, '&amp;') === false) {\n                $_link = str_replace('&', '&amp;', $_link);\n            }\n            $oLink = new Link($faqConfig->getDefaultUrl() . $_link, $faqConfig);\n            $oLink->itemTitle = $oLink->tooltip = $_title;\n            $newFaqPath = $oLink->toString();\n            $answer = str_replace($_url, $newFaqPath, $answer);\n        }\n    }\n}\n\n// List all faq attachments\nif ($faqConfig->get('records.disableAttachments') && 'yes' == $faq->faqRecord['active']) {\n    try {\n        $attList = AttachmentFactory::fetchByRecordId($faqConfig, $recordId);\n        $answer .= $attachmentHelper->renderAttachmentList($attList);\n    } catch (AttachmentException $e) {\n        // handle exception\n    }\n}\n\n// List all categories for this faq\n$htmlAllCategories = '';\n$multiCategories = $category->getCategoriesFromFaq($recordId);\nif (count($multiCategories) > 1) {\n    foreach ($multiCategories as $multiCat) {\n        $path = $category->getPath($multiCat['id'], ' &raquo; ', true, 'breadcrumb-related-categories');\n        if ('' === trim($path)) {\n            continue;\n        }\n        $htmlAllCategories .= $path;\n    }\n}\n\n// Related FAQs\n$faqSearchResult->reviewResultSet(\n    $faqRelation->getAllRelatedByQuestion(\n        $faq->faqRecord['title'],\n        $faq->faqRecord['keywords']\n    )\n);\n\n$searchHelper = new SearchHelper($faqConfig);\n$relatedFaqs = $searchHelper->renderRelatedFaqs($faqSearchResult, $recordId);\n\n// Show link to edit the faq?\n$editThisEntry = '';\nif ($user->perm->hasPermission($user->getUserId(), 'edit_faq')) {\n    $editThisEntry = sprintf(\n        '<i aria-hidden=\"true\" class=\"fa fa-pencil\"></i> <a class=\"data\" href=\"./admin/index.php?action=editentry&id=%d&lang=%s\">%s</a>',\n        $recordId,\n        $lang,\n        $PMF_LANG['ad_entry_edit_1'] . ' ' . $PMF_LANG['ad_entry_edit_2']\n    );\n}\n\n// Is the faq expired?\n$expired = (date('YmdHis') > $faq->faqRecord['dateEnd']);\n\n// Number of comments\n$numComments = $faqComment->getNumberOfComments();\n\n// Does the user have the right to add a comment?\nif (\n    (-1 === $user->getUserId() && !$faqConfig->get('records.allowCommentsForGuests')) ||\n    ($faq->faqRecord['active'] === 'no') || ('n' === $faq->faqRecord['comment']) || $expired\n) {\n    $commentMessage = $PMF_LANG['msgWriteNoComment'];\n} else {\n    $commentMessage = sprintf(\n        '%s<a href=\"#\" class=\"show-comment-form\">%s</a>',\n        $PMF_LANG['msgYouCan'],\n        $PMF_LANG['msgWriteComment']\n    );\n    $template->parseBlock(\n        'mainPageContent',\n        'enableComments',\n        [\n            'numberOfComments' => sprintf(\n                '%d %s',\n                $numComments[$recordId] ?? 0,\n                $PMF_LANG['ad_start_comments']\n            ),\n        ]\n    );\n}\n\n$translationUrl = sprintf(\n    str_replace(\n        '%',\n        '%%',\n        Link::getSystemRelativeUri('index.php')\n    ) . 'index.php?%saction=translate&amp;cat=%s&amp;id=%d&amp;srclang=%s',\n    $sids,\n    $currentCategory,\n    $recordId,\n    $lang\n);\n\n$availableLanguages = $faqConfig->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\nif (!empty($availableLanguages) && count($availableLanguages) > 1) {\n    $template->parseBlock(\n        'mainPageContent',\n        'switchLanguage',\n        [\n            'msgChangeLanguage' => $PMF_LANG['msgLanguageSubmit'],\n        ]\n    );\n}\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'addtranslation') &&\n    !empty($availableLanguages) && count($availableLanguages) > 1\n) {\n    $template->parseBlock(\n        'mainPageContent',\n        'addTranslation',\n        [\n            'msgTranslate' => $PMF_LANG['msgTranslate'],\n        ]\n    );\n}\n\nif ($user->perm->hasPermission($user->getUserId(), 'edit_faq') && !empty($faq->faqRecord['notes'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'privateNotes',\n        [\n            'notesHeader' => $PMF_LANG['ad_admin_notes'],\n            'notes' => $faq->faqRecord['notes']\n        ]\n    );\n}\n\nif ('-' !== $faqTagging->getAllLinkTagsById($recordId)) {\n    $template->parseBlock(\n        'mainPageContent',\n        'tagsAvailable',\n        [\n            'renderTags' => $PMF_LANG['msg_tags'] . ': ' . $faqTagging->getAllLinkTagsById($recordId),\n        ]\n    );\n}\n\nif ('' !== $htmlAllCategories) {\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedCategories',\n        [\n            'renderRelatedCategoriesHeader' => $PMF_LANG['msgArticleCategories'],\n            'renderRelatedCategories' => $htmlAllCategories,\n        ]\n    );\n}\n\nif ('' !== $relatedFaqs) {\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedFaqs',\n        [\n            'renderRelatedArticlesHeader' => $PMF_LANG['msg_related_articles'],\n            'renderRelatedArticles' => $relatedFaqs,\n        ]\n    );\n}\n\n$date = new Date($faqConfig);\n$captchaHelper = new CaptchaHelper($faqConfig);\n\n// We need some Links from social networks\n$faqServices = new Services($faqConfig);\n$faqServices->setCategoryId($cat);\n$faqServices->setFaqId($id);\n$faqServices->setLanguage($lang);\n$faqServices->setQuestion($faq->getRecordTitle($id));\n\n// Check if category ID and FAQ ID are linked together\nif (!$category->categoryHasLinkToFaq($recordId, $currentCategory)) {\n    $http->setStatus(404);\n}\n\n// Check if author name should be visible according to GDPR option\nif ($user->getUserVisibilityByEmail($faq->faqRecord['email'])) {\n    $author = $faq->faqRecord['author'];\n} else {\n    $author = 'n/a';\n}\n\n$template->parse(\n    'mainPageContent',\n    [\n        'baseHref' => $faqSystem->getSystemUri($faqConfig),\n        'solutionId' => $faq->faqRecord['solution_id'],\n        'solutionIdLink' => Link::getSystemRelativeUri() . '?solution_id=' . $faq->faqRecord['solution_id'],\n        'question' => $question,\n        'answer' => $answer,\n        'faqDate' => $date->format($faq->faqRecord['date']),\n        'faqAuthor' => $author,\n        'editThisEntry' => $editThisEntry,\n        'msgPdf' => $PMF_LANG['msgPDF'],\n        'msgPrintFaq' => $PMF_LANG['msgPrintArticle'],\n        'sendToFriend' => $faqHelper->renderSendToFriend($faqServices->getSuggestLink()),\n        'shareOnTwitter' => $faqHelper->renderTwitterShareLink($faqServices->getShareOnTwitterLink()),\n        'linkToPdf' => $faqServices->getPdfLink(),\n        'translationUrl' => $translationUrl,\n        'languageSelection' => LanguageHelper::renderSelectLanguage(\n            $faqLangCode,\n            false,\n            $availableLanguages,\n            'translation'\n        ),\n        'msgTranslateSubmit' => $PMF_LANG['msgTranslateSubmit'],\n        'saveVotingPATH' => sprintf(\n            str_replace(\n                '%',\n                '%%',\n                $faqConfig->getDefaultUrl()\n            ) . 'index.php?%saction=savevoting',\n            $sids\n        ),\n        'saveVotingID' => $recordId,\n        'saveVotingIP' => $_SERVER['REMOTE_ADDR'],\n        'msgAverageVote' => $PMF_LANG['msgAverageVote'],\n        'renderVotingStars' => '',\n        'printVotings' => $faqRating->getVotingResult($recordId),\n        'switchLanguage' => $faqHelper->renderChangeLanguageSelector($faq, $currentCategory),\n        'msgVoteUsability' => $PMF_LANG['msgVoteUsability'],\n        'msgVoteBad' => $PMF_LANG['msgVoteBad'],\n        'msgVoteGood' => $PMF_LANG['msgVoteGood'],\n        'msgVoteSubmit' => $PMF_LANG['msgVoteSubmit'],\n        'writeCommentMsg' => $commentMessage,\n        'msgWriteComment' => $PMF_LANG['msgWriteComment'],\n        'id' => $recordId,\n        'lang' => $lang,\n        'msgCommentHeader' => $PMF_LANG['msgCommentHeader'],\n        'msgNewContentName' => $PMF_LANG['msgNewContentName'],\n        'msgNewContentMail' => $PMF_LANG['msgNewContentMail'],\n        'defaultContentMail' => ($user instanceof CurrentUser) ? $user->getUserData('email') : '',\n        'defaultContentName' => ($user instanceof CurrentUser) ? $user->getUserData('display_name') : '',\n        'msgYourComment' => $PMF_LANG['msgYourComment'],\n        'msgNewContentSubmit' => $PMF_LANG['msgNewContentSubmit'],\n        'captchaFieldset' => $captchaHelper->renderCaptcha($captcha, 'writecomment', $PMF_LANG['msgCaptcha'], $auth),\n        'renderComments' => $faqComment->getComments($recordId, CommentType::FAQ),\n        'msg_about_faq' => $PMF_LANG['msg_about_faq'],\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => $categoryName\n    ]\n);\n", "<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = $faqLink->getCurrentUrl();\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            $faqConfig->getDefaultUrl(),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => $faqSystem->getSystemUri($faqConfig),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlspecialchars($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlspecialchars($keywords),\n    'metaPublisher' => $faqConfig->get('main.metaPublisher'),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlspecialchars($searchTerm, ENT_QUOTES),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => $user->getUserData('display_name'),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => $faqSystem->getSystemUri($faqConfig) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"' . $faqSystem->getSystemUri($faqConfig) . 'addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = $faqConfig->getDefaultUrl();\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $link = new Link($url, $faqConfig);\n    $http->setStatus(301);\n    $http->redirect($link->toString());\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * Shows the page with the news record and - when available - the user\n * comments.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2006-07-23\n */\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Glossary;\nuse phpMyFAQ\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = new Captcha($faqConfig);\n$comment = new Comments($faqConfig);\n\n$captcha->setSessionId($sids);\nif (!is_null($showCaptcha)) {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\n$oNews = new News($faqConfig);\n$newsId = Filter::filterInput(INPUT_GET, 'newsid', FILTER_VALIDATE_INT);\n\nif (is_null($newsId)) {\n    header('Location: http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['SCRIPT_NAME']));\n    exit();\n}\n\ntry {\n    $faqSession->userTracking('news_view', $newsId);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n// Define the header of the page\n$newsMainHeader = $faqConfig->getTitle() . $PMF_LANG['msgNews'];\n\n// Get all data from the news record\n$news = $oNews->getNewsEntry($newsId);\n\n$newsContent = $news['content'];\n$newsHeader = $news['header'];\n\n// Add Glossary entries\n$oGlossary = new Glossary($faqConfig);\n$newsContent = $oGlossary->insertItemsIntoContent($newsContent);\n$newsHeader = $oGlossary->insertItemsIntoContent($newsHeader);\n\n// Add information link if existing\nif (strlen($news['link']) > 0) {\n    $newsContent .= sprintf(\n        '</p><p>%s<a href=\"%s\" target=\"%s\">%s</a>',\n        $PMF_LANG['msgInfo'],\n        $news['link'],\n        $news['target'],\n        $news['linkTitle']\n    );\n}\n\n// Show link to edit the news?\n$editThisEntry = '';\nif ($user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    $editThisEntry = sprintf(\n        '<a href=\"./admin/index.php?action=news&amp;do=edit&amp;id=%d\">%s</a>',\n        $newsId,\n        $PMF_LANG['ad_menu_news_edit']\n    );\n}\n\n// Is the news item expired?\n$expired = (date('YmdHis') > $news['dateEnd']);\n\n// Does the user have the right to add a comment?\nif (\n    (-1 === $user->getUserId() && !$faqConfig->get('records.allowCommentsForGuests')) ||\n    (!$news['active']) || (!$news['allowComments']) || $expired\n) {\n    $commentMessage = $PMF_LANG['msgWriteNoComment'];\n} else {\n    $commentMessage = sprintf('<a href=\"#\" class=\"show-comment-form\">%s</a>', $PMF_LANG['newsWriteComment']);\n}\n\n// date of news entry\nif ($news['active'] && (!$expired)) {\n    $date = new Date($faqConfig);\n    $newsDate = sprintf(\n        '%s<span id=\"newsLastUpd\">%s</span>',\n        $PMF_LANG['msgLastUpdateArticle'],\n        $date->format($news['date'])\n    );\n} else {\n    $newsDate = '';\n}\n\n$captchaHelper = new CaptchaHelper($faqConfig);\n\n$template->parse(\n    'mainPageContent',\n    [\n        'writeNewsHeader' => $newsMainHeader,\n        'writeHeader' => $newsHeader,\n        'mainPageContent' => $newsContent,\n        'writeDateMsg' => $newsDate,\n        'msgAboutThisNews' => $PMF_LANG['msgAboutThisNews'],\n        'writeAuthor' => ($news['active'] && (!$expired)) ? $PMF_LANG['msgAuthor'] . ': ' . $news['authorName'] : '',\n        'editThisEntry' => $editThisEntry,\n        'writeCommentMsg' => $commentMessage,\n        'msgWriteComment' => $PMF_LANG['newsWriteComment'],\n        'newsId' => $newsId,\n        'newsLang' => $news['lang'],\n        'msgCommentHeader' => $PMF_LANG['msgCommentHeader'],\n        'msgNewContentName' => $PMF_LANG['msgNewContentName'],\n        'msgNewContentMail' => $PMF_LANG['msgNewContentMail'],\n        'defaultContentMail' => ($user instanceof CurrentUser) ? $user->getUserData('email') : '',\n        'defaultContentName' => ($user instanceof CurrentUser) ? $user->getUserData('display_name') : '',\n        'msgYourComment' => $PMF_LANG['msgYourComment'],\n        'msgNewContentSubmit' => $PMF_LANG['msgNewContentSubmit'],\n        'captchaFieldset' => $captchaHelper->renderCaptcha($captcha, 'writecomment', $PMF_LANG['msgCaptcha'], $auth),\n        'renderComments' => $comment->getComments($newsId, CommentType::NEWS),\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => $newsMainHeader\n    ]\n);\n", "<?php\n\n/**\n * Bootstrap phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-03-07\n */\n\nuse Elasticsearch\\ClientBuilder;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Init;\n\n//\n// Debug mode:\n// - false debug mode disabled\n// - true  debug mode enabled\nconst DEBUG = false;\nif (DEBUG) {\n    ini_set('display_errors', '1');\n    ini_set('display_startup_errors', '1');\n    error_reporting(-1);\n} else {\n    error_reporting(0);\n}\n\n//\n// Fix the PHP include path if PMF is running under a \"strange\" PHP configuration\n//\n$foundCurrPath = false;\n$includePaths = explode(PATH_SEPARATOR, ini_get('include_path'));\n$i = 0;\nwhile ((!$foundCurrPath) && ($i < count($includePaths))) {\n    if ('.' == $includePaths[$i]) {\n        $foundCurrPath = true;\n    }\n    ++$i;\n}\nif (!$foundCurrPath) {\n    ini_set('include_path', '.' . PATH_SEPARATOR . ini_get('include_path'));\n}\n\n//\n// Tweak some PHP configuration values\n// Warning: be sure the server has enough memory and stack for PHP\n//\nini_set('pcre.backtrack_limit', '100000000');\nini_set('pcre.recursion_limit', '100000000');\n\n//\n// Include constants\n//\nrequire 'constants.php';\n\n//\n// Setting up autoloader\n//\nrequire 'autoload.php';\n\n//\n// Check if multisite/multisite.php exist for Multisite support\n//\nif (file_exists(PMF_ROOT_DIR . '/multisite/multisite.php') && 'cli' !== PHP_SAPI) {\n    require PMF_ROOT_DIR . '/multisite/multisite.php';\n}\n\n//\n// Read configuration and constants\n//\nif (!defined('PMF_MULTI_INSTANCE_CONFIG_DIR')) {\n    define('PMF_CONFIG_DIR', PMF_ROOT_DIR . '/config'); // Single instance configuration\n} else {\n    define('PMF_CONFIG_DIR', PMF_MULTI_INSTANCE_CONFIG_DIR); // Multi instance configuration\n}\n\n//\n// Check if config/database.php exist -> if not, redirect to installer\n//\nif (!file_exists(PMF_CONFIG_DIR . '/database.php')) {\n    header('Location: ./setup/index.php');\n    exit();\n}\n\nrequire PMF_CONFIG_DIR . '/database.php';\nrequire PMF_CONFIG_DIR . '/constants.php';\n\n/*\n * The directory where the translations reside\n */\ndefine('PMF_LANGUAGE_DIR', dirname(__DIR__) . '/lang');\n\n//\n// Set the error handler and the exception handler\n//\nset_error_handler('\\phpMyFAQ\\Core\\Error::errorHandler');\nset_exception_handler('\\phpMyFAQ\\Core\\Error::exceptionHandler');\n\n//\n// Create a database connection\n//\ntry {\n    Database::setTablePrefix($DB['prefix']);\n    $db = Database::factory($DB['type']);\n    $db->connect($DB['server'], $DB['user'], $DB['password'], $DB['db'], isset($DB['port']) ? $DB['port'] : null);\n} catch (Exception $e) {\n    Database::errorPage($e->getMessage());\n    exit(-1);\n}\n\n//\n// Fetch the configuration and add the database connection\n//\n$faqConfig = new Configuration($db);\n$faqConfig->getAll();\n\n$secureCookie = 'false';\nif (isset($_SERVER['HTTPS']) && strtoupper($_SERVER['HTTPS']) === 'ON') {\n    $secureCookie = 'true';\n}\n\n//\n// We always need a valid session!\n//\nini_set('session.use_only_cookies', '1'); // Avoid any PHP version to move sessions on URLs\nini_set('session.auto_start', '0'); // Prevent error to use session_start() if it's active in php.ini\nini_set('session.use_trans_sid', '0');\nini_set('session.cookie_samesite', 'Strict');\nini_set('session.cookie_httponly', 'true');\nini_set('session.cookie_secure', $secureCookie);\nini_set('url_rewriter.tags', '');\n\n//\n// Start the PHP session\n//\nInit::cleanRequest();\nif (defined('PMF_SESSION_SAVE_PATH') && !empty(PMF_SESSION_SAVE_PATH)) {\n    session_save_path(PMF_SESSION_SAVE_PATH);\n}\nsession_start();\n\n//\n// Connect to LDAP server, when LDAP support is enabled\n//\nif ($faqConfig->isLdapActive() && file_exists(PMF_CONFIG_DIR . '/ldap.php') && extension_loaded('ldap')) {\n    require PMF_CONFIG_DIR . '/ldap.php';\n    $faqConfig->setLdapConfig($PMF_LDAP);\n} else {\n    $ldap = null;\n}\n//\n// Connect to Elasticsearch if enabled\n//\nif ($faqConfig->get('search.enableElasticsearch') && file_exists(PMF_CONFIG_DIR . '/elasticsearch.php')) {\n    require PMF_CONFIG_DIR . '/elasticsearch.php';\n    require PMF_CONFIG_DIR . '/constants_elasticsearch.php';\n\n    $esClient = ClientBuilder::create()\n        ->setHosts($PMF_ES['hosts'])\n        ->build();\n\n    $faqConfig->setElasticsearch($esClient);\n    $faqConfig->setElasticsearchConfig($PMF_ES);\n}\n\n//\n// Build attachments path\n//\n$confAttachmentsPath = trim($faqConfig->get('records.attachmentsPath'));\nif ('/' == $confAttachmentsPath[0] || preg_match('%^[a-z]:(\\\\\\\\|/)%i', $confAttachmentsPath)) {\n    // If we're here, some windows or unix style absolute path was detected.\n    define('PMF_ATTACHMENTS_DIR', $confAttachmentsPath);\n} else {\n    // otherwise build the absolute path\n    $tmp = dirname(__DIR__) . DIRECTORY_SEPARATOR . $confAttachmentsPath;\n\n    // Check that nobody is traversing\n    if (0 === strpos((string)$tmp, dirname(__DIR__))) {\n        define('PMF_ATTACHMENTS_DIR', $tmp);\n    } else {\n        define('PMF_ATTACHMENTS_DIR', false);\n    }\n}\n\n//\n// Fix if phpMyFAQ is running behind a proxy server\n//\nif (!isset($_SERVER['HTTP_HOST'])) {\n    if (isset($_SERVER['HTTP_X_FORWARDED_SERVER'])) {\n        $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_SERVER'];\n    } else {\n        $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];\n    }\n}\n\n//\n// Fix undefined server variables in Windows IIS & CGI mode\n//\nif (!isset($_SERVER['SCRIPT_NAME'])) {\n    if (isset($_SERVER['SCRIPT_FILENAME'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['SCRIPT_FILENAME'];\n    } elseif (isset($_SERVER['PATH_TRANSLATED'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['PATH_TRANSLATED'];\n    } elseif (isset($_SERVER['PATH_INFO'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['PATH_INFO'];\n    } elseif (isset($_SERVER['SCRIPT_URL'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['SCRIPT_URL'];\n    }\n}\n", "<?php\n\n/**\n * The main category class. Yes, it's huge.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Lars Tiedemann <larstiedemann@yahoo.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Rudi Ferrari <bookcrossers@gmx.de>\n * @copyright 2004-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2004-02-16\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\CategoryEntity;\nuse phpMyFAQ\\Helper\\LanguageHelper;\n\n/**\n * Class Category\n *\n * @package phpMyFAQ\n */\nclass Category\n{\n    /**\n     * The categories as an array.\n     *\n     * @var array<int>\n     */\n    public $categories = [];\n\n    /**\n     * The category names as an array.\n     *\n     * @var array<string>\n     */\n    public $categoryName = [];\n\n    /**\n     * The image as an array.\n     *\n     * @var array\n     */\n    public array $image = [];\n\n    /**\n     * The tree with the tabs.\n     *\n     * @var array\n     */\n    public array $treeTab = [];\n    /**\n     * The category tree.\n     *\n     * @var array\n     */\n    private array $catTree = [];\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * User ID.\n     *\n     * @var int\n     */\n    private int $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var int[]\n     */\n    private array $groups = [-1];\n\n    /**\n     * The children nodes.\n     *\n     * @var array\n     */\n    private array $children = [];\n\n    /**\n     * The current language.\n     *\n     * @var string|null\n     */\n    private ?string $language = null;\n\n    /**\n     * Entity owners\n     *\n     * @var array<int, int>>\n     */\n    private $owner = [];\n\n    /**\n     * Entity moderators\n     *\n     * @var array<int, int>>\n     */\n    private $moderators = [];\n\n    /**\n     * Symbol for each item\n     * NOTE: We do not use this currently.\n     *\n     * @var string[]\n     */\n    private array $symbols = [\n        'vertical' => '|',\n        'plus' => '+',\n        'minus' => '-',\n        'space' => '&nbsp;',\n        'angle' => '-',\n        'medium' => '|-'\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config Configuration object\n     * @param int[] $groups Array with group IDs\n     * @param bool $withPerm With or without permission check\n     */\n    public function __construct(Configuration $config, array $groups = [], bool $withPerm = true)\n    {\n        $this->config = $config;\n\n        $this->setGroups($groups);\n        $this->setLanguage($this->config->getLanguage()->getLanguage());\n\n        $this->getOrderedCategories($withPerm);\n        foreach ($this->categoryName as $id) {\n            $this->categoryName[$id['id']]['level'] = $this->getLevelOf($this->categoryName[$id['id']]['id']);\n        }\n    }\n\n    /**\n     * @param int[] $groups\n     * @return Category\n     */\n    public function setGroups(array $groups): Category\n    {\n        if (0 === count($groups)) {\n            $groups = [-1];\n        }\n        $this->groups = $groups;\n        return $this;\n    }\n\n    /**\n     * @param string $language\n     * @return Category\n     */\n    public function setLanguage(string $language): Category\n    {\n        $this->language = $language;\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getUser(): int\n    {\n        return $this->user;\n    }\n\n    /**\n     * @return int[]\n     */\n    public function getGroups(): array\n    {\n        return $this->groups;\n    }\n\n    /**\n     * Returns all categories with ordered category IDs according to the user\n     * and group permissions.\n     *\n     * @param bool $withPermission With or without permission check\n     *\n     * @return array\n     */\n    private function getOrderedCategories(bool $withPermission = true): array\n    {\n        $where = '';\n\n        if ($withPermission) {\n            $where = sprintf(\n                '\n                WHERE\n                    ( fg.group_id IN (%s)\n                OR\n                    (fu.user_id = %d AND fg.group_id IN (%s)))\n                AND\n                    fc.active = 1',\n                implode(', ', $this->groups),\n                $this->user,\n                implode(', ', $this->groups)\n            );\n        }\n\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $where .= empty($where) ? '\n            WHERE' : '\n            AND';\n            $where .= \"\n                fc.lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n\n        $query = sprintf(\n            '\n            SELECT\n                fc.id AS id,\n                fc.lang AS lang,\n                fc.parent_id AS parent_id,\n                fc.name AS name,\n                fc.description AS description,\n                fc.user_id AS user_id,\n                fc.group_id AS group_id,\n                fc.active AS active,\n                fc.image AS image,\n                fc.show_home AS show_home\n            FROM\n                %sfaqcategories fc\n            LEFT JOIN\n                %sfaqcategory_group fg\n            ON\n                fc.id = fg.category_id\n            LEFT JOIN\n                %sfaqcategory_order fco\n            ON\n                fc.id = fco.category_id\n            LEFT JOIN\n                %sfaqcategory_user fu\n            ON\n                fc.id = fu.category_id\n            %s\n            GROUP BY\n                fc.id, fc.lang, fc.parent_id, fc.name, fc.description, fc.user_id, fc.group_id, fc.active, fc.image, \n                fc.show_home\n            ORDER BY\n                fco.position, fc.id ASC',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $where\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchArray($result)) {\n                $this->categoryName[(int)$row['id']] = $row;\n                $this->categories[(int)$row['id']] = $row;\n                $this->children[(int)$row['parent_id']][(int)$row['id']] = &$this->categoryName[(int)$row['id']];\n                $this->owner[(int)$row['id']] = &$row['user_id'];\n                $this->moderators[(int)$row['id']] = &$row['group_id'];\n            }\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Get the level of the item id.\n     *\n     * @param int $id Entity id\n     *\n     * @return int\n     */\n    private function getLevelOf(int $id): int\n    {\n        $alreadyListed = [$id];\n        $level = 0;\n\n        while ((isset($this->categoryName[$id]['parent_id'])) && ($this->categoryName[$id]['parent_id'] !== 0)) {\n            ++$level;\n            $id = (int)$this->categoryName[$id]['parent_id'];\n            if (in_array($id, $alreadyListed)) {\n                break;\n            } else {\n                array_push($alreadyListed, $id);\n            }\n        }\n\n        return $level;\n    }\n\n    /**\n     * @param int $userId\n     * @return Category\n     */\n    public function setUser(int $userId = -1): Category\n    {\n        $this->user = $userId;\n        return $this;\n    }\n\n    /**\n     * Gets the main categories and write them in an array.\n     *\n     * @param string $categories String of parent category ids\n     * @param bool $parentId Only top level categories?\n     *\n     * @return array\n     */\n    public function getCategories(string $categories, bool $parentId = true): array\n    {\n        $_query = '';\n        $query = sprintf(\n            '\n            SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, image, show_home\n            FROM\n                %sfaqcategories\n            WHERE ',\n            Database::getTablePrefix()\n        );\n\n        if (true === $parentId) {\n            $query .= 'parent_id = 0';\n        }\n        foreach (explode(',', $categories) as $cats) {\n            $_query .= ' OR parent_id = ' . $cats;\n        }\n        if (false === $parentId && 0 < Strings::strlen($_query)) {\n            $query .= Strings::substr($_query, 4);\n        }\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" AND lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n        $query .= ' ORDER BY id';\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $this->categories[$row['id']] = $row;\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Gets all categories and write them in an array.\n     *\n     * @return array\n     */\n    public function getAllCategories(): array\n    {\n        $categories = [];\n        $query = sprintf(\n            'SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, show_home, image\n            FROM\n                %sfaqcategories',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" WHERE lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $categories[(int)$row['id']] = [\n                'id' => (int)$row['id'],\n                'lang' => $row['lang'],\n                'parent_id' => (int)$row['parent_id'],\n                'name' => $row['name'],\n                'description' => $row['description'],\n                'user_id' => (int)$row['user_id'],\n                'group_id' => (int)$row['group_id'],\n                'active' => (int)$row['active'],\n                'show_home' => (int)$row['show_home'],\n                'image' => $row['image'],\n                'level' => $this->getLevelOf($row['id'])\n            ];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Gets all categories and write them in an array.\n     *\n     * @return array<int, array<string, mixed>>\n     */\n    public function getHomeCategories(): array\n    {\n        $categories = [];\n        $query = sprintf(\n            '\n            SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, show_home, image\n            FROM\n                %sfaqcategories\n            WHERE \n                show_home = 1',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" AND lang = '\" . $this->language . \"'\";\n        }\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $url = sprintf('%sindex.php?action=show&cat=%d', $this->config->getDefaultUrl(), $row['id']);\n            $link = new Link($url, $this->config);\n            $link->itemTitle = $row['name'];\n            if ('' === $row['image']) {\n                $image = '';\n            } else {\n                $image = 'images/' . $row['image'];\n            }\n\n            $category = [\n                'url' => $link->toString(),\n                'name' => $row['name'],\n                'description' => $row['description'],\n                'image' => $image\n            ];\n\n            $categories[] = $category;\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Gets all category IDs\n     *\n     * @return array\n     */\n    public function getAllCategoryIds(): array\n    {\n        $categories = [];\n\n        $query = sprintf('SELECT id FROM %sfaqcategories', Database::getTablePrefix());\n\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= sprintf(\" WHERE lang = '%s'\", $this->language);\n        }\n\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $categories[] = (int)$row['id'];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Builds the category tree.\n     *\n     * @param int $parentId Parent id\n     * @param int $indent Indention\n     */\n    public function buildCategoryTree(int $parentId = 0, int $indent = 0)\n    {\n        $tt = [];\n        $x = 0;\n\n        foreach ($this->categories as $categoryId => $n) {\n            if (isset($n['parent_id']) && $n['parent_id'] == $parentId && $categoryId > 0) {\n                $tt[$x++] = $categoryId;\n            }\n        }\n\n        if ($x != 0) {\n            foreach ($tt as $d) {\n                $tmp = [];\n                if (isset($this->categories[$d])) {\n                    foreach ($this->categories[$d] as $key => $value) {\n                        $tmp[$key] = $value;\n                    }\n                    $tmp['indent'] = $indent;\n                    $this->catTree[] = $tmp;\n                    $this->buildCategoryTree($tmp['id'], $indent + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transforms the linear array in a 1D array in the order of the tree, with\n     * the info.\n     *\n     * @param int $id Entity id\n     */\n    public function transform(int $id): void\n    {\n        $parentId = $showHome = 0;\n        $tree = [];\n        $tabs = isset($this->children[$id]) ? array_keys($this->children[$id]) : [];\n        $num = count($tabs);\n        $symbol = 'minus';\n        $name = $description = '';\n        $active = true;\n        $image = '';\n\n        if ($id > 0) {\n            $active = $this->categoryName[$id]['active'];\n            $description = $this->categoryName[$id]['description'];\n            $name = $this->categoryName[$id]['name'];\n            $parentId = $this->categoryName[$id]['parent_id'];\n            $image = $this->categoryName[$id]['image'];\n            $showHome = $this->categoryName[$id]['show_home'];\n        }\n\n        if ($num > 0) {\n            $temp = isset($this->children[$parentId]) ? array_keys($this->children[$parentId]) : [];\n            if (isset($temp[count($temp) - 1])) {\n                $symbol = ($id == $temp[count($temp) - 1]) ? 'angle' : 'medium';\n            }\n        }\n\n        $ascendants = $this->getNodes($id);\n        $numAscendants = count($ascendants);\n\n        if ($id > 0) {\n            for ($i = 0; $i < $numAscendants; ++$i) {\n                if (0 === (int)$ascendants[$i]) {\n                    break;\n                }\n                $brothers = $this->getBrothers($ascendants[$i]);\n                $tree[$i] = ($ascendants[$i] == $brothers[count($brothers) - 1]) ? 'space' : 'vertical';\n            }\n        }\n\n        if ($id > 0) {\n            $this->treeTab[] = [\n                'id' => $id,\n                'symbol' => $symbol,\n                'name' => $name,\n                'numChilds' => count($tabs),\n                'level' => $this->getLevelOf($id),\n                'parent_id' => $parentId,\n                'childs' => $tabs,\n                'tree' => $tree,\n                'description' => $description,\n                'active' => $active,\n                'image' => $image,\n                'show_home' => $showHome\n            ];\n        }\n\n        foreach ($tabs as $i) {\n            $this->transform($i);\n        }\n    }\n\n    //\n\n    /**\n     * List in array the root, super-root, ... of the $id.\n     *\n     * @param int $id\n     * @return array\n     */\n    private function getNodes(int $id): array\n    {\n        if (($id > 0) && (isset($this->categoryName[$id]['level']))) {\n            $thisLevel = $this->categoryName[$id]['level'];\n            $temp = [];\n            for ($i = $thisLevel; $i > 0; --$i) {\n                $id = $this->categoryName[$id]['parent_id'];\n                array_unshift($temp, $id);\n            }\n\n            return $temp;\n        }\n\n        return [];\n    }\n\n    /**\n     * Gets the list of the brothers of $id (include $id).\n     *\n     * @param int $id Brothers\n     *\n     * @return array\n     */\n    private function getBrothers(int $id): array\n    {\n        return $this->getChildren($this->categoryName[$id]['parent_id']);\n    }\n\n    /**\n     * List in a array of the $id of the child.\n     *\n     * @param int $categoryId\n     *\n     * @return array\n     */\n    public function getChildren(int $categoryId): array\n    {\n        return isset($this->children[$categoryId]) ? array_keys($this->children[$categoryId]) : [];\n    }\n\n    /**\n     * list in a array of the $id of the child.\n     *\n     * @param int $id Entity id\n     * @return array<int>\n     */\n    public function getChildNodes(int $id): array\n    {\n        $children = [];\n\n        if (isset($this->children[$id])) {\n            foreach (array_keys($this->children[$id]) as $childId) {\n                $children = array_merge($children, [$childId]);\n                $children = array_merge($children, $this->getChildNodes($childId));\n            }\n        }\n\n        return $children;\n    }\n\n    /**\n     * Try to expand from the parent_id to the node $id\n     *\n     * @param int $id\n     * @return void\n     */\n    public function expandTo(int $id)\n    {\n        $this->collapseAll();\n        $ascendants = $this->getNodes($id);\n        $ascendants[] = $id;\n        $numAscendants = count($ascendants);\n        for ($i = 0; $i < $numAscendants; ++$i) {\n            if (isset($this->treeTab[$this->getLineCategory($ascendants[$i])]['numChilds'])) {\n                $numChildren = $this->treeTab[$this->getLineCategory($ascendants[$i])]['numChilds'];\n                if ($numChildren > 0) {\n                    $this->expand($ascendants[$i]);\n                } else {\n                    $i = count($ascendants);\n                }\n            }\n        }\n    }\n\n    /**\n     * Collapse the complete category tree.\n     */\n    public function collapseAll(): void\n    {\n        $numTreeTab = count($this->treeTab);\n        for ($i = 0; $i < $numTreeTab; ++$i) {\n            if ($this->treeTab[$i]['symbol'] == 'minus') {\n                $this->treeTab[$i]['symbol'] = 'plus';\n            }\n        }\n    }\n\n    /**\n     * Get the line number where to find the node $id in the category tree.\n     *\n     * @param int $id Entity id\n     * @return int\n     */\n    private function getLineCategory(int $id): int\n    {\n        $num = count($this->treeTab);\n        for ($i = 0; $i < $num; ++$i) {\n            if (isset($this->treeTab[$i]['id']) && $this->treeTab[$i]['id'] === $id) {\n                return $i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Expand the node $id.\n     *\n     * @param int $id Entity id\n     */\n    public function expand(int $id): void\n    {\n        $this->treeTab[$this->getLineCategory($id)]['symbol'] = 'minus';\n    }\n\n    /**\n     * Expand the entire tree\n     *\n     * @return void\n     */\n    public function expandAll()\n    {\n        $numTreeTab = count($this->treeTab);\n        for ($i = 0; $i < $numTreeTab; ++$i) {\n            if ($this->treeTab[$i]['symbol'] == 'plus') {\n                $this->treeTab[$i]['symbol'] = 'minus';\n            }\n        }\n    }\n\n    /**\n     * Total height of the expanded tree.\n     *\n     * @return int\n     */\n    public function height(): int\n    {\n        return count($this->treeTab);\n    }\n\n    /**\n     * Gets the next line in the array treeTab, depending on the\n     * collapse/expand node.\n     *\n     * @param int $line Current line\n     * @return int\n     */\n    public function getNextLineTree(int $line): int\n    {\n        if ($this->treeTab[$line]['symbol'] !== 'plus') {\n            return $line + 1;\n        } else {\n            for ($i = $line + 1; $i < $this->height(); ++$i) {\n                if ($this->treeTab[$i]['level'] <= $this->treeTab[$line]['level']) {\n                    return $i;\n                }\n            }\n        }\n\n        return $this->height();\n    }\n\n    /**\n     * Returns the four parts of a line to display: category name, the ID of\n     * the root node, the description and if the category is active\n     *\n     * @param int $node\n     * @return array\n     */\n    public function getLineDisplay(int $node): array\n    {\n        return [\n            $this->symbols[$this->treeTab[$node]['symbol']],\n            $this->treeTab[$node]['name'],\n            $this->treeTab[$node]['id'],\n            $this->treeTab[$node]['description'],\n            $this->treeTab[$node]['active'],\n            $this->treeTab[$node]['image']\n        ];\n    }\n\n    /**\n     * Creates a category link.\n     *\n     * @param string      $sids Session id\n     * @param int         $categoryId Parent category\n     * @param string      $categoryName Entity name\n     * @param string|null $description Description\n     * @param bool        $hasChildren Child categories available\n     * @param bool        $isActive Sets a link active via CSS\n     * @return string\n     */\n    public function addCategoryLink(\n        string $sids,\n        int $categoryId,\n        string $categoryName,\n        string $description = null,\n        bool $hasChildren = false,\n        bool $isActive = false\n    ): string {\n        $url = sprintf(\n            '%sindex.php?%saction=show&amp;cat=%d',\n            $this->config->getDefaultUrl(),\n            $sids,\n            $categoryId\n        );\n\n        $oLink = new Link($url, $this->config);\n        $oLink->id = 'category_' . $categoryId;\n        $oLink->itemTitle = $categoryName;\n        $oLink->text = $categoryName;\n\n        if ($hasChildren) {\n            $oLink->text .= sprintf(\n                '<i aria-hidden=\"true\" class=\"fa fa-caret-right\" title=\"%s\"></i>',\n                $categoryName\n            );\n        }\n\n        if ($isActive) {\n            $oLink->class = 'active';\n        }\n\n        $oLink->tooltip = $description;\n\n        return $oLink->toHtmlAnchor();\n    }\n\n    /**\n     * Returns the data of the given category.\n     *\n     * @param int $categoryId\n     * @return CategoryEntity\n     */\n    public function getCategoryData(int $categoryId): CategoryEntity\n    {\n        $entity = new CategoryEntity();\n\n        $query = sprintf(\n            \"SELECT * FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($this->language)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $entity\n                ->setId($row->id)\n                ->setLang($row->lang)\n                ->setParentId($row->parent_id)\n                ->setName($row->name)\n                ->setDescription($row->description)\n                ->setUserId($row->user_id)\n                ->setGroupId($row->group_id)\n                ->setActive($row->active)\n                ->setShowHome($row->show_home)\n                ->setImage($row->image);\n        }\n\n        return $entity;\n    }\n\n    /**\n     * Gets the path from root to child as breadcrumbs.\n     *\n     * @param int    $id Entity ID\n     * @param string $separator Path separator\n     * @param bool   $renderAsHtml Renders breadcrumbs as HTML\n     * @param string $useCssClass Use CSS class \"breadcrumb\"\n     * @return string\n     */\n    public function getPath(\n        int $id,\n        string $separator = ' / ',\n        bool $renderAsHtml = false,\n        string $useCssClass = 'breadcrumb'\n    ): string {\n        global $sids;\n\n        $ids = $this->getNodes($id);\n\n        $num = count($ids);\n\n        $tempName = $categoryId = $description = $breadcrumb = [];\n\n        for ($i = 0; $i < $num; ++$i) {\n            $t = $this->getLineCategory($ids[$i]);\n            if (array_key_exists($t, $this->treeTab)) {\n                $tempName[] = $this->treeTab[$this->getLineCategory($ids[$i])]['name'];\n                $categoryId[] = $this->treeTab[$this->getLineCategory($ids[$i])]['id'];\n                $description[] = $this->treeTab[$this->getLineCategory($ids[$i])]['description'];\n            }\n        }\n        if (isset($this->treeTab[$this->getLineCategory($id)]['name'])) {\n            $tempName[] = $this->treeTab[$this->getLineCategory($id)]['name'];\n            $categoryId[] = $this->treeTab[$this->getLineCategory($id)]['id'];\n            $description[] = $this->treeTab[$this->getLineCategory($id)]['description'];\n        }\n\n        // @todo Maybe this should be done somewhere else ...\n        if ($renderAsHtml) {\n            foreach ($tempName as $key => $category) {\n                $url = sprintf(\n                    '%sindex.php?%saction=show&amp;cat=%d',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $categoryId[$key]\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->text = sprintf('<span>%s</span>', $category);\n                $oLink->itemTitle = $category;\n                $oLink->tooltip = $description[$key];\n                if (0 === $key) {\n                    $oLink->setRelation('index');\n                }\n\n                $breadcrumb[] = sprintf(\n                    '<li>%s</li>',\n                    $oLink->toHtmlAnchor()\n                );\n            }\n\n            $tempName = $breadcrumb;\n\n            return sprintf(\n                '<ul class=\"%s\">%s</ul>',\n                $useCssClass,\n                implode('', $tempName)\n            );\n        } else {\n            return implode($separator, $tempName);\n        }\n    }\n\n    /**\n     * Returns the ID of a category that associated with the given article.\n     *\n     * @param int $faqId FAQ id\n     * @return int\n     */\n    public function getCategoryIdFromFaq(int $faqId): int\n    {\n        $cats = $this->getCategoryIdsFromFaq($faqId);\n        if (isset($cats[0])) {\n            return $cats[0];\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns an array with the IDs of all categories that are associated with\n     * the given article.\n     *\n     * @param int $faqId Record id\n     * @return int[]\n     */\n    public function getCategoryIdsFromFaq(int $faqId): array\n    {\n        $categories = $this->getCategoriesFromFaq($faqId);\n        $result = [];\n        foreach ($categories as $category) {\n            $result[] = $category['id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Returns all categories that are related to the given article-id and\n     * the current language $this->language in an unsorted array which consists\n     * of associative arrays with the keys 'name', 'id', 'lang',\n     * 'parent_id' and 'description'.\n     *\n     * @param int $faqId Record id\n     * @return array\n     */\n    public function getCategoriesFromFaq(int $faqId): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                fc.id AS id,\n                fc.lang AS lang,\n                fc.parent_id AS parent_id,\n                fc.name AS name,\n                fc.description AS description\n            FROM\n                %sfaqcategoryrelations fcr,\n                %sfaqcategories fc\n            WHERE\n                fc.id = fcr.category_id\n            AND\n                fcr.record_id = %d\n            AND\n                fcr.category_lang = '%s'\n            AND\n                fc.lang = '%s'\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $faqId,\n            $this->config->getDb()->escape($this->language),\n            $this->config->getDb()->escape($this->language)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n        $this->categories = [];\n        if ($num > 0) {\n            while ($row = $this->config->getDb()->fetchArray($result)) {\n                $this->categories[intval($row['id'])] = $row;\n            }\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Given FAQ ID and category ID are connected or not.\n     *\n     * @param int $faqId\n     * @param int $categoryId\n     * @return bool\n     */\n    public function categoryHasLinkToFaq(int $faqId, int $categoryId): bool\n    {\n        $categories = $this->getCategoriesFromFaq($faqId);\n        foreach ($categories as $category) {\n            if ((int)$category['id'] === (int)$categoryId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the category tree as array.\n     *\n     * @return array\n     */\n    public function getCategoryTree(): array\n    {\n        return $this->catTree;\n    }\n\n    /**\n     * Returns the moderator group ID of the given category.\n     *\n     * @param int $categoryId\n     * @return int\n     */\n    public function getModeratorGroupId(int $categoryId): int\n    {\n        return $this->moderators[$categoryId];\n    }\n\n    /**\n     * Adds a new category entry.\n     *\n     * @param array $categoryData Array of category data\n     * @param int   $parentId Parent id\n     * @param null  $id Entity id\n     * @return int\n     */\n    public function addCategory(array $categoryData, int $parentId = 0, $id = null): ?int\n    {\n        // If we only need a new language, we don't need a new category id\n        if (is_null($id)) {\n            $id = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqcategories', 'id');\n        }\n\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqcategories\n            (id, lang, parent_id, name, description, user_id, group_id, active, image, show_home)\n                VALUES\n            (%d, '%s', %d, '%s', '%s', %d, %d, %d, '%s', %d)\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getDb()->escape($categoryData['lang']),\n            $parentId,\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['description']),\n            $categoryData['user_id'],\n            $categoryData['group_id'],\n            $categoryData['active'],\n            $this->config->getDb()->escape($categoryData['image']),\n            $categoryData['show_home']\n        );\n        $this->config->getDb()->query($query);\n\n        return $id;\n    }\n\n    /**\n     * Check if category already exists.\n     *\n     * @param string[] $categoryData Array of category data\n     *\n     * @return int\n     */\n    public function checkIfCategoryExists(array $categoryData): int\n    {\n        $query = sprintf(\n            \"SELECT name from %sfaqcategories WHERE name = '%s' AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['lang'])\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result);\n    }\n\n    /**\n     * Updates an existent category entry.\n     *\n     * @param string[] $categoryData Array of category data\n     *\n     * @return bool\n     */\n    public function updateCategory(array $categoryData): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqcategories\n            SET\n                name = '%s',\n                description = '%s',\n                user_id = %d,\n                group_id = %d,\n                active = %d,\n                show_home = %d,\n                image = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['description']),\n            $categoryData['user_id'],\n            $categoryData['group_id'],\n            $categoryData['active'],\n            $categoryData['show_home'],\n            $this->config->getDb()->escape($categoryData['image']),\n            $categoryData['id'],\n            $this->config->getDb()->escape($categoryData['lang'])\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Move the categories' ownership for users.\n     *\n     * @param int $from Old user id\n     * @param int $to New user id\n     * @return bool\n     */\n    public function moveOwnership(int $from, int $to): bool\n    {\n        $query = sprintf(\n            'UPDATE %sfaqcategories SET user_id = %d WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $to,\n            $from\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Checks if a language is already defined for a category id.\n     *\n     * @param int    $categoryId Entity id\n     * @param string $categoryLanguage Entity language\n     * @return bool\n     */\n    public function checkLanguage(int $categoryId, string $categoryLanguage): bool\n    {\n        $query = sprintf(\n            \"SELECT lang FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($categoryLanguage)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result) > 0;\n    }\n\n    /**\n     * Updates the parent category.\n     *\n     * @param int $categoryId Entity id\n     * @param int $parentId Parent category id\n     * @return bool\n     */\n    public function updateParentCategory(int $categoryId, int $parentId): bool\n    {\n        if ($categoryId !== $parentId) {\n            return false;\n        }\n\n        $query = sprintf(\n            'UPDATE %sfaqcategories SET parent_id = %d WHERE id = %d',\n            Database::getTablePrefix(),\n            $parentId,\n            $categoryId\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Deletes a category.\n     *\n     * @param int $categoryId\n     * @param string $categoryLang\n     * @return bool\n     */\n    public function deleteCategory(int $categoryId, string $categoryLang): bool\n    {\n        $query = sprintf(\n            \"DELETE FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($categoryLang)\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Create array with translated categories.\n     *\n     * @param int $categoryId\n     * @return string[]\n     */\n    public function getCategoryLanguagesTranslated(int $categoryId): array\n    {\n        global $languageCodes;\n\n        $existcatlang = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n        $translated = [];\n\n        foreach ($existcatlang as $language) {\n            $query = sprintf(\n                \"\n               SELECT\n                  name, description\n               FROM\n                   %sfaqcategories\n               WHERE\n                   id = %d\n               AND\n                   lang = '%s'\",\n                Database::getTablePrefix(),\n                $categoryId,\n                $this->config->getDb()->escape($language)\n            );\n            $result = $this->config->getDb()->query($query);\n            if ($row = $this->config->getDb()->fetchArray($result)) {\n                $translated[$languageCodes[strtoupper($language)]] =\n                    $row['name'] . ('' == $row['description'] ? '' : '  (' . $row['description'] . ')');\n            }\n        }\n        ksort($translated);\n\n        return $translated;\n    }\n\n    /**\n     * Create all languages which can be used for translation as <option>.\n     *\n     * @param int    $categoryId Entity id\n     * @param string $selectedLanguage Selected language\n     * @return string\n     */\n    public function getCategoryLanguagesToTranslate(int $categoryId, string $selectedLanguage): string\n    {\n        $output = '';\n        $existcatlang = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n\n        foreach (LanguageHelper::getAvailableLanguages() as $lang => $langname) {\n            if (!in_array(strtolower($lang), $existcatlang)) {\n                $output .= \"\\t<option value=\\\"\" . strtolower($lang) . '\"';\n                if ($lang == $selectedLanguage) {\n                    $output .= ' selected=\"selected\"';\n                }\n                $output .= '>' . $langname . \"</option>\\n\";\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Gets all categories which are not translated in actual language\n     * to add in this->categories (used in admin section).\n     */\n    public function getMissingCategories(): void\n    {\n        $query = sprintf(\n            'SELECT id, lang, parent_id, name, description, user_id FROM %sfaqcategories',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" WHERE lang != '\" . $this->language . \"'\";\n        }\n        $query .= ' ORDER BY id';\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            if (!array_key_exists($row['id'], $this->categoryName)) {\n                $this->categoryName[$row['id']] = $row;\n                $this->categories[$row['id']] = $row;\n                $this->children[$row['parent_id']][$row['id']] = &$this->categoryName[$row['id']];\n            }\n        }\n    }\n\n    /**\n     * Get number of nodes at the same parent_id level.\n     *\n     * @param int $parentId Parent id\n     *\n     * @return int\n     */\n    public function numParent(int $parentId): int\n    {\n        $query = sprintf(\n            'SELECT DISTINCT id FROM %sfaqcategories WHERE parent_id = %d',\n            Database::getTablePrefix(),\n            $parentId\n        );\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result);\n    }\n\n    /**\n     * Returns the user id of the category owner\n     *\n     * @param int $categoryId\n     * @return int\n     */\n    public function getOwner(int $categoryId): int\n    {\n        return isset($this->owner[$categoryId]) ? (int)$this->owner[$categoryId] : 1;\n    }\n}\n", "<?php\n\n/**\n * Helper class for database drivers.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2012-04-12\n */\n\nnamespace phpMyFAQ\\Database;\n\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Strings;\n\n/**\n * Class Helper\n *\n * @package phpMyFAQ\\Database\n */\nclass DatabaseHelper\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Align the prefix of the table name used in the PMF backup file,\n     * from the (old) value of the system upon which the backup was performed\n     * to the (new) prefix of the system upon which the backup will be restored\n     * This alignment will be performed upon all the SQL query \"patterns\"\n     * provided within the PMF backup file.\n     *\n     * @param string $query\n     * @param string $oldValue\n     * @param string $newValue\n     *\n     * @return string\n     */\n    public static function alignTablePrefix(string $query, string $oldValue, string $newValue): string\n    {\n        // Align DELETE FROM <prefix.tablename>\n        $query = self::alignTablePrefixByPattern($query, 'DELETE FROM', $oldValue, $newValue);\n        // Align INSERT INTO <prefix.tablename>\n        return self::alignTablePrefixByPattern($query, 'INSERT INTO', $oldValue, $newValue);\n    }\n\n    /**\n     * Align the prefix of the table name used in the PMF backup file,\n     * from the (old) value of the system upon which the backup was performed\n     * to the (new) prefix of the system upon which the backup will be restored.\n     * This alignment will be performed ONLY upon those given SQL queries starting\n     * with the given pattern.\n     *\n     * @param string $query\n     * @param string $startPattern\n     * @param string $oldValue\n     * @param string $newValue\n     *\n     * @return string\n     */\n    private static function alignTablePrefixByPattern(\n        string $query,\n        string $startPattern,\n        string $oldValue,\n        string $newValue\n    ): string {\n        $return = $query;\n        $matches = [];\n\n        Strings::preg_match_all('/^' . $startPattern . \"\\s+(\\w+)(\\s+|$)/i\", $query, $matches);\n\n        if (isset($matches[1][0])) {\n            $oldTableFullName = $matches[1][0];\n            $newTableFullName = $newValue . Strings::substr($oldTableFullName, Strings::strlen($oldValue));\n            $return = str_replace($oldTableFullName, $newTableFullName, $query);\n        }\n\n        return $return;\n    }\n\n    /**\n     * This function builds the queries for the backup.\n     *\n     * @param string $query\n     * @param string $table\n     * @return array\n     */\n    public function buildInsertQueries(string $query, string $table): array\n    {\n        if (!$result = $this->config->getDb()->query($query)) {\n            return [];\n        }\n        $ret = [];\n\n        $ret[] = \"\\r\\n-- Table: \" . $table;\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $p1 = [];\n            $p2 = [];\n            foreach ($row as $key => $val) {\n                $p1[] = $key;\n                if ('rights' != $key && is_numeric($val)) {\n                    $p2[] = $val;\n                } else {\n                    if (is_null($val)) {\n                        $p2[] = 'NULL';\n                    } else {\n                        $p2[] = sprintf(\"'%s'\", $this->config->getDb()->escape($val));\n                    }\n                }\n            }\n            $ret[] = 'INSERT INTO ' . $table . ' (' . implode(',', $p1) . ') VALUES (' . implode(',', $p2) . ');';\n        }\n\n        return $ret;\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ categories.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-09-07\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\n\n/**\n * Class CategoryHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass CategoryHelper extends Helper\n{\n    /**\n     * Renders the main navigation.\n     *\n     * @param int $activeCategory Selected category\n     * @return string\n     */\n    public function renderNavigation(int $activeCategory = 0): string\n    {\n        global $sids, $PMF_LANG;\n\n        $open = 0;\n        $output = '';\n        $numCategories = $this->Category->height();\n        $numFaqs = $this->categoryRelation->getNumberOfFaqsPerCategory();\n\n        if ($numCategories > 0) {\n            for ($y = 0; $y < $numCategories; $y = $this->Category->getNextLineTree($y)) {\n                list($hasChild, $name, $categoryId, $description, $active) = $this->Category->getLineDisplay($y);\n\n                if (!$active) {\n                    continue;\n                }\n\n                if ($activeCategory == $categoryId) {\n                    $isActive = true;\n                } else {\n                    $isActive = false;\n                }\n\n                $level = $this->Category->treeTab[$y]['level'];\n                $leveldiff = $open - $level;\n\n                if (\n                    $this->config->get('records.hideEmptyCategories') && !isset($numFaqs[$categoryId])\n                    && '-' === $hasChild\n                ) {\n                    continue;\n                }\n\n                if ($leveldiff > 1) {\n                    $output .= '</li>';\n                    for ($i = $leveldiff; $i > 1; --$i) {\n                        $output .= sprintf(\n                            \"\\n%s</ul>\\n%s</li>\\n\",\n                            str_repeat(\"\\t\", $level + $i + 1),\n                            str_repeat(\"\\t\", $level + $i)\n                        );\n                    }\n                }\n\n                if ($level < $open) {\n                    if (($level - $open) == -1) {\n                        $output .= '</li>';\n                    }\n                    $output .= \"\\n\" . str_repeat(\"\\t\", $level + 2) . \"</ul>\\n\" .\n                        str_repeat(\"\\t\", $level + 1) . \"</li>\\n\";\n                } elseif ($level == $open && $y != 0) {\n                    $output .= \"</li>\\n\";\n                }\n\n                if ($level > $open) {\n                    $output .= sprintf(\n                        \"\\n%s<ul class=\\\"nav nav-list\\\">\\n%s<li%s>\",\n                        str_repeat(\"\\t\", $level + 1),\n                        str_repeat(\"\\t\", $level + 1),\n                        $isActive ? ' class=\"active\"' : ''\n                    );\n                } else {\n                    $output .= sprintf(\n                        '%s<li%s>',\n                        str_repeat(\"\\t\", $level + 1),\n                        $isActive ? ' class=\"active\"' : ''\n                    );\n                }\n\n                if (isset($this->Category->treeTab[$y]['symbol']) && $this->Category->treeTab[$y]['symbol'] == 'plus') {\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        true,\n                        $isActive\n                    );\n                }\n                if ($this->Category->treeTab[$y]['symbol'] == 'minus') {\n                    $name = ($this->Category->treeTab[$y]['parent_id'] === 0)\n                        ?\n                        $name\n                        :\n                        $this->Category->categoryName[$this->Category->treeTab[$y]['id']]['name'];\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        false,\n                        $isActive\n                    );\n                } else {\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        false,\n                        $isActive\n                    );\n                }\n\n                $open = $level;\n            }\n            if ($open > 0) {\n                $output .= str_repeat(\"</li>\\n\\t</ul>\\n\\t\", $open);\n            }\n            $output .= '</li>';\n\n            return $output;\n        } else {\n            $output = '<li><a href=\"#\">' . $PMF_LANG['no_cats'] . '</a></li>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Renders the main navigation dropdown.\n     *\n     * @return string\n     */\n    public function renderCategoryDropDown(): string\n    {\n        global $sids, $PMF_LANG;\n\n        $open = 0;\n        $output = '';\n        $numCategories = $this->Category->height();\n\n        $this->Category->expandAll();\n\n        if ($numCategories > 0) {\n            for ($y = 0; $y < $this->Category->height(); $y = $this->Category->getNextLineTree($y)) {\n                list($hasChild, $categoryName, $parent, $description, $active) = $this->Category->getLineDisplay($y);\n\n                if (!$active) {\n                    continue;\n                }\n\n                $level = $this->Category->treeTab[$y]['level'];\n                $leveldiff = $open - $level;\n                $numChildren = $this->Category->treeTab[$y]['numChilds'];\n\n                if (!isset($number[$parent])) {\n                    $number[$parent] = 0;\n                }\n\n                if ($this->config->get('records.hideEmptyCategories') && 0 === $number[$parent] && '-' === $hasChild) {\n                    continue;\n                }\n\n                if ($leveldiff > 1) {\n                    $output .= '</li>';\n                    for ($i = $leveldiff; $i > 1; --$i) {\n                        $output .= sprintf(\n                            \"\\n%s</ul>\\n%s</li>\\n\",\n                            str_repeat(\"\\t\", $level + $i + 1),\n                            str_repeat(\"\\t\", $level + $i)\n                        );\n                    }\n                }\n\n                if ($level < $open) {\n                    if (($level - $open) == -1) {\n                        $output .= '</li>';\n                    }\n                    $output .= sprintf(\n                        \"\\n%s</ul>\\n%s</li>\\n\",\n                        str_repeat(\"\\t\", $level + 2),\n                        str_repeat(\"\\t\", $level + 1)\n                    );\n                } elseif ($level == $open && $y != 0) {\n                    $output .= \"</li>\\n\";\n                }\n\n                if ($level > $open) {\n                    $output .= sprintf(\n                        \"\\n%s<ul class=\\\"dropdown-menu\\\">\\n%s\",\n                        str_repeat(\"\\t\", $level + 1),\n                        str_repeat(\"\\t\", $level + 1)\n                    );\n                    if ($numChildren > 0) {\n                        $output .= '<li class=\"dropdown-submenu\">';\n                    } else {\n                        $output .= '<li>';\n                    }\n                } else {\n                    $output .= str_repeat(\"\\t\", $level + 1);\n                    if ($numChildren > 0) {\n                        $output .= '<li class=\"dropdown-submenu\">';\n                    } else {\n                        $output .= '<li>';\n                    }\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=show&amp;cat=%d',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $parent\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = $categoryName;\n                $oLink->text = $categoryName;\n                $oLink->tooltip = $description;\n\n                $output .= $oLink->toHtmlAnchor();\n                $open = $level;\n            }\n\n            if (isset($level) && $level > 0) {\n                $output .= str_repeat(\"</li>\\n\\t</ul>\\n\\t\", $level);\n            }\n\n            return $output;\n        } else {\n            $output = '<li><a href=\"#\">' . $PMF_LANG['no_cats'] . '</a></li>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns all top-level categories in <li> tags.\n     *\n     * @return string\n     */\n    public function renderMainCategories(): string\n    {\n        $categories = '';\n        foreach ($this->Category->categories as $cat) {\n            if (0 === (int)$cat['parent_id']) {\n                $categories .= sprintf(\n                    '<li><a href=\"?action=show&cat=%d\">%s</a></li>',\n                    $cat['id'],\n                    $cat['name']\n                );\n            }\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Get all categories in <option> tags.\n     *\n     * @param int[]|int $categoryId CategoryHelper ID or array of category IDs\n     *\n     * @return string\n     */\n    public function renderOptions($categoryId): string\n    {\n        $categories = '';\n\n        if (!is_array($categoryId)) {\n            $categoryId = [\n                [\n                    'category_id' => $categoryId,\n                    'category_lang' => '',\n                ],\n            ];\n        } elseif (isset($categoryId['category_id'])) {\n            $categoryId = [$categoryId];\n        }\n\n        $i = 0;\n        foreach ($this->Category->getCategoryTree() as $cat) {\n            $indent = '';\n            for ($j = 0; $j < $cat['indent']; ++$j) {\n                $indent .= '....';\n            }\n            $categories .= \"\\t<option value=\\\"\" . $cat['id'] . '\"';\n\n            if (0 === $i && count($categoryId) === 0) {\n                $categories .= ' selected';\n            } else {\n                foreach ($categoryId as $categorised) {\n                    if ($cat['id'] == $categorised['category_id']) {\n                        $categories .= ' selected';\n                    }\n                }\n            }\n\n            $categories .= '>';\n            $categories .= $indent . $cat['name'] . \"</option>\\n\";\n            ++$i;\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Renders the start page category card decks\n     * @param array $categories\n     * @return string\n     */\n    public function renderStartPageCategories(array $categories): string\n    {\n        if (count($categories) === 0) {\n            return '';\n        }\n\n        $decks = '';\n        $key = 1;\n        foreach ($categories as $category) {\n            $decks .= '<div class=\"card mb-4\"><a href=\"' . $category['url'] . '\">';\n            if ('' !== $category['image']) {\n                $decks .= '<img class=\"card-img-top embed-responsive-item\" width=\"200\" alt=\"' .\n                $category['name'] . '\" src=\"' . $category['image'] . '\" />';\n            }\n            $decks .= '</a>' .\n                '<div class=\"card-body\">' .\n                '<h4 class=\"card-title text-center\">' .\n                '<a href=\"' . Strings::htmlentities($category['url']) . '\">' .\n                Strings::htmlentities($category['name']) . '</a>' .\n                '</h4>' .\n                '<p class=\"card-text\">' . $category['description'] . '</p>' .\n                '</div>' .\n                '</div>';\n            if ($key % 2 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-sm-block d-md-none\"></div>';\n            }\n            if ($key % 3 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-md-block d-lg-none\"></div>';\n            }\n            if ($key % 4 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-lg-block d-xl-block\"></div>';\n            }\n            $key++;\n        }\n\n        return $decks;\n    }\n\n    /**\n     * Renders the static tree with the number of records.\n     *\n     * @return string\n     */\n    public function renderCategoryTree(): string\n    {\n        global $sids, $plr;\n\n        $number = [];\n\n        $query = sprintf(\n            '\n            SELECT\n                fcr.category_id AS category_id,\n                count(fcr.category_id) AS number\n            FROM\n                %sfaqcategoryrelations fcr\n                JOIN %sfaqdata fd ON fcr.record_id = fd.id AND fcr.record_lang = fd.lang\n                LEFT JOIN %sfaqdata_group AS fdg ON fd.id = fdg.record_id\n                LEFT JOIN %sfaqdata_user AS fdu ON fd.id = fdu.record_id\n                LEFT JOIN %sfaqcategory_group AS fcg ON fcr.category_id = fcg.category_id\n                LEFT JOIN %sfaqcategory_user AS fcu ON fcr.category_id = fcu.category_id\n            WHERE 1=1 \n            ',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix()\n        );\n\n        if ($this->config->get('security.permLevel') !== 'basic') {\n            if (-1 === $this->Category->getUser()) {\n                $query .= sprintf(\n                    'AND fdg.group_id IN (%s) AND fcg.group_id IN (%s)',\n                    implode(', ', $this->Category->getGroups()),\n                    implode(', ', $this->Category->getGroups())\n                );\n            } else {\n                $query .= sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )\n                    AND ( fcg.group_id IN (%s) OR (fcu.user_id = %d OR fcg.group_id IN (%s)) )',\n                    implode(', ', $this->Category->getGroups()),\n                    $this->Category->getUser(),\n                    implode(', ', $this->Category->getGroups()),\n                    implode(', ', $this->Category->getGroups()),\n                    $this->Category->getUser(),\n                    implode(', ', $this->Category->getGroups())\n                );\n            }\n        }\n\n        if (strlen($this->config->getLanguage()->getLanguage()) > 0) {\n            $query .= sprintf(\n                \" AND fd.lang = '%s'\",\n                $this->config->getLanguage()->getLanguage()\n            );\n        }\n\n        $query .= \" AND fd.active = 'yes' GROUP BY fcr.category_id\";\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $number[$row->category_id] = $row->number;\n            }\n        }\n        $output = '<ul class=\"pmf-category-overview\">';\n        $open = 1;\n        $this->Category->expandAll();\n\n        for ($y = 0; $y < $this->Category->height(); $y = $this->Category->getNextLineTree($y)) {\n            list($hasChild, $categoryName, $parent, $description) = $this->Category->getLineDisplay($y);\n\n            $level = $this->Category->treeTab[$y]['level'];\n            $levelDiff = $open - $level;\n            if (!isset($number[$parent])) {\n                $number[$parent] = 0;\n            }\n\n            if ($this->config->get('records.hideEmptyCategories') && 0 === $number[$parent] && '-' === $hasChild) {\n                continue;\n            }\n\n            if ($levelDiff > 1) {\n                $output .= '</li>';\n                for ($i = $levelDiff; $i > 1; --$i) {\n                    $output .= '</ul></li>';\n                }\n            }\n\n            if ($level < $open) {\n                if (($level - $open) == -1) {\n                    $output .= '</li>';\n                }\n                $output .= '</ul></li>';\n            } elseif ($level == $open && $y != 0) {\n                $output .= '</li>';\n            }\n\n            if ($level > $open) {\n                $output .= sprintf(\n                    '<ul><li data-category-id=\"%d\" data-category-level=\"%d\">',\n                    $parent,\n                    $level\n                );\n            } else {\n                $output .= sprintf(\n                    '<li data-category-id=\"%d\" data-category-level=\"%d\">',\n                    $parent,\n                    $level\n                );\n            }\n\n            if (0 === $number[$parent] && 0 === $level) {\n                $numFaqs = '';\n            } else {\n                $numFaqs = ' <span class=\"badge badge-primary badge-pill\">' .\n                    $plr->getMsg('plmsgEntries', $number[$parent]) .\n                    '</span>';\n            }\n\n            $url = sprintf(\n                '%sindex.php?%saction=show&amp;cat=%d',\n                $this->config->getDefaultUrl(),\n                $sids,\n                $parent\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = $categoryName;\n            $oLink->text = $categoryName;\n            $oLink->tooltip = $description;\n\n            $output .= $oLink->toHtmlAnchor() . $numFaqs;\n            $open = $level;\n        }\n\n        if (isset($level) && $level > 0) {\n            $output .= str_repeat('</li></ul>', $level);\n        }\n\n        $output .= '</li></ul>';\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all moderators for the given categories.\n     *\n     * @param int[] $categories\n     * @return string[]\n     */\n    public function getModerators(array $categories): array\n    {\n        $recipients = [];\n\n        $user = new User($this->config);\n\n        foreach ($categories as $_category) {\n            $userId = $this->Category->getOwner($_category);\n            $groupId = $this->Category->getModeratorGroupId($_category);\n\n            $user->getUserById($userId);\n            $catOwnerEmail = $user->getUserData('email');\n\n            // Avoid to send multiple emails to the same owner\n            if (!empty($catOwnerEmail) && !isset($send[$catOwnerEmail])) {\n                $recipients[] = $catOwnerEmail;\n            }\n\n            if ($groupId > 0) {\n                $moderators = $user->perm->getGroupMembers($groupId);\n                foreach ($moderators as $moderator) {\n                    $user->getUserById($moderator);\n                    $moderatorEmail = $user->getUserData('email');\n\n                    // Avoid to send multiple emails to the same moderator\n                    if (!empty($moderatorEmail) && !isset($send[$moderatorEmail])) {\n                        $recipients[] = $moderatorEmail;\n                    }\n                }\n            }\n        }\n\n        return array_unique($recipients);\n    }\n\n    /**\n     * Renders the <option> tags for the available translations for a given category.\n     *\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderAvailableTranslationsOptions(int $categoryId): string\n    {\n        $options = '';\n        $availableTranslations = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n        $availableLanguages = LanguageHelper::getAvailableLanguages();\n\n        foreach ($availableTranslations as $language) {\n            $options .= sprintf('<option value=\"%s\">%s</option>', $language, $availableLanguages[$language]);\n        }\n\n        return $options;\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     *\n     * @param string $answer\n     * @return string\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     * @param string $answer\n     * @param string $currentUrl\n     * @return string\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\"><i aria-hidden=\"true\" class=\"fa fa-twitter\"></i></a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\"><i aria-hidden=\"true\" class=\"fa fa-envelope\"></i></a>',\n            $url\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     *\n     * @param Faq $faq\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        global $languageCodes;\n\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\n        if (count($availableLanguages) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', $languageCodes[strtoupper($language)]);\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @param string  $answer\n     * @param int $numWords\n     * @return string\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags($parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @param Category $category\n     * @param Faq $faq\n     * @param string $language\n     * @return string\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, $language = ''): string\n    {\n        global $PMF_LANG;\n\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf('<h3>%s</h3>', $category->getPath($data['category_id'], ' &raquo; '));\n                }\n\n                $output .= sprintf('<h4>%s</h4>', strip_tags($data['title']));\n                $output .= sprintf('<article>%s</article>', $data['content']);\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    $PMF_LANG['msgAuthor'],\n                    $data['author'],\n                    $PMF_LANG['msgLastUpdateArticle'] . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     *\n     * @param  $faqId\n     * @param  $faqLang\n     * @return string\n     */\n    public function createFaqTranslationLinkList(int $faqId, string $faqLang): string\n    {\n        global $languageCodes;\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->languageAvailable(0, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $languageCode,\n                    'Translate to',\n                    $languageCodes[strtoupper($languageCode)]\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n}\n", "<?php\n\n/**\n * Questions helper class for phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2019-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2019-11-26\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\User;\n\n/**\n * Class QuestionHelper\n * @package phpMyFAQ\\Helper\n */\nclass QuestionHelper\n{\n    /** @var Configuration */\n    private $config;\n\n    /** @var Category */\n    private $category;\n\n    /** @var array */\n    private $translation;\n\n    /**\n     * QuestionHelper constructor.\n     * @param Configuration $config\n     * @param Category $category\n     */\n    public function __construct(Configuration $config, Category $category)\n    {\n        global $PMF_LANG;\n        $this->config = $config;\n        $this->category = $category;\n        $this->translation = $PMF_LANG;\n    }\n\n    /**\n     * @param array $questionData\n     * @param array $categories\n     * @throws Exception\n     */\n    public function sendSuccessMail(array $questionData, array $categories): void\n    {\n        $questionObject = new Question($this->config);\n        $questionObject->addQuestion($questionData);\n\n        $questionMail = 'User: ' . $questionData['username'] .\n            ', mailto:' . $questionData['email'] . \"\\n\" . $this->translation['msgCategory'] .\n            ': ' . $categories[$questionData['category_id']]['name'] . \"\\n\\n\" .\n            wordwrap($questionData['question'], 72) . \"\\n\\n\" .\n            $this->config->getDefaultUrl() . 'admin/';\n\n        $userId = $this->category->getOwner($questionData['category_id']);\n        $oUser = new User($this->config);\n        $oUser->getUserById($userId);\n\n        $userEmail = $oUser->getUserData('email');\n        $mainAdminEmail = $this->config->getAdminEmail();\n\n        $mailer = new Mail($this->config);\n        $mailer->setReplyTo($questionData['email'], $questionData['username']);\n        $mailer->addTo($mainAdminEmail);\n        // Let the category owner get a copy of the message\n        if (!empty($userEmail) && $mainAdminEmail != $userEmail) {\n            $mailer->addCc($userEmail);\n        }\n        $mailer->subject = $this->config->getTitle() . ': New Question was added.';\n        $mailer->message = $questionMail;\n        $mailer->send();\n        unset($mailer);\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ tags.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package    phpMyFAQ\\Helper\n * @subpackage TagsHelper\n * @author     Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright  2013-2022 phpMyFAQ Team\n * @license    http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link       https://www.phpmyfaq.de\n * @since      2013-12-26\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper;\n\n/**\n * Class TagsHelper\n * @package phpMyFAQ\\Helper\n */\nclass TagsHelper extends Helper\n{\n    /**\n     * The array of Tag IDs\n     *\n     * @var array\n     */\n    private $taggingIds;\n\n    /**\n     * Renders the tag list.\n     *\n     * @param array $tags Array of tags.\n     *\n     * @return string\n     */\n    public function renderTagList(array $tags): string\n    {\n        $tagList = '';\n        foreach ($tags as $tagId => $tagName) {\n            $tagList .= $this->renderSearchTag($tagId, $tagName);\n        }\n\n        return $tagList;\n    }\n\n    /**\n     * Renders a search tag.\n     *\n     * @param int    $tagId   The ID of the tag\n     * @param string $tagName The tag name\n     *\n     * @return string\n     */\n    public function renderSearchTag(int $tagId, string $tagName): string\n    {\n        $taggingIds = str_replace($tagId, '', $this->getTaggingIds());\n        $taggingIds = str_replace(' ', '', $taggingIds);\n        $taggingIds = str_replace(',,', ',', $taggingIds);\n        $taggingIds = trim(implode(',', $taggingIds), ',');\n\n        return ($taggingIds != '') ? sprintf(\n            '<a class=\"btn btn-primary m-1\" href=\"?action=search&amp;tagging_id=%s\">%s ' .\n            '<i aria-hidden=\"true\" class=\"fa fa-minus-square\"></i></a> ',\n            $taggingIds,\n            $tagName\n        ) : sprintf(\n            '<a class=\"btn btn-primary m-1\" href=\"?action=search&amp;search=\">%s ' .\n            '<i aria-hidden=\"true\" class=\"fa fa-minus-square\"></i></a> ',\n            $tagName\n        );\n    }\n\n    /**\n     * Returns all tag IDs as array.\n     *\n     * @return array\n     */\n    public function getTaggingIds()\n    {\n        return $this->taggingIds;\n    }\n\n    /**\n     * Sets the tag IDs.\n     *\n     * @param array $taggingIds The tag IDs as array\n     */\n    public function setTaggingIds(array $taggingIds)\n    {\n        $this->taggingIds = array_filter($taggingIds, function ($tagId) {\n            return Filter::filterVar($tagId, FILTER_VALIDATE_INT);\n        });\n    }\n\n\n    /**\n     * Renders the related tag.\n     *\n     * @param int     $tagId     The given Tag ID.\n     * @param string  $tagName   The name of the tag.\n     * @param int     $relevance The relevance of the tag.\n     *\n     * @return string\n     */\n    public function renderRelatedTag(int $tagId, string $tagName, int $relevance): string\n    {\n        return sprintf(\n            '<a class=\"btn btn-primary\" href=\"?action=search&amp;tagging_id=%s\">%s %s ' .\n            '<span class=\"badge badge-dark\">%d</span></a>',\n            implode(',', $this->getTaggingIds()) . ',' . $tagId,\n            '<i aria-hidden=\"true\" class=\"fa fa-plus-square\"></i> ',\n            $tagName,\n            $relevance\n        );\n    }\n}\n", "<?php\n\n/**\n * The News class for phpMyFAQ news.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-06-25\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class News\n *\n * @package phpMyFAQ\n */\nclass News\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * Language strings.\n     *\n     * @var array<string>\n     */\n    private $pmfLang;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfLang = $PMF_LANG;\n    }\n\n    /**\n     * Function for generating the HTML5 code for the current news.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @return string\n     * @throws Exception\n     */\n    public function getNews($showArchive = false, $active = true): string\n    {\n        $output = '';\n        $news = $this->getLatestData($showArchive, $active);\n        $date = new Date($this->config);\n\n        foreach ($news as $item) {\n            $url = sprintf(\n                '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                $this->config->getDefaultUrl(),\n                $item['id'],\n                $item['lang']\n            );\n            $oLink = new Link($url, $this->config);\n\n            if (isset($item['header'])) {\n                $oLink->itemTitle = $item['header'];\n            }\n\n            $output .= sprintf(\n                '<h6%s><a id=\"news_%d\" href=\"%s\">%s <i aria-hidden=\"true\" class=\"fa fa-caret-right\"></i></a></h6>',\n                ' class=\"pmf-news-heading\"',\n                $item['id'],\n                $oLink->toString(),\n                $item['header']\n            );\n\n            $output .= sprintf('%s', $item['content']);\n\n            if (strlen($item['link']) > 1) {\n                $output .= sprintf(\n                    '<br>%s <a href=\"%s\" target=\"_%s\">%s</a>',\n                    $this->pmfLang['msgInfo'],\n                    $item['link'],\n                    $item['target'],\n                    $item['linkTitle']\n                );\n            }\n\n            $output .= sprintf('<small class=\"text-muted\">%s</small>', $date->format($item['date']));\n        }\n\n        return ('' == $output) ? $this->pmfLang['msgNoNews'] : $output;\n    }\n\n    /**\n     * Return the latest news data.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @param bool $forceConfLimit Force to limit in configuration\n     * @return array<int, array<mixed>>\n     */\n    public function getLatestData($showArchive = false, $active = true, $forceConfLimit = false): array\n    {\n        $news = [];\n        $counter = 0;\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                date_start <= '%s'\n            AND \n                date_end   >= '%s'\n            %s\n            AND\n                lang = '%s'\n            ORDER BY\n                datum DESC\",\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $active ? \"AND active = 'y'\" : '',\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $numberOfShownNewsEntries = $this->config->get('records.numberOfShownNewsEntries');\n        if ($numberOfShownNewsEntries > 0 && $this->config->getDb()->numRows($result) > 0) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                ++$counter;\n                if (\n                    ($showArchive && ($counter > $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && (!$forceConfLimit) && ($counter <= $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && $forceConfLimit)\n                ) {\n                    $url = sprintf(\n                        '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                        $this->config->getDefaultUrl(),\n                        $row->id,\n                        $row->lang\n                    );\n                    $oLink = new Link($url, $this->config);\n                    $oLink->itemTitle = $row->header;\n\n                    $item = [\n                        'id' => (int)$row->id,\n                        'lang' => $row->lang,\n                        'date' => Date::createIsoDate($row->datum, DATE_ISO8601, true),\n                        'header' => $row->header,\n                        'content' => $row->artikel,\n                        'authorName' => $row->author_name,\n                        'authorEmail' => $row->author_email,\n                        'dateStart' => $row->date_start,\n                        'dateEnd' => $row->date_end,\n                        'active' => ('y' == $row->active),\n                        'allowComments' => ('y' == $row->comment),\n                        'link' => $row->link,\n                        'linkTitle' => $row->linktitel,\n                        'target' => $row->target,\n                        'url' => $oLink->toString()\n                    ];\n                    $news[] = $item;\n                }\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Fetches all news headers.\n     *\n     * @return array<mixed>\n     */\n    public function getNewsHeader(): array\n    {\n        $headers = [];\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id, datum, lang, header, active, date_start, date_end\n            FROM\n                %sfaqnews\n            WHERE\n                lang = '%s'\n            ORDER BY\n                datum DESC\", Database::getTablePrefix(), $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $expired = ($now > $row->date_end);\n                $headers[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'header' => $row->header,\n                    'date' => Date::createIsoDate($row->datum),\n                    'active' => $row->active,\n                    'expired' => $expired,\n                );\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Fetches a news entry identified by its ID.\n     *\n     * @param int  $id ID of news\n     * @param bool $admin Is admin\n     * @return array<mixed>\n     */\n    public function getNewsEntry($id, $admin = false): array\n    {\n        $news = [];\n\n        $query = sprintf(\"SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            if ($row = $this->config->getDb()->fetchObject($result)) {\n                $content = $row->artikel;\n                $active = ('y' == $row->active);\n                $allowComments = ('y' == $row->comment);\n                $expired = (date('YmdHis') > $row->date_end);\n\n                if (!$admin) {\n                    if (!$active) {\n                        $content = $this->pmfLang['err_inactiveNews'];\n                    }\n                    if ($expired) {\n                        $content = $this->pmfLang['err_expiredNews'];\n                    }\n                }\n\n                $news = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'date' => Date::createIsoDate($row->datum),\n                    'header' => $row->header,\n                    'content' => $content,\n                    'authorName' => $row->author_name,\n                    'authorEmail' => $row->author_email,\n                    'dateStart' => $row->date_start,\n                    'dateEnd' => $row->date_end,\n                    'active' => $active,\n                    'allowComments' => $allowComments,\n                    'link' => $row->link,\n                    'linkTitle' => $row->linktitel,\n                    'target' => $row->target,\n                );\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Adds a new news entry.\n     *\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function addNewsEntry(array $data): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqnews\n            (id, datum, lang, header, artikel, author_name, author_email, date_start, date_end, active, comment,\n            link, linktitel, target)\n                VALUES\n            (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqnews', 'id'),\n            $data['date'],\n            $data['lang'],\n            $data['header'],\n            $data['content'],\n            $data['authorName'],\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $data['link'],\n            $data['linkTitle'],\n            $data['target']\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates a new news entry identified by its ID.\n     *\n     * @param int          $id News ID\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function updateNewsEntry(int $id, array $data): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqnews\n            SET\n                datum = '%s',\n                lang = '%s',\n                header = '%s',\n                artikel = '%s',\n                author_name = '%s',\n                author_email = '%s',\n                date_start = '%s',\n                date_end = '%s',\n                active = '%s',\n                comment = '%s',\n                link = '%s',\n                linktitel = '%s',\n                target = '%s'\n            WHERE\n                id = %d\",\n            Database::getTablePrefix(),\n            $data['date'],\n            $data['lang'],\n            $data['header'],\n            $data['content'],\n            $data['authorName'],\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $data['link'],\n            $data['linkTitle'],\n            $data['target'],\n            $id\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a news entry identified by its ID.\n     *\n     * @param int $id News ID\n     * @return bool\n     * @todo   check if there are comments attached to the deleted news\n     */\n    public function deleteNews($id): bool\n    {\n        $query = sprintf(\"DELETE FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "<?php\n\n/**\n * Utilities - Functions and Classes common to the whole phpMyFAQ architecture.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-11-01\n */\n\nnamespace phpMyFAQ;\n\ndefine('HTTP_PARAMS_GET_CATID', 'catid');\ndefine('HTTP_PARAMS_GET_CURRENTDAY', 'today');\ndefine('HTTP_PARAMS_GET_DISPOSITION', 'dispos');\ndefine('HTTP_PARAMS_GET_GIVENDATE', 'givendate');\ndefine('HTTP_PARAMS_GET_LANG', 'lang');\ndefine('HTTP_PARAMS_GET_DOWNWARDS', 'downwards');\ndefine('HTTP_PARAMS_GET_TYPE', 'type');\n\n/**\n * Class Utils\n *\n * @package phpMyFAQ\n */\nclass Utils\n{\n    /**\n     * Check if a given string could be a language.\n     *\n     * @param string $lang Language\n     * @return bool\n     */\n    public static function isLanguage(string $lang): bool\n    {\n        return preg_match('/^[a-zA-Z\\-]+$/', $lang);\n    }\n\n    /**\n     * Checks if a date is a phpMyFAQ valid date.\n     *\n     * @param string $date Date\n     * @return bool\n     */\n    public static function isLikeOnPMFDate(string $date): bool\n    {\n        // Test if the passed string is in the format: %YYYYMMDDhhmmss%\n        $dateToTest = $date;\n        // Suppress first occurrences of '%'\n        if (substr($dateToTest, 0, 1) == '%') {\n            $dateToTest = substr($dateToTest, 1);\n        }\n        // Suppress last occurrences of '%'\n        if (substr($dateToTest, -1, 1) == '%') {\n            $dateToTest = substr($dateToTest, 0, strlen($dateToTest) - 1);\n        }\n        // PMF date consists of numbers only: YYYYMMDDhhmmss\n        return is_numeric($dateToTest);\n    }\n\n    /**\n     * Shortens a string for a given number of words.\n     *\n     * @param string $string String\n     * @param int    $characters Characters\n     * @return string\n     * @todo This function doesn't work with Chinese, Japanese, Korean and Thai\n     *       because they don't have spaces as word delimiters\n     */\n    public static function makeShorterText(string $string, int $characters): string\n    {\n        $string = Strings::preg_replace('/\\s+/u', ' ', $string);\n        $arrStr = explode(' ', $string);\n        $shortStr = '';\n        $num = count($arrStr);\n\n        if ($num > $characters) {\n            for ($j = 0; $j < $characters; ++$j) {\n                $shortStr .= $arrStr[$j] . ' ';\n            }\n            $shortStr .= '...';\n        } else {\n            $shortStr = $string;\n        }\n\n        return $shortStr;\n    }\n\n    /**\n     * Resolves the PMF markers like e.g. %sitename%.\n     *\n     * @param string        $text Text contains PMF markers\n     * @param Configuration $config\n     * @return string\n     */\n    public static function resolveMarkers(string $text, Configuration $config): string\n    {\n        // Available markers: key and resolving value\n        $markers = [\n            '%sitename%' => $config->getTitle(),\n        ];\n\n        // Resolve any known pattern\n        return str_replace(\n            array_keys($markers),\n            array_values($markers),\n            $text\n        );\n    }\n\n    /**\n     * This method chops a string.\n     *\n     * @param string $string String to chop\n     * @param int    $words Number of words\n     * @return string\n     */\n    public static function chopString(string $string, int $words): string\n    {\n        $str = '';\n        $pieces = explode(' ', $string);\n        $num = count($pieces);\n        if ($words > $num) {\n            $words = $num;\n        }\n        for ($i = 0; $i < $words; ++$i) {\n            $str .= $pieces[$i] . ' ';\n        }\n\n        return $str;\n    }\n\n    /**\n     * Adds a highlighted word to a string.\n     *\n     * @param string $string String\n     * @param string $highlight Given word for highlighting\n     * @return string\n     */\n    public static function setHighlightedString(string $string, string $highlight): string\n    {\n        $attributes = [\n            'href', 'src', 'title', 'alt', 'class', 'style', 'id', 'name',\n            'face', 'size', 'dir', 'rel', 'rev', 'role',\n            'onmouseenter', 'onmouseleave', 'onafterprint', 'onbeforeprint',\n            'onbeforeunload', 'onhashchange', 'onmessage', 'onoffline', 'ononline',\n            'onpopstate', 'onpagehide', 'onpageshow', 'onresize', 'onunload',\n            'ondevicemotion', 'ondeviceorientation', 'onabort', 'onblur',\n            'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu',\n            'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave',\n            'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied',\n            'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown',\n            'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata',\n            'onloadstart', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover',\n            'onmouseup', 'onmozfullscreenchange', 'onmozfullscreenerror', 'onpause',\n            'onplay', 'onplaying', 'onprogress', 'onratechange', 'onreset',\n            'onscroll', 'onseeked', 'onseeking', 'onselect', 'onshow', 'onstalled',\n            'onsubmit', 'onsuspend', 'ontimeupdate', 'onvolumechange', 'onwaiting',\n            'oncopy', 'oncut', 'onpaste', 'onbeforescriptexecute', 'onafterscriptexecute'\n        ];\n\n        return Strings::preg_replace_callback(\n            '/(' . $highlight . '=\"[^\"]*\")|' .\n            '((' . implode('|', $attributes) . ')=\"[^\"]*' . $highlight . '[^\"]*\")|' .\n            '(' . $highlight . ')/mis',\n            ['phpMyFAQ\\Utils', 'highlightNoLinks'],\n            $string\n        );\n    }\n\n    /**\n     * Callback function for filtering HTML from URLs and images.\n     *\n     * @param array<int, string> $matches Array of matches from regex pattern\n     *\n     * @return string\n     */\n    public static function highlightNoLinks(array $matches): string\n    {\n        $prefix = $matches[3] ?? '';\n        $item = $matches[4] ?? '';\n        $postfix = $matches[5] ?? '';\n\n        if (!empty($item) && !self::isForbiddenElement($item)) {\n            return sprintf(\n                '<mark class=\"pmf-highlighted-string\">%s</mark>',\n                $prefix . $item . $postfix\n            );\n        }\n\n        // Fallback: the original matched string\n        return $matches[0];\n    }\n\n    /**\n     * Tries to detect if a string could be a HTML element\n     *\n     * @param string $string\n     *\n     * @return bool\n     */\n    public static function isForbiddenElement(string $string): bool\n    {\n        $forbiddenElements = [\n            'img', 'picture', 'mark'\n        ];\n\n        foreach ($forbiddenElements as $element) {\n            if (strpos($element, $string)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * debug_backtrace() wrapper function.\n     *\n     * @param string $string\n     * @return string\n     */\n    public static function debug(string $string): string\n    {\n        // sometimes Zend Optimizer causes segfaults with debug_backtrace()\n        if (extension_loaded('Zend Optimizer')) {\n            $ret = '<code>' . $string . \"</code><br>\\n\";\n        } else {\n            $debug = debug_backtrace();\n            $ret = '';\n            if (isset($debug[2]['class'])) {\n                $ret = $debug[2]['file'] . ':<br>';\n                $ret .= $debug[2]['class'] . $debug[1]['type'];\n                $ret .= $debug[2]['function'] . '() in line ' . $debug[2]['line'];\n                $ret .= ': <code>' . $string . \"</code><br>\\n\";\n            }\n        }\n\n        return $ret;\n    }\n\n    /**\n     * Parses a given string and convert all the URLs into links.\n     *\n     * @param string $string\n     * @return string\n     */\n    public static function parseUrl(string $string): string\n    {\n        $protocols = array('http://', 'https://', 'ftp://');\n\n        $string = str_replace($protocols, '', $string);\n        $string = str_replace('www.', 'http://www.', $string);\n        $string = preg_replace('|http://([a-zA-Z0-9-\\./]+)|', '<a href=\"http://$1\">$1</a>', $string);\n        return preg_replace(\n            '/(([a-z0-9\\+_\\-]+)(\\.[a-z0-9\\+_\\-]+)*@([a-z0-9\\-]+\\.)+[a-z]{2,6})/',\n            '<a href=\"mailto:$1\">$1</a>',\n            $string\n        );\n    }\n\n    /**\n     * Moves given key of an array to the top\n     *\n     * @param array<int> $array\n     * @param string $key\n     */\n    public static function moveToTop(array &$array, string $key): void\n    {\n        $temp = [$key => $array[$key]];\n        unset($array[$key]);\n        $array = $temp + $array;\n    }\n}\n", "<?php\n\n/**\n * The main start page with the start page categories, the Top 10 and the latest messages.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2002-08-23\n */\n\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Strings;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$news = new News($faqConfig);\n$categoryHelper = new CategoryHelper();\n$archived = Filter::filterInput(INPUT_GET, 'newsid', FILTER_VALIDATE_INT);\n\nif (!is_null($archived)) {\n    $writeNewsHeader = $PMF_LANG['newsArchive'];\n    $showAllNews = sprintf('<a href=\"?%s\">%s</a>', $sids, $PMF_LANG['newsShowCurrent']);\n    $archived = true;\n} else {\n    $writeNewsHeader = ' ' . $PMF_LANG['msgNews'];\n    $showAllNews = sprintf('<a href=\"?%snewsid=0\">%s</a>', $sids, $PMF_LANG['newsShowArchive']);\n}\n\n$startPageCategories = $category->getHomeCategories();\nif (count($startPageCategories) > 0) {\n    $template->parseBlock(\n        'mainPageContent',\n        'startPageCategories',\n        [\n            'startPageCategoryDecks' => $categoryHelper->renderStartPageCategories($startPageCategories)\n        ]\n    );\n}\n\n$stickyRecordsParams = $faq->getStickyRecords();\nif (!isset($stickyRecordsParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'stickyRecordsList',\n        [\n            'stickyTitle' => $stickyRecordsParams['title'],\n            'stickyUrl' => $stickyRecordsParams['url'],\n            'stickyPreview' => $stickyRecordsParams['preview']\n        ]\n    );\n}\n\n// generate top ten list\nif ($faqConfig->get('records.orderingPopularFaqs') == 'visits') {\n    $param = 'visits';\n} else {\n    $param = 'voted';\n}\n\n$toptenParams = $faq->getTopTen($param);\nif (!isset($toptenParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'toptenList',\n        [\n            'toptenUrl' => $toptenParams['url'],\n            'toptenTitle' => $toptenParams['title'],\n            'toptenPreview' => $toptenParams['preview'],\n            'toptenVisits' => $toptenParams[$param],\n        ]\n    );\n} else {\n    $template->parseBlock(\n        'mainPageContent',\n        'toptenListError',\n        [\n            'errorMsgTopTen' => $toptenParams['error'],\n        ]\n    );\n}\n\n$latestEntriesParams = $faq->getLatest();\nif (!isset($latestEntriesParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'latestEntriesList',\n        [\n            'latestEntriesUrl' => $latestEntriesParams['url'],\n            'latestEntriesTitle' => $latestEntriesParams['title'],\n            'latestEntriesPreview' => $latestEntriesParams['preview'],\n            'latestEntriesDate' => $latestEntriesParams['date'],\n        ]\n    );\n} else {\n    $template->parseBlock(\n        'mainPageContent',\n        'latestEntriesListError',\n        [\n            'errorMsgLatest' => $latestEntriesParams['error']\n        ]\n    );\n}\n\n$template->parseBlock(\n    'mainPageContent',\n    'tagListSection',\n    [\n        'msgTags' => $PMF_LANG['msgPopularTags'],\n        'tagList' => $oTag->renderPopularTags(12)\n    ]\n);\n\n$template->parse(\n    'mainPageContent',\n    [\n        'pageHeader' => Strings::htmlspecialchars($faqConfig->getTitle()),\n        'baseHref' => $faqSystem->getSystemUri($faqConfig),\n        'stickyRecordsHeader' => $PMF_LANG['stickyRecordsHeader'],\n        'writeTopTenHeader' => $PMF_LANG['msgTopTen'],\n        'writeNewestHeader' => $PMF_LANG['msgLatestArticles'],\n        'writeNewsHeader' => $writeNewsHeader,\n        'writeNews' => $news->getNews($archived),\n        'showAllNews' => $showAllNews,\n        'writeNumberOfArticles' => $plr->getMsg('plmsgHomeArticlesOnline', $faq->getNumberOfRecords($faqLangCode)),\n        'writeSendAdress' => '?' . $sids . 'action=search',\n        'searchBox' => $PMF_LANG['msgSearch'],\n        'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n        'msgSearch' => sprintf(\n            '<a class=\"help\" href=\"%sindex.php?action=search\">%s</a>',\n            $faqSystem->getSystemUri($faqConfig),\n            $PMF_LANG['msgAdvancedSearch']\n        )\n    ]\n);\n"], "fixing_code": ["<?php\n\n/**\n * List all categories in the admin section.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2003-12-20\n */\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryImage;\nuse phpMyFAQ\\Category\\CategoryPermission;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Filter;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n?>\n  <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n    <h1 class=\"h2\">\n      <i aria-hidden=\"true\" class=\"fa fa-folder\"></i> <?= $PMF_LANG['ad_menu_categ_edit'] ?>\n    </h1>\n    <div class=\"btn-toolbar mb-2 mb-md-0\">\n      <div class=\"btn-group mr-2\">\n        <a class=\"btn btn-sm btn-success\" href=\"?action=addcategory\">\n          <i aria-hidden=\"true\" class=\"fa fa-folder-plus\"></i> <?= $PMF_LANG['ad_kateg_add']; ?>\n        </a>\n        <a class=\"btn btn-sm btn-info\" href=\"?action=showcategory\">\n          <i aria-hidden=\"true\" class=\"fa fa-list\"></i> <?= $PMF_LANG['ad_categ_show']; ?>\n        </a>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n        <?php\n        //\n        // CSRF Check\n        //\n        $csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n        if (\n            'category' != $action && 'content' != $action &&\n            (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken)\n        ) {\n            $csrfCheck = false;\n        } else {\n            $csrfCheck = true;\n        }\n\n        //\n        // Image upload\n        //\n        $uploadedFile = (isset($_FILES['image']['size']) && $_FILES['image']['size'] > 0) ? $_FILES['image'] : [];\n        $categoryImage = new CategoryImage($faqConfig);\n        $categoryImage->setUploadedFile($uploadedFile);\n\n        $categoryPermission = new CategoryPermission($faqConfig);\n\n        if ($user->perm->hasPermission($user->getUserId(), 'editcateg') && $csrfCheck) {\n            // Save a new category\n            if ($action == 'savecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n                $parentId = Filter::filterInput(INPUT_POST, 'parent_id', FILTER_VALIDATE_INT);\n                $categoryId = $faqConfig->getDb()->nextId(Database::getTablePrefix() . 'faqcategories', 'id');\n                $categoryLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n                $categoryData = [\n                    'lang' => $categoryLang,\n                    'name' => Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS),\n                    'description' => Filter::filterInput(INPUT_POST, 'description', FILTER_SANITIZE_SPECIAL_CHARS),\n                    'user_id' => Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT),\n                    'group_id' => Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT),\n                    'active' => Filter::filterInput(INPUT_POST, 'active', FILTER_VALIDATE_INT),\n                    'image' => $categoryImage->getFileName($categoryId, $categoryLang),\n                    'show_home' => Filter::filterInput(INPUT_POST, 'show_home', FILTER_VALIDATE_INT)\n                ];\n\n                $permissions = [];\n                if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_user' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += [\n                    'restricted_user' => [\n                        Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n                    ],\n                    ];\n                }\n\n                if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_groups' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += Filter::filterInputArray(\n                        INPUT_POST,\n                        [\n                        'restricted_groups' => [\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags' => FILTER_REQUIRE_ARRAY,\n                        ],\n                        ]\n                    );\n                }\n\n                if ($category->checkIfCategoryExists($categoryData) > 0) {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_categ_existing']);\n                    exit();\n                }\n\n                $categoryId = $category->addCategory($categoryData, $parentId);\n\n                if ($categoryId) {\n                    $categoryPermission->add(CategoryPermission::USER, [$categoryId], $permissions['restricted_user']);\n                    $categoryPermission->add(\n                        CategoryPermission::GROUP,\n                        [$categoryId],\n                        $permissions['restricted_groups']\n                    );\n\n                    $categoryImage->upload();\n\n                    // All the other translations\n                    $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_UNSAFE_RAW);\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_added']);\n                } else {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                }\n            }\n\n            // Updates an existing category\n            if ($action == 'updatecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n\n                $parentId = Filter::filterInput(INPUT_POST, 'parent_id', FILTER_VALIDATE_INT);\n                $categoryId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n                $categoryLang = Filter::filterInput(INPUT_POST, 'catlang', FILTER_UNSAFE_RAW);\n                $existingImage = Filter::filterInput(INPUT_POST, 'existing_image', FILTER_UNSAFE_RAW);\n                $image = count($uploadedFile) ? $categoryImage->getFileName(\n                    $categoryId,\n                    $categoryLang\n                ) : $existingImage;\n                $categoryData = [\n                    'id' => $categoryId,\n                    'lang' => $categoryLang,\n                    'parent_id' => $parentId,\n                    'name' => Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW),\n                    'description' => Filter::filterInput(INPUT_POST, 'description', FILTER_UNSAFE_RAW),\n                    'user_id' => Filter::filterInput(INPUT_POST, 'user_id', FILTER_VALIDATE_INT),\n                    'group_id' => Filter::filterInput(INPUT_POST, 'group_id', FILTER_VALIDATE_INT),\n                    'active' => Filter::filterInput(INPUT_POST, 'active', FILTER_VALIDATE_INT),\n                    'image' => $image,\n                    'show_home' => Filter::filterInput(INPUT_POST, 'show_home', FILTER_VALIDATE_INT),\n                ];\n\n                $permissions = [];\n                if ('all' === Filter::filterInput(INPUT_POST, 'userpermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_user' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += [\n                    'restricted_user' => [\n                        Filter::filterInput(INPUT_POST, 'restricted_users', FILTER_VALIDATE_INT),\n                    ],\n                    ];\n                }\n\n                if ('all' === Filter::filterInput(INPUT_POST, 'grouppermission', FILTER_UNSAFE_RAW)) {\n                    $permissions += [\n                    'restricted_groups' => [\n                        -1,\n                    ],\n                    ];\n                } else {\n                    $permissions += Filter::filterInputArray(\n                        INPUT_POST,\n                        [\n                        'restricted_groups' => [\n                            'filter' => FILTER_VALIDATE_INT,\n                            'flags' => FILTER_REQUIRE_ARRAY,\n                        ],\n                        ]\n                    );\n                }\n\n                if (!$category->checkLanguage($categoryData['id'], $categoryData['lang'])) {\n                    if (\n                        $category->addCategory($categoryData, $parentId, $categoryData['id']) &&\n                        $categoryPermission->add(\n                            CategoryPermission::USER,\n                            [$categoryData['id']],\n                            $permissions['restricted_user']\n                        ) &&\n                        $categoryPermission->add(\n                            CategoryPermission::GROUP,\n                            [$categoryData['id']],\n                            $permissions['restricted_groups']\n                        )\n                    ) {\n                        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_translated']);\n                    } else {\n                        printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                    }\n                } else {\n                    if ($category->updateCategory($categoryData)) {\n                        $categoryPermission->delete(CategoryPermission::USER, [$categoryData['id']]);\n                        $categoryPermission->delete(CategoryPermission::GROUP, [$categoryData['id']]);\n                        $categoryPermission->add(\n                            CategoryPermission::USER,\n                            [$categoryData['id']],\n                            $permissions['restricted_user']\n                        );\n                        $categoryPermission->add(\n                            CategoryPermission::GROUP,\n                            [$categoryData['id']],\n                            $permissions['restricted_groups']\n                        );\n\n                        $categoryImage->upload();\n\n                        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_updated']);\n                    } else {\n                        printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                    }\n                }\n\n                // All the other translations\n                $languages = Filter::filterInput(INPUT_POST, 'used_translated_languages', FILTER_UNSAFE_RAW);\n            }\n\n            // Deletes an existing category\n            if ($user->perm->hasPermission($user->getUserId(), 'delcateg') && $action == 'removecategory') {\n                $categoryId = Filter::filterInput(INPUT_POST, 'cat', FILTER_VALIDATE_INT);\n                $categoryLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n\n                $categoryRelation = new CategoryRelation($faqConfig);\n\n                $categoryImage = new CategoryImage($faqConfig);\n                $categoryImage->setFileName($category->getCategoryData($categoryId)->getImage());\n\n                if (count($category->getCategoryLanguagesTranslated($categoryId)) === 1) {\n                    $categoryPermission->delete(CategoryPermission::USER, [$categoryId]);\n                    $categoryPermission->delete(CategoryPermission::GROUP, [$categoryId]);\n                    $categoryImage->delete();\n                }\n\n                if (\n                    $category->deleteCategory($categoryId, $categoryLang) &&\n                    $categoryRelation->delete($categoryId, $categoryLang)\n                ) {\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_deleted']);\n                } else {\n                    printf('<p class=\"alert alert-danger\">%s</p>', $faqConfig->getDb()->error());\n                }\n            }\n\n            // Pastes a category\n            if ($action == 'pastecategory') {\n                $category = new Category($faqConfig, [], false);\n                $category->setUser($currentAdminUser);\n                $category->setGroups($currentAdminGroups);\n                $categoryId = Filter::filterInput(INPUT_POST, 'cat', FILTER_VALIDATE_INT);\n                $parentId = Filter::filterInput(INPUT_POST, 'after', FILTER_VALIDATE_INT);\n                if ($category->updateParentCategory((int) $categoryId, (int) $parentId)) {\n                    printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_categ_updated']);\n                } else {\n                    printf(\n                        '<p class=\"alert alert-danger\">%s<br>%s</p>',\n                        $PMF_LANG['ad_categ_paste_error'],\n                        $faqConfig->getDb()->error()\n                    );\n                }\n            }\n\n            // Lists all categories\n            $lang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW, $faqLangCode);\n\n            // If we changed the category tree, unset the object\n            if (isset($category)) {\n                unset($category);\n            }\n\n            $category = new Category($faqConfig, $currentAdminGroups, true);\n            $category->setUser($currentAdminUser);\n            $category->setGroups($currentAdminGroups);\n            $category->getMissingCategories();\n            $category->buildCategoryTree();\n\n            $open = $lastCatId = $openDiv = 0;\n\n            echo '<div class=\"list-group list-group-root\">';\n            foreach ($category->getCategoryTree() as $id => $cat) {\n                // CategoryHelper translated in this language?\n                if ($cat['lang'] == $lang) {\n                    $categoryName = $cat['name'];\n                } else {\n                    $categoryName = $cat['name'] . ' (' . $languageCodes[strtoupper($cat['lang'])] . ')';\n                }\n\n\n                // Has permissions, show lock icon\n                if ($categoryPermission->isRestricted($cat['id'])) {\n                    $categoryName .= ' <i class=\"fa fa-lock\" aria-hidden=\"true\"></i>';\n                }\n\n                   // Category is shown on start page\n                if ((int)$cat['show_home'] === 1) {\n                    $categoryName .= ' <i class=\"fa fa-star\" aria-hidden=\"true\"></i>';\n                }\n\n                // Category is inactive\n                if ((int)$cat['active'] === 0) {\n                    $categoryName .= ' <i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>';\n                }\n\n                // Level of the category\n                $level = $cat['indent'];\n\n                // Any sub-categories?\n                $subCategories = $category->getChildren($cat['id']);\n                $numSubCategories = count($subCategories);\n\n                $hasParent = (bool) $cat['parent_id'];\n\n                if ($hasParent) {\n                    printf(\n                        '<div class=\"list-group collapse\" id=\"category-id-%d\">',\n                        $cat['parent_id']\n                    );\n                }\n\n                printf(\n                    '<div href=\"#category-id-%d\" id=\"%s-%d\" class=\"list-group-item list-group-item-action border-left-0 border-right-0 d-flex justify-content-between align-items-center\" %s>',\n                    $cat['id'],\n                    trim(strip_tags($categoryName)),\n                    $cat['id'],\n                    $numSubCategories > 0 ? 'data-toggle=\"collapse\"' : ''\n                );\n                printf(\n                    '<span>%s %s</span>',\n                    $numSubCategories > 0 ? '<i class=\"fa fa-caret-right pmf-has-subcategories\"></i>' : '',\n                    $categoryName\n                );\n\n                // Buttons:\n                echo '<span>';\n                // Add FAQ to category (always)\n                printf(\n                    '<a class=\"btn btn-info btn-sm\" href=\"?action=editentry&amp;cat=%s&amp;lang=%s\"><i aria-hidden=\"true\" class=\"fa fa-indent\" title=\"%s\"></i></a></a> ',\n                    $cat['id'],\n                    $cat['lang'],\n                    $PMF_LANG['ad_quick_entry']\n                );\n\n                if ($cat['lang'] == $lang) {\n                    // add sub category (if current language)\n                    printf(\n                        '<a class=\"btn btn-info btn-sm\" href=\"?action=addcategory&amp;cat=%s&amp;lang=%s\"><i aria-hidden=\"true\" class=\"fa fa-plus-square\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $cat['lang'],\n                        $PMF_LANG['ad_quick_category']\n                    );\n\n                    // rename (sub) category (if current language)\n                    printf(\n                        '<a class=\"btn btn-info btn-sm\" href=\"?action=editcategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-edit\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $PMF_LANG['ad_kateg_rename']\n                    );\n                }\n\n                // translate category (always)\n                printf(\n                    '<a class=\"btn btn-info btn-sm\" href=\"?action=translatecategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-globe\" title=\"%s\"></i></a> ',\n                    $cat['id'],\n                    $PMF_LANG['ad_categ_translate']\n                );\n\n                // delete (sub) category (if current language)\n                if (count($category->getChildren($cat['id'])) == 0 && $cat['lang'] == $lang) {\n                    printf(\n                        '<a class=\"btn btn-danger btn-sm\" href=\"?action=deletecategory&amp;cat=%s&amp;catlang=%s\"><i aria-hidden=\"true\" class=\"fa fa-trash\" title=\"%s\"></i></a> ',\n                        $cat['id'],\n                        $cat['lang'],\n                        $PMF_LANG['ad_categ_delete']\n                    );\n                } else {\n                    echo '<a class=\"btn btn-inverse btn-sm\" style=\"cursor: not-allowed;\"><i aria-hidden=\"true\" class=\"fa fa-trash\"></i></a>';\n                }\n\n                if ($cat['lang'] == $lang) {\n                    // cut category (if current language)\n                    printf(\n                        '<a class=\"btn btn-warning btn-sm\" href=\"?action=cutcategory&amp;cat=%s\"><i aria-hidden=\"true\" class=\"fa fa-cut\" title=\"%s\"></i></a>  ',\n                        $cat['id'],\n                        $PMF_LANG['ad_categ_cut']\n                    );\n                }\n                echo '</span>';\n                echo '</div>';\n\n                if ($hasParent) {\n                    echo '</div>';\n                }\n\n                $lastCatId = $cat['id'];\n            }\n            ?>\n      <div class=\"d-flex flex-row\">\n      <form method=\"post\">\n        <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n        <button class=\"pmf-save-category-order text-white btn btn-primary mt-3 mr-1\">\n            <?= $PMF_LANG['ad_categ_save_order'] ?>\n        </button>\n      </form>\n      </div>\n      <p class=\"alert alert-info mt-4\"><?= $PMF_LANG['ad_categ_remark'] ?></p>\n    </div>\n  </div>\n  <script src=\"assets/js/category.js\"></script>\n            <?php\n        } else {\n            echo $PMF_LANG['err_NotAuth'];\n        }\n", "<?php\n\n/**\n * The main administration file for the news.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2003-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2003-02-23\n */\n\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\News;use phpMyFAQ\\Strings;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$news = new News($faqConfig);\n\n$csrfToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfCheck = false;\n} else {\n    $csrfCheck = true;\n}\n\nif ('add-news' == $action && $user->perm->hasPermission($user->getUserId(), 'addnews')) { ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_add'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <form id=\"faqEditor\" name=\"faqEditor\" action=\"?action=save-news\" method=\"post\" novalidate>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"newsheader\">\n                            <?= $PMF_LANG['ad_news_header'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"newsheader\" id=\"newsheader\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"news\"><?= $PMF_LANG['ad_news_text'] ?>:</label>\n                        <div class=\"col-9\">\n                            <textarea name=\"news\" rows=\"5\" class=\"form-control\" id=\"news\"></textarea>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorName\">\n                        <?= $PMF_LANG['ad_news_author_name'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"authorName\" id=\"authorName\"\n                                   value=\"<?= $user->getUserData('display_name') ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorEmail\">\n                        <?= $PMF_LANG['ad_news_author_email'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"email\" name=\"authorEmail\" id=\"authorEmail\"\n                                   value=\"<?= $user->getUserData('email') ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"active\">\n                            <?= $PMF_LANG['ad_news_set_active'] ?>:\n                        </label>\n                        <div class=\"col-9 checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"active\" id=\"active\" value=\"y\">\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"comment\">\n                        <?= $PMF_LANG['ad_news_allowComments'] ?>\n                        </label>\n                        <div class=\"col-9 checkbox\">\n                            <label>\n                                <input type=\"checkbox\" name=\"comment\" id=\"comment\" value=\"y\">\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"link\"><?= $PMF_LANG['ad_news_link_url'] ?></label>\n                        <div class=\"col-9\">\n                            <input class=\"form-control\" type=\"text\" name=\"link\" id=\"link\"\n                            placeholder=\"http://www.example.com/\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"linkTitle\">\n                        <?= $PMF_LANG['ad_news_link_title'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"linkTitle\" id=\"linkTitle\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" ><?= $PMF_LANG['ad_news_link_target'] ?></label>\n                        <div class=\"col-9 radio\">\n                            <label>\n                                <input type=\"radio\" name=\"target\" value=\"blank\">\n                                <?= $PMF_LANG['ad_news_link_window'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"self\">\n                                <?= $PMF_LANG['ad_news_link_faq'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"parent\">\n                                <?= $PMF_LANG['ad_news_link_parent'] ?>\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"langTo\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n                        <div class=\"col-9\">\n                            <?= LanguageHelper::renderSelectLanguage($faqLangCode, false, [], 'langTo') ?>\n                        </div>\n                    </div>\n\n                    <legend><?= $PMF_LANG['ad_news_expiration_window'] ?></legend>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateStart\"><?= $PMF_LANG['ad_news_from'] ?></label>\n                        <div class=\"col-3\">\n                            <input type=\"date\" name=\"dateStart\" id=\"dateStart\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateEnd\"><?= $PMF_LANG['ad_news_to'] ?></label>\n                        <div class=\"col-3\">\n                            <input type=\"date\" name=\"dateEnd\" id=\"dateEnd\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                      <div class=\"col-12\">\n                        <div class=\"btn-group float-right mt-2\" role=\"group\">\n                          <a class=\"btn btn-info\" href=\"?action=news\">\n                            <?= $PMF_LANG['ad_entry_back'] ?>\n                          </a>\n                          <button class=\"btn btn-primary\" type=\"submit\">\n                            <?= $PMF_LANG['ad_news_add'] ?>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    <?php\n} elseif ('news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    ?>\n         <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n              <?= $PMF_LANG['msgNews'] ?>\n          </h1>\n          <div class=\"btn-toolbar mb-2 mb-md-0\">\n            <div class=\"btn-group mr-2\">\n              <a href=\"?action=add-news\">\n                  <button class=\"btn btn-sm     btn-success\">\n                    <i aria-hidden=\"true\" class=\"fa fa-plus\"></i> <?= $PMF_LANG['ad_menu_news_add'] ?>\n                  </button>\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <table class=\"table table-hover\">\n                <thead class=\"thead-dark\">\n                    <tr>\n                        <th><?= $PMF_LANG['ad_news_headline'] ?></th>\n                        <th><?= $PMF_LANG['ad_news_date'] ?></th>\n                        <th colspan=\"2\">&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n    <?php\n    $newsHeader = $news->getNewsHeader();\n    $date = new Date($faqConfig);\n    if (count($newsHeader)) {\n        foreach ($newsHeader as $newsItem) {\n            ?>\n                    <tr>\n                        <td><?= Strings::htmlentities($newsItem['header']) ?></td>\n                        <td><?= $date->format($newsItem['date']) ?></td>\n                        <td>\n                            <a class=\"btn btn-primary\" href=\"?action=edit-news&amp;id=<?= $newsItem['id'] ?>\">\n                                <span title=\"<?= $PMF_LANG['ad_news_update'] ?>\" class=\"fa fa-edit\"></span>\n                            </a>\n                        </td>\n                        <td>\n                            <a class=\"btn btn-danger\" href=\"?action=delete-news&amp;id=<?= $newsItem['id'] ?>\">\n                                <span title=\"<?= $PMF_LANG['ad_news_delete'] ?>\" class=\"fa fa-trash\"></span>\n                            </a>\n                        </td>\n                    </tr>\n            <?php\n        }\n    } else {\n        printf(\n            '<tr><td colspan=\"3\">%s</td></tr>',\n            $PMF_LANG['ad_news_nodata']\n        );\n    }\n    ?>\n                </tbody>\n                </table>\n            </div>\n        </div>\n    <?php\n} elseif ('edit-news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    $id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n    $newsData = $news->getNewsEntry($id, true);\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_edit'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <form  action=\"?action=update-news\" method=\"post\" accept-charset=\"utf-8\">\n                    <input type=\"hidden\" name=\"id\" value=\"<?= $newsData['id'] ?>\">\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"newsheader\"><?= $PMF_LANG['ad_news_header'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"newsheader\" id=\"newsheader\" class=\"form-control\"\n                                   value=\"<?= Strings::htmlentities($newsData['header']) ?? '' ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"news\"><?= $PMF_LANG['ad_news_text'] ?>:</label>\n                        <div class=\"col-9\">\n                            <noscript>Please enable JavaScript to use the WYSIWYG editor!</noscript>\n                            <textarea id=\"news\" name=\"news\" class=\"form-control\" rows=\"5\"><?php\n                            if (isset($newsData['content'])) {\n                                echo htmlspecialchars($newsData['content'], ENT_QUOTES);\n                            } ?></textarea>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorName\">\n                        <?= $PMF_LANG['ad_news_author_name'] ?>\n                        </label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" name=\"authorName\" class=\"form-control\"\n                                value=\"<?= Strings::htmlentities($newsData['authorName']) ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"authorEmail\"><?= $PMF_LANG['ad_news_author_email'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"email\" name=\"authorEmail\" class=\"form-control\"\n                                value=\"<?= Strings::htmlentities($newsData['authorEmail']) ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"active\">\n                            <?= $PMF_LANG['ad_news_set_active'] ?>:\n                        </label>\n                        <div class=\"col-9\">\n                            <label>\n                                <input type=\"checkbox\" name=\"active\" id=\"active\" value=\"y\"\n                                    <?php if (isset($newsData['active']) && $newsData['active']) {\n                                        echo ' checked';\n                                    } ?>\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"comment\"><?= $PMF_LANG['ad_news_allowComments'] ?></label>\n                        <div class=\"col-9\">\n                            <label>\n                                <input type=\"checkbox\" name=\"comment\" id=\"comment\" value=\"y\"\n                                <?php if (isset($newsData['allowComments']) && $newsData['allowComments']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_gen_yes'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"link\"><?= $PMF_LANG['ad_news_link_url'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" id=\"link\" name=\"link\"\n                            value=\"<?= Strings::htmlentities($newsData['link']) ?>\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"linkTitle\"><?= $PMF_LANG['ad_news_link_title'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"text\" id=\"linkTitle\" name=\"linkTitle\"\n                            value=\"<?= Strings::htmlentities($newsData['linkTitle']) ?>\" class=\"form-control\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"target\"><?= $PMF_LANG['ad_news_link_target'] ?></label>\n                        <div class=\"col-9\">\n                        <label>\n                                <input type=\"radio\" name=\"target\" value=\"blank\"\n                                <?php if ('blank' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_window'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"self\"\n                                <?php if ('self' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_faq'] ?>\n                                <br>\n                                <input type=\"radio\" name=\"target\" value=\"parent\"\n                                <?php if ('parent' == $newsData['target']) {\n                                    echo ' checked';\n                                } ?>>\n                                <?= $PMF_LANG['ad_news_link_parent'] ?>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"langTo\"><?= $PMF_LANG['ad_entry_locale'] ?>:</label>\n                        <div class=\"col-9\">\n                        <?= LanguageHelper::renderSelectLanguage($newsData['lang'], false, [], 'langTo') ?>\n                        </div>\n                    </div>\n    <?php\n    $dateStart = ($newsData['dateStart'] != '00000000000000' ? Date::createIsoDate($newsData['dateStart'], 'Y-m-d') : '');\n    $dateEnd = ($newsData['dateEnd'] != '99991231235959' ? Date::createIsoDate($newsData['dateEnd'], 'Y-m-d') : '');\n    ?>\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateStart\"><?= $PMF_LANG['ad_news_from'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"date\" name=\"dateStart\" id=\"dateStart\" class=\"form-control\" value=\"<?= $dateStart ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                        <label class=\"col-3 col-form-label\" for=\"dateEnd\"><?= $PMF_LANG['ad_news_to'] ?></label>\n                        <div class=\"col-9\">\n                            <input type=\"date\"  name=\"dateEnd\" id=\"dateEnd\" class=\"form-control\" value=\"<?= $dateEnd ?>\">\n                        </div>\n                    </div>\n\n                    <div class=\"form-group row\">\n                      <div class=\"col-12\">\n                        <div class=\"btn-group float-right mt-2\" role=\"group\">\n                          <button class=\"btn btn-primary\" type=\"submit\">\n                            <?= $PMF_LANG['ad_news_edit'] ?>\n                          </button>\n                          <a class=\"btn btn-info\" href=\"?action=news\">\n                            <?= $PMF_LANG['ad_entry_back'] ?>\n                          </a>\n                        </div>\n                      </div>\n                    </div>\n                </form>\n    <?php\n    $newsId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n    $oComment = new Comments($faqConfig);\n    $comments = $oComment->getCommentsData($newsId, CommentType::NEWS);\n    if (count($comments) > 0) {\n        ?>\n                <div class=\"form-group row\"><strong><?= $PMF_LANG['ad_entry_comment'] ?></strong></div>\n        <?php\n    }\n    foreach ($comments as $item) {\n        ?>\n                <div class=\"form-group row\">\n                    <?= $PMF_LANG['ad_entry_commentby'] ?>\n                    <a href=\"mailto:<?= $item['email'] ?>\">\n                        <?= $item['user'] ?>\n                    </a>:<br>\n                    <?= $item['content'] ?><br>\n                    <?= $PMF_LANG['newsCommentDate'] . Date::createIsoDate($item['date'], 'Y-m-d H:i', false) ?>\n                    <a href=\"?action=delcomment&artid=<?= $newsId ?>&cmtid=<?= $item['id'] ?>&type=<?= CommentType::NEWS ?>\">\n                        <i aria-hidden=\"true\" class=\"fa fa-trash\"></i>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <?php\n    }\n} elseif ('save-news' == $action && $user->perm->hasPermission($user->getUserId(), 'addnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $header = Filter::filterInput(INPUT_POST, 'newsheader', FILTER_SANITIZE_SPECIAL_CHARS);\n    $content = Filter::filterInput(INPUT_POST, 'news', FILTER_SANITIZE_SPECIAL_CHARS);\n    $author = Filter::filterInput(INPUT_POST, 'authorName', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'authorEmail', FILTER_VALIDATE_EMAIL);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $link = Filter::filterInput(INPUT_POST, 'link', FILTER_SANITIZE_SPECIAL_CHARS);\n    $linkTitle = Filter::filterInput(INPUT_POST, 'linkTitle', FILTER_SANITIZE_SPECIAL_CHARS);\n    $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_UNSAFE_RAW);\n    $target = Filter::filterInput(INPUT_POST, 'target', FILTER_UNSAFE_RAW);\n\n    $newsData = array(\n        'lang' => $newsLang,\n        'header' => $header,\n        'content' => html_entity_decode($content),\n        'authorName' => $author,\n        'authorEmail' => $email,\n        'active' => (is_null($active)) ? 'n' : 'y',\n        'comment' => (is_null($comment)) ? 'n' : 'y',\n        'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000',\n        'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959',\n        'link' => $link,\n        'linkTitle' => $linkTitle,\n        'date' => date('YmdHis'),\n        'target' => (is_null($target)) ? '' : $target,\n    );\n\n    if ($news->addNewsEntry($newsData)) {\n        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_updatesuc']);\n    } else {\n        printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_news_insertfail']);\n    }\n    printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n    ?>\n            </div>\n        </div>\n    <?php\n} elseif ('update-news' == $action && $user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $dateStart = Filter::filterInput(INPUT_POST, 'dateStart', FILTER_UNSAFE_RAW);\n    $dateEnd = Filter::filterInput(INPUT_POST, 'dateEnd', FILTER_UNSAFE_RAW);\n    $header = Filter::filterInput(INPUT_POST, 'newsheader', FILTER_UNSAFE_RAW);\n    $content = Filter::filterInput(INPUT_POST, 'news', FILTER_SANITIZE_SPECIAL_CHARS);\n    $author = Filter::filterInput(INPUT_POST, 'authorName', FILTER_UNSAFE_RAW);\n    $email = Filter::filterInput(INPUT_POST, 'authorEmail', FILTER_VALIDATE_EMAIL);\n    $active = Filter::filterInput(INPUT_POST, 'active', FILTER_UNSAFE_RAW);\n    $comment = Filter::filterInput(INPUT_POST, 'comment', FILTER_UNSAFE_RAW);\n    $link = Filter::filterInput(INPUT_POST, 'link', FILTER_UNSAFE_RAW);\n    $linkTitle = Filter::filterInput(INPUT_POST, 'linkTitle', FILTER_UNSAFE_RAW);\n    $newsLang = Filter::filterInput(INPUT_POST, 'langTo', FILTER_UNSAFE_RAW);\n    $target = Filter::filterInput(INPUT_POST, 'target', FILTER_UNSAFE_RAW);\n\n    $newsData = [\n        'lang' => $newsLang,\n        'header' => $header,\n        'content' => html_entity_decode($content),\n        'authorName' => $author,\n        'authorEmail' => $email,\n        'active' => (is_null($active)) ? 'n' : 'y',\n        'comment' => (is_null($comment)) ? 'n' : 'y',\n        'dateStart' => (empty($dateStart)) ? '00000000000000' : str_replace('-', '', $dateStart) . '000000',\n        'dateEnd' => (empty($dateEnd)) ? '99991231235959' : str_replace('-', '', $dateEnd) . '235959',\n        'link' => $link,\n        'linkTitle' => $linkTitle,\n        'date' => date('YmdHis'),\n        'target' => (is_null($target)) ? '' : $target,\n    ];\n\n    $newsId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n    if ($news->updateNewsEntry((int) $newsId, $newsData)) {\n        printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_updatesuc']);\n    } else {\n        printf('<p class=\"alert alert-danger\">%s</p>', $PMF_LANG['ad_news_updatefail']);\n    }\n    printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n    ?>\n            </div>\n        </div>\n    <?php\n} elseif ('delete-news' == $action && $user->perm->hasPermission($user->getUserId(), 'delnews')) {\n    ?>\n        <div class=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 class=\"h2\">\n            <i aria-hidden=\"true\" class=\"fa fa-pencil\"></i>\n            <?= $PMF_LANG['ad_news_data'] ?>\n          </h1>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n    <?php\n    $precheck = Filter::filterInput(INPUT_POST, 'really', FILTER_UNSAFE_RAW, 'no');\n    $deleteId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n\n    if ('no' == $precheck) {\n        ?>\n    <div class=\"form-group row\"><?= $PMF_LANG['ad_news_del'];\n    ?></div>\n    <div class=\"text-center\">\n    <form action=\"?action=delete-news\" method=\"post\" accept-charset=\"utf-8\">\n    <input type=\"hidden\" name=\"id\" value=\"<?= $deleteId ?>\">\n    <input type=\"hidden\" name=\"csrf\" value=\"<?= $user->getCsrfTokenFromSession() ?>\">\n    <input type=\"hidden\" name=\"really\" value=\"yes\">\n        <button class=\"btn btn-warning\" type=\"submit\" name=\"submit\">\n            <?= $PMF_LANG['ad_news_yesdelete'];\n            ?>\n        </button>\n        <a class=\"btn btn-inverse\" onclick=\"history.back();\">\n            <?= $PMF_LANG['ad_news_nodelete'];\n            ?>\n        </a>\n    </form>\n    </div>\n    \n        <?php\n    } else {\n        if ($csrfCheck) {\n            $deleteId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT);\n            $news->deleteNews((int)$deleteId);\n            printf('<p class=\"alert alert-success\">%s</p>', $PMF_LANG['ad_news_delsuc']);\n            printf('<div class=\"form-group row\">&rarr; <a href=\"?action=news\">%s</a></p>', $PMF_LANG['msgNews']);\n        }\n    }\n} else {\n    echo $PMF_LANG['err_NotAuth'];\n}\n", "<?php\n\n/**\n * Shows the page with the FAQ record and - when available - the user comments.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Lars Tiedemann <larstiedemann@yahoo.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2002-08-27\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentException;\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Glossary;\nuse phpMyFAQ\\Helper\\AttachmentHelper;\nuse phpMyFAQ\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\Helper\\FaqHelper as HelperFaq;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Helper\\SearchHelper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\LinkVerifier;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Relation;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Services;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\nuse phpMyFAQ\\Visits;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = new Captcha($faqConfig);\n$oGlossary = new Glossary($faqConfig);\n$faqTagging = new Tags($faqConfig);\n$faqRelation = new Relation($faqConfig);\n$faqRating = new Rating($faqConfig);\n$faqComment = new Comments($faqConfig);\n$markDown = new \\ParsedownExtra();\n$faqHelper = new HelperFaq($faqConfig);\n$faqPermission = new FaqPermission($faqConfig);\n$attachmentHelper = new AttachmentHelper();\n\nif (is_null($user)) {\n    $user = new CurrentUser($faqConfig);\n}\n\n$faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n\n$captcha->setSessionId($sids);\nif (!is_null($showCaptcha)) {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\n$currentCategory = $cat;\n\n$recordId = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\n\n// Get all data from the FAQ record\nif (0 === (int)$solutionId) {\n    $faq->getRecord($recordId);\n} else {\n    $faq->getRecordBySolutionId($solutionId);\n}\n\nif (isset($faq->faqRecord['id'])) {\n    $recordId = $faq->faqRecord['id'];\n}\n\ntry {\n    $faqSession->userTracking('article_view', $recordId);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n$faqVisits = new Visits($faqConfig);\n$faqVisits->logViews((int) $recordId);\n\n$question = $faq->getRecordTitle($recordId);\nif ($faqConfig->get('main.enableMarkdownEditor')) {\n    $answer = $markDown->text($faq->faqRecord['content']);\n} else {\n    $answer = $faqHelper->renderMarkupContent($faq->faqRecord['content']);\n}\n\n// Rewrite URL fragments\n$currentUrl = htmlspecialchars(\"//{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}\", ENT_QUOTES, 'UTF-8');\n$answer = $faqHelper->rewriteUrlFragments($answer, $currentUrl);\n\n// Add Glossary entries for answers only\n$answer = $oGlossary->insertItemsIntoContent($answer);\n\n// Set the path of the current category\n$categoryName = $category->getPath($currentCategory, ' &raquo; ', true, '');\n\n$highlight = Filter::filterInput(INPUT_GET, 'highlight', FILTER_UNSAFE_RAW);\nif (\n    !is_null($highlight) && $highlight != '/' && $highlight != '<' && $highlight != '>' && Strings::strlen(\n        $highlight\n    ) > 3\n) {\n    $highlight = str_replace(\"'\", '\u00b4', $highlight);\n    $highlight = str_replace(['^', '.', '?', '*', '+', '{', '}', '(', ')', '[', ']'], '', $highlight);\n    $highlight = preg_quote($highlight, '/');\n    $searchItems = explode(' ', $highlight);\n\n    foreach ($searchItems as $item) {\n        if (Strings::strlen($item) > 2) {\n            $question = Utils::setHighlightedString($question, $item);\n            $answer = Utils::setHighlightedString($answer, $item);\n        }\n    }\n}\n\n$linkVerifier = new LinkVerifier($faqConfig);\n$linkArray = $linkVerifier->getUrlPool();\nif (isset($linkArray['href'])) {\n    foreach (array_unique($linkArray['href']) as $_url) {\n        $xpos = strpos($_url, 'index.php?action=faq');\n        if (!($xpos === false)) {\n            // Get the FaqHelper link title\n            $matches = [];\n            preg_match('/id=([\\d]+)/ism', $_url, $matches);\n            $_id = $matches[1];\n            $_title = $faq->getRecordTitle($_id);\n            $_link = substr($_url, $xpos + 9);\n            if (strpos($_url, '&amp;') === false) {\n                $_link = str_replace('&', '&amp;', $_link);\n            }\n            $oLink = new Link($faqConfig->getDefaultUrl() . $_link, $faqConfig);\n            $oLink->itemTitle = $oLink->tooltip = $_title;\n            $newFaqPath = $oLink->toString();\n            $answer = str_replace($_url, $newFaqPath, $answer);\n        }\n    }\n}\n\n// List all faq attachments\nif ($faqConfig->get('records.disableAttachments') && 'yes' == $faq->faqRecord['active']) {\n    try {\n        $attList = AttachmentFactory::fetchByRecordId($faqConfig, $recordId);\n        $answer .= $attachmentHelper->renderAttachmentList($attList);\n    } catch (AttachmentException $e) {\n        // handle exception\n    }\n}\n\n// List all categories for this faq\n$htmlAllCategories = '';\n$multiCategories = $category->getCategoriesFromFaq($recordId);\nif (count($multiCategories) > 1) {\n    foreach ($multiCategories as $multiCat) {\n        $path = $category->getPath($multiCat['id'], ' &raquo; ', true, 'breadcrumb-related-categories');\n        if ('' === trim($path)) {\n            continue;\n        }\n        $htmlAllCategories .= $path;\n    }\n}\n\n// Related FAQs\n$faqSearchResult->reviewResultSet(\n    $faqRelation->getAllRelatedByQuestion(\n        $faq->faqRecord['title'],\n        $faq->faqRecord['keywords']\n    )\n);\n\n$searchHelper = new SearchHelper($faqConfig);\n$relatedFaqs = $searchHelper->renderRelatedFaqs($faqSearchResult, $recordId);\n\n// Show link to edit the faq?\n$editThisEntry = '';\nif ($user->perm->hasPermission($user->getUserId(), 'edit_faq')) {\n    $editThisEntry = sprintf(\n        '<i aria-hidden=\"true\" class=\"fa fa-pencil\"></i> <a class=\"data\" href=\"./admin/index.php?action=editentry&id=%d&lang=%s\">%s</a>',\n        $recordId,\n        $lang,\n        $PMF_LANG['ad_entry_edit_1'] . ' ' . $PMF_LANG['ad_entry_edit_2']\n    );\n}\n\n// Is the faq expired?\n$expired = (date('YmdHis') > $faq->faqRecord['dateEnd']);\n\n// Number of comments\n$numComments = $faqComment->getNumberOfComments();\n\n// Does the user have the right to add a comment?\nif (\n    (-1 === $user->getUserId() && !$faqConfig->get('records.allowCommentsForGuests')) ||\n    ($faq->faqRecord['active'] === 'no') || ('n' === $faq->faqRecord['comment']) || $expired\n) {\n    $commentMessage = $PMF_LANG['msgWriteNoComment'];\n} else {\n    $commentMessage = sprintf(\n        '%s<a href=\"#\" class=\"show-comment-form\">%s</a>',\n        $PMF_LANG['msgYouCan'],\n        $PMF_LANG['msgWriteComment']\n    );\n    $template->parseBlock(\n        'mainPageContent',\n        'enableComments',\n        [\n            'numberOfComments' => sprintf(\n                '%d %s',\n                $numComments[$recordId] ?? 0,\n                $PMF_LANG['ad_start_comments']\n            ),\n        ]\n    );\n}\n\n$translationUrl = sprintf(\n    str_replace(\n        '%',\n        '%%',\n        Link::getSystemRelativeUri('index.php')\n    ) . 'index.php?%saction=translate&amp;cat=%s&amp;id=%d&amp;srclang=%s',\n    $sids,\n    $currentCategory,\n    $recordId,\n    $lang\n);\n\n$availableLanguages = $faqConfig->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\nif (!empty($availableLanguages) && count($availableLanguages) > 1) {\n    $template->parseBlock(\n        'mainPageContent',\n        'switchLanguage',\n        [\n            'msgChangeLanguage' => $PMF_LANG['msgLanguageSubmit'],\n        ]\n    );\n}\n\nif (\n    $user->perm->hasPermission($user->getUserId(), 'addtranslation') &&\n    !empty($availableLanguages) && count($availableLanguages) > 1\n) {\n    $template->parseBlock(\n        'mainPageContent',\n        'addTranslation',\n        [\n            'msgTranslate' => $PMF_LANG['msgTranslate'],\n        ]\n    );\n}\n\nif ($user->perm->hasPermission($user->getUserId(), 'edit_faq') && !empty($faq->faqRecord['notes'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'privateNotes',\n        [\n            'notesHeader' => $PMF_LANG['ad_admin_notes'],\n            'notes' => $faq->faqRecord['notes']\n        ]\n    );\n}\n\nif ('-' !== $faqTagging->getAllLinkTagsById($recordId)) {\n    $template->parseBlock(\n        'mainPageContent',\n        'tagsAvailable',\n        [\n            'renderTags' => $PMF_LANG['msg_tags'] . ': ' . $faqTagging->getAllLinkTagsById($recordId),\n        ]\n    );\n}\n\nif ('' !== $htmlAllCategories) {\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedCategories',\n        [\n            'renderRelatedCategoriesHeader' => $PMF_LANG['msgArticleCategories'],\n            'renderRelatedCategories' => $htmlAllCategories,\n        ]\n    );\n}\n\nif ('' !== $relatedFaqs) {\n    $template->parseBlock(\n        'mainPageContent',\n        'relatedFaqs',\n        [\n            'renderRelatedArticlesHeader' => $PMF_LANG['msg_related_articles'],\n            'renderRelatedArticles' => $relatedFaqs,\n        ]\n    );\n}\n\n$date = new Date($faqConfig);\n$captchaHelper = new CaptchaHelper($faqConfig);\n\n// We need some Links from social networks\n$faqServices = new Services($faqConfig);\n$faqServices->setCategoryId($cat);\n$faqServices->setFaqId($id);\n$faqServices->setLanguage($lang);\n$faqServices->setQuestion($faq->getRecordTitle($id));\n\n// Check if category ID and FAQ ID are linked together\nif (!$category->categoryHasLinkToFaq($recordId, $currentCategory)) {\n    $http->setStatus(404);\n}\n\n// Check if author name should be visible according to GDPR option\nif ($user->getUserVisibilityByEmail($faq->faqRecord['email'])) {\n    $author = $faq->faqRecord['author'];\n} else {\n    $author = 'n/a';\n}\n\n$template->parse(\n    'mainPageContent',\n    [\n        'baseHref' => $faqSystem->getSystemUri($faqConfig),\n        'solutionId' => $faq->faqRecord['solution_id'],\n        'solutionIdLink' => Link::getSystemRelativeUri() . '?solution_id=' . $faq->faqRecord['solution_id'],\n        'question' => Strings::htmlentities($question),\n        'answer' => $answer,\n        'faqDate' => $date->format($faq->faqRecord['date']),\n        'faqAuthor' => $author,\n        'editThisEntry' => $editThisEntry,\n        'msgPdf' => $PMF_LANG['msgPDF'],\n        'msgPrintFaq' => $PMF_LANG['msgPrintArticle'],\n        'sendToFriend' => $faqHelper->renderSendToFriend($faqServices->getSuggestLink()),\n        'shareOnTwitter' => $faqHelper->renderTwitterShareLink($faqServices->getShareOnTwitterLink()),\n        'linkToPdf' => $faqServices->getPdfLink(),\n        'translationUrl' => $translationUrl,\n        'languageSelection' => LanguageHelper::renderSelectLanguage(\n            $faqLangCode,\n            false,\n            $availableLanguages,\n            'translation'\n        ),\n        'msgTranslateSubmit' => $PMF_LANG['msgTranslateSubmit'],\n        'saveVotingPATH' => sprintf(\n            str_replace(\n                '%',\n                '%%',\n                $faqConfig->getDefaultUrl()\n            ) . 'index.php?%saction=savevoting',\n            $sids\n        ),\n        'saveVotingID' => $recordId,\n        'saveVotingIP' => $_SERVER['REMOTE_ADDR'],\n        'msgAverageVote' => $PMF_LANG['msgAverageVote'],\n        'renderVotingStars' => '',\n        'printVotings' => $faqRating->getVotingResult($recordId),\n        'switchLanguage' => $faqHelper->renderChangeLanguageSelector($faq, $currentCategory),\n        'msgVoteUsability' => $PMF_LANG['msgVoteUsability'],\n        'msgVoteBad' => $PMF_LANG['msgVoteBad'],\n        'msgVoteGood' => $PMF_LANG['msgVoteGood'],\n        'msgVoteSubmit' => $PMF_LANG['msgVoteSubmit'],\n        'writeCommentMsg' => $commentMessage,\n        'msgWriteComment' => $PMF_LANG['msgWriteComment'],\n        'id' => $recordId,\n        'lang' => $lang,\n        'msgCommentHeader' => $PMF_LANG['msgCommentHeader'],\n        'msgNewContentName' => $PMF_LANG['msgNewContentName'],\n        'msgNewContentMail' => $PMF_LANG['msgNewContentMail'],\n        'defaultContentMail' => ($user instanceof CurrentUser) ? $user->getUserData('email') : '',\n        'defaultContentName' => ($user instanceof CurrentUser) ? $user->getUserData('display_name') : '',\n        'msgYourComment' => $PMF_LANG['msgYourComment'],\n        'msgNewContentSubmit' => $PMF_LANG['msgNewContentSubmit'],\n        'captchaFieldset' => $captchaHelper->renderCaptcha($captcha, 'writecomment', $PMF_LANG['msgCaptcha'], $auth),\n        'renderComments' => $faqComment->getComments($recordId, CommentType::FAQ),\n        'msg_about_faq' => $PMF_LANG['msg_about_faq'],\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => $categoryName\n    ]\n);\n", "<?php\n\n/**\n * This is the main public frontend page of phpMyFAQ. It detects the browser's\n * language, gets and sets all cookie, post and get information and includes\n * the templates we need and set all internal variables to the template\n * variables. That's all.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Lars Tiedemann <php@larstiedemann.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2001-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2001-02-12\n */\n\nuse phpMyFAQ\\Attachment\\AttachmentFactory;\nuse phpMyFAQ\\Auth\\AuthLdap as AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso as AuthSso;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Category\\CategoryRelation;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper as HelperCategory;\nuse phpMyFAQ\\Helper\\HttpHelper as HelperHttp;\nuse phpMyFAQ\\Helper\\LanguageHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\Seo;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\System;\nuse phpMyFAQ\\Tags;\nuse phpMyFAQ\\Template;\nuse phpMyFAQ\\Template\\TemplateHelper;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Define the named constant used as a check by any included PHP file\n//\nconst IS_VALID_PHPMYFAQ = null;\n\n//\n// Bootstrapping\n//\nrequire __DIR__ . '/src/Bootstrap.php';\n\n//\n// HTTP Helper\n//\n$http = new HelperHttp();\n\n//\n// Get language (default: english)\n//\n$Language = new Language($faqConfig);\n$faqLangCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\n// Preload English strings\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\n$showCaptcha = Filter::filterInput(INPUT_GET, 'gen', FILTER_UNSAFE_RAW);\nif (isset($faqLangCode) && Language::isASupportedLanguage($faqLangCode) && is_null($showCaptcha)) {\n    // Overwrite English strings with the ones we have in the current language,\n    // but don't include UTF-8 encoded files, these will break the captcha images\n    if (!file_exists('lang/language_' . $faqLangCode . '.php')) {\n        $faqLangCode = 'en';\n    }\n    require_once 'lang/language_' . $faqLangCode . '.php';\n} else {\n    $faqLangCode = 'en';\n}\n\n//Load plurals support for selected language\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($faqLangCode);\n\n/*\n * Initialize attachment factory\n */\nAttachmentFactory::init(\n    $faqConfig->get('records.attachmentsStorageType'),\n    $faqConfig->get('records.defaultAttachmentEncKey'),\n    $faqConfig->get('records.enableAttachmentEncryption')\n);\n\n//\n// Get user action\n//\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n\n//\n// Authenticate current user\n//\n$auth = $error = null;\n$loginVisibility = 'hidden';\n\n$faqusername = Filter::filterInput(INPUT_POST, 'faqusername', FILTER_UNSAFE_RAW);\n$faqpassword = Filter::filterInput(INPUT_POST, 'faqpassword', FILTER_UNSAFE_RAW, FILTER_FLAG_NO_ENCODE_QUOTES);\n$faqaction = Filter::filterInput(INPUT_POST, 'faqloginaction', FILTER_UNSAFE_RAW);\n$rememberMe = Filter::filterInput(INPUT_POST, 'faqrememberme', FILTER_UNSAFE_RAW);\n\n// Set username via SSO\nif ($faqConfig->get('security.ssoSupport') && isset($_SERVER['REMOTE_USER'])) {\n    $faqusername = trim($_SERVER['REMOTE_USER']);\n    $faqpassword = '';\n}\n\n//\n// Get CSRF Token\n//\n$csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_UNSAFE_RAW);\nif (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $csrfToken) {\n    $csrfChecked = false;\n} else {\n    $csrfChecked = true;\n}\n\n// Login via local DB or LDAP or SSO\nif (!is_null($faqusername) && !is_null($faqpassword)) {\n    $user = new CurrentUser($faqConfig);\n    if (!is_null($rememberMe) && 'rememberMe' === $rememberMe) {\n        $user->enableRememberMe();\n    }\n    if ($faqConfig->isLdapActive() && function_exists('ldap_connect')) {\n        try {\n            $authLdap = new AuthLdap($faqConfig);\n            $user->addAuth($authLdap, 'ldap');\n        } catch (Exception $e) {\n            $error = $e->getMessage() . '<br>';\n        }\n    }\n    if ($faqConfig->get('security.ssoSupport')) {\n        $authSso = new AuthSso($faqConfig);\n        $user->addAuth($authSso, 'sso');\n    }\n\n    if ($user->login($faqusername, $faqpassword)) {\n        if ($user->getStatus() != 'blocked') {\n            $auth = true;\n            if (empty($action)) {\n                $action = $faqaction; // SSO logins don't have $faqaction\n            }\n        } else {\n            $error = $error . $PMF_LANG['ad_auth_fail'] . ' (' . $faqusername . ')';\n            $loginVisibility = '';\n            $action = 'password' === $action ? 'password' : 'login';\n        }\n    } else {\n        // error\n        $error = $error . $PMF_LANG['ad_auth_fail'];\n        $loginVisibility = '';\n        $action = 'password' === $action ? 'password' : 'login';\n    }\n} else {\n    // Try to authenticate with cookie information\n    $user = CurrentUser::getFromCookie($faqConfig);\n\n    // authenticate with session information\n    if (!$user instanceof CurrentUser) {\n        $user = CurrentUser::getFromSession($faqConfig);\n    }\n\n    if ($user instanceof CurrentUser) {\n        $auth = true;\n    } else {\n        $user = new CurrentUser($faqConfig);\n    }\n}\n\n//\n// Logout\n//\nif ($csrfChecked && 'logout' === $action && isset($auth)) {\n    $user->deleteFromSession(true);\n    $auth = null;\n    $action = 'main';\n    $ssoLogout = $faqConfig->get('security.ssoLogoutRedirect');\n    if ($faqConfig->get('security.ssoSupport') && !empty($ssoLogout)) {\n        header('Location: ' . $ssoLogout);\n    } else {\n        header('Location: ' . $faqConfig->getDefaultUrl());\n    }\n}\n\n//\n// Get current user and group id - default: -1\n//\nif (!is_null($user) && $user instanceof CurrentUser) {\n    $currentUser = $user->getUserId();\n    if ($user->perm instanceof MediumPermission) {\n        $currentGroups = $user->perm->getUserGroups($currentUser);\n    } else {\n        $currentGroups = [-1];\n    }\n    if (0 == count($currentGroups)) {\n        $currentGroups = [-1];\n    }\n} else {\n    $currentUser = -1;\n    $currentGroups = [-1];\n}\n\n//\n// Use mbstring extension if available and when possible\n//\n$validMbStrings = ['ja', 'en', 'uni'];\n$mbLanguage = ($PMF_LANG['metaLanguage'] != 'ja') ? 'uni' : $PMF_LANG['metaLanguage'];\nif (function_exists('mb_language') && in_array($mbLanguage, $validMbStrings)) {\n    mb_language($mbLanguage);\n    mb_internal_encoding('utf-8');\n}\n\n//\n// Found a session ID in _GET or _COOKIE?\n//\n$sidGet = Filter::filterInput(INPUT_GET, PMF_GET_KEY_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$sidCookie = Filter::filterInput(INPUT_COOKIE, Session::PMF_COOKIE_NAME_SESSIONID, FILTER_VALIDATE_INT);\n$faqSession = new Session($faqConfig);\n$faqSession->setCurrentUser($user);\n\n// Note: do not track internal calls\n$internal = false;\nif (isset($_SERVER['HTTP_USER_AGENT'])) {\n    $internal = (strpos($_SERVER['HTTP_USER_AGENT'], 'phpMyFAQ%2F') === 0);\n}\nif (!$internal) {\n    if (is_null($sidGet) && is_null($sidCookie)) {\n        // Create a per-site unique SID\n        try {\n            $faqSession->userTracking('new_session', 0);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } elseif (!is_null($sidCookie)) {\n        try {\n            $faqSession->checkSessionId($sidCookie, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    } else {\n        try {\n            $faqSession->checkSessionId($sidGet, $_SERVER['REMOTE_ADDR']);\n        } catch (Exception $e) {\n            $pmfExceptions[] = $e->getMessage();\n        }\n    }\n}\n\n//\n// Is user tracking activated?\n//\n$sids = '';\nif ($faqConfig->get('main.enableUserTracking')) {\n    if ($faqSession->getCurrentSessionId() > 0) {\n        $faqSession->setCookie(Session::PMF_COOKIE_NAME_SESSIONID, $faqSession->getCurrentSessionId());\n        if (is_null($sidCookie)) {\n            $sids = sprintf('sid=%d&amp;lang=%s&amp;', $faqSession->getCurrentSessionId(), $faqLangCode);\n        }\n    } elseif (is_null($sidGet) || is_null($sidCookie)) {\n        if (is_null($sidCookie)) {\n            if (!is_null($sidGet)) {\n                $sids = sprintf('sid=%d&amp;lang=%s&amp;', $sidGet, $faqLangCode);\n            }\n        }\n    }\n} elseif (\n    !$faqSession->setCookie(\n        Session::PMF_COOKIE_NAME_SESSIONID,\n        $faqSession->getCurrentSessionId(),\n        $_SERVER['REQUEST_TIME'] + PMF_LANGUAGE_EXPIRED_TIME\n    )\n) {\n    $sids = sprintf('lang=%s&amp;', $faqLangCode);\n}\n\n//\n// Found a article language?\n//\n$lang = Filter::filterInput(INPUT_POST, 'artlang', FILTER_UNSAFE_RAW);\nif (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n    $lang = Filter::filterInput(INPUT_GET, 'artlang', FILTER_UNSAFE_RAW);\n    if (is_null($lang) && !Language::isASupportedLanguage($lang)) {\n        $lang = $faqLangCode;\n    }\n}\n\n//\n// Sanitize language string\n//\nif (!Language::isASupportedLanguage($lang)) {\n    $lang = $faqConfig->getDefaultLanguage();\n}\n\n//\n// Found a search string?\n//\n$searchTerm = Filter::filterInput(INPUT_GET, 'search', FILTER_UNSAFE_RAW, '');\n\n//\n// Create a new FAQ object\n//\n$faq = new Faq($faqConfig);\n$faq->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Category object\n//\n$category = new Category($faqConfig, $currentGroups, true);\n$category->setUser($currentUser)\n    ->setGroups($currentGroups);\n\n//\n// Create a new Tags object\n//\n$oTag = new Tags($faqConfig);\n\n//\n// Create URL\n//\n$faqSystem = new System();\n$faqLink = new Link($faqSystem->getSystemUri($faqConfig), $faqConfig);\n$currentPageUrl = $faqLink->getCurrentUrl();\n\n//\n// Found a record ID?\n//\n$id = Filter::filterInput(INPUT_GET, 'id', FILTER_VALIDATE_INT);\nif (!is_null($id)) {\n    $faq->getRecord($id);\n    $title = ' - ' . $faq->faqRecord['title'];\n    $keywords = ',' . $faq->faqRecord['keywords'];\n    $metaDescription = str_replace('\"', '', strip_tags($faq->getRecordPreview($id)));\n    $url = sprintf(\n        '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $sids,\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $faqLink = new Link($url, $faqConfig);\n    $faqLink->itemTitle = $faq->faqRecord['title'];\n    $currentPageUrl = $faqLink->toString(true);\n} else {\n    $id = '';\n    $title = ' - powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $metaDescription = str_replace('\"', '', $faqConfig->get('main.metaDescription'));\n}\n\n//\n// found a solution ID?\n//\n$solutionId = Filter::filterInput(INPUT_GET, 'solution_id', FILTER_VALIDATE_INT);\nif (!is_null($solutionId)) {\n    $title = ' -  powered by phpMyFAQ ' . $faqConfig->getVersion();\n    $keywords = '';\n    $faqData = $faq->getIdFromSolutionId($solutionId);\n    if (is_array($faqData)) {\n        $id = $faqData['id'];\n        $lang = $faqData['lang'];\n        $title = ' - ' . $faq->getRecordTitle($id);\n        $keywords = ',' . $faq->getRecordKeywords($id);\n        $metaDescription = str_replace('\"', '', Utils::makeShorterText(strip_tags($faqData['content']), 12));\n        $url = sprintf(\n            '%sindex.php?%saction=faq&cat=%d&id=%d&artlang=%s',\n            $faqConfig->getDefaultUrl(),\n            $sids,\n            $faqData['category_id'],\n            $id,\n            $lang\n        );\n        $faqLink = new Link($url, $faqConfig);\n        $faqLink->itemTitle = $faqData['question'];\n        $currentPageUrl = $faqLink->toString(true);\n    }\n}\n\n//\n// Handle the Tagging ID\n//\n$tag_id = Filter::filterInput(INPUT_GET, 'tagging_id', FILTER_VALIDATE_INT);\nif (!is_null($tag_id)) {\n    $title = ' - ' . $oTag->getTagNameById($tag_id);\n    $keywords = '';\n}\n\n//\n// Handle the SiteMap\n//\n$letter = Filter::filterInput(INPUT_GET, 'letter', FILTER_UNSAFE_RAW);\nif (!is_null($letter) && (1 == Strings::strlen($letter))) {\n    $title = ' - ' . $letter . '...';\n    $keywords = $letter;\n}\n\n//\n// Found a category ID?\n//\n$cat = Filter::filterInput(INPUT_GET, 'cat', FILTER_VALIDATE_INT, 0);\n$categoryFromId = -1;\nif (is_numeric($id) && $id > 0) {\n    $categoryFromId = $category->getCategoryIdFromFaq($id);\n}\nif ($categoryFromId != -1 && $cat == 0) {\n    $cat = $categoryFromId;\n}\n$category->transform(0);\n$category->collapseAll();\nif ($cat != 0) {\n    $category->expandTo($cat);\n}\nif (isset($cat) && ($cat != 0) && ($id == '') && isset($category->categoryName[$cat]['name'])) {\n    $title = ' - ' . $category->categoryName[$cat]['name'];\n    $metaDescription = $category->categoryName[$cat]['description'];\n}\n\n//\n// Found an action request?\n//\nif (!isset(Link::$allowedActionParameters[$action])) {\n    $action = 'main';\n}\n\n//\n// Select the template for the requested page\n//\nif ($action !== 'main') {\n    $includeTemplate = $action . '.html';\n    $includePhp = $action . '.php';\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n} else {\n    if (isset($solutionId) && is_numeric($solutionId)) {\n        // show the record with the solution ID\n        $includeTemplate = 'faq.html';\n        $includePhp = 'faq.php';\n    } else {\n        $includeTemplate = 'startpage.html';\n        $includePhp = 'startpage.php';\n    }\n    $renderUri = '?sid=' . $faqSession->getCurrentSessionId();\n}\n\n//\n// Set sidebar column\n//\nif (($action === 'faq') || ($action === 'show') || ($action === 'main')) {\n    $sidebarTemplate = 'sidebar-tagcloud.html';\n} else {\n    $sidebarTemplate = 'sidebar-empty.html';\n}\n\n//\n// Check if FAQ should be secured\n//\nif ($faqConfig->get('security.enableLoginOnly')) {\n    if ($auth) {\n        $indexSet = 'index.html';\n    } else {\n        switch ($action) {\n            case 'register':\n            case 'thankyou':\n                $indexSet = 'new-user.page.html';\n                break;\n            case 'password':\n                $indexSet = 'password.page.html';\n                break;\n            default:\n                $indexSet = 'login.page.html';\n                break;\n        }\n    }\n} else {\n    $indexSet = 'index.html';\n}\n\n//\n// phpMyFAQ installation is in maintenance mode\n//\nif ($faqConfig->get('main.maintenanceMode')) {\n    $indexSet = 'maintenance.page.html';\n}\n\n//\n// Load template files and set template variables\n//\n$template = new Template(\n    [\n        'index' => $indexSet,\n        'sidebar' => $sidebarTemplate,\n        'mainPageContent' => $includeTemplate,\n    ],\n    new TemplateHelper($faqConfig),\n    $faqConfig->get('main.templateSet')\n);\n\n$categoryRelation = new CategoryRelation($faqConfig);\n\n$categoryHelper = new HelperCategory();\n$categoryHelper->setCategory($category);\n$categoryHelper->setConfiguration($faqConfig);\n$categoryHelper->setCategoryRelation($categoryRelation);\n\n$keywordsArray = array_merge(explode(',', $keywords), explode(',', $faqConfig->get('main.metaKeywords')));\n$keywordsArray = array_filter($keywordsArray, 'strlen');\nshuffle($keywordsArray);\n$keywords = implode(',', $keywordsArray);\n\nif (!is_null($error)) {\n    $loginMessage = '<p class=\"error\">' . $error . '</p>';\n} else {\n    $loginMessage = '';\n}\n\n$faqSeo = new Seo($faqConfig);\n\n$tplMainPage = [\n    'msgLoginUser' => $user->isLoggedIn() ? $user->getUserData('display_name') : $PMF_LANG['msgLoginUser'],\n    'title' => Strings::htmlspecialchars($faqConfig->getTitle() . $title),\n    'baseHref' => $faqSystem->getSystemUri($faqConfig),\n    'version' => $faqConfig->getVersion(),\n    'header' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle())),\n    'metaTitle' => Strings::htmlspecialchars(str_replace('\"', '', $faqConfig->getTitle() . $title)),\n    'metaDescription' => Strings::htmlspecialchars($metaDescription ?? ''),\n    'metaKeywords' => Strings::htmlspecialchars($keywords),\n    'metaPublisher' => Strings::htmlspecialchars($faqConfig->get('main.metaPublisher')),\n    'metaLanguage' => $PMF_LANG['metaLanguage'],\n    'metaRobots' => $faqSeo->getMetaRobots($action),\n    'phpmyfaqversion' => $faqConfig->getVersion(),\n    'stylesheet' => $PMF_LANG['dir'] == 'rtl' ? 'style.rtl' : 'style',\n    'currentPageUrl' => $currentPageUrl,\n    'action' => $action,\n    'dir' => $PMF_LANG['dir'],\n    'writeSendAdress' => '?' . $sids . 'action=search',\n    'searchBox' => $PMF_LANG['msgSearch'],\n    'searchTerm' => Strings::htmlspecialchars($searchTerm, ENT_QUOTES),\n    'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n    'headerCategories' => $PMF_LANG['msgFullCategories'],\n    'msgCategory' => $PMF_LANG['msgCategory'],\n    'showCategories' => $categoryHelper->renderNavigation($cat),\n    'topCategories' => $categoryHelper->renderMainCategories(),\n    'msgExportAllFaqs' => $PMF_LANG['msgExportAllFaqs'],\n    'languageBox' => $PMF_LANG['msgLanguageSubmit'],\n    'renderUri' => $renderUri,\n    'switchLanguages' => LanguageHelper::renderSelectLanguage($faqLangCode, true),\n    'copyright' => 'powered with \u2764\ufe0f and \u2615\ufe0f by <a href=\"https://www.phpmyfaq.de\" target=\"_blank\">phpMyFAQ</a> ' .\n        $faqConfig->getVersion(),\n    'registerUser' => $faqConfig->get('security.enableRegistration') ? '<a href=\"?action=register\">' .\n        $PMF_LANG['msgRegistration'] . '</a>' : '',\n    'sendPassword' => '<a href=\"?action=password\">' . $PMF_LANG['lostPassword'] . '</a>',\n    'msgFullName' => $PMF_LANG['ad_user_loggedin'] . $user->getLogin(),\n    'msgLoginName' => $user->getUserData('display_name'),\n    'loginHeader' => $PMF_LANG['msgLoginUser'],\n    'loginMessage' => $loginMessage,\n    'writeLoginPath' => $faqSystem->getSystemUri($faqConfig) . '?' . Filter::getFilteredQueryString(),\n    'faqloginaction' => $action,\n    'login' => $PMF_LANG['ad_auth_ok'],\n    'username' => $PMF_LANG['ad_auth_user'],\n    'password' => $PMF_LANG['ad_auth_passwd'],\n    'rememberMe' => $PMF_LANG['rememberMe'],\n    'headerChangePassword' => $PMF_LANG['ad_passwd_cop'],\n    'msgUsername' => $PMF_LANG['ad_auth_user'],\n    'msgEmail' => $PMF_LANG['ad_entry_email'],\n    'msgSubmit' => $PMF_LANG['msgNewContentSubmit'],\n    'loginPageMessage' => $PMF_LANG['loginPageMessage'],\n    'msgAdvancedSearch' => $PMF_LANG['msgAdvancedSearch']\n];\n\n$template->parseBlock(\n    'index',\n    'categoryListSection',\n    [\n        'showCategories' => $categoryHelper->renderNavigation($cat),\n        'categoryDropDown' => $categoryHelper->renderCategoryDropDown(),\n    ]\n);\n\nif ('main' == $action || 'show' == $action) {\n    $template->parseBlock(\n        'index',\n        'globalSearchBox',\n        [\n            'writeSendAdress' => '?' . $sids . 'action=search',\n            'searchBox' => $PMF_LANG['msgSearch'],\n            'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n            'msgSearch' => sprintf(\n                '<a class=\"help\" href=\"./index.php?action=search\">%s</a>',\n                $PMF_LANG['msgAdvancedSearch']\n            ),\n        ]\n    );\n}\n\nif ($faqConfig->get('main.enableRewriteRules')) {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"./search.html\">' . $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"' . $faqSystem->getSystemUri($faqConfig) . 'addcontent.html\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"./ask.html\">' . $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"./open-questions.html\">' . $PMF_LANG['msgOpenQuestions'] .\n            '</a>',\n        'msgContact' => '<a href=\"./contact.html\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"./glossary.html\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'backToHome' => '<a href=\"./index.html\">' . $PMF_LANG['msgHome'] . '</a>',\n        'allCategories' => '<a class=\"nav-link\" href=\"./showcat.html\">' . $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"./overview.html\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'showSitemap' => '<a href=\"./sitemap/A/' . $faqLangCode . '.html\">' . $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"./request-removal.html\">' . $PMF_LANG['msgUserRemoval'] . '</a>'\n    ];\n} else {\n    $tplNavigation = [\n        'msgSearch' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=search\">' .\n            $PMF_LANG['msgAdvancedSearch'] . '</a>',\n        'msgAddContent' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=add&cat=' . $cat . '\">' .\n            $PMF_LANG['msgAddContent'] . '</a>',\n        'msgQuestion' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=ask&category_id=' . $cat . '\">' .\n            $PMF_LANG['msgQuestion'] . '</a>',\n        'msgOpenQuestions' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=open-questions\">' .\n            $PMF_LANG['msgOpenQuestions'] . '</a>',\n        'msgContact' => '<a href=\"index.php?' . $sids . 'action=contact\">' . $PMF_LANG['msgContact'] . '</a>',\n        'msgGlossary' => '<a href=\"index.php?' . $sids . 'action=glossary\">' . $PMF_LANG['ad_menu_glossary'] . '</a>',\n        'privacyLink' => sprintf(\n            '<a target=\"_blank\" href=\"%s\">%s</a>',\n            $faqConfig->get('main.privacyURL'),\n            $PMF_LANG['msgPrivacyNote']\n        ),\n        'allCategories' => '<a class=\"nav-link\" href=\"index.php?' . $sids . 'action=show\">' .\n            $PMF_LANG['msgShowAllCategories'] . '</a>',\n        'faqOverview' => '<a href=\"index.php?' . $sids . 'action=overview\">' . $PMF_LANG['faqOverview'] . '</a>',\n        'backToHome' => '<a href=\"index.php?' . $sids . '\">' . $PMF_LANG['msgHome'] . '</a>',\n        'showSitemap' => '<a href=\"index.php?' . $sids . 'action=sitemap&amp;lang=' . $faqLangCode . '\">' .\n            $PMF_LANG['msgSitemap'] . '</a>',\n        'msgUserRemoval' => '<a href=\"index.php?' . $sids . 'action=request-removal\">' . $PMF_LANG['msgUserRemoval'] .\n            '</a>',\n    ];\n}\n\n$tplNavigation['faqHome'] = $faqConfig->getDefaultUrl();\n$tplNavigation['activeSearch'] = ('search' == $action) ? 'active' : '';\n$tplNavigation['activeAllCategories'] = ('show' == $action) ? 'active' : '';\n$tplNavigation['activeAddContent'] = ('add' == $action) ? 'active' : '';\n$tplNavigation['activeAddQuestion'] = ('ask' == $action) ? 'active' : '';\n$tplNavigation['activeOpenQuestions'] = ('open-questions' == $action) ? 'active' : '';\n$tplNavigation['activeLogin'] = ('login' == $action) ? 'active' : '';\n\n//\n// Show login box or logged-in user information\n//\nif (isset($auth)) {\n    if ($user->perm->hasPermission($user->getUserId(), 'viewadminlink') || $user->isSuperAdmin()) {\n        $adminSection = sprintf(\n            '<a class=\"dropdown-item\" href=\"./admin/index.php\">%s</a>',\n            $PMF_LANG['adminSection']\n        );\n    } else {\n        $adminSection = '';\n    }\n\n    $template->parseBlock(\n        'index',\n        'userloggedIn',\n        [\n            'msgUserControl' => $adminSection,\n            'msgLoginName' => $user->getUserData('display_name'), // @deprecated\n            'msgUserControlDropDown' => '<a class=\"dropdown-item\" href=\"?action=ucp\">' .\n                $PMF_LANG['headerUserControlPanel'] . '</a>',\n            'msgUserRemoval' => '<a class=\"dropdown-item\" href=\"?action=request-removal\">' .\n                $PMF_LANG['ad_menu_RequestRemove'] . '</a>',\n            'msgLogoutUser' => sprintf(\n                '<a class=\"dropdown-item\" href=\"?action=logout&csrf=%s\">%s</a>',\n                $user->getCsrfTokenFromSession(),\n                $PMF_LANG['ad_menu_logout'],\n            ),\n            'activeUserControl' => ('ucp' == $action) ? 'active' : ''\n        ]\n    );\n} else {\n    if ($faqConfig->get('main.maintenanceMode')) {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"./admin/\">%s</a>';\n    } else {\n        $msgLoginUser = '<a class=\"dropdown-item\" href=\"?action=login\">%s</a>';\n    }\n    $template->parseBlock(\n        'index',\n        'notLoggedIn',\n        [\n            'msgRegisterUser' => $faqConfig->get('security.enableRegistration')\n                ?\n                '<a class=\"dropdown-item\" href=\"?action=register\">' . $PMF_LANG['msgRegisterUser'] . '</a>'\n                :\n                '',\n            'msgLoginUser' => sprintf($msgLoginUser, $PMF_LANG['msgLoginUser']),\n            'activeRegister' => ('register' == $action) ? 'active' : '',\n            'activeLogin' => ('login' == $action) ? 'active' : '',\n        ]\n    );\n}\n\n$template->parse(\n    'sidebar',\n    [\n        'writeTagCloudHeader' => $PMF_LANG['msg_tags'],\n        'writeTags' => $oTag->renderTagCloud(),\n        'msgAllCatArticles' => $PMF_LANG['msgAllCatArticles'],\n        'allCatArticles' => $faq->getRecordsWithoutPagingByCategoryId($cat)\n    ]\n);\n\nif (DEBUG) {\n    $template->parseBlock(\n        'index',\n        'debugMode',\n        [\n            'debugQueries' => $faqConfig->getDb()->log(),\n        ]\n    );\n}\n\n//\n// Redirect old \"action=artikel\" URLs via 301 to new location\n//\nif ('artikel' === $action) {\n    $url = sprintf(\n        '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n        $faqConfig->getDefaultUrl(),\n        $category->getCategoryIdFromFaq($id),\n        $id,\n        $lang\n    );\n    $link = new Link($url, $faqConfig);\n    $http->setStatus(301);\n    $http->redirect($link->toString());\n    exit();\n}\n\n//\n// Include requested PHP file\n//\nrequire $includePhp;\n\n//\n// Get main template, set main variables\n//\n$template->parse('index', array_merge($tplMainPage, $tplNavigation));\n$template->merge('sidebar', 'index');\n$template->merge('mainPageContent', 'index');\n\n//\n// Send headers and print template\n//\n$http->setConfiguration($faqConfig);\n$http->setContentType('text/html');\n$http->addHeader();\n$http->startCompression();\n\n//\n// Check for 404 HTTP status code\n//\nif ($http->getStatusCode() === 404 || $action === '404') {\n    $template = new Template(\n        [\n            'index' => '404.html',\n            'mainPageContent' => ''\n        ],\n        new TemplateHelper($faqConfig),\n        $faqConfig->get('main.templateSet')\n    );\n    $template->parse('index', array_merge($tplMainPage, $tplNavigation));\n}\n\n$template->render();\n\n$faqConfig->getDb()->close();\n", "<?php\n\n/**\n * Shows the page with the news record and - when available - the user\n * comments.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-07-23\n */\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Glossary;\nuse phpMyFAQ\\Helper\\CaptchaHelper;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User\\CurrentUser;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$captcha = new Captcha($faqConfig);\n$comment = new Comments($faqConfig);\n\n$captcha->setSessionId($sids);\nif (!is_null($showCaptcha)) {\n    $captcha->drawCaptchaImage();\n    exit;\n}\n\n$oNews = new News($faqConfig);\n$newsId = Filter::filterInput(INPUT_GET, 'newsid', FILTER_VALIDATE_INT);\n\nif (is_null($newsId)) {\n    header('Location: http://' . $_SERVER['HTTP_HOST'] . dirname($_SERVER['SCRIPT_NAME']));\n    exit();\n}\n\ntry {\n    $faqSession->userTracking('news_view', $newsId);\n} catch (Exception $e) {\n    // @todo handle the exception\n}\n\n// Define the header of the page\n$newsMainHeader = $faqConfig->getTitle() . $PMF_LANG['msgNews'];\n\n// Get all data from the news record\n$news = $oNews->getNewsEntry($newsId);\n\n$newsContent = $news['content'];\n$newsHeader = $news['header'];\n\n// Add Glossary entries\n$oGlossary = new Glossary($faqConfig);\n$newsContent = $oGlossary->insertItemsIntoContent($newsContent);\n$newsHeader = $oGlossary->insertItemsIntoContent($newsHeader);\n\n// Add information link if existing\nif (strlen($news['link']) > 0) {\n    $newsContent .= sprintf(\n        '</p><p>%s<a href=\"%s\" target=\"%s\">%s</a>',\n        $PMF_LANG['msgInfo'],\n        Strings::htmlentities($news['link']),\n        $news['target'],\n        Strings::htmlentities($news['linkTitle'])\n    );\n}\n\n// Show link to edit the news?\n$editThisEntry = '';\nif ($user->perm->hasPermission($user->getUserId(), 'editnews')) {\n    $editThisEntry = sprintf(\n        '<a href=\"./admin/index.php?action=news&amp;do=edit&amp;id=%d\">%s</a>',\n        $newsId,\n        $PMF_LANG['ad_menu_news_edit']\n    );\n}\n\n// Is the news item expired?\n$expired = (date('YmdHis') > $news['dateEnd']);\n\n// Does the user have the right to add a comment?\nif (\n    (-1 === $user->getUserId() && !$faqConfig->get('records.allowCommentsForGuests')) ||\n    (!$news['active']) || (!$news['allowComments']) || $expired\n) {\n    $commentMessage = $PMF_LANG['msgWriteNoComment'];\n} else {\n    $commentMessage = sprintf('<a href=\"#\" class=\"show-comment-form\">%s</a>', $PMF_LANG['newsWriteComment']);\n}\n\n// date of news entry\nif ($news['active'] && (!$expired)) {\n    $date = new Date($faqConfig);\n    $newsDate = sprintf(\n        '%s<span id=\"newsLastUpd\">%s</span>',\n        $PMF_LANG['msgLastUpdateArticle'],\n        $date->format($news['date'])\n    );\n} else {\n    $newsDate = '';\n}\n\n$captchaHelper = new CaptchaHelper($faqConfig);\n\n$template->parse(\n    'mainPageContent',\n    [\n        'writeNewsHeader' => $newsMainHeader,\n        'writeHeader' => Strings::htmlentities($newsHeader),\n        'mainPageContent' => Strings::htmlentities($newsContent),\n        'writeDateMsg' => $newsDate,\n        'msgAboutThisNews' => $PMF_LANG['msgAboutThisNews'],\n        'writeAuthor' => ($news['active'] && (!$expired)) ? $PMF_LANG['msgAuthor'] . ': ' . Strings::htmlentities($news['authorName']) : '',\n        'editThisEntry' => $editThisEntry,\n        'writeCommentMsg' => $commentMessage,\n        'msgWriteComment' => $PMF_LANG['newsWriteComment'],\n        'newsId' => $newsId,\n        'newsLang' => $news['lang'],\n        'msgCommentHeader' => $PMF_LANG['msgCommentHeader'],\n        'msgNewContentName' => $PMF_LANG['msgNewContentName'],\n        'msgNewContentMail' => $PMF_LANG['msgNewContentMail'],\n        'defaultContentMail' => ($user instanceof CurrentUser) ? $user->getUserData('email') : '',\n        'defaultContentName' => ($user instanceof CurrentUser) ? $user->getUserData('display_name') : '',\n        'msgYourComment' => $PMF_LANG['msgYourComment'],\n        'msgNewContentSubmit' => $PMF_LANG['msgNewContentSubmit'],\n        'captchaFieldset' => $captchaHelper->renderCaptcha($captcha, 'writecomment', $PMF_LANG['msgCaptcha'], $auth),\n        'renderComments' => $comment->getComments($newsId, CommentType::NEWS),\n    ]\n);\n\n$template->parseBlock(\n    'index',\n    'breadcrumb',\n    [\n        'breadcrumbHeadline' => $newsMainHeader\n    ]\n);\n", "<?php\n\n/**\n * Bootstrap phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2012-03-07\n */\n\nuse Elasticsearch\\ClientBuilder;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Init;\n\n//\n// Debug mode:\n// - false debug mode disabled\n// - true  debug mode enabled\nconst DEBUG = true;\nif (DEBUG) {\n    ini_set('display_errors', '1');\n    ini_set('display_startup_errors', '1');\n    error_reporting(-1);\n} else {\n    error_reporting(0);\n}\n\n//\n// Fix the PHP include path if PMF is running under a \"strange\" PHP configuration\n//\n$foundCurrPath = false;\n$includePaths = explode(PATH_SEPARATOR, ini_get('include_path'));\n$i = 0;\nwhile ((!$foundCurrPath) && ($i < count($includePaths))) {\n    if ('.' == $includePaths[$i]) {\n        $foundCurrPath = true;\n    }\n    ++$i;\n}\nif (!$foundCurrPath) {\n    ini_set('include_path', '.' . PATH_SEPARATOR . ini_get('include_path'));\n}\n\n//\n// Tweak some PHP configuration values\n// Warning: be sure the server has enough memory and stack for PHP\n//\nini_set('pcre.backtrack_limit', '100000000');\nini_set('pcre.recursion_limit', '100000000');\n\n//\n// Include constants\n//\nrequire 'constants.php';\n\n//\n// Setting up autoloader\n//\nrequire 'autoload.php';\n\n//\n// Check if multisite/multisite.php exist for Multisite support\n//\nif (file_exists(PMF_ROOT_DIR . '/multisite/multisite.php') && 'cli' !== PHP_SAPI) {\n    require PMF_ROOT_DIR . '/multisite/multisite.php';\n}\n\n//\n// Read configuration and constants\n//\nif (!defined('PMF_MULTI_INSTANCE_CONFIG_DIR')) {\n    define('PMF_CONFIG_DIR', PMF_ROOT_DIR . '/config'); // Single instance configuration\n} else {\n    define('PMF_CONFIG_DIR', PMF_MULTI_INSTANCE_CONFIG_DIR); // Multi instance configuration\n}\n\n//\n// Check if config/database.php exist -> if not, redirect to installer\n//\nif (!file_exists(PMF_CONFIG_DIR . '/database.php')) {\n    header('Location: ./setup/index.php');\n    exit();\n}\n\nrequire PMF_CONFIG_DIR . '/database.php';\nrequire PMF_CONFIG_DIR . '/constants.php';\n\n/*\n * The directory where the translations reside\n */\ndefine('PMF_LANGUAGE_DIR', dirname(__DIR__) . '/lang');\n\n//\n// Set the error handler and the exception handler\n//\nset_error_handler('\\phpMyFAQ\\Core\\Error::errorHandler');\nset_exception_handler('\\phpMyFAQ\\Core\\Error::exceptionHandler');\n\n//\n// Create a database connection\n//\ntry {\n    Database::setTablePrefix($DB['prefix']);\n    $db = Database::factory($DB['type']);\n    $db->connect($DB['server'], $DB['user'], $DB['password'], $DB['db'], isset($DB['port']) ? $DB['port'] : null);\n} catch (Exception $e) {\n    Database::errorPage($e->getMessage());\n    exit(-1);\n}\n\n//\n// Fetch the configuration and add the database connection\n//\n$faqConfig = new Configuration($db);\n$faqConfig->getAll();\n\n$secureCookie = 'false';\nif (isset($_SERVER['HTTPS']) && strtoupper($_SERVER['HTTPS']) === 'ON') {\n    $secureCookie = 'true';\n}\n\n//\n// We always need a valid session!\n//\nini_set('session.use_only_cookies', '1'); // Avoid any PHP version to move sessions on URLs\nini_set('session.auto_start', '0'); // Prevent error to use session_start() if it's active in php.ini\nini_set('session.use_trans_sid', '0');\nini_set('session.cookie_samesite', 'Strict');\nini_set('session.cookie_httponly', 'true');\nini_set('session.cookie_secure', $secureCookie);\nini_set('url_rewriter.tags', '');\n\n//\n// Start the PHP session\n//\nInit::cleanRequest();\nif (defined('PMF_SESSION_SAVE_PATH') && !empty(PMF_SESSION_SAVE_PATH)) {\n    session_save_path(PMF_SESSION_SAVE_PATH);\n}\nsession_start();\n\n//\n// Connect to LDAP server, when LDAP support is enabled\n//\nif ($faqConfig->isLdapActive() && file_exists(PMF_CONFIG_DIR . '/ldap.php') && extension_loaded('ldap')) {\n    require PMF_CONFIG_DIR . '/ldap.php';\n    $faqConfig->setLdapConfig($PMF_LDAP);\n} else {\n    $ldap = null;\n}\n//\n// Connect to Elasticsearch if enabled\n//\nif ($faqConfig->get('search.enableElasticsearch') && file_exists(PMF_CONFIG_DIR . '/elasticsearch.php')) {\n    require PMF_CONFIG_DIR . '/elasticsearch.php';\n    require PMF_CONFIG_DIR . '/constants_elasticsearch.php';\n\n    $esClient = ClientBuilder::create()\n        ->setHosts($PMF_ES['hosts'])\n        ->build();\n\n    $faqConfig->setElasticsearch($esClient);\n    $faqConfig->setElasticsearchConfig($PMF_ES);\n}\n\n//\n// Build attachments path\n//\n$confAttachmentsPath = trim($faqConfig->get('records.attachmentsPath'));\nif ('/' == $confAttachmentsPath[0] || preg_match('%^[a-z]:(\\\\\\\\|/)%i', $confAttachmentsPath)) {\n    // If we're here, some windows or unix style absolute path was detected.\n    define('PMF_ATTACHMENTS_DIR', $confAttachmentsPath);\n} else {\n    // otherwise build the absolute path\n    $tmp = dirname(__DIR__) . DIRECTORY_SEPARATOR . $confAttachmentsPath;\n\n    // Check that nobody is traversing\n    if (0 === strpos((string)$tmp, dirname(__DIR__))) {\n        define('PMF_ATTACHMENTS_DIR', $tmp);\n    } else {\n        define('PMF_ATTACHMENTS_DIR', false);\n    }\n}\n\n//\n// Fix if phpMyFAQ is running behind a proxy server\n//\nif (!isset($_SERVER['HTTP_HOST'])) {\n    if (isset($_SERVER['HTTP_X_FORWARDED_SERVER'])) {\n        $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_SERVER'];\n    } else {\n        $_SERVER['HTTP_HOST'] = $_SERVER['HTTP_X_FORWARDED_HOST'];\n    }\n}\n\n//\n// Fix undefined server variables in Windows IIS & CGI mode\n//\nif (!isset($_SERVER['SCRIPT_NAME'])) {\n    if (isset($_SERVER['SCRIPT_FILENAME'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['SCRIPT_FILENAME'];\n    } elseif (isset($_SERVER['PATH_TRANSLATED'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['PATH_TRANSLATED'];\n    } elseif (isset($_SERVER['PATH_INFO'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['PATH_INFO'];\n    } elseif (isset($_SERVER['SCRIPT_URL'])) {\n        $_SERVER['SCRIPT_NAME'] = $_SERVER['SCRIPT_URL'];\n    }\n}\n", "<?php\n\n/**\n * The main category class. Yes, it's huge.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Lars Tiedemann <larstiedemann@yahoo.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @author    Rudi Ferrari <bookcrossers@gmx.de>\n * @copyright 2004-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2004-02-16\n */\n\nnamespace phpMyFAQ;\n\nuse phpMyFAQ\\Entity\\CategoryEntity;\nuse phpMyFAQ\\Helper\\LanguageHelper;\n\n/**\n * Class Category\n *\n * @package phpMyFAQ\n */\nclass Category\n{\n    /**\n     * The categories as an array.\n     *\n     * @var array<int>\n     */\n    public $categories = [];\n\n    /**\n     * The category names as an array.\n     *\n     * @var array<string>\n     */\n    public $categoryName = [];\n\n    /**\n     * The image as an array.\n     *\n     * @var array\n     */\n    public array $image = [];\n\n    /**\n     * The tree with the tabs.\n     *\n     * @var array\n     */\n    public array $treeTab = [];\n    /**\n     * The category tree.\n     *\n     * @var array\n     */\n    private array $catTree = [];\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * User ID.\n     *\n     * @var int\n     */\n    private int $user = -1;\n\n    /**\n     * Groups.\n     *\n     * @var int[]\n     */\n    private array $groups = [-1];\n\n    /**\n     * The children nodes.\n     *\n     * @var array\n     */\n    private array $children = [];\n\n    /**\n     * The current language.\n     *\n     * @var string|null\n     */\n    private ?string $language = null;\n\n    /**\n     * Entity owners\n     *\n     * @var array<int, int>>\n     */\n    private $owner = [];\n\n    /**\n     * Entity moderators\n     *\n     * @var array<int, int>>\n     */\n    private $moderators = [];\n\n    /**\n     * Symbol for each item\n     * NOTE: We do not use this currently.\n     *\n     * @var string[]\n     */\n    private array $symbols = [\n        'vertical' => '|',\n        'plus' => '+',\n        'minus' => '-',\n        'space' => '&nbsp;',\n        'angle' => '-',\n        'medium' => '|-'\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config Configuration object\n     * @param int[] $groups Array with group IDs\n     * @param bool $withPerm With or without permission check\n     */\n    public function __construct(Configuration $config, array $groups = [], bool $withPerm = true)\n    {\n        $this->config = $config;\n\n        $this->setGroups($groups);\n        $this->setLanguage($this->config->getLanguage()->getLanguage());\n\n        $this->getOrderedCategories($withPerm);\n        foreach ($this->categoryName as $id) {\n            $this->categoryName[$id['id']]['level'] = $this->getLevelOf($this->categoryName[$id['id']]['id']);\n        }\n    }\n\n    /**\n     * @param int[] $groups\n     * @return Category\n     */\n    public function setGroups(array $groups): Category\n    {\n        if (0 === count($groups)) {\n            $groups = [-1];\n        }\n        $this->groups = $groups;\n        return $this;\n    }\n\n    /**\n     * @param string $language\n     * @return Category\n     */\n    public function setLanguage(string $language): Category\n    {\n        $this->language = $language;\n        return $this;\n    }\n\n    /**\n     * @return int\n     */\n    public function getUser(): int\n    {\n        return $this->user;\n    }\n\n    /**\n     * @return int[]\n     */\n    public function getGroups(): array\n    {\n        return $this->groups;\n    }\n\n    /**\n     * Returns all categories with ordered category IDs according to the user\n     * and group permissions.\n     *\n     * @param bool $withPermission With or without permission check\n     *\n     * @return array\n     */\n    private function getOrderedCategories(bool $withPermission = true): array\n    {\n        $where = '';\n\n        if ($withPermission) {\n            $where = sprintf(\n                '\n                WHERE\n                    ( fg.group_id IN (%s)\n                OR\n                    (fu.user_id = %d AND fg.group_id IN (%s)))\n                AND\n                    fc.active = 1',\n                implode(', ', $this->groups),\n                $this->user,\n                implode(', ', $this->groups)\n            );\n        }\n\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $where .= empty($where) ? '\n            WHERE' : '\n            AND';\n            $where .= \"\n                fc.lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n\n        $query = sprintf(\n            '\n            SELECT\n                fc.id AS id,\n                fc.lang AS lang,\n                fc.parent_id AS parent_id,\n                fc.name AS name,\n                fc.description AS description,\n                fc.user_id AS user_id,\n                fc.group_id AS group_id,\n                fc.active AS active,\n                fc.image AS image,\n                fc.show_home AS show_home\n            FROM\n                %sfaqcategories fc\n            LEFT JOIN\n                %sfaqcategory_group fg\n            ON\n                fc.id = fg.category_id\n            LEFT JOIN\n                %sfaqcategory_order fco\n            ON\n                fc.id = fco.category_id\n            LEFT JOIN\n                %sfaqcategory_user fu\n            ON\n                fc.id = fu.category_id\n            %s\n            GROUP BY\n                fc.id, fc.lang, fc.parent_id, fc.name, fc.description, fc.user_id, fc.group_id, fc.active, fc.image, \n                fc.show_home\n            ORDER BY\n                fco.position, fc.id ASC',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $where\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($result) {\n            while ($row = $this->config->getDb()->fetchArray($result)) {\n                $this->categoryName[(int)$row['id']] = $row;\n                $this->categories[(int)$row['id']] = $row;\n                $this->children[(int)$row['parent_id']][(int)$row['id']] = &$this->categoryName[(int)$row['id']];\n                $this->owner[(int)$row['id']] = &$row['user_id'];\n                $this->moderators[(int)$row['id']] = &$row['group_id'];\n            }\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Get the level of the item id.\n     *\n     * @param int $id Entity id\n     *\n     * @return int\n     */\n    private function getLevelOf(int $id): int\n    {\n        $alreadyListed = [$id];\n        $level = 0;\n\n        while ((isset($this->categoryName[$id]['parent_id'])) && ($this->categoryName[$id]['parent_id'] !== 0)) {\n            ++$level;\n            $id = (int)$this->categoryName[$id]['parent_id'];\n            if (in_array($id, $alreadyListed)) {\n                break;\n            } else {\n                array_push($alreadyListed, $id);\n            }\n        }\n\n        return $level;\n    }\n\n    /**\n     * @param int $userId\n     * @return Category\n     */\n    public function setUser(int $userId = -1): Category\n    {\n        $this->user = $userId;\n        return $this;\n    }\n\n    /**\n     * Gets the main categories and write them in an array.\n     *\n     * @param string $categories String of parent category ids\n     * @param bool $parentId Only top level categories?\n     *\n     * @return array\n     */\n    public function getCategories(string $categories, bool $parentId = true): array\n    {\n        $_query = '';\n        $query = sprintf(\n            '\n            SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, image, show_home\n            FROM\n                %sfaqcategories\n            WHERE ',\n            Database::getTablePrefix()\n        );\n\n        if (true === $parentId) {\n            $query .= 'parent_id = 0';\n        }\n        foreach (explode(',', $categories) as $cats) {\n            $_query .= ' OR parent_id = ' . $cats;\n        }\n        if (false === $parentId && 0 < Strings::strlen($_query)) {\n            $query .= Strings::substr($_query, 4);\n        }\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" AND lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n        $query .= ' ORDER BY id';\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $this->categories[$row['id']] = $row;\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Gets all categories and write them in an array.\n     *\n     * @return array\n     */\n    public function getAllCategories(): array\n    {\n        $categories = [];\n        $query = sprintf(\n            'SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, show_home, image\n            FROM\n                %sfaqcategories',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" WHERE lang = '\" . $this->config->getDb()->escape($this->language) . \"'\";\n        }\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $categories[(int)$row['id']] = [\n                'id' => (int)$row['id'],\n                'lang' => $row['lang'],\n                'parent_id' => (int)$row['parent_id'],\n                'name' => $row['name'],\n                'description' => $row['description'],\n                'user_id' => (int)$row['user_id'],\n                'group_id' => (int)$row['group_id'],\n                'active' => (int)$row['active'],\n                'show_home' => (int)$row['show_home'],\n                'image' => $row['image'],\n                'level' => $this->getLevelOf($row['id'])\n            ];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Gets all categories and write them in an array.\n     *\n     * @return array<int, array<string, mixed>>\n     */\n    public function getHomeCategories(): array\n    {\n        $categories = [];\n        $query = sprintf(\n            '\n            SELECT\n                id, lang, parent_id, name, description, user_id, group_id, active, show_home, image\n            FROM\n                %sfaqcategories\n            WHERE \n                show_home = 1',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" AND lang = '\" . $this->language . \"'\";\n        }\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $url = sprintf('%sindex.php?action=show&cat=%d', $this->config->getDefaultUrl(), $row['id']);\n            $link = new Link($url, $this->config);\n            $link->itemTitle = $row['name'];\n            if ('' === $row['image']) {\n                $image = '';\n            } else {\n                $image = 'images/' . $row['image'];\n            }\n\n            $category = [\n                'url' => $link->toString(),\n                'name' => $row['name'],\n                'description' => $row['description'],\n                'image' => $image\n            ];\n\n            $categories[] = $category;\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Gets all category IDs\n     *\n     * @return array\n     */\n    public function getAllCategoryIds(): array\n    {\n        $categories = [];\n\n        $query = sprintf('SELECT id FROM %sfaqcategories', Database::getTablePrefix());\n\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= sprintf(\" WHERE lang = '%s'\", $this->language);\n        }\n\n        $result = $this->config->getDb()->query($query);\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $categories[] = (int)$row['id'];\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Builds the category tree.\n     *\n     * @param int $parentId Parent id\n     * @param int $indent Indention\n     */\n    public function buildCategoryTree(int $parentId = 0, int $indent = 0)\n    {\n        $tt = [];\n        $x = 0;\n\n        foreach ($this->categories as $categoryId => $n) {\n            if (isset($n['parent_id']) && $n['parent_id'] == $parentId && $categoryId > 0) {\n                $tt[$x++] = $categoryId;\n            }\n        }\n\n        if ($x != 0) {\n            foreach ($tt as $d) {\n                $tmp = [];\n                if (isset($this->categories[$d])) {\n                    foreach ($this->categories[$d] as $key => $value) {\n                        $tmp[$key] = $value;\n                    }\n                    $tmp['indent'] = $indent;\n                    $this->catTree[] = $tmp;\n                    $this->buildCategoryTree($tmp['id'], $indent + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Transforms the linear array in a 1D array in the order of the tree, with\n     * the info.\n     *\n     * @param int $id Entity id\n     */\n    public function transform(int $id): void\n    {\n        $parentId = $showHome = 0;\n        $tree = [];\n        $tabs = isset($this->children[$id]) ? array_keys($this->children[$id]) : [];\n        $num = count($tabs);\n        $symbol = 'minus';\n        $name = $description = '';\n        $active = true;\n        $image = '';\n\n        if ($id > 0) {\n            $active = $this->categoryName[$id]['active'];\n            $description = $this->categoryName[$id]['description'];\n            $name = $this->categoryName[$id]['name'];\n            $parentId = $this->categoryName[$id]['parent_id'];\n            $image = $this->categoryName[$id]['image'];\n            $showHome = $this->categoryName[$id]['show_home'];\n        }\n\n        if ($num > 0) {\n            $temp = isset($this->children[$parentId]) ? array_keys($this->children[$parentId]) : [];\n            if (isset($temp[count($temp) - 1])) {\n                $symbol = ($id == $temp[count($temp) - 1]) ? 'angle' : 'medium';\n            }\n        }\n\n        $ascendants = $this->getNodes($id);\n        $numAscendants = count($ascendants);\n\n        if ($id > 0) {\n            for ($i = 0; $i < $numAscendants; ++$i) {\n                if (0 === (int)$ascendants[$i]) {\n                    break;\n                }\n                $brothers = $this->getBrothers($ascendants[$i]);\n                $tree[$i] = ($ascendants[$i] == $brothers[count($brothers) - 1]) ? 'space' : 'vertical';\n            }\n        }\n\n        if ($id > 0) {\n            $this->treeTab[] = [\n                'id' => $id,\n                'symbol' => $symbol,\n                'name' => $name,\n                'numChilds' => count($tabs),\n                'level' => $this->getLevelOf($id),\n                'parent_id' => $parentId,\n                'childs' => $tabs,\n                'tree' => $tree,\n                'description' => $description,\n                'active' => $active,\n                'image' => $image,\n                'show_home' => $showHome\n            ];\n        }\n\n        foreach ($tabs as $i) {\n            $this->transform($i);\n        }\n    }\n\n    //\n\n    /**\n     * List in array the root, super-root, ... of the $id.\n     *\n     * @param int $id\n     * @return array\n     */\n    private function getNodes(int $id): array\n    {\n        if (($id > 0) && (isset($this->categoryName[$id]['level']))) {\n            $thisLevel = $this->categoryName[$id]['level'];\n            $temp = [];\n            for ($i = $thisLevel; $i > 0; --$i) {\n                $id = $this->categoryName[$id]['parent_id'];\n                array_unshift($temp, $id);\n            }\n\n            return $temp;\n        }\n\n        return [];\n    }\n\n    /**\n     * Gets the list of the brothers of $id (include $id).\n     *\n     * @param int $id Brothers\n     *\n     * @return array\n     */\n    private function getBrothers(int $id): array\n    {\n        return $this->getChildren($this->categoryName[$id]['parent_id']);\n    }\n\n    /**\n     * List in a array of the $id of the child.\n     *\n     * @param int $categoryId\n     *\n     * @return array\n     */\n    public function getChildren(int $categoryId): array\n    {\n        return isset($this->children[$categoryId]) ? array_keys($this->children[$categoryId]) : [];\n    }\n\n    /**\n     * list in a array of the $id of the child.\n     *\n     * @param int $id Entity id\n     * @return array<int>\n     */\n    public function getChildNodes(int $id): array\n    {\n        $children = [];\n\n        if (isset($this->children[$id])) {\n            foreach (array_keys($this->children[$id]) as $childId) {\n                $children = array_merge($children, [$childId]);\n                $children = array_merge($children, $this->getChildNodes($childId));\n            }\n        }\n\n        return $children;\n    }\n\n    /**\n     * Try to expand from the parent_id to the node $id\n     *\n     * @param int $id\n     * @return void\n     */\n    public function expandTo(int $id)\n    {\n        $this->collapseAll();\n        $ascendants = $this->getNodes($id);\n        $ascendants[] = $id;\n        $numAscendants = count($ascendants);\n        for ($i = 0; $i < $numAscendants; ++$i) {\n            if (isset($this->treeTab[$this->getLineCategory($ascendants[$i])]['numChilds'])) {\n                $numChildren = $this->treeTab[$this->getLineCategory($ascendants[$i])]['numChilds'];\n                if ($numChildren > 0) {\n                    $this->expand($ascendants[$i]);\n                } else {\n                    $i = count($ascendants);\n                }\n            }\n        }\n    }\n\n    /**\n     * Collapse the complete category tree.\n     */\n    public function collapseAll(): void\n    {\n        $numTreeTab = count($this->treeTab);\n        for ($i = 0; $i < $numTreeTab; ++$i) {\n            if ($this->treeTab[$i]['symbol'] == 'minus') {\n                $this->treeTab[$i]['symbol'] = 'plus';\n            }\n        }\n    }\n\n    /**\n     * Get the line number where to find the node $id in the category tree.\n     *\n     * @param int $id Entity id\n     * @return int\n     */\n    private function getLineCategory(int $id): int\n    {\n        $num = count($this->treeTab);\n        for ($i = 0; $i < $num; ++$i) {\n            if (isset($this->treeTab[$i]['id']) && $this->treeTab[$i]['id'] === $id) {\n                return $i;\n            }\n        }\n\n        return -1;\n    }\n\n    /**\n     * Expand the node $id.\n     *\n     * @param int $id Entity id\n     */\n    public function expand(int $id): void\n    {\n        $this->treeTab[$this->getLineCategory($id)]['symbol'] = 'minus';\n    }\n\n    /**\n     * Expand the entire tree\n     *\n     * @return void\n     */\n    public function expandAll()\n    {\n        $numTreeTab = count($this->treeTab);\n        for ($i = 0; $i < $numTreeTab; ++$i) {\n            if ($this->treeTab[$i]['symbol'] == 'plus') {\n                $this->treeTab[$i]['symbol'] = 'minus';\n            }\n        }\n    }\n\n    /**\n     * Total height of the expanded tree.\n     *\n     * @return int\n     */\n    public function height(): int\n    {\n        return count($this->treeTab);\n    }\n\n    /**\n     * Gets the next line in the array treeTab, depending on the\n     * collapse/expand node.\n     *\n     * @param int $line Current line\n     * @return int\n     */\n    public function getNextLineTree(int $line): int\n    {\n        if ($this->treeTab[$line]['symbol'] !== 'plus') {\n            return $line + 1;\n        } else {\n            for ($i = $line + 1; $i < $this->height(); ++$i) {\n                if ($this->treeTab[$i]['level'] <= $this->treeTab[$line]['level']) {\n                    return $i;\n                }\n            }\n        }\n\n        return $this->height();\n    }\n\n    /**\n     * Returns the four parts of a line to display: category name, the ID of\n     * the root node, the description and if the category is active\n     *\n     * @param int $node\n     * @return array\n     */\n    public function getLineDisplay(int $node): array\n    {\n        return [\n            $this->symbols[$this->treeTab[$node]['symbol']],\n            $this->treeTab[$node]['name'],\n            $this->treeTab[$node]['id'],\n            $this->treeTab[$node]['description'],\n            $this->treeTab[$node]['active'],\n            $this->treeTab[$node]['image']\n        ];\n    }\n\n    /**\n     * Creates a category link.\n     *\n     * @param string      $sids Session id\n     * @param int         $categoryId Parent category\n     * @param string      $categoryName Entity name\n     * @param string|null $description Description\n     * @param bool        $hasChildren Child categories available\n     * @param bool        $isActive Sets a link active via CSS\n     * @return string\n     */\n    public function addCategoryLink(\n        string $sids,\n        int $categoryId,\n        string $categoryName,\n        string $description = null,\n        bool $hasChildren = false,\n        bool $isActive = false\n    ): string {\n        $url = sprintf(\n            '%sindex.php?%saction=show&amp;cat=%d',\n            $this->config->getDefaultUrl(),\n            $sids,\n            $categoryId\n        );\n\n        $oLink = new Link($url, $this->config);\n        $oLink->id = 'category_' . $categoryId;\n        $oLink->itemTitle = Strings::htmlentities($categoryName);\n        $oLink->text = Strings::htmlentities($categoryName);\n\n        if ($hasChildren) {\n            $oLink->text .= sprintf(\n                '<i aria-hidden=\"true\" class=\"fa fa-caret-right\" title=\"%s\"></i>',\n                Strings::htmlentities($categoryName)\n            );\n        }\n\n        if ($isActive) {\n            $oLink->class = 'active';\n        }\n\n        $oLink->tooltip = $description;\n\n        return $oLink->toHtmlAnchor();\n    }\n\n    /**\n     * Returns the data of the given category.\n     *\n     * @param int $categoryId\n     * @return CategoryEntity\n     */\n    public function getCategoryData(int $categoryId): CategoryEntity\n    {\n        $entity = new CategoryEntity();\n\n        $query = sprintf(\n            \"SELECT * FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($this->language)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($row = $this->config->getDb()->fetchObject($result)) {\n            $entity\n                ->setId($row->id)\n                ->setLang($row->lang)\n                ->setParentId($row->parent_id)\n                ->setName($row->name)\n                ->setDescription($row->description)\n                ->setUserId($row->user_id)\n                ->setGroupId($row->group_id)\n                ->setActive($row->active)\n                ->setShowHome($row->show_home)\n                ->setImage($row->image);\n        }\n\n        return $entity;\n    }\n\n    /**\n     * Gets the path from root to child as breadcrumbs.\n     *\n     * @param int    $id Entity ID\n     * @param string $separator Path separator\n     * @param bool   $renderAsHtml Renders breadcrumbs as HTML\n     * @param string $useCssClass Use CSS class \"breadcrumb\"\n     * @return string\n     */\n    public function getPath(\n        int $id,\n        string $separator = ' / ',\n        bool $renderAsHtml = false,\n        string $useCssClass = 'breadcrumb'\n    ): string {\n        global $sids;\n\n        $ids = $this->getNodes($id);\n\n        $num = count($ids);\n\n        $tempName = $categoryId = $description = $breadcrumb = [];\n\n        for ($i = 0; $i < $num; ++$i) {\n            $t = $this->getLineCategory($ids[$i]);\n            if (array_key_exists($t, $this->treeTab)) {\n                $tempName[] = $this->treeTab[$this->getLineCategory($ids[$i])]['name'];\n                $categoryId[] = $this->treeTab[$this->getLineCategory($ids[$i])]['id'];\n                $description[] = $this->treeTab[$this->getLineCategory($ids[$i])]['description'];\n            }\n        }\n        if (isset($this->treeTab[$this->getLineCategory($id)]['name'])) {\n            $tempName[] = $this->treeTab[$this->getLineCategory($id)]['name'];\n            $categoryId[] = $this->treeTab[$this->getLineCategory($id)]['id'];\n            $description[] = $this->treeTab[$this->getLineCategory($id)]['description'];\n        }\n\n        // @todo Maybe this should be done somewhere else ...\n        if ($renderAsHtml) {\n            foreach ($tempName as $key => $category) {\n                $url = sprintf(\n                    '%sindex.php?%saction=show&amp;cat=%d',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $categoryId[$key]\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->text = sprintf('<span>%s</span>', $category);\n                $oLink->itemTitle = Strings::htmlentities($category);\n                $oLink->tooltip = Strings::htmlentities($description[$key]);\n                if (0 === $key) {\n                    $oLink->setRelation('index');\n                }\n\n                $breadcrumb[] = sprintf(\n                    '<li>%s</li>',\n                    $oLink->toHtmlAnchor()\n                );\n            }\n\n            $tempName = $breadcrumb;\n\n            return sprintf(\n                '<ul class=\"%s\">%s</ul>',\n                $useCssClass,\n                implode('', $tempName)\n            );\n        } else {\n            return implode($separator, $tempName);\n        }\n    }\n\n    /**\n     * Returns the ID of a category that associated with the given article.\n     *\n     * @param int $faqId FAQ id\n     * @return int\n     */\n    public function getCategoryIdFromFaq(int $faqId): int\n    {\n        $cats = $this->getCategoryIdsFromFaq($faqId);\n        if (isset($cats[0])) {\n            return $cats[0];\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns an array with the IDs of all categories that are associated with\n     * the given article.\n     *\n     * @param int $faqId Record id\n     * @return int[]\n     */\n    public function getCategoryIdsFromFaq(int $faqId): array\n    {\n        $categories = $this->getCategoriesFromFaq($faqId);\n        $result = [];\n        foreach ($categories as $category) {\n            $result[] = $category['id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Returns all categories that are related to the given article-id and\n     * the current language $this->language in an unsorted array which consists\n     * of associative arrays with the keys 'name', 'id', 'lang',\n     * 'parent_id' and 'description'.\n     *\n     * @param int $faqId Record id\n     * @return array\n     */\n    public function getCategoriesFromFaq(int $faqId): array\n    {\n        $query = sprintf(\n            \"\n            SELECT\n                fc.id AS id,\n                fc.lang AS lang,\n                fc.parent_id AS parent_id,\n                fc.name AS name,\n                fc.description AS description\n            FROM\n                %sfaqcategoryrelations fcr,\n                %sfaqcategories fc\n            WHERE\n                fc.id = fcr.category_id\n            AND\n                fcr.record_id = %d\n            AND\n                fcr.category_lang = '%s'\n            AND\n                fc.lang = '%s'\",\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            $faqId,\n            $this->config->getDb()->escape($this->language),\n            $this->config->getDb()->escape($this->language)\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $num = $this->config->getDb()->numRows($result);\n        $this->categories = [];\n        if ($num > 0) {\n            while ($row = $this->config->getDb()->fetchArray($result)) {\n                $this->categories[intval($row['id'])] = $row;\n            }\n        }\n\n        return $this->categories;\n    }\n\n    /**\n     * Given FAQ ID and category ID are connected or not.\n     *\n     * @param int $faqId\n     * @param int $categoryId\n     * @return bool\n     */\n    public function categoryHasLinkToFaq(int $faqId, int $categoryId): bool\n    {\n        $categories = $this->getCategoriesFromFaq($faqId);\n        foreach ($categories as $category) {\n            if ((int)$category['id'] === (int)$categoryId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the category tree as array.\n     *\n     * @return array\n     */\n    public function getCategoryTree(): array\n    {\n        return $this->catTree;\n    }\n\n    /**\n     * Returns the moderator group ID of the given category.\n     *\n     * @param int $categoryId\n     * @return int\n     */\n    public function getModeratorGroupId(int $categoryId): int\n    {\n        return $this->moderators[$categoryId];\n    }\n\n    /**\n     * Adds a new category entry.\n     *\n     * @param array $categoryData Array of category data\n     * @param int   $parentId Parent id\n     * @param null  $id Entity id\n     * @return int\n     */\n    public function addCategory(array $categoryData, int $parentId = 0, $id = null): ?int\n    {\n        // If we only need a new language, we don't need a new category id\n        if (is_null($id)) {\n            $id = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqcategories', 'id');\n        }\n\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqcategories\n            (id, lang, parent_id, name, description, user_id, group_id, active, image, show_home)\n                VALUES\n            (%d, '%s', %d, '%s', '%s', %d, %d, %d, '%s', %d)\",\n            Database::getTablePrefix(),\n            $id,\n            $this->config->getDb()->escape($categoryData['lang']),\n            $parentId,\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['description']),\n            $categoryData['user_id'],\n            $categoryData['group_id'],\n            $categoryData['active'],\n            $this->config->getDb()->escape($categoryData['image']),\n            $categoryData['show_home']\n        );\n        $this->config->getDb()->query($query);\n\n        return $id;\n    }\n\n    /**\n     * Check if category already exists.\n     *\n     * @param string[] $categoryData Array of category data\n     *\n     * @return int\n     */\n    public function checkIfCategoryExists(array $categoryData): int\n    {\n        $query = sprintf(\n            \"SELECT name from %sfaqcategories WHERE name = '%s' AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['lang'])\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result);\n    }\n\n    /**\n     * Updates an existent category entry.\n     *\n     * @param string[] $categoryData Array of category data\n     *\n     * @return bool\n     */\n    public function updateCategory(array $categoryData): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqcategories\n            SET\n                name = '%s',\n                description = '%s',\n                user_id = %d,\n                group_id = %d,\n                active = %d,\n                show_home = %d,\n                image = '%s'\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($categoryData['name']),\n            $this->config->getDb()->escape($categoryData['description']),\n            $categoryData['user_id'],\n            $categoryData['group_id'],\n            $categoryData['active'],\n            $categoryData['show_home'],\n            $this->config->getDb()->escape($categoryData['image']),\n            $categoryData['id'],\n            $this->config->getDb()->escape($categoryData['lang'])\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Move the categories' ownership for users.\n     *\n     * @param int $from Old user id\n     * @param int $to New user id\n     * @return bool\n     */\n    public function moveOwnership(int $from, int $to): bool\n    {\n        $query = sprintf(\n            'UPDATE %sfaqcategories SET user_id = %d WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $to,\n            $from\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Checks if a language is already defined for a category id.\n     *\n     * @param int    $categoryId Entity id\n     * @param string $categoryLanguage Entity language\n     * @return bool\n     */\n    public function checkLanguage(int $categoryId, string $categoryLanguage): bool\n    {\n        $query = sprintf(\n            \"SELECT lang FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($categoryLanguage)\n        );\n\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result) > 0;\n    }\n\n    /**\n     * Updates the parent category.\n     *\n     * @param int $categoryId Entity id\n     * @param int $parentId Parent category id\n     * @return bool\n     */\n    public function updateParentCategory(int $categoryId, int $parentId): bool\n    {\n        if ($categoryId !== $parentId) {\n            return false;\n        }\n\n        $query = sprintf(\n            'UPDATE %sfaqcategories SET parent_id = %d WHERE id = %d',\n            Database::getTablePrefix(),\n            $parentId,\n            $categoryId\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Deletes a category.\n     *\n     * @param int $categoryId\n     * @param string $categoryLang\n     * @return bool\n     */\n    public function deleteCategory(int $categoryId, string $categoryLang): bool\n    {\n        $query = sprintf(\n            \"DELETE FROM %sfaqcategories WHERE id = %d AND lang = '%s'\",\n            Database::getTablePrefix(),\n            $categoryId,\n            $this->config->getDb()->escape($categoryLang)\n        );\n\n        return (bool) $this->config->getDb()->query($query);\n    }\n\n    /**\n     * Create array with translated categories.\n     *\n     * @param int $categoryId\n     * @return string[]\n     */\n    public function getCategoryLanguagesTranslated(int $categoryId): array\n    {\n        global $languageCodes;\n\n        $existcatlang = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n        $translated = [];\n\n        foreach ($existcatlang as $language) {\n            $query = sprintf(\n                \"\n               SELECT\n                  name, description\n               FROM\n                   %sfaqcategories\n               WHERE\n                   id = %d\n               AND\n                   lang = '%s'\",\n                Database::getTablePrefix(),\n                $categoryId,\n                $this->config->getDb()->escape($language)\n            );\n            $result = $this->config->getDb()->query($query);\n            if ($row = $this->config->getDb()->fetchArray($result)) {\n                $translated[$languageCodes[strtoupper($language)]] =\n                    $row['name'] . ('' == $row['description'] ? '' : '  (' . $row['description'] . ')');\n            }\n        }\n        ksort($translated);\n\n        return $translated;\n    }\n\n    /**\n     * Create all languages which can be used for translation as <option>.\n     *\n     * @param int    $categoryId Entity id\n     * @param string $selectedLanguage Selected language\n     * @return string\n     */\n    public function getCategoryLanguagesToTranslate(int $categoryId, string $selectedLanguage): string\n    {\n        $output = '';\n        $existcatlang = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n\n        foreach (LanguageHelper::getAvailableLanguages() as $lang => $langname) {\n            if (!in_array(strtolower($lang), $existcatlang)) {\n                $output .= \"\\t<option value=\\\"\" . strtolower($lang) . '\"';\n                if ($lang == $selectedLanguage) {\n                    $output .= ' selected=\"selected\"';\n                }\n                $output .= '>' . $langname . \"</option>\\n\";\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Gets all categories which are not translated in actual language\n     * to add in this->categories (used in admin section).\n     */\n    public function getMissingCategories(): void\n    {\n        $query = sprintf(\n            'SELECT id, lang, parent_id, name, description, user_id FROM %sfaqcategories',\n            Database::getTablePrefix()\n        );\n        if (isset($this->language) && preg_match(\"/^[a-z\\-]{2,}$/\", $this->language)) {\n            $query .= \" WHERE lang != '\" . $this->language . \"'\";\n        }\n        $query .= ' ORDER BY id';\n        $result = $this->config->getDb()->query($query);\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            if (!array_key_exists($row['id'], $this->categoryName)) {\n                $this->categoryName[$row['id']] = $row;\n                $this->categories[$row['id']] = $row;\n                $this->children[$row['parent_id']][$row['id']] = &$this->categoryName[$row['id']];\n            }\n        }\n    }\n\n    /**\n     * Get number of nodes at the same parent_id level.\n     *\n     * @param int $parentId Parent id\n     *\n     * @return int\n     */\n    public function numParent(int $parentId): int\n    {\n        $query = sprintf(\n            'SELECT DISTINCT id FROM %sfaqcategories WHERE parent_id = %d',\n            Database::getTablePrefix(),\n            $parentId\n        );\n        $result = $this->config->getDb()->query($query);\n\n        return $this->config->getDb()->numRows($result);\n    }\n\n    /**\n     * Returns the user id of the category owner\n     *\n     * @param int $categoryId\n     * @return int\n     */\n    public function getOwner(int $categoryId): int\n    {\n        return isset($this->owner[$categoryId]) ? (int)$this->owner[$categoryId] : 1;\n    }\n}\n", "<?php\n\n/**\n * Helper class for database drivers.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2012-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2012-04-12\n */\n\nnamespace phpMyFAQ\\Database;\n\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Strings;\n\n/**\n * Class Helper\n *\n * @package phpMyFAQ\\Database\n */\nclass DatabaseHelper\n{\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Align the prefix of the table name used in the PMF backup file,\n     * from the (old) value of the system upon which the backup was performed\n     * to the (new) prefix of the system upon which the backup will be restored\n     * This alignment will be performed upon all the SQL query \"patterns\"\n     * provided within the PMF backup file.\n     *\n     * @param string $query\n     * @param string $oldValue\n     * @param string $newValue\n     *\n     * @return string\n     */\n    public static function alignTablePrefix(string $query, string $oldValue, string $newValue): string\n    {\n        // Align DELETE FROM <prefix.tablename>\n        $query = self::alignTablePrefixByPattern($query, 'DELETE FROM', $oldValue, $newValue);\n        // Align INSERT INTO <prefix.tablename>\n        return self::alignTablePrefixByPattern($query, 'INSERT INTO', $oldValue, $newValue);\n    }\n\n    /**\n     * Align the prefix of the table name used in the PMF backup file,\n     * from the (old) value of the system upon which the backup was performed\n     * to the (new) prefix of the system upon which the backup will be restored.\n     * This alignment will be performed ONLY upon those given SQL queries starting\n     * with the given pattern.\n     *\n     * @param string $query\n     * @param string $startPattern\n     * @param string $oldValue\n     * @param string $newValue\n     *\n     * @return string\n     */\n    private static function alignTablePrefixByPattern(\n        string $query,\n        string $startPattern,\n        string $oldValue,\n        string $newValue\n    ): string {\n        $return = $query;\n        $matches = [];\n\n        Strings::preg_match_all('/^' . $startPattern . \"\\s+(\\w+)(\\s+|$)/i\", $query, $matches);\n\n        if (isset($matches[1][0])) {\n            $oldTableFullName = $matches[1][0];\n            $newTableFullName = $newValue . Strings::substr($oldTableFullName, Strings::strlen($oldValue));\n            $return = str_replace($oldTableFullName, $newTableFullName, $query);\n        }\n\n        return $return;\n    }\n\n    /**\n     * This function builds the queries for the backup.\n     *\n     * @param string $query\n     * @param string $table\n     * @return array\n     */\n    public function buildInsertQueries(string $query, string $table): array\n    {\n        if (!$result = $this->config->getDb()->query($query)) {\n            return [];\n        }\n        $ret = [];\n\n        $ret[] = \"\\r\\n-- Table: \" . $table;\n\n        while ($row = $this->config->getDb()->fetchArray($result)) {\n            $p1 = [];\n            $p2 = [];\n            foreach ($row as $key => $val) {\n                $p1[] = $key;\n                if ('rights' != $key && is_numeric($val)) {\n                    $p2[] = $val;\n                } else {\n                    if (is_null($val)) {\n                        $p2[] = 'NULL';\n                    } else {\n                        $p2[] = sprintf(\"'%s'\", $this->config->getDb()->escape($val));\n                    }\n                }\n            }\n            $ret[] = 'INSERT INTO ' . $table . ' (' . implode(',', $p1) . ') VALUES (' . implode(',', $p2) . ');';\n        }\n\n        return $ret;\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ categories.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-09-07\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Database;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\n\n/**\n * Class CategoryHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass CategoryHelper extends Helper\n{\n    /**\n     * Renders the main navigation.\n     *\n     * @param int $activeCategory Selected category\n     * @return string\n     */\n    public function renderNavigation(int $activeCategory = 0): string\n    {\n        global $sids, $PMF_LANG;\n\n        $open = 0;\n        $output = '';\n        $numCategories = $this->Category->height();\n        $numFaqs = $this->categoryRelation->getNumberOfFaqsPerCategory();\n\n        if ($numCategories > 0) {\n            for ($y = 0; $y < $numCategories; $y = $this->Category->getNextLineTree($y)) {\n                list($hasChild, $name, $categoryId, $description, $active) = $this->Category->getLineDisplay($y);\n\n                if (!$active) {\n                    continue;\n                }\n\n                if ($activeCategory == $categoryId) {\n                    $isActive = true;\n                } else {\n                    $isActive = false;\n                }\n\n                $level = $this->Category->treeTab[$y]['level'];\n                $leveldiff = $open - $level;\n\n                if (\n                    $this->config->get('records.hideEmptyCategories') && !isset($numFaqs[$categoryId])\n                    && '-' === $hasChild\n                ) {\n                    continue;\n                }\n\n                if ($leveldiff > 1) {\n                    $output .= '</li>';\n                    for ($i = $leveldiff; $i > 1; --$i) {\n                        $output .= sprintf(\n                            \"\\n%s</ul>\\n%s</li>\\n\",\n                            str_repeat(\"\\t\", $level + $i + 1),\n                            str_repeat(\"\\t\", $level + $i)\n                        );\n                    }\n                }\n\n                if ($level < $open) {\n                    if (($level - $open) == -1) {\n                        $output .= '</li>';\n                    }\n                    $output .= \"\\n\" . str_repeat(\"\\t\", $level + 2) . \"</ul>\\n\" .\n                        str_repeat(\"\\t\", $level + 1) . \"</li>\\n\";\n                } elseif ($level == $open && $y != 0) {\n                    $output .= \"</li>\\n\";\n                }\n\n                if ($level > $open) {\n                    $output .= sprintf(\n                        \"\\n%s<ul class=\\\"nav nav-list\\\">\\n%s<li%s>\",\n                        str_repeat(\"\\t\", $level + 1),\n                        str_repeat(\"\\t\", $level + 1),\n                        $isActive ? ' class=\"active\"' : ''\n                    );\n                } else {\n                    $output .= sprintf(\n                        '%s<li%s>',\n                        str_repeat(\"\\t\", $level + 1),\n                        $isActive ? ' class=\"active\"' : ''\n                    );\n                }\n\n                if (isset($this->Category->treeTab[$y]['symbol']) && $this->Category->treeTab[$y]['symbol'] == 'plus') {\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        true,\n                        $isActive\n                    );\n                }\n                if ($this->Category->treeTab[$y]['symbol'] == 'minus') {\n                    $name = ($this->Category->treeTab[$y]['parent_id'] === 0)\n                        ?\n                        $name\n                        :\n                        $this->Category->categoryName[$this->Category->treeTab[$y]['id']]['name'];\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        false,\n                        $isActive\n                    );\n                } else {\n                    $output .= $this->Category->addCategoryLink(\n                        $sids,\n                        $categoryId,\n                        $name,\n                        $description,\n                        false,\n                        $isActive\n                    );\n                }\n\n                $open = $level;\n            }\n            if ($open > 0) {\n                $output .= str_repeat(\"</li>\\n\\t</ul>\\n\\t\", $open);\n            }\n            $output .= '</li>';\n\n            return $output;\n        } else {\n            $output = '<li><a href=\"#\">' . $PMF_LANG['no_cats'] . '</a></li>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Renders the main navigation dropdown.\n     *\n     * @return string\n     */\n    public function renderCategoryDropDown(): string\n    {\n        global $sids, $PMF_LANG;\n\n        $open = 0;\n        $output = '';\n        $numCategories = $this->Category->height();\n\n        $this->Category->expandAll();\n\n        if ($numCategories > 0) {\n            for ($y = 0; $y < $this->Category->height(); $y = $this->Category->getNextLineTree($y)) {\n                list($hasChild, $categoryName, $parent, $description, $active) = $this->Category->getLineDisplay($y);\n\n                if (!$active) {\n                    continue;\n                }\n\n                $level = $this->Category->treeTab[$y]['level'];\n                $leveldiff = $open - $level;\n                $numChildren = $this->Category->treeTab[$y]['numChilds'];\n\n                if (!isset($number[$parent])) {\n                    $number[$parent] = 0;\n                }\n\n                if ($this->config->get('records.hideEmptyCategories') && 0 === $number[$parent] && '-' === $hasChild) {\n                    continue;\n                }\n\n                if ($leveldiff > 1) {\n                    $output .= '</li>';\n                    for ($i = $leveldiff; $i > 1; --$i) {\n                        $output .= sprintf(\n                            \"\\n%s</ul>\\n%s</li>\\n\",\n                            str_repeat(\"\\t\", $level + $i + 1),\n                            str_repeat(\"\\t\", $level + $i)\n                        );\n                    }\n                }\n\n                if ($level < $open) {\n                    if (($level - $open) == -1) {\n                        $output .= '</li>';\n                    }\n                    $output .= sprintf(\n                        \"\\n%s</ul>\\n%s</li>\\n\",\n                        str_repeat(\"\\t\", $level + 2),\n                        str_repeat(\"\\t\", $level + 1)\n                    );\n                } elseif ($level == $open && $y != 0) {\n                    $output .= \"</li>\\n\";\n                }\n\n                if ($level > $open) {\n                    $output .= sprintf(\n                        \"\\n%s<ul class=\\\"dropdown-menu\\\">\\n%s\",\n                        str_repeat(\"\\t\", $level + 1),\n                        str_repeat(\"\\t\", $level + 1)\n                    );\n                    if ($numChildren > 0) {\n                        $output .= '<li class=\"dropdown-submenu\">';\n                    } else {\n                        $output .= '<li>';\n                    }\n                } else {\n                    $output .= str_repeat(\"\\t\", $level + 1);\n                    if ($numChildren > 0) {\n                        $output .= '<li class=\"dropdown-submenu\">';\n                    } else {\n                        $output .= '<li>';\n                    }\n                }\n\n                $url = sprintf(\n                    '%sindex.php?%saction=show&amp;cat=%d',\n                    $this->config->getDefaultUrl(),\n                    $sids,\n                    $parent\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = Strings::htmlentities($categoryName);\n                $oLink->text = Strings::htmlentities($categoryName);\n                $oLink->tooltip = !is_null($description) ?? Strings::htmlentities($description);\n\n                $output .= $oLink->toHtmlAnchor();\n                $open = $level;\n            }\n\n            if (isset($level) && $level > 0) {\n                $output .= str_repeat(\"</li>\\n\\t</ul>\\n\\t\", $level);\n            }\n\n            return $output;\n        } else {\n            $output = '<li><a href=\"#\">' . $PMF_LANG['no_cats'] . '</a></li>';\n        }\n\n        return $output;\n    }\n\n    /**\n     * Returns all top-level categories in <li> tags.\n     *\n     * @return string\n     */\n    public function renderMainCategories(): string\n    {\n        $categories = '';\n        foreach ($this->Category->categories as $cat) {\n            if (0 === (int)$cat['parent_id']) {\n                $categories .= sprintf(\n                    '<li><a href=\"?action=show&cat=%d\">%s</a></li>',\n                    $cat['id'],\n                    Strings::htmlentities($cat['name'])\n                );\n            }\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Get all categories in <option> tags.\n     *\n     * @param int[]|int $categoryId CategoryHelper ID or array of category IDs\n     *\n     * @return string\n     */\n    public function renderOptions($categoryId): string\n    {\n        $categories = '';\n\n        if (!is_array($categoryId)) {\n            $categoryId = [\n                [\n                    'category_id' => $categoryId,\n                    'category_lang' => '',\n                ],\n            ];\n        } elseif (isset($categoryId['category_id'])) {\n            $categoryId = [$categoryId];\n        }\n\n        $i = 0;\n        foreach ($this->Category->getCategoryTree() as $cat) {\n            $indent = '';\n            for ($j = 0; $j < $cat['indent']; ++$j) {\n                $indent .= '....';\n            }\n            $categories .= \"\\t<option value=\\\"\" . $cat['id'] . '\"';\n\n            if (0 === $i && count($categoryId) === 0) {\n                $categories .= ' selected';\n            } else {\n                foreach ($categoryId as $categorised) {\n                    if ($cat['id'] == $categorised['category_id']) {\n                        $categories .= ' selected';\n                    }\n                }\n            }\n\n            $categories .= '>';\n            $categories .= $indent . Strings::htmlentities($cat['name']) . \"</option>\\n\";\n            ++$i;\n        }\n\n        return $categories;\n    }\n\n    /**\n     * Renders the start page category card decks\n     * @param array $categories\n     * @return string\n     */\n    public function renderStartPageCategories(array $categories): string\n    {\n        if (count($categories) === 0) {\n            return '';\n        }\n\n        $decks = '';\n        $key = 1;\n        foreach ($categories as $category) {\n            $decks .= '<div class=\"card mb-4\"><a href=\"' . $category['url'] . '\">';\n            if ('' !== $category['image']) {\n                $decks .= '<img class=\"card-img-top embed-responsive-item\" width=\"200\" alt=\"' .\n                $category['name'] . '\" src=\"' . $category['image'] . '\" />';\n            }\n            $decks .= '</a>' .\n                '<div class=\"card-body\">' .\n                '<h4 class=\"card-title text-center\">' .\n                '<a href=\"' . Strings::htmlentities($category['url']) . '\">' .\n                Strings::htmlentities($category['name']) . '</a>' .\n                '</h4>' .\n                '<p class=\"card-text\">' . Strings::htmlentities($category['description']) . '</p>' .\n                '</div>' .\n                '</div>';\n            if ($key % 2 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-sm-block d-md-none\"></div>';\n            }\n            if ($key % 3 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-md-block d-lg-none\"></div>';\n            }\n            if ($key % 4 === 0) {\n                $decks .= '<div class=\"w-100 d-none d-lg-block d-xl-block\"></div>';\n            }\n            $key++;\n        }\n\n        return $decks;\n    }\n\n    /**\n     * Renders the static tree with the number of records.\n     *\n     * @return string\n     */\n    public function renderCategoryTree(): string\n    {\n        global $sids, $plr;\n\n        $number = [];\n\n        $query = sprintf(\n            '\n            SELECT\n                fcr.category_id AS category_id,\n                count(fcr.category_id) AS number\n            FROM\n                %sfaqcategoryrelations fcr\n                JOIN %sfaqdata fd ON fcr.record_id = fd.id AND fcr.record_lang = fd.lang\n                LEFT JOIN %sfaqdata_group AS fdg ON fd.id = fdg.record_id\n                LEFT JOIN %sfaqdata_user AS fdu ON fd.id = fdu.record_id\n                LEFT JOIN %sfaqcategory_group AS fcg ON fcr.category_id = fcg.category_id\n                LEFT JOIN %sfaqcategory_user AS fcu ON fcr.category_id = fcu.category_id\n            WHERE 1=1 \n            ',\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix(),\n            Database::getTablePrefix()\n        );\n\n        if ($this->config->get('security.permLevel') !== 'basic') {\n            if (-1 === $this->Category->getUser()) {\n                $query .= sprintf(\n                    'AND fdg.group_id IN (%s) AND fcg.group_id IN (%s)',\n                    implode(', ', $this->Category->getGroups()),\n                    implode(', ', $this->Category->getGroups())\n                );\n            } else {\n                $query .= sprintf(\n                    'AND ( fdg.group_id IN (%s) OR (fdu.user_id = %d OR fdg.group_id IN (%s)) )\n                    AND ( fcg.group_id IN (%s) OR (fcu.user_id = %d OR fcg.group_id IN (%s)) )',\n                    implode(', ', $this->Category->getGroups()),\n                    $this->Category->getUser(),\n                    implode(', ', $this->Category->getGroups()),\n                    implode(', ', $this->Category->getGroups()),\n                    $this->Category->getUser(),\n                    implode(', ', $this->Category->getGroups())\n                );\n            }\n        }\n\n        if (strlen($this->config->getLanguage()->getLanguage()) > 0) {\n            $query .= sprintf(\n                \" AND fd.lang = '%s'\",\n                $this->config->getLanguage()->getLanguage()\n            );\n        }\n\n        $query .= \" AND fd.active = 'yes' GROUP BY fcr.category_id\";\n\n        $result = $this->config->getDb()->query($query);\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $number[$row->category_id] = $row->number;\n            }\n        }\n        $output = '<ul class=\"pmf-category-overview\">';\n        $open = 1;\n        $this->Category->expandAll();\n\n        for ($y = 0; $y < $this->Category->height(); $y = $this->Category->getNextLineTree($y)) {\n            list($hasChild, $categoryName, $parent, $description) = $this->Category->getLineDisplay($y);\n\n            $level = $this->Category->treeTab[$y]['level'];\n            $levelDiff = $open - $level;\n            if (!isset($number[$parent])) {\n                $number[$parent] = 0;\n            }\n\n            if ($this->config->get('records.hideEmptyCategories') && 0 === $number[$parent] && '-' === $hasChild) {\n                continue;\n            }\n\n            if ($levelDiff > 1) {\n                $output .= '</li>';\n                for ($i = $levelDiff; $i > 1; --$i) {\n                    $output .= '</ul></li>';\n                }\n            }\n\n            if ($level < $open) {\n                if (($level - $open) == -1) {\n                    $output .= '</li>';\n                }\n                $output .= '</ul></li>';\n            } elseif ($level == $open && $y != 0) {\n                $output .= '</li>';\n            }\n\n            if ($level > $open) {\n                $output .= sprintf(\n                    '<ul><li data-category-id=\"%d\" data-category-level=\"%d\">',\n                    $parent,\n                    $level\n                );\n            } else {\n                $output .= sprintf(\n                    '<li data-category-id=\"%d\" data-category-level=\"%d\">',\n                    $parent,\n                    $level\n                );\n            }\n\n            if (0 === $number[$parent] && 0 === $level) {\n                $numFaqs = '';\n            } else {\n                $numFaqs = ' <span class=\"badge badge-primary badge-pill\">' .\n                    $plr->getMsg('plmsgEntries', $number[$parent]) .\n                    '</span>';\n            }\n\n            $url = sprintf(\n                '%sindex.php?%saction=show&amp;cat=%d',\n                $this->config->getDefaultUrl(),\n                $sids,\n                $parent\n            );\n            $oLink = new Link($url, $this->config);\n            $oLink->itemTitle = Strings::htmlentities($categoryName);\n            $oLink->text = Strings::htmlentities($categoryName);\n            $oLink->tooltip = !is_null($description) ?? Strings::htmlentities($description);\n\n            $output .= $oLink->toHtmlAnchor() . $numFaqs;\n            $open = $level;\n        }\n\n        if (isset($level) && $level > 0) {\n            $output .= str_repeat('</li></ul>', $level);\n        }\n\n        $output .= '</li></ul>';\n\n        return $output;\n    }\n\n    /**\n     * Returns an array with all moderators for the given categories.\n     *\n     * @param int[] $categories\n     * @return string[]\n     */\n    public function getModerators(array $categories): array\n    {\n        $recipients = [];\n\n        $user = new User($this->config);\n\n        foreach ($categories as $_category) {\n            $userId = $this->Category->getOwner($_category);\n            $groupId = $this->Category->getModeratorGroupId($_category);\n\n            $user->getUserById($userId);\n            $catOwnerEmail = $user->getUserData('email');\n\n            // Avoid to send multiple emails to the same owner\n            if (!empty($catOwnerEmail) && !isset($send[$catOwnerEmail])) {\n                $recipients[] = $catOwnerEmail;\n            }\n\n            if ($groupId > 0) {\n                $moderators = $user->perm->getGroupMembers($groupId);\n                foreach ($moderators as $moderator) {\n                    $user->getUserById($moderator);\n                    $moderatorEmail = $user->getUserData('email');\n\n                    // Avoid to send multiple emails to the same moderator\n                    if (!empty($moderatorEmail) && !isset($send[$moderatorEmail])) {\n                        $recipients[] = $moderatorEmail;\n                    }\n                }\n            }\n        }\n\n        return array_unique($recipients);\n    }\n\n    /**\n     * Renders the <option> tags for the available translations for a given category.\n     *\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderAvailableTranslationsOptions(int $categoryId): string\n    {\n        $options = '';\n        $availableTranslations = $this->config->getLanguage()->languageAvailable($categoryId, 'faqcategories');\n        $availableLanguages = LanguageHelper::getAvailableLanguages();\n\n        foreach ($availableTranslations as $language) {\n            $options .= sprintf('<option value=\"%s\">%s</option>', $language, $availableLanguages[$language]);\n        }\n\n        return $options;\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     *\n     * @param string $answer\n     * @return string\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     * @param string $answer\n     * @param string $currentUrl\n     * @return string\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\"><i aria-hidden=\"true\" class=\"fa fa-twitter\"></i></a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\"><i aria-hidden=\"true\" class=\"fa fa-envelope\"></i></a>',\n            $url\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     *\n     * @param Faq $faq\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        global $languageCodes;\n\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\n        if (count($availableLanguages) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', $languageCodes[strtoupper($language)]);\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @param string  $answer\n     * @param int $numWords\n     * @return string\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags($parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @param Category $category\n     * @param Faq      $faq\n     * @param string   $language\n     * @return string\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, string $language = ''): string\n    {\n        global $PMF_LANG;\n\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf('<h3>%s</h3>', $category->getPath($data['category_id'], ' &raquo; '));\n                }\n\n                $output .= sprintf('<h4>%s</h4>', strip_tags($data['title']));\n                $output .= sprintf('<article>%s</article>', $data['content']);\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    $PMF_LANG['msgAuthor'],\n                    $data['author'],\n                    $PMF_LANG['msgLastUpdateArticle'] . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     *\n     * @param int    $faqId\n     * @param string $faqLang\n     * @return string\n     */\n    public function createFaqTranslationLinkList(int $faqId, string $faqLang): string\n    {\n        global $languageCodes;\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->languageAvailable(0, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $languageCode,\n                    'Translate to',\n                    $languageCodes[strtoupper($languageCode)]\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n}\n", "<?php\n\n/**\n * Questions helper class for phpMyFAQ.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2019-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2019-11-26\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Core\\Exception;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\User;\n\n/**\n * Class QuestionHelper\n * @package phpMyFAQ\\Helper\n */\nclass QuestionHelper\n{\n    /** @var Configuration */\n    private Configuration $config;\n\n    /** @var Category */\n    private Category $category;\n\n    /** @var array */\n    private array $translation;\n\n    /**\n     * QuestionHelper constructor.\n     * @param Configuration $config\n     * @param Category $category\n     */\n    public function __construct(Configuration $config, Category $category)\n    {\n        global $PMF_LANG;\n        $this->config = $config;\n        $this->category = $category;\n        $this->translation = $PMF_LANG;\n    }\n\n    /**\n     * @param array $questionData\n     * @param array $categories\n     * @throws Exception\n     */\n    public function sendSuccessMail(array $questionData, array $categories): void\n    {\n        $questionObject = new Question($this->config);\n        $questionObject->addQuestion($questionData);\n\n        $questionMail = 'User: ' . $questionData['username'] .\n            ', mailto:' . $questionData['email'] . \"\\n\" . $this->translation['msgCategory'] .\n            ': ' . $categories[$questionData['category_id']]['name'] . \"\\n\\n\" .\n            wordwrap($questionData['question'], 72) . \"\\n\\n\" .\n            $this->config->getDefaultUrl() . 'admin/';\n\n        $userId = $this->category->getOwner($questionData['category_id']);\n        $oUser = new User($this->config);\n        $oUser->getUserById($userId);\n\n        $userEmail = $oUser->getUserData('email');\n        $mainAdminEmail = $this->config->getAdminEmail();\n\n        $mailer = new Mail($this->config);\n        $mailer->setReplyTo($questionData['email'], $questionData['username']);\n        $mailer->addTo($mainAdminEmail);\n        // Let the category owner get a copy of the message\n        if (!empty($userEmail) && $mainAdminEmail != $userEmail) {\n            $mailer->addCc($userEmail);\n        }\n        $mailer->subject = $this->config->getTitle() . ': New Question was added.';\n        $mailer->message = $questionMail;\n        $mailer->send();\n        unset($mailer);\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ tags.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package    phpMyFAQ\n * @author     Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright  2013-2022 phpMyFAQ Team\n * @license    http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link       https://www.phpmyfaq.de\n * @since      2013-12-26\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Strings;\n\n/**\n * Class TagsHelper\n * @package phpMyFAQ\\Helper\n */\nclass TagsHelper extends Helper\n{\n    /**\n     * The array of Tag IDs\n     *\n     * @var array\n     */\n    private array $taggingIds;\n\n    /**\n     * Renders the tag list.\n     *\n     * @param array $tags Array of tags.\n     *\n     * @return string\n     */\n    public function renderTagList(array $tags): string\n    {\n        $tagList = '';\n        foreach ($tags as $tagId => $tagName) {\n            $tagList .= $this->renderSearchTag($tagId, $tagName);\n        }\n\n        return $tagList;\n    }\n\n    /**\n     * Renders a search tag.\n     *\n     * @param int    $tagId   The ID of the tag\n     * @param string $tagName The tag name\n     *\n     * @return string\n     */\n    public function renderSearchTag(int $tagId, string $tagName): string\n    {\n        $taggingIds = str_replace((string) $tagId, '', $this->getTaggingIds());\n        $taggingIds = str_replace(' ', '', $taggingIds);\n        $taggingIds = str_replace(',,', ',', $taggingIds);\n        $taggingIds = trim(implode(',', $taggingIds), ',');\n\n        return ($taggingIds != '') ? sprintf(\n            '<a class=\"btn btn-primary m-1\" href=\"?action=search&amp;tagging_id=%s\">%s ' .\n            '<i aria-hidden=\"true\" class=\"fa fa-minus-square\"></i></a> ',\n            $taggingIds,\n            Strings::htmlentities($tagName)\n        ) : sprintf(\n            '<a class=\"btn btn-primary m-1\" href=\"?action=search&amp;search=\">%s ' .\n            '<i aria-hidden=\"true\" class=\"fa fa-minus-square\"></i></a> ',\n            Strings::htmlentities($tagName)\n        );\n    }\n\n    /**\n     * Returns all tag IDs as array.\n     *\n     * @return array\n     */\n    public function getTaggingIds(): array\n    {\n        return $this->taggingIds;\n    }\n\n    /**\n     * Sets the tag IDs.\n     *\n     * @param array $taggingIds The tag IDs as array\n     */\n    public function setTaggingIds(array $taggingIds): void\n    {\n        $this->taggingIds = array_filter($taggingIds, function ($tagId) {\n            return Filter::filterVar($tagId, FILTER_VALIDATE_INT);\n        });\n    }\n\n\n    /**\n     * Renders the related tag.\n     *\n     * @param int     $tagId     The given Tag ID.\n     * @param string  $tagName   The name of the tag.\n     * @param int     $relevance The relevance of the tag.\n     *\n     * @return string\n     */\n    public function renderRelatedTag(int $tagId, string $tagName, int $relevance): string\n    {\n        return sprintf(\n            '<a class=\"btn btn-primary\" href=\"?action=search&amp;tagging_id=%s\">%s %s ' .\n            '<span class=\"badge badge-dark\">%d</span></a>',\n            implode(',', $this->getTaggingIds()) . ',' . $tagId,\n            '<i aria-hidden=\"true\" class=\"fa fa-plus-square\"></i> ',\n            Strings::htmlentities($tagName),\n            $relevance\n        );\n    }\n}\n", "<?php\n\n/**\n * The News class for phpMyFAQ news.\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-06-25\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class News\n *\n * @package phpMyFAQ\n */\nclass News\n{\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * Language strings.\n     *\n     * @var array<string>\n     */\n    private $pmfLang;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        global $PMF_LANG;\n\n        $this->config = $config;\n        $this->pmfLang = $PMF_LANG;\n    }\n\n    /**\n     * Function for generating the HTML5 code for the current news.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @return string\n     * @throws Exception\n     */\n    public function getNews(bool $showArchive = false, bool $active = true): string\n    {\n        $output = '';\n        $news = $this->getLatestData($showArchive, $active);\n        $date = new Date($this->config);\n\n        foreach ($news as $item) {\n            $url = sprintf(\n                '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                $this->config->getDefaultUrl(),\n                $item['id'],\n                $item['lang']\n            );\n            $oLink = new Link($url, $this->config);\n\n            if (isset($item['header'])) {\n                $oLink->itemTitle = Strings::htmlentities($item['header']);\n            }\n\n            $output .= sprintf(\n                '<h6%s><a id=\"news_%d\" href=\"%s\">%s <i aria-hidden=\"true\" class=\"fa fa-caret-right\"></i></a></h6>',\n                ' class=\"pmf-news-heading\"',\n                $item['id'],\n                $oLink->toString(),\n                Strings::htmlentities($item['header'])\n            );\n\n            $output .= sprintf('%s', $item['content']);\n\n            if (strlen($item['link']) > 1) {\n                $output .= sprintf(\n                    '<br>%s <a href=\"%s\" target=\"_%s\">%s</a>',\n                    $this->pmfLang['msgInfo'],\n                    $item['link'],\n                    $item['target'],\n                    $item['linkTitle']\n                );\n            }\n\n            $output .= sprintf('<small class=\"text-muted\">%s</small>', $date->format($item['date']));\n        }\n\n        return ('' == $output) ? $this->pmfLang['msgNoNews'] : $output;\n    }\n\n    /**\n     * Return the latest news data.\n     *\n     * @param bool $showArchive Show archived news\n     * @param bool $active Show active news\n     * @param bool $forceConfLimit Force to limit in configuration\n     * @return array<int, array<mixed>>\n     */\n    public function getLatestData($showArchive = false, $active = true, $forceConfLimit = false): array\n    {\n        $news = [];\n        $counter = 0;\n        $now = date('YmdHis');\n\n        $query = sprintf(\n            \"\n            SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                date_start <= '%s'\n            AND \n                date_end   >= '%s'\n            %s\n            AND\n                lang = '%s'\n            ORDER BY\n                datum DESC\",\n            Database::getTablePrefix(),\n            $now,\n            $now,\n            $active ? \"AND active = 'y'\" : '',\n            $this->config->getLanguage()->getLanguage()\n        );\n\n        $result = $this->config->getDb()->query($query);\n        $numberOfShownNewsEntries = $this->config->get('records.numberOfShownNewsEntries');\n        if ($numberOfShownNewsEntries > 0 && $this->config->getDb()->numRows($result) > 0) {\n            while (($row = $this->config->getDb()->fetchObject($result))) {\n                ++$counter;\n                if (\n                    ($showArchive && ($counter > $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && (!$forceConfLimit) && ($counter <= $numberOfShownNewsEntries)) ||\n                    ((!$showArchive) && $forceConfLimit)\n                ) {\n                    $url = sprintf(\n                        '%sindex.php?action=news&amp;newsid=%d&amp;newslang=%s',\n                        $this->config->getDefaultUrl(),\n                        $row->id,\n                        $row->lang\n                    );\n                    $oLink = new Link($url, $this->config);\n                    $oLink->itemTitle = $row->header;\n\n                    $item = [\n                        'id' => (int)$row->id,\n                        'lang' => $row->lang,\n                        'date' => Date::createIsoDate($row->datum, DATE_ISO8601, true),\n                        'header' => $row->header,\n                        'content' => $row->artikel,\n                        'authorName' => $row->author_name,\n                        'authorEmail' => $row->author_email,\n                        'dateStart' => $row->date_start,\n                        'dateEnd' => $row->date_end,\n                        'active' => ('y' == $row->active),\n                        'allowComments' => ('y' == $row->comment),\n                        'link' => $row->link,\n                        'linkTitle' => $row->linktitel,\n                        'target' => $row->target,\n                        'url' => $oLink->toString()\n                    ];\n                    $news[] = $item;\n                }\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Fetches all news headers.\n     *\n     * @return array<mixed>\n     */\n    public function getNewsHeader(): array\n    {\n        $headers = [];\n        $now = date('YmdHis');\n\n        $query = sprintf(\"\n            SELECT\n                id, datum, lang, header, active, date_start, date_end\n            FROM\n                %sfaqnews\n            WHERE\n                lang = '%s'\n            ORDER BY\n                datum DESC\", Database::getTablePrefix(), $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            while ($row = $this->config->getDb()->fetchObject($result)) {\n                $expired = ($now > $row->date_end);\n                $headers[] = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'header' => $row->header,\n                    'date' => Date::createIsoDate($row->datum),\n                    'active' => $row->active,\n                    'expired' => $expired,\n                );\n            }\n        }\n\n        return $headers;\n    }\n\n    /**\n     * Fetches a news entry identified by its ID.\n     *\n     * @param int  $id ID of news\n     * @param bool $admin Is admin\n     * @return array<mixed>\n     */\n    public function getNewsEntry($id, $admin = false): array\n    {\n        $news = [];\n\n        $query = sprintf(\"SELECT\n                *\n            FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        $result = $this->config->getDb()->query($query);\n\n        if ($this->config->getDb()->numRows($result) > 0) {\n            if ($row = $this->config->getDb()->fetchObject($result)) {\n                $content = $row->artikel;\n                $active = ('y' == $row->active);\n                $allowComments = ('y' == $row->comment);\n                $expired = (date('YmdHis') > $row->date_end);\n\n                if (!$admin) {\n                    if (!$active) {\n                        $content = $this->pmfLang['err_inactiveNews'];\n                    }\n                    if ($expired) {\n                        $content = $this->pmfLang['err_expiredNews'];\n                    }\n                }\n\n                $news = array(\n                    'id' => $row->id,\n                    'lang' => $row->lang,\n                    'date' => Date::createIsoDate($row->datum),\n                    'header' => $row->header,\n                    'content' => $content,\n                    'authorName' => $row->author_name,\n                    'authorEmail' => $row->author_email,\n                    'dateStart' => $row->date_start,\n                    'dateEnd' => $row->date_end,\n                    'active' => $active,\n                    'allowComments' => $allowComments,\n                    'link' => $row->link,\n                    'linkTitle' => $row->linktitel,\n                    'target' => $row->target,\n                );\n            }\n        }\n\n        return $news;\n    }\n\n    /**\n     * Adds a new news entry.\n     *\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function addNewsEntry(array $data): bool\n    {\n        $query = sprintf(\n            \"\n            INSERT INTO\n                %sfaqnews\n            (id, datum, lang, header, artikel, author_name, author_email, date_start, date_end, active, comment,\n            link, linktitel, target)\n                VALUES\n            (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->nextId(Database::getTablePrefix() . 'faqnews', 'id'),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target']\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates a new news entry identified by its ID.\n     *\n     * @param int          $id News ID\n     * @param array<mixed> $data Array with news data\n     * @return bool\n     */\n    public function updateNewsEntry(int $id, array $data): bool\n    {\n        $query = sprintf(\n            \"\n            UPDATE\n                %sfaqnews\n            SET\n                datum = '%s',\n                lang = '%s',\n                header = '%s',\n                artikel = '%s',\n                author_name = '%s',\n                author_email = '%s',\n                date_start = '%s',\n                date_end = '%s',\n                active = '%s',\n                comment = '%s',\n                link = '%s',\n                linktitel = '%s',\n                target = '%s'\n            WHERE\n                id = %d\",\n            Database::getTablePrefix(),\n            $data['date'],\n            $data['lang'],\n            $this->config->getDb()->escape($data['header']),\n            $this->config->getDb()->escape($data['content']),\n            $this->config->getDb()->escape($data['authorName']),\n            $data['authorEmail'],\n            $data['dateStart'],\n            $data['dateEnd'],\n            $data['active'],\n            $data['comment'],\n            $this->config->getDb()->escape($data['link']),\n            $this->config->getDb()->escape($data['linkTitle']),\n            $data['target'],\n            $id\n        );\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Deletes a news entry identified by its ID.\n     *\n     * @param int $id News ID\n     * @return bool\n     * @todo   check if there are comments attached to the deleted news\n     */\n    public function deleteNews($id): bool\n    {\n        $query = sprintf(\"DELETE FROM\n                %sfaqnews\n            WHERE\n                id = %d\n            AND\n                lang = '%s'\", Database::getTablePrefix(), $id, $this->config->getLanguage()->getLanguage());\n\n        if (!$this->config->getDb()->query($query)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "<?php\n\n/**\n * Utilities - Functions and Classes common to the whole phpMyFAQ architecture.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@phpmyfaq.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-11-01\n */\n\nnamespace phpMyFAQ;\n\ndefine('HTTP_PARAMS_GET_CATID', 'catid');\ndefine('HTTP_PARAMS_GET_CURRENTDAY', 'today');\ndefine('HTTP_PARAMS_GET_DISPOSITION', 'dispos');\ndefine('HTTP_PARAMS_GET_GIVENDATE', 'givendate');\ndefine('HTTP_PARAMS_GET_LANG', 'lang');\ndefine('HTTP_PARAMS_GET_DOWNWARDS', 'downwards');\ndefine('HTTP_PARAMS_GET_TYPE', 'type');\n\n/**\n * Class Utils\n *\n * @package phpMyFAQ\n */\nclass Utils\n{\n    /**\n     * Check if a given string could be a language.\n     *\n     * @param string $lang Language\n     * @return bool\n     */\n    public static function isLanguage(string $lang): bool\n    {\n        return preg_match('/^[a-zA-Z\\-]+$/', $lang);\n    }\n\n    /**\n     * Checks if a date is a phpMyFAQ valid date.\n     *\n     * @param string $date Date\n     * @return bool\n     */\n    public static function isLikeOnPMFDate(string $date): bool\n    {\n        // Test if the passed string is in the format: %YYYYMMDDhhmmss%\n        $dateToTest = $date;\n        // Suppress first occurrences of '%'\n        if (substr($dateToTest, 0, 1) == '%') {\n            $dateToTest = substr($dateToTest, 1);\n        }\n        // Suppress last occurrences of '%'\n        if (substr($dateToTest, -1, 1) == '%') {\n            $dateToTest = substr($dateToTest, 0, strlen($dateToTest) - 1);\n        }\n        // PMF date consists of numbers only: YYYYMMDDhhmmss\n        return is_numeric($dateToTest);\n    }\n\n    /**\n     * Shortens a string for a given number of words.\n     *\n     * @param string $string String\n     * @param int    $characters Characters\n     * @return string\n     * @todo This function doesn't work with Chinese, Japanese, Korean and Thai\n     *       because they don't have spaces as word delimiters\n     */\n    public static function makeShorterText(string $string, int $characters): string\n    {\n        $string = Strings::preg_replace('/\\s+/u', ' ', $string);\n        $arrStr = explode(' ', $string);\n        $shortStr = '';\n        $num = count($arrStr);\n\n        if ($num > $characters) {\n            for ($j = 0; $j < $characters; ++$j) {\n                $shortStr .= $arrStr[$j] . ' ';\n            }\n            $shortStr .= '...';\n        } else {\n            $shortStr = $string;\n        }\n\n        return $shortStr;\n    }\n\n    /**\n     * Resolves the PMF markers like e.g. %sitename%.\n     *\n     * @param string        $text Text contains PMF markers\n     * @param Configuration $config\n     * @return string\n     */\n    public static function resolveMarkers(string $text, Configuration $config): string\n    {\n        // Available markers: key and resolving value\n        $markers = [\n            '%sitename%' => $config->getTitle(),\n        ];\n\n        // Resolve any known pattern\n        return str_replace(\n            array_keys($markers),\n            array_values($markers),\n            $text\n        );\n    }\n\n    /**\n     * This method chops a string.\n     *\n     * @param string $string String to chop\n     * @param int    $words Number of words\n     * @return string\n     */\n    public static function chopString(string $string, int $words): string\n    {\n        $str = '';\n        $pieces = explode(' ', $string);\n        $num = count($pieces);\n        if ($words > $num) {\n            $words = $num;\n        }\n        for ($i = 0; $i < $words; ++$i) {\n            $str .= $pieces[$i] . ' ';\n        }\n\n        return $str;\n    }\n\n    /**\n     * Adds a highlighted word to a string.\n     *\n     * @param string $string String\n     * @param string $highlight Given word for highlighting\n     * @return string\n     */\n    public static function setHighlightedString(string $string, string $highlight): string\n    {\n        $attributes = [\n            'href', 'src', 'title', 'alt', 'class', 'style', 'id', 'name',\n            'face', 'size', 'dir', 'rel', 'rev', 'role',\n            'onmouseenter', 'onmouseleave', 'onafterprint', 'onbeforeprint',\n            'onbeforeunload', 'onhashchange', 'onmessage', 'onoffline', 'ononline',\n            'onpopstate', 'onpagehide', 'onpageshow', 'onresize', 'onunload',\n            'ondevicemotion', 'ondeviceorientation', 'onabort', 'onblur',\n            'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu',\n            'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave',\n            'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied',\n            'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown',\n            'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata',\n            'onloadstart', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover',\n            'onmouseup', 'onmozfullscreenchange', 'onmozfullscreenerror', 'onpause',\n            'onplay', 'onplaying', 'onprogress', 'onratechange', 'onreset',\n            'onscroll', 'onseeked', 'onseeking', 'onselect', 'onshow', 'onstalled',\n            'onsubmit', 'onsuspend', 'ontimeupdate', 'onvolumechange', 'onwaiting',\n            'oncopy', 'oncut', 'onpaste', 'onbeforescriptexecute', 'onafterscriptexecute'\n        ];\n\n        return Strings::preg_replace_callback(\n            '/(' . $highlight . '=\"[^\"]*\")|' .\n            '((' . implode('|', $attributes) . ')=\"[^\"]*' . $highlight . '[^\"]*\")|' .\n            '(' . $highlight . ')/mis',\n            ['phpMyFAQ\\Utils', 'highlightNoLinks'],\n            $string\n        );\n    }\n\n    /**\n     * Callback function for filtering HTML from URLs and images.\n     *\n     * @param array<int, string> $matches Array of matches from regex pattern\n     *\n     * @return string\n     */\n    public static function highlightNoLinks(array $matches): string\n    {\n        $prefix = $matches[3] ?? '';\n        $item = $matches[4] ?? '';\n        $postfix = $matches[5] ?? '';\n\n        if (!empty($item) && !self::isForbiddenElement($item)) {\n            return sprintf(\n                '<mark class=\"pmf-highlighted-string\">%s</mark>',\n                $prefix . $item . $postfix\n            );\n        }\n\n        // Fallback: the original matched string\n        return $matches[0];\n    }\n\n    /**\n     * Tries to detect if a string could be a HTML element\n     *\n     * @param string $string\n     *\n     * @return bool\n     */\n    public static function isForbiddenElement(string $string): bool\n    {\n        $forbiddenElements = [\n            'img', 'picture', 'mark'\n        ];\n\n        foreach ($forbiddenElements as $element) {\n            if (strpos($element, $string)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * debug_backtrace() wrapper function.\n     *\n     * @param string $string\n     * @return string\n     */\n    public static function debug(string $string): string\n    {\n        // sometimes Zend Optimizer causes segfaults with debug_backtrace()\n        if (extension_loaded('Zend Optimizer')) {\n            $ret = '<code>' . Strings::htmlentities($string) . \"</code><br>\\n\";\n        } else {\n            $debug = debug_backtrace();\n            $ret = '';\n            if (isset($debug[2]['class'])) {\n                $ret = $debug[2]['file'] . ':<br>';\n                $ret .= $debug[2]['class'] . $debug[1]['type'];\n                $ret .= $debug[2]['function'] . '() in line ' . $debug[2]['line'];\n                $ret .= ': <code>' . Strings::htmlentities($string) . \"</code><br>\\n\";\n            }\n        }\n\n        return $ret;\n    }\n\n    /**\n     * Parses a given string and convert all the URLs into links.\n     *\n     * @param string $string\n     * @return string\n     */\n    public static function parseUrl(string $string): string\n    {\n        $protocols = array('http://', 'https://', 'ftp://');\n\n        $string = str_replace($protocols, '', $string);\n        $string = str_replace('www.', 'http://www.', $string);\n        $string = preg_replace('|http://([a-zA-Z0-9-\\./]+)|', '<a href=\"http://$1\">$1</a>', $string);\n        return preg_replace(\n            '/(([a-z0-9\\+_\\-]+)(\\.[a-z0-9\\+_\\-]+)*@([a-z0-9\\-]+\\.)+[a-z]{2,6})/',\n            '<a href=\"mailto:$1\">$1</a>',\n            $string\n        );\n    }\n\n    /**\n     * Moves given key of an array to the top\n     *\n     * @param array<int> $array\n     * @param string $key\n     */\n    public static function moveToTop(array &$array, string $key): void\n    {\n        $temp = [$key => $array[$key]];\n        unset($array[$key]);\n        $array = $temp + $array;\n    }\n}\n", "<?php\n\n/**\n * The main start page with the start page categories, the Top 10 and the latest messages.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2002-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2002-08-23\n */\n\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Strings;\n\nif (!defined('IS_VALID_PHPMYFAQ')) {\n    http_response_code(400);\n    exit();\n}\n\n$news = new News($faqConfig);\n$categoryHelper = new CategoryHelper();\n$archived = Filter::filterInput(INPUT_GET, 'newsid', FILTER_VALIDATE_INT);\n\nif (!is_null($archived)) {\n    $writeNewsHeader = $PMF_LANG['newsArchive'];\n    $showAllNews = sprintf('<a href=\"?%s\">%s</a>', $sids, $PMF_LANG['newsShowCurrent']);\n    $archived = true;\n} else {\n    $writeNewsHeader = ' ' . $PMF_LANG['msgNews'];\n    $showAllNews = sprintf('<a href=\"?%snewsid=0\">%s</a>', $sids, $PMF_LANG['newsShowArchive']);\n    $archived = false;\n}\n\n$startPageCategories = $category->getHomeCategories();\nif (count($startPageCategories) > 0) {\n    $template->parseBlock(\n        'mainPageContent',\n        'startPageCategories',\n        [\n            'startPageCategoryDecks' => $categoryHelper->renderStartPageCategories($startPageCategories)\n        ]\n    );\n}\n\n$stickyRecordsParams = $faq->getStickyRecords();\nif (!isset($stickyRecordsParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'stickyRecordsList',\n        [\n            'stickyTitle' => $stickyRecordsParams['title'],\n            'stickyUrl' => $stickyRecordsParams['url'],\n            'stickyPreview' => $stickyRecordsParams['preview']\n        ]\n    );\n}\n\n// generate top ten list\nif ($faqConfig->get('records.orderingPopularFaqs') == 'visits') {\n    $param = 'visits';\n} else {\n    $param = 'voted';\n}\n\n$toptenParams = $faq->getTopTen($param);\nif (!isset($toptenParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'toptenList',\n        [\n            'toptenUrl' => $toptenParams['url'],\n            'toptenTitle' => $toptenParams['title'],\n            'toptenPreview' => $toptenParams['preview'],\n            'toptenVisits' => $toptenParams[$param],\n        ]\n    );\n} else {\n    $template->parseBlock(\n        'mainPageContent',\n        'toptenListError',\n        [\n            'errorMsgTopTen' => $toptenParams['error'],\n        ]\n    );\n}\n\n$latestEntriesParams = $faq->getLatest();\nif (!isset($latestEntriesParams['error'])) {\n    $template->parseBlock(\n        'mainPageContent',\n        'latestEntriesList',\n        [\n            'latestEntriesUrl' => $latestEntriesParams['url'],\n            'latestEntriesTitle' => $latestEntriesParams['title'],\n            'latestEntriesPreview' => $latestEntriesParams['preview'],\n            'latestEntriesDate' => $latestEntriesParams['date'],\n        ]\n    );\n} else {\n    $template->parseBlock(\n        'mainPageContent',\n        'latestEntriesListError',\n        [\n            'errorMsgLatest' => $latestEntriesParams['error']\n        ]\n    );\n}\n\n$template->parseBlock(\n    'mainPageContent',\n    'tagListSection',\n    [\n        'msgTags' => $PMF_LANG['msgPopularTags'],\n        'tagList' => $oTag->renderPopularTags(12)\n    ]\n);\n\n$template->parse(\n    'mainPageContent',\n    [\n        'pageHeader' => Strings::htmlspecialchars($faqConfig->getTitle()),\n        'baseHref' => $faqSystem->getSystemUri($faqConfig),\n        'stickyRecordsHeader' => $PMF_LANG['stickyRecordsHeader'],\n        'writeTopTenHeader' => $PMF_LANG['msgTopTen'],\n        'writeNewestHeader' => $PMF_LANG['msgLatestArticles'],\n        'writeNewsHeader' => $writeNewsHeader,\n        'writeNews' => $news->getNews($archived),\n        'showAllNews' => $showAllNews,\n        'writeNumberOfArticles' => $plr->getMsg('plmsgHomeArticlesOnline', $faq->getNumberOfRecords($faqLangCode)),\n        'writeSendAdress' => '?' . $sids . 'action=search',\n        'searchBox' => $PMF_LANG['msgSearch'],\n        'categoryId' => ($cat === 0) ? '%' : (int)$cat,\n        'msgSearch' => sprintf(\n            '<a class=\"help\" href=\"%sindex.php?action=search\">%s</a>',\n            $faqSystem->getSystemUri($faqConfig),\n            $PMF_LANG['msgAdvancedSearch']\n        )\n    ]\n);\n"], "filenames": ["phpmyfaq/admin/category.main.php", "phpmyfaq/admin/news.php", "phpmyfaq/faq.php", "phpmyfaq/index.php", "phpmyfaq/news.php", "phpmyfaq/src/Bootstrap.php", "phpmyfaq/src/phpMyFAQ/Category.php", "phpmyfaq/src/phpMyFAQ/Database/DatabaseHelper.php", "phpmyfaq/src/phpMyFAQ/Helper/CategoryHelper.php", "phpmyfaq/src/phpMyFAQ/Helper/FaqHelper.php", "phpmyfaq/src/phpMyFAQ/Helper/QuestionHelper.php", "phpmyfaq/src/phpMyFAQ/Helper/TagsHelper.php", "phpmyfaq/src/phpMyFAQ/News.php", "phpmyfaq/src/phpMyFAQ/Utils.php", "phpmyfaq/startpage.php"], "buggy_code_start_loc": [82, 10, 10, 542, 11, 28, 790, 34, 244, 166, 34, 10, 62, 235, 38], "buggy_code_end_loc": [84, 440, 342, 543, 129, 29, 895, 35, 510, 214, 41, 121, 368, 244, 38], "fixing_code_start_loc": [82, 10, 10, 542, 11, 28, 790, 34, 244, 166, 34, 10, 62, 235, 39], "fixing_code_end_loc": [84, 454, 342, 543, 130, 29, 895, 35, 510, 214, 41, 121, 368, 244, 40], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.10.", "other": {"cve": {"id": "CVE-2023-0313", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-15T22:15:10.970", "lastModified": "2023-01-24T14:58:27.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.10", "matchCriteriaId": "184FE56D-4BA2-499C-9F30-C0B5A2EE2C36"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/1123c0872314fa68d7d0d8136939f62270fb4b7b", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/bc27e84b-1f91-4e1b-a78c-944edeba8256", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/1123c0872314fa68d7d0d8136939f62270fb4b7b"}}