{"buggy_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* @category  Controller\n* @package   Open-AudIT\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_3.5.1\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Object Util\n*\n* @access   public\n* @category Object\n* @package  Open-AudIT\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass Util extends CI_Controller\n{\n    /**\n    * Constructor\n    *\n    * @access    public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->load->helper('log');\n        // log the attempt\n        $log = new stdClass();\n        $log->status = 'start';\n        $log->function = strtolower(__METHOD__);\n        stdlog($log);\n    }\n\n    /**\n    * Index that is unused\n    *\n    * @access public\n    * @return NULL\n    */\n    public function index()\n    {\n        return;\n    }\n\n    /**\n    * Process the supplied data and return a padded version string\n    *\n    * @access public\n    * @return JSON\n    */\n    public function version_padded()\n    {\n        $json = new stdClass();\n        $json->version = $this->uri->segment(3, '');\n        if (isset($_POST['version'])) {\n            $json->version = $_POST['version'];\n        }\n        $this->load->helper('software_version');\n        $json->version_padded = version_padded($json->version);\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function timestamp()\n    {\n        $json = new stdClass();\n        $this->load->helper('url');\n        $this->load->helper('input');\n        $unix_timestamp = $this->uri->segment(3, 0);\n        $json->datetime = from_unix_timestamp($unix_timestamp);\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function audit_my_pc()\n    {\n        $this->load->model('m_configuration');\n        $this->m_configuration->load();\n\n        $this->load->helper('url');\n        $client = $this->uri->segment(3, 0);\n        $filename = 'audit_windows.vbs';\n\n        if ($client == 'aix') {\n            $filename = 'audit_aix.sh';\n\n        } elseif ($client == 'esxi') {\n            $filename = 'audit_esxi.sh';\n\n        } elseif ($client == 'hpux') {\n            $filename = 'audit_hpux.sh';\n\n        } elseif ($client == 'linux') {\n            $filename = 'audit_linux.sh';\n\n        } elseif ($client == 'osx') {\n            $filename = 'audit_osx.sh';\n\n        } elseif ($client == 'solaris') {\n            $filename = 'audit_solaris.sh';\n\n        } elseif ($client == 'windows') {\n            $filename = 'audit_windows.vbs';\n        }\n\n        $sql = \"SELECT `id` AS `id` FROM `scripts` WHERE `name` = '$filename' ORDER BY id LIMIT 1\";\n        $query = $this->db->query($sql);\n\n        foreach($query->result_array() as $row) {\n            $id = $row['id'];\n        }\n\n        if (!empty($id)) {\n            $this->load->model('m_scripts');\n            $file = $this->m_scripts->download($id);\n        }\n\n        if (!empty($file)) {\n            // Set headers\n            header('Cache-Control: public');\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename='.$filename);\n            header('Content-Type: text/plain');\n            header('Content-Transfer-Encoding: binary');\n            // echo our file contents\n            echo $file;\n        } else {\n            # throw an error for invalid type or script entry not in DB\n        }\n    }\n\n    public function dictionary()\n    {\n        $this->load->model('m_configuration');\n        $this->m_configuration->load();\n\n        $this->load->helper('url');\n        $table = $this->uri->segment(3, 0);\n\n        $this->temp_dictionary = new stdClass();\n        $this->temp_dictionary->link = 'For more detailed information, check the Open-AudIT <a href=\"https://community.opmantek.com/display/OA/$collection\">Knowledge Base</a>.';\n        $this->temp_dictionary->purchase_link = '<strong>To upgrade to an Enterprise License, click <a href=\"#\" id=\"buy_more_licenses\" data-toggle=\"modal\" data-target=\"#myModalLicense\">HERE</a>.</strong>';\n        $this->temp_dictionary->id = 'The internal identifier column in the database (read only).';\n        $this->temp_dictionary->name = 'The name given to this item. Ideally it should be unique.';\n        $this->temp_dictionary->org_id = 'The Organisation that owns this item. Links to <code>orgs.id</code>.';\n        $this->temp_dictionary->description = 'Your description of this item.';\n        $this->temp_dictionary->options = 'A JSON object containing collection specific options.';\n        $this->temp_dictionary->edited_by = 'The name of the user who last changed or added this item (read only).';\n        $this->temp_dictionary->edited_date = 'The date this item was changed or added (read only). NOTE - This is the timestamp from the server.';\n        $this->temp_dictionary->system_id = 'The id of the linked device. Links to <code>system.id</code>';\n\n        $collections = array('agents', 'applications', 'attributes', 'baselines', 'baselines_policies', 'buildings', 'clouds', 'clusters', 'collectors', 'configuration', 'connections', 'credentials', 'dashboards', 'devices', 'discoveries', 'fields', 'files', 'floors', 'groups', 'integrations', 'ldap_servers', 'licenses', 'locations', 'networks', 'orgs', 'queries', 'racks', 'rack_devices', 'roles', 'rooms', 'rows', 'rules', 'scripts', 'summaries', 'tasks', 'users', 'widgets');\n        if (in_array($table, $collections)) {\n            $this->load->model('m_'.$table);\n            $dictionary = $this->{'m_'.$table}->dictionary();\n        } else {\n            include 'include_dictionary.php';\n        }\n        header('Content-Type: application/json');\n        echo json_encode($dictionary);\n    }\n\n    public function summary_columns()\n    {\n        $data = array('bios.current','bios.description','bios.manufacturer','bios.version','disk.current','disk.description','disk.interface_type','disk.manufacturer','disk.model','disk.model_family','disk.partition_count','disk.status','disk.version','ip.cidr','ip.current','ip.netmask','ip.network','ip.version','log.current','log.file_name','log.name','memory.current','memory.detail','memory.form_factor','memory.size','memory.speed','memory.type','module.class_text','module.current','module.description','monitor.aspect_ratio','monitor.current','monitor.description','monitor.manufacturer','monitor.model','monitor.size','motherboard.current','motherboard.manufacturer','motherboard.memory_slot_count','motherboard.model','motherboard.processor_slot_count','network.connection_status','network.current','network.dhcp_enabled','network.dhcp_server','network.dns_domain','network.dns_server','network.manufacturer','network.model','network.type','optical.current','optical.model','optical.mount_point','pagefile.current','pagefile.max_size','pagefile.name','pagefile_initial_size','partition.bootable','partition.current','partition.description','partition.format','partition.mount_point','partition.mount_type','partition.name','partition.type','print_queue.color','print_queue.current','print_queue.duplex','print_queue.location','print_queue.manufacturer','print_queue.model','print_queue.port_name','print_queue.shared','print_queue.status','print_queue.type','processor.architecture','processor.core_count','processor.current','processor.description','processor.logical_count','processor.manufacturer','processor.physical_count','processor.socket','route.current','route.destination','route.mask','route.next_hop','route.type','server.current','server.description','server.edition','server.full_name','server.name','server.status','server.type','server.version','server.version_string','server_item.current','server_item.type','service.current','service.executable','service.name','service.start_mode','service.state','service.user','share.current','share.name','share.path','software.current','software.install_source','software.name','software_key.current','software_key.edition','software_key.name','software_key.rel','software_key.string','sound.current','sound.manufacturer','sound.model','system.class','system.contact_name','system.environment','system.form_factor','system.function','system.icon','system.invoice_id','system.lease_expiry_date','system.location_id','system.location_latitude','system.location_level','system.location_longitude','system.location_rack','system.location_rack_position','system.location_rack_size','system.location_room','system.location_suite','system.manufacturer','system.memory_count','system.model','system.oae_manage','system.org_id','system.os_bit','system.os_family','system.os_group','system.os_installation_date','system.os_name','system.os_version','system.owner','system.patch_panel','system.printer_color','system.printer_duplex','system.printer_port_name','system.printer_shared','system.printer_shared_name','system.processor_count','system.purchase_amount','system.purchase_cost_center','system.purchase_date','system.purchase_invoice','system.purchase_order_number','system.purchase_service_contract_number','system.purchase_vendor','system.service_network','system.service_number','system.service_plan','system.service_provider','system.service_type','system.snmp_oid','system.status','system.sysContact','system.sysDescr','system.sysLocation','system.sysObjectID','system.type','system.wall_port','system.warranty_duration','system.warranty_expires','system.warranty_type','user.current','user.domain','user.password_changeable','user.password_required','user.status','user.type','user_group.current','user_group.name','video.current','video.manufacturer','video.model','video.size','vm.current','vm.cpu_count','vm.memory_count','vm.status','windows.active_directory_ou','windows.boot_device','windows.build_number','windows.client_site_name','windows.country_code','windows.current','windows.domain_controller_address','windows.domain_controller_name','windows.domain_role','windows.domain_short','windows.id_number','windows.install_directory','windows.language','windows.organisation','windows.part_of_domain','windows.registered_user','windows.service_pack','windows.time_caption','windows.time_daylight','windows.version','windows.workgroup');\n        $json = new stdClass();\n        $json->data = $data;\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function summary_tables()\n    {\n        $data = array('bios','disk','dns','ip','log','memory','module','monitor','motherboard','netstat','network','nmap','optical','pagefile','partition','print_queue','processor','route','san','scsi','server','server_item','service','share','software','software_key','sound','system','task','user','user_group','variable','video','vm','warranty','windows');\n        $json = new stdClass();\n        $json->data = $data;\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n\n    // public function check_db()\n    // {\n    //     $this->load->model('m_configuration');\n    //     $this->m_configuration->load();\n    //     $json = new stdClass();\n    //     $json->file_version = $this->config->config['web_internal_version'];\n    //     $json->db_version = $this->config->config['internal_version'];\n    //     $json->db_upgrade = false;\n    //     if ($this->config->config['internal_version'] < $this->config->config['web_internal_version']) {\n    //         $json->db_upgrade = true;\n    //     }\n    //     header('Content-Type: application/json');\n    //     echo json_encode($json);\n    // }\n\n\n\n    public function google()\n    {\n        $response = new stdClass();\n        $credentials = @$this->input->post('credentials');\n        if (empty($credentials)) {\n            $response->errors = array();\n            $error = new stdClass();\n            $error->code = 400;\n            $error->detail = \"A request was sent to the Google API, but no credentials were in the POST.\";\n            $error->status = \"HTTP/1.1 400 Bad Request\";\n            $error->title = \"No credentials supplied to util/google.\";\n            $response->errors[] = $error;\n            print_r(json_encode($response));\n            return;\n        }\n        set_include_path('/usr/local/open-audit/code_igniter/application/third_party/google-api-php-client-2.2.3/vendor');\n        require_once \"autoload.php\";\n        $client = new Google_Client();\n        $client->setAuthConfig($credentials);\n        $scope = array(\"https://www.googleapis.com/auth/cloud-platform\",\"https://www.googleapis.com/auth/cloud-platform.read-only\",\"https://www.googleapis.com/auth/cloudplatformprojects\",\"https://www.googleapis.com/auth/cloudplatformprojects.readonly\");\n        $client->addScope($scope);\n        $httpClient = $client->authorize();\n        $response = $httpClient->get('https://cloudresourcemanager.googleapis.com/v1/projects');\n\n        $projects = array();\n        if ($response->getBody()) {\n            $temp = json_decode($response->getBody());\n            $projects = $temp->projects;\n        }\n\n        foreach ($projects as &$project) {\n            $project->instances = array();\n            $project->networks = array();\n            $project->projects = array();\n            $project->zones = array();\n        }\n\n        if (!empty($projects)) {\n            # Projects\n            foreach ($projects as &$project) {\n                $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId;\n                $response = $httpClient->get($url);\n                if ($response->getBody()) {\n                    $temp = json_decode($response->getBody());\n                    $item = new stdClass();\n                    foreach ($temp as $key => $value) {\n                        $item->{$key} = $value;\n                    }\n                    unset($item->commonInstanceMetadata);\n                    unset($item->quotas);\n                    $project->projects[] = $item;\n                }\n            }\n\n            # Zones\n            foreach ($projects as &$project) {\n                unset($response);\n                $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/zones';\n                $response = $httpClient->get($url);\n                if ($response->getBody()) {\n                    $temp = json_decode($response->getBody());\n                    foreach ($temp->items as $zone) {\n                        $item = new stdClass();\n                        foreach ($zone as $key => $value) {\n                            $item->{$key} = $value;\n                        }\n                        $temp = explode('/', $zone->region);\n                        $item->region = end($temp);\n                        $item->notes = implode(', ', $zone->availableCpuPlatforms);\n                        $project->zones[] = $item;\n                    }\n                }\n            }\n\n            # Instances\n            foreach ($projects as &$project) {\n                foreach ($project->zones as $zone) {\n                    unset($response);\n                    $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/zones/' . $zone->name . '/instances';\n                    $response = $httpClient->get($url);\n                    if ($response->getBody()) {\n                        $instances = json_decode($response->getBody());\n                        if (!empty($instances->items)) {\n                            foreach ($instances->items as $each_instance) {\n                                $item = new stdClass();\n                                foreach ($each_instance as $key => $value) {\n                                    $item->{$key} = $value;\n                                }\n                                $temp = explode('/', $each_instance->machineType);\n                                $item->instance_type = end($temp);\n                                $item->location_name = $zone->name;\n                                if (!empty($item->networkInterfaces)) {\n                                    foreach ($item->networkInterfaces as $interface) {\n                                        if (!empty($interface->accessConfigs[0])) {\n                                            $item->ip = $interface->accessConfigs[0]->natIP;\n                                        } else {\n                                            $item->ip = $interface->networkIP;\n                                        }\n                                    }\n                                }\n                                $project->instances[] = $item;\n                            }\n                        }\n                    }\n                }\n            }\n\n            # Only keep zones with instances\n            foreach ($projects as &$project) {\n                $zones = array();\n                foreach ($project->instances as $instance) {\n                    $zones[] = $instance->location_name;\n                }\n                foreach ($project->zones as $key => $zone) {\n                    if (!in_array($zone->name, $zones)) {\n                        unset($project->zones[$key]);\n                    }\n                }\n                $project->zones = array_values($project->zones);\n            }\n\n            # Networks\n            foreach ($projects as &$project) {\n                foreach ($project->zones as $zone) {\n                    unset($response);\n                    $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/regions/' . $zone->region . '/subnetworks';\n                    $response = $httpClient->get($url);\n                    if ($response->getBody()) {\n                        $temp = json_decode($response->getBody());\n                        if (!empty($temp->items)) {\n                            foreach ($temp->items as $zone) {\n                                $item = new stdClass();\n                                foreach ($zone as $key => $value) {\n                                    $item->{$key} = $value;\n                                }\n                                $project->networks[] = $item;\n                                unset($item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        $response->data = array();\n        $response->data[] = $projects;\n        print_r(json_encode($response));\n    }\n\n    public function queue()\n    {\n        $pid = getmypid();\n        $this->load->model('m_audit_log');\n        $this->load->model('m_collection');\n        $this->load->model('m_configuration');\n        $this->load->model('m_credentials');\n        $this->load->model('m_device');\n        $this->load->model('m_devices');\n        $this->load->model('m_devices_components');\n        $this->load->model('m_discoveries');\n        $this->load->model('m_networks');\n        $this->load->model('m_orgs');\n        $this->load->model('m_rules');\n        $this->load->model('m_scripts');\n\n        $this->load->helper('audit');\n        $this->load->helper('discoveries');\n        $this->load->helper('mac');\n        $this->load->helper('mac_model');\n        $this->load->helper('network');\n        $this->load->helper('security');\n        $this->load->helper('snmp');\n        $this->load->helper('snmp_model');\n        $this->load->helper('snmp_oid');\n        $this->load->helper('ssh');\n        $this->load->helper('wmi');\n\n        $this->m_configuration->load();\n\n        // queue count is the number of registered processes\n        // queue limit is set by the user\n        // check it config['queue_count'] > config['queue_limit']\n        if (intval($this->config->config['queue_count']) > intval($this->config->config['queue_limit'])) {\n            // echo \"QueueCount: \" . intval($this->config->config['queue_count']) . \" Limit: \" . intval($this->config->config['queue_limit']);\n            exit;\n        }\n        // Increase the queue count in the config table\n        $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = `value` + 1 WHERE `name` = 'queue_count'\";\n        $this->db->query($sql);\n        // POP an item off the queue\n        $this->load->model('m_queue');\n        while ( true ) {\n            $item = $this->m_queue->pop();\n            if ( ! empty($item->details) && is_string($item->details)) {\n                $details = @json_decode($item->details);\n            }\n\n\n            // If we don't get an item, there's nothing left to do so exit.\n            if ($item === false) {\n                // Remove the queue count\n                $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = '0' WHERE `name` = 'queue_count'\";\n                $this->db->query($sql);\n                break;\n            }\n            if ($details === false) {\n                // Remove the queue count\n                $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = '0' WHERE `name` = 'queue_count'\";\n                $this->db->query($sql);\n                break;\n            }\n\n            // Spawn another process\n            if (php_uname('s') !== 'Windows NT') {\n                $instance = '';\n                if ($this->db->database !== 'openaudit') {\n                    $instance = '/' . $this->db->database;\n                }\n                $command = $this->config->config['base_path'] . '/other/execute.sh url=http://localhost' . $instance . '/open-audit/index.php/util/queue method=get > /dev/null 2>&1 &';\n                if (php_uname('s') === 'Linux') {\n                    $command = 'nohup ' . $command;\n                }\n                @exec($command);\n            } else {\n                $filepath = $this->config->config['base_path'] . '\\\\other';\n                $command = \"%comspec% /c start /b cscript //nologo {$filepath}\\\\execute.vbs url=http://localhost/open-audit/index.php/util/queue method=post\";\n                pclose(popen($command, 'r'));\n            }\n\n            if ($item->type === 'subnet') {\n                discover_subnet($details);\n            }\n\n            if ($item->type === 'active directory') {\n                discover_ad($details);\n            }\n\n            if ($item->type === 'ip_scan') {\n                $result = ip_scan($details);\n                $result = json_encode($result);\n                if ( ! empty($result)) {\n                    $queue_item = new stdClass();\n                    $queue_item->ip = $details->ip;\n                    $queue_item->discovery_id = $details->discovery_id;\n                    $queue_item->details = $result;\n                    $this->m_queue->create('ip_audit', $queue_item);\n                }\n            }\n\n            if ($item->type === 'ip_audit') {\n                $result = ip_audit($details);\n            }\n        }\n    }\n}\n// End of file util.php\n// Location: ./controllers/util.php\n"], "fixing_code": ["<?php\n/**\n#  Copyright 2003-2015 Opmantek Limited (www.opmantek.com)\n#\n#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM\n#\n#  This file is part of Open-AudIT.\n#\n#  Open-AudIT is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU Affero General Public License as published\n#  by the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  Open-AudIT is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU Affero General Public License for more details.\n#\n#  You should have received a copy of the GNU Affero General Public License\n#  along with Open-AudIT (most likely in a file named LICENSE).\n#  If not, see <http://www.gnu.org/licenses/>\n#\n#  For further information on Open-AudIT or for a license other than AGPL please see\n#  www.opmantek.com or email contact@opmantek.com\n#\n# *****************************************************************************\n*\n* @category  Controller\n* @package   Open-AudIT\n* @author    Mark Unwin <marku@opmantek.com>\n* @copyright 2014 Opmantek\n* @license   http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @version   GIT: Open-AudIT_3.5.1\n* @link      http://www.open-audit.org\n*/\n\n/**\n* Base Object Util\n*\n* @access   public\n* @category Object\n* @package  Open-AudIT\n* @author   Mark Unwin <marku@opmantek.com>\n* @license  http://www.gnu.org/licenses/agpl-3.0.html aGPL v3\n* @link     http://www.open-audit.org\n */\nclass Util extends CI_Controller\n{\n    /**\n    * Constructor\n    *\n    * @access    public\n    */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->load->helper('log');\n        // log the attempt\n        $log = new stdClass();\n        $log->status = 'start';\n        $log->function = strtolower(__METHOD__);\n        stdlog($log);\n    }\n\n    /**\n    * Index that is unused\n    *\n    * @access public\n    * @return NULL\n    */\n    public function index()\n    {\n        return;\n    }\n\n    public function subnet_size()\n    {\n        $command = \"nmap -n -sL \" . $_POST['subnet'];\n        exec($command, $output, $return_var);\n        $count = 0;\n        if ($return_var === 0) {\n            foreach ($output as $line) {\n                if (stripos($line, 'Nmap scan report for') === 0) {\n                    $count = $count + 1;\n                }\n            }\n        }\n        echo $count;\n        return;\n    }\n\n    /**\n    * Process the supplied data and return a padded version string\n    *\n    * @access public\n    * @return JSON\n    */\n    public function version_padded()\n    {\n        $json = new stdClass();\n        $json->version = $this->uri->segment(3, '');\n        if (isset($_POST['version'])) {\n            $json->version = $_POST['version'];\n        }\n        $this->load->helper('software_version');\n        $json->version_padded = version_padded($json->version);\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function timestamp()\n    {\n        $json = new stdClass();\n        $this->load->helper('url');\n        $this->load->helper('input');\n        $unix_timestamp = $this->uri->segment(3, 0);\n        $json->datetime = from_unix_timestamp($unix_timestamp);\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function audit_my_pc()\n    {\n        $this->load->model('m_configuration');\n        $this->m_configuration->load();\n\n        $this->load->helper('url');\n        $client = $this->uri->segment(3, 0);\n        $filename = 'audit_windows.vbs';\n\n        if ($client == 'aix') {\n            $filename = 'audit_aix.sh';\n\n        } elseif ($client == 'esxi') {\n            $filename = 'audit_esxi.sh';\n\n        } elseif ($client == 'hpux') {\n            $filename = 'audit_hpux.sh';\n\n        } elseif ($client == 'linux') {\n            $filename = 'audit_linux.sh';\n\n        } elseif ($client == 'osx') {\n            $filename = 'audit_osx.sh';\n\n        } elseif ($client == 'solaris') {\n            $filename = 'audit_solaris.sh';\n\n        } elseif ($client == 'windows') {\n            $filename = 'audit_windows.vbs';\n        }\n\n        $sql = \"SELECT `id` AS `id` FROM `scripts` WHERE `name` = '$filename' ORDER BY id LIMIT 1\";\n        $query = $this->db->query($sql);\n\n        foreach($query->result_array() as $row) {\n            $id = $row['id'];\n        }\n\n        if (!empty($id)) {\n            $this->load->model('m_scripts');\n            $file = $this->m_scripts->download($id);\n        }\n\n        if (!empty($file)) {\n            // Set headers\n            header('Cache-Control: public');\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename='.$filename);\n            header('Content-Type: text/plain');\n            header('Content-Transfer-Encoding: binary');\n            // echo our file contents\n            echo $file;\n        } else {\n            # throw an error for invalid type or script entry not in DB\n        }\n    }\n\n    public function dictionary()\n    {\n        $this->load->model('m_configuration');\n        $this->m_configuration->load();\n\n        $this->load->helper('url');\n        $table = $this->uri->segment(3, 0);\n\n        $this->temp_dictionary = new stdClass();\n        $this->temp_dictionary->link = 'For more detailed information, check the Open-AudIT <a href=\"https://community.opmantek.com/display/OA/$collection\">Knowledge Base</a>.';\n        $this->temp_dictionary->purchase_link = '<strong>To upgrade to an Enterprise License, click <a href=\"#\" id=\"buy_more_licenses\" data-toggle=\"modal\" data-target=\"#myModalLicense\">HERE</a>.</strong>';\n        $this->temp_dictionary->id = 'The internal identifier column in the database (read only).';\n        $this->temp_dictionary->name = 'The name given to this item. Ideally it should be unique.';\n        $this->temp_dictionary->org_id = 'The Organisation that owns this item. Links to <code>orgs.id</code>.';\n        $this->temp_dictionary->description = 'Your description of this item.';\n        $this->temp_dictionary->options = 'A JSON object containing collection specific options.';\n        $this->temp_dictionary->edited_by = 'The name of the user who last changed or added this item (read only).';\n        $this->temp_dictionary->edited_date = 'The date this item was changed or added (read only). NOTE - This is the timestamp from the server.';\n        $this->temp_dictionary->system_id = 'The id of the linked device. Links to <code>system.id</code>';\n\n        $collections = array('agents', 'applications', 'attributes', 'baselines', 'baselines_policies', 'buildings', 'clouds', 'clusters', 'collectors', 'configuration', 'connections', 'credentials', 'dashboards', 'devices', 'discoveries', 'fields', 'files', 'floors', 'groups', 'integrations', 'ldap_servers', 'licenses', 'locations', 'networks', 'orgs', 'queries', 'racks', 'rack_devices', 'roles', 'rooms', 'rows', 'rules', 'scripts', 'summaries', 'tasks', 'users', 'widgets');\n        if (in_array($table, $collections)) {\n            $this->load->model('m_'.$table);\n            $dictionary = $this->{'m_'.$table}->dictionary();\n        } else {\n            include 'include_dictionary.php';\n        }\n        header('Content-Type: application/json');\n        echo json_encode($dictionary);\n    }\n\n    public function summary_columns()\n    {\n        $data = array('bios.current','bios.description','bios.manufacturer','bios.version','disk.current','disk.description','disk.interface_type','disk.manufacturer','disk.model','disk.model_family','disk.partition_count','disk.status','disk.version','ip.cidr','ip.current','ip.netmask','ip.network','ip.version','log.current','log.file_name','log.name','memory.current','memory.detail','memory.form_factor','memory.size','memory.speed','memory.type','module.class_text','module.current','module.description','monitor.aspect_ratio','monitor.current','monitor.description','monitor.manufacturer','monitor.model','monitor.size','motherboard.current','motherboard.manufacturer','motherboard.memory_slot_count','motherboard.model','motherboard.processor_slot_count','network.connection_status','network.current','network.dhcp_enabled','network.dhcp_server','network.dns_domain','network.dns_server','network.manufacturer','network.model','network.type','optical.current','optical.model','optical.mount_point','pagefile.current','pagefile.max_size','pagefile.name','pagefile_initial_size','partition.bootable','partition.current','partition.description','partition.format','partition.mount_point','partition.mount_type','partition.name','partition.type','print_queue.color','print_queue.current','print_queue.duplex','print_queue.location','print_queue.manufacturer','print_queue.model','print_queue.port_name','print_queue.shared','print_queue.status','print_queue.type','processor.architecture','processor.core_count','processor.current','processor.description','processor.logical_count','processor.manufacturer','processor.physical_count','processor.socket','route.current','route.destination','route.mask','route.next_hop','route.type','server.current','server.description','server.edition','server.full_name','server.name','server.status','server.type','server.version','server.version_string','server_item.current','server_item.type','service.current','service.executable','service.name','service.start_mode','service.state','service.user','share.current','share.name','share.path','software.current','software.install_source','software.name','software_key.current','software_key.edition','software_key.name','software_key.rel','software_key.string','sound.current','sound.manufacturer','sound.model','system.class','system.contact_name','system.environment','system.form_factor','system.function','system.icon','system.invoice_id','system.lease_expiry_date','system.location_id','system.location_latitude','system.location_level','system.location_longitude','system.location_rack','system.location_rack_position','system.location_rack_size','system.location_room','system.location_suite','system.manufacturer','system.memory_count','system.model','system.oae_manage','system.org_id','system.os_bit','system.os_family','system.os_group','system.os_installation_date','system.os_name','system.os_version','system.owner','system.patch_panel','system.printer_color','system.printer_duplex','system.printer_port_name','system.printer_shared','system.printer_shared_name','system.processor_count','system.purchase_amount','system.purchase_cost_center','system.purchase_date','system.purchase_invoice','system.purchase_order_number','system.purchase_service_contract_number','system.purchase_vendor','system.service_network','system.service_number','system.service_plan','system.service_provider','system.service_type','system.snmp_oid','system.status','system.sysContact','system.sysDescr','system.sysLocation','system.sysObjectID','system.type','system.wall_port','system.warranty_duration','system.warranty_expires','system.warranty_type','user.current','user.domain','user.password_changeable','user.password_required','user.status','user.type','user_group.current','user_group.name','video.current','video.manufacturer','video.model','video.size','vm.current','vm.cpu_count','vm.memory_count','vm.status','windows.active_directory_ou','windows.boot_device','windows.build_number','windows.client_site_name','windows.country_code','windows.current','windows.domain_controller_address','windows.domain_controller_name','windows.domain_role','windows.domain_short','windows.id_number','windows.install_directory','windows.language','windows.organisation','windows.part_of_domain','windows.registered_user','windows.service_pack','windows.time_caption','windows.time_daylight','windows.version','windows.workgroup');\n        $json = new stdClass();\n        $json->data = $data;\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n    public function summary_tables()\n    {\n        $data = array('bios','disk','dns','ip','log','memory','module','monitor','motherboard','netstat','network','nmap','optical','pagefile','partition','print_queue','processor','route','san','scsi','server','server_item','service','share','software','software_key','sound','system','task','user','user_group','variable','video','vm','warranty','windows');\n        $json = new stdClass();\n        $json->data = $data;\n        header('Content-Type: application/json');\n        echo json_encode($json);\n    }\n\n\n    // public function check_db()\n    // {\n    //     $this->load->model('m_configuration');\n    //     $this->m_configuration->load();\n    //     $json = new stdClass();\n    //     $json->file_version = $this->config->config['web_internal_version'];\n    //     $json->db_version = $this->config->config['internal_version'];\n    //     $json->db_upgrade = false;\n    //     if ($this->config->config['internal_version'] < $this->config->config['web_internal_version']) {\n    //         $json->db_upgrade = true;\n    //     }\n    //     header('Content-Type: application/json');\n    //     echo json_encode($json);\n    // }\n\n\n\n    public function google()\n    {\n        $response = new stdClass();\n        $credentials = @$this->input->post('credentials');\n        if (empty($credentials)) {\n            $response->errors = array();\n            $error = new stdClass();\n            $error->code = 400;\n            $error->detail = \"A request was sent to the Google API, but no credentials were in the POST.\";\n            $error->status = \"HTTP/1.1 400 Bad Request\";\n            $error->title = \"No credentials supplied to util/google.\";\n            $response->errors[] = $error;\n            print_r(json_encode($response));\n            return;\n        }\n        set_include_path('/usr/local/open-audit/code_igniter/application/third_party/google-api-php-client-2.2.3/vendor');\n        require_once \"autoload.php\";\n        $client = new Google_Client();\n        $client->setAuthConfig($credentials);\n        $scope = array(\"https://www.googleapis.com/auth/cloud-platform\",\"https://www.googleapis.com/auth/cloud-platform.read-only\",\"https://www.googleapis.com/auth/cloudplatformprojects\",\"https://www.googleapis.com/auth/cloudplatformprojects.readonly\");\n        $client->addScope($scope);\n        $httpClient = $client->authorize();\n        $response = $httpClient->get('https://cloudresourcemanager.googleapis.com/v1/projects');\n\n        $projects = array();\n        if ($response->getBody()) {\n            $temp = json_decode($response->getBody());\n            $projects = $temp->projects;\n        }\n\n        foreach ($projects as &$project) {\n            $project->instances = array();\n            $project->networks = array();\n            $project->projects = array();\n            $project->zones = array();\n        }\n\n        if (!empty($projects)) {\n            # Projects\n            foreach ($projects as &$project) {\n                $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId;\n                $response = $httpClient->get($url);\n                if ($response->getBody()) {\n                    $temp = json_decode($response->getBody());\n                    $item = new stdClass();\n                    foreach ($temp as $key => $value) {\n                        $item->{$key} = $value;\n                    }\n                    unset($item->commonInstanceMetadata);\n                    unset($item->quotas);\n                    $project->projects[] = $item;\n                }\n            }\n\n            # Zones\n            foreach ($projects as &$project) {\n                unset($response);\n                $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/zones';\n                $response = $httpClient->get($url);\n                if ($response->getBody()) {\n                    $temp = json_decode($response->getBody());\n                    foreach ($temp->items as $zone) {\n                        $item = new stdClass();\n                        foreach ($zone as $key => $value) {\n                            $item->{$key} = $value;\n                        }\n                        $temp = explode('/', $zone->region);\n                        $item->region = end($temp);\n                        $item->notes = implode(', ', $zone->availableCpuPlatforms);\n                        $project->zones[] = $item;\n                    }\n                }\n            }\n\n            # Instances\n            foreach ($projects as &$project) {\n                foreach ($project->zones as $zone) {\n                    unset($response);\n                    $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/zones/' . $zone->name . '/instances';\n                    $response = $httpClient->get($url);\n                    if ($response->getBody()) {\n                        $instances = json_decode($response->getBody());\n                        if (!empty($instances->items)) {\n                            foreach ($instances->items as $each_instance) {\n                                $item = new stdClass();\n                                foreach ($each_instance as $key => $value) {\n                                    $item->{$key} = $value;\n                                }\n                                $temp = explode('/', $each_instance->machineType);\n                                $item->instance_type = end($temp);\n                                $item->location_name = $zone->name;\n                                if (!empty($item->networkInterfaces)) {\n                                    foreach ($item->networkInterfaces as $interface) {\n                                        if (!empty($interface->accessConfigs[0])) {\n                                            $item->ip = $interface->accessConfigs[0]->natIP;\n                                        } else {\n                                            $item->ip = $interface->networkIP;\n                                        }\n                                    }\n                                }\n                                $project->instances[] = $item;\n                            }\n                        }\n                    }\n                }\n            }\n\n            # Only keep zones with instances\n            foreach ($projects as &$project) {\n                $zones = array();\n                foreach ($project->instances as $instance) {\n                    $zones[] = $instance->location_name;\n                }\n                foreach ($project->zones as $key => $zone) {\n                    if (!in_array($zone->name, $zones)) {\n                        unset($project->zones[$key]);\n                    }\n                }\n                $project->zones = array_values($project->zones);\n            }\n\n            # Networks\n            foreach ($projects as &$project) {\n                foreach ($project->zones as $zone) {\n                    unset($response);\n                    $url = 'https://www.googleapis.com/compute/v1/projects/' . $project->projectId . '/regions/' . $zone->region . '/subnetworks';\n                    $response = $httpClient->get($url);\n                    if ($response->getBody()) {\n                        $temp = json_decode($response->getBody());\n                        if (!empty($temp->items)) {\n                            foreach ($temp->items as $zone) {\n                                $item = new stdClass();\n                                foreach ($zone as $key => $value) {\n                                    $item->{$key} = $value;\n                                }\n                                $project->networks[] = $item;\n                                unset($item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        header('Content-Type: application/json');\n        header(\"Cache-Control: no-cache, no-store, must-revalidate\");\n        header(\"Pragma: no-cache\");\n        header(\"Expires: 0\");\n        $response->data = array();\n        $response->data[] = $projects;\n        print_r(json_encode($response));\n    }\n\n    public function queue()\n    {\n        $pid = getmypid();\n        $this->load->model('m_audit_log');\n        $this->load->model('m_collection');\n        $this->load->model('m_configuration');\n        $this->load->model('m_credentials');\n        $this->load->model('m_device');\n        $this->load->model('m_devices');\n        $this->load->model('m_devices_components');\n        $this->load->model('m_discoveries');\n        $this->load->model('m_networks');\n        $this->load->model('m_orgs');\n        $this->load->model('m_rules');\n        $this->load->model('m_scripts');\n\n        $this->load->helper('audit');\n        $this->load->helper('discoveries');\n        $this->load->helper('mac');\n        $this->load->helper('mac_model');\n        $this->load->helper('network');\n        $this->load->helper('security');\n        $this->load->helper('snmp');\n        $this->load->helper('snmp_model');\n        $this->load->helper('snmp_oid');\n        $this->load->helper('ssh');\n        $this->load->helper('wmi');\n\n        $this->m_configuration->load();\n\n        // queue count is the number of registered processes\n        // queue limit is set by the user\n        // check it config['queue_count'] > config['queue_limit']\n        if (intval($this->config->config['queue_count']) > intval($this->config->config['queue_limit'])) {\n            // echo \"QueueCount: \" . intval($this->config->config['queue_count']) . \" Limit: \" . intval($this->config->config['queue_limit']);\n            exit;\n        }\n        // Increase the queue count in the config table\n        $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = `value` + 1 WHERE `name` = 'queue_count'\";\n        $this->db->query($sql);\n        // POP an item off the queue\n        $this->load->model('m_queue');\n        while ( true ) {\n            $item = $this->m_queue->pop();\n            if ( ! empty($item->details) && is_string($item->details)) {\n                $details = @json_decode($item->details);\n            }\n\n\n            // If we don't get an item, there's nothing left to do so exit.\n            if ($item === false) {\n                // Remove the queue count\n                $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = '0' WHERE `name` = 'queue_count'\";\n                $this->db->query($sql);\n                break;\n            }\n            if ($details === false) {\n                // Remove the queue count\n                $sql = '/* util::queue $pid */ ' . \"UPDATE `configuration` SET `value` = '0' WHERE `name` = 'queue_count'\";\n                $this->db->query($sql);\n                break;\n            }\n\n            // Spawn another process\n            if (php_uname('s') !== 'Windows NT') {\n                $instance = '';\n                if ($this->db->database !== 'openaudit') {\n                    $instance = '/' . $this->db->database;\n                }\n                $command = $this->config->config['base_path'] . '/other/execute.sh url=http://localhost' . $instance . '/open-audit/index.php/util/queue method=get > /dev/null 2>&1 &';\n                if (php_uname('s') === 'Linux') {\n                    $command = 'nohup ' . $command;\n                }\n                @exec($command);\n            } else {\n                $filepath = $this->config->config['base_path'] . '\\\\other';\n                $command = \"%comspec% /c start /b cscript //nologo {$filepath}\\\\execute.vbs url=http://localhost/open-audit/index.php/util/queue method=post\";\n                pclose(popen($command, 'r'));\n            }\n\n            if ($item->type === 'subnet') {\n                discover_subnet($details);\n            }\n\n            if ($item->type === 'active directory') {\n                discover_ad($details);\n            }\n\n            if ($item->type === 'ip_scan') {\n                $result = ip_scan($details);\n                $result = json_encode($result);\n                if ( ! empty($result)) {\n                    $queue_item = new stdClass();\n                    $queue_item->ip = $details->ip;\n                    $queue_item->discovery_id = $details->discovery_id;\n                    $queue_item->details = $result;\n                    $this->m_queue->create('ip_audit', $queue_item);\n                }\n            }\n\n            if ($item->type === 'ip_audit') {\n                $result = ip_audit($details);\n            }\n        }\n    }\n}\n// End of file util.php\n// Location: ./controllers/util.php\n"], "filenames": ["code_igniter/application/controllers/util.php"], "buggy_code_start_loc": [72], "buggy_code_end_loc": [72], "fixing_code_start_loc": [73], "fixing_code_end_loc": [89], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in Opmantek Open-AudIT after 3.5.0. Without authentication, a vulnerability in code_igniter/application/controllers/util.php allows an attacker perform command execution without echoes.", "other": {"cve": {"id": "CVE-2021-40612", "sourceIdentifier": "cve@mitre.org", "published": "2021-12-22T13:15:07.507", "lastModified": "2022-01-03T23:28:16.033", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Opmantek Open-AudIT after 3.5.0. Without authentication, a vulnerability in code_igniter/application/controllers/util.php allows an attacker perform command execution without echoes."}, {"lang": "es", "value": "Se ha detectado un problema en Opmantek Open-AudIT despu\u00e9s de la versi\u00f3n 3.5.0. Sin autenticaci\u00f3n, una vulnerabilidad en el archivo code_igniter/application/controllers/util.php permite a un atacante llevar a cabo una ejecuci\u00f3n de comandos sin eco"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opmantek:open-audit:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.5.0", "versionEndExcluding": "4.3.0", "matchCriteriaId": "13674AF5-6BAB-40FE-BB38-83E093E30E0A"}]}]}], "references": [{"url": "https://community.opmantek.com/pages/viewpage.action?pageId=65504438", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/Opmantek/open-audit/commit/c7595cbb092e410a487f03c0eb536cf19e538860", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Opmantek/open-audit/commit/c7595cbb092e410a487f03c0eb536cf19e538860"}}