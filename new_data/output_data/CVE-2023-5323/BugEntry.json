{"buggy_code": ["<?php\n/* Copyright (C) 2002-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2003       Xavier Dutoit           <doli@sydesy.com>\n * Copyright (C) 2004-2021  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004       Sebastien Di Cintio     <sdicintio@ressource-toi.org>\n * Copyright (C) 2004       Benoit Mortier          <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2021  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2011-2014  Philippe Grand          <philippe.grand@atoo-net.com>\n * Copyright (C) 2008       Matteli\n * Copyright (C) 2011-2016  Juanjo Menent           <jmenent@2byte.es>\n * Copyright (C) 2012       Christophe Battarel     <christophe.battarel@altairis.fr>\n * Copyright (C) 2014-2015  Marcos Garc\u00eda           <marcosgdf@gmail.com>\n * Copyright (C) 2015       Rapha\u00ebl Doursenaud      <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2020       Demarest Maxime         <maxime@indelog.fr>\n * Copyright (C) 2020       Charlene Benke          <charlie@patas-monkey.com>\n * Copyright (C) 2021       Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n * Copyright (C) 2021       Alexandre Spangaro      <aspangaro@open-dsi.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/main.inc.php\n *\t\\ingroup\tcore\n *\t\\brief      File that defines environment for Dolibarr GUI pages only (file not required by scripts)\n */\n\n//@ini_set('memory_limit', '128M');\t// This may be useless if memory is hard limited by your PHP\n\n// For optional tuning. Enabled if environment variable MAIN_SHOW_TUNING_INFO is defined.\n$micro_start_time = 0;\nif (!empty($_SERVER['MAIN_SHOW_TUNING_INFO'])) {\n\tlist($usec, $sec) = explode(\" \", microtime());\n\t$micro_start_time = ((float) $usec + (float) $sec);\n\t// Add Xdebug code coverage\n\t//define('XDEBUGCOVERAGE',1);\n\tif (defined('XDEBUGCOVERAGE')) {\n\t\txdebug_start_code_coverage();\n\t}\n}\n\n\n/**\n * Return the real char for a numeric entities.\n * WARNING: This function is required by testSqlAndScriptInject() and the GETPOST 'restricthtml'. Regex calling must be similar.\n *\n * @param\tstring\t\t$matches\t\t\tString of numeric entity\n * @return\tstring\t\t\t\t\t\t\tNew value\n */\nfunction realCharForNumericEntities($matches)\n{\n\t$newstringnumentity = preg_replace('/;$/', '', $matches[1]);\n\t//print  ' $newstringnumentity='.$newstringnumentity;\n\n\tif (preg_match('/^x/i', $newstringnumentity)) {\n\t\t$newstringnumentity = hexdec(preg_replace('/^x/i', '', $newstringnumentity));\n\t}\n\n\t// The numeric value we don't want as entities because they encode ascii char, and why using html entities on ascii except for haking ?\n\tif (($newstringnumentity >= 65 && $newstringnumentity <= 90) || ($newstringnumentity >= 97 && $newstringnumentity <= 122)) {\n\t\treturn chr((int) $newstringnumentity);\n\t}\n\n\treturn '&#'.$matches[1]; // Value will be unchanged because regex was /&#(  )/\n}\n\n/**\n * Security: WAF layer for SQL Injection and XSS Injection (scripts) protection (Filters on GET, POST, PHP_SELF).\n * Warning: Such a protection can't be enough. It is not reliable as it will always be possible to bypass this. Good protection can\n * only be guaranted by escaping data during output.\n *\n * @param\t\tstring\t\t$val\t\tBrute value found into $_GET, $_POST or PHP_SELF\n * @param\t\tstring\t\t$type\t\t0=POST, 1=GET, 2=PHP_SELF, 3=GET without sql reserved keywords (the less tolerant test)\n * @return\t\tint\t\t\t\t\t\t>0 if there is an injection, 0 if none\n */\nfunction testSqlAndScriptInject($val, $type)\n{\n\t// Decode string first because a lot of things are obfuscated by encoding or multiple encoding.\n\t// So <svg o&#110;load='console.log(&quot;123&quot;)' become <svg onload='console.log(&quot;123&quot;)'\n\t// So \"&colon;&apos;\" become \":'\" (due to ENT_HTML5)\n\t// So \"&Tab;&NewLine;\" become \"\"\n\t// So \"&lpar;&rpar;\" become \"()\"\n\n\t// Loop to decode until no more things to decode.\n\t//print \"before decoding $val\\n\";\n\tdo {\n\t\t$oldval = $val;\n\t\t$val = html_entity_decode($val, ENT_QUOTES | ENT_HTML5);\t// Decode '&colon;', '&apos;', '&Tab;', '&NewLine', ...\n\t\t// Sometimes we have entities without the ; at end so html_entity_decode does not work but entities is still interpreted by browser.\n\t\t$val = preg_replace_callback('/&#(x?[0-9][0-9a-f]+;?)/i', function ($m) {\n\t\t\t// Decode '&#110;', ...\n\t\t\treturn realCharForNumericEntities($m); }, $val);\n\n\t\t// We clean html comments because some hacks try to obfuscate evil strings by inserting HTML comments. Example: on<!-- -->error=alert(1)\n\t\t$val = preg_replace('/<!--[^>]*-->/', '', $val);\n\t\t$val = preg_replace('/[\\r\\n\\t]/', '', $val);\n\t} while ($oldval != $val);\n\t//print \"type = \".$type.\" after decoding: \".$val.\"\\n\";\n\n\t$inj = 0;\n\n\t// We check string because some hacks try to obfuscate evil strings by inserting non printable chars. Example: 'java(ascci09)scr(ascii00)ipt' is processed like 'javascript' (whatever is place of evil ascii char)\n\t// We should use dol_string_nounprintableascii but function is not yet loaded/available\n\t// Example of valid UTF8 chars:\n\t// utf8=utf8mb3:    '\\x09', '\\x0A', '\\x0D', '\\x7E'\n\t// utf8=utf8mb3: \t'\\xE0\\xA0\\x80'\n\t// utf8mb4: \t\t'\\xF0\\x9D\\x84\\x9E'   (but this may be refused by the database insert if pagecode is utf8=utf8mb3)\n\t$newval = preg_replace('/[\\x00-\\x08\\x0B-\\x0C\\x0E-\\x1F\\x7F]/u', '', $val); // /u operator makes UTF8 valid characters being ignored so are not included into the replace\n\n\t// Note that $newval may also be completely empty '' when non valid UTF8 are found.\n\tif ($newval != $val) {\n\t\t// If $val has changed after removing non valid UTF8 chars, it means we have an evil string.\n\t\t$inj += 1;\n\t}\n\t//print 'type='.$type.'-val='.$val.'-newval='.$newval.\"-inj=\".$inj.\"\\n\";\n\n\t// For SQL Injection (only GET are used to scan for such injection strings)\n\tif ($type == 1 || $type == 3) {\n\t\t// Note the \\s+ is replaced into \\s* because some spaces may have been modified in previous loop\n\t\t$inj += preg_match('/delete\\s*from/i', $val);\n\t\t$inj += preg_match('/create\\s*table/i', $val);\n\t\t$inj += preg_match('/insert\\s*into/i', $val);\n\t\t$inj += preg_match('/select\\s*from/i', $val);\n\t\t$inj += preg_match('/into\\s*(outfile|dumpfile)/i', $val);\n\t\t$inj += preg_match('/user\\s*\\(/i', $val); // avoid to use function user() or mysql_user() that return current database login\n\t\t$inj += preg_match('/information_schema/i', $val); // avoid to use request that read information_schema database\n\t\t$inj += preg_match('/<svg/i', $val); // <svg can be allowed in POST\n\t\t$inj += preg_match('/update[^&].*set.+=/i', $val);\t// the [^&] test is to avoir error when request is like action=update&...set...\n\t\t$inj += preg_match('/union.+select/i', $val);\n\t}\n\tif ($type == 3) {\n\t\t// Note the \\s+ is replaced into \\s* because some spaces may have been modified in previous loop\n\t\t$inj += preg_match('/select|update|delete|truncate|replace|group\\s*by|concat|count|from|union/i', $val);\n\t}\n\tif ($type != 2) {\t// Not common key strings, so we can check them both on GET and POST\n\t\t$inj += preg_match('/updatexml\\(/i', $val);\n\t\t$inj += preg_match('/(\\.\\.%2f)+/i', $val);\n\t\t$inj += preg_match('/\\s@@/', $val);\n\t}\n\t// For XSS Injection done by closing textarea to execute content into a textarea field\n\t$inj += preg_match('/<\\/textarea/i', $val);\n\t// For XSS Injection done by adding javascript with script\n\t// This is all cases a browser consider text is javascript:\n\t// When it found '<script', 'javascript:', '<style', 'onload\\s=' on body tag, '=\"&' on a tag size with old browsers\n\t// All examples on page: http://ha.ckers.org/xss.html#XSScalc\n\t// More on https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\t$inj += preg_match('/<audio/i', $val);\n\t$inj += preg_match('/<embed/i', $val);\n\t$inj += preg_match('/<iframe/i', $val);\n\t$inj += preg_match('/<object/i', $val);\n\t$inj += preg_match('/<script/i', $val);\n\t$inj += preg_match('/Set\\.constructor/i', $val); // ECMA script 6\n\tif (!defined('NOSTYLECHECK')) {\n\t\t$inj += preg_match('/<style/i', $val);\n\t}\n\t$inj += preg_match('/base\\s+href/si', $val);\n\t$inj += preg_match('/=data:/si', $val);\n\t// List of dom events is on https://www.w3schools.com/jsref/dom_obj_event.asp and https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\n\t$inj += preg_match('/on(mouse|drag|key|load|touch|pointer|select|transition)([a-z]*)\\s*=/i', $val); // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>\n\t$inj += preg_match('/on(abort|afterprint|animation|auxclick|beforecopy|beforecut|beforeprint|beforeunload|blur|cancel|canplay|canplaythrough|change|click|close|contextmenu|cuechange|copy|cut)\\s*=/i', $val);\n\t$inj += preg_match('/on(dblclick|drop|durationchange|emptied|end|ended|error|focus|focusin|focusout|formdata|gotpointercapture|hashchange|input|invalid)\\s*=/i', $val);\n\t$inj += preg_match('/on(lostpointercapture|offline|online|pagehide|pageshow)\\s*=/i', $val);\n\t$inj += preg_match('/on(paste|pause|play|playing|progress|ratechange|reset|resize|scroll|search|seeked|seeking|show|stalled|start|submit|suspend)\\s*=/i', $val);\n\t$inj += preg_match('/on(timeupdate|toggle|unload|volumechange|waiting|wheel)\\s*=/i', $val);\n\n\t// We refuse html into html because some hacks try to obfuscate evil strings by inserting HTML into HTML. Example: <img on<a>error=alert(1) to bypass test on onerror\n\t$tmpval = preg_replace('/<[^<]+>/', '', $val);\n\t// List of dom events is on https://www.w3schools.com/jsref/dom_obj_event.asp and https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\n\t$inj += preg_match('/on(mouse|drag|key|load|touch|pointer|select|transition)([a-z]*)\\s*=/i', $val); // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>\n\t$inj += preg_match('/on(abort|afterprint|animation|auxclick|beforecopy|beforecut|beforeprint|beforeunload|blur|cancel|canplay|canplaythrough|change|click|close|contextmenu|cuechange|copy|cut)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(dblclick|drop|durationchange|emptied|end|ended|error|focus|focusin|focusout|formdata|gotpointercapture|hashchange|input|invalid)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(lostpointercapture|offline|online|pagehide|pageshow)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(paste|pause|play|playing|progress|ratechange|reset|resize|scroll|search|seeked|seeking|show|stalled|start|submit|suspend)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(timeupdate|toggle|unload|volumechange|waiting|wheel)\\s*=/i', $tmpval);\n\n\t//$inj += preg_match('/on[A-Z][a-z]+\\*=/', $val);   // To lock event handlers onAbort(), ...\n\t$inj += preg_match('/&#58;|&#0000058|&#x3A/i', $val); // refused string ':' encoded (no reason to have it encoded) to lock 'javascript:...'\n\t$inj += preg_match('/j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*:/i', $val);\n\t$inj += preg_match('/vbscript\\s*:/i', $val);\n\t// For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)\n\tif ($type == 1 || $type == 3) {\n\t\t$val = str_replace('enclosure=\"', 'enclosure=X', $val); // We accept enclosure=\" for the export/import module\n\t\t$inj += preg_match('/\"/i', $val); // We refused \" in GET parameters value.\n\t}\n\tif ($type == 2) {\n\t\t$inj += preg_match('/[:;\"\\'<>\\?\\(\\){}\\$%]/', $val); // PHP_SELF is a file system (or url path without parameters). It can contains spaces.\n\t}\n\n\treturn $inj;\n}\n\n/**\n * Return true if security check on parameters are OK, false otherwise.\n *\n * @param\t\tstring|array\t$var\t\tVariable name\n * @param\t\tstring\t\t\t$type\t\t1=GET, 0=POST, 2=PHP_SELF\n * @return\t\tboolean|null\t\t\t\ttrue if there is no injection. Stop code if injection found.\n */\nfunction analyseVarsForSqlAndScriptsInjection(&$var, $type)\n{\n\tif (is_array($var)) {\n\t\tforeach ($var as $key => $value) {\t// Warning, $key may also be used for attacks\n\t\t\tif (analyseVarsForSqlAndScriptsInjection($key, $type) && analyseVarsForSqlAndScriptsInjection($value, $type)) {\n\t\t\t\t//$var[$key] = $value;\t// This is useless\n\t\t\t} else {\n\t\t\t\t// Get remote IP: PS: We do not use getRemoteIP(), function is not yet loaded and we need a value that can't be spoofed\n\t\t\t\t$ip = (empty($_SERVER['REMOTE_ADDR']) ? 'unknown' : $_SERVER['REMOTE_ADDR']);\n\t\t\t\t$errormessage = 'Access refused to '.htmlentities($ip, ENT_COMPAT, 'UTF-8').' by SQL or Script injection protection in main.inc.php - GETPOST type='.htmlentities($type, ENT_COMPAT, 'UTF-8').' paramkey='.htmlentities($key, ENT_COMPAT, 'UTF-8').' paramvalue='.htmlentities($value, ENT_COMPAT, 'UTF-8').' page='.htmlentities($_SERVER[\"REQUEST_URI\"], ENT_COMPAT, 'UTF-8');\n\t\t\t\tprint $errormessage;\n\t\t\t\t// Add entry into error log\n\t\t\t\tif (function_exists('error_log')) {\n\t\t\t\t\terror_log($errormessage);\n\t\t\t\t}\n\t\t\t\t// TODO Add entry into security audit table\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else {\n\t\treturn (testSqlAndScriptInject($var, $type) <= 0);\n\t}\n}\n\n// To disable the WAF for GET and POST and PHP_SELF, uncomment this\n//define('NOSCANPHPSELFFORINJECTION', 1);\n//define('NOSCANGETFORINJECTION', 1);\n//define('NOSCANPOSTFORINJECTION', 1);\n\n// Check consistency of NOREQUIREXXX DEFINES\nif ((defined('NOREQUIREDB') || defined('NOREQUIRETRAN')) && !defined('NOREQUIREMENU')) {\n\tprint 'If define NOREQUIREDB or NOREQUIRETRAN are set, you must also set NOREQUIREMENU or not set them.';\n\texit;\n}\nif (defined('NOREQUIREUSER') && !defined('NOREQUIREMENU')) {\n\tprint 'If define NOREQUIREUSER is set, you must also set NOREQUIREMENU or not set it.';\n\texit;\n}\n\n// Sanity check on URL\nif (!defined('NOSCANPHPSELFFORINJECTION') && !empty($_SERVER[\"PHP_SELF\"])) {\n\t$morevaltochecklikepost = array($_SERVER[\"PHP_SELF\"]);\n\tanalyseVarsForSqlAndScriptsInjection($morevaltochecklikepost, 2);\n}\n// Sanity check on GET parameters\nif (!defined('NOSCANGETFORINJECTION') && !empty($_SERVER[\"QUERY_STRING\"])) {\n\t// Note: QUERY_STRING is url encoded, but $_GET and $_POST are already decoded\n\t// Because the analyseVarsForSqlAndScriptsInjection is designed for already url decoded value, we must decode QUERY_STRING\n\t// Another solution is to provide $_GET as parameter\n\t$morevaltochecklikeget = array(urldecode($_SERVER[\"QUERY_STRING\"]));\n\tanalyseVarsForSqlAndScriptsInjection($morevaltochecklikeget, 1);\n}\n// Sanity check on POST\nif (!defined('NOSCANPOSTFORINJECTION')) {\n\tanalyseVarsForSqlAndScriptsInjection($_POST, 0);\n}\n\n// This is to make Dolibarr working with Plesk\nif (!empty($_SERVER['DOCUMENT_ROOT']) && substr($_SERVER['DOCUMENT_ROOT'], -6) !== 'htdocs') {\n\tset_include_path($_SERVER['DOCUMENT_ROOT'].'/htdocs');\n}\n\n// Include the conf.php and functions.lib.php and security.lib.php. This defined the constants like DOL_DOCUMENT_ROOT, DOL_DATA_ROOT, DOL_URL_ROOT...\nrequire_once 'filefunc.inc.php';\n\n// If there is a POST parameter to tell to save automatically some POST parameters into cookies, we do it.\n// This is used for example by form of boxes to save personalization of some options.\n// DOL_AUTOSET_COOKIE=cookiename:val1,val2 and  cookiename_val1=aaa cookiename_val2=bbb will set cookie_name with value json_encode(array('val1'=> , ))\nif (!empty($_POST[\"DOL_AUTOSET_COOKIE\"])) {\n\t$tmpautoset = explode(':', $_POST[\"DOL_AUTOSET_COOKIE\"], 2);\n\t$tmplist = explode(',', $tmpautoset[1]);\n\t$cookiearrayvalue = array();\n\tforeach ($tmplist as $tmpkey) {\n\t\t$postkey = $tmpautoset[0].'_'.$tmpkey;\n\t\t//var_dump('tmpkey='.$tmpkey.' postkey='.$postkey.' value='.$_POST[$postkey]);\n\t\tif (!empty($_POST[$postkey])) {\n\t\t\t$cookiearrayvalue[$tmpkey] = $_POST[$postkey];\n\t\t}\n\t}\n\t$cookiename = $tmpautoset[0];\n\t$cookievalue = json_encode($cookiearrayvalue);\n\t//var_dump('setcookie cookiename='.$cookiename.' cookievalue='.$cookievalue);\n\tif (PHP_VERSION_ID < 70300) {\n\t\tsetcookie($cookiename, empty($cookievalue) ? '' : $cookievalue, empty($cookievalue) ? 0 : (time() + (86400 * 354)), '/', null, ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true), true); // keep cookie 1 year and add tag httponly\n\t} else {\n\t\t// Only available for php >= 7.3\n\t\t$cookieparams = array(\n\t\t\t'expires' => empty($cookievalue) ? 0 : (time() + (86400 * 354)),\n\t\t\t'path' => '/',\n\t\t\t//'domain' => '.mywebsite.com', // the dot at the beginning allows compatibility with subdomains\n\t\t\t'secure' => ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true),\n\t\t\t'httponly' => true,\n\t\t\t'samesite' => 'Lax'\t// None || Lax  || Strict\n\t\t);\n\t\tsetcookie($cookiename, empty($cookievalue) ? '' : $cookievalue, $cookieparams);\n\t}\n\tif (empty($cookievalue)) {\n\t\tunset($_COOKIE[$cookiename]);\n\t}\n}\n\n// Set the handler of session\n// if (ini_get('session.save_handler') == 'user')\nif (!empty($php_session_save_handler) && $php_session_save_handler == 'db') {\n\trequire_once 'core/lib/phpsessionin'.$php_session_save_handler.'.lib.php';\n}\n\n// Init session. Name of session is specific to Dolibarr instance.\n// Must be done after the include of filefunc.inc.php so global variables of conf file are defined (like $dolibarr_main_instance_unique_id or $dolibarr_main_force_https).\n// Note: the function dol_getprefix() is defined into functions.lib.php but may have been defined to return a different key to manage another area to protect.\n$prefix = dol_getprefix('');\n$sessionname = 'DOLSESSID_'.$prefix;\n$sessiontimeout = 'DOLSESSTIMEOUT_'.$prefix;\nif (!empty($_COOKIE[$sessiontimeout])) {\n\tini_set('session.gc_maxlifetime', $_COOKIE[$sessiontimeout]);\n}\n\n// This create lock, released by session_write_close() or end of page.\n// We need this lock as long as we read/write $_SESSION ['vars']. We can remove lock when finished.\nif (!defined('NOSESSION')) {\n\tif (PHP_VERSION_ID < 70300) {\n\t\tsession_set_cookie_params(0, '/', null, ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true), true); // Add tag secure and httponly on session cookie (same as setting session.cookie_httponly into php.ini). Must be called before the session_start.\n\t} else {\n\t\t// Only available for php >= 7.3\n\t\t$sessioncookieparams = array(\n\t\t\t'lifetime' => 0,\n\t\t\t'path' => '/',\n\t\t\t//'domain' => '.mywebsite.com', // the dot at the beginning allows compatibility with subdomains\n\t\t\t'secure' => ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true),\n\t\t\t'httponly' => true,\n\t\t\t'samesite' => 'Lax'\t// None || Lax  || Strict\n\t\t);\n\t\tsession_set_cookie_params($sessioncookieparams);\n\t}\n\tsession_name($sessionname);\n\tsession_start();\t// This call the open and read of session handler\n\t//exit;\t// this exist generates a call to write and close\n}\n\n\n// Init the 5 global objects, this include will make the 'new Xxx()' and set properties for: $conf, $db, $langs, $user, $mysoc\nrequire_once 'master.inc.php';\n\n// If software has been locked. Only login $conf->global->MAIN_ONLY_LOGIN_ALLOWED is allowed.\nif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t$ok = 0;\n\tif ((!session_id() || !isset($_SESSION[\"dol_login\"])) && !isset($_POST[\"username\"]) && !empty($_SERVER[\"GATEWAY_INTERFACE\"])) {\n\t\t$ok = 1; // We let working pages if not logged and inside a web browser (login form, to allow login by admin)\n\t} elseif (isset($_POST[\"username\"]) && $_POST[\"username\"] == $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t$ok = 1; // We let working pages that is a login submission (login submit, to allow login by admin)\n\t} elseif (defined('NOREQUIREDB')) {\n\t\t$ok = 1; // We let working pages that don't need database access (xxx.css.php)\n\t} elseif (defined('EVEN_IF_ONLY_LOGIN_ALLOWED')) {\n\t\t$ok = 1; // We let working pages that ask to work even if only login enabled (logout.php)\n\t} elseif (session_id() && isset($_SESSION[\"dol_login\"]) && $_SESSION[\"dol_login\"] == $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t$ok = 1; // We let working if user is allowed admin\n\t}\n\tif (!$ok) {\n\t\tif (session_id() && isset($_SESSION[\"dol_login\"]) && $_SESSION[\"dol_login\"] != $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t\tprint 'Sorry, your application is offline.'.\"\\n\";\n\t\t\tprint 'You are logged with user \"'.$_SESSION[\"dol_login\"].'\" and only administrator user \"'.$conf->global->MAIN_ONLY_LOGIN_ALLOWED.'\" is allowed to connect for the moment.'.\"\\n\";\n\t\t\t$nexturl = DOL_URL_ROOT.'/user/logout.php?token='.newToken();\n\t\t\tprint 'Please try later or <a href=\"'.$nexturl.'\">click here to disconnect and change login user</a>...'.\"\\n\";\n\t\t} else {\n\t\t\tprint 'Sorry, your application is offline. Only administrator user \"'.$conf->global->MAIN_ONLY_LOGIN_ALLOWED.'\" is allowed to connect for the moment.'.\"\\n\";\n\t\t\t$nexturl = DOL_URL_ROOT.'/';\n\t\t\tprint 'Please try later or <a href=\"'.$nexturl.'\">click here to change login user</a>...'.\"\\n\";\n\t\t}\n\t\texit;\n\t}\n}\n\n\n// Activate end of page function\nregister_shutdown_function('dol_shutdown');\n\n// Load debugbar\nif (isModEnabled('debugbar') && !GETPOST('dol_use_jmobile') && empty($_SESSION['dol_use_jmobile'])) {\n\tglobal $debugbar;\n\tinclude_once DOL_DOCUMENT_ROOT.'/debugbar/class/DebugBar.php';\n\t$debugbar = new DolibarrDebugBar();\n\t$renderer = $debugbar->getRenderer();\n\tif (empty($conf->global->MAIN_HTML_HEADER)) {\n\t\t$conf->global->MAIN_HTML_HEADER = '';\n\t}\n\t$conf->global->MAIN_HTML_HEADER .= $renderer->renderHead();\n\n\t$debugbar['time']->startMeasure('pageaftermaster', 'Page generation (after environment init)');\n}\n\n// Detection browser\nif (isset($_SERVER[\"HTTP_USER_AGENT\"])) {\n\t$tmp = getBrowserInfo($_SERVER[\"HTTP_USER_AGENT\"]);\n\t$conf->browser->name = $tmp['browsername'];\n\t$conf->browser->os = $tmp['browseros'];\n\t$conf->browser->version = $tmp['browserversion'];\n\t$conf->browser->layout = $tmp['layout']; // 'classic', 'phone', 'tablet'\n\t//var_dump($conf->browser);\n\n\tif ($conf->browser->layout == 'phone') {\n\t\t$conf->dol_no_mouse_hover = 1;\n\t}\n}\n\n// If theme is forced\nif (GETPOST('theme', 'aZ09')) {\n\t$conf->theme = GETPOST('theme', 'aZ09');\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\n// Set global MAIN_OPTIMIZEFORTEXTBROWSER (must be before login part)\nif (GETPOST('textbrowser', 'int') || (!empty($conf->browser->name) && $conf->browser->name == 'lynxlinks')) {   // If we must enable text browser\n\t$conf->global->MAIN_OPTIMIZEFORTEXTBROWSER = 1;\n}\n\n// Force HTTPS if required ($conf->file->main_force_https is 0/1 or 'https dolibarr root url')\n// $_SERVER[\"HTTPS\"] is 'on' when link is https, otherwise $_SERVER[\"HTTPS\"] is empty or 'off'\nif (!empty($conf->file->main_force_https) && (empty($_SERVER[\"HTTPS\"]) || $_SERVER[\"HTTPS\"] != 'on')) {\n\t$newurl = '';\n\tif (is_numeric($conf->file->main_force_https)) {\n\t\tif ($conf->file->main_force_https == '1' && !empty($_SERVER[\"SCRIPT_URI\"])) {\t// If SCRIPT_URI supported by server\n\t\t\tif (preg_match('/^http:/i', $_SERVER[\"SCRIPT_URI\"]) && !preg_match('/^https:/i', $_SERVER[\"SCRIPT_URI\"])) {\t// If link is http\n\t\t\t\t$newurl = preg_replace('/^http:/i', 'https:', $_SERVER[\"SCRIPT_URI\"]);\n\t\t\t}\n\t\t} else {\n\t\t\t// Check HTTPS environment variable (Apache/mod_ssl only)\n\t\t\t$newurl = preg_replace('/^http:/i', 'https:', DOL_MAIN_URL_ROOT).$_SERVER[\"REQUEST_URI\"];\n\t\t}\n\t} else {\n\t\t// Check HTTPS environment variable (Apache/mod_ssl only)\n\t\t$newurl = $conf->file->main_force_https.$_SERVER[\"REQUEST_URI\"];\n\t}\n\t// Start redirect\n\tif ($newurl) {\n\t\theader_remove(); // Clean header already set to be sure to remove any header like \"Set-Cookie: DOLSESSID_...\" from non HTTPS answers\n\t\tdol_syslog(\"main.inc: dolibarr_main_force_https is on, we make a redirect to \".$newurl);\n\t\theader(\"Location: \".$newurl);\n\t\texit;\n\t} else {\n\t\tdol_syslog(\"main.inc: dolibarr_main_force_https is on but we failed to forge new https url so no redirect is done\", LOG_WARNING);\n\t}\n}\n\nif (!defined('NOLOGIN') && !defined('NOIPCHECK') && !empty($dolibarr_main_restrict_ip)) {\n\t$listofip = explode(',', $dolibarr_main_restrict_ip);\n\t$found = false;\n\tforeach ($listofip as $ip) {\n\t\t$ip = trim($ip);\n\t\tif ($ip == $_SERVER['REMOTE_ADDR']) {\n\t\t\t$found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!$found) {\n\t\tprint 'Access refused by IP protection. Your detected IP is '.$_SERVER['REMOTE_ADDR'];\n\t\texit;\n\t}\n}\n\n// Loading of additional presentation includes\nif (!defined('NOREQUIREHTML')) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php'; // Need 660ko memory (800ko in 2.2)\n}\nif (!defined('NOREQUIREAJAX')) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/ajax.lib.php'; // Need 22ko memory\n}\n\n// If install or upgrade process not done or not completely finished, we call the install page.\nif (!empty($conf->global->MAIN_NOT_INSTALLED) || !empty($conf->global->MAIN_NOT_UPGRADED)) {\n\tdol_syslog(\"main.inc: A previous install or upgrade was not complete. Redirect to install page.\", LOG_WARNING);\n\theader(\"Location: \".DOL_URL_ROOT.\"/install/index.php\");\n\texit;\n}\n// If an upgrade process is required, we call the install page.\nif ((!empty($conf->global->MAIN_VERSION_LAST_UPGRADE) && ($conf->global->MAIN_VERSION_LAST_UPGRADE != DOL_VERSION))\n|| (empty($conf->global->MAIN_VERSION_LAST_UPGRADE) && !empty($conf->global->MAIN_VERSION_LAST_INSTALL) && ($conf->global->MAIN_VERSION_LAST_INSTALL != DOL_VERSION))) {\n\t$versiontocompare = empty($conf->global->MAIN_VERSION_LAST_UPGRADE) ? $conf->global->MAIN_VERSION_LAST_INSTALL : $conf->global->MAIN_VERSION_LAST_UPGRADE;\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\n\t$dolibarrversionlastupgrade = preg_split('/[.-]/', $versiontocompare);\n\t$dolibarrversionprogram = preg_split('/[.-]/', DOL_VERSION);\n\t$rescomp = versioncompare($dolibarrversionprogram, $dolibarrversionlastupgrade);\n\tif ($rescomp > 0) {   // Programs have a version higher than database.\n\t\tif (empty($conf->global->MAIN_NO_UPGRADE_REDIRECT_ON_LEVEL_3_CHANGE) || $rescomp < 3) {\n\t\t\t// We did not add \"&& $rescomp < 3\" because we want upgrade process for build upgrades\n\t\t\tdol_syslog(\"main.inc: database version \".$versiontocompare.\" is lower than programs version \".DOL_VERSION.\". Redirect to install/upgrade page.\", LOG_WARNING);\n\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/install/index.php\");\n\t\t\texit;\n\t\t}\n\t}\n}\n\n// Creation of a token against CSRF vulnerabilities\nif (!defined('NOTOKENRENEWAL') && !defined('NOSESSION')) {\n\t// No token renewal on .css.php, .js.php and .json.php (even if the NOTOKENRENEWAL was not provided)\n\tif (!preg_match('/\\.(css|js|json)\\.php$/', $_SERVER[\"PHP_SELF\"])) {\n\t\t// Rolling token at each call ($_SESSION['token'] contains token of previous page)\n\t\tif (isset($_SESSION['newtoken'])) {\n\t\t\t$_SESSION['token'] = $_SESSION['newtoken'];\n\t\t}\n\n\t\tif (!isset($_SESSION['newtoken']) || getDolGlobalInt('MAIN_SECURITY_CSRF_TOKEN_RENEWAL_ON_EACH_CALL')) {\n\t\t\t// Note: Using MAIN_SECURITY_CSRF_TOKEN_RENEWAL_ON_EACH_CALL is not recommended: if a user succeed in entering a data from\n\t\t\t// a public page with a link that make a token regeneration, it can make use of the backoffice no more possible !\n\t\t\t// Save in $_SESSION['newtoken'] what will be next token. Into forms, we will add param token = $_SESSION['newtoken']\n\t\t\t$token = dol_hash(uniqid(mt_rand(), false), 'md5'); // Generates a hash of a random number. We don't need a secured hash, just a changing random value.\n\t\t\t$_SESSION['newtoken'] = $token;\n\t\t\tdol_syslog(\"NEW TOKEN generated by : \".$_SERVER['PHP_SELF'], LOG_DEBUG);\n\t\t}\n\t}\n}\n\n//dol_syslog(\"aaaa - \".defined('NOCSRFCHECK').\" - \".$dolibarr_nocsrfcheck.\" - \".$conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN.\" - \".$_SERVER['REQUEST_METHOD'].\" - \".GETPOST('token', 'alpha'));\n\n// Check validity of token, only if option MAIN_SECURITY_CSRF_WITH_TOKEN enabled or if constant CSRFCHECK_WITH_TOKEN is set into page\nif ((!defined('NOCSRFCHECK') && empty($dolibarr_nocsrfcheck) && getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN')) || defined('CSRFCHECK_WITH_TOKEN')) {\n\t// Array of action code where CSRFCHECK with token will be forced (so token must be provided on url request)\n\t$sensitiveget = false;\n\tif ((GETPOSTISSET('massaction') || GETPOST('action', 'aZ09')) && getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN') >= 3) {\n\t\t// All GET actions and mass actions are processed as sensitive.\n\t\tif (GETPOSTISSET('massaction') || !in_array(GETPOST('action', 'aZ09'), array('create', 'createsite', 'createcard', 'edit', 'editvalidator', 'file_manager', 'presend', 'presend_addmessage', 'preview', 'specimen'))) {\t// We exclude the case action='create' and action='file_manager' that are legitimate\n\t\t\t$sensitiveget = true;\n\t\t}\n\t} elseif (getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN') >= 2) {\n\t\t// Few GET actions coded with a &token into url are processed as sensitive.\n\t\t$arrayofactiontoforcetokencheck = array(\n\t\t\t'activate',\n\t\t\t'doprev', 'donext', 'dvprev', 'dvnext',\n\t\t\t'freezone', 'install',\n\t\t\t'reopen'\n\t\t);\n\t\tif (in_array(GETPOST('action', 'aZ09'), $arrayofactiontoforcetokencheck)) {\n\t\t\t$sensitiveget = true;\n\t\t}\n\t\t// We also match for value with just a simple string that must match\n\t\tif (preg_match('/^(add|classify|close|confirm|copy|del|disable|enable|remove|set|unset|update|save)/', GETPOST('action', 'aZ09'))) {\n\t\t\t$sensitiveget = true;\n\t\t}\n\t}\n\n\t// Check a token is provided for all cases that need a mandatory token\n\t// (all POST actions + all sensitive GET actions + all mass actions + all login/actions/logout on pages with CSRFCHECK_WITH_TOKEN set)\n\tif (\n\t\t$_SERVER['REQUEST_METHOD'] == 'POST' ||\n\t\t$sensitiveget ||\n\t\tGETPOSTISSET('massaction') ||\n\t\t((GETPOSTISSET('actionlogin') || GETPOSTISSET('action')) && defined('CSRFCHECK_WITH_TOKEN'))\n\t) {\n\t\t// If token is not provided or empty, error (we are in case it is mandatory)\n\t\tif (!GETPOST('token', 'alpha') || GETPOST('token', 'alpha') == 'notrequired') {\n\t\t\ttop_httphead();\n\t\t\tif (GETPOST('uploadform', 'int')) {\n\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused. File size too large or not provided.\");\n\t\t\t\t$langs->loadLangs(array(\"errors\", \"install\"));\n\t\t\t\tprint $langs->trans(\"ErrorFileSizeTooLarge\").' ';\n\t\t\t\tprint $langs->trans(\"ErrorGoBackAndCorrectParameters\");\n\t\t\t} else {\n\t\t\t\thttp_response_code(403);\n\t\t\t\tif (defined('CSRFCHECK_WITH_TOKEN')) {\n\t\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (CSRFCHECK_WITH_TOKEN protection) in main.inc.php. Token not provided.\", LOG_WARNING);\n\t\t\t\t\tprint \"Access to a page that needs a token (constant CSRFCHECK_WITH_TOKEN is defined) is refused by CSRF protection in main.inc.php. Token not provided.\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (POST method or GET with a sensible value for 'action' parameter) in main.inc.php. Token not provided.\", LOG_WARNING);\n\t\t\t\t\tprint \"Access to this page this way (POST method or GET with a sensible value for 'action' parameter) is refused by CSRF protection in main.inc.php. Token not provided.\\n\";\n\t\t\t\t\tprint \"If you access your server behind a proxy using url rewriting and the parameter is provided by caller, you might check that all HTTP header are propagated (or add the line \\$dolibarr_nocsrfcheck=1 into your conf.php file or MAIN_SECURITY_CSRF_WITH_TOKEN to 0\";\n\t\t\t\t\tif (!empty($conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN)) {\n\t\t\t\t\t\tprint \" instead of \".$conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN;\n\t\t\t\t\t}\n\t\t\t\t\tprint \" into setup).\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tdie;\n\t\t}\n\t}\n\n\t$sessiontokenforthisurl = (empty($_SESSION['token']) ? '' : $_SESSION['token']);\n\t// TODO Get the sessiontokenforthisurl into an array of session token (one array per base URL so we can use the CSRF per page and we keep ability for several tabs per url in a browser)\n\tif (GETPOSTISSET('token') && GETPOST('token') != 'notrequired' && GETPOST('token', 'alpha') != $sessiontokenforthisurl) {\n\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (invalid token), so we disable POST and some GET parameters - referer=\".(empty($_SERVER['HTTP_REFERER'])?'':$_SERVER['HTTP_REFERER']).\", action=\".GETPOST('action', 'aZ09').\", _GET|POST['token']=\".GETPOST('token', 'alpha'), LOG_WARNING);\n\t\t//dol_syslog(\"_SESSION['token']=\".$sessiontokenforthisurl, LOG_DEBUG);\n\t\t// Do not output anything on standard output because this create problems when using the BACK button on browsers. So we just set a message into session.\n\t\tsetEventMessages('SecurityTokenHasExpiredSoActionHasBeenCanceledPleaseRetry', null, 'warnings');\n\t\t$savid = null;\n\t\tif (isset($_POST['id'])) {\n\t\t\t$savid = ((int) $_POST['id']);\n\t\t}\n\t\tunset($_POST);\n\t\t//unset($_POST['action']); unset($_POST['massaction']);\n\t\t//unset($_POST['confirm']); unset($_POST['confirmmassaction']);\n\t\tunset($_GET['confirm']);\n\t\tunset($_GET['action']);\n\t\tunset($_GET['confirmmassaction']);\n\t\tunset($_GET['massaction']);\n\t\tunset($_GET['token']);\t\t\t// TODO Make a redirect if we have a token in url to remove it ?\n\t\tif (isset($savid)) {\n\t\t\t$_POST['id'] = ((int) $savid);\n\t\t}\n\t}\n\n\t// Note: There is another CSRF protection into the filefunc.inc.php\n}\n\n// Disable modules (this must be after session_start and after conf has been loaded)\nif (GETPOSTISSET('disablemodules')) {\n\t$_SESSION[\"disablemodules\"] = GETPOST('disablemodules', 'alpha');\n}\nif (!empty($_SESSION[\"disablemodules\"])) {\n\t$modulepartkeys = array('css', 'js', 'tabs', 'triggers', 'login', 'substitutions', 'menus', 'theme', 'sms', 'tpl', 'barcode', 'models', 'societe', 'hooks', 'dir', 'syslog', 'tpllinkable', 'contactelement', 'moduleforexternal');\n\n\t$disabled_modules = explode(',', $_SESSION[\"disablemodules\"]);\n\tforeach ($disabled_modules as $module) {\n\t\tif ($module) {\n\t\t\tif (empty($conf->$module)) {\n\t\t\t\t$conf->$module = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\t$conf->$module->enabled = false;\n\t\t\tforeach ($modulepartkeys as $modulepartkey) {\n\t\t\t\tunset($conf->modules_parts[$modulepartkey][$module]);\n\t\t\t}\n\t\t\tif ($module == 'fournisseur') {\t\t// Special case\n\t\t\t\t$conf->supplier_order->enabled = 0;\n\t\t\t\t$conf->supplier_invoice->enabled = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Set current modulepart\n$modulepart = explode(\"/\", $_SERVER[\"PHP_SELF\"]);\nif (is_array($modulepart) && count($modulepart) > 0) {\n\tforeach ($conf->modules as $module) {\n\t\tif (in_array($module, $modulepart)) {\n\t\t\t$modulepart = $module;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nif (is_array($modulepart)) {\n\t$modulepart = '';\n}\n\n\n/*\n * Phase authentication / login\n */\n$login = '';\nif (!defined('NOLOGIN')) {\n\t// $authmode lists the different method of identification to be tested in order of preference.\n\t// Example: 'http', 'dolibarr', 'ldap', 'http,forceuser', '...'\n\n\tif (defined('MAIN_AUTHENTICATION_MODE')) {\n\t\t$dolibarr_main_authentication = constant('MAIN_AUTHENTICATION_MODE');\n\t} else {\n\t\t// Authentication mode\n\t\tif (empty($dolibarr_main_authentication)) {\n\t\t\t$dolibarr_main_authentication = 'http,dolibarr';\n\t\t}\n\t\t// Authentication mode: forceuser\n\t\tif ($dolibarr_main_authentication == 'forceuser' && empty($dolibarr_auto_user)) {\n\t\t\t$dolibarr_auto_user = 'auto';\n\t\t}\n\t}\n\t// Set authmode\n\t$authmode = explode(',', $dolibarr_main_authentication);\n\n\t// No authentication mode\n\tif (!count($authmode)) {\n\t\t$langs->load('main');\n\t\tdol_print_error('', $langs->trans(\"ErrorConfigParameterNotDefined\", 'dolibarr_main_authentication'));\n\t\texit;\n\t}\n\n\t// If login request was already post, we retrieve login from the session\n\t// Call module if not realized that his request.\n\t// At the end of this phase, the variable $login is defined.\n\t$resultFetchUser = '';\n\t$test = true;\n\tif (!isset($_SESSION[\"dol_login\"])) {\n\t\t// It is not already authenticated and it requests the login / password\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\n\t\t$dol_dst_observed = GETPOST(\"dst_observed\", 'int', 3);\n\t\t$dol_dst_first = GETPOST(\"dst_first\", 'int', 3);\n\t\t$dol_dst_second = GETPOST(\"dst_second\", 'int', 3);\n\t\t$dol_screenwidth = GETPOST(\"screenwidth\", 'int', 3);\n\t\t$dol_screenheight = GETPOST(\"screenheight\", 'int', 3);\n\t\t$dol_hide_topmenu = GETPOST('dol_hide_topmenu', 'int', 3);\n\t\t$dol_hide_leftmenu = GETPOST('dol_hide_leftmenu', 'int', 3);\n\t\t$dol_optimize_smallscreen = GETPOST('dol_optimize_smallscreen', 'int', 3);\n\t\t$dol_no_mouse_hover = GETPOST('dol_no_mouse_hover', 'int', 3);\n\t\t$dol_use_jmobile = GETPOST('dol_use_jmobile', 'int', 3); // 0=default, 1=to say we use app from a webview app, 2=to say we use app from a webview app and keep ajax\n\t\t//dol_syslog(\"POST key=\".join(array_keys($_POST),',').' value='.join($_POST,','));\n\n\t\t// If in demo mode, we check we go to home page through the public/demo/index.php page\n\t\tif (!empty($dolibarr_main_demo) && $_SERVER['PHP_SELF'] == DOL_URL_ROOT.'/index.php') {  // We ask index page\n\t\t\tif (empty($_SERVER['HTTP_REFERER']) || !preg_match('/public/', $_SERVER['HTTP_REFERER'])) {\n\t\t\t\tdol_syslog(\"Call index page from another url than demo page (call is done from page \".$_SERVER['HTTP_REFERER'].\")\");\n\t\t\t\t$url = '';\n\t\t\t\t$url .= ($url ? '&' : '').($dol_hide_topmenu ? 'dol_hide_topmenu='.$dol_hide_topmenu : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_hide_leftmenu ? 'dol_hide_leftmenu='.$dol_hide_leftmenu : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_optimize_smallscreen ? 'dol_optimize_smallscreen='.$dol_optimize_smallscreen : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_no_mouse_hover ? 'dol_no_mouse_hover='.$dol_no_mouse_hover : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_use_jmobile ? 'dol_use_jmobile='.$dol_use_jmobile : '');\n\t\t\t\t$url = DOL_URL_ROOT.'/public/demo/index.php'.($url ? '?'.$url : '');\n\t\t\t\theader(\"Location: \".$url);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\t// Hooks for security access\n\t\t$action = '';\n\t\t$hookmanager->initHooks(array('login'));\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('beforeLoginAuthentication', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook < 0) {\n\t\t\t$test = false;\n\t\t\t$error++;\n\t\t}\n\n\t\t// Verification security graphic code\n\t\tif ($test && GETPOST(\"username\", \"alpha\", 2) && !empty($conf->global->MAIN_SECURITY_ENABLECAPTCHA) && !isset($_SESSION['dol_bypass_antispam'])) {\n\t\t\t$sessionkey = 'dol_antispam_value';\n\t\t\t$ok = (array_key_exists($sessionkey, $_SESSION) === true && (strtolower($_SESSION[$sessionkey]) === strtolower(GETPOST('code', 'restricthtml'))));\n\n\t\t\t// Check code\n\t\t\tif (!$ok) {\n\t\t\t\tdol_syslog('Bad value for code, connexion refused');\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorBadValueForCode\");\n\t\t\t\t$test = false;\n\n\t\t\t\t// Call trigger for the \"security events\" log\n\t\t\t\t$user->trigger_mesg = 'ErrorBadValueForCode - login='.GETPOST(\"username\", \"alpha\", 2);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t// Hooks on failed login\n\t\t\t\t$action = '';\n\t\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t\t$parameters = array('dol_authmode'=>$authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\t\tif ($reshook < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\t// Note: exit is done later\n\t\t\t}\n\t\t}\n\n\t\t$allowedmethodtopostusername = 2;\n\t\tif (defined('MAIN_AUTHENTICATION_POST_METHOD')) {\n\t\t\t$allowedmethodtopostusername = constant('MAIN_AUTHENTICATION_POST_METHOD');\n\t\t}\n\t\t$usertotest = (!empty($_COOKIE['login_dolibarr']) ? preg_replace('/[^a-zA-Z0-9_\\-]/', '', $_COOKIE['login_dolibarr']) : GETPOST(\"username\", \"alpha\", $allowedmethodtopostusername));\n\t\t$passwordtotest = GETPOST('password', 'none', $allowedmethodtopostusername);\n\t\t$entitytotest = (GETPOST('entity', 'int') ? GETPOST('entity', 'int') : (!empty($conf->entity) ? $conf->entity : 1));\n\n\t\t// Define if we received data to test the login.\n\t\t$goontestloop = false;\n\t\tif (isset($_SERVER[\"REMOTE_USER\"]) && in_array('http', $authmode)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\t\tif ($dolibarr_main_authentication == 'forceuser' && !empty($dolibarr_auto_user)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\t\tif (GETPOST(\"username\", \"alpha\", $allowedmethodtopostusername) || !empty($_COOKIE['login_dolibarr']) || GETPOST('openid_mode', 'alpha', 1)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\n\t\tif (!is_object($langs)) { // This can occurs when calling page with NOREQUIRETRAN defined, however we need langs for error messages.\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/translate.class.php';\n\t\t\t$langs = new Translate(\"\", $conf);\n\t\t\t$langcode = (GETPOST('lang', 'aZ09', 1) ?GETPOST('lang', 'aZ09', 1) : (empty($conf->global->MAIN_LANG_DEFAULT) ? 'auto' : $conf->global->MAIN_LANG_DEFAULT));\n\t\t\tif (defined('MAIN_LANG_DEFAULT')) {\n\t\t\t\t$langcode = constant('MAIN_LANG_DEFAULT');\n\t\t\t}\n\t\t\t$langs->setDefaultLang($langcode);\n\t\t}\n\n\t\t// Validation of login/pass/entity\n\t\t// If ok, the variable login will be returned\n\t\t// If error, we will put error message in session under the name dol_loginmesg\n\t\t// Note authmode is an array for example: array('0'=>'dolibarr', '1'=>'google');\n\t\tif ($test && $goontestloop && (GETPOST('actionlogin', 'aZ09') == 'login' || $dolibarr_main_authentication != 'dolibarr')) {\n\t\t\t$login = checkLoginPassEntity($usertotest, $passwordtotest, $entitytotest, $authmode);\n\t\t\tif ($login === '--bad-login-validity--') {\n\t\t\t\t$login = '';\n\t\t\t}\n\n\t\t\t$dol_authmode = '';\n\n\t\t\tif ($login) {\n\t\t\t\t$dol_authmode = $conf->authmode; // This properties is defined only when logged, to say what mode was successfully used\n\t\t\t\t$dol_tz = $_POST[\"tz\"];\n\t\t\t\t$dol_tz_string = $_POST[\"tz_string\"];\n\t\t\t\t$dol_tz_string = preg_replace('/\\s*\\(.+\\)$/', '', $dol_tz_string);\n\t\t\t\t$dol_tz_string = preg_replace('/,/', '/', $dol_tz_string);\n\t\t\t\t$dol_tz_string = preg_replace('/\\s/', '_', $dol_tz_string);\n\t\t\t\t$dol_dst = 0;\n\t\t\t\t// Keep $_POST here. Do not use GETPOSTISSET\n\t\t\t\tif (isset($_POST[\"dst_first\"]) && isset($_POST[\"dst_second\"])) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t\t\t\t$datenow = dol_now();\n\t\t\t\t\t$datefirst = dol_stringtotime($_POST[\"dst_first\"]);\n\t\t\t\t\t$datesecond = dol_stringtotime($_POST[\"dst_second\"]);\n\t\t\t\t\tif ($datenow >= $datefirst && $datenow < $datesecond) {\n\t\t\t\t\t\t$dol_dst = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//print $datefirst.'-'.$datesecond.'-'.$datenow.'-'.$dol_tz.'-'.$dol_tzstring.'-'.$dol_dst; exit;\n\t\t\t}\n\n\t\t\tif (!$login) {\n\t\t\t\tdol_syslog('Bad password, connexion refused', LOG_DEBUG);\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t// Bad password. No authmode has found a good password.\n\t\t\t\t// We set a generic message if not defined inside function checkLoginPassEntity or subfunctions\n\t\t\t\tif (empty($_SESSION[\"dol_loginmesg\"])) {\n\t\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorBadLoginPassword\");\n\t\t\t\t}\n\n\t\t\t\t// Call trigger for the \"security events\" log\n\t\t\t\t$user->trigger_mesg = $langs->trans(\"ErrorBadLoginPassword\").' - login='.GETPOST(\"username\", \"alpha\", 2);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t// Hooks on failed login\n\t\t\t\t$action = '';\n\t\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\t\tif ($reshook < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\t// Note: exit is done in next chapter\n\t\t\t}\n\t\t}\n\n\t\t// End test login / passwords\n\t\tif (!$login || (in_array('ldap', $authmode) && empty($passwordtotest))) {\t// With LDAP we refused empty password because some LDAP are \"opened\" for anonymous access so connexion is a success.\n\t\t\t// No data to test login, so we show the login page.\n\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" - action=\".GETPOST('action', 'aZ09').\" - actionlogin=\".GETPOST('actionlogin', 'aZ09').\" - showing the login form and exit\", LOG_NOTICE);\n\t\t\tif (defined('NOREDIRECTBYMAINTOLOGIN')) {\n\t\t\t\t// When used with NOREDIRECTBYMAINTOLOGIN set, the http header must already be set when including the main.\n\t\t\t\t// See example with selectsearchbox.php. This case is reserverd for the selectesearchbox.php so we can\n\t\t\t\t// report a message to ask to login when search ajax component is used after a timeout.\n\t\t\t\t//top_httphead();\n\t\t\t\treturn 'ERROR_NOT_LOGGED';\n\t\t\t} else {\n\t\t\t\tif ($_SERVER[\"HTTP_USER_AGENT\"] == 'securitytest') {\n\t\t\t\t\thttp_response_code(401); // It makes easier to understand if session was broken during security tests\n\t\t\t\t}\n\t\t\t\tdol_loginfunction($langs, $conf, (!empty($mysoc) ? $mysoc : ''));\t// This include http headers\n\t\t\t}\n\t\t\texit;\n\t\t}\n\n\t\t$resultFetchUser = $user->fetch('', $login, '', 1, ($entitytotest > 0 ? $entitytotest : -1)); // value for $login was retrieved previously when checking password.\n\t\tif ($resultFetchUser <= 0 || $user->isNotIntoValidityDateRange()) {\n\t\t\tdol_syslog('User not found or not valid, connexion refused');\n\t\t\tsession_destroy();\n\t\t\tsession_set_cookie_params(0, '/', null, (empty($dolibarr_main_force_https) ? false : true), true); // Add tag secure and httponly on session cookie\n\t\t\tsession_name($sessionname);\n\t\t\tsession_start();\n\n\t\t\tif ($resultFetchUser == 0) {\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorCantLoadUserFromDolibarrDatabase\", $login);\n\n\t\t\t\t$user->trigger_mesg = 'ErrorCantLoadUserFromDolibarrDatabase - login='.$login;\n\t\t\t} elseif ($resultFetchUser < 0) {\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $user->error;\n\n\t\t\t\t$user->trigger_mesg = $user->error;\n\t\t\t} else {\n\t\t\t\t// Load translation files required by the page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorLoginDateValidity\");\n\n\t\t\t\t$user->trigger_mesg = $langs->trans(\"ErrorLoginDateValidity\").' - login='.$login;\n\t\t\t}\n\n\t\t\t// Call trigger\n\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\n\t\t\t// Hooks on failed login\n\t\t\t$action = '';\n\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\tif ($reshook < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$paramsurl = array();\n\t\t\tif (GETPOST('textbrowser', 'int')) {\n\t\t\t\t$paramsurl[] = 'textbrowser='.GETPOST('textbrowser', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('nojs', 'int')) {\n\t\t\t\t$paramsurl[] = 'nojs='.GETPOST('nojs', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('lang', 'aZ09')) {\n\t\t\t\t$paramsurl[] = 'lang='.GETPOST('lang', 'aZ09');\n\t\t\t}\n\t\t\theader('Location: '.DOL_URL_ROOT.'/index.php'.(count($paramsurl) ? '?'.implode('&', $paramsurl) : ''));\n\t\t\texit;\n\t\t} else {\n\t\t\t// User is loaded, we may need to change language for him according to its choice\n\t\t\tif (!empty($user->conf->MAIN_LANG_DEFAULT)) {\n\t\t\t\t$langs->setDefaultLang($user->conf->MAIN_LANG_DEFAULT);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// We are already into an authenticated session\n\t\t$login = $_SESSION[\"dol_login\"];\n\t\t$entity = isset($_SESSION[\"dol_entity\"]) ? $_SESSION[\"dol_entity\"] : 0;\n\t\tdol_syslog(\"- This is an already logged session. _SESSION['dol_login']=\".$login.\" _SESSION['dol_entity']=\".$entity, LOG_DEBUG);\n\n\t\t$resultFetchUser = $user->fetch('', $login, '', 1, ($entity > 0 ? $entity : -1));\n\n\t\t//var_dump(dol_print_date($user->flagdelsessionsbefore, 'dayhour', 'gmt').\" \".dol_print_date($_SESSION[\"dol_logindate\"], 'dayhour', 'gmt'));\n\n\t\tif ($resultFetchUser <= 0\n\t\t\t|| ($user->flagdelsessionsbefore && !empty($_SESSION[\"dol_logindate\"]) && $user->flagdelsessionsbefore > $_SESSION[\"dol_logindate\"])\n\t\t\t|| ($user->status != $user::STATUS_ENABLED)\n\t\t\t|| ($user->isNotIntoValidityDateRange())) {\n\t\t\tif ($resultFetchUser <= 0) {\n\t\t\t\t// Account has been removed after login\n\t\t\t\tdol_syslog(\"Can't load user even if session logged. _SESSION['dol_login']=\".$login, LOG_WARNING);\n\t\t\t} elseif ($user->flagdelsessionsbefore && !empty($_SESSION[\"dol_logindate\"]) && $user->flagdelsessionsbefore > $_SESSION[\"dol_logindate\"]) {\n\t\t\t\t// Session is no more valid\n\t\t\t\tdol_syslog(\"The user has a date for session invalidation = \".$user->flagdelsessionsbefore.\" and a session date = \".$_SESSION[\"dol_logindate\"].\". We must invalidate its sessions.\");\n\t\t\t} elseif ($user->status != $user::STATUS_ENABLED) {\n\t\t\t\t// User is not enabled\n\t\t\t\tdol_syslog(\"The user login is disabled\");\n\t\t\t} else {\n\t\t\t\t// User validity dates are no more valid\n\t\t\t\tdol_syslog(\"The user login has a validity between [\".$user->datestartvalidity.\" and \".$user->dateendvalidity.\"], curren date is \".dol_now());\n\t\t\t}\n\t\t\tsession_destroy();\n\t\t\tsession_set_cookie_params(0, '/', null, (empty($dolibarr_main_force_https) ? false : true), true); // Add tag secure and httponly on session cookie\n\t\t\tsession_name($sessionname);\n\t\t\tsession_start();\n\n\t\t\tif ($resultFetchUser == 0) {\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorCantLoadUserFromDolibarrDatabase\", $login);\n\n\t\t\t\t$user->trigger_mesg = 'ErrorCantLoadUserFromDolibarrDatabase - login='.$login;\n\t\t\t} elseif ($resultFetchUser < 0) {\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $user->error;\n\n\t\t\t\t$user->trigger_mesg = $user->error;\n\t\t\t} else {\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorSessionInvalidatedAfterPasswordChange\");\n\n\t\t\t\t$user->trigger_mesg = 'ErrorUserSessionWasInvalidated - login='.$login;\n\t\t\t}\n\n\t\t\t// Call trigger\n\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t// Hooks on failed login\n\t\t\t$action = '';\n\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t$parameters = array('dol_authmode' => (isset($dol_authmode) ? $dol_authmode : ''), 'dol_loginmesg' => $_SESSION[\"dol_loginmesg\"]);\n\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\tif ($reshook < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$paramsurl = array();\n\t\t\tif (GETPOST('textbrowser', 'int')) {\n\t\t\t\t$paramsurl[] = 'textbrowser='.GETPOST('textbrowser', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('nojs', 'int')) {\n\t\t\t\t$paramsurl[] = 'nojs='.GETPOST('nojs', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('lang', 'aZ09')) {\n\t\t\t\t$paramsurl[] = 'lang='.GETPOST('lang', 'aZ09');\n\t\t\t}\n\t\t\theader('Location: '.DOL_URL_ROOT.'/index.php'.(count($paramsurl) ? '?'.implode('&', $paramsurl) : ''));\n\t\t\texit;\n\t\t} else {\n\t\t\t// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n\t\t\t$hookmanager->initHooks(array('main'));\n\n\t\t\t// Code for search criteria persistence.\n\t\t\tif (!empty($_GET['save_lastsearch_values']) && !empty($_SERVER[\"HTTP_REFERER\"])) {    // We must use $_GET here\n\t\t\t\t$relativepathstring = preg_replace('/\\?.*$/', '', $_SERVER[\"HTTP_REFERER\"]);\n\t\t\t\t$relativepathstring = preg_replace('/^https?:\\/\\/[^\\/]*/', '', $relativepathstring); // Get full path except host server\n\t\t\t\t// Clean $relativepathstring\n\t\t\t\tif (constant('DOL_URL_ROOT')) {\n\t\t\t\t\t$relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t\t\t}\n\t\t\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t\t\t//var_dump($relativepathstring);\n\n\t\t\t\t// We click on a link that leave a page we have to save search criteria, contextpage, limit and page and mode. We save them from tmp to no tmp\n\t\t\t\tif (!empty($_SESSION['lastsearch_values_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_values_'.$relativepathstring] = $_SESSION['lastsearch_values_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_values_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_contextpage_'.$relativepathstring] = $_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]) && $_SESSION['lastsearch_limit_tmp_'.$relativepathstring] != $conf->liste_limit) {\n\t\t\t\t\t$_SESSION['lastsearch_limit_'.$relativepathstring] = $_SESSION['lastsearch_limit_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_page_tmp_'.$relativepathstring]) && $_SESSION['lastsearch_page_tmp_'.$relativepathstring] > 0) {\n\t\t\t\t\t$_SESSION['lastsearch_page_'.$relativepathstring] = $_SESSION['lastsearch_page_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_page_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_mode_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_mode_'.$relativepathstring] = $_SESSION['lastsearch_mode_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_mode_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action = '';\n\t\t\t$reshook = $hookmanager->executeHooks('updateSession', array(), $user, $action);\n\t\t\tif ($reshook < 0) {\n\t\t\t\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Is it a new session that has started ?\n\t// If we are here, this means authentication was successfull.\n\tif (!isset($_SESSION[\"dol_login\"])) {\n\t\t// New session for this login has started.\n\t\t$error = 0;\n\n\t\t// Store value into session (values always stored)\n\t\t$_SESSION[\"dol_login\"] = $user->login;\n\t\t$_SESSION[\"dol_logindate\"] = dol_now('gmt');\n\t\t$_SESSION[\"dol_authmode\"] = isset($dol_authmode) ? $dol_authmode : '';\n\t\t$_SESSION[\"dol_tz\"] = isset($dol_tz) ? $dol_tz : '';\n\t\t$_SESSION[\"dol_tz_string\"] = isset($dol_tz_string) ? $dol_tz_string : '';\n\t\t$_SESSION[\"dol_dst\"] = isset($dol_dst) ? $dol_dst : '';\n\t\t$_SESSION[\"dol_dst_observed\"] = isset($dol_dst_observed) ? $dol_dst_observed : '';\n\t\t$_SESSION[\"dol_dst_first\"] = isset($dol_dst_first) ? $dol_dst_first : '';\n\t\t$_SESSION[\"dol_dst_second\"] = isset($dol_dst_second) ? $dol_dst_second : '';\n\t\t$_SESSION[\"dol_screenwidth\"] = isset($dol_screenwidth) ? $dol_screenwidth : '';\n\t\t$_SESSION[\"dol_screenheight\"] = isset($dol_screenheight) ? $dol_screenheight : '';\n\t\t$_SESSION[\"dol_company\"] = getDolGlobalString(\"MAIN_INFO_SOCIETE_NOM\");\n\t\t$_SESSION[\"dol_entity\"] = $conf->entity;\n\t\t// Store value into session (values stored only if defined)\n\t\tif (!empty($dol_hide_topmenu)) {\n\t\t\t$_SESSION['dol_hide_topmenu'] = $dol_hide_topmenu;\n\t\t}\n\t\tif (!empty($dol_hide_leftmenu)) {\n\t\t\t$_SESSION['dol_hide_leftmenu'] = $dol_hide_leftmenu;\n\t\t}\n\t\tif (!empty($dol_optimize_smallscreen)) {\n\t\t\t$_SESSION['dol_optimize_smallscreen'] = $dol_optimize_smallscreen;\n\t\t}\n\t\tif (!empty($dol_no_mouse_hover)) {\n\t\t\t$_SESSION['dol_no_mouse_hover'] = $dol_no_mouse_hover;\n\t\t}\n\t\tif (!empty($dol_use_jmobile)) {\n\t\t\t$_SESSION['dol_use_jmobile'] = $dol_use_jmobile;\n\t\t}\n\n\t\tdol_syslog(\"This is a new started user session. _SESSION['dol_login']=\".$_SESSION[\"dol_login\"].\" Session id=\".session_id());\n\n\t\t$db->begin();\n\n\t\t$user->update_last_login_date();\n\n\t\t$loginfo = 'TZ='.$_SESSION[\"dol_tz\"].';TZString='.$_SESSION[\"dol_tz_string\"].';Screen='.$_SESSION[\"dol_screenwidth\"].'x'.$_SESSION[\"dol_screenheight\"];\n\n\t\t// Call triggers for the \"security events\" log\n\t\t$user->trigger_mesg = $loginfo;\n\n\t\t// Call trigger\n\t\t$result = $user->call_trigger('USER_LOGIN', $user);\n\t\tif ($result < 0) {\n\t\t\t$error++;\n\t\t}\n\t\t// End call triggers\n\n\t\t// Hooks on successfull login\n\t\t$action = '';\n\t\t$hookmanager->initHooks(array('login'));\n\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginfo'=>$loginfo);\n\t\t$reshook = $hookmanager->executeHooks('afterLogin', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook < 0) {\n\t\t\t$error++;\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$db->rollback();\n\t\t\tsession_destroy();\n\t\t\tdol_print_error($db, 'Error in some triggers USER_LOGIN or in some hooks afterLogin');\n\t\t\texit;\n\t\t} else {\n\t\t\t$db->commit();\n\t\t}\n\n\t\t// Change landing page if defined.\n\t\t$landingpage = (empty($user->conf->MAIN_LANDING_PAGE) ? (empty($conf->global->MAIN_LANDING_PAGE) ? '' : $conf->global->MAIN_LANDING_PAGE) : $user->conf->MAIN_LANDING_PAGE);\n\t\tif (!empty($landingpage)) {    // Example: /index.php\n\t\t\t$newpath = dol_buildpath($landingpage, 1);\n\t\t\tif ($_SERVER[\"PHP_SELF\"] != $newpath) {   // not already on landing page (avoid infinite loop)\n\t\t\t\theader('Location: '.$newpath);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If user admin, we force the rights-based modules\n\tif ($user->admin) {\n\t\t$user->rights->user->user->lire = 1;\n\t\t$user->rights->user->user->creer = 1;\n\t\t$user->rights->user->user->password = 1;\n\t\t$user->rights->user->user->supprimer = 1;\n\t\t$user->rights->user->self->creer = 1;\n\t\t$user->rights->user->self->password = 1;\n\n\t\t//Required if advanced permissions are used with MAIN_USE_ADVANCED_PERMS\n\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS)) {\n\t\t\tif (empty($user->rights->user->user_advance)) {\n\t\t\t\t$user->rights->user->user_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\tif (empty($user->rights->user->self_advance)) {\n\t\t\t\t$user->rights->user->self_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\tif (empty($user->rights->user->group_advance)) {\n\t\t\t\t$user->rights->user->group_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\n\t\t\t$user->rights->user->user_advance->readperms = 1;\n\t\t\t$user->rights->user->user_advance->write = 1;\n\t\t\t$user->rights->user->self_advance->readperms = 1;\n\t\t\t$user->rights->user->self_advance->writeperms = 1;\n\t\t\t$user->rights->user->group_advance->read = 1;\n\t\t\t$user->rights->user->group_advance->readperms = 1;\n\t\t\t$user->rights->user->group_advance->write = 1;\n\t\t\t$user->rights->user->group_advance->delete = 1;\n\t\t}\n\t}\n\n\t/*\n\t * Overwrite some configs globals (try to avoid this and have code to use instead $user->conf->xxx)\n\t */\n\n\t// Set liste_limit\n\tif (isset($user->conf->MAIN_SIZE_LISTE_LIMIT)) {\n\t\t$conf->liste_limit = $user->conf->MAIN_SIZE_LISTE_LIMIT; // Can be 0\n\t}\n\tif (isset($user->conf->PRODUIT_LIMIT_SIZE)) {\n\t\t$conf->product->limit_size = $user->conf->PRODUIT_LIMIT_SIZE; // Can be 0\n\t}\n\n\t// Replace conf->css by personalized value if theme not forced\n\tif (empty($conf->global->MAIN_FORCETHEME) && !empty($user->conf->MAIN_THEME)) {\n\t\t$conf->theme = $user->conf->MAIN_THEME;\n\t\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n\t}\n} else {\n\t// We may have NOLOGIN set, but NOREQUIREUSER not\n\tif (!empty($user) && method_exists($user, 'loadDefaultValues')) {\n\t\t$user->loadDefaultValues();\t\t// Load default values for everybody (works even if $user->id = 0\n\t}\n}\n\n\n// Case forcing style from url\nif (GETPOST('theme', 'aZ09')) {\n\t$conf->theme = GETPOST('theme', 'aZ09', 1);\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\n// Set javascript option\nif (GETPOST('nojs', 'int')) {  // If javascript was not disabled on URL\n\t$conf->use_javascript_ajax = 0;\n} else {\n\tif (!empty($user->conf->MAIN_DISABLE_JAVASCRIPT)) {\n\t\t$conf->use_javascript_ajax = !$user->conf->MAIN_DISABLE_JAVASCRIPT;\n\t}\n}\n\n// Set MAIN_OPTIMIZEFORTEXTBROWSER for user (must be after login part)\nif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && !empty($user->conf->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t$conf->global->MAIN_OPTIMIZEFORTEXTBROWSER = $user->conf->MAIN_OPTIMIZEFORTEXTBROWSER;\n}\n\n// set MAIN_OPTIMIZEFORCOLORBLIND for user\n$conf->global->MAIN_OPTIMIZEFORCOLORBLIND = empty($user->conf->MAIN_OPTIMIZEFORCOLORBLIND) ? '' : $user->conf->MAIN_OPTIMIZEFORCOLORBLIND;\n\n// Set terminal output option according to conf->browser.\nif (GETPOST('dol_hide_leftmenu', 'int') || !empty($_SESSION['dol_hide_leftmenu'])) {\n\t$conf->dol_hide_leftmenu = 1;\n}\nif (GETPOST('dol_hide_topmenu', 'int') || !empty($_SESSION['dol_hide_topmenu'])) {\n\t$conf->dol_hide_topmenu = 1;\n}\nif (GETPOST('dol_optimize_smallscreen', 'int') || !empty($_SESSION['dol_optimize_smallscreen'])) {\n\t$conf->dol_optimize_smallscreen = 1;\n}\nif (GETPOST('dol_no_mouse_hover', 'int') || !empty($_SESSION['dol_no_mouse_hover'])) {\n\t$conf->dol_no_mouse_hover = 1;\n}\nif (GETPOST('dol_use_jmobile', 'int') || !empty($_SESSION['dol_use_jmobile'])) {\n\t$conf->dol_use_jmobile = 1;\n}\n// If not on Desktop\nif (!empty($conf->browser->layout) && $conf->browser->layout != 'classic') {\n\t$conf->dol_no_mouse_hover = 1;\n}\n\n// If on smartphone or optmized for small screen\nif ((!empty($conf->browser->layout) && $conf->browser->layout == 'phone')\n\t|| (!empty($_SESSION['dol_screenwidth']) && $_SESSION['dol_screenwidth'] < 400)\n\t|| (!empty($_SESSION['dol_screenheight']) && $_SESSION['dol_screenheight'] < 400\n\t|| !empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n) {\n\t$conf->dol_optimize_smallscreen = 1;\n\n\tif (isset($conf->global->PRODUIT_DESC_IN_FORM) && $conf->global->PRODUIT_DESC_IN_FORM == 1) {\n\t\t$conf->global->PRODUIT_DESC_IN_FORM_ACCORDING_TO_DEVICE = 0;\n\t}\n}\n// Replace themes bugged with jmobile with eldy\nif (!empty($conf->dol_use_jmobile) && in_array($conf->theme, array('bureau2crea', 'cameleo', 'amarok'))) {\n\t$conf->theme = 'eldy';\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\nif (!defined('NOREQUIRETRAN')) {\n\tif (!GETPOST('lang', 'aZ09')) {\t// If language was not forced on URL\n\t\t// If user has chosen its own language\n\t\tif (!empty($user->conf->MAIN_LANG_DEFAULT)) {\n\t\t\t// If different than current language\n\t\t\t//print \">>>\".$langs->getDefaultLang().\"-\".$user->conf->MAIN_LANG_DEFAULT;\n\t\t\tif ($langs->getDefaultLang() != $user->conf->MAIN_LANG_DEFAULT) {\n\t\t\t\t$langs->setDefaultLang($user->conf->MAIN_LANG_DEFAULT);\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (!defined('NOLOGIN')) {\n\t// If the login is not recovered, it is identified with an account that does not exist.\n\t// Hacking attempt?\n\tif (!$user->login) {\n\t\taccessforbidden();\n\t}\n\n\t// Check if user is active\n\tif ($user->statut < 1) {\n\t\t// If not active, we refuse the user\n\t\t$langs->loadLangs(array(\"errors\", \"other\"));\n\t\tdol_syslog(\"Authentication KO as login is disabled\", LOG_NOTICE);\n\t\taccessforbidden(\"ErrorLoginDisabled\");\n\t}\n\n\t// Load permissions\n\t$user->getrights();\n}\n\ndol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].' - action='.GETPOST('action', 'aZ09').', massaction='.GETPOST('massaction', 'aZ09').(defined('NOTOKENRENEWAL') ? ' NOTOKENRENEWAL='.constant('NOTOKENRENEWAL') : ''), LOG_NOTICE);\n//Another call for easy debugg\n//dol_syslog(\"Access to \".$_SERVER[\"PHP_SELF\"].' '.$_SERVER[\"HTTP_REFERER\"].' GET='.join(',',array_keys($_GET)).'->'.join(',',$_GET).' POST:'.join(',',array_keys($_POST)).'->'.join(',',$_POST));\n\n// Load main languages files\nif (!defined('NOREQUIRETRAN')) {\n\t// Load translation files required by page\n\t$langs->loadLangs(array('main', 'dict'));\n}\n\n// Define some constants used for style of arrays\n$bc = array(0=>'class=\"impair\"', 1=>'class=\"pair\"');\n$bcdd = array(0=>'class=\"drag drop oddeven\"', 1=>'class=\"drag drop oddeven\"');\n$bcnd = array(0=>'class=\"nodrag nodrop nohover\"', 1=>'class=\"nodrag nodrop nohoverpair\"'); // Used for tr to add new lines\n$bctag = array(0=>'class=\"impair tagtr\"', 1=>'class=\"pair tagtr\"');\n\n// Define messages variables\n$mesg = ''; $warning = ''; $error = 0;\n// deprecated, see setEventMessages() and dol_htmloutput_events()\n$mesgs = array(); $warnings = array(); $errors = array();\n\n// Constants used to defined number of lines in textarea\nif (empty($conf->browser->firefox)) {\n\tdefine('ROWS_1', 1);\n\tdefine('ROWS_2', 2);\n\tdefine('ROWS_3', 3);\n\tdefine('ROWS_4', 4);\n\tdefine('ROWS_5', 5);\n\tdefine('ROWS_6', 6);\n\tdefine('ROWS_7', 7);\n\tdefine('ROWS_8', 8);\n\tdefine('ROWS_9', 9);\n} else {\n\tdefine('ROWS_1', 0);\n\tdefine('ROWS_2', 1);\n\tdefine('ROWS_3', 2);\n\tdefine('ROWS_4', 3);\n\tdefine('ROWS_5', 4);\n\tdefine('ROWS_6', 5);\n\tdefine('ROWS_7', 6);\n\tdefine('ROWS_8', 7);\n\tdefine('ROWS_9', 8);\n}\n\n$heightforframes = 50;\n\n// Init menu manager\nif (!defined('NOREQUIREMENU')) {\n\tif (empty($user->socid)) {    // If internal user or not defined\n\t\t$conf->standard_menu = (empty($conf->global->MAIN_MENU_STANDARD_FORCED) ? (empty($conf->global->MAIN_MENU_STANDARD) ? 'eldy_menu.php' : $conf->global->MAIN_MENU_STANDARD) : $conf->global->MAIN_MENU_STANDARD_FORCED);\n\t} else {\n\t\t// If external user\n\t\t$conf->standard_menu = (empty($conf->global->MAIN_MENUFRONT_STANDARD_FORCED) ? (empty($conf->global->MAIN_MENUFRONT_STANDARD) ? 'eldy_menu.php' : $conf->global->MAIN_MENUFRONT_STANDARD) : $conf->global->MAIN_MENUFRONT_STANDARD_FORCED);\n\t}\n\n\t// Load the menu manager (only if not already done)\n\t$file_menu = $conf->standard_menu;\n\tif (GETPOST('menu', 'alpha')) {\n\t\t$file_menu = GETPOST('menu', 'alpha'); // example: menu=eldy_menu.php\n\t}\n\tif (!class_exists('MenuManager')) {\n\t\t$menufound = 0;\n\t\t$dirmenus = array_merge(array(\"/core/menus/\"), (array) $conf->modules_parts['menus']);\n\t\tforeach ($dirmenus as $dirmenu) {\n\t\t\t$menufound = dol_include_once($dirmenu.\"standard/\".$file_menu);\n\t\t\tif (class_exists('MenuManager')) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!class_exists('MenuManager')) {\t// If failed to include, we try with standard eldy_menu.php\n\t\t\tdol_syslog(\"You define a menu manager '\".$file_menu.\"' that can not be loaded.\", LOG_WARNING);\n\t\t\t$file_menu = 'eldy_menu.php';\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.\"/core/menus/standard/\".$file_menu;\n\t\t}\n\t}\n\t$menumanager = new MenuManager($db, empty($user->socid) ? 0 : 1);\n\t$menumanager->loadMenu();\n}\n\n\n\n// Functions\n\nif (!function_exists(\"llxHeader\")) {\n\t/**\n\t *\tShow HTML header HTML + BODY + Top menu + left menu + DIV\n\t *\n\t * @param \tstring \t\t\t$head\t\t\t\tOptionnal head lines\n\t * @param \tstring \t\t\t$title\t\t\t\tHTML title\n\t * @param\tstring\t\t\t$help_url\t\t\tUrl links to help page\n\t * \t\t                            \t\t\tSyntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n\t *                                  \t\t\tFor other external page: http://server/url\n\t * @param\tstring\t\t\t$target\t\t\t\tTarget to use on links\n\t * @param \tint    \t\t\t$disablejs\t\t\tMore content into html header\n\t * @param \tint    \t\t\t$disablehead\t\tMore content into html header\n\t * @param \tarray|string  \t$arrayofjs\t\t\tArray of complementary js files\n\t * @param \tarray|string  \t$arrayofcss\t\t\tArray of complementary css files\n\t * @param\tstring\t\t\t$morequerystring\tQuery string to add to the link \"print\" to get same parameters (use only if autodetect fails)\n\t * @param   string  \t\t$morecssonbody      More CSS on body tag. For example 'classforhorizontalscrolloftabs'.\n\t * @param\tstring\t\t\t$replacemainareaby\tReplace call to main_area() by a print of this string\n\t * @param\tint\t\t\t\t$disablenofollow\tDisable the \"nofollow\" on meta robot header\n\t * @param\tint\t\t\t\t$disablenoindex\t\tDisable the \"noindex\" on meta robot header\n\t * @return\tvoid\n\t */\n\tfunction llxHeader($head = '', $title = '', $help_url = '', $target = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $morequerystring = '', $morecssonbody = '', $replacemainareaby = '', $disablenofollow = 0, $disablenoindex = 0)\n\t{\n\t\tglobal $conf, $hookmanager;\n\n\t\t// html header\n\t\ttop_htmlhead($head, $title, $disablejs, $disablehead, $arrayofjs, $arrayofcss, 0, $disablenofollow, $disablenoindex);\n\n\t\t$tmpcsstouse = 'sidebar-collapse'.($morecssonbody ? ' '.$morecssonbody : '');\n\t\t// If theme MD and classic layer, we open the menulayer by default.\n\t\tif ($conf->theme == 'md' && !in_array($conf->browser->layout, array('phone', 'tablet')) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\tglobal $mainmenu;\n\t\t\tif ($mainmenu != 'website') {\n\t\t\t\t$tmpcsstouse = $morecssonbody; // We do not use sidebar-collpase by default to have menuhider open by default.\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORCOLORBLIND)) {\n\t\t\t$tmpcsstouse .= ' colorblind-'.strip_tags($conf->global->MAIN_OPTIMIZEFORCOLORBLIND);\n\t\t}\n\n\t\tprint '<body id=\"mainbody\" class=\"'.$tmpcsstouse.'\">'.\"\\n\";\n\n\t\t$parameters = array('help_url' => $help_url);\n\t\t$reshook = $hookmanager->executeHooks('changeHelpURL', $parameters);\n\t\tif ($reshook > 0) {\n\t\t\t$help_url = $hookmanager->resPrint;\n\t\t}\n\n\t\t// top menu and left menu area\n\t\tif ((empty($conf->dol_hide_topmenu) || GETPOST('dol_invisible_topmenu', 'int')) && !GETPOST('dol_openinpopup', 'aZ09')) {\n\t\t\ttop_menu($head, $title, $target, $disablejs, $disablehead, $arrayofjs, $arrayofcss, $morequerystring, $help_url);\n\t\t}\n\n\t\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup', 'aZ09')) {\n\t\t\tleft_menu(array(), $help_url, '', '', 1, $title, 1); // $menumanager is retrieved with a global $menumanager inside this function\n\t\t}\n\n\t\t// main area\n\t\tif ($replacemainareaby) {\n\t\t\tprint $replacemainareaby;\n\t\t\treturn;\n\t\t}\n\t\tmain_area($title);\n\t}\n}\n\n\n/**\n *  Show HTTP header. Called by top_htmlhead().\n *\n *  @param  string  $contenttype    Content type. For example, 'text/html'\n *  @param\tint\t\t$forcenocache\tForce disabling of cache for the page\n *  @return\tvoid\n */\nfunction top_httphead($contenttype = 'text/html', $forcenocache = 0)\n{\n\tglobal $db, $conf, $hookmanager;\n\n\tif ($contenttype == 'text/html') {\n\t\theader(\"Content-Type: text/html; charset=\".$conf->file->character_set_client);\n\t} else {\n\t\theader(\"Content-Type: \".$contenttype);\n\t}\n\n\t// Security options\n\n\t// X-Content-Type-Options\n\theader(\"X-Content-Type-Options: nosniff\"); // With the nosniff option, if the server says the content is text/html, the browser will render it as text/html (note that most browsers now force this option to on)\n\n\t// X-Frame-Options\n\tif (!defined('XFRAMEOPTIONS_ALLOWALL')) {\n\t\theader(\"X-Frame-Options: SAMEORIGIN\"); // Frames allowed only if on same domain (stop some XSS attacks)\n\t} else {\n\t\theader(\"X-Frame-Options: ALLOWALL\");\n\t}\n\n\t// X-XSS-Protection\n\t//header(\"X-XSS-Protection: 1\");      \t\t// XSS filtering protection of some browsers (note: use of Content-Security-Policy is more efficient). Disabled as deprecated.\n\n\t// Content-Security-Policy\n\tif (!defined('MAIN_SECURITY_FORCECSP')) {\n\t\t// If CSP not forced from the page\n\n\t\t// A default security policy that keep usage of js external component like ckeditor, stripe, google, working\n\t\t//\t$contentsecuritypolicy = \"frame-ancestors 'self'; font-src *; img-src *; style-src * 'unsafe-inline' 'unsafe-eval'; default-src 'self' *.stripe.com 'unsafe-inline' 'unsafe-eval'; script-src 'self' *.stripe.com 'unsafe-inline' 'unsafe-eval'; frame-src 'self' *.stripe.com; connect-src 'self';\";\n\t\t$contentsecuritypolicy = getDolGlobalString('MAIN_SECURITY_FORCECSP');\n\n\t\tif (!is_object($hookmanager)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/hookmanager.class.php';\n\t\t\t$hookmanager = new HookManager($db);\n\t\t}\n\t\t$hookmanager->initHooks(array(\"main\"));\n\n\t\t$parameters = array('contentsecuritypolicy'=>$contentsecuritypolicy);\n\t\t$result = $hookmanager->executeHooks('setContentSecurityPolicy', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif ($result > 0) {\n\t\t\t$contentsecuritypolicy = $hookmanager->resPrint; // Replace CSP\n\t\t} else {\n\t\t\t$contentsecuritypolicy .= $hookmanager->resPrint; // Concat CSP\n\t\t}\n\n\t\tif (!empty($contentsecuritypolicy)) {\n\t\t\t// For example, to restrict 'script', 'object', 'frames' or 'img' to some domains:\n\t\t\t// frame-ancestors 'self'; script-src https://api.google.com https://anotherhost.com; object-src https://youtube.com; frame-src https://youtube.com; img-src https://static.example.com\n\t\t\t// For example, to restrict everything to one domain, except 'object', ...:\n\t\t\t// default-src https://cdn.example.net; object-src 'none'\n\t\t\t// For example, to restrict everything to itself except img that can be on other servers:\n\t\t\t// default-src 'self'; img-src *;\n\t\t\t// Pre-existing site that uses too much js code to fix but wants to ensure resources are loaded only over https and disable plugins:\n\t\t\t// default-src https: 'unsafe-inline' 'unsafe-eval'; object-src 'none'\n\t\t\theader(\"Content-Security-Policy: \".$contentsecuritypolicy);\n\t\t}\n\t} else {\n\t\theader(\"Content-Security-Policy: \".constant('MAIN_SECURITY_FORCECSP'));\n\t}\n\n\t// Referrer-Policy\n\t// Say if we must provide the referrer when we jump onto another web page.\n\t// Default browser are 'strict-origin-when-cross-origin' (only domain is sent on other domain switching), we want more so we use 'same-origin' so browser doesn't send any referrer when going into another web site domain.\n\tif (!defined('MAIN_SECURITY_FORCERP')) {\n\t\t$referrerpolicy = getDolGlobalString('MAIN_SECURITY_FORCERP', \"same-origin\");\n\n\t\theader(\"Referrer-Policy: \".$referrerpolicy);\n\t}\n\n\tif ($forcenocache) {\n\t\theader(\"Cache-Control: no-cache, no-store, must-revalidate, max-age=0\");\n\t}\n\n\t// No need to add this token in header, we use instead the one into the forms.\n\t//header(\"anti-csrf-token: \".newToken());\n}\n\n/**\n * Ouput html header of a page. It calls also top_httphead()\n * This code is also duplicated into security2.lib.php::dol_loginfunction\n *\n * @param \tstring \t$head\t\t\t Optionnal head lines\n * @param \tstring \t$title\t\t\t HTML title\n * @param \tint    \t$disablejs\t\t Disable js output\n * @param \tint    \t$disablehead\t Disable head output\n * @param \tarray  \t$arrayofjs\t\t Array of complementary js files\n * @param \tarray  \t$arrayofcss\t\t Array of complementary css files\n * @param \tint    \t$disableforlogin Do not load heavy js and css for login pages\n * @param   int     $disablenofollow Disable nofollow tag for meta robots\n * @param   int     $disablenoindex  Disable noindex tag for meta robots\n * @return\tvoid\n */\nfunction top_htmlhead($head, $title = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $disableforlogin = 0, $disablenofollow = 0, $disablenoindex = 0)\n{\n\tglobal $db, $conf, $langs, $user, $mysoc, $hookmanager;\n\n\ttop_httphead();\n\n\tif (empty($conf->css)) {\n\t\t$conf->css = '/theme/eldy/style.css.php'; // If not defined, eldy by default\n\t}\n\n\tprint '<!doctype html>'.\"\\n\";\n\n\tprint '<html lang=\"'.substr($langs->defaultlang, 0, 2).'\">'.\"\\n\";\n\n\t//print '<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"fr\">'.\"\\n\";\n\tif (empty($disablehead)) {\n\t\tif (!is_object($hookmanager)) {\n\t\t\t$hookmanager = new HookManager($db);\n\t\t}\n\t\t$hookmanager->initHooks(array(\"main\"));\n\n\t\t$ext = 'layout='.$conf->browser->layout.'&amp;version='.urlencode(DOL_VERSION);\n\n\t\tprint \"<head>\\n\";\n\n\t\tif (GETPOST('dol_basehref', 'alpha')) {\n\t\t\tprint '<base href=\"'.dol_escape_htmltag(GETPOST('dol_basehref', 'alpha')).'\">'.\"\\n\";\n\t\t}\n\n\t\t// Displays meta\n\t\tprint '<meta charset=\"utf-8\">'.\"\\n\";\n\t\tprint '<meta name=\"robots\" content=\"'.($disablenoindex ? 'index' : 'noindex').($disablenofollow ? ',follow' : ',nofollow').'\">'.\"\\n\"; // Do not index\n\t\tprint '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">'.\"\\n\"; // Scale for mobile device\n\t\tprint '<meta name=\"author\" content=\"Dolibarr Development Team\">'.\"\\n\";\n\t\tprint '<meta name=\"anti-csrf-newtoken\" content=\"'.newToken().'\">'.\"\\n\";\n\t\tprint '<meta name=\"anti-csrf-currenttoken\" content=\"'.currentToken().'\">'.\"\\n\";\n\t\tif (getDolGlobalInt('MAIN_FEATURES_LEVEL')) {\n\t\t\tprint '<meta name=\"MAIN_FEATURES_LEVEL\" content=\"'.getDolGlobalInt('MAIN_FEATURES_LEVEL').'\">'.\"\\n\";\n\t\t}\n\t\t// Favicon\n\t\t$favicon = DOL_URL_ROOT.'/theme/dolibarr_256x256_color.png';\n\t\tif (!empty($mysoc->logo_squarred_mini)) {\n\t\t\t$favicon = DOL_URL_ROOT.'/viewimage.php?cache=1&modulepart=mycompany&file='.urlencode('logos/thumbs/'.$mysoc->logo_squarred_mini);\n\t\t}\n\t\tif (getDolGlobalString('MAIN_FAVICON_URL')) {\n\t\t\t$favicon = getDolGlobalString('MAIN_FAVICON_URL');\n\t\t}\n\t\tif (empty($conf->dol_use_jmobile)) {\n\t\t\tprint '<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"'.$favicon.'\"/>'.\"\\n\"; // Not required into an Android webview\n\t\t}\n\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"top\" title=\"'.$langs->trans(\"Home\").'\" href=\"'.(DOL_URL_ROOT?DOL_URL_ROOT:'/').'\">'.\"\\n\";\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"copyright\" title=\"GNU General Public License\" href=\"https://www.gnu.org/copyleft/gpl.html#SEC1\">'.\"\\n\";\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"author\" title=\"Dolibarr Development Team\" href=\"https://www.dolibarr.org\">'.\"\\n\";\n\n\t\t// Mobile appli like icon\n\t\t$manifest = DOL_URL_ROOT.'/theme/'.$conf->theme.'/manifest.json.php';\n\t\tif (!empty($manifest)) {\n\t\t\tprint '<link rel=\"manifest\" href=\"'.$manifest.'\" />'.\"\\n\";\n\t\t}\n\n\t\tif (!empty($conf->global->THEME_ELDY_TOPMENU_BACK1)) {\n\t\t\t// TODO: use auto theme color switch\n\t\t\tprint '<meta name=\"theme-color\" content=\"rgb('.$conf->global->THEME_ELDY_TOPMENU_BACK1.')\">'.\"\\n\";\n\t\t}\n\n\t\t// Auto refresh page\n\t\tif (GETPOST('autorefresh', 'int') > 0) {\n\t\t\tprint '<meta http-equiv=\"refresh\" content=\"'.GETPOST('autorefresh', 'int').'\">';\n\t\t}\n\n\t\t// Displays title\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t}\n\n\t\tprint '<title>';\n\t\t$titletoshow = '';\n\t\tif ($title && !empty($conf->global->MAIN_HTML_TITLE) && preg_match('/noapp/', $conf->global->MAIN_HTML_TITLE)) {\n\t\t\t$titletoshow = dol_htmlentities($title);\n\t\t} elseif ($title) {\n\t\t\t$titletoshow = dol_htmlentities($appli.' - '.$title);\n\t\t} else {\n\t\t\t$titletoshow = dol_htmlentities($appli);\n\t\t}\n\n\t\t$parameters = array('title'=>$titletoshow);\n\t\t$result = $hookmanager->executeHooks('setHtmlTitle', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif ($result > 0) {\n\t\t\t$titletoshow = $hookmanager->resPrint; // Replace Title to show\n\t\t} else {\n\t\t\t$titletoshow .= $hookmanager->resPrint; // Concat to Title to show\n\t\t}\n\n\t\tprint $titletoshow;\n\t\tprint '</title>';\n\n\t\tprint \"\\n\";\n\n\t\tif (GETPOST('version', 'int')) {\n\t\t\t$ext = 'version='.GETPOST('version', 'int'); // usefull to force no cache on css/js\n\t\t}\n\t\t// Refresh value of MAIN_IHM_PARAMS_REV before forging the parameter line.\n\t\tif (GETPOST('dol_resetcache')) {\n\t\t\tdolibarr_set_const($db, \"MAIN_IHM_PARAMS_REV\", ((int) $conf->global->MAIN_IHM_PARAMS_REV) + 1, 'chaine', 0, '', $conf->entity);\n\t\t}\n\n\t\t$themeparam = '?lang='.$langs->defaultlang.'&amp;theme='.$conf->theme.(GETPOST('optioncss', 'aZ09') ? '&amp;optioncss='.GETPOST('optioncss', 'aZ09', 1) : '').(empty($user->id) ? '' : ('&amp;userid='.$user->id)).'&amp;entity='.$conf->entity;\n\n\t\t$themeparam .= ($ext ? '&amp;'.$ext : '').'&amp;revision='.getDolGlobalInt(\"MAIN_IHM_PARAMS_REV\");\n\t\tif (GETPOSTISSET('dol_hide_topmenu')) {\n\t\t\t$themeparam .= '&amp;dol_hide_topmenu='.GETPOST('dol_hide_topmenu', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_hide_leftmenu')) {\n\t\t\t$themeparam .= '&amp;dol_hide_leftmenu='.GETPOST('dol_hide_leftmenu', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_optimize_smallscreen')) {\n\t\t\t$themeparam .= '&amp;dol_optimize_smallscreen='.GETPOST('dol_optimize_smallscreen', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_no_mouse_hover')) {\n\t\t\t$themeparam .= '&amp;dol_no_mouse_hover='.GETPOST('dol_no_mouse_hover', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_use_jmobile')) {\n\t\t\t$themeparam .= '&amp;dol_use_jmobile='.GETPOST('dol_use_jmobile', 'int'); $conf->dol_use_jmobile = GETPOST('dol_use_jmobile', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('THEME_DARKMODEENABLED')) {\n\t\t\t$themeparam .= '&amp;THEME_DARKMODEENABLED='.GETPOST('THEME_DARKMODEENABLED', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('THEME_SATURATE_RATIO')) {\n\t\t\t$themeparam .= '&amp;THEME_SATURATE_RATIO='.GETPOST('THEME_SATURATE_RATIO', 'int');\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_ENABLE_FONT_ROBOTO)) {\n\t\t\tprint '<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">'.\"\\n\";\n\t\t\tprint '<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@200;300;400;500;600&display=swap\" rel=\"stylesheet\">'.\"\\n\";\n\t\t}\n\n\t\tif (!defined('DISABLE_JQUERY') && !$disablejs && $conf->use_javascript_ajax) {\n\t\t\tprint '<!-- Includes CSS for JQuery (Ajax library) -->'.\"\\n\";\n\t\t\t$jquerytheme = 'base';\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_THEME)) {\n\t\t\t\t$jquerytheme = $conf->global->MAIN_USE_JQUERY_THEME;\n\t\t\t}\n\t\t\tif (constant('JS_JQUERY_UI')) {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.JS_JQUERY_UI.'css/'.$jquerytheme.'/jquery-ui.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // Forced JQuery\n\t\t\t} else {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/css/'.$jquerytheme.'/jquery-ui.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // JQuery\n\t\t\t}\n\t\t\tif (!defined('DISABLE_JQUERY_JNOTIFY')) {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jnotify/jquery.jnotify-alt.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // JNotify\n\t\t\t}\n\t\t\tif (!defined('DISABLE_SELECT2') && (!empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) || defined('REQUIRE_JQUERY_MULTISELECT'))) {     // jQuery plugin \"mutiselect\", \"multiple-select\", \"select2\"...\n\t\t\t\t$tmpplugin = empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) ?constant('REQUIRE_JQUERY_MULTISELECT') : $conf->global->MAIN_USE_JQUERY_MULTISELECT;\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/'.$tmpplugin.'/dist/css/'.$tmpplugin.'.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!defined('DISABLE_FONT_AWSOME')) {\n\t\t\tprint '<!-- Includes CSS for font awesome -->'.\"\\n\";\n\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/theme/common/fontawesome-5/css/all.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/theme/common/fontawesome-5/css/v4-shims.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t}\n\n\t\tprint '<!-- Includes CSS for Dolibarr theme -->'.\"\\n\";\n\t\t// Output style sheets (optioncss='print' or ''). Note: $conf->css looks like '/theme/eldy/style.css.php'\n\t\t$themepath = dol_buildpath($conf->css, 1);\n\t\t$themesubdir = '';\n\t\tif (!empty($conf->modules_parts['theme'])) {\t// This slow down\n\t\t\tforeach ($conf->modules_parts['theme'] as $reldir) {\n\t\t\t\tif (file_exists(dol_buildpath($reldir.$conf->css, 0))) {\n\t\t\t\t\t$themepath = dol_buildpath($reldir.$conf->css, 1);\n\t\t\t\t\t$themesubdir = $reldir;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//print 'themepath='.$themepath.' themeparam='.$themeparam;exit;\n\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$themepath.$themeparam.'\">'.\"\\n\";\n\t\tif (!empty($conf->global->MAIN_FIX_FLASH_ON_CHROME)) {\n\t\t\tprint '<!-- Includes CSS that does not exists as a workaround of flash bug of chrome -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" href=\"filethatdoesnotexiststosolvechromeflashbug\">'.\"\\n\";\n\t\t}\n\n\t\t// CSS forced by modules (relative url starting with /)\n\t\tif (!empty($conf->modules_parts['css'])) {\n\t\t\t$arraycss = (array) $conf->modules_parts['css'];\n\t\t\tforeach ($arraycss as $modcss => $filescss) {\n\t\t\t\t$filescss = (array) $filescss; // To be sure filecss is an array\n\t\t\t\tforeach ($filescss as $cssfile) {\n\t\t\t\t\tif (empty($cssfile)) {\n\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modcss.\" declared a css path file into its descriptor that is empty.\", LOG_WARNING);\n\t\t\t\t\t}\n\t\t\t\t\t// cssfile is a relative path\n\t\t\t\t\t$urlforcss = dol_buildpath($cssfile, 1);\n\t\t\t\t\tif ($urlforcss && $urlforcss != '/') {\n\t\t\t\t\t\tprint '<!-- Includes CSS added by module '.$modcss.' -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$urlforcss;\n\t\t\t\t\t\t// We add params only if page is not static, because some web server setup does not return content type text/css if url has parameters, so browser cache is not used.\n\t\t\t\t\t\tif (!preg_match('/\\.css$/i', $cssfile)) {\n\t\t\t\t\t\t\tprint $themeparam;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '\">'.\"\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modcss.\" declared a css path file for a file we can't find.\", LOG_WARNING);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// CSS forced by page in top_htmlhead call (relative url starting with /)\n\t\tif (is_array($arrayofcss)) {\n\t\t\tforeach ($arrayofcss as $cssfile) {\n\t\t\t\tif (preg_match('/^(http|\\/\\/)/i', $cssfile)) {\n\t\t\t\t\t$urltofile = $cssfile;\n\t\t\t\t} else {\n\t\t\t\t\t$urltofile = dol_buildpath($cssfile, 1);\n\t\t\t\t}\n\t\t\t\tprint '<!-- Includes CSS added by page -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" title=\"default\" href=\"'.$urltofile;\n\t\t\t\t// We add params only if page is not static, because some web server setup does not return content type text/css if url has parameters and browser cache is not used.\n\t\t\t\tif (!preg_match('/\\.css$/i', $cssfile)) {\n\t\t\t\t\tprint $themeparam;\n\t\t\t\t}\n\t\t\t\tprint '\">'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\t// Output standard javascript links\n\t\tif (!defined('DISABLE_JQUERY') && !$disablejs && !empty($conf->use_javascript_ajax)) {\n\t\t\t// JQuery. Must be before other includes\n\t\t\tprint '<!-- Includes JS for JQuery -->'.\"\\n\";\n\t\t\tif (defined('JS_JQUERY') && constant('JS_JQUERY')) {\n\t\t\t\tprint '<script src=\"'.JS_JQUERY.'jquery.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t} else {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/js/jquery.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\tif (defined('JS_JQUERY_UI') && constant('JS_JQUERY_UI')) {\n\t\t\t\tprint '<script src=\"'.JS_JQUERY_UI.'jquery-ui.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t} else {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/js/jquery-ui.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// jQuery jnotify\n\t\t\tif (empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && !defined('DISABLE_JQUERY_JNOTIFY')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jnotify/jquery.jnotify.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// Table drag and drop lines\n\t\t\tif (empty($disableforlogin) && !defined('DISABLE_JQUERY_TABLEDND')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/tablednd/jquery.tablednd.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// Chart\n\t\t\tif (empty($disableforlogin) && (empty($conf->global->MAIN_JS_GRAPH) || $conf->global->MAIN_JS_GRAPH == 'chart') && !defined('DISABLE_JS_GRAPH')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/nnnick/chartjs/dist/chart.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// jQuery jeditable for Edit In Place features\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_JEDITABLE) && !defined('DISABLE_JQUERY_JEDITABLE')) {\n\t\t\t\tprint '<!-- JS to manage editInPlace feature -->'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ui-datepicker.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ui-autocomplete.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script>'.\"\\n\";\n\t\t\t\tprint 'var urlSaveInPlace = \\''.DOL_URL_ROOT.'/core/ajax/saveinplace.php\\';'.\"\\n\";\n\t\t\t\tprint 'var urlLoadInPlace = \\''.DOL_URL_ROOT.'/core/ajax/loadinplace.php\\';'.\"\\n\";\n\t\t\t\tprint 'var tooltipInPlace = \\''.$langs->transnoentities('ClickToEdit').'\\';'.\"\\n\"; // Added in title attribute of span\n\t\t\t\tprint 'var placeholderInPlace = \\'&nbsp;\\';'.\"\\n\"; // If we put another string than $langs->trans(\"ClickToEdit\") here, nothing is shown. If we put empty string, there is error, Why ?\n\t\t\t\tprint 'var cancelInPlace = \\''.$langs->trans(\"Cancel\").'\\';'.\"\\n\";\n\t\t\t\tprint 'var submitInPlace = \\''.$langs->trans('Ok').'\\';'.\"\\n\";\n\t\t\t\tprint 'var indicatorInPlace = \\'<img src=\"'.DOL_URL_ROOT.\"/theme/\".$conf->theme.\"/img/working.gif\".'\">\\';'.\"\\n\";\n\t\t\t\tprint 'var withInPlace = 300;'; // width in pixel for default string edit\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/editinplace.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ckeditor.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// jQuery Timepicker\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_TIMEPICKER) || defined('REQUIRE_JQUERY_TIMEPICKER')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/timepicker/jquery-ui-timepicker-addon.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/timepicker.js.php?lang='.$langs->defaultlang.($ext ? '&amp;'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\tif (!defined('DISABLE_SELECT2') && (!empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) || defined('REQUIRE_JQUERY_MULTISELECT'))) {\n\t\t\t\t// jQuery plugin \"mutiselect\", \"multiple-select\", \"select2\", ...\n\t\t\t\t$tmpplugin = empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) ?constant('REQUIRE_JQUERY_MULTISELECT') : $conf->global->MAIN_USE_JQUERY_MULTISELECT;\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/'.$tmpplugin.'/dist/js/'.$tmpplugin.'.full.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\"; // We include full because we need the support of containerCssClass\n\t\t\t}\n\t\t\tif (!defined('DISABLE_MULTISELECT')) {     // jQuery plugin \"mutiselect\" to select with checkboxes. Can be removed once we have an enhanced search tool\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/multiselect/jquery.multi-select.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!$disablejs && !empty($conf->use_javascript_ajax)) {\n\t\t\t// CKEditor\n\t\t\tif (empty($disableforlogin) && (isModEnabled('fckeditor') && (empty($conf->global->FCKEDITOR_EDITORNAME) || $conf->global->FCKEDITOR_EDITORNAME == 'ckeditor') && !defined('DISABLE_CKEDITOR')) || defined('FORCE_CKEDITOR')) {\n\t\t\t\tprint '<!-- Includes JS for CKEditor -->'.\"\\n\";\n\t\t\t\t$pathckeditor = DOL_URL_ROOT.'/includes/ckeditor/ckeditor/';\n\t\t\t\t$jsckeditor = 'ckeditor.js';\n\t\t\t\tif (constant('JS_CKEDITOR')) {\n\t\t\t\t\t// To use external ckeditor 4 js lib\n\t\t\t\t\t$pathckeditor = constant('JS_CKEDITOR');\n\t\t\t\t}\n\t\t\t\tprint '<script>';\n\t\t\t\tprint '/* enable ckeditor by main.inc.php */';\n\t\t\t\tprint 'var CKEDITOR_BASEPATH = \\''.dol_escape_js($pathckeditor).'\\';'.\"\\n\";\n\t\t\t\tprint 'var ckeditorConfig = \\''.dol_escape_js(dol_buildpath($themesubdir.'/theme/'.$conf->theme.'/ckeditor/config.js'.($ext ? '?'.$ext : ''), 1)).'\\';'.\"\\n\"; // $themesubdir='' in standard usage\n\t\t\t\tprint 'var ckeditorFilebrowserBrowseUrl = \\''.DOL_URL_ROOT.'/core/filemanagerdol/browser/default/browser.php?Connector='.DOL_URL_ROOT.'/core/filemanagerdol/connectors/php/connector.php\\';'.\"\\n\";\n\t\t\t\tprint 'var ckeditorFilebrowserImageBrowseUrl = \\''.DOL_URL_ROOT.'/core/filemanagerdol/browser/default/browser.php?Type=Image&Connector='.DOL_URL_ROOT.'/core/filemanagerdol/connectors/php/connector.php\\';'.\"\\n\";\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.$pathckeditor.$jsckeditor.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script>';\n\t\t\t\tif (GETPOST('mode', 'aZ09') == 'Full_inline') {\n\t\t\t\t\tprint 'CKEDITOR.disableAutoInline = false;'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint 'CKEDITOR.disableAutoInline = true;'.\"\\n\";\n\t\t\t\t}\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Browser notifications (if NOREQUIREMENU is on, it is mostly a page for popup, so we do not enable notif too. We hide also for public pages).\n\t\t\tif (!defined('NOBROWSERNOTIF') && !defined('NOREQUIREMENU') && !defined('NOLOGIN')) {\n\t\t\t\t$enablebrowsernotif = false;\n\t\t\t\tif (isModEnabled('agenda') && !empty($conf->global->AGENDA_REMINDER_BROWSER)) {\n\t\t\t\t\t$enablebrowsernotif = true;\n\t\t\t\t}\n\t\t\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t\t\t$enablebrowsernotif = false;\n\t\t\t\t}\n\t\t\t\tif ($enablebrowsernotif) {\n\t\t\t\t\tprint '<!-- Includes JS of Dolibarr (browser layout = '.$conf->browser->layout.')-->'.\"\\n\";\n\t\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_notification.js.php'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Global js function\n\t\t\tprint '<!-- Includes JS of Dolibarr -->'.\"\\n\";\n\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_head.js.php?lang='.$langs->defaultlang.($ext ? '&amp;'.$ext : '').'\"></script>'.\"\\n\";\n\n\t\t\t// JS forced by modules (relative url starting with /)\n\t\t\tif (!empty($conf->modules_parts['js'])) {\t\t// $conf->modules_parts['js'] is array('module'=>array('file1','file2'))\n\t\t\t\t$arrayjs = (array) $conf->modules_parts['js'];\n\t\t\t\tforeach ($arrayjs as $modjs => $filesjs) {\n\t\t\t\t\t$filesjs = (array) $filesjs; // To be sure filejs is an array\n\t\t\t\t\tforeach ($filesjs as $jsfile) {\n\t\t\t\t\t\t// jsfile is a relative path\n\t\t\t\t\t\t$urlforjs = dol_buildpath($jsfile, 1);\n\t\t\t\t\t\tif ($urlforjs && $urlforjs != '/') {\n\t\t\t\t\t\t\tprint '<!-- Include JS added by module '.$modjs.'-->'.\"\\n\".'<script src=\"'.$urlforjs.((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modjs.\" declared a js path file for a file we can't find.\", LOG_WARNING);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// JS forced by page in top_htmlhead (relative url starting with /)\n\t\t\tif (is_array($arrayofjs)) {\n\t\t\t\tprint '<!-- Includes JS added by page -->'.\"\\n\";\n\t\t\t\tforeach ($arrayofjs as $jsfile) {\n\t\t\t\t\tif (preg_match('/^(http|\\/\\/)/i', $jsfile)) {\n\t\t\t\t\t\tprint '<script src=\"'.$jsfile.((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<script src=\"'.dol_buildpath($jsfile, 1).((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//If you want to load custom javascript file from your selected theme directory\n\t\tif (!empty($conf->global->ALLOW_THEME_JS)) {\n\t\t\t$theme_js = dol_buildpath('/theme/'.$conf->theme.'/'.$conf->theme.'.js', 0);\n\t\t\tif (file_exists($theme_js)) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/theme/'.$conf->theme.'/'.$conf->theme.'.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($head)) {\n\t\t\tprint $head.\"\\n\";\n\t\t}\n\t\tif (!empty($conf->global->MAIN_HTML_HEADER)) {\n\t\t\tprint $conf->global->MAIN_HTML_HEADER.\"\\n\";\n\t\t}\n\n\t\t$parameters = array();\n\t\t$result = $hookmanager->executeHooks('addHtmlHeader', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tprint $hookmanager->resPrint; // Replace Title to show\n\n\t\tprint \"</head>\\n\\n\";\n\t}\n\n\t$conf->headerdone = 1; // To tell header was output\n}\n\n\n/**\n *  Show an HTML header + a BODY + The top menu bar\n *\n *  @param      string\t$head    \t\t\tLines in the HEAD\n *  @param      string\t$title   \t\t\tTitle of web page\n *  @param      string\t$target  \t\t\tTarget to use in menu links (Example: '' or '_top')\n *\t@param\t\tint\t\t$disablejs\t\t\tDo not output links to js (Ex: qd fonction utilisee par sous formulaire Ajax)\n *\t@param\t\tint\t\t$disablehead\t\tDo not output head section\n *\t@param\t\tarray\t$arrayofjs\t\t\tArray of js files to add in header\n *\t@param\t\tarray\t$arrayofcss\t\t\tArray of css files to add in header\n *  @param\t\tstring\t$morequerystring\tQuery string to add to the link \"print\" to get same parameters (use only if autodetect fails)\n *  @param      string\t$helppagename    \tName of wiki page for help ('' by default).\n * \t\t\t\t     \t\t                Syntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n * \t\t\t\t\t\t                    For other external page: http://server/url\n *  @return\t\tvoid\n */\nfunction top_menu($head, $title = '', $target = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $morequerystring = '', $helppagename = '')\n{\n\tglobal $user, $conf, $langs, $db;\n\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\tglobal $hookmanager, $menumanager;\n\n\t$searchform = '';\n\n\t// Instantiate hooks for external modules\n\t$hookmanager->initHooks(array('toprightmenu'));\n\n\t$toprightmenu = '';\n\n\t// For backward compatibility with old modules\n\tif (empty($conf->headerdone)) {\n\t\t$disablenofollow = 0;\n\t\ttop_htmlhead($head, $title, $disablejs, $disablehead, $arrayofjs, $arrayofcss, 0, $disablenofollow);\n\t\tprint '<body id=\"mainbody\">';\n\t}\n\n\t/*\n\t * Top menu\n\t */\n\tif ((empty($conf->dol_hide_topmenu) || GETPOST('dol_invisible_topmenu', 'int')) && (!defined('NOREQUIREMENU') || !constant('NOREQUIREMENU'))) {\n\t\tif (!isset($form) || !is_object($form)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\n\t\t\t$form = new Form($db);\n\t\t}\n\n\t\tprint \"\\n\".'<!-- Start top horizontal -->'.\"\\n\";\n\n\t\tprint '<header id=\"id-top\" class=\"side-nav-vert'.(GETPOST('dol_invisible_topmenu', 'int') ? ' hidden' : '').'\">'; // dol_invisible_topmenu differs from dol_hide_topmenu: dol_invisible_topmenu means we output menu but we make it invisible.\n\n\t\t// Show menu entries\n\t\tprint '<div id=\"tmenu_tooltip'.(empty($conf->global->MAIN_MENU_INVERT) ? '' : 'invert').'\" class=\"tmenu\">'.\"\\n\";\n\t\t$menumanager->atarget = $target;\n\t\t$menumanager->showmenu('top', array('searchform'=>$searchform)); // This contains a \\n\n\t\tprint \"</div>\\n\";\n\n\t\t// Define link to login card\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t}\n\t\t} else {\n\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t}\n\n\t\tif (getDolGlobalInt('MAIN_FEATURES_LEVEL')) {\n\t\t\t$appli .= \"<br>\".$langs->trans(\"LevelOfFeature\").': '.getDolGlobalInt('MAIN_FEATURES_LEVEL');\n\t\t}\n\n\t\t$logouttext = '';\n\t\t$logouthtmltext = '';\n\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t//$logouthtmltext=$appli.'<br>';\n\t\t\tif ($_SESSION[\"dol_authmode\"] != 'forceuser' && $_SESSION[\"dol_authmode\"] != 'http') {\n\t\t\t\t$logouthtmltext .= $langs->trans(\"Logout\").'<br>';\n\n\t\t\t\t$logouttext .= '<a accesskey=\"l\" href=\"'.DOL_URL_ROOT.'/user/logout.php?token='.newToken().'\">';\n\t\t\t\t$logouttext .= img_picto($langs->trans('Logout'), 'sign-out', '', false, 0, 0, '', 'atoplogin valignmiddle');\n\t\t\t\t$logouttext .= '</a>';\n\t\t\t} else {\n\t\t\t\t$logouthtmltext .= $langs->trans(\"NoLogoutProcessWithAuthMode\", $_SESSION[\"dol_authmode\"]);\n\t\t\t\t$logouttext .= img_picto($langs->trans('Logout'), 'sign-out', '', false, 0, 0, '', 'atoplogin valignmiddle opacitymedium');\n\t\t\t}\n\t\t}\n\n\t\tprint '<div class=\"login_block usedropdown\">'.\"\\n\";\n\n\t\t$toprightmenu .= '<div class=\"login_block_other\">';\n\n\t\t// Execute hook printTopRightMenu (hooks should output string like '<div class=\"login\"><a href=\"\">mylink</a></div>')\n\t\t$parameters = array();\n\t\t$result = $hookmanager->executeHooks('printTopRightMenu', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif (is_numeric($result)) {\n\t\t\tif ($result == 0) {\n\t\t\t\t$toprightmenu .= $hookmanager->resPrint; // add\n\t\t\t} else {\n\t\t\t\t$toprightmenu = $hookmanager->resPrint; // replace\n\t\t\t}\n\t\t} else {\n\t\t\t$toprightmenu .= $result; // For backward compatibility\n\t\t}\n\n\t\t// Link to module builder\n\t\tif (isModEnabled('modulebuilder')) {\n\t\t\t$text = '<a href=\"'.DOL_URL_ROOT.'/modulebuilder/index.php?mainmenu=home&leftmenu=admintools\" target=\"modulebuilder\">';\n\t\t\t//$text.= img_picto(\":\".$langs->trans(\"ModuleBuilder\"), 'printer_top.png', 'class=\"printer\"');\n\t\t\t$text .= '<span class=\"fa fa-bug atoplogin valignmiddle\"></span>';\n\t\t\t$text .= '</a>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $langs->trans(\"ModuleBuilder\"), 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Link to print main content area\n\t\tif (empty($conf->global->MAIN_PRINT_DISABLELINK) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$qs = dol_escape_htmltag($_SERVER[\"QUERY_STRING\"]);\n\n\t\t\tif (isset($_POST) && is_array($_POST)) {\n\t\t\t\tforeach ($_POST as $key => $value) {\n\t\t\t\t\tif ($key !== 'action' && $key !== 'password' && !is_array($value)) {\n\t\t\t\t\t\t$qs .= '&'.$key.'='.urlencode($value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$qs .= (($qs && $morequerystring) ? '&' : '').$morequerystring;\n\t\t\t$text = '<a href=\"'.dol_escape_htmltag($_SERVER[\"PHP_SELF\"]).'?'.$qs.($qs ? '&' : '').'optioncss=print\" target=\"_blank\" rel=\"noopener noreferrer\">';\n\t\t\t//$text.= img_picto(\":\".$langs->trans(\"PrintContentArea\"), 'printer_top.png', 'class=\"printer\"');\n\t\t\t$text .= '<span class=\"fa fa-print atoplogin valignmiddle\"></span>';\n\t\t\t$text .= '</a>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $langs->trans(\"PrintContentArea\"), 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Link to Dolibarr wiki pages\n\t\tif (empty($conf->global->MAIN_HELP_DISABLELINK) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$langs->load(\"help\");\n\n\t\t\t$helpbaseurl = '';\n\t\t\t$helppage = '';\n\t\t\t$mode = '';\n\t\t\t$helppresent = '';\n\n\t\t\tif (empty($helppagename)) {\n\t\t\t\t$helppagename = 'EN:User_documentation|FR:Documentation_utilisateur|ES:Documentaci\u00f3n_usuarios';\n\t\t\t} else {\n\t\t\t\t$helppresent = 'helppresent';\n\t\t\t}\n\n\t\t\t// Get helpbaseurl, helppage and mode from helppagename and langs\n\t\t\t$arrayres = getHelpParamFor($helppagename, $langs);\n\t\t\t$helpbaseurl = $arrayres['helpbaseurl'];\n\t\t\t$helppage = $arrayres['helppage'];\n\t\t\t$mode = $arrayres['mode'];\n\n\t\t\t// Link to help pages\n\t\t\tif ($helpbaseurl && $helppage) {\n\t\t\t\t$text = '';\n\t\t\t\t$title = $langs->trans($mode == 'wiki' ? 'GoToWikiHelpPage' : 'GoToHelpPage').', ';\n\t\t\t\tif ($mode == 'wiki') {\n\t\t\t\t\t$title .= '<br>'.img_picto('', 'globe', 'class=\"pictofixedwidth\"').$langs->trans(\"PageWiki\").' '.dol_escape_htmltag('\"'.strtr($helppage, '_', ' ').'\"');\n\t\t\t\t\tif ($helppresent) {\n\t\t\t\t\t\t$title .= ' <span class=\"opacitymedium\">('.$langs->trans(\"DedicatedPageAvailable\").')</span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$title .= ' <span class=\"opacitymedium\">('.$langs->trans(\"HomePage\").')</span>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$text .= '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"';\n\t\t\t\tif ($mode == 'wiki') {\n\t\t\t\t\t$text .= sprintf($helpbaseurl, urlencode(html_entity_decode($helppage)));\n\t\t\t\t} else {\n\t\t\t\t\t$text .= sprintf($helpbaseurl, $helppage);\n\t\t\t\t}\n\t\t\t\t$text .= '\">';\n\t\t\t\t$text .= '<span class=\"fa fa-question-circle atoplogin valignmiddle'.($helppresent ? ' '.$helppresent : '').'\"></span>';\n\t\t\t\t$text .= '<span class=\"fa fa-long-arrow-alt-up helppresentcircle'.($helppresent ? '' : ' unvisible').'\"></span>';\n\t\t\t\t$text .= '</a>';\n\t\t\t\t$toprightmenu .= $form->textwithtooltip('', $title, 2, 1, $text, 'login_block_elem', 2);\n\t\t\t}\n\n\t\t\t// Version\n\t\t\tif (!empty($conf->global->MAIN_SHOWDATABASENAMEINHELPPAGESLINK)) {\n\t\t\t\t$langs->load('admin');\n\t\t\t\t$appli .= '<br>'.$langs->trans(\"Database\").': '.$db->database_name;\n\t\t\t}\n\t\t}\n\n\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$text = '<span class=\"aversion\"><span class=\"hideonsmartphone small\">'.DOL_VERSION.'</span></span>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $appli, 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Logout link\n\t\t$toprightmenu .= $form->textwithtooltip('', $logouthtmltext, 2, 1, $logouttext, 'login_block_elem logout-btn', 2);\n\n\t\t$toprightmenu .= '</div>'; // end div class=\"login_block_other\"\n\n\n\t\t// Add login user link\n\t\t$toprightmenu .= '<div class=\"login_block_user\">';\n\n\t\t// Login name with photo and tooltip\n\t\t$mode = -1;\n\t\t$toprightmenu .= '<div class=\"inline-block nowrap\"><div class=\"inline-block login_block_elem login_block_elem_name\" style=\"padding: 0px;\">';\n\n\t\tif (!empty($conf->global->MAIN_USE_TOP_MENU_SEARCH_DROPDOWN)) {\n\t\t\t// Add search dropdown\n\t\t\t$toprightmenu .= top_menu_search();\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_USE_TOP_MENU_QUICKADD_DROPDOWN)) {\n\t\t\t// Add search dropdown\n\t\t\t$toprightmenu .= top_menu_quickadd();\n\t\t}\n\n\t\t// Add bookmark dropdown\n\t\t$toprightmenu .= top_menu_bookmark();\n\n\t\t// Add user dropdown\n\t\t$toprightmenu .= top_menu_user();\n\n\t\t$toprightmenu .= '</div></div>';\n\n\t\t$toprightmenu .= '</div>'.\"\\n\";\n\n\n\t\tprint $toprightmenu;\n\n\t\tprint \"</div>\\n\"; // end div class=\"login_block\"\n\n\t\tprint '</header>';\n\t\t//print '<header class=\"header2\">&nbsp;</header>';\n\n\t\tprint '<div style=\"clear: both;\"></div>';\n\t\tprint \"<!-- End top horizontal menu -->\\n\\n\";\n\t}\n\n\tif (empty($conf->dol_hide_leftmenu) && empty($conf->dol_use_jmobile)) {\n\t\tprint '<!-- Begin div id-container --><div id=\"id-container\" class=\"id-container\">';\n\t}\n}\n\n\n/**\n * Build the tooltip on user login\n *\n * @param\tint\t\t\t$hideloginname\t\tHide login name. Show only the image.\n * @param\tstring\t\t$urllogout\t\t\tURL for logout (Will use DOL_URL_ROOT.'/user/logout.php?token=...' if empty)\n * @return  string                  \t\tHTML content\n */\nfunction top_menu_user($hideloginname = 0, $urllogout = '')\n{\n\tglobal $langs, $conf, $db, $hookmanager, $user, $mysoc;\n\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\tglobal $menumanager;\n\n\t$langs->load('companies');\n\n\t$userImage = $userDropDownImage = '';\n\tif (!empty($user->photo)) {\n\t\t$userImage          = Form::showphoto('userphoto', $user, 0, 0, 0, 'photouserphoto userphoto', 'small', 0, 1);\n\t\t$userDropDownImage  = Form::showphoto('userphoto', $user, 0, 0, 0, 'dropdown-user-image', 'small', 0, 1);\n\t} else {\n\t\t$nophoto = '/public/theme/common/user_anonymous.png';\n\t\tif ($user->gender == 'man') {\n\t\t\t$nophoto = '/public/theme/common/user_man.png';\n\t\t}\n\t\tif ($user->gender == 'woman') {\n\t\t\t$nophoto = '/public/theme/common/user_woman.png';\n\t\t}\n\n\t\t$userImage = '<img class=\"photo photouserphoto userphoto\" alt=\"No photo\" src=\"'.DOL_URL_ROOT.$nophoto.'\">';\n\t\t$userDropDownImage = '<img class=\"photo dropdown-user-image\" alt=\"No photo\" src=\"'.DOL_URL_ROOT.$nophoto.'\">';\n\t}\n\n\t$dropdownBody = '';\n\t$dropdownBody .= '<span id=\"topmenulogincompanyinfo-btn\"><i class=\"fa fa-caret-right\"></i> '.$langs->trans(\"ShowCompanyInfos\").'</span>';\n\t$dropdownBody .= '<div id=\"topmenulogincompanyinfo\" >';\n\n\tif ($langs->transcountry(\"ProfId1\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId1\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_SIREN\"), 1).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId2\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId2\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_SIRET\"), 2).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId3\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId3\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_APE\"), 3).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId4\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId4\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_RCS\"), 4).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId5\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId5\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_PROFID5\"), 5).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId6\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId6\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_PROFID6\"), 6).'</span>';\n\t}\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"VATIntraShort\").'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_TVAINTRA\"), 'VAT').'</span>';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Country\").'</b>: <span>'.($mysoc->country_code ? $langs->trans(\"Country\".$mysoc->country_code) : '').'</span>';\n\n\t$dropdownBody .= '</div>';\n\n\t$dropdownBody .= '<br>';\n\t$dropdownBody .= '<span id=\"topmenuloginmoreinfo-btn\"><i class=\"fa fa-caret-right\"></i> '.$langs->trans(\"ShowMoreInfos\").'</span>';\n\t$dropdownBody .= '<div id=\"topmenuloginmoreinfo\" >';\n\n\t// login infos\n\tif (!empty($user->admin)) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"Administrator\").'</b>: '.yn($user->admin);\n\t}\n\tif (!empty($user->socid)) {\t// Add thirdparty for external users\n\t\t$thirdpartystatic = new Societe($db);\n\t\t$thirdpartystatic->fetch($user->socid);\n\t\t$companylink = ' '.$thirdpartystatic->getNomUrl(2); // picto only of company\n\t\t$company = ' ('.$langs->trans(\"Company\").': '.$thirdpartystatic->name.')';\n\t}\n\t$type = ($user->socid ? $langs->trans(\"External\").$company : $langs->trans(\"Internal\"));\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Type\").':</b> '.$type;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Status\").'</b>: '.$user->getLibStatut(0);\n\t$dropdownBody .= '<br>';\n\n\t$dropdownBody .= '<br><u>'.$langs->trans(\"Session\").'</u>';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.dol_escape_htmltag($_SERVER[\"REMOTE_ADDR\"]);\n\tif (!empty($conf->global->MAIN_MODULE_MULTICOMPANY)) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (user entity '.$user->entity.')';\n\t}\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.$_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo) ? '' : ' (demo)');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.$conf->theme;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.(isset($menumanager) ? $menumanager->name : 'unknown');\n\t$langFlag = picto_from_langcode($langs->getDefaultLang());\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.($langFlag ? $langFlag.' ' : '').$langs->getDefaultLang();\n\n\t$tz = (int) $_SESSION['dol_tz'] + (int) $_SESSION['dol_dst'];\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"ClientTZ\").':</b> '.($tz ? ($tz >= 0 ? '+' : '').$tz : '');\n\t$dropdownBody .= ' ('.$_SESSION['dol_tz_string'].')';\n\t//$dropdownBody .= ' &nbsp; &nbsp; &nbsp; '.$langs->trans(\"DaylingSavingTime\").': ';\n\t//if ($_SESSION['dol_dst'] > 0) $dropdownBody .= yn(1);\n\t//else $dropdownBody .= yn(0);\n\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Browser\").':</b> '.$conf->browser->name.($conf->browser->version ? ' '.$conf->browser->version : '').' ('.dol_escape_htmltag($_SERVER['HTTP_USER_AGENT']).')';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Layout\").':</b> '.$conf->browser->layout;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Screen\").':</b> '.$_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight'];\n\tif ($conf->browser->layout == 'phone') {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$langs->trans(\"Yes\");\n\t}\n\tif (!empty($_SESSION[\"disablemodules\"])) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.join(', ', explode(',', $_SESSION[\"disablemodules\"]));\n\t}\n\t$dropdownBody .= '</div>';\n\n\t// Execute hook\n\t$parameters = array('user'=>$user, 'langs' => $langs);\n\t$result = $hookmanager->executeHooks('printTopRightMenuLoginDropdownBody', $parameters); // Note that $action and $object may have been modified by some hooks\n\tif (is_numeric($result)) {\n\t\tif ($result == 0) {\n\t\t\t$dropdownBody .= $hookmanager->resPrint; // add\n\t\t} else {\n\t\t\t$dropdownBody = $hookmanager->resPrint; // replace\n\t\t}\n\t}\n\n\tif (empty($urllogout)) {\n\t\t$urllogout = DOL_URL_ROOT.'/user/logout.php?token='.newToken();\n\t}\n\n\t// Defined the links for bottom of card\n\t$profilLink = '<a accesskey=\"c\" href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\" class=\"button-top-menu-dropdown\" title=\"'.dol_escape_htmltag($langs->trans(\"YourUserFile\")).'\"><i class=\"fa fa-user\"></i>  '.$langs->trans(\"Card\").'</a>';\n\t$urltovirtualcard = '/user/virtualcard.php?id='.((int) $user->id);\n\t$virtuelcardLink = dolButtonToOpenUrlInDialogPopup('publicvirtualcardmenu', $langs->trans(\"PublicVirtualCardUrl\").(is_object($user) ? ' - '.$user->getFullName($langs) : ''), img_picto($langs->trans(\"PublicVirtualCardUrl\"), 'card', ''), $urltovirtualcard, '', 'button-top-menu-dropdown marginleftonly nohover', \"closeTopMenuLoginDropdown()\", '', 'v');\n\t$logoutLink = '<a accesskey=\"l\" href=\"'.$urllogout.'\" class=\"button-top-menu-dropdown\" title=\"'.dol_escape_htmltag($langs->trans(\"Logout\")).'\"><i class=\"fa fa-sign-out-alt\"></i> '.$langs->trans(\"Logout\").'</a>';\n\n\t$profilName = $user->getFullName($langs).' ('.$user->login.')';\n\tif (!empty($user->admin)) {\n\t\t$profilName = '<i class=\"far fa-star classfortooltip\" title=\"'.$langs->trans(\"Administrator\").'\" ></i> '.$profilName;\n\t}\n\n\t// Define version to show\n\t$appli = constant('DOL_APPLICATION_TITLE');\n\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t}\n\t\t} else {\n\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t}\n\t} else {\n\t\t$appli .= \" \".DOL_VERSION;\n\t}\n\n\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t$btnUser = '<!-- div for user link -->\n\t    <div id=\"topmenu-login-dropdown\" class=\"userimg atoplogin dropdown user user-menu inline-block\">\n\t        <a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\" class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\">\n\t            '.$userImage.(empty($user->photo) ? '<span class=\"hidden-xs maxwidth200 atoploginusername hideonsmartphone paddingleft\">'.dol_trunc($user->firstname ? $user->firstname : $user->login, 10).'</span>' : '').'\n\t        </a>\n\t        <div class=\"dropdown-menu\">\n\t            <!-- User image -->\n\t            <div class=\"user-header\">\n\t                '.$userDropDownImage.'\n\t                <p>\n\t                    '.$profilName.'<br>';\n\t\tif ($user->datelastlogin) {\n\t\t\t$title = $langs->trans(\"ConnectedSince\").' : '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser');\n\t\t\tif ($user->datepreviouslogin) {\n\t\t\t\t$title .= '<br>'.$langs->trans(\"PreviousConnexion\").' : '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser');\n\t\t\t}\n\t\t}\n\t\t$btnUser .= '<small class=\"classfortooltip\" title=\"'.dol_escape_htmltag($title).'\" ><i class=\"fa fa-user-clock\"></i> '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser').'</small><br>';\n\t\tif ($user->datepreviouslogin) {\n\t\t\t$btnUser .= '<small class=\"classfortooltip\" title=\"'.dol_escape_htmltag($title).'\" ><i class=\"fa fa-user-clock opacitymedium\"></i> '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser').'</small><br>';\n\t\t}\n\n\t\t//$btnUser .= '<small class=\"classfortooltip\"><i class=\"fa fa-cog\"></i> '.$langs->trans(\"Version\").' '.$appli.'</small>';\n\t\t$btnUser .= '\n\t                </p>\n\t            </div>\n\n\t            <!-- Menu Body -->\n\t            <div class=\"user-body\">'.$dropdownBody.'</div>\n\n\t            <!-- Menu Footer-->\n\t            <div class=\"user-footer\">\n\t                <div class=\"pull-left\">\n\t                    '.$profilLink.'\n\t                </div>\n\t                <div class=\"pull-left\">\n\t                    '.$virtuelcardLink.'\n\t                </div>\n\t                <div class=\"pull-right\">\n\t                    '.$logoutLink.'\n\t                </div>\n\t                <div style=\"clear:both;\"></div>\n\t            </div>\n\n\t        </div>\n\t    </div>';\n\t} else {\n\t\t$btnUser = '<!-- div for user link -->\n\t    <div id=\"topmenu-login-dropdown\" class=\"userimg atoplogin dropdown user user-menu inline-block\">\n\t    \t<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\">\n\t    \t'.$userImage.'\n\t    \t\t<span class=\"hidden-xs maxwidth200 atoploginusername hideonsmartphone\">'.dol_trunc($user->firstname ? $user->firstname : $user->login, 10).'</span>\n\t    \t\t</a>\n\t\t</div>';\n\t}\n\n\tif (!defined('JS_JQUERY_DISABLE_DROPDOWN') && !empty($conf->use_javascript_ajax)) {    // This may be set by some pages that use different jquery version to avoid errors\n\t\t$btnUser .= '\n        <!-- Code to show/hide the user drop-down -->\n        <script>\n\t\tfunction closeTopMenuLoginDropdown() {\n\t\t\t//console.log(\"close login dropdown\");\t// This is call at each click on page, so we disable the log\n\t\t\t// Hide the menus.\n            jQuery(\"#topmenu-login-dropdown\").removeClass(\"open\");\n\t\t}\n        jQuery(document).ready(function() {\n            jQuery(document).on(\"click\", function(event) {\n                if (!$(event.target).closest(\"#topmenu-login-dropdown\").length) {\n\t\t\t\t\tcloseTopMenuLoginDropdown();\n                }\n            });\n\t\t\t';\n\n\t\tif ($conf->theme != 'md') {\n\t\t\t$btnUser .= '\n\t            jQuery(\"#topmenu-login-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\t\t\tconsole.log(\"toggle login dropdown\");\n\t\t\t\t\tevent.preventDefault();\n\t                jQuery(\"#topmenu-login-dropdown\").toggleClass(\"open\");\n\t            });\n\n\t            jQuery(\"#topmenulogincompanyinfo-btn\").on(\"click\", function() {\n\t\t\t\t\tconsole.log(\"Clik on topmenulogincompanyinfo-btn\");\n\t                jQuery(\"#topmenulogincompanyinfo\").slideToggle();\n\t            });\n\n\t            jQuery(\"#topmenuloginmoreinfo-btn\").on(\"click\", function() {\n\t\t\t\t\tconsole.log(\"Clik on topmenuloginmoreinfo-btn\");\n\t                jQuery(\"#topmenuloginmoreinfo\").slideToggle();\n\t            });';\n\t\t}\n\n\t\t$btnUser .= '\n        });\n        </script>\n        ';\n\t}\n\n\treturn $btnUser;\n}\n\n/**\n * Build the tooltip on top menu quick add\n *\n * @return  string                  HTML content\n */\nfunction top_menu_quickadd()\n{\n\tglobal $langs;\n\n\t$html = '';\n\n\t$html .= '<!-- div for quick add link -->\n    <div id=\"topmenu-quickadd-dropdown\" class=\"atoplogin dropdown inline-block\">\n        <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('QuickAdd').' ('.$langs->trans('QuickAddMenuShortCut').')\"><i class=\"fa fa-plus-circle\"></i></a>\n        <div class=\"dropdown-menu\">'.printDropdownQuickadd().'</div>\n    </div>';\n\t$html .= '\n        <!-- Code to show/hide the user drop-down -->\n        <script>\n        jQuery(document).ready(function() {\n            jQuery(document).on(\"click\", function(event) {\n                if (!$(event.target).closest(\"#topmenu-quickadd-dropdown\").length) {\n                    // Hide the menus.\n                    $(\"#topmenu-quickadd-dropdown\").removeClass(\"open\");\n                }\n            });\n            $(\"#topmenu-quickadd-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n                openQuickAddDropDown();\n            });\n            // Key map shortcut\n            $(document).keydown(function(e){\n                  if( e.which === 76 && e.ctrlKey && e.shiftKey ){\n                     console.log(\\'control + shift + l : trigger open quick add dropdown\\');\n                     openQuickAddDropDown();\n                  }\n            });\n\n\n            var openQuickAddDropDown = function() {\n                event.preventDefault();\n                $(\"#topmenu-quickadd-dropdown\").toggleClass(\"open\");\n                //$(\"#top-quickadd-search-input\").focus();\n            }\n        });\n        </script>\n        ';\n\treturn $html;\n}\n\n/**\n * Generate list of quickadd items\n *\n * @return string HTML output\n */\nfunction printDropdownQuickadd()\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$items = array(\n\t\t'items' => array(\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/adherents/card.php?action=create&amp;mainmenu=members\",\n\t\t\t\t\"title\" => \"MenuNewMember@members\",\n\t\t\t\t\"name\" => \"Adherent@members\",\n\t\t\t\t\"picto\" => \"object_member\",\n\t\t\t\t\"activation\" => isModEnabled('adherent') && $user->hasRight(\"adherent\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 5,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/societe/card.php?action=create&amp;mainmenu=companies\",\n\t\t\t\t\"title\" => \"MenuNewThirdParty@companies\",\n\t\t\t\t\"name\" => \"ThirdParty@companies\",\n\t\t\t\t\"picto\" => \"object_company\",\n\t\t\t\t\"activation\" => isModEnabled(\"societe\") && $user->hasRight(\"societe\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 10,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/contact/card.php?action=create&amp;mainmenu=companies\",\n\t\t\t\t\"title\" => \"NewContactAddress@companies\",\n\t\t\t\t\"name\" => \"Contact@companies\",\n\t\t\t\t\"picto\" => \"object_contact\",\n\t\t\t\t\"activation\" => isModEnabled(\"societe\") && $user->hasRight(\"societe\", \"contact\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 20,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/comm/propal/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewPropal@propal\",\n\t\t\t\t\"name\" => \"Proposal@propal\",\n\t\t\t\t\"picto\" => \"object_propal\",\n\t\t\t\t\"activation\" => isModEnabled(\"propal\") && $user->hasRight(\"propal\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 30,\n\t\t\t),\n\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/commande/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewOrder@orders\",\n\t\t\t\t\"name\" => \"Order@orders\",\n\t\t\t\t\"picto\" => \"object_order\",\n\t\t\t\t\"activation\" => isModEnabled('commande') && $user->hasRight(\"commande\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 40,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/compta/facture/card.php?action=create&amp;mainmenu=billing\",\n\t\t\t\t\"title\" => \"NewBill@bills\",\n\t\t\t\t\"name\" => \"Bill@bills\",\n\t\t\t\t\"picto\" => \"object_bill\",\n\t\t\t\t\"activation\" => isModEnabled('facture') && $user->hasRight(\"facture\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 50,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/contrat/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewContractSubscription@contracts\",\n\t\t\t\t\"name\" => \"Contract@contracts\",\n\t\t\t\t\"picto\" => \"object_contract\",\n\t\t\t\t\"activation\" => isModEnabled('contrat') && $user->hasRight(\"contrat\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 60,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/supplier_proposal/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"SupplierProposalNew@supplier_proposal\",\n\t\t\t\t\"name\" => \"SupplierProposal@supplier_proposal\",\n\t\t\t\t\"picto\" => \"supplier_proposal\",\n\t\t\t\t\"activation\" => isModEnabled('supplier_proposal') && $user->hasRight(\"supplier_invoice\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 70,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fourn/commande/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewSupplierOrderShort@orders\",\n\t\t\t\t\"name\" => \"SupplierOrder@orders\",\n\t\t\t\t\"picto\" => \"supplier_order\",\n\t\t\t\t\"activation\" => (isModEnabled(\"fournisseur\") && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD) && $user->hasRight(\"fournisseur\", \"commande\", \"write\")) || (isModEnabled(\"supplier_order\") && $user->hasRight(\"supplier_invoice\", \"write\")), // vs hooking\n\t\t\t\t\"position\" => 80,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fourn/facture/card.php?action=create&amp;mainmenu=billing\",\n\t\t\t\t\"title\" => \"NewBill@bills\",\n\t\t\t\t\"name\" => \"SupplierBill@bills\",\n\t\t\t\t\"picto\" => \"supplier_invoice\",\n\t\t\t\t\"activation\" => (isModEnabled(\"fournisseur\") && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD) && $user->hasRight(\"fournisseur\", \"facture\", \"write\")) || (isModEnabled(\"supplier_invoice\") && $user->hasRight(\"supplier_invoice\", \"write\")), // vs hooking\n\t\t\t\t\"position\" => 90,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/ticket/card.php?action=create&amp;mainmenu=ticket\",\n\t\t\t\t\"title\" => \"NewTicket@ticket\",\n\t\t\t\t\"name\" => \"Ticket@ticket\",\n\t\t\t\t\"picto\" => \"ticket\",\n\t\t\t\t\"activation\" => isModEnabled('ticket') && $user->hasRight(\"ticket\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 100,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fichinter/card.php?action=create&mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewIntervention@interventions\",\n\t\t\t\t\"name\" => \"Intervention@interventions\",\n\t\t\t\t\"picto\" => \"intervention\",\n\t\t\t\t\"activation\" => isModEnabled('ficheinter') && $user->hasRight(\"ficheinter\", \"creer\"), // vs hooking\n\t\t\t\t\"position\" => 110,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/product/card.php?action=create&amp;type=0&amp;mainmenu=products\",\n\t\t\t\t\"title\" => \"NewProduct@products\",\n\t\t\t\t\"name\" => \"Product@products\",\n\t\t\t\t\"picto\" => \"object_product\",\n\t\t\t\t\"activation\" => isModEnabled(\"product\") && $user->hasRight(\"produit\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 400,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/product/card.php?action=create&amp;type=1&amp;mainmenu=products\",\n\t\t\t\t\"title\" => \"NewService@products\",\n\t\t\t\t\"name\" => \"Service@products\",\n\t\t\t\t\"picto\" => \"object_service\",\n\t\t\t\t\"activation\" => isModEnabled(\"service\") && $user->hasRight(\"service\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 410,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/user/card.php?action=create&amp;type=1&amp;mainmenu=home\",\n\t\t\t\t\"title\" => \"AddUser@users\",\n\t\t\t\t\"name\" => \"User@users\",\n\t\t\t\t\"picto\" => \"user\",\n\t\t\t\t\"activation\" => $user->hasRight(\"user\", \"user\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 500,\n\t\t\t),\n\t\t),\n\t);\n\n\t$dropDownQuickAddHtml = '';\n\n\t// Define $dropDownQuickAddHtml\n\t$dropDownQuickAddHtml .= '<div class=\"quickadd-body dropdown-body\">';\n\t$dropDownQuickAddHtml .= '<div class=\"dropdown-quickadd-list\">';\n\n\t// Allow the $items of the menu to be manipulated by modules\n\t$parameters = array();\n\t$hook_items = $items;\n\t$reshook = $hookmanager->executeHooks('menuDropdownQuickaddItems', $parameters, $hook_items); // Note that $action and $object may have been modified by some hooks\n\tif (is_numeric($reshook) && !empty($hookmanager->resArray) && is_array($hookmanager->resArray)) {\n\t\tif ($reshook == 0) {\n\t\t\t$items['items'] = array_merge($items['items'], $hookmanager->resArray); // add\n\t\t} else {\n\t\t\t$items = $hookmanager->resArray; // replace\n\t\t}\n\n\t\t// Sort menu items by 'position' value\n\t\t$position = array();\n\t\tforeach ($items['items'] as $key => $row) {\n\t\t\t$position[$key] = $row['position'];\n\t\t}\n\t\t$array1_sort_order = SORT_ASC;\n\t\tarray_multisort($position, $array1_sort_order, $items['items']);\n\t}\n\n\tforeach ($items['items'] as $item) {\n\t\tif (!$item['activation']) {\n\t\t\tcontinue;\n\t\t}\n\t\t$langs->load(explode('@', $item['title'])[1]);\n\t\t$langs->load(explode('@', $item['name'])[1]);\n\t\t$dropDownQuickAddHtml .= '\n\t\t\t<a class=\"dropdown-item quickadd-item\" href=\"'.DOL_URL_ROOT.$item['url'].'\" title=\"'.$langs->trans(explode('@', $item['title'])[0]).'\">\n\t\t\t'. img_picto('', $item['picto'], 'style=\"width:18px;\"') . ' ' . $langs->trans(explode('@', $item['name'])[0]) . '</a>\n\t\t';\n\t}\n\n\t$dropDownQuickAddHtml .= '</div>';\n\t$dropDownQuickAddHtml .= '</div>';\n\n\treturn $dropDownQuickAddHtml;\n}\n\n/**\n * Build the tooltip on top menu bookmark\n *\n * @return  string                  HTML content\n */\nfunction top_menu_bookmark()\n{\n\tglobal $langs, $conf, $db, $user;\n\n\t$html = '';\n\n\t// Define $bookmarks\n\tif (!isModEnabled('bookmark') || empty($user->rights->bookmark->lire)) {\n\t\treturn $html;\n\t}\n\n\tif (!defined('JS_JQUERY_DISABLE_DROPDOWN') && !empty($conf->use_javascript_ajax)) {\t    // This may be set by some pages that use different jquery version to avoid errors\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/bookmarks/bookmarks.lib.php';\n\t\t$langs->load(\"bookmarks\");\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$html .= '<div id=\"topmenu-bookmark-dropdown\" class=\"dropdown inline-block\">';\n\t\t\t$html .= printDropdownBookmarksList();\n\t\t\t$html .= '</div>';\n\t\t} else {\n\t\t\t$html .= '<!-- div for bookmark link -->\n\t        <div id=\"topmenu-bookmark-dropdown\" class=\"dropdown inline-block\">\n\t            <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('Bookmarks').' ('.$langs->trans('BookmarksMenuShortCut').')\"><i class=\"fa fa-star\"></i></a>\n\t            <div class=\"dropdown-menu\">\n\t                '.printDropdownBookmarksList().'\n\t            </div>\n\t        </div>';\n\n\t\t\t$html .= '\n\t        <!-- Code to show/hide the bookmark drop-down -->\n\t        <script>\n\t        jQuery(document).ready(function() {\n\t            jQuery(document).on(\"click\", function(event) {\n\t                if (!$(event.target).closest(\"#topmenu-bookmark-dropdown\").length) {\n\t\t\t\t\t\t//console.log(\"close bookmark dropdown - we click outside\");\n\t                    // Hide the menus.\n\t                    $(\"#topmenu-bookmark-dropdown\").removeClass(\"open\");\n\t                }\n\t            });\n\n\t            jQuery(\"#topmenu-bookmark-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\t\t\tconsole.log(\"toggle bookmark dropdown\");\n\t\t\t\t\topenBookMarkDropDown();\n\t            });\n\n\t            // Key map shortcut\n\t            jQuery(document).keydown(function(e){\n\t                  if( e.which === 77 && e.ctrlKey && e.shiftKey ){\n\t                     console.log(\\'control + shift + m : trigger open bookmark dropdown\\');\n\t                     openBookMarkDropDown();\n\t                  }\n\t            });\n\n\n\t            var openBookMarkDropDown = function() {\n\t                event.preventDefault();\n\t                jQuery(\"#topmenu-bookmark-dropdown\").toggleClass(\"open\");\n\t                jQuery(\"#top-bookmark-search-input\").focus();\n\t            }\n\n\t        });\n\t        </script>\n\t        ';\n\t\t}\n\t}\n\treturn $html;\n}\n\n/**\n * Build the tooltip on top menu tsearch\n *\n * @return  string                  HTML content\n */\nfunction top_menu_search()\n{\n\tglobal $langs, $conf, $db, $user, $hookmanager;\n\n\t$html = '';\n\n\t$usedbyinclude = 1;\n\t$arrayresult = null;\n\tinclude DOL_DOCUMENT_ROOT.'/core/ajax/selectsearchbox.php'; // This set $arrayresult\n\n\t$defaultAction = '';\n\t$buttonList = '<div class=\"dropdown-global-search-button-list\" >';\n\t// Menu with all searchable items\n\tforeach ($arrayresult as $keyItem => $item) {\n\t\tif (empty($defaultAction)) {\n\t\t\t$defaultAction = $item['url'];\n\t\t}\n\t\t$buttonList .= '<button class=\"dropdown-item global-search-item\" data-target=\"'.dol_escape_htmltag($item['url']).'\" >';\n\t\t$buttonList .= $item['text'];\n\t\t$buttonList .= '</button>';\n\t}\n\t$buttonList .= '</div>';\n\n\n\t$searchInput = '<input name=\"search_all\" id=\"top-global-search-input\" class=\"dropdown-search-input\" placeholder=\"'.$langs->trans('Search').'\" autocomplete=\"off\" >';\n\n\t$dropDownHtml = '<form id=\"top-menu-action-search\" name=\"actionsearch\" method=\"GET\" action=\"'.$defaultAction.'\" >';\n\n\t$dropDownHtml .= '\n        <!-- search input -->\n        <div class=\"dropdown-header search-dropdown-header\">\n            ' . $searchInput.'\n        </div>\n    ';\n\n\t$dropDownHtml .= '\n        <!-- Menu Body -->\n        <div class=\"dropdown-body search-dropdown-body\">\n        '.$buttonList.'\n        </div>\n        ';\n\n\t$dropDownHtml .= '</form>';\n\n\n\t$html .= '<!-- div for Global Search -->\n    <div id=\"topmenu-global-search-dropdown\" class=\"atoplogin dropdown inline-block\">\n        <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('Search').' ('.$langs->trans('SearchMenuShortCut').')\">\n            <i class=\"fa fa-search\" ></i>\n        </a>\n        <div class=\"dropdown-menu dropdown-search\">\n            '.$dropDownHtml.'\n        </div>\n    </div>';\n\n\t$html .= '\n    <!-- Code to show/hide the user drop-down -->\n    <script>\n    jQuery(document).ready(function() {\n\n        // prevent submiting form on press ENTER\n        jQuery(\"#top-global-search-input\").keydown(function (e) {\n            if (e.keyCode == 13) {\n                var inputs = $(this).parents(\"form\").eq(0).find(\":button\");\n                if (inputs[inputs.index(this) + 1] != null) {\n                    inputs[inputs.index(this) + 1].focus();\n                }\n                e.preventDefault();\n                return false;\n            }\n        });\n\n        // arrow key nav\n        jQuery(document).keydown(function(e) {\n\t\t\t// Get the focused element:\n\t\t\tvar $focused = $(\":focus\");\n\t\t\tif($focused.length && $focused.hasClass(\"global-search-item\")){\n\n           \t\t// UP - move to the previous line\n\t\t\t\tif (e.keyCode == 38) {\n\t\t\t\t    e.preventDefault();\n\t\t\t\t\t$focused.prev().focus();\n\t\t\t\t}\n\n\t\t\t\t// DOWN - move to the next line\n\t\t\t\tif (e.keyCode == 40) {\n\t\t\t\t    e.preventDefault();\n\t\t\t\t\t$focused.next().focus();\n\t\t\t\t}\n\t\t\t}\n        });\n\n\n        // submit form action\n        jQuery(\".dropdown-global-search-button-list .global-search-item\").on(\"click\", function(event) {\n            jQuery(\"#top-menu-action-search\").attr(\"action\", $(this).data(\"target\"));\n            jQuery(\"#top-menu-action-search\").submit();\n        });\n\n        // close drop down\n        jQuery(document).on(\"click\", function(event) {\n\t\t\tif (!$(event.target).closest(\"#topmenu-global-search-dropdown\").length) {\n\t\t\t\tconsole.log(\"click close search - we click outside\");\n                // Hide the menus.\n                jQuery(\"#topmenu-global-search-dropdown\").removeClass(\"open\");\n            }\n        });\n\n        // Open drop down\n        jQuery(\"#topmenu-global-search-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\tconsole.log(\"toggle search dropdown\");\n            openGlobalSearchDropDown();\n        });\n\n        // Key map shortcut\n        jQuery(document).keydown(function(e){\n              if( e.which === 70 && e.ctrlKey && e.shiftKey ){\n                 console.log(\\'control + shift + f : trigger open global-search dropdown\\');\n                 openGlobalSearchDropDown();\n              }\n        });\n\n\n        var openGlobalSearchDropDown = function() {\n            jQuery(\"#topmenu-global-search-dropdown\").toggleClass(\"open\");\n            jQuery(\"#top-global-search-input\").focus();\n        }\n\n    });\n    </script>\n    ';\n\n\treturn $html;\n}\n\n/**\n *  Show left menu bar\n *\n *  @param  array\t$menu_array_before \t       \tTable of menu entries to show before entries of menu handler. This param is deprectaed and must be provided to ''.\n *  @param  string\t$helppagename    \t       \tName of wiki page for help ('' by default).\n * \t\t\t\t     \t\t                   \tSyntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n * \t\t\t\t\t\t\t\t\t         \tFor other external page: http://server/url\n *  @param  string\t$notused             \t\tDeprecated. Used in past to add content into left menu. Hooks can be used now.\n *  @param  array\t$menu_array_after           Table of menu entries to show after entries of menu handler\n *  @param  int\t\t$leftmenuwithoutmainarea    Must be set to 1. 0 by default for backward compatibility with old modules.\n *  @param  string\t$title                      Title of web page\n *  @param  string  $acceptdelayedhtml          1 if caller request to have html delayed content not returned but saved into global $delayedhtmlcontent (so caller can show it at end of page to avoid flash FOUC effect)\n *  @return\tvoid\n */\nfunction left_menu($menu_array_before, $helppagename = '', $notused = '', $menu_array_after = '', $leftmenuwithoutmainarea = 0, $title = '', $acceptdelayedhtml = 0)\n{\n\tglobal $user, $conf, $langs, $db, $form;\n\tglobal $hookmanager, $menumanager;\n\n\t$searchform = '';\n\n\tif (!empty($menu_array_before)) {\n\t\tdol_syslog(\"Deprecated parameter menu_array_before was used when calling main::left_menu function. Menu entries of module should now be defined into module descriptor and not provided when calling left_menu.\", LOG_WARNING);\n\t}\n\n\tif (empty($conf->dol_hide_leftmenu) && (!defined('NOREQUIREMENU') || !constant('NOREQUIREMENU'))) {\n\t\t// Instantiate hooks for external modules\n\t\t$hookmanager->initHooks(array('searchform', 'leftblock'));\n\n\t\tprint \"\\n\".'<!-- Begin side-nav id-left -->'.\"\\n\".'<div class=\"side-nav\"><div id=\"id-left\">'.\"\\n\";\n\n\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t$conf->global->MAIN_USE_OLD_SEARCH_FORM = 1; // Select into select2 is awfull on smartphone. TODO Is this still true with select2 v4 ?\n\t\t}\n\n\t\tprint \"\\n\";\n\n\t\tif (!is_object($form)) {\n\t\t\t$form = new Form($db);\n\t\t}\n\t\t$selected = -1;\n\t\tif (empty($conf->global->MAIN_USE_TOP_MENU_SEARCH_DROPDOWN)) {\n\t\t\t$usedbyinclude = 1;\n\t\t\t$arrayresult = array();\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/ajax/selectsearchbox.php'; // This set $arrayresult\n\n\t\t\tif ($conf->use_javascript_ajax && empty($conf->global->MAIN_USE_OLD_SEARCH_FORM)) {\n\t\t\t\t$searchform .= $form->selectArrayFilter('searchselectcombo', $arrayresult, $selected, '', 1, 0, (empty($conf->global->MAIN_SEARCHBOX_CONTENT_LOADED_BEFORE_KEY) ? 1 : 0), 'vmenusearchselectcombo', 1, $langs->trans(\"Search\"), 1);\n\t\t\t} else {\n\t\t\t\tif (is_array($arrayresult)) {\n\t\t\t\t\tforeach ($arrayresult as $key => $val) {\n\t\t\t\t\t\t$searchform .= printSearchForm($val['url'], $val['url'], $val['label'], 'maxwidth125', 'sall', (empty($val['shortcut']) ? '' : $val['shortcut']), 'searchleft'.$key, $val['img']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Execute hook printSearchForm\n\t\t\t$parameters = array('searchform' => $searchform);\n\t\t\t$reshook = $hookmanager->executeHooks('printSearchForm', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\t\tif (empty($reshook)) {\n\t\t\t\t$searchform .= $hookmanager->resPrint;\n\t\t\t} else {\n\t\t\t\t$searchform = $hookmanager->resPrint;\n\t\t\t}\n\n\t\t\t// Force special value for $searchform\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) || empty($conf->use_javascript_ajax)) {\n\t\t\t\t$urltosearch = DOL_URL_ROOT.'/core/search_page.php?showtitlebefore=1';\n\t\t\t\t$searchform = '<div class=\"blockvmenuimpair blockvmenusearchphone\"><div id=\"divsearchforms1\"><a href=\"'.$urltosearch.'\" accesskey=\"s\" alt=\"'.dol_escape_htmltag($langs->trans(\"ShowSearchFields\")).'\">'.$langs->trans(\"Search\").'...</a></div></div>';\n\t\t\t} elseif ($conf->use_javascript_ajax && !empty($conf->global->MAIN_USE_OLD_SEARCH_FORM)) {\n\t\t\t\t$searchform = '<div class=\"blockvmenuimpair blockvmenusearchphone\"><div id=\"divsearchforms1\"><a href=\"#\" alt=\"'.dol_escape_htmltag($langs->trans(\"ShowSearchFields\")).'\">'.$langs->trans(\"Search\").'...</a></div><div id=\"divsearchforms2\" style=\"display: none\">'.$searchform.'</div>';\n\t\t\t\t$searchform .= '<script>\n            \tjQuery(document).ready(function () {\n            \t\tjQuery(\"#divsearchforms1\").click(function(){\n\t                   jQuery(\"#divsearchforms2\").toggle();\n\t               });\n            \t});\n                </script>' . \"\\n\";\n\t\t\t\t$searchform .= '</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Left column\n\t\tprint '<!-- Begin left menu -->'.\"\\n\";\n\n\t\tprint '<div class=\"vmenu\"'.(empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) ? '' : ' title=\"Left menu\"').'>'.\"\\n\\n\";\n\n\t\t// Show left menu with other forms\n\t\t$menumanager->menu_array = $menu_array_before;\n\t\t$menumanager->menu_array_after = $menu_array_after;\n\t\t$menumanager->showmenu('left', array('searchform'=>$searchform)); // output menu_array and menu found in database\n\n\t\t// Dolibarr version + help + bug report link\n\t\tprint \"\\n\";\n\t\tprint \"<!-- Begin Help Block-->\\n\";\n\t\tprint '<div id=\"blockvmenuhelp\" class=\"blockvmenuhelp\">'.\"\\n\";\n\n\t\t// Version\n\t\tif (!empty($conf->global->MAIN_SHOW_VERSION)) {    // Version is already on help picto and on login page.\n\t\t\t$doliurl = 'https://www.dolibarr.org';\n\t\t\t//local communities\n\t\t\tif (preg_match('/fr/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.fr';\n\t\t\t}\n\t\t\tif (preg_match('/es/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.es';\n\t\t\t}\n\t\t\tif (preg_match('/de/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.de';\n\t\t\t}\n\t\t\tif (preg_match('/it/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.it';\n\t\t\t}\n\t\t\tif (preg_match('/gr/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.gr';\n\t\t\t}\n\n\t\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE; $doliurl = '';\n\t\t\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t}\n\t\t\tprint '<div id=\"blockvmenuhelpapp\" class=\"blockvmenuhelp\">';\n\t\t\tif ($doliurl) {\n\t\t\t\tprint '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"'.$doliurl.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<span class=\"help\">';\n\t\t\t}\n\t\t\tprint $appli;\n\t\t\tif ($doliurl) {\n\t\t\t\tprint '</a>';\n\t\t\t} else {\n\t\t\t\tprint '</span>';\n\t\t\t}\n\t\t\tprint '</div>'.\"\\n\";\n\t\t}\n\n\t\t// Link to bugtrack\n\t\tif (!empty($conf->global->MAIN_BUGTRACK_ENABLELINK)) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\n\t\t\tif ($conf->global->MAIN_BUGTRACK_ENABLELINK == 'github') {\n\t\t\t\t$bugbaseurl = 'https://github.com/Dolibarr/dolibarr/issues/new?labels=Bug';\n\t\t\t\t$bugbaseurl .= '&title=';\n\t\t\t\t$bugbaseurl .= urlencode(\"Bug: \");\n\t\t\t\t$bugbaseurl .= '&body=';\n\t\t\t\t$bugbaseurl .= urlencode(\"# Instructions\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"*This is a template to help you report good issues. You may use [Github Markdown](https://help.github.com/articles/getting-started-with-writing-and-formatting-on-github/) syntax to format your issue report.*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"*Please:*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- *replace the bracket enclosed texts with meaningful information*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- *remove any unused sub-section*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"# Bug\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Short description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Environment\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Version**: \".DOL_VERSION.\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **OS**: \".php_uname('s').\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Web server**: \".$_SERVER[\"SERVER_SOFTWARE\"].\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **PHP**: \".php_sapi_name().' '.phpversion().\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Database**: \".$db::LABEL.' '.$db->getVersion().\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **URL(s)**: \".$_SERVER[\"REQUEST_URI\"].\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Expected and actual behavior\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Verbose description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Steps to reproduce the behavior\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Verbose description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## [Attached files](https://help.github.com/articles/issue-attachments) (Screenshots, screencasts, dolibarr.log, debugging informations\u2026)\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Files*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Report\\n\");\n\t\t\t} elseif (!empty($conf->global->MAIN_BUGTRACK_ENABLELINK)) {\n\t\t\t\t$bugbaseurl = $conf->global->MAIN_BUGTRACK_ENABLELINK;\n\t\t\t} else {\n\t\t\t\t$bugbaseurl = \"\";\n\t\t\t}\n\n\t\t\t// Execute hook printBugtrackInfo\n\t\t\t$parameters = array('bugbaseurl' => $bugbaseurl);\n\t\t\t$reshook = $hookmanager->executeHooks('printBugtrackInfo', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\t\tif (empty($reshook)) {\n\t\t\t\t$bugbaseurl .= $hookmanager->resPrint;\n\t\t\t} else {\n\t\t\t\t$bugbaseurl = $hookmanager->resPrint;\n\t\t\t}\n\n\t\t\tprint '<div id=\"blockvmenuhelpbugreport\" class=\"blockvmenuhelp\">';\n\t\t\tprint '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"'.$bugbaseurl.'\"><i class=\"fas fa-bug\"></i> '.$langs->trans(\"FindBug\").'</a>';\n\t\t\tprint '</div>';\n\t\t}\n\n\t\tprint \"</div>\\n\";\n\t\tprint \"<!-- End Help Block-->\\n\";\n\t\tprint \"\\n\";\n\n\t\tprint \"</div>\\n\";\n\t\tprint \"<!-- End left menu -->\\n\";\n\t\tprint \"\\n\";\n\n\t\t// Execute hook printLeftBlock\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('printLeftBlock', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tprint $hookmanager->resPrint;\n\n\t\tprint '</div></div> <!-- End side-nav id-left -->'; // End div id=\"side-nav\" div id=\"id-left\"\n\t}\n\n\tprint \"\\n\";\n\tprint '<!-- Begin right area -->'.\"\\n\";\n\n\tif (empty($leftmenuwithoutmainarea)) {\n\t\tmain_area($title);\n\t}\n}\n\n\n/**\n *  Begin main area\n *\n *  @param\tstring\t$title\t\tTitle\n *  @return\tvoid\n */\nfunction main_area($title = '')\n{\n\tglobal $conf, $langs, $hookmanager;\n\n\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup')) {\n\t\tprint '<div id=\"id-right\">';\n\t}\n\n\tprint \"\\n\";\n\n\tprint '<!-- Begin div class=\"fiche\" -->'.\"\\n\".'<div class=\"fiche\">'.\"\\n\";\n\n\t$hookmanager->initHooks(array('main'));\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('printMainArea', $parameters); // Note that $action and $object may have been modified by some hooks\n\tprint $hookmanager->resPrint;\n\n\tif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t\tprint info_admin($langs->trans(\"WarningYouAreInMaintenanceMode\", $conf->global->MAIN_ONLY_LOGIN_ALLOWED), 0, 0, 1, 'warning maintenancemode');\n\t}\n\n\t// Permit to add user company information on each printed document by setting SHOW_SOCINFO_ON_PRINT\n\tif (!empty($conf->global->SHOW_SOCINFO_ON_PRINT) && GETPOST('optioncss', 'aZ09') == 'print' && empty(GETPOST('disable_show_socinfo_on_print', 'az09'))) {\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('showSocinfoOnPrint', $parameters);\n\t\tif (empty($reshook)) {\n\t\t\tprint '<!-- Begin show mysoc info header -->'.\"\\n\";\n\t\t\tprint '<div id=\"mysoc-info-header\">'.\"\\n\";\n\t\t\tprint '<table class=\"centpercent div-table-responsive\">'.\"\\n\";\n\t\t\tprint '<tbody>';\n\t\t\tprint '<tr><td rowspan=\"0\" class=\"width20p\">';\n\t\t\tif ($conf->global->MAIN_SHOW_LOGO && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && !empty($conf->global->MAIN_INFO_SOCIETE_LOGO)) {\n\t\t\t\tprint '<img id=\"mysoc-info-header-logo\" style=\"max-width:100%\" alt=\"\" src=\"'.DOL_URL_ROOT.'/viewimage.php?cache=1&modulepart=mycompany&file='.urlencode('logos/'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_LOGO)).'\">';\n\t\t\t}\n\t\t\tprint '</td><td  rowspan=\"0\" class=\"width50p\"></td></tr>'.\"\\n\";\n\t\t\tprint '<tr><td class=\"titre bold\">'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_NOM).'</td></tr>'.\"\\n\";\n\t\t\tprint '<tr><td>'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ADDRESS).'<br>'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ZIP).' '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TOWN).'</td></tr>'.\"\\n\";\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_TEL)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Phone\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TEL).'</td></tr>';\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_MAIL)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Email\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_MAIL).'</td></tr>';\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_WEB)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Web\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_WEB).'</td></tr>';\n\t\t\t}\n\t\t\tprint '</tbody>';\n\t\t\tprint '</table>'.\"\\n\";\n\t\t\tprint '</div>'.\"\\n\";\n\t\t\tprint '<!-- End show mysoc info header -->'.\"\\n\";\n\t\t}\n\t}\n}\n\n\n/**\n *  Return helpbaseurl, helppage and mode\n *\n *  @param\tstring\t\t$helppagename\t\tPage name ('EN:xxx,ES:eee,FR:fff...' or 'http://localpage')\n *  @param  Translate\t$langs\t\t\t\tLanguage\n *  @return\tarray\t\tArray of help urls\n */\nfunction getHelpParamFor($helppagename, $langs)\n{\n\t$helpbaseurl = '';\n\t$helppage = '';\n\t$mode = '';\n\n\tif (preg_match('/^http/i', $helppagename)) {\n\t\t// If complete URL\n\t\t$helpbaseurl = '%s';\n\t\t$helppage = $helppagename;\n\t\t$mode = 'local';\n\t} else {\n\t\t// If WIKI URL\n\t\t$reg = array();\n\t\tif (preg_match('/^es/i', $langs->defaultlang)) {\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/ES:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\tif (preg_match('/^fr/i', $langs->defaultlang)) {\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/FR:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\tif (empty($helppage)) {\t// If help page not already found\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/EN:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\t$mode = 'wiki';\n\t}\n\treturn array('helpbaseurl'=>$helpbaseurl, 'helppage'=>$helppage, 'mode'=>$mode);\n}\n\n\n/**\n *  Show a search area.\n *  Used when the javascript quick search is not used.\n *\n *  @param  string\t$urlaction          Url post\n *  @param  string\t$urlobject          Url of the link under the search box\n *  @param  string\t$title              Title search area\n *  @param  string\t$htmlmorecss        Add more css\n *  @param  string\t$htmlinputname      Field Name input form\n *  @param\tstring\t$accesskey\t\t\tAccesskey\n *  @param  string  $prefhtmlinputname  Complement for id to avoid multiple same id in the page\n *  @param\tstring\t$img\t\t\t\tImage to use\n *  @param\tstring\t$showtitlebefore\tShow title before input text instead of into placeholder. This can be set when output is dedicated for text browsers.\n *  @param\tstring\t$autofocus\t\t\tSet autofocus on field\n *  @return\tstring\n */\nfunction printSearchForm($urlaction, $urlobject, $title, $htmlmorecss, $htmlinputname, $accesskey = '', $prefhtmlinputname = '', $img = '', $showtitlebefore = 0, $autofocus = 0)\n{\n\tglobal $conf, $langs, $user;\n\n\t$ret = '';\n\t$ret .= '<form action=\"'.$urlaction.'\" method=\"post\" class=\"searchform nowraponall tagtr\">';\n\t$ret .= '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t$ret .= '<input type=\"hidden\" name=\"savelogin\" value=\"'.dol_escape_htmltag($user->login).'\">';\n\tif ($showtitlebefore) {\n\t\t$ret .= '<div class=\"tagtd left\">'.$title.'</div> ';\n\t}\n\t$ret .= '<div class=\"tagtd\">';\n\t$ret .= img_picto('', $img, '', false, 0, 0, '', 'paddingright width20');\n\t$ret .= '<input type=\"text\" class=\"flat '.$htmlmorecss.'\"';\n\t$ret .= ' style=\"background-repeat: no-repeat; background-position: 3px;\"';\n\t$ret .= ($accesskey ? ' accesskey=\"'.$accesskey.'\"' : '');\n\t$ret .= ' placeholder=\"'.strip_tags($title).'\"';\n\t$ret .= ($autofocus ? ' autofocus' : '');\n\t$ret .= ' name=\"'.$htmlinputname.'\" id=\"'.$prefhtmlinputname.$htmlinputname.'\" />';\n\t$ret .= '<button type=\"submit\" class=\"button bordertransp\" style=\"padding-top: 4px; padding-bottom: 4px; padding-left: 6px; padding-right: 6px\">';\n\t$ret .= '<span class=\"fa fa-search\"></span>';\n\t$ret .= '</button>';\n\t$ret .= '</div>';\n\t$ret .= \"</form>\\n\";\n\treturn $ret;\n}\n\n\nif (!function_exists(\"llxFooter\")) {\n\t/**\n\t * Show HTML footer\n\t * Close div /DIV class=fiche + /DIV id-right + /DIV id-container + /BODY + /HTML.\n\t * If global var $delayedhtmlcontent was filled, we output it just before closing the body.\n\t *\n\t * @param\tstring\t$comment    \t\t\t\tA text to add as HTML comment into HTML generated page\n\t * @param\tstring\t$zone\t\t\t\t\t\t'private' (for private pages) or 'public' (for public pages)\n\t * @param\tint\t\t$disabledoutputofmessages\tClear all messages stored into session without diplaying them\n\t * @return\tvoid\n\t */\n\tfunction llxFooter($comment = '', $zone = 'private', $disabledoutputofmessages = 0)\n\t{\n\t\tglobal $conf, $db, $langs, $user, $mysoc, $object, $hookmanager;\n\t\tglobal $delayedhtmlcontent;\n\t\tglobal $contextpage, $page, $limit, $mode;\n\t\tglobal $dolibarr_distrib;\n\n\t\t$ext = 'layout='.urlencode($conf->browser->layout).'&version='.urlencode(DOL_VERSION);\n\n\t\t// Hook to add more things on all pages within fiche DIV\n\t\t$llxfooter = '';\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('llxFooter', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\tif (empty($reshook)) {\n\t\t\t$llxfooter .= $hookmanager->resPrint;\n\t\t} elseif ($reshook > 0) {\n\t\t\t$llxfooter = $hookmanager->resPrint;\n\t\t}\n\t\tif ($llxfooter) {\n\t\t\tprint $llxfooter;\n\t\t}\n\n\t\t// Global html output events ($mesgs, $errors, $warnings)\n\t\tdol_htmloutput_events($disabledoutputofmessages);\n\n\t\t// Code for search criteria persistence.\n\t\t// $user->lastsearch_values was set by the GETPOST when form field search_xxx exists\n\t\tif (is_object($user) && !empty($user->lastsearch_values_tmp) && is_array($user->lastsearch_values_tmp)) {\n\t\t\t// Clean and save data\n\t\t\tforeach ($user->lastsearch_values_tmp as $key => $val) {\n\t\t\t\tunset($_SESSION['lastsearch_values_tmp_'.$key]); // Clean array to rebuild it just after\n\t\t\t\tif (count($val) && empty($_POST['button_removefilter']) && empty($_POST['button_removefilter_x'])) {\n\t\t\t\t\tif (empty($val['sortfield'])) {\n\t\t\t\t\t\tunset($val['sortfield']);\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($val['sortorder'])) {\n\t\t\t\t\t\tunset($val['sortorder']);\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog('Save lastsearch_values_tmp_'.$key.'='.json_encode($val, 0).\" (systematic recording of last search criterias)\");\n\t\t\t\t\t$_SESSION['lastsearch_values_tmp_'.$key] = json_encode($val);\n\t\t\t\t\tunset($_SESSION['lastsearch_values_'.$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t// Clean $relativepathstring\n\t\tif (constant('DOL_URL_ROOT')) {\n\t\t\t$relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t}\n\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\tif (preg_match('/list\\.php$/', $relativepathstring)) {\n\t\t\tunset($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_page_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_mode_tmp_'.$relativepathstring]);\n\n\t\t\tif (!empty($contextpage)) {\n\t\t\t\t$_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring] = $contextpage;\n\t\t\t}\n\t\t\tif (!empty($page) && $page > 0) {\n\t\t\t\t$_SESSION['lastsearch_page_tmp_'.$relativepathstring] = $page;\n\t\t\t}\n\t\t\tif (!empty($limit) && $limit != $conf->liste_limit) {\n\t\t\t\t$_SESSION['lastsearch_limit_tmp_'.$relativepathstring] = $limit;\n\t\t\t}\n\t\t\tif (!empty($mode)) {\n\t\t\t\t$_SESSION['lastsearch_mode_tmp_'.$relativepathstring] = $mode;\n\t\t\t}\n\n\t\t\tunset($_SESSION['lastsearch_contextpage_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_page_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_limit_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_mode_'.$relativepathstring]);\n\t\t}\n\n\t\t// Core error message\n\t\tif (!empty($conf->global->MAIN_CORE_ERROR)) {\n\t\t\t// Ajax version\n\t\t\tif ($conf->use_javascript_ajax) {\n\t\t\t\t$title = img_warning().' '.$langs->trans('CoreErrorTitle');\n\t\t\t\tprint ajax_dialog($title, $langs->trans('CoreErrorMessage'));\n\t\t\t} else {\n\t\t\t\t// html version\n\t\t\t\t$msg = img_warning().' '.$langs->trans('CoreErrorMessage');\n\t\t\t\tprint '<div class=\"error\">'.$msg.'</div>';\n\t\t\t}\n\n\t\t\t//define(\"MAIN_CORE_ERROR\",0);      // Constant was defined and we can't change value of a constant\n\t\t}\n\n\t\tprint \"\\n\\n\";\n\n\t\tprint '</div> <!-- End div class=\"fiche\" -->'.\"\\n\"; // End div fiche\n\n\t\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup')) {\n\t\t\tprint '</div> <!-- End div id-right -->'.\"\\n\"; // End div id-right\n\t\t}\n\n\t\tif (empty($conf->dol_hide_leftmenu) && empty($conf->dol_use_jmobile)) {\n\t\t\tprint '</div> <!-- End div id-container -->'.\"\\n\"; // End div container\n\t\t}\n\n\t\tprint \"\\n\";\n\t\tif ($comment) {\n\t\t\tprint '<!-- '.$comment.' -->'.\"\\n\";\n\t\t}\n\n\t\tprintCommonFooter($zone);\n\n\t\tif (!empty($delayedhtmlcontent)) {\n\t\t\tprint $delayedhtmlcontent;\n\t\t}\n\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint \"\\n\".'<!-- Includes JS Footer of Dolibarr -->'.\"\\n\";\n\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_foot.js.php?lang='.$langs->defaultlang.($ext ? '&'.$ext : '').'\"></script>'.\"\\n\";\n\t\t}\n\n\t\t// Wrapper to add log when clicking on download or preview\n\t\tif (isModEnabled('blockedlog') && is_object($object) && !empty($object->id) && $object->id > 0 && $object->statut > 0) {\n\t\t\tif (in_array($object->element, array('facture'))) {       // Restrict for the moment to element 'facture'\n\t\t\t\tprint \"\\n<!-- JS CODE TO ENABLE log when making a download or a preview of a document -->\\n\";\n\t\t\t\t?>\n\t\t\t\t<script>\n\t\t\t\tjQuery(document).ready(function () {\n\t\t\t\t\t$('a.documentpreview').click(function() {\n\t\t\t\t\t\t$.post('<?php echo DOL_URL_ROOT.\"/blockedlog/ajax/block-add.php\" ?>'\n\t\t\t\t\t\t\t\t, {\n\t\t\t\t\t\t\t\t\tid:<?php echo $object->id; ?>\n\t\t\t\t\t\t\t\t\t, element:'<?php echo $object->element ?>'\n\t\t\t\t\t\t\t\t\t, action:'DOC_PREVIEW'\n\t\t\t\t\t\t\t\t\t, token: '<?php echo currentToken(); ?>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\t$('a.documentdownload').click(function() {\n\t\t\t\t\t\t$.post('<?php echo DOL_URL_ROOT.\"/blockedlog/ajax/block-add.php\" ?>'\n\t\t\t\t\t\t\t\t, {\n\t\t\t\t\t\t\t\t\tid:<?php echo $object->id; ?>\n\t\t\t\t\t\t\t\t\t, element:'<?php echo $object->element ?>'\n\t\t\t\t\t\t\t\t\t, action:'DOC_DOWNLOAD'\n\t\t\t\t\t\t\t\t\t, token: '<?php echo currentToken(); ?>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\n\t\t// A div for the address popup\n\t\tprint \"\\n<!-- A div to allow dialog popup by jQuery('#dialogforpopup').dialog() -->\\n\";\n\t\tprint '<div id=\"dialogforpopup\" style=\"display: none;\"></div>'.\"\\n\";\n\n\t\t// Add code for the asynchronous anonymous first ping (for telemetry)\n\t\t// You can use &forceping=1 in parameters to force the ping if the ping was already sent.\n\t\t$forceping = GETPOST('forceping', 'alpha');\n\t\tif (($_SERVER[\"PHP_SELF\"] == DOL_URL_ROOT.'/index.php') || $forceping) {\n\t\t\t//print '<!-- instance_unique_id='.$conf->file->instance_unique_id.' MAIN_FIRST_PING_OK_ID='.$conf->global->MAIN_FIRST_PING_OK_ID.' -->';\n\t\t\t$hash_unique_id = md5('dolibarr'.$conf->file->instance_unique_id);\t// Do not use dol_hash(), must not change if salt changes.\n\n\t\t\tif (empty($conf->global->MAIN_FIRST_PING_OK_DATE)\n\t\t\t\t|| (!empty($conf->file->instance_unique_id) && ($hash_unique_id != $conf->global->MAIN_FIRST_PING_OK_ID) && ($conf->global->MAIN_FIRST_PING_OK_ID != 'disabled'))\n\t\t\t|| $forceping) {\n\t\t\t\t// No ping done if we are into an alpha version\n\t\t\t\tif (strpos('alpha', DOL_VERSION) > 0 && !$forceping) {\n\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. It is an alpha version -->\\n\";\n\t\t\t\t} elseif (empty($_COOKIE['DOLINSTALLNOPING_'.$hash_unique_id]) || $forceping) {\t// Cookie is set when we uncheck the checkbox in the installation wizard.\n\t\t\t\t\t// MAIN_LAST_PING_KO_DATE\n\t\t\t\t\t// Disable ping if MAIN_LAST_PING_KO_DATE is set and is recent (this month)\n\t\t\t\t\tif (!empty($conf->global->MAIN_LAST_PING_KO_DATE) && substr($conf->global->MAIN_LAST_PING_KO_DATE, 0, 6) == dol_print_date(dol_now(), '%Y%m') && !$forceping) {\n\t\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. An error already occured this month, we will try later. -->\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\n\t\t\t\t\t\tprint \"\\n\".'<!-- Includes JS for Ping of Dolibarr forceping='.$forceping.' MAIN_FIRST_PING_OK_DATE='.getDolGlobalString(\"MAIN_FIRST_PING_OK_DATE\").' MAIN_FIRST_PING_OK_ID='.getDolGlobalString(\"MAIN_FIRST_PING_OK_ID\").' MAIN_LAST_PING_KO_DATE='.getDolGlobalString(\"MAIN_LAST_PING_KO_DATE\").' -->'.\"\\n\";\n\t\t\t\t\t\tprint \"\\n<!-- JS CODE TO ENABLE the anonymous Ping -->\\n\";\n\t\t\t\t\t\t$url_for_ping = (empty($conf->global->MAIN_URL_FOR_PING) ? \"https://ping.dolibarr.org/\" : $conf->global->MAIN_URL_FOR_PING);\n\t\t\t\t\t\t// Try to guess the distrib used\n\t\t\t\t\t\t$distrib = 'standard';\n\t\t\t\t\t\tif ($_SERVER[\"SERVER_ADMIN\"] == 'doliwamp@localhost') {\n\t\t\t\t\t\t\t$distrib = 'doliwamp';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($dolibarr_distrib)) {\n\t\t\t\t\t\t\t$distrib = $dolibarr_distrib;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<script>\n\t\t\t\t\t\t\tjQuery(document).ready(function (tmp) {\n\t\t\t\t\t\t\t\tconsole.log(\"Try Ping with hash_unique_id is md5('dolibarr'+instance_unique_id)\");\n\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t  method: \"POST\",\n\t\t\t\t\t\t\t\t\t  url: \"<?php echo $url_for_ping ?>\",\n\t\t\t\t\t\t\t\t\t  timeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t  cache: false,\n\t\t\t\t\t\t\t\t\t  data: {\n\t\t\t\t\t\t\t\t\t\t  hash_algo: 'md5',\n\t\t\t\t\t\t\t\t\t\t  hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>',\n\t\t\t\t\t\t\t\t\t\t  action: 'dolibarrping',\n\t\t\t\t\t\t\t\t\t\t  version: '<?php echo (float) DOL_VERSION; ?>',\n\t\t\t\t\t\t\t\t\t\t  entity: '<?php echo (int) $conf->entity; ?>',\n\t\t\t\t\t\t\t\t\t\t  dbtype: '<?php echo dol_escape_js($db->type); ?>',\n\t\t\t\t\t\t\t\t\t\t  country_code: '<?php echo $mysoc->country_code ? dol_escape_js($mysoc->country_code) : 'unknown'; ?>',\n\t\t\t\t\t\t\t\t\t\t  php_version: '<?php echo dol_escape_js(phpversion()); ?>',\n\t\t\t\t\t\t\t\t\t\t  os_version: '<?php echo dol_escape_js(version_os('smr')); ?>',\n\t\t\t\t\t\t\t\t\t\t  distrib: '<?php echo $distrib ? dol_escape_js($distrib) : 'unknown'; ?>',\n\t\t\t\t\t\t\t\t\t\t  token: 'notrequired'\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t  success: function (data, status, xhr) {   // success callback function (data contains body of response)\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Ping ok\");\n\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\t\t\t\t\t\turl: '<?php echo DOL_URL_ROOT.'/core/ajax/pingresult.php'; ?>',\n\t\t\t\t\t\t\t\t\t\t\t\ttimeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\t\t\t\t\t\t\tdata: { hash_algo: 'md5', hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>', action: 'firstpingok', token: '<?php echo currentToken(); ?>' },\t// for update\n\t\t\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t  error: function (data,status,xhr) {   // error callback function\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Ping ko: \" + data);\n\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\t  method: 'GET',\n\t\t\t\t\t\t\t\t\t\t\t\t  url: '<?php echo DOL_URL_ROOT.'/core/ajax/pingresult.php'; ?>',\n\t\t\t\t\t\t\t\t\t\t\t\t  timeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t\t\t\t  cache: false,\n\t\t\t\t\t\t\t\t\t\t\t\t  data: { hash_algo: 'md5', hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>', action: 'firstpingko', token: '<?php echo currentToken(); ?>' },\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t</script>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$now = dol_now();\n\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. It was disabled -->\\n\";\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\n\t\t\t\t\tdolibarr_set_const($db, 'MAIN_FIRST_PING_OK_DATE', dol_print_date($now, 'dayhourlog', 'gmt'), 'chaine', 0, '', $conf->entity);\n\t\t\t\t\tdolibarr_set_const($db, 'MAIN_FIRST_PING_OK_ID', 'disabled', 'chaine', 0, '', $conf->entity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$reshook = $hookmanager->executeHooks('beforeBodyClose'); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\tprint $hookmanager->resPrint;\n\t\t}\n\n\t\tprint \"</body>\\n\";\n\t\tprint \"</html>\\n\";\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2002-2007  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2003       Xavier Dutoit           <doli@sydesy.com>\n * Copyright (C) 2004-2021  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2004       Sebastien Di Cintio     <sdicintio@ressource-toi.org>\n * Copyright (C) 2004       Benoit Mortier          <benoit.mortier@opensides.be>\n * Copyright (C) 2005-2021  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2011-2014  Philippe Grand          <philippe.grand@atoo-net.com>\n * Copyright (C) 2008       Matteli\n * Copyright (C) 2011-2016  Juanjo Menent           <jmenent@2byte.es>\n * Copyright (C) 2012       Christophe Battarel     <christophe.battarel@altairis.fr>\n * Copyright (C) 2014-2015  Marcos Garc\u00eda           <marcosgdf@gmail.com>\n * Copyright (C) 2015       Rapha\u00ebl Doursenaud      <rdoursenaud@gpcsolutions.fr>\n * Copyright (C) 2020       Demarest Maxime         <maxime@indelog.fr>\n * Copyright (C) 2020       Charlene Benke          <charlie@patas-monkey.com>\n * Copyright (C) 2021       Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n * Copyright (C) 2021       Alexandre Spangaro      <aspangaro@open-dsi.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file       htdocs/main.inc.php\n *\t\\ingroup\tcore\n *\t\\brief      File that defines environment for Dolibarr GUI pages only (file not required by scripts)\n */\n\n//@ini_set('memory_limit', '128M');\t// This may be useless if memory is hard limited by your PHP\n\n// For optional tuning. Enabled if environment variable MAIN_SHOW_TUNING_INFO is defined.\n$micro_start_time = 0;\nif (!empty($_SERVER['MAIN_SHOW_TUNING_INFO'])) {\n\tlist($usec, $sec) = explode(\" \", microtime());\n\t$micro_start_time = ((float) $usec + (float) $sec);\n\t// Add Xdebug code coverage\n\t//define('XDEBUGCOVERAGE',1);\n\tif (defined('XDEBUGCOVERAGE')) {\n\t\txdebug_start_code_coverage();\n\t}\n}\n\n\n/**\n * Return the real char for a numeric entities.\n * WARNING: This function is required by testSqlAndScriptInject() and the GETPOST 'restricthtml'. Regex calling must be similar.\n *\n * @param\tstring\t\t$matches\t\t\tString of numeric entity\n * @return\tstring\t\t\t\t\t\t\tNew value\n */\nfunction realCharForNumericEntities($matches)\n{\n\t$newstringnumentity = preg_replace('/;$/', '', $matches[1]);\n\t//print  ' $newstringnumentity='.$newstringnumentity;\n\n\tif (preg_match('/^x/i', $newstringnumentity)) {\n\t\t$newstringnumentity = hexdec(preg_replace('/^x/i', '', $newstringnumentity));\n\t}\n\n\t// The numeric value we don't want as entities because they encode ascii char, and why using html entities on ascii except for haking ?\n\tif (($newstringnumentity >= 65 && $newstringnumentity <= 90) || ($newstringnumentity >= 97 && $newstringnumentity <= 122)) {\n\t\treturn chr((int) $newstringnumentity);\n\t}\n\n\treturn '&#'.$matches[1]; // Value will be unchanged because regex was /&#(  )/\n}\n\n/**\n * Security: WAF layer for SQL Injection and XSS Injection (scripts) protection (Filters on GET, POST, PHP_SELF).\n * Warning: Such a protection can't be enough. It is not reliable as it will always be possible to bypass this. Good protection can\n * only be guaranted by escaping data during output.\n *\n * @param\t\tstring\t\t$val\t\tBrute value found into $_GET, $_POST or PHP_SELF\n * @param\t\tstring\t\t$type\t\t0=POST, 1=GET, 2=PHP_SELF, 3=GET without sql reserved keywords (the less tolerant test)\n * @return\t\tint\t\t\t\t\t\t>0 if there is an injection, 0 if none\n */\nfunction testSqlAndScriptInject($val, $type)\n{\n\t// Decode string first because a lot of things are obfuscated by encoding or multiple encoding.\n\t// So <svg o&#110;load='console.log(&quot;123&quot;)' become <svg onload='console.log(&quot;123&quot;)'\n\t// So \"&colon;&apos;\" become \":'\" (due to ENT_HTML5)\n\t// So \"&Tab;&NewLine;\" become \"\"\n\t// So \"&lpar;&rpar;\" become \"()\"\n\n\t// Loop to decode until no more things to decode.\n\t//print \"before decoding $val\\n\";\n\tdo {\n\t\t$oldval = $val;\n\t\t$val = html_entity_decode($val, ENT_QUOTES | ENT_HTML5);\t// Decode '&colon;', '&apos;', '&Tab;', '&NewLine', ...\n\t\t// Sometimes we have entities without the ; at end so html_entity_decode does not work but entities is still interpreted by browser.\n\t\t$val = preg_replace_callback('/&#(x?[0-9][0-9a-f]+;?)/i', function ($m) {\n\t\t\t// Decode '&#110;', ...\n\t\t\treturn realCharForNumericEntities($m); }, $val);\n\n\t\t// We clean html comments because some hacks try to obfuscate evil strings by inserting HTML comments. Example: on<!-- -->error=alert(1)\n\t\t$val = preg_replace('/<!--[^>]*-->/', '', $val);\n\t\t$val = preg_replace('/[\\r\\n\\t]/', '', $val);\n\t} while ($oldval != $val);\n\t//print \"type = \".$type.\" after decoding: \".$val.\"\\n\";\n\n\t$inj = 0;\n\n\t// We check string because some hacks try to obfuscate evil strings by inserting non printable chars. Example: 'java(ascci09)scr(ascii00)ipt' is processed like 'javascript' (whatever is place of evil ascii char)\n\t// We should use dol_string_nounprintableascii but function is not yet loaded/available\n\t// Example of valid UTF8 chars:\n\t// utf8=utf8mb3:    '\\x09', '\\x0A', '\\x0D', '\\x7E'\n\t// utf8=utf8mb3: \t'\\xE0\\xA0\\x80'\n\t// utf8mb4: \t\t'\\xF0\\x9D\\x84\\x9E'   (but this may be refused by the database insert if pagecode is utf8=utf8mb3)\n\t$newval = preg_replace('/[\\x00-\\x08\\x0B-\\x0C\\x0E-\\x1F\\x7F]/u', '', $val); // /u operator makes UTF8 valid characters being ignored so are not included into the replace\n\n\t// Note that $newval may also be completely empty '' when non valid UTF8 are found.\n\tif ($newval != $val) {\n\t\t// If $val has changed after removing non valid UTF8 chars, it means we have an evil string.\n\t\t$inj += 1;\n\t}\n\t//print 'type='.$type.'-val='.$val.'-newval='.$newval.\"-inj=\".$inj.\"\\n\";\n\n\t// For SQL Injection (only GET are used to scan for such injection strings)\n\tif ($type == 1 || $type == 3) {\n\t\t// Note the \\s+ is replaced into \\s* because some spaces may have been modified in previous loop\n\t\t$inj += preg_match('/delete\\s*from/i', $val);\n\t\t$inj += preg_match('/create\\s*table/i', $val);\n\t\t$inj += preg_match('/insert\\s*into/i', $val);\n\t\t$inj += preg_match('/select\\s*from/i', $val);\n\t\t$inj += preg_match('/into\\s*(outfile|dumpfile)/i', $val);\n\t\t$inj += preg_match('/user\\s*\\(/i', $val); // avoid to use function user() or mysql_user() that return current database login\n\t\t$inj += preg_match('/information_schema/i', $val); // avoid to use request that read information_schema database\n\t\t$inj += preg_match('/<svg/i', $val); // <svg can be allowed in POST\n\t\t$inj += preg_match('/update[^&].*set.+=/i', $val);\t// the [^&] test is to avoir error when request is like action=update&...set...\n\t\t$inj += preg_match('/union.+select/i', $val);\n\t}\n\tif ($type == 3) {\n\t\t// Note the \\s+ is replaced into \\s* because some spaces may have been modified in previous loop\n\t\t$inj += preg_match('/select|update|delete|truncate|replace|group\\s*by|concat|count|from|union/i', $val);\n\t}\n\tif ($type != 2) {\t// Not common key strings, so we can check them both on GET and POST\n\t\t$inj += preg_match('/updatexml\\(/i', $val);\n\t\t$inj += preg_match('/(\\.\\.%2f)+/i', $val);\n\t\t$inj += preg_match('/\\s@@/', $val);\n\t}\n\t// For XSS Injection done by closing textarea to execute content into a textarea field\n\t$inj += preg_match('/<\\/textarea/i', $val);\n\t// For XSS Injection done by adding javascript with script\n\t// This is all cases a browser consider text is javascript:\n\t// When it found '<script', 'javascript:', '<style', 'onload\\s=' on body tag, '=\"&' on a tag size with old browsers\n\t// All examples on page: http://ha.ckers.org/xss.html#XSScalc\n\t// More on https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\t$inj += preg_match('/<audio/i', $val);\n\t$inj += preg_match('/<embed/i', $val);\n\t$inj += preg_match('/<iframe/i', $val);\n\t$inj += preg_match('/<object/i', $val);\n\t$inj += preg_match('/<script/i', $val);\n\t$inj += preg_match('/Set\\.constructor/i', $val); // ECMA script 6\n\tif (!defined('NOSTYLECHECK')) {\n\t\t$inj += preg_match('/<style/i', $val);\n\t}\n\t$inj += preg_match('/base\\s+href/si', $val);\n\t$inj += preg_match('/=data:/si', $val);\n\t// List of dom events is on https://www.w3schools.com/jsref/dom_obj_event.asp and https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\n\t$inj += preg_match('/on(mouse|drag|key|load|touch|pointer|select|transition)([a-z]*)\\s*=/i', $val); // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>\n\t$inj += preg_match('/on(abort|afterprint|animation|auxclick|beforecopy|beforecut|beforeprint|beforeunload|blur|cancel|canplay|canplaythrough|change|click|close|contextmenu|cuechange|copy|cut)\\s*=/i', $val);\n\t$inj += preg_match('/on(dblclick|drop|durationchange|emptied|end|ended|error|focus|focusin|focusout|formdata|gotpointercapture|hashchange|input|invalid)\\s*=/i', $val);\n\t$inj += preg_match('/on(lostpointercapture|offline|online|pagehide|pageshow)\\s*=/i', $val);\n\t$inj += preg_match('/on(paste|pause|play|playing|progress|ratechange|reset|resize|scroll|search|seeked|seeking|show|stalled|start|submit|suspend)\\s*=/i', $val);\n\t$inj += preg_match('/on(timeupdate|toggle|unload|volumechange|waiting|wheel)\\s*=/i', $val);\n\t// More not into the previous list\n\t$inj += preg_match('/on(repeat|begin|finish|beforeinput)\\s*=/i', $val);\n\n\t// We refuse html into html because some hacks try to obfuscate evil strings by inserting HTML into HTML. Example: <img on<a>error=alert(1) to bypass test on onerror\n\t$tmpval = preg_replace('/<[^<]+>/', '', $val);\n\t// List of dom events is on https://www.w3schools.com/jsref/dom_obj_event.asp and https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\n\t$inj += preg_match('/on(mouse|drag|key|load|touch|pointer|select|transition)([a-z]*)\\s*=/i', $tmpval); // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>\n\t$inj += preg_match('/on(abort|afterprint|animation|auxclick|beforecopy|beforecut|beforeprint|beforeunload|blur|cancel|canplay|canplaythrough|change|click|close|contextmenu|cuechange|copy|cut)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(dblclick|drop|durationchange|emptied|end|ended|error|focus|focusin|focusout|formdata|gotpointercapture|hashchange|input|invalid)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(lostpointercapture|offline|online|pagehide|pageshow)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(paste|pause|play|playing|progress|ratechange|reset|resize|scroll|search|seeked|seeking|show|stalled|start|submit|suspend)\\s*=/i', $tmpval);\n\t$inj += preg_match('/on(timeupdate|toggle|unload|volumechange|waiting|wheel)\\s*=/i', $tmpval);\n\t// More not into the previous list\n\t$inj += preg_match('/on(repeat|begin|finish|beforeinput)\\s*=/i', $tmpval);\n\n\t//$inj += preg_match('/on[A-Z][a-z]+\\*=/', $val);   // To lock event handlers onAbort(), ...\n\t$inj += preg_match('/&#58;|&#0000058|&#x3A/i', $val); // refused string ':' encoded (no reason to have it encoded) to lock 'javascript:...'\n\t$inj += preg_match('/j\\s*a\\s*v\\s*a\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*:/i', $val);\n\t$inj += preg_match('/vbscript\\s*:/i', $val);\n\t// For XSS Injection done by adding javascript closing html tags like with onmousemove, etc... (closing a src or href tag with not cleaned param)\n\tif ($type == 1 || $type == 3) {\n\t\t$val = str_replace('enclosure=\"', 'enclosure=X', $val); // We accept enclosure=\" for the export/import module\n\t\t$inj += preg_match('/\"/i', $val); // We refused \" in GET parameters value.\n\t}\n\tif ($type == 2) {\n\t\t$inj += preg_match('/[:;\"\\'<>\\?\\(\\){}\\$%]/', $val); // PHP_SELF is a file system (or url path without parameters). It can contains spaces.\n\t}\n\n\treturn $inj;\n}\n\n/**\n * Return true if security check on parameters are OK, false otherwise.\n *\n * @param\t\tstring|array\t$var\t\tVariable name\n * @param\t\tstring\t\t\t$type\t\t1=GET, 0=POST, 2=PHP_SELF\n * @return\t\tboolean|null\t\t\t\ttrue if there is no injection. Stop code if injection found.\n */\nfunction analyseVarsForSqlAndScriptsInjection(&$var, $type)\n{\n\tif (is_array($var)) {\n\t\tforeach ($var as $key => $value) {\t// Warning, $key may also be used for attacks\n\t\t\tif (analyseVarsForSqlAndScriptsInjection($key, $type) && analyseVarsForSqlAndScriptsInjection($value, $type)) {\n\t\t\t\t//$var[$key] = $value;\t// This is useless\n\t\t\t} else {\n\t\t\t\t// Get remote IP: PS: We do not use getRemoteIP(), function is not yet loaded and we need a value that can't be spoofed\n\t\t\t\t$ip = (empty($_SERVER['REMOTE_ADDR']) ? 'unknown' : $_SERVER['REMOTE_ADDR']);\n\t\t\t\t$errormessage = 'Access refused to '.htmlentities($ip, ENT_COMPAT, 'UTF-8').' by SQL or Script injection protection in main.inc.php - GETPOST type='.htmlentities($type, ENT_COMPAT, 'UTF-8').' paramkey='.htmlentities($key, ENT_COMPAT, 'UTF-8').' paramvalue='.htmlentities($value, ENT_COMPAT, 'UTF-8').' page='.htmlentities($_SERVER[\"REQUEST_URI\"], ENT_COMPAT, 'UTF-8');\n\t\t\t\tprint $errormessage;\n\t\t\t\t// Add entry into error log\n\t\t\t\tif (function_exists('error_log')) {\n\t\t\t\t\terror_log($errormessage);\n\t\t\t\t}\n\t\t\t\t// TODO Add entry into security audit table\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else {\n\t\treturn (testSqlAndScriptInject($var, $type) <= 0);\n\t}\n}\n\n// To disable the WAF for GET and POST and PHP_SELF, uncomment this\n//define('NOSCANPHPSELFFORINJECTION', 1);\n//define('NOSCANGETFORINJECTION', 1);\n//define('NOSCANPOSTFORINJECTION', 1);\n\n// Check consistency of NOREQUIREXXX DEFINES\nif ((defined('NOREQUIREDB') || defined('NOREQUIRETRAN')) && !defined('NOREQUIREMENU')) {\n\tprint 'If define NOREQUIREDB or NOREQUIRETRAN are set, you must also set NOREQUIREMENU or not set them.';\n\texit;\n}\nif (defined('NOREQUIREUSER') && !defined('NOREQUIREMENU')) {\n\tprint 'If define NOREQUIREUSER is set, you must also set NOREQUIREMENU or not set it.';\n\texit;\n}\n\n// Sanity check on URL\nif (!defined('NOSCANPHPSELFFORINJECTION') && !empty($_SERVER[\"PHP_SELF\"])) {\n\t$morevaltochecklikepost = array($_SERVER[\"PHP_SELF\"]);\n\tanalyseVarsForSqlAndScriptsInjection($morevaltochecklikepost, 2);\n}\n// Sanity check on GET parameters\nif (!defined('NOSCANGETFORINJECTION') && !empty($_SERVER[\"QUERY_STRING\"])) {\n\t// Note: QUERY_STRING is url encoded, but $_GET and $_POST are already decoded\n\t// Because the analyseVarsForSqlAndScriptsInjection is designed for already url decoded value, we must decode QUERY_STRING\n\t// Another solution is to provide $_GET as parameter\n\t$morevaltochecklikeget = array(urldecode($_SERVER[\"QUERY_STRING\"]));\n\tanalyseVarsForSqlAndScriptsInjection($morevaltochecklikeget, 1);\n}\n// Sanity check on POST\nif (!defined('NOSCANPOSTFORINJECTION')) {\n\tanalyseVarsForSqlAndScriptsInjection($_POST, 0);\n}\n\n// This is to make Dolibarr working with Plesk\nif (!empty($_SERVER['DOCUMENT_ROOT']) && substr($_SERVER['DOCUMENT_ROOT'], -6) !== 'htdocs') {\n\tset_include_path($_SERVER['DOCUMENT_ROOT'].'/htdocs');\n}\n\n// Include the conf.php and functions.lib.php and security.lib.php. This defined the constants like DOL_DOCUMENT_ROOT, DOL_DATA_ROOT, DOL_URL_ROOT...\nrequire_once 'filefunc.inc.php';\n\n// If there is a POST parameter to tell to save automatically some POST parameters into cookies, we do it.\n// This is used for example by form of boxes to save personalization of some options.\n// DOL_AUTOSET_COOKIE=cookiename:val1,val2 and  cookiename_val1=aaa cookiename_val2=bbb will set cookie_name with value json_encode(array('val1'=> , ))\nif (!empty($_POST[\"DOL_AUTOSET_COOKIE\"])) {\n\t$tmpautoset = explode(':', $_POST[\"DOL_AUTOSET_COOKIE\"], 2);\n\t$tmplist = explode(',', $tmpautoset[1]);\n\t$cookiearrayvalue = array();\n\tforeach ($tmplist as $tmpkey) {\n\t\t$postkey = $tmpautoset[0].'_'.$tmpkey;\n\t\t//var_dump('tmpkey='.$tmpkey.' postkey='.$postkey.' value='.$_POST[$postkey]);\n\t\tif (!empty($_POST[$postkey])) {\n\t\t\t$cookiearrayvalue[$tmpkey] = $_POST[$postkey];\n\t\t}\n\t}\n\t$cookiename = $tmpautoset[0];\n\t$cookievalue = json_encode($cookiearrayvalue);\n\t//var_dump('setcookie cookiename='.$cookiename.' cookievalue='.$cookievalue);\n\tif (PHP_VERSION_ID < 70300) {\n\t\tsetcookie($cookiename, empty($cookievalue) ? '' : $cookievalue, empty($cookievalue) ? 0 : (time() + (86400 * 354)), '/', null, ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true), true); // keep cookie 1 year and add tag httponly\n\t} else {\n\t\t// Only available for php >= 7.3\n\t\t$cookieparams = array(\n\t\t\t'expires' => empty($cookievalue) ? 0 : (time() + (86400 * 354)),\n\t\t\t'path' => '/',\n\t\t\t//'domain' => '.mywebsite.com', // the dot at the beginning allows compatibility with subdomains\n\t\t\t'secure' => ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true),\n\t\t\t'httponly' => true,\n\t\t\t'samesite' => 'Lax'\t// None || Lax  || Strict\n\t\t);\n\t\tsetcookie($cookiename, empty($cookievalue) ? '' : $cookievalue, $cookieparams);\n\t}\n\tif (empty($cookievalue)) {\n\t\tunset($_COOKIE[$cookiename]);\n\t}\n}\n\n// Set the handler of session\n// if (ini_get('session.save_handler') == 'user')\nif (!empty($php_session_save_handler) && $php_session_save_handler == 'db') {\n\trequire_once 'core/lib/phpsessionin'.$php_session_save_handler.'.lib.php';\n}\n\n// Init session. Name of session is specific to Dolibarr instance.\n// Must be done after the include of filefunc.inc.php so global variables of conf file are defined (like $dolibarr_main_instance_unique_id or $dolibarr_main_force_https).\n// Note: the function dol_getprefix() is defined into functions.lib.php but may have been defined to return a different key to manage another area to protect.\n$prefix = dol_getprefix('');\n$sessionname = 'DOLSESSID_'.$prefix;\n$sessiontimeout = 'DOLSESSTIMEOUT_'.$prefix;\nif (!empty($_COOKIE[$sessiontimeout])) {\n\tini_set('session.gc_maxlifetime', $_COOKIE[$sessiontimeout]);\n}\n\n// This create lock, released by session_write_close() or end of page.\n// We need this lock as long as we read/write $_SESSION ['vars']. We can remove lock when finished.\nif (!defined('NOSESSION')) {\n\tif (PHP_VERSION_ID < 70300) {\n\t\tsession_set_cookie_params(0, '/', null, ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true), true); // Add tag secure and httponly on session cookie (same as setting session.cookie_httponly into php.ini). Must be called before the session_start.\n\t} else {\n\t\t// Only available for php >= 7.3\n\t\t$sessioncookieparams = array(\n\t\t\t'lifetime' => 0,\n\t\t\t'path' => '/',\n\t\t\t//'domain' => '.mywebsite.com', // the dot at the beginning allows compatibility with subdomains\n\t\t\t'secure' => ((empty($dolibarr_main_force_https) && isHTTPS() === false) ? false : true),\n\t\t\t'httponly' => true,\n\t\t\t'samesite' => 'Lax'\t// None || Lax  || Strict\n\t\t);\n\t\tsession_set_cookie_params($sessioncookieparams);\n\t}\n\tsession_name($sessionname);\n\tsession_start();\t// This call the open and read of session handler\n\t//exit;\t// this exist generates a call to write and close\n}\n\n\n// Init the 5 global objects, this include will make the 'new Xxx()' and set properties for: $conf, $db, $langs, $user, $mysoc\nrequire_once 'master.inc.php';\n\n// If software has been locked. Only login $conf->global->MAIN_ONLY_LOGIN_ALLOWED is allowed.\nif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t$ok = 0;\n\tif ((!session_id() || !isset($_SESSION[\"dol_login\"])) && !isset($_POST[\"username\"]) && !empty($_SERVER[\"GATEWAY_INTERFACE\"])) {\n\t\t$ok = 1; // We let working pages if not logged and inside a web browser (login form, to allow login by admin)\n\t} elseif (isset($_POST[\"username\"]) && $_POST[\"username\"] == $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t$ok = 1; // We let working pages that is a login submission (login submit, to allow login by admin)\n\t} elseif (defined('NOREQUIREDB')) {\n\t\t$ok = 1; // We let working pages that don't need database access (xxx.css.php)\n\t} elseif (defined('EVEN_IF_ONLY_LOGIN_ALLOWED')) {\n\t\t$ok = 1; // We let working pages that ask to work even if only login enabled (logout.php)\n\t} elseif (session_id() && isset($_SESSION[\"dol_login\"]) && $_SESSION[\"dol_login\"] == $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t$ok = 1; // We let working if user is allowed admin\n\t}\n\tif (!$ok) {\n\t\tif (session_id() && isset($_SESSION[\"dol_login\"]) && $_SESSION[\"dol_login\"] != $conf->global->MAIN_ONLY_LOGIN_ALLOWED) {\n\t\t\tprint 'Sorry, your application is offline.'.\"\\n\";\n\t\t\tprint 'You are logged with user \"'.$_SESSION[\"dol_login\"].'\" and only administrator user \"'.$conf->global->MAIN_ONLY_LOGIN_ALLOWED.'\" is allowed to connect for the moment.'.\"\\n\";\n\t\t\t$nexturl = DOL_URL_ROOT.'/user/logout.php?token='.newToken();\n\t\t\tprint 'Please try later or <a href=\"'.$nexturl.'\">click here to disconnect and change login user</a>...'.\"\\n\";\n\t\t} else {\n\t\t\tprint 'Sorry, your application is offline. Only administrator user \"'.$conf->global->MAIN_ONLY_LOGIN_ALLOWED.'\" is allowed to connect for the moment.'.\"\\n\";\n\t\t\t$nexturl = DOL_URL_ROOT.'/';\n\t\t\tprint 'Please try later or <a href=\"'.$nexturl.'\">click here to change login user</a>...'.\"\\n\";\n\t\t}\n\t\texit;\n\t}\n}\n\n\n// Activate end of page function\nregister_shutdown_function('dol_shutdown');\n\n// Load debugbar\nif (isModEnabled('debugbar') && !GETPOST('dol_use_jmobile') && empty($_SESSION['dol_use_jmobile'])) {\n\tglobal $debugbar;\n\tinclude_once DOL_DOCUMENT_ROOT.'/debugbar/class/DebugBar.php';\n\t$debugbar = new DolibarrDebugBar();\n\t$renderer = $debugbar->getRenderer();\n\tif (empty($conf->global->MAIN_HTML_HEADER)) {\n\t\t$conf->global->MAIN_HTML_HEADER = '';\n\t}\n\t$conf->global->MAIN_HTML_HEADER .= $renderer->renderHead();\n\n\t$debugbar['time']->startMeasure('pageaftermaster', 'Page generation (after environment init)');\n}\n\n// Detection browser\nif (isset($_SERVER[\"HTTP_USER_AGENT\"])) {\n\t$tmp = getBrowserInfo($_SERVER[\"HTTP_USER_AGENT\"]);\n\t$conf->browser->name = $tmp['browsername'];\n\t$conf->browser->os = $tmp['browseros'];\n\t$conf->browser->version = $tmp['browserversion'];\n\t$conf->browser->layout = $tmp['layout']; // 'classic', 'phone', 'tablet'\n\t//var_dump($conf->browser);\n\n\tif ($conf->browser->layout == 'phone') {\n\t\t$conf->dol_no_mouse_hover = 1;\n\t}\n}\n\n// If theme is forced\nif (GETPOST('theme', 'aZ09')) {\n\t$conf->theme = GETPOST('theme', 'aZ09');\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\n// Set global MAIN_OPTIMIZEFORTEXTBROWSER (must be before login part)\nif (GETPOST('textbrowser', 'int') || (!empty($conf->browser->name) && $conf->browser->name == 'lynxlinks')) {   // If we must enable text browser\n\t$conf->global->MAIN_OPTIMIZEFORTEXTBROWSER = 1;\n}\n\n// Force HTTPS if required ($conf->file->main_force_https is 0/1 or 'https dolibarr root url')\n// $_SERVER[\"HTTPS\"] is 'on' when link is https, otherwise $_SERVER[\"HTTPS\"] is empty or 'off'\nif (!empty($conf->file->main_force_https) && (empty($_SERVER[\"HTTPS\"]) || $_SERVER[\"HTTPS\"] != 'on')) {\n\t$newurl = '';\n\tif (is_numeric($conf->file->main_force_https)) {\n\t\tif ($conf->file->main_force_https == '1' && !empty($_SERVER[\"SCRIPT_URI\"])) {\t// If SCRIPT_URI supported by server\n\t\t\tif (preg_match('/^http:/i', $_SERVER[\"SCRIPT_URI\"]) && !preg_match('/^https:/i', $_SERVER[\"SCRIPT_URI\"])) {\t// If link is http\n\t\t\t\t$newurl = preg_replace('/^http:/i', 'https:', $_SERVER[\"SCRIPT_URI\"]);\n\t\t\t}\n\t\t} else {\n\t\t\t// Check HTTPS environment variable (Apache/mod_ssl only)\n\t\t\t$newurl = preg_replace('/^http:/i', 'https:', DOL_MAIN_URL_ROOT).$_SERVER[\"REQUEST_URI\"];\n\t\t}\n\t} else {\n\t\t// Check HTTPS environment variable (Apache/mod_ssl only)\n\t\t$newurl = $conf->file->main_force_https.$_SERVER[\"REQUEST_URI\"];\n\t}\n\t// Start redirect\n\tif ($newurl) {\n\t\theader_remove(); // Clean header already set to be sure to remove any header like \"Set-Cookie: DOLSESSID_...\" from non HTTPS answers\n\t\tdol_syslog(\"main.inc: dolibarr_main_force_https is on, we make a redirect to \".$newurl);\n\t\theader(\"Location: \".$newurl);\n\t\texit;\n\t} else {\n\t\tdol_syslog(\"main.inc: dolibarr_main_force_https is on but we failed to forge new https url so no redirect is done\", LOG_WARNING);\n\t}\n}\n\nif (!defined('NOLOGIN') && !defined('NOIPCHECK') && !empty($dolibarr_main_restrict_ip)) {\n\t$listofip = explode(',', $dolibarr_main_restrict_ip);\n\t$found = false;\n\tforeach ($listofip as $ip) {\n\t\t$ip = trim($ip);\n\t\tif ($ip == $_SERVER['REMOTE_ADDR']) {\n\t\t\t$found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!$found) {\n\t\tprint 'Access refused by IP protection. Your detected IP is '.$_SERVER['REMOTE_ADDR'];\n\t\texit;\n\t}\n}\n\n// Loading of additional presentation includes\nif (!defined('NOREQUIREHTML')) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php'; // Need 660ko memory (800ko in 2.2)\n}\nif (!defined('NOREQUIREAJAX')) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/ajax.lib.php'; // Need 22ko memory\n}\n\n// If install or upgrade process not done or not completely finished, we call the install page.\nif (!empty($conf->global->MAIN_NOT_INSTALLED) || !empty($conf->global->MAIN_NOT_UPGRADED)) {\n\tdol_syslog(\"main.inc: A previous install or upgrade was not complete. Redirect to install page.\", LOG_WARNING);\n\theader(\"Location: \".DOL_URL_ROOT.\"/install/index.php\");\n\texit;\n}\n// If an upgrade process is required, we call the install page.\nif ((!empty($conf->global->MAIN_VERSION_LAST_UPGRADE) && ($conf->global->MAIN_VERSION_LAST_UPGRADE != DOL_VERSION))\n|| (empty($conf->global->MAIN_VERSION_LAST_UPGRADE) && !empty($conf->global->MAIN_VERSION_LAST_INSTALL) && ($conf->global->MAIN_VERSION_LAST_INSTALL != DOL_VERSION))) {\n\t$versiontocompare = empty($conf->global->MAIN_VERSION_LAST_UPGRADE) ? $conf->global->MAIN_VERSION_LAST_INSTALL : $conf->global->MAIN_VERSION_LAST_UPGRADE;\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\n\t$dolibarrversionlastupgrade = preg_split('/[.-]/', $versiontocompare);\n\t$dolibarrversionprogram = preg_split('/[.-]/', DOL_VERSION);\n\t$rescomp = versioncompare($dolibarrversionprogram, $dolibarrversionlastupgrade);\n\tif ($rescomp > 0) {   // Programs have a version higher than database.\n\t\tif (empty($conf->global->MAIN_NO_UPGRADE_REDIRECT_ON_LEVEL_3_CHANGE) || $rescomp < 3) {\n\t\t\t// We did not add \"&& $rescomp < 3\" because we want upgrade process for build upgrades\n\t\t\tdol_syslog(\"main.inc: database version \".$versiontocompare.\" is lower than programs version \".DOL_VERSION.\". Redirect to install/upgrade page.\", LOG_WARNING);\n\t\t\theader(\"Location: \".DOL_URL_ROOT.\"/install/index.php\");\n\t\t\texit;\n\t\t}\n\t}\n}\n\n// Creation of a token against CSRF vulnerabilities\nif (!defined('NOTOKENRENEWAL') && !defined('NOSESSION')) {\n\t// No token renewal on .css.php, .js.php and .json.php (even if the NOTOKENRENEWAL was not provided)\n\tif (!preg_match('/\\.(css|js|json)\\.php$/', $_SERVER[\"PHP_SELF\"])) {\n\t\t// Rolling token at each call ($_SESSION['token'] contains token of previous page)\n\t\tif (isset($_SESSION['newtoken'])) {\n\t\t\t$_SESSION['token'] = $_SESSION['newtoken'];\n\t\t}\n\n\t\tif (!isset($_SESSION['newtoken']) || getDolGlobalInt('MAIN_SECURITY_CSRF_TOKEN_RENEWAL_ON_EACH_CALL')) {\n\t\t\t// Note: Using MAIN_SECURITY_CSRF_TOKEN_RENEWAL_ON_EACH_CALL is not recommended: if a user succeed in entering a data from\n\t\t\t// a public page with a link that make a token regeneration, it can make use of the backoffice no more possible !\n\t\t\t// Save in $_SESSION['newtoken'] what will be next token. Into forms, we will add param token = $_SESSION['newtoken']\n\t\t\t$token = dol_hash(uniqid(mt_rand(), false), 'md5'); // Generates a hash of a random number. We don't need a secured hash, just a changing random value.\n\t\t\t$_SESSION['newtoken'] = $token;\n\t\t\tdol_syslog(\"NEW TOKEN generated by : \".$_SERVER['PHP_SELF'], LOG_DEBUG);\n\t\t}\n\t}\n}\n\n//dol_syslog(\"aaaa - \".defined('NOCSRFCHECK').\" - \".$dolibarr_nocsrfcheck.\" - \".$conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN.\" - \".$_SERVER['REQUEST_METHOD'].\" - \".GETPOST('token', 'alpha'));\n\n// Check validity of token, only if option MAIN_SECURITY_CSRF_WITH_TOKEN enabled or if constant CSRFCHECK_WITH_TOKEN is set into page\nif ((!defined('NOCSRFCHECK') && empty($dolibarr_nocsrfcheck) && getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN')) || defined('CSRFCHECK_WITH_TOKEN')) {\n\t// Array of action code where CSRFCHECK with token will be forced (so token must be provided on url request)\n\t$sensitiveget = false;\n\tif ((GETPOSTISSET('massaction') || GETPOST('action', 'aZ09')) && getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN') >= 3) {\n\t\t// All GET actions and mass actions are processed as sensitive.\n\t\tif (GETPOSTISSET('massaction') || !in_array(GETPOST('action', 'aZ09'), array('create', 'createsite', 'createcard', 'edit', 'editvalidator', 'file_manager', 'presend', 'presend_addmessage', 'preview', 'specimen'))) {\t// We exclude the case action='create' and action='file_manager' that are legitimate\n\t\t\t$sensitiveget = true;\n\t\t}\n\t} elseif (getDolGlobalInt('MAIN_SECURITY_CSRF_WITH_TOKEN') >= 2) {\n\t\t// Few GET actions coded with a &token into url are processed as sensitive.\n\t\t$arrayofactiontoforcetokencheck = array(\n\t\t\t'activate',\n\t\t\t'doprev', 'donext', 'dvprev', 'dvnext',\n\t\t\t'freezone', 'install',\n\t\t\t'reopen'\n\t\t);\n\t\tif (in_array(GETPOST('action', 'aZ09'), $arrayofactiontoforcetokencheck)) {\n\t\t\t$sensitiveget = true;\n\t\t}\n\t\t// We also match for value with just a simple string that must match\n\t\tif (preg_match('/^(add|classify|close|confirm|copy|del|disable|enable|remove|set|unset|update|save)/', GETPOST('action', 'aZ09'))) {\n\t\t\t$sensitiveget = true;\n\t\t}\n\t}\n\n\t// Check a token is provided for all cases that need a mandatory token\n\t// (all POST actions + all sensitive GET actions + all mass actions + all login/actions/logout on pages with CSRFCHECK_WITH_TOKEN set)\n\tif (\n\t\t$_SERVER['REQUEST_METHOD'] == 'POST' ||\n\t\t$sensitiveget ||\n\t\tGETPOSTISSET('massaction') ||\n\t\t((GETPOSTISSET('actionlogin') || GETPOSTISSET('action')) && defined('CSRFCHECK_WITH_TOKEN'))\n\t) {\n\t\t// If token is not provided or empty, error (we are in case it is mandatory)\n\t\tif (!GETPOST('token', 'alpha') || GETPOST('token', 'alpha') == 'notrequired') {\n\t\t\ttop_httphead();\n\t\t\tif (GETPOST('uploadform', 'int')) {\n\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused. File size too large or not provided.\");\n\t\t\t\t$langs->loadLangs(array(\"errors\", \"install\"));\n\t\t\t\tprint $langs->trans(\"ErrorFileSizeTooLarge\").' ';\n\t\t\t\tprint $langs->trans(\"ErrorGoBackAndCorrectParameters\");\n\t\t\t} else {\n\t\t\t\thttp_response_code(403);\n\t\t\t\tif (defined('CSRFCHECK_WITH_TOKEN')) {\n\t\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (CSRFCHECK_WITH_TOKEN protection) in main.inc.php. Token not provided.\", LOG_WARNING);\n\t\t\t\t\tprint \"Access to a page that needs a token (constant CSRFCHECK_WITH_TOKEN is defined) is refused by CSRF protection in main.inc.php. Token not provided.\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (POST method or GET with a sensible value for 'action' parameter) in main.inc.php. Token not provided.\", LOG_WARNING);\n\t\t\t\t\tprint \"Access to this page this way (POST method or GET with a sensible value for 'action' parameter) is refused by CSRF protection in main.inc.php. Token not provided.\\n\";\n\t\t\t\t\tprint \"If you access your server behind a proxy using url rewriting and the parameter is provided by caller, you might check that all HTTP header are propagated (or add the line \\$dolibarr_nocsrfcheck=1 into your conf.php file or MAIN_SECURITY_CSRF_WITH_TOKEN to 0\";\n\t\t\t\t\tif (!empty($conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN)) {\n\t\t\t\t\t\tprint \" instead of \".$conf->global->MAIN_SECURITY_CSRF_WITH_TOKEN;\n\t\t\t\t\t}\n\t\t\t\t\tprint \" into setup).\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tdie;\n\t\t}\n\t}\n\n\t$sessiontokenforthisurl = (empty($_SESSION['token']) ? '' : $_SESSION['token']);\n\t// TODO Get the sessiontokenforthisurl into an array of session token (one array per base URL so we can use the CSRF per page and we keep ability for several tabs per url in a browser)\n\tif (GETPOSTISSET('token') && GETPOST('token') != 'notrequired' && GETPOST('token', 'alpha') != $sessiontokenforthisurl) {\n\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" refused by CSRF protection (invalid token), so we disable POST and some GET parameters - referer=\".(empty($_SERVER['HTTP_REFERER'])?'':$_SERVER['HTTP_REFERER']).\", action=\".GETPOST('action', 'aZ09').\", _GET|POST['token']=\".GETPOST('token', 'alpha'), LOG_WARNING);\n\t\t//dol_syslog(\"_SESSION['token']=\".$sessiontokenforthisurl, LOG_DEBUG);\n\t\t// Do not output anything on standard output because this create problems when using the BACK button on browsers. So we just set a message into session.\n\t\tsetEventMessages('SecurityTokenHasExpiredSoActionHasBeenCanceledPleaseRetry', null, 'warnings');\n\t\t$savid = null;\n\t\tif (isset($_POST['id'])) {\n\t\t\t$savid = ((int) $_POST['id']);\n\t\t}\n\t\tunset($_POST);\n\t\t//unset($_POST['action']); unset($_POST['massaction']);\n\t\t//unset($_POST['confirm']); unset($_POST['confirmmassaction']);\n\t\tunset($_GET['confirm']);\n\t\tunset($_GET['action']);\n\t\tunset($_GET['confirmmassaction']);\n\t\tunset($_GET['massaction']);\n\t\tunset($_GET['token']);\t\t\t// TODO Make a redirect if we have a token in url to remove it ?\n\t\tif (isset($savid)) {\n\t\t\t$_POST['id'] = ((int) $savid);\n\t\t}\n\t}\n\n\t// Note: There is another CSRF protection into the filefunc.inc.php\n}\n\n// Disable modules (this must be after session_start and after conf has been loaded)\nif (GETPOSTISSET('disablemodules')) {\n\t$_SESSION[\"disablemodules\"] = GETPOST('disablemodules', 'alpha');\n}\nif (!empty($_SESSION[\"disablemodules\"])) {\n\t$modulepartkeys = array('css', 'js', 'tabs', 'triggers', 'login', 'substitutions', 'menus', 'theme', 'sms', 'tpl', 'barcode', 'models', 'societe', 'hooks', 'dir', 'syslog', 'tpllinkable', 'contactelement', 'moduleforexternal');\n\n\t$disabled_modules = explode(',', $_SESSION[\"disablemodules\"]);\n\tforeach ($disabled_modules as $module) {\n\t\tif ($module) {\n\t\t\tif (empty($conf->$module)) {\n\t\t\t\t$conf->$module = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\t$conf->$module->enabled = false;\n\t\t\tforeach ($modulepartkeys as $modulepartkey) {\n\t\t\t\tunset($conf->modules_parts[$modulepartkey][$module]);\n\t\t\t}\n\t\t\tif ($module == 'fournisseur') {\t\t// Special case\n\t\t\t\t$conf->supplier_order->enabled = 0;\n\t\t\t\t$conf->supplier_invoice->enabled = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Set current modulepart\n$modulepart = explode(\"/\", $_SERVER[\"PHP_SELF\"]);\nif (is_array($modulepart) && count($modulepart) > 0) {\n\tforeach ($conf->modules as $module) {\n\t\tif (in_array($module, $modulepart)) {\n\t\t\t$modulepart = $module;\n\t\t\tbreak;\n\t\t}\n\t}\n}\nif (is_array($modulepart)) {\n\t$modulepart = '';\n}\n\n\n/*\n * Phase authentication / login\n */\n$login = '';\nif (!defined('NOLOGIN')) {\n\t// $authmode lists the different method of identification to be tested in order of preference.\n\t// Example: 'http', 'dolibarr', 'ldap', 'http,forceuser', '...'\n\n\tif (defined('MAIN_AUTHENTICATION_MODE')) {\n\t\t$dolibarr_main_authentication = constant('MAIN_AUTHENTICATION_MODE');\n\t} else {\n\t\t// Authentication mode\n\t\tif (empty($dolibarr_main_authentication)) {\n\t\t\t$dolibarr_main_authentication = 'http,dolibarr';\n\t\t}\n\t\t// Authentication mode: forceuser\n\t\tif ($dolibarr_main_authentication == 'forceuser' && empty($dolibarr_auto_user)) {\n\t\t\t$dolibarr_auto_user = 'auto';\n\t\t}\n\t}\n\t// Set authmode\n\t$authmode = explode(',', $dolibarr_main_authentication);\n\n\t// No authentication mode\n\tif (!count($authmode)) {\n\t\t$langs->load('main');\n\t\tdol_print_error('', $langs->trans(\"ErrorConfigParameterNotDefined\", 'dolibarr_main_authentication'));\n\t\texit;\n\t}\n\n\t// If login request was already post, we retrieve login from the session\n\t// Call module if not realized that his request.\n\t// At the end of this phase, the variable $login is defined.\n\t$resultFetchUser = '';\n\t$test = true;\n\tif (!isset($_SESSION[\"dol_login\"])) {\n\t\t// It is not already authenticated and it requests the login / password\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/security2.lib.php';\n\n\t\t$dol_dst_observed = GETPOST(\"dst_observed\", 'int', 3);\n\t\t$dol_dst_first = GETPOST(\"dst_first\", 'int', 3);\n\t\t$dol_dst_second = GETPOST(\"dst_second\", 'int', 3);\n\t\t$dol_screenwidth = GETPOST(\"screenwidth\", 'int', 3);\n\t\t$dol_screenheight = GETPOST(\"screenheight\", 'int', 3);\n\t\t$dol_hide_topmenu = GETPOST('dol_hide_topmenu', 'int', 3);\n\t\t$dol_hide_leftmenu = GETPOST('dol_hide_leftmenu', 'int', 3);\n\t\t$dol_optimize_smallscreen = GETPOST('dol_optimize_smallscreen', 'int', 3);\n\t\t$dol_no_mouse_hover = GETPOST('dol_no_mouse_hover', 'int', 3);\n\t\t$dol_use_jmobile = GETPOST('dol_use_jmobile', 'int', 3); // 0=default, 1=to say we use app from a webview app, 2=to say we use app from a webview app and keep ajax\n\t\t//dol_syslog(\"POST key=\".join(array_keys($_POST),',').' value='.join($_POST,','));\n\n\t\t// If in demo mode, we check we go to home page through the public/demo/index.php page\n\t\tif (!empty($dolibarr_main_demo) && $_SERVER['PHP_SELF'] == DOL_URL_ROOT.'/index.php') {  // We ask index page\n\t\t\tif (empty($_SERVER['HTTP_REFERER']) || !preg_match('/public/', $_SERVER['HTTP_REFERER'])) {\n\t\t\t\tdol_syslog(\"Call index page from another url than demo page (call is done from page \".$_SERVER['HTTP_REFERER'].\")\");\n\t\t\t\t$url = '';\n\t\t\t\t$url .= ($url ? '&' : '').($dol_hide_topmenu ? 'dol_hide_topmenu='.$dol_hide_topmenu : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_hide_leftmenu ? 'dol_hide_leftmenu='.$dol_hide_leftmenu : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_optimize_smallscreen ? 'dol_optimize_smallscreen='.$dol_optimize_smallscreen : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_no_mouse_hover ? 'dol_no_mouse_hover='.$dol_no_mouse_hover : '');\n\t\t\t\t$url .= ($url ? '&' : '').($dol_use_jmobile ? 'dol_use_jmobile='.$dol_use_jmobile : '');\n\t\t\t\t$url = DOL_URL_ROOT.'/public/demo/index.php'.($url ? '?'.$url : '');\n\t\t\t\theader(\"Location: \".$url);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\t// Hooks for security access\n\t\t$action = '';\n\t\t$hookmanager->initHooks(array('login'));\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('beforeLoginAuthentication', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook < 0) {\n\t\t\t$test = false;\n\t\t\t$error++;\n\t\t}\n\n\t\t// Verification security graphic code\n\t\tif ($test && GETPOST(\"username\", \"alpha\", 2) && !empty($conf->global->MAIN_SECURITY_ENABLECAPTCHA) && !isset($_SESSION['dol_bypass_antispam'])) {\n\t\t\t$sessionkey = 'dol_antispam_value';\n\t\t\t$ok = (array_key_exists($sessionkey, $_SESSION) === true && (strtolower($_SESSION[$sessionkey]) === strtolower(GETPOST('code', 'restricthtml'))));\n\n\t\t\t// Check code\n\t\t\tif (!$ok) {\n\t\t\t\tdol_syslog('Bad value for code, connexion refused');\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorBadValueForCode\");\n\t\t\t\t$test = false;\n\n\t\t\t\t// Call trigger for the \"security events\" log\n\t\t\t\t$user->trigger_mesg = 'ErrorBadValueForCode - login='.GETPOST(\"username\", \"alpha\", 2);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t// Hooks on failed login\n\t\t\t\t$action = '';\n\t\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t\t$parameters = array('dol_authmode'=>$authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\t\tif ($reshook < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\t// Note: exit is done later\n\t\t\t}\n\t\t}\n\n\t\t$allowedmethodtopostusername = 2;\n\t\tif (defined('MAIN_AUTHENTICATION_POST_METHOD')) {\n\t\t\t$allowedmethodtopostusername = constant('MAIN_AUTHENTICATION_POST_METHOD');\n\t\t}\n\t\t$usertotest = (!empty($_COOKIE['login_dolibarr']) ? preg_replace('/[^a-zA-Z0-9_\\-]/', '', $_COOKIE['login_dolibarr']) : GETPOST(\"username\", \"alpha\", $allowedmethodtopostusername));\n\t\t$passwordtotest = GETPOST('password', 'none', $allowedmethodtopostusername);\n\t\t$entitytotest = (GETPOST('entity', 'int') ? GETPOST('entity', 'int') : (!empty($conf->entity) ? $conf->entity : 1));\n\n\t\t// Define if we received data to test the login.\n\t\t$goontestloop = false;\n\t\tif (isset($_SERVER[\"REMOTE_USER\"]) && in_array('http', $authmode)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\t\tif ($dolibarr_main_authentication == 'forceuser' && !empty($dolibarr_auto_user)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\t\tif (GETPOST(\"username\", \"alpha\", $allowedmethodtopostusername) || !empty($_COOKIE['login_dolibarr']) || GETPOST('openid_mode', 'alpha', 1)) {\n\t\t\t$goontestloop = true;\n\t\t}\n\n\t\tif (!is_object($langs)) { // This can occurs when calling page with NOREQUIRETRAN defined, however we need langs for error messages.\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/translate.class.php';\n\t\t\t$langs = new Translate(\"\", $conf);\n\t\t\t$langcode = (GETPOST('lang', 'aZ09', 1) ?GETPOST('lang', 'aZ09', 1) : (empty($conf->global->MAIN_LANG_DEFAULT) ? 'auto' : $conf->global->MAIN_LANG_DEFAULT));\n\t\t\tif (defined('MAIN_LANG_DEFAULT')) {\n\t\t\t\t$langcode = constant('MAIN_LANG_DEFAULT');\n\t\t\t}\n\t\t\t$langs->setDefaultLang($langcode);\n\t\t}\n\n\t\t// Validation of login/pass/entity\n\t\t// If ok, the variable login will be returned\n\t\t// If error, we will put error message in session under the name dol_loginmesg\n\t\t// Note authmode is an array for example: array('0'=>'dolibarr', '1'=>'google');\n\t\tif ($test && $goontestloop && (GETPOST('actionlogin', 'aZ09') == 'login' || $dolibarr_main_authentication != 'dolibarr')) {\n\t\t\t$login = checkLoginPassEntity($usertotest, $passwordtotest, $entitytotest, $authmode);\n\t\t\tif ($login === '--bad-login-validity--') {\n\t\t\t\t$login = '';\n\t\t\t}\n\n\t\t\t$dol_authmode = '';\n\n\t\t\tif ($login) {\n\t\t\t\t$dol_authmode = $conf->authmode; // This properties is defined only when logged, to say what mode was successfully used\n\t\t\t\t$dol_tz = $_POST[\"tz\"];\n\t\t\t\t$dol_tz_string = $_POST[\"tz_string\"];\n\t\t\t\t$dol_tz_string = preg_replace('/\\s*\\(.+\\)$/', '', $dol_tz_string);\n\t\t\t\t$dol_tz_string = preg_replace('/,/', '/', $dol_tz_string);\n\t\t\t\t$dol_tz_string = preg_replace('/\\s/', '_', $dol_tz_string);\n\t\t\t\t$dol_dst = 0;\n\t\t\t\t// Keep $_POST here. Do not use GETPOSTISSET\n\t\t\t\tif (isset($_POST[\"dst_first\"]) && isset($_POST[\"dst_second\"])) {\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t\t\t\t$datenow = dol_now();\n\t\t\t\t\t$datefirst = dol_stringtotime($_POST[\"dst_first\"]);\n\t\t\t\t\t$datesecond = dol_stringtotime($_POST[\"dst_second\"]);\n\t\t\t\t\tif ($datenow >= $datefirst && $datenow < $datesecond) {\n\t\t\t\t\t\t$dol_dst = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//print $datefirst.'-'.$datesecond.'-'.$datenow.'-'.$dol_tz.'-'.$dol_tzstring.'-'.$dol_dst; exit;\n\t\t\t}\n\n\t\t\tif (!$login) {\n\t\t\t\tdol_syslog('Bad password, connexion refused', LOG_DEBUG);\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t// Bad password. No authmode has found a good password.\n\t\t\t\t// We set a generic message if not defined inside function checkLoginPassEntity or subfunctions\n\t\t\t\tif (empty($_SESSION[\"dol_loginmesg\"])) {\n\t\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorBadLoginPassword\");\n\t\t\t\t}\n\n\t\t\t\t// Call trigger for the \"security events\" log\n\t\t\t\t$user->trigger_mesg = $langs->trans(\"ErrorBadLoginPassword\").' - login='.GETPOST(\"username\", \"alpha\", 2);\n\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\n\t\t\t\t// Hooks on failed login\n\t\t\t\t$action = '';\n\t\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\t\tif ($reshook < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\n\t\t\t\t// Note: exit is done in next chapter\n\t\t\t}\n\t\t}\n\n\t\t// End test login / passwords\n\t\tif (!$login || (in_array('ldap', $authmode) && empty($passwordtotest))) {\t// With LDAP we refused empty password because some LDAP are \"opened\" for anonymous access so connexion is a success.\n\t\t\t// No data to test login, so we show the login page.\n\t\t\tdol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].\" - action=\".GETPOST('action', 'aZ09').\" - actionlogin=\".GETPOST('actionlogin', 'aZ09').\" - showing the login form and exit\", LOG_NOTICE);\n\t\t\tif (defined('NOREDIRECTBYMAINTOLOGIN')) {\n\t\t\t\t// When used with NOREDIRECTBYMAINTOLOGIN set, the http header must already be set when including the main.\n\t\t\t\t// See example with selectsearchbox.php. This case is reserverd for the selectesearchbox.php so we can\n\t\t\t\t// report a message to ask to login when search ajax component is used after a timeout.\n\t\t\t\t//top_httphead();\n\t\t\t\treturn 'ERROR_NOT_LOGGED';\n\t\t\t} else {\n\t\t\t\tif ($_SERVER[\"HTTP_USER_AGENT\"] == 'securitytest') {\n\t\t\t\t\thttp_response_code(401); // It makes easier to understand if session was broken during security tests\n\t\t\t\t}\n\t\t\t\tdol_loginfunction($langs, $conf, (!empty($mysoc) ? $mysoc : ''));\t// This include http headers\n\t\t\t}\n\t\t\texit;\n\t\t}\n\n\t\t$resultFetchUser = $user->fetch('', $login, '', 1, ($entitytotest > 0 ? $entitytotest : -1)); // value for $login was retrieved previously when checking password.\n\t\tif ($resultFetchUser <= 0 || $user->isNotIntoValidityDateRange()) {\n\t\t\tdol_syslog('User not found or not valid, connexion refused');\n\t\t\tsession_destroy();\n\t\t\tsession_set_cookie_params(0, '/', null, (empty($dolibarr_main_force_https) ? false : true), true); // Add tag secure and httponly on session cookie\n\t\t\tsession_name($sessionname);\n\t\t\tsession_start();\n\n\t\t\tif ($resultFetchUser == 0) {\n\t\t\t\t// Load translation files required by page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorCantLoadUserFromDolibarrDatabase\", $login);\n\n\t\t\t\t$user->trigger_mesg = 'ErrorCantLoadUserFromDolibarrDatabase - login='.$login;\n\t\t\t} elseif ($resultFetchUser < 0) {\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $user->error;\n\n\t\t\t\t$user->trigger_mesg = $user->error;\n\t\t\t} else {\n\t\t\t\t// Load translation files required by the page\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorLoginDateValidity\");\n\n\t\t\t\t$user->trigger_mesg = $langs->trans(\"ErrorLoginDateValidity\").' - login='.$login;\n\t\t\t}\n\n\t\t\t// Call trigger\n\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\n\t\t\t// Hooks on failed login\n\t\t\t$action = '';\n\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginmesg'=>$_SESSION[\"dol_loginmesg\"]);\n\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\tif ($reshook < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$paramsurl = array();\n\t\t\tif (GETPOST('textbrowser', 'int')) {\n\t\t\t\t$paramsurl[] = 'textbrowser='.GETPOST('textbrowser', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('nojs', 'int')) {\n\t\t\t\t$paramsurl[] = 'nojs='.GETPOST('nojs', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('lang', 'aZ09')) {\n\t\t\t\t$paramsurl[] = 'lang='.GETPOST('lang', 'aZ09');\n\t\t\t}\n\t\t\theader('Location: '.DOL_URL_ROOT.'/index.php'.(count($paramsurl) ? '?'.implode('&', $paramsurl) : ''));\n\t\t\texit;\n\t\t} else {\n\t\t\t// User is loaded, we may need to change language for him according to its choice\n\t\t\tif (!empty($user->conf->MAIN_LANG_DEFAULT)) {\n\t\t\t\t$langs->setDefaultLang($user->conf->MAIN_LANG_DEFAULT);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// We are already into an authenticated session\n\t\t$login = $_SESSION[\"dol_login\"];\n\t\t$entity = isset($_SESSION[\"dol_entity\"]) ? $_SESSION[\"dol_entity\"] : 0;\n\t\tdol_syslog(\"- This is an already logged session. _SESSION['dol_login']=\".$login.\" _SESSION['dol_entity']=\".$entity, LOG_DEBUG);\n\n\t\t$resultFetchUser = $user->fetch('', $login, '', 1, ($entity > 0 ? $entity : -1));\n\n\t\t//var_dump(dol_print_date($user->flagdelsessionsbefore, 'dayhour', 'gmt').\" \".dol_print_date($_SESSION[\"dol_logindate\"], 'dayhour', 'gmt'));\n\n\t\tif ($resultFetchUser <= 0\n\t\t\t|| ($user->flagdelsessionsbefore && !empty($_SESSION[\"dol_logindate\"]) && $user->flagdelsessionsbefore > $_SESSION[\"dol_logindate\"])\n\t\t\t|| ($user->status != $user::STATUS_ENABLED)\n\t\t\t|| ($user->isNotIntoValidityDateRange())) {\n\t\t\tif ($resultFetchUser <= 0) {\n\t\t\t\t// Account has been removed after login\n\t\t\t\tdol_syslog(\"Can't load user even if session logged. _SESSION['dol_login']=\".$login, LOG_WARNING);\n\t\t\t} elseif ($user->flagdelsessionsbefore && !empty($_SESSION[\"dol_logindate\"]) && $user->flagdelsessionsbefore > $_SESSION[\"dol_logindate\"]) {\n\t\t\t\t// Session is no more valid\n\t\t\t\tdol_syslog(\"The user has a date for session invalidation = \".$user->flagdelsessionsbefore.\" and a session date = \".$_SESSION[\"dol_logindate\"].\". We must invalidate its sessions.\");\n\t\t\t} elseif ($user->status != $user::STATUS_ENABLED) {\n\t\t\t\t// User is not enabled\n\t\t\t\tdol_syslog(\"The user login is disabled\");\n\t\t\t} else {\n\t\t\t\t// User validity dates are no more valid\n\t\t\t\tdol_syslog(\"The user login has a validity between [\".$user->datestartvalidity.\" and \".$user->dateendvalidity.\"], curren date is \".dol_now());\n\t\t\t}\n\t\t\tsession_destroy();\n\t\t\tsession_set_cookie_params(0, '/', null, (empty($dolibarr_main_force_https) ? false : true), true); // Add tag secure and httponly on session cookie\n\t\t\tsession_name($sessionname);\n\t\t\tsession_start();\n\n\t\t\tif ($resultFetchUser == 0) {\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorCantLoadUserFromDolibarrDatabase\", $login);\n\n\t\t\t\t$user->trigger_mesg = 'ErrorCantLoadUserFromDolibarrDatabase - login='.$login;\n\t\t\t} elseif ($resultFetchUser < 0) {\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $user->error;\n\n\t\t\t\t$user->trigger_mesg = $user->error;\n\t\t\t} else {\n\t\t\t\t$langs->loadLangs(array('main', 'errors'));\n\n\t\t\t\t$_SESSION[\"dol_loginmesg\"] = $langs->transnoentitiesnoconv(\"ErrorSessionInvalidatedAfterPasswordChange\");\n\n\t\t\t\t$user->trigger_mesg = 'ErrorUserSessionWasInvalidated - login='.$login;\n\t\t\t}\n\n\t\t\t// Call trigger\n\t\t\t$result = $user->call_trigger('USER_LOGIN_FAILED', $user);\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\n\t\t\t// Hooks on failed login\n\t\t\t$action = '';\n\t\t\t$hookmanager->initHooks(array('login'));\n\t\t\t$parameters = array('dol_authmode' => (isset($dol_authmode) ? $dol_authmode : ''), 'dol_loginmesg' => $_SESSION[\"dol_loginmesg\"]);\n\t\t\t$reshook = $hookmanager->executeHooks('afterLoginFailed', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\t\tif ($reshook < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$paramsurl = array();\n\t\t\tif (GETPOST('textbrowser', 'int')) {\n\t\t\t\t$paramsurl[] = 'textbrowser='.GETPOST('textbrowser', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('nojs', 'int')) {\n\t\t\t\t$paramsurl[] = 'nojs='.GETPOST('nojs', 'int');\n\t\t\t}\n\t\t\tif (GETPOST('lang', 'aZ09')) {\n\t\t\t\t$paramsurl[] = 'lang='.GETPOST('lang', 'aZ09');\n\t\t\t}\n\t\t\theader('Location: '.DOL_URL_ROOT.'/index.php'.(count($paramsurl) ? '?'.implode('&', $paramsurl) : ''));\n\t\t\texit;\n\t\t} else {\n\t\t\t// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n\t\t\t$hookmanager->initHooks(array('main'));\n\n\t\t\t// Code for search criteria persistence.\n\t\t\tif (!empty($_GET['save_lastsearch_values']) && !empty($_SERVER[\"HTTP_REFERER\"])) {    // We must use $_GET here\n\t\t\t\t$relativepathstring = preg_replace('/\\?.*$/', '', $_SERVER[\"HTTP_REFERER\"]);\n\t\t\t\t$relativepathstring = preg_replace('/^https?:\\/\\/[^\\/]*/', '', $relativepathstring); // Get full path except host server\n\t\t\t\t// Clean $relativepathstring\n\t\t\t\tif (constant('DOL_URL_ROOT')) {\n\t\t\t\t\t$relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t\t\t}\n\t\t\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\t\t\t//var_dump($relativepathstring);\n\n\t\t\t\t// We click on a link that leave a page we have to save search criteria, contextpage, limit and page and mode. We save them from tmp to no tmp\n\t\t\t\tif (!empty($_SESSION['lastsearch_values_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_values_'.$relativepathstring] = $_SESSION['lastsearch_values_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_values_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_contextpage_'.$relativepathstring] = $_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]) && $_SESSION['lastsearch_limit_tmp_'.$relativepathstring] != $conf->liste_limit) {\n\t\t\t\t\t$_SESSION['lastsearch_limit_'.$relativepathstring] = $_SESSION['lastsearch_limit_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_page_tmp_'.$relativepathstring]) && $_SESSION['lastsearch_page_tmp_'.$relativepathstring] > 0) {\n\t\t\t\t\t$_SESSION['lastsearch_page_'.$relativepathstring] = $_SESSION['lastsearch_page_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_page_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t\tif (!empty($_SESSION['lastsearch_mode_tmp_'.$relativepathstring])) {\n\t\t\t\t\t$_SESSION['lastsearch_mode_'.$relativepathstring] = $_SESSION['lastsearch_mode_tmp_'.$relativepathstring];\n\t\t\t\t\tunset($_SESSION['lastsearch_mode_tmp_'.$relativepathstring]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$action = '';\n\t\t\t$reshook = $hookmanager->executeHooks('updateSession', array(), $user, $action);\n\t\t\tif ($reshook < 0) {\n\t\t\t\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Is it a new session that has started ?\n\t// If we are here, this means authentication was successfull.\n\tif (!isset($_SESSION[\"dol_login\"])) {\n\t\t// New session for this login has started.\n\t\t$error = 0;\n\n\t\t// Store value into session (values always stored)\n\t\t$_SESSION[\"dol_login\"] = $user->login;\n\t\t$_SESSION[\"dol_logindate\"] = dol_now('gmt');\n\t\t$_SESSION[\"dol_authmode\"] = isset($dol_authmode) ? $dol_authmode : '';\n\t\t$_SESSION[\"dol_tz\"] = isset($dol_tz) ? $dol_tz : '';\n\t\t$_SESSION[\"dol_tz_string\"] = isset($dol_tz_string) ? $dol_tz_string : '';\n\t\t$_SESSION[\"dol_dst\"] = isset($dol_dst) ? $dol_dst : '';\n\t\t$_SESSION[\"dol_dst_observed\"] = isset($dol_dst_observed) ? $dol_dst_observed : '';\n\t\t$_SESSION[\"dol_dst_first\"] = isset($dol_dst_first) ? $dol_dst_first : '';\n\t\t$_SESSION[\"dol_dst_second\"] = isset($dol_dst_second) ? $dol_dst_second : '';\n\t\t$_SESSION[\"dol_screenwidth\"] = isset($dol_screenwidth) ? $dol_screenwidth : '';\n\t\t$_SESSION[\"dol_screenheight\"] = isset($dol_screenheight) ? $dol_screenheight : '';\n\t\t$_SESSION[\"dol_company\"] = getDolGlobalString(\"MAIN_INFO_SOCIETE_NOM\");\n\t\t$_SESSION[\"dol_entity\"] = $conf->entity;\n\t\t// Store value into session (values stored only if defined)\n\t\tif (!empty($dol_hide_topmenu)) {\n\t\t\t$_SESSION['dol_hide_topmenu'] = $dol_hide_topmenu;\n\t\t}\n\t\tif (!empty($dol_hide_leftmenu)) {\n\t\t\t$_SESSION['dol_hide_leftmenu'] = $dol_hide_leftmenu;\n\t\t}\n\t\tif (!empty($dol_optimize_smallscreen)) {\n\t\t\t$_SESSION['dol_optimize_smallscreen'] = $dol_optimize_smallscreen;\n\t\t}\n\t\tif (!empty($dol_no_mouse_hover)) {\n\t\t\t$_SESSION['dol_no_mouse_hover'] = $dol_no_mouse_hover;\n\t\t}\n\t\tif (!empty($dol_use_jmobile)) {\n\t\t\t$_SESSION['dol_use_jmobile'] = $dol_use_jmobile;\n\t\t}\n\n\t\tdol_syslog(\"This is a new started user session. _SESSION['dol_login']=\".$_SESSION[\"dol_login\"].\" Session id=\".session_id());\n\n\t\t$db->begin();\n\n\t\t$user->update_last_login_date();\n\n\t\t$loginfo = 'TZ='.$_SESSION[\"dol_tz\"].';TZString='.$_SESSION[\"dol_tz_string\"].';Screen='.$_SESSION[\"dol_screenwidth\"].'x'.$_SESSION[\"dol_screenheight\"];\n\n\t\t// Call triggers for the \"security events\" log\n\t\t$user->trigger_mesg = $loginfo;\n\n\t\t// Call trigger\n\t\t$result = $user->call_trigger('USER_LOGIN', $user);\n\t\tif ($result < 0) {\n\t\t\t$error++;\n\t\t}\n\t\t// End call triggers\n\n\t\t// Hooks on successfull login\n\t\t$action = '';\n\t\t$hookmanager->initHooks(array('login'));\n\t\t$parameters = array('dol_authmode'=>$dol_authmode, 'dol_loginfo'=>$loginfo);\n\t\t$reshook = $hookmanager->executeHooks('afterLogin', $parameters, $user, $action); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook < 0) {\n\t\t\t$error++;\n\t\t}\n\n\t\tif ($error) {\n\t\t\t$db->rollback();\n\t\t\tsession_destroy();\n\t\t\tdol_print_error($db, 'Error in some triggers USER_LOGIN or in some hooks afterLogin');\n\t\t\texit;\n\t\t} else {\n\t\t\t$db->commit();\n\t\t}\n\n\t\t// Change landing page if defined.\n\t\t$landingpage = (empty($user->conf->MAIN_LANDING_PAGE) ? (empty($conf->global->MAIN_LANDING_PAGE) ? '' : $conf->global->MAIN_LANDING_PAGE) : $user->conf->MAIN_LANDING_PAGE);\n\t\tif (!empty($landingpage)) {    // Example: /index.php\n\t\t\t$newpath = dol_buildpath($landingpage, 1);\n\t\t\tif ($_SERVER[\"PHP_SELF\"] != $newpath) {   // not already on landing page (avoid infinite loop)\n\t\t\t\theader('Location: '.$newpath);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If user admin, we force the rights-based modules\n\tif ($user->admin) {\n\t\t$user->rights->user->user->lire = 1;\n\t\t$user->rights->user->user->creer = 1;\n\t\t$user->rights->user->user->password = 1;\n\t\t$user->rights->user->user->supprimer = 1;\n\t\t$user->rights->user->self->creer = 1;\n\t\t$user->rights->user->self->password = 1;\n\n\t\t//Required if advanced permissions are used with MAIN_USE_ADVANCED_PERMS\n\t\tif (!empty($conf->global->MAIN_USE_ADVANCED_PERMS)) {\n\t\t\tif (empty($user->rights->user->user_advance)) {\n\t\t\t\t$user->rights->user->user_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\tif (empty($user->rights->user->self_advance)) {\n\t\t\t\t$user->rights->user->self_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\t\t\tif (empty($user->rights->user->group_advance)) {\n\t\t\t\t$user->rights->user->group_advance = new stdClass(); // To avoid warnings\n\t\t\t}\n\n\t\t\t$user->rights->user->user_advance->readperms = 1;\n\t\t\t$user->rights->user->user_advance->write = 1;\n\t\t\t$user->rights->user->self_advance->readperms = 1;\n\t\t\t$user->rights->user->self_advance->writeperms = 1;\n\t\t\t$user->rights->user->group_advance->read = 1;\n\t\t\t$user->rights->user->group_advance->readperms = 1;\n\t\t\t$user->rights->user->group_advance->write = 1;\n\t\t\t$user->rights->user->group_advance->delete = 1;\n\t\t}\n\t}\n\n\t/*\n\t * Overwrite some configs globals (try to avoid this and have code to use instead $user->conf->xxx)\n\t */\n\n\t// Set liste_limit\n\tif (isset($user->conf->MAIN_SIZE_LISTE_LIMIT)) {\n\t\t$conf->liste_limit = $user->conf->MAIN_SIZE_LISTE_LIMIT; // Can be 0\n\t}\n\tif (isset($user->conf->PRODUIT_LIMIT_SIZE)) {\n\t\t$conf->product->limit_size = $user->conf->PRODUIT_LIMIT_SIZE; // Can be 0\n\t}\n\n\t// Replace conf->css by personalized value if theme not forced\n\tif (empty($conf->global->MAIN_FORCETHEME) && !empty($user->conf->MAIN_THEME)) {\n\t\t$conf->theme = $user->conf->MAIN_THEME;\n\t\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n\t}\n} else {\n\t// We may have NOLOGIN set, but NOREQUIREUSER not\n\tif (!empty($user) && method_exists($user, 'loadDefaultValues')) {\n\t\t$user->loadDefaultValues();\t\t// Load default values for everybody (works even if $user->id = 0\n\t}\n}\n\n\n// Case forcing style from url\nif (GETPOST('theme', 'aZ09')) {\n\t$conf->theme = GETPOST('theme', 'aZ09', 1);\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\n// Set javascript option\nif (GETPOST('nojs', 'int')) {  // If javascript was not disabled on URL\n\t$conf->use_javascript_ajax = 0;\n} else {\n\tif (!empty($user->conf->MAIN_DISABLE_JAVASCRIPT)) {\n\t\t$conf->use_javascript_ajax = !$user->conf->MAIN_DISABLE_JAVASCRIPT;\n\t}\n}\n\n// Set MAIN_OPTIMIZEFORTEXTBROWSER for user (must be after login part)\nif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && !empty($user->conf->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t$conf->global->MAIN_OPTIMIZEFORTEXTBROWSER = $user->conf->MAIN_OPTIMIZEFORTEXTBROWSER;\n}\n\n// set MAIN_OPTIMIZEFORCOLORBLIND for user\n$conf->global->MAIN_OPTIMIZEFORCOLORBLIND = empty($user->conf->MAIN_OPTIMIZEFORCOLORBLIND) ? '' : $user->conf->MAIN_OPTIMIZEFORCOLORBLIND;\n\n// Set terminal output option according to conf->browser.\nif (GETPOST('dol_hide_leftmenu', 'int') || !empty($_SESSION['dol_hide_leftmenu'])) {\n\t$conf->dol_hide_leftmenu = 1;\n}\nif (GETPOST('dol_hide_topmenu', 'int') || !empty($_SESSION['dol_hide_topmenu'])) {\n\t$conf->dol_hide_topmenu = 1;\n}\nif (GETPOST('dol_optimize_smallscreen', 'int') || !empty($_SESSION['dol_optimize_smallscreen'])) {\n\t$conf->dol_optimize_smallscreen = 1;\n}\nif (GETPOST('dol_no_mouse_hover', 'int') || !empty($_SESSION['dol_no_mouse_hover'])) {\n\t$conf->dol_no_mouse_hover = 1;\n}\nif (GETPOST('dol_use_jmobile', 'int') || !empty($_SESSION['dol_use_jmobile'])) {\n\t$conf->dol_use_jmobile = 1;\n}\n// If not on Desktop\nif (!empty($conf->browser->layout) && $conf->browser->layout != 'classic') {\n\t$conf->dol_no_mouse_hover = 1;\n}\n\n// If on smartphone or optmized for small screen\nif ((!empty($conf->browser->layout) && $conf->browser->layout == 'phone')\n\t|| (!empty($_SESSION['dol_screenwidth']) && $_SESSION['dol_screenwidth'] < 400)\n\t|| (!empty($_SESSION['dol_screenheight']) && $_SESSION['dol_screenheight'] < 400\n\t|| !empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER))\n) {\n\t$conf->dol_optimize_smallscreen = 1;\n\n\tif (isset($conf->global->PRODUIT_DESC_IN_FORM) && $conf->global->PRODUIT_DESC_IN_FORM == 1) {\n\t\t$conf->global->PRODUIT_DESC_IN_FORM_ACCORDING_TO_DEVICE = 0;\n\t}\n}\n// Replace themes bugged with jmobile with eldy\nif (!empty($conf->dol_use_jmobile) && in_array($conf->theme, array('bureau2crea', 'cameleo', 'amarok'))) {\n\t$conf->theme = 'eldy';\n\t$conf->css = \"/theme/\".$conf->theme.\"/style.css.php\";\n}\n\nif (!defined('NOREQUIRETRAN')) {\n\tif (!GETPOST('lang', 'aZ09')) {\t// If language was not forced on URL\n\t\t// If user has chosen its own language\n\t\tif (!empty($user->conf->MAIN_LANG_DEFAULT)) {\n\t\t\t// If different than current language\n\t\t\t//print \">>>\".$langs->getDefaultLang().\"-\".$user->conf->MAIN_LANG_DEFAULT;\n\t\t\tif ($langs->getDefaultLang() != $user->conf->MAIN_LANG_DEFAULT) {\n\t\t\t\t$langs->setDefaultLang($user->conf->MAIN_LANG_DEFAULT);\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (!defined('NOLOGIN')) {\n\t// If the login is not recovered, it is identified with an account that does not exist.\n\t// Hacking attempt?\n\tif (!$user->login) {\n\t\taccessforbidden();\n\t}\n\n\t// Check if user is active\n\tif ($user->statut < 1) {\n\t\t// If not active, we refuse the user\n\t\t$langs->loadLangs(array(\"errors\", \"other\"));\n\t\tdol_syslog(\"Authentication KO as login is disabled\", LOG_NOTICE);\n\t\taccessforbidden(\"ErrorLoginDisabled\");\n\t}\n\n\t// Load permissions\n\t$user->getrights();\n}\n\ndol_syslog(\"--- Access to \".(empty($_SERVER[\"REQUEST_METHOD\"]) ? '' : $_SERVER[\"REQUEST_METHOD\"].' ').$_SERVER[\"PHP_SELF\"].' - action='.GETPOST('action', 'aZ09').', massaction='.GETPOST('massaction', 'aZ09').(defined('NOTOKENRENEWAL') ? ' NOTOKENRENEWAL='.constant('NOTOKENRENEWAL') : ''), LOG_NOTICE);\n//Another call for easy debugg\n//dol_syslog(\"Access to \".$_SERVER[\"PHP_SELF\"].' '.$_SERVER[\"HTTP_REFERER\"].' GET='.join(',',array_keys($_GET)).'->'.join(',',$_GET).' POST:'.join(',',array_keys($_POST)).'->'.join(',',$_POST));\n\n// Load main languages files\nif (!defined('NOREQUIRETRAN')) {\n\t// Load translation files required by page\n\t$langs->loadLangs(array('main', 'dict'));\n}\n\n// Define some constants used for style of arrays\n$bc = array(0=>'class=\"impair\"', 1=>'class=\"pair\"');\n$bcdd = array(0=>'class=\"drag drop oddeven\"', 1=>'class=\"drag drop oddeven\"');\n$bcnd = array(0=>'class=\"nodrag nodrop nohover\"', 1=>'class=\"nodrag nodrop nohoverpair\"'); // Used for tr to add new lines\n$bctag = array(0=>'class=\"impair tagtr\"', 1=>'class=\"pair tagtr\"');\n\n// Define messages variables\n$mesg = ''; $warning = ''; $error = 0;\n// deprecated, see setEventMessages() and dol_htmloutput_events()\n$mesgs = array(); $warnings = array(); $errors = array();\n\n// Constants used to defined number of lines in textarea\nif (empty($conf->browser->firefox)) {\n\tdefine('ROWS_1', 1);\n\tdefine('ROWS_2', 2);\n\tdefine('ROWS_3', 3);\n\tdefine('ROWS_4', 4);\n\tdefine('ROWS_5', 5);\n\tdefine('ROWS_6', 6);\n\tdefine('ROWS_7', 7);\n\tdefine('ROWS_8', 8);\n\tdefine('ROWS_9', 9);\n} else {\n\tdefine('ROWS_1', 0);\n\tdefine('ROWS_2', 1);\n\tdefine('ROWS_3', 2);\n\tdefine('ROWS_4', 3);\n\tdefine('ROWS_5', 4);\n\tdefine('ROWS_6', 5);\n\tdefine('ROWS_7', 6);\n\tdefine('ROWS_8', 7);\n\tdefine('ROWS_9', 8);\n}\n\n$heightforframes = 50;\n\n// Init menu manager\nif (!defined('NOREQUIREMENU')) {\n\tif (empty($user->socid)) {    // If internal user or not defined\n\t\t$conf->standard_menu = (empty($conf->global->MAIN_MENU_STANDARD_FORCED) ? (empty($conf->global->MAIN_MENU_STANDARD) ? 'eldy_menu.php' : $conf->global->MAIN_MENU_STANDARD) : $conf->global->MAIN_MENU_STANDARD_FORCED);\n\t} else {\n\t\t// If external user\n\t\t$conf->standard_menu = (empty($conf->global->MAIN_MENUFRONT_STANDARD_FORCED) ? (empty($conf->global->MAIN_MENUFRONT_STANDARD) ? 'eldy_menu.php' : $conf->global->MAIN_MENUFRONT_STANDARD) : $conf->global->MAIN_MENUFRONT_STANDARD_FORCED);\n\t}\n\n\t// Load the menu manager (only if not already done)\n\t$file_menu = $conf->standard_menu;\n\tif (GETPOST('menu', 'alpha')) {\n\t\t$file_menu = GETPOST('menu', 'alpha'); // example: menu=eldy_menu.php\n\t}\n\tif (!class_exists('MenuManager')) {\n\t\t$menufound = 0;\n\t\t$dirmenus = array_merge(array(\"/core/menus/\"), (array) $conf->modules_parts['menus']);\n\t\tforeach ($dirmenus as $dirmenu) {\n\t\t\t$menufound = dol_include_once($dirmenu.\"standard/\".$file_menu);\n\t\t\tif (class_exists('MenuManager')) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!class_exists('MenuManager')) {\t// If failed to include, we try with standard eldy_menu.php\n\t\t\tdol_syslog(\"You define a menu manager '\".$file_menu.\"' that can not be loaded.\", LOG_WARNING);\n\t\t\t$file_menu = 'eldy_menu.php';\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.\"/core/menus/standard/\".$file_menu;\n\t\t}\n\t}\n\t$menumanager = new MenuManager($db, empty($user->socid) ? 0 : 1);\n\t$menumanager->loadMenu();\n}\n\n\n\n// Functions\n\nif (!function_exists(\"llxHeader\")) {\n\t/**\n\t *\tShow HTML header HTML + BODY + Top menu + left menu + DIV\n\t *\n\t * @param \tstring \t\t\t$head\t\t\t\tOptionnal head lines\n\t * @param \tstring \t\t\t$title\t\t\t\tHTML title\n\t * @param\tstring\t\t\t$help_url\t\t\tUrl links to help page\n\t * \t\t                            \t\t\tSyntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n\t *                                  \t\t\tFor other external page: http://server/url\n\t * @param\tstring\t\t\t$target\t\t\t\tTarget to use on links\n\t * @param \tint    \t\t\t$disablejs\t\t\tMore content into html header\n\t * @param \tint    \t\t\t$disablehead\t\tMore content into html header\n\t * @param \tarray|string  \t$arrayofjs\t\t\tArray of complementary js files\n\t * @param \tarray|string  \t$arrayofcss\t\t\tArray of complementary css files\n\t * @param\tstring\t\t\t$morequerystring\tQuery string to add to the link \"print\" to get same parameters (use only if autodetect fails)\n\t * @param   string  \t\t$morecssonbody      More CSS on body tag. For example 'classforhorizontalscrolloftabs'.\n\t * @param\tstring\t\t\t$replacemainareaby\tReplace call to main_area() by a print of this string\n\t * @param\tint\t\t\t\t$disablenofollow\tDisable the \"nofollow\" on meta robot header\n\t * @param\tint\t\t\t\t$disablenoindex\t\tDisable the \"noindex\" on meta robot header\n\t * @return\tvoid\n\t */\n\tfunction llxHeader($head = '', $title = '', $help_url = '', $target = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $morequerystring = '', $morecssonbody = '', $replacemainareaby = '', $disablenofollow = 0, $disablenoindex = 0)\n\t{\n\t\tglobal $conf, $hookmanager;\n\n\t\t// html header\n\t\ttop_htmlhead($head, $title, $disablejs, $disablehead, $arrayofjs, $arrayofcss, 0, $disablenofollow, $disablenoindex);\n\n\t\t$tmpcsstouse = 'sidebar-collapse'.($morecssonbody ? ' '.$morecssonbody : '');\n\t\t// If theme MD and classic layer, we open the menulayer by default.\n\t\tif ($conf->theme == 'md' && !in_array($conf->browser->layout, array('phone', 'tablet')) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\tglobal $mainmenu;\n\t\t\tif ($mainmenu != 'website') {\n\t\t\t\t$tmpcsstouse = $morecssonbody; // We do not use sidebar-collpase by default to have menuhider open by default.\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORCOLORBLIND)) {\n\t\t\t$tmpcsstouse .= ' colorblind-'.strip_tags($conf->global->MAIN_OPTIMIZEFORCOLORBLIND);\n\t\t}\n\n\t\tprint '<body id=\"mainbody\" class=\"'.$tmpcsstouse.'\">'.\"\\n\";\n\n\t\t$parameters = array('help_url' => $help_url);\n\t\t$reshook = $hookmanager->executeHooks('changeHelpURL', $parameters);\n\t\tif ($reshook > 0) {\n\t\t\t$help_url = $hookmanager->resPrint;\n\t\t}\n\n\t\t// top menu and left menu area\n\t\tif ((empty($conf->dol_hide_topmenu) || GETPOST('dol_invisible_topmenu', 'int')) && !GETPOST('dol_openinpopup', 'aZ09')) {\n\t\t\ttop_menu($head, $title, $target, $disablejs, $disablehead, $arrayofjs, $arrayofcss, $morequerystring, $help_url);\n\t\t}\n\n\t\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup', 'aZ09')) {\n\t\t\tleft_menu(array(), $help_url, '', '', 1, $title, 1); // $menumanager is retrieved with a global $menumanager inside this function\n\t\t}\n\n\t\t// main area\n\t\tif ($replacemainareaby) {\n\t\t\tprint $replacemainareaby;\n\t\t\treturn;\n\t\t}\n\t\tmain_area($title);\n\t}\n}\n\n\n/**\n *  Show HTTP header. Called by top_htmlhead().\n *\n *  @param  string  $contenttype    Content type. For example, 'text/html'\n *  @param\tint\t\t$forcenocache\tForce disabling of cache for the page\n *  @return\tvoid\n */\nfunction top_httphead($contenttype = 'text/html', $forcenocache = 0)\n{\n\tglobal $db, $conf, $hookmanager;\n\n\tif ($contenttype == 'text/html') {\n\t\theader(\"Content-Type: text/html; charset=\".$conf->file->character_set_client);\n\t} else {\n\t\theader(\"Content-Type: \".$contenttype);\n\t}\n\n\t// Security options\n\n\t// X-Content-Type-Options\n\theader(\"X-Content-Type-Options: nosniff\"); // With the nosniff option, if the server says the content is text/html, the browser will render it as text/html (note that most browsers now force this option to on)\n\n\t// X-Frame-Options\n\tif (!defined('XFRAMEOPTIONS_ALLOWALL')) {\n\t\theader(\"X-Frame-Options: SAMEORIGIN\"); // Frames allowed only if on same domain (stop some XSS attacks)\n\t} else {\n\t\theader(\"X-Frame-Options: ALLOWALL\");\n\t}\n\n\t// X-XSS-Protection\n\t//header(\"X-XSS-Protection: 1\");      \t\t// XSS filtering protection of some browsers (note: use of Content-Security-Policy is more efficient). Disabled as deprecated.\n\n\t// Content-Security-Policy\n\tif (!defined('MAIN_SECURITY_FORCECSP')) {\n\t\t// If CSP not forced from the page\n\n\t\t// A default security policy that keep usage of js external component like ckeditor, stripe, google, working\n\t\t//\t$contentsecuritypolicy = \"frame-ancestors 'self'; font-src *; img-src *; style-src * 'unsafe-inline' 'unsafe-eval'; default-src 'self' *.stripe.com 'unsafe-inline' 'unsafe-eval'; script-src 'self' *.stripe.com 'unsafe-inline' 'unsafe-eval'; frame-src 'self' *.stripe.com; connect-src 'self';\";\n\t\t$contentsecuritypolicy = getDolGlobalString('MAIN_SECURITY_FORCECSP');\n\n\t\tif (!is_object($hookmanager)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/hookmanager.class.php';\n\t\t\t$hookmanager = new HookManager($db);\n\t\t}\n\t\t$hookmanager->initHooks(array(\"main\"));\n\n\t\t$parameters = array('contentsecuritypolicy'=>$contentsecuritypolicy);\n\t\t$result = $hookmanager->executeHooks('setContentSecurityPolicy', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif ($result > 0) {\n\t\t\t$contentsecuritypolicy = $hookmanager->resPrint; // Replace CSP\n\t\t} else {\n\t\t\t$contentsecuritypolicy .= $hookmanager->resPrint; // Concat CSP\n\t\t}\n\n\t\tif (!empty($contentsecuritypolicy)) {\n\t\t\t// For example, to restrict 'script', 'object', 'frames' or 'img' to some domains:\n\t\t\t// frame-ancestors 'self'; script-src https://api.google.com https://anotherhost.com; object-src https://youtube.com; frame-src https://youtube.com; img-src https://static.example.com\n\t\t\t// For example, to restrict everything to one domain, except 'object', ...:\n\t\t\t// default-src https://cdn.example.net; object-src 'none'\n\t\t\t// For example, to restrict everything to itself except img that can be on other servers:\n\t\t\t// default-src 'self'; img-src *;\n\t\t\t// Pre-existing site that uses too much js code to fix but wants to ensure resources are loaded only over https and disable plugins:\n\t\t\t// default-src https: 'unsafe-inline' 'unsafe-eval'; object-src 'none'\n\t\t\theader(\"Content-Security-Policy: \".$contentsecuritypolicy);\n\t\t}\n\t} else {\n\t\theader(\"Content-Security-Policy: \".constant('MAIN_SECURITY_FORCECSP'));\n\t}\n\n\t// Referrer-Policy\n\t// Say if we must provide the referrer when we jump onto another web page.\n\t// Default browser are 'strict-origin-when-cross-origin' (only domain is sent on other domain switching), we want more so we use 'same-origin' so browser doesn't send any referrer when going into another web site domain.\n\tif (!defined('MAIN_SECURITY_FORCERP')) {\n\t\t$referrerpolicy = getDolGlobalString('MAIN_SECURITY_FORCERP', \"same-origin\");\n\n\t\theader(\"Referrer-Policy: \".$referrerpolicy);\n\t}\n\n\tif ($forcenocache) {\n\t\theader(\"Cache-Control: no-cache, no-store, must-revalidate, max-age=0\");\n\t}\n\n\t// No need to add this token in header, we use instead the one into the forms.\n\t//header(\"anti-csrf-token: \".newToken());\n}\n\n/**\n * Ouput html header of a page. It calls also top_httphead()\n * This code is also duplicated into security2.lib.php::dol_loginfunction\n *\n * @param \tstring \t$head\t\t\t Optionnal head lines\n * @param \tstring \t$title\t\t\t HTML title\n * @param \tint    \t$disablejs\t\t Disable js output\n * @param \tint    \t$disablehead\t Disable head output\n * @param \tarray  \t$arrayofjs\t\t Array of complementary js files\n * @param \tarray  \t$arrayofcss\t\t Array of complementary css files\n * @param \tint    \t$disableforlogin Do not load heavy js and css for login pages\n * @param   int     $disablenofollow Disable nofollow tag for meta robots\n * @param   int     $disablenoindex  Disable noindex tag for meta robots\n * @return\tvoid\n */\nfunction top_htmlhead($head, $title = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $disableforlogin = 0, $disablenofollow = 0, $disablenoindex = 0)\n{\n\tglobal $db, $conf, $langs, $user, $mysoc, $hookmanager;\n\n\ttop_httphead();\n\n\tif (empty($conf->css)) {\n\t\t$conf->css = '/theme/eldy/style.css.php'; // If not defined, eldy by default\n\t}\n\n\tprint '<!doctype html>'.\"\\n\";\n\n\tprint '<html lang=\"'.substr($langs->defaultlang, 0, 2).'\">'.\"\\n\";\n\n\t//print '<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"fr\">'.\"\\n\";\n\tif (empty($disablehead)) {\n\t\tif (!is_object($hookmanager)) {\n\t\t\t$hookmanager = new HookManager($db);\n\t\t}\n\t\t$hookmanager->initHooks(array(\"main\"));\n\n\t\t$ext = 'layout='.$conf->browser->layout.'&amp;version='.urlencode(DOL_VERSION);\n\n\t\tprint \"<head>\\n\";\n\n\t\tif (GETPOST('dol_basehref', 'alpha')) {\n\t\t\tprint '<base href=\"'.dol_escape_htmltag(GETPOST('dol_basehref', 'alpha')).'\">'.\"\\n\";\n\t\t}\n\n\t\t// Displays meta\n\t\tprint '<meta charset=\"utf-8\">'.\"\\n\";\n\t\tprint '<meta name=\"robots\" content=\"'.($disablenoindex ? 'index' : 'noindex').($disablenofollow ? ',follow' : ',nofollow').'\">'.\"\\n\"; // Do not index\n\t\tprint '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">'.\"\\n\"; // Scale for mobile device\n\t\tprint '<meta name=\"author\" content=\"Dolibarr Development Team\">'.\"\\n\";\n\t\tprint '<meta name=\"anti-csrf-newtoken\" content=\"'.newToken().'\">'.\"\\n\";\n\t\tprint '<meta name=\"anti-csrf-currenttoken\" content=\"'.currentToken().'\">'.\"\\n\";\n\t\tif (getDolGlobalInt('MAIN_FEATURES_LEVEL')) {\n\t\t\tprint '<meta name=\"MAIN_FEATURES_LEVEL\" content=\"'.getDolGlobalInt('MAIN_FEATURES_LEVEL').'\">'.\"\\n\";\n\t\t}\n\t\t// Favicon\n\t\t$favicon = DOL_URL_ROOT.'/theme/dolibarr_256x256_color.png';\n\t\tif (!empty($mysoc->logo_squarred_mini)) {\n\t\t\t$favicon = DOL_URL_ROOT.'/viewimage.php?cache=1&modulepart=mycompany&file='.urlencode('logos/thumbs/'.$mysoc->logo_squarred_mini);\n\t\t}\n\t\tif (getDolGlobalString('MAIN_FAVICON_URL')) {\n\t\t\t$favicon = getDolGlobalString('MAIN_FAVICON_URL');\n\t\t}\n\t\tif (empty($conf->dol_use_jmobile)) {\n\t\t\tprint '<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"'.$favicon.'\"/>'.\"\\n\"; // Not required into an Android webview\n\t\t}\n\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"top\" title=\"'.$langs->trans(\"Home\").'\" href=\"'.(DOL_URL_ROOT?DOL_URL_ROOT:'/').'\">'.\"\\n\";\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"copyright\" title=\"GNU General Public License\" href=\"https://www.gnu.org/copyleft/gpl.html#SEC1\">'.\"\\n\";\n\t\t//if (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) print '<link rel=\"author\" title=\"Dolibarr Development Team\" href=\"https://www.dolibarr.org\">'.\"\\n\";\n\n\t\t// Mobile appli like icon\n\t\t$manifest = DOL_URL_ROOT.'/theme/'.$conf->theme.'/manifest.json.php';\n\t\tif (!empty($manifest)) {\n\t\t\tprint '<link rel=\"manifest\" href=\"'.$manifest.'\" />'.\"\\n\";\n\t\t}\n\n\t\tif (!empty($conf->global->THEME_ELDY_TOPMENU_BACK1)) {\n\t\t\t// TODO: use auto theme color switch\n\t\t\tprint '<meta name=\"theme-color\" content=\"rgb('.$conf->global->THEME_ELDY_TOPMENU_BACK1.')\">'.\"\\n\";\n\t\t}\n\n\t\t// Auto refresh page\n\t\tif (GETPOST('autorefresh', 'int') > 0) {\n\t\t\tprint '<meta http-equiv=\"refresh\" content=\"'.GETPOST('autorefresh', 'int').'\">';\n\t\t}\n\n\t\t// Displays title\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t}\n\n\t\tprint '<title>';\n\t\t$titletoshow = '';\n\t\tif ($title && !empty($conf->global->MAIN_HTML_TITLE) && preg_match('/noapp/', $conf->global->MAIN_HTML_TITLE)) {\n\t\t\t$titletoshow = dol_htmlentities($title);\n\t\t} elseif ($title) {\n\t\t\t$titletoshow = dol_htmlentities($appli.' - '.$title);\n\t\t} else {\n\t\t\t$titletoshow = dol_htmlentities($appli);\n\t\t}\n\n\t\t$parameters = array('title'=>$titletoshow);\n\t\t$result = $hookmanager->executeHooks('setHtmlTitle', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif ($result > 0) {\n\t\t\t$titletoshow = $hookmanager->resPrint; // Replace Title to show\n\t\t} else {\n\t\t\t$titletoshow .= $hookmanager->resPrint; // Concat to Title to show\n\t\t}\n\n\t\tprint $titletoshow;\n\t\tprint '</title>';\n\n\t\tprint \"\\n\";\n\n\t\tif (GETPOST('version', 'int')) {\n\t\t\t$ext = 'version='.GETPOST('version', 'int'); // usefull to force no cache on css/js\n\t\t}\n\t\t// Refresh value of MAIN_IHM_PARAMS_REV before forging the parameter line.\n\t\tif (GETPOST('dol_resetcache')) {\n\t\t\tdolibarr_set_const($db, \"MAIN_IHM_PARAMS_REV\", ((int) $conf->global->MAIN_IHM_PARAMS_REV) + 1, 'chaine', 0, '', $conf->entity);\n\t\t}\n\n\t\t$themeparam = '?lang='.$langs->defaultlang.'&amp;theme='.$conf->theme.(GETPOST('optioncss', 'aZ09') ? '&amp;optioncss='.GETPOST('optioncss', 'aZ09', 1) : '').(empty($user->id) ? '' : ('&amp;userid='.$user->id)).'&amp;entity='.$conf->entity;\n\n\t\t$themeparam .= ($ext ? '&amp;'.$ext : '').'&amp;revision='.getDolGlobalInt(\"MAIN_IHM_PARAMS_REV\");\n\t\tif (GETPOSTISSET('dol_hide_topmenu')) {\n\t\t\t$themeparam .= '&amp;dol_hide_topmenu='.GETPOST('dol_hide_topmenu', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_hide_leftmenu')) {\n\t\t\t$themeparam .= '&amp;dol_hide_leftmenu='.GETPOST('dol_hide_leftmenu', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_optimize_smallscreen')) {\n\t\t\t$themeparam .= '&amp;dol_optimize_smallscreen='.GETPOST('dol_optimize_smallscreen', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_no_mouse_hover')) {\n\t\t\t$themeparam .= '&amp;dol_no_mouse_hover='.GETPOST('dol_no_mouse_hover', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('dol_use_jmobile')) {\n\t\t\t$themeparam .= '&amp;dol_use_jmobile='.GETPOST('dol_use_jmobile', 'int'); $conf->dol_use_jmobile = GETPOST('dol_use_jmobile', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('THEME_DARKMODEENABLED')) {\n\t\t\t$themeparam .= '&amp;THEME_DARKMODEENABLED='.GETPOST('THEME_DARKMODEENABLED', 'int');\n\t\t}\n\t\tif (GETPOSTISSET('THEME_SATURATE_RATIO')) {\n\t\t\t$themeparam .= '&amp;THEME_SATURATE_RATIO='.GETPOST('THEME_SATURATE_RATIO', 'int');\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_ENABLE_FONT_ROBOTO)) {\n\t\t\tprint '<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">'.\"\\n\";\n\t\t\tprint '<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@200;300;400;500;600&display=swap\" rel=\"stylesheet\">'.\"\\n\";\n\t\t}\n\n\t\tif (!defined('DISABLE_JQUERY') && !$disablejs && $conf->use_javascript_ajax) {\n\t\t\tprint '<!-- Includes CSS for JQuery (Ajax library) -->'.\"\\n\";\n\t\t\t$jquerytheme = 'base';\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_THEME)) {\n\t\t\t\t$jquerytheme = $conf->global->MAIN_USE_JQUERY_THEME;\n\t\t\t}\n\t\t\tif (constant('JS_JQUERY_UI')) {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.JS_JQUERY_UI.'css/'.$jquerytheme.'/jquery-ui.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // Forced JQuery\n\t\t\t} else {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/css/'.$jquerytheme.'/jquery-ui.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // JQuery\n\t\t\t}\n\t\t\tif (!defined('DISABLE_JQUERY_JNOTIFY')) {\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jnotify/jquery.jnotify-alt.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\"; // JNotify\n\t\t\t}\n\t\t\tif (!defined('DISABLE_SELECT2') && (!empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) || defined('REQUIRE_JQUERY_MULTISELECT'))) {     // jQuery plugin \"mutiselect\", \"multiple-select\", \"select2\"...\n\t\t\t\t$tmpplugin = empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) ?constant('REQUIRE_JQUERY_MULTISELECT') : $conf->global->MAIN_USE_JQUERY_MULTISELECT;\n\t\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/'.$tmpplugin.'/dist/css/'.$tmpplugin.'.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!defined('DISABLE_FONT_AWSOME')) {\n\t\t\tprint '<!-- Includes CSS for font awesome -->'.\"\\n\";\n\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/theme/common/fontawesome-5/css/all.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.DOL_URL_ROOT.'/theme/common/fontawesome-5/css/v4-shims.min.css'.($ext ? '?'.$ext : '').'\">'.\"\\n\";\n\t\t}\n\n\t\tprint '<!-- Includes CSS for Dolibarr theme -->'.\"\\n\";\n\t\t// Output style sheets (optioncss='print' or ''). Note: $conf->css looks like '/theme/eldy/style.css.php'\n\t\t$themepath = dol_buildpath($conf->css, 1);\n\t\t$themesubdir = '';\n\t\tif (!empty($conf->modules_parts['theme'])) {\t// This slow down\n\t\t\tforeach ($conf->modules_parts['theme'] as $reldir) {\n\t\t\t\tif (file_exists(dol_buildpath($reldir.$conf->css, 0))) {\n\t\t\t\t\t$themepath = dol_buildpath($reldir.$conf->css, 1);\n\t\t\t\t\t$themesubdir = $reldir;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//print 'themepath='.$themepath.' themeparam='.$themeparam;exit;\n\t\tprint '<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$themepath.$themeparam.'\">'.\"\\n\";\n\t\tif (!empty($conf->global->MAIN_FIX_FLASH_ON_CHROME)) {\n\t\t\tprint '<!-- Includes CSS that does not exists as a workaround of flash bug of chrome -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" href=\"filethatdoesnotexiststosolvechromeflashbug\">'.\"\\n\";\n\t\t}\n\n\t\t// CSS forced by modules (relative url starting with /)\n\t\tif (!empty($conf->modules_parts['css'])) {\n\t\t\t$arraycss = (array) $conf->modules_parts['css'];\n\t\t\tforeach ($arraycss as $modcss => $filescss) {\n\t\t\t\t$filescss = (array) $filescss; // To be sure filecss is an array\n\t\t\t\tforeach ($filescss as $cssfile) {\n\t\t\t\t\tif (empty($cssfile)) {\n\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modcss.\" declared a css path file into its descriptor that is empty.\", LOG_WARNING);\n\t\t\t\t\t}\n\t\t\t\t\t// cssfile is a relative path\n\t\t\t\t\t$urlforcss = dol_buildpath($cssfile, 1);\n\t\t\t\t\tif ($urlforcss && $urlforcss != '/') {\n\t\t\t\t\t\tprint '<!-- Includes CSS added by module '.$modcss.' -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" href=\"'.$urlforcss;\n\t\t\t\t\t\t// We add params only if page is not static, because some web server setup does not return content type text/css if url has parameters, so browser cache is not used.\n\t\t\t\t\t\tif (!preg_match('/\\.css$/i', $cssfile)) {\n\t\t\t\t\t\t\tprint $themeparam;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint '\">'.\"\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modcss.\" declared a css path file for a file we can't find.\", LOG_WARNING);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// CSS forced by page in top_htmlhead call (relative url starting with /)\n\t\tif (is_array($arrayofcss)) {\n\t\t\tforeach ($arrayofcss as $cssfile) {\n\t\t\t\tif (preg_match('/^(http|\\/\\/)/i', $cssfile)) {\n\t\t\t\t\t$urltofile = $cssfile;\n\t\t\t\t} else {\n\t\t\t\t\t$urltofile = dol_buildpath($cssfile, 1);\n\t\t\t\t}\n\t\t\t\tprint '<!-- Includes CSS added by page -->'.\"\\n\".'<link rel=\"stylesheet\" type=\"text/css\" title=\"default\" href=\"'.$urltofile;\n\t\t\t\t// We add params only if page is not static, because some web server setup does not return content type text/css if url has parameters and browser cache is not used.\n\t\t\t\tif (!preg_match('/\\.css$/i', $cssfile)) {\n\t\t\t\t\tprint $themeparam;\n\t\t\t\t}\n\t\t\t\tprint '\">'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\t// Output standard javascript links\n\t\tif (!defined('DISABLE_JQUERY') && !$disablejs && !empty($conf->use_javascript_ajax)) {\n\t\t\t// JQuery. Must be before other includes\n\t\t\tprint '<!-- Includes JS for JQuery -->'.\"\\n\";\n\t\t\tif (defined('JS_JQUERY') && constant('JS_JQUERY')) {\n\t\t\t\tprint '<script src=\"'.JS_JQUERY.'jquery.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t} else {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/js/jquery.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\tif (defined('JS_JQUERY_UI') && constant('JS_JQUERY_UI')) {\n\t\t\t\tprint '<script src=\"'.JS_JQUERY_UI.'jquery-ui.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t} else {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/js/jquery-ui.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// jQuery jnotify\n\t\t\tif (empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && !defined('DISABLE_JQUERY_JNOTIFY')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jnotify/jquery.jnotify.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// Table drag and drop lines\n\t\t\tif (empty($disableforlogin) && !defined('DISABLE_JQUERY_TABLEDND')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/tablednd/jquery.tablednd.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// Chart\n\t\t\tif (empty($disableforlogin) && (empty($conf->global->MAIN_JS_GRAPH) || $conf->global->MAIN_JS_GRAPH == 'chart') && !defined('DISABLE_JS_GRAPH')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/nnnick/chartjs/dist/chart.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// jQuery jeditable for Edit In Place features\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_JEDITABLE) && !defined('DISABLE_JQUERY_JEDITABLE')) {\n\t\t\t\tprint '<!-- JS to manage editInPlace feature -->'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ui-datepicker.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ui-autocomplete.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script>'.\"\\n\";\n\t\t\t\tprint 'var urlSaveInPlace = \\''.DOL_URL_ROOT.'/core/ajax/saveinplace.php\\';'.\"\\n\";\n\t\t\t\tprint 'var urlLoadInPlace = \\''.DOL_URL_ROOT.'/core/ajax/loadinplace.php\\';'.\"\\n\";\n\t\t\t\tprint 'var tooltipInPlace = \\''.$langs->transnoentities('ClickToEdit').'\\';'.\"\\n\"; // Added in title attribute of span\n\t\t\t\tprint 'var placeholderInPlace = \\'&nbsp;\\';'.\"\\n\"; // If we put another string than $langs->trans(\"ClickToEdit\") here, nothing is shown. If we put empty string, there is error, Why ?\n\t\t\t\tprint 'var cancelInPlace = \\''.$langs->trans(\"Cancel\").'\\';'.\"\\n\";\n\t\t\t\tprint 'var submitInPlace = \\''.$langs->trans('Ok').'\\';'.\"\\n\";\n\t\t\t\tprint 'var indicatorInPlace = \\'<img src=\"'.DOL_URL_ROOT.\"/theme/\".$conf->theme.\"/img/working.gif\".'\">\\';'.\"\\n\";\n\t\t\t\tprint 'var withInPlace = 300;'; // width in pixel for default string edit\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/editinplace.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/jeditable/jquery.jeditable.ckeditor.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\t// jQuery Timepicker\n\t\t\tif (!empty($conf->global->MAIN_USE_JQUERY_TIMEPICKER) || defined('REQUIRE_JQUERY_TIMEPICKER')) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/timepicker/jquery-ui-timepicker-addon.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/timepicker.js.php?lang='.$langs->defaultlang.($ext ? '&amp;'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t\tif (!defined('DISABLE_SELECT2') && (!empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) || defined('REQUIRE_JQUERY_MULTISELECT'))) {\n\t\t\t\t// jQuery plugin \"mutiselect\", \"multiple-select\", \"select2\", ...\n\t\t\t\t$tmpplugin = empty($conf->global->MAIN_USE_JQUERY_MULTISELECT) ?constant('REQUIRE_JQUERY_MULTISELECT') : $conf->global->MAIN_USE_JQUERY_MULTISELECT;\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/'.$tmpplugin.'/dist/js/'.$tmpplugin.'.full.min.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\"; // We include full because we need the support of containerCssClass\n\t\t\t}\n\t\t\tif (!defined('DISABLE_MULTISELECT')) {     // jQuery plugin \"mutiselect\" to select with checkboxes. Can be removed once we have an enhanced search tool\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/includes/jquery/plugins/multiselect/jquery.multi-select.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!$disablejs && !empty($conf->use_javascript_ajax)) {\n\t\t\t// CKEditor\n\t\t\tif (empty($disableforlogin) && (isModEnabled('fckeditor') && (empty($conf->global->FCKEDITOR_EDITORNAME) || $conf->global->FCKEDITOR_EDITORNAME == 'ckeditor') && !defined('DISABLE_CKEDITOR')) || defined('FORCE_CKEDITOR')) {\n\t\t\t\tprint '<!-- Includes JS for CKEditor -->'.\"\\n\";\n\t\t\t\t$pathckeditor = DOL_URL_ROOT.'/includes/ckeditor/ckeditor/';\n\t\t\t\t$jsckeditor = 'ckeditor.js';\n\t\t\t\tif (constant('JS_CKEDITOR')) {\n\t\t\t\t\t// To use external ckeditor 4 js lib\n\t\t\t\t\t$pathckeditor = constant('JS_CKEDITOR');\n\t\t\t\t}\n\t\t\t\tprint '<script>';\n\t\t\t\tprint '/* enable ckeditor by main.inc.php */';\n\t\t\t\tprint 'var CKEDITOR_BASEPATH = \\''.dol_escape_js($pathckeditor).'\\';'.\"\\n\";\n\t\t\t\tprint 'var ckeditorConfig = \\''.dol_escape_js(dol_buildpath($themesubdir.'/theme/'.$conf->theme.'/ckeditor/config.js'.($ext ? '?'.$ext : ''), 1)).'\\';'.\"\\n\"; // $themesubdir='' in standard usage\n\t\t\t\tprint 'var ckeditorFilebrowserBrowseUrl = \\''.DOL_URL_ROOT.'/core/filemanagerdol/browser/default/browser.php?Connector='.DOL_URL_ROOT.'/core/filemanagerdol/connectors/php/connector.php\\';'.\"\\n\";\n\t\t\t\tprint 'var ckeditorFilebrowserImageBrowseUrl = \\''.DOL_URL_ROOT.'/core/filemanagerdol/browser/default/browser.php?Type=Image&Connector='.DOL_URL_ROOT.'/core/filemanagerdol/connectors/php/connector.php\\';'.\"\\n\";\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t\tprint '<script src=\"'.$pathckeditor.$jsckeditor.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\tprint '<script>';\n\t\t\t\tif (GETPOST('mode', 'aZ09') == 'Full_inline') {\n\t\t\t\t\tprint 'CKEDITOR.disableAutoInline = false;'.\"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tprint 'CKEDITOR.disableAutoInline = true;'.\"\\n\";\n\t\t\t\t}\n\t\t\t\tprint '</script>'.\"\\n\";\n\t\t\t}\n\n\t\t\t// Browser notifications (if NOREQUIREMENU is on, it is mostly a page for popup, so we do not enable notif too. We hide also for public pages).\n\t\t\tif (!defined('NOBROWSERNOTIF') && !defined('NOREQUIREMENU') && !defined('NOLOGIN')) {\n\t\t\t\t$enablebrowsernotif = false;\n\t\t\t\tif (isModEnabled('agenda') && !empty($conf->global->AGENDA_REMINDER_BROWSER)) {\n\t\t\t\t\t$enablebrowsernotif = true;\n\t\t\t\t}\n\t\t\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t\t\t$enablebrowsernotif = false;\n\t\t\t\t}\n\t\t\t\tif ($enablebrowsernotif) {\n\t\t\t\t\tprint '<!-- Includes JS of Dolibarr (browser layout = '.$conf->browser->layout.')-->'.\"\\n\";\n\t\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_notification.js.php'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Global js function\n\t\t\tprint '<!-- Includes JS of Dolibarr -->'.\"\\n\";\n\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_head.js.php?lang='.$langs->defaultlang.($ext ? '&amp;'.$ext : '').'\"></script>'.\"\\n\";\n\n\t\t\t// JS forced by modules (relative url starting with /)\n\t\t\tif (!empty($conf->modules_parts['js'])) {\t\t// $conf->modules_parts['js'] is array('module'=>array('file1','file2'))\n\t\t\t\t$arrayjs = (array) $conf->modules_parts['js'];\n\t\t\t\tforeach ($arrayjs as $modjs => $filesjs) {\n\t\t\t\t\t$filesjs = (array) $filesjs; // To be sure filejs is an array\n\t\t\t\t\tforeach ($filesjs as $jsfile) {\n\t\t\t\t\t\t// jsfile is a relative path\n\t\t\t\t\t\t$urlforjs = dol_buildpath($jsfile, 1);\n\t\t\t\t\t\tif ($urlforjs && $urlforjs != '/') {\n\t\t\t\t\t\t\tprint '<!-- Include JS added by module '.$modjs.'-->'.\"\\n\".'<script src=\"'.$urlforjs.((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdol_syslog(\"Warning: module \".$modjs.\" declared a js path file for a file we can't find.\", LOG_WARNING);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// JS forced by page in top_htmlhead (relative url starting with /)\n\t\t\tif (is_array($arrayofjs)) {\n\t\t\t\tprint '<!-- Includes JS added by page -->'.\"\\n\";\n\t\t\t\tforeach ($arrayofjs as $jsfile) {\n\t\t\t\t\tif (preg_match('/^(http|\\/\\/)/i', $jsfile)) {\n\t\t\t\t\t\tprint '<script src=\"'.$jsfile.((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprint '<script src=\"'.dol_buildpath($jsfile, 1).((strpos($jsfile, '?') === false) ? '?' : '&amp;').'lang='.$langs->defaultlang.'\"></script>'.\"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//If you want to load custom javascript file from your selected theme directory\n\t\tif (!empty($conf->global->ALLOW_THEME_JS)) {\n\t\t\t$theme_js = dol_buildpath('/theme/'.$conf->theme.'/'.$conf->theme.'.js', 0);\n\t\t\tif (file_exists($theme_js)) {\n\t\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/theme/'.$conf->theme.'/'.$conf->theme.'.js'.($ext ? '?'.$ext : '').'\"></script>'.\"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($head)) {\n\t\t\tprint $head.\"\\n\";\n\t\t}\n\t\tif (!empty($conf->global->MAIN_HTML_HEADER)) {\n\t\t\tprint $conf->global->MAIN_HTML_HEADER.\"\\n\";\n\t\t}\n\n\t\t$parameters = array();\n\t\t$result = $hookmanager->executeHooks('addHtmlHeader', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tprint $hookmanager->resPrint; // Replace Title to show\n\n\t\tprint \"</head>\\n\\n\";\n\t}\n\n\t$conf->headerdone = 1; // To tell header was output\n}\n\n\n/**\n *  Show an HTML header + a BODY + The top menu bar\n *\n *  @param      string\t$head    \t\t\tLines in the HEAD\n *  @param      string\t$title   \t\t\tTitle of web page\n *  @param      string\t$target  \t\t\tTarget to use in menu links (Example: '' or '_top')\n *\t@param\t\tint\t\t$disablejs\t\t\tDo not output links to js (Ex: qd fonction utilisee par sous formulaire Ajax)\n *\t@param\t\tint\t\t$disablehead\t\tDo not output head section\n *\t@param\t\tarray\t$arrayofjs\t\t\tArray of js files to add in header\n *\t@param\t\tarray\t$arrayofcss\t\t\tArray of css files to add in header\n *  @param\t\tstring\t$morequerystring\tQuery string to add to the link \"print\" to get same parameters (use only if autodetect fails)\n *  @param      string\t$helppagename    \tName of wiki page for help ('' by default).\n * \t\t\t\t     \t\t                Syntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n * \t\t\t\t\t\t                    For other external page: http://server/url\n *  @return\t\tvoid\n */\nfunction top_menu($head, $title = '', $target = '', $disablejs = 0, $disablehead = 0, $arrayofjs = '', $arrayofcss = '', $morequerystring = '', $helppagename = '')\n{\n\tglobal $user, $conf, $langs, $db;\n\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\tglobal $hookmanager, $menumanager;\n\n\t$searchform = '';\n\n\t// Instantiate hooks for external modules\n\t$hookmanager->initHooks(array('toprightmenu'));\n\n\t$toprightmenu = '';\n\n\t// For backward compatibility with old modules\n\tif (empty($conf->headerdone)) {\n\t\t$disablenofollow = 0;\n\t\ttop_htmlhead($head, $title, $disablejs, $disablehead, $arrayofjs, $arrayofcss, 0, $disablenofollow);\n\t\tprint '<body id=\"mainbody\">';\n\t}\n\n\t/*\n\t * Top menu\n\t */\n\tif ((empty($conf->dol_hide_topmenu) || GETPOST('dol_invisible_topmenu', 'int')) && (!defined('NOREQUIREMENU') || !constant('NOREQUIREMENU'))) {\n\t\tif (!isset($form) || !is_object($form)) {\n\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/html.form.class.php';\n\t\t\t$form = new Form($db);\n\t\t}\n\n\t\tprint \"\\n\".'<!-- Start top horizontal -->'.\"\\n\";\n\n\t\tprint '<header id=\"id-top\" class=\"side-nav-vert'.(GETPOST('dol_invisible_topmenu', 'int') ? ' hidden' : '').'\">'; // dol_invisible_topmenu differs from dol_hide_topmenu: dol_invisible_topmenu means we output menu but we make it invisible.\n\n\t\t// Show menu entries\n\t\tprint '<div id=\"tmenu_tooltip'.(empty($conf->global->MAIN_MENU_INVERT) ? '' : 'invert').'\" class=\"tmenu\">'.\"\\n\";\n\t\t$menumanager->atarget = $target;\n\t\t$menumanager->showmenu('top', array('searchform'=>$searchform)); // This contains a \\n\n\t\tprint \"</div>\\n\";\n\n\t\t// Define link to login card\n\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t}\n\t\t} else {\n\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t}\n\n\t\tif (getDolGlobalInt('MAIN_FEATURES_LEVEL')) {\n\t\t\t$appli .= \"<br>\".$langs->trans(\"LevelOfFeature\").': '.getDolGlobalInt('MAIN_FEATURES_LEVEL');\n\t\t}\n\n\t\t$logouttext = '';\n\t\t$logouthtmltext = '';\n\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t//$logouthtmltext=$appli.'<br>';\n\t\t\tif ($_SESSION[\"dol_authmode\"] != 'forceuser' && $_SESSION[\"dol_authmode\"] != 'http') {\n\t\t\t\t$logouthtmltext .= $langs->trans(\"Logout\").'<br>';\n\n\t\t\t\t$logouttext .= '<a accesskey=\"l\" href=\"'.DOL_URL_ROOT.'/user/logout.php?token='.newToken().'\">';\n\t\t\t\t$logouttext .= img_picto($langs->trans('Logout'), 'sign-out', '', false, 0, 0, '', 'atoplogin valignmiddle');\n\t\t\t\t$logouttext .= '</a>';\n\t\t\t} else {\n\t\t\t\t$logouthtmltext .= $langs->trans(\"NoLogoutProcessWithAuthMode\", $_SESSION[\"dol_authmode\"]);\n\t\t\t\t$logouttext .= img_picto($langs->trans('Logout'), 'sign-out', '', false, 0, 0, '', 'atoplogin valignmiddle opacitymedium');\n\t\t\t}\n\t\t}\n\n\t\tprint '<div class=\"login_block usedropdown\">'.\"\\n\";\n\n\t\t$toprightmenu .= '<div class=\"login_block_other\">';\n\n\t\t// Execute hook printTopRightMenu (hooks should output string like '<div class=\"login\"><a href=\"\">mylink</a></div>')\n\t\t$parameters = array();\n\t\t$result = $hookmanager->executeHooks('printTopRightMenu', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tif (is_numeric($result)) {\n\t\t\tif ($result == 0) {\n\t\t\t\t$toprightmenu .= $hookmanager->resPrint; // add\n\t\t\t} else {\n\t\t\t\t$toprightmenu = $hookmanager->resPrint; // replace\n\t\t\t}\n\t\t} else {\n\t\t\t$toprightmenu .= $result; // For backward compatibility\n\t\t}\n\n\t\t// Link to module builder\n\t\tif (isModEnabled('modulebuilder')) {\n\t\t\t$text = '<a href=\"'.DOL_URL_ROOT.'/modulebuilder/index.php?mainmenu=home&leftmenu=admintools\" target=\"modulebuilder\">';\n\t\t\t//$text.= img_picto(\":\".$langs->trans(\"ModuleBuilder\"), 'printer_top.png', 'class=\"printer\"');\n\t\t\t$text .= '<span class=\"fa fa-bug atoplogin valignmiddle\"></span>';\n\t\t\t$text .= '</a>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $langs->trans(\"ModuleBuilder\"), 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Link to print main content area\n\t\tif (empty($conf->global->MAIN_PRINT_DISABLELINK) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$qs = dol_escape_htmltag($_SERVER[\"QUERY_STRING\"]);\n\n\t\t\tif (isset($_POST) && is_array($_POST)) {\n\t\t\t\tforeach ($_POST as $key => $value) {\n\t\t\t\t\tif ($key !== 'action' && $key !== 'password' && !is_array($value)) {\n\t\t\t\t\t\t$qs .= '&'.$key.'='.urlencode($value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$qs .= (($qs && $morequerystring) ? '&' : '').$morequerystring;\n\t\t\t$text = '<a href=\"'.dol_escape_htmltag($_SERVER[\"PHP_SELF\"]).'?'.$qs.($qs ? '&' : '').'optioncss=print\" target=\"_blank\" rel=\"noopener noreferrer\">';\n\t\t\t//$text.= img_picto(\":\".$langs->trans(\"PrintContentArea\"), 'printer_top.png', 'class=\"printer\"');\n\t\t\t$text .= '<span class=\"fa fa-print atoplogin valignmiddle\"></span>';\n\t\t\t$text .= '</a>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $langs->trans(\"PrintContentArea\"), 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Link to Dolibarr wiki pages\n\t\tif (empty($conf->global->MAIN_HELP_DISABLELINK) && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$langs->load(\"help\");\n\n\t\t\t$helpbaseurl = '';\n\t\t\t$helppage = '';\n\t\t\t$mode = '';\n\t\t\t$helppresent = '';\n\n\t\t\tif (empty($helppagename)) {\n\t\t\t\t$helppagename = 'EN:User_documentation|FR:Documentation_utilisateur|ES:Documentaci\u00f3n_usuarios';\n\t\t\t} else {\n\t\t\t\t$helppresent = 'helppresent';\n\t\t\t}\n\n\t\t\t// Get helpbaseurl, helppage and mode from helppagename and langs\n\t\t\t$arrayres = getHelpParamFor($helppagename, $langs);\n\t\t\t$helpbaseurl = $arrayres['helpbaseurl'];\n\t\t\t$helppage = $arrayres['helppage'];\n\t\t\t$mode = $arrayres['mode'];\n\n\t\t\t// Link to help pages\n\t\t\tif ($helpbaseurl && $helppage) {\n\t\t\t\t$text = '';\n\t\t\t\t$title = $langs->trans($mode == 'wiki' ? 'GoToWikiHelpPage' : 'GoToHelpPage').', ';\n\t\t\t\tif ($mode == 'wiki') {\n\t\t\t\t\t$title .= '<br>'.img_picto('', 'globe', 'class=\"pictofixedwidth\"').$langs->trans(\"PageWiki\").' '.dol_escape_htmltag('\"'.strtr($helppage, '_', ' ').'\"');\n\t\t\t\t\tif ($helppresent) {\n\t\t\t\t\t\t$title .= ' <span class=\"opacitymedium\">('.$langs->trans(\"DedicatedPageAvailable\").')</span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$title .= ' <span class=\"opacitymedium\">('.$langs->trans(\"HomePage\").')</span>';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$text .= '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"';\n\t\t\t\tif ($mode == 'wiki') {\n\t\t\t\t\t$text .= sprintf($helpbaseurl, urlencode(html_entity_decode($helppage)));\n\t\t\t\t} else {\n\t\t\t\t\t$text .= sprintf($helpbaseurl, $helppage);\n\t\t\t\t}\n\t\t\t\t$text .= '\">';\n\t\t\t\t$text .= '<span class=\"fa fa-question-circle atoplogin valignmiddle'.($helppresent ? ' '.$helppresent : '').'\"></span>';\n\t\t\t\t$text .= '<span class=\"fa fa-long-arrow-alt-up helppresentcircle'.($helppresent ? '' : ' unvisible').'\"></span>';\n\t\t\t\t$text .= '</a>';\n\t\t\t\t$toprightmenu .= $form->textwithtooltip('', $title, 2, 1, $text, 'login_block_elem', 2);\n\t\t\t}\n\n\t\t\t// Version\n\t\t\tif (!empty($conf->global->MAIN_SHOWDATABASENAMEINHELPPAGESLINK)) {\n\t\t\t\t$langs->load('admin');\n\t\t\t\t$appli .= '<br>'.$langs->trans(\"Database\").': '.$db->database_name;\n\t\t\t}\n\t\t}\n\n\t\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$text = '<span class=\"aversion\"><span class=\"hideonsmartphone small\">'.DOL_VERSION.'</span></span>';\n\t\t\t$toprightmenu .= $form->textwithtooltip('', $appli, 2, 1, $text, 'login_block_elem', 2);\n\t\t}\n\n\t\t// Logout link\n\t\t$toprightmenu .= $form->textwithtooltip('', $logouthtmltext, 2, 1, $logouttext, 'login_block_elem logout-btn', 2);\n\n\t\t$toprightmenu .= '</div>'; // end div class=\"login_block_other\"\n\n\n\t\t// Add login user link\n\t\t$toprightmenu .= '<div class=\"login_block_user\">';\n\n\t\t// Login name with photo and tooltip\n\t\t$mode = -1;\n\t\t$toprightmenu .= '<div class=\"inline-block nowrap\"><div class=\"inline-block login_block_elem login_block_elem_name\" style=\"padding: 0px;\">';\n\n\t\tif (!empty($conf->global->MAIN_USE_TOP_MENU_SEARCH_DROPDOWN)) {\n\t\t\t// Add search dropdown\n\t\t\t$toprightmenu .= top_menu_search();\n\t\t}\n\n\t\tif (!empty($conf->global->MAIN_USE_TOP_MENU_QUICKADD_DROPDOWN)) {\n\t\t\t// Add search dropdown\n\t\t\t$toprightmenu .= top_menu_quickadd();\n\t\t}\n\n\t\t// Add bookmark dropdown\n\t\t$toprightmenu .= top_menu_bookmark();\n\n\t\t// Add user dropdown\n\t\t$toprightmenu .= top_menu_user();\n\n\t\t$toprightmenu .= '</div></div>';\n\n\t\t$toprightmenu .= '</div>'.\"\\n\";\n\n\n\t\tprint $toprightmenu;\n\n\t\tprint \"</div>\\n\"; // end div class=\"login_block\"\n\n\t\tprint '</header>';\n\t\t//print '<header class=\"header2\">&nbsp;</header>';\n\n\t\tprint '<div style=\"clear: both;\"></div>';\n\t\tprint \"<!-- End top horizontal menu -->\\n\\n\";\n\t}\n\n\tif (empty($conf->dol_hide_leftmenu) && empty($conf->dol_use_jmobile)) {\n\t\tprint '<!-- Begin div id-container --><div id=\"id-container\" class=\"id-container\">';\n\t}\n}\n\n\n/**\n * Build the tooltip on user login\n *\n * @param\tint\t\t\t$hideloginname\t\tHide login name. Show only the image.\n * @param\tstring\t\t$urllogout\t\t\tURL for logout (Will use DOL_URL_ROOT.'/user/logout.php?token=...' if empty)\n * @return  string                  \t\tHTML content\n */\nfunction top_menu_user($hideloginname = 0, $urllogout = '')\n{\n\tglobal $langs, $conf, $db, $hookmanager, $user, $mysoc;\n\tglobal $dolibarr_main_authentication, $dolibarr_main_demo;\n\tglobal $menumanager;\n\n\t$langs->load('companies');\n\n\t$userImage = $userDropDownImage = '';\n\tif (!empty($user->photo)) {\n\t\t$userImage          = Form::showphoto('userphoto', $user, 0, 0, 0, 'photouserphoto userphoto', 'small', 0, 1);\n\t\t$userDropDownImage  = Form::showphoto('userphoto', $user, 0, 0, 0, 'dropdown-user-image', 'small', 0, 1);\n\t} else {\n\t\t$nophoto = '/public/theme/common/user_anonymous.png';\n\t\tif ($user->gender == 'man') {\n\t\t\t$nophoto = '/public/theme/common/user_man.png';\n\t\t}\n\t\tif ($user->gender == 'woman') {\n\t\t\t$nophoto = '/public/theme/common/user_woman.png';\n\t\t}\n\n\t\t$userImage = '<img class=\"photo photouserphoto userphoto\" alt=\"No photo\" src=\"'.DOL_URL_ROOT.$nophoto.'\">';\n\t\t$userDropDownImage = '<img class=\"photo dropdown-user-image\" alt=\"No photo\" src=\"'.DOL_URL_ROOT.$nophoto.'\">';\n\t}\n\n\t$dropdownBody = '';\n\t$dropdownBody .= '<span id=\"topmenulogincompanyinfo-btn\"><i class=\"fa fa-caret-right\"></i> '.$langs->trans(\"ShowCompanyInfos\").'</span>';\n\t$dropdownBody .= '<div id=\"topmenulogincompanyinfo\" >';\n\n\tif ($langs->transcountry(\"ProfId1\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId1\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_SIREN\"), 1).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId2\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId2\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_SIRET\"), 2).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId3\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId3\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_APE\"), 3).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId4\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId4\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_RCS\"), 4).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId5\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId5\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_PROFID5\"), 5).'</span>';\n\t}\n\tif ($langs->transcountry(\"ProfId6\", $mysoc->country_code) != '-') {\n\t\t$dropdownBody .= '<br><b>'.$langs->transcountry(\"ProfId6\", $mysoc->country_code).'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_PROFID6\"), 6).'</span>';\n\t}\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"VATIntraShort\").'</b>: <span>'.dol_print_profids(getDolGlobalString(\"MAIN_INFO_TVAINTRA\"), 'VAT').'</span>';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Country\").'</b>: <span>'.($mysoc->country_code ? $langs->trans(\"Country\".$mysoc->country_code) : '').'</span>';\n\n\t$dropdownBody .= '</div>';\n\n\t$dropdownBody .= '<br>';\n\t$dropdownBody .= '<span id=\"topmenuloginmoreinfo-btn\"><i class=\"fa fa-caret-right\"></i> '.$langs->trans(\"ShowMoreInfos\").'</span>';\n\t$dropdownBody .= '<div id=\"topmenuloginmoreinfo\" >';\n\n\t// login infos\n\tif (!empty($user->admin)) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"Administrator\").'</b>: '.yn($user->admin);\n\t}\n\tif (!empty($user->socid)) {\t// Add thirdparty for external users\n\t\t$thirdpartystatic = new Societe($db);\n\t\t$thirdpartystatic->fetch($user->socid);\n\t\t$companylink = ' '.$thirdpartystatic->getNomUrl(2); // picto only of company\n\t\t$company = ' ('.$langs->trans(\"Company\").': '.$thirdpartystatic->name.')';\n\t}\n\t$type = ($user->socid ? $langs->trans(\"External\").$company : $langs->trans(\"Internal\"));\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Type\").':</b> '.$type;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Status\").'</b>: '.$user->getLibStatut(0);\n\t$dropdownBody .= '<br>';\n\n\t$dropdownBody .= '<br><u>'.$langs->trans(\"Session\").'</u>';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"IPAddress\").'</b>: '.dol_escape_htmltag($_SERVER[\"REMOTE_ADDR\"]);\n\tif (!empty($conf->global->MAIN_MODULE_MULTICOMPANY)) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"ConnectedOnMultiCompany\").':</b> '.$conf->entity.' (user entity '.$user->entity.')';\n\t}\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"AuthenticationMode\").':</b> '.$_SESSION[\"dol_authmode\"].(empty($dolibarr_main_demo) ? '' : ' (demo)');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"ConnectedSince\").':</b> '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"PreviousConnexion\").':</b> '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser');\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentTheme\").':</b> '.$conf->theme;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentMenuManager\").':</b> '.(isset($menumanager) ? $menumanager->name : 'unknown');\n\t$langFlag = picto_from_langcode($langs->getDefaultLang());\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"CurrentUserLanguage\").':</b> '.($langFlag ? $langFlag.' ' : '').$langs->getDefaultLang();\n\n\t$tz = (int) $_SESSION['dol_tz'] + (int) $_SESSION['dol_dst'];\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"ClientTZ\").':</b> '.($tz ? ($tz >= 0 ? '+' : '').$tz : '');\n\t$dropdownBody .= ' ('.$_SESSION['dol_tz_string'].')';\n\t//$dropdownBody .= ' &nbsp; &nbsp; &nbsp; '.$langs->trans(\"DaylingSavingTime\").': ';\n\t//if ($_SESSION['dol_dst'] > 0) $dropdownBody .= yn(1);\n\t//else $dropdownBody .= yn(0);\n\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Browser\").':</b> '.$conf->browser->name.($conf->browser->version ? ' '.$conf->browser->version : '').' ('.dol_escape_htmltag($_SERVER['HTTP_USER_AGENT']).')';\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Layout\").':</b> '.$conf->browser->layout;\n\t$dropdownBody .= '<br><b>'.$langs->trans(\"Screen\").':</b> '.$_SESSION['dol_screenwidth'].' x '.$_SESSION['dol_screenheight'];\n\tif ($conf->browser->layout == 'phone') {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"Phone\").':</b> '.$langs->trans(\"Yes\");\n\t}\n\tif (!empty($_SESSION[\"disablemodules\"])) {\n\t\t$dropdownBody .= '<br><b>'.$langs->trans(\"DisabledModules\").':</b> <br>'.join(', ', explode(',', $_SESSION[\"disablemodules\"]));\n\t}\n\t$dropdownBody .= '</div>';\n\n\t// Execute hook\n\t$parameters = array('user'=>$user, 'langs' => $langs);\n\t$result = $hookmanager->executeHooks('printTopRightMenuLoginDropdownBody', $parameters); // Note that $action and $object may have been modified by some hooks\n\tif (is_numeric($result)) {\n\t\tif ($result == 0) {\n\t\t\t$dropdownBody .= $hookmanager->resPrint; // add\n\t\t} else {\n\t\t\t$dropdownBody = $hookmanager->resPrint; // replace\n\t\t}\n\t}\n\n\tif (empty($urllogout)) {\n\t\t$urllogout = DOL_URL_ROOT.'/user/logout.php?token='.newToken();\n\t}\n\n\t// Defined the links for bottom of card\n\t$profilLink = '<a accesskey=\"c\" href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\" class=\"button-top-menu-dropdown\" title=\"'.dol_escape_htmltag($langs->trans(\"YourUserFile\")).'\"><i class=\"fa fa-user\"></i>  '.$langs->trans(\"Card\").'</a>';\n\t$urltovirtualcard = '/user/virtualcard.php?id='.((int) $user->id);\n\t$virtuelcardLink = dolButtonToOpenUrlInDialogPopup('publicvirtualcardmenu', $langs->trans(\"PublicVirtualCardUrl\").(is_object($user) ? ' - '.$user->getFullName($langs) : ''), img_picto($langs->trans(\"PublicVirtualCardUrl\"), 'card', ''), $urltovirtualcard, '', 'button-top-menu-dropdown marginleftonly nohover', \"closeTopMenuLoginDropdown()\", '', 'v');\n\t$logoutLink = '<a accesskey=\"l\" href=\"'.$urllogout.'\" class=\"button-top-menu-dropdown\" title=\"'.dol_escape_htmltag($langs->trans(\"Logout\")).'\"><i class=\"fa fa-sign-out-alt\"></i> '.$langs->trans(\"Logout\").'</a>';\n\n\t$profilName = $user->getFullName($langs).' ('.$user->login.')';\n\tif (!empty($user->admin)) {\n\t\t$profilName = '<i class=\"far fa-star classfortooltip\" title=\"'.$langs->trans(\"Administrator\").'\" ></i> '.$profilName;\n\t}\n\n\t// Define version to show\n\t$appli = constant('DOL_APPLICATION_TITLE');\n\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE;\n\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t}\n\t\t} else {\n\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t}\n\t} else {\n\t\t$appli .= \" \".DOL_VERSION;\n\t}\n\n\tif (empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t$btnUser = '<!-- div for user link -->\n\t    <div id=\"topmenu-login-dropdown\" class=\"userimg atoplogin dropdown user user-menu inline-block\">\n\t        <a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\" class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\">\n\t            '.$userImage.(empty($user->photo) ? '<span class=\"hidden-xs maxwidth200 atoploginusername hideonsmartphone paddingleft\">'.dol_trunc($user->firstname ? $user->firstname : $user->login, 10).'</span>' : '').'\n\t        </a>\n\t        <div class=\"dropdown-menu\">\n\t            <!-- User image -->\n\t            <div class=\"user-header\">\n\t                '.$userDropDownImage.'\n\t                <p>\n\t                    '.$profilName.'<br>';\n\t\tif ($user->datelastlogin) {\n\t\t\t$title = $langs->trans(\"ConnectedSince\").' : '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser');\n\t\t\tif ($user->datepreviouslogin) {\n\t\t\t\t$title .= '<br>'.$langs->trans(\"PreviousConnexion\").' : '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser');\n\t\t\t}\n\t\t}\n\t\t$btnUser .= '<small class=\"classfortooltip\" title=\"'.dol_escape_htmltag($title).'\" ><i class=\"fa fa-user-clock\"></i> '.dol_print_date($user->datelastlogin, \"dayhour\", 'tzuser').'</small><br>';\n\t\tif ($user->datepreviouslogin) {\n\t\t\t$btnUser .= '<small class=\"classfortooltip\" title=\"'.dol_escape_htmltag($title).'\" ><i class=\"fa fa-user-clock opacitymedium\"></i> '.dol_print_date($user->datepreviouslogin, \"dayhour\", 'tzuser').'</small><br>';\n\t\t}\n\n\t\t//$btnUser .= '<small class=\"classfortooltip\"><i class=\"fa fa-cog\"></i> '.$langs->trans(\"Version\").' '.$appli.'</small>';\n\t\t$btnUser .= '\n\t                </p>\n\t            </div>\n\n\t            <!-- Menu Body -->\n\t            <div class=\"user-body\">'.$dropdownBody.'</div>\n\n\t            <!-- Menu Footer-->\n\t            <div class=\"user-footer\">\n\t                <div class=\"pull-left\">\n\t                    '.$profilLink.'\n\t                </div>\n\t                <div class=\"pull-left\">\n\t                    '.$virtuelcardLink.'\n\t                </div>\n\t                <div class=\"pull-right\">\n\t                    '.$logoutLink.'\n\t                </div>\n\t                <div style=\"clear:both;\"></div>\n\t            </div>\n\n\t        </div>\n\t    </div>';\n\t} else {\n\t\t$btnUser = '<!-- div for user link -->\n\t    <div id=\"topmenu-login-dropdown\" class=\"userimg atoplogin dropdown user user-menu inline-block\">\n\t    \t<a href=\"'.DOL_URL_ROOT.'/user/card.php?id='.$user->id.'\">\n\t    \t'.$userImage.'\n\t    \t\t<span class=\"hidden-xs maxwidth200 atoploginusername hideonsmartphone\">'.dol_trunc($user->firstname ? $user->firstname : $user->login, 10).'</span>\n\t    \t\t</a>\n\t\t</div>';\n\t}\n\n\tif (!defined('JS_JQUERY_DISABLE_DROPDOWN') && !empty($conf->use_javascript_ajax)) {    // This may be set by some pages that use different jquery version to avoid errors\n\t\t$btnUser .= '\n        <!-- Code to show/hide the user drop-down -->\n        <script>\n\t\tfunction closeTopMenuLoginDropdown() {\n\t\t\t//console.log(\"close login dropdown\");\t// This is call at each click on page, so we disable the log\n\t\t\t// Hide the menus.\n            jQuery(\"#topmenu-login-dropdown\").removeClass(\"open\");\n\t\t}\n        jQuery(document).ready(function() {\n            jQuery(document).on(\"click\", function(event) {\n                if (!$(event.target).closest(\"#topmenu-login-dropdown\").length) {\n\t\t\t\t\tcloseTopMenuLoginDropdown();\n                }\n            });\n\t\t\t';\n\n\t\tif ($conf->theme != 'md') {\n\t\t\t$btnUser .= '\n\t            jQuery(\"#topmenu-login-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\t\t\tconsole.log(\"toggle login dropdown\");\n\t\t\t\t\tevent.preventDefault();\n\t                jQuery(\"#topmenu-login-dropdown\").toggleClass(\"open\");\n\t            });\n\n\t            jQuery(\"#topmenulogincompanyinfo-btn\").on(\"click\", function() {\n\t\t\t\t\tconsole.log(\"Clik on topmenulogincompanyinfo-btn\");\n\t                jQuery(\"#topmenulogincompanyinfo\").slideToggle();\n\t            });\n\n\t            jQuery(\"#topmenuloginmoreinfo-btn\").on(\"click\", function() {\n\t\t\t\t\tconsole.log(\"Clik on topmenuloginmoreinfo-btn\");\n\t                jQuery(\"#topmenuloginmoreinfo\").slideToggle();\n\t            });';\n\t\t}\n\n\t\t$btnUser .= '\n        });\n        </script>\n        ';\n\t}\n\n\treturn $btnUser;\n}\n\n/**\n * Build the tooltip on top menu quick add\n *\n * @return  string                  HTML content\n */\nfunction top_menu_quickadd()\n{\n\tglobal $langs;\n\n\t$html = '';\n\n\t$html .= '<!-- div for quick add link -->\n    <div id=\"topmenu-quickadd-dropdown\" class=\"atoplogin dropdown inline-block\">\n        <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('QuickAdd').' ('.$langs->trans('QuickAddMenuShortCut').')\"><i class=\"fa fa-plus-circle\"></i></a>\n        <div class=\"dropdown-menu\">'.printDropdownQuickadd().'</div>\n    </div>';\n\t$html .= '\n        <!-- Code to show/hide the user drop-down -->\n        <script>\n        jQuery(document).ready(function() {\n            jQuery(document).on(\"click\", function(event) {\n                if (!$(event.target).closest(\"#topmenu-quickadd-dropdown\").length) {\n                    // Hide the menus.\n                    $(\"#topmenu-quickadd-dropdown\").removeClass(\"open\");\n                }\n            });\n            $(\"#topmenu-quickadd-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n                openQuickAddDropDown();\n            });\n            // Key map shortcut\n            $(document).keydown(function(e){\n                  if( e.which === 76 && e.ctrlKey && e.shiftKey ){\n                     console.log(\\'control + shift + l : trigger open quick add dropdown\\');\n                     openQuickAddDropDown();\n                  }\n            });\n\n\n            var openQuickAddDropDown = function() {\n                event.preventDefault();\n                $(\"#topmenu-quickadd-dropdown\").toggleClass(\"open\");\n                //$(\"#top-quickadd-search-input\").focus();\n            }\n        });\n        </script>\n        ';\n\treturn $html;\n}\n\n/**\n * Generate list of quickadd items\n *\n * @return string HTML output\n */\nfunction printDropdownQuickadd()\n{\n\tglobal $conf, $user, $langs, $hookmanager;\n\n\t$items = array(\n\t\t'items' => array(\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/adherents/card.php?action=create&amp;mainmenu=members\",\n\t\t\t\t\"title\" => \"MenuNewMember@members\",\n\t\t\t\t\"name\" => \"Adherent@members\",\n\t\t\t\t\"picto\" => \"object_member\",\n\t\t\t\t\"activation\" => isModEnabled('adherent') && $user->hasRight(\"adherent\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 5,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/societe/card.php?action=create&amp;mainmenu=companies\",\n\t\t\t\t\"title\" => \"MenuNewThirdParty@companies\",\n\t\t\t\t\"name\" => \"ThirdParty@companies\",\n\t\t\t\t\"picto\" => \"object_company\",\n\t\t\t\t\"activation\" => isModEnabled(\"societe\") && $user->hasRight(\"societe\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 10,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/contact/card.php?action=create&amp;mainmenu=companies\",\n\t\t\t\t\"title\" => \"NewContactAddress@companies\",\n\t\t\t\t\"name\" => \"Contact@companies\",\n\t\t\t\t\"picto\" => \"object_contact\",\n\t\t\t\t\"activation\" => isModEnabled(\"societe\") && $user->hasRight(\"societe\", \"contact\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 20,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/comm/propal/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewPropal@propal\",\n\t\t\t\t\"name\" => \"Proposal@propal\",\n\t\t\t\t\"picto\" => \"object_propal\",\n\t\t\t\t\"activation\" => isModEnabled(\"propal\") && $user->hasRight(\"propal\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 30,\n\t\t\t),\n\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/commande/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewOrder@orders\",\n\t\t\t\t\"name\" => \"Order@orders\",\n\t\t\t\t\"picto\" => \"object_order\",\n\t\t\t\t\"activation\" => isModEnabled('commande') && $user->hasRight(\"commande\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 40,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/compta/facture/card.php?action=create&amp;mainmenu=billing\",\n\t\t\t\t\"title\" => \"NewBill@bills\",\n\t\t\t\t\"name\" => \"Bill@bills\",\n\t\t\t\t\"picto\" => \"object_bill\",\n\t\t\t\t\"activation\" => isModEnabled('facture') && $user->hasRight(\"facture\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 50,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/contrat/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewContractSubscription@contracts\",\n\t\t\t\t\"name\" => \"Contract@contracts\",\n\t\t\t\t\"picto\" => \"object_contract\",\n\t\t\t\t\"activation\" => isModEnabled('contrat') && $user->hasRight(\"contrat\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 60,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/supplier_proposal/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"SupplierProposalNew@supplier_proposal\",\n\t\t\t\t\"name\" => \"SupplierProposal@supplier_proposal\",\n\t\t\t\t\"picto\" => \"supplier_proposal\",\n\t\t\t\t\"activation\" => isModEnabled('supplier_proposal') && $user->hasRight(\"supplier_invoice\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 70,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fourn/commande/card.php?action=create&amp;mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewSupplierOrderShort@orders\",\n\t\t\t\t\"name\" => \"SupplierOrder@orders\",\n\t\t\t\t\"picto\" => \"supplier_order\",\n\t\t\t\t\"activation\" => (isModEnabled(\"fournisseur\") && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD) && $user->hasRight(\"fournisseur\", \"commande\", \"write\")) || (isModEnabled(\"supplier_order\") && $user->hasRight(\"supplier_invoice\", \"write\")), // vs hooking\n\t\t\t\t\"position\" => 80,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fourn/facture/card.php?action=create&amp;mainmenu=billing\",\n\t\t\t\t\"title\" => \"NewBill@bills\",\n\t\t\t\t\"name\" => \"SupplierBill@bills\",\n\t\t\t\t\"picto\" => \"supplier_invoice\",\n\t\t\t\t\"activation\" => (isModEnabled(\"fournisseur\") && empty($conf->global->MAIN_USE_NEW_SUPPLIERMOD) && $user->hasRight(\"fournisseur\", \"facture\", \"write\")) || (isModEnabled(\"supplier_invoice\") && $user->hasRight(\"supplier_invoice\", \"write\")), // vs hooking\n\t\t\t\t\"position\" => 90,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/ticket/card.php?action=create&amp;mainmenu=ticket\",\n\t\t\t\t\"title\" => \"NewTicket@ticket\",\n\t\t\t\t\"name\" => \"Ticket@ticket\",\n\t\t\t\t\"picto\" => \"ticket\",\n\t\t\t\t\"activation\" => isModEnabled('ticket') && $user->hasRight(\"ticket\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 100,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/fichinter/card.php?action=create&mainmenu=commercial\",\n\t\t\t\t\"title\" => \"NewIntervention@interventions\",\n\t\t\t\t\"name\" => \"Intervention@interventions\",\n\t\t\t\t\"picto\" => \"intervention\",\n\t\t\t\t\"activation\" => isModEnabled('ficheinter') && $user->hasRight(\"ficheinter\", \"creer\"), // vs hooking\n\t\t\t\t\"position\" => 110,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/product/card.php?action=create&amp;type=0&amp;mainmenu=products\",\n\t\t\t\t\"title\" => \"NewProduct@products\",\n\t\t\t\t\"name\" => \"Product@products\",\n\t\t\t\t\"picto\" => \"object_product\",\n\t\t\t\t\"activation\" => isModEnabled(\"product\") && $user->hasRight(\"produit\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 400,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/product/card.php?action=create&amp;type=1&amp;mainmenu=products\",\n\t\t\t\t\"title\" => \"NewService@products\",\n\t\t\t\t\"name\" => \"Service@products\",\n\t\t\t\t\"picto\" => \"object_service\",\n\t\t\t\t\"activation\" => isModEnabled(\"service\") && $user->hasRight(\"service\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 410,\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t\"url\" => \"/user/card.php?action=create&amp;type=1&amp;mainmenu=home\",\n\t\t\t\t\"title\" => \"AddUser@users\",\n\t\t\t\t\"name\" => \"User@users\",\n\t\t\t\t\"picto\" => \"user\",\n\t\t\t\t\"activation\" => $user->hasRight(\"user\", \"user\", \"write\"), // vs hooking\n\t\t\t\t\"position\" => 500,\n\t\t\t),\n\t\t),\n\t);\n\n\t$dropDownQuickAddHtml = '';\n\n\t// Define $dropDownQuickAddHtml\n\t$dropDownQuickAddHtml .= '<div class=\"quickadd-body dropdown-body\">';\n\t$dropDownQuickAddHtml .= '<div class=\"dropdown-quickadd-list\">';\n\n\t// Allow the $items of the menu to be manipulated by modules\n\t$parameters = array();\n\t$hook_items = $items;\n\t$reshook = $hookmanager->executeHooks('menuDropdownQuickaddItems', $parameters, $hook_items); // Note that $action and $object may have been modified by some hooks\n\tif (is_numeric($reshook) && !empty($hookmanager->resArray) && is_array($hookmanager->resArray)) {\n\t\tif ($reshook == 0) {\n\t\t\t$items['items'] = array_merge($items['items'], $hookmanager->resArray); // add\n\t\t} else {\n\t\t\t$items = $hookmanager->resArray; // replace\n\t\t}\n\n\t\t// Sort menu items by 'position' value\n\t\t$position = array();\n\t\tforeach ($items['items'] as $key => $row) {\n\t\t\t$position[$key] = $row['position'];\n\t\t}\n\t\t$array1_sort_order = SORT_ASC;\n\t\tarray_multisort($position, $array1_sort_order, $items['items']);\n\t}\n\n\tforeach ($items['items'] as $item) {\n\t\tif (!$item['activation']) {\n\t\t\tcontinue;\n\t\t}\n\t\t$langs->load(explode('@', $item['title'])[1]);\n\t\t$langs->load(explode('@', $item['name'])[1]);\n\t\t$dropDownQuickAddHtml .= '\n\t\t\t<a class=\"dropdown-item quickadd-item\" href=\"'.DOL_URL_ROOT.$item['url'].'\" title=\"'.$langs->trans(explode('@', $item['title'])[0]).'\">\n\t\t\t'. img_picto('', $item['picto'], 'style=\"width:18px;\"') . ' ' . $langs->trans(explode('@', $item['name'])[0]) . '</a>\n\t\t';\n\t}\n\n\t$dropDownQuickAddHtml .= '</div>';\n\t$dropDownQuickAddHtml .= '</div>';\n\n\treturn $dropDownQuickAddHtml;\n}\n\n/**\n * Build the tooltip on top menu bookmark\n *\n * @return  string                  HTML content\n */\nfunction top_menu_bookmark()\n{\n\tglobal $langs, $conf, $db, $user;\n\n\t$html = '';\n\n\t// Define $bookmarks\n\tif (!isModEnabled('bookmark') || empty($user->rights->bookmark->lire)) {\n\t\treturn $html;\n\t}\n\n\tif (!defined('JS_JQUERY_DISABLE_DROPDOWN') && !empty($conf->use_javascript_ajax)) {\t    // This may be set by some pages that use different jquery version to avoid errors\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/bookmarks/bookmarks.lib.php';\n\t\t$langs->load(\"bookmarks\");\n\n\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER)) {\n\t\t\t$html .= '<div id=\"topmenu-bookmark-dropdown\" class=\"dropdown inline-block\">';\n\t\t\t$html .= printDropdownBookmarksList();\n\t\t\t$html .= '</div>';\n\t\t} else {\n\t\t\t$html .= '<!-- div for bookmark link -->\n\t        <div id=\"topmenu-bookmark-dropdown\" class=\"dropdown inline-block\">\n\t            <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('Bookmarks').' ('.$langs->trans('BookmarksMenuShortCut').')\"><i class=\"fa fa-star\"></i></a>\n\t            <div class=\"dropdown-menu\">\n\t                '.printDropdownBookmarksList().'\n\t            </div>\n\t        </div>';\n\n\t\t\t$html .= '\n\t        <!-- Code to show/hide the bookmark drop-down -->\n\t        <script>\n\t        jQuery(document).ready(function() {\n\t            jQuery(document).on(\"click\", function(event) {\n\t                if (!$(event.target).closest(\"#topmenu-bookmark-dropdown\").length) {\n\t\t\t\t\t\t//console.log(\"close bookmark dropdown - we click outside\");\n\t                    // Hide the menus.\n\t                    $(\"#topmenu-bookmark-dropdown\").removeClass(\"open\");\n\t                }\n\t            });\n\n\t            jQuery(\"#topmenu-bookmark-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\t\t\tconsole.log(\"toggle bookmark dropdown\");\n\t\t\t\t\topenBookMarkDropDown();\n\t            });\n\n\t            // Key map shortcut\n\t            jQuery(document).keydown(function(e){\n\t                  if( e.which === 77 && e.ctrlKey && e.shiftKey ){\n\t                     console.log(\\'control + shift + m : trigger open bookmark dropdown\\');\n\t                     openBookMarkDropDown();\n\t                  }\n\t            });\n\n\n\t            var openBookMarkDropDown = function() {\n\t                event.preventDefault();\n\t                jQuery(\"#topmenu-bookmark-dropdown\").toggleClass(\"open\");\n\t                jQuery(\"#top-bookmark-search-input\").focus();\n\t            }\n\n\t        });\n\t        </script>\n\t        ';\n\t\t}\n\t}\n\treturn $html;\n}\n\n/**\n * Build the tooltip on top menu tsearch\n *\n * @return  string                  HTML content\n */\nfunction top_menu_search()\n{\n\tglobal $langs, $conf, $db, $user, $hookmanager;\n\n\t$html = '';\n\n\t$usedbyinclude = 1;\n\t$arrayresult = null;\n\tinclude DOL_DOCUMENT_ROOT.'/core/ajax/selectsearchbox.php'; // This set $arrayresult\n\n\t$defaultAction = '';\n\t$buttonList = '<div class=\"dropdown-global-search-button-list\" >';\n\t// Menu with all searchable items\n\tforeach ($arrayresult as $keyItem => $item) {\n\t\tif (empty($defaultAction)) {\n\t\t\t$defaultAction = $item['url'];\n\t\t}\n\t\t$buttonList .= '<button class=\"dropdown-item global-search-item\" data-target=\"'.dol_escape_htmltag($item['url']).'\" >';\n\t\t$buttonList .= $item['text'];\n\t\t$buttonList .= '</button>';\n\t}\n\t$buttonList .= '</div>';\n\n\n\t$searchInput = '<input name=\"search_all\" id=\"top-global-search-input\" class=\"dropdown-search-input\" placeholder=\"'.$langs->trans('Search').'\" autocomplete=\"off\" >';\n\n\t$dropDownHtml = '<form id=\"top-menu-action-search\" name=\"actionsearch\" method=\"GET\" action=\"'.$defaultAction.'\" >';\n\n\t$dropDownHtml .= '\n        <!-- search input -->\n        <div class=\"dropdown-header search-dropdown-header\">\n            ' . $searchInput.'\n        </div>\n    ';\n\n\t$dropDownHtml .= '\n        <!-- Menu Body -->\n        <div class=\"dropdown-body search-dropdown-body\">\n        '.$buttonList.'\n        </div>\n        ';\n\n\t$dropDownHtml .= '</form>';\n\n\n\t$html .= '<!-- div for Global Search -->\n    <div id=\"topmenu-global-search-dropdown\" class=\"atoplogin dropdown inline-block\">\n        <a class=\"dropdown-toggle login-dropdown-a\" data-toggle=\"dropdown\" href=\"#\" title=\"'.$langs->trans('Search').' ('.$langs->trans('SearchMenuShortCut').')\">\n            <i class=\"fa fa-search\" ></i>\n        </a>\n        <div class=\"dropdown-menu dropdown-search\">\n            '.$dropDownHtml.'\n        </div>\n    </div>';\n\n\t$html .= '\n    <!-- Code to show/hide the user drop-down -->\n    <script>\n    jQuery(document).ready(function() {\n\n        // prevent submiting form on press ENTER\n        jQuery(\"#top-global-search-input\").keydown(function (e) {\n            if (e.keyCode == 13) {\n                var inputs = $(this).parents(\"form\").eq(0).find(\":button\");\n                if (inputs[inputs.index(this) + 1] != null) {\n                    inputs[inputs.index(this) + 1].focus();\n                }\n                e.preventDefault();\n                return false;\n            }\n        });\n\n        // arrow key nav\n        jQuery(document).keydown(function(e) {\n\t\t\t// Get the focused element:\n\t\t\tvar $focused = $(\":focus\");\n\t\t\tif($focused.length && $focused.hasClass(\"global-search-item\")){\n\n           \t\t// UP - move to the previous line\n\t\t\t\tif (e.keyCode == 38) {\n\t\t\t\t    e.preventDefault();\n\t\t\t\t\t$focused.prev().focus();\n\t\t\t\t}\n\n\t\t\t\t// DOWN - move to the next line\n\t\t\t\tif (e.keyCode == 40) {\n\t\t\t\t    e.preventDefault();\n\t\t\t\t\t$focused.next().focus();\n\t\t\t\t}\n\t\t\t}\n        });\n\n\n        // submit form action\n        jQuery(\".dropdown-global-search-button-list .global-search-item\").on(\"click\", function(event) {\n            jQuery(\"#top-menu-action-search\").attr(\"action\", $(this).data(\"target\"));\n            jQuery(\"#top-menu-action-search\").submit();\n        });\n\n        // close drop down\n        jQuery(document).on(\"click\", function(event) {\n\t\t\tif (!$(event.target).closest(\"#topmenu-global-search-dropdown\").length) {\n\t\t\t\tconsole.log(\"click close search - we click outside\");\n                // Hide the menus.\n                jQuery(\"#topmenu-global-search-dropdown\").removeClass(\"open\");\n            }\n        });\n\n        // Open drop down\n        jQuery(\"#topmenu-global-search-dropdown .dropdown-toggle\").on(\"click\", function(event) {\n\t\t\tconsole.log(\"toggle search dropdown\");\n            openGlobalSearchDropDown();\n        });\n\n        // Key map shortcut\n        jQuery(document).keydown(function(e){\n              if( e.which === 70 && e.ctrlKey && e.shiftKey ){\n                 console.log(\\'control + shift + f : trigger open global-search dropdown\\');\n                 openGlobalSearchDropDown();\n              }\n        });\n\n\n        var openGlobalSearchDropDown = function() {\n            jQuery(\"#topmenu-global-search-dropdown\").toggleClass(\"open\");\n            jQuery(\"#top-global-search-input\").focus();\n        }\n\n    });\n    </script>\n    ';\n\n\treturn $html;\n}\n\n/**\n *  Show left menu bar\n *\n *  @param  array\t$menu_array_before \t       \tTable of menu entries to show before entries of menu handler. This param is deprectaed and must be provided to ''.\n *  @param  string\t$helppagename    \t       \tName of wiki page for help ('' by default).\n * \t\t\t\t     \t\t                   \tSyntax is: For a wiki page: EN:EnglishPage|FR:FrenchPage|ES:SpanishPage\n * \t\t\t\t\t\t\t\t\t         \tFor other external page: http://server/url\n *  @param  string\t$notused             \t\tDeprecated. Used in past to add content into left menu. Hooks can be used now.\n *  @param  array\t$menu_array_after           Table of menu entries to show after entries of menu handler\n *  @param  int\t\t$leftmenuwithoutmainarea    Must be set to 1. 0 by default for backward compatibility with old modules.\n *  @param  string\t$title                      Title of web page\n *  @param  string  $acceptdelayedhtml          1 if caller request to have html delayed content not returned but saved into global $delayedhtmlcontent (so caller can show it at end of page to avoid flash FOUC effect)\n *  @return\tvoid\n */\nfunction left_menu($menu_array_before, $helppagename = '', $notused = '', $menu_array_after = '', $leftmenuwithoutmainarea = 0, $title = '', $acceptdelayedhtml = 0)\n{\n\tglobal $user, $conf, $langs, $db, $form;\n\tglobal $hookmanager, $menumanager;\n\n\t$searchform = '';\n\n\tif (!empty($menu_array_before)) {\n\t\tdol_syslog(\"Deprecated parameter menu_array_before was used when calling main::left_menu function. Menu entries of module should now be defined into module descriptor and not provided when calling left_menu.\", LOG_WARNING);\n\t}\n\n\tif (empty($conf->dol_hide_leftmenu) && (!defined('NOREQUIREMENU') || !constant('NOREQUIREMENU'))) {\n\t\t// Instantiate hooks for external modules\n\t\t$hookmanager->initHooks(array('searchform', 'leftblock'));\n\n\t\tprint \"\\n\".'<!-- Begin side-nav id-left -->'.\"\\n\".'<div class=\"side-nav\"><div id=\"id-left\">'.\"\\n\";\n\n\t\tif ($conf->browser->layout == 'phone') {\n\t\t\t$conf->global->MAIN_USE_OLD_SEARCH_FORM = 1; // Select into select2 is awfull on smartphone. TODO Is this still true with select2 v4 ?\n\t\t}\n\n\t\tprint \"\\n\";\n\n\t\tif (!is_object($form)) {\n\t\t\t$form = new Form($db);\n\t\t}\n\t\t$selected = -1;\n\t\tif (empty($conf->global->MAIN_USE_TOP_MENU_SEARCH_DROPDOWN)) {\n\t\t\t$usedbyinclude = 1;\n\t\t\t$arrayresult = array();\n\t\t\tinclude DOL_DOCUMENT_ROOT.'/core/ajax/selectsearchbox.php'; // This set $arrayresult\n\n\t\t\tif ($conf->use_javascript_ajax && empty($conf->global->MAIN_USE_OLD_SEARCH_FORM)) {\n\t\t\t\t$searchform .= $form->selectArrayFilter('searchselectcombo', $arrayresult, $selected, '', 1, 0, (empty($conf->global->MAIN_SEARCHBOX_CONTENT_LOADED_BEFORE_KEY) ? 1 : 0), 'vmenusearchselectcombo', 1, $langs->trans(\"Search\"), 1);\n\t\t\t} else {\n\t\t\t\tif (is_array($arrayresult)) {\n\t\t\t\t\tforeach ($arrayresult as $key => $val) {\n\t\t\t\t\t\t$searchform .= printSearchForm($val['url'], $val['url'], $val['label'], 'maxwidth125', 'sall', (empty($val['shortcut']) ? '' : $val['shortcut']), 'searchleft'.$key, $val['img']);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Execute hook printSearchForm\n\t\t\t$parameters = array('searchform' => $searchform);\n\t\t\t$reshook = $hookmanager->executeHooks('printSearchForm', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\t\tif (empty($reshook)) {\n\t\t\t\t$searchform .= $hookmanager->resPrint;\n\t\t\t} else {\n\t\t\t\t$searchform = $hookmanager->resPrint;\n\t\t\t}\n\n\t\t\t// Force special value for $searchform\n\t\t\tif (!empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) || empty($conf->use_javascript_ajax)) {\n\t\t\t\t$urltosearch = DOL_URL_ROOT.'/core/search_page.php?showtitlebefore=1';\n\t\t\t\t$searchform = '<div class=\"blockvmenuimpair blockvmenusearchphone\"><div id=\"divsearchforms1\"><a href=\"'.$urltosearch.'\" accesskey=\"s\" alt=\"'.dol_escape_htmltag($langs->trans(\"ShowSearchFields\")).'\">'.$langs->trans(\"Search\").'...</a></div></div>';\n\t\t\t} elseif ($conf->use_javascript_ajax && !empty($conf->global->MAIN_USE_OLD_SEARCH_FORM)) {\n\t\t\t\t$searchform = '<div class=\"blockvmenuimpair blockvmenusearchphone\"><div id=\"divsearchforms1\"><a href=\"#\" alt=\"'.dol_escape_htmltag($langs->trans(\"ShowSearchFields\")).'\">'.$langs->trans(\"Search\").'...</a></div><div id=\"divsearchforms2\" style=\"display: none\">'.$searchform.'</div>';\n\t\t\t\t$searchform .= '<script>\n            \tjQuery(document).ready(function () {\n            \t\tjQuery(\"#divsearchforms1\").click(function(){\n\t                   jQuery(\"#divsearchforms2\").toggle();\n\t               });\n            \t});\n                </script>' . \"\\n\";\n\t\t\t\t$searchform .= '</div>';\n\t\t\t}\n\t\t}\n\n\t\t// Left column\n\t\tprint '<!-- Begin left menu -->'.\"\\n\";\n\n\t\tprint '<div class=\"vmenu\"'.(empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) ? '' : ' title=\"Left menu\"').'>'.\"\\n\\n\";\n\n\t\t// Show left menu with other forms\n\t\t$menumanager->menu_array = $menu_array_before;\n\t\t$menumanager->menu_array_after = $menu_array_after;\n\t\t$menumanager->showmenu('left', array('searchform'=>$searchform)); // output menu_array and menu found in database\n\n\t\t// Dolibarr version + help + bug report link\n\t\tprint \"\\n\";\n\t\tprint \"<!-- Begin Help Block-->\\n\";\n\t\tprint '<div id=\"blockvmenuhelp\" class=\"blockvmenuhelp\">'.\"\\n\";\n\n\t\t// Version\n\t\tif (!empty($conf->global->MAIN_SHOW_VERSION)) {    // Version is already on help picto and on login page.\n\t\t\t$doliurl = 'https://www.dolibarr.org';\n\t\t\t//local communities\n\t\t\tif (preg_match('/fr/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.fr';\n\t\t\t}\n\t\t\tif (preg_match('/es/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.es';\n\t\t\t}\n\t\t\tif (preg_match('/de/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.de';\n\t\t\t}\n\t\t\tif (preg_match('/it/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.it';\n\t\t\t}\n\t\t\tif (preg_match('/gr/i', $langs->defaultlang)) {\n\t\t\t\t$doliurl = 'https://www.dolibarr.gr';\n\t\t\t}\n\n\t\t\t$appli = constant('DOL_APPLICATION_TITLE');\n\t\t\tif (!empty($conf->global->MAIN_APPLICATION_TITLE)) {\n\t\t\t\t$appli = $conf->global->MAIN_APPLICATION_TITLE; $doliurl = '';\n\t\t\t\tif (preg_match('/\\d\\.\\d/', $appli)) {\n\t\t\t\t\tif (!preg_match('/'.preg_quote(DOL_VERSION).'/', $appli)) {\n\t\t\t\t\t\t$appli .= \" (\".DOL_VERSION.\")\"; // If new title contains a version that is different than core\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$appli .= \" \".DOL_VERSION;\n\t\t\t}\n\t\t\tprint '<div id=\"blockvmenuhelpapp\" class=\"blockvmenuhelp\">';\n\t\t\tif ($doliurl) {\n\t\t\t\tprint '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"'.$doliurl.'\">';\n\t\t\t} else {\n\t\t\t\tprint '<span class=\"help\">';\n\t\t\t}\n\t\t\tprint $appli;\n\t\t\tif ($doliurl) {\n\t\t\t\tprint '</a>';\n\t\t\t} else {\n\t\t\t\tprint '</span>';\n\t\t\t}\n\t\t\tprint '</div>'.\"\\n\";\n\t\t}\n\n\t\t// Link to bugtrack\n\t\tif (!empty($conf->global->MAIN_BUGTRACK_ENABLELINK)) {\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\n\t\t\tif ($conf->global->MAIN_BUGTRACK_ENABLELINK == 'github') {\n\t\t\t\t$bugbaseurl = 'https://github.com/Dolibarr/dolibarr/issues/new?labels=Bug';\n\t\t\t\t$bugbaseurl .= '&title=';\n\t\t\t\t$bugbaseurl .= urlencode(\"Bug: \");\n\t\t\t\t$bugbaseurl .= '&body=';\n\t\t\t\t$bugbaseurl .= urlencode(\"# Instructions\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"*This is a template to help you report good issues. You may use [Github Markdown](https://help.github.com/articles/getting-started-with-writing-and-formatting-on-github/) syntax to format your issue report.*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"*Please:*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- *replace the bracket enclosed texts with meaningful information*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- *remove any unused sub-section*\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"# Bug\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Short description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Environment\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Version**: \".DOL_VERSION.\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **OS**: \".php_uname('s').\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Web server**: \".$_SERVER[\"SERVER_SOFTWARE\"].\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **PHP**: \".php_sapi_name().' '.phpversion().\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **Database**: \".$db::LABEL.' '.$db->getVersion().\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"- **URL(s)**: \".$_SERVER[\"REQUEST_URI\"].\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Expected and actual behavior\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Verbose description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Steps to reproduce the behavior\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Verbose description*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## [Attached files](https://help.github.com/articles/issue-attachments) (Screenshots, screencasts, dolibarr.log, debugging informations\u2026)\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"[*Files*]\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\n\t\t\t\t$bugbaseurl .= urlencode(\"\\n\");\n\t\t\t\t$bugbaseurl .= urlencode(\"## Report\\n\");\n\t\t\t} elseif (!empty($conf->global->MAIN_BUGTRACK_ENABLELINK)) {\n\t\t\t\t$bugbaseurl = $conf->global->MAIN_BUGTRACK_ENABLELINK;\n\t\t\t} else {\n\t\t\t\t$bugbaseurl = \"\";\n\t\t\t}\n\n\t\t\t// Execute hook printBugtrackInfo\n\t\t\t$parameters = array('bugbaseurl' => $bugbaseurl);\n\t\t\t$reshook = $hookmanager->executeHooks('printBugtrackInfo', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\t\tif (empty($reshook)) {\n\t\t\t\t$bugbaseurl .= $hookmanager->resPrint;\n\t\t\t} else {\n\t\t\t\t$bugbaseurl = $hookmanager->resPrint;\n\t\t\t}\n\n\t\t\tprint '<div id=\"blockvmenuhelpbugreport\" class=\"blockvmenuhelp\">';\n\t\t\tprint '<a class=\"help\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"'.$bugbaseurl.'\"><i class=\"fas fa-bug\"></i> '.$langs->trans(\"FindBug\").'</a>';\n\t\t\tprint '</div>';\n\t\t}\n\n\t\tprint \"</div>\\n\";\n\t\tprint \"<!-- End Help Block-->\\n\";\n\t\tprint \"\\n\";\n\n\t\tprint \"</div>\\n\";\n\t\tprint \"<!-- End left menu -->\\n\";\n\t\tprint \"\\n\";\n\n\t\t// Execute hook printLeftBlock\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('printLeftBlock', $parameters); // Note that $action and $object may have been modified by some hooks\n\t\tprint $hookmanager->resPrint;\n\n\t\tprint '</div></div> <!-- End side-nav id-left -->'; // End div id=\"side-nav\" div id=\"id-left\"\n\t}\n\n\tprint \"\\n\";\n\tprint '<!-- Begin right area -->'.\"\\n\";\n\n\tif (empty($leftmenuwithoutmainarea)) {\n\t\tmain_area($title);\n\t}\n}\n\n\n/**\n *  Begin main area\n *\n *  @param\tstring\t$title\t\tTitle\n *  @return\tvoid\n */\nfunction main_area($title = '')\n{\n\tglobal $conf, $langs, $hookmanager;\n\n\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup')) {\n\t\tprint '<div id=\"id-right\">';\n\t}\n\n\tprint \"\\n\";\n\n\tprint '<!-- Begin div class=\"fiche\" -->'.\"\\n\".'<div class=\"fiche\">'.\"\\n\";\n\n\t$hookmanager->initHooks(array('main'));\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('printMainArea', $parameters); // Note that $action and $object may have been modified by some hooks\n\tprint $hookmanager->resPrint;\n\n\tif (!empty($conf->global->MAIN_ONLY_LOGIN_ALLOWED)) {\n\t\tprint info_admin($langs->trans(\"WarningYouAreInMaintenanceMode\", $conf->global->MAIN_ONLY_LOGIN_ALLOWED), 0, 0, 1, 'warning maintenancemode');\n\t}\n\n\t// Permit to add user company information on each printed document by setting SHOW_SOCINFO_ON_PRINT\n\tif (!empty($conf->global->SHOW_SOCINFO_ON_PRINT) && GETPOST('optioncss', 'aZ09') == 'print' && empty(GETPOST('disable_show_socinfo_on_print', 'az09'))) {\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('showSocinfoOnPrint', $parameters);\n\t\tif (empty($reshook)) {\n\t\t\tprint '<!-- Begin show mysoc info header -->'.\"\\n\";\n\t\t\tprint '<div id=\"mysoc-info-header\">'.\"\\n\";\n\t\t\tprint '<table class=\"centpercent div-table-responsive\">'.\"\\n\";\n\t\t\tprint '<tbody>';\n\t\t\tprint '<tr><td rowspan=\"0\" class=\"width20p\">';\n\t\t\tif ($conf->global->MAIN_SHOW_LOGO && empty($conf->global->MAIN_OPTIMIZEFORTEXTBROWSER) && !empty($conf->global->MAIN_INFO_SOCIETE_LOGO)) {\n\t\t\t\tprint '<img id=\"mysoc-info-header-logo\" style=\"max-width:100%\" alt=\"\" src=\"'.DOL_URL_ROOT.'/viewimage.php?cache=1&modulepart=mycompany&file='.urlencode('logos/'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_LOGO)).'\">';\n\t\t\t}\n\t\t\tprint '</td><td  rowspan=\"0\" class=\"width50p\"></td></tr>'.\"\\n\";\n\t\t\tprint '<tr><td class=\"titre bold\">'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_NOM).'</td></tr>'.\"\\n\";\n\t\t\tprint '<tr><td>'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ADDRESS).'<br>'.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_ZIP).' '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TOWN).'</td></tr>'.\"\\n\";\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_TEL)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Phone\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_TEL).'</td></tr>';\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_MAIL)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Email\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_MAIL).'</td></tr>';\n\t\t\t}\n\t\t\tif (!empty($conf->global->MAIN_INFO_SOCIETE_WEB)) {\n\t\t\t\tprint '<tr><td style=\"padding-left: 1em\" class=\"small\">'.$langs->trans(\"Web\").' : '.dol_escape_htmltag($conf->global->MAIN_INFO_SOCIETE_WEB).'</td></tr>';\n\t\t\t}\n\t\t\tprint '</tbody>';\n\t\t\tprint '</table>'.\"\\n\";\n\t\t\tprint '</div>'.\"\\n\";\n\t\t\tprint '<!-- End show mysoc info header -->'.\"\\n\";\n\t\t}\n\t}\n}\n\n\n/**\n *  Return helpbaseurl, helppage and mode\n *\n *  @param\tstring\t\t$helppagename\t\tPage name ('EN:xxx,ES:eee,FR:fff...' or 'http://localpage')\n *  @param  Translate\t$langs\t\t\t\tLanguage\n *  @return\tarray\t\tArray of help urls\n */\nfunction getHelpParamFor($helppagename, $langs)\n{\n\t$helpbaseurl = '';\n\t$helppage = '';\n\t$mode = '';\n\n\tif (preg_match('/^http/i', $helppagename)) {\n\t\t// If complete URL\n\t\t$helpbaseurl = '%s';\n\t\t$helppage = $helppagename;\n\t\t$mode = 'local';\n\t} else {\n\t\t// If WIKI URL\n\t\t$reg = array();\n\t\tif (preg_match('/^es/i', $langs->defaultlang)) {\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/ES:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\tif (preg_match('/^fr/i', $langs->defaultlang)) {\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/FR:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\tif (empty($helppage)) {\t// If help page not already found\n\t\t\t$helpbaseurl = 'http://wiki.dolibarr.org/index.php/%s';\n\t\t\tif (preg_match('/EN:([^|]+)/i', $helppagename, $reg)) {\n\t\t\t\t$helppage = $reg[1];\n\t\t\t}\n\t\t}\n\t\t$mode = 'wiki';\n\t}\n\treturn array('helpbaseurl'=>$helpbaseurl, 'helppage'=>$helppage, 'mode'=>$mode);\n}\n\n\n/**\n *  Show a search area.\n *  Used when the javascript quick search is not used.\n *\n *  @param  string\t$urlaction          Url post\n *  @param  string\t$urlobject          Url of the link under the search box\n *  @param  string\t$title              Title search area\n *  @param  string\t$htmlmorecss        Add more css\n *  @param  string\t$htmlinputname      Field Name input form\n *  @param\tstring\t$accesskey\t\t\tAccesskey\n *  @param  string  $prefhtmlinputname  Complement for id to avoid multiple same id in the page\n *  @param\tstring\t$img\t\t\t\tImage to use\n *  @param\tstring\t$showtitlebefore\tShow title before input text instead of into placeholder. This can be set when output is dedicated for text browsers.\n *  @param\tstring\t$autofocus\t\t\tSet autofocus on field\n *  @return\tstring\n */\nfunction printSearchForm($urlaction, $urlobject, $title, $htmlmorecss, $htmlinputname, $accesskey = '', $prefhtmlinputname = '', $img = '', $showtitlebefore = 0, $autofocus = 0)\n{\n\tglobal $conf, $langs, $user;\n\n\t$ret = '';\n\t$ret .= '<form action=\"'.$urlaction.'\" method=\"post\" class=\"searchform nowraponall tagtr\">';\n\t$ret .= '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t$ret .= '<input type=\"hidden\" name=\"savelogin\" value=\"'.dol_escape_htmltag($user->login).'\">';\n\tif ($showtitlebefore) {\n\t\t$ret .= '<div class=\"tagtd left\">'.$title.'</div> ';\n\t}\n\t$ret .= '<div class=\"tagtd\">';\n\t$ret .= img_picto('', $img, '', false, 0, 0, '', 'paddingright width20');\n\t$ret .= '<input type=\"text\" class=\"flat '.$htmlmorecss.'\"';\n\t$ret .= ' style=\"background-repeat: no-repeat; background-position: 3px;\"';\n\t$ret .= ($accesskey ? ' accesskey=\"'.$accesskey.'\"' : '');\n\t$ret .= ' placeholder=\"'.strip_tags($title).'\"';\n\t$ret .= ($autofocus ? ' autofocus' : '');\n\t$ret .= ' name=\"'.$htmlinputname.'\" id=\"'.$prefhtmlinputname.$htmlinputname.'\" />';\n\t$ret .= '<button type=\"submit\" class=\"button bordertransp\" style=\"padding-top: 4px; padding-bottom: 4px; padding-left: 6px; padding-right: 6px\">';\n\t$ret .= '<span class=\"fa fa-search\"></span>';\n\t$ret .= '</button>';\n\t$ret .= '</div>';\n\t$ret .= \"</form>\\n\";\n\treturn $ret;\n}\n\n\nif (!function_exists(\"llxFooter\")) {\n\t/**\n\t * Show HTML footer\n\t * Close div /DIV class=fiche + /DIV id-right + /DIV id-container + /BODY + /HTML.\n\t * If global var $delayedhtmlcontent was filled, we output it just before closing the body.\n\t *\n\t * @param\tstring\t$comment    \t\t\t\tA text to add as HTML comment into HTML generated page\n\t * @param\tstring\t$zone\t\t\t\t\t\t'private' (for private pages) or 'public' (for public pages)\n\t * @param\tint\t\t$disabledoutputofmessages\tClear all messages stored into session without diplaying them\n\t * @return\tvoid\n\t */\n\tfunction llxFooter($comment = '', $zone = 'private', $disabledoutputofmessages = 0)\n\t{\n\t\tglobal $conf, $db, $langs, $user, $mysoc, $object, $hookmanager;\n\t\tglobal $delayedhtmlcontent;\n\t\tglobal $contextpage, $page, $limit, $mode;\n\t\tglobal $dolibarr_distrib;\n\n\t\t$ext = 'layout='.urlencode($conf->browser->layout).'&version='.urlencode(DOL_VERSION);\n\n\t\t// Hook to add more things on all pages within fiche DIV\n\t\t$llxfooter = '';\n\t\t$parameters = array();\n\t\t$reshook = $hookmanager->executeHooks('llxFooter', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\t\tif (empty($reshook)) {\n\t\t\t$llxfooter .= $hookmanager->resPrint;\n\t\t} elseif ($reshook > 0) {\n\t\t\t$llxfooter = $hookmanager->resPrint;\n\t\t}\n\t\tif ($llxfooter) {\n\t\t\tprint $llxfooter;\n\t\t}\n\n\t\t// Global html output events ($mesgs, $errors, $warnings)\n\t\tdol_htmloutput_events($disabledoutputofmessages);\n\n\t\t// Code for search criteria persistence.\n\t\t// $user->lastsearch_values was set by the GETPOST when form field search_xxx exists\n\t\tif (is_object($user) && !empty($user->lastsearch_values_tmp) && is_array($user->lastsearch_values_tmp)) {\n\t\t\t// Clean and save data\n\t\t\tforeach ($user->lastsearch_values_tmp as $key => $val) {\n\t\t\t\tunset($_SESSION['lastsearch_values_tmp_'.$key]); // Clean array to rebuild it just after\n\t\t\t\tif (count($val) && empty($_POST['button_removefilter']) && empty($_POST['button_removefilter_x'])) {\n\t\t\t\t\tif (empty($val['sortfield'])) {\n\t\t\t\t\t\tunset($val['sortfield']);\n\t\t\t\t\t}\n\t\t\t\t\tif (empty($val['sortorder'])) {\n\t\t\t\t\t\tunset($val['sortorder']);\n\t\t\t\t\t}\n\t\t\t\t\tdol_syslog('Save lastsearch_values_tmp_'.$key.'='.json_encode($val, 0).\" (systematic recording of last search criterias)\");\n\t\t\t\t\t$_SESSION['lastsearch_values_tmp_'.$key] = json_encode($val);\n\t\t\t\t\tunset($_SESSION['lastsearch_values_'.$key]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t$relativepathstring = $_SERVER[\"PHP_SELF\"];\n\t\t// Clean $relativepathstring\n\t\tif (constant('DOL_URL_ROOT')) {\n\t\t\t$relativepathstring = preg_replace('/^'.preg_quote(constant('DOL_URL_ROOT'), '/').'/', '', $relativepathstring);\n\t\t}\n\t\t$relativepathstring = preg_replace('/^\\//', '', $relativepathstring);\n\t\t$relativepathstring = preg_replace('/^custom\\//', '', $relativepathstring);\n\t\tif (preg_match('/list\\.php$/', $relativepathstring)) {\n\t\t\tunset($_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_page_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_limit_tmp_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_mode_tmp_'.$relativepathstring]);\n\n\t\t\tif (!empty($contextpage)) {\n\t\t\t\t$_SESSION['lastsearch_contextpage_tmp_'.$relativepathstring] = $contextpage;\n\t\t\t}\n\t\t\tif (!empty($page) && $page > 0) {\n\t\t\t\t$_SESSION['lastsearch_page_tmp_'.$relativepathstring] = $page;\n\t\t\t}\n\t\t\tif (!empty($limit) && $limit != $conf->liste_limit) {\n\t\t\t\t$_SESSION['lastsearch_limit_tmp_'.$relativepathstring] = $limit;\n\t\t\t}\n\t\t\tif (!empty($mode)) {\n\t\t\t\t$_SESSION['lastsearch_mode_tmp_'.$relativepathstring] = $mode;\n\t\t\t}\n\n\t\t\tunset($_SESSION['lastsearch_contextpage_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_page_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_limit_'.$relativepathstring]);\n\t\t\tunset($_SESSION['lastsearch_mode_'.$relativepathstring]);\n\t\t}\n\n\t\t// Core error message\n\t\tif (!empty($conf->global->MAIN_CORE_ERROR)) {\n\t\t\t// Ajax version\n\t\t\tif ($conf->use_javascript_ajax) {\n\t\t\t\t$title = img_warning().' '.$langs->trans('CoreErrorTitle');\n\t\t\t\tprint ajax_dialog($title, $langs->trans('CoreErrorMessage'));\n\t\t\t} else {\n\t\t\t\t// html version\n\t\t\t\t$msg = img_warning().' '.$langs->trans('CoreErrorMessage');\n\t\t\t\tprint '<div class=\"error\">'.$msg.'</div>';\n\t\t\t}\n\n\t\t\t//define(\"MAIN_CORE_ERROR\",0);      // Constant was defined and we can't change value of a constant\n\t\t}\n\n\t\tprint \"\\n\\n\";\n\n\t\tprint '</div> <!-- End div class=\"fiche\" -->'.\"\\n\"; // End div fiche\n\n\t\tif (empty($conf->dol_hide_leftmenu) && !GETPOST('dol_openinpopup')) {\n\t\t\tprint '</div> <!-- End div id-right -->'.\"\\n\"; // End div id-right\n\t\t}\n\n\t\tif (empty($conf->dol_hide_leftmenu) && empty($conf->dol_use_jmobile)) {\n\t\t\tprint '</div> <!-- End div id-container -->'.\"\\n\"; // End div container\n\t\t}\n\n\t\tprint \"\\n\";\n\t\tif ($comment) {\n\t\t\tprint '<!-- '.$comment.' -->'.\"\\n\";\n\t\t}\n\n\t\tprintCommonFooter($zone);\n\n\t\tif (!empty($delayedhtmlcontent)) {\n\t\t\tprint $delayedhtmlcontent;\n\t\t}\n\n\t\tif (!empty($conf->use_javascript_ajax)) {\n\t\t\tprint \"\\n\".'<!-- Includes JS Footer of Dolibarr -->'.\"\\n\";\n\t\t\tprint '<script src=\"'.DOL_URL_ROOT.'/core/js/lib_foot.js.php?lang='.$langs->defaultlang.($ext ? '&'.$ext : '').'\"></script>'.\"\\n\";\n\t\t}\n\n\t\t// Wrapper to add log when clicking on download or preview\n\t\tif (isModEnabled('blockedlog') && is_object($object) && !empty($object->id) && $object->id > 0 && $object->statut > 0) {\n\t\t\tif (in_array($object->element, array('facture'))) {       // Restrict for the moment to element 'facture'\n\t\t\t\tprint \"\\n<!-- JS CODE TO ENABLE log when making a download or a preview of a document -->\\n\";\n\t\t\t\t?>\n\t\t\t\t<script>\n\t\t\t\tjQuery(document).ready(function () {\n\t\t\t\t\t$('a.documentpreview').click(function() {\n\t\t\t\t\t\t$.post('<?php echo DOL_URL_ROOT.\"/blockedlog/ajax/block-add.php\" ?>'\n\t\t\t\t\t\t\t\t, {\n\t\t\t\t\t\t\t\t\tid:<?php echo $object->id; ?>\n\t\t\t\t\t\t\t\t\t, element:'<?php echo $object->element ?>'\n\t\t\t\t\t\t\t\t\t, action:'DOC_PREVIEW'\n\t\t\t\t\t\t\t\t\t, token: '<?php echo currentToken(); ?>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\t$('a.documentdownload').click(function() {\n\t\t\t\t\t\t$.post('<?php echo DOL_URL_ROOT.\"/blockedlog/ajax/block-add.php\" ?>'\n\t\t\t\t\t\t\t\t, {\n\t\t\t\t\t\t\t\t\tid:<?php echo $object->id; ?>\n\t\t\t\t\t\t\t\t\t, element:'<?php echo $object->element ?>'\n\t\t\t\t\t\t\t\t\t, action:'DOC_DOWNLOAD'\n\t\t\t\t\t\t\t\t\t, token: '<?php echo currentToken(); ?>'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\n\t\t// A div for the address popup\n\t\tprint \"\\n<!-- A div to allow dialog popup by jQuery('#dialogforpopup').dialog() -->\\n\";\n\t\tprint '<div id=\"dialogforpopup\" style=\"display: none;\"></div>'.\"\\n\";\n\n\t\t// Add code for the asynchronous anonymous first ping (for telemetry)\n\t\t// You can use &forceping=1 in parameters to force the ping if the ping was already sent.\n\t\t$forceping = GETPOST('forceping', 'alpha');\n\t\tif (($_SERVER[\"PHP_SELF\"] == DOL_URL_ROOT.'/index.php') || $forceping) {\n\t\t\t//print '<!-- instance_unique_id='.$conf->file->instance_unique_id.' MAIN_FIRST_PING_OK_ID='.$conf->global->MAIN_FIRST_PING_OK_ID.' -->';\n\t\t\t$hash_unique_id = md5('dolibarr'.$conf->file->instance_unique_id);\t// Do not use dol_hash(), must not change if salt changes.\n\n\t\t\tif (empty($conf->global->MAIN_FIRST_PING_OK_DATE)\n\t\t\t\t|| (!empty($conf->file->instance_unique_id) && ($hash_unique_id != $conf->global->MAIN_FIRST_PING_OK_ID) && ($conf->global->MAIN_FIRST_PING_OK_ID != 'disabled'))\n\t\t\t|| $forceping) {\n\t\t\t\t// No ping done if we are into an alpha version\n\t\t\t\tif (strpos('alpha', DOL_VERSION) > 0 && !$forceping) {\n\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. It is an alpha version -->\\n\";\n\t\t\t\t} elseif (empty($_COOKIE['DOLINSTALLNOPING_'.$hash_unique_id]) || $forceping) {\t// Cookie is set when we uncheck the checkbox in the installation wizard.\n\t\t\t\t\t// MAIN_LAST_PING_KO_DATE\n\t\t\t\t\t// Disable ping if MAIN_LAST_PING_KO_DATE is set and is recent (this month)\n\t\t\t\t\tif (!empty($conf->global->MAIN_LAST_PING_KO_DATE) && substr($conf->global->MAIN_LAST_PING_KO_DATE, 0, 6) == dol_print_date(dol_now(), '%Y%m') && !$forceping) {\n\t\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. An error already occured this month, we will try later. -->\\n\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\n\n\t\t\t\t\t\tprint \"\\n\".'<!-- Includes JS for Ping of Dolibarr forceping='.$forceping.' MAIN_FIRST_PING_OK_DATE='.getDolGlobalString(\"MAIN_FIRST_PING_OK_DATE\").' MAIN_FIRST_PING_OK_ID='.getDolGlobalString(\"MAIN_FIRST_PING_OK_ID\").' MAIN_LAST_PING_KO_DATE='.getDolGlobalString(\"MAIN_LAST_PING_KO_DATE\").' -->'.\"\\n\";\n\t\t\t\t\t\tprint \"\\n<!-- JS CODE TO ENABLE the anonymous Ping -->\\n\";\n\t\t\t\t\t\t$url_for_ping = (empty($conf->global->MAIN_URL_FOR_PING) ? \"https://ping.dolibarr.org/\" : $conf->global->MAIN_URL_FOR_PING);\n\t\t\t\t\t\t// Try to guess the distrib used\n\t\t\t\t\t\t$distrib = 'standard';\n\t\t\t\t\t\tif ($_SERVER[\"SERVER_ADMIN\"] == 'doliwamp@localhost') {\n\t\t\t\t\t\t\t$distrib = 'doliwamp';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($dolibarr_distrib)) {\n\t\t\t\t\t\t\t$distrib = $dolibarr_distrib;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<script>\n\t\t\t\t\t\t\tjQuery(document).ready(function (tmp) {\n\t\t\t\t\t\t\t\tconsole.log(\"Try Ping with hash_unique_id is md5('dolibarr'+instance_unique_id)\");\n\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t  method: \"POST\",\n\t\t\t\t\t\t\t\t\t  url: \"<?php echo $url_for_ping ?>\",\n\t\t\t\t\t\t\t\t\t  timeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t  cache: false,\n\t\t\t\t\t\t\t\t\t  data: {\n\t\t\t\t\t\t\t\t\t\t  hash_algo: 'md5',\n\t\t\t\t\t\t\t\t\t\t  hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>',\n\t\t\t\t\t\t\t\t\t\t  action: 'dolibarrping',\n\t\t\t\t\t\t\t\t\t\t  version: '<?php echo (float) DOL_VERSION; ?>',\n\t\t\t\t\t\t\t\t\t\t  entity: '<?php echo (int) $conf->entity; ?>',\n\t\t\t\t\t\t\t\t\t\t  dbtype: '<?php echo dol_escape_js($db->type); ?>',\n\t\t\t\t\t\t\t\t\t\t  country_code: '<?php echo $mysoc->country_code ? dol_escape_js($mysoc->country_code) : 'unknown'; ?>',\n\t\t\t\t\t\t\t\t\t\t  php_version: '<?php echo dol_escape_js(phpversion()); ?>',\n\t\t\t\t\t\t\t\t\t\t  os_version: '<?php echo dol_escape_js(version_os('smr')); ?>',\n\t\t\t\t\t\t\t\t\t\t  distrib: '<?php echo $distrib ? dol_escape_js($distrib) : 'unknown'; ?>',\n\t\t\t\t\t\t\t\t\t\t  token: 'notrequired'\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t  success: function (data, status, xhr) {   // success callback function (data contains body of response)\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Ping ok\");\n\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\t\t\t\t\t\t\t\turl: '<?php echo DOL_URL_ROOT.'/core/ajax/pingresult.php'; ?>',\n\t\t\t\t\t\t\t\t\t\t\t\ttimeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t\t\t\tcache: false,\n\t\t\t\t\t\t\t\t\t\t\t\tdata: { hash_algo: 'md5', hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>', action: 'firstpingok', token: '<?php echo currentToken(); ?>' },\t// for update\n\t\t\t\t\t\t\t\t\t\t\t  });\n\t\t\t\t\t\t\t\t\t  },\n\t\t\t\t\t\t\t\t\t  error: function (data,status,xhr) {   // error callback function\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"Ping ko: \" + data);\n\t\t\t\t\t\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\t\t\t\t\t\t  method: 'GET',\n\t\t\t\t\t\t\t\t\t\t\t\t  url: '<?php echo DOL_URL_ROOT.'/core/ajax/pingresult.php'; ?>',\n\t\t\t\t\t\t\t\t\t\t\t\t  timeout: 500,     // timeout milliseconds\n\t\t\t\t\t\t\t\t\t\t\t\t  cache: false,\n\t\t\t\t\t\t\t\t\t\t\t\t  data: { hash_algo: 'md5', hash_unique_id: '<?php echo dol_escape_js($hash_unique_id); ?>', action: 'firstpingko', token: '<?php echo currentToken(); ?>' },\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t</script>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$now = dol_now();\n\t\t\t\t\tprint \"\\n<!-- NO JS CODE TO ENABLE the anonymous Ping. It was disabled -->\\n\";\n\t\t\t\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/admin.lib.php';\n\t\t\t\t\tdolibarr_set_const($db, 'MAIN_FIRST_PING_OK_DATE', dol_print_date($now, 'dayhourlog', 'gmt'), 'chaine', 0, '', $conf->entity);\n\t\t\t\t\tdolibarr_set_const($db, 'MAIN_FIRST_PING_OK_ID', 'disabled', 'chaine', 0, '', $conf->entity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$reshook = $hookmanager->executeHooks('beforeBodyClose'); // Note that $action and $object may have been modified by some hooks\n\t\tif ($reshook > 0) {\n\t\t\tprint $hookmanager->resPrint;\n\t\t}\n\n\t\tprint \"</body>\\n\";\n\t\tprint \"</html>\\n\";\n\t}\n}\n"], "filenames": ["htdocs/main.inc.php"], "buggy_code_start_loc": [175], "buggy_code_end_loc": [185], "fixing_code_start_loc": [176], "fixing_code_end_loc": [190], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository dolibarr/dolibarr prior to 18.0.", "other": {"cve": {"id": "CVE-2023-5323", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-01T01:15:24.997", "lastModified": "2023-10-02T20:26:24.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository dolibarr/dolibarr prior to 18.0."}, {"lang": "es", "value": "Cross-Site Scripting (XSS) Gen\u00e9rico en el repositorio de GitHub dolibarr/dolibarr anterior a la versi\u00f3n 18.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:*:*:*:*:*:*:*", "versionEndExcluding": "18.0", "matchCriteriaId": "F0F079BB-D942-40AA-B9BF-9EFCB58933E3"}]}]}], "references": [{"url": "https://github.com/dolibarr/dolibarr/commit/695ca086847b3b6a185afa93e897972c93c43d15", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/7a048bb7-bfdd-4299-931e-9bc283e92bc8", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/dolibarr/dolibarr/commit/695ca086847b3b6a185afa93e897972c93c43d15"}}