{"buggy_code": ["<?php\n    if (!empty($me)) {\n        // New approach how to define menu requirements. It takes ACLs from ACLComponent.\n        // TODO: Use for every menu item\n        $canAccess = function ($controller, $action) use ($me, $aclComponent) {\n            return $aclComponent->canUserAccess($me, $controller, $action);\n        };\n\n        $menu = array(\n            array(\n                'type' => 'root',\n                'url' => empty($homepage['path']) ? $baseurl .'/' : $baseurl . h($homepage['path']),\n                'html' => Configure::read('MISP.home_logo') ? '<img src=\"' . $baseurl . '/img/custom/' . Configure::read('MISP.home_logo') . '\" style=\"height:24px;\" alt=\"' . __('Home') . '\">' : __('Home'),\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Event Actions'),\n                'children' => array(\n                    array(\n                        'text' => __('List Events'),\n                        'url' => $baseurl . '/events/index'\n                    ),\n                    array(\n                        'text' => __('Add Event'),\n                        'url' => $baseurl . '/events/add',\n                        'requirement' => $isAclAdd\n                    ),\n                    array(\n                        'text' => __('List Attributes'),\n                        'url' => $baseurl . '/attributes/index'\n                    ),\n                    array(\n                        'text' => __('Search Attributes'),\n                        'url' => $baseurl . '/attributes/search'\n                    ),\n                    array(\n                        'text' => __('REST client'),\n                        'url' => $baseurl . '/servers/rest',\n                        'requirement' => $canAccess('servers', 'rest'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('View Proposals'),\n                        'url' => $baseurl . '/shadow_attributes/index/all:0'\n                    ),\n                    array(\n                        'text' => __('Events with proposals'),\n                        'url' => $baseurl . '/events/proposalEventIndex'\n                    ),\n                    array(\n                        'url' => $baseurl . '/event_delegations/index/context:pending',\n                        'text' => __('View delegation requests'),\n                        'requirement' => $canAccess('event_delegations', 'index'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Tags'),\n                        'url' => $baseurl . '/tags/index'\n                    ),\n                    array(\n                        'text' => __('List Tag Collections'),\n                        'url' => $baseurl . '/tag_collections/index'\n                    ),\n                    array(\n                        'text' => __('Add Tag'),\n                        'url' => $baseurl . '/tags/add',\n                        'requirement' => $isAclTagEditor\n                    ),\n                    array(\n                        'text' => __('List Taxonomies'),\n                        'url' => $baseurl . '/taxonomies/index'\n                    ),\n                    array(\n                        'text' => __('List Templates'),\n                        'url' => $baseurl . '/templates/index'\n                    ),\n                    array(\n                        'text' => __('Add Template'),\n                        'url' => $baseurl . '/templates/add',\n                        'requirement' => $isAclTemplate\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Export'),\n                        'url' => $baseurl . '/events/export'\n                    ),\n                    array(\n                        'text' => __('Automation'),\n                        'url' => $baseurl . '/events/automation',\n                        'requirement' => $isAclAuth\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin &&\n                            $hostOrgUser\n                    ),\n                    array(\n                        'text' => __('Blocklist Event'),\n                        'url' => $baseurl . '/eventBlocklists/add',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin && $hostOrgUser\n                    ),\n                    array(\n                        'text' => __('Manage Event Blocklists'),\n                        'url' => $baseurl . '/eventBlocklists',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin && $hostOrgUser\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Galaxies'),\n                'url' => $baseurl . '/galaxies/index',\n                'children' => array(\n                    array(\n                        'text' => __('List Galaxies'),\n                        'url' => $baseurl . '/galaxies/index'\n                    ),\n                    array(\n                        'text' => __('List Relationships'),\n                        'url' => $baseurl . '/galaxy_cluster_relations/index'\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Input Filters'),\n                'children' => array(\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => $baseurl . '/admin/regexp/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => $baseurl . '/regexp/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Allowedlist'),\n                        'url' => $baseurl . '/admin/allowedlists/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Allowedlist'),\n                        'url' => $baseurl . '/allowedlists/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('List Warninglists'),\n                        'url' => $baseurl . '/warninglists/index'\n                    ),\n                    array(\n                        'text' => __('List Noticelists'),\n                        'url' => $baseurl . '/noticelists/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Global Actions'),\n                'url' => $baseurl . '/dashboards',\n                'children' => array(\n                    array(\n                        'text' => __('News'),\n                        'url' => $baseurl . '/news'\n                    ),\n                    array(\n                        'text' => __('My Profile'),\n                        'url' => $baseurl . '/users/view/me'\n                    ),\n                    array(\n                        'text' => __('My Settings'),\n                        'url' => $baseurl . '/user_settings/index/user_id:me'\n                    ),\n                    array(\n                        'text' => __('Set Setting'),\n                        'url' => $baseurl . '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Dashboard'),\n                        'url' => $baseurl . '/dashboards'\n                    ),\n                    array(\n                        'text' => __('Organisations'),\n                        'url' => $baseurl . '/organisations/index',\n                        'requirement' => $isAclSharingGroup || empty(Configure::read('Security.hide_organisation_index_from_users'))\n                    ),\n                    array(\n                        'text' => __('Role Permissions'),\n                        'url' => $baseurl . '/roles/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Object Templates'),\n                        'url' => $baseurl . '/objectTemplates/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Sharing Groups'),\n                        'url' => $baseurl . '/sharing_groups/index'\n                    ),\n                    array(\n                        'text' => __('Add Sharing Group'),\n                        'url' => $baseurl . '/sharing_groups/add',\n                        'requirement' => $isAclSharingGroup\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Decaying Models Tool'),\n                        'url' => $baseurl . '/decayingModel/decayingTool',\n                        'requirement' => $isAdmin\n                    ),\n                    array(\n                        'text' => __('List Decaying Models'),\n                        'url' => $baseurl . '/decayingModel/index',\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('User Guide'),\n                        'url' => 'https://www.circl.lu/doc/misp/'\n                    ),\n                    array(\n                        'text' => __('Categories & Types'),\n                        'url' => $baseurl . '/pages/display/doc/categories_and_types'\n                    ),\n                    array(\n                        'text' => __('Terms & Conditions'),\n                        'url' => $baseurl . '/users/terms'\n                    ),\n                    array(\n                        'text' => __('Statistics'),\n                        'url' => $baseurl . '/users/statistics'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Discussions'),\n                        'url' => $baseurl . '/threads/index'\n                    ),\n                    array(\n                        'text' => __('Start Discussion'),\n                        'url' => $baseurl . '/posts/add'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Sync Actions'),\n                'requirement' =>  $isAclSync || $isAdmin || $hostOrgUser,\n                'children' => array(\n                    array(\n                        'text' => __('Create Sync Config'),\n                        'url' => $baseurl . '/servers/createSync',\n                        'requirement' => $isAclSync && !$isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Import Server Settings'),\n                        'url' => $baseurl . '/servers/import',\n                        'requirement' => $canAccess('servers', 'import'),\n                    ),\n                    array(\n                        'text' => __('List Servers'),\n                        'url' => $baseurl . '/servers/index',\n                        'requirement' => $canAccess('servers', 'index'),\n                    ),\n                    array(\n                        'text' => __('List Feeds'),\n                        'url' => $baseurl . '/feeds/index',\n                        'requirement' => $canAccess('feeds', 'index'),\n                    ),\n                    array(\n                        'text' => __('Search Feed Caches'),\n                        'url' => $baseurl . '/feeds/searchCaches',\n                        'requirement' => $canAccess('feeds', 'searchCaches'),\n                    ),\n                    array(\n                        'text' => __('List SightingDB Connections'),\n                        'url' => $baseurl . '/sightingdb/index',\n                        'requirement' => $canAccess('sightingdb', 'index'),\n                    ),\n                    array(\n                        'text' => __('Add SightingDB Connection'),\n                        'url' => $baseurl . '/sightingdb/add',\n                        'requirement' => $canAccess('sightingdb', 'add'),\n                    ),\n                    array(\n                        'text' => __('List Communities'),\n                        'url' => $baseurl . '/communities/index',\n                        'requirement' => $canAccess('communities', 'index'),\n                    ),\n                    array(\n                        'text' => __('Cerebrates'),\n                        'url' => $baseurl . '/cerebrates/index',\n                        'requirement' => $canAccess('cerebrates', 'index'),\n                    ),\n                    array(\n                        'text' => __('Event ID translator'),\n                        'url' => '/servers/idTranslator',\n                        'requirement' => $canAccess('servers', 'idTranslator')\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Administration'),\n                'url' => $baseurl . '/servers/serverSettings',\n                'requirement' => $isAdmin,\n                'children' => array(\n                    array(\n                        'text' => __('List Users'),\n                        'url' => $baseurl . '/admin/users/index'\n                    ),\n                    array(\n                        'text' => __('List User Settings'),\n                        'url' => $baseurl . '/user_settings/index/user_id:all'\n                    ),\n                    array(\n                        'text' => __('Set User Setting'),\n                        'url' => $baseurl . '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Add User'),\n                        'url' => $baseurl . '/admin/users/add',\n                        'requirement' => $canAccess('users', 'admin_add'),\n                    ),\n                    array(\n                        'text' => __('Contact Users'),\n                        'url' => $baseurl . '/admin/users/email'\n                    ),\n                    array(\n                        'text' => __('User Registrations'),\n                        'url' => $baseurl . '/users/registrations',\n                        'requirement' => $canAccess('users', 'registrations'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Organisations'),\n                        'url' => $baseurl . '/organisations/index'\n                    ),\n                    array(\n                        'text' => __('Add Organisations'),\n                        'url' => $baseurl . '/admin/organisations/add',\n                        'requirement' => $canAccess('organisations', 'admin_add'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Roles'),\n                        'url' => $baseurl . '/admin/roles/index'\n                    ),\n                    array(\n                        'text' => __('Add Roles'),\n                        'url' => $baseurl . '/admin/roles/add',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => $isSiteAdmin,\n                    ),\n                    array(\n                        'text' => __('Server Settings & Maintenance'),\n                        'url' => $baseurl . '/servers/serverSettings',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Jobs'),\n                        'url' => $baseurl . '/jobs/index',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Scheduled Tasks'),\n                        'url' => $baseurl . '/tasks',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Event Block Rules'),\n                        'url' => $baseurl . '/servers/eventBlockRule',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blocklist Event'),\n                        'url' => $baseurl . '/eventBlocklists/add',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Event Blocklists'),\n                        'url' => $baseurl . '/eventBlocklists',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blocklist Organisation'),\n                        'url' => $baseurl . '/orgBlocklists/add',\n                        'requirement' => Configure::read('MISP.enableOrgBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Org Blocklists'),\n                        'url' => $baseurl . '/orgBlocklists',\n                        'requirement' => Configure::read('MISP.enableOrgBlocklisting') !== false && $isSiteAdmin\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Audit'),\n                'requirement' => $isAclAudit,\n                'children' => array(\n                    array(\n                        'text' => __('List Logs'),\n                        'url' => $baseurl . '/admin/logs/index'\n                    ),\n                    array(\n                        'text' => __('Search Logs'),\n                        'url' => $baseurl . '/admin/logs/search'\n                    )\n                )\n            )\n        );\n        $menu_right = array(\n            array(\n                'type' => 'root',\n                'url' => '#',\n                'html' => sprintf(\n                    '<span class=\"fas fa-star %s\" id=\"setHomePage\" title=\"%s\" role=\"img\" aria-label=\"%s\" data-current-page=\"%s\"></span>',\n                    (!empty($homepage['path']) && $homepage['path'] === $this->here) ? 'orange' : '',\n\t\t    __('Set the current page as your home page in MISP'),\n\t\t    __('Set the current page as your home page in MISP'),\n                    $this->here\n                )\n            ),\n            array(\n                'type' => 'root',\n                'url' => empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => '<span class=\"logoBlueStatic bold\" id=\"smallLogo\">MISP</span>'\n            ),\n            array(\n                'type' => 'root',\n                'url' => $baseurl . '/dashboards',\n                'html' => sprintf(\n                    '<span class=\"white\" title=\"%s\">%s%s&nbsp;&nbsp;&nbsp;%s</span>',\n                    h($me['email']),\n                    $this->UserName->prepend($me['email']),\n                    h($loggedInUserName),\n                    isset($notifications) ? sprintf(\n                        '<i class=\"fa fa-envelope %s\" role=\"img\" aria-label=\"%s\"></i>',\n                        (($notifications['total'] == 0) ? 'white' : 'red'),\n                        __('Notifications') . ': ' . $notifications['total']\n                    ) : ''\n                )\n            ),\n            array(\n                'url' => $baseurl . '/users/logout',\n                'text' => __('Log out'),\n                'requirement' => empty(Configure::read('Plugin.CustomAuth_disable_logout'))\n            )\n        );\n    }\n?>\n<div id=\"topBar\" class=\"navbar navbar-inverse <?php echo $debugMode;?>\">\n  <div class=\"navbar-inner\">\n    <ul class=\"nav\">\n        <?php\n        if (isset($menu)) {\n            foreach ($menu as $root_element) {\n                echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n            }\n        }\n        ?>\n    </ul>\n    <ul class=\"nav pull-right\">\n        <?php\n            if (isset($menu_right)) {\n                foreach ($menu_right as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n  </div>\n</div>\n<input type=\"hidden\" class=\"keyboardShortcutsConfig\" value=\"/shortcuts/global_menu.json\" />\n"], "fixing_code": ["<?php\n    if (!empty($me)) {\n        // New approach how to define menu requirements. It takes ACLs from ACLComponent.\n        // TODO: Use for every menu item\n        $canAccess = function ($controller, $action) use ($me, $aclComponent) {\n            return $aclComponent->canUserAccess($me, $controller, $action);\n        };\n\n        $menu = array(\n            array(\n                'type' => 'root',\n                'url' => empty($homepage['path']) ? $baseurl .'/' : $baseurl . h($homepage['path']),\n                'html' => Configure::read('MISP.home_logo') ? '<img src=\"' . $baseurl . '/img/custom/' . Configure::read('MISP.home_logo') . '\" style=\"height:24px;\" alt=\"' . __('Home') . '\">' : __('Home'),\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Event Actions'),\n                'children' => array(\n                    array(\n                        'text' => __('List Events'),\n                        'url' => $baseurl . '/events/index'\n                    ),\n                    array(\n                        'text' => __('Add Event'),\n                        'url' => $baseurl . '/events/add',\n                        'requirement' => $isAclAdd\n                    ),\n                    array(\n                        'text' => __('List Attributes'),\n                        'url' => $baseurl . '/attributes/index'\n                    ),\n                    array(\n                        'text' => __('Search Attributes'),\n                        'url' => $baseurl . '/attributes/search'\n                    ),\n                    array(\n                        'text' => __('REST client'),\n                        'url' => $baseurl . '/servers/rest',\n                        'requirement' => $canAccess('servers', 'rest'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('View Proposals'),\n                        'url' => $baseurl . '/shadow_attributes/index/all:0'\n                    ),\n                    array(\n                        'text' => __('Events with proposals'),\n                        'url' => $baseurl . '/events/proposalEventIndex'\n                    ),\n                    array(\n                        'url' => $baseurl . '/event_delegations/index/context:pending',\n                        'text' => __('View delegation requests'),\n                        'requirement' => $canAccess('event_delegations', 'index'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Tags'),\n                        'url' => $baseurl . '/tags/index'\n                    ),\n                    array(\n                        'text' => __('List Tag Collections'),\n                        'url' => $baseurl . '/tag_collections/index'\n                    ),\n                    array(\n                        'text' => __('Add Tag'),\n                        'url' => $baseurl . '/tags/add',\n                        'requirement' => $isAclTagEditor\n                    ),\n                    array(\n                        'text' => __('List Taxonomies'),\n                        'url' => $baseurl . '/taxonomies/index'\n                    ),\n                    array(\n                        'text' => __('List Templates'),\n                        'url' => $baseurl . '/templates/index'\n                    ),\n                    array(\n                        'text' => __('Add Template'),\n                        'url' => $baseurl . '/templates/add',\n                        'requirement' => $isAclTemplate\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Export'),\n                        'url' => $baseurl . '/events/export'\n                    ),\n                    array(\n                        'text' => __('Automation'),\n                        'url' => $baseurl . '/events/automation',\n                        'requirement' => $isAclAuth\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin &&\n                            $hostOrgUser\n                    ),\n                    array(\n                        'text' => __('Blocklist Event'),\n                        'url' => $baseurl . '/eventBlocklists/add',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin && $hostOrgUser\n                    ),\n                    array(\n                        'text' => __('Manage Event Blocklists'),\n                        'url' => $baseurl . '/eventBlocklists',\n                        'requirement' =>\n                            Configure::read('MISP.enableEventBlocklisting') !== false &&\n                            !$isSiteAdmin && $hostOrgUser\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Galaxies'),\n                'url' => $baseurl . '/galaxies/index',\n                'children' => array(\n                    array(\n                        'text' => __('List Galaxies'),\n                        'url' => $baseurl . '/galaxies/index'\n                    ),\n                    array(\n                        'text' => __('List Relationships'),\n                        'url' => $baseurl . '/galaxy_cluster_relations/index'\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Input Filters'),\n                'children' => array(\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => $baseurl . '/admin/regexp/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Import Regexp'),\n                        'url' => $baseurl . '/regexp/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Allowedlist'),\n                        'url' => $baseurl . '/admin/allowedlists/index',\n                        'requirement' => $isAclRegexp\n                    ),\n                    array(\n                        'text' => __('Signature Allowedlist'),\n                        'url' => $baseurl . '/allowedlists/index',\n                        'requirement' => !$isAclRegexp\n                    ),\n                    array(\n                        'text' => __('List Warninglists'),\n                        'url' => $baseurl . '/warninglists/index'\n                    ),\n                    array(\n                        'text' => __('List Noticelists'),\n                        'url' => $baseurl . '/noticelists/index'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Global Actions'),\n                'url' => $baseurl . '/dashboards',\n                'children' => array(\n                    array(\n                        'text' => __('News'),\n                        'url' => $baseurl . '/news'\n                    ),\n                    array(\n                        'text' => __('My Profile'),\n                        'url' => $baseurl . '/users/view/me'\n                    ),\n                    array(\n                        'text' => __('My Settings'),\n                        'url' => $baseurl . '/user_settings/index/user_id:me'\n                    ),\n                    array(\n                        'text' => __('Set Setting'),\n                        'url' => $baseurl . '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Dashboard'),\n                        'url' => $baseurl . '/dashboards'\n                    ),\n                    array(\n                        'text' => __('Organisations'),\n                        'url' => $baseurl . '/organisations/index',\n                        'requirement' => $isAclSharingGroup || empty(Configure::read('Security.hide_organisation_index_from_users'))\n                    ),\n                    array(\n                        'text' => __('Role Permissions'),\n                        'url' => $baseurl . '/roles/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Object Templates'),\n                        'url' => $baseurl . '/objectTemplates/index'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Sharing Groups'),\n                        'url' => $baseurl . '/sharing_groups/index'\n                    ),\n                    array(\n                        'text' => __('Add Sharing Group'),\n                        'url' => $baseurl . '/sharing_groups/add',\n                        'requirement' => $isAclSharingGroup\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('Decaying Models Tool'),\n                        'url' => $baseurl . '/decayingModel/decayingTool',\n                        'requirement' => $isAdmin\n                    ),\n                    array(\n                        'text' => __('List Decaying Models'),\n                        'url' => $baseurl . '/decayingModel/index',\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('User Guide'),\n                        'url' => 'https://www.circl.lu/doc/misp/'\n                    ),\n                    array(\n                        'text' => __('Categories & Types'),\n                        'url' => $baseurl . '/pages/display/doc/categories_and_types'\n                    ),\n                    array(\n                        'text' => __('Terms & Conditions'),\n                        'url' => $baseurl . '/users/terms'\n                    ),\n                    array(\n                        'text' => __('Statistics'),\n                        'url' => $baseurl . '/users/statistics'\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Discussions'),\n                        'url' => $baseurl . '/threads/index'\n                    ),\n                    array(\n                        'text' => __('Start Discussion'),\n                        'url' => $baseurl . '/posts/add'\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Sync Actions'),\n                'requirement' =>  $isAclSync || $isAdmin || $hostOrgUser,\n                'children' => array(\n                    array(\n                        'text' => __('Create Sync Config'),\n                        'url' => $baseurl . '/servers/createSync',\n                        'requirement' => $isAclSync && !$isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Import Server Settings'),\n                        'url' => $baseurl . '/servers/import',\n                        'requirement' => $canAccess('servers', 'import'),\n                    ),\n                    array(\n                        'text' => __('List Servers'),\n                        'url' => $baseurl . '/servers/index',\n                        'requirement' => $canAccess('servers', 'index'),\n                    ),\n                    array(\n                        'text' => __('List Feeds'),\n                        'url' => $baseurl . '/feeds/index',\n                        'requirement' => $canAccess('feeds', 'index'),\n                    ),\n                    array(\n                        'text' => __('Search Feed Caches'),\n                        'url' => $baseurl . '/feeds/searchCaches',\n                        'requirement' => $canAccess('feeds', 'searchCaches'),\n                    ),\n                    array(\n                        'text' => __('List SightingDB Connections'),\n                        'url' => $baseurl . '/sightingdb/index',\n                        'requirement' => $canAccess('sightingdb', 'index'),\n                    ),\n                    array(\n                        'text' => __('Add SightingDB Connection'),\n                        'url' => $baseurl . '/sightingdb/add',\n                        'requirement' => $canAccess('sightingdb', 'add'),\n                    ),\n                    array(\n                        'text' => __('List Communities'),\n                        'url' => $baseurl . '/communities/index',\n                        'requirement' => $canAccess('communities', 'index'),\n                    ),\n                    array(\n                        'text' => __('Cerebrates'),\n                        'url' => $baseurl . '/cerebrates/index',\n                        'requirement' => $canAccess('cerebrates', 'index'),\n                    ),\n                    array(\n                        'text' => __('Event ID translator'),\n                        'url' => '/servers/idTranslator',\n                        'requirement' => $canAccess('servers', 'idTranslator')\n                    )\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Administration'),\n                'url' => $baseurl . '/servers/serverSettings',\n                'requirement' => $isAdmin,\n                'children' => array(\n                    array(\n                        'text' => __('List Users'),\n                        'url' => $baseurl . '/admin/users/index'\n                    ),\n                    array(\n                        'text' => __('List User Settings'),\n                        'url' => $baseurl . '/user_settings/index/user_id:all'\n                    ),\n                    array(\n                        'text' => __('Set User Setting'),\n                        'url' => $baseurl . '/user_settings/setSetting'\n                    ),\n                    array(\n                        'text' => __('Add User'),\n                        'url' => $baseurl . '/admin/users/add',\n                        'requirement' => $canAccess('users', 'admin_add'),\n                    ),\n                    array(\n                        'text' => __('Contact Users'),\n                        'url' => $baseurl . '/admin/users/email'\n                    ),\n                    array(\n                        'text' => __('User Registrations'),\n                        'url' => $baseurl . '/users/registrations',\n                        'requirement' => $canAccess('users', 'registrations'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Organisations'),\n                        'url' => $baseurl . '/organisations/index'\n                    ),\n                    array(\n                        'text' => __('Add Organisations'),\n                        'url' => $baseurl . '/admin/organisations/add',\n                        'requirement' => $canAccess('organisations', 'admin_add'),\n                    ),\n                    array(\n                        'type' => 'separator'\n                    ),\n                    array(\n                        'text' => __('List Roles'),\n                        'url' => $baseurl . '/admin/roles/index'\n                    ),\n                    array(\n                        'text' => __('Add Roles'),\n                        'url' => $baseurl . '/admin/roles/add',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => $isSiteAdmin,\n                    ),\n                    array(\n                        'text' => __('Server Settings & Maintenance'),\n                        'url' => $baseurl . '/servers/serverSettings',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Jobs'),\n                        'url' => $baseurl . '/jobs/index',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Scheduled Tasks'),\n                        'url' => $baseurl . '/tasks',\n                        'requirement' => Configure::read('MISP.background_jobs') && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Event Block Rules'),\n                        'url' => $baseurl . '/servers/eventBlockRule',\n                        'requirement' => $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blocklist Event'),\n                        'url' => $baseurl . '/eventBlocklists/add',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Event Blocklists'),\n                        'url' => $baseurl . '/eventBlocklists',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'type' => 'separator',\n                        'requirement' => Configure::read('MISP.enableEventBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Blocklist Organisation'),\n                        'url' => $baseurl . '/orgBlocklists/add',\n                        'requirement' => Configure::read('MISP.enableOrgBlocklisting') !== false && $isSiteAdmin\n                    ),\n                    array(\n                        'text' => __('Manage Org Blocklists'),\n                        'url' => $baseurl . '/orgBlocklists',\n                        'requirement' => Configure::read('MISP.enableOrgBlocklisting') !== false && $isSiteAdmin\n                    ),\n                )\n            ),\n            array(\n                'type' => 'root',\n                'text' => __('Audit'),\n                'requirement' => $isAclAudit,\n                'children' => array(\n                    array(\n                        'text' => __('List Logs'),\n                        'url' => $baseurl . '/admin/logs/index'\n                    ),\n                    array(\n                        'text' => __('Search Logs'),\n                        'url' => $baseurl . '/admin/logs/search'\n                    )\n                )\n            )\n        );\n        $menu_right = array(\n            array(\n                'type' => 'root',\n                'url' => '#',\n                'html' => sprintf(\n                    '<span class=\"fas fa-star %s\" id=\"setHomePage\" title=\"%s\" role=\"img\" aria-label=\"%s\" data-current-page=\"%s\"></span>',\n                    (!empty($homepage['path']) && $homepage['path'] === $this->here) ? 'orange' : '',\n\t\t    __('Set the current page as your home page in MISP'),\n\t\t    __('Set the current page as your home page in MISP'),\n                    h($this->here)\n                )\n            ),\n            array(\n                'type' => 'root',\n                'url' => empty($homepage['path']) ? $baseurl : $baseurl . h($homepage['path']),\n                'html' => '<span class=\"logoBlueStatic bold\" id=\"smallLogo\">MISP</span>'\n            ),\n            array(\n                'type' => 'root',\n                'url' => $baseurl . '/dashboards',\n                'html' => sprintf(\n                    '<span class=\"white\" title=\"%s\">%s%s&nbsp;&nbsp;&nbsp;%s</span>',\n                    h($me['email']),\n                    $this->UserName->prepend($me['email']),\n                    h($loggedInUserName),\n                    isset($notifications) ? sprintf(\n                        '<i class=\"fa fa-envelope %s\" role=\"img\" aria-label=\"%s\"></i>',\n                        (($notifications['total'] == 0) ? 'white' : 'red'),\n                        __('Notifications') . ': ' . $notifications['total']\n                    ) : ''\n                )\n            ),\n            array(\n                'url' => $baseurl . '/users/logout',\n                'text' => __('Log out'),\n                'requirement' => empty(Configure::read('Plugin.CustomAuth_disable_logout'))\n            )\n        );\n    }\n?>\n<div id=\"topBar\" class=\"navbar navbar-inverse <?php echo $debugMode;?>\">\n  <div class=\"navbar-inner\">\n    <ul class=\"nav\">\n        <?php\n        if (isset($menu)) {\n            foreach ($menu as $root_element) {\n                echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n            }\n        }\n        ?>\n    </ul>\n    <ul class=\"nav pull-right\">\n        <?php\n            if (isset($menu_right)) {\n                foreach ($menu_right as $root_element) {\n                    echo $this->element('/genericElements/GlobalMenu/global_menu_root', array('data' => $root_element));\n                }\n            }\n        ?>\n    </ul>\n  </div>\n</div>\n<input type=\"hidden\" class=\"keyboardShortcutsConfig\" value=\"/shortcuts/global_menu.json\" />\n"], "filenames": ["app/View/Elements/global_menu.ctp"], "buggy_code_start_loc": [467], "buggy_code_end_loc": [468], "fixing_code_start_loc": [467], "fixing_code_end_loc": [468], "type": "CWE-79", "message": "MISP 2.4.136 has XSS via a crafted URL to the app/View/Elements/global_menu.ctp user homepage favourite button.", "other": {"cve": {"id": "CVE-2021-3184", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-19T16:15:13.560", "lastModified": "2021-01-21T21:32:08.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MISP 2.4.136 has XSS via a crafted URL to the app/View/Elements/global_menu.ctp user homepage favourite button."}, {"lang": "es", "value": "MISP versi\u00f3n 2.4.136, presenta un XSS por medio de una URL dise\u00f1ada para el bot\u00f3n favorito de la p\u00e1gina de inicio del usuario app/View/Elements/global_menu.ctp"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.136:*:*:*:*:*:*:*", "matchCriteriaId": "847602BA-85D7-432D-917D-76D14E6D2769"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/8283e0fbec551f45f3f181cdb2cf29cddc23df66", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/8283e0fbec551f45f3f181cdb2cf29cddc23df66"}}