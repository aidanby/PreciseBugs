{"buggy_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Customer\\CustomerStatisticService;\nuse App\\Entity\\Customer;\nuse App\\Entity\\CustomerComment;\nuse App\\Entity\\CustomerRate;\nuse App\\Entity\\MetaTableTypeInterface;\nuse App\\Entity\\Team;\nuse App\\Event\\CustomerMetaDefinitionEvent;\nuse App\\Event\\CustomerMetaDisplayEvent;\nuse App\\Export\\Spreadsheet\\EntityWithMetaFieldsExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\CustomerCommentForm;\nuse App\\Form\\CustomerEditForm;\nuse App\\Form\\CustomerRateForm;\nuse App\\Form\\CustomerTeamPermissionForm;\nuse App\\Form\\Toolbar\\CustomerToolbarForm;\nuse App\\Form\\Type\\CustomerType;\nuse App\\Repository\\CustomerRateRepository;\nuse App\\Repository\\CustomerRepository;\nuse App\\Repository\\ProjectRepository;\nuse App\\Repository\\Query\\CustomerQuery;\nuse App\\Repository\\Query\\ProjectQuery;\nuse App\\Repository\\TeamRepository;\nuse Pagerfanta\\Pagerfanta;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Controller used to manage customer in the admin part of the site.\n *\n * @Route(path=\"/admin/customer\")\n * @Security(\"is_granted('view_customer') or is_granted('view_teamlead_customer') or is_granted('view_team_customer')\")\n */\nfinal class CustomerController extends AbstractController\n{\n    /**\n     * @var CustomerRepository\n     */\n    private $repository;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n\n    public function __construct(CustomerRepository $repository, EventDispatcherInterface $dispatcher)\n    {\n        $this->repository = $repository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", defaults={\"page\": 1}, name=\"admin_customer\", methods={\"GET\"})\n     * @Route(path=\"/page/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_customer_paginated\", methods={\"GET\"})\n     */\n    public function indexAction($page, Request $request)\n    {\n        $query = new CustomerQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n\n        $form = $this->getToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_customer');\n        }\n\n        $entries = $this->repository->getPagerfantaForQuery($query);\n\n        return $this->render('customer/index.html.twig', [\n            'entries' => $entries,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'metaColumns' => $this->findMetaColumns($query),\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @param CustomerQuery $query\n     * @return MetaTableTypeInterface[]\n     */\n    private function findMetaColumns(CustomerQuery $query): array\n    {\n        $event = new CustomerMetaDisplayEvent($query, CustomerMetaDisplayEvent::CUSTOMER);\n        $this->dispatcher->dispatch($event);\n\n        return $event->getFields();\n    }\n\n    /**\n     * @Route(path=\"/create\", name=\"admin_customer_create\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('create_customer')\")\n     */\n    public function createAction(Request $request, SystemConfiguration $configuration)\n    {\n        $timezone = date_default_timezone_get();\n        if (null !== $configuration->getCustomerDefaultTimezone()) {\n            $timezone = $configuration->getCustomerDefaultTimezone();\n        }\n\n        $customer = new Customer();\n        $customer->setCountry($configuration->getCustomerDefaultCountry());\n        $customer->setCurrency($configuration->getCustomerDefaultCurrency());\n        $customer->setTimezone($timezone);\n\n        return $this->renderCustomerForm($customer, $request);\n    }\n\n    /**\n     * @Route(path=\"/{id}/permissions\", name=\"admin_customer_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('permissions', customer)\")\n     */\n    public function teamPermissionsAction(Customer $customer, Request $request)\n    {\n        $form = $this->createForm(CustomerTeamPermissionForm::class, $customer, [\n            'action' => $this->generateUrl('admin_customer_permissions', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveCustomer($customer);\n                $this->flashSuccess('action.update.success');\n\n                if ($this->isGranted('view', $customer)) {\n                    return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n                }\n\n                return $this->redirectToRoute('admin_customer');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/permissions.html.twig', [\n            'customer' => $customer,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_delete\", name=\"customer_comment_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n     */\n    public function deleteCommentAction(CustomerComment $comment)\n    {\n        $customerId = $comment->getCustomer()->getId();\n\n        try {\n            $this->repository->deleteComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_add\", name=\"customer_comment_add\", methods={\"POST\"})\n     * @Security(\"is_granted('comments_create', customer)\")\n     */\n    public function addCommentAction(Customer $customer, Request $request)\n    {\n        $comment = new CustomerComment();\n        $form = $this->getCommentForm($customer, $comment);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveComment($comment);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_pin\", name=\"customer_comment_pin\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n     */\n    public function pinCommentAction(CustomerComment $comment)\n    {\n        $comment->setPinned(!$comment->isPinned());\n        try {\n            $this->repository->saveComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $comment->getCustomer()->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/create_team\", name=\"customer_team_create\", methods={\"GET\"})\n     * @Security(\"is_granted('create_team') and is_granted('permissions', customer)\")\n     */\n    public function createDefaultTeamAction(Customer $customer, TeamRepository $teamRepository)\n    {\n        $defaultTeam = $teamRepository->findOneBy(['name' => $customer->getName()]);\n        if (null !== $defaultTeam) {\n            $this->flashError('action.update.error', ['%reason%' => 'Team already existing']);\n\n            return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n        }\n\n        $defaultTeam = new Team();\n        $defaultTeam->setName($customer->getName());\n        $defaultTeam->addTeamlead($this->getUser());\n        $defaultTeam->addCustomer($customer);\n\n        try {\n            $teamRepository->saveTeam($defaultTeam);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/projects/{page}\", defaults={\"page\": 1}, name=\"customer_projects\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', customer)\")\n     */\n    public function projectsAction(Customer $customer, int $page, ProjectRepository $projectRepository)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n        $query->setPageSize(5);\n        $query->addCustomer($customer);\n        $query->setShowBoth();\n        $query->addOrderGroup('visible', ProjectQuery::ORDER_DESC);\n        $query->addOrderGroup('name', ProjectQuery::ORDER_ASC);\n\n        /* @var $entries Pagerfanta */\n        $entries = $projectRepository->getPagerfantaForQuery($query);\n\n        return $this->render('customer/embed_projects.html.twig', [\n            'customer' => $customer,\n            'projects' => $entries,\n            'page' => $page,\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/details\", name=\"customer_details\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', customer)\")\n     */\n    public function detailsAction(Customer $customer, TeamRepository $teamRepository, CustomerRateRepository $rateRepository, CustomerStatisticService $statisticService)\n    {\n        $event = new CustomerMetaDefinitionEvent($customer);\n        $this->dispatcher->dispatch($event);\n\n        $stats = null;\n        $timezone = null;\n        $defaultTeam = null;\n        $commentForm = null;\n        $attachments = [];\n        $comments = null;\n        $teams = null;\n        $projects = null;\n        $rates = [];\n        $now = $this->getDateTimeFactory()->createDateTime();\n\n        if ($this->isGranted('edit', $customer)) {\n            if ($this->isGranted('create_team')) {\n                $defaultTeam = $teamRepository->findOneBy(['name' => $customer->getName()]);\n            }\n            $rates = $rateRepository->getRatesForCustomer($customer);\n        }\n\n        if (null !== $customer->getTimezone()) {\n            $timezone = new \\DateTimeZone($customer->getTimezone());\n        }\n\n        if ($this->isGranted('budget', $customer)) {\n            $stats = $statisticService->getBudgetStatisticModel($customer, $now);\n        }\n\n        if ($this->isGranted('comments', $customer)) {\n            $comments = $this->repository->getComments($customer);\n        }\n\n        if ($this->isGranted('comments_create', $customer)) {\n            $commentForm = $this->getCommentForm($customer, new CustomerComment())->createView();\n        }\n\n        if ($this->isGranted('permissions', $customer) || $this->isGranted('details', $customer) || $this->isGranted('view_team')) {\n            $teams = $customer->getTeams();\n        }\n\n        return $this->render('customer/details.html.twig', [\n            'customer' => $customer,\n            'comments' => $comments,\n            'commentForm' => $commentForm,\n            'attachments' => $attachments,\n            'stats' => $stats,\n            'team' => $defaultTeam,\n            'teams' => $teams,\n            'customer_now' => new \\DateTime('now', $timezone),\n            'rates' => $rates,\n            'now' => $now,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/rate\", name=\"admin_customer_rate_add\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', customer)\")\n     */\n    public function addRateAction(Customer $customer, Request $request, CustomerRateRepository $repository)\n    {\n        $rate = new CustomerRate();\n        $rate->setCustomer($customer);\n\n        $form = $this->createForm(CustomerRateForm::class, $rate, [\n            'action' => $this->generateUrl('admin_customer_rate_add', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $repository->saveRate($rate);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/rates.html.twig', [\n            'customer' => $customer,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/edit\", name=\"admin_customer_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', customer)\")\n     */\n    public function editAction(Customer $customer, Request $request)\n    {\n        return $this->renderCustomerForm($customer, $request);\n    }\n\n    /**\n     * @Route(path=\"/{id}/delete\", name=\"admin_customer_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('delete', customer)\")\n     */\n    public function deleteAction(Customer $customer, Request $request, CustomerStatisticService $statisticService)\n    {\n        $stats = $statisticService->getCustomerStatistics($customer);\n\n        $deleteForm = $this->createFormBuilder(null, [\n                'attr' => [\n                    'data-form-event' => 'kimai.customerDelete',\n                    'data-msg-success' => 'action.delete.success',\n                    'data-msg-error' => 'action.delete.error',\n                ]\n            ])\n            ->add('customer', CustomerType::class, [\n                'query_builder_for_user' => true,\n                'ignore_customer' => $customer,\n                'required' => false,\n            ])\n            ->setAction($this->generateUrl('admin_customer_delete', ['id' => $customer->getId()]))\n            ->setMethod('POST')\n            ->getForm();\n\n        $deleteForm->handleRequest($request);\n\n        if ($deleteForm->isSubmitted() && $deleteForm->isValid()) {\n            try {\n                $this->repository->deleteCustomer($customer, $deleteForm->get('customer')->getData());\n                $this->flashSuccess('action.delete.success');\n            } catch (\\Exception $ex) {\n                $this->flashDeleteException($ex);\n            }\n\n            return $this->redirectToRoute('admin_customer');\n        }\n\n        return $this->render('customer/delete.html.twig', [\n            'customer' => $customer,\n            'stats' => $stats,\n            'form' => $deleteForm->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"customer_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, EntityWithMetaFieldsExporter $exporter)\n    {\n        $query = new CustomerQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        if (!$form->isValid()) {\n            $query->resetByFormError($form->getErrors());\n        }\n\n        $entries = $this->repository->getCustomersForQuery($query);\n\n        $spreadsheet = $exporter->export(\n            Customer::class,\n            $entries,\n            new CustomerMetaDisplayEvent($query, CustomerMetaDisplayEvent::EXPORT)\n        );\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-customers');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @param Customer $customer\n     * @param Request $request\n     * @return RedirectResponse|Response\n     */\n    private function renderCustomerForm(Customer $customer, Request $request)\n    {\n        $editForm = $this->createEditForm($customer);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->repository->saveCustomer($customer);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/edit.html.twig', [\n            'customer' => $customer,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(CustomerQuery $query): FormInterface\n    {\n        return $this->createForm(CustomerToolbarForm::class, $query, [\n            'action' => $this->generateUrl('admin_customer', [\n                'page' => $query->getPage(),\n            ]),\n            'method' => 'GET',\n        ]);\n    }\n\n    private function getCommentForm(Customer $customer, CustomerComment $comment): FormInterface\n    {\n        if (null === $comment->getId()) {\n            $comment->setCustomer($customer);\n            $comment->setCreatedBy($this->getUser());\n        }\n\n        return $this->createForm(CustomerCommentForm::class, $comment, [\n            'action' => $this->generateUrl('customer_comment_add', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n    }\n\n    private function createEditForm(Customer $customer): FormInterface\n    {\n        $event = new CustomerMetaDefinitionEvent($customer);\n        $this->dispatcher->dispatch($event);\n\n        if ($customer->getId() === null) {\n            $url = $this->generateUrl('admin_customer_create');\n        } else {\n            $url = $this->generateUrl('admin_customer_edit', ['id' => $customer->getId()]);\n        }\n\n        return $this->createForm(CustomerEditForm::class, $customer, [\n            'action' => $url,\n            'method' => 'POST',\n            'include_budget' => $this->isGranted('budget', $customer)\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Utils\\FileHelper;\nuse Composer\\InstalledVersions;\nuse PackageVersions\\Versions;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * @Route(path=\"/doctor\")\n * @Security(\"is_granted('system_information')\")\n */\nclass DoctorController extends AbstractController\n{\n    /**\n     * PHP extensions which Kimai needs for runtime.\n     * Some are not a hard requiremenet, but some functions might not work as expected.\n     */\n    public const REQUIRED_EXTENSIONS = [\n        'intl',\n        'json',\n        'mbstring',\n        'pdo',\n        'zip',\n        'gd',\n        'xml'\n    ];\n\n    /**\n     * Directories which need to be writable by the webserver.\n     */\n    public const DIRECTORIES_WRITABLE = [\n        'var/cache/',\n        'var/log/',\n    ];\n\n    private $projectDirectory;\n    private $environment;\n    private $fileHelper;\n\n    public function __construct(string $projectDirectory, string $kernelEnvironment, FileHelper $fileHelper)\n    {\n        $this->projectDirectory = $projectDirectory;\n        $this->environment = $kernelEnvironment;\n        $this->fileHelper = $fileHelper;\n    }\n\n    /**\n     * @Route(path=\"/flush-log/{token}\", name=\"doctor_flush_log\", methods={\"GET\"})\n     * @Security(\"is_granted('system_configuration')\")\n     */\n    public function deleteLogfileAction(string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('doctor.flush_log', $token))) {\n            $this->flashError('action.delete.error');\n\n            return $this->redirectToRoute('doctor');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        $logfile = $this->getLogFilename();\n\n        if (file_exists($logfile)) {\n            if (!is_writable($logfile)) {\n                $this->flashError('action.delete.error', ['%reason%' => 'Logfile cannot be written']);\n            } else {\n                if (false === file_put_contents($logfile, '')) {\n                    $this->flashError('action.delete.error', ['%reason%' => 'Failed writing to logfile']);\n                } else {\n                    $this->flashSuccess('action.delete.success');\n                }\n            }\n        }\n\n        return $this->redirectToRoute('doctor');\n    }\n\n    /**\n     * @Route(path=\"\", name=\"doctor\", methods={\"GET\"})\n     */\n    public function index(): Response\n    {\n        $logLines = 100;\n\n        $canDeleteLogfile = $this->isGranted('system_configuration') && is_writable($this->getLogFilename());\n\n        return $this->render('doctor/index.html.twig', array_merge(\n            [\n                'modules' => get_loaded_extensions(),\n                'environment' => $this->environment,\n                'info' => $this->getPhpInfo(),\n                'settings' => $this->getIniSettings(),\n                'extensions' => $this->getLoadedExtensions(),\n                'directories' => $this->getFilePermissions(),\n                'log_delete' => $canDeleteLogfile,\n                'logs' => $this->getLog(),\n                'logLines' => $logLines,\n                'logSize' => $this->getLogSize(),\n                'composer' => $this->getComposerPackages(),\n            ]\n        ));\n    }\n\n    private function getComposerPackages(): array\n    {\n        $versions = [];\n\n        if (class_exists(InstalledVersions::class)) {\n            $rootPackage = InstalledVersions::getRootPackage()['name'];\n            foreach (InstalledVersions::getInstalledPackages() as $package) {\n                $versions[$package] = InstalledVersions::getPrettyVersion($package);\n            }\n        } else {\n            @trigger_error('Please upgrade your Composer to 2.x', E_USER_DEPRECATED);\n\n            // @deprecated since 1.14, will be removed with 2.0\n            $rootPackage = Versions::rootPackageName();\n            foreach (Versions::VERSIONS as $name => $version) {\n                $versions[$name] = explode('@', $version)[0];\n            }\n        }\n\n        // remove kimai from the package list\n        $versions = array_filter($versions, function ($version, $name) use ($rootPackage) {\n            if ($name === $rootPackage) {\n                return false;\n            }\n\n            if ($version === null || $version === '*') {\n                return false;\n            }\n\n            return true;\n        }, ARRAY_FILTER_USE_BOTH);\n\n        ksort($versions);\n\n        return $versions;\n    }\n\n    private function getLoadedExtensions()\n    {\n        $results = [];\n\n        foreach (self::REQUIRED_EXTENSIONS as $extName) {\n            $results[$extName] = false;\n            if (\\extension_loaded($extName)) {\n                $results[$extName] = true;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getLogSize(): int\n    {\n        $logfile = $this->getLogFilename();\n\n        return file_exists($logfile) ? filesize($logfile) : 0;\n    }\n\n    private function getLogFilename(): string\n    {\n        $logfileName = 'var/log/' . $this->environment . '.log';\n\n        return $this->projectDirectory . '/' . $logfileName;\n    }\n\n    private function getLog(int $lines = 100): array\n    {\n        $logfile = $this->getLogFilename();\n\n        if (!file_exists($logfile)) {\n            return ['Missing logfile'];\n        }\n\n        if (!is_readable($logfile)) {\n            return ['ATTENTION: Cannot read log file'];\n        }\n\n        $file = new \\SplFileObject($logfile, 'r');\n\n        if ($file->getSize() === 0) {\n            return ['Empty logfile'];\n        }\n\n        $file->seek($file->getSize());\n        $last_line = $file->key();\n        while ($last_line - $lines < 0) {\n            $lines--;\n        }\n        $iterator = new \\LimitIterator($file, $last_line - $lines, $last_line);\n\n        try {\n            $result = iterator_to_array($iterator);\n        } catch (\\Exception $ex) {\n            $result = ['ATTENTION: Failed reading log file'];\n        }\n\n        if (!is_writable($logfile)) {\n            $result[] = 'ATTENTION: Logfile is not writable';\n        }\n\n        return $result;\n    }\n\n    private function getFilePermissions()\n    {\n        $testPaths = [];\n        $baseDir = $this->projectDirectory . DIRECTORY_SEPARATOR;\n\n        foreach (self::DIRECTORIES_WRITABLE as $path) {\n            $fullPath = $baseDir . $path;\n            $fullUri = realpath($fullPath);\n\n            if ($fullUri === false && !file_exists($fullPath)) {\n                @mkdir($fullPath);\n                clearstatcache(true);\n                $fullUri = realpath($fullPath);\n            }\n\n            $testPaths[] = $fullUri;\n        }\n\n        $results = [];\n        $testPaths[] = $this->fileHelper->getDataDirectory();\n        foreach ($testPaths as $fullUri) {\n            $fullUri = rtrim($fullUri, DIRECTORY_SEPARATOR);\n            $tmp = str_replace($baseDir, '', $fullUri) . DIRECTORY_SEPARATOR;\n            if ($fullUri !== false && is_readable($fullUri) && is_writable($fullUri)) {\n                $results[$tmp] = true;\n            } else {\n                $results[$tmp] = false;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getIniSettings()\n    {\n        $ini = [\n            'allow_url_fopen',\n            'allow_url_include',\n            'default_charset',\n            'default_mimetype',\n            'display_errors',\n            'error_log',\n            'error_reporting',\n            'log_errors',\n            'max_execution_time',\n            'memory_limit',\n            'open_basedir',\n            'post_max_size',\n            'sys_temp_dir',\n            'date.timezone',\n        ];\n\n        $settings = [];\n        foreach ($ini as $name) {\n            try {\n                $settings[$name] = ini_get($name);\n            } catch (\\Exception $ex) {\n                $settings[$name] = \"Couldn't load ini setting: \" . $ex->getMessage();\n            }\n        }\n\n        return $settings;\n    }\n\n    /**\n     * @author https://php.net/manual/en/function.phpinfo.php#117961\n     * @return array\n     */\n    private function getPhpInfo()\n    {\n        $plainText = function ($input) {\n            return trim(html_entity_decode(strip_tags($input)));\n        };\n\n        ob_start();\n        phpinfo(1);\n\n        $phpinfo = ['phpinfo' => []];\n\n        if (preg_match_all(\n            '#(?:<h2.*?>(?:<a.*?>)?(.*?)(?:<\\/a>)?<\\/h2>)|' .\n            '(?:<tr.*?><t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>)?)?</tr>)#s',\n            ob_get_clean(),\n            $matches,\n            PREG_SET_ORDER\n        )) {\n            foreach ($matches as $match) {\n                $fn = $plainText;\n                if (isset($match[3])) {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][$fn($match[2])] = isset($match[4]) ? [$fn($match[3]), $fn($match[4])] : $fn($match[3]);\n                } else {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][] = $fn($match[2]);\n                }\n            }\n        }\n\n        $phpInfo = $phpinfo['phpinfo'];\n        unset($phpInfo[0]);\n        unset($phpInfo[1]);\n\n        return $phpInfo;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Export\\Spreadsheet\\AnnotatedObjectExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\InvoiceDocumentUploadForm;\nuse App\\Form\\InvoicePaymentDateForm;\nuse App\\Form\\InvoiceTemplateForm;\nuse App\\Form\\Toolbar\\InvoiceArchiveForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarSimpleForm;\nuse App\\Invoice\\ServiceInvoice;\nuse App\\Repository\\InvoiceDocumentRepository;\nuse App\\Repository\\InvoiceRepository;\nuse App\\Repository\\InvoiceTemplateRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Repository\\Query\\InvoiceArchiveQuery;\nuse App\\Repository\\Query\\InvoiceQuery;\nuse Exception;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * Controller used to create invoices and manage invoice templates.\n *\n * @Route(path=\"/invoice\")\n * @Security(\"is_granted('view_invoice')\")\n */\nfinal class InvoiceController extends AbstractController\n{\n    /**\n     * @var ServiceInvoice\n     */\n    private $service;\n    /**\n     * @var InvoiceTemplateRepository\n     */\n    private $templateRepository;\n    /**\n     * @var InvoiceRepository\n     */\n    private $invoiceRepository;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n\n    public function __construct(ServiceInvoice $service, InvoiceTemplateRepository $templateRepository, InvoiceRepository $invoiceRepository, EventDispatcherInterface $dispatcher)\n    {\n        $this->service = $service;\n        $this->templateRepository = $templateRepository;\n        $this->invoiceRepository = $invoiceRepository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", name=\"invoice\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function indexAction(Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            if ($this->isGranted('manage_invoice_template')) {\n                return $this->redirectToRoute('admin_invoice_template_create');\n            }\n            $this->flashWarning('invoice.first_template');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $models = [];\n        $total = 0;\n        $searched = false;\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            if ($request->query->has('createInvoice')) {\n                try {\n                    return $this->renderInvoice($query, $request);\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError('action.update.error', ['%reason%' => 'check doctor/logs']);\n                }\n            }\n\n            if ($form->get('template')->getData() !== null) {\n                try {\n                    $models = $this->service->createModels($query);\n                    $searched = true;\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError($ex->getMessage());\n                }\n            }\n        }\n\n        foreach ($models as $model) {\n            $total += \\count($model->getCalculator()->getEntries());\n        }\n\n        return $this->render('invoice/index.html.twig', [\n            'models' => $models,\n            'form' => $form->createView(),\n            'limit_preview' => ($total > 500),\n            'searched' => $searched,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/preview/{customer}/{template}\", name=\"invoice_preview\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function previewAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            try {\n                $query->setTemplate($template);\n                $query->setCustomers([$customer]);\n                $model = $this->service->createModel($query);\n\n                return $this->service->renderInvoiceWithModel($model, $this->dispatcher);\n            } catch (Exception $ex) {\n                $this->logException($ex);\n                $this->flashError('action.update.error', ['%reason%' => 'Failed generating invoice preview: ' . $ex->getMessage()]);\n            }\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/save-invoice/{customer}/{template}\", name=\"invoice_create\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function createInvoiceAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            $query->setTemplate($template);\n            $query->setCustomers([$customer]);\n\n            return $this->renderInvoice($query, $request);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    private function getDefaultQuery(): InvoiceQuery\n    {\n        $factory = $this->getDateTimeFactory();\n        $begin = $factory->getStartOfMonth();\n        $end = $factory->getEndOfMonth();\n\n        $query = new InvoiceQuery();\n        $query->setBegin($begin);\n        $query->setEnd($end);\n        // limit access to data from teams\n        $query->setCurrentUser($this->getUser());\n\n        if (!$this->isGranted('view_other_timesheet')) {\n            // limit access to own data\n            $query->setUser($this->getUser());\n        }\n\n        return $query;\n    }\n\n    private function renderInvoice(InvoiceQuery $query, Request $request)\n    {\n        // use the current request locale as fallback, if no translation was configured\n        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n            $query->getTemplate()->setLanguage($request->getLocale());\n        }\n\n        try {\n            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n\n            $this->flashSuccess('action.update.success');\n\n            if (\\count($invoices) === 1) {\n                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n            }\n\n            return $this->redirectToRoute('admin_invoice_list');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/change-status/{id}/{status}\", name=\"admin_invoice_status\", methods={\"GET\", \"POST\"})\n     */\n    public function changeStatusAction(Invoice $invoice, string $status, Request $request): Response\n    {\n        if ($status === Invoice::STATUS_PAID) {\n            $form = $this->createPaymentDateForm($invoice, $status);\n            $form->handleRequest($request);\n\n            if (!$form->isSubmitted() || !$form->isValid()) {\n                return $this->render('invoice/payment_date_edit.html.twig', [\n                    'invoice' => $invoice,\n                    'form' => $form->createView()\n                ]);\n            }\n        }\n\n        try {\n            $this->service->changeInvoiceStatus($invoice, $status);\n            $this->flashSuccess('action.update.success');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/delete/{id}/{token}\", name=\"admin_invoice_delete\", methods={\"GET\"})\n     */\n    public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete', $token))) {\n            $this->flashError('action.delete.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        try {\n            $this->service->deleteInvoice($invoice);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/download/{id}\", name=\"admin_invoice_download\", methods={\"GET\"})\n     */\n    public function downloadAction(Invoice $invoice): Response\n    {\n        $file = $this->service->getInvoiceFile($invoice);\n\n        if (null === $file) {\n            throw $this->createNotFoundException(\n                sprintf('Invoice file \"%s\" could not be found for invoice ID \"%s\"', $invoice->getInvoiceFilename(), $invoice->getId())\n            );\n        }\n\n        return $this->file($file->getRealPath(), $file->getBasename());\n    }\n\n    /**\n     * @Route(path=\"/show/{page}\", defaults={\"page\": 1}, requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_invoice_list\", methods={\"GET\"})\n     */\n    public function showInvoicesAction(Request $request, int $page): Response\n    {\n        $invoice = null;\n\n        if (null !== ($id = $request->get('id'))) {\n            $invoice = $this->invoiceRepository->find($id);\n        }\n\n        $query = new InvoiceArchiveQuery();\n        $query->setPage($page);\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $invoices = $this->invoiceRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/listing.html.twig', [\n            'entries' => $invoices,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'download' => $invoice,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"invoice_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, AnnotatedObjectExporter $exporter)\n    {\n        $query = new InvoiceArchiveQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        $entries = $this->invoiceRepository->getInvoicesForQuery($query);\n\n        $spreadsheet = $exporter->export(Invoice::class, $entries);\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-invoices');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @Route(path=\"/template/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, defaults={\"page\": 1}, name=\"admin_invoice_template\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function listTemplateAction(int $page): Response\n    {\n        $query = new BaseQuery();\n        $query->setPage($page);\n\n        $templates = $this->templateRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/templates.html.twig', [\n            'entries' => $templates,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/edit\", name=\"admin_invoice_template_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function editTemplateAction(InvoiceTemplate $template, Request $request): Response\n    {\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/document_upload\", name=\"admin_invoice_document_upload\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('upload_invoice_template')\")\n     */\n    public function uploadDocumentAction(Request $request, string $projectDirectory, InvoiceDocumentRepository $documentRepository)\n    {\n        $dir = $documentRepository->getUploadDirectory();\n        $invoiceDir = $dir;\n\n        // do not execute realpath, as it will return an empty string if the invoice directory is NOT existing!\n        if ($invoiceDir[0] !== '/') {\n            $invoiceDir = $projectDirectory . DIRECTORY_SEPARATOR . $dir;\n        }\n\n        $canUpload = true;\n\n        if (!file_exists($invoiceDir)) {\n            @mkdir($invoiceDir, 0777);\n        }\n\n        if (!is_dir($invoiceDir)) {\n            $this->flashError(sprintf('Invoice directory \"%s\" is not existing and could not be created.', $dir));\n            $canUpload = false;\n        } elseif (!is_writable($invoiceDir)) {\n            $this->flashError(sprintf('Invoice directory \"%s\" cannot be written.', $dir));\n            $canUpload = false;\n        }\n\n        $form = $this->createForm(InvoiceDocumentUploadForm::class, null, [\n            'action' => $this->generateUrl('admin_invoice_document_upload', []),\n            'method' => 'POST'\n        ]);\n\n        if ($canUpload) {\n            $form->handleRequest($request);\n\n            if ($form->isSubmitted() && $form->isValid()) {\n                /** @var UploadedFile $uploadedFile */\n                $uploadedFile = $form->get('document')->getData();\n\n                $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);\n                $safeFilename = transliterator_transliterate(\n                    'Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()',\n                    $originalFilename\n                );\n                $newFilename = $safeFilename . '.' . $uploadedFile->guessExtension();\n\n                try {\n                    $uploadedFile->move($invoiceDir, $newFilename);\n                    $this->flashSuccess('action.update.success');\n\n                    return $this->redirectToRoute('admin_invoice_document_upload');\n                } catch (Exception $ex) {\n                    $this->flashException($ex, 'action.upload.error');\n                }\n            }\n        }\n\n        return $this->render('invoice/document_upload.html.twig', [\n            'form' => $form->createView(),\n            'documents' => $this->service->getDocuments(true),\n            'baseDirectory' => $projectDirectory . DIRECTORY_SEPARATOR,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/create\", name=\"admin_invoice_template_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/template/create/{id}\", name=\"admin_invoice_template_copy\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function createTemplateAction(Request $request, ?InvoiceTemplate $copyFrom): Response\n    {\n        $template = new InvoiceTemplate();\n\n        if (null !== $copyFrom) {\n            $template = clone $copyFrom;\n            $template->setName('Copy of ' . $copyFrom->getName());\n        }\n\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/delete\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteTemplate(InvoiceTemplate $template): Response\n    {\n        try {\n            $this->templateRepository->removeTemplate($template);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_template');\n    }\n\n    private function renderTemplateForm(InvoiceTemplate $template, Request $request): Response\n    {\n        $editForm = $this->createEditForm($template);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->templateRepository->saveTemplate($template);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('admin_invoice_template');\n            } catch (Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('invoice/template_edit.html.twig', [\n            'template' => $template,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(InvoiceQuery $query, bool $simple): FormInterface\n    {\n        $form = $simple ? InvoiceToolbarSimpleForm::class : InvoiceToolbarForm::class;\n\n        return $this->createForm($form, $query, [\n            'action' => $this->generateUrl('invoice', []),\n            'method' => 'GET',\n            'include_user' => $this->isGranted('view_other_timesheet'),\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-print-form'\n            ],\n        ]);\n    }\n\n    private function getArchiveToolbarForm(InvoiceArchiveQuery $query): FormInterface\n    {\n        return $this->createForm(InvoiceArchiveForm::class, $query, [\n            'action' => $this->generateUrl('admin_invoice_list', []),\n            'method' => 'GET',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-archive-form'\n            ],\n        ]);\n    }\n\n    private function createEditForm(InvoiceTemplate $template): FormInterface\n    {\n        if ($template->getId() === null) {\n            $url = $this->generateUrl('admin_invoice_template_create');\n        } else {\n            $url = $this->generateUrl('admin_invoice_template_edit', ['id' => $template->getId()]);\n        }\n\n        return $this->createForm(InvoiceTemplateForm::class, $template, [\n            'action' => $url,\n            'method' => 'POST'\n        ]);\n    }\n\n    private function createPaymentDateForm(Invoice $invoice, string $status): FormInterface\n    {\n        if (null === $invoice->getPaymentDate()) {\n            $invoice->setPaymentDate($this->getDateTimeFactory()->createDateTime());\n        }\n\n        $url = $this->generateUrl('admin_invoice_status', ['id' => $invoice->getId(), 'status' => $status]);\n\n        return $this->createForm(InvoicePaymentDateForm::class, $invoice, [\n            'action' => $url,\n            'method' => 'POST',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Entity\\Role;\nuse App\\Entity\\RolePermission;\nuse App\\Entity\\User;\nuse App\\Event\\PermissionSectionsEvent;\nuse App\\Event\\PermissionsEvent;\nuse App\\Form\\RoleType;\nuse App\\Model\\PermissionSection;\nuse App\\Repository\\RolePermissionRepository;\nuse App\\Repository\\RoleRepository;\nuse App\\Repository\\UserRepository;\nuse App\\Security\\RolePermissionManager;\nuse App\\Security\\RoleService;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * Controller used to manage user roles and role permissions.\n *\n * @Route(path=\"/admin/permissions\")\n * @Security(\"is_granted('role_permissions')\")\n */\nfinal class PermissionController extends AbstractController\n{\n    public const TOKEN_NAME = 'user_role_permissions';\n    /**\n     * @var RoleService\n     */\n    private $roleService;\n    /**\n     * @var RolePermissionManager\n     */\n    private $manager;\n    /**\n     * @var RoleRepository\n     */\n    private $roleRepository;\n\n    public function __construct(RoleService $roleService, RolePermissionManager $manager, RoleRepository $roleRepository)\n    {\n        $this->roleService = $roleService;\n        $this->manager = $manager;\n        $this->roleRepository = $roleRepository;\n    }\n\n    /**\n     * @Route(path=\"\", name=\"admin_user_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function permissions(EventDispatcherInterface $dispatcher, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $all = $this->roleRepository->findAll();\n        $existing = [];\n\n        foreach ($all as $role) {\n            $existing[] = $role->getName();\n        }\n\n        $existing = array_map('strtoupper', $existing);\n\n        // automatically import all hard coded (default) roles into the database table\n        foreach ($this->roleService->getAvailableNames() as $roleName) {\n            $roleName = strtoupper($roleName);\n            if (!\\in_array($roleName, $existing)) {\n                $role = new Role();\n                $role->setName($roleName);\n                $this->roleRepository->saveRole($role);\n                $existing[] = $roleName;\n                $all[] = $role;\n            }\n        }\n\n        // be careful, the order of the search keys is important!\n        $permissionOrder = [\n            new PermissionSection('Export', '_export'),\n            new PermissionSection('Invoice', '_invoice'),\n            new PermissionSection('Teams', '_team'),\n            new PermissionSection('Tags', '_tag'),\n            new PermissionSection('User profile (other)', '_other_profile'),\n            new PermissionSection('User profile (own)', '_own_profile'),\n            new PermissionSection('User', '_user'),\n            new PermissionSection('Customer (Admin)', '_customer'),\n            new PermissionSection('Customer (Team member)', '_team_customer'),\n            new PermissionSection('Customer (Teamlead)', '_teamlead_customer'),\n            new PermissionSection('Project (Admin)', '_project'),\n            new PermissionSection('Project (Team member)', '_team_project'),\n            new PermissionSection('Project (Teamlead)', '_teamlead_project'),\n            new PermissionSection('Activity (Admin)', '_activity'),\n            new PermissionSection('Activity (Team member)', '_team_activity'),\n            new PermissionSection('Activity (Teamlead)', '_teamlead_activity'),\n            new PermissionSection('Timesheet', '_timesheet'),\n            new PermissionSection('Timesheet (other)', '_other_timesheet'),\n            new PermissionSection('Timesheet (own)', '_own_timesheet'),\n            new PermissionSection('Reporting', '_reporting'),\n        ];\n\n        $event = new PermissionSectionsEvent();\n        foreach ($permissionOrder as $section) {\n            $event->addSection($section);\n        }\n        $dispatcher->dispatch($event);\n\n        $permissionSorted = [];\n        $other = [];\n\n        foreach ($event->getSections() as $section) {\n            $permissionSorted[$section->getTitle()] = [];\n        }\n\n        foreach ($this->manager->getPermissions() as $permission) {\n            $found = false;\n\n            foreach (array_reverse($event->getSections()) as $section) {\n                if ($section->filter($permission)) {\n                    $permissionSorted[$section->getTitle()][] = $permission;\n                    $found = true;\n                    break;\n                }\n            }\n\n            if (!$found) {\n                $other[] = $permission;\n            }\n        }\n\n        ksort($permissionSorted);\n\n        $permissionSorted['Other'] = $other;\n\n        // order the roles from most powerful to least powerful, custom roles at the end\n        $roles = [\n            'ROLE_SUPER_ADMIN' => null,\n            'ROLE_ADMIN' => null,\n            'ROLE_TEAMLEAD' => null,\n            'ROLE_USER' => null,\n        ];\n        foreach ($all as $role) {\n            $roles[$role->getName()] = $role;\n        }\n\n        $event = new PermissionsEvent();\n        foreach ($permissionSorted as $title => $permissions) {\n            $event->addPermissions($title, $permissions);\n        }\n\n        $dispatcher->dispatch($event);\n\n        return $this->render('permission/permissions.html.twig', [\n            'token' => $csrfTokenManager->refreshToken(self::TOKEN_NAME)->getValue(),\n            'roles' => array_values($roles),\n            'sorted' => $event->getPermissions(),\n            'manager' => $this->manager,\n            'system_roles' => $this->roleService->getSystemRoles(),\n            'always_apply_superadmin' => RolePermissionManager::SUPER_ADMIN_PERMISSIONS,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/roles/create\", name=\"admin_user_roles\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function createRole(Request $request): Response\n    {\n        $role = new Role();\n\n        $form = $this->createForm(RoleType::class, $role, [\n            'action' => $this->generateUrl('admin_user_roles', []),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->roleRepository->saveRole($role);\n                $this->flashSuccess('action.update.success');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n\n            return $this->redirectToRoute('admin_user_permissions');\n        }\n\n        return $this->render('permission/edit_role.html.twig', [\n            'form' => $form->createView(),\n            'role' => $role,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/roles/{id}/delete/{csrfToken}\", name=\"admin_user_role_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function deleteRole(Role $role, string $csrfToken, UserRepository $userRepository, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->isCsrfTokenValid(self::TOKEN_NAME, $csrfToken)) {\n            $this->flashUpdateException(new \\Exception('Invalid CSRF token'));\n\n            return $this->redirectToRoute('admin_user_permissions');\n        }\n\n        // make sure that the token can only be used once, so refresh it after successful submission\n        $csrfTokenManager->refreshToken(self::TOKEN_NAME)->getValue();\n\n        try {\n            // workaround, as roles is still a string array on users table\n            // until this is fixed, the users must be manually updated\n            $users = $userRepository->findUsersWithRole($role->getName());\n            foreach ($users as $user) {\n                $user->removeRole($role->getName());\n                $userRepository->saveUser($user);\n            }\n            $this->roleRepository->deleteRole($role);\n            $this->flashSuccess('action.delete.success');\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_user_permissions');\n    }\n\n    /**\n     * @Route(path=\"/roles/{id}/{name}/{value}/{csrfToken}\", name=\"admin_user_permission_save\", methods={\"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function savePermission(Role $role, string $name, bool $value, string $csrfToken, RolePermissionRepository $rolePermissionRepository, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->isCsrfTokenValid(self::TOKEN_NAME, $csrfToken)) {\n            throw new BadRequestHttpException('Invalid CSRF token');\n        }\n\n        if (!$this->manager->isRegisteredPermission($name)) {\n            throw $this->createNotFoundException('Unknown permission: ' . $name);\n        }\n\n        if (false === $value && $role->getName() === User::ROLE_SUPER_ADMIN && \\in_array($name, RolePermissionManager::SUPER_ADMIN_PERMISSIONS)) {\n            throw $this->createAccessDeniedException(sprintf('Permission \"%s\" cannot be deactivated for role \"%s\"', $name, $role->getName()));\n        }\n\n        try {\n            $permission = $rolePermissionRepository->findRolePermission($role, $name);\n            if (null === $permission) {\n                $permission = new RolePermission();\n                $permission->setRole($role);\n                $permission->setPermission($name);\n            }\n            $permission->setAllowed((bool) $value);\n\n            $rolePermissionRepository->saveRolePermission($permission);\n\n            // refreshToken instead of getToken for more security but worse UX\n            // fast clicking with slow response times would fail, as the token cannot be replaced fast enough\n            $newToken = $csrfTokenManager->getToken(self::TOKEN_NAME)->getValue();\n\n            return $this->json(['token' => $newToken]);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        throw new BadRequestHttpException();\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\MetaTableTypeInterface;\nuse App\\Entity\\Project;\nuse App\\Entity\\ProjectComment;\nuse App\\Entity\\ProjectRate;\nuse App\\Entity\\Rate;\nuse App\\Entity\\Team;\nuse App\\Event\\ProjectMetaDefinitionEvent;\nuse App\\Event\\ProjectMetaDisplayEvent;\nuse App\\Export\\Spreadsheet\\EntityWithMetaFieldsExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\ProjectCommentForm;\nuse App\\Form\\ProjectEditForm;\nuse App\\Form\\ProjectRateForm;\nuse App\\Form\\ProjectTeamPermissionForm;\nuse App\\Form\\Toolbar\\ProjectToolbarForm;\nuse App\\Form\\Type\\ProjectType;\nuse App\\Project\\ProjectDuplicationService;\nuse App\\Project\\ProjectService;\nuse App\\Project\\ProjectStatisticService;\nuse App\\Repository\\ActivityRepository;\nuse App\\Repository\\ProjectRateRepository;\nuse App\\Repository\\ProjectRepository;\nuse App\\Repository\\Query\\ActivityQuery;\nuse App\\Repository\\Query\\ProjectQuery;\nuse App\\Repository\\TeamRepository;\nuse Pagerfanta\\Pagerfanta;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Controller used to manage projects.\n *\n * @Route(path=\"/admin/project\")\n * @Security(\"is_granted('view_project') or is_granted('view_teamlead_project') or is_granted('view_team_project')\")\n */\nfinal class ProjectController extends AbstractController\n{\n    /**\n     * @var ProjectRepository\n     */\n    private $repository;\n    /**\n     * @var SystemConfiguration\n     */\n    private $configuration;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n    /**\n     * @var ProjectService\n     */\n    private $projectService;\n\n    public function __construct(ProjectRepository $repository, SystemConfiguration $configuration, EventDispatcherInterface $dispatcher, ProjectService $projectService)\n    {\n        $this->repository = $repository;\n        $this->configuration = $configuration;\n        $this->dispatcher = $dispatcher;\n        $this->projectService = $projectService;\n    }\n\n    /**\n     * @Route(path=\"/\", defaults={\"page\": 1}, name=\"admin_project\", methods={\"GET\"})\n     * @Route(path=\"/page/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_project_paginated\", methods={\"GET\"})\n     */\n    public function indexAction($page, Request $request)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n\n        $form = $this->getToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_project');\n        }\n\n        $entries = $this->repository->getPagerfantaForQuery($query);\n\n        return $this->render('project/index.html.twig', [\n            'entries' => $entries,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'metaColumns' => $this->findMetaColumns($query),\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @param ProjectQuery $query\n     * @return MetaTableTypeInterface[]\n     */\n    protected function findMetaColumns(ProjectQuery $query): array\n    {\n        $event = new ProjectMetaDisplayEvent($query, ProjectMetaDisplayEvent::PROJECT);\n        $this->dispatcher->dispatch($event);\n\n        return $event->getFields();\n    }\n\n    /**\n     * @Route(path=\"/{id}/permissions\", name=\"admin_project_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('permissions', project)\")\n     */\n    public function teamPermissions(Project $project, Request $request)\n    {\n        $form = $this->createForm(ProjectTeamPermissionForm::class, $project, [\n            'action' => $this->generateUrl('admin_project_permissions', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->projectService->updateProject($project);\n                $this->flashSuccess('action.update.success');\n\n                if ($this->isGranted('view', $project)) {\n                    return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n                }\n\n                return $this->redirectToRoute('admin_project');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/permissions.html.twig', [\n            'project' => $project,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/create\", name=\"admin_project_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/create/{customer}\", name=\"admin_project_create_with_customer\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('create_project')\")\n     */\n    public function createAction(Request $request, ?Customer $customer = null)\n    {\n        $project = $this->projectService->createNewProject($customer);\n\n        $editForm = $this->createEditForm($project);\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->projectService->saveNewProject($project);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/edit.html.twig', [\n            'project' => $project,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_delete\", name=\"project_comment_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n     */\n    public function deleteCommentAction(ProjectComment $comment)\n    {\n        $projectId = $comment->getProject()->getId();\n\n        try {\n            $this->repository->deleteComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $projectId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_add\", name=\"project_comment_add\", methods={\"POST\"})\n     * @Security(\"is_granted('comments_create', project)\")\n     */\n    public function addCommentAction(Project $project, Request $request)\n    {\n        $comment = new ProjectComment();\n        $form = $this->getCommentForm($project, $comment);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveComment($comment);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_pin\", name=\"project_comment_pin\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n     */\n    public function pinCommentAction(ProjectComment $comment)\n    {\n        $comment->setPinned(!$comment->isPinned());\n        try {\n            $this->repository->saveComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $comment->getProject()->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/create_team\", name=\"project_team_create\", methods={\"GET\"})\n     * @Security(\"is_granted('create_team') and is_granted('edit', project)\")\n     */\n    public function createDefaultTeamAction(Project $project, TeamRepository $teamRepository)\n    {\n        $defaultTeam = $teamRepository->findOneBy(['name' => $project->getName()]);\n        if (null !== $defaultTeam) {\n            $this->flashError('action.update.error', ['%reason%' => 'Team already existing']);\n\n            return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n        }\n\n        $defaultTeam = new Team();\n        $defaultTeam->setName($project->getName());\n        $defaultTeam->addTeamlead($this->getUser());\n        $defaultTeam->addProject($project);\n\n        try {\n            $teamRepository->saveTeam($defaultTeam);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/activities/{page}\", defaults={\"page\": 1}, name=\"project_activities\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', project)\")\n     */\n    public function activitiesAction(Project $project, int $page, ActivityRepository $activityRepository)\n    {\n        $query = new ActivityQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n        $query->setPageSize(5);\n        $query->addProject($project);\n        $query->setExcludeGlobals(true);\n        $query->setShowBoth();\n        $query->addOrderGroup('visible', ActivityQuery::ORDER_DESC);\n        $query->addOrderGroup('name', ActivityQuery::ORDER_ASC);\n\n        /* @var $entries Pagerfanta */\n        $entries = $activityRepository->getPagerfantaForQuery($query);\n\n        return $this->render('project/embed_activities.html.twig', [\n            'project' => $project,\n            'activities' => $entries,\n            'page' => $page,\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/details\", name=\"project_details\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', project)\")\n     */\n    public function detailsAction(Project $project, TeamRepository $teamRepository, ProjectRateRepository $rateRepository, ProjectStatisticService $statisticService)\n    {\n        $event = new ProjectMetaDefinitionEvent($project);\n        $this->dispatcher->dispatch($event);\n\n        $stats = null;\n        $defaultTeam = null;\n        $commentForm = null;\n        $attachments = [];\n        $comments = null;\n        $teams = null;\n        $rates = [];\n        $now = $this->getDateTimeFactory()->createDateTime();\n\n        if ($this->isGranted('edit', $project)) {\n            if ($this->isGranted('create_team')) {\n                $defaultTeam = $teamRepository->findOneBy(['name' => $project->getName()]);\n            }\n            $rates = $rateRepository->getRatesForProject($project);\n        }\n\n        if ($this->isGranted('budget', $project)) {\n            $stats = $statisticService->getBudgetStatisticModel($project, $now);\n        }\n\n        if ($this->isGranted('comments', $project)) {\n            $comments = $this->repository->getComments($project);\n        }\n\n        if ($this->isGranted('comments_create', $project)) {\n            $commentForm = $this->getCommentForm($project, new ProjectComment())->createView();\n        }\n\n        if ($this->isGranted('permissions', $project) || $this->isGranted('details', $project) || $this->isGranted('view_team')) {\n            $teams = $project->getTeams();\n        }\n\n        return $this->render('project/details.html.twig', [\n            'project' => $project,\n            'comments' => $comments,\n            'commentForm' => $commentForm,\n            'attachments' => $attachments,\n            'stats' => $stats,\n            'team' => $defaultTeam,\n            'teams' => $teams,\n            'rates' => $rates,\n            'now' => $now,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/rate\", name=\"admin_project_rate_add\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function addRateAction(Project $project, Request $request, ProjectRateRepository $repository)\n    {\n        $rate = new ProjectRate();\n        $rate->setProject($project);\n\n        $form = $this->createForm(ProjectRateForm::class, $rate, [\n            'action' => $this->generateUrl('admin_project_rate_add', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $repository->saveRate($rate);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/rates.html.twig', [\n            'project' => $project,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/edit\", name=\"admin_project_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function editAction(Project $project, Request $request)\n    {\n        $editForm = $this->createEditForm($project);\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->projectService->updateProject($project);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/edit.html.twig', [\n            'project' => $project,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/duplicate\", name=\"admin_project_duplicate\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function duplicateAction(Project $project, Request $request, ProjectDuplicationService $projectDuplicationService)\n    {\n        $newProject = $projectDuplicationService->duplicate($project, $project->getName() . ' [COPY]');\n\n        return $this->redirectToRoute('project_details', ['id' => $newProject->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/delete\", name=\"admin_project_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('delete', project)\")\n     */\n    public function deleteAction(Project $project, Request $request, ProjectStatisticService $statisticService)\n    {\n        $stats = $statisticService->getProjectStatistics($project);\n\n        $deleteForm = $this->createFormBuilder(null, [\n                'attr' => [\n                    'data-form-event' => 'kimai.projectDelete',\n                    'data-msg-success' => 'action.delete.success',\n                    'data-msg-error' => 'action.delete.error',\n                ]\n            ])\n            ->add('project', ProjectType::class, [\n                'ignore_project' => $project,\n                'customers' => $project->getCustomer(),\n                'query_builder_for_user' => true,\n                'required' => false,\n            ])\n            ->setAction($this->generateUrl('admin_project_delete', ['id' => $project->getId()]))\n            ->setMethod('POST')\n            ->getForm();\n\n        $deleteForm->handleRequest($request);\n\n        if ($deleteForm->isSubmitted() && $deleteForm->isValid()) {\n            try {\n                $this->repository->deleteProject($project, $deleteForm->get('project')->getData());\n                $this->flashSuccess('action.delete.success');\n            } catch (\\Exception $ex) {\n                $this->flashDeleteException($ex);\n            }\n\n            return $this->redirectToRoute('admin_project');\n        }\n\n        return $this->render('project/delete.html.twig', [\n            'project' => $project,\n            'stats' => $stats,\n            'form' => $deleteForm->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"project_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, EntityWithMetaFieldsExporter $exporter)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        if (!$form->isValid()) {\n            $query->resetByFormError($form->getErrors());\n        }\n\n        $entries = $this->repository->getProjectsForQuery($query);\n\n        $spreadsheet = $exporter->export(\n            Project::class,\n            $entries,\n            new ProjectMetaDisplayEvent($query, ProjectMetaDisplayEvent::EXPORT)\n        );\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-projects');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    protected function getToolbarForm(ProjectQuery $query): FormInterface\n    {\n        return $this->createForm(ProjectToolbarForm::class, $query, [\n            'action' => $this->generateUrl('admin_project', [\n                'page' => $query->getPage(),\n            ]),\n            'method' => 'GET',\n        ]);\n    }\n\n    private function getCommentForm(Project $project, ProjectComment $comment): FormInterface\n    {\n        if (null === $comment->getId()) {\n            $comment->setProject($project);\n            $comment->setCreatedBy($this->getUser());\n        }\n\n        return $this->createForm(ProjectCommentForm::class, $comment, [\n            'action' => $this->generateUrl('project_comment_add', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n    }\n\n    private function createEditForm(Project $project): FormInterface\n    {\n        $event = new ProjectMetaDefinitionEvent($project);\n        $this->dispatcher->dispatch($event);\n\n        $currency = $this->configuration->getCustomerDefaultCurrency();\n        $url = $this->generateUrl('admin_project_create');\n\n        if ($project->getId() !== null) {\n            $url = $this->generateUrl('admin_project_edit', ['id' => $project->getId()]);\n            $currency = $project->getCustomer()->getCurrency();\n        }\n\n        return $this->createForm(ProjectEditForm::class, $project, [\n            'action' => $url,\n            'method' => 'POST',\n            'currency' => $currency,\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'include_budget' => $this->isGranted('budget', $project),\n            'time_increment' => 15,\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\EventSubscriber\\Actions;\n\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Event\\PageActionsEvent;\n\nclass InvoiceTemplateSubscriber extends AbstractActionsSubscriber\n{\n    public static function getActionName(): string\n    {\n        return 'invoice_template';\n    }\n\n    public function onActions(PageActionsEvent $event): void\n    {\n        $payload = $event->getPayload();\n\n        /** @var InvoiceTemplate $template */\n        $template = $payload['template'];\n\n        if ($template->getId() === null) {\n            return;\n        }\n\n        if ($this->isGranted('manage_invoice_template')) {\n            if (!$event->isIndexView()) {\n                $event->addBack($this->path('invoice'));\n            }\n            $event->addAction('edit', ['url' => $this->path('admin_invoice_template_edit', ['id' => $template->getId()]), 'class' => 'modal-ajax-form']);\n            $event->addAction('copy', ['url' => $this->path('admin_invoice_template_copy', ['id' => $template->getId()])]);\n            $event->addDelete($this->path('admin_invoice_template_delete', ['id' => $template->getId()]), false);\n        }\n    }\n}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n{% import \"customer/actions.html.twig\" as actions %}\n\n{% block page_actions %}{{ actions.customer(customer, 'customer_details') }}{% endblock %}\n{% block page_title %}{{ 'admin_customer.title'|trans }}{% endblock %}\n\n{% block main %}\n    {% set can_edit = is_granted('edit', customer) %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' %}\n        {% import \"macros/widgets.html.twig\" as widgets %}\n        {% block box_attributes %}id=\"customer_details_box\"{% endblock %}\n        {% block box_title %}\n            {{ widgets.label_customer(customer) }}\n            {% if customer.company is not empty %} &ndash; {{ customer.company }}{% endif %}\n        {% endblock %}\n        {% block box_tools %}\n            {% if can_edit %}\n                <a class=\"modal-ajax-form open-edit btn btn-default btn-sm\" data-href=\"{{ path('admin_customer_edit', {'id': customer.id}) }}\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{ 'action.edit'|trans }}\"><i class=\"{{ 'edit'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            {% if customer.comment is not empty %}\n                <div class=\"comment\">\n                    {{ customer.comment|comment2html(true) }}\n                </div>\n            {% endif %}\n            <table class=\"table table-hover dataTable\">\n                {% if not customer.visible %}\n                    <tr class=\"{{ widgets.class_customer_row(customer, now) }}\">\n                        <th>{{ 'label.visible'|trans }}</th>\n                        <td>{{ widgets.label_boolean(customer.visible) }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.address is not empty %}\n                    <tr>\n                        <th>{{ 'label.address'|trans }}</th>\n                        <td>{{ customer.address|nl2br }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.country is not empty %}\n                    <tr>\n                        <th>{{ 'label.country'|trans }}</th>\n                        <td>{{ customer.country|country }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.contact is not empty %}\n                    <tr>\n                        <th>{{ 'label.contact'|trans }}</th>\n                        <td>{{ customer.contact }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.phone is not empty %}\n                    <tr>\n                        <th>{{ 'label.phone'|trans }}</th>\n                        <td><a href=\"tel:{{ customer.phone }}\">{{ customer.phone }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.mobile is not empty %}\n                    <tr>\n                        <th>{{ 'label.mobile'|trans }}</th>\n                        <td><a href=\"tel:{{ customer.mobile }}\">{{ customer.mobile }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.email is not empty %}\n                    <tr>\n                        <th>{{ 'label.email'|trans }}</th>\n                        <td><a href=\"mailto:{{ customer.email }}\">{{ customer.email }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.homepage is not empty %}\n                    <tr>\n                        <th>{{ 'label.homepage'|trans }}</th>\n                        <td><a href=\"{{ customer.homepage }}\" target=\"_blank\">{{ customer.homepage|replace({'https://': '', 'http://': ''}) }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.fax is not empty %}\n                    <tr>\n                        <th>{{ 'label.fax'|trans }}</th>\n                        <td>{{ customer.fax }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.timezone is not empty %}\n                    <tr>\n                        <th>{{ 'label.timezone'|trans }}</th>\n                        <td>{{ customer_now|date_full }} ({{ customer.timezone }})</td>\n                    </tr>\n                {% endif %}\n                {% if customer.currency is not empty %}\n                    <tr>\n                        <th>{{ 'label.currency'|trans }}</th>\n                        <td>{{ customer.currency }}</td>\n                    </tr>\n                {% endif %}\n                {% if is_granted('details', customer) %}\n                    {% if customer.number is not empty %}\n                        <tr>\n                            <th>{{ 'label.number'|trans }}</th>\n                            <td>{{ customer.number }}</td>\n                        </tr>\n                    {% endif %}\n                    {% if customer.vatId is not empty %}\n                        <tr>\n                            <th>{{ 'label.vat_id'|trans }}</th>\n                            <td>{{ customer.vatId }}</td>\n                        </tr>\n                    {% endif %}\n                {% endif %}\n                {% for metaField in customer.visibleMetaFields|sort((a, b) => a.order <=> b.order) %}\n                    <tr>\n                        <th>{{ metaField.label|trans }}</th>\n                        <td>{{ widgets.form_type_value(metaField.type, metaField.value, customer) }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {{ render(controller('App\\\\Controller\\\\CustomerController::projectsAction', {'customer': customer.id, 'page': 1})) }}\n    \n    {% if stats is not null %}\n        {{ include('embeds/budgets.html.twig', {'entity': customer, 'stats': stats, 'currency': customer.currency}) }}\n    {% endif %}\n\n    {% if can_edit %}\n        {{ include('embeds/rates-table.html.twig', {'id': 'customer_rates_box', 'entity': customer, 'create_url': path('admin_customer_rate_add', {'id': customer.id}), 'delete_route': 'delete_customer_rate', 'currency': customer.currency}) }}\n    {% endif %}\n\n    {% if teams is not null %}\n        {% set options = {'teams': teams, 'team': team} %}\n        {% if is_granted('permissions', customer) %}\n            {% set options = options|merge({'route_create': path('customer_team_create', {'id': customer.id}), 'route_edit': path('admin_customer_permissions', {'id': customer.id})}) %}\n        {% endif %}\n        {{ include('embeds/teams.html.twig', options) }}\n    {% endif %}\n\n    {% if comments is not null %}\n        {% set options = {'form': commentForm, 'comments': comments} %}\n        {% if can_edit %}\n            {% set options = options|merge({'route_pin': 'customer_comment_pin', 'route_delete': 'customer_comment_delete'}) %}\n        {% endif %}\n        {{ include('embeds/comments.html.twig', options) }}\n    {% endif %}\n\n{% endblock %}\n\n{% block javascripts %}\n    {{ parent() }}\n    <script type=\"text/javascript\">\n        document.addEventListener('kimai.initialized', function() {\n            KimaiReloadPageWidget.create('kimai.customerTeamUpdate kimai.customerUpdate kimai.teamUpdate kimai.projectTeamUpdate kimai.rateUpdate');\n        });\n    </script>\n{% endblock %}\n", "{% embed '@AdminLTE/Widgets/box-widget.html.twig' with {'form': form, 'comments': comments, 'route_pin': route_pin|default(null), 'route_delete': route_delete|default(null), 'delete_by_user': delete_by_user|default(false)} %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% block box_title %}{{ 'label.comment'|trans }}{% endblock %}\n    {% block box_attributes %}id=\"comments_box\"{% endblock %}\n    {% block box_body_class %}box-body-scrollable{% endblock %}\n    {% block box_body %}\n        {% set replacer = {} %}\n        {% for pref in app.user.preferences %}\n            {% set replacer = replacer|merge({('{{user.' ~ pref.name ~ '}}'): pref.value}) %}\n        {% endfor %}\n        {% if comments|length == 0 %}\n            {{ 'error.no_comments_found'|trans }}\n        {% else %}\n            {% for comment in comments %}\n                <div class=\"direct-chat-msg\">\n                    <div class=\"direct-chat-info clearfix\">\n                        <span class=\"direct-chat-name pull-left\">\n                            {{ widgets.username(comment.createdBy) }}\n                        </span>\n                        <span class=\"direct-chat-timestamp pull-left\">\n                            &nbsp;\n                            {{ comment.createdAt|date_full }}\n                            &nbsp;\n                        </span>\n                        <span class=\"pull-right\">\n                        {% if route_pin is not null %}\n                            <a href=\"{{ path(route_pin, {'id': comment.id}) }}\" class=\"btn btn-default btn-xs {% if comment.pinned %}active{% endif %}\"><i class=\"{{ 'pin'|icon }}\"></i></a>\n                        {% elseif comment.pinned %}\n                            <i class=\"{{ 'pin'|icon }}\"></i>\n                        {% endif %}\n                        {% if route_delete is not null and ((not delete_by_user) or (delete_by_user and comment.createdBy.id == app.user.id)) %}\n                            <a href=\"{{ path(route_delete, {'id': comment.id}) }}\" class=\"confirmation-link btn btn-default btn-xs\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n                        {% endif %}\n                        </span>\n                    </div>\n                    {{ widgets.user_avatar(comment.createdBy, false, 'direct-chat-img img-sm') }}\n                    <div class=\"direct-chat-text\">\n                        {{ comment.message|replace(replacer)|md2html }}\n                    </div>\n                </div>\n            {% endfor %}\n        {% endif %}\n    {% endblock %}\n    {% block box_footer -%}\n        {% if form is not null %}\n            {{ form_start(form) }}\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    {{ form_widget(form.message, {'attr': {'rows': '3', 'placeholder': 'placeholder.type_message'|trans, 'style': 'margin-bottom: 5px'}}) }}\n                    <button type=\"submit\" class=\"btn btn-default\">\n                        <i class=\"{{ 'comment'|icon }}\"></i>\n                        {{ 'label.comment'|trans }}\n                    </button>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                </div>\n            </div>\n            {{ form_widget(form) }}\n            {{ form_end(form) }}\n        {% endif %}\n    {%- endblock %}\n{% endembed %}\n", "{% macro invoices(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoices', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice(invoice, view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice', view, {'invoice': invoice, 'token': csrf_token('invoice.delete')}) %}\n    {{ widgets.table_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_listing(view, query) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_details', view, {'query': query}) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_upload(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_upload', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_templates(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_templates', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_template(template, view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_template', view, {'template': template}) %}\n    {{ widgets.table_actions(event.actions) }}\n{% endmacro %}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n{% import \"project/actions.html.twig\" as actions %}\n\n{% block page_title %}{{ 'admin_project.title'|trans }}{% endblock %}\n{% block page_actions %}{{ actions.project(project, 'project_details') }}{% endblock %}\n\n{% block main %}\n    {% set can_edit = is_granted('edit', project) %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' %}\n        {% import \"macros/widgets.html.twig\" as widgets %}\n        {% import \"customer/actions.html.twig\" as customerActions %}\n        {% block box_attributes %}id=\"project_details_box\"{% endblock %}\n        {% block box_tools %}\n            {% if can_edit %}\n                <a class=\"modal-ajax-form open-edit btn btn-default btn-sm\" data-href=\"{{ path('admin_project_edit', {'id': project.id}) }}\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{ 'action.edit'|trans }}\"><i class=\"{{ 'edit'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_title %}\n            {{ widgets.label_name(project.name, project.color) }}\n        {% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            {% if project.comment is not empty %}\n                <div class=\"comment\">\n                    {{ project.comment|comment2html(true) }}\n                </div>\n            {% endif %}\n            <table class=\"table table-hover dataTable\">\n                {% if not project.visible %}\n                    <tr class=\"{{ widgets.class_project_row(project, now) }}\">\n                        <th>{{ 'label.visible'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ widgets.label_boolean(project.visible) }}\n                        </td>\n                    </tr>\n                {% endif %}\n                <tr {{ widgets.customer_row_attr(project.customer, now) }}>\n                    <th>{{ 'label.customer'|trans }}</th>\n                    <td>\n                        {{ widgets.label_customer(project.customer) }}\n                    </td>\n                    <td class=\"w-min\">\n                        {{ widgets.badge_team_access(project.customer.teams) }}\n                    </td>\n                    <td class=\"actions\">\n                        {{ customerActions.customer(project.customer, 'custom') }}\n                    </td>\n                </tr>\n                {% if is_granted('details', project) %}\n                    {% if project.orderNumber is not empty %}\n                    <tr>\n                        <th>{{ 'label.orderNumber'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.orderNumber }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.orderDate is not empty %}\n                    <tr>\n                        <th>{{ 'label.orderDate'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.orderDate|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.start is not empty %}\n                    <tr>\n                        <th>{{ 'label.project_start'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.start|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.end is not empty %}\n                    <tr>\n                        <th>{{ 'label.project_end'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.end|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                {% endif %}\n                {% if is_granted('budget', project) %}\n                    {% if project.hasBudget() %}\n                    <tr>\n                        <th>\n                            {{ 'label.budget'|trans }}\n                            {% if project.isMonthlyBudget() %}\n                                ({{ 'label.budgetType_month'|trans }})\n                            {% endif %}\n                        </th>\n                        <td colspan=\"3\">\n                            {{ project.getBudget()|money(project.customer.currency) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.hasTimeBudget() %}\n                    <tr>\n                        <th>\n                            {{ 'label.timeBudget'|trans }}\n                            {% if project.isMonthlyBudget() %}\n                                ({{ 'label.budgetType_month'|trans }})\n                            {% endif %}\n                        </th>\n                        <td colspan=\"3\">\n                            {{ project.getTimeBudget()|duration }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                {% endif %}\n                {% for metaField in project.visibleMetaFields|sort((a, b) => a.order <=> b.order) %}\n                    <tr>\n                        <th>{{ metaField.label|trans }}</th>\n                        <td colspan=\"3\">{{ widgets.form_type_value(metaField.type, metaField.value, project) }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {{ render(controller('App\\\\Controller\\\\ProjectController::activitiesAction', {'project': project.id, 'page': 1})) }}\n\n    {% if stats is not null %}\n        {{ include('embeds/budgets.html.twig', {'entity': project, 'stats': stats, 'currency': project.customer.currency}) }}\n    {% endif %}\n\n    {% if can_edit %}\n        {{ include('embeds/rates-table.html.twig', {'id': 'project_rates_box', 'entity': project, 'create_url': path('admin_project_rate_add', {'id': project.id}), 'delete_route': 'delete_project_rate', 'currency': project.customer.currency}) }}\n    {% endif %}\n\n    {% if teams is not null%}\n        {% set options = {'teams': teams, 'team': team} %}\n        {% if is_granted('permissions', project) %}\n            {% set options = options|merge({'route_create': path('project_team_create', {'id': project.id}), 'route_edit': path('admin_project_permissions', {'id': project.id})}) %}\n        {% endif %}\n        {% if project.customer.teams|length > 0 %}\n            {% set options = options|merge({'empty_message': 'team.project_visibility_inherited'}) %}\n        {% endif %}\n        {{ include('embeds/teams.html.twig', options) }}\n    {% endif %}\n\n    {% if comments is not null %}\n        {% set options = {'form': commentForm, 'comments': comments} %}\n        {% if can_edit %}\n            {% set options = options|merge({'route_pin': 'project_comment_pin', 'route_delete': 'project_comment_delete'}) %}\n        {% endif %}\n        {{ include('embeds/comments.html.twig', options) }}\n    {% endif %}\n\n{% endblock %}\n\n{% block javascripts %}\n    {{ parent() }}\n    <script type=\"text/javascript\">\n        document.addEventListener('kimai.initialized', function() {\n            KimaiReloadPageWidget.create('kimai.customerTeamUpdate kimai.projectTeamUpdate kimai.activityTeamUpdate kimai.projectUpdate kimai.teamUpdate kimai.customerUpdate kimai.rateUpdate');\n        });\n    </script>\n{% endblock %}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Customer;\nuse App\\Entity\\CustomerComment;\nuse App\\Entity\\CustomerMeta;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Tests\\DataFixtures\\CustomerFixtures;\nuse App\\Tests\\DataFixtures\\ProjectFixtures;\nuse App\\Tests\\DataFixtures\\TeamFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse App\\Tests\\Mocks\\CustomerTestMetaFieldSubscriberMock;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\DomCrawler\\Field\\ChoiceFormField;\n\n/**\n * @group integration\n */\nclass CustomerControllerTest extends ControllerBaseTest\n{\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/admin/customer/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/customer/');\n    }\n\n    public function testIndexAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/customer/');\n        $this->assertHasDataTable($client);\n    }\n\n    public function testIndexActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Customer $customer) {\n            $customer->setVisible(true);\n            $customer->setComment('I am a foobar with tralalalala some more content');\n            $customer->setMetaField((new CustomerMeta())->setName('location')->setValue('homeoffice'));\n            $customer->setMetaField((new CustomerMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_customer_admin', 5);\n    }\n\n    public function testExportIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/customer/export');\n    }\n\n    public function testExportAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/customer/export');\n        $this->assertExcelExportResponse($client, 'kimai-customers_');\n    }\n\n    public function testExportActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $this->request($client, '/admin/customer/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $form->getFormNode()->setAttribute('action', $this->createUrl('/admin/customer/export'));\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertExcelExportResponse($client, 'kimai-customers_');\n    }\n\n    public function testDetailsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        self::assertHasProgressbar($client);\n\n        $node = $client->getCrawler()->filter('div.box#customer_details_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_list_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#time_budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#comments_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box a.btn.btn-default');\n        self::assertEquals(2, $node->count());\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box');\n        self::assertEquals(1, $node->count());\n    }\n\n    public function testAddRateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/rate');\n        $form = $client->getCrawler()->filter('form[name=customer_rate_form]')->form();\n        $client->submit($form, [\n            'customer_rate_form' => [\n                'user' => null,\n                'rate' => 123.45,\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString('123.45', $node->text(null, true));\n    }\n\n    public function testAddCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'A beautiful and short comment **with some** markdown formatting',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('<p>A beautiful and short comment <strong>with some</strong> markdown formatting</p>', $node->html());\n    }\n\n    public function testDeleteCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'Blah foo bar',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-msg');\n        self::assertStringContainsString('Blah foo bar', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.confirmation-link');\n        self::assertStringEndsWith('/comment_delete', $node->attr('href'));\n\n        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/comment_delete');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n        self::assertStringContainsString('There were no comments posted yet', $node->html());\n    }\n\n    public function testPinCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'Blah foo bar',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Blah foo bar', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text a.btn.active');\n        self::assertEquals(0, $node->count());\n\n        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/comment_pin');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(1, $node->count());\n        self::assertEquals($this->createUrl('/admin/customer/' . $id . '/comment_pin'), $node->attr('href'));\n    }\n\n    public function testCreateDefaultTeamAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body');\n        self::assertStringContainsString('Visible to everyone, as no team was assigned yet.', $node->text(null, true));\n\n        $this->request($client, '/admin/customer/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-title');\n        self::assertStringContainsString('Only visible to the following teams and all admins.', $node->text(null, true));\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        // creating the default team a second time fails, as the name already exists\n        $this->request($client, '/admin/customer/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $this->assertHasFlashError($client, 'Changes could not be saved: Team already existing');\n    }\n\n    public function testProjectsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/projects/1');\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $customer = $em->getRepository(Customer::class)->find(1);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(9); // to trigger a second page (every third activity is hidden)\n        $fixture->setCustomers([$customer]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/1/projects/1');\n\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-tools ul.pagination li');\n        self::assertEquals(4, $node->count());\n\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-body table tbody tr');\n        self::assertEquals(5, $node->count());\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/create');\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n\n        $kernel = self::bootKernel();\n        $container = $kernel->getContainer();\n        $defaults = $container->getParameter('kimai.defaults')['customer'];\n        $this->assertNull($defaults['timezone']);\n\n        $editForm = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals($defaults['country'], $editForm->get('customer_edit_form[country]')->getValue());\n        $this->assertEquals($defaults['currency'], $editForm->get('customer_edit_form[currency]')->getValue());\n        $this->assertEquals(date_default_timezone_get(), $editForm->get('customer_edit_form[timezone]')->getValue());\n\n        $client->submit($form, [\n            'customer_edit_form' => [\n                'name' => 'Test Customer',\n            ]\n        ]);\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCreateActionShowsMetaFields()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        static::$kernel->getContainer()->get('event_dispatcher')->addSubscriber(new CustomerTestMetaFieldSubscriberMock());\n        $this->assertAccessIsGranted($client, '/admin/customer/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertTrue($form->has('customer_edit_form[metaFields][0][value]'));\n        $this->assertFalse($form->has('customer_edit_form[metaFields][1][value]'));\n    }\n\n    public function testEditAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/edit');\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals('Test', $form->get('customer_edit_form[name]')->getValue());\n        $client->submit($form, [\n            'customer_edit_form' => [\n                'name' => 'Test Customer 2'\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $this->request($client, '/admin/customer/1/edit');\n        $editForm = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals('Test Customer 2', $editForm->get('customer_edit_form[name]')->getValue());\n    }\n\n    public function testTeamPermissionAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $em = $this->getEntityManager();\n\n        /** @var Customer $customer */\n        $customer = $em->getRepository(Customer::class)->find(1);\n        self::assertEquals(0, $customer->getTeams()->count());\n\n        $fixture = new TeamFixtures();\n        $fixture->setAmount(2);\n        $fixture->setAddCustomer(false);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/1/permissions');\n        $form = $client->getCrawler()->filter('form[name=customer_team_permission_form]')->form();\n        /** @var ChoiceFormField $team1 */\n        $team1 = $form->get('customer_team_permission_form[teams][0]');\n        $team1->tick();\n        /** @var ChoiceFormField $team2 */\n        $team2 = $form->get('customer_team_permission_form[teams][1]');\n        $team2->tick();\n\n        $client->submit($form);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n\n        /** @var Customer $customer */\n        $customer = $em->getRepository(Customer::class)->find(1);\n        self::assertEquals(2, $customer->getTeams()->count());\n    }\n\n    public function testDeleteAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(1);\n        $customers = $this->importFixture($fixture);\n        $customer = $customers[0];\n        $id = $customer->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/edit');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->request($client, '/admin/customer/' . $id . '/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/' . $id . '/delete'), $form->getUri());\n        $client->submit($form);\n\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $this->request($client, '/admin/customer/' . $id . '/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntries()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getActivity()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/1/delete'), $form->getUri());\n        $client->submit($form);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/'));\n        $client->followRedirect();\n        $this->assertHasFlashDeleteSuccess($client);\n        $this->assertHasNoEntriesWithFilter($client);\n\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(0, \\count($timesheets));\n\n        $this->request($client, '/admin/customer/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntriesAndReplacement()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(1)->setIsVisible(true);\n        $customers = $this->importFixture($fixture);\n        $customer = $customers[0];\n        $id = $customer->getId();\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getProject()->getCustomer()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/1/delete'), $form->getUri());\n        $client->submit($form, [\n            'form' => [\n                'customer' => $id\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/'));\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals($id, $entry->getProject()->getCustomer()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    /**\n     * @dataProvider getValidationTestData\n     */\n    public function testValidationForCreateAction(array $formData, array $validationFields)\n    {\n        $this->assertFormHasValidationError(\n            User::ROLE_ADMIN,\n            '/admin/customer/create',\n            'form[name=customer_edit_form]',\n            $formData,\n            $validationFields\n        );\n    }\n\n    public function getValidationTestData()\n    {\n        return [\n            [\n                [\n                    'customer_edit_form' => [\n                        'name' => '',\n                        'country' => '00',\n                        'currency' => '00',\n                        'timezone' => 'XXX'\n                    ]\n                ],\n                [\n                    '#customer_edit_form_name',\n                    '#customer_edit_form_country',\n                    '#customer_edit_form_currency',\n                    '#customer_edit_form_timezone',\n                ]\n            ],\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Form\\Type\\DateRangeType;\nuse App\\Tests\\DataFixtures\\InvoiceTemplateFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\n\n/**\n * @group integration\n */\nclass InvoiceControllerTest extends ControllerBaseTest\n{\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->clearInvoiceFiles();\n    }\n\n    protected function tearDown(): void\n    {\n        parent::tearDown();\n        $this->clearInvoiceFiles();\n    }\n\n    private function clearInvoiceFiles()\n    {\n        $path = __DIR__ . '/../_data/invoices/';\n\n        if (is_dir($path)) {\n            $files = glob($path . '*');\n            foreach ($files as $file) {\n                unlink($file);\n            }\n        }\n    }\n\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/invoice/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/invoice/');\n    }\n\n    public function testIndexActionRedirectsToCreateTemplate()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $this->request($client, '/invoice/');\n        $this->assertIsRedirect($client, '/invoice/template/create');\n    }\n\n    public function testIndexActionHasErrorMessageOnEmptyQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $id = $templates[0]->getId();\n\n        $this->request($client, '/invoice/?customers[]=1&template=' . $id);\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasNoEntriesWithFilter($client);\n    }\n\n    public function testListTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/template');\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n    }\n\n    public function testCreateTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->request($client, '/invoice/template/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $client->submit($form, [\n            'invoice_template_form' => [\n                'name' => 'Test',\n                'title' => 'Test invoice template',\n                'company' => 'Company name',\n                'renderer' => 'default',\n                'calculator' => 'default',\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/invoice/template'));\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCopyTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        /** @var InvoiceTemplate $template */\n        $template = $templates[0];\n\n        $this->request($client, '/invoice/template/create/' . $template->getId());\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $values = $form->getPhpValues()['invoice_template_form'];\n        $this->assertEquals('Copy of ' . $template->getName(), $values['name']);\n        $this->assertEquals($template->getTitle(), $values['title']);\n        $this->assertEquals($template->getDueDays(), $values['dueDays']);\n        $this->assertEquals($template->getCalculator(), $values['calculator']);\n        $this->assertEquals($template->getVat(), $values['vat']);\n        $this->assertEquals($template->getRenderer(), $values['renderer']);\n        $this->assertEquals($template->getCompany(), $values['company']);\n        $this->assertEquals($template->getAddress(), $values['address']);\n        $this->assertEquals($template->getPaymentTerms(), $values['paymentTerms']);\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $template = $templates[0];\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_TEAMLEAD))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $timesheets = $this->importFixture($fixture);\n        foreach ($timesheets as $timesheet) {\n            $this->assertFalse($timesheet->isExported());\n        }\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/'));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // no warning should be displayed\n        $node = $client->getCrawler()->filter('div.callout.callout-warning.lead');\n        $this->assertEquals(0, $node->count());\n        // but the datatable with all timesheets\n        $this->assertDataTableRowCount($client, 'datatable_invoice', 20);\n\n        $urlParams = [\n            'daterange' => $dateRange,\n            'projects[]' => 1,\n            'markAsExported' => 1,\n        ];\n\n        $action = '/invoice/save-invoice/1/' . $template->getId() . '?' . http_build_query($urlParams);\n        $this->request($client, $action);\n        $this->assertIsRedirect($client);\n        $this->assertRedirectUrl($client, '/invoice/show?id=', false);\n        $client->followRedirect();\n        $this->assertDataTableRowCount($client, 'datatable_invoices', 1);\n\n        $em = $this->getEntityManager();\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertCount(20, $timesheets);\n        /** @var Timesheet $timesheet */\n        foreach ($timesheets as $timesheet) {\n            $this->assertTrue($timesheet->isExported());\n        }\n    }\n\n    public function testPrintAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $id = $templates[0]->getId();\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_TEAMLEAD))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $params = [\n            'daterange' => $dateRange,\n            'projects' => [1],\n        ];\n\n        $action = '/invoice/preview/1/' . $id . '?' . http_build_query($params);\n        $this->request($client, $action);\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $node = $client->getCrawler()->filter('body');\n        $this->assertEquals(1, $node->count());\n        $this->assertEquals('invoice_print', $node->getIterator()[0]->getAttribute('class'));\n    }\n\n    public function testCreateActionAsAdminWithDownloadAndStatusChangeAndDelete()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $template = $templates[0];\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_ADMIN))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/?preview='));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // no warning should be displayed\n        $node = $client->getCrawler()->filter('div.callout.callout-warning.lead');\n        $this->assertEquals(0, $node->count());\n        // but the datatable with all timesheets\n        $this->assertDataTableRowCount($client, 'datatable_invoice', 20);\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/?createInvoice=true'));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n            'projects' => [1],\n            'markAsExported' => 1,\n        ]);\n\n        $invoices = $this->getEntityManager()->getRepository(Invoice::class)->findAll();\n        $id = $invoices[0]->getId();\n\n        $this->assertIsRedirect($client, '/invoice/show?id=' . $id);\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasFlashSuccess($client);\n\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_invoices', 1);\n\n        // make sure the invoice is saved\n        $this->request($client, '/invoice/download/' . $id);\n        $response = $client->getResponse();\n        $this->assertTrue($response->isSuccessful());\n        self::assertInstanceOf(BinaryFileResponse::class, $response);\n        self::assertFileExists($response->getFile());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/pending');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/paid');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasValidationError(\n            $client,\n            '/invoice/change-status/' . $id . '/paid',\n            'form[name=invoice_payment_date_form]',\n            [\n                'invoice_payment_date_form' => [\n                    'paymentDate' => 'invalid'\n                ]\n            ],\n            ['#invoice_payment_date_form_paymentDate']\n        );\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_payment_date_form]')->form();\n        $client->submit($form, [\n            'invoice_payment_date_form' => [\n                'paymentDate' => (new \\DateTime())->format('Y-m-d')\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/new');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // this does not delete the invoice, because the token is wrong\n        $this->request($client, '/invoice/delete/' . $id . '/fghfkjhgkjhg');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n    }\n\n    public function testEditTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $template = $this->importFixture($fixture);\n        $id = $template[0]->getId();\n\n        $this->request($client, '/invoice/template/' . $id . '/edit?page=1');\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $client->submit($form, [\n            'invoice_template_form' => [\n                'name' => 'Test 2!',\n                'title' => 'Test invoice template',\n                'company' => 'Company name',\n                'renderer' => 'default',\n                'calculator' => 'default',\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/invoice/template'));\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testDeleteTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $template = $this->importFixture($fixture);\n        $id = $template[0]->getId();\n\n        $this->request($client, '/invoice/template/' . $id . '/delete');\n        $this->assertIsRedirect($client, '/invoice/template');\n        $client->followRedirect();\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasFlashSuccess($client);\n\n        $this->assertEquals(0, $this->getEntityManager()->getRepository(InvoiceTemplate::class)->count([]));\n    }\n\n    public function testUploadDocumentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_SUPER_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/document_upload');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $node = $client->getCrawler()->filter('form[name=invoice_document_upload_form]');\n        self::assertEquals(1, $node->count(), 'Could not find upload form');\n        // we do not test the upload here, just make sure that the action can be rendered properly\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Activity;\nuse App\\Entity\\ActivityMeta;\nuse App\\Entity\\ActivityRate;\nuse App\\Entity\\Project;\nuse App\\Entity\\ProjectComment;\nuse App\\Entity\\ProjectMeta;\nuse App\\Entity\\ProjectRate;\nuse App\\Entity\\Team;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Tests\\DataFixtures\\ActivityFixtures;\nuse App\\Tests\\DataFixtures\\ProjectFixtures;\nuse App\\Tests\\DataFixtures\\TeamFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse App\\Tests\\Mocks\\ProjectTestMetaFieldSubscriberMock;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\DomCrawler\\Field\\ChoiceFormField;\nuse Symfony\\Component\\HttpKernel\\HttpKernelBrowser;\n\n/**\n * @group integration\n */\nclass ProjectControllerTest extends ControllerBaseTest\n{\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/admin/project/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/project/');\n    }\n\n    public function testIndexAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/project/');\n        $this->assertHasDataTable($client);\n    }\n\n    public function testIndexActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Project $project) {\n            $project->setVisible(true);\n            $project->setComment('I am a foobar with tralalalala some more content');\n            $project->setMetaField((new ProjectMeta())->setName('location')->setValue('homeoffice'));\n            $project->setMetaField((new ProjectMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'customers' => [1],\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_project_admin', 5);\n    }\n\n    public function testExportIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/project/export');\n    }\n\n    public function testExportAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/project/export');\n        $this->assertExcelExportResponse($client, 'kimai-projects_');\n    }\n\n    public function testExportActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Project $project) {\n            $project->setVisible(true);\n            $project->setComment('I am a foobar with tralalalala some more content');\n            $project->setMetaField((new ProjectMeta())->setName('location')->setValue('homeoffice'));\n            $project->setMetaField((new ProjectMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $form->getFormNode()->setAttribute('action', $this->createUrl('/admin/project/export'));\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'customers' => [1],\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertExcelExportResponse($client, 'kimai-projects_');\n    }\n\n    public function testDetailsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n\n        $project = $em->getRepository(Project::class)->find(1);\n\n        $fixture = new TimesheetFixtures();\n        $fixture->setAmount(10);\n        $fixture->setProjects([$project]);\n        $fixture->setUser($this->getUserByRole(User::ROLE_ADMIN));\n        $this->importFixture($fixture);\n\n        $project = $em->getRepository(Project::class)->find(1);\n        $fixture = new ActivityFixtures();\n        $fixture->setAmount(6); // to trigger a second page\n        $fixture->setProjects([$project]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        self::assertHasProgressbar($client);\n\n        $node = $client->getCrawler()->filter('div.box#project_details_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#activity_list_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#time_budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#comments_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box a.btn.btn-default');\n        self::assertEquals(2, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n    }\n\n    public function testAddRateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAddRate($client, 123.45, 1);\n    }\n\n    protected function assertAddRate(HttpKernelBrowser $client, $rate, $projectId)\n    {\n        $this->assertAccessIsGranted($client, '/admin/project/' . $projectId . '/rate');\n        $form = $client->getCrawler()->filter('form[name=project_rate_form]')->form();\n        $client->submit($form, [\n            'project_rate_form' => [\n                'user' => null,\n                'rate' => $rate,\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/' . $projectId . '/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString($rate, $node->text(null, true));\n    }\n\n    public function testDuplicateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $project = $em->find(Project::class, 1);\n        $project->setMetaField((new ProjectMeta())->setName('foo')->setValue('bar'));\n        $project->setEnd(new \\DateTime());\n        $em->persist($project);\n        $team = new Team();\n        $team->addTeamlead($this->getUserByRole(User::ROLE_ADMIN));\n        $team->addProject($project);\n        $team->setName('project 1');\n        $em->persist($team);\n        $rate = new ProjectRate();\n        $rate->setProject($project);\n        $rate->setRate(123.45);\n        $em->persist($rate);\n        $activity = new Activity();\n        $activity->setName('blub');\n        $activity->setProject($project);\n        $activity->setMetaField((new ActivityMeta())->setName('blub')->setValue('blab'));\n        $em->persist($activity);\n        $rate = new ActivityRate();\n        $rate->setActivity($activity);\n        $rate->setRate(123.45);\n        $em->persist($rate);\n        $em->flush();\n\n        $this->request($client, '/admin/project/1/duplicate');\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString('123.45', $node->text(null, true));\n    }\n\n    public function testAddCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'A beautiful and long comment **with some** markdown formatting',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('<p>A beautiful and long comment <strong>with some</strong> markdown formatting</p>', $node->html());\n    }\n\n    public function testDeleteCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'Foo bar blub',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Foo bar blub', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.confirmation-link');\n\n        $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_delete'), $node->attr('href'));\n        $this->request($client, '/admin/project/' . $id . '/comment_delete');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n        self::assertStringContainsString('There were no comments posted yet', $node->html());\n    }\n\n    public function testPinCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'Foo bar blub',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Foo bar blub', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(0, $node->count());\n\n        $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $this->request($client, '/admin/project/' . $id . '/comment_pin');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(1, $node->count());\n        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_pin'), $node->attr('href'));\n    }\n\n    public function testCreateDefaultTeamAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body');\n        self::assertStringContainsString('Visible to everyone, as no team was assigned yet.', $node->text(null, true));\n\n        $this->request($client, '/admin/project/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-title');\n        self::assertStringContainsString('Only visible to the following teams and all admins.', $node->text(null, true));\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        // creating the default team a second time fails, as the name already exists\n        $this->request($client, '/admin/project/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $this->assertHasFlashError($client, 'Changes could not be saved: Team already existing');\n    }\n\n    public function testActivitiesAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/activities/1');\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools ul.pagination li');\n        self::assertEquals(0, $node->count());\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools a.modal-ajax-form.open-edit');\n        self::assertEquals(1, $node->count());\n\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $project = $em->getRepository(Project::class)->find(1);\n        $fixture = new ActivityFixtures();\n        $fixture->setAmount(9); // to trigger a second page (every third activity is hidden)\n        $fixture->setProjects([$project]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/activities/1');\n\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools ul.pagination li');\n        self::assertEquals(4, $node->count());\n\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-body table tbody tr');\n        self::assertEquals(5, $node->count());\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/create');\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $client->submit($form, [\n            'project_edit_form' => [\n                'name' => 'Test 2',\n                'customer' => 1,\n            ]\n        ]);\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCreateActionShowsMetaFields()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        static::$kernel->getContainer()->get('event_dispatcher')->addSubscriber(new ProjectTestMetaFieldSubscriberMock());\n        $this->assertAccessIsGranted($client, '/admin/project/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertTrue($form->has('project_edit_form[metaFields][0][value]'));\n        $this->assertFalse($form->has('project_edit_form[metaFields][1][value]'));\n    }\n\n    public function testEditAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/edit');\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertEquals('Test', $form->get('project_edit_form[name]')->getValue());\n        $client->submit($form, [\n            'project_edit_form' => ['name' => 'Test 2']\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $this->request($client, '/admin/project/1/edit');\n        $editForm = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertEquals('Test 2', $editForm->get('project_edit_form[name]')->getValue());\n    }\n\n    public function testTeamPermissionAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $em = $this->getEntityManager();\n\n        /** @var Project $project */\n        $project = $em->getRepository(Project::class)->find(1);\n        self::assertEquals(0, $project->getTeams()->count());\n\n        $fixture = new TeamFixtures();\n        $fixture->setAmount(2);\n        $fixture->setAddCustomer(false);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/permissions');\n        $form = $client->getCrawler()->filter('form[name=project_team_permission_form]')->form();\n        /** @var ChoiceFormField $team1 */\n        $team1 = $form->get('project_team_permission_form[teams][0]');\n        $team1->tick();\n        /** @var ChoiceFormField $team2 */\n        $team2 = $form->get('project_team_permission_form[teams][1]');\n        $team2->tick();\n\n        $client->submit($form);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n\n        /** @var Project $project */\n        $project = $em->getRepository(Project::class)->find(1);\n        self::assertEquals(2, $project->getTeams()->count());\n    }\n\n    public function testDeleteAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(1);\n        /** @var Project[] $projects */\n        $projects = $this->importFixture($fixture);\n        $id = $projects[0]->getId();\n\n        $this->request($client, '/admin/project/' . $id . '/edit');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->request($client, '/admin/project/' . $id . '/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/' . $id . '/delete'), $form->getUri());\n        $client->submit($form);\n\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $this->request($client, '/admin/project/' . $id . '/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntries()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getActivity()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/1/delete'), $form->getUri());\n        $client->submit($form);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/'));\n        $client->followRedirect();\n        $this->assertHasFlashDeleteSuccess($client);\n        $this->assertHasNoEntriesWithFilter($client);\n\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(0, \\count($timesheets));\n\n        $this->request($client, '/admin/project/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntriesAndReplacement()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(1)->setIsVisible(true);\n        $projects = $this->importFixture($fixture);\n        $id = $projects[0]->getId();\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getProject()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/1/delete'), $form->getUri());\n        $client->submit($form, [\n            'form' => [\n                'project' => $id\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/'));\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals($id, $entry->getProject()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    /**\n     * @dataProvider getValidationTestData\n     */\n    public function testValidationForCreateAction(array $formData, array $validationFields)\n    {\n        $this->assertFormHasValidationError(\n            User::ROLE_ADMIN,\n            '/admin/project/create',\n            'form[name=project_edit_form]',\n            $formData,\n            $validationFields\n        );\n    }\n\n    public function getValidationTestData()\n    {\n        return [\n            [\n                [\n                    'project_edit_form' => [\n                        'name' => '',\n                        'customer' => 0,\n                    ]\n                ],\n                [\n                    '#project_edit_form_name',\n                    '#project_edit_form_customer',\n                ]\n            ],\n        ];\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" version=\"1.2\">\n  <file source-language=\"en\" target-language=\"de\" datatype=\"plaintext\" original=\"flashmessages.en.xlf\">\n    <body>\n      <trans-unit id=\"S9k1S7Z\" resname=\"warning\">\n        <source>warning</source>\n        <target>Warnung</target>\n      </trans-unit>\n      <trans-unit id=\"WmrEP_5\" resname=\"timesheet.stop.success\">\n        <source>timesheet.stop.success</source>\n        <target>Zeitmessung wurde gestoppt</target>\n      </trans-unit>\n      <trans-unit id=\"NPBnpK_\" resname=\"timesheet.stop.error\">\n        <source>timesheet.stop.error</source>\n        <target>Zeitmessung konnte nicht gestoppt werden</target>\n      </trans-unit>\n      <trans-unit id=\"CCUoZga\" resname=\"timesheet.start.success\">\n        <source>timesheet.start.success</source>\n        <target>Zeitmessung wurde gestartet</target>\n      </trans-unit>\n      <trans-unit id=\"3w9tuox\" resname=\"timesheet.start.error\">\n        <source>timesheet.start.error</source>\n        <target>Zeitmessung konnte nicht gestartet werden</target>\n      </trans-unit>\n      <trans-unit id=\"srhs0gp\" resname=\"timesheet.start.exceeded_limit\">\n        <source>timesheet.start.exceeded_limit</source>\n        <target>Das Limit aktiver Zeitmessungen wurde erreicht, bitte stoppen Sie mindestens eine laufende Zeitmessung.</target>\n      </trans-unit>\n      <trans-unit id=\"kPINWEK\" resname=\"timesheet.locked.warning\">\n        <source>timesheet.locked.warning</source>\n        <target>Sie bearbeiten einen exportierten Eintrag</target>\n      </trans-unit>\n      <trans-unit id=\"72Ih8zO\" resname=\"action.update.success\">\n        <source>action.update.success</source>\n        <target>\u00c4nderungen gespeichert</target>\n      </trans-unit>\n      <trans-unit id=\"xeu1LSy\" resname=\"action.update.error\">\n        <source>action.update.error</source>\n        <target>\u00c4nderungen konnten nicht gespeichert werden: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"YV50HDB\" resname=\"action.delete.success\">\n        <source>action.delete.success</source>\n        <target>Eintrag wurde gel\u00f6scht</target>\n      </trans-unit>\n      <trans-unit id=\"mW91Tmb\" resname=\"action.delete.error\">\n        <source>action.delete.error</source>\n        <target>Eintrag konnte nicht gel\u00f6scht werden: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"B_cz49z\" resname=\"invoice.first_template\">\n        <source>invoice.first_template</source>\n        <target>Bitte legen Sie zun\u00e4chst eine Rechnungsvorlage an</target>\n      </trans-unit>\n      <trans-unit id=\"wejAEcR\" resname=\"action.upload.error\">\n        <source>action.upload.error</source>\n        <target>Die Datei konnte nicht hochgeladen bzw. gespeichert werden: %reason%</target>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" version=\"1.2\">\n  <file source-language=\"en\" target-language=\"en\" datatype=\"plaintext\" original=\"flashmessages.en.xlf\">\n    <body>\n      <trans-unit id=\"S9k1S7Z\" resname=\"warning\">\n        <source>warning</source>\n        <target>Warning</target>\n      </trans-unit>\n      <trans-unit id=\"WmrEP_5\" resname=\"timesheet.stop.success\">\n        <source>timesheet.stop.success</source>\n        <target>Time recording was stopped</target>\n      </trans-unit>\n      <trans-unit id=\"NPBnpK_\" resname=\"timesheet.stop.error\">\n        <source>timesheet.stop.error</source>\n        <target>Time recording could not be stopped</target>\n      </trans-unit>\n      <trans-unit id=\"CCUoZga\" resname=\"timesheet.start.success\">\n        <source>timesheet.start.success</source>\n        <target>Time recording was started</target>\n      </trans-unit>\n      <trans-unit id=\"3w9tuox\" resname=\"timesheet.start.error\">\n        <source>timesheet.start.error</source>\n        <target>Time recording could not be started</target>\n      </trans-unit>\n      <trans-unit id=\"srhs0gp\" resname=\"timesheet.start.exceeded_limit\">\n        <source>timesheet.start.exceeded_limit</source>\n        <target>The limit of active time records has been reached, please stop at least one running time measurement first.</target>\n      </trans-unit>\n      <trans-unit id=\"kPINWEK\" resname=\"timesheet.locked.warning\">\n        <source>timesheet.locked.warning</source>\n        <target>You are editing an exported record</target>\n      </trans-unit>\n      <trans-unit id=\"72Ih8zO\" resname=\"action.update.success\">\n        <source>action.update.success</source>\n        <target>Saved changes</target>\n      </trans-unit>\n      <trans-unit id=\"xeu1LSy\" resname=\"action.update.error\">\n        <source>action.update.error</source>\n        <target>Changes could not be saved: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"YV50HDB\" resname=\"action.delete.success\">\n        <source>action.delete.success</source>\n        <target>Entry was deleted</target>\n      </trans-unit>\n      <trans-unit id=\"mW91Tmb\" resname=\"action.delete.error\">\n        <source>action.delete.error</source>\n        <target>Entry could not be deleted: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"B_cz49z\" resname=\"invoice.first_template\">\n        <source>invoice.first_template</source>\n        <target>Please create an invoice template first</target>\n      </trans-unit>\n      <trans-unit id=\"wejAEcR\" resname=\"action.upload.error\">\n        <source>action.upload.error</source>\n        <target>The file could not be uploaded or saved: %reason%</target>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Customer\\CustomerStatisticService;\nuse App\\Entity\\Customer;\nuse App\\Entity\\CustomerComment;\nuse App\\Entity\\CustomerRate;\nuse App\\Entity\\MetaTableTypeInterface;\nuse App\\Entity\\Team;\nuse App\\Event\\CustomerMetaDefinitionEvent;\nuse App\\Event\\CustomerMetaDisplayEvent;\nuse App\\Export\\Spreadsheet\\EntityWithMetaFieldsExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\CustomerCommentForm;\nuse App\\Form\\CustomerEditForm;\nuse App\\Form\\CustomerRateForm;\nuse App\\Form\\CustomerTeamPermissionForm;\nuse App\\Form\\Toolbar\\CustomerToolbarForm;\nuse App\\Form\\Type\\CustomerType;\nuse App\\Repository\\CustomerRateRepository;\nuse App\\Repository\\CustomerRepository;\nuse App\\Repository\\ProjectRepository;\nuse App\\Repository\\Query\\CustomerQuery;\nuse App\\Repository\\Query\\ProjectQuery;\nuse App\\Repository\\TeamRepository;\nuse Pagerfanta\\Pagerfanta;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * Controller used to manage customer in the admin part of the site.\n *\n * @Route(path=\"/admin/customer\")\n * @Security(\"is_granted('view_customer') or is_granted('view_teamlead_customer') or is_granted('view_team_customer')\")\n */\nfinal class CustomerController extends AbstractController\n{\n    /**\n     * @var CustomerRepository\n     */\n    private $repository;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n\n    public function __construct(CustomerRepository $repository, EventDispatcherInterface $dispatcher)\n    {\n        $this->repository = $repository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", defaults={\"page\": 1}, name=\"admin_customer\", methods={\"GET\"})\n     * @Route(path=\"/page/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_customer_paginated\", methods={\"GET\"})\n     */\n    public function indexAction($page, Request $request)\n    {\n        $query = new CustomerQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n\n        $form = $this->getToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_customer');\n        }\n\n        $entries = $this->repository->getPagerfantaForQuery($query);\n\n        return $this->render('customer/index.html.twig', [\n            'entries' => $entries,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'metaColumns' => $this->findMetaColumns($query),\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @param CustomerQuery $query\n     * @return MetaTableTypeInterface[]\n     */\n    private function findMetaColumns(CustomerQuery $query): array\n    {\n        $event = new CustomerMetaDisplayEvent($query, CustomerMetaDisplayEvent::CUSTOMER);\n        $this->dispatcher->dispatch($event);\n\n        return $event->getFields();\n    }\n\n    /**\n     * @Route(path=\"/create\", name=\"admin_customer_create\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('create_customer')\")\n     */\n    public function createAction(Request $request, SystemConfiguration $configuration)\n    {\n        $timezone = date_default_timezone_get();\n        if (null !== $configuration->getCustomerDefaultTimezone()) {\n            $timezone = $configuration->getCustomerDefaultTimezone();\n        }\n\n        $customer = new Customer();\n        $customer->setCountry($configuration->getCustomerDefaultCountry());\n        $customer->setCurrency($configuration->getCustomerDefaultCurrency());\n        $customer->setTimezone($timezone);\n\n        return $this->renderCustomerForm($customer, $request);\n    }\n\n    /**\n     * @Route(path=\"/{id}/permissions\", name=\"admin_customer_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('permissions', customer)\")\n     */\n    public function teamPermissionsAction(Customer $customer, Request $request)\n    {\n        $form = $this->createForm(CustomerTeamPermissionForm::class, $customer, [\n            'action' => $this->generateUrl('admin_customer_permissions', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveCustomer($customer);\n                $this->flashSuccess('action.update.success');\n\n                if ($this->isGranted('view', $customer)) {\n                    return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n                }\n\n                return $this->redirectToRoute('admin_customer');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/permissions.html.twig', [\n            'customer' => $customer,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_delete/{token}\", name=\"customer_comment_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n     */\n    public function deleteCommentAction(CustomerComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $customerId = $comment->getCustomer()->getId();\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('customer.delete_comment', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        try {\n            $this->repository->deleteComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_add\", name=\"customer_comment_add\", methods={\"POST\"})\n     * @Security(\"is_granted('comments_create', customer)\")\n     */\n    public function addCommentAction(Customer $customer, Request $request)\n    {\n        $comment = new CustomerComment();\n        $form = $this->getCommentForm($customer, $comment);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveComment($comment);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_pin/{token}\", name=\"customer_comment_pin\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n     */\n    public function pinCommentAction(CustomerComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $customerId = $comment->getCustomer()->getId();\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('customer.pin_comment', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        $comment->setPinned(!$comment->isPinned());\n        try {\n            $this->repository->saveComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/create_team\", name=\"customer_team_create\", methods={\"GET\"})\n     * @Security(\"is_granted('create_team') and is_granted('permissions', customer)\")\n     */\n    public function createDefaultTeamAction(Customer $customer, TeamRepository $teamRepository)\n    {\n        $defaultTeam = $teamRepository->findOneBy(['name' => $customer->getName()]);\n        if (null !== $defaultTeam) {\n            $this->flashError('action.update.error', ['%reason%' => 'Team already existing']);\n\n            return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n        }\n\n        $defaultTeam = new Team();\n        $defaultTeam->setName($customer->getName());\n        $defaultTeam->addTeamlead($this->getUser());\n        $defaultTeam->addCustomer($customer);\n\n        try {\n            $teamRepository->saveTeam($defaultTeam);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/projects/{page}\", defaults={\"page\": 1}, name=\"customer_projects\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', customer)\")\n     */\n    public function projectsAction(Customer $customer, int $page, ProjectRepository $projectRepository)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n        $query->setPageSize(5);\n        $query->addCustomer($customer);\n        $query->setShowBoth();\n        $query->addOrderGroup('visible', ProjectQuery::ORDER_DESC);\n        $query->addOrderGroup('name', ProjectQuery::ORDER_ASC);\n\n        /* @var $entries Pagerfanta */\n        $entries = $projectRepository->getPagerfantaForQuery($query);\n\n        return $this->render('customer/embed_projects.html.twig', [\n            'customer' => $customer,\n            'projects' => $entries,\n            'page' => $page,\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/details\", name=\"customer_details\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', customer)\")\n     */\n    public function detailsAction(Customer $customer, TeamRepository $teamRepository, CustomerRateRepository $rateRepository, CustomerStatisticService $statisticService)\n    {\n        $event = new CustomerMetaDefinitionEvent($customer);\n        $this->dispatcher->dispatch($event);\n\n        $stats = null;\n        $timezone = null;\n        $defaultTeam = null;\n        $commentForm = null;\n        $attachments = [];\n        $comments = null;\n        $teams = null;\n        $projects = null;\n        $rates = [];\n        $now = $this->getDateTimeFactory()->createDateTime();\n\n        if ($this->isGranted('edit', $customer)) {\n            if ($this->isGranted('create_team')) {\n                $defaultTeam = $teamRepository->findOneBy(['name' => $customer->getName()]);\n            }\n            $rates = $rateRepository->getRatesForCustomer($customer);\n        }\n\n        if (null !== $customer->getTimezone()) {\n            $timezone = new \\DateTimeZone($customer->getTimezone());\n        }\n\n        if ($this->isGranted('budget', $customer)) {\n            $stats = $statisticService->getBudgetStatisticModel($customer, $now);\n        }\n\n        if ($this->isGranted('comments', $customer)) {\n            $comments = $this->repository->getComments($customer);\n        }\n\n        if ($this->isGranted('comments_create', $customer)) {\n            $commentForm = $this->getCommentForm($customer, new CustomerComment())->createView();\n        }\n\n        if ($this->isGranted('permissions', $customer) || $this->isGranted('details', $customer) || $this->isGranted('view_team')) {\n            $teams = $customer->getTeams();\n        }\n\n        return $this->render('customer/details.html.twig', [\n            'customer' => $customer,\n            'comments' => $comments,\n            'commentForm' => $commentForm,\n            'attachments' => $attachments,\n            'stats' => $stats,\n            'team' => $defaultTeam,\n            'teams' => $teams,\n            'customer_now' => new \\DateTime('now', $timezone),\n            'rates' => $rates,\n            'now' => $now,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/rate\", name=\"admin_customer_rate_add\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', customer)\")\n     */\n    public function addRateAction(Customer $customer, Request $request, CustomerRateRepository $repository)\n    {\n        $rate = new CustomerRate();\n        $rate->setCustomer($customer);\n\n        $form = $this->createForm(CustomerRateForm::class, $rate, [\n            'action' => $this->generateUrl('admin_customer_rate_add', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $repository->saveRate($rate);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/rates.html.twig', [\n            'customer' => $customer,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/edit\", name=\"admin_customer_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', customer)\")\n     */\n    public function editAction(Customer $customer, Request $request)\n    {\n        return $this->renderCustomerForm($customer, $request);\n    }\n\n    /**\n     * @Route(path=\"/{id}/delete\", name=\"admin_customer_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('delete', customer)\")\n     */\n    public function deleteAction(Customer $customer, Request $request, CustomerStatisticService $statisticService)\n    {\n        $stats = $statisticService->getCustomerStatistics($customer);\n\n        $deleteForm = $this->createFormBuilder(null, [\n                'attr' => [\n                    'data-form-event' => 'kimai.customerDelete',\n                    'data-msg-success' => 'action.delete.success',\n                    'data-msg-error' => 'action.delete.error',\n                ]\n            ])\n            ->add('customer', CustomerType::class, [\n                'query_builder_for_user' => true,\n                'ignore_customer' => $customer,\n                'required' => false,\n            ])\n            ->setAction($this->generateUrl('admin_customer_delete', ['id' => $customer->getId()]))\n            ->setMethod('POST')\n            ->getForm();\n\n        $deleteForm->handleRequest($request);\n\n        if ($deleteForm->isSubmitted() && $deleteForm->isValid()) {\n            try {\n                $this->repository->deleteCustomer($customer, $deleteForm->get('customer')->getData());\n                $this->flashSuccess('action.delete.success');\n            } catch (\\Exception $ex) {\n                $this->flashDeleteException($ex);\n            }\n\n            return $this->redirectToRoute('admin_customer');\n        }\n\n        return $this->render('customer/delete.html.twig', [\n            'customer' => $customer,\n            'stats' => $stats,\n            'form' => $deleteForm->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"customer_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, EntityWithMetaFieldsExporter $exporter)\n    {\n        $query = new CustomerQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        if (!$form->isValid()) {\n            $query->resetByFormError($form->getErrors());\n        }\n\n        $entries = $this->repository->getCustomersForQuery($query);\n\n        $spreadsheet = $exporter->export(\n            Customer::class,\n            $entries,\n            new CustomerMetaDisplayEvent($query, CustomerMetaDisplayEvent::EXPORT)\n        );\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-customers');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @param Customer $customer\n     * @param Request $request\n     * @return RedirectResponse|Response\n     */\n    private function renderCustomerForm(Customer $customer, Request $request)\n    {\n        $editForm = $this->createEditForm($customer);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->repository->saveCustomer($customer);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('customer_details', ['id' => $customer->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('customer/edit.html.twig', [\n            'customer' => $customer,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(CustomerQuery $query): FormInterface\n    {\n        return $this->createForm(CustomerToolbarForm::class, $query, [\n            'action' => $this->generateUrl('admin_customer', [\n                'page' => $query->getPage(),\n            ]),\n            'method' => 'GET',\n        ]);\n    }\n\n    private function getCommentForm(Customer $customer, CustomerComment $comment): FormInterface\n    {\n        if (null === $comment->getId()) {\n            $comment->setCustomer($customer);\n            $comment->setCreatedBy($this->getUser());\n        }\n\n        return $this->createForm(CustomerCommentForm::class, $comment, [\n            'action' => $this->generateUrl('customer_comment_add', ['id' => $customer->getId()]),\n            'method' => 'POST',\n        ]);\n    }\n\n    private function createEditForm(Customer $customer): FormInterface\n    {\n        $event = new CustomerMetaDefinitionEvent($customer);\n        $this->dispatcher->dispatch($event);\n\n        if ($customer->getId() === null) {\n            $url = $this->generateUrl('admin_customer_create');\n        } else {\n            $url = $this->generateUrl('admin_customer_edit', ['id' => $customer->getId()]);\n        }\n\n        return $this->createForm(CustomerEditForm::class, $customer, [\n            'action' => $url,\n            'method' => 'POST',\n            'include_budget' => $this->isGranted('budget', $customer)\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Utils\\FileHelper;\nuse Composer\\InstalledVersions;\nuse PackageVersions\\Versions;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * @Route(path=\"/doctor\")\n * @Security(\"is_granted('system_information')\")\n */\nclass DoctorController extends AbstractController\n{\n    /**\n     * PHP extensions which Kimai needs for runtime.\n     * Some are not a hard requiremenet, but some functions might not work as expected.\n     */\n    public const REQUIRED_EXTENSIONS = [\n        'intl',\n        'json',\n        'mbstring',\n        'pdo',\n        'zip',\n        'gd',\n        'xml'\n    ];\n\n    /**\n     * Directories which need to be writable by the webserver.\n     */\n    public const DIRECTORIES_WRITABLE = [\n        'var/cache/',\n        'var/log/',\n    ];\n\n    private $projectDirectory;\n    private $environment;\n    private $fileHelper;\n\n    public function __construct(string $projectDirectory, string $kernelEnvironment, FileHelper $fileHelper)\n    {\n        $this->projectDirectory = $projectDirectory;\n        $this->environment = $kernelEnvironment;\n        $this->fileHelper = $fileHelper;\n    }\n\n    /**\n     * @Route(path=\"/flush-log/{token}\", name=\"doctor_flush_log\", methods={\"GET\"})\n     * @Security(\"is_granted('system_configuration')\")\n     */\n    public function deleteLogfileAction(string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('doctor.flush_log', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('doctor');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        $logfile = $this->getLogFilename();\n\n        if (file_exists($logfile)) {\n            if (!is_writable($logfile)) {\n                $this->flashError('action.delete.error', ['%reason%' => 'Logfile cannot be written']);\n            } else {\n                if (false === file_put_contents($logfile, '')) {\n                    $this->flashError('action.delete.error', ['%reason%' => 'Failed writing to logfile']);\n                } else {\n                    $this->flashSuccess('action.delete.success');\n                }\n            }\n        }\n\n        return $this->redirectToRoute('doctor');\n    }\n\n    /**\n     * @Route(path=\"\", name=\"doctor\", methods={\"GET\"})\n     */\n    public function index(): Response\n    {\n        $logLines = 100;\n\n        $canDeleteLogfile = $this->isGranted('system_configuration') && is_writable($this->getLogFilename());\n\n        return $this->render('doctor/index.html.twig', array_merge(\n            [\n                'modules' => get_loaded_extensions(),\n                'environment' => $this->environment,\n                'info' => $this->getPhpInfo(),\n                'settings' => $this->getIniSettings(),\n                'extensions' => $this->getLoadedExtensions(),\n                'directories' => $this->getFilePermissions(),\n                'log_delete' => $canDeleteLogfile,\n                'logs' => $this->getLog(),\n                'logLines' => $logLines,\n                'logSize' => $this->getLogSize(),\n                'composer' => $this->getComposerPackages(),\n            ]\n        ));\n    }\n\n    private function getComposerPackages(): array\n    {\n        $versions = [];\n\n        if (class_exists(InstalledVersions::class)) {\n            $rootPackage = InstalledVersions::getRootPackage()['name'];\n            foreach (InstalledVersions::getInstalledPackages() as $package) {\n                $versions[$package] = InstalledVersions::getPrettyVersion($package);\n            }\n        } else {\n            @trigger_error('Please upgrade your Composer to 2.x', E_USER_DEPRECATED);\n\n            // @deprecated since 1.14, will be removed with 2.0\n            $rootPackage = Versions::rootPackageName();\n            foreach (Versions::VERSIONS as $name => $version) {\n                $versions[$name] = explode('@', $version)[0];\n            }\n        }\n\n        // remove kimai from the package list\n        $versions = array_filter($versions, function ($version, $name) use ($rootPackage) {\n            if ($name === $rootPackage) {\n                return false;\n            }\n\n            if ($version === null || $version === '*') {\n                return false;\n            }\n\n            return true;\n        }, ARRAY_FILTER_USE_BOTH);\n\n        ksort($versions);\n\n        return $versions;\n    }\n\n    private function getLoadedExtensions()\n    {\n        $results = [];\n\n        foreach (self::REQUIRED_EXTENSIONS as $extName) {\n            $results[$extName] = false;\n            if (\\extension_loaded($extName)) {\n                $results[$extName] = true;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getLogSize(): int\n    {\n        $logfile = $this->getLogFilename();\n\n        return file_exists($logfile) ? filesize($logfile) : 0;\n    }\n\n    private function getLogFilename(): string\n    {\n        $logfileName = 'var/log/' . $this->environment . '.log';\n\n        return $this->projectDirectory . '/' . $logfileName;\n    }\n\n    private function getLog(int $lines = 100): array\n    {\n        $logfile = $this->getLogFilename();\n\n        if (!file_exists($logfile)) {\n            return ['Missing logfile'];\n        }\n\n        if (!is_readable($logfile)) {\n            return ['ATTENTION: Cannot read log file'];\n        }\n\n        $file = new \\SplFileObject($logfile, 'r');\n\n        if ($file->getSize() === 0) {\n            return ['Empty logfile'];\n        }\n\n        $file->seek($file->getSize());\n        $last_line = $file->key();\n        while ($last_line - $lines < 0) {\n            $lines--;\n        }\n        $iterator = new \\LimitIterator($file, $last_line - $lines, $last_line);\n\n        try {\n            $result = iterator_to_array($iterator);\n        } catch (\\Exception $ex) {\n            $result = ['ATTENTION: Failed reading log file'];\n        }\n\n        if (!is_writable($logfile)) {\n            $result[] = 'ATTENTION: Logfile is not writable';\n        }\n\n        return $result;\n    }\n\n    private function getFilePermissions()\n    {\n        $testPaths = [];\n        $baseDir = $this->projectDirectory . DIRECTORY_SEPARATOR;\n\n        foreach (self::DIRECTORIES_WRITABLE as $path) {\n            $fullPath = $baseDir . $path;\n            $fullUri = realpath($fullPath);\n\n            if ($fullUri === false && !file_exists($fullPath)) {\n                @mkdir($fullPath);\n                clearstatcache(true);\n                $fullUri = realpath($fullPath);\n            }\n\n            $testPaths[] = $fullUri;\n        }\n\n        $results = [];\n        $testPaths[] = $this->fileHelper->getDataDirectory();\n        foreach ($testPaths as $fullUri) {\n            $fullUri = rtrim($fullUri, DIRECTORY_SEPARATOR);\n            $tmp = str_replace($baseDir, '', $fullUri) . DIRECTORY_SEPARATOR;\n            if ($fullUri !== false && is_readable($fullUri) && is_writable($fullUri)) {\n                $results[$tmp] = true;\n            } else {\n                $results[$tmp] = false;\n            }\n        }\n\n        return $results;\n    }\n\n    private function getIniSettings()\n    {\n        $ini = [\n            'allow_url_fopen',\n            'allow_url_include',\n            'default_charset',\n            'default_mimetype',\n            'display_errors',\n            'error_log',\n            'error_reporting',\n            'log_errors',\n            'max_execution_time',\n            'memory_limit',\n            'open_basedir',\n            'post_max_size',\n            'sys_temp_dir',\n            'date.timezone',\n        ];\n\n        $settings = [];\n        foreach ($ini as $name) {\n            try {\n                $settings[$name] = ini_get($name);\n            } catch (\\Exception $ex) {\n                $settings[$name] = \"Couldn't load ini setting: \" . $ex->getMessage();\n            }\n        }\n\n        return $settings;\n    }\n\n    /**\n     * @author https://php.net/manual/en/function.phpinfo.php#117961\n     * @return array\n     */\n    private function getPhpInfo()\n    {\n        $plainText = function ($input) {\n            return trim(html_entity_decode(strip_tags($input)));\n        };\n\n        ob_start();\n        phpinfo(1);\n\n        $phpinfo = ['phpinfo' => []];\n\n        if (preg_match_all(\n            '#(?:<h2.*?>(?:<a.*?>)?(.*?)(?:<\\/a>)?<\\/h2>)|' .\n            '(?:<tr.*?><t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>(?:<t[hd].*?>(.*?)\\s*</t[hd]>)?)?</tr>)#s',\n            ob_get_clean(),\n            $matches,\n            PREG_SET_ORDER\n        )) {\n            foreach ($matches as $match) {\n                $fn = $plainText;\n                if (isset($match[3])) {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][$fn($match[2])] = isset($match[4]) ? [$fn($match[3]), $fn($match[4])] : $fn($match[3]);\n                } else {\n                    $keys1 = array_keys($phpinfo);\n                    $phpinfo[end($keys1)][] = $fn($match[2]);\n                }\n            }\n        }\n\n        $phpInfo = $phpinfo['phpinfo'];\n        unset($phpInfo[0]);\n        unset($phpInfo[1]);\n\n        return $phpInfo;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Export\\Spreadsheet\\AnnotatedObjectExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\InvoiceDocumentUploadForm;\nuse App\\Form\\InvoicePaymentDateForm;\nuse App\\Form\\InvoiceTemplateForm;\nuse App\\Form\\Toolbar\\InvoiceArchiveForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarSimpleForm;\nuse App\\Invoice\\ServiceInvoice;\nuse App\\Repository\\InvoiceDocumentRepository;\nuse App\\Repository\\InvoiceRepository;\nuse App\\Repository\\InvoiceTemplateRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Repository\\Query\\InvoiceArchiveQuery;\nuse App\\Repository\\Query\\InvoiceQuery;\nuse Exception;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * Controller used to create invoices and manage invoice templates.\n *\n * @Route(path=\"/invoice\")\n * @Security(\"is_granted('view_invoice')\")\n */\nfinal class InvoiceController extends AbstractController\n{\n    /**\n     * @var ServiceInvoice\n     */\n    private $service;\n    /**\n     * @var InvoiceTemplateRepository\n     */\n    private $templateRepository;\n    /**\n     * @var InvoiceRepository\n     */\n    private $invoiceRepository;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n\n    public function __construct(ServiceInvoice $service, InvoiceTemplateRepository $templateRepository, InvoiceRepository $invoiceRepository, EventDispatcherInterface $dispatcher)\n    {\n        $this->service = $service;\n        $this->templateRepository = $templateRepository;\n        $this->invoiceRepository = $invoiceRepository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", name=\"invoice\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function indexAction(Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            if ($this->isGranted('manage_invoice_template')) {\n                return $this->redirectToRoute('admin_invoice_template_create');\n            }\n            $this->flashWarning('invoice.first_template');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $models = [];\n        $total = 0;\n        $searched = false;\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            if ($request->query->has('createInvoice')) {\n                try {\n                    return $this->renderInvoice($query, $request);\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError('action.update.error', ['%reason%' => 'check doctor/logs']);\n                }\n            }\n\n            if ($form->get('template')->getData() !== null) {\n                try {\n                    $models = $this->service->createModels($query);\n                    $searched = true;\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError($ex->getMessage());\n                }\n            }\n        }\n\n        foreach ($models as $model) {\n            $total += \\count($model->getCalculator()->getEntries());\n        }\n\n        return $this->render('invoice/index.html.twig', [\n            'models' => $models,\n            'form' => $form->createView(),\n            'limit_preview' => ($total > 500),\n            'searched' => $searched,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/preview/{customer}/{template}\", name=\"invoice_preview\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function previewAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            try {\n                $query->setTemplate($template);\n                $query->setCustomers([$customer]);\n                $model = $this->service->createModel($query);\n\n                return $this->service->renderInvoiceWithModel($model, $this->dispatcher);\n            } catch (Exception $ex) {\n                $this->logException($ex);\n                $this->flashError('action.update.error', ['%reason%' => 'Failed generating invoice preview: ' . $ex->getMessage()]);\n            }\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/save-invoice/{customer}/{template}\", name=\"invoice_create\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function createInvoiceAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            $query->setTemplate($template);\n            $query->setCustomers([$customer]);\n\n            return $this->renderInvoice($query, $request);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    private function getDefaultQuery(): InvoiceQuery\n    {\n        $factory = $this->getDateTimeFactory();\n        $begin = $factory->getStartOfMonth();\n        $end = $factory->getEndOfMonth();\n\n        $query = new InvoiceQuery();\n        $query->setBegin($begin);\n        $query->setEnd($end);\n        // limit access to data from teams\n        $query->setCurrentUser($this->getUser());\n\n        if (!$this->isGranted('view_other_timesheet')) {\n            // limit access to own data\n            $query->setUser($this->getUser());\n        }\n\n        return $query;\n    }\n\n    private function renderInvoice(InvoiceQuery $query, Request $request)\n    {\n        // use the current request locale as fallback, if no translation was configured\n        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n            $query->getTemplate()->setLanguage($request->getLocale());\n        }\n\n        try {\n            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n\n            $this->flashSuccess('action.update.success');\n\n            if (\\count($invoices) === 1) {\n                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n            }\n\n            return $this->redirectToRoute('admin_invoice_list');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/change-status/{id}/{status}\", name=\"admin_invoice_status\", methods={\"GET\", \"POST\"})\n     */\n    public function changeStatusAction(Invoice $invoice, string $status, Request $request): Response\n    {\n        if ($status === Invoice::STATUS_PAID) {\n            $form = $this->createPaymentDateForm($invoice, $status);\n            $form->handleRequest($request);\n\n            if (!$form->isSubmitted() || !$form->isValid()) {\n                return $this->render('invoice/payment_date_edit.html.twig', [\n                    'invoice' => $invoice,\n                    'form' => $form->createView()\n                ]);\n            }\n        }\n\n        try {\n            $this->service->changeInvoiceStatus($invoice, $status);\n            $this->flashSuccess('action.update.success');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/delete/{id}/{token}\", name=\"admin_invoice_delete\", methods={\"GET\"})\n     */\n    public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        try {\n            $this->service->deleteInvoice($invoice);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/download/{id}\", name=\"admin_invoice_download\", methods={\"GET\"})\n     */\n    public function downloadAction(Invoice $invoice): Response\n    {\n        $file = $this->service->getInvoiceFile($invoice);\n\n        if (null === $file) {\n            throw $this->createNotFoundException(\n                sprintf('Invoice file \"%s\" could not be found for invoice ID \"%s\"', $invoice->getInvoiceFilename(), $invoice->getId())\n            );\n        }\n\n        return $this->file($file->getRealPath(), $file->getBasename());\n    }\n\n    /**\n     * @Route(path=\"/show/{page}\", defaults={\"page\": 1}, requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_invoice_list\", methods={\"GET\"})\n     */\n    public function showInvoicesAction(Request $request, int $page): Response\n    {\n        $invoice = null;\n\n        if (null !== ($id = $request->get('id'))) {\n            $invoice = $this->invoiceRepository->find($id);\n        }\n\n        $query = new InvoiceArchiveQuery();\n        $query->setPage($page);\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $invoices = $this->invoiceRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/listing.html.twig', [\n            'entries' => $invoices,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'download' => $invoice,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"invoice_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, AnnotatedObjectExporter $exporter)\n    {\n        $query = new InvoiceArchiveQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        $entries = $this->invoiceRepository->getInvoicesForQuery($query);\n\n        $spreadsheet = $exporter->export(Invoice::class, $entries);\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-invoices');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @Route(path=\"/template/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, defaults={\"page\": 1}, name=\"admin_invoice_template\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function listTemplateAction(int $page): Response\n    {\n        $query = new BaseQuery();\n        $query->setPage($page);\n\n        $templates = $this->templateRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/templates.html.twig', [\n            'entries' => $templates,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/edit\", name=\"admin_invoice_template_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function editTemplateAction(InvoiceTemplate $template, Request $request): Response\n    {\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/document_upload\", name=\"admin_invoice_document_upload\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('upload_invoice_template')\")\n     */\n    public function uploadDocumentAction(Request $request, string $projectDirectory, InvoiceDocumentRepository $documentRepository)\n    {\n        $dir = $documentRepository->getUploadDirectory();\n        $invoiceDir = $dir;\n\n        // do not execute realpath, as it will return an empty string if the invoice directory is NOT existing!\n        if ($invoiceDir[0] !== '/') {\n            $invoiceDir = $projectDirectory . DIRECTORY_SEPARATOR . $dir;\n        }\n\n        $canUpload = true;\n\n        if (!file_exists($invoiceDir)) {\n            @mkdir($invoiceDir, 0777);\n        }\n\n        if (!is_dir($invoiceDir)) {\n            $this->flashError(sprintf('Invoice directory \"%s\" is not existing and could not be created.', $dir));\n            $canUpload = false;\n        } elseif (!is_writable($invoiceDir)) {\n            $this->flashError(sprintf('Invoice directory \"%s\" cannot be written.', $dir));\n            $canUpload = false;\n        }\n\n        $form = $this->createForm(InvoiceDocumentUploadForm::class, null, [\n            'action' => $this->generateUrl('admin_invoice_document_upload', []),\n            'method' => 'POST'\n        ]);\n\n        if ($canUpload) {\n            $form->handleRequest($request);\n\n            if ($form->isSubmitted() && $form->isValid()) {\n                /** @var UploadedFile $uploadedFile */\n                $uploadedFile = $form->get('document')->getData();\n\n                $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);\n                $safeFilename = transliterator_transliterate(\n                    'Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()',\n                    $originalFilename\n                );\n                $newFilename = $safeFilename . '.' . $uploadedFile->guessExtension();\n\n                try {\n                    $uploadedFile->move($invoiceDir, $newFilename);\n                    $this->flashSuccess('action.update.success');\n\n                    return $this->redirectToRoute('admin_invoice_document_upload');\n                } catch (Exception $ex) {\n                    $this->flashException($ex, 'action.upload.error');\n                }\n            }\n        }\n\n        return $this->render('invoice/document_upload.html.twig', [\n            'form' => $form->createView(),\n            'documents' => $this->service->getDocuments(true),\n            'baseDirectory' => $projectDirectory . DIRECTORY_SEPARATOR,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/create\", name=\"admin_invoice_template_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/template/create/{id}\", name=\"admin_invoice_template_copy\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function createTemplateAction(Request $request, ?InvoiceTemplate $copyFrom): Response\n    {\n        $template = new InvoiceTemplate();\n\n        if (null !== $copyFrom) {\n            $template = clone $copyFrom;\n            $template->setName('Copy of ' . $copyFrom->getName());\n        }\n\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/delete/{token}\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteTemplate(InvoiceTemplate $template, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_template', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_template');\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        try {\n            $this->templateRepository->removeTemplate($template);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_template');\n    }\n\n    private function renderTemplateForm(InvoiceTemplate $template, Request $request): Response\n    {\n        $editForm = $this->createEditForm($template);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->templateRepository->saveTemplate($template);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('admin_invoice_template');\n            } catch (Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('invoice/template_edit.html.twig', [\n            'template' => $template,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(InvoiceQuery $query, bool $simple): FormInterface\n    {\n        $form = $simple ? InvoiceToolbarSimpleForm::class : InvoiceToolbarForm::class;\n\n        return $this->createForm($form, $query, [\n            'action' => $this->generateUrl('invoice', []),\n            'method' => 'GET',\n            'include_user' => $this->isGranted('view_other_timesheet'),\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-print-form'\n            ],\n        ]);\n    }\n\n    private function getArchiveToolbarForm(InvoiceArchiveQuery $query): FormInterface\n    {\n        return $this->createForm(InvoiceArchiveForm::class, $query, [\n            'action' => $this->generateUrl('admin_invoice_list', []),\n            'method' => 'GET',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-archive-form'\n            ],\n        ]);\n    }\n\n    private function createEditForm(InvoiceTemplate $template): FormInterface\n    {\n        if ($template->getId() === null) {\n            $url = $this->generateUrl('admin_invoice_template_create');\n        } else {\n            $url = $this->generateUrl('admin_invoice_template_edit', ['id' => $template->getId()]);\n        }\n\n        return $this->createForm(InvoiceTemplateForm::class, $template, [\n            'action' => $url,\n            'method' => 'POST'\n        ]);\n    }\n\n    private function createPaymentDateForm(Invoice $invoice, string $status): FormInterface\n    {\n        if (null === $invoice->getPaymentDate()) {\n            $invoice->setPaymentDate($this->getDateTimeFactory()->createDateTime());\n        }\n\n        $url = $this->generateUrl('admin_invoice_status', ['id' => $invoice->getId(), 'status' => $status]);\n\n        return $this->createForm(InvoicePaymentDateForm::class, $invoice, [\n            'action' => $url,\n            'method' => 'POST',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Entity\\Role;\nuse App\\Entity\\RolePermission;\nuse App\\Entity\\User;\nuse App\\Event\\PermissionSectionsEvent;\nuse App\\Event\\PermissionsEvent;\nuse App\\Form\\RoleType;\nuse App\\Model\\PermissionSection;\nuse App\\Repository\\RolePermissionRepository;\nuse App\\Repository\\RoleRepository;\nuse App\\Repository\\UserRepository;\nuse App\\Security\\RolePermissionManager;\nuse App\\Security\\RoleService;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * Controller used to manage user roles and role permissions.\n *\n * @Route(path=\"/admin/permissions\")\n * @Security(\"is_granted('role_permissions')\")\n */\nfinal class PermissionController extends AbstractController\n{\n    public const TOKEN_NAME = 'user_role_permissions';\n    /**\n     * @var RoleService\n     */\n    private $roleService;\n    /**\n     * @var RolePermissionManager\n     */\n    private $manager;\n    /**\n     * @var RoleRepository\n     */\n    private $roleRepository;\n\n    public function __construct(RoleService $roleService, RolePermissionManager $manager, RoleRepository $roleRepository)\n    {\n        $this->roleService = $roleService;\n        $this->manager = $manager;\n        $this->roleRepository = $roleRepository;\n    }\n\n    /**\n     * @Route(path=\"\", name=\"admin_user_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function permissions(EventDispatcherInterface $dispatcher, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $all = $this->roleRepository->findAll();\n        $existing = [];\n\n        foreach ($all as $role) {\n            $existing[] = $role->getName();\n        }\n\n        $existing = array_map('strtoupper', $existing);\n\n        // automatically import all hard coded (default) roles into the database table\n        foreach ($this->roleService->getAvailableNames() as $roleName) {\n            $roleName = strtoupper($roleName);\n            if (!\\in_array($roleName, $existing)) {\n                $role = new Role();\n                $role->setName($roleName);\n                $this->roleRepository->saveRole($role);\n                $existing[] = $roleName;\n                $all[] = $role;\n            }\n        }\n\n        // be careful, the order of the search keys is important!\n        $permissionOrder = [\n            new PermissionSection('Export', '_export'),\n            new PermissionSection('Invoice', '_invoice'),\n            new PermissionSection('Teams', '_team'),\n            new PermissionSection('Tags', '_tag'),\n            new PermissionSection('User profile (other)', '_other_profile'),\n            new PermissionSection('User profile (own)', '_own_profile'),\n            new PermissionSection('User', '_user'),\n            new PermissionSection('Customer (Admin)', '_customer'),\n            new PermissionSection('Customer (Team member)', '_team_customer'),\n            new PermissionSection('Customer (Teamlead)', '_teamlead_customer'),\n            new PermissionSection('Project (Admin)', '_project'),\n            new PermissionSection('Project (Team member)', '_team_project'),\n            new PermissionSection('Project (Teamlead)', '_teamlead_project'),\n            new PermissionSection('Activity (Admin)', '_activity'),\n            new PermissionSection('Activity (Team member)', '_team_activity'),\n            new PermissionSection('Activity (Teamlead)', '_teamlead_activity'),\n            new PermissionSection('Timesheet', '_timesheet'),\n            new PermissionSection('Timesheet (other)', '_other_timesheet'),\n            new PermissionSection('Timesheet (own)', '_own_timesheet'),\n            new PermissionSection('Reporting', '_reporting'),\n        ];\n\n        $event = new PermissionSectionsEvent();\n        foreach ($permissionOrder as $section) {\n            $event->addSection($section);\n        }\n        $dispatcher->dispatch($event);\n\n        $permissionSorted = [];\n        $other = [];\n\n        foreach ($event->getSections() as $section) {\n            $permissionSorted[$section->getTitle()] = [];\n        }\n\n        foreach ($this->manager->getPermissions() as $permission) {\n            $found = false;\n\n            foreach (array_reverse($event->getSections()) as $section) {\n                if ($section->filter($permission)) {\n                    $permissionSorted[$section->getTitle()][] = $permission;\n                    $found = true;\n                    break;\n                }\n            }\n\n            if (!$found) {\n                $other[] = $permission;\n            }\n        }\n\n        ksort($permissionSorted);\n\n        $permissionSorted['Other'] = $other;\n\n        // order the roles from most powerful to least powerful, custom roles at the end\n        $roles = [\n            'ROLE_SUPER_ADMIN' => null,\n            'ROLE_ADMIN' => null,\n            'ROLE_TEAMLEAD' => null,\n            'ROLE_USER' => null,\n        ];\n        foreach ($all as $role) {\n            $roles[$role->getName()] = $role;\n        }\n\n        $event = new PermissionsEvent();\n        foreach ($permissionSorted as $title => $permissions) {\n            $event->addPermissions($title, $permissions);\n        }\n\n        $dispatcher->dispatch($event);\n\n        return $this->render('permission/permissions.html.twig', [\n            'token' => $csrfTokenManager->refreshToken(self::TOKEN_NAME)->getValue(),\n            'roles' => array_values($roles),\n            'sorted' => $event->getPermissions(),\n            'manager' => $this->manager,\n            'system_roles' => $this->roleService->getSystemRoles(),\n            'always_apply_superadmin' => RolePermissionManager::SUPER_ADMIN_PERMISSIONS,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/roles/create\", name=\"admin_user_roles\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function createRole(Request $request): Response\n    {\n        $role = new Role();\n\n        $form = $this->createForm(RoleType::class, $role, [\n            'action' => $this->generateUrl('admin_user_roles', []),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->roleRepository->saveRole($role);\n                $this->flashSuccess('action.update.success');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n\n            return $this->redirectToRoute('admin_user_permissions');\n        }\n\n        return $this->render('permission/edit_role.html.twig', [\n            'form' => $form->createView(),\n            'role' => $role,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/roles/{id}/delete/{csrfToken}\", name=\"admin_user_role_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function deleteRole(Role $role, string $csrfToken, UserRepository $userRepository, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->isCsrfTokenValid(self::TOKEN_NAME, $csrfToken)) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_user_permissions');\n        }\n\n        // make sure that the token can only be used once, so refresh it after successful submission\n        $csrfTokenManager->refreshToken(self::TOKEN_NAME)->getValue();\n\n        try {\n            // workaround, as roles is still a string array on users table\n            // until this is fixed, the users must be manually updated\n            $users = $userRepository->findUsersWithRole($role->getName());\n            foreach ($users as $user) {\n                $user->removeRole($role->getName());\n                $userRepository->saveUser($user);\n            }\n            $this->roleRepository->deleteRole($role);\n            $this->flashSuccess('action.delete.success');\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_user_permissions');\n    }\n\n    /**\n     * @Route(path=\"/roles/{id}/{name}/{value}/{csrfToken}\", name=\"admin_user_permission_save\", methods={\"POST\"})\n     * @Security(\"is_granted('role_permissions')\")\n     */\n    public function savePermission(Role $role, string $name, bool $value, string $csrfToken, RolePermissionRepository $rolePermissionRepository, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->isCsrfTokenValid(self::TOKEN_NAME, $csrfToken)) {\n            throw new BadRequestHttpException('Invalid CSRF token');\n        }\n\n        if (!$this->manager->isRegisteredPermission($name)) {\n            throw $this->createNotFoundException('Unknown permission: ' . $name);\n        }\n\n        if (false === $value && $role->getName() === User::ROLE_SUPER_ADMIN && \\in_array($name, RolePermissionManager::SUPER_ADMIN_PERMISSIONS)) {\n            throw $this->createAccessDeniedException(sprintf('Permission \"%s\" cannot be deactivated for role \"%s\"', $name, $role->getName()));\n        }\n\n        try {\n            $permission = $rolePermissionRepository->findRolePermission($role, $name);\n            if (null === $permission) {\n                $permission = new RolePermission();\n                $permission->setRole($role);\n                $permission->setPermission($name);\n            }\n            $permission->setAllowed((bool) $value);\n\n            $rolePermissionRepository->saveRolePermission($permission);\n\n            // refreshToken instead of getToken for more security but worse UX\n            // fast clicking with slow response times would fail, as the token cannot be replaced fast enough\n            $newToken = $csrfTokenManager->getToken(self::TOKEN_NAME)->getValue();\n\n            return $this->json(['token' => $newToken]);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        throw new BadRequestHttpException();\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\MetaTableTypeInterface;\nuse App\\Entity\\Project;\nuse App\\Entity\\ProjectComment;\nuse App\\Entity\\ProjectRate;\nuse App\\Entity\\Rate;\nuse App\\Entity\\Team;\nuse App\\Event\\ProjectMetaDefinitionEvent;\nuse App\\Event\\ProjectMetaDisplayEvent;\nuse App\\Export\\Spreadsheet\\EntityWithMetaFieldsExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\ProjectCommentForm;\nuse App\\Form\\ProjectEditForm;\nuse App\\Form\\ProjectRateForm;\nuse App\\Form\\ProjectTeamPermissionForm;\nuse App\\Form\\Toolbar\\ProjectToolbarForm;\nuse App\\Form\\Type\\ProjectType;\nuse App\\Project\\ProjectDuplicationService;\nuse App\\Project\\ProjectService;\nuse App\\Project\\ProjectStatisticService;\nuse App\\Repository\\ActivityRepository;\nuse App\\Repository\\ProjectRateRepository;\nuse App\\Repository\\ProjectRepository;\nuse App\\Repository\\Query\\ActivityQuery;\nuse App\\Repository\\Query\\ProjectQuery;\nuse App\\Repository\\TeamRepository;\nuse Pagerfanta\\Pagerfanta;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n\n/**\n * Controller used to manage projects.\n *\n * @Route(path=\"/admin/project\")\n * @Security(\"is_granted('view_project') or is_granted('view_teamlead_project') or is_granted('view_team_project')\")\n */\nfinal class ProjectController extends AbstractController\n{\n    /**\n     * @var ProjectRepository\n     */\n    private $repository;\n    /**\n     * @var SystemConfiguration\n     */\n    private $configuration;\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $dispatcher;\n    /**\n     * @var ProjectService\n     */\n    private $projectService;\n\n    public function __construct(ProjectRepository $repository, SystemConfiguration $configuration, EventDispatcherInterface $dispatcher, ProjectService $projectService)\n    {\n        $this->repository = $repository;\n        $this->configuration = $configuration;\n        $this->dispatcher = $dispatcher;\n        $this->projectService = $projectService;\n    }\n\n    /**\n     * @Route(path=\"/\", defaults={\"page\": 1}, name=\"admin_project\", methods={\"GET\"})\n     * @Route(path=\"/page/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_project_paginated\", methods={\"GET\"})\n     */\n    public function indexAction($page, Request $request)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n\n        $form = $this->getToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_project');\n        }\n\n        $entries = $this->repository->getPagerfantaForQuery($query);\n\n        return $this->render('project/index.html.twig', [\n            'entries' => $entries,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'metaColumns' => $this->findMetaColumns($query),\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @param ProjectQuery $query\n     * @return MetaTableTypeInterface[]\n     */\n    protected function findMetaColumns(ProjectQuery $query): array\n    {\n        $event = new ProjectMetaDisplayEvent($query, ProjectMetaDisplayEvent::PROJECT);\n        $this->dispatcher->dispatch($event);\n\n        return $event->getFields();\n    }\n\n    /**\n     * @Route(path=\"/{id}/permissions\", name=\"admin_project_permissions\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('permissions', project)\")\n     */\n    public function teamPermissions(Project $project, Request $request)\n    {\n        $form = $this->createForm(ProjectTeamPermissionForm::class, $project, [\n            'action' => $this->generateUrl('admin_project_permissions', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->projectService->updateProject($project);\n                $this->flashSuccess('action.update.success');\n\n                if ($this->isGranted('view', $project)) {\n                    return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n                }\n\n                return $this->redirectToRoute('admin_project');\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/permissions.html.twig', [\n            'project' => $project,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/create\", name=\"admin_project_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/create/{customer}\", name=\"admin_project_create_with_customer\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('create_project')\")\n     */\n    public function createAction(Request $request, ?Customer $customer = null)\n    {\n        $project = $this->projectService->createNewProject($customer);\n\n        $editForm = $this->createEditForm($project);\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->projectService->saveNewProject($project);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/edit.html.twig', [\n            'project' => $project,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_delete/{token}\", name=\"project_comment_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n     */\n    public function deleteCommentAction(ProjectComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $projectId = $comment->getProject()->getId();\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('project.delete_comment', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('project_details', ['id' => $projectId]);\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        try {\n            $this->repository->deleteComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $projectId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_add\", name=\"project_comment_add\", methods={\"POST\"})\n     * @Security(\"is_granted('comments_create', project)\")\n     */\n    public function addCommentAction(Project $project, Request $request)\n    {\n        $comment = new ProjectComment();\n        $form = $this->getCommentForm($project, $comment);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $this->repository->saveComment($comment);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/comment_pin/{token}\", name=\"project_comment_pin\", methods={\"GET\"})\n     * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n     */\n    public function pinCommentAction(ProjectComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n    {\n        $projectId = $comment->getProject()->getId();\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('project.pin_comment', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('project_details', ['id' => $projectId]);\n        }\n\n        $csrfTokenManager->refreshToken($token);\n\n        $comment->setPinned(!$comment->isPinned());\n        try {\n            $this->repository->saveComment($comment);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $projectId]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/create_team\", name=\"project_team_create\", methods={\"GET\"})\n     * @Security(\"is_granted('create_team') and is_granted('edit', project)\")\n     */\n    public function createDefaultTeamAction(Project $project, TeamRepository $teamRepository)\n    {\n        $defaultTeam = $teamRepository->findOneBy(['name' => $project->getName()]);\n        if (null !== $defaultTeam) {\n            $this->flashError('action.update.error', ['%reason%' => 'Team already existing']);\n\n            return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n        }\n\n        $defaultTeam = new Team();\n        $defaultTeam->setName($project->getName());\n        $defaultTeam->addTeamlead($this->getUser());\n        $defaultTeam->addProject($project);\n\n        try {\n            $teamRepository->saveTeam($defaultTeam);\n        } catch (\\Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/activities/{page}\", defaults={\"page\": 1}, name=\"project_activities\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', project)\")\n     */\n    public function activitiesAction(Project $project, int $page, ActivityRepository $activityRepository)\n    {\n        $query = new ActivityQuery();\n        $query->setCurrentUser($this->getUser());\n        $query->setPage($page);\n        $query->setPageSize(5);\n        $query->addProject($project);\n        $query->setExcludeGlobals(true);\n        $query->setShowBoth();\n        $query->addOrderGroup('visible', ActivityQuery::ORDER_DESC);\n        $query->addOrderGroup('name', ActivityQuery::ORDER_ASC);\n\n        /* @var $entries Pagerfanta */\n        $entries = $activityRepository->getPagerfantaForQuery($query);\n\n        return $this->render('project/embed_activities.html.twig', [\n            'project' => $project,\n            'activities' => $entries,\n            'page' => $page,\n            'now' => $this->getDateTimeFactory()->createDateTime(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/details\", name=\"project_details\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view', project)\")\n     */\n    public function detailsAction(Project $project, TeamRepository $teamRepository, ProjectRateRepository $rateRepository, ProjectStatisticService $statisticService)\n    {\n        $event = new ProjectMetaDefinitionEvent($project);\n        $this->dispatcher->dispatch($event);\n\n        $stats = null;\n        $defaultTeam = null;\n        $commentForm = null;\n        $attachments = [];\n        $comments = null;\n        $teams = null;\n        $rates = [];\n        $now = $this->getDateTimeFactory()->createDateTime();\n\n        if ($this->isGranted('edit', $project)) {\n            if ($this->isGranted('create_team')) {\n                $defaultTeam = $teamRepository->findOneBy(['name' => $project->getName()]);\n            }\n            $rates = $rateRepository->getRatesForProject($project);\n        }\n\n        if ($this->isGranted('budget', $project)) {\n            $stats = $statisticService->getBudgetStatisticModel($project, $now);\n        }\n\n        if ($this->isGranted('comments', $project)) {\n            $comments = $this->repository->getComments($project);\n        }\n\n        if ($this->isGranted('comments_create', $project)) {\n            $commentForm = $this->getCommentForm($project, new ProjectComment())->createView();\n        }\n\n        if ($this->isGranted('permissions', $project) || $this->isGranted('details', $project) || $this->isGranted('view_team')) {\n            $teams = $project->getTeams();\n        }\n\n        return $this->render('project/details.html.twig', [\n            'project' => $project,\n            'comments' => $comments,\n            'commentForm' => $commentForm,\n            'attachments' => $attachments,\n            'stats' => $stats,\n            'team' => $defaultTeam,\n            'teams' => $teams,\n            'rates' => $rates,\n            'now' => $now,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/rate\", name=\"admin_project_rate_add\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function addRateAction(Project $project, Request $request, ProjectRateRepository $repository)\n    {\n        $rate = new ProjectRate();\n        $rate->setProject($project);\n\n        $form = $this->createForm(ProjectRateForm::class, $rate, [\n            'action' => $this->generateUrl('admin_project_rate_add', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            try {\n                $repository->saveRate($rate);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/rates.html.twig', [\n            'project' => $project,\n            'form' => $form->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/edit\", name=\"admin_project_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function editAction(Project $project, Request $request)\n    {\n        $editForm = $this->createEditForm($project);\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->projectService->updateProject($project);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('project_details', ['id' => $project->getId()]);\n            } catch (\\Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('project/edit.html.twig', [\n            'project' => $project,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/duplicate\", name=\"admin_project_duplicate\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('edit', project)\")\n     */\n    public function duplicateAction(Project $project, Request $request, ProjectDuplicationService $projectDuplicationService)\n    {\n        $newProject = $projectDuplicationService->duplicate($project, $project->getName() . ' [COPY]');\n\n        return $this->redirectToRoute('project_details', ['id' => $newProject->getId()]);\n    }\n\n    /**\n     * @Route(path=\"/{id}/delete\", name=\"admin_project_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('delete', project)\")\n     */\n    public function deleteAction(Project $project, Request $request, ProjectStatisticService $statisticService)\n    {\n        $stats = $statisticService->getProjectStatistics($project);\n\n        $deleteForm = $this->createFormBuilder(null, [\n                'attr' => [\n                    'data-form-event' => 'kimai.projectDelete',\n                    'data-msg-success' => 'action.delete.success',\n                    'data-msg-error' => 'action.delete.error',\n                ]\n            ])\n            ->add('project', ProjectType::class, [\n                'ignore_project' => $project,\n                'customers' => $project->getCustomer(),\n                'query_builder_for_user' => true,\n                'required' => false,\n            ])\n            ->setAction($this->generateUrl('admin_project_delete', ['id' => $project->getId()]))\n            ->setMethod('POST')\n            ->getForm();\n\n        $deleteForm->handleRequest($request);\n\n        if ($deleteForm->isSubmitted() && $deleteForm->isValid()) {\n            try {\n                $this->repository->deleteProject($project, $deleteForm->get('project')->getData());\n                $this->flashSuccess('action.delete.success');\n            } catch (\\Exception $ex) {\n                $this->flashDeleteException($ex);\n            }\n\n            return $this->redirectToRoute('admin_project');\n        }\n\n        return $this->render('project/delete.html.twig', [\n            'project' => $project,\n            'stats' => $stats,\n            'form' => $deleteForm->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"project_export\", methods={\"GET\"})\n     */\n    public function exportAction(Request $request, EntityWithMetaFieldsExporter $exporter)\n    {\n        $query = new ProjectQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        if (!$form->isValid()) {\n            $query->resetByFormError($form->getErrors());\n        }\n\n        $entries = $this->repository->getProjectsForQuery($query);\n\n        $spreadsheet = $exporter->export(\n            Project::class,\n            $entries,\n            new ProjectMetaDisplayEvent($query, ProjectMetaDisplayEvent::EXPORT)\n        );\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-projects');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    protected function getToolbarForm(ProjectQuery $query): FormInterface\n    {\n        return $this->createForm(ProjectToolbarForm::class, $query, [\n            'action' => $this->generateUrl('admin_project', [\n                'page' => $query->getPage(),\n            ]),\n            'method' => 'GET',\n        ]);\n    }\n\n    private function getCommentForm(Project $project, ProjectComment $comment): FormInterface\n    {\n        if (null === $comment->getId()) {\n            $comment->setProject($project);\n            $comment->setCreatedBy($this->getUser());\n        }\n\n        return $this->createForm(ProjectCommentForm::class, $comment, [\n            'action' => $this->generateUrl('project_comment_add', ['id' => $project->getId()]),\n            'method' => 'POST',\n        ]);\n    }\n\n    private function createEditForm(Project $project): FormInterface\n    {\n        $event = new ProjectMetaDefinitionEvent($project);\n        $this->dispatcher->dispatch($event);\n\n        $currency = $this->configuration->getCustomerDefaultCurrency();\n        $url = $this->generateUrl('admin_project_create');\n\n        if ($project->getId() !== null) {\n            $url = $this->generateUrl('admin_project_edit', ['id' => $project->getId()]);\n            $currency = $project->getCustomer()->getCurrency();\n        }\n\n        return $this->createForm(ProjectEditForm::class, $project, [\n            'action' => $url,\n            'method' => 'POST',\n            'currency' => $currency,\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'include_budget' => $this->isGranted('budget', $project),\n            'time_increment' => 15,\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\EventSubscriber\\Actions;\n\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Event\\PageActionsEvent;\n\nclass InvoiceTemplateSubscriber extends AbstractActionsSubscriber\n{\n    public static function getActionName(): string\n    {\n        return 'invoice_template';\n    }\n\n    public function onActions(PageActionsEvent $event): void\n    {\n        $payload = $event->getPayload();\n\n        /** @var InvoiceTemplate $template */\n        $template = $payload['template'];\n\n        if ($template->getId() === null) {\n            return;\n        }\n\n        if ($this->isGranted('manage_invoice_template')) {\n            if (!$event->isIndexView()) {\n                $event->addBack($this->path('invoice'));\n            }\n            $event->addAction('edit', ['url' => $this->path('admin_invoice_template_edit', ['id' => $template->getId()]), 'class' => 'modal-ajax-form']);\n            $event->addAction('copy', ['url' => $this->path('admin_invoice_template_copy', ['id' => $template->getId()])]);\n            $event->addDelete($this->path('admin_invoice_template_delete', ['id' => $template->getId(), 'token' => $payload['token']]), false);\n        }\n    }\n}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n{% import \"customer/actions.html.twig\" as actions %}\n\n{% block page_actions %}{{ actions.customer(customer, 'customer_details') }}{% endblock %}\n{% block page_title %}{{ 'admin_customer.title'|trans }}{% endblock %}\n\n{% block main %}\n    {% set can_edit = is_granted('edit', customer) %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' %}\n        {% import \"macros/widgets.html.twig\" as widgets %}\n        {% block box_attributes %}id=\"customer_details_box\"{% endblock %}\n        {% block box_title %}\n            {{ widgets.label_customer(customer) }}\n            {% if customer.company is not empty %} &ndash; {{ customer.company }}{% endif %}\n        {% endblock %}\n        {% block box_tools %}\n            {% if can_edit %}\n                <a class=\"modal-ajax-form open-edit btn btn-default btn-sm\" data-href=\"{{ path('admin_customer_edit', {'id': customer.id}) }}\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{ 'action.edit'|trans }}\"><i class=\"{{ 'edit'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            {% if customer.comment is not empty %}\n                <div class=\"comment\">\n                    {{ customer.comment|comment2html(true) }}\n                </div>\n            {% endif %}\n            <table class=\"table table-hover dataTable\">\n                {% if not customer.visible %}\n                    <tr class=\"{{ widgets.class_customer_row(customer, now) }}\">\n                        <th>{{ 'label.visible'|trans }}</th>\n                        <td>{{ widgets.label_boolean(customer.visible) }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.address is not empty %}\n                    <tr>\n                        <th>{{ 'label.address'|trans }}</th>\n                        <td>{{ customer.address|nl2br }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.country is not empty %}\n                    <tr>\n                        <th>{{ 'label.country'|trans }}</th>\n                        <td>{{ customer.country|country }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.contact is not empty %}\n                    <tr>\n                        <th>{{ 'label.contact'|trans }}</th>\n                        <td>{{ customer.contact }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.phone is not empty %}\n                    <tr>\n                        <th>{{ 'label.phone'|trans }}</th>\n                        <td><a href=\"tel:{{ customer.phone }}\">{{ customer.phone }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.mobile is not empty %}\n                    <tr>\n                        <th>{{ 'label.mobile'|trans }}</th>\n                        <td><a href=\"tel:{{ customer.mobile }}\">{{ customer.mobile }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.email is not empty %}\n                    <tr>\n                        <th>{{ 'label.email'|trans }}</th>\n                        <td><a href=\"mailto:{{ customer.email }}\">{{ customer.email }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.homepage is not empty %}\n                    <tr>\n                        <th>{{ 'label.homepage'|trans }}</th>\n                        <td><a href=\"{{ customer.homepage }}\" target=\"_blank\">{{ customer.homepage|replace({'https://': '', 'http://': ''}) }}</a></td>\n                    </tr>\n                {% endif %}\n                {% if customer.fax is not empty %}\n                    <tr>\n                        <th>{{ 'label.fax'|trans }}</th>\n                        <td>{{ customer.fax }}</td>\n                    </tr>\n                {% endif %}\n                {% if customer.timezone is not empty %}\n                    <tr>\n                        <th>{{ 'label.timezone'|trans }}</th>\n                        <td>{{ customer_now|date_full }} ({{ customer.timezone }})</td>\n                    </tr>\n                {% endif %}\n                {% if customer.currency is not empty %}\n                    <tr>\n                        <th>{{ 'label.currency'|trans }}</th>\n                        <td>{{ customer.currency }}</td>\n                    </tr>\n                {% endif %}\n                {% if is_granted('details', customer) %}\n                    {% if customer.number is not empty %}\n                        <tr>\n                            <th>{{ 'label.number'|trans }}</th>\n                            <td>{{ customer.number }}</td>\n                        </tr>\n                    {% endif %}\n                    {% if customer.vatId is not empty %}\n                        <tr>\n                            <th>{{ 'label.vat_id'|trans }}</th>\n                            <td>{{ customer.vatId }}</td>\n                        </tr>\n                    {% endif %}\n                {% endif %}\n                {% for metaField in customer.visibleMetaFields|sort((a, b) => a.order <=> b.order) %}\n                    <tr>\n                        <th>{{ metaField.label|trans }}</th>\n                        <td>{{ widgets.form_type_value(metaField.type, metaField.value, customer) }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {{ render(controller('App\\\\Controller\\\\CustomerController::projectsAction', {'customer': customer.id, 'page': 1})) }}\n    \n    {% if stats is not null %}\n        {{ include('embeds/budgets.html.twig', {'entity': customer, 'stats': stats, 'currency': customer.currency}) }}\n    {% endif %}\n\n    {% if can_edit %}\n        {{ include('embeds/rates-table.html.twig', {'id': 'customer_rates_box', 'entity': customer, 'create_url': path('admin_customer_rate_add', {'id': customer.id}), 'delete_route': 'delete_customer_rate', 'currency': customer.currency}) }}\n    {% endif %}\n\n    {% if teams is not null %}\n        {% set options = {'teams': teams, 'team': team} %}\n        {% if is_granted('permissions', customer) %}\n            {% set options = options|merge({'route_create': path('customer_team_create', {'id': customer.id}), 'route_edit': path('admin_customer_permissions', {'id': customer.id})}) %}\n        {% endif %}\n        {{ include('embeds/teams.html.twig', options) }}\n    {% endif %}\n\n    {% if comments is not null %}\n        {% set options = {'form': commentForm, 'comments': comments} %}\n        {% if can_edit %}\n            {% set options = options|merge({'route_pin': 'customer_comment_pin', 'route_delete': 'customer_comment_delete', 'csrf_delete': 'customer.delete_comment', 'csrf_pin': 'customer.pin_comment'}) %}\n        {% endif %}\n        {{ include('embeds/comments.html.twig', options) }}\n    {% endif %}\n\n{% endblock %}\n\n{% block javascripts %}\n    {{ parent() }}\n    <script type=\"text/javascript\">\n        document.addEventListener('kimai.initialized', function() {\n            KimaiReloadPageWidget.create('kimai.customerTeamUpdate kimai.customerUpdate kimai.teamUpdate kimai.projectTeamUpdate kimai.rateUpdate');\n        });\n    </script>\n{% endblock %}\n", "{% embed '@AdminLTE/Widgets/box-widget.html.twig' with {'form': form, 'comments': comments, 'route_pin': route_pin|default(null), 'route_delete': route_delete|default(null), 'delete_by_user': delete_by_user|default(false), 'csrf_delete': csrf_token(csrf_delete), 'csrf_pin': csrf_token(csrf_pin)} %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% block box_title %}{{ 'label.comment'|trans }}{% endblock %}\n    {% block box_attributes %}id=\"comments_box\"{% endblock %}\n    {% block box_body_class %}box-body-scrollable{% endblock %}\n    {% block box_body %}\n        {% set replacer = {} %}\n        {% for pref in app.user.preferences %}\n            {% set replacer = replacer|merge({('{{user.' ~ pref.name ~ '}}'): pref.value}) %}\n        {% endfor %}\n        {% if comments|length == 0 %}\n            {{ 'error.no_comments_found'|trans }}\n        {% else %}\n            {% for comment in comments %}\n                <div class=\"direct-chat-msg\">\n                    <div class=\"direct-chat-info clearfix\">\n                        <span class=\"direct-chat-name pull-left\">\n                            {{ widgets.username(comment.createdBy) }}\n                        </span>\n                        <span class=\"direct-chat-timestamp pull-left\">\n                            &nbsp;\n                            {{ comment.createdAt|date_full }}\n                            &nbsp;\n                        </span>\n                        <span class=\"pull-right\">\n                        {% if route_pin is not null %}\n                            <a href=\"{{ path(route_pin, {'id': comment.id, 'token': csrf_pin}) }}\" class=\"btn btn-default btn-xs {% if comment.pinned %}active{% endif %}\"><i class=\"{{ 'pin'|icon }}\"></i></a>\n                        {% elseif comment.pinned %}\n                            <i class=\"{{ 'pin'|icon }}\"></i>\n                        {% endif %}\n                        {% if route_delete is not null and ((not delete_by_user) or (delete_by_user and comment.createdBy.id == app.user.id)) %}\n                            <a href=\"{{ path(route_delete, {'id': comment.id, 'token': csrf_delete}) }}\" class=\"confirmation-link btn btn-default btn-xs\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n                        {% endif %}\n                        </span>\n                    </div>\n                    {{ widgets.user_avatar(comment.createdBy, false, 'direct-chat-img img-sm') }}\n                    <div class=\"direct-chat-text\">\n                        {{ comment.message|replace(replacer)|md2html }}\n                    </div>\n                </div>\n            {% endfor %}\n        {% endif %}\n    {% endblock %}\n    {% block box_footer -%}\n        {% if form is not null %}\n            {{ form_start(form) }}\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    {{ form_widget(form.message, {'attr': {'rows': '3', 'placeholder': 'placeholder.type_message'|trans, 'style': 'margin-bottom: 5px'}}) }}\n                    <button type=\"submit\" class=\"btn btn-default\">\n                        <i class=\"{{ 'comment'|icon }}\"></i>\n                        {{ 'label.comment'|trans }}\n                    </button>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                </div>\n            </div>\n            {{ form_widget(form) }}\n            {{ form_end(form) }}\n        {% endif %}\n    {%- endblock %}\n{% endembed %}\n", "{% macro invoices(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoices', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice(invoice, view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice', view, {'invoice': invoice, 'token': csrf_token('invoice.delete')}) %}\n    {{ widgets.table_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_listing(view, query) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_details', view, {'query': query}) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_upload(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_upload', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_templates(view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_templates', view) %}\n    {{ widgets.page_actions(event.actions) }}\n{% endmacro %}\n\n{% macro invoice_template(template, view) %}\n    {% import \"macros/widgets.html.twig\" as widgets %}\n    {% set event = actions(app.user, 'invoice_template', view, {'template': template, 'token': csrf_token('invoice.delete_template')}) %}\n    {{ widgets.table_actions(event.actions) }}\n{% endmacro %}\n", "{% extends 'base.html.twig' %}\n{% import \"macros/widgets.html.twig\" as widgets %}\n{% import \"project/actions.html.twig\" as actions %}\n\n{% block page_title %}{{ 'admin_project.title'|trans }}{% endblock %}\n{% block page_actions %}{{ actions.project(project, 'project_details') }}{% endblock %}\n\n{% block main %}\n    {% set can_edit = is_granted('edit', project) %}\n\n    {% embed '@AdminLTE/Widgets/box-widget.html.twig' %}\n        {% import \"macros/widgets.html.twig\" as widgets %}\n        {% import \"customer/actions.html.twig\" as customerActions %}\n        {% block box_attributes %}id=\"project_details_box\"{% endblock %}\n        {% block box_tools %}\n            {% if can_edit %}\n                <a class=\"modal-ajax-form open-edit btn btn-default btn-sm\" data-href=\"{{ path('admin_project_edit', {'id': project.id}) }}\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"{{ 'action.edit'|trans }}\"><i class=\"{{ 'edit'|icon }}\"></i></a>\n            {% endif %}\n        {% endblock %}\n        {% block box_title %}\n            {{ widgets.label_name(project.name, project.color) }}\n        {% endblock %}\n        {% block box_body_class %}no-padding{% endblock %}\n        {% block box_body %}\n            {% if project.comment is not empty %}\n                <div class=\"comment\">\n                    {{ project.comment|comment2html(true) }}\n                </div>\n            {% endif %}\n            <table class=\"table table-hover dataTable\">\n                {% if not project.visible %}\n                    <tr class=\"{{ widgets.class_project_row(project, now) }}\">\n                        <th>{{ 'label.visible'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ widgets.label_boolean(project.visible) }}\n                        </td>\n                    </tr>\n                {% endif %}\n                <tr {{ widgets.customer_row_attr(project.customer, now) }}>\n                    <th>{{ 'label.customer'|trans }}</th>\n                    <td>\n                        {{ widgets.label_customer(project.customer) }}\n                    </td>\n                    <td class=\"w-min\">\n                        {{ widgets.badge_team_access(project.customer.teams) }}\n                    </td>\n                    <td class=\"actions\">\n                        {{ customerActions.customer(project.customer, 'custom') }}\n                    </td>\n                </tr>\n                {% if is_granted('details', project) %}\n                    {% if project.orderNumber is not empty %}\n                    <tr>\n                        <th>{{ 'label.orderNumber'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.orderNumber }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.orderDate is not empty %}\n                    <tr>\n                        <th>{{ 'label.orderDate'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.orderDate|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.start is not empty %}\n                    <tr>\n                        <th>{{ 'label.project_start'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.start|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.end is not empty %}\n                    <tr>\n                        <th>{{ 'label.project_end'|trans }}</th>\n                        <td colspan=\"3\">\n                            {{ project.end|date_full(true) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                {% endif %}\n                {% if is_granted('budget', project) %}\n                    {% if project.hasBudget() %}\n                    <tr>\n                        <th>\n                            {{ 'label.budget'|trans }}\n                            {% if project.isMonthlyBudget() %}\n                                ({{ 'label.budgetType_month'|trans }})\n                            {% endif %}\n                        </th>\n                        <td colspan=\"3\">\n                            {{ project.getBudget()|money(project.customer.currency) }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                    {% if project.hasTimeBudget() %}\n                    <tr>\n                        <th>\n                            {{ 'label.timeBudget'|trans }}\n                            {% if project.isMonthlyBudget() %}\n                                ({{ 'label.budgetType_month'|trans }})\n                            {% endif %}\n                        </th>\n                        <td colspan=\"3\">\n                            {{ project.getTimeBudget()|duration }}\n                        </td>\n                    </tr>\n                    {% endif %}\n                {% endif %}\n                {% for metaField in project.visibleMetaFields|sort((a, b) => a.order <=> b.order) %}\n                    <tr>\n                        <th>{{ metaField.label|trans }}</th>\n                        <td colspan=\"3\">{{ widgets.form_type_value(metaField.type, metaField.value, project) }}</td>\n                    </tr>\n                {% endfor %}\n            </table>\n        {% endblock %}\n    {% endembed %}\n\n    {{ render(controller('App\\\\Controller\\\\ProjectController::activitiesAction', {'project': project.id, 'page': 1})) }}\n\n    {% if stats is not null %}\n        {{ include('embeds/budgets.html.twig', {'entity': project, 'stats': stats, 'currency': project.customer.currency}) }}\n    {% endif %}\n\n    {% if can_edit %}\n        {{ include('embeds/rates-table.html.twig', {'id': 'project_rates_box', 'entity': project, 'create_url': path('admin_project_rate_add', {'id': project.id}), 'delete_route': 'delete_project_rate', 'currency': project.customer.currency}) }}\n    {% endif %}\n\n    {% if teams is not null%}\n        {% set options = {'teams': teams, 'team': team} %}\n        {% if is_granted('permissions', project) %}\n            {% set options = options|merge({'route_create': path('project_team_create', {'id': project.id}), 'route_edit': path('admin_project_permissions', {'id': project.id})}) %}\n        {% endif %}\n        {% if project.customer.teams|length > 0 %}\n            {% set options = options|merge({'empty_message': 'team.project_visibility_inherited'}) %}\n        {% endif %}\n        {{ include('embeds/teams.html.twig', options) }}\n    {% endif %}\n\n    {% if comments is not null %}\n        {% set options = {'form': commentForm, 'comments': comments} %}\n        {% if can_edit %}\n            {% set options = options|merge({'route_pin': 'project_comment_pin', 'route_delete': 'project_comment_delete', 'csrf_delete': 'project.delete_comment', 'csrf_pin': 'project.pin_comment'}) %}\n        {% endif %}\n        {{ include('embeds/comments.html.twig', options) }}\n    {% endif %}\n\n{% endblock %}\n\n{% block javascripts %}\n    {{ parent() }}\n    <script type=\"text/javascript\">\n        document.addEventListener('kimai.initialized', function() {\n            KimaiReloadPageWidget.create('kimai.customerTeamUpdate kimai.projectTeamUpdate kimai.activityTeamUpdate kimai.projectUpdate kimai.teamUpdate kimai.customerUpdate kimai.rateUpdate');\n        });\n    </script>\n{% endblock %}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Customer;\nuse App\\Entity\\CustomerComment;\nuse App\\Entity\\CustomerMeta;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Tests\\DataFixtures\\CustomerFixtures;\nuse App\\Tests\\DataFixtures\\ProjectFixtures;\nuse App\\Tests\\DataFixtures\\TeamFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse App\\Tests\\Mocks\\CustomerTestMetaFieldSubscriberMock;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\DomCrawler\\Field\\ChoiceFormField;\n\n/**\n * @group integration\n */\nclass CustomerControllerTest extends ControllerBaseTest\n{\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/admin/customer/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/customer/');\n    }\n\n    public function testIndexAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/customer/');\n        $this->assertHasDataTable($client);\n    }\n\n    public function testIndexActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Customer $customer) {\n            $customer->setVisible(true);\n            $customer->setComment('I am a foobar with tralalalala some more content');\n            $customer->setMetaField((new CustomerMeta())->setName('location')->setValue('homeoffice'));\n            $customer->setMetaField((new CustomerMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_customer_admin', 5);\n    }\n\n    public function testExportIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/customer/export');\n    }\n\n    public function testExportAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/customer/export');\n        $this->assertExcelExportResponse($client, 'kimai-customers_');\n    }\n\n    public function testExportActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $this->request($client, '/admin/customer/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $form->getFormNode()->setAttribute('action', $this->createUrl('/admin/customer/export'));\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertExcelExportResponse($client, 'kimai-customers_');\n    }\n\n    public function testDetailsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        self::assertHasProgressbar($client);\n\n        $node = $client->getCrawler()->filter('div.box#customer_details_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_list_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#time_budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#comments_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box a.btn.btn-default');\n        self::assertEquals(2, $node->count());\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box');\n        self::assertEquals(1, $node->count());\n    }\n\n    public function testAddRateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/rate');\n        $form = $client->getCrawler()->filter('form[name=customer_rate_form]')->form();\n        $client->submit($form, [\n            'customer_rate_form' => [\n                'user' => null,\n                'rate' => 123.45,\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#customer_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString('123.45', $node->text(null, true));\n    }\n\n    public function testAddCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'A beautiful and short comment **with some** markdown formatting',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('<p>A beautiful and short comment <strong>with some</strong> markdown formatting</p>', $node->html());\n    }\n\n    public function testDeleteCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'Blah foo bar',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n\n        $token = self::$container->get('security.csrf.token_manager')->getToken('customer.delete_comment');\n\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-msg');\n        self::assertStringContainsString('Blah foo bar', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.confirmation-link');\n        self::assertStringEndsWith('/comment_delete/' . $token, $node->attr('href'));\n\n        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/comment_delete/' . $token);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n        self::assertStringContainsString('There were no comments posted yet', $node->html());\n    }\n\n    public function testDeleteCommentActionWithoutToken()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'Blah foo bar',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n\n        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/comment_delete');\n\n        $this->assertRouteNotFound($client);\n    }\n\n    public function testPinCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n        $client->submit($form, [\n            'customer_comment_form' => [\n                'message' => 'Blah foo bar',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Blah foo bar', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text a.btn.active');\n        self::assertEquals(0, $node->count());\n\n        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $token = self::$container->get('security.csrf.token_manager')->getToken('customer.pin_comment');\n\n        $this->request($client, '/admin/customer/' . $id . '/comment_pin/' . $token);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(1, $node->count());\n        self::assertEquals($this->createUrl('/admin/customer/' . $id . '/comment_pin/' . $token), $node->attr('href'));\n    }\n\n    public function testCreateDefaultTeamAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body');\n        self::assertStringContainsString('Visible to everyone, as no team was assigned yet.', $node->text(null, true));\n\n        $this->request($client, '/admin/customer/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-title');\n        self::assertStringContainsString('Only visible to the following teams and all admins.', $node->text(null, true));\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        // creating the default team a second time fails, as the name already exists\n        $this->request($client, '/admin/customer/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $this->assertHasFlashError($client, 'Changes could not be saved: Team already existing');\n    }\n\n    public function testProjectsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/projects/1');\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $customer = $em->getRepository(Customer::class)->find(1);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(9); // to trigger a second page (every third activity is hidden)\n        $fixture->setCustomers([$customer]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/1/projects/1');\n\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-tools ul.pagination li');\n        self::assertEquals(4, $node->count());\n\n        $node = $client->getCrawler()->filter('div.box#project_list_box .box-body table tbody tr');\n        self::assertEquals(5, $node->count());\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/create');\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n\n        $kernel = self::bootKernel();\n        $container = $kernel->getContainer();\n        $defaults = $container->getParameter('kimai.defaults')['customer'];\n        $this->assertNull($defaults['timezone']);\n\n        $editForm = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals($defaults['country'], $editForm->get('customer_edit_form[country]')->getValue());\n        $this->assertEquals($defaults['currency'], $editForm->get('customer_edit_form[currency]')->getValue());\n        $this->assertEquals(date_default_timezone_get(), $editForm->get('customer_edit_form[timezone]')->getValue());\n\n        $client->submit($form, [\n            'customer_edit_form' => [\n                'name' => 'Test Customer',\n            ]\n        ]);\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCreateActionShowsMetaFields()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        static::$kernel->getContainer()->get('event_dispatcher')->addSubscriber(new CustomerTestMetaFieldSubscriberMock());\n        $this->assertAccessIsGranted($client, '/admin/customer/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertTrue($form->has('customer_edit_form[metaFields][0][value]'));\n        $this->assertFalse($form->has('customer_edit_form[metaFields][1][value]'));\n    }\n\n    public function testEditAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/customer/1/edit');\n        $form = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals('Test', $form->get('customer_edit_form[name]')->getValue());\n        $client->submit($form, [\n            'customer_edit_form' => [\n                'name' => 'Test Customer 2'\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n        $client->followRedirect();\n        $this->request($client, '/admin/customer/1/edit');\n        $editForm = $client->getCrawler()->filter('form[name=customer_edit_form]')->form();\n        $this->assertEquals('Test Customer 2', $editForm->get('customer_edit_form[name]')->getValue());\n    }\n\n    public function testTeamPermissionAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $em = $this->getEntityManager();\n\n        /** @var Customer $customer */\n        $customer = $em->getRepository(Customer::class)->find(1);\n        self::assertEquals(0, $customer->getTeams()->count());\n\n        $fixture = new TeamFixtures();\n        $fixture->setAmount(2);\n        $fixture->setAddCustomer(false);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/customer/1/permissions');\n        $form = $client->getCrawler()->filter('form[name=customer_team_permission_form]')->form();\n        /** @var ChoiceFormField $team1 */\n        $team1 = $form->get('customer_team_permission_form[teams][0]');\n        $team1->tick();\n        /** @var ChoiceFormField $team2 */\n        $team2 = $form->get('customer_team_permission_form[teams][1]');\n        $team2->tick();\n\n        $client->submit($form);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n\n        /** @var Customer $customer */\n        $customer = $em->getRepository(Customer::class)->find(1);\n        self::assertEquals(2, $customer->getTeams()->count());\n    }\n\n    public function testDeleteAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(1);\n        $customers = $this->importFixture($fixture);\n        $customer = $customers[0];\n        $id = $customer->getId();\n\n        $this->request($client, '/admin/customer/' . $id . '/edit');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->request($client, '/admin/customer/' . $id . '/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/' . $id . '/delete'), $form->getUri());\n        $client->submit($form);\n\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $this->request($client, '/admin/customer/' . $id . '/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntries()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getActivity()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/1/delete'), $form->getUri());\n        $client->submit($form);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/'));\n        $client->followRedirect();\n        $this->assertHasFlashDeleteSuccess($client);\n        $this->assertHasNoEntriesWithFilter($client);\n\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(0, \\count($timesheets));\n\n        $this->request($client, '/admin/customer/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntriesAndReplacement()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n        $fixture = new CustomerFixtures();\n        $fixture->setAmount(1)->setIsVisible(true);\n        $customers = $this->importFixture($fixture);\n        $customer = $customers[0];\n        $id = $customer->getId();\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getProject()->getCustomer()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/customer/1/delete'), $form->getUri());\n        $client->submit($form, [\n            'form' => [\n                'customer' => $id\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/'));\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals($id, $entry->getProject()->getCustomer()->getId());\n        }\n\n        $this->request($client, '/admin/customer/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    /**\n     * @dataProvider getValidationTestData\n     */\n    public function testValidationForCreateAction(array $formData, array $validationFields)\n    {\n        $this->assertFormHasValidationError(\n            User::ROLE_ADMIN,\n            '/admin/customer/create',\n            'form[name=customer_edit_form]',\n            $formData,\n            $validationFields\n        );\n    }\n\n    public function getValidationTestData()\n    {\n        return [\n            [\n                [\n                    'customer_edit_form' => [\n                        'name' => '',\n                        'country' => '00',\n                        'currency' => '00',\n                        'timezone' => 'XXX'\n                    ]\n                ],\n                [\n                    '#customer_edit_form_name',\n                    '#customer_edit_form_country',\n                    '#customer_edit_form_currency',\n                    '#customer_edit_form_timezone',\n                ]\n            ],\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Form\\Type\\DateRangeType;\nuse App\\Tests\\DataFixtures\\InvoiceTemplateFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\n\n/**\n * @group integration\n */\nclass InvoiceControllerTest extends ControllerBaseTest\n{\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this->clearInvoiceFiles();\n    }\n\n    protected function tearDown(): void\n    {\n        parent::tearDown();\n        $this->clearInvoiceFiles();\n    }\n\n    private function clearInvoiceFiles()\n    {\n        $path = __DIR__ . '/../_data/invoices/';\n\n        if (is_dir($path)) {\n            $files = glob($path . '*');\n            foreach ($files as $file) {\n                unlink($file);\n            }\n        }\n    }\n\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/invoice/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/invoice/');\n    }\n\n    public function testIndexActionRedirectsToCreateTemplate()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $this->request($client, '/invoice/');\n        $this->assertIsRedirect($client, '/invoice/template/create');\n    }\n\n    public function testIndexActionHasErrorMessageOnEmptyQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $id = $templates[0]->getId();\n\n        $this->request($client, '/invoice/?customers[]=1&template=' . $id);\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasNoEntriesWithFilter($client);\n    }\n\n    public function testListTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/template');\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n    }\n\n    public function testCreateTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->request($client, '/invoice/template/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $client->submit($form, [\n            'invoice_template_form' => [\n                'name' => 'Test',\n                'title' => 'Test invoice template',\n                'company' => 'Company name',\n                'renderer' => 'default',\n                'calculator' => 'default',\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/invoice/template'));\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCopyTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        /** @var InvoiceTemplate $template */\n        $template = $templates[0];\n\n        $this->request($client, '/invoice/template/create/' . $template->getId());\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $values = $form->getPhpValues()['invoice_template_form'];\n        $this->assertEquals('Copy of ' . $template->getName(), $values['name']);\n        $this->assertEquals($template->getTitle(), $values['title']);\n        $this->assertEquals($template->getDueDays(), $values['dueDays']);\n        $this->assertEquals($template->getCalculator(), $values['calculator']);\n        $this->assertEquals($template->getVat(), $values['vat']);\n        $this->assertEquals($template->getRenderer(), $values['renderer']);\n        $this->assertEquals($template->getCompany(), $values['company']);\n        $this->assertEquals($template->getAddress(), $values['address']);\n        $this->assertEquals($template->getPaymentTerms(), $values['paymentTerms']);\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $template = $templates[0];\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_TEAMLEAD))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $timesheets = $this->importFixture($fixture);\n        foreach ($timesheets as $timesheet) {\n            $this->assertFalse($timesheet->isExported());\n        }\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/'));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // no warning should be displayed\n        $node = $client->getCrawler()->filter('div.callout.callout-warning.lead');\n        $this->assertEquals(0, $node->count());\n        // but the datatable with all timesheets\n        $this->assertDataTableRowCount($client, 'datatable_invoice', 20);\n\n        $urlParams = [\n            'daterange' => $dateRange,\n            'projects[]' => 1,\n            'markAsExported' => 1,\n        ];\n\n        $action = '/invoice/save-invoice/1/' . $template->getId() . '?' . http_build_query($urlParams);\n        $this->request($client, $action);\n        $this->assertIsRedirect($client);\n        $this->assertRedirectUrl($client, '/invoice/show?id=', false);\n        $client->followRedirect();\n        $this->assertDataTableRowCount($client, 'datatable_invoices', 1);\n\n        $em = $this->getEntityManager();\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertCount(20, $timesheets);\n        /** @var Timesheet $timesheet */\n        foreach ($timesheets as $timesheet) {\n            $this->assertTrue($timesheet->isExported());\n        }\n    }\n\n    public function testPrintAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $id = $templates[0]->getId();\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_TEAMLEAD))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $params = [\n            'daterange' => $dateRange,\n            'projects' => [1],\n        ];\n\n        $action = '/invoice/preview/1/' . $id . '?' . http_build_query($params);\n        $this->request($client, $action);\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $node = $client->getCrawler()->filter('body');\n        $this->assertEquals(1, $node->count());\n        $this->assertEquals('invoice_print', $node->getIterator()[0]->getAttribute('class'));\n    }\n\n    public function testCreateActionAsAdminWithDownloadAndStatusChangeAndDelete()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $templates = $this->importFixture($fixture);\n        $template = $templates[0];\n\n        $begin = new \\DateTime('first day of this month');\n        $end = new \\DateTime('last day of this month');\n        $fixture = new TimesheetFixtures();\n        $fixture\n            ->setUser($this->getUserByRole(User::ROLE_ADMIN))\n            ->setAmount(20)\n            ->setStartDate($begin)\n        ;\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $dateRange = $begin->format('Y-m-d') . DateRangeType::DATE_SPACER . $end->format('Y-m-d');\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/?preview='));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // no warning should be displayed\n        $node = $client->getCrawler()->filter('div.callout.callout-warning.lead');\n        $this->assertEquals(0, $node->count());\n        // but the datatable with all timesheets\n        $this->assertDataTableRowCount($client, 'datatable_invoice', 20);\n\n        $form = $client->getCrawler()->filter('#invoice-print-form')->form();\n        $node = $form->getFormNode();\n        $node->setAttribute('action', $this->createUrl('/invoice/?createInvoice=true'));\n        $node->setAttribute('method', 'GET');\n        $client->submit($form, [\n            'template' => $template->getId(),\n            'daterange' => $dateRange,\n            'customers' => [1],\n            'projects' => [1],\n            'markAsExported' => 1,\n        ]);\n\n        $invoices = $this->getEntityManager()->getRepository(Invoice::class)->findAll();\n        $id = $invoices[0]->getId();\n\n        $this->assertIsRedirect($client, '/invoice/show?id=' . $id);\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasFlashSuccess($client);\n\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_invoices', 1);\n\n        // make sure the invoice is saved\n        $this->request($client, '/invoice/download/' . $id);\n        $response = $client->getResponse();\n        $this->assertTrue($response->isSuccessful());\n        self::assertInstanceOf(BinaryFileResponse::class, $response);\n        self::assertFileExists($response->getFile());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/pending');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/paid');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasValidationError(\n            $client,\n            '/invoice/change-status/' . $id . '/paid',\n            'form[name=invoice_payment_date_form]',\n            [\n                'invoice_payment_date_form' => [\n                    'paymentDate' => 'invalid'\n                ]\n            ],\n            ['#invoice_payment_date_form_paymentDate']\n        );\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=invoice_payment_date_form]')->form();\n        $client->submit($form, [\n            'invoice_payment_date_form' => [\n                'paymentDate' => (new \\DateTime())->format('Y-m-d')\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->request($client, '/invoice/change-status/' . $id . '/new');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        // this does not delete the invoice, because the token is wrong\n        $this->request($client, '/invoice/delete/' . $id . '/fghfkjhgkjhg');\n        $this->assertIsRedirect($client, '/invoice/show');\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n    }\n\n    public function testEditTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $template = $this->importFixture($fixture);\n        $id = $template[0]->getId();\n\n        $this->request($client, '/invoice/template/' . $id . '/edit?page=1');\n        $form = $client->getCrawler()->filter('form[name=invoice_template_form]')->form();\n        $client->submit($form, [\n            'invoice_template_form' => [\n                'name' => 'Test 2!',\n                'title' => 'Test invoice template',\n                'company' => 'Company name',\n                'renderer' => 'default',\n                'calculator' => 'default',\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/invoice/template'));\n        $client->followRedirect();\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testDeleteTemplateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $template = $this->importFixture($fixture);\n        $id = $template[0]->getId();\n\n        $token = self::$container->get('security.csrf.token_manager')->getToken('invoice.delete_template');\n\n        $this->request($client, '/invoice/template/' . $id . '/delete/' . $token);\n        $this->assertIsRedirect($client, '/invoice/template');\n        $client->followRedirect();\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasFlashSuccess($client);\n\n        $this->assertEquals(0, $this->getEntityManager()->getRepository(InvoiceTemplate::class)->count([]));\n    }\n\n    public function testUploadDocumentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_SUPER_ADMIN);\n\n        $fixture = new InvoiceTemplateFixtures();\n        $this->importFixture($fixture);\n\n        $this->request($client, '/invoice/document_upload');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $node = $client->getCrawler()->filter('form[name=invoice_document_upload_form]');\n        self::assertEquals(1, $node->count(), 'Could not find upload form');\n        // we do not test the upload here, just make sure that the action can be rendered properly\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Tests\\Controller;\n\nuse App\\Entity\\Activity;\nuse App\\Entity\\ActivityMeta;\nuse App\\Entity\\ActivityRate;\nuse App\\Entity\\Project;\nuse App\\Entity\\ProjectComment;\nuse App\\Entity\\ProjectMeta;\nuse App\\Entity\\ProjectRate;\nuse App\\Entity\\Team;\nuse App\\Entity\\Timesheet;\nuse App\\Entity\\User;\nuse App\\Tests\\DataFixtures\\ActivityFixtures;\nuse App\\Tests\\DataFixtures\\ProjectFixtures;\nuse App\\Tests\\DataFixtures\\TeamFixtures;\nuse App\\Tests\\DataFixtures\\TimesheetFixtures;\nuse App\\Tests\\Mocks\\ProjectTestMetaFieldSubscriberMock;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\DomCrawler\\Field\\ChoiceFormField;\nuse Symfony\\Component\\HttpKernel\\HttpKernelBrowser;\n\n/**\n * @group integration\n */\nclass ProjectControllerTest extends ControllerBaseTest\n{\n    public function testIsSecure()\n    {\n        $this->assertUrlIsSecured('/admin/project/');\n    }\n\n    public function testIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/project/');\n    }\n\n    public function testIndexAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/project/');\n        $this->assertHasDataTable($client);\n    }\n\n    public function testIndexActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Project $project) {\n            $project->setVisible(true);\n            $project->setComment('I am a foobar with tralalalala some more content');\n            $project->setMetaField((new ProjectMeta())->setName('location')->setValue('homeoffice'));\n            $project->setMetaField((new ProjectMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'customers' => [1],\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->assertHasDataTable($client);\n        $this->assertDataTableRowCount($client, 'datatable_project_admin', 5);\n    }\n\n    public function testExportIsSecureForRole()\n    {\n        $this->assertUrlIsSecuredForRole(User::ROLE_USER, '/admin/project/export');\n    }\n\n    public function testExportAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n        $this->assertAccessIsGranted($client, '/admin/project/export');\n        $this->assertExcelExportResponse($client, 'kimai-projects_');\n    }\n\n    public function testExportActionWithSearchTermQuery()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(5);\n        $fixture->setCallback(function (Project $project) {\n            $project->setVisible(true);\n            $project->setComment('I am a foobar with tralalalala some more content');\n            $project->setMetaField((new ProjectMeta())->setName('location')->setValue('homeoffice'));\n            $project->setMetaField((new ProjectMeta())->setName('feature')->setValue('timetracking'));\n        });\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/');\n\n        $form = $client->getCrawler()->filter('form.searchform')->form();\n        $form->getFormNode()->setAttribute('action', $this->createUrl('/admin/project/export'));\n        $client->submit($form, [\n            'searchTerm' => 'feature:timetracking foo',\n            'visibility' => 1,\n            'customers' => [1],\n            'pageSize' => 50,\n            'page' => 1,\n        ]);\n\n        $this->assertExcelExportResponse($client, 'kimai-projects_');\n    }\n\n    public function testDetailsAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n\n        $project = $em->getRepository(Project::class)->find(1);\n\n        $fixture = new TimesheetFixtures();\n        $fixture->setAmount(10);\n        $fixture->setProjects([$project]);\n        $fixture->setUser($this->getUserByRole(User::ROLE_ADMIN));\n        $this->importFixture($fixture);\n\n        $project = $em->getRepository(Project::class)->find(1);\n        $fixture = new ActivityFixtures();\n        $fixture->setAmount(6); // to trigger a second page\n        $fixture->setProjects([$project]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        self::assertHasProgressbar($client);\n\n        $node = $client->getCrawler()->filter('div.box#project_details_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#activity_list_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#time_budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#budget_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#comments_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#team_listing_box a.btn.btn-default');\n        self::assertEquals(2, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n    }\n\n    public function testAddRateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAddRate($client, 123.45, 1);\n    }\n\n    protected function assertAddRate(HttpKernelBrowser $client, $rate, $projectId)\n    {\n        $this->assertAccessIsGranted($client, '/admin/project/' . $projectId . '/rate');\n        $form = $client->getCrawler()->filter('form[name=project_rate_form]')->form();\n        $client->submit($form, [\n            'project_rate_form' => [\n                'user' => null,\n                'rate' => $rate,\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/' . $projectId . '/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString($rate, $node->text(null, true));\n    }\n\n    public function testDuplicateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $project = $em->find(Project::class, 1);\n        $project->setMetaField((new ProjectMeta())->setName('foo')->setValue('bar'));\n        $project->setEnd(new \\DateTime());\n        $em->persist($project);\n        $team = new Team();\n        $team->addTeamlead($this->getUserByRole(User::ROLE_ADMIN));\n        $team->addProject($project);\n        $team->setName('project 1');\n        $em->persist($team);\n        $rate = new ProjectRate();\n        $rate->setProject($project);\n        $rate->setRate(123.45);\n        $em->persist($rate);\n        $activity = new Activity();\n        $activity->setName('blub');\n        $activity->setProject($project);\n        $activity->setMetaField((new ActivityMeta())->setName('blub')->setValue('blab'));\n        $em->persist($activity);\n        $rate = new ActivityRate();\n        $rate->setActivity($activity);\n        $rate->setRate(123.45);\n        $em->persist($rate);\n        $em->flush();\n\n        $this->request($client, '/admin/project/1/duplicate');\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#project_rates_box');\n        self::assertEquals(1, $node->count());\n        $node = $client->getCrawler()->filter('div.box#project_rates_box table.dataTable tbody tr:not(.summary)');\n        self::assertEquals(1, $node->count());\n        self::assertStringContainsString('123.45', $node->text(null, true));\n    }\n\n    public function testAddCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'A beautiful and long comment **with some** markdown formatting',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('<p>A beautiful and long comment <strong>with some</strong> markdown formatting</p>', $node->html());\n    }\n\n    public function testDeleteCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'Foo bar blub',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Foo bar blub', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.confirmation-link');\n\n        $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $token = self::$container->get('security.csrf.token_manager')->getToken('project.delete_comment');\n\n        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_delete/' . $token), $node->attr('href'));\n        $this->request($client, '/admin/project/' . $id . '/comment_delete/' . $token);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n        self::assertStringContainsString('There were no comments posted yet', $node->html());\n    }\n\n    public function testPinCommentAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $form = $client->getCrawler()->filter('form[name=project_comment_form]')->form();\n        $client->submit($form, [\n            'project_comment_form' => [\n                'message' => 'Foo bar blub',\n            ]\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-text');\n        self::assertStringContainsString('Foo bar blub', $node->html());\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(0, $node->count());\n\n        $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n        $id = $comments[0]->getId();\n\n        $token = self::$container->get('security.csrf.token_manager')->getToken('project.pin_comment');\n\n        $this->request($client, '/admin/project/' . $id . '/comment_pin/' . $token);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n        self::assertEquals(1, $node->count());\n        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_pin/' . $token), $node->attr('href'));\n    }\n\n    public function testCreateDefaultTeamAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/details');\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body');\n        self::assertStringContainsString('Visible to everyone, as no team was assigned yet.', $node->text(null, true));\n\n        $this->request($client, '/admin/project/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-title');\n        self::assertStringContainsString('Only visible to the following teams and all admins.', $node->text(null, true));\n        $node = $client->getCrawler()->filter('div.box#team_listing_box .box-body table tbody tr');\n        self::assertEquals(1, $node->count());\n\n        // creating the default team a second time fails, as the name already exists\n        $this->request($client, '/admin/project/1/create_team');\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $this->assertHasFlashError($client, 'Changes could not be saved: Team already existing');\n    }\n\n    public function testActivitiesAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/activities/1');\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools ul.pagination li');\n        self::assertEquals(0, $node->count());\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools a.modal-ajax-form.open-edit');\n        self::assertEquals(1, $node->count());\n\n        /** @var EntityManager $em */\n        $em = $this->getEntityManager();\n        $project = $em->getRepository(Project::class)->find(1);\n        $fixture = new ActivityFixtures();\n        $fixture->setAmount(9); // to trigger a second page (every third activity is hidden)\n        $fixture->setProjects([$project]);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/activities/1');\n\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-tools ul.pagination li');\n        self::assertEquals(4, $node->count());\n\n        $node = $client->getCrawler()->filter('div.box#activity_list_box .box-body table tbody tr');\n        self::assertEquals(5, $node->count());\n    }\n\n    public function testCreateAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/create');\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $client->submit($form, [\n            'project_edit_form' => [\n                'name' => 'Test 2',\n                'customer' => 1,\n            ]\n        ]);\n        $this->assertIsRedirect($client, '/details');\n        $client->followRedirect();\n        $this->assertHasFlashSuccess($client);\n    }\n\n    public function testCreateActionShowsMetaFields()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        static::$kernel->getContainer()->get('event_dispatcher')->addSubscriber(new ProjectTestMetaFieldSubscriberMock());\n        $this->assertAccessIsGranted($client, '/admin/project/create');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertTrue($form->has('project_edit_form[metaFields][0][value]'));\n        $this->assertFalse($form->has('project_edit_form[metaFields][1][value]'));\n    }\n\n    public function testEditAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $this->assertAccessIsGranted($client, '/admin/project/1/edit');\n        $form = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertEquals('Test', $form->get('project_edit_form[name]')->getValue());\n        $client->submit($form, [\n            'project_edit_form' => ['name' => 'Test 2']\n        ]);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n        $client->followRedirect();\n        $this->request($client, '/admin/project/1/edit');\n        $editForm = $client->getCrawler()->filter('form[name=project_edit_form]')->form();\n        $this->assertEquals('Test 2', $editForm->get('project_edit_form[name]')->getValue());\n    }\n\n    public function testTeamPermissionAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n        $em = $this->getEntityManager();\n\n        /** @var Project $project */\n        $project = $em->getRepository(Project::class)->find(1);\n        self::assertEquals(0, $project->getTeams()->count());\n\n        $fixture = new TeamFixtures();\n        $fixture->setAmount(2);\n        $fixture->setAddCustomer(false);\n        $this->importFixture($fixture);\n\n        $this->assertAccessIsGranted($client, '/admin/project/1/permissions');\n        $form = $client->getCrawler()->filter('form[name=project_team_permission_form]')->form();\n        /** @var ChoiceFormField $team1 */\n        $team1 = $form->get('project_team_permission_form[teams][0]');\n        $team1->tick();\n        /** @var ChoiceFormField $team2 */\n        $team2 = $form->get('project_team_permission_form[teams][1]');\n        $team2->tick();\n\n        $client->submit($form);\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n\n        /** @var Project $project */\n        $project = $em->getRepository(Project::class)->find(1);\n        self::assertEquals(2, $project->getTeams()->count());\n    }\n\n    public function testDeleteAction()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(1);\n        /** @var Project[] $projects */\n        $projects = $this->importFixture($fixture);\n        $id = $projects[0]->getId();\n\n        $this->request($client, '/admin/project/' . $id . '/edit');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n        $this->request($client, '/admin/project/' . $id . '/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/' . $id . '/delete'), $form->getUri());\n        $client->submit($form);\n\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $this->request($client, '/admin/project/' . $id . '/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntries()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getActivity()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/1/delete'), $form->getUri());\n        $client->submit($form);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/'));\n        $client->followRedirect();\n        $this->assertHasFlashDeleteSuccess($client);\n        $this->assertHasNoEntriesWithFilter($client);\n\n        $em->clear();\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(0, \\count($timesheets));\n\n        $this->request($client, '/admin/project/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    public function testDeleteActionWithTimesheetEntriesAndReplacement()\n    {\n        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n\n        $em = $this->getEntityManager();\n        $fixture = new TimesheetFixtures();\n        $fixture->setUser($this->getUserByRole(User::ROLE_USER));\n        $fixture->setAmount(10);\n        $this->importFixture($fixture);\n        $fixture = new ProjectFixtures();\n        $fixture->setAmount(1)->setIsVisible(true);\n        $projects = $this->importFixture($fixture);\n        $id = $projects[0]->getId();\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals(1, $entry->getProject()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/delete');\n        $this->assertTrue($client->getResponse()->isSuccessful());\n\n        $form = $client->getCrawler()->filter('form[name=form]')->form();\n        $this->assertStringEndsWith($this->createUrl('/admin/project/1/delete'), $form->getUri());\n        $client->submit($form, [\n            'form' => [\n                'project' => $id\n            ]\n        ]);\n\n        $this->assertIsRedirect($client, $this->createUrl('/admin/project/'));\n        $client->followRedirect();\n        $this->assertHasDataTable($client);\n        $this->assertHasFlashSuccess($client);\n\n        $timesheets = $em->getRepository(Timesheet::class)->findAll();\n        $this->assertEquals(10, \\count($timesheets));\n\n        /** @var Timesheet $entry */\n        foreach ($timesheets as $entry) {\n            $this->assertEquals($id, $entry->getProject()->getId());\n        }\n\n        $this->request($client, '/admin/project/1/edit');\n        $this->assertFalse($client->getResponse()->isSuccessful());\n    }\n\n    /**\n     * @dataProvider getValidationTestData\n     */\n    public function testValidationForCreateAction(array $formData, array $validationFields)\n    {\n        $this->assertFormHasValidationError(\n            User::ROLE_ADMIN,\n            '/admin/project/create',\n            'form[name=project_edit_form]',\n            $formData,\n            $validationFields\n        );\n    }\n\n    public function getValidationTestData()\n    {\n        return [\n            [\n                [\n                    'project_edit_form' => [\n                        'name' => '',\n                        'customer' => 0,\n                    ]\n                ],\n                [\n                    '#project_edit_form_name',\n                    '#project_edit_form_customer',\n                ]\n            ],\n        ];\n    }\n}\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" version=\"1.2\">\n  <file source-language=\"en\" target-language=\"de\" datatype=\"plaintext\" original=\"flashmessages.en.xlf\">\n    <body>\n      <trans-unit id=\"S9k1S7Z\" resname=\"warning\">\n        <source>warning</source>\n        <target>Warnung</target>\n      </trans-unit>\n      <trans-unit id=\"WmrEP_5\" resname=\"timesheet.stop.success\">\n        <source>timesheet.stop.success</source>\n        <target>Zeitmessung wurde gestoppt</target>\n      </trans-unit>\n      <trans-unit id=\"NPBnpK_\" resname=\"timesheet.stop.error\">\n        <source>timesheet.stop.error</source>\n        <target>Zeitmessung konnte nicht gestoppt werden</target>\n      </trans-unit>\n      <trans-unit id=\"CCUoZga\" resname=\"timesheet.start.success\">\n        <source>timesheet.start.success</source>\n        <target>Zeitmessung wurde gestartet</target>\n      </trans-unit>\n      <trans-unit id=\"3w9tuox\" resname=\"timesheet.start.error\">\n        <source>timesheet.start.error</source>\n        <target>Zeitmessung konnte nicht gestartet werden</target>\n      </trans-unit>\n      <trans-unit id=\"srhs0gp\" resname=\"timesheet.start.exceeded_limit\">\n        <source>timesheet.start.exceeded_limit</source>\n        <target>Das Limit aktiver Zeitmessungen wurde erreicht, bitte stoppen Sie mindestens eine laufende Zeitmessung.</target>\n      </trans-unit>\n      <trans-unit id=\"kPINWEK\" resname=\"timesheet.locked.warning\">\n        <source>timesheet.locked.warning</source>\n        <target>Sie bearbeiten einen exportierten Eintrag</target>\n      </trans-unit>\n      <trans-unit id=\"72Ih8zO\" resname=\"action.update.success\">\n        <source>action.update.success</source>\n        <target>\u00c4nderungen gespeichert</target>\n      </trans-unit>\n      <trans-unit id=\"xeu1LSy\" resname=\"action.update.error\">\n        <source>action.update.error</source>\n        <target>\u00c4nderungen konnten nicht gespeichert werden: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"YV50HDB\" resname=\"action.delete.success\">\n        <source>action.delete.success</source>\n        <target>Eintrag wurde gel\u00f6scht</target>\n      </trans-unit>\n      <trans-unit id=\"mW91Tmb\" resname=\"action.delete.error\">\n        <source>action.delete.error</source>\n        <target>Eintrag konnte nicht gel\u00f6scht werden: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"B_cz49z\" resname=\"invoice.first_template\">\n        <source>invoice.first_template</source>\n        <target>Bitte legen Sie zun\u00e4chst eine Rechnungsvorlage an</target>\n      </trans-unit>\n      <trans-unit id=\"wejAEcR\" resname=\"action.upload.error\">\n        <source>action.upload.error</source>\n        <target>Die Datei konnte nicht hochgeladen bzw. gespeichert werden: %reason%</target>\n      </trans-unit>\n      <trans-unit resname=\"action.csrf.error\" id=\"bOE_q5R\">\n        <source>action.csrf.error</source>\n        <target>Die Aktion konnte nicht durchgef\u00fchrt werden: ung\u00fcltiges Sicherheitstoken.</target>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n", "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:1.2\" version=\"1.2\">\n  <file source-language=\"en\" target-language=\"en\" datatype=\"plaintext\" original=\"flashmessages.en.xlf\">\n    <body>\n      <trans-unit id=\"S9k1S7Z\" resname=\"warning\">\n        <source>warning</source>\n        <target>Warning</target>\n      </trans-unit>\n      <trans-unit id=\"WmrEP_5\" resname=\"timesheet.stop.success\">\n        <source>timesheet.stop.success</source>\n        <target>Time recording was stopped</target>\n      </trans-unit>\n      <trans-unit id=\"NPBnpK_\" resname=\"timesheet.stop.error\">\n        <source>timesheet.stop.error</source>\n        <target>Time recording could not be stopped</target>\n      </trans-unit>\n      <trans-unit id=\"CCUoZga\" resname=\"timesheet.start.success\">\n        <source>timesheet.start.success</source>\n        <target>Time recording was started</target>\n      </trans-unit>\n      <trans-unit id=\"3w9tuox\" resname=\"timesheet.start.error\">\n        <source>timesheet.start.error</source>\n        <target>Time recording could not be started</target>\n      </trans-unit>\n      <trans-unit id=\"srhs0gp\" resname=\"timesheet.start.exceeded_limit\">\n        <source>timesheet.start.exceeded_limit</source>\n        <target>The limit of active time records has been reached, please stop at least one running time measurement first.</target>\n      </trans-unit>\n      <trans-unit id=\"kPINWEK\" resname=\"timesheet.locked.warning\">\n        <source>timesheet.locked.warning</source>\n        <target>You are editing an exported record</target>\n      </trans-unit>\n      <trans-unit id=\"72Ih8zO\" resname=\"action.update.success\">\n        <source>action.update.success</source>\n        <target>Saved changes</target>\n      </trans-unit>\n      <trans-unit id=\"xeu1LSy\" resname=\"action.update.error\">\n        <source>action.update.error</source>\n        <target>Changes could not be saved: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"YV50HDB\" resname=\"action.delete.success\">\n        <source>action.delete.success</source>\n        <target>Entry was deleted</target>\n      </trans-unit>\n      <trans-unit id=\"mW91Tmb\" resname=\"action.delete.error\">\n        <source>action.delete.error</source>\n        <target>Entry could not be deleted: %reason%</target>\n      </trans-unit>\n      <trans-unit id=\"B_cz49z\" resname=\"invoice.first_template\">\n        <source>invoice.first_template</source>\n        <target>Please create an invoice template first</target>\n      </trans-unit>\n      <trans-unit id=\"wejAEcR\" resname=\"action.upload.error\">\n        <source>action.upload.error</source>\n        <target>The file could not be uploaded or saved: %reason%</target>\n      </trans-unit>\n      <trans-unit resname=\"action.csrf.error\" id=\"bOE_q5R\">\n        <source>action.csrf.error</source>\n        <target>The action could not be performed: invalid security token.</target>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n"], "filenames": ["src/Controller/CustomerController.php", "src/Controller/DoctorController.php", "src/Controller/InvoiceController.php", "src/Controller/PermissionController.php", "src/Controller/ProjectController.php", "src/EventSubscriber/Actions/InvoiceTemplateSubscriber.php", "templates/customer/details.html.twig", "templates/embeds/comments.html.twig", "templates/invoice/actions.html.twig", "templates/project/details.html.twig", "tests/Controller/CustomerControllerTest.php", "tests/Controller/InvoiceControllerTest.php", "tests/Controller/ProjectControllerTest.php", "translations/flashmessages.de.xlf", "translations/flashmessages.en.xlf"], "buggy_code_start_loc": [43, 67, 263, 212, 45, 39, 142, 1, 33, 147, 178, 398, 264, 56, 56], "buggy_code_end_loc": [212, 68, 459, 213, 234, 40, 143, 33, 34, 148, 220, 399, 298, 56, 56], "fixing_code_start_loc": [44, 67, 263, 212, 46, 39, 142, 1, 33, 147, 179, 398, 264, 57, 57], "fixing_code_end_loc": [232, 68, 467, 213, 254, 40, 143, 33, 34, 148, 246, 401, 302, 61, 61], "type": "CWE-352", "message": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3963", "sourceIdentifier": "security@huntr.dev", "published": "2021-11-19T12:15:09.110", "lastModified": "2021-11-23T17:23:11.880", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "kimai2 es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kimai:kimai_2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.2", "matchCriteriaId": "18DE946F-C2DA-4605-B44E-49B5DC42961C"}]}]}], "references": [{"url": "https://github.com/kevinpapst/kimai2/commit/95796ab2560ad93f44068a88f0fad758c2053514", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3abf308b-7dbd-4864-b1a9-5c45b876def8", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kevinpapst/kimai2/commit/95796ab2560ad93f44068a88f0fad758c2053514"}}