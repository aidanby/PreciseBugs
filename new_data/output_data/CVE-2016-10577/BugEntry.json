{"buggy_code": ["/**\n * New node file\n */\n\nvar fs = require('fs');\nvar url = require('url');\nvar http = require('http');\nvar os = require('os');\nvar path = require('path');\nvar exec = require('child_process').exec;\n\nvar installerURL = 'http://public.dhe.ibm.com/ibmdl/export/pub/software/data/db2/drivers/odbc_cli/';\nvar CURRENT_DIR = process.cwd();\nvar DOWNLOAD_DIR = path.resolve(CURRENT_DIR, 'installer');\nvar INSTALLER_FILE; \ninstallerURL = process.env.IBM_DB_INSTALLER_URL || installerURL;\ninstallerURL = installerURL + \"/\";\n\n//Function to download file using HTTP.get\nvar download_file_httpget = function(file_url) {\n    var readStream;\n    var writeStream;\n    var platform = os.platform();\n    var arch = os.arch();\n    var endian = os.endianness();\n    var installerfileURL;\n    \n    var fstream = require('fstream');\n    var unzip = require('unzip');\n                \n    var IBM_DB_HOME, IBM_DB_INCLUDE, IBM_DB_LIB, IBM_DB_DIR;\n    \n    if(platform == 'win32') {\n        \n        if(arch == 'x64') {\n            var BUILD_FILE = path.resolve(CURRENT_DIR, 'build.zip');\n            readStream = fs.createReadStream(BUILD_FILE);\n            writeStream = fstream.Writer(CURRENT_DIR);\n\n            readStream\n              .pipe(unzip.Parse())\n              .pipe(writeStream).on(\"unpipe\", function () {\n                fs.unlinkSync(BUILD_FILE);\n                var ODBC_BINDINGS = path.resolve(CURRENT_DIR, \n                              'build\\\\Release\\\\odbc_bindings.node');\n                var ODBC_BINDINGS_V10 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.0.10.36');\n                var ODBC_BINDINGS_V12 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.0.12.7');\n\t\t\t\tvar ODBC_BINDINGS_V4 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.4.6.1');\n                fs.exists(ODBC_BINDINGS_V10, function() {\n                  if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 0.12) {\n                      fs.renameSync(ODBC_BINDINGS_V10, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  } else if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 4.0) {\n                      fs.renameSync(ODBC_BINDINGS_V12, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  } else if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 5.0) {\n                      fs.renameSync(ODBC_BINDINGS_V4, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                  } else {\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  }\n                });\n            });\n            removeUsedPackages();\n        } else {\n            console.log('Windows 32 bit not supported. Please use an ' +\n                        'x64 architecture.');\n            return;\n        }\n    }\n    \n    if(process.env.IBM_DB_HOME) \n    {\n        IBM_DB_HOME = process.env.IBM_DB_HOME;\n        IBM_DB_INCLUDE = path.resolve(IBM_DB_HOME, 'include');\n        if (fs.existsSync(IBM_DB_HOME + \"/lib64\")) {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib64');\n        } else if (fs.existsSync(IBM_DB_HOME + \"/lib32\")) {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib32');\n        } else {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib');\n        }\n        console.log('IBM_DB_HOME environment variable have already been set to '+IBM_DB_HOME);\n        \n        if (!fs.existsSync(IBM_DB_HOME)) {\n            console.log(IBM_DB_HOME + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        \n        if (!fs.existsSync(IBM_DB_INCLUDE)) {\n            console.log(IBM_DB_INCLUDE + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        \n        if (!fs.existsSync(IBM_DB_LIB)) {\n            console.log(IBM_DB_LIB + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        if( platform != 'win32') {\n            if(!fs.existsSync(IBM_DB_HOME + \"/lib\"))\n                fs.symlinkSync(IBM_DB_LIB, path.resolve(IBM_DB_HOME, 'lib'));\n\n            if((platform == 'linux') || (platform =='aix') || \n               (platform == 'darwin' && arch == 'x64')) {\n                removeWinBuildArchive();\n                buildBinary(false);\n            } else {\n                console.log('Building binaries for node-ibm_db. This platform is not completely supported, you might encounter errors. In such cases please open an issue on our repository, https://github.com/ibmdb/node-ibm_db.');\n                buildBinary(false);\n            }\n        }\n    } else {\n        if(platform == 'win32') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'ntx64_odbc_cli.zip';\n            }/* else {\n                installerfileURL = installerURL + 'nt32_odbc_cli.zip';\n            }*/\n        } \n        else if(platform == 'linux') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'linuxx64_odbc_cli.tar.gz';\n            } else if(arch == 's390x') {\n                installerfileURL = installerURL + 's390x64_odbc_cli.tar.gz';\n            } else if(arch == 's390') {\n                installerfileURL = installerURL + 's390_odbc_cli.tar.gz';\n            } else if(arch == 'ppc64') {\n                if(endian == 'LE')\n                    installerfileURL = installerURL + 'ppc64le_odbc_cli.tar.gz';\n                else\n                    installerfileURL = installerURL + 'ppc64_odbc_cli.tar.gz';\n            } else if(arch == 'ppc32') {\n                installerfileURL = installerURL + 'ppc32_odbc_cli.tar.gz';\n            } else {\n                installerfileURL = installerURL + 'linuxia32_odbc_cli.tar.gz';\n            }\n        } \n        else if(platform == 'darwin') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'macos64_odbc_cli.tar.gz';\n            } else {\n                console.log('Mac OS 32 bit not supported. Please use an ' +\n                            'x64 architecture.');\n                return;\n            }\n        } \n        else if(platform == 'aix')\n        {\n            if(arch == 'ppc')\n            {\n                installerfileURL = installerURL + 'aix32_odbc_cli.tar.gz';\n            }\n            else\n            {\n                installerfileURL = installerURL + 'aix64_odbc_cli.tar.gz';\n            }\n        }\n        else \n        {\n            installerfileURL = installerURL + platform + arch + \n                               '_odbc_cli.tar.gz';\n        }\n        \n        if(!installerfileURL) {\n            console.log('Unable to fetch driver download file. Exiting the ' +\n                        'install process.');\n            process.exit(1);\n        }\n        \n        var license_agreement = '\\n****************************************\\nYou are downloading a package which includes the Node.js module for IBM DB2/Informix.  The module is licensed under the Apache License 2.0. The package also includes IBM ODBC and CLI Driver from IBM, which is automatically downloaded as the node module is installed on your system/device. The license agreement to the IBM ODBC and CLI Driver is available in '+DOWNLOAD_DIR+'   Check for additional dependencies, which may come with their own license agreement(s). Your use of the components of the package and dependencies constitutes your acceptance of their respective license agreements. If you do not accept the terms of any license agreement(s), then delete the relevant component(s) from your device.\\n****************************************\\n';\n\n        var file_name = url.parse(installerfileURL).pathname.split('/').pop();\n        INSTALLER_FILE = path.resolve(DOWNLOAD_DIR, file_name);\n        \n        console.log('Downloading DB2 ODBC CLI Driver from ' +\n                    installerfileURL+'...');\n\n        fs.stat(installerfileURL, function (err, stats) {\n            if (err) {\n                buildHttpOptions(installerfileURL);\n            }\n            else if(stats.isFile()) \n                copyAndExtractDriver(fs.readFileSync(installerfileURL));\n            else\n                buildHttpOptions(installerfileURL);\n        });\n\n    }  // * END OF EXECUTION */\n        \n    var downloadCLIDriver = function(res)\n    {\n        if( res.statusCode != 200 ) \n        {\n            console.log( \"Unable to download IBM ODBC and CLI Driver from \" +\n                  installerfileURL );\n            process.exit(1);\n        }\n        //var file = fs.createWriteStream(INSTALLER_FILE);\n        var fileLength = parseInt( res.headers['content-length'] ); \n        var buf = new Buffer( fileLength );\n        var byteIndex = 0;\n            \n        res.on('data', function(data) {\n            if( byteIndex + data.length > buf.length ) \n            {\n                console.log( \"Error downloading IBM ODBC and CLI Driver from \" +\n                     installerfileURL );\n                process.exit(1);\n            }\n            data.copy( buf, byteIndex );\n            byteIndex += data.length;\n         }).on('end', function() {\n             if( byteIndex != buf.length ) \n             {\n                console.log( \"Error downloading IBM ODBC and CLI Driver from \" +\n                     installerfileURL );\n                process.exit(1);\n             }\n             copyAndExtractDriver(buf);\n         });\n    } // downloadCLIDriver\n    \n    function copyAndExtractDriver(buf)\n    {\n        var file = fs.openSync( INSTALLER_FILE, 'w');\n        var len = fs.writeSync( file, buf, 0, buf.length, 0 );\n        if( len != buf.length ) \n        {\n            console.log( \"Error writing IBM ODBC and CLI Driver to a file\" );\n            process.exit(1);\n        }\n        fs.closeSync( file );\n        if(platform == 'win32') \n        {\n            readStream = fs.createReadStream(INSTALLER_FILE);\n            writeStream = fstream.Writer(DOWNLOAD_DIR);\n\n            readStream.pipe(unzip.Parse()).pipe(writeStream);\n            console.log('Download and extraction of DB2 ODBC ' +\n                        'CLI Driver completed successfully ...');\n            console.log(license_agreement);\n        } \n        else \n        {\n            var targz = require('targz');\n            var compress = targz.decompress({src: INSTALLER_FILE, dest: \"DOWNLOAD_DIR\"}, function(err){\n              if(err) {\n                console.log(err);\n                process.exit(1);\n              }\n              else {\n                console.log('Download and extraction of DB2 ODBC ' +\n                            'CLI Driver completed successfully ...');\n                console.log(license_agreement);\n                IBM_DB_HOME = path.resolve(DOWNLOAD_DIR, 'clidriver');\n                process.env.IBM_DB_HOME = IBM_DB_HOME.replace(/\\s/g,'\\\\ ');\n                buildBinary(true);\n                removeWinBuildArchive();\n              }\n\t        });\n        }\n    }\n\n    function buildBinary(isDownloaded) \n    {\n        var buildString = \"node-gyp configure build --IBM_DB_HOME=\\\"$IBM_DB_HOME\\\"\";\n        if(isDownloaded) {\n            buildString = buildString + \" --IS_DOWNLOADED=true\";\n        } else {\n            buildString = buildString + \" --IS_DOWNLOADED=false\";\n        }\n        if( platform == 'win32') \n        {\n            buildString = buildString + \" --IBM_DB_HOME_WIN=%IBM_DB_HOME%\";\n        }\n        var childProcess = exec(buildString, function (error, stdout, stderr) {\n            console.log(stdout);\n            if (error !== null) {\n                console.log(error);\n                process.exit(1);\n            }\n\n            if(platform == 'darwin' && arch == 'x64') \n            {\n                // Run the install_name_tool\n                var nameToolCommand = \"install_name_tool -change libdb2.dylib $IBM_DB_HOME/lib/libdb2.dylib ./build/Release/odbc_bindings.node\"\n                var nameToolCmdProcess = exec(nameToolCommand , \n                  function (error1, stdout1, stderr1) {\n                    if (error1 !== null) {\n                        console.log('Error setting up the lib path to ' +\n                            'odbc_bindings.node file.Error trace:\\n'+error1);\n                        process.exit(1);\n                    }\n                });\n            }\n            removeUsedPackages();\n        });\n    } //buildBinary\n    \n    function removeUsedPackages()\n    {\n        var packages = [\"nan\", \"fstream\", \"unzip\", \"targz\"];\n        for( var index = 0; index < packages.length; index++ )\n        {\n          var command = \"npm uninstall \" + packages[index];\n          var childProcess = exec(command, function (error, stdout, stderr) {\n            console.log(stdout);\n            if (error !== null) {\n                console.log(error);\n                // Ignore error and continue to remove other packages.\n                // Installation of ibm_db should not fail due to such errors.\n            }\n          });\n        }\n    }\n\n    function removeWinBuildArchive() \n    {\n        var WIN_BUILD_FILE = path.resolve(CURRENT_DIR, 'build.zip');\n        fs.exists(WIN_BUILD_FILE, function(exists) \n        {\n            if (exists) \n            {\n                fs.unlinkSync(WIN_BUILD_FILE);\n            }\n        });\n    }\n    \n    function buildHttpOptions(installerfileURL) \n    {\n        var options = {\n             host: url.parse(installerfileURL).host,\n             port: 80,\n             path: url.parse(installerfileURL).pathname\n            };\n        var proxyStr;\n        \n        var child = exec('npm config get proxy', function(error, stdout, stderr)\n          {\n            if (error !== null) \n            {\n                console.log('Error occurred while fetching proxy ' +\n                            'property from npm configuration -->\\n' + error);\n                return http.get(options, downloadCLIDriver); \n            }\n            \n            proxyStr = stdout.toString().split('\\n')[0];\n            if(proxyStr === 'null') \n            {\n                //console.log('Null Returned');\n                child = exec('npm config get https-proxy', \n                  function(error, stdout, stderr) \n                  {\n                    //console.log('stderr: ' + stderr);\n                    if (error !== null) \n                    {\n                        console.log('Error occurred while fetching https-proxy'+\n                            ' property from npm configuration -->\\n' + error);\n                        return http.get(options, downloadCLIDriver); \n                    }\n                    \n                    proxyStr = stdout.toString().split('\\n')[0];\n                    if(proxyStr !== 'null') \n                    {\n                        var splitIndex = proxyStr.toString().lastIndexOf(':');\n                        if(splitIndex > 0) \n                        {\n                            var proxyUrl = url.parse(proxyStr.toString());\n                            options = {\n                             host: proxyUrl.hostname,\n                             port: proxyUrl.port,\n                             path: url.parse(installerfileURL).href\n                            };\n                            if (proxyUrl.auth) \n                            {\n                               options.headers = { 'Proxy-Authorization': 'Basic '\n                                   + new Buffer(proxyUrl.auth).toString('base64') };\n                            }\n                        }\n                    }\n                    return http.get(options, downloadCLIDriver); \n                });\n            } else \n            {\n                var splitIndex = proxyStr.toString().lastIndexOf(':');\n                if(splitIndex > 0) {\n                    var proxyUrl = url.parse(proxyStr.toString());\n                    options = {\n                     host: proxyUrl.hostname,\n                     port: proxyUrl.port,\n                     path: url.parse(installerfileURL).href\n                    };\n                    if (proxyUrl.auth) \n                    {\n                       options.headers = { 'Proxy-Authorization': 'Basic '\n                           + new Buffer(proxyUrl.auth).toString('base64') };\n                    }\n                }\n                return http.get(options, downloadCLIDriver); \n            }\n        });\n    } //buildHttpOptions\n}; //download_file_httpget\n\ndownload_file_httpget();\n\n", "{\n  \"name\": \"ibm_db\",\n  \"description\": \"IBM DB2 and IBM Informix bindings for node\",\n  \"version\": \"1.0.2\",\n  \"main\": \"lib/odbc.js\",\n  \"homepage\": \"http://github.com/ibmdb/node-ibm_db/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/ibmdb/node-ibm_db.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/ibmdb/node-ibm_db/issues\"\n  },\n  \"contributors\": [\n    \"IBM <opendev@us.ibm.com>\"\n  ],\n  \"directories\": {\n    \"example\": \"examples\",\n    \"test\": \"test\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"scripts\": {\n    \"install\": \"node installer/driverInstall.js\",\n    \"test\": \"cd test && node run-tests.js\"\n  },\n  \"dependencies\": {\n    \"bindings\": \"~1.2.1\",\n    \"fstream\": \"~1.0.10\",\n    \"nan\": \"~2.3.5\",\n    \"q\": \"^1.4.1\",\n    \"targz\": \"^1.0.1\",\n    \"unzip\": \"~0.1.11\"\n  },\n  \"keywords\": [\n    \"node\",\n    \"odbc\",\n    \"db2\",\n    \"driver\"\n  ],\n  \"author\": \"IBM\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"async\": \"^2.0.1\",\n    \"bluebird\": \"^3.4.3\",\n    \"moment\": \"^2.14.1\"\n  }\n}\n"], "fixing_code": ["/**\n * New node file\n */\n\nvar fs = require('fs');\nvar url = require('url');\nvar http = require('https');\nvar os = require('os');\nvar path = require('path');\nvar exec = require('child_process').exec;\n\nvar installerURL = 'https://public.dhe.ibm.com/ibmdl/export/pub/software/data/db2/drivers/odbc_cli';\nvar CURRENT_DIR = process.cwd();\nvar DOWNLOAD_DIR = path.resolve(CURRENT_DIR, 'installer');\nvar INSTALLER_FILE; \ninstallerURL = process.env.IBM_DB_INSTALLER_URL || installerURL;\ninstallerURL = installerURL + \"/\";\n\n//Function to download file using HTTP.get\nvar download_file_httpget = function(file_url) {\n    var readStream;\n    var writeStream;\n    var platform = os.platform();\n    var arch = os.arch();\n    var endian = os.endianness();\n    var installerfileURL;\n    \n    var fstream = require('fstream');\n    var unzip = require('unzip');\n                \n    var IBM_DB_HOME, IBM_DB_INCLUDE, IBM_DB_LIB, IBM_DB_DIR;\n    \n    if(platform == 'win32') {\n        if(arch == 'x64') {\n            var BUILD_FILE = path.resolve(CURRENT_DIR, 'build.zip');\n            readStream = fs.createReadStream(BUILD_FILE);\n            writeStream = fstream.Writer(CURRENT_DIR);\n\n            readStream\n              .pipe(unzip.Parse())\n              .pipe(writeStream).on(\"unpipe\", function () {\n                fs.unlinkSync(BUILD_FILE);\n                var ODBC_BINDINGS = path.resolve(CURRENT_DIR, \n                              'build\\\\Release\\\\odbc_bindings.node');\n                var ODBC_BINDINGS_V10 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.0.10.36');\n                var ODBC_BINDINGS_V12 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.0.12.7');\n\t\t\t\tvar ODBC_BINDINGS_V4 = path.resolve(CURRENT_DIR,\n                              'build\\\\Release\\\\odbc_bindings.node.4.6.1');\n                fs.exists(ODBC_BINDINGS_V10, function() {\n                  if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 0.12) {\n                      fs.renameSync(ODBC_BINDINGS_V10, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  } else if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 4.0) {\n                      fs.renameSync(ODBC_BINDINGS_V12, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  } else if(Number(process.version.match(/^v(\\d+\\.\\d+)/)[1]) < 5.0) {\n                      fs.renameSync(ODBC_BINDINGS_V4, ODBC_BINDINGS);\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                  } else {\n                      fs.unlinkSync(ODBC_BINDINGS_V10);\n                      fs.unlinkSync(ODBC_BINDINGS_V12);\n                      fs.unlinkSync(ODBC_BINDINGS_V4);\n                  }\n                });\n            });\n            removeUsedPackages();\n        } else {\n            console.log('Windows 32 bit not supported. Please use an ' +\n                        'x64 architecture.');\n            return;\n        }\n    }\n    \n    if(process.env.IBM_DB_HOME) \n    {\n        IBM_DB_HOME = process.env.IBM_DB_HOME;\n        IBM_DB_INCLUDE = path.resolve(IBM_DB_HOME, 'include');\n        if (fs.existsSync(IBM_DB_HOME + \"/lib64\")) {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib64');\n        } else if (fs.existsSync(IBM_DB_HOME + \"/lib32\")) {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib32');\n        } else {\n           IBM_DB_LIB = path.resolve(IBM_DB_HOME, 'lib');\n        }\n        console.log('IBM_DB_HOME environment variable have already been set to '+IBM_DB_HOME);\n        \n        if (!fs.existsSync(IBM_DB_HOME)) {\n            console.log(IBM_DB_HOME + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        \n        if (!fs.existsSync(IBM_DB_INCLUDE)) {\n            console.log(IBM_DB_INCLUDE + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        \n        if (!fs.existsSync(IBM_DB_LIB)) {\n            console.log(IBM_DB_LIB + ' directory does not exist. Please check if you have ' + \n                        'set the IBM_DB_HOME environment variable\\'s value correctly.');\n        }\n        if( platform != 'win32') {\n            if(!fs.existsSync(IBM_DB_HOME + \"/lib\"))\n                fs.symlinkSync(IBM_DB_LIB, path.resolve(IBM_DB_HOME, 'lib'));\n\n            if((platform == 'linux') || (platform =='aix') || \n               (platform == 'darwin' && arch == 'x64')) {\n                removeWinBuildArchive();\n                buildBinary(false);\n            } else {\n                console.log('Building binaries for node-ibm_db. This platform is not completely supported, you might encounter errors. In such cases please open an issue on our repository, https://github.com/ibmdb/node-ibm_db.');\n                buildBinary(false);\n            }\n        }\n    } else {\n        if(platform == 'win32') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'ntx64_odbc_cli.zip';\n            }/* else {\n                installerfileURL = installerURL + 'nt32_odbc_cli.zip';\n            }*/\n        } \n        else if(platform == 'linux') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'linuxx64_odbc_cli.tar.gz';\n            } else if(arch == 's390x') {\n                installerfileURL = installerURL + 's390x64_odbc_cli.tar.gz';\n            } else if(arch == 's390') {\n                installerfileURL = installerURL + 's390_odbc_cli.tar.gz';\n            } else if(arch == 'ppc64') {\n                if(endian == 'LE')\n                    installerfileURL = installerURL + 'ppc64le_odbc_cli.tar.gz';\n                else\n                    installerfileURL = installerURL + 'ppc64_odbc_cli.tar.gz';\n            } else if(arch == 'ppc32') {\n                installerfileURL = installerURL + 'ppc32_odbc_cli.tar.gz';\n            } else {\n                installerfileURL = installerURL + 'linuxia32_odbc_cli.tar.gz';\n            }\n        } \n        else if(platform == 'darwin') \n        {\n            if(arch == 'x64') {\n                installerfileURL = installerURL + 'macos64_odbc_cli.tar.gz';\n            } else {\n                console.log('Mac OS 32 bit not supported. Please use an ' +\n                            'x64 architecture.');\n                return;\n            }\n        } \n        else if(platform == 'aix')\n        {\n            if(arch == 'ppc')\n            {\n                installerfileURL = installerURL + 'aix32_odbc_cli.tar.gz';\n            }\n            else\n            {\n                installerfileURL = installerURL + 'aix64_odbc_cli.tar.gz';\n            }\n        }\n        else \n        {\n            installerfileURL = installerURL + platform + arch + \n                               '_odbc_cli.tar.gz';\n        }\n        \n        if(!installerfileURL) {\n            console.log('Unable to fetch driver download file. Exiting the ' +\n                        'install process.');\n            process.exit(1);\n        }\n        \n        var license_agreement = '\\n****************************************\\nYou are downloading a package which includes the Node.js module for IBM DB2/Informix.  The module is licensed under the Apache License 2.0. The package also includes IBM ODBC and CLI Driver from IBM, which is automatically downloaded as the node module is installed on your system/device. The license agreement to the IBM ODBC and CLI Driver is available in '+DOWNLOAD_DIR+'   Check for additional dependencies, which may come with their own license agreement(s). Your use of the components of the package and dependencies constitutes your acceptance of their respective license agreements. If you do not accept the terms of any license agreement(s), then delete the relevant component(s) from your device.\\n****************************************\\n';\n\n        var file_name = url.parse(installerfileURL).pathname.split('/').pop();\n        INSTALLER_FILE = path.resolve(DOWNLOAD_DIR, file_name);\n        \n        console.log('Downloading DB2 ODBC CLI Driver from ' +\n                    installerfileURL+'...');\n\n        fs.stat(installerfileURL, function (err, stats) {\n            if (err) {\n                buildHttpOptions(installerfileURL);\n            }\n            else if(stats.isFile()) \n                copyAndExtractDriver(fs.readFileSync(installerfileURL));\n            else\n                buildHttpOptions(installerfileURL);\n        });\n\n    }  // * END OF EXECUTION */\n        \n    var downloadCLIDriver = function(res)\n    {\n        if( res.statusCode != 200 ) \n        {\n            console.log( \"Unable to download IBM ODBC and CLI Driver from \" +\n                  installerfileURL );\n            process.exit(1);\n        }\n        //var file = fs.createWriteStream(INSTALLER_FILE);\n        var fileLength = parseInt( res.headers['content-length'] ); \n        var buf = new Buffer( fileLength );\n        var byteIndex = 0;\n            \n        res.on('data', function(data) {\n            if( byteIndex + data.length > buf.length ) \n            {\n                console.log( \"Error downloading IBM ODBC and CLI Driver from \" +\n                     installerfileURL );\n                process.exit(1);\n            }\n            data.copy( buf, byteIndex );\n            byteIndex += data.length;\n            process.stdout.write((platform == 'win32') ? \"\\033[0G\": \"\\r\");\n            process.stdout.write(\"Downloaded \" + (100.0 * byteIndex / fileLength).toFixed(2) + \n                                 \"% (\" + byteIndex + \" bytes)\");\n         }).on('end', function() {\n             console.log(\"\\n\");\n             if( byteIndex != buf.length ) \n             {\n                console.log( \"Error downloading IBM ODBC and CLI Driver from \" +\n                     installerfileURL );\n                process.exit(1);\n             }\n             copyAndExtractDriver(buf);\n         });\n    } // downloadCLIDriver\n    \n    function copyAndExtractDriver(buf)\n    {\n        var file = fs.openSync( INSTALLER_FILE, 'w');\n        var len = fs.writeSync( file, buf, 0, buf.length, 0 );\n        if( len != buf.length ) \n        {\n            console.log( \"Error writing IBM ODBC and CLI Driver to a file\" );\n            process.exit(1);\n        }\n        fs.closeSync( file );\n        if(platform == 'win32') \n        {\n            readStream = fs.createReadStream(INSTALLER_FILE);\n            writeStream = fstream.Writer(DOWNLOAD_DIR);\n\n            readStream.pipe(unzip.Parse()).pipe(writeStream);\n            console.log('Download and extraction of DB2 ODBC ' +\n                        'CLI Driver completed successfully ...');\n            console.log(license_agreement);\n        } \n        else \n        {\n            var targz = require('targz');\n            var compress = targz.decompress({src: INSTALLER_FILE, dest: DOWNLOAD_DIR}, function(err){\n              if(err) {\n                console.log(err);\n                process.exit(1);\n              }\n              else {\n                console.log('Download and extraction of DB2 ODBC ' +\n                            'CLI Driver completed successfully ...');\n                console.log(license_agreement);\n                IBM_DB_HOME = path.resolve(DOWNLOAD_DIR, 'clidriver');\n                process.env.IBM_DB_HOME = IBM_DB_HOME.replace(/\\s/g,'\\\\ ');\n                buildBinary(true);\n                removeWinBuildArchive();\n              }\n\t        });\n        }\n    }\n\n    function buildBinary(isDownloaded) \n    {\n        var buildString = \"node-gyp configure build --IBM_DB_HOME=\\\"$IBM_DB_HOME\\\"\";\n        if(isDownloaded) {\n            buildString = buildString + \" --IS_DOWNLOADED=true\";\n        } else {\n            buildString = buildString + \" --IS_DOWNLOADED=false\";\n        }\n        if( platform == 'win32') \n        {\n            buildString = buildString + \" --IBM_DB_HOME_WIN=%IBM_DB_HOME%\";\n        }\n        var childProcess = exec(buildString, function (error, stdout, stderr) {\n            console.log(stdout);\n            if (error !== null) {\n                console.log(error);\n                process.exit(1);\n            }\n\n            if(platform == 'darwin' && arch == 'x64') \n            {\n                // Run the install_name_tool\n                var nameToolCommand = \"install_name_tool -change libdb2.dylib $IBM_DB_HOME/lib/libdb2.dylib ./build/Release/odbc_bindings.node\" ;\n                var nameToolCmdProcess = exec(nameToolCommand , \n                  function (error1, stdout1, stderr1) {\n                    if (error1 !== null) {\n                        console.log('Error setting up the lib path to ' +\n                            'odbc_bindings.node file.Error trace:\\n'+error1);\n                        process.exit(1);\n                    }\n                });\n            }\n            removeUsedPackages();\n        });\n    } //buildBinary\n    \n    function removeUsedPackages()\n    {\n        var packages = [\"nan\", \"fstream\", \"unzip\", \"targz\"];\n        for( var index = 0; index < packages.length; index++ )\n        {\n          var command = \"npm uninstall \" + packages[index];\n          var childProcess = exec(command, function (error, stdout, stderr) {\n            console.log(stdout);\n            if (error !== null) {\n                console.log(error);\n                // Ignore error and continue to remove other packages.\n                // Installation of ibm_db should not fail due to such errors.\n            }\n          });\n        }\n    }\n\n    function removeWinBuildArchive() \n    {\n        var WIN_BUILD_FILE = path.resolve(CURRENT_DIR, 'build.zip');\n        fs.exists(WIN_BUILD_FILE, function(exists) \n        {\n            if (exists) \n            {\n                fs.unlinkSync(WIN_BUILD_FILE);\n            }\n        });\n    }\n    \n    function buildHttpOptions(installerfileURL) \n    {\n        var options = {\n             host: url.parse(installerfileURL).host,\n             port: 443,\n             path: url.parse(installerfileURL).pathname\n            };\n        var proxyStr;\n        \n        var child = exec('npm config get proxy', function(error, stdout, stderr)\n          {\n            if (error !== null) \n            {\n                console.log('Error occurred while fetching proxy ' +\n                            'property from npm configuration -->\\n' + error);\n                return http.get(options, downloadCLIDriver); \n            }\n            \n            proxyStr = stdout.toString().split('\\n')[0];\n            if(proxyStr === 'null') \n            {\n                //console.log('Null Returned');\n                child = exec('npm config get https-proxy', \n                  function(error, stdout, stderr) \n                  {\n                    //console.log('stderr: ' + stderr);\n                    if (error !== null) \n                    {\n                        console.log('Error occurred while fetching https-proxy'+\n                            ' property from npm configuration -->\\n' + error);\n                        return http.get(options, downloadCLIDriver); \n                    }\n                    \n                    proxyStr = stdout.toString().split('\\n')[0];\n                    if(proxyStr !== 'null') \n                    {\n                        var splitIndex = proxyStr.toString().lastIndexOf(':');\n                        if(splitIndex > 0) \n                        {\n                            var proxyUrl = url.parse(proxyStr.toString());\n                            options = {\n                             host: proxyUrl.hostname,\n                             port: proxyUrl.port,\n                             path: url.parse(installerfileURL).href\n                            };\n                            if (proxyUrl.auth) \n                            {\n                               options.headers = { 'Proxy-Authorization': 'Basic '\n                                   + new Buffer(proxyUrl.auth).toString('base64') };\n                            }\n                        }\n                    }\n                    return http.get(options, downloadCLIDriver); \n                });\n            } else \n            {\n                var splitIndex = proxyStr.toString().lastIndexOf(':');\n                if(splitIndex > 0) {\n                    var proxyUrl = url.parse(proxyStr.toString());\n                    options = {\n                     host: proxyUrl.hostname,\n                     port: proxyUrl.port,\n                     path: url.parse(installerfileURL).href\n                    };\n                    if (proxyUrl.auth) \n                    {\n                       options.headers = { 'Proxy-Authorization': 'Basic '\n                           + new Buffer(proxyUrl.auth).toString('base64') };\n                    }\n                }\n                return http.get(options, downloadCLIDriver); \n            }\n        });\n    } //buildHttpOptions\n}; //download_file_httpget\n\ndownload_file_httpget();\n\n", "{\n  \"name\": \"ibm_db\",\n  \"description\": \"IBM DB2 and IBM Informix bindings for node\",\n  \"version\": \"1.0.2\",\n  \"main\": \"lib/odbc.js\",\n  \"homepage\": \"https://github.com/ibmdb/node-ibm_db/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/ibmdb/node-ibm_db.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/ibmdb/node-ibm_db/issues\"\n  },\n  \"contributors\": [\n    \"IBM <opendev@us.ibm.com>\"\n  ],\n  \"directories\": {\n    \"example\": \"examples\",\n    \"test\": \"test\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"scripts\": {\n    \"install\": \"node installer/driverInstall.js\",\n    \"test\": \"cd test && node run-tests.js\"\n  },\n  \"dependencies\": {\n    \"bindings\": \"~1.2.1\",\n    \"fstream\": \"~1.0.10\",\n    \"nan\": \"~2.3.5\",\n    \"q\": \"^1.4.1\",\n    \"targz\": \"^1.0.1\",\n    \"unzip\": \"~0.1.11\"\n  },\n  \"keywords\": [\n    \"node\",\n    \"odbc\",\n    \"db2\",\n    \"driver\"\n  ],\n  \"author\": \"IBM\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"async\": \"^2.0.1\",\n    \"bluebird\": \"^3.4.3\",\n    \"moment\": \"^2.14.1\"\n  }\n}\n"], "filenames": ["installer/driverInstall.js", "package.json"], "buggy_code_start_loc": [7, 6], "buggy_code_end_loc": [345, 7], "fixing_code_start_loc": [7, 6], "fixing_code_end_loc": [348, 7], "type": "CWE-310", "message": "ibm_db is an asynchronous/synchronous interface for node.js to IBM DB2 and IBM Informix. ibm_db before 1.0.2 downloads binary resources over HTTP, which leaves it vulnerable to MITM attacks. It may be possible to cause remote code execution (RCE) by swapping out the requested binary with an attacker controlled binary if the attacker is on the network or positioned in between the user and the remote server.", "other": {"cve": {"id": "CVE-2016-10577", "sourceIdentifier": "support@hackerone.com", "published": "2018-05-29T20:29:01.097", "lastModified": "2019-10-09T23:16:49.107", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ibm_db is an asynchronous/synchronous interface for node.js to IBM DB2 and IBM Informix. ibm_db before 1.0.2 downloads binary resources over HTTP, which leaves it vulnerable to MITM attacks. It may be possible to cause remote code execution (RCE) by swapping out the requested binary with an attacker controlled binary if the attacker is on the network or positioned in between the user and the remote server."}, {"lang": "es", "value": "ibm_db es una interfaz as\u00edncrona/s\u00edncrona de node.js para IBM DB2 y IBM Informix. ibm_db en versiones anteriores a la 1.0.2 descarga recursos binarios por HTTP, lo que lo deja vulnerable a ataques MITM. Podr\u00eda ser posible provocar la ejecuci\u00f3n remota de c\u00f3digo (RCE) cambiando el binario solicitado por otro controlado por el atacante si \u00e9ste est\u00e1 en la red o posicionado entre el usuario y el servidor remoto."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-310"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-311"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ibm:ibm_db:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.2", "matchCriteriaId": "E5BDDF9C-045C-4507-BAEE-79A1DB993B50"}]}]}], "references": [{"url": "https://github.com/ibmdb/node-ibm_db/commit/d7e2d4b4cbeb6f067df8bba7d0b2ac5d40fcfc19#diff-315091eb1586966006e05ebc21cd2a94", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://nodesecurity.io/advisories/163", "source": "support@hackerone.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ibmdb/node-ibm_db/commit/d7e2d4b4cbeb6f067df8bba7d0b2ac5d40fcfc19#diff-315091eb1586966006e05ebc21cd2a94"}}