{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/candidate_sampling_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <cfloat>\n#include <unordered_map>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/kernels/range_sampler.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n\nnamespace tensorflow {\n\nclass BaseCandidateSamplerOp : public OpKernel {\n public:\n  explicit BaseCandidateSamplerOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_sampled\", &num_sampled_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_true\", &num_true_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"unique\", &unique_));\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& true_classes = context->input(0);\n    OP_REQUIRES(context, true_classes.dims() == 2,\n                errors::InvalidArgument(\"true_classes must be a matrix\"));\n    const int32_t batch_size = true_classes.dim_size(0);\n    OP_REQUIRES(\n        context, true_classes.dim_size(1) == num_true_,\n        errors::InvalidArgument(\"true_classes must have \"\n                                \"num_true columns, expected: \",\n                                true_classes.dim_size(1), \" was: \", num_true_));\n    CHECK(sampler_) << \"CandidateSamplerOp did not set sampler_\";\n\n    if (unique_) {\n      OP_REQUIRES(context, num_sampled_ <= sampler_->range(),\n                  errors::InvalidArgument(\"Sampler's range is too small.\"));\n    }\n\n    // Output candidates and expected_count.\n    Tensor* out_sampled_candidates = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({num_sampled_}),\n                                            &out_sampled_candidates));\n\n    Tensor* out_true_expected_count = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(\n                                1, TensorShape({batch_size, num_true_}),\n                                &out_true_expected_count));\n    Tensor* out_sampled_expected_count = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(2, TensorShape({num_sampled_}),\n                                            &out_sampled_expected_count));\n\n    gtl::ArraySlice<int64_t> true_candidate(\n        true_classes.matrix<int64_t>().data(), batch_size * num_true_);\n    gtl::MutableArraySlice<int64_t> sampled_candidate(\n        out_sampled_candidates->vec<int64_t>().data(), num_sampled_);\n    gtl::MutableArraySlice<float> true_expected_count(\n        out_true_expected_count->matrix<float>().data(),\n        batch_size * num_true_);\n    gtl::MutableArraySlice<float> sampled_expected_count(\n        out_sampled_expected_count->vec<float>().data(), num_sampled_);\n\n    // Approximately conservatively estimate the number of samples required.\n    // In cases where rejection sampling is used we may occasionally use more\n    // samples than expected, which will result in reused random bits.\n    const int64_t samples32 = 2048 * num_sampled_;\n\n    // Pick sampled candidates.\n    auto local_gen = generator_.ReserveSamples32(samples32);\n    random::SimplePhilox random(&local_gen);\n    sampler_->SampleBatchGetExpectedCount(&random, unique_, sampled_candidate,\n                                          sampled_expected_count,\n                                          true_candidate, true_expected_count);\n\n    if (sampler_->NeedsUpdates()) {\n      sampler_->Update(true_candidate);\n    }\n  }\n\n protected:\n  void set_sampler(RangeSampler* sampler) { sampler_.reset(sampler); }\n\n private:\n  int32 num_true_;\n  int32 num_sampled_;\n  bool unique_;\n  std::unique_ptr<RangeSampler> sampler_;\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <class RangeSamplerType>\nclass SimpleCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit SimpleCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"range_max\", &range_max));\n    set_sampler(new RangeSamplerType(range_max));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"UniformCandidateSampler\").Device(DEVICE_CPU),\n                        SimpleCandidateSamplerOp<UniformSampler>);\n\nREGISTER_KERNEL_BUILDER(Name(\"LogUniformCandidateSampler\").Device(DEVICE_CPU),\n                        SimpleCandidateSamplerOp<LogUniformSampler>);\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"LearnedUnigramCandidateSampler\").Device(DEVICE_CPU),\n    SimpleCandidateSamplerOp<UnigramSampler>);\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"ThreadUnsafeUnigramCandidateSampler\").Device(DEVICE_CPU),\n    SimpleCandidateSamplerOp<ThreadUnsafeUnigramSampler>);\n\nclass AllCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit AllCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_sampled\", &range_max));\n    set_sampler(new AllSampler(range_max));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"AllCandidateSampler\").Device(DEVICE_CPU),\n                        AllCandidateSamplerOp);\n\nclass FixedUnigramCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit FixedUnigramCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"range_max\", &range_max));\n    string vocab_file;\n    OP_REQUIRES_OK(context, context->GetAttr(\"vocab_file\", &vocab_file));\n    std::vector<float> unigrams;\n    OP_REQUIRES_OK(context, context->GetAttr(\"unigrams\", &unigrams));\n    OP_REQUIRES(\n        context, !vocab_file.empty() || !unigrams.empty(),\n        errors::InvalidArgument(\"Must provide either vocab_file or unigrams.\"));\n    OP_REQUIRES(context, vocab_file.empty() || unigrams.empty(),\n                errors::InvalidArgument(\n                    \"Must only provide one of vocab_file and unigrams.\"));\n    float distortion;\n    OP_REQUIRES_OK(context, context->GetAttr(\"distortion\", &distortion));\n    int64_t num_reserved_ids;\n    OP_REQUIRES_OK(context,\n                   context->GetAttr(\"num_reserved_ids\", &num_reserved_ids));\n    int64_t num_shards;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_shards\", &num_shards));\n    int64_t shard;\n    OP_REQUIRES_OK(context, context->GetAttr(\"shard\", &shard));\n\n    if (!vocab_file.empty()) {\n      set_sampler(new FixedUnigramSampler(context->env(), range_max, vocab_file,\n                                          distortion, num_reserved_ids,\n                                          num_shards, shard));\n    } else {\n      set_sampler(new FixedUnigramSampler(range_max, unigrams, distortion,\n                                          num_reserved_ids, num_shards, shard));\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"FixedUnigramCandidateSampler\").Device(DEVICE_CPU),\n                        FixedUnigramCandidateSamplerOp);\n\nclass ComputeAccidentalHitsOp : public OpKernel {\n public:\n  explicit ComputeAccidentalHitsOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_true\", &num_true_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in_true_candidates = context->input(0);\n    const TensorShape& in_true_candidates_shape = in_true_candidates.shape();\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsMatrix(in_true_candidates_shape) &&\n                    in_true_candidates_shape.dim_size(1) == num_true_,\n                errors::InvalidArgument(\n                    \"true_candidates must be a batch_size * num_true matrix\"));\n\n    const int64_t batch_size = in_true_candidates_shape.dim_size(0);\n\n    const Tensor& in_sampled_candidates = context->input(1);\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsVector(in_sampled_candidates.shape()),\n                errors::InvalidArgument(\n                    \"sampled_candidates must be a vector, which is typically \"\n                    \"an output from CandidateSampler\"));\n\n    std::unordered_map<int64_t, int> sampled_candidate_to_pos;\n    for (int64_t i = 0; i < in_sampled_candidates.dim_size(0); ++i) {\n      sampled_candidate_to_pos[in_sampled_candidates.vec<int64_t>()(i)] = i;\n    }\n\n    // Produce output in the same format as UnpackSparseFeatures.\n    std::vector<int> indices;\n    std::vector<int64_t> ids;\n    std::vector<float> weights;\n\n    for (int64_t i = 0; i < batch_size; ++i) {\n      for (int64_t j = 0; j < num_true_; ++j) {\n        const int64_t true_candidate =\n            in_true_candidates.matrix<int64_t>()(i, j);\n        const auto look = sampled_candidate_to_pos.find(true_candidate);\n        if (look != sampled_candidate_to_pos.end()) {\n          indices.push_back(i);\n          ids.push_back(look->second);\n          weights.push_back(-FLT_MAX);\n        }\n      }\n    }\n\n    Tensor* out_indices = nullptr;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            0, TensorShape({static_cast<int>(indices.size())}), &out_indices));\n    Tensor* out_ids = nullptr;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(\n                     1, TensorShape({static_cast<int>(ids.size())}), &out_ids));\n    Tensor* out_weights = nullptr;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            2, TensorShape({static_cast<int>(weights.size())}), &out_weights));\n\n    for (size_t i = 0; i < indices.size(); ++i) {\n      out_indices->vec<int32>()(i) = indices[i];\n      out_ids->vec<int64_t>()(i) = ids[i];\n      out_weights->vec<float>()(i) = weights[i];\n    }\n  }\n\n private:\n  int64_t num_true_;\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ComputeAccidentalHits\").Device(DEVICE_CPU),\n                        ComputeAccidentalHitsOp);\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for CandidateSamplerOp.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import candidate_sampling_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\n\nclass RangeSamplerOpsTest(test.TestCase):\n\n  BATCH_SIZE = 3\n  NUM_TRUE = 2\n  RANGE = 5\n  NUM_SAMPLED = RANGE\n\n  TRUE_LABELS = [[1, 2], [0, 4], [3, 3]]\n\n  @test_util.run_deprecated_v1\n  def testTrueCandidates(self):\n    with self.cached_session() as sess:\n      indices = constant_op.constant([0, 0, 1, 1, 2, 2])\n      true_candidates_vec = constant_op.constant([1, 2, 0, 4, 3, 3])\n      true_candidates_matrix = array_ops.reshape(\n          true_candidates_vec, [self.BATCH_SIZE, self.NUM_TRUE])\n      indices_val, true_candidates_val = sess.run(\n          [indices, true_candidates_matrix])\n\n    self.assertAllEqual(indices_val, [0, 0, 1, 1, 2, 2])\n    self.assertAllEqual(true_candidates_val, self.TRUE_LABELS)\n\n  def testSampledCandidates(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      sampled_candidates, _, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      result = self.evaluate(sampled_candidates)\n\n    expected_ids = [0, 1, 2, 3, 4]\n    self.assertAllEqual(result, expected_ids)\n    self.assertEqual(sampled_candidates.get_shape(), [self.NUM_SAMPLED])\n\n  def testTrueLogExpectedCount(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      _, true_expected_count, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      true_log_expected_count = math_ops.log(true_expected_count)\n      result = self.evaluate(true_log_expected_count)\n\n    self.assertAllEqual(result, [[0.0] * self.NUM_TRUE] * self.BATCH_SIZE)\n    self.assertEqual(true_expected_count.get_shape(),\n                     [self.BATCH_SIZE, self.NUM_TRUE])\n    self.assertEqual(true_log_expected_count.get_shape(),\n                     [self.BATCH_SIZE, self.NUM_TRUE])\n\n  def testSampledLogExpectedCount(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      _, _, sampled_expected_count = candidate_sampling_ops.all_candidate_sampler(  # pylint: disable=line-too-long\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      sampled_log_expected_count = math_ops.log(sampled_expected_count)\n      result = self.evaluate(sampled_log_expected_count)\n\n    self.assertAllEqual(result, [0.0] * self.NUM_SAMPLED)\n    self.assertEqual(sampled_expected_count.get_shape(), [self.NUM_SAMPLED])\n    self.assertEqual(sampled_log_expected_count.get_shape(), [self.NUM_SAMPLED])\n\n  def testAccidentalHits(self):\n    with self.cached_session() as sess:\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      sampled_candidates, _, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      accidental_hits = candidate_sampling_ops.compute_accidental_hits(\n          true_classes, sampled_candidates, self.NUM_TRUE)\n      indices, ids, weights = self.evaluate(accidental_hits)\n\n    self.assertEqual(1, accidental_hits[0].get_shape().ndims)\n    self.assertEqual(1, accidental_hits[1].get_shape().ndims)\n    self.assertEqual(1, accidental_hits[2].get_shape().ndims)\n    for index, id_, weight in zip(indices, ids, weights):\n      self.assertTrue(id_ in self.TRUE_LABELS[index])\n      self.assertLess(weight, -1.0e37)\n\n  @test_util.run_deprecated_v1\n  def testSeed(self):\n\n    def draw(seed):\n      with self.cached_session():\n        true_classes = constant_op.constant(\n            [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n        sampled, _, _ = candidate_sampling_ops.log_uniform_candidate_sampler(\n            true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True, 5, seed=seed)\n        return self.evaluate(sampled)\n\n    # Non-zero seed. Repeatable.\n    for seed in [1, 12, 123, 1234]:\n      self.assertAllEqual(draw(seed), draw(seed))\n    # Seed=0 means random seeds.\n    num_same = 0\n    for _ in range(10):\n      if np.allclose(draw(None), draw(None)):\n        num_same += 1\n    # Accounts for the fact that the same random seed may be picked\n    # twice very rarely.\n    self.assertLessEqual(num_same, 2)\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/candidate_sampling_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <cfloat>\n#include <unordered_map>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/kernels/range_sampler.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/guarded_philox_random.h\"\n\nnamespace tensorflow {\n\nclass BaseCandidateSamplerOp : public OpKernel {\n public:\n  explicit BaseCandidateSamplerOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_sampled\", &num_sampled_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_true\", &num_true_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"unique\", &unique_));\n    OP_REQUIRES_OK(context, generator_.Init(context));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& true_classes = context->input(0);\n    OP_REQUIRES(context, true_classes.dims() == 2,\n                errors::InvalidArgument(\"true_classes must be a matrix\"));\n    const int32_t batch_size = true_classes.dim_size(0);\n    OP_REQUIRES(\n        context, true_classes.dim_size(1) == num_true_,\n        errors::InvalidArgument(\"true_classes must have \"\n                                \"num_true columns, expected: \",\n                                true_classes.dim_size(1), \" was: \", num_true_));\n    CHECK(sampler_) << \"CandidateSamplerOp did not set sampler_\";\n\n    if (unique_) {\n      OP_REQUIRES(context, num_sampled_ <= sampler_->range(),\n                  errors::InvalidArgument(\"Sampler's range is too small.\"));\n    }\n\n    // Output candidates and expected_count.\n    Tensor* out_sampled_candidates = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({num_sampled_}),\n                                            &out_sampled_candidates));\n\n    Tensor* out_true_expected_count = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(\n                                1, TensorShape({batch_size, num_true_}),\n                                &out_true_expected_count));\n    Tensor* out_sampled_expected_count = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(2, TensorShape({num_sampled_}),\n                                            &out_sampled_expected_count));\n\n    gtl::ArraySlice<int64_t> true_candidate(\n        true_classes.matrix<int64_t>().data(), batch_size * num_true_);\n\n    for (const auto& candidate : true_candidate) {\n      OP_REQUIRES(context, candidate >= 0 && candidate < sampler_->range(),\n                  errors::InvalidArgument(\"`true_candidate` out of range [\", 0,\n                                          \", \", sampler_->range(),\n                                          \"), received \", candidate));\n    }\n\n    gtl::MutableArraySlice<int64_t> sampled_candidate(\n        out_sampled_candidates->vec<int64_t>().data(), num_sampled_);\n    gtl::MutableArraySlice<float> true_expected_count(\n        out_true_expected_count->matrix<float>().data(),\n        batch_size * num_true_);\n    gtl::MutableArraySlice<float> sampled_expected_count(\n        out_sampled_expected_count->vec<float>().data(), num_sampled_);\n\n    // Approximately conservatively estimate the number of samples required.\n    // In cases where rejection sampling is used we may occasionally use more\n    // samples than expected, which will result in reused random bits.\n    const int64_t samples32 = 2048 * num_sampled_;\n\n    // Pick sampled candidates.\n    auto local_gen = generator_.ReserveSamples32(samples32);\n    random::SimplePhilox random(&local_gen);\n    sampler_->SampleBatchGetExpectedCount(&random, unique_, sampled_candidate,\n                                          sampled_expected_count,\n                                          true_candidate, true_expected_count);\n\n    if (sampler_->NeedsUpdates()) {\n      sampler_->Update(true_candidate);\n    }\n  }\n\n protected:\n  void set_sampler(RangeSampler* sampler) { sampler_.reset(sampler); }\n\n private:\n  int32 num_true_;\n  int32 num_sampled_;\n  bool unique_;\n  std::unique_ptr<RangeSampler> sampler_;\n  GuardedPhiloxRandom generator_;\n};\n\ntemplate <class RangeSamplerType>\nclass SimpleCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit SimpleCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"range_max\", &range_max));\n    set_sampler(new RangeSamplerType(range_max));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"UniformCandidateSampler\").Device(DEVICE_CPU),\n                        SimpleCandidateSamplerOp<UniformSampler>);\n\nREGISTER_KERNEL_BUILDER(Name(\"LogUniformCandidateSampler\").Device(DEVICE_CPU),\n                        SimpleCandidateSamplerOp<LogUniformSampler>);\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"LearnedUnigramCandidateSampler\").Device(DEVICE_CPU),\n    SimpleCandidateSamplerOp<UnigramSampler>);\n\nREGISTER_KERNEL_BUILDER(\n    Name(\"ThreadUnsafeUnigramCandidateSampler\").Device(DEVICE_CPU),\n    SimpleCandidateSamplerOp<ThreadUnsafeUnigramSampler>);\n\nclass AllCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit AllCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_sampled\", &range_max));\n    set_sampler(new AllSampler(range_max));\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"AllCandidateSampler\").Device(DEVICE_CPU),\n                        AllCandidateSamplerOp);\n\nclass FixedUnigramCandidateSamplerOp : public BaseCandidateSamplerOp {\n public:\n  explicit FixedUnigramCandidateSamplerOp(OpKernelConstruction* context)\n      : BaseCandidateSamplerOp(context) {\n    int64_t range_max;\n    OP_REQUIRES_OK(context, context->GetAttr(\"range_max\", &range_max));\n    string vocab_file;\n    OP_REQUIRES_OK(context, context->GetAttr(\"vocab_file\", &vocab_file));\n    std::vector<float> unigrams;\n    OP_REQUIRES_OK(context, context->GetAttr(\"unigrams\", &unigrams));\n    OP_REQUIRES(\n        context, !vocab_file.empty() || !unigrams.empty(),\n        errors::InvalidArgument(\"Must provide either vocab_file or unigrams.\"));\n    OP_REQUIRES(context, vocab_file.empty() || unigrams.empty(),\n                errors::InvalidArgument(\n                    \"Must only provide one of vocab_file and unigrams.\"));\n    float distortion;\n    OP_REQUIRES_OK(context, context->GetAttr(\"distortion\", &distortion));\n    int64_t num_reserved_ids;\n    OP_REQUIRES_OK(context,\n                   context->GetAttr(\"num_reserved_ids\", &num_reserved_ids));\n    int64_t num_shards;\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_shards\", &num_shards));\n    int64_t shard;\n    OP_REQUIRES_OK(context, context->GetAttr(\"shard\", &shard));\n\n    if (!vocab_file.empty()) {\n      set_sampler(new FixedUnigramSampler(context->env(), range_max, vocab_file,\n                                          distortion, num_reserved_ids,\n                                          num_shards, shard));\n    } else {\n      set_sampler(new FixedUnigramSampler(range_max, unigrams, distortion,\n                                          num_reserved_ids, num_shards, shard));\n    }\n  }\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"FixedUnigramCandidateSampler\").Device(DEVICE_CPU),\n                        FixedUnigramCandidateSamplerOp);\n\nclass ComputeAccidentalHitsOp : public OpKernel {\n public:\n  explicit ComputeAccidentalHitsOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"num_true\", &num_true_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in_true_candidates = context->input(0);\n    const TensorShape& in_true_candidates_shape = in_true_candidates.shape();\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsMatrix(in_true_candidates_shape) &&\n                    in_true_candidates_shape.dim_size(1) == num_true_,\n                errors::InvalidArgument(\n                    \"true_candidates must be a batch_size * num_true matrix\"));\n\n    const int64_t batch_size = in_true_candidates_shape.dim_size(0);\n\n    const Tensor& in_sampled_candidates = context->input(1);\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsVector(in_sampled_candidates.shape()),\n                errors::InvalidArgument(\n                    \"sampled_candidates must be a vector, which is typically \"\n                    \"an output from CandidateSampler\"));\n\n    std::unordered_map<int64_t, int> sampled_candidate_to_pos;\n    for (int64_t i = 0; i < in_sampled_candidates.dim_size(0); ++i) {\n      sampled_candidate_to_pos[in_sampled_candidates.vec<int64_t>()(i)] = i;\n    }\n\n    // Produce output in the same format as UnpackSparseFeatures.\n    std::vector<int> indices;\n    std::vector<int64_t> ids;\n    std::vector<float> weights;\n\n    for (int64_t i = 0; i < batch_size; ++i) {\n      for (int64_t j = 0; j < num_true_; ++j) {\n        const int64_t true_candidate =\n            in_true_candidates.matrix<int64_t>()(i, j);\n        const auto look = sampled_candidate_to_pos.find(true_candidate);\n        if (look != sampled_candidate_to_pos.end()) {\n          indices.push_back(i);\n          ids.push_back(look->second);\n          weights.push_back(-FLT_MAX);\n        }\n      }\n    }\n\n    Tensor* out_indices = nullptr;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            0, TensorShape({static_cast<int>(indices.size())}), &out_indices));\n    Tensor* out_ids = nullptr;\n    OP_REQUIRES_OK(\n        context, context->allocate_output(\n                     1, TensorShape({static_cast<int>(ids.size())}), &out_ids));\n    Tensor* out_weights = nullptr;\n    OP_REQUIRES_OK(\n        context,\n        context->allocate_output(\n            2, TensorShape({static_cast<int>(weights.size())}), &out_weights));\n\n    for (size_t i = 0; i < indices.size(); ++i) {\n      out_indices->vec<int32>()(i) = indices[i];\n      out_ids->vec<int64_t>()(i) = ids[i];\n      out_weights->vec<float>()(i) = weights[i];\n    }\n  }\n\n private:\n  int64_t num_true_;\n};\n\nREGISTER_KERNEL_BUILDER(Name(\"ComputeAccidentalHits\").Device(DEVICE_CPU),\n                        ComputeAccidentalHitsOp);\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests for CandidateSamplerOp.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import candidate_sampling_ops\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\n\nclass RangeSamplerOpsTest(test.TestCase):\n\n  BATCH_SIZE = 3\n  NUM_TRUE = 2\n  RANGE = 5\n  NUM_SAMPLED = RANGE\n\n  TRUE_LABELS = [[1, 2], [0, 4], [3, 3]]\n\n  @test_util.run_deprecated_v1\n  def testTrueCandidates(self):\n    with self.cached_session() as sess:\n      indices = constant_op.constant([0, 0, 1, 1, 2, 2])\n      true_candidates_vec = constant_op.constant([1, 2, 0, 4, 3, 3])\n      true_candidates_matrix = array_ops.reshape(\n          true_candidates_vec, [self.BATCH_SIZE, self.NUM_TRUE])\n      indices_val, true_candidates_val = sess.run(\n          [indices, true_candidates_matrix])\n\n    self.assertAllEqual(indices_val, [0, 0, 1, 1, 2, 2])\n    self.assertAllEqual(true_candidates_val, self.TRUE_LABELS)\n\n  def testSampledCandidates(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      sampled_candidates, _, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      result = self.evaluate(sampled_candidates)\n\n    expected_ids = [0, 1, 2, 3, 4]\n    self.assertAllEqual(result, expected_ids)\n    self.assertEqual(sampled_candidates.get_shape(), [self.NUM_SAMPLED])\n\n  def testTrueLogExpectedCount(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      _, true_expected_count, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      true_log_expected_count = math_ops.log(true_expected_count)\n      result = self.evaluate(true_log_expected_count)\n\n    self.assertAllEqual(result, [[0.0] * self.NUM_TRUE] * self.BATCH_SIZE)\n    self.assertEqual(true_expected_count.get_shape(),\n                     [self.BATCH_SIZE, self.NUM_TRUE])\n    self.assertEqual(true_log_expected_count.get_shape(),\n                     [self.BATCH_SIZE, self.NUM_TRUE])\n\n  def testSampledLogExpectedCount(self):\n    with self.cached_session():\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      _, _, sampled_expected_count = candidate_sampling_ops.all_candidate_sampler(  # pylint: disable=line-too-long\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      sampled_log_expected_count = math_ops.log(sampled_expected_count)\n      result = self.evaluate(sampled_log_expected_count)\n\n    self.assertAllEqual(result, [0.0] * self.NUM_SAMPLED)\n    self.assertEqual(sampled_expected_count.get_shape(), [self.NUM_SAMPLED])\n    self.assertEqual(sampled_log_expected_count.get_shape(), [self.NUM_SAMPLED])\n\n  def testAccidentalHits(self):\n    with self.cached_session() as sess:\n      true_classes = constant_op.constant(\n          [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n      sampled_candidates, _, _ = candidate_sampling_ops.all_candidate_sampler(\n          true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True)\n      accidental_hits = candidate_sampling_ops.compute_accidental_hits(\n          true_classes, sampled_candidates, self.NUM_TRUE)\n      indices, ids, weights = self.evaluate(accidental_hits)\n\n    self.assertEqual(1, accidental_hits[0].get_shape().ndims)\n    self.assertEqual(1, accidental_hits[1].get_shape().ndims)\n    self.assertEqual(1, accidental_hits[2].get_shape().ndims)\n    for index, id_, weight in zip(indices, ids, weights):\n      self.assertTrue(id_ in self.TRUE_LABELS[index])\n      self.assertLess(weight, -1.0e37)\n\n  @test_util.run_deprecated_v1\n  def testSeed(self):\n\n    def draw(seed):\n      with self.cached_session():\n        true_classes = constant_op.constant(\n            [[1, 2], [0, 4], [3, 3]], dtype=dtypes.int64)\n        sampled, _, _ = candidate_sampling_ops.log_uniform_candidate_sampler(\n            true_classes, self.NUM_TRUE, self.NUM_SAMPLED, True, 5, seed=seed)\n        return self.evaluate(sampled)\n\n    # Non-zero seed. Repeatable.\n    for seed in [1, 12, 123, 1234]:\n      self.assertAllEqual(draw(seed), draw(seed))\n    # Seed=0 means random seeds.\n    num_same = 0\n    for _ in range(10):\n      if np.allclose(draw(None), draw(None)):\n        num_same += 1\n    # Accounts for the fact that the same random seed may be picked\n    # twice very rarely.\n    self.assertLessEqual(num_same, 2)\n\n  def testCandidateOutOfRange(self):\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                \"out of range\"):\n      self.evaluate(\n          candidate_sampling_ops.log_uniform_candidate_sampler(\n              true_classes=[[0, 10]],\n              num_true=2,\n              num_sampled=1000,\n              unique=False,\n              range_max=2))\n\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                \"out of range\"):\n      self.evaluate(\n          candidate_sampling_ops.log_uniform_candidate_sampler(\n              true_classes=[[0, -10]],\n              num_true=2,\n              num_sampled=1000,\n              unique=False,\n              range_max=2))\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/candidate_sampler_ops.cc", "tensorflow/python/kernel_tests/random/candidate_sampler_ops_test.py"], "buggy_code_start_loc": [75, 20], "buggy_code_end_loc": [75, 129], "fixing_code_start_loc": [76, 21], "fixing_code_end_loc": [84, 152], "type": "CWE-125", "message": "TensorFlow is an open source platform for machine learning. When the `BaseCandidateSamplerOp` function receives a value in `true_classes` larger than `range_max`, a heap oob read occurs. We have patched the issue in GitHub commit b389f5c944cadfdfe599b3f1e4026e036f30d2d4. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-41880", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-18T22:15:10.007", "lastModified": "2022-11-22T21:52:03.947", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. When the `BaseCandidateSamplerOp` function receives a value in `true_classes` larger than `range_max`, a heap oob read occurs. We have patched the issue in GitHub commit b389f5c944cadfdfe599b3f1e4026e036f30d2d4. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.8.4", "matchCriteriaId": "A694EEE1-BFB9-4E6C-B275-02DC2731961C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.3", "matchCriteriaId": "9057B403-719C-4F10-BAB6-67F84786A89E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10.0:*:*:*:*:*:*:*", "matchCriteriaId": "6AE6CFC4-0232-4E1C-960D-268C87788735"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/candidate_sampler_ops.cc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/b389f5c944cadfdfe599b3f1e4026e036f30d2d4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8w5g-3wcv-9g2j", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/b389f5c944cadfdfe599b3f1e4026e036f30d2d4"}}