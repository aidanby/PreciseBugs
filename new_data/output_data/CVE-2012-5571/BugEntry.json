{"buggy_code": ["# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2012 OpenStack LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Main entry point into the EC2 Credentials service.\n\nThis service allows the creation of access/secret credentials used for\nthe ec2 interop layer of OpenStack.\n\nA user can create as many access/secret pairs, each of which map to a\nspecific tenant.  This is required because OpenStack supports a user\nbelonging to multiple tenants, whereas the signatures created on ec2-style\nrequests don't allow specification of which tenant the user wishs to act\nupon.\n\nTo complete the cycle, we provide a method that OpenStack services can\nuse to validate a signature and get a corresponding openstack token.  This\ntoken allows method calls to other services within the context the\naccess/secret was created.  As an example, nova requests keystone to validate\nthe signature of a request, receives a token, and then makes a request to\nglance to list images needed to perform the requested task.\n\n\"\"\"\n\nimport uuid\n\nfrom keystone import catalog\nfrom keystone.common import manager\nfrom keystone.common import utils\nfrom keystone.common import wsgi\nfrom keystone import config\nfrom keystone import exception\nfrom keystone import identity\nfrom keystone import policy\nfrom keystone import service\nfrom keystone import token\n\n\nCONF = config.CONF\n\n\nclass Manager(manager.Manager):\n    \"\"\"Default pivot point for the EC2 Credentials backend.\n\n    See :mod:`keystone.common.manager.Manager` for more details on how this\n    dynamically calls the backend.\n\n    \"\"\"\n\n    def __init__(self):\n        super(Manager, self).__init__(CONF.ec2.driver)\n\n\nclass Ec2Extension(wsgi.ExtensionRouter):\n    def add_routes(self, mapper):\n        ec2_controller = Ec2Controller()\n        # validation\n        mapper.connect(\n            '/ec2tokens',\n            controller=ec2_controller,\n            action='authenticate',\n            conditions=dict(method=['POST']))\n\n        # crud\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2',\n            controller=ec2_controller,\n            action='create_credential',\n            conditions=dict(method=['POST']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2',\n            controller=ec2_controller,\n            action='get_credentials',\n            conditions=dict(method=['GET']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2/{credential_id}',\n            controller=ec2_controller,\n            action='get_credential',\n            conditions=dict(method=['GET']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2/{credential_id}',\n            controller=ec2_controller,\n            action='delete_credential',\n            conditions=dict(method=['DELETE']))\n\n\nclass Ec2Controller(wsgi.Application):\n    def __init__(self):\n        self.catalog_api = catalog.Manager()\n        self.identity_api = identity.Manager()\n        self.token_api = token.Manager()\n        self.policy_api = policy.Manager()\n        self.ec2_api = Manager()\n        super(Ec2Controller, self).__init__()\n\n    def check_signature(self, creds_ref, credentials):\n        signer = utils.Ec2Signer(creds_ref['secret'])\n        signature = signer.generate(credentials)\n        if utils.auth_str_equal(credentials['signature'], signature):\n            return\n        # NOTE(vish): Some libraries don't use the port when signing\n        #             requests, so try again without port.\n        elif ':' in credentials['signature']:\n            hostname, _port = credentials['host'].split(':')\n            credentials['host'] = hostname\n            signature = signer.generate(credentials)\n            if not utils.auth_str_equal(credentials.signature, signature):\n                raise exception.Unauthorized(message='Invalid EC2 signature.')\n        else:\n            raise exception.Unauthorized(message='EC2 signature not supplied.')\n\n    def authenticate(self, context, credentials=None, ec2Credentials=None):\n        \"\"\"Validate a signed EC2 request and provide a token.\n\n        Other services (such as Nova) use this **admin** call to determine\n        if a request they signed received is from a valid user.\n\n        If it is a valid signature, an openstack token that maps\n        to the user/tenant is returned to the caller, along with\n        all the other details returned from a normal token validation\n        call.\n\n        The returned token is useful for making calls to other\n        OpenStack services within the context of the request.\n\n        :param context: standard context\n        :param credentials: dict of ec2 signature\n        :param ec2Credentials: DEPRECATED dict of ec2 signature\n        :returns: token: openstack token equivalent to access key along\n                         with the corresponding service catalog and roles\n        \"\"\"\n\n        # FIXME(ja): validate that a service token was used!\n\n        # NOTE(termie): backwards compat hack\n        if not credentials and ec2Credentials:\n            credentials = ec2Credentials\n\n        if not 'access' in credentials:\n            raise exception.Unauthorized(message='EC2 signature not supplied.')\n\n        creds_ref = self._get_credentials(context,\n                                          credentials['access'])\n        self.check_signature(creds_ref, credentials)\n\n        # TODO(termie): don't create new tokens every time\n        # TODO(termie): this is copied from TokenController.authenticate\n        token_id = uuid.uuid4().hex\n        tenant_ref = self.identity_api.get_tenant(\n            context=context,\n            tenant_id=creds_ref['tenant_id'])\n        user_ref = self.identity_api.get_user(\n            context=context,\n            user_id=creds_ref['user_id'])\n        metadata_ref = self.identity_api.get_metadata(\n            context=context,\n            user_id=user_ref['id'],\n            tenant_id=tenant_ref['id'])\n        catalog_ref = self.catalog_api.get_catalog(\n            context=context,\n            user_id=user_ref['id'],\n            tenant_id=tenant_ref['id'],\n            metadata=metadata_ref)\n\n        token_ref = self.token_api.create_token(\n            context, token_id, dict(id=token_id,\n                                    user=user_ref,\n                                    tenant=tenant_ref,\n                                    metadata=metadata_ref))\n\n        # TODO(termie): optimize this call at some point and put it into the\n        #               the return for metadata\n        # fill out the roles in the metadata\n        roles_ref = []\n        for role_id in metadata_ref.get('roles', []):\n            roles_ref.append(self.identity_api.get_role(context, role_id))\n\n        # TODO(termie): make this a util function or something\n        # TODO(termie): i don't think the ec2 middleware currently expects a\n        #               full return, but it contains a note saying that it\n        #               would be better to expect a full return\n        token_controller = service.TokenController()\n        return token_controller._format_authenticate(\n            token_ref, roles_ref, catalog_ref)\n\n    def create_credential(self, context, user_id, tenant_id):\n        \"\"\"Create a secret/access pair for use with ec2 style auth.\n\n        Generates a new set of credentials that map the the user/tenant\n        pair.\n\n        :param context: standard context\n        :param user_id: id of user\n        :param tenant_id: id of tenant\n        :returns: credential: dict of ec2 credential\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n\n        self._assert_valid_user_id(context, user_id)\n        self._assert_valid_tenant_id(context, tenant_id)\n\n        cred_ref = {'user_id': user_id,\n                    'tenant_id': tenant_id,\n                    'access': uuid.uuid4().hex,\n                    'secret': uuid.uuid4().hex}\n        self.ec2_api.create_credential(context, cred_ref['access'], cred_ref)\n        return {'credential': cred_ref}\n\n    def get_credentials(self, context, user_id):\n        \"\"\"List all credentials for a user.\n\n        :param context: standard context\n        :param user_id: id of user\n        :returns: credentials: list of ec2 credential dicts\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n        self._assert_valid_user_id(context, user_id)\n        return {'credentials': self.ec2_api.list_credentials(context, user_id)}\n\n    def get_credential(self, context, user_id, credential_id):\n        \"\"\"Retreive a user's access/secret pair by the access key.\n\n        Grab the full access/secret pair for a given access key.\n\n        :param context: standard context\n        :param user_id: id of user\n        :param credential_id: access key for credentials\n        :returns: credential: dict of ec2 credential\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n        self._assert_valid_user_id(context, user_id)\n        creds = self._get_credentials(context, credential_id)\n        return {'credential': creds}\n\n    def delete_credential(self, context, user_id, credential_id):\n        \"\"\"Delete a user's access/secret pair.\n\n        Used to revoke a user's access/secret pair\n\n        :param context: standard context\n        :param user_id: id of user\n        :param credential_id: access key for credentials\n        :returns: bool: success\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n            self._assert_owner(context, user_id, credential_id)\n\n        self._assert_valid_user_id(context, user_id)\n        self._get_credentials(context, credential_id)\n        return self.ec2_api.delete_credential(context, credential_id)\n\n    def _get_credentials(self, context, credential_id):\n        \"\"\"Return credentials from an ID.\n\n        :param context: standard context\n        :param credential_id: id of credential\n        :raises exception.Unauthorized: when credential id is invalid\n        :returns: credential: dict of ec2 credential.\n        \"\"\"\n        creds = self.ec2_api.get_credential(context,\n                                            credential_id)\n        if not creds:\n            raise exception.Unauthorized(message='EC2 access key not found.')\n        return creds\n\n    def _assert_identity(self, context, user_id):\n        \"\"\"Check that the provided token belongs to the user.\n\n        :param context: standard context\n        :param user_id: id of user\n        :raises exception.Forbidden: when token is invalid\n\n        \"\"\"\n        try:\n            token_ref = self.token_api.get_token(\n                context=context,\n                token_id=context['token_id'])\n        except exception.TokenNotFound:\n            raise exception.Unauthorized()\n        token_user_id = token_ref['user'].get('id')\n        if not token_user_id == user_id:\n            raise exception.Forbidden()\n\n    def _is_admin(self, context):\n        \"\"\"Wrap admin assertion error return statement.\n\n        :param context: standard context\n        :returns: bool: success\n\n        \"\"\"\n        try:\n            self.assert_admin(context)\n            return True\n        except exception.Forbidden:\n            return False\n\n    def _assert_owner(self, context, user_id, credential_id):\n        \"\"\"Ensure the provided user owns the credential.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :param credential_id: id of credential object\n        :raises exception.Forbidden: on failure\n\n        \"\"\"\n        cred_ref = self.ec2_api.get_credential(context, credential_id)\n        if not user_id == cred_ref['user_id']:\n            raise exception.Forbidden()\n\n    def _assert_valid_user_id(self, context, user_id):\n        \"\"\"Ensure a valid user id.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :raises exception.UserNotFound: on failure\n\n        \"\"\"\n        user_ref = self.identity_api.get_user(\n            context=context,\n            user_id=user_id)\n        if not user_ref:\n            raise exception.UserNotFound(user_id=user_id)\n\n    def _assert_valid_tenant_id(self, context, tenant_id):\n        \"\"\"Ensure a valid tenant id.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :raises exception.UserNotFound: on failure\n\n        \"\"\"\n        tenant_ref = self.identity_api.get_tenant(\n            context=context,\n            tenant_id=tenant_id)\n        if not tenant_ref:\n            raise exception.TenantNotFound(tenant_id=tenant_id)\n"], "fixing_code": ["# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2012 OpenStack LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Main entry point into the EC2 Credentials service.\n\nThis service allows the creation of access/secret credentials used for\nthe ec2 interop layer of OpenStack.\n\nA user can create as many access/secret pairs, each of which map to a\nspecific tenant.  This is required because OpenStack supports a user\nbelonging to multiple tenants, whereas the signatures created on ec2-style\nrequests don't allow specification of which tenant the user wishs to act\nupon.\n\nTo complete the cycle, we provide a method that OpenStack services can\nuse to validate a signature and get a corresponding openstack token.  This\ntoken allows method calls to other services within the context the\naccess/secret was created.  As an example, nova requests keystone to validate\nthe signature of a request, receives a token, and then makes a request to\nglance to list images needed to perform the requested task.\n\n\"\"\"\n\nimport uuid\n\nfrom keystone import catalog\nfrom keystone.common import manager\nfrom keystone.common import utils\nfrom keystone.common import wsgi\nfrom keystone import config\nfrom keystone import exception\nfrom keystone import identity\nfrom keystone import policy\nfrom keystone import service\nfrom keystone import token\n\n\nCONF = config.CONF\n\n\nclass Manager(manager.Manager):\n    \"\"\"Default pivot point for the EC2 Credentials backend.\n\n    See :mod:`keystone.common.manager.Manager` for more details on how this\n    dynamically calls the backend.\n\n    \"\"\"\n\n    def __init__(self):\n        super(Manager, self).__init__(CONF.ec2.driver)\n\n\nclass Ec2Extension(wsgi.ExtensionRouter):\n    def add_routes(self, mapper):\n        ec2_controller = Ec2Controller()\n        # validation\n        mapper.connect(\n            '/ec2tokens',\n            controller=ec2_controller,\n            action='authenticate',\n            conditions=dict(method=['POST']))\n\n        # crud\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2',\n            controller=ec2_controller,\n            action='create_credential',\n            conditions=dict(method=['POST']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2',\n            controller=ec2_controller,\n            action='get_credentials',\n            conditions=dict(method=['GET']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2/{credential_id}',\n            controller=ec2_controller,\n            action='get_credential',\n            conditions=dict(method=['GET']))\n        mapper.connect(\n            '/users/{user_id}/credentials/OS-EC2/{credential_id}',\n            controller=ec2_controller,\n            action='delete_credential',\n            conditions=dict(method=['DELETE']))\n\n\nclass Ec2Controller(wsgi.Application):\n    def __init__(self):\n        self.catalog_api = catalog.Manager()\n        self.identity_api = identity.Manager()\n        self.token_api = token.Manager()\n        self.policy_api = policy.Manager()\n        self.ec2_api = Manager()\n        super(Ec2Controller, self).__init__()\n\n    def check_signature(self, creds_ref, credentials):\n        signer = utils.Ec2Signer(creds_ref['secret'])\n        signature = signer.generate(credentials)\n        if utils.auth_str_equal(credentials['signature'], signature):\n            return\n        # NOTE(vish): Some libraries don't use the port when signing\n        #             requests, so try again without port.\n        elif ':' in credentials['signature']:\n            hostname, _port = credentials['host'].split(':')\n            credentials['host'] = hostname\n            signature = signer.generate(credentials)\n            if not utils.auth_str_equal(credentials.signature, signature):\n                raise exception.Unauthorized(message='Invalid EC2 signature.')\n        else:\n            raise exception.Unauthorized(message='EC2 signature not supplied.')\n\n    def authenticate(self, context, credentials=None, ec2Credentials=None):\n        \"\"\"Validate a signed EC2 request and provide a token.\n\n        Other services (such as Nova) use this **admin** call to determine\n        if a request they signed received is from a valid user.\n\n        If it is a valid signature, an openstack token that maps\n        to the user/tenant is returned to the caller, along with\n        all the other details returned from a normal token validation\n        call.\n\n        The returned token is useful for making calls to other\n        OpenStack services within the context of the request.\n\n        :param context: standard context\n        :param credentials: dict of ec2 signature\n        :param ec2Credentials: DEPRECATED dict of ec2 signature\n        :returns: token: openstack token equivalent to access key along\n                         with the corresponding service catalog and roles\n        \"\"\"\n\n        # FIXME(ja): validate that a service token was used!\n\n        # NOTE(termie): backwards compat hack\n        if not credentials and ec2Credentials:\n            credentials = ec2Credentials\n\n        if not 'access' in credentials:\n            raise exception.Unauthorized(message='EC2 signature not supplied.')\n\n        creds_ref = self._get_credentials(context,\n                                          credentials['access'])\n        self.check_signature(creds_ref, credentials)\n\n        # TODO(termie): don't create new tokens every time\n        # TODO(termie): this is copied from TokenController.authenticate\n        token_id = uuid.uuid4().hex\n        tenant_ref = self.identity_api.get_tenant(\n            context=context,\n            tenant_id=creds_ref['tenant_id'])\n        user_ref = self.identity_api.get_user(\n            context=context,\n            user_id=creds_ref['user_id'])\n        metadata_ref = self.identity_api.get_metadata(\n            context=context,\n            user_id=user_ref['id'],\n            tenant_id=tenant_ref['id'])\n\n        # TODO(termie): optimize this call at some point and put it into the\n        #               the return for metadata\n        # fill out the roles in the metadata\n        roles = metadata_ref.get('roles', [])\n        if not roles:\n            raise exception.Unauthorized(message='User not valid for tenant.')\n        roles_ref = [self.identity_api.get_role(context, role_id)\n                     for role_id in roles]\n\n        catalog_ref = self.catalog_api.get_catalog(\n            context=context,\n            user_id=user_ref['id'],\n            tenant_id=tenant_ref['id'],\n            metadata=metadata_ref)\n\n        token_ref = self.token_api.create_token(\n            context, token_id, dict(id=token_id,\n                                    user=user_ref,\n                                    tenant=tenant_ref,\n                                    metadata=metadata_ref))\n\n        # TODO(termie): make this a util function or something\n        # TODO(termie): i don't think the ec2 middleware currently expects a\n        #               full return, but it contains a note saying that it\n        #               would be better to expect a full return\n        token_controller = service.TokenController()\n        return token_controller._format_authenticate(\n            token_ref, roles_ref, catalog_ref)\n\n    def create_credential(self, context, user_id, tenant_id):\n        \"\"\"Create a secret/access pair for use with ec2 style auth.\n\n        Generates a new set of credentials that map the the user/tenant\n        pair.\n\n        :param context: standard context\n        :param user_id: id of user\n        :param tenant_id: id of tenant\n        :returns: credential: dict of ec2 credential\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n\n        self._assert_valid_user_id(context, user_id)\n        self._assert_valid_tenant_id(context, tenant_id)\n\n        cred_ref = {'user_id': user_id,\n                    'tenant_id': tenant_id,\n                    'access': uuid.uuid4().hex,\n                    'secret': uuid.uuid4().hex}\n        self.ec2_api.create_credential(context, cred_ref['access'], cred_ref)\n        return {'credential': cred_ref}\n\n    def get_credentials(self, context, user_id):\n        \"\"\"List all credentials for a user.\n\n        :param context: standard context\n        :param user_id: id of user\n        :returns: credentials: list of ec2 credential dicts\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n        self._assert_valid_user_id(context, user_id)\n        return {'credentials': self.ec2_api.list_credentials(context, user_id)}\n\n    def get_credential(self, context, user_id, credential_id):\n        \"\"\"Retreive a user's access/secret pair by the access key.\n\n        Grab the full access/secret pair for a given access key.\n\n        :param context: standard context\n        :param user_id: id of user\n        :param credential_id: access key for credentials\n        :returns: credential: dict of ec2 credential\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n        self._assert_valid_user_id(context, user_id)\n        creds = self._get_credentials(context, credential_id)\n        return {'credential': creds}\n\n    def delete_credential(self, context, user_id, credential_id):\n        \"\"\"Delete a user's access/secret pair.\n\n        Used to revoke a user's access/secret pair\n\n        :param context: standard context\n        :param user_id: id of user\n        :param credential_id: access key for credentials\n        :returns: bool: success\n        \"\"\"\n        if not self._is_admin(context):\n            self._assert_identity(context, user_id)\n            self._assert_owner(context, user_id, credential_id)\n\n        self._assert_valid_user_id(context, user_id)\n        self._get_credentials(context, credential_id)\n        return self.ec2_api.delete_credential(context, credential_id)\n\n    def _get_credentials(self, context, credential_id):\n        \"\"\"Return credentials from an ID.\n\n        :param context: standard context\n        :param credential_id: id of credential\n        :raises exception.Unauthorized: when credential id is invalid\n        :returns: credential: dict of ec2 credential.\n        \"\"\"\n        creds = self.ec2_api.get_credential(context,\n                                            credential_id)\n        if not creds:\n            raise exception.Unauthorized(message='EC2 access key not found.')\n        return creds\n\n    def _assert_identity(self, context, user_id):\n        \"\"\"Check that the provided token belongs to the user.\n\n        :param context: standard context\n        :param user_id: id of user\n        :raises exception.Forbidden: when token is invalid\n\n        \"\"\"\n        try:\n            token_ref = self.token_api.get_token(\n                context=context,\n                token_id=context['token_id'])\n        except exception.TokenNotFound:\n            raise exception.Unauthorized()\n        token_user_id = token_ref['user'].get('id')\n        if not token_user_id == user_id:\n            raise exception.Forbidden()\n\n    def _is_admin(self, context):\n        \"\"\"Wrap admin assertion error return statement.\n\n        :param context: standard context\n        :returns: bool: success\n\n        \"\"\"\n        try:\n            self.assert_admin(context)\n            return True\n        except exception.Forbidden:\n            return False\n\n    def _assert_owner(self, context, user_id, credential_id):\n        \"\"\"Ensure the provided user owns the credential.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :param credential_id: id of credential object\n        :raises exception.Forbidden: on failure\n\n        \"\"\"\n        cred_ref = self.ec2_api.get_credential(context, credential_id)\n        if not user_id == cred_ref['user_id']:\n            raise exception.Forbidden()\n\n    def _assert_valid_user_id(self, context, user_id):\n        \"\"\"Ensure a valid user id.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :raises exception.UserNotFound: on failure\n\n        \"\"\"\n        user_ref = self.identity_api.get_user(\n            context=context,\n            user_id=user_id)\n        if not user_ref:\n            raise exception.UserNotFound(user_id=user_id)\n\n    def _assert_valid_tenant_id(self, context, tenant_id):\n        \"\"\"Ensure a valid tenant id.\n\n        :param context: standard context\n        :param user_id: expected credential owner\n        :raises exception.UserNotFound: on failure\n\n        \"\"\"\n        tenant_ref = self.identity_api.get_tenant(\n            context=context,\n            tenant_id=tenant_id)\n        if not tenant_ref:\n            raise exception.TenantNotFound(tenant_id=tenant_id)\n"], "filenames": ["keystone/contrib/ec2/core.py"], "buggy_code_start_loc": [170], "buggy_code_end_loc": [189], "fixing_code_start_loc": [171], "fixing_code_end_loc": [191], "type": "CWE-255", "message": "OpenStack Keystone Essex (2012.1) and Folsom (2012.2) does not properly handle EC2 tokens when the user role has been removed from a tenant, which allows remote authenticated users to bypass intended authorization restrictions by leveraging a token for the removed user role.", "other": {"cve": {"id": "CVE-2012-5571", "sourceIdentifier": "secalert@redhat.com", "published": "2012-12-18T01:55:03.570", "lastModified": "2017-08-29T01:32:42.683", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "OpenStack Keystone Essex (2012.1) and Folsom (2012.2) does not properly handle EC2 tokens when the user role has been removed from a tenant, which allows remote authenticated users to bypass intended authorization restrictions by leveraging a token for the removed user role."}, {"lang": "es", "value": "OpenStack Keystone Essex (2012.1) and Folsom (2012.2) no controlan correctamente los token EC2 cuando la funci\u00f3n de usuario se ha eliminado de un inquilino, lo que permite a usuarios autenticados remotamente eludir las restricciones previstas al aprovechar un token para la funci\u00f3n de usuario eliminado."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-255"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openstack:essex:2012.1:*:*:*:*:*:*:*", "matchCriteriaId": "E5FDB43F-B315-4F68-9D86-B644F2D4DF9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openstack:folsom:2012.2:*:*:*:*:*:*:*", "matchCriteriaId": "E76B76AB-D744-4163-8615-7BA18ABB1347"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-December/094286.html", "source": "secalert@redhat.com"}, {"url": "http://rhn.redhat.com/errata/RHSA-2012-1556.html", "source": "secalert@redhat.com"}, {"url": "http://rhn.redhat.com/errata/RHSA-2012-1557.html", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/11/28/5", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.openwall.com/lists/oss-security/2012/11/28/6", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "http://www.securityfocus.com/bid/56726", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-1641-1", "source": "secalert@redhat.com"}, {"url": "https://bugs.launchpad.net/keystone/+bug/1064914", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/80333", "source": "secalert@redhat.com"}, {"url": "https://github.com/openstack/keystone/commit/37308dd4f3e33f7bd0f71d83fd51734d1870713b", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/openstack/keystone/commit/8735009dc5b895db265a1cd573f39f4acfca2a19", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://github.com/openstack/keystone/commit/9d68b40cb9ea818c48152e6c712ff41586ad9653", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/openstack/keystone/commit/37308dd4f3e33f7bd0f71d83fd51734d1870713b"}}