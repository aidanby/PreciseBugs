{"buggy_code": ["<?php\n/**\n * alert-transports.inc.php\n *\n * LibreNMS alert-transports.inc.php for processor\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Vivia Nguyen-Tran\n * @author     Vivia Nguyen-Tran <vivia@ualberta.ca>\n */\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    exit(json_encode([\n        'status' => 'error',\n        'message' => 'You need to be admin',\n    ]));\n}\n\n$status = 'ok';\n$message = '';\n\n$transport_id = $vars['transport_id'];\n$name = $vars['name'];\n$is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');\n$transport_type = $vars['transport-type'];\n\nif (empty($name)) {\n    $status = 'error';\n    $message = 'No transport name provided';\n} elseif (empty($transport_type)) {\n    $status = 'error';\n    $message = 'Missing transport information';\n} else {\n    $details = [\n        'transport_name' => $name,\n        'is_default' => $is_default,\n    ];\n\n    if (is_numeric($transport_id) && $transport_id > 0) {\n        // Update the fields -- json config field will be updated later\n        dbUpdate($details, 'alert_transports', 'transport_id=?', [$transport_id]);\n    } else {\n        // Insert the new alert transport\n        $newEntry = true;\n        $transport_id = dbInsert($details, 'alert_transports');\n    }\n\n    if ($transport_id) {\n        $class = 'LibreNMS\\\\Alert\\\\Transport\\\\' . ucfirst($transport_type);\n\n        if (! method_exists($class, 'configTemplate')) {\n            exit(json_encode([\n                'status' => 'error',\n                'message' => 'This transport type is not yet supported',\n            ]));\n        }\n\n        // Build config values\n        $result = call_user_func_array($class . '::configTemplate', []);\n        $validator = Validator::make($vars, $result['validation']);\n        if ($validator->fails()) {\n            $errors = $validator->errors();\n            foreach ($errors->all() as $error) {\n                $message .= \"$error<br>\";\n            }\n            $status = 'error';\n        } else {\n            $transport_config = (array) json_decode(dbFetchCell('SELECT transport_config FROM alert_transports WHERE transport_id=?', [$transport_id]), true);\n            foreach ($result['config'] as $tmp_config) {\n                if (isset($tmp_config['name']) && $tmp_config['type'] !== 'hidden') {\n                    $transport_config[$tmp_config['name']] = $vars[$tmp_config['name']];\n                }\n            }\n            //Update the json config field\n            $detail = [\n                'transport_type' => $transport_type,\n                'transport_config' => json_encode($transport_config),\n            ];\n            $where = 'transport_id=?';\n\n            dbUpdate($detail, 'alert_transports', $where, [$transport_id]);\n\n            $status = 'ok';\n            $message = 'Updated alert transports';\n        }\n        if ($status == 'error' && $newEntry) {\n            //If error, we will have to delete the new entry in alert_transports tbl\n            $where = '`transport_id`=?';\n            dbDelete('alert_transports', $where, [$transport_id]);\n        }\n    } else {\n        $status = 'error';\n        $message = 'Failed to update transport';\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "fixing_code": ["<?php\n/**\n * alert-transports.inc.php\n *\n * LibreNMS alert-transports.inc.php for processor\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * @link       https://www.librenms.org\n *\n * @copyright  2018 Vivia Nguyen-Tran\n * @author     Vivia Nguyen-Tran <vivia@ualberta.ca>\n */\nheader('Content-type: application/json');\n\nif (! Auth::user()->hasGlobalAdmin()) {\n    exit(json_encode([\n        'status' => 'error',\n        'message' => 'You need to be admin',\n    ]));\n}\n\n$status = 'ok';\n$message = '';\n\n$transport_id = strip_tags($vars['transport_id']);\n$name = strip_tags($vars['name']);\n$is_default = (int) (isset($vars['is_default']) && $vars['is_default'] == 'on');\n$transport_type = strip_tags($vars['transport-type']);\n\nif (empty($name)) {\n    $status = 'error';\n    $message = 'No transport name provided';\n} elseif (empty($transport_type)) {\n    $status = 'error';\n    $message = 'Missing transport information';\n} else {\n    $details = [\n        'transport_name' => $name,\n        'is_default' => $is_default,\n    ];\n\n    if (is_numeric($transport_id) && $transport_id > 0) {\n        // Update the fields -- json config field will be updated later\n        dbUpdate($details, 'alert_transports', 'transport_id=?', [$transport_id]);\n    } else {\n        // Insert the new alert transport\n        $newEntry = true;\n        $transport_id = dbInsert($details, 'alert_transports');\n    }\n\n    if ($transport_id) {\n        $class = 'LibreNMS\\\\Alert\\\\Transport\\\\' . ucfirst($transport_type);\n\n        if (! method_exists($class, 'configTemplate')) {\n            exit(json_encode([\n                'status' => 'error',\n                'message' => 'This transport type is not yet supported',\n            ]));\n        }\n\n        // Build config values\n        $result = call_user_func_array($class . '::configTemplate', []);\n        $validator = Validator::make($vars, $result['validation']);\n        if ($validator->fails()) {\n            $errors = $validator->errors();\n            foreach ($errors->all() as $error) {\n                $message .= \"$error<br>\";\n            }\n            $status = 'error';\n        } else {\n            $transport_config = (array) json_decode(dbFetchCell('SELECT transport_config FROM alert_transports WHERE transport_id=?', [$transport_id]), true);\n            foreach ($result['config'] as $tmp_config) {\n                if (isset($tmp_config['name']) && $tmp_config['type'] !== 'hidden') {\n                    $transport_config[$tmp_config['name']] = $vars[$tmp_config['name']];\n                }\n            }\n            //Update the json config field\n            $detail = [\n                'transport_type' => $transport_type,\n                'transport_config' => json_encode($transport_config),\n            ];\n            $where = 'transport_id=?';\n\n            dbUpdate($detail, 'alert_transports', $where, [$transport_id]);\n\n            $status = 'ok';\n            $message = 'Updated alert transports';\n        }\n        if ($status == 'error' && $newEntry) {\n            //If error, we will have to delete the new entry in alert_transports tbl\n            $where = '`transport_id`=?';\n            dbDelete('alert_transports', $where, [$transport_id]);\n        }\n    } else {\n        $status = 'error';\n        $message = 'Failed to update transport';\n    }\n}\n\nexit(json_encode([\n    'status'       => $status,\n    'message'      => $message,\n]));\n"], "filenames": ["includes/html/forms/alert-transports.inc.php"], "buggy_code_start_loc": [37], "buggy_code_end_loc": [41], "fixing_code_start_loc": [37], "fixing_code_end_loc": [41], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in Packagist librenms/librenms prior to 22.1.0.", "other": {"cve": {"id": "CVE-2022-0576", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-14T12:15:23.463", "lastModified": "2022-02-23T01:07:47.403", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in Packagist librenms/librenms prior to 22.1.0."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Gen\u00e9rico en Packagist librenms/librenms versiones anteriores a 22.1.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.2.0", "matchCriteriaId": "5728F9DE-EADE-4DC6-828D-FE2839E1A5AA"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/commit/135717a9a05c5bf8921f1389cbb469dcbf300bfd", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/114ba055-a2f0-4db9-aafb-95df944ba177", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://notes.netbytesec.com/2022/02/multiple-vulnerabilities-in-librenms.html", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/135717a9a05c5bf8921f1389cbb469dcbf300bfd"}}