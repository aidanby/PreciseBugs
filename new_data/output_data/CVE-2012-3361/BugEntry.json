{"buggy_code": ["# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2011 Isaku Yamahata\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nfrom nova import flags\nfrom nova import test\nfrom nova.virt import driver\n\nFLAGS = flags.FLAGS\n\n\nclass TestVirtDriver(test.TestCase):\n    def test_block_device(self):\n        swap = {'device_name': '/dev/sdb',\n                'swap_size': 1}\n        ephemerals = [{'num': 0,\n                       'virtual_name': 'ephemeral0',\n                       'device_name': '/dev/sdc1',\n                       'size': 1}]\n        block_device_mapping = [{'mount_device': '/dev/sde',\n                                 'device_path': 'fake_device'}]\n        block_device_info = {\n                'root_device_name': '/dev/sda',\n                'swap': swap,\n                'ephemerals': ephemerals,\n                'block_device_mapping': block_device_mapping}\n\n        empty_block_device_info = {}\n\n        self.assertEqual(\n            driver.block_device_info_get_root(block_device_info), '/dev/sda')\n        self.assertEqual(\n            driver.block_device_info_get_root(empty_block_device_info), None)\n        self.assertEqual(\n            driver.block_device_info_get_root(None), None)\n\n        self.assertEqual(\n            driver.block_device_info_get_swap(block_device_info), swap)\n        self.assertEqual(driver.block_device_info_get_swap(\n            empty_block_device_info)['device_name'], None)\n        self.assertEqual(driver.block_device_info_get_swap(\n            empty_block_device_info)['swap_size'], 0)\n        self.assertEqual(\n            driver.block_device_info_get_swap({'swap': None})['device_name'],\n            None)\n        self.assertEqual(\n            driver.block_device_info_get_swap({'swap': None})['swap_size'],\n            0)\n        self.assertEqual(\n            driver.block_device_info_get_swap(None)['device_name'], None)\n        self.assertEqual(\n            driver.block_device_info_get_swap(None)['swap_size'], 0)\n\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(block_device_info),\n            ephemerals)\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(empty_block_device_info),\n            [])\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(None),\n            [])\n\n    def test_swap_is_usable(self):\n        self.assertFalse(driver.swap_is_usable(None))\n        self.assertFalse(driver.swap_is_usable({'device_name': None}))\n        self.assertFalse(driver.swap_is_usable({'device_name': '/dev/sdb',\n                                                'swap_size': 0}))\n        self.assertTrue(driver.swap_is_usable({'device_name': '/dev/sdb',\n                                                'swap_size': 1}))\n", "# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2010 United States Government as represented by the\n# Administrator of the National Aeronautics and Space Administration.\n#\n# Copyright 2011, Piston Cloud Computing, Inc.\n#\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\"\"\"\nUtility methods to resize, repartition, and modify disk images.\n\nIncludes injection of SSH PGP keys into authorized_keys file.\n\n\"\"\"\n\nimport crypt\nimport os\nimport random\nimport re\nimport tempfile\n\nfrom nova import exception\nfrom nova import flags\nfrom nova.openstack.common import cfg\nfrom nova.openstack.common import jsonutils\nfrom nova.openstack.common import log as logging\nfrom nova import utils\nfrom nova.virt.disk import guestfs\nfrom nova.virt.disk import loop\nfrom nova.virt.disk import nbd\n\n\nLOG = logging.getLogger(__name__)\n\ndisk_opts = [\n    cfg.StrOpt('injected_network_template',\n               default='$pybasedir/nova/virt/interfaces.template',\n               help='Template file for injected network'),\n    cfg.ListOpt('img_handlers',\n                default=['loop', 'nbd', 'guestfs'],\n                help='Order of methods used to mount disk images'),\n\n    # NOTE(yamahata): ListOpt won't work because the command may include a\n    #                 comma. For example:\n    #\n    #                 mkfs.ext3 -O dir_index,extent -E stride=8,stripe-width=16\n    #                           --label %(fs_label)s %(target)s\n    #\n    #                 list arguments are comma separated and there is no way to\n    #                 escape such commas.\n    #\n    cfg.MultiStrOpt('virt_mkfs',\n                    default=[\n                      'default=mkfs.ext3 -L %(fs_label)s -F %(target)s',\n                      'linux=mkfs.ext3 -L %(fs_label)s -F %(target)s',\n                      'windows=mkfs.ntfs'\n                      ' --force --fast --label %(fs_label)s %(target)s',\n                      # NOTE(yamahata): vfat case\n                      #'windows=mkfs.vfat -n %(fs_label)s %(target)s',\n                      ],\n                    help='mkfs commands for ephemeral device. '\n                         'The format is <os_type>=<mkfs command>'),\n    ]\n\nFLAGS = flags.FLAGS\nFLAGS.register_opts(disk_opts)\n\n_MKFS_COMMAND = {}\n_DEFAULT_MKFS_COMMAND = None\n\n\nfor s in FLAGS.virt_mkfs:\n    # NOTE(yamahata): mkfs command may includes '=' for its options.\n    #                 So item.partition('=') doesn't work here\n    os_type, mkfs_command = s.split('=', 1)\n    if os_type:\n        _MKFS_COMMAND[os_type] = mkfs_command\n    if os_type == 'default':\n        _DEFAULT_MKFS_COMMAND = mkfs_command\n\n\n_QEMU_VIRT_SIZE_REGEX = re.compile('^virtual size: (.*) \\(([0-9]+) bytes\\)',\n                                   re.MULTILINE)\n\n\ndef mkfs(os_type, fs_label, target):\n    mkfs_command = (_MKFS_COMMAND.get(os_type, _DEFAULT_MKFS_COMMAND) or\n                    '') % locals()\n    if mkfs_command:\n        utils.execute(*mkfs_command.split())\n\n\ndef get_image_virtual_size(image):\n    out, _err = utils.execute('qemu-img', 'info', image)\n    m = _QEMU_VIRT_SIZE_REGEX.search(out)\n    return int(m.group(2))\n\n\ndef resize2fs(image, check_exit_code=False):\n    utils.execute('e2fsck', '-fp', image, check_exit_code=check_exit_code)\n    utils.execute('resize2fs', image, check_exit_code=check_exit_code)\n\n\ndef extend(image, size):\n    \"\"\"Increase image to size\"\"\"\n    # NOTE(MotoKen): check image virtual size before resize\n    virt_size = get_image_virtual_size(image)\n    if virt_size >= size:\n        return\n    utils.execute('qemu-img', 'resize', image, size)\n    # NOTE(vish): attempts to resize filesystem\n    resize2fs(image)\n\n\ndef bind(src, target, instance_name):\n    \"\"\"Bind device to a filesytem\"\"\"\n    if src:\n        utils.execute('touch', target, run_as_root=True)\n        utils.execute('mount', '-o', 'bind', src, target,\n                run_as_root=True)\n        s = os.stat(src)\n        cgroup_info = \"b %s:%s rwm\\n\" % (os.major(s.st_rdev),\n                                         os.minor(s.st_rdev))\n        cgroups_path = (\"/sys/fs/cgroup/devices/libvirt/lxc/\"\n                        \"%s/devices.allow\" % instance_name)\n        utils.execute('tee', cgroups_path,\n                      process_input=cgroup_info, run_as_root=True)\n\n\ndef unbind(target):\n    if target:\n        utils.execute('umount', target, run_as_root=True)\n\n\nclass _DiskImage(object):\n    \"\"\"Provide operations on a disk image file.\"\"\"\n\n    def __init__(self, image, partition=None, use_cow=False, mount_dir=None):\n        # These passed to each mounter\n        self.image = image\n        self.partition = partition\n        self.mount_dir = mount_dir\n\n        # Internal\n        self._mkdir = False\n        self._mounter = None\n        self._errors = []\n\n        # As a performance tweak, don't bother trying to\n        # directly loopback mount a cow image.\n        self.handlers = FLAGS.img_handlers[:]\n        if use_cow and 'loop' in self.handlers:\n            self.handlers.remove('loop')\n\n        if not self.handlers:\n            msg = _('no capable image handler configured')\n            raise exception.NovaException(msg)\n\n    @property\n    def errors(self):\n        \"\"\"Return the collated errors from all operations.\"\"\"\n        return '\\n--\\n'.join([''] + self._errors)\n\n    @staticmethod\n    def _handler_class(mode):\n        \"\"\"Look up the appropriate class to use based on MODE.\"\"\"\n        for cls in (loop.Mount, nbd.Mount, guestfs.Mount):\n            if cls.mode == mode:\n                return cls\n        msg = _(\"unknown disk image handler: %s\") % mode\n        raise exception.NovaException(msg)\n\n    def mount(self):\n        \"\"\"Mount a disk image, using the object attributes.\n\n        The first supported means provided by the mount classes is used.\n\n        True, or False is returned and the 'errors' attribute\n        contains any diagnostics.\n        \"\"\"\n        if self._mounter:\n            raise exception.NovaException(_('image already mounted'))\n\n        if not self.mount_dir:\n            self.mount_dir = tempfile.mkdtemp()\n            self._mkdir = True\n\n        try:\n            for h in self.handlers:\n                mounter_cls = self._handler_class(h)\n                mounter = mounter_cls(image=self.image,\n                                      partition=self.partition,\n                                      mount_dir=self.mount_dir)\n                if mounter.do_mount():\n                    self._mounter = mounter\n                    break\n                else:\n                    LOG.debug(mounter.error)\n                    self._errors.append(mounter.error)\n        finally:\n            if not self._mounter:\n                self.umount()  # rmdir\n\n        return bool(self._mounter)\n\n    def umount(self):\n        \"\"\"Unmount a disk image from the file system.\"\"\"\n        try:\n            if self._mounter:\n                self._mounter.do_umount()\n        finally:\n            if self._mkdir:\n                os.rmdir(self.mount_dir)\n\n\n# Public module functions\n\ndef inject_data(image,\n                key=None, net=None, metadata=None, admin_password=None,\n                partition=None, use_cow=False):\n    \"\"\"Injects a ssh key and optionally net data into a disk image.\n\n    it will mount the image as a fully partitioned disk and attempt to inject\n    into the specified partition number.\n\n    If partition is not specified it mounts the image as a single partition.\n\n    \"\"\"\n    img = _DiskImage(image=image, partition=partition, use_cow=use_cow)\n    if img.mount():\n        try:\n            inject_data_into_fs(img.mount_dir,\n                                key, net, metadata, admin_password,\n                                utils.execute)\n        finally:\n            img.umount()\n    else:\n        raise exception.NovaException(img.errors)\n\n\ndef inject_files(image, files, partition=None, use_cow=False):\n    \"\"\"Injects arbitrary files into a disk image\"\"\"\n    img = _DiskImage(image=image, partition=partition, use_cow=use_cow)\n    if img.mount():\n        try:\n            for (path, contents) in files:\n                _inject_file_into_fs(img.mount_dir, path, contents)\n        finally:\n            img.umount()\n    else:\n        raise exception.NovaException(img.errors)\n\n\ndef setup_container(image, container_dir=None, use_cow=False):\n    \"\"\"Setup the LXC container.\n\n    It will mount the loopback image to the container directory in order\n    to create the root filesystem for the container.\n\n    LXC does not support qcow2 images yet.\n    \"\"\"\n    try:\n        img = _DiskImage(image=image, use_cow=use_cow, mount_dir=container_dir)\n        if img.mount():\n            return img\n        else:\n            raise exception.NovaException(img.errors)\n    except Exception, exn:\n        LOG.exception(_('Failed to mount filesystem: %s'), exn)\n\n\ndef destroy_container(img):\n    \"\"\"Destroy the container once it terminates.\n\n    It will umount the container that is mounted,\n    and delete any  linked devices.\n\n    LXC does not support qcow2 images yet.\n    \"\"\"\n    try:\n        if img:\n            img.umount()\n    except Exception, exn:\n        LOG.exception(_('Failed to remove container: %s'), exn)\n\n\ndef inject_data_into_fs(fs, key, net, metadata, admin_password, execute):\n    \"\"\"Injects data into a filesystem already mounted by the caller.\n    Virt connections can call this directly if they mount their fs\n    in a different way to inject_data\n    \"\"\"\n    if key:\n        _inject_key_into_fs(key, fs, execute=execute)\n    if net:\n        _inject_net_into_fs(net, fs, execute=execute)\n    if metadata:\n        _inject_metadata_into_fs(metadata, fs, execute=execute)\n    if admin_password:\n        _inject_admin_password_into_fs(admin_password, fs, execute=execute)\n\n\ndef _inject_file_into_fs(fs, path, contents):\n    absolute_path = os.path.join(fs, path.lstrip('/'))\n    parent_dir = os.path.dirname(absolute_path)\n    utils.execute('mkdir', '-p', parent_dir, run_as_root=True)\n    utils.execute('tee', absolute_path, process_input=contents,\n          run_as_root=True)\n\n\ndef _inject_metadata_into_fs(metadata, fs, execute=None):\n    metadata_path = os.path.join(fs, \"meta.js\")\n    metadata = dict([(m.key, m.value) for m in metadata])\n\n    utils.execute('tee', metadata_path,\n                  process_input=jsonutils.dumps(metadata), run_as_root=True)\n\n\ndef _inject_key_into_fs(key, fs, execute=None):\n    \"\"\"Add the given public ssh key to root's authorized_keys.\n\n    key is an ssh key string.\n    fs is the path to the base of the filesystem into which to inject the key.\n    \"\"\"\n    sshdir = os.path.join(fs, 'root', '.ssh')\n    utils.execute('mkdir', '-p', sshdir, run_as_root=True)\n    utils.execute('chown', 'root', sshdir, run_as_root=True)\n    utils.execute('chmod', '700', sshdir, run_as_root=True)\n    keyfile = os.path.join(sshdir, 'authorized_keys')\n    key_data = [\n        '\\n',\n        '# The following ssh key was injected by Nova',\n        '\\n',\n        key.strip(),\n        '\\n',\n    ]\n    utils.execute('tee', '-a', keyfile,\n                  process_input=''.join(key_data), run_as_root=True)\n\n\ndef _inject_net_into_fs(net, fs, execute=None):\n    \"\"\"Inject /etc/network/interfaces into the filesystem rooted at fs.\n\n    net is the contents of /etc/network/interfaces.\n    \"\"\"\n    netdir = os.path.join(os.path.join(fs, 'etc'), 'network')\n    utils.execute('mkdir', '-p', netdir, run_as_root=True)\n    utils.execute('chown', 'root:root', netdir, run_as_root=True)\n    utils.execute('chmod', 755, netdir, run_as_root=True)\n    netfile = os.path.join(netdir, 'interfaces')\n    utils.execute('tee', netfile, process_input=net, run_as_root=True)\n\n\ndef _inject_admin_password_into_fs(admin_passwd, fs, execute=None):\n    \"\"\"Set the root password to admin_passwd\n\n    admin_password is a root password\n    fs is the path to the base of the filesystem into which to inject\n    the key.\n\n    This method modifies the instance filesystem directly,\n    and does not require a guest agent running in the instance.\n\n    \"\"\"\n    # The approach used here is to copy the password and shadow\n    # files from the instance filesystem to local files, make any\n    # necessary changes, and then copy them back.\n\n    admin_user = 'root'\n\n    fd, tmp_passwd = tempfile.mkstemp()\n    os.close(fd)\n    fd, tmp_shadow = tempfile.mkstemp()\n    os.close(fd)\n\n    utils.execute('cp', os.path.join(fs, 'etc', 'passwd'), tmp_passwd,\n                  run_as_root=True)\n    utils.execute('cp', os.path.join(fs, 'etc', 'shadow'), tmp_shadow,\n                  run_as_root=True)\n    _set_passwd(admin_user, admin_passwd, tmp_passwd, tmp_shadow)\n    utils.execute('cp', tmp_passwd, os.path.join(fs, 'etc', 'passwd'),\n                  run_as_root=True)\n    os.unlink(tmp_passwd)\n    utils.execute('cp', tmp_shadow, os.path.join(fs, 'etc', 'shadow'),\n                  run_as_root=True)\n    os.unlink(tmp_shadow)\n\n\ndef _set_passwd(username, admin_passwd, passwd_file, shadow_file):\n    \"\"\"set the password for username to admin_passwd\n\n    The passwd_file is not modified.  The shadow_file is updated.\n    if the username is not found in both files, an exception is raised.\n\n    :param username: the username\n    :param encrypted_passwd: the  encrypted password\n    :param passwd_file: path to the passwd file\n    :param shadow_file: path to the shadow password file\n    :returns: nothing\n    :raises: exception.NovaException(), IOError()\n\n    \"\"\"\n    salt_set = ('abcdefghijklmnopqrstuvwxyz'\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                '0123456789./')\n    # encryption algo - id pairs for crypt()\n    algos = {'SHA-512': '$6$', 'SHA-256': '$5$', 'MD5': '$1$', 'DES': ''}\n\n    salt = 16 * ' '\n    salt = ''.join([random.choice(salt_set) for c in salt])\n\n    # crypt() depends on the underlying libc, and may not support all\n    # forms of hash. We try md5 first. If we get only 13 characters back,\n    # then the underlying crypt() didn't understand the '$n$salt' magic,\n    # so we fall back to DES.\n    # md5 is the default because it's widely supported. Although the\n    # local crypt() might support stronger SHA, the target instance\n    # might not.\n    encrypted_passwd = crypt.crypt(admin_passwd, algos['MD5'] + salt)\n    if len(encrypted_passwd) == 13:\n        encrypted_passwd = crypt.crypt(admin_passwd, algos['DES'] + salt)\n\n    try:\n        p_file = open(passwd_file, 'rb')\n        s_file = open(shadow_file, 'rb')\n\n        # username MUST exist in passwd file or it's an error\n        found = False\n        for entry in p_file:\n            split_entry = entry.split(':')\n            if split_entry[0] == username:\n                found = True\n                break\n        if not found:\n            msg = _('User %(username)s not found in password file.')\n            raise exception.NovaException(msg % username)\n\n        # update password in the shadow file.It's an error if the\n        # the user doesn't exist.\n        new_shadow = list()\n        found = False\n        for entry in s_file:\n            split_entry = entry.split(':')\n            if split_entry[0] == username:\n                split_entry[1] = encrypted_passwd\n                found = True\n            new_entry = ':'.join(split_entry)\n            new_shadow.append(new_entry)\n        s_file.close()\n        if not found:\n            msg = _('User %(username)s not found in shadow file.')\n            raise exception.NovaException(msg % username)\n        s_file = open(shadow_file, 'wb')\n        for entry in new_shadow:\n            s_file.write(entry)\n    finally:\n        p_file.close()\n        s_file.close()\n"], "fixing_code": ["# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2011 Isaku Yamahata\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\nfrom nova import exception\nfrom nova import flags\nfrom nova import test\nfrom nova.virt.disk import api as disk_api\nfrom nova.virt import driver\n\nFLAGS = flags.FLAGS\n\n\nclass TestVirtDriver(test.TestCase):\n    def test_block_device(self):\n        swap = {'device_name': '/dev/sdb',\n                'swap_size': 1}\n        ephemerals = [{'num': 0,\n                       'virtual_name': 'ephemeral0',\n                       'device_name': '/dev/sdc1',\n                       'size': 1}]\n        block_device_mapping = [{'mount_device': '/dev/sde',\n                                 'device_path': 'fake_device'}]\n        block_device_info = {\n                'root_device_name': '/dev/sda',\n                'swap': swap,\n                'ephemerals': ephemerals,\n                'block_device_mapping': block_device_mapping}\n\n        empty_block_device_info = {}\n\n        self.assertEqual(\n            driver.block_device_info_get_root(block_device_info), '/dev/sda')\n        self.assertEqual(\n            driver.block_device_info_get_root(empty_block_device_info), None)\n        self.assertEqual(\n            driver.block_device_info_get_root(None), None)\n\n        self.assertEqual(\n            driver.block_device_info_get_swap(block_device_info), swap)\n        self.assertEqual(driver.block_device_info_get_swap(\n            empty_block_device_info)['device_name'], None)\n        self.assertEqual(driver.block_device_info_get_swap(\n            empty_block_device_info)['swap_size'], 0)\n        self.assertEqual(\n            driver.block_device_info_get_swap({'swap': None})['device_name'],\n            None)\n        self.assertEqual(\n            driver.block_device_info_get_swap({'swap': None})['swap_size'],\n            0)\n        self.assertEqual(\n            driver.block_device_info_get_swap(None)['device_name'], None)\n        self.assertEqual(\n            driver.block_device_info_get_swap(None)['swap_size'], 0)\n\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(block_device_info),\n            ephemerals)\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(empty_block_device_info),\n            [])\n        self.assertEqual(\n            driver.block_device_info_get_ephemerals(None),\n            [])\n\n    def test_swap_is_usable(self):\n        self.assertFalse(driver.swap_is_usable(None))\n        self.assertFalse(driver.swap_is_usable({'device_name': None}))\n        self.assertFalse(driver.swap_is_usable({'device_name': '/dev/sdb',\n                                                'swap_size': 0}))\n        self.assertTrue(driver.swap_is_usable({'device_name': '/dev/sdb',\n                                                'swap_size': 1}))\n\n\nclass TestVirtDisk(test.TestCase):\n    def test_check_safe_path(self):\n        ret = disk_api._join_and_check_path_within_fs('/foo', 'etc',\n                                                      'something.conf')\n        self.assertEquals(ret, '/foo/etc/something.conf')\n\n    def test_check_unsafe_path(self):\n        self.assertRaises(exception.Invalid,\n                          disk_api._join_and_check_path_within_fs,\n                          '/foo', 'etc/../../../something.conf')\n\n    def test_inject_files_with_bad_path(self):\n        self.assertRaises(exception.Invalid,\n                          disk_api._inject_file_into_fs,\n                          '/tmp', '/etc/../../../../etc/passwd',\n                          'hax')\n", "# vim: tabstop=4 shiftwidth=4 softtabstop=4\n\n# Copyright 2010 United States Government as represented by the\n# Administrator of the National Aeronautics and Space Administration.\n#\n# Copyright 2011, Piston Cloud Computing, Inc.\n#\n# All Rights Reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n#    License for the specific language governing permissions and limitations\n#    under the License.\n\"\"\"\nUtility methods to resize, repartition, and modify disk images.\n\nIncludes injection of SSH PGP keys into authorized_keys file.\n\n\"\"\"\n\nimport crypt\nimport os\nimport random\nimport re\nimport tempfile\n\nfrom nova import exception\nfrom nova import flags\nfrom nova.openstack.common import cfg\nfrom nova.openstack.common import jsonutils\nfrom nova.openstack.common import log as logging\nfrom nova import utils\nfrom nova.virt.disk import guestfs\nfrom nova.virt.disk import loop\nfrom nova.virt.disk import nbd\n\n\nLOG = logging.getLogger(__name__)\n\ndisk_opts = [\n    cfg.StrOpt('injected_network_template',\n               default='$pybasedir/nova/virt/interfaces.template',\n               help='Template file for injected network'),\n    cfg.ListOpt('img_handlers',\n                default=['loop', 'nbd', 'guestfs'],\n                help='Order of methods used to mount disk images'),\n\n    # NOTE(yamahata): ListOpt won't work because the command may include a\n    #                 comma. For example:\n    #\n    #                 mkfs.ext3 -O dir_index,extent -E stride=8,stripe-width=16\n    #                           --label %(fs_label)s %(target)s\n    #\n    #                 list arguments are comma separated and there is no way to\n    #                 escape such commas.\n    #\n    cfg.MultiStrOpt('virt_mkfs',\n                    default=[\n                      'default=mkfs.ext3 -L %(fs_label)s -F %(target)s',\n                      'linux=mkfs.ext3 -L %(fs_label)s -F %(target)s',\n                      'windows=mkfs.ntfs'\n                      ' --force --fast --label %(fs_label)s %(target)s',\n                      # NOTE(yamahata): vfat case\n                      #'windows=mkfs.vfat -n %(fs_label)s %(target)s',\n                      ],\n                    help='mkfs commands for ephemeral device. '\n                         'The format is <os_type>=<mkfs command>'),\n    ]\n\nFLAGS = flags.FLAGS\nFLAGS.register_opts(disk_opts)\n\n_MKFS_COMMAND = {}\n_DEFAULT_MKFS_COMMAND = None\n\n\nfor s in FLAGS.virt_mkfs:\n    # NOTE(yamahata): mkfs command may includes '=' for its options.\n    #                 So item.partition('=') doesn't work here\n    os_type, mkfs_command = s.split('=', 1)\n    if os_type:\n        _MKFS_COMMAND[os_type] = mkfs_command\n    if os_type == 'default':\n        _DEFAULT_MKFS_COMMAND = mkfs_command\n\n\n_QEMU_VIRT_SIZE_REGEX = re.compile('^virtual size: (.*) \\(([0-9]+) bytes\\)',\n                                   re.MULTILINE)\n\n\ndef mkfs(os_type, fs_label, target):\n    mkfs_command = (_MKFS_COMMAND.get(os_type, _DEFAULT_MKFS_COMMAND) or\n                    '') % locals()\n    if mkfs_command:\n        utils.execute(*mkfs_command.split())\n\n\ndef get_image_virtual_size(image):\n    out, _err = utils.execute('qemu-img', 'info', image)\n    m = _QEMU_VIRT_SIZE_REGEX.search(out)\n    return int(m.group(2))\n\n\ndef resize2fs(image, check_exit_code=False):\n    utils.execute('e2fsck', '-fp', image, check_exit_code=check_exit_code)\n    utils.execute('resize2fs', image, check_exit_code=check_exit_code)\n\n\ndef extend(image, size):\n    \"\"\"Increase image to size\"\"\"\n    # NOTE(MotoKen): check image virtual size before resize\n    virt_size = get_image_virtual_size(image)\n    if virt_size >= size:\n        return\n    utils.execute('qemu-img', 'resize', image, size)\n    # NOTE(vish): attempts to resize filesystem\n    resize2fs(image)\n\n\ndef bind(src, target, instance_name):\n    \"\"\"Bind device to a filesytem\"\"\"\n    if src:\n        utils.execute('touch', target, run_as_root=True)\n        utils.execute('mount', '-o', 'bind', src, target,\n                run_as_root=True)\n        s = os.stat(src)\n        cgroup_info = \"b %s:%s rwm\\n\" % (os.major(s.st_rdev),\n                                         os.minor(s.st_rdev))\n        cgroups_path = (\"/sys/fs/cgroup/devices/libvirt/lxc/\"\n                        \"%s/devices.allow\" % instance_name)\n        utils.execute('tee', cgroups_path,\n                      process_input=cgroup_info, run_as_root=True)\n\n\ndef unbind(target):\n    if target:\n        utils.execute('umount', target, run_as_root=True)\n\n\nclass _DiskImage(object):\n    \"\"\"Provide operations on a disk image file.\"\"\"\n\n    def __init__(self, image, partition=None, use_cow=False, mount_dir=None):\n        # These passed to each mounter\n        self.image = image\n        self.partition = partition\n        self.mount_dir = mount_dir\n\n        # Internal\n        self._mkdir = False\n        self._mounter = None\n        self._errors = []\n\n        # As a performance tweak, don't bother trying to\n        # directly loopback mount a cow image.\n        self.handlers = FLAGS.img_handlers[:]\n        if use_cow and 'loop' in self.handlers:\n            self.handlers.remove('loop')\n\n        if not self.handlers:\n            msg = _('no capable image handler configured')\n            raise exception.NovaException(msg)\n\n    @property\n    def errors(self):\n        \"\"\"Return the collated errors from all operations.\"\"\"\n        return '\\n--\\n'.join([''] + self._errors)\n\n    @staticmethod\n    def _handler_class(mode):\n        \"\"\"Look up the appropriate class to use based on MODE.\"\"\"\n        for cls in (loop.Mount, nbd.Mount, guestfs.Mount):\n            if cls.mode == mode:\n                return cls\n        msg = _(\"unknown disk image handler: %s\") % mode\n        raise exception.NovaException(msg)\n\n    def mount(self):\n        \"\"\"Mount a disk image, using the object attributes.\n\n        The first supported means provided by the mount classes is used.\n\n        True, or False is returned and the 'errors' attribute\n        contains any diagnostics.\n        \"\"\"\n        if self._mounter:\n            raise exception.NovaException(_('image already mounted'))\n\n        if not self.mount_dir:\n            self.mount_dir = tempfile.mkdtemp()\n            self._mkdir = True\n\n        try:\n            for h in self.handlers:\n                mounter_cls = self._handler_class(h)\n                mounter = mounter_cls(image=self.image,\n                                      partition=self.partition,\n                                      mount_dir=self.mount_dir)\n                if mounter.do_mount():\n                    self._mounter = mounter\n                    break\n                else:\n                    LOG.debug(mounter.error)\n                    self._errors.append(mounter.error)\n        finally:\n            if not self._mounter:\n                self.umount()  # rmdir\n\n        return bool(self._mounter)\n\n    def umount(self):\n        \"\"\"Unmount a disk image from the file system.\"\"\"\n        try:\n            if self._mounter:\n                self._mounter.do_umount()\n        finally:\n            if self._mkdir:\n                os.rmdir(self.mount_dir)\n\n\n# Public module functions\n\ndef inject_data(image,\n                key=None, net=None, metadata=None, admin_password=None,\n                partition=None, use_cow=False):\n    \"\"\"Injects a ssh key and optionally net data into a disk image.\n\n    it will mount the image as a fully partitioned disk and attempt to inject\n    into the specified partition number.\n\n    If partition is not specified it mounts the image as a single partition.\n\n    \"\"\"\n    img = _DiskImage(image=image, partition=partition, use_cow=use_cow)\n    if img.mount():\n        try:\n            inject_data_into_fs(img.mount_dir,\n                                key, net, metadata, admin_password,\n                                utils.execute)\n        finally:\n            img.umount()\n    else:\n        raise exception.NovaException(img.errors)\n\n\ndef inject_files(image, files, partition=None, use_cow=False):\n    \"\"\"Injects arbitrary files into a disk image\"\"\"\n    img = _DiskImage(image=image, partition=partition, use_cow=use_cow)\n    if img.mount():\n        try:\n            for (path, contents) in files:\n                _inject_file_into_fs(img.mount_dir, path, contents)\n        finally:\n            img.umount()\n    else:\n        raise exception.NovaException(img.errors)\n\n\ndef setup_container(image, container_dir=None, use_cow=False):\n    \"\"\"Setup the LXC container.\n\n    It will mount the loopback image to the container directory in order\n    to create the root filesystem for the container.\n\n    LXC does not support qcow2 images yet.\n    \"\"\"\n    try:\n        img = _DiskImage(image=image, use_cow=use_cow, mount_dir=container_dir)\n        if img.mount():\n            return img\n        else:\n            raise exception.NovaException(img.errors)\n    except Exception, exn:\n        LOG.exception(_('Failed to mount filesystem: %s'), exn)\n\n\ndef destroy_container(img):\n    \"\"\"Destroy the container once it terminates.\n\n    It will umount the container that is mounted,\n    and delete any  linked devices.\n\n    LXC does not support qcow2 images yet.\n    \"\"\"\n    try:\n        if img:\n            img.umount()\n    except Exception, exn:\n        LOG.exception(_('Failed to remove container: %s'), exn)\n\n\ndef inject_data_into_fs(fs, key, net, metadata, admin_password, execute):\n    \"\"\"Injects data into a filesystem already mounted by the caller.\n    Virt connections can call this directly if they mount their fs\n    in a different way to inject_data\n    \"\"\"\n    if key:\n        _inject_key_into_fs(key, fs, execute=execute)\n    if net:\n        _inject_net_into_fs(net, fs, execute=execute)\n    if metadata:\n        _inject_metadata_into_fs(metadata, fs, execute=execute)\n    if admin_password:\n        _inject_admin_password_into_fs(admin_password, fs, execute=execute)\n\n\ndef _join_and_check_path_within_fs(fs, *args):\n    '''os.path.join() with safety check for injected file paths.\n\n    Join the supplied path components and make sure that the\n    resulting path we are injecting into is within the\n    mounted guest fs.  Trying to be clever and specifying a\n    path with '..' in it will hit this safeguard.\n    '''\n    absolute_path = os.path.realpath(os.path.join(fs, *args))\n    if not absolute_path.startswith(os.path.realpath(fs) + '/'):\n        raise exception.Invalid(_('injected file path not valid'))\n    return absolute_path\n\n\ndef _inject_file_into_fs(fs, path, contents, append=False):\n    absolute_path = _join_and_check_path_within_fs(fs, path.lstrip('/'))\n\n    parent_dir = os.path.dirname(absolute_path)\n    utils.execute('mkdir', '-p', parent_dir, run_as_root=True)\n\n    args = []\n    if append:\n        args.append('-a')\n    args.append(absolute_path)\n\n    kwargs = dict(process_input=contents, run_as_root=True)\n\n    utils.execute('tee', *args, **kwargs)\n\n\ndef _inject_metadata_into_fs(metadata, fs, execute=None):\n    metadata = dict([(m.key, m.value) for m in metadata])\n    _inject_file_into_fs(fs, 'meta.js', jsonutils.dumps(metadata))\n\n\ndef _inject_key_into_fs(key, fs, execute=None):\n    \"\"\"Add the given public ssh key to root's authorized_keys.\n\n    key is an ssh key string.\n    fs is the path to the base of the filesystem into which to inject the key.\n    \"\"\"\n    sshdir = _join_and_check_path_within_fs(fs, 'root', '.ssh')\n    utils.execute('mkdir', '-p', sshdir, run_as_root=True)\n    utils.execute('chown', 'root', sshdir, run_as_root=True)\n    utils.execute('chmod', '700', sshdir, run_as_root=True)\n\n    keyfile = os.path.join('root', '.ssh', 'authorized_keys')\n\n    key_data = ''.join([\n        '\\n',\n        '# The following ssh key was injected by Nova',\n        '\\n',\n        key.strip(),\n        '\\n',\n    ])\n\n    _inject_file_into_fs(fs, keyfile, key_data, append=True)\n\n\ndef _inject_net_into_fs(net, fs, execute=None):\n    \"\"\"Inject /etc/network/interfaces into the filesystem rooted at fs.\n\n    net is the contents of /etc/network/interfaces.\n    \"\"\"\n    netdir = _join_and_check_path_within_fs(fs, 'etc', 'network')\n    utils.execute('mkdir', '-p', netdir, run_as_root=True)\n    utils.execute('chown', 'root:root', netdir, run_as_root=True)\n    utils.execute('chmod', 755, netdir, run_as_root=True)\n\n    netfile = os.path.join('etc', 'network', 'interfaces')\n    _inject_file_into_fs(fs, netfile, net)\n\n\ndef _inject_admin_password_into_fs(admin_passwd, fs, execute=None):\n    \"\"\"Set the root password to admin_passwd\n\n    admin_password is a root password\n    fs is the path to the base of the filesystem into which to inject\n    the key.\n\n    This method modifies the instance filesystem directly,\n    and does not require a guest agent running in the instance.\n\n    \"\"\"\n    # The approach used here is to copy the password and shadow\n    # files from the instance filesystem to local files, make any\n    # necessary changes, and then copy them back.\n\n    admin_user = 'root'\n\n    fd, tmp_passwd = tempfile.mkstemp()\n    os.close(fd)\n    fd, tmp_shadow = tempfile.mkstemp()\n    os.close(fd)\n\n    passwd_path = _join_and_check_path_within_fs(fs, 'etc', 'passwd')\n    shadow_path = _join_and_check_path_within_fs(fs, 'etc', 'shadow')\n\n    utils.execute('cp', passwd_path, tmp_passwd, run_as_root=True)\n    utils.execute('cp', shadow_path, tmp_shadow, run_as_root=True)\n    _set_passwd(admin_user, admin_passwd, tmp_passwd, tmp_shadow)\n    utils.execute('cp', tmp_passwd, passwd_path, run_as_root=True)\n    os.unlink(tmp_passwd)\n    utils.execute('cp', tmp_shadow, shadow_path, run_as_root=True)\n    os.unlink(tmp_shadow)\n\n\ndef _set_passwd(username, admin_passwd, passwd_file, shadow_file):\n    \"\"\"set the password for username to admin_passwd\n\n    The passwd_file is not modified.  The shadow_file is updated.\n    if the username is not found in both files, an exception is raised.\n\n    :param username: the username\n    :param encrypted_passwd: the  encrypted password\n    :param passwd_file: path to the passwd file\n    :param shadow_file: path to the shadow password file\n    :returns: nothing\n    :raises: exception.NovaException(), IOError()\n\n    \"\"\"\n    salt_set = ('abcdefghijklmnopqrstuvwxyz'\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                '0123456789./')\n    # encryption algo - id pairs for crypt()\n    algos = {'SHA-512': '$6$', 'SHA-256': '$5$', 'MD5': '$1$', 'DES': ''}\n\n    salt = 16 * ' '\n    salt = ''.join([random.choice(salt_set) for c in salt])\n\n    # crypt() depends on the underlying libc, and may not support all\n    # forms of hash. We try md5 first. If we get only 13 characters back,\n    # then the underlying crypt() didn't understand the '$n$salt' magic,\n    # so we fall back to DES.\n    # md5 is the default because it's widely supported. Although the\n    # local crypt() might support stronger SHA, the target instance\n    # might not.\n    encrypted_passwd = crypt.crypt(admin_passwd, algos['MD5'] + salt)\n    if len(encrypted_passwd) == 13:\n        encrypted_passwd = crypt.crypt(admin_passwd, algos['DES'] + salt)\n\n    try:\n        p_file = open(passwd_file, 'rb')\n        s_file = open(shadow_file, 'rb')\n\n        # username MUST exist in passwd file or it's an error\n        found = False\n        for entry in p_file:\n            split_entry = entry.split(':')\n            if split_entry[0] == username:\n                found = True\n                break\n        if not found:\n            msg = _('User %(username)s not found in password file.')\n            raise exception.NovaException(msg % username)\n\n        # update password in the shadow file.It's an error if the\n        # the user doesn't exist.\n        new_shadow = list()\n        found = False\n        for entry in s_file:\n            split_entry = entry.split(':')\n            if split_entry[0] == username:\n                split_entry[1] = encrypted_passwd\n                found = True\n            new_entry = ':'.join(split_entry)\n            new_shadow.append(new_entry)\n        s_file.close()\n        if not found:\n            msg = _('User %(username)s not found in shadow file.')\n            raise exception.NovaException(msg % username)\n        s_file = open(shadow_file, 'wb')\n        for entry in new_shadow:\n            s_file.write(entry)\n    finally:\n        p_file.close()\n        s_file.close()\n"], "filenames": ["nova/tests/test_virt.py", "nova/virt/disk/api.py"], "buggy_code_start_loc": [17, 314], "buggy_code_end_loc": [83, 397], "fixing_code_start_loc": [18, 314], "fixing_code_end_loc": [104, 418], "type": "CWE-264", "message": "virt/disk/api.py in OpenStack Compute (Nova) Folsom (2012.2), Essex (2012.1), and Diablo (2011.3) allows remote authenticated users to overwrite arbitrary files via a symlink attack on a file in an image.", "other": {"cve": {"id": "CVE-2012-3361", "sourceIdentifier": "secalert@redhat.com", "published": "2012-07-22T16:55:48.227", "lastModified": "2012-08-17T03:53:53.677", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "virt/disk/api.py in OpenStack Compute (Nova) Folsom (2012.2), Essex (2012.1), and Diablo (2011.3) allows remote authenticated users to overwrite arbitrary files via a symlink attack on a file in an image."}, {"lang": "es", "value": "virt/disk/api.py en OpenStack Compute (Nova) Folsom (2.012,2), Essex (2.012,1) y Diablo (2.011,3) permite a usuarios remotos autenticados sobrescribir archivos arbitrarios a trav\u00e9s de un ataque de enlace simb\u00f3lico un archivo en una imagen."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openstack:diablo:2011.3:*:*:*:*:*:*:*", "matchCriteriaId": "65FA489C-5FDC-4887-9F1F-66177F87DB5E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openstack:essex:2012.1:*:*:*:*:*:*:*", "matchCriteriaId": "E5FDB43F-B315-4F68-9D86-B644F2D4DF9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openstack:folsom:2012.2:*:*:*:*:*:*:*", "matchCriteriaId": "E76B76AB-D744-4163-8615-7BA18ABB1347"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-July/083969.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-July/083984.html", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/54278", "source": "secalert@redhat.com"}, {"url": "http://www.ubuntu.com/usn/USN-1497-1", "source": "secalert@redhat.com"}, {"url": "https://bugs.launchpad.net/nova/+bug/1015531", "source": "secalert@redhat.com"}, {"url": "https://github.com/openstack/nova/commit/2427d4a99bed35baefd8f17ba422cb7aae8dcca7", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/openstack/nova/commit/b0feaffdb2b1c51182b8dce41b367f3449af5dd9", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}, {"url": "https://lists.launchpad.net/openstack/msg14089.html", "source": "secalert@redhat.com"}, {"url": "https://review.openstack.org/#/c/9268/", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/openstack/nova/commit/2427d4a99bed35baefd8f17ba422cb7aae8dcca7"}}