{"buggy_code": ["<?php\n\n/**\n * Handler.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/** @noinspection MultipleReturnStatementsInspection */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Exceptions;\n\nuse ErrorException;\nuse FireflyIII\\Jobs\\MailError;\nuse Illuminate\\Auth\\AuthenticationException;\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Session\\TokenMismatchException;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Validation\\ValidationException as LaravelValidationException;\nuse Laravel\\Passport\\Exceptions\\OAuthServerException as LaravelOAuthException;\nuse League\\OAuth2\\Server\\Exception\\OAuthServerException;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Throwable;\n\n/**\n * Class Handler\n *\n * @codeCoverageIgnore\n */\nclass Handler extends ExceptionHandler\n{\n    /**\n     * @var array\n     */\n    protected $dontReport\n        = [\n            AuthenticationException::class,\n            LaravelValidationException::class,\n            NotFoundHttpException::class,\n            OAuthServerException::class,\n            LaravelOAuthException::class,\n            TokenMismatchException::class,\n            HttpException::class,\n        ];\n\n    /**\n     * Render an exception into an HTTP response.\n     *\n     * @param Request   $request\n     * @param Throwable $e\n     *\n     * @return mixed\n     * @throws Throwable\n     */\n    public function render($request, Throwable $e)\n    {\n        if ($e instanceof LaravelValidationException && $request->expectsJson()) {\n            // ignore it: controller will handle it.\n            return parent::render($request, $e);\n        }\n        if ($e instanceof NotFoundHttpException && $request->expectsJson()) {\n            // JSON error:\n            return response()->json(['message' => 'Resource not found', 'exception' => 'NotFoundHttpException'], 404);\n        }\n\n        if ($e instanceof AuthenticationException && $request->expectsJson()) {\n            // somehow Laravel handler does not catch this:\n            return response()->json(['message' => 'Unauthenticated', 'exception' => 'AuthenticationException'], 401);\n        }\n\n        if ($e instanceof OAuthServerException && $request->expectsJson()) {\n            // somehow Laravel handler does not catch this:\n            return response()->json(['message' => $e->getMessage(), 'exception' => 'OAuthServerException'], 401);\n        }\n\n        if ($request->expectsJson()) {\n            $isDebug = config('app.debug', false);\n            if ($isDebug) {\n                return response()->json(\n                    [\n                        'message'   => $e->getMessage(),\n                        'exception' => get_class($e),\n                        'line'      => $e->getLine(),\n                        'file'      => $e->getFile(),\n                        'trace'     => $e->getTrace(),\n                    ],\n                    500\n                );\n            }\n\n            return response()->json(\n                ['message' => sprintf('Internal Firefly III Exception: %s', $e->getMessage()), 'exception' => get_class($e)], 500\n            );\n        }\n\n        if ($e instanceof NotFoundHttpException) {\n            $handler = app(GracefulNotFoundHandler::class);\n\n            return $handler->render($request, $e);\n        }\n        if ($e instanceof FireflyException || $e instanceof ErrorException || $e instanceof OAuthServerException) {\n            $isDebug = config('app.debug');\n\n            return response()->view('errors.FireflyException', ['exception' => $e, 'debug' => $isDebug], 500);\n        }\n\n        return parent::render($request, $e);\n    }\n\n    /**\n     * Report or log an exception.\n     *\n     * @param Throwable $e\n     *\n     * @return void\n     * @throws Throwable\n     *\n     */\n    public function report(Throwable $e)\n    {\n        $doMailError = config('firefly.send_error_message');\n        if ($this->shouldntReportLocal($e) || !$doMailError) {\n            parent::report($e);\n\n            return;\n        }\n        $userData = [\n            'id'    => 0,\n            'email' => 'unknown@example.com',\n        ];\n        if (auth()->check()) {\n            $userData['id']    = auth()->user()->id;\n            $userData['email'] = auth()->user()->email;\n        }\n        $data = [\n            'class'        => get_class($e),\n            'errorMessage' => $e->getMessage(),\n            'time'         => date('r'),\n            'stackTrace'   => $e->getTraceAsString(),\n            'file'         => $e->getFile(),\n            'line'         => $e->getLine(),\n            'code'         => $e->getCode(),\n            'version'      => config('firefly.version'),\n            'url'          => request()->fullUrl(),\n            'userAgent'    => request()->userAgent(),\n            'json'         => request()->acceptsJson(),\n        ];\n\n        // create job that will mail.\n        $ipAddress = request()->ip() ?? '0.0.0.0';\n        $job       = new MailError($userData, (string)config('firefly.site_owner'), $ipAddress, $data);\n        dispatch($job);\n\n        parent::report($e);\n    }\n\n    /**\n     * @param Throwable $e\n     *\n     * @return bool\n     */\n    private function shouldntReportLocal(Throwable $e): bool\n    {\n        return !is_null(\n            Arr::first(\n                $this->dontReport, function ($type) use ($e) {\n                return $e instanceof $type;\n            }\n            )\n        );\n    }\n}\n", "<?php\n/**\n * StartFireflySession.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Middleware;\n\nuse Illuminate\\Contracts\\Session\\Session;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Session\\Middleware\\StartSession;\nuse Log;\n\n/**\n * Class StartFireflySession.\n *\n * @codeCoverageIgnore\n */\nclass StartFireflySession extends StartSession\n{\n    /**\n     * Store the current URL for the request if necessary.\n     *\n     * @param Request $request\n     * @param Session $session\n     */\n    protected function storeCurrentUrl(Request $request, $session): void\n    {\n        $url          = $request->fullUrl();\n        $forbiddenWords = strpos($url, 'offline') || strpos($url, 'jscript') || strpos($url, 'delete') || strpos($url, '/login') || strpos($url, '/json') || strpos($url, 'serviceworker') || strpos($url, '/attachments/view');\n\n        // also stop remembering \"delete\" URL's.\n        if (false === $forbiddenWords\n            && 'GET' === $request->method()\n            && !$request->ajax()) {\n            //Log::debug(sprintf('Redirect is now \"%s\".', $url));\n            $session->setPreviousUrl($url);\n            return;\n        }\n        //Log::debug(sprintf('Refuse to set \"%s\" as current URL.', $url));\n    }\n}\n", "<?php\n/**\n * UserNavigation.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Support\\Http\\Controllers;\n\nuse FireflyIII\\Models\\Account;\nuse FireflyIII\\Models\\AccountType;\nuse FireflyIII\\Models\\Transaction;\nuse FireflyIII\\Models\\TransactionGroup;\nuse FireflyIII\\Models\\TransactionJournal;\nuse FireflyIII\\Models\\TransactionType;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\ViewErrorBag;\nuse Log;\n\n/**\n * Trait UserNavigation\n *\n */\ntrait UserNavigation\n{\n\n    /**\n     * Functionality:.\n     *\n     * - If the $identifier contains the word \"delete\" then a remembered uri with the text \"/show/\" in it will not be returned but instead the index (/)\n     *   will be returned.\n     * - If the remembered uri contains \"jscript/\" the remembered uri will not be returned but instead the index (/) will be returned.\n     *\n     * @param string $identifier\n     *\n     * @return string\n     */\n    final protected function getPreviousUri(string $identifier): string\n    {\n        Log::debug(sprintf('Trying to retrieve URL stored under \"%s\"', $identifier));\n        $uri = (string)session($identifier);\n        Log::debug(sprintf('The URI is %s', $uri));\n\n        if (str_contains($uri, 'jscript')) {\n            $uri = $this->redirectUri;\n            Log::debug(sprintf('URI is now %s (uri contains jscript)', $uri));\n        }\n\n        Log::debug(sprintf('Return direct link %s', $uri));\n\n        return $uri;\n    }\n\n    /**\n     * Will return false if you cant edit this account type.\n     *\n     * @param Account $account\n     *\n     * @return bool\n     */\n    final protected function isEditableAccount(Account $account): bool\n    {\n        $editable = [AccountType::EXPENSE, AccountType::REVENUE, AccountType::ASSET, AccountType::LOAN, AccountType::DEBT, AccountType::MORTGAGE];\n        $type     = $account->accountType->type;\n\n        return in_array($type, $editable, true);\n    }\n\n    /**\n     * @param TransactionGroup $group\n     *\n     * @return bool\n     */\n    final protected function isEditableGroup(TransactionGroup $group): bool\n    {\n        /** @var TransactionJournal|null $journal */\n        $journal = $group->transactionJournals()->first();\n        if (null === $journal) {\n            return false;\n        }\n        $type     = $journal->transactionType->type;\n        $editable = [TransactionType::WITHDRAWAL, TransactionType::TRANSFER, TransactionType::DEPOSIT, TransactionType::RECONCILIATION];\n\n        return in_array($type, $editable, true);\n    }\n\n    /**\n     * @param Account $account\n     *\n     * @return RedirectResponse|Redirector\n     */\n    final protected function redirectAccountToAccount(Account $account)\n    {\n        $type = $account->accountType->type;\n        if (AccountType::RECONCILIATION === $type || AccountType::INITIAL_BALANCE === $type || AccountType::LIABILITY_CREDIT === $type) {\n            // reconciliation must be stored somewhere in this account's transactions.\n\n            /** @var Transaction|null $transaction */\n            $transaction = $account->transactions()->first();\n            if (null === $transaction) {\n                Log::error(sprintf('Account #%d has no transactions. Dont know where it belongs.', $account->id));\n                session()->flash('error', trans('firefly.cant_find_redirect_account'));\n\n                return redirect(route('index'));\n            }\n            $journal = $transaction->transactionJournal;\n            /** @var Transaction|null $other */\n            $other = $journal->transactions()->where('id', '!=', $transaction->id)->first();\n            if (null === $other) {\n                Log::error(sprintf('Account #%d has no valid journals. Dont know where it belongs.', $account->id));\n                session()->flash('error', trans('firefly.cant_find_redirect_account'));\n\n                return redirect(route('index'));\n            }\n\n            return redirect(route('accounts.show', [$other->account_id]));\n        }\n\n        return redirect(route('index'));\n    }\n\n    /**\n     * @param TransactionGroup $group\n     *\n     * @return RedirectResponse|Redirector\n     */\n    final protected function redirectGroupToAccount(TransactionGroup $group)\n    {\n        /** @var TransactionJournal|null $journal */\n        $journal = $group->transactionJournals()->first();\n        if (null === $journal) {\n            Log::error(sprintf('No journals in group #%d', $group->id));\n\n            return redirect(route('index'));\n        }\n        // prefer redirect to everything but expense and revenue:\n        $transactions = $journal->transactions;\n        $ignore       = [AccountType::REVENUE, AccountType::EXPENSE, AccountType::RECONCILIATION, AccountType::INITIAL_BALANCE];\n        /** @var Transaction $transaction */\n        foreach ($transactions as $transaction) {\n            $type = $transaction->account->accountType->type;\n            if (!in_array($type, $ignore, true)) {\n                return redirect(route('accounts.edit', [$transaction->account_id]));\n            }\n        }\n\n        return redirect(route('index'));\n    }\n\n    /**\n     * @param string $identifier\n     *\n     * @return string|null\n     */\n    final protected function rememberPreviousUri(string $identifier): ?string\n    {\n        $return = app('url')->previous();\n        /** @var ViewErrorBag|null $errors */\n        $errors    = session()->get('errors');\n        $forbidden = ['json', 'debug'];\n\n        // get default host:\n        $default = parse_url(route('index'), PHP_URL_HOST);\n\n        // get host of previous URL:\n        $previous = parse_url($return, PHP_URL_HOST);\n\n        if ($default === $previous && (null === $errors || (0 === $errors->count())) && !Str::contains($return, $forbidden)) {\n            Log::debug(sprintf('Saving URL %s under key %s', $return, $identifier));\n            session()->put($identifier, $return);\n\n            return $return;\n        }\n\n        // if no match, save default URL:\n        Log::info(sprintf('Refuse to set \"%s\" as redirect, set default route instead.', $return));\n        session()->put($identifier, route('index'));\n\n        return $return;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Handler.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/** @noinspection MultipleReturnStatementsInspection */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Exceptions;\n\nuse ErrorException;\nuse FireflyIII\\Jobs\\MailError;\nuse Illuminate\\Auth\\AuthenticationException;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\Session\\TokenMismatchException;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Validation\\ValidationException as LaravelValidationException;\nuse Laravel\\Passport\\Exceptions\\OAuthServerException as LaravelOAuthException;\nuse League\\OAuth2\\Server\\Exception\\OAuthServerException;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Throwable;\n\n/**\n * Class Handler\n *\n * @codeCoverageIgnore\n */\nclass Handler extends ExceptionHandler\n{\n    /**\n     * @var array\n     */\n    protected $dontReport\n        = [\n            AuthenticationException::class,\n            LaravelValidationException::class,\n            NotFoundHttpException::class,\n            OAuthServerException::class,\n            LaravelOAuthException::class,\n            TokenMismatchException::class,\n            HttpException::class,\n        ];\n\n    /**\n     * Render an exception into an HTTP response.\n     *\n     * @param Request   $request\n     * @param Throwable $e\n     *\n     * @return mixed\n     * @throws Throwable\n     */\n    public function render($request, Throwable $e)\n    {\n        if ($e instanceof LaravelValidationException && $request->expectsJson()) {\n            // ignore it: controller will handle it.\n            return parent::render($request, $e);\n        }\n        if ($e instanceof NotFoundHttpException && $request->expectsJson()) {\n            // JSON error:\n            return response()->json(['message' => 'Resource not found', 'exception' => 'NotFoundHttpException'], 404);\n        }\n\n        if ($e instanceof AuthenticationException && $request->expectsJson()) {\n            // somehow Laravel handler does not catch this:\n            return response()->json(['message' => 'Unauthenticated', 'exception' => 'AuthenticationException'], 401);\n        }\n\n        if ($e instanceof OAuthServerException && $request->expectsJson()) {\n            // somehow Laravel handler does not catch this:\n            return response()->json(['message' => $e->getMessage(), 'exception' => 'OAuthServerException'], 401);\n        }\n\n        if ($request->expectsJson()) {\n            $isDebug = config('app.debug', false);\n            if ($isDebug) {\n                return response()->json(\n                    [\n                        'message'   => $e->getMessage(),\n                        'exception' => get_class($e),\n                        'line'      => $e->getLine(),\n                        'file'      => $e->getFile(),\n                        'trace'     => $e->getTrace(),\n                    ],\n                    500\n                );\n            }\n\n            return response()->json(\n                ['message' => sprintf('Internal Firefly III Exception: %s', $e->getMessage()), 'exception' => get_class($e)], 500\n            );\n        }\n\n        if ($e instanceof NotFoundHttpException) {\n            $handler = app(GracefulNotFoundHandler::class);\n\n            return $handler->render($request, $e);\n        }\n        if ($e instanceof FireflyException || $e instanceof ErrorException || $e instanceof OAuthServerException) {\n            $isDebug = config('app.debug');\n\n            return response()->view('errors.FireflyException', ['exception' => $e, 'debug' => $isDebug], 500);\n        }\n\n        return parent::render($request, $e);\n    }\n\n    /**\n     * Report or log an exception.\n     *\n     * @param Throwable $e\n     *\n     * @return void\n     * @throws Throwable\n     *\n     */\n    public function report(Throwable $e)\n    {\n        $doMailError = config('firefly.send_error_message');\n        if ($this->shouldntReportLocal($e) || !$doMailError) {\n            parent::report($e);\n\n            return;\n        }\n        $userData = [\n            'id'    => 0,\n            'email' => 'unknown@example.com',\n        ];\n        if (auth()->check()) {\n            $userData['id']    = auth()->user()->id;\n            $userData['email'] = auth()->user()->email;\n        }\n        $data = [\n            'class'        => get_class($e),\n            'errorMessage' => $e->getMessage(),\n            'time'         => date('r'),\n            'stackTrace'   => $e->getTraceAsString(),\n            'file'         => $e->getFile(),\n            'line'         => $e->getLine(),\n            'code'         => $e->getCode(),\n            'version'      => config('firefly.version'),\n            'url'          => request()->fullUrl(),\n            'userAgent'    => request()->userAgent(),\n            'json'         => request()->acceptsJson(),\n        ];\n\n        // create job that will mail.\n        $ipAddress = request()->ip() ?? '0.0.0.0';\n        $job       = new MailError($userData, (string)config('firefly.site_owner'), $ipAddress, $data);\n        dispatch($job);\n\n        parent::report($e);\n    }\n\n    /**\n     * @param Throwable $e\n     *\n     * @return bool\n     */\n    private function shouldntReportLocal(Throwable $e): bool\n    {\n        return !is_null(\n            Arr::first(\n                $this->dontReport, function ($type) use ($e) {\n                return $e instanceof $type;\n            }\n            )\n        );\n    }\n\n    /**\n     * Convert a validation exception into a response.\n     *\n     * @param Request                    $request\n     * @param LaravelValidationException $exception\n     *\n     * @return Application|RedirectResponse|Redirector\n     */\n    protected function invalid($request, LaravelValidationException $exception): Application|RedirectResponse|Redirector\n    {\n        // protect against open redirect when submitting invalid forms.\n        $previous = $this->getPreviousUrl();\n        $redirect = $this->getRedirectUrl($exception);\n\n        return redirect($redirect ?? $previous)\n            ->withInput(Arr::except($request->input(), $this->dontFlash))\n            ->withErrors($exception->errors(), $request->input('_error_bag', $exception->errorBag));\n    }\n\n    /**\n     * Only return the previousUrl() if it is a valid URL. Return default redirect otherwise.\n     *\n     * @return string\n     */\n    private function getPreviousUrl(): string\n    {\n        $safe         = route('index');\n        $previous     = url()->previous();\n        $previousHost = parse_url($previous, PHP_URL_HOST);\n        $safeHost     = parse_url($safe, PHP_URL_HOST);\n\n        return null !== $previousHost && $previousHost === $safeHost ? $previous : $safe;\n    }\n\n    /**\n     * Only return the redirectTo property from the exception if it is a valid URL. Return NULL otherwise.\n     *\n     * @param LaravelValidationException $exception\n     *\n     * @return string|null\n     */\n    private function getRedirectUrl(LaravelValidationException $exception): ?string\n    {\n        if (null === $exception->redirectTo) {\n            return null;\n        }\n        $safe         = route('index');\n        $previous     = $exception->redirectTo;\n        $previousHost = parse_url($previous, PHP_URL_HOST);\n        $safeHost     = parse_url($safe, PHP_URL_HOST);\n\n        return null !== $previousHost && $previousHost === $safeHost ? $previous : $safe;\n    }\n}\n", "<?php\n/**\n * StartFireflySession.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Middleware;\n\nuse Illuminate\\Contracts\\Session\\Session;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Session\\Middleware\\StartSession;\nuse Log;\n\n/**\n * Class StartFireflySession.\n *\n * @codeCoverageIgnore\n */\nclass StartFireflySession extends StartSession\n{\n    /**\n     * Store the current URL for the request if necessary.\n     *\n     * @param Request $request\n     * @param Session $session\n     */\n    protected function storeCurrentUrl(Request $request, $session): void\n    {\n        $url          = $request->fullUrl();\n        $forbiddenWords = strpos($url, 'offline') || strpos($url, 'jscript') || strpos($url, 'delete') || strpos($url, '/login') || strpos($url, '/json') || strpos($url, 'serviceworker') || strpos($url, '/attachments/view');\n\n        if (false === $forbiddenWords\n            && 'GET' === $request->method()\n            && !$request->ajax()) {\n            //Log::debug(sprintf('Redirect is now \"%s\".', $url));\n            $session->setPreviousUrl($url);\n            return;\n        }\n        //Log::debug(sprintf('Refuse to set \"%s\" as current URL.', $url));\n    }\n}\n", "<?php\n/**\n * UserNavigation.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Support\\Http\\Controllers;\n\nuse FireflyIII\\Models\\Account;\nuse FireflyIII\\Models\\AccountType;\nuse FireflyIII\\Models\\Transaction;\nuse FireflyIII\\Models\\TransactionGroup;\nuse FireflyIII\\Models\\TransactionJournal;\nuse FireflyIII\\Models\\TransactionType;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\ViewErrorBag;\nuse Log;\n\n/**\n * Trait UserNavigation\n *\n */\ntrait UserNavigation\n{\n\n    /**\n     * Functionality:.\n     *\n     * - If the $identifier contains the word \"delete\" then a remembered uri with the text \"/show/\" in it will not be returned but instead the index (/)\n     *   will be returned.\n     * - If the remembered uri contains \"jscript/\" the remembered uri will not be returned but instead the index (/) will be returned.\n     *\n     * @param string $identifier\n     *\n     * @return string\n     */\n    final protected function getPreviousUri(string $identifier): string\n    {\n        Log::debug(sprintf('Trying to retrieve URL stored under \"%s\"', $identifier));\n        $uri = (string)session($identifier);\n        Log::debug(sprintf('The URI is %s', $uri));\n\n        if (str_contains($uri, 'jscript')) {\n            $uri = $this->redirectUri;\n            Log::debug(sprintf('URI is now %s (uri contains jscript)', $uri));\n        }\n\n        Log::debug(sprintf('Return direct link %s', $uri));\n\n        return $uri;\n    }\n\n    /**\n     * Will return false if you cant edit this account type.\n     *\n     * @param Account $account\n     *\n     * @return bool\n     */\n    final protected function isEditableAccount(Account $account): bool\n    {\n        $editable = [AccountType::EXPENSE, AccountType::REVENUE, AccountType::ASSET, AccountType::LOAN, AccountType::DEBT, AccountType::MORTGAGE];\n        $type     = $account->accountType->type;\n\n        return in_array($type, $editable, true);\n    }\n\n    /**\n     * @param TransactionGroup $group\n     *\n     * @return bool\n     */\n    final protected function isEditableGroup(TransactionGroup $group): bool\n    {\n        /** @var TransactionJournal|null $journal */\n        $journal = $group->transactionJournals()->first();\n        if (null === $journal) {\n            return false;\n        }\n        $type     = $journal->transactionType->type;\n        $editable = [TransactionType::WITHDRAWAL, TransactionType::TRANSFER, TransactionType::DEPOSIT, TransactionType::RECONCILIATION];\n\n        return in_array($type, $editable, true);\n    }\n\n    /**\n     * @param Account $account\n     *\n     * @return RedirectResponse|Redirector\n     */\n    final protected function redirectAccountToAccount(Account $account)\n    {\n        $type = $account->accountType->type;\n        if (AccountType::RECONCILIATION === $type || AccountType::INITIAL_BALANCE === $type || AccountType::LIABILITY_CREDIT === $type) {\n            // reconciliation must be stored somewhere in this account's transactions.\n\n            /** @var Transaction|null $transaction */\n            $transaction = $account->transactions()->first();\n            if (null === $transaction) {\n                Log::error(sprintf('Account #%d has no transactions. Dont know where it belongs.', $account->id));\n                session()->flash('error', trans('firefly.cant_find_redirect_account'));\n\n                return redirect(route('index'));\n            }\n            $journal = $transaction->transactionJournal;\n            /** @var Transaction|null $other */\n            $other = $journal->transactions()->where('id', '!=', $transaction->id)->first();\n            if (null === $other) {\n                Log::error(sprintf('Account #%d has no valid journals. Dont know where it belongs.', $account->id));\n                session()->flash('error', trans('firefly.cant_find_redirect_account'));\n\n                return redirect(route('index'));\n            }\n\n            return redirect(route('accounts.show', [$other->account_id]));\n        }\n\n        return redirect(route('index'));\n    }\n\n    /**\n     * @param TransactionGroup $group\n     *\n     * @return RedirectResponse|Redirector\n     */\n    final protected function redirectGroupToAccount(TransactionGroup $group)\n    {\n        /** @var TransactionJournal|null $journal */\n        $journal = $group->transactionJournals()->first();\n        if (null === $journal) {\n            Log::error(sprintf('No journals in group #%d', $group->id));\n\n            return redirect(route('index'));\n        }\n        // prefer redirect to everything but expense and revenue:\n        $transactions = $journal->transactions;\n        $ignore       = [AccountType::REVENUE, AccountType::EXPENSE, AccountType::RECONCILIATION, AccountType::INITIAL_BALANCE];\n        /** @var Transaction $transaction */\n        foreach ($transactions as $transaction) {\n            $type = $transaction->account->accountType->type;\n            if (!in_array($type, $ignore, true)) {\n                return redirect(route('accounts.edit', [$transaction->account_id]));\n            }\n        }\n\n        return redirect(route('index'));\n    }\n\n    /**\n     * @param string $identifier\n     *\n     * @return string|null\n     */\n    final protected function rememberPreviousUri(string $identifier): ?string\n    {\n        $return = app('url')->previous();\n        /** @var ViewErrorBag|null $errors */\n        $errors    = session()->get('errors');\n        $forbidden = ['json', 'debug'];\n\n        // get default host:\n        $default = parse_url(route('index'), PHP_URL_HOST);\n\n        // get host of previous URL:\n        $previous = parse_url($return, PHP_URL_HOST);\n\n        if (null !== $previous && $default === $previous && (null === $errors || (0 === $errors->count())) && !Str::contains($return, $forbidden)) {\n            Log::debug(sprintf('Saving URL %s under key %s', $return, $identifier));\n            session()->put($identifier, $return);\n\n            return $return;\n        }\n\n        // if no match, save default URL:\n        Log::info(sprintf('Refuse to set \"%s\" as redirect, set default route instead.', $return));\n        session()->put($identifier, route('index'));\n\n        return $return;\n    }\n}\n"], "filenames": ["app/Exceptions/Handler.php", "app/Http/Middleware/StartFireflySession.php", "app/Support/Http/Controllers/UserNavigation.php"], "buggy_code_start_loc": [31, 48, 186], "buggy_code_end_loc": [189, 49, 187], "fixing_code_start_loc": [32, 47, 186], "fixing_code_end_loc": [247, 47, 187], "type": "CWE-601", "message": "firefly-iii is vulnerable to URL Redirection to Untrusted Site", "other": {"cve": {"id": "CVE-2021-3851", "sourceIdentifier": "security@huntr.dev", "published": "2021-10-19T13:15:11.620", "lastModified": "2021-10-21T23:59:45.157", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "firefly-iii is vulnerable to URL Redirection to Untrusted Site"}, {"lang": "es", "value": "firefly-iii es vulnerable a una Redirecci\u00f3n de URLs a Sitios no Confiables"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.2", "matchCriteriaId": "AB91CA1A-2671-4BDE-888A-D1C6B87067EA"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/8662dfa4c0f71efef61c31dc015c6f723db8318d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/549a1040-9b5e-420b-9b80-20700dd9d592", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/8662dfa4c0f71efef61c31dc015c6f723db8318d"}}