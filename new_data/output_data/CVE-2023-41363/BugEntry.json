{"buggy_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Http\\Exception\\UnauthorizedException;\n\n\nclass UserSettingsController extends AppController\n{\n    public $quickFilterFields = [['name' => true], ['value' => true]];\n    public $filterFields = ['name', 'value', 'Users.id'];\n    public $containFields = ['Users'];\n\n    public function index()\n    {\n        $conditions = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['user_id'] = $currentUser->id;\n        }\n        $this->CRUD->index([\n            'conditions' => $conditions,\n            'contain' => $this->containFields,\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        if (!empty($this->request->getQuery('Users_id'))) {\n            $conditions = [\n                'id' => $this->request->getQuery('Users_id')\n            ];\n            if (empty($currentUser['role']['perm_admin'])) {\n                $conditions['organisation_id'] = $currentUser['organisation_id'];\n            }\n            $settingsForUser = $this->UserSettings->Users->find()->where($conditions)->first();\n            if (empty($settingsForUser)) {\n                throw new NotFoundException(__('Invalid {0}.', __('user')));\n            }\n            $this->set('settingsForUser', $settingsForUser);\n        }\n    }\n\n    public function view($id)\n    {\n        if (!$this->isLoggedUserAllowedToEdit($id)) {\n            throw new NotFoundException(__('Invalid {0}.', 'user setting'));\n        }\n        $this->CRUD->view($id, [\n            'contain' => ['Users']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n    }\n\n    public function add($user_id=null)\n    {\n        $currentUser = $this->ACL->getUser();\n        $this->CRUD->add([\n            'redirect' => ['action' => 'index', $user_id],\n            'beforeSave' => function ($data) use ($currentUser) {\n                if (empty($currentUser['role']['perm_admin'])) {\n                    $data['user_id'] = $currentUser->id;\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $allUsers = $this->UserSettings->Users->find('list', ['keyField' => 'id', 'valueField' => 'username'])->order(['username' => 'ASC']);\n        if (empty($currentUser['role']['perm_admin'])) {\n            $allUsers->where(['id' => $currentUser->id]);\n            $user_id = $currentUser->id;\n        } else if (!is_null($user_id)) {\n            $allUsers->where(['id' => $user_id]);\n        }\n        $dropdownData = [\n            'user' => $allUsers->all()->toArray(),\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('user_id', $user_id);\n    }\n\n    public function edit($id)\n    {\n        $entity = $this->UserSettings->find()->where([\n            'id' => $id\n        ])->first();\n\n        if (!$this->isLoggedUserAllowedToEdit($entity)) {\n            throw new NotFoundException(__('Invalid {0}.', 'user setting'));\n        }\n\n        $entity = $this->CRUD->edit($id, [\n            'redirect' => ['action' => 'index', $entity->user_id]\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $dropdownData = [\n            'user' => $this->UserSettings->Users->find('list', [\n                'sort' => ['username' => 'asc']\n            ]),\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('user_id', $this->entity->user_id);\n        $this->render('add');\n    }\n\n    public function delete($id)\n    {\n        if (!$this->isLoggedUserAllowedToEdit($id)) {\n            throw new NotFoundException(__('Invalid {0}.', 'user setting'));\n        }\n        $this->CRUD->delete($id);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n    }\n\n    /**\n     * Get a setting by name for the currently logged-in user\n     *\n     * @param [type] $settingsName\n     * @return void\n     */\n    public function getMySettingByName($settingsName)\n    {\n        $setting = $this->UserSettings->getSettingByName($this->ACL->getUser(), $settingsName);\n        if (is_null($setting)) {\n            throw new NotFoundException(__('Invalid {0} for user {1}.', __('User setting'), $this->ACL->getUser()->username));\n        }\n        $this->CRUD->view($setting->id, [\n            'contain' => ['Users']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->render('view');\n    }\n\n    public function setMySetting($settingsName = false)\n    {\n        if (!$this->request->is('get')) {\n            $setting = $this->UserSettings->getSettingByName($this->ACL->getUser(), $settingsName);\n            if (is_null($setting)) { // setting not found, create it\n                $result = $this->UserSettings->createSetting($this->ACL->getUser(), $settingsName, $this->request->getData()['value']);\n            } else {\n                $result = $this->UserSettings->editSetting($this->ACL->getUser(), $settingsName, $this->request->getData()['value']);\n            }\n            $success = !empty($result);\n            $message = $success ? __('Setting saved') : __('Could not save setting');\n            $this->CRUD->setResponseForController('setSetting', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('settingName', $settingsName);\n    }\n\n    public function saveSetting($user_id = false)\n    {\n        $user = $this->getRequestedUserIfAllowed($user_id);\n        if ($this->request->is('post')) {\n            $data = $this->ParamHandler->harvestParams([\n                'name',\n                'value'\n            ]);\n            $setting = $this->UserSettings->getSettingByName($user, $data['name']);\n            if (is_null($setting)) { // setting not found, create it\n                $result = $this->UserSettings->createSetting($user, $data['name'], $data['value']);\n            } else {\n                $result = $this->UserSettings->editSetting($user, $data['name'], $data['value']);\n            }\n            $success = !empty($result);\n            $message = $success ? __('Setting saved') : __('Could not save setting');\n            $this->CRUD->setResponseForController('saveSetting', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n    }\n\n    public function getMyBookmarks($forSidebar = false)\n    {\n        $bookmarks = $this->UserSettings->getSettingByName($this->ACL->getUser(), $this->UserSettings->BOOKMARK_SETTING_NAME);\n        $bookmarks = json_decode($bookmarks['value'], true);\n        $this->set('user_id', $this->ACL->getUser()->id);\n        $this->set('bookmarks', $bookmarks);\n        $this->set('forSidebar', $forSidebar);\n        $this->render('/element/UserSettings/saved-bookmarks');\n    }\n\n    public function saveMyBookmark()\n    {\n        if (!$this->request->is('get')) {\n            $result = $this->UserSettings->saveBookmark($this->ACL->getUser(), $this->request->getData());\n            $success = !empty($result);\n            $message = $success ? __('Bookmark saved') : __('Could not save bookmark');\n            $this->CRUD->setResponseForController('saveBookmark', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('user_id', $this->ACL->getUser()->id);\n    }\n\n    public function deleteMyBookmark()\n    {\n        if (!$this->request->is('get')) {\n            $result = $this->UserSettings->deleteBookmark($this->ACL->getUser(), $this->request->getData());\n            $success = !empty($result);\n            $message = $success ? __('Bookmark deleted') : __('Could not delete bookmark');\n            $this->CRUD->setResponseForController('deleteBookmark', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('user_id', $this->ACL->getUser()->id);\n    }\n\n    /**\n     * isLoggedUserAllowedToEdit\n     *\n     * @param int|\\App\\Model\\Entity\\UserSetting $setting\n     * @return boolean\n     */\n    private function isLoggedUserAllowedToEdit($setting): bool\n    {\n        $currentUser = $this->ACL->getUser();\n        $isAllowed = false;\n        if (!empty($currentUser['role']['perm_admin'])) {\n            $isAllowed = true;\n        } else {\n            if (is_numeric($setting)) {\n                $setting = $this->UserSettings->find()->where([\n                    'id' => $setting\n                ])->first();\n                if (empty($setting)) {\n                    return false;\n                }\n            }\n            $isAllowed = $setting->user_id == $currentUser->id;\n        }\n        return $isAllowed;\n    }\n\n    /**\n     * Return the requested user if user permissions allow it. Otherwise, return the user currently logged-in\n     *\n     * @param bool|int $user_id\n     * @return void\n     */\n    private function getRequestedUserIfAllowed($user_id = false)\n    {\n        $currentUser = $this->ACL->getUser();\n        if (is_bool($user_id)) {\n            return $currentUser;\n        }\n        if (!empty($currentUser['role']['perm_admin'])) {\n            $user = $this->Users->get($user_id, [\n                'contain' => ['Roles', 'Individuals' => 'Organisations']\n            ]);\n        } else {\n            $user = $currentUser;\n        }\n        return $user;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Http\\Exception\\UnauthorizedException;\n\n\nclass UserSettingsController extends AppController\n{\n    public $quickFilterFields = [['name' => true], ['value' => true]];\n    public $filterFields = ['name', 'value', 'Users.id'];\n    public $containFields = ['Users'];\n\n    public function index()\n    {\n        $conditions = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['user_id'] = $currentUser->id;\n        }\n        $this->CRUD->index([\n            'conditions' => $conditions,\n            'contain' => $this->containFields,\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        if (!empty($this->request->getQuery('Users_id'))) {\n            $conditions = [\n                'id' => $this->request->getQuery('Users_id')\n            ];\n            if (empty($currentUser['role']['perm_admin'])) {\n                $conditions['organisation_id'] = $currentUser['organisation_id'];\n            }\n            $settingsForUser = $this->UserSettings->Users->find()->where($conditions)->first();\n            if (empty($settingsForUser)) {\n                throw new NotFoundException(__('Invalid {0}.', __('user')));\n            }\n            $this->set('settingsForUser', $settingsForUser);\n        }\n    }\n\n    public function view($id)\n    {\n        if (!$this->isLoggedUserAllowedToEdit($id)) {\n            throw new NotFoundException(__('Invalid {0}.', 'user setting'));\n        }\n        $this->CRUD->view($id, [\n            'contain' => ['Users']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n    }\n\n    public function add($user_id=null)\n    {\n        $currentUser = $this->ACL->getUser();\n        $this->CRUD->add([\n            'redirect' => ['action' => 'index', $user_id],\n            'beforeSave' => function ($data) use ($currentUser) {\n                if (empty($currentUser['role']['perm_admin'])) {\n                    $data['user_id'] = $currentUser->id;\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $allUsers = $this->UserSettings->Users->find('list', ['keyField' => 'id', 'valueField' => 'username'])->order(['username' => 'ASC']);\n        if (empty($currentUser['role']['perm_admin'])) {\n            $allUsers->where(['id' => $currentUser->id]);\n            $user_id = $currentUser->id;\n        } else if (!is_null($user_id)) {\n            $allUsers->where(['id' => $user_id]);\n        }\n        $dropdownData = [\n            'user' => $allUsers->all()->toArray(),\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('user_id', $user_id);\n    }\n\n    public function edit($id)\n    {\n        $entity = $this->UserSettings->find()->where([\n            'id' => $id\n        ])->first();\n\n        $currentUser = $this->ACL->getUser();\n        $validUsers = [];\n        $individual_ids = [];\n        if (!$currentUser['role']['perm_admin']) {\n            if ($currentUser['role']['perm_org_admin']) {\n                $validUsers = $this->Users->find('list')->select(['id', 'username'])->order(['username' => 'asc'])->where(['organisation_id' => $currentUser['organisation']['id']])->all()->toArray();\n            } else {\n                $validUsers = [$currentUser['id'] => $currentUser['username']];\n            }\n        } else {\n            $validUsers = $this->Users->find('list')->select(['id', 'username'])->order(['username' => 'asc'])->all()->toArray();\n        }\n\n        $entity = $this->CRUD->edit($id, [\n            'redirect' => ['action' => 'index', $entity->user_id],\n            'beforeSave' => function ($data) use ($validUsers) {\n                if (!in_array($data['user_id'], array_keys($validUsers))) {\n                    throw new MethodNotAllowedException(__('You cannot edit the given user.'));\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $dropdownData = [\n            'user' => $validUsers,\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('user_id', $this->entity->user_id);\n        $this->render('add');\n    }\n\n    public function delete($id)\n    {\n        if (!$this->isLoggedUserAllowedToEdit($id)) {\n            throw new NotFoundException(__('Invalid {0}.', 'user setting'));\n        }\n        $this->CRUD->delete($id);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n    }\n\n    /**\n     * Get a setting by name for the currently logged-in user\n     *\n     * @param [type] $settingsName\n     * @return void\n     */\n    public function getMySettingByName($settingsName)\n    {\n        $setting = $this->UserSettings->getSettingByName($this->ACL->getUser(), $settingsName);\n        if (is_null($setting)) {\n            throw new NotFoundException(__('Invalid {0} for user {1}.', __('User setting'), $this->ACL->getUser()->username));\n        }\n        $this->CRUD->view($setting->id, [\n            'contain' => ['Users']\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->render('view');\n    }\n\n    public function setMySetting($settingsName = false)\n    {\n        if (!$this->request->is('get')) {\n            $setting = $this->UserSettings->getSettingByName($this->ACL->getUser(), $settingsName);\n            if (is_null($setting)) { // setting not found, create it\n                $result = $this->UserSettings->createSetting($this->ACL->getUser(), $settingsName, $this->request->getData()['value']);\n            } else {\n                $result = $this->UserSettings->editSetting($this->ACL->getUser(), $settingsName, $this->request->getData()['value']);\n            }\n            $success = !empty($result);\n            $message = $success ? __('Setting saved') : __('Could not save setting');\n            $this->CRUD->setResponseForController('setSetting', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('settingName', $settingsName);\n    }\n\n    public function saveSetting($user_id = false)\n    {\n        $user = $this->getRequestedUserIfAllowed($user_id);\n        if ($this->request->is('post')) {\n            $data = $this->ParamHandler->harvestParams([\n                'name',\n                'value'\n            ]);\n            $setting = $this->UserSettings->getSettingByName($user, $data['name']);\n            if (is_null($setting)) { // setting not found, create it\n                $result = $this->UserSettings->createSetting($user, $data['name'], $data['value']);\n            } else {\n                $result = $this->UserSettings->editSetting($user, $data['name'], $data['value']);\n            }\n            $success = !empty($result);\n            $message = $success ? __('Setting saved') : __('Could not save setting');\n            $this->CRUD->setResponseForController('saveSetting', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n    }\n\n    public function getMyBookmarks($forSidebar = false)\n    {\n        $bookmarks = $this->UserSettings->getSettingByName($this->ACL->getUser(), $this->UserSettings->BOOKMARK_SETTING_NAME);\n        $bookmarks = json_decode($bookmarks['value'], true);\n        $this->set('user_id', $this->ACL->getUser()->id);\n        $this->set('bookmarks', $bookmarks);\n        $this->set('forSidebar', $forSidebar);\n        $this->render('/element/UserSettings/saved-bookmarks');\n    }\n\n    public function saveMyBookmark()\n    {\n        if (!$this->request->is('get')) {\n            $result = $this->UserSettings->saveBookmark($this->ACL->getUser(), $this->request->getData());\n            $success = !empty($result);\n            $message = $success ? __('Bookmark saved') : __('Could not save bookmark');\n            $this->CRUD->setResponseForController('saveBookmark', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('user_id', $this->ACL->getUser()->id);\n    }\n\n    public function deleteMyBookmark()\n    {\n        if (!$this->request->is('get')) {\n            $result = $this->UserSettings->deleteBookmark($this->ACL->getUser(), $this->request->getData());\n            $success = !empty($result);\n            $message = $success ? __('Bookmark deleted') : __('Could not delete bookmark');\n            $this->CRUD->setResponseForController('deleteBookmark', $success, $message, $result);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n        $this->set('user_id', $this->ACL->getUser()->id);\n    }\n\n    /**\n     * isLoggedUserAllowedToEdit\n     *\n     * @param int|\\App\\Model\\Entity\\UserSetting $setting\n     * @return boolean\n     */\n    private function isLoggedUserAllowedToEdit($setting): bool\n    {\n        $currentUser = $this->ACL->getUser();\n        $isAllowed = false;\n        if (!empty($currentUser['role']['perm_admin'])) {\n            $isAllowed = true;\n        } else {\n            if (is_numeric($setting)) {\n                $setting = $this->UserSettings->find()->where([\n                    'id' => $setting\n                ])->first();\n                if (empty($setting)) {\n                    return false;\n                }\n            } else {\n                $isAllowed = $setting->user_id == $currentUser->id;\n            }\n        }\n        return $isAllowed;\n    }\n\n    /**\n     * Return the requested user if user permissions allow it. Otherwise, return the user currently logged-in\n     *\n     * @param bool|int $user_id\n     * @return void\n     */\n    private function getRequestedUserIfAllowed($user_id = false)\n    {\n        $currentUser = $this->ACL->getUser();\n        if (is_bool($user_id)) {\n            return $currentUser;\n        }\n        if (!empty($currentUser['role']['perm_admin'])) {\n            $user = $this->Users->get($user_id, [\n                'contain' => ['Roles', 'Individuals' => 'Organisations']\n            ]);\n        } else {\n            $user = $currentUser;\n        }\n        return $user;\n    }\n}\n"], "filenames": ["src/Controller/UserSettingsController.php"], "buggy_code_start_loc": [103], "buggy_code_end_loc": [264], "fixing_code_start_loc": [103], "fixing_code_end_loc": [278], "type": "NVD-CWE-noinfo", "message": "In Cerebrate 1.14, a vulnerability in UserSettingsController allows authenticated users to change user settings of other users.", "other": {"cve": {"id": "CVE-2023-41363", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-29T05:15:43.723", "lastModified": "2023-08-31T19:07:05.343", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Cerebrate 1.14, a vulnerability in UserSettingsController allows authenticated users to change user settings of other users."}, {"lang": "es", "value": "En Cerebrate v1.14, una vulnerabilidad en \"UserSettingsController\" permite a los usuarios autenticados cambiar la configuraci\u00f3n de usuario de otros usuarios. "}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:1.14:*:*:*:*:*:*:*", "matchCriteriaId": "E86FB565-5C5E-4877-970B-184B0012D3A1"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/8e616180ba0d6a1fcb8326dbe39307960ee1946c", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/8e616180ba0d6a1fcb8326dbe39307960ee1946c"}}