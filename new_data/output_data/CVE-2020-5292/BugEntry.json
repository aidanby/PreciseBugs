{"buggy_code": ["<?php\n\n/**\n * Database Class - Very simple abstraction layer for pdo connection\n *\n */\n\nnamespace leantime\\core;\n\nuse \\PDO;\n\nclass db\n{\n\n    /**\n     * @access private\n     * @var    string database host default: localhost\n     */\n    private $host='';\n\n    /**\n     * @access private\n     * @var    string username for db\n     */\n    private $user='';\n\n    /**\n     * @access private\n     * @var    string password for db\n     */\n    private $password='';\n\n\n    private $databaseName='';\n\n\n    public $database='';\n    /**\n     * @access private\n     * @var    pdo object\n     */\n    private static $instance='';\n\n    /**\n     * @access private\n     * @var    string sql query-String\n     */\n    private $sql='';\n\n    /**\n     * @access private\n     * @var    connection database connection\n     */\n    private $connection='';\n\n    /**\n     * @access public\n     * @var    object query Result\n     */\n    public $result = '';\n\n    /**\n     * @access public\n     * @var    integer number of rows (CAUTION: Limited numrows with SQL LIMIT)\n     */\n    public $counter = null;\n\n    /**\n     * __construct - connect to database and select db\n     *\n     * @return object\n     */\n    private function __construct()\n    {\n\n            //Get configuration-object for connection-details\n            $config = new config();\n\n            $this->user = $config->dbUser;\n            $this->password = $config->dbPassword;\n            $this->databaseName = $config->dbDatabase;\n            $this->host= $config->dbHost;\n\n        try{\n\n            $driver_options = array( PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8mb4,sql_mode=\"NO_ENGINE_SUBSTITUTION\"' );\n            $this->database = new PDO('mysql:host=' . $this->host . ';dbname='. $this->databaseName .'', $this->user, $this->password, $driver_options);\n            $this->database->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        }catch(\\PDOException $e){\n\n            echo \"No database connection, check your database credentials in your configuration file.\";\n\n            exit();\n\n        }\n\n    }\n\n    public static function getInstance()\n    {\n\n        if (!(self::$instance instanceof self)) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n\n    }\n\n\n    /**\n     * Count - True counter of results\n     *\n     * @access public\n     * @return integer (\n     */\n    \n    public function count()\n    {\n\n        if($this->counter===null ) {\n            \n            $this->counter=$this->result->fetchColumn();;\n\n        }\n\n        return $this->counter;\n    }\n    \n    \n    /**\n     * dbFetchRow - get one Dataset row and masks html\n     *\n     * @access public\n     * @return array Dataset\n     */\n    public function dbFetchRow()\n    {\n                    \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n            $row = array_map('htmlspecialchars', $row);\n            return $row;\n                    \n        }\n\n\n    }\n\n    /**\n     * dbFetchResults - Fetch all results and return array and masks html\n     *\n     * @access public\n     * @return array\n     */\n    public function dbFetchResults()\n    {\n\n        $i=0;\n                \n        //Get results and build an array (...better to handle in Templates)\n        while($array[$i] = $this->result->fetch(PDO::FETCH_ASSOC)) {\n\n            $array[$i] = array_map('htmlspecialchars', $array[$i]);\n\n            $i++;\n\n        }\n\n        array_pop($array);\n\n        return $array;\n\n    \n\n    }\n\n    /**\n     * dbFetchRowUnmasked - get one Dataset row without masking html\n     *\n     * @access public\n     * @return array Dataset\n     */\n    public function dbFetchRowUnmasked()\n    {\n            \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n\n            return $row;\n                    \n        }\n\n        \n    }\n\n    /**\n     * dbFetchResultsUnmasked - Fetch all results and return array without masking html\n     *\n     * @access public\n     * @return array\n     */\n    public function dbFetchResultsUnmasked()\n    {\n        \n        $i=0;\n                \n        //Get results and build an array (...better to handle in Templates)\n        while($array[$i] = $this->result->fetch(PDO::FETCH_ASSOC)) {\n            $i++;\n\n        }\n\n        array_pop($array);\n\n        return $array;\n\n        \n\n    }\n    \n    \n    \n    public function getErrorMessage($err)\n    {\n        \n        print_r($err);\n                $trace = '<table border=\"0\">';\n        foreach ($err->getTrace() as $a => $b) {\n            foreach ($b as $c => $d) {\n                if ($c == 'args') {\n                    foreach ($d as $e => $f) {\n                        $trace .= '<tr><td><b>' . strval($a) . '#</b></td><td align=\"right\"><u>args:</u></td> <td><u>' . $e . '</u>:</td><td><i>' . $f . '</i></td></tr>';\n                    }\n                } else {\n                    $trace .= '<tr><td><b>' . strval($a) . '#</b></td><td align=\"right\"><u>' . $c . '</u>:</td><td></td><td><i>' . $d . '</i></td>';\n                }\n            }\n        }\n         $trace .= '</table>';\n          echo '<br /><br /><br /><font face=\"Verdana\"><center><fieldset style=\"width: 66%; border: 1px solid white; background: white;\"><legend><b>[</b>PHP PDO Error ' . strval($err->getCode()) . '<b>]</b></legend> <table border=\"0\"><tr><td align=\"right\"><b><u>Message:</u></b></td><td><i>' . $err->getMessage() . '</i></td></tr><tr><td align=\"right\"><b><u>Code:</u></b></td><td><i>' . strval($err->getCode()) . '</i></td></tr><tr><td align=\"right\"><b><u>File:</u></b></td><td><i>' . $err->getFile() . '</i></td></tr><tr><td align=\"right\"><b><u>Line:</u></b></td><td><i>' . strval($err->getLine()) . '</i></td></tr><tr><td align=\"right\"><b><u>Trace:</u></b></td><td><br /><br />' . $trace . '</td></tr></table></fieldset></center></font>';\n    }\n\n    \n    public function hasResults()\n    {\n        \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n                \n            return true;\n            \n        }else{\n            return false;\n        }\n        \n    }\n\n}\n", "<?php\n\nnamespace leantime\\domain\\repositories {\n\n    use leantime\\core;\n    use pdo;\n\n    class tickets\n    {\n\n        /**\n         * @access public\n         * @var    object\n         */\n        public $result = null;\n\n        /**\n         * @access public\n         * @var    object\n         */\n        public $tickets = null;\n\n        /**\n         * @access private\n         * @var    object\n         */\n        private $db='';\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusClasses = array('3' => 'label-info', '1' => 'label-important', '4' => 'label-warning', '2' => 'label-warning', '0' => 'label-success', \"-1\" =>\"label-default\");\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusNumByKey = array('NEW' => 3, 'ERROR' => 1, 'INPROGRESS' => 4, 'APPROVAL' => 2, 'FINISHED' => 0, \"ARCHIVED\" =>-1);\n\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusList = array(\n            '3' => 'status.new', //New\n            '1' => 'status.blocked', //In Progress\n            '4' => 'status.in_progress', //In Progress\n            '2' => 'status.waiting_for_approval', //In Progress\n            '0' => 'status.done', //Done\n            '-1' => 'status.archived' //Done\n        );\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $priority = array('1' => 'Critical', '2' => 'High', '3' => 'Medium', '4' => 'Low');\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $efforts = array('1' => 'XS', '2' => 'S', 3=>\"M\", \"5\"=>\"L\", 8 => \"XL\", 13 => \"XXL\");\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $type = array('task', 'story', 'bug');\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $typeIcons = array('story' => 'fa-book', 'task' => 'fa-check-square', 'bug' => 'fa-bug');\n\n        /**\n         * @access private\n         * @var    integer\n         */\n        private $page = 0;\n\n        /**\n         * @access public\n         * @var    integer\n         */\n        public $rowsPerPage = 10;\n\n        /**\n         * @access private\n         * @var    string\n         */\n        private $limitSelect = \"\";\n\n        /**\n         * @access numPages\n         * @var    unknown_type\n         */\n        public $numPages='';\n\n        /**\n         * @access public\n         * @var    string\n         */\n        public $sortBy = 'date';\n\n        private $language = \"\";\n\n        /**\n         * __construct - get db connection\n         *\n         * @access public\n         * @return unknown_type\n         */\n        public function __construct()\n        {\n\n            $this->db = core\\db::getInstance();\n            $this->language = new core\\language();\n\n        }\n\n        public function getStateLabels()\n        {\n            //Todo: Remove!\n            unset($_SESSION[\"projectsettings\"][\"ticketlabels\"]);\n\n            if(isset($_SESSION[\"projectsettings\"][\"ticketlabels\"])) {\n\n                return $_SESSION[\"projectsettings\"][\"ticketlabels\"];\n\n            }else{\n\n                $sql = \"SELECT\n\t\t\t\t\t\tvalue\n\t\t\t\tFROM zp_settings WHERE `key` = :key\n\t\t\t\tLIMIT 1\";\n\n                $stmn = $this->db->database->prepare($sql);\n                $stmn->bindvalue(':key', \"projectsettings.\".$_SESSION['currentProject'].\".ticketlabels\", PDO::PARAM_STR);\n\n                $stmn->execute();\n                $values = $stmn->fetch();\n                $stmn->closeCursor();\n\n                $labels = array();\n\n                //preseed state labels with default values\n                foreach($this->statusList as $key=>$label) {\n                    $labels[$key] = array(\n                        \"name\" => $this->language->__($label),\n                        \"class\" => $this->statusClasses[$key]\n                    );\n                }\n\n                //Override the state values that are in the db\n                if($values !== false) {\n\n                    foreach(unserialize($values['value']) as $key=>$label) {\n\n                        //Custom key in the database represents the string value. Needs to be translated to numeric status value\n                        if(!is_int($key)) {\n                            $numericKey = $this->statusNumByKey[$key];\n                        }else{\n                            $numericKey = $key;\n                        }\n\n                        $labels[$numericKey] = array(\n                            \"name\" => $label,\n                            \"class\" => $this->statusClasses[$numericKey]\n                        );\n                    }\n\n                }\n\n                $_SESSION[\"projectsettings\"][\"ticketlabels\"] = $labels;\n\n                return $labels;\n\n            }\n        }\n\n        public function getStatusList() {\n            return $this->statusList;\n        }\n        public function getUnreadTickets($userId,$limit = 9999)\n        {\n\n            $read = new read();\n            $unreadTickets = array();\n            $count = 0;\n            $values = $this->getAllBySearch(\"\", \"\", 0);\n\n            foreach ($values as $ticket) {\n                if (!$read->isRead('ticket', $ticket['id'], $userId) && $count < $limit) {\n                    $unreadTickets[] = $ticket;\n                    $count++;\n                }\n            }\n\n            return $unreadTickets;\n        }\n\n        /**\n         * getAll - get all Tickets, depending on userrole\n         *\n         * @access public\n         * @return array\n         */\n        public function getAll($limit = 9999)\n        {\n\n            $id = $_SESSION['userdata']['id'];\n            $users = new users();\n\n            if ($users->isAdmin($id)) {\n                $values = $this->getAdminTickets($limit);\n            } else {\n                $values = $this->getUsersTickets($id, $limit);\n            }\n\n            return $values;\n        }\n\n        public function getUsersTickets($id,$limit)\n        {\n\n            $sql = \"SELECT\n\t\t\t\t\t\tticket.id,\n\t\t\t\t\t\tticket.headline,\n\t\t\t\t\t\tticket.type, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tticket.date,\n\t\t\t\t\t\tticket.dateToFinish,\n\t\t\t\t\t\tticket.projectId,\n\t\t\t\t\t\tticket.priority,\n\t\t\t\t\t\tticket.status,\n\t\t\t\t\t\tproject.name as projectName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\tFROM \n\t\t\t\tzp_tickets AS ticket\n\t\t\t\tLEFT JOIN zp_relationuserproject ON ticket.projectId = zp_relationuserproject.projectId\n\t\t\t\tLEFT JOIN zp_projects as project ON ticket.projectId = project.id  \n\t\t\t\tLEFT JOIN zp_clients as client ON project.clientId = client.id\n\t\t\t\tLEFT JOIN zp_user AS t1 ON ticket.userId = t1.id\n\t\t\t\tLEFT JOIN zp_user AS t2 ON ticket.editorId = t2.id\n\t\t\t\t\t\t\t\t\n\t\t\t\tWHERE zp_relationuserproject.userId = :id AND ticket.type <> 'Milestone' AND ticket.type <> 'Subtask'\n\t\t\t\tGROUP BY ticket.id\n\t\t\t\tORDER BY ticket.id DESC\";\n\n            if($limit > -1) {\n                $sql .= \" LIMIT :limit\";\n            }\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            if($limit > -1) {\n                $stmn->bindValue(':limit', $limit, PDO::PARAM_INT);\n            }\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        public function getAdminTickets($limit)\n        {\n\n            $sql = \"SELECT\n\t\t\t\t\t\tDistinct(ticket.id),\n\t\t\t\t\t\tticket.headline,\n\t\t\t\t\t\tticket.type, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tticket.date,\n\t\t\t\t\t\tticket.dateToFinish,\n\t\t\t\t\t\tticket.projectId,\n\t\t\t\t\t\tticket.priority,\n\t\t\t\t\t\tticket.status,\n\t\t\t\t\t\tproject.name as projectName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\tFROM zp_user as user\n\t\t\t\tINNER JOIN zp_clients as client ON user.clientId = client.id\n\t\t\t\t\tRIGHT JOIN zp_projects as project ON client.id = project.clientId  \n\t\t\t\t\tRIGHT JOIN zp_tickets as ticket ON project.id = ticket.projectId \n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON ticket.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON ticket.editorId = t2.id\n\t\t\t\tORDER BY ticket.id DESC\n\t\t\t\tLIMIT :limit\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindvalue(':limit', $limit, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function buildJSONTimeline($id)\n        {\n\n            $path = $_SERVER['DOCUMENT_ROOT'].\"/userdata/timeline/\";\n            $file = \"timeline-\". $id .\".json\";\n            $sql = \"SELECT \n\t\t\t\t\t\tth.changeType, th.changeValue, th.dateModified, th.userId, \n\t\t\t\t\t\tticket.headline, ticket.description,\n\t\t\t\t\t\tuser.firstname, user.lastname \n\t\t\t\t\tFROM zp_tickethistory as th\n\t\t\t\t\tINNER JOIN zp_user as user ON th.userId = user.id\n\t\t\t\t\tINNER JOIN zp_tickets as ticket ON th.ticketId = ticket.id\n\t\t\t\t\tWHERE ticketId = :ticketId\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            $response = array();\n            $posts = array();\n            foreach ($values as $value) {\n                $description = $value['description'];\n                $posts[] = array(\n                    'headline'     => $value['headline'],\n                    'text'        => $value['description'],\n                    'startDate'    => $value['dateModified'],\n                    'asset' => array('caption' => 'Test', 'media' => '', 'credit' => '')\n                );\n            }\n\n            $response['timeline'] = array('headline' => 'Ticket #'.$id, 'type' => 'default', 'text' => $description, 'date' => $posts);\n\n            $fh = fopen($path.$file, 'w');\n            fwrite($fh, json_encode($response));\n            fclose($fh);\n\n        }\n\n        public function changeStatus($id,$status)\n        {\n\n            $newValues = array();\n            $newValues['status'] = $status;\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $newValues);\n\n\n            $sql = \"UPDATE zp_tickets SET status=:status WHERE id=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':status', $status, PDO::PARAM_STR);\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n        public function updateDates($id,$start,$end)\n        {\n\n\n\n            $sql = \"UPDATE zp_tickets SET editFrom=:start, editTo=:end WHERE id=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':start', $start, PDO::PARAM_STR);\n            $stmn->bindValue(':end', $end, PDO::PARAM_STR);\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n        public function patchTicket($id,$params)\n        {\n\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $params);\n\n            $sql = \"UPDATE zp_tickets SET \";\n\n            foreach($params as $key=>$value){\n                $sql .= \"\".$key.\"=:\".$key.\", \";\n            }\n\n            $sql .= \"id=:id WHERE id=:id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            foreach($params as $key=>$value){\n                $stmn->bindValue(':'.$key, $value, PDO::PARAM_STR);\n            }\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n\n\n\n\n        /**\n         * getTicketCost - adds up how much the current cost of the ticket is\n         *\n         * @param  id\n         * @return int\n         */\n        public function getTicketCost($id)\n        {\n\n            $query = \"SELECT * FROM `zp_timesheets` WHERE ticketId=:id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            $total = 0;\n\n            foreach($values as $times) {\n\n                $users = new users();\n\n                $user = $users->getUser($times['userId']);\n\n                $wage = $user['wage'];\n\n                $total += ($wage * $times['hours']);\n\n            }\n\n            return $total;\n        }\n\n        public function countMyTickets($id)\n        {\n\n            $sql = 'SELECT count(*) as count FROM zp_tickets \n\t\t\t\tWHERE editorId LIKE \"%'.$id.'%\"';\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->execute();\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['count'];\n        }\n\n        public function getAssignedTickets($id,$limit=null)\n        {\n\n            $sql = 'SELECT id, headline, dateToFinish FROM zp_tickets \n\t\t\t\tWHERE editorId LIKE \"%'.$id.'%\" ORDER BY id DESC';\n\n            if($limit!=null) {\n                $sql .= \" LIMIT :limit\";\n            }\n\n            $stmn = $this->db->database->prepare($sql);\n\n            if ($limit!=null) {\n                $stmn->bindValue(':limit', $limit, PDO::PARAM_INT);\n            }\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        /**\n         * getUSerTickets - get Tickets related to a user and state\n         *\n         * @param  $status\n         * @param  $id\n         * @return array\n         */\n        public function getUserTickets($status, $id)\n        {\n            $query = \"SELECT\n\t\t\t\t\t\tSQL_CALC_FOUND_ROWS\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tJOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\t\n\t\t\t\t\tWHERE \n\t\t\t\t\t\t(zp_tickets.userId = '\".$id.\"'\n\t\t\t\t\t\t\tOR\n\t\t\t\t\t\tzp_tickets.editorId = '\".$id.\"')\n\t\t\t\t\tAND zp_tickets.status IN( \".$status.\" )\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\n\t\t\t\t\t\t\n\t\t\t\t\tORDER BY \".$this->sortBy.\" DESC \".$this->limitSelect.\"\";\n\n            $this->db->dbQuery($query);\n\n            return $this->db->dbFetchResults();\n        }\n\n        public function getAvailableUsersForTicket()\n        {\n            /*\n             *  A user is not an \"editor\"\n            $sql = \"SELECT\n                        Distinct(projectRelation.userId),\n                        user.username, user.firstname, user.lastname, user.id\n                    FROM zp_relationuserproject as projectRelation\n                    INNER JOIN zp_user as user ON projectRelation.userId = user.id\n                    WHERE projectId=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $users = $stmn->fetchAll();\n            $stmn->closeCursor();\n            */\n\n            //Get the projects the current user is assigned to\n\n            $sql = \"SELECT \n\t\t\t\t\tDISTINCT user.username, \n\t\t\t\t\tuser.firstname, \n\t\t\t\t\tuser.lastname, \n\t\t\t\t\tuser.id \n\t\t\t\tFROM zp_user as user \n\t\t\t\tJOIN zp_relationuserproject ON user.id = zp_relationuserproject.userId\n\t\t\t\t\n\t\t\t\tWHERE zp_relationuserproject.projectId IN \n\t\t\t\t(\n\t\t\t\t\tSELECT \n\t\t\t\t\t\tzp_relationuserproject.projectId \n\t\t\t\t\tFROM zp_relationuserproject WHERE userId = \".$_SESSION['userdata'][\"id\"].\"\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n\n            $stmn->execute();\n            $admin = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $admin;\n        }\n\n        /**\n         * getNumPages - get REAL number of pages even with LIMIT in SELECT-statement\n         *\n         * @access public\n         * @return integer\n         */\n        public function getNumPages()\n        {\n\n            $row = $this->db->dbQuery(\"SELECT FOUND_ROWS()\")->dbFetchResults();\n\n            $numRows = (int)$row[0]['FOUND_ROWS()'];\n\n            $numPages = ceil($numRows / $this->rowsPerPage);\n\n            return $numPages;\n        }\n\n        /**\n         * pageLimiter - set the LIMIT-statement for a query\n         *\n         * @access public\n         */\n        public function pageLimiter()\n        {\n\n            $this->limitSelect = \" LIMIT 0, 10\";\n\n            $begin = $this->page * $this->rowsPerPage;\n\n            $end = $this->rowsPerPage;\n\n            $this->limitSelect = \" LIMIT \".$begin.\", \".$end.\"\";\n\n        }\n\n        /**\n         * setPage - set the page that is displayed\n         *\n         * @access public\n         * @param  $page\n         */\n        public function setPage($page)\n        {\n            if(is_numeric($page) && $page > 0) {\n                $this->page = $page - 1;\n            }else{\n                $this->page = 0;\n            }\n        }\n\n        /**\n         * setRowsPerPage - set the rows that are displayed per page\n         *\n         * @access public\n         * @param  $rows\n         */\n        public function setRowsPerPage($rows)\n        {\n\n            if(is_numeric($page) === true) {\n\n                $this->rowsPerPage = $rows;\n\n            }\n        }\n\n        /**\n         * getAllBySearch - get Tickets by a serach term and/or a filter\n         *\n         * @access public\n         * @param  $term\n         * @param  $filter\n         * @return array\n         */\n        public function getAllBySearch($term, $filter, $closedTickets = 1)\n        {\n\n            if($filter == ''  && $term != '') {\n\n                $whereClause = \"AND (zp_tickets.id LIKE:term OR :term IN(zp_tickets.tags) OR zp_tickets.headline LIKE :term OR zp_tickets.description LIKE :term)\";\n\n            }elseif($filter != '' && $term == '') {\n\n                $whereClause = \"AND (zp_tickets.projectId = :filter)\";\n\n            }elseif($filter != '' && $term != '') {\n\n                $whereClause = \"AND ((zp_tickets.id LIKE :term OR :term IN(zp_tickets.tags) OR zp_tickets.headline LIKE :term OR zp_tickets.description LIKE :term) AND (zp_tickets.projectId = :filter))\";\n            }else {\n                $whereClause = \"\";\n            }\n\n            if($closedTickets == 0) {\n                $whereClause .= \" AND zp_tickets.status <> 0 \";\n            }\n\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\t\tzp_tickets.sortindex,\n\t\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\t\tzp_tickets.dependingTicketId,\n\t\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\t\tzp_clients.id AS clientId,\n\t\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\t\tt2.lastname AS editorLastname,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_comment.id) AS commentCount,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_file.id) AS fileCount\n\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\t\tLEFT JOIN zp_relationuserproject USING (projectId)\n\t\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\t\tLEFT JOIN zp_comment ON zp_tickets.id = zp_comment.moduleId and zp_comment.module = 'ticket'\n\t\t\t\t\t\t\tLEFT JOIN zp_file ON zp_tickets.id = zp_file.moduleId and zp_file.module = 'ticket'\n\t\t\t\t\t\t\tWHERE zp_relationuserproject.userId = :userId AND (zp_projects.state > '-1' OR zp_projects.state IS NULL)\n\t\t\t\t\t\t \".$whereClause .\"\n\t\t\t\t\t\tGROUP BY zp_tickets.id ORDER BY date DESC\";\n\n\n            $stmn = $this->db->database->prepare($query);\n\n            if($term != '') {\n                $stmn->bindValue(':term', \"%\".$term.\"%\", PDO::PARAM_STR);\n            }\n\n            if($filter != '') {\n                $stmn->bindValue(':filter', $filter, PDO::PARAM_STR);\n            }\n\n\n            $stmn->bindValue(':userId', $_SESSION['userdata']['id'], PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n\n            return $values;\n\n        }\n\n        /**\n         * getAllBySearchCriteria - get Tickets by a serach term and/or a filter\n         *\n         * @access public\n         * @param  $criteria array\n         * @param  $filter\n         * @return array\n         */\n        public function getAllBySearchCriteria($searchCriteria, $sort='standard')\n        {\n\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\t\tzp_sprints.name as sprintName,\n\t\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\t\tzp_tickets.sortindex,\n\t\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\t\tzp_tickets.dependingTicketId,\n\t\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\t\tSUM(timesheets.hours) AS bookedHours,\n\t\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\t\tzp_clients.id AS clientId,\n\t\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\t\tt1.profileId AS authorProfileId,\n\t\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\t\tt2.lastname AS editorLastname,\n\t\t\t\t\t\t\tt2.profileId AS editorProfileId,\n\t\t\t\t\t\t\tmilestone.headline AS milestoneHeadline,\n\t\t\t\t\t\t\tIF((milestone.tags IS NULL OR milestone.tags = ''), '#1b75bb', milestone.tags) AS milestoneColor,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_comment.id) AS commentCount,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_file.id) AS fileCount\n\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\tLEFT JOIN zp_relationuserproject USING (projectId)\n\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\tLEFT JOIN zp_comment ON zp_tickets.id = zp_comment.moduleId and zp_comment.module = 'ticket'\n\t\t\t\t\t\tLEFT JOIN zp_file ON zp_tickets.id = zp_file.moduleId and zp_file.module = 'ticket'\n\t\t\t\t\t\tLEFT JOIN zp_sprints ON zp_tickets.sprint = zp_sprints.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS milestone ON zp_tickets.dependingTicketId = milestone.id AND zp_tickets.dependingTicketId > 0 AND milestone.type = 'milestone'\n\t\t\t\t\t\tLEFT JOIN zp_timesheets AS timesheets ON zp_tickets.id = timesheets.ticketId\n\t\t\t\t\t\tWHERE zp_relationuserproject.userId = :userId AND zp_tickets.type <> 'subtask' AND zp_tickets.type <> 'milestone'\";\n\n            if($_SESSION['currentProject']  != \"\") {\n                $query .= \" AND zp_tickets.projectId = :projectId\";\n            }\n\n            if($searchCriteria[\"users\"]  != \"\") {\n                $query .= \" AND zp_tickets.editorId IN(\".strip_tags($searchCriteria[\"users\"]).\")\";\n            }\n\n            if($searchCriteria[\"milestone\"]  != \"\") {\n                $query .= \" AND zp_tickets.dependingTicketId = :milestoneId\";\n            }\n\n\n            if($searchCriteria[\"status\"]  != \"\") {\n\n                $statusArray = explode(\",\", $searchCriteria['status']);\n                if(array_search(\"not_done\", $statusArray) !== false) {\n                    $query .= \" AND zp_tickets.status > 0\";\n                }else {\n                    $query .= \" AND zp_tickets.status IN('\" . implode(\"','\", explode(\",\", strip_tags($searchCriteria[\"status\"]))) . \"')\";\n                }\n            }\n\n            if($searchCriteria[\"type\"]  != \"\") {\n                $query .= \" AND LOWER(zp_tickets.type) = LOWER(:searchType) \";\n            }\n\n            if($searchCriteria[\"term\"]  != \"\") {\n                $query .= \" AND (FIND_IN_SET(:termStandard, zp_tickets.tags) OR zp_tickets.headline LIKE :termWild OR zp_tickets.description LIKE :termWild OR zp_tickets.id LIKE :termWild)\";\n            }\n\n            if($searchCriteria[\"sprint\"]  > 0 && $searchCriteria[\"sprint\"]  != \"all\") {\n                $query .= \" AND zp_tickets.sprint IN(\".strip_tags($searchCriteria[\"sprint\"]).\")\";\n            }\n\n            if($searchCriteria[\"sprint\"]  == \"backlog\" ) {\n                $query .= \" AND (zp_tickets.sprint IS NULL OR zp_tickets.sprint = '' OR zp_tickets.sprint = -1)\";\n            }\n\n            $query .= \" GROUP BY zp_tickets.id \";\n\n            if($sort == \"standard\") {\n                $query .= \" ORDER BY zp_tickets.sortindex ASC\";\n            }else if($sort == \"kanbansort\") {\n                $query .= \" ORDER BY zp_tickets.kanbanSortIndex ASC\";\n            }else if($sort == \"duedate\") {\n                    $query .= \" ORDER BY zp_tickets.dateToFinish ASC\";\n            }\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':userId', $_SESSION['userdata']['id'], PDO::PARAM_INT);\n\n            if($_SESSION['currentProject'] != \"\") {\n\n                $stmn->bindValue(':projectId', $_SESSION['currentProject'], PDO::PARAM_INT);\n            }\n\n            if($searchCriteria[\"milestone\"]  != \"\") {\n                $stmn->bindValue(':milestoneId', $searchCriteria[\"milestone\"], PDO::PARAM_INT);\n            }\n\n            if($searchCriteria[\"type\"]  != \"\") {\n                $stmn->bindValue(':searchType', $searchCriteria[\"type\"], PDO::PARAM_STR);\n            }\n\n            if($searchCriteria[\"term\"]  != \"\") {\n                $termWild = \"%\".$searchCriteria[\"term\"].\"%\";\n                $stmn->bindValue(':termWild', $termWild, PDO::PARAM_STR);\n                $stmn->bindValue(':termStandard', $searchCriteria[\"term\"], PDO::PARAM_STR);\n            }\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllSprintsByProject($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.sprint\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets \n\t\t\t\t\tWHERE  \n\t\t\t\t\t\tzp_tickets.projectId = :projectId AND zp_tickets.sprint <> ''\n\t\t\t\t\tGROUP BY zp_tickets.sprint ORDER BY zp_tickets.sprint ASC\";\n\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function updateTicketSorting($project, $ticketSorting)\n        {\n\n            $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET sortindex = :sortIndex,\n\t\t\t\t\tsprint = :sprint\n\t\t\t\t\tWHERE projectId = :projectId AND id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n            foreach($ticketSorting as $ticket){\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':projectId', $project, PDO::PARAM_INT);\n                $stmn->bindValue(':sortIndex', $ticket[\"sortIndex\"], PDO::PARAM_INT);\n                $stmn->bindValue(':sprint', $ticket[\"sprint\"], PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticket[\"id\"], PDO::PARAM_INT);\n                $stmn->execute();\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        public function updateTicketStatus($ticketId, $status, $ticketSorting=-1)\n        {\n\n            if($ticketSorting > -1) {\n\n                $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET \n\t\t\t\t\t\tkanbanSortIndex = :sortIndex,\n\t\t\t\t\t\tstatus = :status\n\t\t\t\t\tWHERE id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':status', $status, PDO::PARAM_INT);\n                $stmn->bindValue(':sortIndex', $ticketSorting, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                return $stmn->execute();\n\n            }else{\n\n                $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET \n\t\t\t\t\t\tstatus = :status\n\t\t\t\t\tWHERE id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':status', $status, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                return $stmn->execute();\n\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        /**\n         *\n         * @access public\n         * @param  id\n         */\n        public function sendAlert($id)\n        {\n\n            $mail = new mailer();\n            $user = new users();\n\n            // send alert email !\n            $row = $user->getUser($id);\n\n            $emailTo = $row['user'];\n\n            $to[] = $emailTo;\n\n            $subject = \"Alert: Hours spent have exceeded planned hours\";\n\n            $mail->setSubject($subject);\n\n            $text = \"Hello \".$emailTo.\",\n\t\t\t\t\t\t\t\t\n\t\t\tThis is a friendly reminder that you have surpassed\n\t\t\t\t\t\t\t\t\n\t\t\tthe estimated hours for this project. While we \n\t\t\t\t\t\t\t\t\t\n\t\t\tunderstand it is impossible to meet every deadline\n\t\t\t\t\t\t\t\t\t\n\t\t\twe encourage you to be as diligent as possible with\n\t\t\t\t\t\t\t\t\t\n\t\t\tyour workload.\";\n\n            $mail->setText($text);\n\n            $mail->sendMail($to);\n\n        }\n\n        public function addTicketChange($userId,$ticketId,$values)\n        {\n\n            $fields = array(\n                'headline' => 'headline',\n                'type' => 'type',\n                'description' => 'description',\n                'project' => 'projectId',\n                'priority' => 'priority',\n                'deadline' => 'dateToFinish',\n                'editors' => 'editorId',\n                'fromDate' => 'editFrom',\n                'toDate' => 'editTo',\n                'staging' => 'staging',\n                'production' => 'production',\n                'planHours'    => 'planHours',\n                'status' => 'status');\n\n            $changedFields = array();\n\n            $sql = \"SELECT * FROM zp_tickets WHERE id=:ticketId LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $oldValues = $stmn->fetch();\n            $stmn->closeCursor();\n\n            // compare table\n            foreach($fields as $enum => $dbTable) {\n\n                if (isset($values[$dbTable]) === true && ($oldValues[$dbTable] != $values[$dbTable]) && ($values[$dbTable] != \"\")) {\n                    $changedFields[$enum] = $values[$dbTable];\n                }\n\n            }\n\n            $sql = \"INSERT INTO zp_tickethistory (\n\t\t\t\t\tuserId, ticketId, changeType, changeValue, dateModified\n\t\t\t\t) VALUES (\n\t\t\t\t\t:userId, :ticketId, :changeType, :changeValue, NOW()\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            foreach ($changedFields as $field => $value) {\n\n                $stmn->bindValue(':userId', $userId, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                $stmn->bindValue(':changeType', $field, PDO::PARAM_STR);\n                $stmn->bindValue(':changeValue', $value, PDO::PARAM_STR);\n                $stmn->execute();\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        /**\n         * getTicket - get a specific Ticket depending on the role\n         *\n         * @access public\n         * @param  $id\n         * @return \\leantime\\domain\\models\\tickets|bool\n         */\n        public function getTicket($id)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets LEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.id = :ticketId\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\t\t\t\t\t\t\n\t\t\t\t\tLIMIT 1\";\n\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchObject('\\leantime\\domain\\models\\tickets');\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllSubtasks($id)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets LEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.dependingTicketId = :ticketId AND zp_tickets.type = 'subtask'\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllMilestones($projectId, $includeArchived =false)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tdepMilestone.headline AS milestoneHeadline,\n\t\t\t\t\t\tIF((depMilestone.tags IS NULL OR depMilestone.tags = ''), '#1b75bb', depMilestone.tags) AS milestoneColor,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tIF((zp_tickets.tags IS NULL OR zp_tickets.tags = ''), '#1b75bb', zp_tickets.tags) AS tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname,\n\t\t\t\t\t\tt3.profileId AS editorProfileId,\n\t\t\t\t\t\tSUM(progressTickets.planHours) AS planHours,\n\t\t\t\t\t\tSUM(progressTickets.hourRemaining) AS hourRemaining,\n\t\t\t\t\t\tSUM(timesheets.hours) AS bookedHours,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN 1 ELSE 0 END) AS doneTickets,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN 0 ELSE IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)  END) AS openTicketsEffort,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints) ELSE 0 END) AS doneTicketsEffort,\n\t\t\t\t\t\tSUM(IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)) AS allTicketsEffort,\n\t\t\t\t\t\tCOUNT(progressTickets.id) AS allTickets,\n\t\t\t\t\t\t\n\t\t\t\t\t\tCASE WHEN \n\t\t\t\t\t\t  COUNT(progressTickets.id) > 0 \n\t\t\t\t\t\tTHEN \n\t\t\t\t\t\t  ROUND(SUM(CASE WHEN progressTickets.status < 1 THEN IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints) ELSE 0 END) / SUM(IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)) *100) \n\t\t\t\t\t\tELSE \n\t\t\t\t\t\t  0 \n\t\t\t\t\t\tEND AS percentDone\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS depMilestone ON zp_tickets.dependingTicketId = depMilestone.id \n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS progressTickets ON progressTickets.dependingTicketId = zp_tickets.id AND progressTickets.type <> 'Milestone' AND progressTickets.type <> 'Subtask'\n\t\t\t\t\t\tLEFT JOIN zp_timesheets AS timesheets ON progressTickets.id = timesheets.ticketId\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type = 'milestone' AND zp_tickets.projectId = :projectId\";\n\n                if($includeArchived === false) {\n                    $query .= \" AND zp_tickets.status > -1 \";\n                }\n\n\t\t\t\t$query .= \"\tGROUP BY\n\t\t\t\t\t\tprogressTickets.dependingTicketId, zp_tickets.id\n\t\t\t\t\tORDER BY zp_tickets.editFrom ASC\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll(PDO::FETCH_CLASS, 'leantime\\domain\\models\\tickets');\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getTicketHistory($id)\n        {\n\n            $sql = \"SELECT \n\t\t \tticket.headline, history.userId, history.ticketId, history.changeType, history.changeValue, history.ticketId, history.dateModified,\n\t\t \tuser.firstname, user.lastname\n\t\t FROM zp_tickethistory as history\n\t\t  \tINNER JOIN zp_user as user ON history.userId = user.id \n\t\t  \tINNER JOIN zp_tickets as ticket ON history.ticketId = ticket.id\n\t\t WHERE history.ticketId = :ticketId ORDER BY history.id DESC\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        /**\n         * getStatus - get the Status from the status array\n         *\n         * @access public\n         * @param  $status\n         * @return string\n         */\n        public function getStatus($status)\n        {\n\n            if($status !== null && $status !== '') {\n\n                if(array_key_exists($status, $this->state)=== true) {\n                    return $this->state[$status];\n                }else{\n                    return $this->state[3];\n                }\n\n            }else{\n\n                return $this->state[3];\n            }\n        }\n\n        public function getStatusPlain($status)\n        {\n\n            if($status !== null && $status !== '') {\n\n                return $this->statePlain[$status];\n\n            }else{\n\n                return $this->statePlain[3];\n            }\n        }\n\n        /**\n         * getType - get the Type from the type array\n         *\n         * @access public\n         * @param  $type\n         * @return string\n         */\n        public function getType()\n        {\n            return $this->type;\n        }\n\n\n        /**\n         * getPriority - get the priority from the priority array\n         *\n         * @access public\n         * @param  $priority\n         * @return string\n         */\n        public function getPriority($priority)\n        {\n\n            if($priority !== null && $priority !== '') {\n\n                return $this->priority[$priority];\n\n            }else{\n\n                return $this->priority[1];\n\n            }\n        }\n\n        /**\n         * addTicket - add a Ticket with postback test\n         *\n         * @access public\n         * @param  array $values\n         * @return boolean|int\n         */\n        public function addTicket(array $values)\n        {\n\n\n            $query = \"INSERT INTO zp_tickets (\n\t\t\t\t\t\theadline, \n\t\t\t\t\t\ttype, \n\t\t\t\t\t\tdescription, \n\t\t\t\t\t\tdate, \n\t\t\t\t\t\tdateToFinish, \n\t\t\t\t\t\tprojectId, \n\t\t\t\t\t\tstatus, \n\t\t\t\t\t\tuserId, \n\t\t\t\t\t\ttags, \n\t\t\t\t\t\tsprint,\n\t\t\t\t\t\tstorypoints,\n\t\t\t\t\t\thourRemaining,\n\t\t\t\t\t\tplanHours,\n\t\t\t\t\t\tacceptanceCriteria,\n\t\t\t\t\t\teditFrom, \n\t\t\t\t\t\teditTo, \n\t\t\t\t\t\teditorId,\n\t\t\t\t\t\tdependingTicketId\n\t\t\t\t) VALUES (\n\t\t\t\t\t\t:headline,\n\t\t\t\t\t\t:type,\n\t\t\t\t\t\t:description,\n\t\t\t\t\t\t:date,\n\t\t\t\t\t\t:dateToFinish,\n\t\t\t\t\t\t:projectId,\n\t\t\t\t\t\t:status,\n\t\t\t\t\t\t:userId,\n\t\t\t\t\t\t:tags,\n\t\t\t\t\t\t:sprint,\n\t\t\t\t\t\t:storypoints,\n\t\t\t\t\t\t:hourRemaining,\n\t\t\t\t\t\t:planHours,\n\t\t\t\t\t\t:acceptanceCriteria,\n\t\t\t\t\t\t:editFrom,\n\t\t\t\t\t\t:editTo,\n\t\t\t\t\t\t:editorId,\n\t\t\t\t\t\t:dependingTicketId\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($query);\n\n            $stmn->bindValue(':headline', $values['headline'], PDO::PARAM_STR);\n            $stmn->bindValue(':type', $values['type'], PDO::PARAM_STR);\n            $stmn->bindValue(':description', $values['description'], PDO::PARAM_STR);\n            $stmn->bindValue(':date', $values['date'], PDO::PARAM_STR);\n            $stmn->bindValue(':dateToFinish', $values['dateToFinish'], PDO::PARAM_STR);\n            $stmn->bindValue(':projectId', $values['projectId'], PDO::PARAM_STR);\n            $stmn->bindValue(':status', $values['status'], PDO::PARAM_STR);\n            $stmn->bindValue(':userId', $values['userId'], PDO::PARAM_STR);\n            $stmn->bindValue(':tags', $values['tags'], PDO::PARAM_STR);\n\n            $stmn->bindValue(':sprint', $values['sprint'], PDO::PARAM_STR);\n            $stmn->bindValue(':storypoints', $values['storypoints'], PDO::PARAM_STR);\n            $stmn->bindValue(':hourRemaining', $values['hourRemaining'], PDO::PARAM_STR);\n            $stmn->bindValue(':planHours', $values['planHours'], PDO::PARAM_STR);\n            $stmn->bindValue(':acceptanceCriteria', $values['acceptanceCriteria'], PDO::PARAM_STR);\n\n            $stmn->bindValue(':editFrom', $values['editFrom'], PDO::PARAM_STR);\n            $stmn->bindValue(':editTo', $values['editTo'], PDO::PARAM_STR);\n            $stmn->bindValue(':editorId', $values['editorId'], PDO::PARAM_STR);\n\n            if(isset($values['dependingTicketId'])) {\n                $depending = $values['dependingTicketId'];\n            }else{\n                $depending = \"\";\n            }\n\n            $stmn->bindValue(':dependingTicketId', $depending, PDO::PARAM_STR);\n\n            $stmn->execute();\n\n            $stmn->closeCursor();\n\n            return $this->db->database->lastInsertId();\n\n        }\n\n        /**\n         * updateTicket - Update Ticketinformation\n         *\n         * @access public\n         * @param  array $values\n         * @param  $id\n         */\n        public function updateTicket(array $values, $id)\n        {\n\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $values);\n\n            $query = \"UPDATE zp_tickets\n\t\t\tSET \n\t\t\t\theadline = :headline,\n\t\t\t\ttype = :type,\n\t\t\t\tdescription=:description,\n\t\t\t\tprojectId=:projectId, \n\t\t\t\tstatus = :status,\t\t\t\n\t\t\t\tdateToFinish = :dateToFinish,\n\t\t\t\tsprint = :sprint,\n\t\t\t\tstorypoints = :storypoints,\n\t\t\t\thourRemaining = :hourRemaining,\n\t\t\t\tplanHours = :planHours,\n\t\t\t\ttags = :tags,\n\t\t\t\teditorId = :editorId,\n\t\t\t\teditFrom = :editFrom,\n\t\t\t\teditTo = :editTo,\n\t\t\t\tacceptanceCriteria = :acceptanceCriteria,\n\t\t\t\tdependingTicketId = :dependingTicketId\n\t\t\tWHERE id = :id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n\n            $stmn->bindValue(':headline', $values['headline'], PDO::PARAM_STR);\n            $stmn->bindValue(':type', $values['type'], PDO::PARAM_STR);\n            $stmn->bindValue(':description', $values['description'], PDO::PARAM_STR);\n            $stmn->bindValue(':projectId', $values['projectId'], PDO::PARAM_STR);\n            $stmn->bindValue(':status', $values['status'], PDO::PARAM_STR);\n            $stmn->bindValue(':dateToFinish', $values['dateToFinish'], PDO::PARAM_STR);\n            $stmn->bindValue(':sprint', $values['sprint'], PDO::PARAM_STR);\n            $stmn->bindValue(':storypoints', $values['storypoints'], PDO::PARAM_STR);\n            $stmn->bindValue(':hourRemaining', $values['hourRemaining'], PDO::PARAM_STR);\n            $stmn->bindValue(':acceptanceCriteria', $values['acceptanceCriteria'], PDO::PARAM_STR);\n            $stmn->bindValue(':planHours', $values['planHours'], PDO::PARAM_STR);\n            $stmn->bindValue(':tags', $values['tags'], PDO::PARAM_STR);\n            $stmn->bindValue(':editorId', $values['editorId'], PDO::PARAM_STR);\n            $stmn->bindValue(':editFrom', $values['editFrom'], PDO::PARAM_STR);\n            $stmn->bindValue(':editTo', $values['editTo'], PDO::PARAM_STR);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':dependingTicketId', $values['dependingTicketId'], PDO::PARAM_STR);\n\n\n            $result = $stmn->execute();\n\n            $stmn->closeCursor();\n\n            return $result;\n        }\n\n        /**\n         * delTicket - delete a Ticket and all dependencies\n         *\n         * @access public\n         * @param  $id\n         */\n        public function delticket($id)\n        {\n\n            $query = \"DELETE FROM zp_tickets WHERE id = '\".$id.\"'\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $result = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $result;\n\n        }\n\n        public function delMilestone($id)\n        {\n\n            $query = \"UPDATE zp_tickets\n                SET \n                    dependingTicketId = ''\n                WHERE dependingTicketId = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n\n            $query = \"UPDATE zp_canvas_items\n                SET \n                    milestoneId = ''\n                WHERE milestoneId = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n\n            $query = \"DELETE FROM zp_tickets WHERE id = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n            return true;\n\n        }\n\n\n        /**\n         * Checks whether a user has access to a ticket or not\n         */\n        public function getAccessRights($id)\n        {\n\n            $sql = \"SELECT \n\t\t\t\t\n\t\t\t\tzp_relationuserproject.userId\n\t\t\t\t\n\t\t\tFROM zp_tickets\n\t\t\t\n\t\t\tLEFT JOIN zp_relationuserproject ON zp_tickets.projectId = zp_relationuserproject.projectId\n\t\t\t\n\t\t\tWHERE zp_tickets.id=:id AND zp_relationuserproject.userId = :user\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':user', $_SESSION['userdata']['id'], PDO::PARAM_STR);\n\n\n            $stmn->execute();\n            $result = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            if (count($result) > 0) {\n                return true;\n            }else{\n                return false;\n            }\n\n        }\n\n        public function getTimelineHistory($id)\n        {\n\n            $sql = \"SELECT \n\t\t\t\t\t\tth.changeType, \n\t\t\t\t\t\tth.changeValue, \n\t\t\t\t\t\tDATE_FORMAT(th.dateModified, '%Y,%m,%e') AS date, \n\t\t\t\t\t\tth.userId, \n\t\t\t\t\t\tticket.id as ticketId, \n\t\t\t\t\t\tticket.headline, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tuser.firstname, \n\t\t\t\t\t\tuser.lastname,\n\t\t\t\t\t\tuser.id AS userId\n\t\t\t\t\tFROM zp_tickethistory as th\n\t\t\t\t\tINNER JOIN zp_user as user ON th.userId = user.id\n\t\t\t\t\tINNER JOIN zp_tickets as ticket ON th.ticketId = ticket.id\n\t\t\t\t\tWHERE ticketId = :id\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $result = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $result;\n\n        }\n\n        public function getTicketUsers($id)\n        {\n\n            $sql = \"SELECT \t\n\t\t\t\t\t\tuser.username AS authorEditor,\n\t\t\t\t\t\teditors.username AS editorEmail\n\t\t\t\t\t\n\t\t\t\t\tFROM zp_tickets AS tickets\n\t\t\t\t\tLEFT JOIN zp_user AS user ON tickets.userId = user.id AND (user.notifications = 1 || user.notifications IS NULL)\n\t\t\t\t\tLEFT JOIN zp_user AS editors ON tickets.editorId = editors.id AND (editors.notifications = 1 || editors.notifications IS NULL)\n\t\t\t\t\t\n\t\t\t\t\tWHERE tickets.id = :id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $result = $stmn->fetch();\n            $stmn->closeCursor();\n\n            $to = array();\n\n            if($result[\"authorEditor\"] != \"\") {\n                $to[] = $result[\"authorEditor\"];\n            }\n\n            if($result[\"editorEmail\"] != \"\" && $result[\"editorEmail\"] != $result[\"authorEditor\"]) {\n                $to[] = $result[\"editorEmail\"];\n            }\n\n            return $to;\n        }\n\n        public function getFirstTicket($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId\n\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $stmn->setFetchMode(PDO::FETCH_CLASS, 'leantime\\domain\\models\\tickets');\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n\n        public function getNumberOfAllTickets($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tCOUNT(zp_tickets.id) AS allTickets\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allTickets'];\n\n        }\n\n        public function getNumberOfClosedTickets($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tCOUNT(zp_tickets.id) AS allTickets\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n\t\t\t\t\t\tAND zp_tickets.status < 1\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allTickets'];\n\n        }\n\n        public function getEffortOfClosedTickets($projectId, $averageStorySize)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tSUM(CASE when zp_tickets.storypoints <> '' then zp_tickets.storypoints else :avgStorySize end) AS allEffort\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n\t\t\t\t\t\tAND zp_tickets.status < 1\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n            $stmn->bindValue(':avgStorySize', $averageStorySize, PDO::PARAM_INT);\n\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allEffort'];\n\n        }\n\n        public function getEffortOfAllTickets($projectId, $averageStorySize)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tSUM(CASE when zp_tickets.storypoints <> '' then zp_tickets.storypoints else :avgStorySize end) AS allEffort\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n            $stmn->bindValue(':avgStorySize', $averageStorySize, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allEffort'];\n\n        }\n\n\n        public function getAverageTodoSize($projectId)\n        {\n            $query = \"SELECT\n\t\t\t\t\t\tAVG(zp_tickets.storypoints) as avgSize\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND \n\t\t\t\t\t\t(zp_tickets.storypoints <> '' AND zp_tickets.storypoints IS NOT NULL) AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['avgSize'];\n        }\n\n\n\n\n    }\n\n}\n"], "fixing_code": ["<?php\n\n/**\n * Database Class - Very simple abstraction layer for pdo connection\n *\n */\n\nnamespace leantime\\core;\n\nuse \\PDO;\n\nclass db\n{\n\n    /**\n     * @access private\n     * @var    string database host default: localhost\n     */\n    private $host='';\n\n    /**\n     * @access private\n     * @var    string username for db\n     */\n    private $user='';\n\n    /**\n     * @access private\n     * @var    string password for db\n     */\n    private $password='';\n\n\n    private $databaseName='';\n\n\n    public $database='';\n    /**\n     * @access private\n     * @var    pdo object\n     */\n    private static $instance='';\n\n    /**\n     * @access private\n     * @var    string sql query-String\n     */\n    private $sql='';\n\n    /**\n     * @access private\n     * @var    connection database connection\n     */\n    private $connection='';\n\n    /**\n     * @access public\n     * @var    object query Result\n     */\n    public $result = '';\n\n    /**\n     * @access public\n     * @var    integer number of rows (CAUTION: Limited numrows with SQL LIMIT)\n     */\n    public $counter = null;\n\n    /**\n     * __construct - connect to database and select db\n     *\n     * @return object\n     */\n    private function __construct()\n    {\n\n            //Get configuration-object for connection-details\n            $config = new config();\n\n            $this->user = $config->dbUser;\n            $this->password = $config->dbPassword;\n            $this->databaseName = $config->dbDatabase;\n            $this->host= $config->dbHost;\n\n        try{\n\n            $driver_options = array( PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8mb4,sql_mode=\"NO_ENGINE_SUBSTITUTION\"' );\n            $this->database = new PDO('mysql:host=' . $this->host . ';dbname='. $this->databaseName .'', $this->user, $this->password, $driver_options);\n            $this->database->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        }catch(\\PDOException $e){\n\n            echo \"No database connection, check your database credentials in your configuration file.\";\n\n            exit();\n\n        }\n\n    }\n\n    public static function getInstance()\n    {\n\n        if (!(self::$instance instanceof self)) {\n            self::$instance = new self();\n        }\n        return self::$instance;\n\n    }\n\n\n    /**\n     * Count - True counter of results\n     *\n     * @access public\n     * @return integer (\n     */\n    \n    public function count()\n    {\n\n        if($this->counter===null ) {\n            \n            $this->counter=$this->result->fetchColumn();;\n\n        }\n\n        return $this->counter;\n    }\n    \n    \n    /**\n     * dbFetchRow - get one Dataset row and masks html\n     *\n     * @access public\n     * @return array Dataset\n     */\n    public function dbFetchRow()\n    {\n                    \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n            $row = array_map('htmlspecialchars', $row);\n            return $row;\n                    \n        }\n\n\n    }\n\n    /**\n     * dbFetchResults - Fetch all results and return array and masks html\n     *\n     * @access public\n     * @return array\n     */\n    public function dbFetchResults()\n    {\n\n        $i=0;\n                \n        //Get results and build an array (...better to handle in Templates)\n        while($array[$i] = $this->result->fetch(PDO::FETCH_ASSOC)) {\n\n            $array[$i] = array_map('htmlspecialchars', $array[$i]);\n\n            $i++;\n\n        }\n\n        array_pop($array);\n\n        return $array;\n\n    \n\n    }\n\n    /**\n     * dbFetchRowUnmasked - get one Dataset row without masking html\n     *\n     * @access public\n     * @return array Dataset\n     */\n    public function dbFetchRowUnmasked()\n    {\n            \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n\n            return $row;\n                    \n        }\n\n        \n    }\n\n    /**\n     * dbFetchResultsUnmasked - Fetch all results and return array without masking html\n     *\n     * @access public\n     * @return array\n     */\n    public function dbFetchResultsUnmasked()\n    {\n        \n        $i=0;\n                \n        //Get results and build an array (...better to handle in Templates)\n        while($array[$i] = $this->result->fetch(PDO::FETCH_ASSOC)) {\n            $i++;\n\n        }\n\n        array_pop($array);\n\n        return $array;\n\n        \n\n    }\n    \n    \n    \n    public function getErrorMessage($err)\n    {\n        \n        print_r($err);\n                $trace = '<table border=\"0\">';\n        foreach ($err->getTrace() as $a => $b) {\n            foreach ($b as $c => $d) {\n                if ($c == 'args') {\n                    foreach ($d as $e => $f) {\n                        $trace .= '<tr><td><b>' . strval($a) . '#</b></td><td align=\"right\"><u>args:</u></td> <td><u>' . $e . '</u>:</td><td><i>' . $f . '</i></td></tr>';\n                    }\n                } else {\n                    $trace .= '<tr><td><b>' . strval($a) . '#</b></td><td align=\"right\"><u>' . $c . '</u>:</td><td></td><td><i>' . $d . '</i></td>';\n                }\n            }\n        }\n         $trace .= '</table>';\n          echo '<br /><br /><br /><font face=\"Verdana\"><center><fieldset style=\"width: 66%; border: 1px solid white; background: white;\"><legend><b>[</b>PHP PDO Error ' . strval($err->getCode()) . '<b>]</b></legend> <table border=\"0\"><tr><td align=\"right\"><b><u>Message:</u></b></td><td><i>' . $err->getMessage() . '</i></td></tr><tr><td align=\"right\"><b><u>Code:</u></b></td><td><i>' . strval($err->getCode()) . '</i></td></tr><tr><td align=\"right\"><b><u>File:</u></b></td><td><i>' . $err->getFile() . '</i></td></tr><tr><td align=\"right\"><b><u>Line:</u></b></td><td><i>' . strval($err->getLine()) . '</i></td></tr><tr><td align=\"right\"><b><u>Trace:</u></b></td><td><br /><br />' . $trace . '</td></tr></table></fieldset></center></font>';\n    }\n\n    \n    public function hasResults()\n    {\n        \n        $row = $this->result->fetch(PDO::FETCH_ASSOC);\n\n        if(is_array($row)) {\n                \n            return true;\n            \n        }else{\n            return false;\n        }\n        \n    }\n\n    /**\n     * This function will generate a pdo binding string (\":editors0,:editors1,:editors2,:editors3\") to be used in a PDO\n     * query that uses the IN() clause, to assist in proper PDO array bindings to avoid SQL injection.\n     *\n     * A counted for loop is user rather than foreach with a key to avoid issues if the array passed has any\n     * arbitrary keys\n     *\n     * @param $name string\n     * @param $count int\n     * @return string\n     */\n    public static function arrayToPdoBindingString($name, $count)\n    {\n        $bindingStatement = \"\";\n        for ($i = 0; $i < $count; $i++) {\n            $bindingStatement .= \":\" . $name . $i;\n            if ($i != $count-1) {\n                $bindingStatement .= \",\";\n            }\n        }\n\n        return $bindingStatement;\n    }\n\n}\n", "<?php\n\nnamespace leantime\\domain\\repositories {\n\n    use leantime\\core;\n    use pdo;\n\n    class tickets\n    {\n\n        /**\n         * @access public\n         * @var    object\n         */\n        public $result = null;\n\n        /**\n         * @access public\n         * @var    object\n         */\n        public $tickets = null;\n\n        /**\n         * @access private\n         * @var    object\n         */\n        private $db='';\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusClasses = array('3' => 'label-info', '1' => 'label-important', '4' => 'label-warning', '2' => 'label-warning', '0' => 'label-success', \"-1\" =>\"label-default\");\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusNumByKey = array('NEW' => 3, 'ERROR' => 1, 'INPROGRESS' => 4, 'APPROVAL' => 2, 'FINISHED' => 0, \"ARCHIVED\" =>-1);\n\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $statusList = array(\n            '3' => 'status.new', //New\n            '1' => 'status.blocked', //In Progress\n            '4' => 'status.in_progress', //In Progress\n            '2' => 'status.waiting_for_approval', //In Progress\n            '0' => 'status.done', //Done\n            '-1' => 'status.archived' //Done\n        );\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $priority = array('1' => 'Critical', '2' => 'High', '3' => 'Medium', '4' => 'Low');\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $efforts = array('1' => 'XS', '2' => 'S', 3=>\"M\", \"5\"=>\"L\", 8 => \"XL\", 13 => \"XXL\");\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $type = array('task', 'story', 'bug');\n\n        /**\n         * @access public\n         * @var    array\n         */\n        public $typeIcons = array('story' => 'fa-book', 'task' => 'fa-check-square', 'bug' => 'fa-bug');\n\n        /**\n         * @access private\n         * @var    integer\n         */\n        private $page = 0;\n\n        /**\n         * @access public\n         * @var    integer\n         */\n        public $rowsPerPage = 10;\n\n        /**\n         * @access private\n         * @var    string\n         */\n        private $limitSelect = \"\";\n\n        /**\n         * @access numPages\n         * @var    unknown_type\n         */\n        public $numPages='';\n\n        /**\n         * @access public\n         * @var    string\n         */\n        public $sortBy = 'date';\n\n        private $language = \"\";\n\n        /**\n         * __construct - get db connection\n         *\n         * @access public\n         * @return unknown_type\n         */\n        public function __construct()\n        {\n\n            $this->db = core\\db::getInstance();\n            $this->language = new core\\language();\n\n        }\n\n        public function getStateLabels()\n        {\n            //Todo: Remove!\n            unset($_SESSION[\"projectsettings\"][\"ticketlabels\"]);\n\n            if(isset($_SESSION[\"projectsettings\"][\"ticketlabels\"])) {\n\n                return $_SESSION[\"projectsettings\"][\"ticketlabels\"];\n\n            }else{\n\n                $sql = \"SELECT\n\t\t\t\t\t\tvalue\n\t\t\t\tFROM zp_settings WHERE `key` = :key\n\t\t\t\tLIMIT 1\";\n\n                $stmn = $this->db->database->prepare($sql);\n                $stmn->bindvalue(':key', \"projectsettings.\".$_SESSION['currentProject'].\".ticketlabels\", PDO::PARAM_STR);\n\n                $stmn->execute();\n                $values = $stmn->fetch();\n                $stmn->closeCursor();\n\n                $labels = array();\n\n                //preseed state labels with default values\n                foreach($this->statusList as $key=>$label) {\n                    $labels[$key] = array(\n                        \"name\" => $this->language->__($label),\n                        \"class\" => $this->statusClasses[$key]\n                    );\n                }\n\n                //Override the state values that are in the db\n                if($values !== false) {\n\n                    foreach(unserialize($values['value']) as $key=>$label) {\n\n                        //Custom key in the database represents the string value. Needs to be translated to numeric status value\n                        if(!is_int($key)) {\n                            $numericKey = $this->statusNumByKey[$key];\n                        }else{\n                            $numericKey = $key;\n                        }\n\n                        $labels[$numericKey] = array(\n                            \"name\" => $label,\n                            \"class\" => $this->statusClasses[$numericKey]\n                        );\n                    }\n\n                }\n\n                $_SESSION[\"projectsettings\"][\"ticketlabels\"] = $labels;\n\n                return $labels;\n\n            }\n        }\n\n        public function getStatusList() {\n            return $this->statusList;\n        }\n        public function getUnreadTickets($userId,$limit = 9999)\n        {\n\n            $read = new read();\n            $unreadTickets = array();\n            $count = 0;\n            $values = $this->getAllBySearch(\"\", \"\", 0);\n\n            foreach ($values as $ticket) {\n                if (!$read->isRead('ticket', $ticket['id'], $userId) && $count < $limit) {\n                    $unreadTickets[] = $ticket;\n                    $count++;\n                }\n            }\n\n            return $unreadTickets;\n        }\n\n        /**\n         * getAll - get all Tickets, depending on userrole\n         *\n         * @access public\n         * @return array\n         */\n        public function getAll($limit = 9999)\n        {\n\n            $id = $_SESSION['userdata']['id'];\n            $users = new users();\n\n            if ($users->isAdmin($id)) {\n                $values = $this->getAdminTickets($limit);\n            } else {\n                $values = $this->getUsersTickets($id, $limit);\n            }\n\n            return $values;\n        }\n\n        public function getUsersTickets($id,$limit)\n        {\n\n            $sql = \"SELECT\n\t\t\t\t\t\tticket.id,\n\t\t\t\t\t\tticket.headline,\n\t\t\t\t\t\tticket.type, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tticket.date,\n\t\t\t\t\t\tticket.dateToFinish,\n\t\t\t\t\t\tticket.projectId,\n\t\t\t\t\t\tticket.priority,\n\t\t\t\t\t\tticket.status,\n\t\t\t\t\t\tproject.name as projectName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\tFROM \n\t\t\t\tzp_tickets AS ticket\n\t\t\t\tLEFT JOIN zp_relationuserproject ON ticket.projectId = zp_relationuserproject.projectId\n\t\t\t\tLEFT JOIN zp_projects as project ON ticket.projectId = project.id  \n\t\t\t\tLEFT JOIN zp_clients as client ON project.clientId = client.id\n\t\t\t\tLEFT JOIN zp_user AS t1 ON ticket.userId = t1.id\n\t\t\t\tLEFT JOIN zp_user AS t2 ON ticket.editorId = t2.id\n\t\t\t\t\t\t\t\t\n\t\t\t\tWHERE zp_relationuserproject.userId = :id AND ticket.type <> 'Milestone' AND ticket.type <> 'Subtask'\n\t\t\t\tGROUP BY ticket.id\n\t\t\t\tORDER BY ticket.id DESC\";\n\n            if($limit > -1) {\n                $sql .= \" LIMIT :limit\";\n            }\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            if($limit > -1) {\n                $stmn->bindValue(':limit', $limit, PDO::PARAM_INT);\n            }\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        public function getAdminTickets($limit)\n        {\n\n            $sql = \"SELECT\n\t\t\t\t\t\tDistinct(ticket.id),\n\t\t\t\t\t\tticket.headline,\n\t\t\t\t\t\tticket.type, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tticket.date,\n\t\t\t\t\t\tticket.dateToFinish,\n\t\t\t\t\t\tticket.projectId,\n\t\t\t\t\t\tticket.priority,\n\t\t\t\t\t\tticket.status,\n\t\t\t\t\t\tproject.name as projectName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tclient.name as clientName,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\tFROM zp_user as user\n\t\t\t\tINNER JOIN zp_clients as client ON user.clientId = client.id\n\t\t\t\t\tRIGHT JOIN zp_projects as project ON client.id = project.clientId  \n\t\t\t\t\tRIGHT JOIN zp_tickets as ticket ON project.id = ticket.projectId \n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON ticket.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON ticket.editorId = t2.id\n\t\t\t\tORDER BY ticket.id DESC\n\t\t\t\tLIMIT :limit\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindvalue(':limit', $limit, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function buildJSONTimeline($id)\n        {\n\n            $path = $_SERVER['DOCUMENT_ROOT'].\"/userdata/timeline/\";\n            $file = \"timeline-\". $id .\".json\";\n            $sql = \"SELECT \n\t\t\t\t\t\tth.changeType, th.changeValue, th.dateModified, th.userId, \n\t\t\t\t\t\tticket.headline, ticket.description,\n\t\t\t\t\t\tuser.firstname, user.lastname \n\t\t\t\t\tFROM zp_tickethistory as th\n\t\t\t\t\tINNER JOIN zp_user as user ON th.userId = user.id\n\t\t\t\t\tINNER JOIN zp_tickets as ticket ON th.ticketId = ticket.id\n\t\t\t\t\tWHERE ticketId = :ticketId\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            $response = array();\n            $posts = array();\n            foreach ($values as $value) {\n                $description = $value['description'];\n                $posts[] = array(\n                    'headline'     => $value['headline'],\n                    'text'        => $value['description'],\n                    'startDate'    => $value['dateModified'],\n                    'asset' => array('caption' => 'Test', 'media' => '', 'credit' => '')\n                );\n            }\n\n            $response['timeline'] = array('headline' => 'Ticket #'.$id, 'type' => 'default', 'text' => $description, 'date' => $posts);\n\n            $fh = fopen($path.$file, 'w');\n            fwrite($fh, json_encode($response));\n            fclose($fh);\n\n        }\n\n        public function changeStatus($id,$status)\n        {\n\n            $newValues = array();\n            $newValues['status'] = $status;\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $newValues);\n\n\n            $sql = \"UPDATE zp_tickets SET status=:status WHERE id=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':status', $status, PDO::PARAM_STR);\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n        public function updateDates($id,$start,$end)\n        {\n\n\n\n            $sql = \"UPDATE zp_tickets SET editFrom=:start, editTo=:end WHERE id=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':start', $start, PDO::PARAM_STR);\n            $stmn->bindValue(':end', $end, PDO::PARAM_STR);\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n        public function patchTicket($id,$params)\n        {\n\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $params);\n\n            $sql = \"UPDATE zp_tickets SET \";\n\n            foreach($params as $key=>$value){\n                $sql .= \"\".$key.\"=:\".$key.\", \";\n            }\n\n            $sql .= \"id=:id WHERE id=:id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            foreach($params as $key=>$value){\n                $stmn->bindValue(':'.$key, $value, PDO::PARAM_STR);\n            }\n\n            $return = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $return;\n        }\n\n\n\n\n\n        /**\n         * getTicketCost - adds up how much the current cost of the ticket is\n         *\n         * @param  id\n         * @return int\n         */\n        public function getTicketCost($id)\n        {\n\n            $query = \"SELECT * FROM `zp_timesheets` WHERE ticketId=:id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            $total = 0;\n\n            foreach($values as $times) {\n\n                $users = new users();\n\n                $user = $users->getUser($times['userId']);\n\n                $wage = $user['wage'];\n\n                $total += ($wage * $times['hours']);\n\n            }\n\n            return $total;\n        }\n\n        public function countMyTickets($id)\n        {\n\n            $sql = 'SELECT count(*) as count FROM zp_tickets \n\t\t\t\tWHERE editorId LIKE \"%'.$id.'%\"';\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->execute();\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['count'];\n        }\n\n        public function getAssignedTickets($id,$limit=null)\n        {\n\n            $sql = 'SELECT id, headline, dateToFinish FROM zp_tickets \n\t\t\t\tWHERE editorId LIKE \"%'.$id.'%\" ORDER BY id DESC';\n\n            if($limit!=null) {\n                $sql .= \" LIMIT :limit\";\n            }\n\n            $stmn = $this->db->database->prepare($sql);\n\n            if ($limit!=null) {\n                $stmn->bindValue(':limit', $limit, PDO::PARAM_INT);\n            }\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        /**\n         * getUSerTickets - get Tickets related to a user and state\n         *\n         * @param  $status\n         * @param  $id\n         * @return array\n         */\n        public function getUserTickets($status, $id)\n        {\n            $query = \"SELECT\n\t\t\t\t\t\tSQL_CALC_FOUND_ROWS\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\tt2.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tJOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\t\n\t\t\t\t\tWHERE \n\t\t\t\t\t\t(zp_tickets.userId = '\".$id.\"'\n\t\t\t\t\t\t\tOR\n\t\t\t\t\t\tzp_tickets.editorId = '\".$id.\"')\n\t\t\t\t\tAND zp_tickets.status IN( \".$status.\" )\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\n\t\t\t\t\t\t\n\t\t\t\t\tORDER BY \".$this->sortBy.\" DESC \".$this->limitSelect.\"\";\n\n            $this->db->dbQuery($query);\n\n            return $this->db->dbFetchResults();\n        }\n\n        public function getAvailableUsersForTicket()\n        {\n            /*\n             *  A user is not an \"editor\"\n            $sql = \"SELECT\n                        Distinct(projectRelation.userId),\n                        user.username, user.firstname, user.lastname, user.id\n                    FROM zp_relationuserproject as projectRelation\n                    INNER JOIN zp_user as user ON projectRelation.userId = user.id\n                    WHERE projectId=:id\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $users = $stmn->fetchAll();\n            $stmn->closeCursor();\n            */\n\n            //Get the projects the current user is assigned to\n\n            $sql = \"SELECT \n\t\t\t\t\tDISTINCT user.username, \n\t\t\t\t\tuser.firstname, \n\t\t\t\t\tuser.lastname, \n\t\t\t\t\tuser.id \n\t\t\t\tFROM zp_user as user \n\t\t\t\tJOIN zp_relationuserproject ON user.id = zp_relationuserproject.userId\n\t\t\t\t\n\t\t\t\tWHERE zp_relationuserproject.projectId IN \n\t\t\t\t(\n\t\t\t\t\tSELECT \n\t\t\t\t\t\tzp_relationuserproject.projectId \n\t\t\t\t\tFROM zp_relationuserproject WHERE userId = \".$_SESSION['userdata'][\"id\"].\"\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n\n            $stmn->execute();\n            $admin = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $admin;\n        }\n\n        /**\n         * getNumPages - get REAL number of pages even with LIMIT in SELECT-statement\n         *\n         * @access public\n         * @return integer\n         */\n        public function getNumPages()\n        {\n\n            $row = $this->db->dbQuery(\"SELECT FOUND_ROWS()\")->dbFetchResults();\n\n            $numRows = (int)$row[0]['FOUND_ROWS()'];\n\n            $numPages = ceil($numRows / $this->rowsPerPage);\n\n            return $numPages;\n        }\n\n        /**\n         * pageLimiter - set the LIMIT-statement for a query\n         *\n         * @access public\n         */\n        public function pageLimiter()\n        {\n\n            $this->limitSelect = \" LIMIT 0, 10\";\n\n            $begin = $this->page * $this->rowsPerPage;\n\n            $end = $this->rowsPerPage;\n\n            $this->limitSelect = \" LIMIT \".$begin.\", \".$end.\"\";\n\n        }\n\n        /**\n         * setPage - set the page that is displayed\n         *\n         * @access public\n         * @param  $page\n         */\n        public function setPage($page)\n        {\n            if(is_numeric($page) && $page > 0) {\n                $this->page = $page - 1;\n            }else{\n                $this->page = 0;\n            }\n        }\n\n        /**\n         * setRowsPerPage - set the rows that are displayed per page\n         *\n         * @access public\n         * @param  $rows\n         */\n        public function setRowsPerPage($rows)\n        {\n\n            if(is_numeric($page) === true) {\n\n                $this->rowsPerPage = $rows;\n\n            }\n        }\n\n        /**\n         * getAllBySearch - get Tickets by a serach term and/or a filter\n         *\n         * @access public\n         * @param  $term\n         * @param  $filter\n         * @return array\n         */\n        public function getAllBySearch($term, $filter, $closedTickets = 1)\n        {\n\n            if($filter == ''  && $term != '') {\n\n                $whereClause = \"AND (zp_tickets.id LIKE:term OR :term IN(zp_tickets.tags) OR zp_tickets.headline LIKE :term OR zp_tickets.description LIKE :term)\";\n\n            }elseif($filter != '' && $term == '') {\n\n                $whereClause = \"AND (zp_tickets.projectId = :filter)\";\n\n            }elseif($filter != '' && $term != '') {\n\n                $whereClause = \"AND ((zp_tickets.id LIKE :term OR :term IN(zp_tickets.tags) OR zp_tickets.headline LIKE :term OR zp_tickets.description LIKE :term) AND (zp_tickets.projectId = :filter))\";\n            }else {\n                $whereClause = \"\";\n            }\n\n            if($closedTickets == 0) {\n                $whereClause .= \" AND zp_tickets.status <> 0 \";\n            }\n\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\t\tzp_tickets.sortindex,\n\t\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\t\tzp_tickets.dependingTicketId,\n\t\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\t\tzp_clients.id AS clientId,\n\t\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\t\tt2.lastname AS editorLastname,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_comment.id) AS commentCount,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_file.id) AS fileCount\n\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\t\tLEFT JOIN zp_relationuserproject USING (projectId)\n\t\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\t\tLEFT JOIN zp_comment ON zp_tickets.id = zp_comment.moduleId and zp_comment.module = 'ticket'\n\t\t\t\t\t\t\tLEFT JOIN zp_file ON zp_tickets.id = zp_file.moduleId and zp_file.module = 'ticket'\n\t\t\t\t\t\t\tWHERE zp_relationuserproject.userId = :userId AND (zp_projects.state > '-1' OR zp_projects.state IS NULL)\n\t\t\t\t\t\t \".$whereClause .\"\n\t\t\t\t\t\tGROUP BY zp_tickets.id ORDER BY date DESC\";\n\n\n            $stmn = $this->db->database->prepare($query);\n\n            if($term != '') {\n                $stmn->bindValue(':term', \"%\".$term.\"%\", PDO::PARAM_STR);\n            }\n\n            if($filter != '') {\n                $stmn->bindValue(':filter', $filter, PDO::PARAM_STR);\n            }\n\n\n            $stmn->bindValue(':userId', $_SESSION['userdata']['id'], PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n\n            return $values;\n\n        }\n\n        /**\n         * getAllBySearchCriteria - get Tickets by a serach term and/or a filter\n         *\n         * @access public\n         * @param  $criteria array\n         * @param  $filter\n         * @return array\n         */\n        public function getAllBySearchCriteria($searchCriteria, $sort='standard')\n        {\n\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\t\tzp_sprints.name as sprintName,\n\t\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\t\tzp_tickets.sortindex,\n\t\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\t\tzp_tickets.dependingTicketId,\n\t\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\t\tSUM(timesheets.hours) AS bookedHours,\n\t\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\t\tzp_clients.id AS clientId,\n\t\t\t\t\t\t\tt1.lastname AS authorLastname,\n\t\t\t\t\t\t\tt1.firstname AS authorFirstname, \n\t\t\t\t\t\t\tt1.profileId AS authorProfileId,\n\t\t\t\t\t\t\tt2.firstname AS editorFirstname,\n\t\t\t\t\t\t\tt2.lastname AS editorLastname,\n\t\t\t\t\t\t\tt2.profileId AS editorProfileId,\n\t\t\t\t\t\t\tmilestone.headline AS milestoneHeadline,\n\t\t\t\t\t\t\tIF((milestone.tags IS NULL OR milestone.tags = ''), '#1b75bb', milestone.tags) AS milestoneColor,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_comment.id) AS commentCount,\n\t\t\t\t\t\t\tCOUNT(DISTINCT zp_file.id) AS fileCount\n\t\t\t\t\t\tFROM \n\t\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\tLEFT JOIN zp_relationuserproject USING (projectId)\n\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t1 ON zp_tickets.userId = t1.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t2 ON zp_tickets.editorId = t2.id\n\t\t\t\t\t\tLEFT JOIN zp_comment ON zp_tickets.id = zp_comment.moduleId and zp_comment.module = 'ticket'\n\t\t\t\t\t\tLEFT JOIN zp_file ON zp_tickets.id = zp_file.moduleId and zp_file.module = 'ticket'\n\t\t\t\t\t\tLEFT JOIN zp_sprints ON zp_tickets.sprint = zp_sprints.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS milestone ON zp_tickets.dependingTicketId = milestone.id AND zp_tickets.dependingTicketId > 0 AND milestone.type = 'milestone'\n\t\t\t\t\t\tLEFT JOIN zp_timesheets AS timesheets ON zp_tickets.id = timesheets.ticketId\n\t\t\t\t\t\tWHERE zp_relationuserproject.userId = :userId AND zp_tickets.type <> 'subtask' AND zp_tickets.type <> 'milestone'\";\n\n            if($_SESSION['currentProject']  != \"\") {\n                $query .= \" AND zp_tickets.projectId = :projectId\";\n            }\n\n\n            if($searchCriteria[\"users\"]  != \"\") {\n                $editorIdIn = core\\db::arrayToPdoBindingString(\"users\", count(explode(\",\", $searchCriteria[\"users\"])));\n                $query .= \" AND zp_tickets.editorId IN(\" . $editorIdIn. \")\";\n            }\n\n            if($searchCriteria[\"milestone\"]  != \"\") {\n                $query .= \" AND zp_tickets.dependingTicketId = :milestoneId\";\n            }\n\n\n            if($searchCriteria[\"status\"]  != \"\") {\n\n                $statusArray = explode(\",\", $searchCriteria['status']);\n                if(array_search(\"not_done\", $statusArray) !== false) {\n                    $query .= \" AND zp_tickets.status > 0\";\n                }else {\n                    $query .= \" AND zp_tickets.status IN('\" . implode(\"','\", explode(\",\", strip_tags($searchCriteria[\"status\"]))) . \"')\";\n                }\n            }\n\n            if($searchCriteria[\"type\"]  != \"\") {\n                $query .= \" AND LOWER(zp_tickets.type) = LOWER(:searchType) \";\n            }\n\n            if($searchCriteria[\"term\"]  != \"\") {\n                $query .= \" AND (FIND_IN_SET(:termStandard, zp_tickets.tags) OR zp_tickets.headline LIKE :termWild OR zp_tickets.description LIKE :termWild OR zp_tickets.id LIKE :termWild)\";\n            }\n\n            if($searchCriteria[\"sprint\"]  > 0 && $searchCriteria[\"sprint\"]  != \"all\") {\n                $query .= \" AND zp_tickets.sprint IN(\".strip_tags($searchCriteria[\"sprint\"]).\")\";\n            }\n\n            if($searchCriteria[\"sprint\"]  == \"backlog\" ) {\n                $query .= \" AND (zp_tickets.sprint IS NULL OR zp_tickets.sprint = '' OR zp_tickets.sprint = -1)\";\n            }\n\n            $query .= \" GROUP BY zp_tickets.id \";\n\n            if($sort == \"standard\") {\n                $query .= \" ORDER BY zp_tickets.sortindex ASC\";\n            }else if($sort == \"kanbansort\") {\n                $query .= \" ORDER BY zp_tickets.kanbanSortIndex ASC\";\n            }else if($sort == \"duedate\") {\n                    $query .= \" ORDER BY zp_tickets.dateToFinish ASC\";\n            }\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':userId', $_SESSION['userdata']['id'], PDO::PARAM_INT);\n\n            if($_SESSION['currentProject'] != \"\") {\n\n                $stmn->bindValue(':projectId', $_SESSION['currentProject'], PDO::PARAM_INT);\n            }\n\n            if($searchCriteria[\"milestone\"]  != \"\") {\n                $stmn->bindValue(':milestoneId', $searchCriteria[\"milestone\"], PDO::PARAM_INT);\n            }\n\n            if($searchCriteria[\"type\"]  != \"\") {\n                $stmn->bindValue(':searchType', $searchCriteria[\"type\"], PDO::PARAM_STR);\n            }\n\n            if($searchCriteria[\"users\"]  != \"\") {\n                foreach(explode(\",\", $searchCriteria[\"users\"]) as $key => $user) {\n                    $stmn->bindValue(\":users\" . $key, $user, PDO::PARAM_STR);\n                }\n            }\n\n            if($searchCriteria[\"term\"]  != \"\") {\n                $termWild = \"%\".$searchCriteria[\"term\"].\"%\";\n                $stmn->bindValue(':termWild', $termWild, PDO::PARAM_STR);\n                $stmn->bindValue(':termStandard', $searchCriteria[\"term\"], PDO::PARAM_STR);\n            }\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllSprintsByProject($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\t\tzp_tickets.sprint\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets \n\t\t\t\t\tWHERE  \n\t\t\t\t\t\tzp_tickets.projectId = :projectId AND zp_tickets.sprint <> ''\n\t\t\t\t\tGROUP BY zp_tickets.sprint ORDER BY zp_tickets.sprint ASC\";\n\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function updateTicketSorting($project, $ticketSorting)\n        {\n\n            $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET sortindex = :sortIndex,\n\t\t\t\t\tsprint = :sprint\n\t\t\t\t\tWHERE projectId = :projectId AND id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n            foreach($ticketSorting as $ticket){\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':projectId', $project, PDO::PARAM_INT);\n                $stmn->bindValue(':sortIndex', $ticket[\"sortIndex\"], PDO::PARAM_INT);\n                $stmn->bindValue(':sprint', $ticket[\"sprint\"], PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticket[\"id\"], PDO::PARAM_INT);\n                $stmn->execute();\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        public function updateTicketStatus($ticketId, $status, $ticketSorting=-1)\n        {\n\n            if($ticketSorting > -1) {\n\n                $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET \n\t\t\t\t\t\tkanbanSortIndex = :sortIndex,\n\t\t\t\t\t\tstatus = :status\n\t\t\t\t\tWHERE id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':status', $status, PDO::PARAM_INT);\n                $stmn->bindValue(':sortIndex', $ticketSorting, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                return $stmn->execute();\n\n            }else{\n\n                $query = \"UPDATE zp_tickets\n\t\t\t\t\tSET \n\t\t\t\t\t\tstatus = :status\n\t\t\t\t\tWHERE id = :ticketId\n\t\t\t\t\tLIMIT 1\";\n\n\n                $stmn = $this->db->database->prepare($query);\n                $stmn->bindValue(':status', $status, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                return $stmn->execute();\n\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        /**\n         *\n         * @access public\n         * @param  id\n         */\n        public function sendAlert($id)\n        {\n\n            $mail = new mailer();\n            $user = new users();\n\n            // send alert email !\n            $row = $user->getUser($id);\n\n            $emailTo = $row['user'];\n\n            $to[] = $emailTo;\n\n            $subject = \"Alert: Hours spent have exceeded planned hours\";\n\n            $mail->setSubject($subject);\n\n            $text = \"Hello \".$emailTo.\",\n\t\t\t\t\t\t\t\t\n\t\t\tThis is a friendly reminder that you have surpassed\n\t\t\t\t\t\t\t\t\n\t\t\tthe estimated hours for this project. While we \n\t\t\t\t\t\t\t\t\t\n\t\t\tunderstand it is impossible to meet every deadline\n\t\t\t\t\t\t\t\t\t\n\t\t\twe encourage you to be as diligent as possible with\n\t\t\t\t\t\t\t\t\t\n\t\t\tyour workload.\";\n\n            $mail->setText($text);\n\n            $mail->sendMail($to);\n\n        }\n\n        public function addTicketChange($userId,$ticketId,$values)\n        {\n\n            $fields = array(\n                'headline' => 'headline',\n                'type' => 'type',\n                'description' => 'description',\n                'project' => 'projectId',\n                'priority' => 'priority',\n                'deadline' => 'dateToFinish',\n                'editors' => 'editorId',\n                'fromDate' => 'editFrom',\n                'toDate' => 'editTo',\n                'staging' => 'staging',\n                'production' => 'production',\n                'planHours'    => 'planHours',\n                'status' => 'status');\n\n            $changedFields = array();\n\n            $sql = \"SELECT * FROM zp_tickets WHERE id=:ticketId LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $oldValues = $stmn->fetch();\n            $stmn->closeCursor();\n\n            // compare table\n            foreach($fields as $enum => $dbTable) {\n\n                if (isset($values[$dbTable]) === true && ($oldValues[$dbTable] != $values[$dbTable]) && ($values[$dbTable] != \"\")) {\n                    $changedFields[$enum] = $values[$dbTable];\n                }\n\n            }\n\n            $sql = \"INSERT INTO zp_tickethistory (\n\t\t\t\t\tuserId, ticketId, changeType, changeValue, dateModified\n\t\t\t\t) VALUES (\n\t\t\t\t\t:userId, :ticketId, :changeType, :changeValue, NOW()\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            foreach ($changedFields as $field => $value) {\n\n                $stmn->bindValue(':userId', $userId, PDO::PARAM_INT);\n                $stmn->bindValue(':ticketId', $ticketId, PDO::PARAM_INT);\n                $stmn->bindValue(':changeType', $field, PDO::PARAM_STR);\n                $stmn->bindValue(':changeValue', $value, PDO::PARAM_STR);\n                $stmn->execute();\n            }\n\n            $stmn->closeCursor();\n\n        }\n\n        /**\n         * getTicket - get a specific Ticket depending on the role\n         *\n         * @access public\n         * @param  $id\n         * @return \\leantime\\domain\\models\\tickets|bool\n         */\n        public function getTicket($id)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets LEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.id = :ticketId\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\t\t\t\t\t\t\n\t\t\t\t\tLIMIT 1\";\n\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchObject('\\leantime\\domain\\models\\tickets');\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllSubtasks($id)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets LEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.dependingTicketId = :ticketId AND zp_tickets.type = 'subtask'\n\t\t\t\t\tGROUP BY\n\t\t\t\t\t\tzp_tickets.id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getAllMilestones($projectId, $includeArchived =false)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tdepMilestone.headline AS milestoneHeadline,\n\t\t\t\t\t\tIF((depMilestone.tags IS NULL OR depMilestone.tags = ''), '#1b75bb', depMilestone.tags) AS milestoneColor,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tIF((zp_tickets.tags IS NULL OR zp_tickets.tags = ''), '#1b75bb', zp_tickets.tags) AS tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId,\t\t\t\t\t\n\t\t\t\t\t\tzp_projects.name AS projectName,\n\t\t\t\t\t\tzp_clients.name AS clientName,\n\t\t\t\t\t\tzp_user.firstname AS userFirstname,\n\t\t\t\t\t\tzp_user.lastname AS userLastname,\n\t\t\t\t\t\tt3.firstname AS editorFirstname,\n\t\t\t\t\t\tt3.lastname AS editorLastname,\n\t\t\t\t\t\tt3.profileId AS editorProfileId,\n\t\t\t\t\t\tSUM(progressTickets.planHours) AS planHours,\n\t\t\t\t\t\tSUM(progressTickets.hourRemaining) AS hourRemaining,\n\t\t\t\t\t\tSUM(timesheets.hours) AS bookedHours,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN 1 ELSE 0 END) AS doneTickets,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN 0 ELSE IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)  END) AS openTicketsEffort,\n\t\t\t\t\t\tSUM(CASE WHEN progressTickets.status < 1 THEN IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints) ELSE 0 END) AS doneTicketsEffort,\n\t\t\t\t\t\tSUM(IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)) AS allTicketsEffort,\n\t\t\t\t\t\tCOUNT(progressTickets.id) AS allTickets,\n\t\t\t\t\t\t\n\t\t\t\t\t\tCASE WHEN \n\t\t\t\t\t\t  COUNT(progressTickets.id) > 0 \n\t\t\t\t\t\tTHEN \n\t\t\t\t\t\t  ROUND(SUM(CASE WHEN progressTickets.status < 1 THEN IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints) ELSE 0 END) / SUM(IF(progressTickets.storypoints = 0, 3, progressTickets.storypoints)) *100) \n\t\t\t\t\t\tELSE \n\t\t\t\t\t\t  0 \n\t\t\t\t\t\tEND AS percentDone\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets \n\t\t\t\t\t\tLEFT JOIN zp_projects ON zp_tickets.projectId = zp_projects.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS depMilestone ON zp_tickets.dependingTicketId = depMilestone.id \n\t\t\t\t\t\tLEFT JOIN zp_clients ON zp_projects.clientId = zp_clients.id\n\t\t\t\t\t\tLEFT JOIN zp_user ON zp_tickets.userId = zp_user.id\n\t\t\t\t\t\tLEFT JOIN zp_user AS t3 ON zp_tickets.editorId = t3.id\n\t\t\t\t\t\tLEFT JOIN zp_tickets AS progressTickets ON progressTickets.dependingTicketId = zp_tickets.id AND progressTickets.type <> 'Milestone' AND progressTickets.type <> 'Subtask'\n\t\t\t\t\t\tLEFT JOIN zp_timesheets AS timesheets ON progressTickets.id = timesheets.ticketId\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type = 'milestone' AND zp_tickets.projectId = :projectId\";\n\n                if($includeArchived === false) {\n                    $query .= \" AND zp_tickets.status > -1 \";\n                }\n\n\t\t\t\t$query .= \"\tGROUP BY\n\t\t\t\t\t\tprogressTickets.dependingTicketId, zp_tickets.id\n\t\t\t\t\tORDER BY zp_tickets.editFrom ASC\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll(PDO::FETCH_CLASS, 'leantime\\domain\\models\\tickets');\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n        public function getTicketHistory($id)\n        {\n\n            $sql = \"SELECT \n\t\t \tticket.headline, history.userId, history.ticketId, history.changeType, history.changeValue, history.ticketId, history.dateModified,\n\t\t \tuser.firstname, user.lastname\n\t\t FROM zp_tickethistory as history\n\t\t  \tINNER JOIN zp_user as user ON history.userId = user.id \n\t\t  \tINNER JOIN zp_tickets as ticket ON history.ticketId = ticket.id\n\t\t WHERE history.ticketId = :ticketId ORDER BY history.id DESC\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':ticketId', $id, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $values = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $values;\n        }\n\n        /**\n         * getStatus - get the Status from the status array\n         *\n         * @access public\n         * @param  $status\n         * @return string\n         */\n        public function getStatus($status)\n        {\n\n            if($status !== null && $status !== '') {\n\n                if(array_key_exists($status, $this->state)=== true) {\n                    return $this->state[$status];\n                }else{\n                    return $this->state[3];\n                }\n\n            }else{\n\n                return $this->state[3];\n            }\n        }\n\n        public function getStatusPlain($status)\n        {\n\n            if($status !== null && $status !== '') {\n\n                return $this->statePlain[$status];\n\n            }else{\n\n                return $this->statePlain[3];\n            }\n        }\n\n        /**\n         * getType - get the Type from the type array\n         *\n         * @access public\n         * @param  $type\n         * @return string\n         */\n        public function getType()\n        {\n            return $this->type;\n        }\n\n\n        /**\n         * getPriority - get the priority from the priority array\n         *\n         * @access public\n         * @param  $priority\n         * @return string\n         */\n        public function getPriority($priority)\n        {\n\n            if($priority !== null && $priority !== '') {\n\n                return $this->priority[$priority];\n\n            }else{\n\n                return $this->priority[1];\n\n            }\n        }\n\n        /**\n         * addTicket - add a Ticket with postback test\n         *\n         * @access public\n         * @param  array $values\n         * @return boolean|int\n         */\n        public function addTicket(array $values)\n        {\n\n\n            $query = \"INSERT INTO zp_tickets (\n\t\t\t\t\t\theadline, \n\t\t\t\t\t\ttype, \n\t\t\t\t\t\tdescription, \n\t\t\t\t\t\tdate, \n\t\t\t\t\t\tdateToFinish, \n\t\t\t\t\t\tprojectId, \n\t\t\t\t\t\tstatus, \n\t\t\t\t\t\tuserId, \n\t\t\t\t\t\ttags, \n\t\t\t\t\t\tsprint,\n\t\t\t\t\t\tstorypoints,\n\t\t\t\t\t\thourRemaining,\n\t\t\t\t\t\tplanHours,\n\t\t\t\t\t\tacceptanceCriteria,\n\t\t\t\t\t\teditFrom, \n\t\t\t\t\t\teditTo, \n\t\t\t\t\t\teditorId,\n\t\t\t\t\t\tdependingTicketId\n\t\t\t\t) VALUES (\n\t\t\t\t\t\t:headline,\n\t\t\t\t\t\t:type,\n\t\t\t\t\t\t:description,\n\t\t\t\t\t\t:date,\n\t\t\t\t\t\t:dateToFinish,\n\t\t\t\t\t\t:projectId,\n\t\t\t\t\t\t:status,\n\t\t\t\t\t\t:userId,\n\t\t\t\t\t\t:tags,\n\t\t\t\t\t\t:sprint,\n\t\t\t\t\t\t:storypoints,\n\t\t\t\t\t\t:hourRemaining,\n\t\t\t\t\t\t:planHours,\n\t\t\t\t\t\t:acceptanceCriteria,\n\t\t\t\t\t\t:editFrom,\n\t\t\t\t\t\t:editTo,\n\t\t\t\t\t\t:editorId,\n\t\t\t\t\t\t:dependingTicketId\n\t\t\t\t)\";\n\n            $stmn = $this->db->database->prepare($query);\n\n            $stmn->bindValue(':headline', $values['headline'], PDO::PARAM_STR);\n            $stmn->bindValue(':type', $values['type'], PDO::PARAM_STR);\n            $stmn->bindValue(':description', $values['description'], PDO::PARAM_STR);\n            $stmn->bindValue(':date', $values['date'], PDO::PARAM_STR);\n            $stmn->bindValue(':dateToFinish', $values['dateToFinish'], PDO::PARAM_STR);\n            $stmn->bindValue(':projectId', $values['projectId'], PDO::PARAM_STR);\n            $stmn->bindValue(':status', $values['status'], PDO::PARAM_STR);\n            $stmn->bindValue(':userId', $values['userId'], PDO::PARAM_STR);\n            $stmn->bindValue(':tags', $values['tags'], PDO::PARAM_STR);\n\n            $stmn->bindValue(':sprint', $values['sprint'], PDO::PARAM_STR);\n            $stmn->bindValue(':storypoints', $values['storypoints'], PDO::PARAM_STR);\n            $stmn->bindValue(':hourRemaining', $values['hourRemaining'], PDO::PARAM_STR);\n            $stmn->bindValue(':planHours', $values['planHours'], PDO::PARAM_STR);\n            $stmn->bindValue(':acceptanceCriteria', $values['acceptanceCriteria'], PDO::PARAM_STR);\n\n            $stmn->bindValue(':editFrom', $values['editFrom'], PDO::PARAM_STR);\n            $stmn->bindValue(':editTo', $values['editTo'], PDO::PARAM_STR);\n            $stmn->bindValue(':editorId', $values['editorId'], PDO::PARAM_STR);\n\n            if(isset($values['dependingTicketId'])) {\n                $depending = $values['dependingTicketId'];\n            }else{\n                $depending = \"\";\n            }\n\n            $stmn->bindValue(':dependingTicketId', $depending, PDO::PARAM_STR);\n\n            $stmn->execute();\n\n            $stmn->closeCursor();\n\n            return $this->db->database->lastInsertId();\n\n        }\n\n        /**\n         * updateTicket - Update Ticketinformation\n         *\n         * @access public\n         * @param  array $values\n         * @param  $id\n         */\n        public function updateTicket(array $values, $id)\n        {\n\n            $this->addTicketChange($_SESSION['userdata']['id'], $id, $values);\n\n            $query = \"UPDATE zp_tickets\n\t\t\tSET \n\t\t\t\theadline = :headline,\n\t\t\t\ttype = :type,\n\t\t\t\tdescription=:description,\n\t\t\t\tprojectId=:projectId, \n\t\t\t\tstatus = :status,\t\t\t\n\t\t\t\tdateToFinish = :dateToFinish,\n\t\t\t\tsprint = :sprint,\n\t\t\t\tstorypoints = :storypoints,\n\t\t\t\thourRemaining = :hourRemaining,\n\t\t\t\tplanHours = :planHours,\n\t\t\t\ttags = :tags,\n\t\t\t\teditorId = :editorId,\n\t\t\t\teditFrom = :editFrom,\n\t\t\t\teditTo = :editTo,\n\t\t\t\tacceptanceCriteria = :acceptanceCriteria,\n\t\t\t\tdependingTicketId = :dependingTicketId\n\t\t\tWHERE id = :id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n\n            $stmn->bindValue(':headline', $values['headline'], PDO::PARAM_STR);\n            $stmn->bindValue(':type', $values['type'], PDO::PARAM_STR);\n            $stmn->bindValue(':description', $values['description'], PDO::PARAM_STR);\n            $stmn->bindValue(':projectId', $values['projectId'], PDO::PARAM_STR);\n            $stmn->bindValue(':status', $values['status'], PDO::PARAM_STR);\n            $stmn->bindValue(':dateToFinish', $values['dateToFinish'], PDO::PARAM_STR);\n            $stmn->bindValue(':sprint', $values['sprint'], PDO::PARAM_STR);\n            $stmn->bindValue(':storypoints', $values['storypoints'], PDO::PARAM_STR);\n            $stmn->bindValue(':hourRemaining', $values['hourRemaining'], PDO::PARAM_STR);\n            $stmn->bindValue(':acceptanceCriteria', $values['acceptanceCriteria'], PDO::PARAM_STR);\n            $stmn->bindValue(':planHours', $values['planHours'], PDO::PARAM_STR);\n            $stmn->bindValue(':tags', $values['tags'], PDO::PARAM_STR);\n            $stmn->bindValue(':editorId', $values['editorId'], PDO::PARAM_STR);\n            $stmn->bindValue(':editFrom', $values['editFrom'], PDO::PARAM_STR);\n            $stmn->bindValue(':editTo', $values['editTo'], PDO::PARAM_STR);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':dependingTicketId', $values['dependingTicketId'], PDO::PARAM_STR);\n\n\n            $result = $stmn->execute();\n\n            $stmn->closeCursor();\n\n            return $result;\n        }\n\n        /**\n         * delTicket - delete a Ticket and all dependencies\n         *\n         * @access public\n         * @param  $id\n         */\n        public function delticket($id)\n        {\n\n            $query = \"DELETE FROM zp_tickets WHERE id = '\".$id.\"'\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $result = $stmn->execute();\n            $stmn->closeCursor();\n\n            return $result;\n\n        }\n\n        public function delMilestone($id)\n        {\n\n            $query = \"UPDATE zp_tickets\n                SET \n                    dependingTicketId = ''\n                WHERE dependingTicketId = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n\n            $query = \"UPDATE zp_canvas_items\n                SET \n                    milestoneId = ''\n                WHERE milestoneId = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n\n            $query = \"DELETE FROM zp_tickets WHERE id = :id\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->execute();\n\n            return true;\n\n        }\n\n\n        /**\n         * Checks whether a user has access to a ticket or not\n         */\n        public function getAccessRights($id)\n        {\n\n            $sql = \"SELECT \n\t\t\t\t\n\t\t\t\tzp_relationuserproject.userId\n\t\t\t\t\n\t\t\tFROM zp_tickets\n\t\t\t\n\t\t\tLEFT JOIN zp_relationuserproject ON zp_tickets.projectId = zp_relationuserproject.projectId\n\t\t\t\n\t\t\tWHERE zp_tickets.id=:id AND zp_relationuserproject.userId = :user\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n            $stmn->bindValue(':user', $_SESSION['userdata']['id'], PDO::PARAM_STR);\n\n\n            $stmn->execute();\n            $result = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            if (count($result) > 0) {\n                return true;\n            }else{\n                return false;\n            }\n\n        }\n\n        public function getTimelineHistory($id)\n        {\n\n            $sql = \"SELECT \n\t\t\t\t\t\tth.changeType, \n\t\t\t\t\t\tth.changeValue, \n\t\t\t\t\t\tDATE_FORMAT(th.dateModified, '%Y,%m,%e') AS date, \n\t\t\t\t\t\tth.userId, \n\t\t\t\t\t\tticket.id as ticketId, \n\t\t\t\t\t\tticket.headline, \n\t\t\t\t\t\tticket.description,\n\t\t\t\t\t\tuser.firstname, \n\t\t\t\t\t\tuser.lastname,\n\t\t\t\t\t\tuser.id AS userId\n\t\t\t\t\tFROM zp_tickethistory as th\n\t\t\t\t\tINNER JOIN zp_user as user ON th.userId = user.id\n\t\t\t\t\tINNER JOIN zp_tickets as ticket ON th.ticketId = ticket.id\n\t\t\t\t\tWHERE ticketId = :id\";\n\n            $stmn = $this->db->database->prepare($sql);\n\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $result = $stmn->fetchAll();\n            $stmn->closeCursor();\n\n            return $result;\n\n        }\n\n        public function getTicketUsers($id)\n        {\n\n            $sql = \"SELECT \t\n\t\t\t\t\t\tuser.username AS authorEditor,\n\t\t\t\t\t\teditors.username AS editorEmail\n\t\t\t\t\t\n\t\t\t\t\tFROM zp_tickets AS tickets\n\t\t\t\t\tLEFT JOIN zp_user AS user ON tickets.userId = user.id AND (user.notifications = 1 || user.notifications IS NULL)\n\t\t\t\t\tLEFT JOIN zp_user AS editors ON tickets.editorId = editors.id AND (editors.notifications = 1 || editors.notifications IS NULL)\n\t\t\t\t\t\n\t\t\t\t\tWHERE tickets.id = :id LIMIT 1\";\n\n            $stmn = $this->db->database->prepare($sql);\n            $stmn->bindValue(':id', $id, PDO::PARAM_STR);\n\n            $stmn->execute();\n            $result = $stmn->fetch();\n            $stmn->closeCursor();\n\n            $to = array();\n\n            if($result[\"authorEditor\"] != \"\") {\n                $to[] = $result[\"authorEditor\"];\n            }\n\n            if($result[\"editorEmail\"] != \"\" && $result[\"editorEmail\"] != $result[\"authorEditor\"]) {\n                $to[] = $result[\"editorEmail\"];\n            }\n\n            return $to;\n        }\n\n        public function getFirstTicket($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tzp_tickets.id,\n\t\t\t\t\t\tzp_tickets.headline, \n\t\t\t\t\t\tzp_tickets.type,\n\t\t\t\t\t\tzp_tickets.description,\n\t\t\t\t\t\tzp_tickets.date,\n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.date, '%Y,%m,%e') AS timelineDate, \n\t\t\t\t\t\tDATE_FORMAT(zp_tickets.dateToFinish, '%Y,%m,%e') AS timelineDateToFinish, \n\t\t\t\t\t\tzp_tickets.dateToFinish,\n\t\t\t\t\t\tzp_tickets.projectId,\n\t\t\t\t\t\tzp_tickets.priority,\n\t\t\t\t\t\tzp_tickets.status,\n\t\t\t\t\t\tzp_tickets.sprint,\n\t\t\t\t\t\tzp_tickets.storypoints,\n\t\t\t\t\t\tzp_tickets.hourRemaining,\n\t\t\t\t\t\tzp_tickets.acceptanceCriteria,\n\t\t\t\t\t\tzp_tickets.userId,\n\t\t\t\t\t\tzp_tickets.editorId,\n\t\t\t\t\t\tzp_tickets.planHours,\n\t\t\t\t\t\tzp_tickets.tags,\n\t\t\t\t\t\tzp_tickets.url,\n\t\t\t\t\t\tzp_tickets.editFrom,\n\t\t\t\t\t\tzp_tickets.editTo,\n\t\t\t\t\t\tzp_tickets.dependingTicketId\n\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n            $stmn->setFetchMode(PDO::FETCH_CLASS, 'leantime\\domain\\models\\tickets');\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values;\n\n        }\n\n\n        public function getNumberOfAllTickets($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tCOUNT(zp_tickets.id) AS allTickets\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allTickets'];\n\n        }\n\n        public function getNumberOfClosedTickets($projectId)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tCOUNT(zp_tickets.id) AS allTickets\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n\t\t\t\t\t\tAND zp_tickets.status < 1\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allTickets'];\n\n        }\n\n        public function getEffortOfClosedTickets($projectId, $averageStorySize)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tSUM(CASE when zp_tickets.storypoints <> '' then zp_tickets.storypoints else :avgStorySize end) AS allEffort\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n\t\t\t\t\t\tAND zp_tickets.status < 1\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n            $stmn->bindValue(':avgStorySize', $averageStorySize, PDO::PARAM_INT);\n\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allEffort'];\n\n        }\n\n        public function getEffortOfAllTickets($projectId, $averageStorySize)\n        {\n\n            $query = \"SELECT\n\t\t\t\t\t\tSUM(CASE when zp_tickets.storypoints <> '' then zp_tickets.storypoints else :avgStorySize end) AS allEffort\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n            $stmn->bindValue(':avgStorySize', $averageStorySize, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['allEffort'];\n\n        }\n\n\n        public function getAverageTodoSize($projectId)\n        {\n            $query = \"SELECT\n\t\t\t\t\t\tAVG(zp_tickets.storypoints) as avgSize\n\t\t\t\t\tFROM \n\t\t\t\t\t\tzp_tickets\n\t\t\t\t\tWHERE \n\t\t\t\t\t\tzp_tickets.type <> 'milestone' AND zp_tickets.type <> 'subtask' AND \n\t\t\t\t\t\t(zp_tickets.storypoints <> '' AND zp_tickets.storypoints IS NOT NULL) AND zp_tickets.projectId = :projectId\n                    ORDER BY\n\t\t\t\t\t    zp_tickets.date ASC\n\t\t\t\t\tLIMIT 1\";\n\n            $stmn = $this->db->database->prepare($query);\n            $stmn->bindValue(':projectId', $projectId, PDO::PARAM_INT);\n\n            $stmn->execute();\n\n            $values = $stmn->fetch();\n            $stmn->closeCursor();\n\n            return $values['avgSize'];\n        }\n\n\n\n\n    }\n\n}\n"], "filenames": ["src/core/class.db.php", "src/domain/tickets/repositories/class.tickets.php"], "buggy_code_start_loc": [261, 808], "buggy_code_end_loc": [261, 867], "fixing_code_start_loc": [262, 809], "fixing_code_end_loc": [286, 876], "type": "CWE-89", "message": "Leantime before versions 2.0.15 and 2.1-beta3 has a SQL Injection vulnerability. The impact is high. Malicious users/attackers can execute arbitrary SQL queries negatively affecting the confidentiality, integrity, and availability of the site. Attackers can exfiltrate data like the users' and administrators' password hashes, modify data, or drop tables. The unescaped parameter is \"searchUsers\" when sending a POST request to \"/tickets/showKanban\" with a valid session. In the code, the parameter is named \"users\" in class.tickets.php. This issue is fixed in versions 2.0.15 and 2.1.0 beta 3.", "other": {"cve": {"id": "CVE-2020-5292", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-31T19:15:14.383", "lastModified": "2020-04-02T17:18:54.670", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Leantime before versions 2.0.15 and 2.1-beta3 has a SQL Injection vulnerability. The impact is high. Malicious users/attackers can execute arbitrary SQL queries negatively affecting the confidentiality, integrity, and availability of the site. Attackers can exfiltrate data like the users' and administrators' password hashes, modify data, or drop tables. The unescaped parameter is \"searchUsers\" when sending a POST request to \"/tickets/showKanban\" with a valid session. In the code, the parameter is named \"users\" in class.tickets.php. This issue is fixed in versions 2.0.15 and 2.1.0 beta 3."}, {"lang": "es", "value": "Leantime versiones anteriores a 2.0.15 y 2.1-beta3, presenta una vulnerabilidad de inyecci\u00f3n SQL. El impacto es alto. Los usuarios y atacantes maliciosos pueden ejecutar consultas SQL arbitrarias afectando negativamente la confidencialidad, integridad y disponibilidad del sitio. Los atacantes pueden filtrar datos como los hash de contrase\u00f1a de los usuarios y administradores, modificar datos o disminuir tablas. El par\u00e1metro no escapado es \"searchUsers\" cuando se env\u00eda una petici\u00f3n POST hacia \"/tickets/showKanban\" con una sesi\u00f3n v\u00e1lida. En el c\u00f3digo, el par\u00e1metro es nombrado \"users\" en el archivo class.tickets.php. Este problema es corregido en las versiones 2.0.15 y 2.1.0 beta 3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:leantime:leantime:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.15", "matchCriteriaId": "53096955-4922-4DF7-862B-1023F1BFBF2B"}]}]}], "references": [{"url": "https://github.com/Leantime/leantime/commit/af0807f0b2c4c3c914b93f1c5d940e6b875f231f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Leantime/leantime/pull/181", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Leantime/leantime/security/advisories/GHSA-ww6x-rhvp-55hp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Leantime/leantime/commit/af0807f0b2c4c3c914b93f1c5d940e6b875f231f"}}