{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Socket;\nuse Glpi\\Toolbox\\DataExport;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n * Search Class\n *\n * Generic class for Search Engine\n **/\nclass Search\n{\n    /**\n     * Default number of items displayed in global search\n     * @var int\n     * @see GLOBAL_SEARCH\n     */\n    const GLOBAL_DISPLAY_COUNT = 10;\n\n   // EXPORT TYPE\n    /**\n     * The global search view (Search across many item types).\n     * This is NOT the same as the AllAssets view which is just a special itemtype.\n     * @var int\n     */\n    const GLOBAL_SEARCH        = -1;\n\n    /**\n     * The standard view.\n     * This includes the following sub-views:\n     * - Table/List\n     * - Map\n     * - Browse\n     * @var int\n     */\n    const HTML_OUTPUT          = 0;\n\n    /**\n     * SYLK export format\n     * @var int\n     */\n    const SYLK_OUTPUT          = 1;\n\n    /**\n     * PDF export format (Landscape mode)\n     * @var int\n     */\n    const PDF_OUTPUT_LANDSCAPE = 2;\n\n    /**\n     * CSV export format\n     * @var int\n     */\n    const CSV_OUTPUT           = 3;\n\n    /**\n     * PDF export format (Portrait mode)\n     * @var int\n     */\n    const PDF_OUTPUT_PORTRAIT  = 4;\n\n    /**\n     * Names list export format\n     * @var int\n     */\n    const NAMES_OUTPUT         = 5;\n\n    /**\n     * Placeholder for a <br> line break\n     * @var string\n     */\n    const LBBR = '#LBBR#';\n\n    /**\n     * Placeholder for a <hr> line break\n     * @var string\n     */\n    const LBHR = '#LBHR#';\n\n    /**\n     * Separator used to separate values of a same element in CONCAT MySQL function.\n     *\n     * @var string\n     * @see LONGSEP\n     */\n    const SHORTSEP = '$#$';\n\n    /**\n     * Separator used to separate each element in GROUP_CONCAT MySQL function.\n     *\n     * @var string\n     * @see SHORTSEP\n     */\n    const LONGSEP  = '$$##$$';\n\n    /**\n     * Placeholder for a null value\n     * @var string\n     */\n    const NULLVALUE = '__NULL__';\n\n    /**\n     * The output format for the search results\n     * @var int\n     */\n    public static $output_type = self::HTML_OUTPUT;\n    public static $search = [];\n\n    /**\n     * Display search engine for an type\n     *\n     * @param string  $itemtype Item type to manage\n     *\n     * @return void\n     **/\n    public static function show($itemtype)\n    {\n\n        $params = self::manageParams($itemtype, $_GET);\n        echo \"<div class='search_page row'>\";\n        TemplateRenderer::getInstance()->display('layout/parts/saved_searches.html.twig', [\n            'itemtype' => $itemtype,\n        ]);\n        echo \"<div class='col search-container'>\";\n\n        if (\n            $itemtype == \"Ticket\"\n            && $default = Glpi\\Dashboard\\Grid::getDefaultDashboardForMenu('mini_ticket', true)\n        ) {\n            $dashboard = new Glpi\\Dashboard\\Grid($default, 33, 2);\n            $dashboard->show(true);\n        }\n\n        self::showGenericSearch($itemtype, $params);\n        if ($params['as_map'] == 1) {\n            self::showMap($itemtype, $params);\n        } elseif ($params['browse'] == 1) {\n            $itemtype::showBrowseView($itemtype, $params);\n        } else {\n            self::showList($itemtype, $params);\n        }\n        echo \"</div>\";\n        echo \"</div>\";\n    }\n\n\n    /**\n     * Display result table for search engine for an type\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params       Search params passed to\n     *                             prepareDatasForSearch function\n     * @param array  $forcedisplay Array of columns to display (default empty\n     *                             = use display pref and search criteria)\n     *\n     * @return void\n     **/\n    public static function showList(\n        $itemtype,\n        $params,\n        array $forcedisplay = []\n    ) {\n        $data = self::getDatas($itemtype, $params, $forcedisplay);\n\n        switch ($data['display_type']) {\n            case self::CSV_OUTPUT:\n            case self::PDF_OUTPUT_LANDSCAPE:\n            case self::PDF_OUTPUT_PORTRAIT:\n            case self::SYLK_OUTPUT:\n            case self::NAMES_OUTPUT:\n                self::outputData($data);\n                break;\n            case self::GLOBAL_SEARCH:\n            case self::HTML_OUTPUT:\n            default:\n                self::displayData($data);\n                break;\n        }\n    }\n\n    /**\n     * Display result table for search engine for an type as a map\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params   Search params passed to prepareDatasForSearch function\n     *\n     * @return void\n     **/\n    public static function showMap($itemtype, $params)\n    {\n        global $CFG_GLPI;\n\n        if ($itemtype == 'Location') {\n            $latitude = 21;\n            $longitude = 20;\n        } else if ($itemtype == 'Entity') {\n            $latitude = 67;\n            $longitude = 68;\n        } else {\n            $latitude = 998;\n            $longitude = 999;\n        }\n\n        $params['criteria'][] = [\n            'link'         => 'AND NOT',\n            'field'        => $latitude,\n            'searchtype'   => 'contains',\n            'value'        => 'NULL'\n        ];\n        $params['criteria'][] = [\n            'link'         => 'AND NOT',\n            'field'        => $longitude,\n            'searchtype'   => 'contains',\n            'value'        => 'NULL'\n        ];\n\n        $data = self::getDatas($itemtype, $params);\n        self::displayData($data);\n\n        if ($data['data']['totalcount'] > 0) {\n            $target = $data['search']['target'];\n            $criteria = $data['search']['criteria'];\n            array_pop($criteria);\n            array_pop($criteria);\n            $criteria[] = [\n                'link'         => 'AND',\n                'field'        => ($itemtype == 'Location' || $itemtype == 'Entity') ? 1 : (($itemtype == 'Ticket') ? 83 : 3),\n                'searchtype'   => 'equals',\n                'value'        => 'CURLOCATION'\n            ];\n            $globallinkto = Toolbox::append_params(\n                [\n                    'criteria'     => Sanitizer::unsanitize($criteria),\n                    'metacriteria' => Sanitizer::unsanitize($data['search']['metacriteria'])\n                ],\n                '&amp;'\n            );\n            $sort_params = Toolbox::append_params([\n                'sort'   => $data['search']['sort'],\n                'order'  => $data['search']['order']\n            ], '&amp;');\n            $parameters = \"as_map=0&amp;\" . $sort_params . '&amp;' .\n                        $globallinkto;\n\n            if (strpos($target, '?') == false) {\n                $fulltarget = $target . \"?\" . $parameters;\n            } else {\n                $fulltarget = $target . \"&\" . $parameters;\n            }\n            $typename = class_exists($itemtype) ? $itemtype::getTypeName($data['data']['totalcount']) : $itemtype;\n\n            echo \"<div class='card border-top-0 rounded-0 search-as-map'>\";\n            echo \"<div class='card-body px-0' id='map_container'>\";\n            echo \"<small class='text-muted p-1'>\" . __('Search results for localized items only') . \"</small>\";\n            $js = \"$(function() {\n               var map = initMap($('#map_container'), 'map', 'full');\n               _loadMap(map, '$itemtype');\n            });\n\n         var _loadMap = function(map_elt, itemtype) {\n            L.AwesomeMarkers.Icon.prototype.options.prefix = 'far';\n            var _micon = 'circle';\n\n            var stdMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'blue'\n            });\n\n            var aMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'cadetblue'\n            });\n\n            var bMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'purple'\n            });\n\n            var cMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'darkpurple'\n            });\n\n            var dMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'red'\n            });\n\n            var eMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'darkred'\n            });\n\n\n            //retrieve geojson data\n            map_elt.spin(true);\n            $.ajax({\n               dataType: 'json',\n               method: 'POST',\n               url: '{$CFG_GLPI['root_doc']}/ajax/map.php',\n               data: {\n                  itemtype: itemtype,\n                  params: \" . json_encode($params) . \"\n               }\n            }).done(function(data) {\n               var _points = data.points;\n               var _markers = L.markerClusterGroup({\n                  iconCreateFunction: function(cluster) {\n                     var childCount = cluster.getChildCount();\n\n                     var markers = cluster.getAllChildMarkers();\n                     var n = 0;\n                     for (var i = 0; i < markers.length; i++) {\n                        n += markers[i].count;\n                     }\n\n                     var c = ' marker-cluster-';\n                     if (n < 10) {\n                        c += 'small';\n                     } else if (n < 100) {\n                        c += 'medium';\n                     } else {\n                        c += 'large';\n                     }\n\n                     return new L.DivIcon({ html: '<div><span>' + n + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });\n                  }\n               });\n\n               $.each(_points, function(index, point) {\n                  var _title = '<strong>' + point.title + '</strong><br/><a href=\\''+'$fulltarget'.replace(/CURLOCATION/, point.loc_id)+'\\'>\" . sprintf(__('%1$s %2$s'), 'COUNT', $typename) . \"'.replace(/COUNT/, point.count)+'</a>';\n                  if (point.types) {\n                     $.each(point.types, function(tindex, type) {\n                        _title += '<br/>\" . sprintf(__('%1$s %2$s'), 'COUNT', 'TYPE') . \"'.replace(/COUNT/, type.count).replace(/TYPE/, type.name);\n                     });\n                  }\n                  var _icon = stdMarker;\n                  if (point.count < 10) {\n                     _icon = stdMarker;\n                  } else if (point.count < 100) {\n                     _icon = aMarker;\n                  } else if (point.count < 1000) {\n                     _icon = bMarker;\n                  } else if (point.count < 5000) {\n                     _icon = cMarker;\n                  } else if (point.count < 10000) {\n                     _icon = dMarker;\n                  } else {\n                     _icon = eMarker;\n                  }\n                  var _marker = L.marker([point.lat, point.lng], { icon: _icon, title: point.title });\n                  _marker.count = point.count;\n                  _marker.bindPopup(_title);\n                  _markers.addLayer(_marker);\n               });\n\n               map_elt.addLayer(_markers);\n               map_elt.fitBounds(\n                  _markers.getBounds(), {\n                     padding: [50, 50],\n                     maxZoom: 12\n                  }\n               );\n            }).fail(function (response) {\n               var _data = response.responseJSON;\n               var _message = '\" . __s('An error occurred loading data :(') . \"';\n               if (_data.message) {\n                  _message = _data.message;\n               }\n               var fail_info = L.control();\n               fail_info.onAdd = function (map) {\n                  this._div = L.DomUtil.create('div', 'fail_info');\n                  this._div.innerHTML = _message + '<br/><span id=\\'reload_data\\'><i class=\\'fa fa-sync\\'></i> \" . __s('Reload') . \"</span>';\n                  return this._div;\n               };\n               fail_info.addTo(map_elt);\n               $('#reload_data').on('click', function() {\n                  $('.fail_info').remove();\n                  _loadMap(map_elt);\n               });\n            }).always(function() {\n               //hide spinner\n               map_elt.spin(false);\n            });\n         }\n\n         \";\n            echo Html::scriptBlock($js);\n            echo \"</div>\"; // .card-body\n            echo \"</div>\"; // .card\n        }\n    }\n\n\n    /**\n     * Get data based on search parameters\n     *\n     * @since 0.85\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params        Search params passed to prepareDatasForSearch function\n     * @param array  $forcedisplay  Array of columns to display (default empty = empty use display pref and search criteria)\n     *\n     * @return array The data\n     **/\n    public static function getDatas($itemtype, $params, array $forcedisplay = [])\n    {\n\n        $data = self::prepareDatasForSearch($itemtype, $params, $forcedisplay);\n        self::constructSQL($data);\n        self::constructData($data);\n\n        return $data;\n    }\n\n\n    /**\n     * Prepare search criteria to be used for a search\n     *\n     * @since 0.85\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type\n     * @param array  $params        Array of parameters\n     *                               may include sort, order, start, list_limit, deleted, criteria, metacriteria\n     * @param array  $forcedisplay  Array of columns to display (default empty = empty use display pref and search criterias)\n     *\n     * @return array prepare to be used for a search (include criteria and others needed information)\n     **/\n    public static function prepareDatasForSearch($itemtype, array $params, array $forcedisplay = [])\n    {\n        global $CFG_GLPI;\n\n       // Default values of parameters\n        $p['criteria']            = [];\n        $p['metacriteria']        = [];\n        $p['sort']                = ['1'];\n        $p['order']               = ['ASC'];\n        $p['start']               = 0;//\n        $p['is_deleted']          = 0;\n        $p['export_all']          = 0;\n        if (class_exists($itemtype)) {\n            $p['target']       = $itemtype::getSearchURL();\n        } else {\n            $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);\n        }\n        $p['display_type']        = self::HTML_OUTPUT;\n        $p['showmassiveactions']  = true;\n        $p['dont_flush']          = false;\n        $p['show_pager']          = true;\n        $p['show_footer']         = true;\n        $p['no_sort']             = false;\n        $p['list_limit']          = $_SESSION['glpilist_limit'];\n        $p['massiveactionparams'] = [];\n\n        foreach ($params as $key => $val) {\n            switch ($key) {\n                case 'order':\n                    if (!is_array($val)) {\n                     // Backward compatibility with GLPI < 10.0 links\n                        if (in_array($val, ['ASC', 'DESC'])) {\n                              $p[$key] = [$val];\n                        }\n                        break;\n                    }\n                    $p[$key] = $val;\n                    break;\n                case 'sort':\n                    if (!is_array($val)) {\n                        // Backward compatibility with GLPI < 10.0 links\n                        $val = (int) $val;\n                        if ($val >= 0) {\n                            $p[$key] = [$val];\n                        }\n                        break;\n                    }\n                    $p[$key] = $val;\n                    break;\n                case 'is_deleted':\n                    if ($val == 1) {\n                        $p[$key] = '1';\n                    }\n                    break;\n                default:\n                    $p[$key] = $val;\n                    break;\n            }\n        }\n\n       // Set display type for export if define\n        if (isset($p['display_type'])) {\n           // Limit to 10 element\n            if ($p['display_type'] == self::GLOBAL_SEARCH) {\n                $p['list_limit'] = self::GLOBAL_DISPLAY_COUNT;\n            }\n        }\n\n        if ($p['export_all']) {\n            $p['start'] = 0;\n        }\n\n        $data             = [];\n        $data['search']   = $p;\n        $data['itemtype'] = $itemtype;\n\n       // Instanciate an object to access method\n        $data['item'] = null;\n\n        if ($itemtype != AllAssets::getType()) {\n            $data['item'] = getItemForItemtype($itemtype);\n        }\n\n        $data['display_type'] = $data['search']['display_type'];\n\n        if (!$CFG_GLPI['allow_search_all']) {\n            foreach ($p['criteria'] as $val) {\n                if (isset($val['field']) && $val['field'] == 'all') {\n                    Html::displayRightError();\n                }\n            }\n        }\n        if (!$CFG_GLPI['allow_search_view']) {\n            foreach ($p['criteria'] as $val) {\n                if (isset($val['field']) && $val['field'] == 'view') {\n                    Html::displayRightError();\n                }\n            }\n        }\n\n       /// Get the items to display\n       // Add searched items\n\n        $forcetoview = false;\n        if (is_array($forcedisplay) && count($forcedisplay)) {\n            $forcetoview = true;\n        }\n        $data['search']['all_search']  = false;\n        $data['search']['view_search'] = false;\n       // If no research limit research to display item and compute number of item using simple request\n        $data['search']['no_search']   = true;\n\n        $data['toview'] = self::addDefaultToView($itemtype, $params);\n        $data['meta_toview'] = [];\n        if (!$forcetoview) {\n           // Add items to display depending of personal prefs\n            $displaypref = DisplayPreference::getForTypeUser($itemtype, Session::getLoginUserID());\n            if (count($displaypref)) {\n                foreach ($displaypref as $val) {\n                    array_push($data['toview'], $val);\n                }\n            }\n        } else {\n            $data['toview'] = array_merge($data['toview'], $forcedisplay);\n        }\n\n        if (count($p['criteria']) > 0) {\n           // use a recursive closure to push searchoption when using nested criteria\n            $parse_criteria = function ($criteria) use (&$parse_criteria, &$data) {\n                foreach ($criteria as $criterion) {\n                     // recursive call\n                    if (isset($criterion['criteria'])) {\n                        $parse_criteria($criterion['criteria']);\n                    } else {\n                   // normal behavior\n                        if (\n                            isset($criterion['field'])\n                            && !in_array($criterion['field'], $data['toview'])\n                        ) {\n                            if (\n                                $criterion['field'] != 'all'\n                                && $criterion['field'] != 'view'\n                                && (!isset($criterion['meta'])\n                                || !$criterion['meta'])\n                            ) {\n                                array_push($data['toview'], $criterion['field']);\n                            } else if ($criterion['field'] == 'all') {\n                                $data['search']['all_search'] = true;\n                            } else if ($criterion['field'] == 'view') {\n                                $data['search']['view_search'] = true;\n                            }\n                        }\n\n                        if (\n                            isset($criterion['value'])\n                            && (strlen($criterion['value']) > 0)\n                        ) {\n                            $data['search']['no_search'] = false;\n                        }\n                    }\n                }\n            };\n\n           // call the closure\n            $parse_criteria($p['criteria']);\n        }\n\n        if (count($p['metacriteria'])) {\n            $data['search']['no_search'] = false;\n        }\n\n       // Add order item\n        $to_add_view = array_diff($p['sort'], $data['toview']);\n        array_push($data['toview'], ...$to_add_view);\n\n       // Special case for CommonITILObjects : put ID in front\n        if (is_a($itemtype, CommonITILObject::class, true)) {\n            array_unshift($data['toview'], 2);\n        }\n\n        $limitsearchopt   = self::getCleanedOptions($itemtype);\n       // Clean and reorder toview\n        $tmpview = [];\n        foreach ($data['toview'] as $val) {\n            if (isset($limitsearchopt[$val]) && !in_array($val, $tmpview)) {\n                $tmpview[] = $val;\n            }\n        }\n        $data['toview']    = $tmpview;\n        $data['tocompute'] = $data['toview'];\n\n       // Force item to display\n        if ($forcetoview) {\n            foreach ($data['toview'] as $val) {\n                if (!in_array($val, $data['tocompute'])) {\n                    array_push($data['tocompute'], $val);\n                }\n            }\n        }\n\n        return $data;\n    }\n\n\n    /**\n     * Construct SQL request depending of search parameters\n     *\n     * Add to data array a field sql containing an array of requests :\n     *      search : request to get items limited to wanted ones\n     *      count : to count all items based on search criterias\n     *                    may be an array a request : need to add counts\n     *                    maybe empty : use search one to count\n     *\n     * @since 0.85\n     *\n     * @param array $data  Array of search datas prepared to generate SQL\n     *\n     * @return void|false May return false if the search request data is invalid\n     **/\n    public static function constructSQL(array &$data)\n    {\n        global $DB, $CFG_GLPI;\n\n        if (!isset($data['itemtype'])) {\n            return false;\n        }\n\n        $data['sql']['count']  = [];\n        $data['sql']['search'] = '';\n\n        $searchopt        = &self::getOptions($data['itemtype']);\n\n        $blacklist_tables = [];\n        $orig_table = self::getOrigTableName($data['itemtype']);\n        if (isset($CFG_GLPI['union_search_type'][$data['itemtype']])) {\n            $itemtable          = $CFG_GLPI['union_search_type'][$data['itemtype']];\n            $blacklist_tables[] = $orig_table;\n        } else {\n            $itemtable = $orig_table;\n        }\n\n       // hack for AllAssets and ReservationItem\n        if (isset($CFG_GLPI['union_search_type'][$data['itemtype']])) {\n            $entity_restrict = true;\n        } else {\n            $entity_restrict = $data['item']->isEntityAssign() && $data['item']->isField('entities_id');\n        }\n\n       // Construct the request\n\n       //// 1 - SELECT\n       // request currentuser for SQL supervision, not displayed\n        $SELECT = \"SELECT DISTINCT `$itemtable`.`id` AS id, '\" . Toolbox::addslashes_deep($_SESSION['glpiname']) . \"' AS currentuser,\n                        \" . self::addDefaultSelect($data['itemtype']);\n\n       // Add select for all toview item\n        foreach ($data['toview'] as $val) {\n            $SELECT .= self::addSelect($data['itemtype'], $val);\n        }\n\n        if (isset($data['search']['as_map']) && $data['search']['as_map'] == 1 && $data['itemtype'] != 'Entity') {\n            $SELECT .= ' `glpi_locations`.`id` AS loc_id, ';\n        }\n\n       //// 2 - FROM AND LEFT JOIN\n       // Set reference table\n        $FROM = \" FROM `$itemtable`\";\n\n       // Init already linked tables array in order not to link a table several times\n        $already_link_tables = [];\n       // Put reference table\n        array_push($already_link_tables, $itemtable);\n\n       // Add default join\n        $COMMONLEFTJOIN = self::addDefaultJoin($data['itemtype'], $itemtable, $already_link_tables);\n        $FROM          .= $COMMONLEFTJOIN;\n\n       // Add all table for toview items\n        foreach ($data['tocompute'] as $val) {\n            if (!in_array($searchopt[$val][\"table\"], $blacklist_tables)) {\n                $FROM .= self::addLeftJoin(\n                    $data['itemtype'],\n                    $itemtable,\n                    $already_link_tables,\n                    $searchopt[$val][\"table\"],\n                    $searchopt[$val][\"linkfield\"],\n                    0,\n                    0,\n                    $searchopt[$val][\"joinparams\"],\n                    $searchopt[$val][\"field\"]\n                );\n            }\n        }\n\n       // Search all case :\n        if ($data['search']['all_search']) {\n            foreach ($searchopt as $key => $val) {\n               // Do not search on Group Name\n                if (is_array($val) && isset($val['table'])) {\n                    if (!in_array($searchopt[$key][\"table\"], $blacklist_tables)) {\n                        $FROM .= self::addLeftJoin(\n                            $data['itemtype'],\n                            $itemtable,\n                            $already_link_tables,\n                            $searchopt[$key][\"table\"],\n                            $searchopt[$key][\"linkfield\"],\n                            0,\n                            0,\n                            $searchopt[$key][\"joinparams\"],\n                            $searchopt[$key][\"field\"]\n                        );\n                    }\n                }\n            }\n        }\n\n       //// 3 - WHERE\n\n       // default string\n        $COMMONWHERE = self::addDefaultWhere($data['itemtype']);\n        $first       = empty($COMMONWHERE);\n\n       // Add deleted if item have it\n        if ($data['item'] && $data['item']->maybeDeleted()) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n            $COMMONWHERE .= $LINK . \"`$itemtable`.`is_deleted` = \" . (int)$data['search']['is_deleted'] . \" \";\n        }\n\n       // Remove template items\n        if ($data['item'] && $data['item']->maybeTemplate()) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n            $COMMONWHERE .= $LINK . \"`$itemtable`.`is_template` = 0 \";\n        }\n\n       // Add Restrict to current entities\n        if ($entity_restrict) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n\n            if ($data['itemtype'] == 'Entity') {\n                $COMMONWHERE .= getEntitiesRestrictRequest($LINK, $itemtable);\n            } else if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n               // Will be replace below in Union/Recursivity Hack\n                $COMMONWHERE .= $LINK . \" ENTITYRESTRICT \";\n            } else {\n                $COMMONWHERE .= getEntitiesRestrictRequest(\n                    $LINK,\n                    $itemtable,\n                    '',\n                    '',\n                    $data['item']->maybeRecursive() && $data['item']->isField('is_recursive')\n                );\n            }\n        }\n        $WHERE  = \"\";\n        $HAVING = \"\";\n\n       // Add search conditions\n       // If there is search items\n        if (count($data['search']['criteria'])) {\n            $WHERE  = self::constructCriteriaSQL($data['search']['criteria'], $data, $searchopt);\n            $HAVING = self::constructCriteriaSQL($data['search']['criteria'], $data, $searchopt, true);\n\n           // if criteria (with meta flag) need additional join/from sql\n            self::constructAdditionalSqlForMetacriteria($data['search']['criteria'], $SELECT, $FROM, $already_link_tables, $data);\n        }\n\n       //// 4 - ORDER\n        $ORDER = \" ORDER BY `id` \";\n        $sort_fields = [];\n        $sort_count = count($data['search']['sort']);\n        for ($i = 0; $i < $sort_count; $i++) {\n            foreach ($data['tocompute'] as $val) {\n                if ($data['search']['sort'][$i] == $val) {\n                    $sort_fields[] = [\n                        'searchopt_id' => $data['search']['sort'][$i],\n                        'order'        => $data['search']['order'][$i] ?? null\n                    ];\n                }\n            }\n        }\n        if (count($sort_fields)) {\n            $ORDER = self::addOrderBy($data['itemtype'], $sort_fields);\n        }\n\n        $SELECT = rtrim(trim($SELECT), ',');\n\n       //// 7 - Manage GROUP BY\n        $GROUPBY = \"\";\n       // Meta Search / Search All / Count tickets\n        $criteria_with_meta = array_filter($data['search']['criteria'], function ($criterion) {\n            return isset($criterion['meta'])\n                && $criterion['meta'];\n        });\n        if (\n            (count($data['search']['metacriteria']))\n            || count($criteria_with_meta)\n            || !empty($HAVING)\n            || $data['search']['all_search']\n        ) {\n            $GROUPBY = \" GROUP BY `$itemtable`.`id`\";\n        }\n\n        if (empty($GROUPBY)) {\n            foreach ($data['toview'] as $val2) {\n                if (!empty($GROUPBY)) {\n                    break;\n                }\n                if (isset($searchopt[$val2][\"forcegroupby\"])) {\n                    $GROUPBY = \" GROUP BY `$itemtable`.`id`\";\n                }\n            }\n        }\n\n        $LIMIT   = \"\";\n        $numrows = 0;\n       //No search : count number of items using a simple count(ID) request and LIMIT search\n        if ($data['search']['no_search']) {\n            $LIMIT = \" LIMIT \" . (int)$data['search']['start'] . \", \" . (int)$data['search']['list_limit'];\n\n            $count = \"count(DISTINCT `$itemtable`.`id`)\";\n           // request currentuser for SQL supervision, not displayed\n            $query_num = \"SELECT $count,\n                              '\" . Toolbox::addslashes_deep($_SESSION['glpiname']) . \"' AS currentuser\n                       FROM `$itemtable`\" .\n                       $COMMONLEFTJOIN;\n\n            $first     = true;\n\n            if (!empty($COMMONWHERE)) {\n                $LINK = \" AND \";\n                if ($first) {\n                    $LINK  = \" WHERE \";\n                    $first = false;\n                }\n                $query_num .= $LINK . $COMMONWHERE;\n            }\n           // Union Search :\n            if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n                $tmpquery = $query_num;\n\n                foreach ($CFG_GLPI[$CFG_GLPI[\"union_search_type\"][$data['itemtype']]] as $ctype) {\n                    $ctable = $ctype::getTable();\n                    if (\n                        ($citem = getItemForItemtype($ctype))\n                        && $citem->canView()\n                    ) {\n                        // State case\n                        if ($data['itemtype'] == AllAssets::getType()) {\n                            $query_num  = str_replace(\n                                $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                                $ctable,\n                                $tmpquery\n                            );\n                            $query_num  = str_replace($data['itemtype'], $ctype, $query_num);\n                            $query_num .= \" AND `$ctable`.`id` IS NOT NULL \";\n\n                         // Add deleted if item have it\n                            if ($citem && $citem->maybeDeleted()) {\n                                  $query_num .= \" AND `$ctable`.`is_deleted` = 0 \";\n                            }\n\n                         // Remove template items\n                            if ($citem && $citem->maybeTemplate()) {\n                                $query_num .= \" AND `$ctable`.`is_template` = 0 \";\n                            }\n                        } else {// Ref table case\n                            $reftable = $data['itemtype']::getTable();\n                            if ($data['item'] && $data['item']->maybeDeleted()) {\n                                $tmpquery = str_replace(\n                                    \"`\" . $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`.\n                                                   `is_deleted`\",\n                                    \"`$reftable`.`is_deleted`\",\n                                    $tmpquery\n                                );\n                            }\n                            $replace  = \"FROM `$reftable`\n                                  INNER JOIN `$ctable`\n                                       ON (`$reftable`.`items_id` =`$ctable`.`id`\n                                           AND `$reftable`.`itemtype` = '$ctype')\";\n\n                            $query_num = str_replace(\n                                \"FROM `\" .\n                                        $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`\",\n                                $replace,\n                                $tmpquery\n                            );\n                            $query_num = str_replace(\n                                $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                                $ctable,\n                                $query_num\n                            );\n                        }\n                        $query_num = str_replace(\n                            \"ENTITYRESTRICT\",\n                            getEntitiesRestrictRequest(\n                                '',\n                                $ctable,\n                                '',\n                                '',\n                                $citem->maybeRecursive()\n                            ),\n                            $query_num\n                        );\n                         $data['sql']['count'][] = $query_num;\n                    }\n                }\n            } else {\n                $data['sql']['count'][] = $query_num;\n            }\n        }\n\n       // If export_all reset LIMIT condition\n        if ($data['search']['export_all']) {\n            $LIMIT = \"\";\n        }\n\n        if (!empty($WHERE) || !empty($COMMONWHERE)) {\n            if (!empty($COMMONWHERE)) {\n                $WHERE = ' WHERE ' . $COMMONWHERE . (!empty($WHERE) ? ' AND ( ' . $WHERE . ' )' : '');\n            } else {\n                $WHERE = ' WHERE ' . $WHERE . ' ';\n            }\n            $first = false;\n        }\n\n        if (!empty($HAVING)) {\n            $HAVING = ' HAVING ' . $HAVING;\n        }\n\n       // Create QUERY\n        if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n            $first = true;\n            $QUERY = \"\";\n            foreach ($CFG_GLPI[$CFG_GLPI[\"union_search_type\"][$data['itemtype']]] as $ctype) {\n                $ctable = $ctype::getTable();\n                if (\n                    ($citem = getItemForItemtype($ctype))\n                    && $citem->canView()\n                ) {\n                    if ($first) {\n                        $first = false;\n                    } else {\n                        $QUERY .= \" UNION \";\n                    }\n                    $tmpquery = \"\";\n                   // AllAssets case\n                    if ($data['itemtype'] == AllAssets::getType()) {\n                         $tmpquery = $SELECT . \", '$ctype' AS TYPE \" .\n                             $FROM .\n                             $WHERE;\n\n                         $tmpquery .= \" AND `$ctable`.`id` IS NOT NULL \";\n\n                         // Add deleted if item have it\n                        if ($citem && $citem->maybeDeleted()) {\n                            $tmpquery .= \" AND `$ctable`.`is_deleted` = 0 \";\n                        }\n\n                       // Remove template items\n                        if ($citem && $citem->maybeTemplate()) {\n                            $tmpquery .= \" AND `$ctable`.`is_template` = 0 \";\n                        }\n\n                        $tmpquery .= $GROUPBY .\n                             $HAVING;\n\n                      // Replace 'asset_types' by itemtype table name\n                        $tmpquery = str_replace(\n                            $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                            $ctable,\n                            $tmpquery\n                        );\n                        // Replace 'AllAssets' by itemtype\n                        // Use quoted value to prevent replacement of AllAssets in column identifiers\n                        $tmpquery = str_replace(\n                            $DB->quoteValue(AllAssets::getType()),\n                            $DB->quoteValue($ctype),\n                            $tmpquery\n                        );\n                    } else {// Ref table case\n                        $reftable = $data['itemtype']::getTable();\n\n                        $tmpquery = $SELECT . \", '$ctype' AS TYPE,\n                                      `$reftable`.`id` AS refID, \" . \"\n                                      `$ctable`.`entities_id` AS ENTITY \" .\n                        $FROM .\n                        $WHERE;\n                        if ($data['item']->maybeDeleted()) {\n                            $tmpquery = str_replace(\n                                \"`\" . $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`.\n                                                `is_deleted`\",\n                                \"`$reftable`.`is_deleted`\",\n                                $tmpquery\n                            );\n                        }\n\n                        $replace = \"FROM `$reftable`\" . \"\n                              INNER JOIN `$ctable`\" . \"\n                                 ON (`$reftable`.`items_id`=`$ctable`.`id`\" . \"\n                                     AND `$reftable`.`itemtype` = '$ctype')\";\n                        $tmpquery = str_replace(\n                            \"FROM `\" .\n                                 $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`\",\n                            $replace,\n                            $tmpquery\n                        );\n                        $tmpquery = str_replace(\n                            $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                            $ctable,\n                            $tmpquery\n                        );\n                        $name_field = $ctype::getNameField();\n                        $tmpquery = str_replace(\"`$ctable`.`name`\", \"`$ctable`.`$name_field`\", $tmpquery);\n                    }\n                    $tmpquery = str_replace(\n                        \"ENTITYRESTRICT\",\n                        getEntitiesRestrictRequest(\n                            '',\n                            $ctable,\n                            '',\n                            '',\n                            $citem->maybeRecursive()\n                        ),\n                        $tmpquery\n                    );\n\n                     // SOFTWARE HACK\n                    if ($ctype == 'Software') {\n                        $tmpquery = str_replace(\"`glpi_softwares`.`serial`\", \"''\", $tmpquery);\n                        $tmpquery = str_replace(\"`glpi_softwares`.`otherserial`\", \"''\", $tmpquery);\n                    }\n                     $QUERY .= $tmpquery;\n                }\n            }\n            if (empty($QUERY)) {\n                echo self::showError($data['display_type']);\n                return;\n            }\n            $QUERY .= str_replace($CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \".\", \"\", $ORDER) .\n                   $LIMIT;\n        } else {\n            $QUERY = $SELECT .\n                  $FROM .\n                  $WHERE .\n                  $GROUPBY .\n                  $HAVING .\n                  $ORDER .\n                  $LIMIT;\n        }\n        $data['sql']['search'] = $QUERY;\n    }\n\n    /**\n     * Construct WHERE (or HAVING) part of the sql based on passed criteria\n     *\n     * @since 9.4\n     *\n     * @param  array   $criteria  list of search criterion, we should have these keys:\n     *                               - link (optionnal): AND, OR, NOT AND, NOT OR\n     *                               - field: id of the searchoption\n     *                               - searchtype: how to match value (contains, equals, etc)\n     *                               - value\n     * @param  array   $data      common array used by search engine,\n     *                            contains all the search part (sql, criteria, params, itemtype etc)\n     *                            TODO: should be a property of the class\n     * @param  array   $searchopt Search options for the current itemtype\n     * @param  boolean $is_having Do we construct sql WHERE or HAVING part\n     *\n     * @return string             the sql sub string\n     */\n    public static function constructCriteriaSQL($criteria = [], $data = [], $searchopt = [], $is_having = false)\n    {\n        $sql = \"\";\n\n        foreach ($criteria as $criterion) {\n            if (\n                !isset($criterion['criteria'])\n                && (!isset($criterion['value'])\n                 || strlen($criterion['value']) <= 0)\n            ) {\n                continue;\n            }\n\n            $itemtype = $data['itemtype'];\n            $meta = false;\n            if (\n                isset($criterion['meta'])\n                && $criterion['meta']\n                && isset($criterion['itemtype'])\n            ) {\n                $itemtype = $criterion['itemtype'];\n                $meta = true;\n                $meta_searchopt = &self::getOptions($itemtype);\n            } else {\n               // Not a meta, use the same search option everywhere\n                $meta_searchopt = $searchopt;\n            }\n\n           // common search\n            if (\n                !isset($criterion['field'])\n                || ($criterion['field'] != \"all\"\n                 && $criterion['field'] != \"view\")\n            ) {\n                $LINK    = \" \";\n                $NOT     = 0;\n                $tmplink = \"\";\n\n                if (\n                    isset($criterion['link'])\n                    && in_array($criterion['link'], array_keys(self::getLogicalOperators()))\n                ) {\n                    if (strstr($criterion['link'], \"NOT\")) {\n                        $tmplink = \" \" . str_replace(\" NOT\", \"\", $criterion['link']);\n                        $NOT     = 1;\n                    } else {\n                        $tmplink = \" \" . $criterion['link'];\n                    }\n                } else {\n                    $tmplink = \" AND \";\n                }\n\n               // Manage Link if not first item\n                if (!empty($sql)) {\n                    $LINK = $tmplink;\n                }\n\n                if (isset($criterion['criteria']) && count($criterion['criteria'])) {\n                    $sub_sql = self::constructCriteriaSQL($criterion['criteria'], $data, $meta_searchopt, $is_having);\n                    if (strlen($sub_sql)) {\n                        if ($NOT) {\n                             $sql .= \"$LINK NOT($sub_sql)\";\n                        } else {\n                            $sql .= \"$LINK ($sub_sql)\";\n                        }\n                    }\n                } else if (\n                    isset($meta_searchopt[$criterion['field']][\"usehaving\"])\n                       || ($meta && \"AND NOT\" === $criterion['link'])\n                ) {\n                    if (!$is_having) {\n                       // the having part will be managed in a second pass\n                        continue;\n                    }\n\n                    $new_having = self::addHaving(\n                        $LINK,\n                        $NOT,\n                        $itemtype,\n                        $criterion['field'],\n                        $criterion['searchtype'],\n                        $criterion['value']\n                    );\n                    if ($new_having !== false) {\n                        $sql .= $new_having;\n                    }\n                } else {\n                    if ($is_having) {\n                       // the having part has been already managed in the first pass\n                        continue;\n                    }\n\n                    $new_where = self::addWhere(\n                        $LINK,\n                        $NOT,\n                        $itemtype,\n                        $criterion['field'],\n                        $criterion['searchtype'],\n                        $criterion['value'],\n                        $meta\n                    );\n                    if ($new_where !== false) {\n                        $sql .= $new_where;\n                    }\n                }\n            } else if (\n                isset($criterion['value'])\n                    && strlen($criterion['value']) > 0\n            ) { // view and all search\n                $LINK       = \" OR \";\n                $NOT        = 0;\n                $globallink = \" AND \";\n                if (isset($criterion['link'])) {\n                    switch ($criterion['link']) {\n                        case \"AND\":\n                            $LINK       = \" OR \";\n                            $globallink = \" AND \";\n                            break;\n                        case \"AND NOT\":\n                            $LINK       = \" AND \";\n                            $NOT        = 1;\n                            $globallink = \" AND \";\n                            break;\n                        case \"OR\":\n                            $LINK       = \" OR \";\n                            $globallink = \" OR \";\n                            break;\n                        case \"OR NOT\":\n                            $LINK       = \" AND \";\n                            $NOT        = 1;\n                            $globallink = \" OR \";\n                            break;\n                    }\n                } else {\n                    $tmplink = \" AND \";\n                }\n                // Manage Link if not first item\n                if (!empty($sql) && !$is_having) {\n                    $sql .= $globallink;\n                }\n                $first2 = true;\n                $items = [];\n                if (isset($criterion['field']) && $criterion['field'] == \"all\") {\n                    $items = $searchopt;\n                } else { // toview case : populate toview\n                    foreach ($data['toview'] as $key2 => $val2) {\n                        $items[$val2] = $searchopt[$val2];\n                    }\n                }\n                $view_sql = \"\";\n                foreach ($items as $key2 => $val2) {\n                    if (isset($val2['nosearch']) && $val2['nosearch']) {\n                        continue;\n                    }\n                    if (is_array($val2)) {\n                       // Add Where clause if not to be done in HAVING CLAUSE\n                        if (!$is_having && !isset($val2[\"usehaving\"])) {\n                            $tmplink = $LINK;\n                            if ($first2) {\n                                $tmplink = \" \";\n                            }\n\n                            $new_where = self::addWhere(\n                                $tmplink,\n                                $NOT,\n                                $itemtype,\n                                $key2,\n                                $criterion['searchtype'],\n                                $criterion['value'],\n                                $meta\n                            );\n                            if ($new_where !== false) {\n                                 $first2  = false;\n                                 $view_sql .=  $new_where;\n                            }\n                        }\n                    }\n                }\n                if (strlen($view_sql)) {\n                    $sql .= \" ($view_sql) \";\n                }\n            }\n        }\n        return $sql;\n    }\n\n    /**\n     * Construct aditionnal SQL (select, joins, etc) for meta-criteria\n     *\n     * @since 9.4\n     *\n     * @param  array  $criteria             list of search criterion\n     * @param  string &$SELECT              TODO: should be a class property (output parameter)\n     * @param  string &$FROM                TODO: should be a class property (output parameter)\n     * @param  array  &$already_link_tables TODO: should be a class property (output parameter)\n     * @param  array  &$data                TODO: should be a class property (output parameter)\n     *\n     * @return void\n     */\n    public static function constructAdditionalSqlForMetacriteria(\n        $criteria = [],\n        &$SELECT = \"\",\n        &$FROM = \"\",\n        &$already_link_tables = [],\n        &$data = []\n    ) {\n        $data['meta_toview'] = [];\n        foreach ($criteria as $criterion) {\n           // manage sub criteria\n            if (isset($criterion['criteria'])) {\n                self::constructAdditionalSqlForMetacriteria(\n                    $criterion['criteria'],\n                    $SELECT,\n                    $FROM,\n                    $already_link_tables,\n                    $data\n                );\n                continue;\n            }\n\n           // parse only criterion with meta flag\n            if (\n                !isset($criterion['itemtype'])\n                || empty($criterion['itemtype'])\n                || !isset($criterion['meta'])\n                || !$criterion['meta']\n                || !isset($criterion['value'])\n                || strlen($criterion['value']) <= 0\n            ) {\n                continue;\n            }\n\n            $m_itemtype = $criterion['itemtype'];\n            $metaopt = &self::getOptions($m_itemtype);\n            $sopt    = $metaopt[$criterion['field']];\n\n           //add toview for meta criterion\n            $data['meta_toview'][$m_itemtype][] = $criterion['field'];\n\n            $SELECT .= self::addSelect(\n                $m_itemtype,\n                $criterion['field'],\n                true, // meta-criterion\n                $m_itemtype\n            );\n\n            $FROM .= self::addMetaLeftJoin(\n                $data['itemtype'],\n                $m_itemtype,\n                $already_link_tables,\n                $sopt[\"joinparams\"]\n            );\n\n            $FROM .= self::addLeftJoin(\n                $m_itemtype,\n                $m_itemtype::getTable(),\n                $already_link_tables,\n                $sopt[\"table\"],\n                $sopt[\"linkfield\"],\n                1,\n                $m_itemtype,\n                $sopt[\"joinparams\"],\n                $sopt[\"field\"]\n            );\n        }\n    }\n\n\n    /**\n     * Retrieve datas from DB : construct data array containing columns definitions and rows datas\n     *\n     * add to data array a field data containing :\n     *      cols : columns definition\n     *      rows : rows data\n     *\n     * @since 0.85\n     *\n     * @param array   $data      array of search data prepared to get data\n     * @param boolean $onlycount If we just want to count results\n     *\n     * @return void|false May return false if the SQL data in $data is not valid\n     **/\n    public static function constructData(array &$data, $onlycount = false)\n    {\n        if (!isset($data['sql']) || !isset($data['sql']['search'])) {\n            return false;\n        }\n        $data['data'] = [];\n\n        // Use a ReadOnly connection if available and configured to be used\n        $DBread = DBConnection::getReadConnection();\n        $DBread->query(\"SET SESSION group_concat_max_len = 8194304;\");\n\n        $DBread->execution_time = true;\n        $result = $DBread->query($data['sql']['search']);\n\n        if ($result) {\n            $data['data']['execution_time'] = $DBread->execution_time;\n            if (isset($data['search']['savedsearches_id'])) {\n                SavedSearch::updateExecutionTime(\n                    (int)$data['search']['savedsearches_id'],\n                    $DBread->execution_time\n                );\n            }\n\n            $data['data']['totalcount'] = 0;\n           // if real search or complete export : get numrows from request\n            if (\n                !$data['search']['no_search']\n                || $data['search']['export_all']\n            ) {\n                $data['data']['totalcount'] = $DBread->numrows($result);\n            } else {\n                if (\n                    !isset($data['sql']['count'])\n                    || (count($data['sql']['count']) == 0)\n                ) {\n                    $data['data']['totalcount'] = $DBread->numrows($result);\n                } else {\n                    foreach ($data['sql']['count'] as $sqlcount) {\n                        $result_num = $DBread->query($sqlcount);\n                        $data['data']['totalcount'] += $DBread->result($result_num, 0, 0);\n                    }\n                }\n            }\n\n            if ($onlycount) {\n               //we just want to coutn results; no need to continue process\n                return;\n            }\n\n            if ($data['search']['start'] > $data['data']['totalcount']) {\n                $data['search']['start'] = 0;\n            }\n\n           // Search case\n            $data['data']['begin'] = $data['search']['start'];\n            $data['data']['end']   = min(\n                $data['data']['totalcount'],\n                $data['search']['start'] + $data['search']['list_limit']\n            ) - 1;\n           //map case\n            if (isset($data['search']['as_map'])  && $data['search']['as_map'] == 1) {\n                $data['data']['end'] = $data['data']['totalcount'] - 1;\n            }\n\n           // No search Case\n            if ($data['search']['no_search']) {\n                $data['data']['begin'] = 0;\n                $data['data']['end']   = min(\n                    $data['data']['totalcount'] - $data['search']['start'],\n                    $data['search']['list_limit']\n                ) - 1;\n            }\n           // Export All case\n            if ($data['search']['export_all']) {\n                $data['data']['begin'] = 0;\n                $data['data']['end']   = $data['data']['totalcount'] - 1;\n            }\n\n           // Get columns\n            $data['data']['cols'] = [];\n\n            $searchopt = &self::getOptions($data['itemtype']);\n\n            foreach ($data['toview'] as $opt_id) {\n                $data['data']['cols'][] = [\n                    'itemtype'  => $data['itemtype'],\n                    'id'        => $opt_id,\n                    'name'      => $searchopt[$opt_id][\"name\"],\n                    'meta'      => 0,\n                    'searchopt' => $searchopt[$opt_id],\n                ];\n            }\n\n           // manage toview column for criteria with meta flag\n            foreach ($data['meta_toview'] as $m_itemtype => $toview) {\n                $searchopt = &self::getOptions($m_itemtype);\n                foreach ($toview as $opt_id) {\n                    $data['data']['cols'][] = [\n                        'itemtype'  => $m_itemtype,\n                        'id'        => $opt_id,\n                        'name'      => $searchopt[$opt_id][\"name\"],\n                        'meta'      => 1,\n                        'searchopt' => $searchopt[$opt_id],\n                    ];\n                }\n            }\n\n           // Display columns Headers for meta items\n            $already_printed = [];\n\n            if (count($data['search']['metacriteria'])) {\n                foreach ($data['search']['metacriteria'] as $metacriteria) {\n                    if (\n                        isset($metacriteria['itemtype']) && !empty($metacriteria['itemtype'])\n                        && isset($metacriteria['value']) && (strlen($metacriteria['value']) > 0)\n                    ) {\n                        if (!isset($already_printed[$metacriteria['itemtype'] . $metacriteria['field']])) {\n                            $searchopt = &self::getOptions($metacriteria['itemtype']);\n\n                            $data['data']['cols'][] = [\n                                'itemtype'  => $metacriteria['itemtype'],\n                                'id'        => $metacriteria['field'],\n                                'name'      => $searchopt[$metacriteria['field']][\"name\"],\n                                'meta'      => 1,\n                                'searchopt' => $searchopt[$metacriteria['field']]\n                            ];\n\n                            $already_printed[$metacriteria['itemtype'] . $metacriteria['field']] = 1;\n                        }\n                    }\n                }\n            }\n\n           // search group (corresponding of dropdown optgroup) of current col\n            foreach ($data['data']['cols'] as $num => $col) {\n               // search current col in searchoptions ()\n                while (\n                    key($searchopt) !== null\n                    && key($searchopt) != $col['id']\n                ) {\n                    next($searchopt);\n                }\n                if (key($searchopt) !== null) {\n                   //search optgroup (non array option)\n                    while (\n                        key($searchopt) !== null\n                        && is_numeric(key($searchopt))\n                        && is_array(current($searchopt))\n                    ) {\n                        prev($searchopt);\n                    }\n                    if (\n                        key($searchopt) !== null\n                        && key($searchopt) !== \"common\"\n                    ) {\n                        $data['data']['cols'][$num]['groupname'] = current($searchopt);\n                    }\n                }\n               //reset\n                reset($searchopt);\n            }\n\n           // Get rows\n\n           // if real search seek to begin of items to display (because of complete search)\n            if (!$data['search']['no_search']) {\n                $DBread->dataSeek($result, $data['search']['start']);\n            }\n\n            $i = $data['data']['begin'];\n            $data['data']['warning']\n            = \"For compatibility keep raw data  (ITEM_X, META_X) at the top for the moment. Will be drop in next version\";\n\n            $data['data']['rows']  = [];\n            $data['data']['items'] = [];\n\n            self::$output_type = $data['display_type'];\n\n            while (($i < $data['data']['totalcount']) && ($i <= $data['data']['end'])) {\n                $row = $DBread->fetchAssoc($result);\n                $newrow        = [];\n                $newrow['raw'] = $row;\n\n               // Parse datas\n                foreach ($newrow['raw'] as $key => $val) {\n                    if (preg_match('/ITEM(_(\\w[^\\d]+))?_(\\d+)(_(.+))?/', $key, $matches)) {\n                        $j = $matches[3];\n                        if (isset($matches[2]) && !empty($matches[2])) {\n                            $j = $matches[2] . '_' . $matches[3];\n                        }\n                        $fieldname = 'name';\n                        if (isset($matches[5])) {\n                            $fieldname = $matches[5];\n                        }\n\n                        // No Group_concat case\n                        if ($fieldname == 'content' || !is_string($val) || strpos($val, self::LONGSEP) === false) {\n                            $newrow[$j]['count'] = 1;\n\n                            $handled = false;\n                            if ($fieldname != 'content' && is_string($val) && strpos($val, self::SHORTSEP) !== false) {\n                                $split2                    = self::explodeWithID(self::SHORTSEP, $val);\n                                if (is_numeric($split2[1])) {\n                                    $newrow[$j][0][$fieldname] = $split2[0];\n                                    $newrow[$j][0]['id']       = $split2[1];\n                                    $handled = true;\n                                }\n                            }\n\n                            if (!$handled) {\n                                if ($val === self::NULLVALUE) {\n                                    $newrow[$j][0][$fieldname] = null;\n                                } else {\n                                    $newrow[$j][0][$fieldname] = $val;\n                                }\n                            }\n                        } else {\n                            if (!isset($newrow[$j])) {\n                                $newrow[$j] = [];\n                            }\n                            $split               = explode(self::LONGSEP, $val);\n                            $newrow[$j]['count'] = count($split);\n                            foreach ($split as $key2 => $val2) {\n                                $handled = false;\n                                if (strpos($val2, self::SHORTSEP) !== false) {\n                                    $split2                  = self::explodeWithID(self::SHORTSEP, $val2);\n                                    if (is_numeric($split2[1])) {\n                                        $newrow[$j][$key2]['id'] = $split2[1];\n                                        if ($split2[0] == self::NULLVALUE) {\n                                            $newrow[$j][$key2][$fieldname] = null;\n                                        } else {\n                                             $newrow[$j][$key2][$fieldname] = $split2[0];\n                                        }\n                                        $handled = true;\n                                    }\n                                }\n\n                                if (!$handled) {\n                                    $newrow[$j][$key2][$fieldname] = $val2;\n                                }\n                            }\n                        }\n                    } else {\n                        if ($key == 'currentuser') {\n                            if (!isset($data['data']['currentuser'])) {\n                                $data['data']['currentuser'] = $val;\n                            }\n                        } else {\n                            $newrow[$key] = $val;\n                           // Add id to items list\n                            if ($key == 'id') {\n                                $data['data']['items'][$val] = $i;\n                            }\n                        }\n                    }\n                }\n                foreach ($data['data']['cols'] as $val) {\n                    $newrow[$val['itemtype'] . '_' . $val['id']]['displayname'] = self::giveItem(\n                        $val['itemtype'],\n                        $val['id'],\n                        $newrow\n                    );\n                }\n\n                $data['data']['rows'][$i] = $newrow;\n                $i++;\n            }\n\n            $data['data']['count'] = count($data['data']['rows']);\n        } else {\n            $error_no = $DBread->errno();\n            if ($error_no == 1116) { // Too many tables; MySQL can only use 61 tables in a join\n                echo self::showError(\n                    $data['search']['display_type'],\n                    __(\"'All' criterion is not usable with this object list, \" .\n                                   \"sql query fails (too many tables). \" .\n                    \"Please use 'Items seen' criterion instead\")\n                );\n            } else {\n                echo $DBread->error();\n            }\n        }\n    }\n\n\n    /**\n     * Display datas extracted from DB\n     *\n     * @param array $data Array of search datas prepared to get datas\n     *\n     * @return void\n     **/\n    public static function displayData(array $data)\n    {\n        global $CFG_GLPI;\n\n        if (!isset($data['data']) || !isset($data['data']['totalcount'])) {\n            return false;\n        }\n\n        $search     = $data['search'];\n        $itemtype   = $data['itemtype'];\n        $item       = $data['item'];\n        $is_deleted = $search['is_deleted'];\n\n        foreach ($search['criteria'] as $key => $criteria) {\n            if (isset($criteria['virtual']) && $criteria['virtual']) {\n                unset($search['criteria'][$key]);\n            }\n        }\n\n       // Contruct parameters\n        $globallinkto  = Toolbox::append_params([\n            'criteria'     => Sanitizer::unsanitize($search['criteria']),\n            'metacriteria' => Sanitizer::unsanitize($search['metacriteria'])\n        ], '&');\n\n        $parameters = http_build_query([\n            'sort'   => $search['sort'],\n            'order'  => $search['order']\n        ]);\n\n        $parameters .= \"&{$globallinkto}\";\n\n        if (isset($_GET['_in_modal'])) {\n            $parameters .= \"&_in_modal=1\";\n        }\n\n       // For plugin add new parameter if available\n        if ($plug = isPluginItemType($data['itemtype'])) {\n            $out = Plugin::doOneHook($plug['plugin'], 'addParamFordynamicReport', $data['itemtype']);\n            if (is_array($out) && count($out)) {\n                $parameters .= Toolbox::append_params($out, '&');\n            }\n        }\n\n        $prehref = $search['target'] . (strpos($search['target'], \"?\") !== false ? \"&\" : \"?\");\n        $href    = $prehref . $parameters;\n\n        Session::initNavigateListItems($data['itemtype'], '', $href);\n\n        TemplateRenderer::getInstance()->display('components/search/display_data.html.twig', [\n            'data'                => $data,\n            'union_search_type'   => $CFG_GLPI[\"union_search_type\"],\n            'rand'                => mt_rand(),\n            'no_sort'             => $search['no_sort'] ?? false,\n            'order'               => $search['order'] ?? [],\n            'sort'                => $search['sort'] ?? [],\n            'start'               => $search['start'] ?? 0,\n            'limit'               => $_SESSION['glpilist_limit'],\n            'count'               => $data['data']['totalcount'] ?? 0,\n            'item'                => $item,\n            'itemtype'            => $itemtype,\n            'href'                => $href,\n            'prehref'             => $prehref,\n            'posthref'            => $globallinkto,\n            'showmassiveactions'  => ($search['showmassiveactions'] ?? true)\n                                  && $data['display_type'] != self::GLOBAL_SEARCH\n                                  && ($itemtype == AllAssets::getType()\n                                    || count(MassiveAction::getAllMassiveActions($item, $is_deleted))\n                                  ),\n            'massiveactionparams' => $data['search']['massiveactionparams'] + [\n                'is_deleted' => $is_deleted,\n                'container'  => \"massform$itemtype\",\n            ],\n            'can_config'          => Session::haveRightsOr('search_config', [\n                DisplayPreference::PERSONAL,\n                DisplayPreference::GENERAL\n            ]),\n            'may_be_deleted'      => $item instanceof CommonDBTM && $item->maybeDeleted(),\n            'may_be_located'      => $item instanceof CommonDBTM && $item->maybeLocated(),\n            'may_be_browsed'      => $item !== null && Toolbox::hasTrait($item, \\Glpi\\Features\\TreeBrowse::class),\n        ]);\n\n        // Add items in item list\n        foreach ($data['data']['rows'] as $row) {\n            if ($itemtype !== AllAssets::class) {\n                Session::addToNavigateListItems($itemtype, $row[\"id\"]);\n            } else {\n                // In case of a global search, reset and empty navigation list to ensure navigation in\n                // item header context is not shown. Indeed, this list does not support navigation through\n                // multiple itemtypes, so it should not be displayed in global search context.\n                Session::initNavigateListItems($row['TYPE'] ?? $data['itemtype']);\n            }\n        }\n\n       // Clean previous selection\n        $_SESSION['glpimassiveactionselected'] = [];\n    }\n\n    /**\n     * Output data (for export in CSV, PDF, ...).\n     *\n     * @param array $data Array of search datas prepared to get datas\n     *\n     * @return void\n     **/\n    public static function outputData(array $data)\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($data['data'])\n            || !isset($data['data']['totalcount'])\n            || $data['data']['count'] <= 0\n            || $data['search']['as_map'] != 0\n        ) {\n            return false;\n        }\n\n       // Define begin and end var for loop\n       // Search case\n        $begin_display = $data['data']['begin'];\n        $end_display   = $data['data']['end'];\n\n       // Compute number of columns to display\n       // Add toview elements\n        $nbcols          = count($data['data']['cols']);\n\n       // Display List Header\n        echo self::showHeader($data['display_type'], $end_display - $begin_display + 1, $nbcols);\n\n       // New Line for Header Items Line\n        $headers_line        = '';\n        $headers_line_top    = '';\n\n        $headers_line_top .= self::showBeginHeader($data['display_type']);\n        $headers_line_top .= self::showNewLine($data['display_type']);\n\n        $header_num = 1;\n\n       // Display column Headers for toview items\n        $metanames = [];\n        foreach ($data['data']['cols'] as $val) {\n            $name = $val[\"name\"];\n\n           // prefix by group name (corresponding to optgroup in dropdown) if exists\n            if (isset($val['groupname'])) {\n                $groupname = $val['groupname'];\n                if (is_array($groupname)) {\n                    //since 9.2, getSearchOptions has been changed\n                    $groupname = $groupname['name'];\n                }\n                $name  = \"$groupname - $name\";\n            }\n\n           // Not main itemtype add itemtype to display\n            if ($data['itemtype'] != $val['itemtype']) {\n                if (!isset($metanames[$val['itemtype']])) {\n                    if ($metaitem = getItemForItemtype($val['itemtype'])) {\n                        $metanames[$val['itemtype']] = $metaitem->getTypeName();\n                    }\n                }\n                $name = sprintf(\n                    __('%1$s - %2$s'),\n                    $metanames[$val['itemtype']],\n                    $val[\"name\"]\n                );\n            }\n\n            $headers_line .= self::showHeaderItem(\n                $data['display_type'],\n                $name,\n                $header_num,\n                '',\n                (!$val['meta']\n                                                && ($data['search']['sort'] == $val['id'])),\n                $data['search']['order']\n            );\n        }\n\n       // Add specific column Header\n        if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n            $headers_line .= self::showHeaderItem(\n                $data['display_type'],\n                __('Item type'),\n                $header_num\n            );\n        }\n       // End Line for column headers\n        $headers_line .= self::showEndLine($data['display_type'], true);\n\n        $headers_line_top    .= $headers_line;\n        $headers_line_top    .= self::showEndHeader($data['display_type']);\n\n        echo $headers_line_top;\n\n       // Num of the row (1=header_line)\n        $row_num = 1;\n\n        $typenames = [];\n       // Display Loop\n        foreach ($data['data']['rows'] as $row) {\n           // Column num\n            $item_num = 1;\n            $row_num++;\n           // New line\n            echo self::showNewLine(\n                $data['display_type'],\n                ($row_num % 2),\n                $data['search']['is_deleted']\n            );\n\n           // Print other toview items\n            foreach ($data['data']['cols'] as $col) {\n                $colkey = \"{$col['itemtype']}_{$col['id']}\";\n                if (!$col['meta']) {\n                    echo self::showItem(\n                        $data['display_type'],\n                        $row[$colkey]['displayname'],\n                        $item_num,\n                        $row_num,\n                        self::displayConfigItem(\n                            $data['itemtype'],\n                            $col['id'],\n                            $row,\n                            $colkey\n                        )\n                    );\n                } else { // META case\n                    echo self::showItem(\n                        $data['display_type'],\n                        $row[$colkey]['displayname'],\n                        $item_num,\n                        $row_num\n                    );\n                }\n            }\n\n            if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n                if (!isset($typenames[$row[\"TYPE\"]])) {\n                    if ($itemtmp = getItemForItemtype($row[\"TYPE\"])) {\n                        $typenames[$row[\"TYPE\"]] = $itemtmp->getTypeName();\n                    }\n                }\n                echo self::showItem(\n                    $data['display_type'],\n                    $typenames[$row[\"TYPE\"]],\n                    $item_num,\n                    $row_num\n                );\n            }\n           // End Line\n            echo self::showEndLine($data['display_type']);\n        }\n\n       // Create title\n        $title = '';\n        if (\n            ($data['display_type'] == self::PDF_OUTPUT_LANDSCAPE)\n            || ($data['display_type'] == self::PDF_OUTPUT_PORTRAIT)\n        ) {\n            $title = self::computeTitle($data);\n        }\n\n       // Display footer (close table)\n        echo self::showFooter($data['display_type'], $title, $data['data']['count']);\n    }\n\n\n    /**\n     * Compute title (use case of PDF OUTPUT)\n     *\n     * @param array $data Array data of search\n     *\n     * @return string Title\n     **/\n    public static function computeTitle($data)\n    {\n        $title = \"\";\n\n        if (count($data['search']['criteria'])) {\n           //Drop the first link as it is not needed, or convert to clean link (AND NOT -> NOT)\n            if (isset($data['search']['criteria']['0']['link'])) {\n                $notpos = strpos($data['search']['criteria']['0']['link'], 'NOT');\n                //If link was like '%NOT%' just use NOT. Otherwise remove the link\n                if ($notpos > 0) {\n                    $data['search']['criteria']['0']['link'] = 'NOT';\n                } else if (!$notpos) {\n                    unset($data['search']['criteria']['0']['link']);\n                }\n            }\n\n            foreach ($data['search']['criteria'] as $criteria) {\n                if (isset($criteria['itemtype'])) {\n                    $searchopt = &self::getOptions($criteria['itemtype']);\n                } else {\n                    $searchopt = &self::getOptions($data['itemtype']);\n                }\n                $titlecontain = '';\n\n                if (isset($criteria['criteria'])) {\n                   //This is a group criteria, call computeTitle again and concat\n                    $newdata = $data;\n                    $oldlink = $criteria['link'];\n                    $newdata['search'] = $criteria;\n                    $titlecontain = sprintf(\n                        __('%1$s %2$s (%3$s)'),\n                        $titlecontain,\n                        $oldlink,\n                        Search::computeTitle($newdata)\n                    );\n                } else {\n                    if (strlen($criteria['value']) > 0) {\n                        if (isset($criteria['link'])) {\n                             $titlecontain = \" \" . $criteria['link'] . \" \";\n                        }\n                        $gdname    = '';\n                        $valuename = '';\n\n                        switch ($criteria['field']) {\n                            case \"all\":\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, __('All'));\n                                break;\n\n                            case \"view\":\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, __('Items seen'));\n                                break;\n\n                            default:\n                                if (isset($criteria['meta']) && $criteria['meta']) {\n                                    $searchoptname = sprintf(\n                                        __('%1$s / %2$s'),\n                                        $criteria['itemtype'],\n                                        $searchopt[$criteria['field']][\"name\"]\n                                    );\n                                } else {\n                                    $searchoptname = $searchopt[$criteria['field']][\"name\"];\n                                }\n\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, $searchoptname);\n                                $itemtype     = getItemTypeForTable($searchopt[$criteria['field']][\"table\"]);\n                                $valuename    = '';\n                                if ($item = getItemForItemtype($itemtype)) {\n                                    $valuename = $item->getValueToDisplay(\n                                        $searchopt[$criteria['field']],\n                                        $criteria['value']\n                                    );\n                                }\n\n                                $gdname = Dropdown::getDropdownName(\n                                    $searchopt[$criteria['field']][\"table\"],\n                                    $criteria['value']\n                                );\n                        }\n\n                        if (empty($valuename)) {\n                            $valuename = $criteria['value'];\n                        }\n                        switch ($criteria['searchtype']) {\n                            case \"equals\":\n                                if (\n                                    in_array(\n                                        $searchopt[$criteria['field']][\"field\"],\n                                        ['name', 'completename']\n                                    )\n                                ) {\n                                    $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $gdname);\n                                } else {\n                                    $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $valuename);\n                                }\n                                break;\n\n                            case \"notequals\":\n                                if (\n                                    in_array(\n                                        $searchopt[$criteria['field']][\"field\"],\n                                        ['name', 'completename']\n                                    )\n                                ) {\n                                    $titlecontain = sprintf(__('%1$s <> %2$s'), $titlecontain, $gdname);\n                                } else {\n                                    $titlecontain = sprintf(__('%1$s <> %2$s'), $titlecontain, $valuename);\n                                }\n                                break;\n\n                            case \"lessthan\":\n                                $titlecontain = sprintf(__('%1$s < %2$s'), $titlecontain, $valuename);\n                                break;\n\n                            case \"morethan\":\n                                $titlecontain = sprintf(__('%1$s > %2$s'), $titlecontain, $valuename);\n                                break;\n\n                            case \"contains\":\n                                $titlecontain = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain,\n                                    '%' . $valuename . '%'\n                                );\n                                break;\n\n                            case \"notcontains\":\n                                $titlecontain = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain,\n                                    '%' . $valuename . '%'\n                                );\n                                break;\n\n                            case \"under\":\n                                $titlecontain = sprintf(\n                                    __('%1$s %2$s'),\n                                    $titlecontain,\n                                    sprintf(__('%1$s %2$s'), __('under'), $gdname)\n                                );\n                                break;\n\n                            case \"notunder\":\n                                $titlecontain = sprintf(\n                                    __('%1$s %2$s'),\n                                    $titlecontain,\n                                    sprintf(__('%1$s %2$s'), __('not under'), $gdname)\n                                );\n                                break;\n\n                            default:\n                                $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $valuename);\n                                break;\n                        }\n                    }\n                }\n                $title .= $titlecontain;\n            }\n        }\n        if (\n            isset($data['search']['metacriteria']) &&\n            count($data['search']['metacriteria'])\n        ) {\n            $metanames = [];\n            foreach ($data['search']['metacriteria'] as $metacriteria) {\n                $searchopt = &self::getOptions($metacriteria['itemtype']);\n                if (!isset($metanames[$metacriteria['itemtype']])) {\n                    if ($metaitem = getItemForItemtype($metacriteria['itemtype'])) {\n                        $metanames[$metacriteria['itemtype']] = $metaitem->getTypeName();\n                    }\n                }\n\n                $titlecontain2 = '';\n                if (strlen($metacriteria['value']) > 0) {\n                    if (isset($metacriteria['link'])) {\n                        $titlecontain2 = sprintf(\n                            __('%1$s %2$s'),\n                            $titlecontain2,\n                            $metacriteria['link']\n                        );\n                    }\n                    $titlecontain2\n                    = sprintf(\n                        __('%1$s %2$s'),\n                        $titlecontain2,\n                        sprintf(\n                            __('%1$s / %2$s'),\n                            $metanames[$metacriteria['itemtype']],\n                            $searchopt[$metacriteria['field']][\"name\"]\n                        )\n                    );\n\n                    $gdname2 = Dropdown::getDropdownName(\n                        $searchopt[$metacriteria['field']][\"table\"],\n                        $metacriteria['value']\n                    );\n                    switch ($metacriteria['searchtype']) {\n                        case \"equals\":\n                            if (\n                                in_array(\n                                    $searchopt[$metacriteria['link']]\n                                          [\"field\"],\n                                    ['name', 'completename']\n                                )\n                            ) {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain2,\n                                    $gdname2\n                                );\n                            } else {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain2,\n                                    $metacriteria['value']\n                                );\n                            }\n                            break;\n\n                        case \"notequals\":\n                            if (\n                                in_array(\n                                    $searchopt[$metacriteria['link']][\"field\"],\n                                    ['name', 'completename']\n                                )\n                            ) {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain2,\n                                    $gdname2\n                                );\n                            } else {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain2,\n                                    $metacriteria['value']\n                                );\n                            }\n                            break;\n\n                        case \"lessthan\":\n                            $titlecontain2 = sprintf(\n                                __('%1$s < %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n\n                        case \"morethan\":\n                            $titlecontain2 = sprintf(\n                                __('%1$s > %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n\n                        case \"contains\":\n                              $titlecontain2 = sprintf(\n                                  __('%1$s = %2$s'),\n                                  $titlecontain2,\n                                  '%' . $metacriteria['value'] . '%'\n                              );\n                            break;\n\n                        case \"notcontains\":\n                               $titlecontain2 = sprintf(\n                                   __('%1$s <> %2$s'),\n                                   $titlecontain2,\n                                   '%' . $metacriteria['value'] . '%'\n                               );\n                            break;\n\n                        case \"under\":\n                              $titlecontain2 = sprintf(\n                                  __('%1$s %2$s'),\n                                  $titlecontain2,\n                                  sprintf(\n                                      __('%1$s %2$s'),\n                                      __('under'),\n                                      $gdname2\n                                  )\n                              );\n                            break;\n\n                        case \"notunder\":\n                             $titlecontain2 = sprintf(\n                                 __('%1$s %2$s'),\n                                 $titlecontain2,\n                                 sprintf(\n                                     __('%1$s %2$s'),\n                                     __('not under'),\n                                     $gdname2\n                                 )\n                             );\n                            break;\n\n                        default:\n                            $titlecontain2 = sprintf(\n                                __('%1$s = %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n                    }\n                }\n                $title .= $titlecontain2;\n            }\n        }\n        return $title;\n    }\n\n    /**\n     * Get meta types available for search engine\n     *\n     * @param class-string<CommonDBTM> $itemtype Type to display the form\n     *\n     * @return array Array of available itemtype\n     **/\n    public static function getMetaItemtypeAvailable($itemtype)\n    {\n        global $CFG_GLPI;\n\n        $itemtype = self::getMetaReferenceItemtype($itemtype);\n\n        if (!(($item = getItemForItemtype($itemtype)) instanceof CommonDBTM)) {\n            return [];\n        }\n\n        $linked = [];\n        foreach ($CFG_GLPI as $key => $values) {\n            if ($key === 'link_types') {\n               // Links are associated to all items of a type, it does not make any sense to use them in meta search\n                continue;\n            }\n            if ($key === 'ticket_types' && $item instanceof CommonITILObject) {\n               // Linked are filtered by CommonITILObject::getAllTypesForHelpdesk()\n                $linked = array_merge($linked, array_keys($item::getAllTypesForHelpdesk()));\n                continue;\n            }\n\n            foreach (self::getMetaParentItemtypesForTypesConfig($key) as $config_itemtype) {\n                if ($itemtype === $config_itemtype::getType()) {\n                   // List is related to source itemtype, all types of list are so linked\n                    $linked = array_merge($linked, $values);\n                } else if (in_array($itemtype, $values)) {\n                   // Source itemtype is inside list, type corresponding to list is so linked\n                    $linked[] = $config_itemtype::getType();\n                }\n            }\n        }\n\n        return array_unique($linked);\n    }\n\n    /**\n     * Returns parents itemtypes having subitems defined in given config key.\n     * This list is filtered and is only valid in a \"meta\" search context.\n     *\n     * @param string $config_key\n     *\n     * @return string[]\n     */\n    private static function getMetaParentItemtypesForTypesConfig(string $config_key): array\n    {\n        $matches = [];\n        if (preg_match('/^(.+)_types$/', $config_key, $matches) === 0) {\n            return [];\n        }\n\n        $key_to_itemtypes = [\n            'directconnect_types'  => ['Computer'],\n            'infocom_types'        => ['Budget', 'Infocom'],\n            'linkgroup_types'      => ['Group'],\n         // 'linkgroup_tech_types' => ['Group'], // Cannot handle ambiguity with 'Group' from 'linkgroup_types'\n            'linkuser_types'       => ['User'],\n         // 'linkuser_tech_types'  => ['User'], // Cannot handle ambiguity with 'User' from 'linkuser_types'\n            'project_asset_types'  => ['Project'],\n            'rackable_types'       => ['Enclosure', 'Rack'],\n            'socket_types'         => [Socket::class],\n            'ticket_types'         => ['Change', 'Problem', 'Ticket'],\n        ];\n\n        if (array_key_exists($config_key, $key_to_itemtypes)) {\n            return $key_to_itemtypes[$config_key];\n        }\n\n        $itemclass = $matches[1];\n        if (is_a($itemclass, CommonDBTM::class, true)) {\n            return [$itemclass::getType()];\n        }\n\n        return [];\n    }\n\n    /**\n     * Check if an itemtype is a possible subitem of another itemtype in a \"meta\" search context.\n     *\n     * @param string $parent_itemtype\n     * @param string $child_itemtype\n     *\n     * @return boolean\n     */\n    private static function isPossibleMetaSubitemOf(string $parent_itemtype, string $child_itemtype)\n    {\n        global $CFG_GLPI;\n\n        if (\n            is_a($parent_itemtype, CommonITILObject::class, true)\n            && in_array($child_itemtype, array_keys($parent_itemtype::getAllTypesForHelpdesk()))\n        ) {\n            return true;\n        }\n\n        foreach ($CFG_GLPI as $key => $values) {\n            if (\n                in_array($parent_itemtype, self::getMetaParentItemtypesForTypesConfig($key))\n                && in_array($child_itemtype, $values)\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets the class to use if the specified itemtype extends one of the known reference types.\n     *\n     * @param class-string<CommonDBTM> $itemtype\n     *\n     * @return string|false The reference class name. If the provided itemtype is from a plugin, the provided itemtype is returned.\n     *                      If the itemtype is not from a plugin and not exactly or extended from a reference itemtype, false will be returned.\n     * @since 0.85\n     */\n    public static function getMetaReferenceItemtype($itemtype)\n    {\n\n        if (!isPluginItemType($itemtype)) {\n            return $itemtype;\n        }\n\n       // Use reference type if given itemtype extends a reference type.\n        $types = [\n            'Computer',\n            'Problem',\n            'Change',\n            'Ticket',\n            'Printer',\n            'Monitor',\n            'Peripheral',\n            'Software',\n            'Phone'\n        ];\n        foreach ($types as $type) {\n            if (is_a($itemtype, $type, true)) {\n                return $type;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get dropdown options of logical operators.\n     * @return string[]|array<string, string>\n     * @since 0.85\n     **/\n    public static function getLogicalOperators($only_not = false)\n    {\n        if ($only_not) {\n            return [\n                'AND'     => Dropdown::EMPTY_VALUE,\n                'AND NOT' => __(\"NOT\")\n            ];\n        }\n\n        return [\n            'AND'     => __('AND'),\n            'OR'      => __('OR'),\n            'AND NOT' => __('AND NOT'),\n            'OR NOT'  => __('OR NOT')\n        ];\n    }\n\n\n    /**\n     * Print generic search form\n     *\n     * Params need to parsed before using Search::manageParams function\n     *\n     * @param class-string<CommonDBTM> $itemtype  Type to display the form\n     * @param array  $params    Array of parameters may include sort, is_deleted, criteria, metacriteria\n     *\n     * @return void\n     **/\n    public static function showGenericSearch($itemtype, array $params)\n    {\n        global $CFG_GLPI;\n\n       // Default values of parameters\n        $p['sort']         = '';\n        $p['is_deleted']   = 0;\n        $p['as_map']       = 0;\n        $p['browse']       = 0;\n        $p['criteria']     = [];\n        $p['metacriteria'] = [];\n        if (class_exists($itemtype)) {\n            $p['target']       = $itemtype::getSearchURL();\n        } else {\n            $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);\n        }\n        $p['showreset']    = true;\n        $p['showbookmark'] = true;\n        $p['showfolding']  = true;\n        $p['mainform']     = true;\n        $p['prefix_crit']  = '';\n        $p['addhidden']    = [];\n        $p['actionname']   = 'search';\n        $p['actionvalue']  = _sx('button', 'Search');\n\n        foreach ($params as $key => $val) {\n            $p[$key] = $val;\n        }\n\n       // Itemtype name used in JS function names, etc\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $itemtype));\n        $rand_criteria = mt_rand();\n        $main_block_class = '';\n        $card_class = 'search-form card card-sm mb-4';\n        if ($p['mainform']) {\n            echo \"<form name='searchform$normalized_itemtype' class='search-form-container' method='get' action='\" . $p['target'] . \"'>\";\n        } else {\n            $main_block_class = \"sub_criteria\";\n            $card_class = 'border d-inline-block ms-1';\n        }\n        $display = $_SESSION['glpifold_search'] ? 'style=\"display: none;\"' : '';\n        echo \"<div class='$card_class' $display>\";\n\n        echo \"<div id='searchcriteria$rand_criteria' class='$main_block_class' >\";\n        $nbsearchcountvar      = 'nbcriteria' . $normalized_itemtype . mt_rand();\n        $searchcriteriatableid = 'criteriatable' . $normalized_itemtype . mt_rand();\n       // init criteria count\n        echo Html::scriptBlock(\"\n         var $nbsearchcountvar = \" . count($p['criteria']) . \";\n      \");\n\n        echo \"<div class='list-group list-group-flush list-group-hoverable criteria-list pt-2' id='$searchcriteriatableid'>\";\n\n       // Display normal search parameters\n        $i = 0;\n        foreach (array_keys($p['criteria']) as $i) {\n            self::displayCriteria([\n                'itemtype' => $itemtype,\n                'num'      => $i,\n                'p'        => $p\n            ]);\n        }\n\n        echo \"<a id='more-criteria$rand_criteria' role='button'\n            class='normalcriteria fold-search list-group-item p-2 border-0'\n            style='display: none;'></a>\";\n\n        echo \"</div>\"; // .list\n\n       // Keep track of the current savedsearches on reload\n        if (isset($_GET['savedsearches_id'])) {\n            echo Html::input(\"savedsearches_id\", [\n                'type' => \"hidden\",\n                'value' => $_GET['savedsearches_id'],\n            ]);\n        }\n\n        echo \"<div class='card-footer d-flex search_actions'>\";\n        $linked = self::getMetaItemtypeAvailable($itemtype);\n        echo \"<button id='addsearchcriteria$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n               <i class='ti ti-square-plus'></i>\n               <span class='d-none d-sm-block'>\" . __s('rule') . \"</span>\n            </button>\";\n        if (count($linked)) {\n            echo \"<button id='addmetasearchcriteria$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n                  <i class='ti ti-circle-plus'></i>\n                  <span class='d-none d-sm-block'>\" . __s('global rule') . \"</span>\n               </button>\";\n        }\n        echo \"<button id='addcriteriagroup$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n               <i class='ti ti-code-plus'></i>\n               <span class='d-none d-sm-block'>\" . __s('group') . \"</span>\n            </button>\";\n        $json_p = json_encode($p);\n\n        if ($p['mainform']) {\n           // Display submit button\n            echo \"<button class='btn btn-sm btn-primary me-1' type='submit' name='\" . $p['actionname'] . \"'>\n               <i class='ti ti-list-search'></i>\n               <span class='d-none d-sm-block'>\" . $p['actionvalue'] . \"</span>\n            </button>\";\n            if ($p['showbookmark'] || $p['showreset']) {\n                if ($p['showbookmark']) {\n                    SavedSearch::showSaveButton(\n                        SavedSearch::SEARCH,\n                        $itemtype,\n                        isset($_GET['savedsearches_id'])\n                    );\n                }\n\n                if ($p['showreset']) {\n                    echo \"<a class='btn btn-ghost-secondary btn-icon btn-sm me-1 search-reset'\n                        data-bs-toggle='tooltip' data-bs-placement='bottom'\n                        href='\"\n                    . $p['target']\n                    . (strpos($p['target'], '?') ? '&amp;' : '?')\n                    . \"reset=reset' title=\\\"\" . __s('Blank') . \"\\\"\n                  ><i class='ti ti-circle-x'></i></a>\";\n                }\n            }\n        }\n        echo \"</div>\"; //.search_actions\n\n       // idor checks\n        $idor_display_criteria       = Session::getNewIDORToken($itemtype);\n        $idor_display_meta_criteria  = Session::getNewIDORToken($itemtype);\n        $idor_display_criteria_group = Session::getNewIDORToken($itemtype);\n\n        $itemtype_escaped = addslashes($itemtype);\n        $JS = <<<JAVASCRIPT\n         $('#addsearchcriteria$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_criteria',\n               'itemtype': '$itemtype_escaped',\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_criteria'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\n\n         $('#addmetasearchcriteria$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_meta_criteria',\n               'itemtype': '$itemtype_escaped',\n               'meta': true,\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_meta_criteria'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\n\n         $('#addcriteriagroup$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_criteria_group',\n               'itemtype': '$itemtype_escaped',\n               'meta': true,\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_criteria_group'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\nJAVASCRIPT;\n\n        if ($p['mainform']) {\n            $JS .= <<<JAVASCRIPT\n         var toggle_fold_search = function(show_search) {\n            $('#searchcriteria{$rand_criteria}').closest('.search-form').toggle(show_search);\n         };\n\n         // Init search_criteria state\n         var search_criteria_visibility = window.localStorage.getItem('show_full_searchcriteria');\n         if (search_criteria_visibility !== undefined && search_criteria_visibility == 'false') {\n            $('.fold-search').click();\n         }\n\n         $(document).on(\"click\", \".remove-search-criteria\", function() {\n            // force removal of tooltip\n            var tooltip = bootstrap.Tooltip.getInstance($(this)[0]);\n            if (tooltip !== null) {\n               tooltip.dispose();\n            }\n\n            var rowID = $(this).data('rowid');\n            $('#' + rowID).remove();\n            $('#searchcriteria{$rand_criteria} .criteria-list .list-group-item:first-child').addClass('headerRow').show();\n         });\nJAVASCRIPT;\n        }\n        echo Html::scriptBlock($JS);\n\n        if (count($p['addhidden'])) {\n            foreach ($p['addhidden'] as $key => $val) {\n                echo Html::hidden($key, ['value' => $val]);\n            }\n        }\n\n        if ($p['mainform']) {\n           // For dropdown\n            echo Html::hidden('itemtype', ['value' => $itemtype]);\n           // Reset to start when submit new search\n            echo Html::hidden('start', ['value'    => 0]);\n        }\n\n        echo \"</div>\"; // #searchcriteria\n        echo \"</div>\"; // .card\n        if ($p['mainform']) {\n            Html::closeForm();\n        }\n    }\n\n    /**\n     * Display a criteria field set, this function should be called by ajax/search.php\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - itemtype: main itemtype for criteria, sub one for metacriteria\n     *                            - num: index of the criteria\n     *                            - p: params of showGenericSearch method\n     *\n     * @return void\n     */\n    public static function displayCriteria($request = [])\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"num\"])\n        ) {\n            return;\n        }\n\n        $num         = (int) $request['num'];\n        $p           = $request['p'];\n        $options     = self::getCleanedOptions($request[\"itemtype\"]);\n        $randrow     = mt_rand();\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $request[\"itemtype\"]));\n        $rowid       = 'searchrow' . $normalized_itemtype . $randrow;\n        $addclass    = $num == 0 ? ' headerRow' : '';\n        $prefix      = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n        $criteria    = [];\n        $from_meta   = isset($request['from_meta']) && $request['from_meta'];\n\n        $sess_itemtype = $request[\"itemtype\"];\n        if ($from_meta) {\n            $sess_itemtype = $request[\"parent_itemtype\"];\n        }\n\n        if (!$criteria = self::findCriteriaInSession($sess_itemtype, $num, $parents_num)) {\n            $criteria = self::getDefaultCriteria($request[\"itemtype\"]);\n        }\n\n        if (\n            isset($criteria['meta'])\n            && $criteria['meta']\n            && !$from_meta\n        ) {\n            self::displayMetaCriteria($request);\n            return;\n        }\n\n        if (\n            isset($criteria['criteria'])\n            && is_array($criteria['criteria'])\n        ) {\n            self::displayCriteriaGroup($request);\n            return;\n        }\n\n        $add_padding = \"p-2\";\n        if (isset($request[\"from_meta\"])) {\n            $add_padding = \"p-0\";\n        }\n\n        echo \"<div class='list-group-item $add_padding border-0 normalcriteria$addclass' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n\n        if (!$from_meta) {\n           // First line display add / delete images for normal and meta search items\n            if (\n                $num == 0\n                && isset($p['mainform'])\n                && $p['mainform']\n            ) {\n               // Instanciate an object to access method\n                $item = null;\n                if ($request[\"itemtype\"] != AllAssets::getType()) {\n                    $item = getItemForItemtype($request[\"itemtype\"]);\n                }\n                if ($item && $item->maybeDeleted()) {\n                    echo Html::hidden('is_deleted', [\n                        'value' => $p['is_deleted'],\n                        'id'    => 'is_deleted'\n                    ]);\n                }\n                echo Html::hidden('as_map', [\n                    'value' => $p['as_map'],\n                    'id'    => 'as_map'\n                ]);\n                echo Html::hidden('browse', [\n                    'value' => $p['browse'],\n                    'id'    => 'browse'\n                ]);\n            }\n            echo \"<div class='col-auto'>\";\n            echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'\n                       data-bs-toggle='tooltip' data-bs-placement='left'\n                       title=\\\"\" . __s('Delete a rule') . \"\\\">\n            <i class='ti ti-square-minus' alt='-'></i>\n         </button>\";\n            echo \"</div>\";\n        }\n\n       // Display link item\n        $value = '';\n        if (!$from_meta) {\n            echo \"<div class='col-auto'>\";\n            if (isset($criteria[\"link\"])) {\n                $value = $criteria[\"link\"];\n            }\n            $operators = Search::getLogicalOperators(($num == 0));\n            Dropdown::showFromArray(\"criteria{$prefix}[$num][link]\", $operators, [\n                'value' => $value,\n            ]);\n            echo \"</div>\";\n        }\n\n        $values   = [];\n       // display select box to define search item\n        if ($CFG_GLPI['allow_search_view'] == 2 && !isset($request['from_meta'])) {\n            $values['view'] = __('Items seen');\n        }\n\n        reset($options);\n        $group = '';\n\n        foreach ($options as $key => $val) {\n           // print groups\n            if (!is_array($val)) {\n                $group = $val;\n            } else if (count($val) == 1) {\n                $group = $val['name'];\n            } else {\n                if (\n                    (!isset($val['nosearch']) || ($val['nosearch'] == false))\n                    && (!$from_meta || !array_key_exists('nometa', $val) || $val['nometa'] !== true)\n                ) {\n                    $values[$group][$key] = $val[\"name\"];\n                }\n            }\n        }\n        if ($CFG_GLPI['allow_search_view'] == 1 && !isset($request['from_meta'])) {\n            $values['view'] = __('Items seen');\n        }\n        if ($CFG_GLPI['allow_search_all'] && !isset($request['from_meta'])) {\n            $values['all'] = __('All');\n        }\n        $value = '';\n\n        if (isset($criteria['field'])) {\n            $value = $criteria['field'];\n        }\n\n        echo \"<div class='col-auto'>\";\n        $rand = Dropdown::showFromArray(\"criteria{$prefix}[$num][field]\", $values, [\n            'value' => $value,\n        ]);\n        echo \"</div>\";\n        $field_id = Html::cleanId(\"dropdown_criteria{$prefix}[$num][field]$rand\");\n        $spanid   = Html::cleanId('SearchSpan' . $normalized_itemtype . $prefix . $num);\n\n        echo \"<div class='col-auto'>\";\n        echo \"<div class='row g-1' id='$spanid'>\";\n\n        $used_itemtype = $request[\"itemtype\"];\n       // Force Computer itemtype for AllAssets to permit to show specific items\n        if ($request[\"itemtype\"] == AllAssets::getType()) {\n            $used_itemtype = 'Computer';\n        }\n\n        $searchtype = isset($criteria['searchtype'])\n                     ? $criteria['searchtype']\n                     : \"\";\n        $p_value    = isset($criteria['value'])\n                     ? Sanitizer::dbUnescape($criteria['value'])\n                     : \"\";\n\n        $params = [\n            'itemtype'    => $used_itemtype,\n            '_idor_token' => Session::getNewIDORToken($used_itemtype),\n            'field'       => $value,\n            'searchtype'  => $searchtype,\n            'value'       => $p_value,\n            'num'         => $num,\n            'p'           => $p,\n        ];\n        Search::displaySearchoption($params);\n        echo \"</div>\";\n\n        Ajax::updateItemOnSelectEvent(\n            $field_id,\n            $spanid,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            [\n                'action'     => 'display_searchoption',\n                'field'      => '__VALUE__',\n            ] + $params\n        );\n        echo \"</div>\"; //.row\n        echo \"</div>\"; //#$spanid\n        echo \"</div>\";\n    }\n\n    /**\n     * Display a meta-criteria field set, this function should be called by ajax/search.php\n     * Call displayCriteria method after displaying its itemtype field\n     *\n     * @since 9.4\n     *\n     * @param  array  $request @see displayCriteria method\n     *\n     * @return void\n     */\n    public static function displayMetaCriteria($request = [])\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"num\"])\n        ) {\n            return \"\";\n        }\n\n        $p            = $request['p'];\n        $num          = (int) $request['num'];\n        $prefix       = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num  = isset($p['parents_num']) ? $p['parents_num'] : [];\n        $itemtype     = $request[\"itemtype\"];\n        $metacriteria = [];\n\n        if (!$metacriteria = self::findCriteriaInSession($itemtype, $num, $parents_num)) {\n            $metacriteria = [];\n           // Set default field\n            $options  = Search::getCleanedOptions($itemtype);\n\n            foreach ($options as $key => $val) {\n                if (is_array($val) && isset($val['table'])) {\n                    $metacriteria['field'] = $key;\n                    break;\n                }\n            }\n        }\n\n        $linked =  Search::getMetaItemtypeAvailable($itemtype);\n        $rand   = mt_rand();\n\n        $rowid  = 'metasearchrow' . $request['itemtype'] . $rand;\n\n        echo \"<div class='list-group-item border-0 metacriteria p-2' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n\n        echo \"<div class='col-auto'>\";\n        echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'>\n         <i class='ti ti-square-minus' alt='-' title=\\\"\" .\n         __s('Delete a global rule') . \"\\\"></i>\n      </button>\";\n        echo \"</div>\";\n\n       // Display link item (not for the first item)\n        echo \"<div class='col-auto'>\";\n        Dropdown::showFromArray(\n            \"criteria{$prefix}[$num][link]\",\n            Search::getLogicalOperators(),\n            [\n                'value' => isset($metacriteria[\"link\"])\n               ? $metacriteria[\"link\"]\n               : \"\",\n            ]\n        );\n        echo \"</div>\";\n\n       // Display select of the linked item type available\n        echo \"<div class='col-auto'>\";\n        $rand = Dropdown::showItemTypes(\"criteria{$prefix}[$num][itemtype]\", $linked, [\n            'value' => isset($metacriteria['itemtype'])\n                    && !empty($metacriteria['itemtype'])\n                     ? $metacriteria['itemtype']\n                     : \"\",\n        ]);\n        echo \"</div>\";\n        echo Html::hidden(\"criteria{$prefix}[$num][meta]\", [\n            'value' => true\n        ]);\n        $field_id = Html::cleanId(\"dropdown_criteria{$prefix}[$num][itemtype]$rand\");\n        $spanid   = Html::cleanId(\"show_\" . $request[\"itemtype\"] . \"_\" . $prefix . $num . \"_$rand\");\n       // Ajax script for display search met& item\n\n        $params = [\n            'action'          => 'display_criteria',\n            'itemtype'        => '__VALUE__',\n            'parent_itemtype' => $request['itemtype'],\n            'from_meta'       => true,\n            'num'             => $num,\n            'p'               => $request[\"p\"],\n            '_idor_token'     => Session::getNewIDORToken(\"\", [\n                'parent_itemtype' => $request['itemtype']\n            ])\n        ];\n        Ajax::updateItemOnSelectEvent(\n            $field_id,\n            $spanid,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            $params\n        );\n\n        echo \"<div class='col-auto' id='$spanid'>\";\n        echo \"<div class=row'>\";\n        if (\n            isset($metacriteria['itemtype'])\n            && !empty($metacriteria['itemtype'])\n        ) {\n            $params['itemtype'] = $metacriteria['itemtype'];\n            self::displayCriteria($params);\n        }\n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"</div>\";\n    }\n\n    /**\n     * Display a group of nested criteria.\n     * A group (parent) criteria  can contains children criteria (who also cantains children, etc)\n     *\n     * @since 9.4\n     *\n     * @param  array  $request @see displayCriteria method\n     *\n     * @return void\n     */\n    public static function displayCriteriaGroup($request = [])\n    {\n        $num         = (int) $request['num'];\n        $p           = $request['p'];\n        $randrow     = mt_rand();\n        $rowid       = 'searchrow' . $request['itemtype'] . $randrow;\n        $addclass    = $num == 0 ? ' headerRow' : '';\n        $prefix      = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n\n        if (!$criteria = self::findCriteriaInSession($request['itemtype'], $num, $parents_num)) {\n            $criteria = [\n                'criteria' => self::getDefaultCriteria($request['itemtype']),\n            ];\n        }\n\n        echo \"<div class='list-group-item p-2 border-0 normalcriteria$addclass' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n        echo \"<div class='col-auto'>\";\n        echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'\n                    data-bs-toggle='tooltip' data-bs-placement='left'\n                    title=\\\"\" . __s('Delete a rule') . \"\\\"\n      >\n         <i class='ti ti-square-minus' alt='-'></i>\n      </button>\";\n        echo \"</div>\";\n        echo \"<div class='col-auto'>\";\n        Dropdown::showFromArray(\"criteria{$prefix}[$num][link]\", Search::getLogicalOperators(), [\n            'value' => isset($criteria[\"link\"]) ? $criteria[\"link\"] : '',\n        ]);\n        echo \"</div>\";\n\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n        array_push($parents_num, $num);\n        $params = [\n            'mainform'    => false,\n            'prefix_crit' => \"{$prefix}[$num][criteria]\",\n            'parents_num' => $parents_num,\n            'criteria'    => $criteria['criteria'],\n        ];\n\n        echo \"<div class='col-auto'>\";\n        self::showGenericSearch($request['itemtype'], $params);\n        echo \"</div>\";\n\n        echo \"</div>\";//.row\n        echo \"</div>\";//.list-group-item\n    }\n\n    /**\n     * Retrieve a single criteria in Session by its index\n     *\n     * @since 9.4\n     *\n     * @param  string  $itemtype    which glpi type we must search in session\n     * @param  integer $num         index of the criteria\n     * @param  array   $parents_num node indexes of the parents (@see displayCriteriaGroup)\n     *\n     * @return array|false   the found criteria array, or false if nothing found\n     */\n    public static function findCriteriaInSession($itemtype = '', $num = 0, $parents_num = [])\n    {\n        if (!isset($_SESSION['glpisearch'][$itemtype]['criteria'])) {\n            return false;\n        }\n        $criteria = &$_SESSION['glpisearch'][$itemtype]['criteria'];\n\n        if (count($parents_num)) {\n            foreach ($parents_num as $parent) {\n                if (!isset($criteria[$parent]['criteria'])) {\n                    return false;\n                }\n                $criteria = &$criteria[$parent]['criteria'];\n            }\n        }\n\n        if (\n            isset($criteria[$num])\n            && is_array($criteria[$num])\n        ) {\n            return $criteria[$num];\n        }\n\n        return false;\n    }\n\n    /**\n     * construct the default criteria for an itemtype\n     *\n     * @since 9.4\n     *\n     * @param  class-string<CommonDBTM> $itemtype\n     *\n     * @return array  criteria\n     */\n    public static function getDefaultCriteria($itemtype = '')\n    {\n        global $CFG_GLPI;\n\n        $field = '';\n\n        if ($CFG_GLPI['allow_search_view'] == 2) {\n            $field = 'view';\n        } else {\n            $options = self::getCleanedOptions($itemtype);\n            foreach ($options as $key => $val) {\n                if (\n                    is_array($val)\n                    && isset($val['table'])\n                ) {\n                    $field = $key;\n                    break;\n                }\n            }\n        }\n\n        return [\n            [\n                'field' => $field,\n                'link'  => 'contains',\n                'value' => ''\n            ]\n        ];\n    }\n\n    /**\n     * Display first part of criteria (field + searchtype, just after link)\n     * will call displaySearchoptionValue for the next part (value)\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - itemtype: main itemtype for criteria, sub one for metacriteria\n     *                            - num: index of the criteria\n     *                            - field: field key of the criteria\n     *                            - p: params of showGenericSearch method\n     *\n     * @return void\n     */\n    public static function displaySearchoption($request = [])\n    {\n        global $CFG_GLPI;\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"field\"])\n            || !isset($request[\"num\"])\n        ) {\n            return \"\";\n        }\n\n        $p      = $request['p'];\n        $num    = (int) $request['num'];\n        $prefix = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n\n        if (!is_subclass_of($request['itemtype'], 'CommonDBTM')) {\n            throw new \\RuntimeException('Invalid itemtype provided!');\n        }\n\n        if (isset($request['meta']) && $request['meta']) {\n            $fieldname = 'metacriteria';\n        } else {\n            $fieldname = 'criteria';\n            $request['meta'] = 0;\n        }\n\n        $actions = Search::getActionsFor($request[\"itemtype\"], $request[\"field\"]);\n\n       // is it a valid action for type ?\n        if (\n            count($actions)\n            && (empty($request['searchtype']) || !isset($actions[$request['searchtype']]))\n        ) {\n            $tmp = $actions;\n            unset($tmp['searchopt']);\n            $request['searchtype'] = key($tmp);\n            unset($tmp);\n        }\n\n        $rands = -1;\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $request[\"itemtype\"]));\n        $dropdownname = Html::cleanId(\"spansearchtype$fieldname\" .\n                                    $normalized_itemtype .\n                                    $prefix .\n                                    $num);\n        $searchopt = [];\n        if (count($actions) > 0) {\n           // get already get search options\n            if (isset($actions['searchopt'])) {\n                $searchopt = $actions['searchopt'];\n                // No name for clean array with quotes\n                unset($searchopt['name']);\n                unset($actions['searchopt']);\n            }\n            $searchtype_name = \"{$fieldname}{$prefix}[$num][searchtype]\";\n            echo \"<div class='col-auto'>\";\n            $rands = Dropdown::showFromArray($searchtype_name, $actions, [\n                'value' => $request[\"searchtype\"],\n            ]);\n            echo \"</div>\";\n            $fieldsearch_id = Html::cleanId(\"dropdown_$searchtype_name$rands\");\n        }\n\n        echo \"<div class='col-auto' id='$dropdownname' data-itemtype='{$request[\"itemtype\"]}' data-fieldname='$fieldname' data-prefix='$prefix' data-num='$num'>\";\n        $params = [\n            'value'       => rawurlencode(Sanitizer::dbUnescape($request['value'])),\n            'searchopt'   => $searchopt,\n            'searchtype'  => $request[\"searchtype\"],\n            'num'         => $num,\n            'itemtype'    => $request[\"itemtype\"],\n            '_idor_token' => Session::getNewIDORToken($request[\"itemtype\"]),\n            'from_meta'   => isset($request['from_meta'])\n                           ? $request['from_meta']\n                           : false,\n            'field'       => $request[\"field\"],\n            'p'           => $p,\n        ];\n        self::displaySearchoptionValue($params);\n        echo \"</div>\";\n\n        Ajax::updateItemOnSelectEvent(\n            $fieldsearch_id,\n            $dropdownname,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            [\n                'action'     => 'display_searchoption_value',\n                'searchtype' => '__VALUE__',\n            ] + $params\n        );\n    }\n\n    /**\n     * Display last part of criteria (value, just after searchtype)\n     * called by displaySearchoptionValue\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - searchtype: (contains, equals) passed by displaySearchoption\n     *\n     * @return void\n     */\n    public static function displaySearchoptionValue($request = [])\n    {\n        if (!isset($request['searchtype'])) {\n            return \"\";\n        }\n\n        $p                 = $request['p'];\n        $prefix            = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $searchopt         = isset($request['searchopt']) ? $request['searchopt'] : [];\n        $request['value']  = rawurldecode($request['value']);\n        $fieldname         = isset($request['meta']) && $request['meta']\n                              ? 'metacriteria'\n                              : 'criteria';\n        $inputname         = $fieldname . $prefix . '[' . $request['num'] . '][value]';\n        $display           = false;\n        $item              = getItemForItemtype($request['itemtype']);\n        $options2          = [];\n        $options2['value'] = $request['value'];\n        $options2['width'] = '100%';\n       // For tree dropdpowns\n        $options2['permit_select_parent'] = true;\n\n        switch ($request['searchtype']) {\n            case \"equals\":\n            case \"notequals\":\n            case \"morethan\":\n            case \"lessthan\":\n            case \"under\":\n            case \"notunder\":\n                if (!$display && isset($searchopt['field'])) {\n                    // Specific cases\n                    switch ($searchopt['table'] . \".\" . $searchopt['field']) {\n                      // Add mygroups choice to searchopt\n                        case \"glpi_groups.completename\":\n                             $searchopt['toadd'] = ['mygroups' => __('My groups')];\n                            break;\n\n                        case \"glpi_changes.status\":\n                        case \"glpi_changes.impact\":\n                        case \"glpi_changes.urgency\":\n                        case \"glpi_problems.status\":\n                        case \"glpi_problems.impact\":\n                        case \"glpi_problems.urgency\":\n                        case \"glpi_tickets.status\":\n                        case \"glpi_tickets.impact\":\n                        case \"glpi_tickets.urgency\":\n                            $options2['showtype'] = 'search';\n                            break;\n\n                        case \"glpi_changes.priority\":\n                        case \"glpi_problems.priority\":\n                        case \"glpi_tickets.priority\":\n                            $options2['showtype']  = 'search';\n                            $options2['withmajor'] = true;\n                            break;\n\n                        case \"glpi_tickets.global_validation\":\n                                $options2['all'] = true;\n                            break;\n\n                        case \"glpi_ticketvalidations.status\":\n                              $options2['all'] = true;\n                            break;\n\n                        case \"glpi_users.name\":\n                            $options2['right']            = (isset($searchopt['right']) ? $searchopt['right'] : 'all');\n                            $options2['inactive_deleted'] = 1;\n                            $searchopt['toadd'] = [\n                                [\n                                    'id'    => 'myself',\n                                    'text'  => __('Myself'),\n                                ]\n                            ];\n\n                            break;\n                    }\n\n                    // Standard datatype usage\n                    if (!$display && isset($searchopt['datatype'])) {\n                        switch ($searchopt['datatype']) {\n                            case \"date\":\n                            case \"date_delay\":\n                            case \"datetime\":\n                                $options2['relative_dates'] = true;\n                                break;\n                        }\n                    }\n\n                    $out = $item->getValueToSelect($searchopt, $inputname, $request['value'], $options2);\n                    if (strlen($out)) {\n                         echo $out;\n                         $display = true;\n                    }\n\n                   //Could display be handled by a plugin ?\n                    if (\n                        !$display\n                        && $plug = isPluginItemType(getItemTypeForTable($searchopt['table']))\n                    ) {\n                        $display = Plugin::doOneHook(\n                            $plug['plugin'],\n                            'searchOptionsValues',\n                            [\n                                'name'           => $inputname,\n                                'searchtype'     => $request['searchtype'],\n                                'searchoption'   => $searchopt,\n                                'value'          => $request['value']\n                            ]\n                        );\n                    }\n                }\n                break;\n        }\n\n       // Default case : text field\n        if (!$display) {\n            echo \"<input type='text' class='form-control' size='13' name='$inputname' value=\\\"\" .\n                  Html::cleanInputText($request['value']) . \"\\\">\";\n        }\n    }\n\n\n    /**\n     * Generic Function to add to a HAVING clause\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $LINK           link to use\n     * @param string  $NOT            is is a negative search ?\n     * @param string  $itemtype       item type\n     * @param integer $ID             ID of the item to search\n     * @param string  $searchtype     search type ('contains' or 'equals')\n     * @param string  $val            value search\n     *\n     * @return string|false HAVING clause sub-string (Does not include the \"HAVING\" keyword).\n     *                      May return false if the related search option is not valid for SQL searching.\n     **/\n    public static function addHaving($LINK, $NOT, $itemtype, $ID, $searchtype, $val)\n    {\n\n        global $DB;\n\n        $searchopt  = &self::getOptions($itemtype);\n        if (!isset($searchopt[$ID]['table'])) {\n            return false;\n        }\n        $table = $searchopt[$ID][\"table\"];\n        $NAME = \"ITEM_{$itemtype}_{$ID}\";\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addHaving',\n                $LINK,\n                $NOT,\n                $itemtype,\n                $ID,\n                $val,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n       //// Default cases\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addHaving',\n                    $LINK,\n                    $NOT,\n                    $itemtype,\n                    $ID,\n                    $val,\n                    \"{$itemtype}_{$ID}\"\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n            $NOT = !$NOT;\n        }\n\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            if ($searchopt[$ID][\"datatype\"] == \"mio\") {\n                // Parse value as it may contain a few different formats\n                $val = Toolbox::getMioSizeFromString($val);\n            }\n\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"datetime\":\n                    if (in_array($searchtype, ['contains', 'notcontains'])) {\n                        break;\n                    }\n\n                    $force_day = false;\n                    if (strstr($val, 'BEGIN') || strstr($val, 'LAST')) {\n                        $force_day = true;\n                    }\n\n                    $val = Html::computeGenericDateTimeSearch($val, $force_day);\n\n                    $operator = '';\n                    switch ($searchtype) {\n                        case 'equals':\n                            $operator = !$NOT ? '=' : '!=';\n                            break;\n                        case 'notequals':\n                            $operator = !$NOT ? '!=' : '=';\n                            break;\n                        case 'lessthan':\n                            $operator = !$NOT ? '<' : '>';\n                            break;\n                        case 'morethan':\n                            $operator = !$NOT ? '>' : '<';\n                            break;\n                    }\n\n                    return \" {$LINK} ({$DB->quoteName($NAME)} $operator {$DB->quoteValue($val)}) \";\n                break;\n                case \"count\":\n                case \"mio\":\n                case \"number\":\n                case \"decimal\":\n                case \"timestamp\":\n                    $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                    $replace = [\"<\",\">\"];\n                    $val     = preg_replace($search, $replace, $val);\n                    if (preg_match(\"/([<>])([=]*)[[:space:]]*([0-9]+)/\", $val, $regs)) {\n                        if ($NOT) {\n                            if ($regs[1] == '<') {\n                                $regs[1] = '>';\n                            } else {\n                                $regs[1] = '<';\n                            }\n                        }\n                        $regs[1] .= $regs[2];\n                        return \" $LINK (`$NAME` \" . $regs[1] . \" \" . $regs[3] . \" ) \";\n                    }\n\n                    if (is_numeric($val)) {\n                        if (isset($searchopt[$ID][\"width\"])) {\n                            if (!$NOT) {\n                                return \" $LINK (`$NAME` < \" . (intval($val) + $searchopt[$ID][\"width\"]) . \"\n                                        AND `$NAME` > \" .\n                                           (intval($val) - $searchopt[$ID][\"width\"]) . \") \";\n                            }\n                            return \" $LINK (`$NAME` > \" . (intval($val) + $searchopt[$ID][\"width\"]) . \"\n                                     OR `$NAME` < \" .\n                                        (intval($val) - $searchopt[$ID][\"width\"]) . \" ) \";\n                        }\n                       // Exact search\n                        if (!$NOT) {\n                            return \" $LINK (`$NAME` = \" . (intval($val)) . \") \";\n                        }\n                        return \" $LINK (`$NAME` <> \" . (intval($val)) . \") \";\n                    }\n                    break;\n            }\n        }\n\n        return self::makeTextCriteria(\"`$NAME`\", $val, $NOT, $LINK);\n    }\n\n\n    /**\n     * Generic Function to add ORDER BY to a request\n     *\n     * @since 9.4: $key param has been dropped\n     * @since 10.0.0: Parameters changed to allow multiple sort fields.\n     *    Old functionality maintained by checking the type of the first parameter.\n     *    This backwards compatibility will be removed in a later version.\n     *\n     * @param class-string<CommonDBTM> $itemtype The itemtype\n     * @param array  $sort_fields The search options to order on. This array should contain one or more associative arrays containing:\n     *    - id: The search option ID\n     *    - order: The sort direction (Default: ASC). Invalid sort directions will be replaced with the default option\n     * @param ?integer $_id    field to add (Deprecated)\n     *\n     * @return string ORDER BY query string\n     *\n     **/\n    public static function addOrderBy($itemtype, $sort_fields, $_id = 'ASC')\n    {\n        global $CFG_GLPI;\n\n       // BC parameter conversion\n        if (!is_array($sort_fields)) {\n           // < 10.0.0 parameters\n            Toolbox::deprecated('The parameters for Search::addOrderBy have changed to allow sorting by multiple fields. Please update your calling code.');\n            $sort_fields = [\n                [\n                    'searchopt_id' => $sort_fields,\n                    'order'        => $_id\n                ]\n            ];\n        }\n\n        $orderby_criteria = [];\n        $searchopt = &self::getOptions($itemtype);\n\n        foreach ($sort_fields as $sort_field) {\n            $ID = $sort_field['searchopt_id'];\n            if (isset($searchopt[$ID]['nosort']) && $searchopt[$ID]['nosort']) {\n                continue;\n            }\n            $order = $sort_field['order'] ?? 'ASC';\n           // Order security check\n            if ($order != 'ASC') {\n                $order = 'DESC';\n            }\n\n            $criterion = null;\n\n            $table = $searchopt[$ID][\"table\"];\n            $field = $searchopt[$ID][\"field\"];\n\n            $addtable = '';\n\n            $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n            && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n            $orig_table = self::getOrigTableName($itemtype);\n            if (\n                ($is_fkey_composite_on_self || $table != $orig_table)\n                && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n            ) {\n                $addtable .= \"_\" . $searchopt[$ID][\"linkfield\"];\n            }\n\n            if (isset($searchopt[$ID]['joinparams'])) {\n                $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n\n                if (!empty($complexjoin)) {\n                    $addtable .= \"_\" . $complexjoin;\n                }\n            }\n\n            if (isset($CFG_GLPI[\"union_search_type\"][$itemtype])) {\n                $criterion = \"`ITEM_{$itemtype}_{$ID}` $order\";\n            }\n\n           // Plugin can override core definition for its type\n            if ($criterion === null && $plug = isPluginItemType($itemtype)) {\n                $out = Plugin::doOneHook(\n                    $plug['plugin'],\n                    'addOrderBy',\n                    $itemtype,\n                    $ID,\n                    $order,\n                    \"{$itemtype}_{$ID}\"\n                );\n                $out = $out !== null ? trim($out) : null;\n                if (!empty($out)) {\n                     $out = preg_replace('/^ORDER BY /', '', $out);\n                     $criterion = $out;\n                }\n            }\n\n            if ($criterion === null) {\n                switch ($table . \".\" . $field) {\n                   // FIXME Dead case? Can't see any itemtype referencing this table in their search options to be able to get here.\n                    case \"glpi_auth_tables.name\":\n                        $user_searchopt = self::getOptions('User');\n                        $criterion = \"`glpi_users`.`authtype` $order,\n                              `glpi_authldaps\" . $addtable . \"_\" .\n                         self::computeComplexJoinID($user_searchopt[30]['joinparams']) . \"`.\n                                 `name` $order,\n                              `glpi_authmails\" . $addtable . \"_\" .\n                         self::computeComplexJoinID($user_searchopt[31]['joinparams']) . \"`.\n                                 `name` $order\";\n                        break;\n\n                    case \"glpi_users.name\":\n                        if ($itemtype != 'User') {\n                            if ($_SESSION[\"glpinames_format\"] == User::FIRSTNAME_BEFORE) {\n                                $name1 = 'firstname';\n                                $name2 = 'realname';\n                            } else {\n                                $name1 = 'realname';\n                                $name2 = 'firstname';\n                            }\n                            $criterion = \"`\" . $table . $addtable . \"`.`$name1` $order,\n                                 `\" . $table . $addtable . \"`.`$name2` $order,\n                                 `\" . $table . $addtable . \"`.`name` $order\";\n                        } else {\n                            $criterion = \"`\" . $table . $addtable . \"`.`name` $order\";\n                        }\n                        break;\n                   //FIXME glpi_networkequipments.ip seems like a dead case\n                    case \"glpi_networkequipments.ip\":\n                    case \"glpi_ipaddresses.name\":\n                        $criterion = \"INET6_ATON(`$table$addtable`.`$field`) $order\";\n                        break;\n                }\n            }\n\n           //// Default cases\n\n           // Link with plugin tables\n            if ($criterion === null && preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n                if (count($matches) == 2) {\n                    $plug = $matches[1];\n                    $out = Plugin::doOneHook(\n                        $plug,\n                        'addOrderBy',\n                        $itemtype,\n                        $ID,\n                        $order,\n                        \"{$itemtype}_{$ID}\"\n                    );\n                    $out = $out !== null ? trim($out) : null;\n                    if (!empty($out)) {\n                           $out = preg_replace('/^ORDER BY /', '', $out);\n                           $criterion = $out;\n                    }\n                }\n            }\n\n           // Preformat items\n            if ($criterion === null && isset($searchopt[$ID][\"datatype\"])) {\n                switch ($searchopt[$ID][\"datatype\"]) {\n                    case \"date_delay\":\n                        $interval = \"MONTH\";\n                        if (isset($searchopt[$ID]['delayunit'])) {\n                            $interval = $searchopt[$ID]['delayunit'];\n                        }\n\n                        $add_minus = '';\n                        if (isset($searchopt[$ID][\"datafields\"][3])) {\n                            $add_minus = \"- `$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                        }\n                        $criterion = \"ADDDATE(`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][1] . \"`,\n                                         INTERVAL (`$table$addtable`.`\" .\n                        $searchopt[$ID][\"datafields\"][2] . \"` $add_minus)\n                                         $interval) $order\";\n                }\n            }\n\n            $orderby_criteria[] = $criterion ?? \"`ITEM_{$itemtype}_{$ID}` $order\";\n        }\n\n        if (count($orderby_criteria) === 0) {\n            return '';\n        }\n        return ' ORDER BY ' . implode(', ', $orderby_criteria) . ' ';\n    }\n\n\n    /**\n     * Generic Function to add default columns to view\n     *\n     * @param class-string<CommonDBTM> $itemtype  Item type\n     * @param array  $params   array of parameters\n     *\n     * @return array Array of search option IDs to be shown in the results\n     **/\n    public static function addDefaultToView($itemtype, $params)\n    {\n        global $CFG_GLPI;\n\n        $toview = [];\n        $item   = null;\n        $entity_check = true;\n\n        if ($itemtype != AllAssets::getType()) {\n            $item = getItemForItemtype($itemtype);\n            $entity_check = $item->isEntityAssign();\n        }\n       // Add first element (name)\n        array_push($toview, 1);\n\n        if (isset($params['as_map']) && $params['as_map'] == 1) {\n           // Add location name when map mode\n            array_push($toview, ($itemtype == 'Location' ? 1 : ($itemtype == 'Ticket' ? 83 : 3)));\n        }\n\n       // Add entity view :\n        if (\n            Session::isMultiEntitiesMode()\n            && $entity_check\n            && (isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n              || ($item && $item->maybeRecursive())\n              || isset($_SESSION['glpiactiveentities']) && (count($_SESSION[\"glpiactiveentities\"]) > 1))\n        ) {\n            array_push($toview, 80);\n        }\n        return $toview;\n    }\n\n\n    /**\n     * Generic Function to add default select to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype device type\n     *\n     * @return string Select string\n     **/\n    public static function addDefaultSelect($itemtype)\n    {\n        global $DB;\n\n        $itemtable = self::getOrigTableName($itemtype);\n        $item      = null;\n        $mayberecursive = false;\n        if ($itemtype != AllAssets::getType()) {\n            $item           = getItemForItemtype($itemtype);\n            $mayberecursive = $item->maybeRecursive();\n        }\n        $ret = \"\";\n        switch ($itemtype) {\n            case 'FieldUnicity':\n                $ret = \"`glpi_fieldunicities`.`itemtype` AS ITEMTYPE,\";\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $ret = Plugin::doOneHook(\n                        $plug['plugin'],\n                        'addDefaultSelect',\n                        $itemtype\n                    );\n                }\n        }\n        if ($itemtable == 'glpi_entities') {\n            $ret .= \"`$itemtable`.`id` AS entities_id, '1' AS is_recursive, \";\n        } else if ($mayberecursive) {\n            if ($item->isField('entities_id')) {\n                $ret .= $DB->quoteName(\"$itemtable.entities_id\") . \", \";\n            }\n            if ($item->isField('is_recursive')) {\n                $ret .= $DB->quoteName(\"$itemtable.is_recursive\") . \", \";\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Generic Function to add select to a request\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype     item type\n     * @param integer $ID           ID of the item to add\n     * @param boolean $meta         boolean is a meta\n     * @param integer $meta_type    meta type table ID (default 0)\n     *\n     * @return string Select string\n     **/\n    public static function addSelect($itemtype, $ID, $meta = 0, $meta_type = 0)\n    {\n        global $DB, $CFG_GLPI;\n\n        $searchopt   = &self::getOptions($itemtype);\n        $table       = $searchopt[$ID][\"table\"];\n        $field       = $searchopt[$ID][\"field\"];\n        $addtable    = \"\";\n        $addtable2   = \"\";\n        $NAME        = \"ITEM_{$itemtype}_{$ID}\";\n        $complexjoin = '';\n\n        if (isset($searchopt[$ID]['joinparams'])) {\n            $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n        }\n\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n         && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n\n        $orig_table = self::getOrigTableName($itemtype);\n        if (\n            ((($is_fkey_composite_on_self || $table != $orig_table)\n            && (!isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n                || ($CFG_GLPI[\"union_search_type\"][$itemtype] != $table)))\n            || !empty($complexjoin))\n            && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n        ) {\n            $addtable .= \"_\" . $searchopt[$ID][\"linkfield\"];\n        }\n\n        if (!empty($complexjoin)) {\n            $addtable .= \"_\" . $complexjoin;\n            $addtable2 .= \"_\" . $complexjoin;\n        }\n\n        $addmeta = \"\";\n        if ($meta) {\n           // $NAME = \"META\";\n            if ($meta_type::getTable() != $table) {\n                $addmeta = \"_\" . $meta_type;\n                $addtable  .= $addmeta;\n                $addtable2 .= $addmeta;\n            }\n        }\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addSelect',\n                $itemtype,\n                $ID,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        $tocompute      = \"`$table$addtable`.`$field`\";\n        $tocomputeid    = \"`$table$addtable`.`id`\";\n\n        $tocomputetrans = \"IFNULL(`$table\" . $addtable . \"_trans_\" . $field . \"`.`value`,'\" . self::NULLVALUE . \"') \";\n\n        $ADDITONALFIELDS = '';\n        if (\n            isset($searchopt[$ID][\"additionalfields\"])\n            && count($searchopt[$ID][\"additionalfields\"])\n        ) {\n            foreach ($searchopt[$ID][\"additionalfields\"] as $key) {\n                if (\n                    $meta\n                    || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                ) {\n                    $ADDITONALFIELDS .= \" IFNULL(GROUP_CONCAT(DISTINCT CONCAT(IFNULL(`$table$addtable`.`$key`,\n                                                                         '\" . self::NULLVALUE . \"'),\n                                                   '\" . self::SHORTSEP . \"', $tocomputeid)ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"'), '\" . self::NULLVALUE . self::SHORTSEP . \"')\n                                    AS `\" . $NAME . \"_$key`, \";\n                } else {\n                    $ADDITONALFIELDS .= \"`$table$addtable`.`$key` AS `\" . $NAME . \"_$key`, \";\n                }\n            }\n        }\n\n       // Virtual display no select : only get additional fields\n        if (strpos($field, '_virtual') === 0) {\n            return $ADDITONALFIELDS;\n        }\n\n        switch ($table . \".\" . $field) {\n            case \"glpi_users.name\":\n                if ($itemtype != 'User') {\n                    if ((isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])) {\n                        $addaltemail = \"\";\n                        if (\n                            (($itemtype == 'Ticket') || ($itemtype == 'Problem'))\n                            && isset($searchopt[$ID]['joinparams']['beforejoin']['table'])\n                            && (($searchopt[$ID]['joinparams']['beforejoin']['table']\n                            == 'glpi_tickets_users')\n                            || ($searchopt[$ID]['joinparams']['beforejoin']['table']\n                                == 'glpi_problems_users')\n                            || ($searchopt[$ID]['joinparams']['beforejoin']['table']\n                                == 'glpi_changes_users'))\n                        ) { // For tickets_users\n                             $ticket_user_table\n                             = $searchopt[$ID]['joinparams']['beforejoin']['table'] .\n                             \"_\" . self::computeComplexJoinID($searchopt[$ID]['joinparams']['beforejoin']\n                                                                   ['joinparams']) . $addmeta;\n                               $addaltemail\n                              = \"GROUP_CONCAT(DISTINCT CONCAT(`$ticket_user_table`.`users_id`, ' ',\n                                                        `$ticket_user_table`.`alternative_email`)\n                                                        SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"_2`, \";\n                        }\n                        return \" GROUP_CONCAT(DISTINCT `$table$addtable`.`id` SEPARATOR '\" . self::LONGSEP . \"')\n                                       AS `\" . $NAME . \"`,\n                           $addaltemail\n                           $ADDITONALFIELDS\";\n                    }\n                    return \" `$table$addtable`.`$field` AS `\" . $NAME . \"`,\n                        `$table$addtable`.`realname` AS `\" . $NAME . \"_realname`,\n                        `$table$addtable`.`id`  AS `\" . $NAME . \"_id`,\n                        `$table$addtable`.`firstname` AS `\" . $NAME . \"_firstname`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_softwarelicenses.number\":\n                if ($meta) {\n                    return \" FLOOR(SUM(`$table$addtable2`.`$field`)\n                              * COUNT(DISTINCT `$table$addtable2`.`id`)\n                              / COUNT(`$table$addtable2`.`id`)) AS `\" . $NAME . \"`,\n                        MIN(`$table$addtable2`.`$field`) AS `\" . $NAME . \"_min`,\n                         $ADDITONALFIELDS\";\n                } else {\n                    return \" FLOOR(SUM(`$table$addtable`.`$field`)\n                              * COUNT(DISTINCT `$table$addtable`.`id`)\n                              / COUNT(`$table$addtable`.`id`)) AS `\" . $NAME . \"`,\n                        MIN(`$table$addtable`.`$field`) AS `\" . $NAME . \"_min`,\n                         $ADDITONALFIELDS\";\n                }\n\n            case \"glpi_profiles.name\":\n                if (\n                    ($itemtype == 'User')\n                    && ($ID == 20)\n                ) {\n                    $addtable2 = '';\n                    if ($meta) {\n                        $addtable2 = \"_\" . $meta_type;\n                    }\n                    return \" GROUP_CONCAT(`$table$addtable`.`$field` SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`entities_id` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_entities_id`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_recursive` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_recursive`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_dynamic` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_dynamic`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_entities.completename\":\n                if (\n                    ($itemtype == 'User')\n                    && ($ID == 80)\n                ) {\n                    $addtable2 = '';\n                    if ($meta) {\n                        $addtable2 = \"_\" . $meta_type;\n                    }\n                    return \" GROUP_CONCAT(`$table$addtable`.`completename` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`profiles_id` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_profiles_id`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_recursive` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_recursive`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_dynamic` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_dynamic`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_auth_tables.name\":\n                $user_searchopt = self::getOptions('User');\n                return \" `glpi_users`.`authtype` AS `\" . $NAME . \"`,\n                     `glpi_users`.`auths_id` AS `\" . $NAME . \"_auths_id`,\n                     `glpi_authldaps\" . $addtable . \"_\" .\n                           self::computeComplexJoinID($user_searchopt[30]['joinparams']) . $addmeta . \"`.`$field`\n                              AS `\" . $NAME . \"_\" . $ID . \"_ldapname`,\n                     `glpi_authmails\" . $addtable . \"_\" .\n                           self::computeComplexJoinID($user_searchopt[31]['joinparams']) . $addmeta . \"`.`$field`\n                              AS `\" . $NAME . \"_mailname`,\n                     $ADDITONALFIELDS\";\n\n            case \"glpi_softwareversions.name\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`, '\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_softwareversions.comment\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`,'\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                return \" GROUP_CONCAT(DISTINCT CONCAT(`$table$addtable`.`name`, ' - ',\n                                                  `$table$addtable`.`$field`, '\" . self::SHORTSEP . \"',\n                                                  `$table$addtable`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                 AS `\" . $NAME . \"`,\n                     $ADDITONALFIELDS\";\n\n            case \"glpi_states.name\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `glpi_softwareversions$addtable`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`, '\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                     AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                } else if ($itemtype == 'Software') {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwareversions`.`name`, ' - ',\n                                                     `$table$addtable`.`$field`,'\" . self::SHORTSEP . \"',\n                                                     `$table$addtable`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_itilfollowups.content\":\n            case \"glpi_tickettasks.content\":\n            case \"glpi_changetasks.content\":\n                if (is_subclass_of($itemtype, \"CommonITILObject\")) {\n                   // force ordering by date desc\n                    return \" GROUP_CONCAT(\n                  DISTINCT CONCAT(\n                     IFNULL($tocompute, '\" . self::NULLVALUE . \"'),\n                     '\" . self::SHORTSEP . \"',\n                     $tocomputeid\n                  )\n                  ORDER BY `$table$addtable`.`date` DESC\n                  SEPARATOR '\" . self::LONGSEP . \"'\n               ) AS `\" . $NAME . \"`, $ADDITONALFIELDS\";\n                }\n                break;\n\n            default:\n                break;\n        }\n\n       //// Default cases\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addSelect',\n                    $itemtype,\n                    $ID,\n                    \"{$itemtype}_{$ID}\"\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        if (isset($searchopt[$ID][\"computation\"])) {\n            $tocompute = $searchopt[$ID][\"computation\"];\n            $tocompute = str_replace($DB->quoteName('TABLE'), 'TABLE', $tocompute);\n            $tocompute = str_replace(\"TABLE\", $DB->quoteName(\"$table$addtable\"), $tocompute);\n        }\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"count\":\n                    return \" COUNT(DISTINCT `$table$addtable`.`$field`) AS `\" . $NAME . \"`,\n                     $ADDITONALFIELDS\";\n\n                case \"date_delay\":\n                    $interval = \"MONTH\";\n                    if (isset($searchopt[$ID]['delayunit'])) {\n                        $interval = $searchopt[$ID]['delayunit'];\n                    }\n\n                    $add_minus = '';\n                    if (isset($searchopt[$ID][\"datafields\"][3])) {\n                        $add_minus = \"-`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                    }\n                    if (\n                        $meta\n                        || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                    ) {\n                        return \" GROUP_CONCAT(DISTINCT ADDDATE(`$table$addtable`.`\" .\n                                                            $searchopt[$ID][\"datafields\"][1] . \"`,\n                                                         INTERVAL (`$table$addtable`.`\" .\n                                                                    $searchopt[$ID][\"datafields\"][2] .\n                                                                    \"` $add_minus) $interval)\n                                         SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                           $ADDITONALFIELDS\";\n                    }\n                    return \"ADDDATE(`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][1] . \"`,\n                               INTERVAL (`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][2] .\n                                          \"` $add_minus) $interval) AS `\" . $NAME . \"`,\n                       $ADDITONALFIELDS\";\n\n                case \"itemlink\":\n                    if (\n                        $meta\n                        || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                    ) {\n                        $TRANS = '';\n                        if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n                            $TRANS = \"GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocomputetrans, '\" . self::NULLVALUE . \"'),\n                                                             '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid\n                                             SEPARATOR '\" . self::LONGSEP . \"')\n                                     AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n                        }\n\n                        return \" GROUP_CONCAT(DISTINCT CONCAT($tocompute, '\" . self::SHORTSEP . \"' ,\n                                                        `$table$addtable`.`id`) ORDER BY `$table$addtable`.`id`\n                                        SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                           $TRANS\n                           $ADDITONALFIELDS\";\n                    }\n                    return \" $tocompute AS `\" . $NAME . \"`,\n                        `$table$addtable`.`id` AS `\" . $NAME . \"_id`,\n                        $ADDITONALFIELDS\";\n            }\n        }\n\n       // Default case\n        if (\n            $meta\n            || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"]\n              && (!isset($searchopt[$ID][\"computation\"])\n                  || isset($searchopt[$ID][\"computationgroupby\"])\n                     && $searchopt[$ID][\"computationgroupby\"]))\n        ) { // Not specific computation\n            $TRANS = '';\n            if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n                $TRANS = \"GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocomputetrans, '\" . self::NULLVALUE . \"'),\n                                                   '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"')\n                                  AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n            }\n            return \" GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocompute, '\" . self::NULLVALUE . \"'),\n                                               '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"')\n                              AS `\" . $NAME . \"`,\n                  $TRANS\n                  $ADDITONALFIELDS\";\n        }\n        $TRANS = '';\n        if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n            $TRANS = $tocomputetrans . \" AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n        }\n        return \"$tocompute AS `\" . $NAME . \"`, $TRANS $ADDITONALFIELDS\";\n    }\n\n\n    /**\n     * Generic Function to add default where to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype device type\n     *\n     * @return string Where string\n     **/\n    public static function addDefaultWhere($itemtype)\n    {\n        $condition = '';\n\n        switch ($itemtype) {\n            case 'Reservation':\n                $condition = getEntitiesRestrictRequest(\"\", ReservationItem::getTable(), '', '', true);\n                break;\n\n            case 'Reminder':\n                $condition = Reminder::addVisibilityRestrict();\n                break;\n\n            case 'RSSFeed':\n                $condition = RSSFeed::addVisibilityRestrict();\n                break;\n\n            case 'Notification':\n                if (!Config::canView()) {\n                    $condition = \" `glpi_notifications`.`itemtype` NOT IN ('CronTask', 'DBConnection') \";\n                }\n                break;\n\n           // No link\n            case 'User':\n               // View all entities\n                if (!Session::canViewAllEntities()) {\n                    $condition = getEntitiesRestrictRequest(\"\", \"glpi_profiles_users\", '', '', true);\n                }\n                break;\n\n            case 'ProjectTask':\n                $condition  = '';\n                $teamtable  = 'glpi_projecttaskteams';\n                $condition .= \"`glpi_projects`.`is_template` = 0\";\n                $condition .= \" AND ((`$teamtable`.`itemtype` = 'User'\n                             AND `$teamtable`.`items_id` = '\" . Session::getLoginUserID() . \"')\";\n                if (count($_SESSION['glpigroups'])) {\n                    $condition .= \" OR (`$teamtable`.`itemtype` = 'Group'\n                                    AND `$teamtable`.`items_id`\n                                       IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                }\n                $condition .= \") \";\n                break;\n\n            case 'Project':\n                $condition = '';\n                if (!Session::haveRight(\"project\", Project::READALL)) {\n                    $teamtable  = 'glpi_projectteams';\n                    $condition .= \"(`glpi_projects`.users_id = '\" . Session::getLoginUserID() . \"'\n                               OR (`$teamtable`.`itemtype` = 'User'\n                                   AND `$teamtable`.`items_id` = '\" . Session::getLoginUserID() . \"')\";\n                    if (count($_SESSION['glpigroups'])) {\n                        $condition .= \" OR (`glpi_projects`.`groups_id`\n                                       IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                        $condition .= \" OR (`$teamtable`.`itemtype` = 'Group'\n                                      AND `$teamtable`.`items_id`\n                                          IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                    }\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Ticket':\n               // Same structure in addDefaultJoin\n                $condition = '';\n                if (!Session::haveRight(\"ticket\", Ticket::READALL)) {\n                    $searchopt\n                    = &self::getOptions($itemtype);\n                    $requester_table\n                    = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[4]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $requestergroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[71]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $assign_table\n                     = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[5]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $assigngroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[8]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $observer_table\n                     = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[66]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $observergroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[65]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $condition = \"(\";\n\n                    if (Session::haveRight(\"ticket\", Ticket::READMY)) {\n                          $condition .= \" $requester_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                    OR $observer_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                    OR `glpi_tickets`.`users_id_recipient` = '\" . Session::getLoginUserID() . \"'\";\n                    } else {\n                        $condition .= \"0=1\";\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::READGROUP)) {\n                        if (count($_SESSION['glpigroups'])) {\n                            $condition .= \" OR $requestergroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                            $condition .= \" OR $observergroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                        }\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::OWN)) {// Can own ticket : show assign to me\n                        $condition .= \" OR $assign_table.users_id = '\" . Session::getLoginUserID() . \"' \";\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::READASSIGN)) { // assign to me\n                        $condition .= \" OR $assign_table.`users_id` = '\" . Session::getLoginUserID() . \"'\";\n                        if (count($_SESSION['glpigroups'])) {\n                            $condition .= \" OR $assigngroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                        }\n                        if (Session::haveRight('ticket', Ticket::ASSIGN)) {\n                            $condition .= \" OR `glpi_tickets`.`status`='\" . CommonITILObject::INCOMING . \"'\";\n                        }\n                    }\n\n                    if (\n                        Session::haveRightsOr(\n                            'ticketvalidation',\n                            [TicketValidation::VALIDATEINCIDENT,\n                                TicketValidation::VALIDATEREQUEST\n                            ]\n                        )\n                    ) {\n                        $condition .= \" OR `glpi_ticketvalidations`.`users_id_validate`\n                                          = '\" . Session::getLoginUserID() . \"'\";\n                    }\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Change':\n            case 'Problem':\n                if ($itemtype == 'Change') {\n                    $right       = 'change';\n                    $table       = 'changes';\n                    $groupetable = \"`glpi_changes_groups_\";\n                } else if ($itemtype == 'Problem') {\n                    $right       = 'problem';\n                    $table       = 'problems';\n                    $groupetable = \"`glpi_groups_problems_\";\n                }\n               // Same structure in addDefaultJoin\n                $condition = '';\n                if (!Session::haveRight(\"$right\", $itemtype::READALL)) {\n                    $searchopt       = &self::getOptions($itemtype);\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                        $requester_table      = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[4]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $requestergroup_table = $groupetable .\n                                          self::computeComplexJoinID($searchopt[71]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n\n                        $observer_table       = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[66]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $observergroup_table  = $groupetable .\n                                          self::computeComplexJoinID($searchopt[65]['joinparams']\n                                                                    ['beforejoin']['joinparams']) . '`';\n\n                        $assign_table         = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[5]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $assigngroup_table    = $groupetable .\n                                          self::computeComplexJoinID($searchopt[8]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                    }\n                    $condition = \"(\";\n\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                        $condition .= \" $requester_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR $observer_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR $assign_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR `glpi_\" . $table . \"`.`users_id_recipient` = '\" . Session::getLoginUserID() . \"'\";\n                        if (count($_SESSION['glpigroups'])) {\n                            $my_groups_keys = \"'\" . implode(\"','\", $_SESSION['glpigroups']) . \"'\";\n                            $condition .= \" OR $requestergroup_table.groups_id IN ($my_groups_keys)\n                                 OR $observergroup_table.groups_id IN ($my_groups_keys)\n                                 OR $assigngroup_table.groups_id IN ($my_groups_keys)\";\n                        }\n                    } else {\n                        $condition .= \"0=1\";\n                    }\n\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Config':\n                $availableContexts = ['core'] + Plugin::getPlugins();\n                $availableContexts = implode(\"', '\", $availableContexts);\n                $condition = \"`context` IN ('$availableContexts')\";\n                break;\n\n            case 'SavedSearch':\n                $condition = SavedSearch::addVisibilityRestrict();\n                break;\n\n            case 'TicketTask':\n               // Filter on is_private\n                $allowed_is_private = [];\n                if (Session::haveRight(TicketTask::$rightname, CommonITILTask::SEEPRIVATE)) {\n                    $allowed_is_private[] = 1;\n                }\n                if (Session::haveRight(TicketTask::$rightname, CommonITILTask::SEEPUBLIC)) {\n                    $allowed_is_private[] = 0;\n                }\n\n               // If the user can't see public and private\n                if (!count($allowed_is_private)) {\n                    $condition = \"0 = 1\";\n                    break;\n                }\n\n                $in = \"IN ('\" . implode(\"','\", $allowed_is_private) . \"')\";\n                $condition = \"(`glpi_tickettasks`.`is_private` $in \";\n\n               // Check for assigned or created tasks\n                $condition .= \"OR `glpi_tickettasks`.`users_id` = \" . Session::getLoginUserID() . \" \";\n                $condition .= \"OR `glpi_tickettasks`.`users_id_tech` = \" . Session::getLoginUserID() . \" \";\n\n               // Check for parent item visibility unless the user can see all the\n               // possible parents\n                if (!Session::haveRight('ticket', Ticket::READALL)) {\n                    $condition .= \"AND \" . TicketTask::buildParentCondition();\n                }\n\n                $condition .= \")\";\n\n                break;\n\n            case 'ITILFollowup':\n               // Filter on is_private\n                $allowed_is_private = [];\n                if (Session::haveRight(ITILFollowup::$rightname, ITILFollowup::SEEPRIVATE)) {\n                    $allowed_is_private[] = 1;\n                }\n                if (Session::haveRight(ITILFollowup::$rightname, ITILFollowup::SEEPUBLIC)) {\n                    $allowed_is_private[] = 0;\n                }\n\n               // If the user can't see public and private\n                if (!count($allowed_is_private)) {\n                    $condition = \"0 = 1\";\n                    break;\n                }\n\n                $in = \"IN ('\" . implode(\"','\", $allowed_is_private) . \"')\";\n                $condition = \"(`glpi_itilfollowups`.`is_private` $in \";\n\n               // Now filter on parent item visiblity\n                $condition .= \"AND (\";\n\n               // Filter for \"ticket\" parents\n                $condition .= ITILFollowup::buildParentCondition(\\Ticket::getType());\n                $condition .= \"OR \";\n\n               // Filter for \"change\" parents\n                $condition .= ITILFollowup::buildParentCondition(\n                    \\Change::getType(),\n                    'changes_id',\n                    \"glpi_changes_users\",\n                    \"glpi_changes_groups\"\n                );\n                $condition .= \"OR \";\n\n               // Fitler for \"problem\" parents\n                $condition .= ITILFollowup::buildParentCondition(\n                    \\Problem::getType(),\n                    'problems_id',\n                    \"glpi_problems_users\",\n                    \"glpi_groups_problems\"\n                );\n                $condition .= \"))\";\n\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $condition = Plugin::doOneHook($plug['plugin'], 'addDefaultWhere', $itemtype);\n                }\n                break;\n        }\n\n       /* Hook to restrict user right on current itemtype */\n        list($itemtype, $condition) = Plugin::doHookFunction('add_default_where', [$itemtype, $condition]);\n        return $condition;\n    }\n\n    /**\n     * Generic Function to add where to a request\n     *\n     * @param string  $link         Link string\n     * @param boolean $nott         Is it a negative search ?\n     * @param string  $itemtype     Item type\n     * @param integer $ID           ID of the item to search\n     * @param string  $searchtype   Searchtype used (equals or contains)\n     * @param string  $val          Item num in the request\n     * @param integer $meta         Is a meta search (meta=2 in search.class.php) (default 0)\n     *\n     * @return string Where string\n     **/\n    public static function addWhere($link, $nott, $itemtype, $ID, $searchtype, $val, $meta = 0)\n    {\n\n        global $DB;\n\n        $searchopt = &self::getOptions($itemtype);\n        if (!isset($searchopt[$ID]['table'])) {\n            return false;\n        }\n        $table     = $searchopt[$ID][\"table\"];\n        $field     = $searchopt[$ID][\"field\"];\n\n        $inittable = $table;\n        $addtable  = '';\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n         && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n        $orig_table = self::getOrigTableName($itemtype);\n        if (\n            ($table != 'asset_types')\n            && ($is_fkey_composite_on_self || $table != $orig_table)\n            && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n        ) {\n            $addtable = \"_\" . $searchopt[$ID][\"linkfield\"];\n            $table   .= $addtable;\n        }\n\n        if (isset($searchopt[$ID]['joinparams'])) {\n            $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n\n            if (!empty($complexjoin)) {\n                $table .= \"_\" . $complexjoin;\n            }\n        }\n\n        $addmeta = \"\";\n        if (\n            $meta\n            && ($itemtype::getTable() != $inittable)\n        ) {\n            $addmeta = \"_\" . $itemtype;\n            $table .= $addmeta;\n        }\n\n       // Hack to allow search by ID on every sub-table\n        if (preg_match('/^\\$\\$\\$\\$([0-9]+)$/', $val, $regs)) {\n            return $link . \" (`$table`.`id` \" . ($nott ? \"<>\" : \"=\") . $regs[1] . \" \" .\n                         (($regs[1] == 0) ? \" OR `$table`.`id` IS NULL\" : '') . \") \";\n        }\n\n       // Preparse value\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"datetime\":\n                case \"date\":\n                case \"date_delay\":\n                    $force_day = true;\n                    if (\n                        $searchopt[$ID][\"datatype\"] == 'datetime'\n                        && !(strstr($val, 'BEGIN') || strstr($val, 'LAST') || strstr($val, 'DAY'))\n                    ) {\n                        $force_day = false;\n                    }\n\n                    $val = Html::computeGenericDateTimeSearch($val, $force_day);\n\n                    break;\n            }\n        }\n        switch ($searchtype) {\n            case \"notcontains\":\n                $nott = !$nott;\n               //negated, use contains case\n            case \"contains\":\n                if (isset($searchopt[$ID][\"datatype\"]) && ($searchopt[$ID][\"datatype\"] === 'decimal')) {\n                    $matches = [];\n                    if (preg_match('/^(\\d+.?\\d?)/', $val, $matches)) {\n                        $val = $matches[1];\n                        if (!str_contains($val, '.')) {\n                            $val .= '.';\n                        }\n                    }\n                }\n                $SEARCH = self::makeTextSearch($val, $nott);\n                break;\n\n            case \"equals\":\n                if ($nott) {\n                    $SEARCH = \" <> \" . DBmysql::quoteValue($val);\n                } else {\n                    $SEARCH = \" = \" . DBmysql::quoteValue($val);\n                }\n                break;\n\n            case \"notequals\":\n                if ($nott) {\n                    $SEARCH = \" = \" . DBmysql::quoteValue($val);\n                } else {\n                    $SEARCH = \" <> \" . DBmysql::quoteValue($val);\n                }\n                break;\n\n            case \"under\":\n                if ($nott) {\n                    $SEARCH = \" NOT IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                } else {\n                    $SEARCH = \" IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                }\n                break;\n\n            case \"notunder\":\n                if ($nott) {\n                    $SEARCH = \" IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                } else {\n                    $SEARCH = \" NOT IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                }\n                break;\n        }\n\n       //Check in current item if a specific where is defined\n        if (method_exists($itemtype, 'addWhere')) {\n            $out = $itemtype::addWhere($link, $nott, $itemtype, $ID, $searchtype, $val);\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addWhere',\n                $link,\n                $nott,\n                $itemtype,\n                $ID,\n                $val,\n                $searchtype\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        switch ($inittable . \".\" . $field) {\n           // case \"glpi_users_validation.name\" :\n\n            case \"glpi_users.name\":\n                if ($val == 'myself') {\n                    switch ($searchtype) {\n                        case 'equals':\n                            return \" $link (`$table`.`id` =  \" . $DB->quoteValue($_SESSION['glpiID']) . \") \";\n\n                        case 'notequals':\n                            return \" $link (`$table`.`id` <>  \" . $DB->quoteValue($_SESSION['glpiID']) . \") \";\n                    }\n                }\n\n                if ($itemtype == 'User') { // glpi_users case / not link table\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        $search_str = \"`$table`.`id`\" . $SEARCH;\n\n                        if ($searchtype == 'notequals') {\n                            $nott = !$nott;\n                        }\n\n                        // Add NULL if $val = 0 and not negative search\n                        // Or negative search on real value\n                        if ((!$nott && ($val == 0)) || ($nott && ($val != 0))) {\n                            $search_str .= \" OR `$table`.`id` IS NULL\";\n                        }\n\n                        return \" $link ($search_str)\";\n                    }\n                    return self::makeTextCriteria(\"`$table`.`$field`\", $val, $nott, $link);\n                }\n                if ($_SESSION[\"glpinames_format\"] == User::FIRSTNAME_BEFORE) {\n                    $name1 = 'firstname';\n                    $name2 = 'realname';\n                } else {\n                    $name1 = 'realname';\n                    $name2 = 'firstname';\n                }\n\n                if (in_array($searchtype, ['equals', 'notequals'])) {\n                    return \" $link (`$table`.`id`\" . $SEARCH .\n                               (($val == 0) ? \" OR `$table`.`id` IS\" .\n                                   (($searchtype == \"notequals\") ? \" NOT\" : \"\") . \" NULL\" : '') . ') ';\n                }\n                $toadd   = '';\n\n                $tmplink = 'OR';\n                if ($nott) {\n                    $tmplink = 'AND';\n                }\n\n                if (is_a($itemtype, CommonITILObject::class, true)) {\n                    if (\n                        isset($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"])\n                        && isset($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"joinparams\"])\n                        && (($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                         == 'glpi_tickets_users')\n                        || ($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                             == 'glpi_problems_users')\n                        || ($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                             == 'glpi_changes_users'))\n                    ) {\n                        $bj        = $searchopt[$ID][\"joinparams\"][\"beforejoin\"];\n                        $linktable = $bj['table'] . '_' . self::computeComplexJoinID($bj['joinparams']) . $addmeta;\n                       //$toadd     = \"`$linktable`.`alternative_email` $SEARCH $tmplink \";\n                        $toadd     = self::makeTextCriteria(\n                            \"`$linktable`.`alternative_email`\",\n                            $val,\n                            $nott,\n                            $tmplink\n                        );\n                        if ($val == '^$') {\n                             return $link . \" ((`$linktable`.`users_id` IS NULL)\n                            OR `$linktable`.`alternative_email` IS NULL)\";\n                        }\n                    }\n                }\n                $toadd2 = '';\n                if (\n                    $nott\n                    && ($val != 'NULL') && ($val != 'null')\n                ) {\n                    $toadd2 = \" OR `$table`.`$field` IS NULL\";\n                }\n                return $link . \" (((`$table`.`$name1` $SEARCH\n                            $tmplink `$table`.`$name2` $SEARCH\n                            $tmplink `$table`.`$field` $SEARCH\n                            $tmplink CONCAT(`$table`.`$name1`, ' ', `$table`.`$name2`) $SEARCH )\n                            $toadd2) $toadd)\";\n\n            case \"glpi_groups.completename\":\n                if ($val == 'mygroups') {\n                    switch ($searchtype) {\n                        case 'equals':\n                            return \" $link (`$table`.`id` IN ('\" . implode(\n                                \"','\",\n                                $_SESSION['glpigroups']\n                            ) . \"')) \";\n\n                        case 'notequals':\n                            return \" $link (`$table`.`id` NOT IN ('\" . implode(\n                                \"','\",\n                                $_SESSION['glpigroups']\n                            ) . \"')) \";\n\n                        case 'under':\n                             $groups = $_SESSION['glpigroups'];\n                            foreach ($_SESSION['glpigroups'] as $g) {\n                                $groups += getSonsOf($inittable, $g);\n                            }\n                             $groups = array_unique($groups);\n                            return \" $link (`$table`.`id` IN ('\" . implode(\"','\", $groups) . \"')) \";\n\n                        case 'notunder':\n                            $groups = $_SESSION['glpigroups'];\n                            foreach ($_SESSION['glpigroups'] as $g) {\n                                 $groups += getSonsOf($inittable, $g);\n                            }\n                            $groups = array_unique($groups);\n                            return \" $link (`$table`.`id` NOT IN ('\" . implode(\"','\", $groups) . \"')) \";\n                    }\n                }\n                break;\n\n            case \"glpi_auth_tables.name\":\n                $user_searchopt = self::getOptions('User');\n                $tmplink        = 'OR';\n                if ($nott) {\n                    $tmplink = 'AND';\n                }\n                return $link . \" (`glpi_authmails\" . $addtable . \"_\" .\n                              self::computeComplexJoinID($user_searchopt[31]['joinparams']) . $addmeta . \"`.`name`\n                           $SEARCH\n                           $tmplink `glpi_authldaps\" . $addtable . \"_\" .\n                              self::computeComplexJoinID($user_searchopt[30]['joinparams']) . $addmeta . \"`.`name`\n                           $SEARCH ) \";\n\n            case \"glpi_ipaddresses.name\":\n                $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                $replace = [\"<\",\">\"];\n                $val     = preg_replace($search, $replace, $val);\n                if (preg_match(\"/^\\s*([<>])([=]*)[[:space:]]*([0-9\\.]+)/\", $val, $regs)) {\n                    if ($nott) {\n                        if ($regs[1] == '<') {\n                            $regs[1] = '>';\n                        } else {\n                            $regs[1] = '<';\n                        }\n                    }\n                    $regs[1] .= $regs[2];\n                    return $link . \" (INET_ATON(`$table`.`$field`) \" . $regs[1] . \" INET_ATON('\" . $regs[3] . \"')) \";\n                }\n                break;\n\n            case \"glpi_tickets.status\":\n            case \"glpi_problems.status\":\n            case \"glpi_changes.status\":\n                $tocheck = [];\n                if ($item = getItemForItemtype($itemtype)) {\n                    switch ($val) {\n                        case 'process':\n                            $tocheck = $item->getProcessStatusArray();\n                            break;\n\n                        case 'notclosed':\n                            $tocheck = $item->getAllStatusArray();\n                            foreach ($item->getClosedStatusArray() as $status) {\n                                if (isset($tocheck[$status])) {\n                                    unset($tocheck[$status]);\n                                }\n                            }\n                            $tocheck = array_keys($tocheck);\n                            break;\n\n                        case 'old':\n                            $tocheck = array_merge(\n                                $item->getSolvedStatusArray(),\n                                $item->getClosedStatusArray()\n                            );\n                            break;\n\n                        case 'notold':\n                            $tocheck = $item::getNotSolvedStatusArray();\n                            break;\n\n                        case 'all':\n                            $tocheck = array_keys($item->getAllStatusArray());\n                            break;\n                    }\n                }\n\n                if (count($tocheck) == 0) {\n                    $statuses = $item->getAllStatusArray();\n                    if (isset($statuses[$val])) {\n                        $tocheck = [$val];\n                    }\n                }\n\n                if (count($tocheck)) {\n                    if ($nott) {\n                        return $link . \" `$table`.`$field` NOT IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                    }\n                    return $link . \" `$table`.`$field` IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                }\n                break;\n\n            case \"glpi_tickets_tickets.tickets_id_1\":\n                $tmplink = 'OR';\n                $compare = '=';\n                if ($nott) {\n                    $tmplink = 'AND';\n                    $compare = '<>';\n                }\n                $toadd2 = '';\n                if (\n                    $nott\n                    && ($val != 'NULL') && ($val != 'null')\n                ) {\n                    $toadd2 = \" OR `$table`.`$field` IS NULL\";\n                }\n\n                return $link . \" (((`$table`.`tickets_id_1` $compare '$val'\n                              $tmplink `$table`.`tickets_id_2` $compare '$val')\n                             AND `glpi_tickets`.`id` <> '$val')\n                            $toadd2)\";\n\n            case \"glpi_tickets.priority\":\n            case \"glpi_tickets.impact\":\n            case \"glpi_tickets.urgency\":\n            case \"glpi_problems.priority\":\n            case \"glpi_problems.impact\":\n            case \"glpi_problems.urgency\":\n            case \"glpi_changes.priority\":\n            case \"glpi_changes.impact\":\n            case \"glpi_changes.urgency\":\n            case \"glpi_projects.priority\":\n                if (is_numeric($val)) {\n                    if ($val > 0) {\n                        $compare = ($nott ? '<>' : '=');\n                        return $link . \" `$table`.`$field` $compare '$val'\";\n                    }\n                    if ($val < 0) {\n                        $compare = ($nott ? '<' : '>=');\n                        return $link . \" `$table`.`$field` $compare '\" . abs($val) . \"'\";\n                    }\n                   // Show all\n                    $compare = ($nott ? '<' : '>=');\n                    return $link . \" `$table`.`$field` $compare '0' \";\n                }\n                return \"\";\n\n            case \"glpi_tickets.global_validation\":\n            case \"glpi_ticketvalidations.status\":\n            case \"glpi_changes.global_validation\":\n            case \"glpi_changevalidations.status\":\n                if ($val == 'all') {\n                    return \"\";\n                }\n                $tocheck = [];\n                switch ($val) {\n                    case 'can':\n                        $tocheck = CommonITILValidation::getCanValidationStatusArray();\n                        break;\n\n                    case 'all':\n                        $tocheck = CommonITILValidation::getAllValidationStatusArray();\n                        break;\n                }\n                if (count($tocheck) == 0) {\n                    $tocheck = [$val];\n                }\n                if (count($tocheck)) {\n                    if ($nott) {\n                        return $link . \" `$table`.`$field` NOT IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                    }\n                    return $link . \" `$table`.`$field` IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                }\n                break;\n\n            case \"glpi_notifications.event\":\n                if (in_array($searchtype, ['equals', 'notequals']) && strpos($val, self::SHORTSEP)) {\n                    $not = 'notequals' === $searchtype ? 'NOT' : '';\n                    list($itemtype_val, $event_val) = explode(self::SHORTSEP, $val);\n                    return \" $link $not(`$table`.`event` = '$event_val'\n                               AND `$table`.`itemtype` = '$itemtype_val')\";\n                }\n                break;\n        }\n\n       //// Default cases\n\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $inittable, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addWhere',\n                    $link,\n                    $nott,\n                    $itemtype,\n                    $ID,\n                    $val,\n                    $searchtype\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        $tocompute      = \"`$table`.`$field`\";\n        $tocomputetrans = \"`\" . $table . \"_trans_\" . $field . \"`.`value`\";\n        if (isset($searchopt[$ID][\"computation\"])) {\n            $tocompute = $searchopt[$ID][\"computation\"];\n            $tocompute = str_replace($DB->quoteName('TABLE'), 'TABLE', $tocompute);\n            $tocompute = str_replace(\"TABLE\", $DB->quoteName(\"$table\"), $tocompute);\n        }\n\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            if ($searchopt[$ID][\"datatype\"] == \"mio\") {\n                // Parse value as it may contain a few different formats\n                $val = Toolbox::getMioSizeFromString($val);\n            }\n\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"itemtypename\":\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        return \" $link (`$table`.`$field`\" . $SEARCH . ') ';\n                    }\n                    break;\n\n                case \"itemlink\":\n                    if (in_array($searchtype, ['equals', 'notequals', 'under', 'notunder'])) {\n                        return \" $link (`$table`.`id`\" . $SEARCH . ') ';\n                    }\n                    break;\n\n                case \"datetime\":\n                case \"date\":\n                case \"date_delay\":\n                    if ($searchopt[$ID][\"datatype\"] == 'datetime') {\n                       // Specific search for datetime\n                        if (in_array($searchtype, ['equals', 'notequals'])) {\n                             $val = preg_replace(\"/:00$/\", '', $val);\n                             $val = '^' . $val;\n                            if ($searchtype == 'notequals') {\n                                $nott = !$nott;\n                            }\n                            return self::makeTextCriteria(\"`$table`.`$field`\", $val, $nott, $link);\n                        }\n                    }\n                    if ($searchtype == 'lessthan') {\n                        $val = '<' . $val;\n                    }\n                    if ($searchtype == 'morethan') {\n                        $val = '>' . $val;\n                    }\n                    if ($searchtype) {\n                        $date_computation = $tocompute;\n                    }\n                    if (in_array($searchtype, [\"contains\", \"notcontains\"])) {\n                        $default_charset = DBConnection::getDefaultCharset();\n                        $date_computation = \"CONVERT($date_computation USING {$default_charset})\";\n                    }\n                    $search_unit = ' MONTH ';\n                    if (isset($searchopt[$ID]['searchunit'])) {\n                        $search_unit = $searchopt[$ID]['searchunit'];\n                    }\n                    if ($searchopt[$ID][\"datatype\"] == \"date_delay\") {\n                        $delay_unit = ' MONTH ';\n                        if (isset($searchopt[$ID]['delayunit'])) {\n                            $delay_unit = $searchopt[$ID]['delayunit'];\n                        }\n                        $add_minus = '';\n                        if (isset($searchopt[$ID][\"datafields\"][3])) {\n                            $add_minus = \"-`$table`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                        }\n                        $date_computation = \"ADDDATE(`$table`.\" . $searchopt[$ID][\"datafields\"][1] . \",\n                                               INTERVAL (`$table`.\" . $searchopt[$ID][\"datafields\"][2] . \"\n                                                         $add_minus)\n                                               $delay_unit)\";\n                    }\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        return \" $link ($date_computation \" . $SEARCH . ') ';\n                    }\n                    $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                    $replace = [\"<\",\">\"];\n                    $val     = preg_replace($search, $replace, $val);\n                    if (preg_match(\"/^\\s*([<>=]+)(.*)/\", $val, $regs)) {\n                        if (is_numeric($regs[2])) {\n                            return $link . \" $date_computation \" . $regs[1] . \"\n                            ADDDATE(NOW(), INTERVAL \" . $regs[2] . \" $search_unit) \";\n                        }\n                       // ELSE Reformat date if needed\n                        $regs[2] = preg_replace(\n                            '@(\\d{1,2})(-|/)(\\d{1,2})(-|/)(\\d{4})@',\n                            '\\5-\\3-\\1',\n                            $regs[2]\n                        );\n                        if (preg_match('/[0-9]{2,4}-[0-9]{1,2}-[0-9]{1,2}/', $regs[2])) {\n                             $ret = $link;\n                            if ($nott) {\n                                $ret .= \" NOT(\";\n                            }\n                             $ret .= \" $date_computation {$regs[1]} '{$regs[2]}'\";\n                            if ($nott) {\n                                $ret .= \")\";\n                            }\n                            return $ret;\n                        }\n                        return \"\";\n                    }\n                   // ELSE standard search\n                   // Date format modification if needed\n                    $val = preg_replace('@(\\d{1,2})(-|/)(\\d{1,2})(-|/)(\\d{4})@', '\\5-\\3-\\1', $val);\n                    if ($date_computation) {\n                        return self::makeTextCriteria($date_computation, $val, $nott, $link);\n                    }\n                    return '';\n\n                case \"right\":\n                    if ($searchtype == 'notequals') {\n                        $nott = !$nott;\n                    }\n                    return $link . ($nott ? ' NOT' : '') . \" ($tocompute & '$val') \";\n\n                case \"bool\":\n                    if (!is_numeric($val)) {\n                        if (strcasecmp($val, __('No')) == 0) {\n                             $val = 0;\n                        } else if (strcasecmp($val, __('Yes')) == 0) {\n                            $val = 1;\n                        }\n                    }\n                   // No break here : use number comparaison case\n\n                case \"count\":\n                case \"mio\":\n                case \"number\":\n                case \"decimal\":\n                case \"timestamp\":\n                case \"progressbar\":\n                    $decimal_contains = $searchopt[$ID][\"datatype\"] === 'decimal' && $searchtype === 'contains';\n                    $search  = [\"/\\&lt;/\", \"/\\&gt;/\"];\n                    $replace = [\"<\", \">\"];\n                    $val     = preg_replace($search, $replace, $val);\n\n                    if (preg_match(\"/([<>])([=]*)[[:space:]]*([0-9]+)/\", $val, $regs)) {\n                        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n                            $nott = !$nott;\n                        }\n                        if ($nott) {\n                            if ($regs[1] == '<') {\n                                $regs[1] = '>';\n                            } else {\n                                $regs[1] = '<';\n                            }\n                        }\n                        $regs[1] .= $regs[2];\n                        return $link . \" ($tocompute \" . $regs[1] . \" \" . $regs[3] . \") \";\n                    }\n\n                    if (is_numeric($val) && !$decimal_contains) {\n                        $numeric_val = floatval($val);\n\n                        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n                            $nott = !$nott;\n                        }\n\n                        if (isset($searchopt[$ID][\"width\"])) {\n                            $ADD = \"\";\n                            if (\n                                $nott\n                                && ($val != 'NULL') && ($val != 'null')\n                            ) {\n                                $ADD = \" OR $tocompute IS NULL\";\n                            }\n                            if ($nott) {\n                                return $link . \" ($tocompute < \" . ($numeric_val - $searchopt[$ID][\"width\"]) . \"\n                                        OR $tocompute > \" . ($numeric_val + $searchopt[$ID][\"width\"]) . \"\n                                        $ADD) \";\n                            }\n                            return $link . \" (($tocompute >= \" . ($numeric_val - $searchopt[$ID][\"width\"]) . \"\n                                      AND $tocompute <= \" . ($numeric_val + $searchopt[$ID][\"width\"]) . \")\n                                     $ADD) \";\n                        }\n                        if (!$nott) {\n                            return \" $link ($tocompute = $numeric_val) \";\n                        }\n                        return \" $link ($tocompute <> $numeric_val) \";\n                    }\n                    break;\n            }\n        }\n\n       // Default case\n        if (in_array($searchtype, ['equals', 'notequals','under', 'notunder'])) {\n            if (\n                (!isset($searchopt[$ID]['searchequalsonfield'])\n                || !$searchopt[$ID]['searchequalsonfield'])\n                && ($itemtype == AllAssets::getType()\n                || $table != $itemtype::getTable())\n            ) {\n                $out = \" $link (`$table`.`id`\" . $SEARCH;\n            } else {\n                $out = \" $link (`$table`.`$field`\" . $SEARCH;\n            }\n            if ($searchtype == 'notequals') {\n                $nott = !$nott;\n            }\n           // Add NULL if $val = 0 and not negative search\n           // Or negative search on real value\n            if (\n                (!$nott && ($val == 0))\n                || ($nott && ($val != 0))\n            ) {\n                $out .= \" OR `$table`.`id` IS NULL\";\n            }\n            $out .= ')';\n            return $out;\n        }\n        $transitemtype = getItemTypeForTable($inittable);\n        if (Session::haveTranslations($transitemtype, $field)) {\n            return \" $link (\" . self::makeTextCriteria($tocompute, $val, $nott, '') . \"\n                          OR \" . self::makeTextCriteria($tocomputetrans, $val, $nott, '') . \")\";\n        }\n\n        return self::makeTextCriteria($tocompute, $val, $nott, $link);\n    }\n\n\n    /**\n     * Generic Function to add Default left join to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype Reference item type\n     * @param string $ref_table            Reference table\n     * @param array &$already_link_tables  Array of tables already joined\n     *\n     * @return string Left join string\n     **/\n    public static function addDefaultJoin($itemtype, $ref_table, array &$already_link_tables)\n    {\n        $out = '';\n\n        switch ($itemtype) {\n           // No link\n            case 'User':\n                $out = self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_profiles_users\",\n                    \"profiles_users_id\",\n                    0,\n                    0,\n                    ['jointype' => 'child']\n                );\n                break;\n\n            case 'Reservation':\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    ReservationItem::getTable(),\n                    ReservationItem::getForeignKeyField(),\n                );\n                break;\n\n            case 'Reminder':\n                $out = Reminder::addVisibilityJoins();\n                break;\n\n            case 'RSSFeed':\n                $out = RSSFeed::addVisibilityJoins();\n                break;\n\n            case 'ProjectTask':\n               // Same structure in addDefaultWhere\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_projects\",\n                    \"projects_id\"\n                );\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_projecttaskteams\",\n                    \"projecttaskteams_id\",\n                    0,\n                    0,\n                    ['jointype' => 'child']\n                );\n                break;\n\n            case 'Project':\n               // Same structure in addDefaultWhere\n                if (!Session::haveRight(\"project\", Project::READALL)) {\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_projectteams\",\n                        \"projectteams_id\",\n                        0,\n                        0,\n                        ['jointype' => 'child']\n                    );\n                }\n                break;\n\n            case 'Ticket':\n               // Same structure in addDefaultWhere\n                if (!Session::haveRight(\"ticket\", Ticket::READALL)) {\n                    $searchopt = &self::getOptions($itemtype);\n\n                   // show mine : requester\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_tickets_users\",\n                        \"tickets_users_id\",\n                        0,\n                        0,\n                        $searchopt[4]['joinparams']['beforejoin']['joinparams']\n                    );\n\n                    if (Session::haveRight(\"ticket\", Ticket::READGROUP)) {\n                        if (count($_SESSION['glpigroups'])) {\n                            $out .= self::addLeftJoin(\n                                $itemtype,\n                                $ref_table,\n                                $already_link_tables,\n                                \"glpi_groups_tickets\",\n                                \"groups_tickets_id\",\n                                0,\n                                0,\n                                $searchopt[71]['joinparams']['beforejoin']\n                                ['joinparams']\n                            );\n                        }\n                    }\n\n                   // show mine : observer\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_tickets_users\",\n                        \"tickets_users_id\",\n                        0,\n                        0,\n                        $searchopt[66]['joinparams']['beforejoin']['joinparams']\n                    );\n\n                    if (count($_SESSION['glpigroups'])) {\n                           $out .= self::addLeftJoin(\n                               $itemtype,\n                               $ref_table,\n                               $already_link_tables,\n                               \"glpi_groups_tickets\",\n                               \"groups_tickets_id\",\n                               0,\n                               0,\n                               $searchopt[65]['joinparams']['beforejoin']['joinparams']\n                           );\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::OWN)) { // Can own ticket : show assign to me\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_tickets_users\",\n                            \"tickets_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n                    }\n\n                    if (Session::haveRightsOr(\"ticket\", [Ticket::READMY, Ticket::READASSIGN])) { // show mine + assign to me\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_tickets_users\",\n                            \"tickets_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  \"glpi_groups_tickets\",\n                                  \"groups_tickets_id\",\n                                  0,\n                                  0,\n                                  $searchopt[8]['joinparams']['beforejoin']\n                                  ['joinparams']\n                              );\n                        }\n                    }\n\n                    if (\n                        Session::haveRightsOr(\n                            'ticketvalidation',\n                            [TicketValidation::VALIDATEINCIDENT,\n                                TicketValidation::VALIDATEREQUEST\n                            ]\n                        )\n                    ) {\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_ticketvalidations\",\n                            \"ticketvalidations_id\",\n                            0,\n                            0,\n                            $searchopt[58]['joinparams']['beforejoin']['joinparams']\n                        );\n                    }\n                }\n                break;\n\n            case 'Change':\n            case 'Problem':\n                if ($itemtype == 'Change') {\n                    $right       = 'change';\n                    $table       = 'changes';\n                    $groupetable = \"glpi_changes_groups\";\n                    $linkfield   = \"changes_groups_id\";\n                } else if ($itemtype == 'Problem') {\n                    $right       = 'problem';\n                    $table       = 'problems';\n                    $groupetable = \"glpi_groups_problems\";\n                    $linkfield   = \"groups_problems_id\";\n                }\n\n               // Same structure in addDefaultWhere\n                $out = '';\n                if (!Session::haveRight(\"$right\", $itemtype::READALL)) {\n                    $searchopt = &self::getOptions($itemtype);\n\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                       // show mine : requester\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[4]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[71]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n\n                       // show mine : observer\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[66]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[65]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n\n                       // show mine : assign\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[8]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n                    }\n                }\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $plugin_name   = $plug['plugin'];\n                    $hook_function = 'plugin_' . strtolower($plugin_name) . '_addDefaultJoin';\n                    $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, &$already_link_tables) {\n                        if (is_callable($hook_function)) {\n                              return $hook_function($itemtype, $ref_table, $already_link_tables);\n                        }\n                    };\n                    $out = Plugin::doOneHook($plugin_name, $hook_closure);\n                }\n                break;\n        }\n\n        list($itemtype, $out) = Plugin::doHookFunction('add_default_join', [$itemtype, $out]);\n        return $out;\n    }\n\n\n    /**\n     * Generic Function to add left join to a request\n     *\n     * @param string  $itemtype             Item type\n     * @param string  $ref_table            Reference table\n     * @param array   $already_link_tables  Array of tables already joined\n     * @param string  $new_table            New table to join\n     * @param string  $linkfield            Linkfield for LeftJoin\n     * @param boolean $meta                 Is it a meta item ? (default 0)\n     * @param integer $meta_type            Meta type table (default 0)\n     * @param array   $joinparams           Array join parameters (condition / joinbefore...)\n     * @param string  $field                Field to display (needed for translation join) (default '')\n     *\n     * @return string Left join string\n     **/\n    public static function addLeftJoin(\n        $itemtype,\n        $ref_table,\n        array &$already_link_tables,\n        $new_table,\n        $linkfield,\n        $meta = 0,\n        $meta_type = 0,\n        $joinparams = [],\n        $field = ''\n    ) {\n\n       // Rename table for meta left join\n        $AS = \"\";\n        $nt = $new_table;\n        $cleannt    = $nt;\n\n       // Virtual field no link\n        if (strpos($linkfield, '_virtual') === 0) {\n            return '';\n        }\n\n        $complexjoin = self::computeComplexJoinID($joinparams);\n\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($linkfield) == $ref_table\n         && $linkfield != getForeignKeyFieldForTable($ref_table);\n\n       // Auto link\n        if (\n            ($ref_table == $new_table)\n            && empty($complexjoin)\n            && !$is_fkey_composite_on_self\n        ) {\n            $transitemtype = getItemTypeForTable($new_table);\n            if (Session::haveTranslations($transitemtype, $field)) {\n                $transAS            = $nt . '_trans_' . $field;\n                return self::joinDropdownTranslations(\n                    $transAS,\n                    $nt,\n                    $transitemtype,\n                    $field\n                );\n            }\n            return \"\";\n        }\n\n       // Multiple link possibilies case\n        if (!empty($linkfield) && ($linkfield != getForeignKeyFieldForTable($new_table))) {\n            $nt .= \"_\" . $linkfield;\n            $AS  = \" AS `$nt`\";\n        }\n\n        if (!empty($complexjoin)) {\n            $nt .= \"_\" . $complexjoin;\n            $AS  = \" AS `$nt`\";\n        }\n\n        $addmetanum = \"\";\n        $rt         = $ref_table;\n        $cleanrt    = $rt;\n        if ($meta && $meta_type::getTable() != $new_table) {\n            $addmetanum = \"_\" . $meta_type;\n            $AS         = \" AS `$nt$addmetanum`\";\n            $nt         = $nt . $addmetanum;\n        }\n\n       // Do not take into account standard linkfield\n        $tocheck = $nt . \".\" . $linkfield;\n        if ($linkfield == getForeignKeyFieldForTable($new_table)) {\n            $tocheck = $nt;\n        }\n\n        if (in_array($tocheck, $already_link_tables)) {\n            return \"\";\n        }\n        array_push($already_link_tables, $tocheck);\n\n        $specific_leftjoin = '';\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $plugin_name   = $plug['plugin'];\n            $hook_function = 'plugin_' . strtolower($plugin_name) . '_addLeftJoin';\n            $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, $new_table, $linkfield, &$already_link_tables) {\n                if (is_callable($hook_function)) {\n                      return $hook_function($itemtype, $ref_table, $new_table, $linkfield, $already_link_tables);\n                }\n            };\n            $specific_leftjoin = Plugin::doOneHook($plugin_name, $hook_closure);\n        }\n\n       // Link with plugin tables : need to know left join structure\n        if (\n            empty($specific_leftjoin)\n            && preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $new_table, $matches)\n        ) {\n            if (count($matches) == 2) {\n                $plugin_name   = $matches[1];\n                $hook_function = 'plugin_' . strtolower($plugin_name) . '_addLeftJoin';\n                $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, $new_table, $linkfield, &$already_link_tables) {\n                    if (is_callable($hook_function)) {\n                          return $hook_function($itemtype, $ref_table, $new_table, $linkfield, $already_link_tables);\n                    }\n                };\n                $specific_leftjoin = Plugin::doOneHook($plugin_name, $hook_closure);\n            }\n        }\n        if (!empty($linkfield)) {\n            $before = '';\n\n            if (isset($joinparams['beforejoin']) && is_array($joinparams['beforejoin'])) {\n                if (isset($joinparams['beforejoin']['table'])) {\n                    $joinparams['beforejoin'] = [$joinparams['beforejoin']];\n                }\n\n                foreach ($joinparams['beforejoin'] as $tab) {\n                    if (isset($tab['table'])) {\n                        $intertable = $tab['table'];\n                        if (isset($tab['linkfield'])) {\n                            $interlinkfield = $tab['linkfield'];\n                        } else {\n                            $interlinkfield = getForeignKeyFieldForTable($intertable);\n                        }\n\n                        $interjoinparams = [];\n                        if (isset($tab['joinparams'])) {\n                             $interjoinparams = $tab['joinparams'];\n                        }\n                        $before .= self::addLeftJoin(\n                            $itemtype,\n                            $rt,\n                            $already_link_tables,\n                            $intertable,\n                            $interlinkfield,\n                            $meta,\n                            $meta_type,\n                            $interjoinparams\n                        );\n                    }\n\n                   // No direct link with the previous joins\n                    if (!isset($tab['joinparams']['nolink']) || !$tab['joinparams']['nolink']) {\n                        $cleanrt     = $intertable;\n                        $complexjoin = self::computeComplexJoinID($interjoinparams);\n                        if (!empty($interlinkfield) && ($interlinkfield != getForeignKeyFieldForTable($intertable))) {\n                            $intertable .= \"_\" . $interlinkfield;\n                        }\n                        if (!empty($complexjoin)) {\n                            $intertable .= \"_\" . $complexjoin;\n                        }\n                        if ($meta && $meta_type::getTable() != $cleanrt) {\n                            $intertable .= \"_\" . $meta_type;\n                        }\n                        $rt = $intertable;\n                    }\n                }\n            }\n\n            $addcondition = '';\n            if (isset($joinparams['condition'])) {\n                $condition = $joinparams['condition'];\n                if (is_array($condition)) {\n                    $it = new DBmysqlIterator(null);\n                    $condition = ' AND ' . $it->analyseCrit($condition);\n                }\n                $from         = [\"`REFTABLE`\", \"REFTABLE\", \"`NEWTABLE`\", \"NEWTABLE\"];\n                $to           = [\"`$rt`\", \"`$rt`\", \"`$nt`\", \"`$nt`\"];\n                $addcondition = str_replace($from, $to, $condition);\n                $addcondition = $addcondition . \" \";\n            }\n\n            if (!isset($joinparams['jointype'])) {\n                $joinparams['jointype'] = 'standard';\n            }\n\n            if (empty($specific_leftjoin)) {\n                switch ($new_table) {\n                   // No link\n                    case \"glpi_auth_tables\":\n                         $user_searchopt     = self::getOptions('User');\n\n                         $specific_leftjoin  = self::addLeftJoin(\n                             $itemtype,\n                             $rt,\n                             $already_link_tables,\n                             \"glpi_authldaps\",\n                             'auths_id',\n                             0,\n                             0,\n                             $user_searchopt[30]['joinparams']\n                         );\n                           $specific_leftjoin .= self::addLeftJoin(\n                               $itemtype,\n                               $rt,\n                               $already_link_tables,\n                               \"glpi_authmails\",\n                               'auths_id',\n                               0,\n                               0,\n                               $user_searchopt[31]['joinparams']\n                           );\n                        break;\n                }\n            }\n\n            if (empty($specific_leftjoin)) {\n                switch ($joinparams['jointype']) {\n                    case 'child':\n                        $linkfield = getForeignKeyFieldForTable($cleanrt);\n                        if (isset($joinparams['linkfield'])) {\n                            $linkfield = $joinparams['linkfield'];\n                        }\n\n                        // Child join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                             ON (`$rt`.`id` = `$nt`.`$linkfield`\n                                                 $addcondition)\";\n                        break;\n\n                    case 'item_item':\n                       // Item_Item join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON ((`$rt`.`id`\n                                                = `$nt`.`\" . getForeignKeyFieldForTable($cleanrt) . \"_1`\n                                               OR `$rt`.`id`\n                                                 = `$nt`.`\" . getForeignKeyFieldForTable($cleanrt) . \"_2`)\n                                              $addcondition)\";\n                        break;\n\n                    case 'item_item_revert':\n                       // Item_Item join reverting previous item_item\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON ((`$nt`.`id`\n                                                = `$rt`.`\" . getForeignKeyFieldForTable($cleannt) . \"_1`\n                                               OR `$nt`.`id`\n                                                 = `$rt`.`\" . getForeignKeyFieldForTable($cleannt) . \"_2`)\n                                              $addcondition)\";\n                        break;\n\n                    case \"mainitemtype_mainitem\":\n                        $addmain = 'main';\n                       //addmain defined to be used in itemtype_item case\n\n                    case \"itemtype_item\":\n                        if (!isset($addmain)) {\n                            $addmain = '';\n                        }\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$rt`.`id` = `$nt`.`\" . $addmain . \"items_id`\n                                              AND `$nt`.`\" . $addmain . \"itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    case \"itemtype_item_revert\":\n                        if (!isset($addmain)) {\n                            $addmain = '';\n                        }\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$nt`.`id` = `$rt`.`\" . $addmain . \"items_id`\n                                              AND `$rt`.`\" . $addmain . \"itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    case \"itemtypeonly\":\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$nt`.`itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    default:\n                       // Standard join\n                        $specific_leftjoin = \"LEFT JOIN `$new_table` $AS\n                                          ON (`$rt`.`$linkfield` = `$nt`.`id`\n                                              $addcondition)\";\n                        $transitemtype = getItemTypeForTable($new_table);\n                        if (Session::haveTranslations($transitemtype, $field)) {\n                            $transAS            = $nt . '_trans_' . $field;\n                            $specific_leftjoin .= self::joinDropdownTranslations(\n                                $transAS,\n                                $nt,\n                                $transitemtype,\n                                $field\n                            );\n                        }\n                        break;\n                }\n            }\n            return $before . $specific_leftjoin;\n        }\n\n        return '';\n    }\n\n\n    /**\n     * Generic Function to add left join for meta items\n     *\n     * @param string $from_type             Reference item type ID\n     * @param string $to_type               Item type to add\n     * @param array  $already_link_tables2  Array of tables already joined\n     *showGenericSearch\n     * @return string Meta Left join string\n     **/\n    public static function addMetaLeftJoin(\n        $from_type,\n        $to_type,\n        array &$already_link_tables2,\n        $joinparams = []\n    ) {\n        global $CFG_GLPI;\n\n        $from_referencetype = self::getMetaReferenceItemtype($from_type);\n\n        $LINK = \" LEFT JOIN \";\n\n        $from_table = $from_type::getTable();\n        $from_fk    = getForeignKeyFieldForTable($from_table);\n        $to_table   = $to_type::getTable();\n        $to_fk      = getForeignKeyFieldForTable($to_table);\n\n        $to_obj        = getItemForItemtype($to_type);\n        $to_entity_restrict = $to_obj->isField('entities_id') ? getEntitiesRestrictRequest('AND', $to_table) : '';\n\n        $complexjoin = self::computeComplexJoinID($joinparams);\n        $alias_suffix = ($complexjoin != '' ? '_' . $complexjoin : '') . '_' . $to_type;\n\n        $JOIN = \"\";\n\n       // Specific JOIN\n        if ($from_referencetype === 'Software' && in_array($to_type, $CFG_GLPI['software_types'])) {\n           // From Software to software_types\n            $softwareversions_table = \"glpi_softwareversions{$alias_suffix}\";\n            if (!in_array($softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwareversions_table);\n                $JOIN .= \"$LINK `glpi_softwareversions` AS `$softwareversions_table`\n                         ON (`$softwareversions_table`.`softwares_id` = `$from_table`.`id`) \";\n            }\n            $items_softwareversions_table = \"glpi_items_softwareversions_{$alias_suffix}\";\n            if (!in_array($items_softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_softwareversions_table);\n                $JOIN .= \"$LINK `glpi_items_softwareversions` AS `$items_softwareversions_table`\n                         ON (`$items_softwareversions_table`.`softwareversions_id` = `$softwareversions_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$to_type'\n                             AND `$items_softwareversions_table`.`is_deleted` = 0) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_softwareversions_table`.`items_id` = `$to_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Software' && in_array($from_referencetype, $CFG_GLPI['software_types'])) {\n           // From software_types to Software\n            $items_softwareversions_table = \"glpi_items_softwareversions{$alias_suffix}\";\n            if (!in_array($items_softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_softwareversions_table);\n                $JOIN .= \"$LINK `glpi_items_softwareversions` AS `$items_softwareversions_table`\n                         ON (`$items_softwareversions_table`.`items_id` = `$from_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$from_type'\n                             AND `$items_softwareversions_table`.`is_deleted` = 0) \";\n            }\n            $softwareversions_table = \"glpi_softwareversions{$alias_suffix}\";\n            if (!in_array($softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwareversions_table);\n                $JOIN .= \"$LINK `glpi_softwareversions` AS `$softwareversions_table`\n                         ON (`$items_softwareversions_table`.`softwareversions_id` = `$softwareversions_table`.`id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$softwareversions_table`.`softwares_id` = `$to_table`.`id`) \";\n            }\n            $softwarelicenses_table = \"glpi_softwarelicenses{$alias_suffix}\";\n            if (!in_array($softwarelicenses_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwarelicenses_table);\n                $JOIN .= \"$LINK `glpi_softwarelicenses` AS `$softwarelicenses_table`\n                        ON ($to_table.`id` = `$softwarelicenses_table`.`softwares_id`\"\n                          . getEntitiesRestrictRequest(' AND', $softwarelicenses_table, '', '', true) . \") \";\n            }\n            return $JOIN;\n        }\n\n        if ($from_referencetype === 'Budget' && in_array($to_type, $CFG_GLPI['infocom_types'])) {\n           // From Budget to infocom_types\n            $infocom_alias = \"glpi_infocoms{$alias_suffix}\";\n            if (!in_array($infocom_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $infocom_alias);\n                $JOIN .= \"$LINK `glpi_infocoms` AS `$infocom_alias`\n                         ON (`$from_table`.`id` = `$infocom_alias`.`budgets_id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$to_table`.`id` = `$infocom_alias`.`items_id`\n                             AND `$infocom_alias`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Budget' && in_array($from_referencetype, $CFG_GLPI['infocom_types'])) {\n           // From infocom_types to Budget\n            $infocom_alias = \"glpi_infocoms{$alias_suffix}\";\n            if (!in_array($infocom_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $infocom_alias);\n                $JOIN .= \"$LINK `glpi_infocoms` AS `$infocom_alias`\n                         ON (`$from_table`.`id` = `$infocom_alias`.`items_id`\n                             AND `$infocom_alias`.`itemtype` = '$from_type') \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$infocom_alias`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($from_referencetype === 'Reservation' && in_array($to_type, $CFG_GLPI['reservation_types'])) {\n           // From Reservation to reservation_types\n            $reservationitems_alias = \"glpi_reservationitems{$alias_suffix}\";\n            if (!in_array($reservationitems_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $reservationitems_alias);\n                $JOIN .= \"$LINK `glpi_reservationitems` AS `$reservationitems_alias`\n                         ON (`$from_table`.`reservationitems_id` = `$reservationitems_alias`.`id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$to_table`.`id` = `$reservationitems_alias`.`items_id`\n                             AND `$reservationitems_alias`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Reservation' && in_array($from_referencetype, $CFG_GLPI['reservation_types'])) {\n           // From reservation_types to Reservation\n            $reservationitems_alias = \"glpi_reservationitems{$alias_suffix}\";\n            if (!in_array($reservationitems_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $reservationitems_alias);\n                $JOIN .= \"$LINK `glpi_reservationitems` AS `$reservationitems_alias`\n                         ON (`$from_table`.`id` = `$reservationitems_alias`.`items_id`\n                             AND `$reservationitems_alias`.`itemtype` = '$from_type') \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$reservationitems_alias`.`id` = `$to_table`.`reservationitems_id`\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n       // Generic JOIN\n        $from_obj      = getItemForItemtype($from_referencetype);\n        $from_item_obj = null;\n        $to_obj        = getItemForItemtype($to_type);\n        $to_item_obj   = null;\n        if (self::isPossibleMetaSubitemOf($from_referencetype, $to_type)) {\n            $from_item_obj = getItemForItemtype($from_referencetype . '_Item');\n            if (!$from_item_obj) {\n                $from_item_obj = getItemForItemtype('Item_' . $from_referencetype);\n            }\n        }\n        if (self::isPossibleMetaSubitemOf($to_type, $from_referencetype)) {\n            $to_item_obj   = getItemForItemtype($to_type . '_Item');\n            if (!$to_item_obj) {\n                $to_item_obj = getItemForItemtype('Item_' . $to_type);\n            }\n        }\n\n        if ($from_obj && $from_obj->isField($to_fk)) {\n           // $from_table has a foreign key corresponding to $to_table\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_obj && $to_obj->isField($from_fk)) {\n           // $to_table has a foreign key corresponding to $from_table\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`id` = `$to_table`.`$from_fk`\n                             $to_entity_restrict) \";\n            }\n        } else if ($from_obj && $from_obj->isField('itemtype') && $from_obj->isField('items_id')) {\n           // $from_table has items_id/itemtype fields\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`items_id` = `$to_table`.`id`\n                             AND `$from_table`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_obj && $to_obj->isField('itemtype') && $to_obj->isField('items_id')) {\n           // $to_table has items_id/itemtype fields\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`id` = `$to_table`.`items_id`\n                             AND `$to_table`.`itemtype` = '$from_type'\n                             $to_entity_restrict) \";\n            }\n        } else if ($from_item_obj && $from_item_obj->isField($from_fk)) {\n           // glpi_$from_items table exists and has a foreign key corresponding to $to_table\n            $items_table = $from_item_obj::getTable();\n            $items_table_alias = $items_table . $alias_suffix;\n            if (!in_array($items_table_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_table_alias);\n                $deleted = $from_item_obj->isField('is_deleted') ? \"AND `$items_table_alias`.`is_deleted` = 0\" : \"\";\n                $JOIN .= \"$LINK `$items_table` AS `$items_table_alias`\n                         ON (`$items_table_alias`.`$from_fk` = `$from_table`.`id`\n                             AND `$items_table_alias`.`itemtype` = '$to_type'\n                             $deleted)\";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_table_alias`.`items_id` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_item_obj && $to_item_obj->isField($to_fk)) {\n           // glpi_$to_items table exists and has a foreign key corresponding to $from_table\n            $items_table = $to_item_obj::getTable();\n            $items_table_alias = $items_table . $alias_suffix;\n            if (!in_array($items_table_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_table_alias);\n                $deleted = $to_item_obj->isField('is_deleted') ? \"AND `$items_table_alias`.`is_deleted` = 0\" : \"\";\n                $JOIN .= \"$LINK `$items_table` AS `$items_table_alias`\n                         ON (`$items_table_alias`.`items_id` = `$from_table`.`id`\n                             AND `$items_table_alias`.`itemtype` = '$from_type'\n                             $deleted)\";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_table_alias`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        }\n\n        return $JOIN;\n    }\n\n\n    /**\n     * Generic Function to display Items\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype item type\n     * @param integer $ID       ID of the SEARCH_OPTION item\n     * @param array   $data     array retrieved data array\n     *\n     * @return string String to print\n     **/\n    public static function displayConfigItem($itemtype, $ID, $data = [])\n    {\n\n        $searchopt  = &self::getOptions($itemtype);\n\n        $table      = $searchopt[$ID][\"table\"];\n        $field      = $searchopt[$ID][\"field\"];\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'displayConfigItem',\n                $itemtype,\n                $ID,\n                $data,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                 return $out;\n            }\n        }\n\n        $out = \"\";\n        $NAME = \"{$itemtype}_{$ID}\";\n\n        switch ($table . \".\" . $field) {\n            case \"glpi_tickets.time_to_resolve\":\n            case \"glpi_tickets.internal_time_to_resolve\":\n            case \"glpi_problems.time_to_resolve\":\n            case \"glpi_changes.time_to_resolve\":\n                if (in_array($ID, [151, 181])) {\n                    break; // Skip \"TTR + progress\" search options\n                }\n\n                $value      = $data[$NAME][0]['name'];\n                $status     = $data[$NAME][0]['status'];\n                $solve_date = $data[$NAME][0]['solvedate'];\n\n                $is_late = !empty($value)\n                    && $status != CommonITILObject::WAITING\n                    && (\n                        $solve_date > $value\n                        || ($solve_date == null && $value < $_SESSION['glpi_currenttime'])\n                    );\n\n                if ($is_late) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n            case \"glpi_tickets.time_to_own\":\n            case \"glpi_tickets.internal_time_to_own\":\n                if (in_array($ID, [158, 186])) {\n                    break; // Skip \"TTO + progress\" search options\n                }\n\n                $value        = $data[$NAME][0]['name'];\n                $status       = $data[$NAME][0]['status'];\n                $opening_date = $data[$NAME][0]['date'];\n                $tia_time     = $data[$NAME][0]['takeintoaccount_delay_stat'];\n\n                $is_late = !empty($value)\n                    && $status != CommonITILObject::WAITING\n                    && (\n                        $tia_time > strtotime($opening_date) - strtotime($value)\n                        || ($tia_time == 0 && $value < $_SESSION['glpi_currenttime'])\n                    );\n\n                if ($is_late) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n\n            case \"glpi_projectstates.color\":\n            case \"glpi_cables.color\":\n                $bg_color = $data[$NAME][0]['name'];\n                if (!empty($bg_color)) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: $bg_color;\\\" \";\n                }\n                break;\n\n            case \"glpi_projectstates.name\":\n                if (array_key_exists('color', $data[$NAME][0])) {\n                    $bg_color = $data[$NAME][0]['color'];\n                    if (!empty($bg_color)) {\n                        $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: $bg_color;\\\" \";\n                    }\n                }\n                break;\n\n            case \"glpi_domains.date_expiration\":\n            case \"glpi_certificates.date_expiration\":\n                if (\n                    !empty($data[$NAME][0]['name'])\n                    && ($data[$NAME][0]['name'] < $_SESSION['glpi_currenttime'])\n                ) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n        }\n\n        return $out;\n    }\n\n\n    /**\n     * Generic Function to display Items\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype        item type\n     * @param integer $ID              ID of the SEARCH_OPTION item\n     * @param array   $data            array containing data results\n     * @param boolean $meta            is a meta item ? (default 0)\n     * @param array   $addobjectparams array added parameters for union search\n     * @param string  $orig_itemtype   Original itemtype, used for union_search_type\n     *\n     * @return string String to print\n     **/\n    public static function giveItem(\n        $itemtype,\n        $ID,\n        array $data,\n        $meta = 0,\n        array $addobjectparams = [],\n        $orig_itemtype = null\n    ) {\n        global $CFG_GLPI;\n\n        $searchopt = &self::getOptions($itemtype);\n        if (\n            isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n            && ($CFG_GLPI[\"union_search_type\"][$itemtype] == $searchopt[$ID][\"table\"])\n        ) {\n            $oparams = [];\n            if (\n                isset($searchopt[$ID]['addobjectparams'])\n                && $searchopt[$ID]['addobjectparams']\n            ) {\n                $oparams = $searchopt[$ID]['addobjectparams'];\n            }\n\n           // Search option may not exists in subtype\n           // This is the case for \"Inventory number\" for a Software listed from ReservationItem search\n            $subtype_so = &self::getOptions($data[\"TYPE\"]);\n            if (!array_key_exists($ID, $subtype_so)) {\n                return '';\n            }\n\n            return self::giveItem($data[\"TYPE\"], $ID, $data, $meta, $oparams, $itemtype);\n        }\n        $so = $searchopt[$ID];\n        $orig_id = $ID;\n        $ID = ($orig_itemtype !== null ? $orig_itemtype : $itemtype) . '_' . $ID;\n\n        if (count($addobjectparams)) {\n            $so = array_merge($so, $addobjectparams);\n        }\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'giveItem',\n                $itemtype,\n                $orig_id,\n                $data,\n                $ID\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        if (isset($so[\"table\"])) {\n            $table     = $so[\"table\"];\n            $field     = $so[\"field\"];\n            $linkfield = $so[\"linkfield\"];\n\n           /// TODO try to clean all specific cases using SpecificToDisplay\n\n            switch ($table . '.' . $field) {\n                case \"glpi_users.name\":\n                    // USER search case\n                    if (\n                        ($itemtype != 'User')\n                        && isset($so[\"forcegroupby\"]) && $so[\"forcegroupby\"]\n                    ) {\n                        $out           = \"\";\n                        $count_display = 0;\n                        $added         = [];\n\n                        $showuserlink = 0;\n                        if (Session::haveRight('user', READ)) {\n                            $showuserlink = 1;\n                        }\n\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                (isset($data[$ID][$k]['name']) && ($data[$ID][$k]['name'] > 0))\n                                || (isset($data[$ID][$k][2]) && ($data[$ID][$k][2] != ''))\n                            ) {\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n\n                                if ($itemtype == 'Ticket') {\n                                    if (\n                                        isset($data[$ID][$k]['name'])\n                                        && $data[$ID][$k]['name'] > 0\n                                    ) {\n                                        if (\n                                            Session::getCurrentInterface() == 'helpdesk'\n                                            && $orig_id == 5 // -> Assigned user\n                                            && !empty($anon_name = User::getAnonymizedNameForUser(\n                                                $data[$ID][$k]['name'],\n                                                $itemtype::getById($data['id'])->getEntityId()\n                                            ))\n                                        ) {\n                                            $out .= $anon_name;\n                                        } else {\n                                            $userdata = getUserName($data[$ID][$k]['name'], 2);\n                                            $tooltip  = \"\";\n                                            if (Session::haveRight('user', READ)) {\n                                                $tooltip = Html::showToolTip(\n                                                    $userdata[\"comment\"],\n                                                    ['link'    => $userdata[\"link\"],\n                                                        'display' => false\n                                                    ]\n                                                );\n                                            }\n                                            $out .= sprintf(__('%1$s %2$s'), $userdata['name'], $tooltip);\n                                        }\n\n                                        $count_display++;\n                                    }\n                                } else {\n                                    $out .= getUserName($data[$ID][$k]['name'], $showuserlink);\n                                    $count_display++;\n                                }\n\n                           // Manage alternative_email for tickets_users\n                                if (\n                                    ($itemtype == 'Ticket')\n                                    && isset($data[$ID][$k][2])\n                                ) {\n                                        $split = explode(self::LONGSEP, $data[$ID][$k][2]);\n                                    for ($l = 0; $l < count($split); $l++) {\n                                        $split2 = explode(\" \", $split[$l]);\n                                        if ((count($split2) == 2) && ($split2[0] == 0) && !empty($split2[1])) {\n                                            if ($count_display) {\n                                                $out .= self::LBBR;\n                                            }\n                                            $count_display++;\n                                            $out .= \"<a href='mailto:\" . $split2[1] . \"'>\" . $split2[1] . \"</a>\";\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        return $out;\n                    }\n                    if ($itemtype != 'User') {\n                        $toadd = '';\n                        if (\n                            ($itemtype == 'Ticket')\n                            && ($data[$ID][0]['id'] > 0)\n                        ) {\n                            $userdata = getUserName($data[$ID][0]['id'], 2);\n                            $toadd    = Html::showToolTip(\n                                $userdata[\"comment\"],\n                                ['link'    => $userdata[\"link\"],\n                                    'display' => false\n                                ]\n                            );\n                        }\n                        $usernameformat = formatUserName(\n                            $data[$ID][0]['id'],\n                            $data[$ID][0]['name'],\n                            $data[$ID][0]['realname'],\n                            $data[$ID][0]['firstname'],\n                            1\n                        );\n                        return sprintf(__('%1$s %2$s'), $usernameformat, $toadd);\n                    }\n\n                    $current_users_id = $data[$ID][0]['id'] ?? 0;\n                    if ($current_users_id > 0) {\n                        return TemplateRenderer::getInstance()->render('components/user/picture.html.twig', [\n                            'users_id'      => $current_users_id,\n                            'display_login' => true,\n                            'force_login'   => true,\n                            'avatar_size'   => \"avatar-sm\",\n                        ]);\n                    }\n                    break;\n\n                case \"glpi_profiles.name\":\n                    if (\n                        ($itemtype == 'User')\n                         && ($orig_id == 20)\n                    ) {\n                        $out           = \"\";\n\n                        $count_display = 0;\n                        $added         = [];\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                strlen(trim($data[$ID][$k]['name'])) > 0\n                                && !in_array(\n                                    $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['entities_id'],\n                                    $added\n                                )\n                            ) {\n                                $text = sprintf(\n                                    __('%1$s - %2$s'),\n                                    $data[$ID][$k]['name'],\n                                    Dropdown::getDropdownName(\n                                        'glpi_entities',\n                                        $data[$ID][$k]['entities_id']\n                                    )\n                                );\n                                   $comp = '';\n                                if ($data[$ID][$k]['is_recursive']) {\n                                    $comp = __('R');\n                                    if ($data[$ID][$k]['is_dynamic']) {\n                                        $comp = sprintf(__('%1$s%2$s'), $comp, \", \");\n                                    }\n                                }\n                                if ($data[$ID][$k]['is_dynamic']) {\n                                    $comp = sprintf(__('%1$s%2$s'), $comp, __('D'));\n                                }\n                                if (!empty($comp)) {\n                                    $text = sprintf(__('%1$s %2$s'), $text, \"(\" . $comp . \")\");\n                                }\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n                                $count_display++;\n                                $out     .= $text;\n                                $added[]  = $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['entities_id'];\n                            }\n                        }\n                        return $out;\n                    }\n                    break;\n\n                case \"glpi_entities.completename\":\n                    if ($itemtype == 'User') {\n                        $out           = \"\";\n                        $added         = [];\n                        $count_display = 0;\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                isset($data[$ID][$k]['name'])\n                                 && (strlen(trim($data[$ID][$k]['name'])) > 0)\n                                 && !in_array(\n                                     $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['profiles_id'],\n                                     $added\n                                 )\n                            ) {\n                                $text = sprintf(\n                                    __('%1$s - %2$s'),\n                                    Entity::badgeCompletename($data[$ID][$k]['name']),\n                                    Dropdown::getDropdownName(\n                                        'glpi_profiles',\n                                        $data[$ID][$k]['profiles_id']\n                                    )\n                                );\n                                $comp = '';\n                                if ($data[$ID][$k]['is_recursive']) {\n                                    $comp = __('R');\n                                    if ($data[$ID][$k]['is_dynamic']) {\n                                        $comp = sprintf(__('%1$s%2$s'), $comp, \", \");\n                                    }\n                                }\n                                if ($data[$ID][$k]['is_dynamic']) {\n                                    $comp = sprintf(__('%1$s%2$s'), $comp, __('D'));\n                                }\n                                if (!empty($comp)) {\n                                    $text = sprintf(__('%1$s %2$s'), $text, \"(\" . $comp . \")\");\n                                }\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n                                $count_display++;\n                                $out    .= $text;\n                                $added[] = $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['profiles_id'];\n                            }\n                        }\n                        return $out;\n                    } else if (($so[\"datatype\"] ?? \"\") != \"itemlink\" && !empty($data[$ID][0]['name'])) {\n                        return Entity::badgeCompletename($data[$ID][0]['name']);\n                    }\n                    break;\n\n                case \"glpi_documenttypes.icon\":\n                    if (!empty($data[$ID][0]['name'])) {\n                        return \"<img class='middle' alt='' src='\" . $CFG_GLPI[\"typedoc_icon_dir\"] . \"/\" .\n                           $data[$ID][0]['name'] . \"'>\";\n                    }\n                    return \"&nbsp;\";\n\n                case \"glpi_documents.filename\":\n                    $doc = new Document();\n                    if ($doc->getFromDB($data['id'])) {\n                        return $doc->getDownloadLink();\n                    }\n                    return NOT_AVAILABLE;\n\n                case \"glpi_tickets_tickets.tickets_id_1\":\n                    $out        = \"\";\n                    $displayed  = [];\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        $linkid = ($data[$ID][$k]['tickets_id_2'] == $data['id'])\n                                 ? $data[$ID][$k]['name']\n                                 : $data[$ID][$k]['tickets_id_2'];\n\n                        // If link ID is int or integer string, force conversion to int. Coversion to int and then string to compare is needed to ensure it isn't a decimal\n                        if (is_numeric($linkid) && ((string)(int)$linkid === (string)$linkid)) {\n                            $linkid = (int) $linkid;\n                        }\n                        if ((is_int($linkid) && $linkid > 0) && !isset($displayed[$linkid])) {\n                             $text  = \"<a \";\n                             $text .= \"href=\\\"\" . Ticket::getFormURLWithID($linkid) . \"\\\">\";\n                             $text .= Dropdown::getDropdownName('glpi_tickets', $linkid) . \"</a>\";\n                            if (count($displayed)) {\n                                $out .= self::LBBR;\n                            }\n                            $displayed[$linkid] = $linkid;\n                            $out               .= $text;\n                        }\n                    }\n                    return $out;\n\n                case \"glpi_problems.id\":\n                    if ($so[\"datatype\"] == 'count') {\n                        if (\n                            ($data[$ID][0]['name'] > 0)\n                            && Session::haveRight(\"problem\", Problem::READALL)\n                        ) {\n                            if ($itemtype == 'ITILCategory') {\n                                $options['criteria'][0]['field']      = 7;\n                                $options['criteria'][0]['searchtype'] = 'equals';\n                                $options['criteria'][0]['value']      = $data['id'];\n                                $options['criteria'][0]['link']       = 'AND';\n                            } else {\n                                $options['criteria'][0]['field']       = 12;\n                                $options['criteria'][0]['searchtype']  = 'equals';\n                                $options['criteria'][0]['value']       = 'all';\n                                $options['criteria'][0]['link']        = 'AND';\n\n                                $options['metacriteria'][0]['itemtype']   = $itemtype;\n                                $options['metacriteria'][0]['field']      = self::getOptionNumber(\n                                    $itemtype,\n                                    'name'\n                                );\n                                $options['metacriteria'][0]['searchtype'] = 'equals';\n                                $options['metacriteria'][0]['value']      = $data['id'];\n                                $options['metacriteria'][0]['link']       = 'AND';\n                            }\n\n                            $options['reset'] = 'reset';\n\n                            $out  = \"<a id='problem$itemtype\" . $data['id'] . \"' \";\n                            $out .= \"href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/problem.php?\" .\n                              Toolbox::append_params($options, '&amp;') . \"\\\">\";\n                            $out .= $data[$ID][0]['name'] . \"</a>\";\n                            return $out;\n                        }\n                    }\n                    break;\n\n                case \"glpi_tickets.id\":\n                    if ($so[\"datatype\"] == 'count') {\n                        if (\n                            ($data[$ID][0]['name'] > 0)\n                            && Session::haveRight(\"ticket\", Ticket::READALL)\n                        ) {\n                            if ($itemtype == 'User') {\n                            // Requester\n                                if ($ID == 'User_60') {\n                                    $options['criteria'][0]['field']      = 4;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n\n                            // Writer\n                                if ($ID == 'User_61') {\n                                    $options['criteria'][0]['field']      = 22;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n                            // Assign\n                                if ($ID == 'User_64') {\n                                    $options['criteria'][0]['field']      = 5;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n                            } else if ($itemtype == 'ITILCategory') {\n                                $options['criteria'][0]['field']      = 7;\n                                $options['criteria'][0]['searchtype'] = 'equals';\n                                $options['criteria'][0]['value']      = $data['id'];\n                                $options['criteria'][0]['link']       = 'AND';\n                            } else {\n                                $options['criteria'][0]['field']       = 12;\n                                $options['criteria'][0]['searchtype']  = 'equals';\n                                $options['criteria'][0]['value']       = 'all';\n                                $options['criteria'][0]['link']        = 'AND';\n\n                                $options['metacriteria'][0]['itemtype']   = $itemtype;\n                                $options['metacriteria'][0]['field']      = self::getOptionNumber(\n                                    $itemtype,\n                                    'name'\n                                );\n                                $options['metacriteria'][0]['searchtype'] = 'equals';\n                                $options['metacriteria'][0]['value']      = $data['id'];\n                                $options['metacriteria'][0]['link']       = 'AND';\n                            }\n\n                            $options['reset'] = 'reset';\n\n                            $out  = \"<a id='ticket$itemtype\" . $data['id'] . \"' \";\n                            $out .= \"href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/ticket.php?\" .\n                              Toolbox::append_params($options, '&amp;') . \"\\\">\";\n                            $out .= $data[$ID][0]['name'] . \"</a>\";\n                            return $out;\n                        }\n                    }\n                    break;\n\n                case \"glpi_tickets.time_to_resolve\":\n                case \"glpi_problems.time_to_resolve\":\n                case \"glpi_changes.time_to_resolve\":\n                case \"glpi_tickets.time_to_own\":\n                case \"glpi_tickets.internal_time_to_own\":\n                case \"glpi_tickets.internal_time_to_resolve\":\n                   // Due date + progress\n                    if (in_array($orig_id, [151, 158, 181, 186])) {\n                        $out = Html::convDateTime($data[$ID][0]['name']);\n\n                       // No due date in waiting status\n                        if ($data[$ID][0]['status'] == CommonITILObject::WAITING) {\n                             return '';\n                        }\n                        if (empty($data[$ID][0]['name'])) {\n                            return '';\n                        }\n                        if (\n                            ($data[$ID][0]['status'] == Ticket::SOLVED)\n                            || ($data[$ID][0]['status'] == Ticket::CLOSED)\n                        ) {\n                            return $out;\n                        }\n\n                        $itemtype = getItemTypeForTable($table);\n                        $item = new $itemtype();\n                        $item->getFromDB($data['id']);\n                        $percentage  = 0;\n                        $totaltime   = 0;\n                        $currenttime = 0;\n                        $slaField    = 'slas_id';\n\n                       // define correct sla field\n                        switch ($table . '.' . $field) {\n                            case \"glpi_tickets.time_to_resolve\":\n                                $slaField = 'slas_id_ttr';\n                                $sla_class = 'SLA';\n                                break;\n                            case \"glpi_tickets.time_to_own\":\n                                $slaField = 'slas_id_tto';\n                                $sla_class = 'SLA';\n                                break;\n                            case \"glpi_tickets.internal_time_to_own\":\n                                $slaField = 'olas_id_tto';\n                                $sla_class = 'OLA';\n                                break;\n                            case \"glpi_tickets.internal_time_to_resolve\":\n                                $slaField = 'olas_id_ttr';\n                                $sla_class = 'OLA';\n                                break;\n                        }\n\n                        switch ($table . '.' . $field) {\n                           // If ticket has been taken into account : no progression display\n                            case \"glpi_tickets.time_to_own\":\n                            case \"glpi_tickets.internal_time_to_own\":\n                                if (($item->fields['takeintoaccount_delay_stat'] > 0)) {\n                                     return $out;\n                                }\n                                break;\n                        }\n\n                        if ($item->isField($slaField) && $item->fields[$slaField] != 0) { // Have SLA\n                            $sla = new $sla_class();\n                            $sla->getFromDB($item->fields[$slaField]);\n                            $currenttime = $sla->getActiveTimeBetween(\n                                $item->fields['date'],\n                                date('Y-m-d H:i:s')\n                            );\n                            $totaltime   = $sla->getActiveTimeBetween(\n                                $item->fields['date'],\n                                $data[$ID][0]['name']\n                            );\n                        } else {\n                            $calendars_id = Entity::getUsedConfig(\n                                'calendars_strategy',\n                                $item->fields['entities_id'],\n                                'calendars_id',\n                                0\n                            );\n                            $calendar = new Calendar();\n                            if ($calendars_id > 0 && $calendar->getFromDB($calendars_id)) { // Ticket entity have calendar\n                                $currenttime = $calendar->getActiveTimeBetween(\n                                    $item->fields['date'],\n                                    date('Y-m-d H:i:s')\n                                );\n                                $totaltime   = $calendar->getActiveTimeBetween(\n                                    $item->fields['date'],\n                                    $data[$ID][0]['name']\n                                );\n                            } else { // No calendar\n                                $currenttime = strtotime(date('Y-m-d H:i:s'))\n                                                 - strtotime($item->fields['date']);\n                                $totaltime   = strtotime($data[$ID][0]['name'])\n                                                 - strtotime($item->fields['date']);\n                            }\n                        }\n                        if ($totaltime != 0) {\n                            $percentage  = round((100 * $currenttime) / $totaltime);\n                        } else {\n                           // Total time is null : no active time\n                            $percentage = 100;\n                        }\n                        if ($percentage > 100) {\n                            $percentage = 100;\n                        }\n                        $percentage_text = $percentage;\n\n                        if ($_SESSION['glpiduedatewarning_unit'] == '%') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'];\n                            $less_warn       = (100 - $percentage);\n                        } else if ($_SESSION['glpiduedatewarning_unit'] == 'hour') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'] * HOUR_TIMESTAMP;\n                            $less_warn       = ($totaltime - $currenttime);\n                        } else if ($_SESSION['glpiduedatewarning_unit'] == 'day') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'] * DAY_TIMESTAMP;\n                            $less_warn       = ($totaltime - $currenttime);\n                        }\n\n                        if ($_SESSION['glpiduedatecritical_unit'] == '%') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'];\n                            $less_crit       = (100 - $percentage);\n                        } else if ($_SESSION['glpiduedatecritical_unit'] == 'hour') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'] * HOUR_TIMESTAMP;\n                            $less_crit       = ($totaltime - $currenttime);\n                        } else if ($_SESSION['glpiduedatecritical_unit'] == 'day') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'] * DAY_TIMESTAMP;\n                            $less_crit       = ($totaltime - $currenttime);\n                        }\n\n                        $color = $_SESSION['glpiduedateok_color'];\n                        if ($less_crit < $less_crit_limit) {\n                            $color = $_SESSION['glpiduedatecritical_color'];\n                        } else if ($less_warn < $less_warn_limit) {\n                            $color = $_SESSION['glpiduedatewarning_color'];\n                        }\n\n                        if (!isset($so['datatype'])) {\n                            $so['datatype'] = 'progressbar';\n                        }\n\n                        $progressbar_data = [\n                            'text'         => Html::convDateTime($data[$ID][0]['name']),\n                            'percent'      => $percentage,\n                            'percent_text' => $percentage_text,\n                            'color'        => $color\n                        ];\n                    }\n                    break;\n\n                case \"glpi_softwarelicenses.number\":\n                    if ($data[$ID][0]['min'] == -1) {\n                        return __('Unlimited');\n                    }\n                    if (empty($data[$ID][0]['name'])) {\n                        return 0;\n                    }\n                    return $data[$ID][0]['name'];\n\n                case \"glpi_auth_tables.name\":\n                    return Auth::getMethodName(\n                        $data[$ID][0]['name'],\n                        $data[$ID][0]['auths_id'],\n                        1,\n                        $data[$ID][0]['ldapname'] . $data[$ID][0]['mailname']\n                    );\n\n                case \"glpi_reservationitems.comment\":\n                    if (empty($data[$ID][0]['name'])) {\n                        $text = __('None');\n                    } else {\n                        $text = Html::resume_text($data[$ID][0]['name']);\n                    }\n                    if (Session::haveRight('reservation', UPDATE)) {\n                        return \"<a title=\\\"\" . __s('Modify the comment') . \"\\\"\n                           href='\" . ReservationItem::getFormURLWithID($data['refID']) . \"' >\" . $text . \"</a>\";\n                    }\n                    return $text;\n\n                case 'glpi_crontasks.description':\n                    $tmp = new CronTask();\n                    return $tmp->getDescription($data[$ID][0]['name']);\n\n                case 'glpi_changes.status':\n                    $status = Change::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Change::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_problems.status':\n                    $status = Problem::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Problem::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_tickets.status':\n                    $status = Ticket::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Ticket::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_projectstates.name':\n                    $out = '';\n                    $name = $data[$ID][0]['name'];\n                    if (isset($data[$ID][0]['trans'])) {\n                        $name = $data[$ID][0]['trans'];\n                    }\n                    if ($itemtype == 'ProjectState') {\n                        $out =   \"<a href='\" . ProjectState::getFormURLWithID($data[$ID][0][\"id\"]) . \"'>\" . $name . \"</a></div>\";\n                    } else {\n                        $out = $name;\n                    }\n                    return $out;\n\n                case 'glpi_items_tickets.items_id':\n                case 'glpi_items_problems.items_id':\n                case 'glpi_changes_items.items_id':\n                case 'glpi_certificates_items.items_id':\n                case 'glpi_appliances_items.items_id':\n                    if (!empty($data[$ID])) {\n                        $items = [];\n                        foreach ($data[$ID] as $key => $val) {\n                            if (is_numeric($key)) {\n                                if (\n                                    !empty($val['itemtype'])\n                                    && ($item = getItemForItemtype($val['itemtype']))\n                                ) {\n                                    if ($item->getFromDB($val['name'])) {\n                                        $items[] = $item->getLink(['comments' => true]);\n                                    }\n                                }\n                            }\n                        }\n                        if (!empty($items)) {\n                            return implode(\"<br>\", $items);\n                        }\n                    }\n                    return '&nbsp;';\n\n                case 'glpi_items_tickets.itemtype':\n                case 'glpi_items_problems.itemtype':\n                    if (!empty($data[$ID])) {\n                        $itemtypes = [];\n                        foreach ($data[$ID] as $key => $val) {\n                            if (is_numeric($key)) {\n                                if (\n                                    !empty($val['name'])\n                                    && ($item = getItemForItemtype($val['name']))\n                                ) {\n                                    $item = new $val['name']();\n                                    $name = $item->getTypeName();\n                                    $itemtypes[] = __($name);\n                                }\n                            }\n                        }\n                        if (!empty($itemtypes)) {\n                            return implode(\"<br>\", $itemtypes);\n                        }\n                    }\n\n                    return '&nbsp;';\n\n                case 'glpi_tickets.name':\n                case 'glpi_problems.name':\n                case 'glpi_changes.name':\n                    if (\n                        isset($data[$ID][0]['content'])\n                        && isset($data[$ID][0]['id'])\n                        && isset($data[$ID][0]['status'])\n                    ) {\n                        $link = $itemtype::getFormURLWithID($data[$ID][0]['id']);\n\n                        $out  = \"<a id='$itemtype\" . $data[$ID][0]['id'] . \"' href=\\\"\" . $link;\n                       // Force solution tab if solved\n                        if ($item = getItemForItemtype($itemtype)) {\n                            if (in_array($data[$ID][0]['status'], $item->getSolvedStatusArray())) {\n                                $out .= \"&amp;forcetab=$itemtype$2\";\n                            }\n                        }\n                        $out .= \"\\\">\";\n                        $name = $data[$ID][0]['name'];\n                        if (\n                            $_SESSION[\"glpiis_ids_visible\"]\n                            || empty($data[$ID][0]['name'])\n                        ) {\n                            $name = sprintf(__('%1$s (%2$s)'), $name, $data[$ID][0]['id']);\n                        }\n                        $out    .= $name . \"</a>\";\n                        $out     = sprintf(\n                            __('%1$s %2$s'),\n                            $out,\n                            Html::showToolTip(\n                                RichText::getEnhancedHtml($data[$ID][0]['content']),\n                                [\n                                    'applyto'        => $itemtype . $data[$ID][0]['id'],\n                                    'display'        => false,\n                                    'images_gallery' => false, // don't show photoswipe gallery in tooltips\n                                ]\n                            )\n                        );\n                        return $out;\n                    }\n                    break;\n\n                case 'glpi_ticketvalidations.status':\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if ($data[$ID][$k]['name']) {\n                             $status  = TicketValidation::getStatus($data[$ID][$k]['name']);\n                             $bgcolor = TicketValidation::getStatusColor($data[$ID][$k]['name']);\n                             $out    .= (empty($out) ? '' : self::LBBR) .\n                                 \"<div style=\\\"background-color:\" . $bgcolor . \";\\\">\" . $status . '</div>';\n                        }\n                    }\n                    return $out;\n\n                case 'glpi_cables.color':\n                   //do not display 'real' value (#.....)\n                    return \"\";\n\n                case 'glpi_ticketsatisfactions.satisfaction':\n                    if (self::$output_type == self::HTML_OUTPUT) {\n                        return TicketSatisfaction::displaySatisfaction($data[$ID][0]['name']);\n                    }\n                    break;\n\n                case 'glpi_projects._virtual_planned_duration':\n                    return Html::timestampToString(\n                        ProjectTask::getTotalPlannedDurationForProject($data[\"id\"]),\n                        false\n                    );\n\n                case 'glpi_projects._virtual_effective_duration':\n                    return Html::timestampToString(\n                        ProjectTask::getTotalEffectiveDurationForProject($data[\"id\"]),\n                        false\n                    );\n\n                case 'glpi_cartridgeitems._virtual':\n                    return Cartridge::getCount(\n                        $data[\"id\"],\n                        $data[$ID][0]['alarm_threshold'],\n                        self::$output_type != self::HTML_OUTPUT\n                    );\n\n                case 'glpi_printers._virtual':\n                    return Cartridge::getCountForPrinter(\n                        $data[\"id\"],\n                        self::$output_type != self::HTML_OUTPUT\n                    );\n\n                case 'glpi_consumableitems._virtual':\n                    return Consumable::getCount(\n                        $data[\"id\"],\n                        $data[$ID][0]['alarm_threshold'],\n                        self::$output_type != self::HTML_OUTPUT\n                    );\n\n                case 'glpi_links._virtual':\n                     $out = '';\n                     $link = new Link();\n                    if (\n                        ($item = getItemForItemtype($itemtype))\n                         && $item->getFromDB($data['id'])\n                    ) {\n                        $data = Link::getLinksDataForItem($item);\n                        $count_display = 0;\n                        foreach ($data as $val) {\n                            $links = Link::getAllLinksFor($item, $val);\n                            foreach ($links as $link) {\n                                if ($count_display) {\n                                    $out .=  self::LBBR;\n                                }\n                                $out .= $link;\n                                $count_display++;\n                            }\n                        }\n                    }\n                    return $out;\n\n                case 'glpi_reservationitems._virtual':\n                    if ($data[$ID][0]['is_active']) {\n                        return \"<a href='reservation.php?reservationitems_id=\" .\n                                          $data[\"refID\"] . \"' title=\\\"\" . __s('See planning') . \"\\\">\" .\n                                          \"<i class='far fa-calendar-alt'></i><span class='sr-only'>\" . __('See planning') . \"</span></a>\";\n                    } else {\n                        return \"&nbsp;\";\n                    }\n\n                case \"glpi_tickets.priority\":\n                case \"glpi_problems.priority\":\n                case \"glpi_changes.priority\":\n                case \"glpi_projects.priority\":\n                    $index = $data[$ID][0]['name'];\n                    $color = $_SESSION[\"glpipriority_$index\"];\n                    $name  = CommonITILObject::getPriorityName($index);\n                    return \"<div class='priority_block' style='border-color: $color'>\n                        <span style='background: $color'></span>&nbsp;$name\n                       </div>\";\n            }\n        }\n\n       //// Default case\n\n        if (\n            $itemtype == 'Ticket'\n            && Session::getCurrentInterface() == 'helpdesk'\n            && $orig_id == 8\n            && !empty($anon_name = Group::getAnonymizedName(\n                $itemtype::getById($data['id'])->getEntityId()\n            ))\n        ) {\n           // Assigned groups\n            return $anon_name;\n        }\n\n       // Link with plugin tables : need to know left join structure\n        if (isset($table)) {\n            if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table . '.' . $field, $matches)) {\n                if (count($matches) == 2) {\n                    $plug     = $matches[1];\n                    $out = Plugin::doOneHook(\n                        $plug,\n                        'giveItem',\n                        $itemtype,\n                        $orig_id,\n                        $data,\n                        $ID\n                    );\n                    if (!empty($out)) {\n                        return $out;\n                    }\n                }\n            }\n        }\n        $unit = '';\n        if (isset($so['unit'])) {\n            $unit = $so['unit'];\n        }\n\n       // Preformat items\n        if (isset($so[\"datatype\"])) {\n            switch ($so[\"datatype\"]) {\n                case \"itemlink\":\n                    $linkitemtype  = getItemTypeForTable($so[\"table\"]);\n\n                    $out           = \"\";\n                    $count_display = 0;\n                    $separate      = self::LBBR;\n                    if (isset($so['splititems']) && $so['splititems']) {\n                        $separate = self::LBHR;\n                    }\n\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (isset($data[$ID][$k]['id'])) {\n                            if ($count_display) {\n                                $out .= $separate;\n                            }\n                            $count_display++;\n                            $page  = $linkitemtype::getFormURLWithID($data[$ID][$k]['id']);\n                            $name  = $data[$ID][$k]['name'];\n                            if ($_SESSION[\"glpiis_ids_visible\"] || empty($data[$ID][$k]['name'])) {\n                                 $name = sprintf(__('%1$s (%2$s)'), $name, $data[$ID][$k]['id']);\n                            }\n                            if ($field === 'completename') {\n                                $chunks = preg_split('/ > /', $name);\n                                $completename = '';\n                                foreach ($chunks as $key => $element_name) {\n                                    $class = $key === array_key_last($chunks) ? '' : 'class=\"text-muted\"';\n                                    $separator = $key === array_key_last($chunks) ? '' : ' &gt; ';\n                                    $completename .= sprintf('<span %s>%s</span>%s', $class, $element_name, $separator);\n                                }\n                                $name = $completename;\n                            }\n\n                            $out  .= \"<a id='\" . $linkitemtype . \"_\" . $data['id'] . \"_\" .\n                                $data[$ID][$k]['id'] . \"' href='$page'>\" .\n                               $name . \"</a>\";\n                        }\n                    }\n                    return $out;\n\n                case \"text\":\n                    $separate = self::LBBR;\n                    if (isset($so['splititems']) && $so['splititems']) {\n                        $separate = self::LBHR;\n                    }\n\n                    $out           = '';\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= $separate;\n                            }\n                            $count_display++;\n\n\n                            $plaintext = RichText::getTextFromHtml($data[$ID][$k]['name'], false, true, self::$output_type == self::HTML_OUTPUT);\n\n                            if (self::$output_type == self::HTML_OUTPUT && (Toolbox::strlen($plaintext) > $CFG_GLPI['cut'])) {\n                                $rand = mt_rand();\n                                $popup_params = [\n                                    'display'       => false,\n                                    'awesome-class' => 'fa-comments',\n                                    'autoclose'     => false,\n                                    'onclick'       => true,\n                                ];\n                                $out .= sprintf(\n                                    __('%1$s %2$s'),\n                                    \"<span id='text$rand'>\" . Html::resume_text($plaintext, $CFG_GLPI['cut']) . '</span>',\n                                    Html::showToolTip(\n                                        '<div class=\"fup-popup\">' . RichText::getEnhancedHtml($data[$ID][$k]['name']) . '</div>',\n                                        $popup_params\n                                    )\n                                );\n                            } else {\n                                $out .= $plaintext;\n                            }\n                        }\n                    }\n                    return $out;\n\n                case \"date\":\n                case \"date_delay\":\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (\n                            is_null($data[$ID][$k]['name'])\n                            && isset($so['emptylabel']) && $so['emptylabel']\n                        ) {\n                            $out .= (empty($out) ? '' : self::LBBR) . $so['emptylabel'];\n                        } else {\n                            $out .= (empty($out) ? '' : self::LBBR) . Html::convDate($data[$ID][$k]['name']);\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"datetime\":\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (\n                            is_null($data[$ID][$k]['name'])\n                            && isset($so['emptylabel']) && $so['emptylabel']\n                        ) {\n                            $out .= (empty($out) ? '' : self::LBBR) . $so['emptylabel'];\n                        } else {\n                            $out .= (empty($out) ? '' : self::LBBR) . Html::convDateTime($data[$ID][$k]['name']);\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"timestamp\":\n                    $withseconds = false;\n                    if (isset($so['withseconds'])) {\n                        $withseconds = $so['withseconds'];\n                    }\n                    $withdays = true;\n                    if (isset($so['withdays'])) {\n                        $withdays = $so['withdays'];\n                    }\n\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        $out .= (empty($out) ? '' : '<br>') . Html::timestampToString(\n                            $data[$ID][$k]['name'],\n                            $withseconds,\n                            $withdays\n                        );\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"email\":\n                    $out           = '';\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if ($count_display) {\n                             $out .= self::LBBR;\n                        }\n                        $count_display++;\n                        if (!empty($data[$ID][$k]['name'])) {\n                            $out .= (empty($out) ? '' : self::LBBR);\n                            $out .= \"<a href='mailto:\" . Html::entities_deep($data[$ID][$k]['name']) . \"'>\" . $data[$ID][$k]['name'];\n                            $out .= \"</a>\";\n                        }\n                    }\n                    return (empty($out) ? \"&nbsp;\" : $out);\n\n                case \"weblink\":\n                    $orig_link = trim((string)$data[$ID][0]['name']);\n                    if (!empty($orig_link) && Toolbox::isValidWebUrl($orig_link)) {\n                       // strip begin of link\n                        $link = preg_replace('/https?:\\/\\/(www[^\\.]*\\.)?/', '', $orig_link);\n                        $link = preg_replace('/\\/$/', '', $link);\n                        if (Toolbox::strlen($link) > $CFG_GLPI[\"url_maxlength\"]) {\n                             $link = Toolbox::substr($link, 0, $CFG_GLPI[\"url_maxlength\"]) . \"...\";\n                        }\n                        return \"<a href=\\\"\" . Toolbox::formatOutputWebLink($orig_link) . \"\\\" target='_blank'>$link</a>\";\n                    }\n                    return \"&nbsp;\";\n\n                case \"count\":\n                case \"number\":\n                case \"mio\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            if (\n                                isset($so['toadd'])\n                                && isset($so['toadd'][$data[$ID][$k]['name']])\n                            ) {\n                                $out .= $so['toadd'][$data[$ID][$k]['name']];\n                            } else {\n                                $out .= Dropdown::getValueWithUnit($data[$ID][$k]['name'], $unit);\n                            }\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"decimal\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            if (\n                                isset($so['toadd'])\n                                && isset($so['toadd'][$data[$ID][$k]['name']])\n                            ) {\n                                $out .= $so['toadd'][$data[$ID][$k]['name']];\n                            } else {\n                                $out .= Dropdown::getValueWithUnit($data[$ID][$k]['name'], $unit, $CFG_GLPI[\"decimal_number\"]);\n                            }\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"bool\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            $out .= Dropdown::getYesNo($data[$ID][$k]['name']);\n                        }\n                    }\n                    return $out;\n\n                case \"itemtypename\":\n                    if ($obj = getItemForItemtype($data[$ID][0]['name'])) {\n                        return $obj->getTypeName();\n                    }\n                    return \"\";\n\n                case \"language\":\n                    if (isset($CFG_GLPI['languages'][$data[$ID][0]['name']])) {\n                        return $CFG_GLPI['languages'][$data[$ID][0]['name']][0];\n                    }\n                    return __('Default value');\n                case 'progressbar':\n                    if (!isset($progressbar_data)) {\n                        $bar_color = 'green';\n                        $percent   = ltrim(($data[$ID][0]['name'] ?? \"\"), 0);\n                        $progressbar_data = [\n                            'percent'      => $percent,\n                            'percent_text' => $percent,\n                            'color'        => $bar_color,\n                            'text'         => ''\n                        ];\n                    }\n\n                    $out = \"\";\n                    if ($progressbar_data['percent'] !== null) {\n                        $out = <<<HTML\n                  <span class='text-nowrap'>\n                     {$progressbar_data['text']}\n                  </span>\n                  <div class=\"progress\" style=\"height: 16px\">\n                     <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\"\n                          style=\"width: {$progressbar_data['percent']}%; background-color: {$progressbar_data['color']};\"\n                          aria-valuenow=\"{$progressbar_data['percent']}\"\n                          aria-valuemin=\"0\" aria-valuemax=\"100\">\n                        {$progressbar_data['percent_text']}%\n                     </div>\n                  </div>\nHTML;\n                    }\n\n                    return $out;\n                break;\n            }\n        }\n       // Manage items with need group by / group_concat\n        $out           = \"\";\n        $count_display = 0;\n        $separate      = self::LBBR;\n        if (isset($so['splititems']) && $so['splititems']) {\n            $separate = self::LBHR;\n        }\n        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n            if ($count_display) {\n                $out .= $separate;\n            }\n            $count_display++;\n           // Get specific display if available\n            if (isset($table)) {\n                $itemtype = getItemTypeForTable($table);\n                if ($item = getItemForItemtype($itemtype)) {\n                    $tmpdata  = $data[$ID][$k];\n                   // Copy name to real field\n                    $tmpdata[$field] = $data[$ID][$k]['name'] ?? '';\n\n                    $specific = $item->getSpecificValueToDisplay(\n                        $field,\n                        $tmpdata,\n                        [\n                            'html'      => true,\n                            'searchopt' => $so,\n                            'raw_data'  => $data\n                        ]\n                    );\n                }\n            }\n            if (!empty($specific)) {\n                $out .= $specific;\n            } else {\n                if (\n                    isset($so['toadd'])\n                    && isset($so['toadd'][$data[$ID][$k]['name']])\n                ) {\n                    $out .= $so['toadd'][$data[$ID][$k]['name']];\n                } else {\n                   // Empty is 0 or empty\n                    if (empty($split[0]) && isset($so['emptylabel'])) {\n                        $out .= $so['emptylabel'];\n                    } else {\n                       // Trans field exists\n                        if (isset($data[$ID][$k]['trans']) && !empty($data[$ID][$k]['trans'])) {\n                            $out .= $data[$ID][$k]['trans'];\n                        } else {\n                            $value = $data[$ID][$k]['name'];\n                            $out .= $so['field'] === 'completename'\n                                ? CommonTreeDropdown::sanitizeSeparatorInCompletename($value)\n                                : $value;\n                        }\n                    }\n                }\n            }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Reset save searches\n     *\n     * @return void\n     **/\n    public static function resetSaveSearch()\n    {\n\n        unset($_SESSION['glpisearch']);\n        $_SESSION['glpisearch']       = [];\n    }\n\n\n    /**\n     * Completion of the URL $_GET values with the $_SESSION values or define default values\n     *\n     * @param string  $itemtype        Item type to manage\n     * @param array   $params          Params to parse\n     * @param boolean $usesession      Use datas save in session (true by default)\n     * @param boolean $forcebookmark   Force trying to load parameters from default bookmark:\n     *                                  used for global search (false by default)\n     *\n     * @return array parsed params\n     **/\n    public static function manageParams(\n        $itemtype,\n        $params = [],\n        $usesession = true,\n        $forcebookmark = false\n    ) {\n        $default_values = [];\n\n        $default_values[\"start\"]       = 0;\n        $default_values[\"order\"]       = \"ASC\";\n        $default_values[\"sort\"]        = 1;\n        $default_values[\"is_deleted\"]  = 0;\n        $default_values[\"as_map\"]      = 0;\n        $default_values[\"browse\"]      = 0;\n\n        if (isset($params['start'])) {\n            $params['start'] = (int)$params['start'];\n        }\n\n        $default_values[\"criteria\"]     = self::getDefaultCriteria($itemtype);\n        $default_values[\"metacriteria\"] = [];\n\n       // Reorg search array\n       // start\n       // order\n       // sort\n       // is_deleted\n       // itemtype\n       // criteria : array (0 => array (link =>\n       //                               field =>\n       //                               searchtype =>\n       //                               value =>   (contains)\n       // metacriteria : array (0 => array (itemtype =>\n       //                                  link =>\n       //                                  field =>\n       //                                  searchtype =>\n       //                                  value =>   (contains)\n\n        if ($itemtype != AllAssets::getType() && class_exists($itemtype)) {\n           // retrieve default values for current itemtype\n            $itemtype_default_values = [];\n            if (method_exists($itemtype, 'getDefaultSearchRequest')) {\n                $itemtype_default_values = call_user_func([$itemtype, 'getDefaultSearchRequest']);\n            }\n\n           // retrieve default values for the current user\n            $user_default_values = SavedSearch_User::getDefault(Session::getLoginUserID(), $itemtype);\n            if ($user_default_values === false) {\n                $user_default_values = [];\n            }\n\n           // we construct default values in this order:\n           // - general default\n           // - itemtype default\n           // - user default\n           //\n           // The last ones erase values or previous\n           // So, we can combine each part (order from itemtype, criteria from user, etc)\n            $default_values = array_merge(\n                $default_values,\n                $itemtype_default_values,\n                $user_default_values\n            );\n        }\n\n       // First view of the page or force bookmark : try to load a bookmark\n        if (\n            $forcebookmark\n            || ($usesession\n              && !isset($params[\"reset\"])\n              && !isset($_SESSION['glpisearch'][$itemtype]))\n        ) {\n            $user_default_values = SavedSearch_User::getDefault(Session::getLoginUserID(), $itemtype);\n            if ($user_default_values) {\n                $_SESSION['glpisearch'][$itemtype] = [];\n               // Only get datas for bookmarks\n                if ($forcebookmark) {\n                    $params = $user_default_values;\n                } else {\n                    $bookmark = new SavedSearch();\n                    $bookmark->load($user_default_values['savedsearches_id'], false);\n                }\n            }\n        }\n       // Force reorder criterias\n        if (\n            isset($params[\"criteria\"])\n            && is_array($params[\"criteria\"])\n            && count($params[\"criteria\"])\n        ) {\n            $tmp                = $params[\"criteria\"];\n            $params[\"criteria\"] = [];\n            foreach ($tmp as $val) {\n                $params[\"criteria\"][] = $val;\n            }\n        }\n\n       // transform legacy meta-criteria in criteria (with flag meta=true)\n       // at the end of the array, as before there was only at the end of the query\n        if (\n            isset($params[\"metacriteria\"])\n            && is_array($params[\"metacriteria\"])\n        ) {\n           // as we will append meta to criteria, check the key exists\n            if (!isset($params[\"criteria\"])) {\n                $params[\"criteria\"] = [];\n            }\n            foreach ($params[\"metacriteria\"] as $val) {\n                $params[\"criteria\"][] = $val + ['meta' => 1];\n            }\n            $params[\"metacriteria\"] = [];\n        }\n\n        if (\n            $usesession\n            && isset($params[\"reset\"])\n        ) {\n            if (isset($_SESSION['glpisearch'][$itemtype])) {\n                unset($_SESSION['glpisearch'][$itemtype]);\n            }\n        }\n\n        if (\n            isset($params) && is_array($params)\n            && $usesession\n        ) {\n            foreach ($params as $key => $val) {\n                $_SESSION['glpisearch'][$itemtype][$key] = $val;\n            }\n        }\n\n        $saved_params = $params;\n        foreach ($default_values as $key => $val) {\n            if (!isset($params[$key])) {\n                if (\n                    $usesession\n                    && ($key == 'is_deleted' || $key == 'as_map' || $key == 'browse' || !isset($saved_params['criteria'])) // retrieve session only if not a new request\n                    && isset($_SESSION['glpisearch'][$itemtype][$key])\n                ) {\n                    $params[$key] = $_SESSION['glpisearch'][$itemtype][$key];\n                } else {\n                    $params[$key]                    = $val;\n                    $_SESSION['glpisearch'][$itemtype][$key] = $val;\n                }\n            }\n        }\n\n        return $params;\n    }\n\n\n    /**\n     * Clean search options depending of user active profile\n     *\n     * @param string  $itemtype     Item type to manage\n     * @param integer $action       Action which is used to manupulate searchoption\n     *                               (default READ)\n     * @param boolean $withplugins  Get plugins options (true by default)\n     *\n     * @return array Clean $SEARCH_OPTION array\n     **/\n    public static function getCleanedOptions($itemtype, $action = READ, $withplugins = true)\n    {\n        global $CFG_GLPI;\n\n        $options = &self::getOptions($itemtype, $withplugins);\n        $todel   = [];\n\n        if (\n            !Session::haveRight('infocom', $action)\n            && Infocom::canApplyOn($itemtype)\n        ) {\n            $itemstodel = Infocom::getSearchOptionsToAdd($itemtype);\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n        if (\n            !Session::haveRight('contract', $action)\n            && in_array($itemtype, $CFG_GLPI[\"contract_types\"])\n        ) {\n            $itemstodel = Contract::getSearchOptionsToAdd();\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n        if (\n            !Session::haveRight('document', $action)\n            && Document::canApplyOn($itemtype)\n        ) {\n            $itemstodel = Document::getSearchOptionsToAdd();\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n       // do not show priority if you don't have right in profile\n        if (\n            ($itemtype == 'Ticket')\n            && ($action == UPDATE)\n            && !Session::haveRight('ticket', Ticket::CHANGEPRIORITY)\n        ) {\n            $todel[] = 3;\n        }\n\n        if ($itemtype == 'Computer') {\n            if (!Session::haveRight('networking', $action)) {\n                $itemstodel = NetworkPort::getSearchOptionsToAdd($itemtype);\n                $todel      = array_merge($todel, array_keys($itemstodel));\n            }\n        }\n        if (!Session::haveRight(strtolower($itemtype), READNOTE)) {\n            $todel[] = 90;\n        }\n\n        if (count($todel)) {\n            foreach ($todel as $ID) {\n                if (isset($options[$ID])) {\n                    unset($options[$ID]);\n                }\n            }\n        }\n\n        return $options;\n    }\n\n\n    /**\n     *\n     * Get an option number in the SEARCH_OPTION array\n     *\n     * @param class-string<CommonDBTM> $itemtype  Item type\n     * @param string $field     Name\n     *\n     * @return integer\n     **/\n    public static function getOptionNumber($itemtype, $field)\n    {\n\n        $table = $itemtype::getTable();\n        $opts  = &self::getOptions($itemtype);\n\n        foreach ($opts as $num => $opt) {\n            if (\n                is_array($opt) && isset($opt['table'])\n                && ($opt['table'] == $table)\n                && ($opt['field'] == $field)\n            ) {\n                return $num;\n            }\n        }\n        return 0;\n    }\n\n\n    /**\n     * Get the SEARCH_OPTION array\n     *\n     * @param string  $itemtype     Item type\n     * @param boolean $withplugins  Get search options from plugins (true by default)\n     *\n     * @return array The reference to the array of search options for the given item type\n     **/\n    public static function &getOptions($itemtype, $withplugins = true)\n    {\n        global $CFG_GLPI;\n\n        $item = null;\n\n        if (!isset(self::$search[$itemtype])) {\n           // standard type first\n            switch ($itemtype) {\n                case 'Internet':\n                    self::$search[$itemtype]['common']            = __('Characteristics');\n\n                    self::$search[$itemtype][1]['table']          = 'networkport_types';\n                    self::$search[$itemtype][1]['field']          = 'name';\n                    self::$search[$itemtype][1]['name']           = __('Name');\n                    self::$search[$itemtype][1]['datatype']       = 'itemlink';\n                    self::$search[$itemtype][1]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][2]['table']          = 'networkport_types';\n                    self::$search[$itemtype][2]['field']          = 'id';\n                    self::$search[$itemtype][2]['name']           = __('ID');\n                    self::$search[$itemtype][2]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][31]['table']         = 'glpi_states';\n                    self::$search[$itemtype][31]['field']         = 'completename';\n                    self::$search[$itemtype][31]['name']          = __('Status');\n\n                    self::$search[$itemtype] += NetworkPort::getSearchOptionsToAdd('networkport_types');\n                    break;\n\n                case AllAssets::getType():\n                    self::$search[$itemtype]['common']            = __('Characteristics');\n\n                    self::$search[$itemtype][1]['table']          = 'asset_types';\n                    self::$search[$itemtype][1]['field']          = 'name';\n                    self::$search[$itemtype][1]['name']           = __('Name');\n                    self::$search[$itemtype][1]['datatype']       = 'itemlink';\n                    self::$search[$itemtype][1]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][2]['table']          = 'asset_types';\n                    self::$search[$itemtype][2]['field']          = 'id';\n                    self::$search[$itemtype][2]['name']           = __('ID');\n                    self::$search[$itemtype][2]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][31]['table']         = 'glpi_states';\n                    self::$search[$itemtype][31]['field']         = 'completename';\n                    self::$search[$itemtype][31]['name']          = __('Status');\n\n                    self::$search[$itemtype] += Location::getSearchOptionsToAdd();\n\n                    self::$search[$itemtype][5]['table']          = 'asset_types';\n                    self::$search[$itemtype][5]['field']          = 'serial';\n                    self::$search[$itemtype][5]['name']           = __('Serial number');\n\n                    self::$search[$itemtype][6]['table']          = 'asset_types';\n                    self::$search[$itemtype][6]['field']          = 'otherserial';\n                    self::$search[$itemtype][6]['name']           = __('Inventory number');\n\n                    self::$search[$itemtype][16]['table']         = 'asset_types';\n                    self::$search[$itemtype][16]['field']         = 'comment';\n                    self::$search[$itemtype][16]['name']          = __('Comments');\n                    self::$search[$itemtype][16]['datatype']      = 'text';\n\n                    self::$search[$itemtype][70]['table']         = 'glpi_users';\n                    self::$search[$itemtype][70]['field']         = 'name';\n                    self::$search[$itemtype][70]['name']          = User::getTypeName(1);\n\n                    self::$search[$itemtype][7]['table']          = 'asset_types';\n                    self::$search[$itemtype][7]['field']          = 'contact';\n                    self::$search[$itemtype][7]['name']           = __('Alternate username');\n                    self::$search[$itemtype][7]['datatype']       = 'string';\n\n                    self::$search[$itemtype][8]['table']          = 'asset_types';\n                    self::$search[$itemtype][8]['field']          = 'contact_num';\n                    self::$search[$itemtype][8]['name']           = __('Alternate username number');\n                    self::$search[$itemtype][8]['datatype']       = 'string';\n\n                    self::$search[$itemtype][71]['table']         = 'glpi_groups';\n                    self::$search[$itemtype][71]['field']         = 'completename';\n                    self::$search[$itemtype][71]['name']          = Group::getTypeName(1);\n\n                    self::$search[$itemtype][19]['table']         = 'asset_types';\n                    self::$search[$itemtype][19]['field']         = 'date_mod';\n                    self::$search[$itemtype][19]['name']          = __('Last update');\n                    self::$search[$itemtype][19]['datatype']      = 'datetime';\n                    self::$search[$itemtype][19]['massiveaction'] = false;\n\n                    self::$search[$itemtype][23]['table']         = 'glpi_manufacturers';\n                    self::$search[$itemtype][23]['field']         = 'name';\n                    self::$search[$itemtype][23]['name']          = Manufacturer::getTypeName(1);\n\n                    self::$search[$itemtype][24]['table']         = 'glpi_users';\n                    self::$search[$itemtype][24]['field']         = 'name';\n                    self::$search[$itemtype][24]['linkfield']     = 'users_id_tech';\n                    self::$search[$itemtype][24]['name']          = __('Technician in charge of the hardware');\n                    self::$search[$itemtype][24]['condition']     = ['is_assign' => 1];\n\n                    self::$search[$itemtype][49]['table']          = 'glpi_groups';\n                    self::$search[$itemtype][49]['field']          = 'completename';\n                    self::$search[$itemtype][49]['linkfield']      = 'groups_id_tech';\n                    self::$search[$itemtype][49]['name']           = __('Group in charge of the hardware');\n                    self::$search[$itemtype][49]['condition']      = ['is_assign' => 1];\n                    self::$search[$itemtype][49]['datatype']       = 'dropdown';\n\n                    self::$search[$itemtype][80]['table']         = 'glpi_entities';\n                    self::$search[$itemtype][80]['field']         = 'completename';\n                    self::$search[$itemtype][80]['name']          = Entity::getTypeName(1);\n                    break;\n\n                default:\n                    if ($item = getItemForItemtype($itemtype)) {\n                        self::$search[$itemtype] = $item->searchOptions();\n                    }\n                    break;\n            }\n\n            if (\n                Session::getLoginUserID()\n                && in_array($itemtype, $CFG_GLPI[\"ticket_types\"])\n            ) {\n                self::$search[$itemtype]['tracking']          = __('Assistance');\n\n                self::$search[$itemtype][60]['table']         = 'glpi_tickets';\n                self::$search[$itemtype][60]['field']         = 'id';\n                self::$search[$itemtype][60]['datatype']      = 'count';\n                self::$search[$itemtype][60]['name']          = _x('quantity', 'Number of tickets');\n                self::$search[$itemtype][60]['forcegroupby']  = true;\n                self::$search[$itemtype][60]['usehaving']     = true;\n                self::$search[$itemtype][60]['massiveaction'] = false;\n                self::$search[$itemtype][60]['joinparams']    = ['beforejoin'\n                                                              => ['table'\n                                                                        => 'glpi_items_tickets',\n                                                                  'joinparams'\n                                                                        => ['jointype'\n                                                                                  => 'itemtype_item'\n                                                                        ]\n                                                              ],\n                    'condition'\n                                                              => getEntitiesRestrictRequest(\n                                                                  'AND',\n                                                                  'NEWTABLE'\n                                                              )\n                ];\n\n                self::$search[$itemtype][140]['table']         = 'glpi_problems';\n                self::$search[$itemtype][140]['field']         = 'id';\n                self::$search[$itemtype][140]['datatype']      = 'count';\n                self::$search[$itemtype][140]['name']          = _x('quantity', 'Number of problems');\n                self::$search[$itemtype][140]['forcegroupby']  = true;\n                self::$search[$itemtype][140]['usehaving']     = true;\n                self::$search[$itemtype][140]['massiveaction'] = false;\n                self::$search[$itemtype][140]['joinparams']    = ['beforejoin'\n                                                              => ['table'\n                                                                        => 'glpi_items_problems',\n                                                                  'joinparams'\n                                                                        => ['jointype'\n                                                                                  => 'itemtype_item'\n                                                                        ]\n                                                              ],\n                    'condition'\n                                                              => getEntitiesRestrictRequest(\n                                                                  'AND',\n                                                                  'NEWTABLE'\n                                                              )\n                ];\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"networkport_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += NetworkPort::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"contract_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Contract::getSearchOptionsToAdd();\n            }\n\n            if (\n                Document::canApplyOn($itemtype)\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Document::getSearchOptionsToAdd();\n            }\n\n            if (\n                Infocom::canApplyOn($itemtype)\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Infocom::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"domain_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Domain::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"appliance_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Appliance::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (in_array($itemtype, $CFG_GLPI[\"link_types\"])) {\n                self::$search[$itemtype]['link'] = Link::getTypeName(Session::getPluralNumber());\n                self::$search[$itemtype] += Link::getSearchOptionsToAdd($itemtype);\n                self::$search[$itemtype]['manuallink'] = ManualLink::getTypeName(Session::getPluralNumber());\n                self::$search[$itemtype] += ManualLink::getSearchOptionsToAdd($itemtype);\n            }\n\n            if ($withplugins) {\n               // Search options added by plugins\n                $plugsearch = Plugin::getAddSearchOptions($itemtype);\n                $plugsearch = $plugsearch + Plugin::getAddSearchOptionsNew($itemtype);\n                if (count($plugsearch)) {\n                    self::$search[$itemtype] += ['plugins' => _n('Plugin', 'Plugins', Session::getPluralNumber())];\n                    self::$search[$itemtype] += $plugsearch;\n                }\n            }\n\n           // Complete linkfield if not define\n            if (is_null($item)) { // Special union type\n                $itemtable = $CFG_GLPI['union_search_type'][$itemtype];\n            } else {\n                if ($item = getItemForItemtype($itemtype)) {\n                    $itemtable = $item->getTable();\n                }\n            }\n\n            foreach (self::$search[$itemtype] as $key => $val) {\n                if (!is_array($val) || count($val) == 1) {\n                   // skip sub-menu\n                    continue;\n                }\n               // Compatibility before 0.80 : Force massive action to false if linkfield is empty :\n                if (isset($val['linkfield']) && empty($val['linkfield'])) {\n                    self::$search[$itemtype][$key]['massiveaction'] = false;\n                }\n\n               // Set default linkfield\n                if (!isset($val['linkfield']) || empty($val['linkfield'])) {\n                    if (\n                        (strcmp($itemtable, $val['table']) == 0)\n                        && (!isset($val['joinparams']) || (count($val['joinparams']) == 0))\n                    ) {\n                        self::$search[$itemtype][$key]['linkfield'] = $val['field'];\n                    } else {\n                        self::$search[$itemtype][$key]['linkfield'] = getForeignKeyFieldForTable($val['table']);\n                    }\n                }\n               // Add default joinparams\n                if (!isset($val['joinparams'])) {\n                    self::$search[$itemtype][$key]['joinparams'] = [];\n                }\n            }\n        }\n\n        return self::$search[$itemtype];\n    }\n\n    /**\n     * Is the search item related to infocoms\n     *\n     * @param string  $itemtype  Item type\n     * @param integer $searchID  ID of the element in $SEARCHOPTION\n     *\n     * @return boolean\n     **/\n    public static function isInfocomOption($itemtype, $searchID)\n    {\n        if (!Infocom::canApplyOn($itemtype)) {\n            return false;\n        }\n\n        $infocom_options = Infocom::rawSearchOptionsToAdd($itemtype);\n        $found_infocoms  = array_filter($infocom_options, function ($option) use ($searchID) {\n            return isset($option['id']) && $searchID == $option['id'];\n        });\n\n        return (count($found_infocoms) > 0);\n    }\n\n\n    /**\n     * @param string  $itemtype\n     * @param integer $field_num\n     **/\n    public static function getActionsFor($itemtype, $field_num)\n    {\n\n        $searchopt = &self::getOptions($itemtype);\n        $actions   = [\n            'contains'    => __('contains'),\n            'notcontains' => __('not contains'),\n            'searchopt'   => []\n        ];\n\n        if (isset($searchopt[$field_num]) && isset($searchopt[$field_num]['table'])) {\n            $actions['searchopt'] = $searchopt[$field_num];\n\n           // Force search type\n            if (isset($actions['searchopt']['searchtype'])) {\n               // Reset search option\n                $actions              = [];\n                $actions['searchopt'] = $searchopt[$field_num];\n                if (!is_array($actions['searchopt']['searchtype'])) {\n                    $actions['searchopt']['searchtype'] = [$actions['searchopt']['searchtype']];\n                }\n                foreach ($actions['searchopt']['searchtype'] as $searchtype) {\n                    switch ($searchtype) {\n                        case \"equals\":\n                            $actions['equals'] = __('is');\n                            break;\n\n                        case \"notequals\":\n                            $actions['notequals'] = __('is not');\n                            break;\n\n                        case \"contains\":\n                             $actions['contains']    = __('contains');\n                             $actions['notcontains'] = __('not contains');\n                            break;\n\n                        case \"notcontains\":\n                             $actions['notcontains'] = __('not contains');\n                            break;\n\n                        case \"under\":\n                            $actions['under'] = __('under');\n                            break;\n\n                        case \"notunder\":\n                            $actions['notunder'] = __('not under');\n                            break;\n\n                        case \"lessthan\":\n                            $actions['lessthan'] = __('before');\n                            break;\n\n                        case \"morethan\":\n                            $actions['morethan'] = __('after');\n                            break;\n                    }\n                }\n                return $actions;\n            }\n\n            if (isset($searchopt[$field_num]['datatype'])) {\n                switch ($searchopt[$field_num]['datatype']) {\n                    case 'mio':\n                    case 'count':\n                    case 'number':\n                        $opt = [\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n                        // No is / isnot if no limits defined\n                        if (\n                            !isset($searchopt[$field_num]['min'])\n                            && !isset($searchopt[$field_num]['max'])\n                        ) {\n                            unset($opt['equals']);\n                            unset($opt['notequals']);\n\n                         // https://github.com/glpi-project/glpi/issues/6917\n                         // change filter wording for numeric values to be more\n                         // obvious if the number dropdown will not be used\n                            $opt['contains']    = __('is');\n                            $opt['notcontains'] = __('is not');\n                        }\n                        return $opt;\n\n                    case 'bool':\n                        return [\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n\n                    case 'right':\n                        return ['equals'    => __('is'),\n                            'notequals' => __('is not'),\n                            'searchopt' => $searchopt[$field_num]\n                        ];\n\n                    case 'itemtypename':\n                        return ['equals'    => __('is'),\n                            'notequals' => __('is not'),\n                            'searchopt' => $searchopt[$field_num]\n                        ];\n\n                    case 'date':\n                    case 'datetime':\n                    case 'date_delay':\n                        return [\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'lessthan'    => __('before'),\n                            'morethan'    => __('after'),\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n                }\n            }\n\n           // switch ($searchopt[$field_num]['table']) {\n           //    case 'glpi_users_validation' :\n           //       return array('equals'    => __('is'),\n           //                    'notequals' => __('is not'),\n           //                    'searchopt' => $searchopt[$field_num]);\n           // }\n\n            switch ($searchopt[$field_num]['field']) {\n                case 'id':\n                    return ['equals'    => __('is'),\n                        'notequals' => __('is not'),\n                        'searchopt' => $searchopt[$field_num]\n                    ];\n\n                case 'name':\n                case 'completename':\n                    $actions = [\n                        'contains'    => __('contains'),\n                        'notcontains' => __('not contains'),\n                        'equals'      => __('is'),\n                        'notequals'   => __('is not'),\n                        'searchopt'   => $searchopt[$field_num]\n                    ];\n\n                   // Specific case of TreeDropdown : add under\n                    $itemtype_linked = getItemTypeForTable($searchopt[$field_num]['table']);\n                    if ($itemlinked = getItemForItemtype($itemtype_linked)) {\n                        if ($itemlinked instanceof CommonTreeDropdown) {\n                            $actions['under']    = __('under');\n                            $actions['notunder'] = __('not under');\n                        }\n                        return $actions;\n                    }\n            }\n        }\n        return $actions;\n    }\n\n\n    /**\n     * Print generic Header Column\n     *\n     * @param integer          $type     Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string           $value    Value to display\n     * @param integer          &$num     Column number\n     * @param string           $linkto   Link display element (HTML specific) (default '')\n     * @param boolean|integer  $issort   Is the sort column ? (default 0)\n     * @param string           $order    Order type ASC or DESC (defaut '')\n     * @param string           $options  Options to add (default '')\n     *\n     * @return string HTML to display\n     **/\n    public static function showHeaderItem(\n        $type,\n        $value,\n        &$num,\n        $linkto = \"\",\n        $issort = 0,\n        $order = \"\",\n        $options = \"\"\n    ) {\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE:\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"<th $options>\";\n                $PDF_TABLE .= htmlspecialchars($value);\n                $PDF_TABLE .= \"</th>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_HEADER,$SYLK_SIZE;\n                $SYLK_HEADER[$num] = self::sylk_clean($value);\n                $SYLK_SIZE[$num]   = Toolbox::strlen($SYLK_HEADER[$num]);\n                break;\n\n            case self::CSV_OUTPUT: //CSV\n                $out = \"\\\"\" . self::csv_clean($value) . \"\\\"\" . $_SESSION[\"glpicsv_delimiter\"];\n                break;\n\n            case self::NAMES_OUTPUT:\n                $out = \"\";\n                break;\n\n            default:\n                $class = \"\";\n                if ($issort) {\n                    $class = \"order_$order\";\n                }\n                $out = \"<th $options class='$class'>\";\n                if (!empty($linkto)) {\n                    $out .= \"<a href=\\\"$linkto\\\">\";\n                }\n                $out .= $value;\n                if (!empty($linkto)) {\n                    $out .= \"</a>\";\n                }\n                $out .= \"</th>\\n\";\n        }\n        $num++;\n        return $out;\n    }\n\n\n    /**\n     * Print generic normal Item Cell\n     *\n     * @param integer $type        Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $value       Value to display\n     * @param integer &$num        Column number\n     * @param integer $row         Row number\n     * @param string  $extraparam  Extra parameters for display (default '')\n     *\n     * @return string HTML to display\n     **/\n    public static function showItem($type, $value, &$num, $row, $extraparam = '')\n    {\n\n        $out = \"\";\n        // Handle null values\n        if ($value === null) {\n            $value = '';\n        }\n\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $value = DataExport::normalizeValueForTextExport($value ?? '');\n                $value = htmlspecialchars($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $PDF_TABLE .= \"<td $extraparam valign='top'>\";\n                $PDF_TABLE .= $value;\n                $PDF_TABLE .= \"</td>\";\n\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_ARRAY,$SYLK_SIZE;\n                $value = DataExport::normalizeValueForTextExport($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $SYLK_ARRAY[$row][$num] = self::sylk_clean($value);\n                $SYLK_SIZE[$num]        = max(\n                    $SYLK_SIZE[$num],\n                    Toolbox::strlen($SYLK_ARRAY[$row][$num])\n                );\n                break;\n\n            case self::CSV_OUTPUT: //csv\n                $value = DataExport::normalizeValueForTextExport($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $out   = \"\\\"\" . self::csv_clean($value) . \"\\\"\" . $_SESSION[\"glpicsv_delimiter\"];\n                break;\n\n            case self::NAMES_OUTPUT:\n               // We only want to display one column (the name of the item).\n               // The name field is always the first column expect for tickets\n               // which have their ids as the first column instead, thus moving the\n               // name to the second column.\n               // We don't have access to the itemtype so we must rely on data\n               // types to figure which column to use :\n               //    - Ticket will have a numeric first column (id) and an HTML\n               //    link containing the name as the second column.\n               //    - Other items will have an HTML link containing the name as\n               //    the first column and a simple string containing the entity\n               //    name as the second column.\n               // -> We can check that the column is the first or second AND is html\n                if (\n                    strip_tags($value) !== $value\n                    && ($num == 1 || $num == 2)\n                ) {\n                   // Use a regex to keep only the link, there may be other content\n                   // after that we don't need (script, tooltips, ...)\n                    if (preg_match('/<a.*<\\/a>/', $value, $matches)) {\n                        $out = html_entity_decode(strip_tags($matches[0]));\n                    }\n                }\n                break;\n\n            default:\n                global $CFG_GLPI;\n                $out = \"<td $extraparam valign='top'>\";\n\n                if (!preg_match('/' . self::LBHR . '/', $value)) {\n                    $values = preg_split('/' . self::LBBR . '/i', $value);\n                    $line_delimiter = '<br>';\n                } else {\n                    $values = preg_split('/' . self::LBHR . '/i', $value);\n                    $line_delimiter = '<hr>';\n                }\n\n                if (\n                    count($values) > 1\n                    && Toolbox::strlen($value) > $CFG_GLPI['cut']\n                ) {\n                    $value = '';\n                    foreach ($values as $v) {\n                        $value .= $v . $line_delimiter;\n                    }\n                    $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                    $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                    $value = '<div class=\"fup-popup\">' . $value . '</div>';\n                    $valTip = \"&nbsp;\" . Html::showToolTip(\n                        $value,\n                        [\n                            'awesome-class'   => 'fa-comments',\n                            'display'         => false,\n                            'autoclose'       => false,\n                            'onclick'         => true\n                        ]\n                    );\n                    $out .= $values[0] . $valTip;\n                } else {\n                    $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                    $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                    $out .= $value;\n                }\n                $out .= \"</td>\\n\";\n        }\n        $num++;\n        return $out;\n    }\n\n\n    /**\n     * Print generic error\n     *\n     * @param integer $type     Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $message  Message to display, if empty \"no item found\" will be displayed\n     *\n     * @return string HTML to display\n     **/\n    public static function showError($type, $message = \"\")\n    {\n        if (strlen($message) == 0) {\n            $message = __('No item found');\n        }\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n                break;\n\n            default:\n                $out = \"<div class='center b'>$message</div>\\n\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic footer\n     *\n     * @param integer $type  Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $title title of file : used for PDF (default '')\n     * @param integer $count Total number of results\n     *\n     * @return string HTML to display\n     **/\n    public static function showFooter($type, $title = \"\", $count = null)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n\n                $font       = 'helvetica';\n                $fontsize   = 8;\n                if (isset($_SESSION['glpipdffont']) && $_SESSION['glpipdffont']) {\n                    $font       = $_SESSION['glpipdffont'];\n                }\n\n                $pdf = new GLPIPDF(\n                    [\n                        'font_size'  => $fontsize,\n                        'font'       => $font,\n                        'orientation'        => $type == self::PDF_OUTPUT_LANDSCAPE ? 'L' : 'P',\n                    ],\n                    $count,\n                    $title,\n                );\n\n                $PDF_TABLE .= '</table>';\n                $pdf->writeHTML($PDF_TABLE, true, false, true);\n                $pdf->Output('glpi.pdf', 'I');\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_HEADER,$SYLK_ARRAY,$SYLK_SIZE;\n               // largeurs des colonnes\n                foreach ($SYLK_SIZE as $num => $val) {\n                    $out .= \"F;W\" . $num . \" \" . $num . \" \" . min(50, $val) . \"\\n\";\n                }\n                $out .= \"\\n\";\n               // Header\n                foreach ($SYLK_HEADER as $num => $val) {\n                    $out .= \"F;SDM4;FG0C;\" . ($num == 1 ? \"Y1;\" : \"\") . \"X$num\\n\";\n                    $out .= \"C;N;K\\\"$val\\\"\\n\";\n                    $out .= \"\\n\";\n                }\n               // Datas\n                foreach ($SYLK_ARRAY as $row => $tab) {\n                    foreach ($tab as $num => $val) {\n                        $out .= \"F;P3;FG0L;\" . ($num == 1 ? \"Y\" . $row . \";\" : \"\") . \"X$num\\n\";\n                        $out .= \"C;N;K\\\"$val\\\"\\n\";\n                    }\n                }\n                $out .= \"E\\n\";\n                break;\n\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"</table></div>\\n\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic footer\n     *\n     * @param integer         $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param integer         $rows   Number of rows\n     * @param integer         $cols   Number of columns\n     * @param boolean|integer $fixed  Used tab_cadre_fixe table for HTML export ? (default 0)\n     *\n     * @return string HTML to display\n     **/\n    public static function showHeader($type, $rows, $cols, $fixed = 0)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE = \"<table cellspacing=\\\"0\\\" cellpadding=\\\"1\\\" border=\\\"1\\\" >\";\n                break;\n\n            case self::SYLK_OUTPUT: // Sylk\n                global $SYLK_ARRAY, $SYLK_HEADER, $SYLK_SIZE;\n                $SYLK_ARRAY  = [];\n                $SYLK_HEADER = [];\n                $SYLK_SIZE   = [];\n               // entetes HTTP\n                header(\"Expires: Mon, 26 Nov 1962 00:00:00 GMT\");\n                header('Pragma: private'); /// IE BUG + SSL\n                header('Cache-control: private, must-revalidate'); /// IE BUG + SSL\n                header(\"Content-disposition: filename=glpi.slk\");\n                header('Content-type: application/octetstream');\n               // entete du fichier\n                echo \"ID;PGLPI_EXPORT\\n\"; // ID;Pappli\n                echo \"\\n\";\n               // formats\n                echo \"P;PGeneral\\n\";\n                echo \"P;P#,##0.00\\n\";       // P;Pformat_1 (reels)\n                echo \"P;P#,##0\\n\";          // P;Pformat_2 (entiers)\n                echo \"P;P@\\n\";              // P;Pformat_3 (textes)\n                echo \"\\n\";\n               // polices\n                echo \"P;EArial;M200\\n\";\n                echo \"P;EArial;M200\\n\";\n                echo \"P;EArial;M200\\n\";\n                echo \"P;FArial;M200;SB\\n\";\n                echo \"\\n\";\n               // nb lignes * nb colonnes\n                echo \"B;Y\" . $rows;\n                echo \";X\" . $cols . \"\\n\"; // B;Yligmax;Xcolmax\n                echo \"\\n\";\n                break;\n\n            case self::CSV_OUTPUT: // csv\n                header(\"Expires: Mon, 26 Nov 1962 00:00:00 GMT\");\n                header('Pragma: private'); /// IE BUG + SSL\n                header('Cache-control: private, must-revalidate'); /// IE BUG + SSL\n                header(\"Content-disposition: filename=glpi.csv\");\n                header('Content-type: text/csv');\n               // zero width no break space (for excel)\n                echo\"\\xEF\\xBB\\xBF\";\n                break;\n\n            case self::NAMES_OUTPUT:\n                header(\"Content-disposition: filename=glpi.txt\");\n                header('Content-type: file/txt');\n                break;\n\n            default:\n                if ($fixed) {\n                    $out = \"<div class='center'><table border='0' class='table'>\";\n                } else {\n                    $out = \"<div class='center'><table border='0' class='table card-table table-hover'>\";\n                }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print begin of header part\n     *\n     * @param integer $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @since 0.85\n     *\n     * @return string HTML to display\n     **/\n    public static function showBeginHeader($type)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"<thead>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"<thead>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print end of header part\n     *\n     * @param integer $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @since 0.85\n     *\n     * @return string to display\n     **/\n    public static function showEndHeader($type)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"</thead>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"</thead>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic new line\n     *\n     * @param integer $type        Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param boolean $odd         Is it a new odd line ? (false by default)\n     * @param boolean $is_deleted  Is it a deleted search ? (false by default)\n     *\n     * @return string HTML to display\n     **/\n    public static function showNewLine($type, $odd = false, $is_deleted = false)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $style = \"\";\n                if ($odd) {\n                    $style = \" style=\\\"background-color:#DDDDDD;\\\" \";\n                }\n                $PDF_TABLE .= \"<tr $style nobr=\\\"true\\\">\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $class = \" class='tab_bg_2\" . ($is_deleted ? '_2' : '') . \"' \";\n                if ($odd) {\n                    $class = \" class='tab_bg_1\" . ($is_deleted ? '_2' : '') . \"' \";\n                }\n                $out = \"<tr $class>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic end line\n     *\n     * @param integer $type  Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @return string HTML to display\n     **/\n    public static function showEndLine($type, bool $is_header_line = false)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= '</tr>';\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                break;\n\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                // NAMES_OUTPUT has no output on header lines\n                $newline = $type != self::NAMES_OUTPUT || !$is_header_line;\n                if ($newline) {\n                    $out = \"\\n\";\n                }\n                break;\n\n            default:\n                $out = \"</tr>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * @param array $joinparams\n     */\n    public static function computeComplexJoinID(array $joinparams)\n    {\n\n        $complexjoin = '';\n\n        if (isset($joinparams['condition'])) {\n            if (!is_array($joinparams['condition'])) {\n                $complexjoin .= $joinparams['condition'];\n            } else {\n                global $DB;\n                $dbi = new DBmysqlIterator($DB);\n                $sql_clause = $dbi->analyseCrit($joinparams['condition']);\n                $complexjoin .= ' AND ' . $sql_clause; //TODO: and should came from conf\n            }\n        }\n\n       // For jointype == child\n        if (\n            isset($joinparams['jointype']) && ($joinparams['jointype'] == 'child')\n            && isset($joinparams['linkfield'])\n        ) {\n            $complexjoin .= $joinparams['linkfield'];\n        }\n\n        if (isset($joinparams['beforejoin'])) {\n            if (isset($joinparams['beforejoin']['table'])) {\n                $joinparams['beforejoin'] = [$joinparams['beforejoin']];\n            }\n            foreach ($joinparams['beforejoin'] as $tab) {\n                if (isset($tab['table'])) {\n                    $complexjoin .= $tab['table'];\n                }\n                if (isset($tab['joinparams']) && isset($tab['joinparams']['condition'])) {\n                    if (!is_array($tab['joinparams']['condition'])) {\n                        $complexjoin .= $tab['joinparams']['condition'];\n                    } else {\n                        global $DB;\n                        $dbi = new DBmysqlIterator($DB);\n                        $sql_clause = $dbi->analyseCrit($tab['joinparams']['condition']);\n                        $complexjoin .= ' AND ' . $sql_clause; //TODO: and should came from conf\n                    }\n                }\n            }\n        }\n\n        if (!empty($complexjoin)) {\n            $complexjoin = md5($complexjoin);\n        }\n        return $complexjoin;\n    }\n\n\n    /**\n     * Clean display value for csv export\n     *\n     * @param string $value value\n     *\n     * @return string Clean value\n     **/\n    public static function csv_clean($value)\n    {\n\n        $value = str_replace(\"\\\"\", \"''\", $value);\n\n        return $value;\n    }\n\n\n    /**\n     * Clean display value for sylk export\n     *\n     * @param string $value value\n     *\n     * @return string Clean value\n     **/\n    public static function sylk_clean($value)\n    {\n\n        $value = preg_replace('/\\x0A/', ' ', $value);\n        $value = preg_replace('/\\x0D/', '', $value);\n        $value = str_replace(\"\\\"\", \"''\", $value);\n        $value = str_replace(\"\\n\", \" | \", $value);\n\n        return $value;\n    }\n\n\n    /**\n     * Create SQL search condition\n     *\n     * @param string  $field  Nname (should be ` protected)\n     * @param string  $val    Value to search\n     * @param boolean $not    Is a negative search ? (false by default)\n     * @param string  $link   With previous criteria (default 'AND')\n     *\n     * @return search SQL string\n     **/\n    public static function makeTextCriteria($field, $val, $not = false, $link = 'AND')\n    {\n\n        $sql = $field . self::makeTextSearch($val, $not);\n       // mange empty field (string with length = 0)\n        $sql_or = \"\";\n        if (strtolower($val) == \"null\") {\n            $sql_or = \"OR $field = ''\";\n        }\n\n        if (\n            ($not && ($val != 'NULL') && ($val != 'null') && ($val != '^$'))    // Not something\n            || (!$not && ($val == '^$'))\n        ) {   // Empty\n            $sql = \"($sql OR $field IS NULL)\";\n        }\n        return \" $link ($sql $sql_or)\";\n    }\n\n    /**\n     * Create SQL search value\n     *\n     * @since 9.4\n     *\n     * @param string  $val value to search\n     *\n     * @return string|null\n     **/\n    public static function makeTextSearchValue($val)\n    {\n        // `$val` will mostly comes from sanitized input, but may also be raw value.\n        // 1. Unsanitize value to be sure to use raw value.\n        // 2. Escape raw value to protect SQL special chars.\n        $val = Sanitizer::dbEscape(Sanitizer::unsanitize($val));\n\n       // escape _ char used as wildcard in mysql likes\n        $val = str_replace('_', '\\\\_', $val);\n\n        if ($val === 'NULL' || $val === 'null') {\n            return null;\n        }\n\n        $val = trim($val);\n\n        if ($val === '^') {\n           // Special case, searching \"^\" means we are searching for a non empty/null field\n            return '%';\n        }\n\n        if ($val === '' || $val === '^$' || $val === '$') {\n            return '';\n        }\n\n        if (preg_match('/^\\^/', $val)) {\n           // Remove leading `^`\n            $val = ltrim(preg_replace('/^\\^/', '', $val));\n        } else {\n           // Add % wildcard before searched string if not begining by a `^`\n            $val = '%' . $val;\n        }\n\n        if (preg_match('/\\$$/', $val)) {\n           // Remove trailing `$`\n            $val = rtrim(preg_replace('/\\$$/', '', $val));\n        } else {\n           // Add % wildcard after searched string if not ending by a `$`\n            $val = $val . '%';\n        }\n\n        return $val;\n    }\n\n\n    /**\n     * Create SQL search condition\n     *\n     * @param string  $val  Value to search\n     * @param boolean $not  Is a negative search ? (false by default)\n     *\n     * @return string Search string\n     **/\n    public static function makeTextSearch($val, $not = false)\n    {\n\n        $NOT = \"\";\n        if ($not) {\n            $NOT = \"NOT\";\n        }\n\n        $val = self::makeTextSearchValue($val);\n        if ($val == null) {\n            $SEARCH = \" IS $NOT NULL \";\n        } else {\n            $SEARCH = \" $NOT LIKE \" . DBmysql::quoteValue($val) . \" \";\n        }\n        return $SEARCH;\n    }\n\n\n    /**\n     * @since 0.84\n     *\n     * @param string $pattern\n     * @param string $subject\n     **/\n    public static function explodeWithID($pattern, $subject)\n    {\n\n        $tab = explode($pattern, $subject);\n\n        if (isset($tab[1]) && !is_numeric($tab[1])) {\n           // Report $ to tab[0]\n            if (preg_match('/^(\\\\$*)(.*)/', $tab[1], $matchs)) {\n                if (isset($matchs[2]) && is_numeric($matchs[2])) {\n                    $tab[1]  = $matchs[2];\n                    $tab[0] .= $matchs[1];\n                }\n            }\n        }\n       // Manage NULL value\n        if ($tab[0] == self::NULLVALUE) {\n            $tab[0] = null;\n        }\n        return $tab;\n    }\n\n    /**\n     * Add join for dropdown translations\n     *\n     * @param string $alias    Alias for translation table\n     * @param string $table    Table to join on\n     * @param class-string<CommonDBTM> $itemtype Item type\n     * @param string $field    Field name\n     *\n     * @return string\n     */\n    public static function joinDropdownTranslations($alias, $table, $itemtype, $field)\n    {\n        return \"LEFT JOIN `glpi_dropdowntranslations` AS `$alias`\n                  ON (`$alias`.`itemtype` = '$itemtype'\n                        AND `$alias`.`items_id` = `$table`.`id`\n                        AND `$alias`.`language` = '\" .\n                              $_SESSION['glpilanguage'] . \"'\n                        AND `$alias`.`field` = '$field')\";\n    }\n\n    /**\n     * Get table name for item type\n     *\n     * @param class-string<CommonDBTM> $itemtype\n     *\n     * @return string\n     */\n    public static function getOrigTableName(string $itemtype): string\n    {\n        return (is_a($itemtype, CommonDBTM::class, true)) ? $itemtype::getTable() : getTableForItemType($itemtype);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2022 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\RichText\\RichText;\nuse Glpi\\Socket;\nuse Glpi\\Toolbox\\DataExport;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n * Search Class\n *\n * Generic class for Search Engine\n **/\nclass Search\n{\n    /**\n     * Default number of items displayed in global search\n     * @var int\n     * @see GLOBAL_SEARCH\n     */\n    const GLOBAL_DISPLAY_COUNT = 10;\n\n   // EXPORT TYPE\n    /**\n     * The global search view (Search across many item types).\n     * This is NOT the same as the AllAssets view which is just a special itemtype.\n     * @var int\n     */\n    const GLOBAL_SEARCH        = -1;\n\n    /**\n     * The standard view.\n     * This includes the following sub-views:\n     * - Table/List\n     * - Map\n     * - Browse\n     * @var int\n     */\n    const HTML_OUTPUT          = 0;\n\n    /**\n     * SYLK export format\n     * @var int\n     */\n    const SYLK_OUTPUT          = 1;\n\n    /**\n     * PDF export format (Landscape mode)\n     * @var int\n     */\n    const PDF_OUTPUT_LANDSCAPE = 2;\n\n    /**\n     * CSV export format\n     * @var int\n     */\n    const CSV_OUTPUT           = 3;\n\n    /**\n     * PDF export format (Portrait mode)\n     * @var int\n     */\n    const PDF_OUTPUT_PORTRAIT  = 4;\n\n    /**\n     * Names list export format\n     * @var int\n     */\n    const NAMES_OUTPUT         = 5;\n\n    /**\n     * Placeholder for a <br> line break\n     * @var string\n     */\n    const LBBR = '#LBBR#';\n\n    /**\n     * Placeholder for a <hr> line break\n     * @var string\n     */\n    const LBHR = '#LBHR#';\n\n    /**\n     * Separator used to separate values of a same element in CONCAT MySQL function.\n     *\n     * @var string\n     * @see LONGSEP\n     */\n    const SHORTSEP = '$#$';\n\n    /**\n     * Separator used to separate each element in GROUP_CONCAT MySQL function.\n     *\n     * @var string\n     * @see SHORTSEP\n     */\n    const LONGSEP  = '$$##$$';\n\n    /**\n     * Placeholder for a null value\n     * @var string\n     */\n    const NULLVALUE = '__NULL__';\n\n    /**\n     * The output format for the search results\n     * @var int\n     */\n    public static $output_type = self::HTML_OUTPUT;\n    public static $search = [];\n\n    /**\n     * Display search engine for an type\n     *\n     * @param string  $itemtype Item type to manage\n     *\n     * @return void\n     **/\n    public static function show($itemtype)\n    {\n\n        $params = self::manageParams($itemtype, $_GET);\n        echo \"<div class='search_page row'>\";\n        TemplateRenderer::getInstance()->display('layout/parts/saved_searches.html.twig', [\n            'itemtype' => $itemtype,\n        ]);\n        echo \"<div class='col search-container'>\";\n\n        if (\n            $itemtype == \"Ticket\"\n            && $default = Glpi\\Dashboard\\Grid::getDefaultDashboardForMenu('mini_ticket', true)\n        ) {\n            $dashboard = new Glpi\\Dashboard\\Grid($default, 33, 2);\n            $dashboard->show(true);\n        }\n\n        self::showGenericSearch($itemtype, $params);\n        if ($params['as_map'] == 1) {\n            self::showMap($itemtype, $params);\n        } elseif ($params['browse'] == 1) {\n            $itemtype::showBrowseView($itemtype, $params);\n        } else {\n            self::showList($itemtype, $params);\n        }\n        echo \"</div>\";\n        echo \"</div>\";\n    }\n\n\n    /**\n     * Display result table for search engine for an type\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params       Search params passed to\n     *                             prepareDatasForSearch function\n     * @param array  $forcedisplay Array of columns to display (default empty\n     *                             = use display pref and search criteria)\n     *\n     * @return void\n     **/\n    public static function showList(\n        $itemtype,\n        $params,\n        array $forcedisplay = []\n    ) {\n        $data = self::getDatas($itemtype, $params, $forcedisplay);\n\n        switch ($data['display_type']) {\n            case self::CSV_OUTPUT:\n            case self::PDF_OUTPUT_LANDSCAPE:\n            case self::PDF_OUTPUT_PORTRAIT:\n            case self::SYLK_OUTPUT:\n            case self::NAMES_OUTPUT:\n                self::outputData($data);\n                break;\n            case self::GLOBAL_SEARCH:\n            case self::HTML_OUTPUT:\n            default:\n                self::displayData($data);\n                break;\n        }\n    }\n\n    /**\n     * Display result table for search engine for an type as a map\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params   Search params passed to prepareDatasForSearch function\n     *\n     * @return void\n     **/\n    public static function showMap($itemtype, $params)\n    {\n        global $CFG_GLPI;\n\n        if ($itemtype == 'Location') {\n            $latitude = 21;\n            $longitude = 20;\n        } else if ($itemtype == 'Entity') {\n            $latitude = 67;\n            $longitude = 68;\n        } else {\n            $latitude = 998;\n            $longitude = 999;\n        }\n\n        $params['criteria'][] = [\n            'link'         => 'AND NOT',\n            'field'        => $latitude,\n            'searchtype'   => 'contains',\n            'value'        => 'NULL'\n        ];\n        $params['criteria'][] = [\n            'link'         => 'AND NOT',\n            'field'        => $longitude,\n            'searchtype'   => 'contains',\n            'value'        => 'NULL'\n        ];\n\n        $data = self::getDatas($itemtype, $params);\n        self::displayData($data);\n\n        if ($data['data']['totalcount'] > 0) {\n            $target = $data['search']['target'];\n            $criteria = $data['search']['criteria'];\n            array_pop($criteria);\n            array_pop($criteria);\n            $criteria[] = [\n                'link'         => 'AND',\n                'field'        => ($itemtype == 'Location' || $itemtype == 'Entity') ? 1 : (($itemtype == 'Ticket') ? 83 : 3),\n                'searchtype'   => 'equals',\n                'value'        => 'CURLOCATION'\n            ];\n            $globallinkto = Toolbox::append_params(\n                [\n                    'criteria'     => Sanitizer::unsanitize($criteria),\n                    'metacriteria' => Sanitizer::unsanitize($data['search']['metacriteria'])\n                ],\n                '&amp;'\n            );\n            $sort_params = Toolbox::append_params([\n                'sort'   => $data['search']['sort'],\n                'order'  => $data['search']['order']\n            ], '&amp;');\n            $parameters = \"as_map=0&amp;\" . $sort_params . '&amp;' .\n                        $globallinkto;\n\n            if (strpos($target, '?') == false) {\n                $fulltarget = $target . \"?\" . $parameters;\n            } else {\n                $fulltarget = $target . \"&\" . $parameters;\n            }\n            $typename = class_exists($itemtype) ? $itemtype::getTypeName($data['data']['totalcount']) : $itemtype;\n\n            echo \"<div class='card border-top-0 rounded-0 search-as-map'>\";\n            echo \"<div class='card-body px-0' id='map_container'>\";\n            echo \"<small class='text-muted p-1'>\" . __('Search results for localized items only') . \"</small>\";\n            $js = \"$(function() {\n               var map = initMap($('#map_container'), 'map', 'full');\n               _loadMap(map, '$itemtype');\n            });\n\n         var _loadMap = function(map_elt, itemtype) {\n            L.AwesomeMarkers.Icon.prototype.options.prefix = 'far';\n            var _micon = 'circle';\n\n            var stdMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'blue'\n            });\n\n            var aMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'cadetblue'\n            });\n\n            var bMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'purple'\n            });\n\n            var cMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'darkpurple'\n            });\n\n            var dMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'red'\n            });\n\n            var eMarker = L.AwesomeMarkers.icon({\n               icon: _micon,\n               markerColor: 'darkred'\n            });\n\n\n            //retrieve geojson data\n            map_elt.spin(true);\n            $.ajax({\n               dataType: 'json',\n               method: 'POST',\n               url: '{$CFG_GLPI['root_doc']}/ajax/map.php',\n               data: {\n                  itemtype: itemtype,\n                  params: \" . json_encode($params) . \"\n               }\n            }).done(function(data) {\n               var _points = data.points;\n               var _markers = L.markerClusterGroup({\n                  iconCreateFunction: function(cluster) {\n                     var childCount = cluster.getChildCount();\n\n                     var markers = cluster.getAllChildMarkers();\n                     var n = 0;\n                     for (var i = 0; i < markers.length; i++) {\n                        n += markers[i].count;\n                     }\n\n                     var c = ' marker-cluster-';\n                     if (n < 10) {\n                        c += 'small';\n                     } else if (n < 100) {\n                        c += 'medium';\n                     } else {\n                        c += 'large';\n                     }\n\n                     return new L.DivIcon({ html: '<div><span>' + n + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });\n                  }\n               });\n\n               $.each(_points, function(index, point) {\n                  var _title = '<strong>' + point.title + '</strong><br/><a href=\\''+'$fulltarget'.replace(/CURLOCATION/, point.loc_id)+'\\'>\" . sprintf(__('%1$s %2$s'), 'COUNT', $typename) . \"'.replace(/COUNT/, point.count)+'</a>';\n                  if (point.types) {\n                     $.each(point.types, function(tindex, type) {\n                        _title += '<br/>\" . sprintf(__('%1$s %2$s'), 'COUNT', 'TYPE') . \"'.replace(/COUNT/, type.count).replace(/TYPE/, type.name);\n                     });\n                  }\n                  var _icon = stdMarker;\n                  if (point.count < 10) {\n                     _icon = stdMarker;\n                  } else if (point.count < 100) {\n                     _icon = aMarker;\n                  } else if (point.count < 1000) {\n                     _icon = bMarker;\n                  } else if (point.count < 5000) {\n                     _icon = cMarker;\n                  } else if (point.count < 10000) {\n                     _icon = dMarker;\n                  } else {\n                     _icon = eMarker;\n                  }\n                  var _marker = L.marker([point.lat, point.lng], { icon: _icon, title: point.title });\n                  _marker.count = point.count;\n                  _marker.bindPopup(_title);\n                  _markers.addLayer(_marker);\n               });\n\n               map_elt.addLayer(_markers);\n               map_elt.fitBounds(\n                  _markers.getBounds(), {\n                     padding: [50, 50],\n                     maxZoom: 12\n                  }\n               );\n            }).fail(function (response) {\n               var _data = response.responseJSON;\n               var _message = '\" . __s('An error occurred loading data :(') . \"';\n               if (_data.message) {\n                  _message = _data.message;\n               }\n               var fail_info = L.control();\n               fail_info.onAdd = function (map) {\n                  this._div = L.DomUtil.create('div', 'fail_info');\n                  this._div.innerHTML = _message + '<br/><span id=\\'reload_data\\'><i class=\\'fa fa-sync\\'></i> \" . __s('Reload') . \"</span>';\n                  return this._div;\n               };\n               fail_info.addTo(map_elt);\n               $('#reload_data').on('click', function() {\n                  $('.fail_info').remove();\n                  _loadMap(map_elt);\n               });\n            }).always(function() {\n               //hide spinner\n               map_elt.spin(false);\n            });\n         }\n\n         \";\n            echo Html::scriptBlock($js);\n            echo \"</div>\"; // .card-body\n            echo \"</div>\"; // .card\n        }\n    }\n\n\n    /**\n     * Get data based on search parameters\n     *\n     * @since 0.85\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type to manage\n     * @param array  $params        Search params passed to prepareDatasForSearch function\n     * @param array  $forcedisplay  Array of columns to display (default empty = empty use display pref and search criteria)\n     *\n     * @return array The data\n     **/\n    public static function getDatas($itemtype, $params, array $forcedisplay = [])\n    {\n\n        $data = self::prepareDatasForSearch($itemtype, $params, $forcedisplay);\n        self::constructSQL($data);\n        self::constructData($data);\n\n        return $data;\n    }\n\n\n    /**\n     * Prepare search criteria to be used for a search\n     *\n     * @since 0.85\n     *\n     * @param class-string<CommonDBTM> $itemtype Item type\n     * @param array  $params        Array of parameters\n     *                               may include sort, order, start, list_limit, deleted, criteria, metacriteria\n     * @param array  $forcedisplay  Array of columns to display (default empty = empty use display pref and search criterias)\n     *\n     * @return array prepare to be used for a search (include criteria and others needed information)\n     **/\n    public static function prepareDatasForSearch($itemtype, array $params, array $forcedisplay = [])\n    {\n        global $CFG_GLPI;\n\n       // Default values of parameters\n        $p['criteria']            = [];\n        $p['metacriteria']        = [];\n        $p['sort']                = ['1'];\n        $p['order']               = ['ASC'];\n        $p['start']               = 0;//\n        $p['is_deleted']          = 0;\n        $p['export_all']          = 0;\n        if (class_exists($itemtype)) {\n            $p['target']       = $itemtype::getSearchURL();\n        } else {\n            $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);\n        }\n        $p['display_type']        = self::HTML_OUTPUT;\n        $p['showmassiveactions']  = true;\n        $p['dont_flush']          = false;\n        $p['show_pager']          = true;\n        $p['show_footer']         = true;\n        $p['no_sort']             = false;\n        $p['list_limit']          = $_SESSION['glpilist_limit'];\n        $p['massiveactionparams'] = [];\n\n        foreach ($params as $key => $val) {\n            switch ($key) {\n                case 'order':\n                    if (!is_array($val)) {\n                     // Backward compatibility with GLPI < 10.0 links\n                        if (in_array($val, ['ASC', 'DESC'])) {\n                              $p[$key] = [$val];\n                        }\n                        break;\n                    }\n                    $p[$key] = $val;\n                    break;\n                case 'sort':\n                    if (!is_array($val)) {\n                        // Backward compatibility with GLPI < 10.0 links\n                        $val = (int) $val;\n                        if ($val >= 0) {\n                            $p[$key] = [$val];\n                        }\n                        break;\n                    }\n                    $p[$key] = $val;\n                    break;\n                case 'is_deleted':\n                    if ($val == 1) {\n                        $p[$key] = '1';\n                    }\n                    break;\n                default:\n                    $p[$key] = $val;\n                    break;\n            }\n        }\n\n       // Set display type for export if define\n        if (isset($p['display_type'])) {\n           // Limit to 10 element\n            if ($p['display_type'] == self::GLOBAL_SEARCH) {\n                $p['list_limit'] = self::GLOBAL_DISPLAY_COUNT;\n            }\n        }\n\n        if ($p['export_all']) {\n            $p['start'] = 0;\n        }\n\n        $data             = [];\n        $data['search']   = $p;\n        $data['itemtype'] = $itemtype;\n\n       // Instanciate an object to access method\n        $data['item'] = null;\n\n        if ($itemtype != AllAssets::getType()) {\n            $data['item'] = getItemForItemtype($itemtype);\n        }\n\n        $data['display_type'] = $data['search']['display_type'];\n\n        if (!$CFG_GLPI['allow_search_all']) {\n            foreach ($p['criteria'] as $val) {\n                if (isset($val['field']) && $val['field'] == 'all') {\n                    Html::displayRightError();\n                }\n            }\n        }\n        if (!$CFG_GLPI['allow_search_view']) {\n            foreach ($p['criteria'] as $val) {\n                if (isset($val['field']) && $val['field'] == 'view') {\n                    Html::displayRightError();\n                }\n            }\n        }\n\n       /// Get the items to display\n       // Add searched items\n\n        $forcetoview = false;\n        if (is_array($forcedisplay) && count($forcedisplay)) {\n            $forcetoview = true;\n        }\n        $data['search']['all_search']  = false;\n        $data['search']['view_search'] = false;\n       // If no research limit research to display item and compute number of item using simple request\n        $data['search']['no_search']   = true;\n\n        $data['toview'] = self::addDefaultToView($itemtype, $params);\n        $data['meta_toview'] = [];\n        if (!$forcetoview) {\n           // Add items to display depending of personal prefs\n            $displaypref = DisplayPreference::getForTypeUser($itemtype, Session::getLoginUserID());\n            if (count($displaypref)) {\n                foreach ($displaypref as $val) {\n                    array_push($data['toview'], $val);\n                }\n            }\n        } else {\n            $data['toview'] = array_merge($data['toview'], $forcedisplay);\n        }\n\n        if (count($p['criteria']) > 0) {\n           // use a recursive closure to push searchoption when using nested criteria\n            $parse_criteria = function ($criteria) use (&$parse_criteria, &$data) {\n                foreach ($criteria as $criterion) {\n                     // recursive call\n                    if (isset($criterion['criteria'])) {\n                        $parse_criteria($criterion['criteria']);\n                    } else {\n                   // normal behavior\n                        if (\n                            isset($criterion['field'])\n                            && !in_array($criterion['field'], $data['toview'])\n                        ) {\n                            if (\n                                $criterion['field'] != 'all'\n                                && $criterion['field'] != 'view'\n                                && (!isset($criterion['meta'])\n                                || !$criterion['meta'])\n                            ) {\n                                array_push($data['toview'], $criterion['field']);\n                            } else if ($criterion['field'] == 'all') {\n                                $data['search']['all_search'] = true;\n                            } else if ($criterion['field'] == 'view') {\n                                $data['search']['view_search'] = true;\n                            }\n                        }\n\n                        if (\n                            isset($criterion['value'])\n                            && (strlen($criterion['value']) > 0)\n                        ) {\n                            $data['search']['no_search'] = false;\n                        }\n                    }\n                }\n            };\n\n           // call the closure\n            $parse_criteria($p['criteria']);\n        }\n\n        if (count($p['metacriteria'])) {\n            $data['search']['no_search'] = false;\n        }\n\n       // Add order item\n        $to_add_view = array_diff($p['sort'], $data['toview']);\n        array_push($data['toview'], ...$to_add_view);\n\n       // Special case for CommonITILObjects : put ID in front\n        if (is_a($itemtype, CommonITILObject::class, true)) {\n            array_unshift($data['toview'], 2);\n        }\n\n        $limitsearchopt   = self::getCleanedOptions($itemtype);\n       // Clean and reorder toview\n        $tmpview = [];\n        foreach ($data['toview'] as $val) {\n            if (isset($limitsearchopt[$val]) && !in_array($val, $tmpview)) {\n                $tmpview[] = $val;\n            }\n        }\n        $data['toview']    = $tmpview;\n        $data['tocompute'] = $data['toview'];\n\n       // Force item to display\n        if ($forcetoview) {\n            foreach ($data['toview'] as $val) {\n                if (!in_array($val, $data['tocompute'])) {\n                    array_push($data['tocompute'], $val);\n                }\n            }\n        }\n\n        return $data;\n    }\n\n\n    /**\n     * Construct SQL request depending of search parameters\n     *\n     * Add to data array a field sql containing an array of requests :\n     *      search : request to get items limited to wanted ones\n     *      count : to count all items based on search criterias\n     *                    may be an array a request : need to add counts\n     *                    maybe empty : use search one to count\n     *\n     * @since 0.85\n     *\n     * @param array $data  Array of search datas prepared to generate SQL\n     *\n     * @return void|false May return false if the search request data is invalid\n     **/\n    public static function constructSQL(array &$data)\n    {\n        global $DB, $CFG_GLPI;\n\n        if (!isset($data['itemtype'])) {\n            return false;\n        }\n\n        $data['sql']['count']  = [];\n        $data['sql']['search'] = '';\n\n        $searchopt        = &self::getOptions($data['itemtype']);\n\n        $blacklist_tables = [];\n        $orig_table = self::getOrigTableName($data['itemtype']);\n        if (isset($CFG_GLPI['union_search_type'][$data['itemtype']])) {\n            $itemtable          = $CFG_GLPI['union_search_type'][$data['itemtype']];\n            $blacklist_tables[] = $orig_table;\n        } else {\n            $itemtable = $orig_table;\n        }\n\n       // hack for AllAssets and ReservationItem\n        if (isset($CFG_GLPI['union_search_type'][$data['itemtype']])) {\n            $entity_restrict = true;\n        } else {\n            $entity_restrict = $data['item']->isEntityAssign() && $data['item']->isField('entities_id');\n        }\n\n       // Construct the request\n\n       //// 1 - SELECT\n       // request currentuser for SQL supervision, not displayed\n        $SELECT = \"SELECT DISTINCT `$itemtable`.`id` AS id, '\" . Toolbox::addslashes_deep($_SESSION['glpiname']) . \"' AS currentuser,\n                        \" . self::addDefaultSelect($data['itemtype']);\n\n       // Add select for all toview item\n        foreach ($data['toview'] as $val) {\n            $SELECT .= self::addSelect($data['itemtype'], $val);\n        }\n\n        if (isset($data['search']['as_map']) && $data['search']['as_map'] == 1 && $data['itemtype'] != 'Entity') {\n            $SELECT .= ' `glpi_locations`.`id` AS loc_id, ';\n        }\n\n       //// 2 - FROM AND LEFT JOIN\n       // Set reference table\n        $FROM = \" FROM `$itemtable`\";\n\n       // Init already linked tables array in order not to link a table several times\n        $already_link_tables = [];\n       // Put reference table\n        array_push($already_link_tables, $itemtable);\n\n       // Add default join\n        $COMMONLEFTJOIN = self::addDefaultJoin($data['itemtype'], $itemtable, $already_link_tables);\n        $FROM          .= $COMMONLEFTJOIN;\n\n       // Add all table for toview items\n        foreach ($data['tocompute'] as $val) {\n            if (!in_array($searchopt[$val][\"table\"], $blacklist_tables)) {\n                $FROM .= self::addLeftJoin(\n                    $data['itemtype'],\n                    $itemtable,\n                    $already_link_tables,\n                    $searchopt[$val][\"table\"],\n                    $searchopt[$val][\"linkfield\"],\n                    0,\n                    0,\n                    $searchopt[$val][\"joinparams\"],\n                    $searchopt[$val][\"field\"]\n                );\n            }\n        }\n\n       // Search all case :\n        if ($data['search']['all_search']) {\n            foreach ($searchopt as $key => $val) {\n               // Do not search on Group Name\n                if (is_array($val) && isset($val['table'])) {\n                    if (!in_array($searchopt[$key][\"table\"], $blacklist_tables)) {\n                        $FROM .= self::addLeftJoin(\n                            $data['itemtype'],\n                            $itemtable,\n                            $already_link_tables,\n                            $searchopt[$key][\"table\"],\n                            $searchopt[$key][\"linkfield\"],\n                            0,\n                            0,\n                            $searchopt[$key][\"joinparams\"],\n                            $searchopt[$key][\"field\"]\n                        );\n                    }\n                }\n            }\n        }\n\n       //// 3 - WHERE\n\n       // default string\n        $COMMONWHERE = self::addDefaultWhere($data['itemtype']);\n        $first       = empty($COMMONWHERE);\n\n       // Add deleted if item have it\n        if ($data['item'] && $data['item']->maybeDeleted()) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n            $COMMONWHERE .= $LINK . \"`$itemtable`.`is_deleted` = \" . (int)$data['search']['is_deleted'] . \" \";\n        }\n\n       // Remove template items\n        if ($data['item'] && $data['item']->maybeTemplate()) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n            $COMMONWHERE .= $LINK . \"`$itemtable`.`is_template` = 0 \";\n        }\n\n       // Add Restrict to current entities\n        if ($entity_restrict) {\n            $LINK = \" AND \";\n            if ($first) {\n                $LINK  = \" \";\n                $first = false;\n            }\n\n            if ($data['itemtype'] == 'Entity') {\n                $COMMONWHERE .= getEntitiesRestrictRequest($LINK, $itemtable);\n            } else if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n               // Will be replace below in Union/Recursivity Hack\n                $COMMONWHERE .= $LINK . \" ENTITYRESTRICT \";\n            } else {\n                $COMMONWHERE .= getEntitiesRestrictRequest(\n                    $LINK,\n                    $itemtable,\n                    '',\n                    '',\n                    $data['item']->maybeRecursive() && $data['item']->isField('is_recursive')\n                );\n            }\n        }\n        $WHERE  = \"\";\n        $HAVING = \"\";\n\n       // Add search conditions\n       // If there is search items\n        if (count($data['search']['criteria'])) {\n            $WHERE  = self::constructCriteriaSQL($data['search']['criteria'], $data, $searchopt);\n            $HAVING = self::constructCriteriaSQL($data['search']['criteria'], $data, $searchopt, true);\n\n           // if criteria (with meta flag) need additional join/from sql\n            self::constructAdditionalSqlForMetacriteria($data['search']['criteria'], $SELECT, $FROM, $already_link_tables, $data);\n        }\n\n       //// 4 - ORDER\n        $ORDER = \" ORDER BY `id` \";\n        $sort_fields = [];\n        $sort_count = count($data['search']['sort']);\n        for ($i = 0; $i < $sort_count; $i++) {\n            foreach ($data['tocompute'] as $val) {\n                if ($data['search']['sort'][$i] == $val) {\n                    $sort_fields[] = [\n                        'searchopt_id' => $data['search']['sort'][$i],\n                        'order'        => $data['search']['order'][$i] ?? null\n                    ];\n                }\n            }\n        }\n        if (count($sort_fields)) {\n            $ORDER = self::addOrderBy($data['itemtype'], $sort_fields);\n        }\n\n        $SELECT = rtrim(trim($SELECT), ',');\n\n       //// 7 - Manage GROUP BY\n        $GROUPBY = \"\";\n       // Meta Search / Search All / Count tickets\n        $criteria_with_meta = array_filter($data['search']['criteria'], function ($criterion) {\n            return isset($criterion['meta'])\n                && $criterion['meta'];\n        });\n        if (\n            (count($data['search']['metacriteria']))\n            || count($criteria_with_meta)\n            || !empty($HAVING)\n            || $data['search']['all_search']\n        ) {\n            $GROUPBY = \" GROUP BY `$itemtable`.`id`\";\n        }\n\n        if (empty($GROUPBY)) {\n            foreach ($data['toview'] as $val2) {\n                if (!empty($GROUPBY)) {\n                    break;\n                }\n                if (isset($searchopt[$val2][\"forcegroupby\"])) {\n                    $GROUPBY = \" GROUP BY `$itemtable`.`id`\";\n                }\n            }\n        }\n\n        $LIMIT   = \"\";\n        $numrows = 0;\n       //No search : count number of items using a simple count(ID) request and LIMIT search\n        if ($data['search']['no_search']) {\n            $LIMIT = \" LIMIT \" . (int)$data['search']['start'] . \", \" . (int)$data['search']['list_limit'];\n\n            $count = \"count(DISTINCT `$itemtable`.`id`)\";\n           // request currentuser for SQL supervision, not displayed\n            $query_num = \"SELECT $count,\n                              '\" . Toolbox::addslashes_deep($_SESSION['glpiname']) . \"' AS currentuser\n                       FROM `$itemtable`\" .\n                       $COMMONLEFTJOIN;\n\n            $first     = true;\n\n            if (!empty($COMMONWHERE)) {\n                $LINK = \" AND \";\n                if ($first) {\n                    $LINK  = \" WHERE \";\n                    $first = false;\n                }\n                $query_num .= $LINK . $COMMONWHERE;\n            }\n           // Union Search :\n            if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n                $tmpquery = $query_num;\n\n                foreach ($CFG_GLPI[$CFG_GLPI[\"union_search_type\"][$data['itemtype']]] as $ctype) {\n                    $ctable = $ctype::getTable();\n                    if (\n                        ($citem = getItemForItemtype($ctype))\n                        && $citem->canView()\n                    ) {\n                        // State case\n                        if ($data['itemtype'] == AllAssets::getType()) {\n                            $query_num  = str_replace(\n                                $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                                $ctable,\n                                $tmpquery\n                            );\n                            $query_num  = str_replace($data['itemtype'], $ctype, $query_num);\n                            $query_num .= \" AND `$ctable`.`id` IS NOT NULL \";\n\n                         // Add deleted if item have it\n                            if ($citem && $citem->maybeDeleted()) {\n                                  $query_num .= \" AND `$ctable`.`is_deleted` = 0 \";\n                            }\n\n                         // Remove template items\n                            if ($citem && $citem->maybeTemplate()) {\n                                $query_num .= \" AND `$ctable`.`is_template` = 0 \";\n                            }\n                        } else {// Ref table case\n                            $reftable = $data['itemtype']::getTable();\n                            if ($data['item'] && $data['item']->maybeDeleted()) {\n                                $tmpquery = str_replace(\n                                    \"`\" . $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`.\n                                                   `is_deleted`\",\n                                    \"`$reftable`.`is_deleted`\",\n                                    $tmpquery\n                                );\n                            }\n                            $replace  = \"FROM `$reftable`\n                                  INNER JOIN `$ctable`\n                                       ON (`$reftable`.`items_id` =`$ctable`.`id`\n                                           AND `$reftable`.`itemtype` = '$ctype')\";\n\n                            $query_num = str_replace(\n                                \"FROM `\" .\n                                        $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`\",\n                                $replace,\n                                $tmpquery\n                            );\n                            $query_num = str_replace(\n                                $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                                $ctable,\n                                $query_num\n                            );\n                        }\n                        $query_num = str_replace(\n                            \"ENTITYRESTRICT\",\n                            getEntitiesRestrictRequest(\n                                '',\n                                $ctable,\n                                '',\n                                '',\n                                $citem->maybeRecursive()\n                            ),\n                            $query_num\n                        );\n                         $data['sql']['count'][] = $query_num;\n                    }\n                }\n            } else {\n                $data['sql']['count'][] = $query_num;\n            }\n        }\n\n       // If export_all reset LIMIT condition\n        if ($data['search']['export_all']) {\n            $LIMIT = \"\";\n        }\n\n        if (!empty($WHERE) || !empty($COMMONWHERE)) {\n            if (!empty($COMMONWHERE)) {\n                $WHERE = ' WHERE ' . $COMMONWHERE . (!empty($WHERE) ? ' AND ( ' . $WHERE . ' )' : '');\n            } else {\n                $WHERE = ' WHERE ' . $WHERE . ' ';\n            }\n            $first = false;\n        }\n\n        if (!empty($HAVING)) {\n            $HAVING = ' HAVING ' . $HAVING;\n        }\n\n       // Create QUERY\n        if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n            $first = true;\n            $QUERY = \"\";\n            foreach ($CFG_GLPI[$CFG_GLPI[\"union_search_type\"][$data['itemtype']]] as $ctype) {\n                $ctable = $ctype::getTable();\n                if (\n                    ($citem = getItemForItemtype($ctype))\n                    && $citem->canView()\n                ) {\n                    if ($first) {\n                        $first = false;\n                    } else {\n                        $QUERY .= \" UNION \";\n                    }\n                    $tmpquery = \"\";\n                   // AllAssets case\n                    if ($data['itemtype'] == AllAssets::getType()) {\n                         $tmpquery = $SELECT . \", '$ctype' AS TYPE \" .\n                             $FROM .\n                             $WHERE;\n\n                         $tmpquery .= \" AND `$ctable`.`id` IS NOT NULL \";\n\n                         // Add deleted if item have it\n                        if ($citem && $citem->maybeDeleted()) {\n                            $tmpquery .= \" AND `$ctable`.`is_deleted` = 0 \";\n                        }\n\n                       // Remove template items\n                        if ($citem && $citem->maybeTemplate()) {\n                            $tmpquery .= \" AND `$ctable`.`is_template` = 0 \";\n                        }\n\n                        $tmpquery .= $GROUPBY .\n                             $HAVING;\n\n                      // Replace 'asset_types' by itemtype table name\n                        $tmpquery = str_replace(\n                            $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                            $ctable,\n                            $tmpquery\n                        );\n                        // Replace 'AllAssets' by itemtype\n                        // Use quoted value to prevent replacement of AllAssets in column identifiers\n                        $tmpquery = str_replace(\n                            $DB->quoteValue(AllAssets::getType()),\n                            $DB->quoteValue($ctype),\n                            $tmpquery\n                        );\n                    } else {// Ref table case\n                        $reftable = $data['itemtype']::getTable();\n\n                        $tmpquery = $SELECT . \", '$ctype' AS TYPE,\n                                      `$reftable`.`id` AS refID, \" . \"\n                                      `$ctable`.`entities_id` AS ENTITY \" .\n                        $FROM .\n                        $WHERE;\n                        if ($data['item']->maybeDeleted()) {\n                            $tmpquery = str_replace(\n                                \"`\" . $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`.\n                                                `is_deleted`\",\n                                \"`$reftable`.`is_deleted`\",\n                                $tmpquery\n                            );\n                        }\n\n                        $replace = \"FROM `$reftable`\" . \"\n                              INNER JOIN `$ctable`\" . \"\n                                 ON (`$reftable`.`items_id`=`$ctable`.`id`\" . \"\n                                     AND `$reftable`.`itemtype` = '$ctype')\";\n                        $tmpquery = str_replace(\n                            \"FROM `\" .\n                                 $CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \"`\",\n                            $replace,\n                            $tmpquery\n                        );\n                        $tmpquery = str_replace(\n                            $CFG_GLPI[\"union_search_type\"][$data['itemtype']],\n                            $ctable,\n                            $tmpquery\n                        );\n                        $name_field = $ctype::getNameField();\n                        $tmpquery = str_replace(\"`$ctable`.`name`\", \"`$ctable`.`$name_field`\", $tmpquery);\n                    }\n                    $tmpquery = str_replace(\n                        \"ENTITYRESTRICT\",\n                        getEntitiesRestrictRequest(\n                            '',\n                            $ctable,\n                            '',\n                            '',\n                            $citem->maybeRecursive()\n                        ),\n                        $tmpquery\n                    );\n\n                     // SOFTWARE HACK\n                    if ($ctype == 'Software') {\n                        $tmpquery = str_replace(\"`glpi_softwares`.`serial`\", \"''\", $tmpquery);\n                        $tmpquery = str_replace(\"`glpi_softwares`.`otherserial`\", \"''\", $tmpquery);\n                    }\n                     $QUERY .= $tmpquery;\n                }\n            }\n            if (empty($QUERY)) {\n                echo self::showError($data['display_type']);\n                return;\n            }\n            $QUERY .= str_replace($CFG_GLPI[\"union_search_type\"][$data['itemtype']] . \".\", \"\", $ORDER) .\n                   $LIMIT;\n        } else {\n            $QUERY = $SELECT .\n                  $FROM .\n                  $WHERE .\n                  $GROUPBY .\n                  $HAVING .\n                  $ORDER .\n                  $LIMIT;\n        }\n        $data['sql']['search'] = $QUERY;\n    }\n\n    /**\n     * Construct WHERE (or HAVING) part of the sql based on passed criteria\n     *\n     * @since 9.4\n     *\n     * @param  array   $criteria  list of search criterion, we should have these keys:\n     *                               - link (optionnal): AND, OR, NOT AND, NOT OR\n     *                               - field: id of the searchoption\n     *                               - searchtype: how to match value (contains, equals, etc)\n     *                               - value\n     * @param  array   $data      common array used by search engine,\n     *                            contains all the search part (sql, criteria, params, itemtype etc)\n     *                            TODO: should be a property of the class\n     * @param  array   $searchopt Search options for the current itemtype\n     * @param  boolean $is_having Do we construct sql WHERE or HAVING part\n     *\n     * @return string             the sql sub string\n     */\n    public static function constructCriteriaSQL($criteria = [], $data = [], $searchopt = [], $is_having = false)\n    {\n        $sql = \"\";\n\n        foreach ($criteria as $criterion) {\n            if (\n                !isset($criterion['criteria'])\n                && (!isset($criterion['value'])\n                 || strlen($criterion['value']) <= 0)\n            ) {\n                continue;\n            }\n\n            $itemtype = $data['itemtype'];\n            $meta = false;\n            if (\n                isset($criterion['meta'])\n                && $criterion['meta']\n                && isset($criterion['itemtype'])\n            ) {\n                $itemtype = $criterion['itemtype'];\n                $meta = true;\n                $meta_searchopt = &self::getOptions($itemtype);\n            } else {\n               // Not a meta, use the same search option everywhere\n                $meta_searchopt = $searchopt;\n            }\n\n           // common search\n            if (\n                !isset($criterion['field'])\n                || ($criterion['field'] != \"all\"\n                 && $criterion['field'] != \"view\")\n            ) {\n                $LINK    = \" \";\n                $NOT     = 0;\n                $tmplink = \"\";\n\n                if (\n                    isset($criterion['link'])\n                    && in_array($criterion['link'], array_keys(self::getLogicalOperators()))\n                ) {\n                    if (strstr($criterion['link'], \"NOT\")) {\n                        $tmplink = \" \" . str_replace(\" NOT\", \"\", $criterion['link']);\n                        $NOT     = 1;\n                    } else {\n                        $tmplink = \" \" . $criterion['link'];\n                    }\n                } else {\n                    $tmplink = \" AND \";\n                }\n\n               // Manage Link if not first item\n                if (!empty($sql)) {\n                    $LINK = $tmplink;\n                }\n\n                if (isset($criterion['criteria']) && count($criterion['criteria'])) {\n                    $sub_sql = self::constructCriteriaSQL($criterion['criteria'], $data, $meta_searchopt, $is_having);\n                    if (strlen($sub_sql)) {\n                        if ($NOT) {\n                             $sql .= \"$LINK NOT($sub_sql)\";\n                        } else {\n                            $sql .= \"$LINK ($sub_sql)\";\n                        }\n                    }\n                } else if (\n                    isset($meta_searchopt[$criterion['field']][\"usehaving\"])\n                       || ($meta && \"AND NOT\" === $criterion['link'])\n                ) {\n                    if (!$is_having) {\n                       // the having part will be managed in a second pass\n                        continue;\n                    }\n\n                    $new_having = self::addHaving(\n                        $LINK,\n                        $NOT,\n                        $itemtype,\n                        $criterion['field'],\n                        $criterion['searchtype'],\n                        $criterion['value']\n                    );\n                    if ($new_having !== false) {\n                        $sql .= $new_having;\n                    }\n                } else {\n                    if ($is_having) {\n                       // the having part has been already managed in the first pass\n                        continue;\n                    }\n\n                    $new_where = self::addWhere(\n                        $LINK,\n                        $NOT,\n                        $itemtype,\n                        $criterion['field'],\n                        $criterion['searchtype'],\n                        $criterion['value'],\n                        $meta\n                    );\n                    if ($new_where !== false) {\n                        $sql .= $new_where;\n                    }\n                }\n            } else if (\n                isset($criterion['value'])\n                    && strlen($criterion['value']) > 0\n            ) { // view and all search\n                $LINK       = \" OR \";\n                $NOT        = 0;\n                $globallink = \" AND \";\n                if (isset($criterion['link'])) {\n                    switch ($criterion['link']) {\n                        case \"AND\":\n                            $LINK       = \" OR \";\n                            $globallink = \" AND \";\n                            break;\n                        case \"AND NOT\":\n                            $LINK       = \" AND \";\n                            $NOT        = 1;\n                            $globallink = \" AND \";\n                            break;\n                        case \"OR\":\n                            $LINK       = \" OR \";\n                            $globallink = \" OR \";\n                            break;\n                        case \"OR NOT\":\n                            $LINK       = \" AND \";\n                            $NOT        = 1;\n                            $globallink = \" OR \";\n                            break;\n                    }\n                } else {\n                    $tmplink = \" AND \";\n                }\n                // Manage Link if not first item\n                if (!empty($sql) && !$is_having) {\n                    $sql .= $globallink;\n                }\n                $first2 = true;\n                $items = [];\n                if (isset($criterion['field']) && $criterion['field'] == \"all\") {\n                    $items = $searchopt;\n                } else { // toview case : populate toview\n                    foreach ($data['toview'] as $key2 => $val2) {\n                        $items[$val2] = $searchopt[$val2];\n                    }\n                }\n                $view_sql = \"\";\n                foreach ($items as $key2 => $val2) {\n                    if (isset($val2['nosearch']) && $val2['nosearch']) {\n                        continue;\n                    }\n                    if (is_array($val2)) {\n                       // Add Where clause if not to be done in HAVING CLAUSE\n                        if (!$is_having && !isset($val2[\"usehaving\"])) {\n                            $tmplink = $LINK;\n                            if ($first2) {\n                                $tmplink = \" \";\n                            }\n\n                            $new_where = self::addWhere(\n                                $tmplink,\n                                $NOT,\n                                $itemtype,\n                                $key2,\n                                $criterion['searchtype'],\n                                $criterion['value'],\n                                $meta\n                            );\n                            if ($new_where !== false) {\n                                 $first2  = false;\n                                 $view_sql .=  $new_where;\n                            }\n                        }\n                    }\n                }\n                if (strlen($view_sql)) {\n                    $sql .= \" ($view_sql) \";\n                }\n            }\n        }\n        return $sql;\n    }\n\n    /**\n     * Construct aditionnal SQL (select, joins, etc) for meta-criteria\n     *\n     * @since 9.4\n     *\n     * @param  array  $criteria             list of search criterion\n     * @param  string &$SELECT              TODO: should be a class property (output parameter)\n     * @param  string &$FROM                TODO: should be a class property (output parameter)\n     * @param  array  &$already_link_tables TODO: should be a class property (output parameter)\n     * @param  array  &$data                TODO: should be a class property (output parameter)\n     *\n     * @return void\n     */\n    public static function constructAdditionalSqlForMetacriteria(\n        $criteria = [],\n        &$SELECT = \"\",\n        &$FROM = \"\",\n        &$already_link_tables = [],\n        &$data = []\n    ) {\n        $data['meta_toview'] = [];\n        foreach ($criteria as $criterion) {\n           // manage sub criteria\n            if (isset($criterion['criteria'])) {\n                self::constructAdditionalSqlForMetacriteria(\n                    $criterion['criteria'],\n                    $SELECT,\n                    $FROM,\n                    $already_link_tables,\n                    $data\n                );\n                continue;\n            }\n\n           // parse only criterion with meta flag\n            if (\n                !isset($criterion['itemtype'])\n                || empty($criterion['itemtype'])\n                || !isset($criterion['meta'])\n                || !$criterion['meta']\n                || !isset($criterion['value'])\n                || strlen($criterion['value']) <= 0\n            ) {\n                continue;\n            }\n\n            $m_itemtype = $criterion['itemtype'];\n            $metaopt = &self::getOptions($m_itemtype);\n            $sopt    = $metaopt[$criterion['field']];\n\n           //add toview for meta criterion\n            $data['meta_toview'][$m_itemtype][] = $criterion['field'];\n\n            $SELECT .= self::addSelect(\n                $m_itemtype,\n                $criterion['field'],\n                true, // meta-criterion\n                $m_itemtype\n            );\n\n            $FROM .= self::addMetaLeftJoin(\n                $data['itemtype'],\n                $m_itemtype,\n                $already_link_tables,\n                $sopt[\"joinparams\"]\n            );\n\n            $FROM .= self::addLeftJoin(\n                $m_itemtype,\n                $m_itemtype::getTable(),\n                $already_link_tables,\n                $sopt[\"table\"],\n                $sopt[\"linkfield\"],\n                1,\n                $m_itemtype,\n                $sopt[\"joinparams\"],\n                $sopt[\"field\"]\n            );\n        }\n    }\n\n\n    /**\n     * Retrieve datas from DB : construct data array containing columns definitions and rows datas\n     *\n     * add to data array a field data containing :\n     *      cols : columns definition\n     *      rows : rows data\n     *\n     * @since 0.85\n     *\n     * @param array   $data      array of search data prepared to get data\n     * @param boolean $onlycount If we just want to count results\n     *\n     * @return void|false May return false if the SQL data in $data is not valid\n     **/\n    public static function constructData(array &$data, $onlycount = false)\n    {\n        if (!isset($data['sql']) || !isset($data['sql']['search'])) {\n            return false;\n        }\n        $data['data'] = [];\n\n        // Use a ReadOnly connection if available and configured to be used\n        $DBread = DBConnection::getReadConnection();\n        $DBread->query(\"SET SESSION group_concat_max_len = 8194304;\");\n\n        $DBread->execution_time = true;\n        $result = $DBread->query($data['sql']['search']);\n\n        if ($result) {\n            $data['data']['execution_time'] = $DBread->execution_time;\n            if (isset($data['search']['savedsearches_id'])) {\n                SavedSearch::updateExecutionTime(\n                    (int)$data['search']['savedsearches_id'],\n                    $DBread->execution_time\n                );\n            }\n\n            $data['data']['totalcount'] = 0;\n           // if real search or complete export : get numrows from request\n            if (\n                !$data['search']['no_search']\n                || $data['search']['export_all']\n            ) {\n                $data['data']['totalcount'] = $DBread->numrows($result);\n            } else {\n                if (\n                    !isset($data['sql']['count'])\n                    || (count($data['sql']['count']) == 0)\n                ) {\n                    $data['data']['totalcount'] = $DBread->numrows($result);\n                } else {\n                    foreach ($data['sql']['count'] as $sqlcount) {\n                        $result_num = $DBread->query($sqlcount);\n                        $data['data']['totalcount'] += $DBread->result($result_num, 0, 0);\n                    }\n                }\n            }\n\n            if ($onlycount) {\n               //we just want to coutn results; no need to continue process\n                return;\n            }\n\n            if ($data['search']['start'] > $data['data']['totalcount']) {\n                $data['search']['start'] = 0;\n            }\n\n           // Search case\n            $data['data']['begin'] = $data['search']['start'];\n            $data['data']['end']   = min(\n                $data['data']['totalcount'],\n                $data['search']['start'] + $data['search']['list_limit']\n            ) - 1;\n           //map case\n            if (isset($data['search']['as_map'])  && $data['search']['as_map'] == 1) {\n                $data['data']['end'] = $data['data']['totalcount'] - 1;\n            }\n\n           // No search Case\n            if ($data['search']['no_search']) {\n                $data['data']['begin'] = 0;\n                $data['data']['end']   = min(\n                    $data['data']['totalcount'] - $data['search']['start'],\n                    $data['search']['list_limit']\n                ) - 1;\n            }\n           // Export All case\n            if ($data['search']['export_all']) {\n                $data['data']['begin'] = 0;\n                $data['data']['end']   = $data['data']['totalcount'] - 1;\n            }\n\n           // Get columns\n            $data['data']['cols'] = [];\n\n            $searchopt = &self::getOptions($data['itemtype']);\n\n            foreach ($data['toview'] as $opt_id) {\n                $data['data']['cols'][] = [\n                    'itemtype'  => $data['itemtype'],\n                    'id'        => $opt_id,\n                    'name'      => $searchopt[$opt_id][\"name\"],\n                    'meta'      => 0,\n                    'searchopt' => $searchopt[$opt_id],\n                ];\n            }\n\n           // manage toview column for criteria with meta flag\n            foreach ($data['meta_toview'] as $m_itemtype => $toview) {\n                $searchopt = &self::getOptions($m_itemtype);\n                foreach ($toview as $opt_id) {\n                    $data['data']['cols'][] = [\n                        'itemtype'  => $m_itemtype,\n                        'id'        => $opt_id,\n                        'name'      => $searchopt[$opt_id][\"name\"],\n                        'meta'      => 1,\n                        'searchopt' => $searchopt[$opt_id],\n                    ];\n                }\n            }\n\n           // Display columns Headers for meta items\n            $already_printed = [];\n\n            if (count($data['search']['metacriteria'])) {\n                foreach ($data['search']['metacriteria'] as $metacriteria) {\n                    if (\n                        isset($metacriteria['itemtype']) && !empty($metacriteria['itemtype'])\n                        && isset($metacriteria['value']) && (strlen($metacriteria['value']) > 0)\n                    ) {\n                        if (!isset($already_printed[$metacriteria['itemtype'] . $metacriteria['field']])) {\n                            $searchopt = &self::getOptions($metacriteria['itemtype']);\n\n                            $data['data']['cols'][] = [\n                                'itemtype'  => $metacriteria['itemtype'],\n                                'id'        => $metacriteria['field'],\n                                'name'      => $searchopt[$metacriteria['field']][\"name\"],\n                                'meta'      => 1,\n                                'searchopt' => $searchopt[$metacriteria['field']]\n                            ];\n\n                            $already_printed[$metacriteria['itemtype'] . $metacriteria['field']] = 1;\n                        }\n                    }\n                }\n            }\n\n           // search group (corresponding of dropdown optgroup) of current col\n            foreach ($data['data']['cols'] as $num => $col) {\n               // search current col in searchoptions ()\n                while (\n                    key($searchopt) !== null\n                    && key($searchopt) != $col['id']\n                ) {\n                    next($searchopt);\n                }\n                if (key($searchopt) !== null) {\n                   //search optgroup (non array option)\n                    while (\n                        key($searchopt) !== null\n                        && is_numeric(key($searchopt))\n                        && is_array(current($searchopt))\n                    ) {\n                        prev($searchopt);\n                    }\n                    if (\n                        key($searchopt) !== null\n                        && key($searchopt) !== \"common\"\n                    ) {\n                        $data['data']['cols'][$num]['groupname'] = current($searchopt);\n                    }\n                }\n               //reset\n                reset($searchopt);\n            }\n\n           // Get rows\n\n           // if real search seek to begin of items to display (because of complete search)\n            if (!$data['search']['no_search']) {\n                $DBread->dataSeek($result, $data['search']['start']);\n            }\n\n            $i = $data['data']['begin'];\n            $data['data']['warning']\n            = \"For compatibility keep raw data  (ITEM_X, META_X) at the top for the moment. Will be drop in next version\";\n\n            $data['data']['rows']  = [];\n            $data['data']['items'] = [];\n\n            self::$output_type = $data['display_type'];\n\n            while (($i < $data['data']['totalcount']) && ($i <= $data['data']['end'])) {\n                $row = $DBread->fetchAssoc($result);\n                $newrow        = [];\n                $newrow['raw'] = $row;\n\n               // Parse datas\n                foreach ($newrow['raw'] as $key => $val) {\n                    if (preg_match('/ITEM(_(\\w[^\\d]+))?_(\\d+)(_(.+))?/', $key, $matches)) {\n                        $j = $matches[3];\n                        if (isset($matches[2]) && !empty($matches[2])) {\n                            $j = $matches[2] . '_' . $matches[3];\n                        }\n                        $fieldname = 'name';\n                        if (isset($matches[5])) {\n                            $fieldname = $matches[5];\n                        }\n\n                        // No Group_concat case\n                        if ($fieldname == 'content' || !is_string($val) || strpos($val, self::LONGSEP) === false) {\n                            $newrow[$j]['count'] = 1;\n\n                            $handled = false;\n                            if ($fieldname != 'content' && is_string($val) && strpos($val, self::SHORTSEP) !== false) {\n                                $split2                    = self::explodeWithID(self::SHORTSEP, $val);\n                                if (is_numeric($split2[1])) {\n                                    $newrow[$j][0][$fieldname] = $split2[0];\n                                    $newrow[$j][0]['id']       = $split2[1];\n                                    $handled = true;\n                                }\n                            }\n\n                            if (!$handled) {\n                                if ($val === self::NULLVALUE) {\n                                    $newrow[$j][0][$fieldname] = null;\n                                } else {\n                                    $newrow[$j][0][$fieldname] = $val;\n                                }\n                            }\n                        } else {\n                            if (!isset($newrow[$j])) {\n                                $newrow[$j] = [];\n                            }\n                            $split               = explode(self::LONGSEP, $val);\n                            $newrow[$j]['count'] = count($split);\n                            foreach ($split as $key2 => $val2) {\n                                $handled = false;\n                                if (strpos($val2, self::SHORTSEP) !== false) {\n                                    $split2                  = self::explodeWithID(self::SHORTSEP, $val2);\n                                    if (is_numeric($split2[1])) {\n                                        $newrow[$j][$key2]['id'] = $split2[1];\n                                        if ($split2[0] == self::NULLVALUE) {\n                                            $newrow[$j][$key2][$fieldname] = null;\n                                        } else {\n                                             $newrow[$j][$key2][$fieldname] = $split2[0];\n                                        }\n                                        $handled = true;\n                                    }\n                                }\n\n                                if (!$handled) {\n                                    $newrow[$j][$key2][$fieldname] = $val2;\n                                }\n                            }\n                        }\n                    } else {\n                        if ($key == 'currentuser') {\n                            if (!isset($data['data']['currentuser'])) {\n                                $data['data']['currentuser'] = $val;\n                            }\n                        } else {\n                            $newrow[$key] = $val;\n                           // Add id to items list\n                            if ($key == 'id') {\n                                $data['data']['items'][$val] = $i;\n                            }\n                        }\n                    }\n                }\n                foreach ($data['data']['cols'] as $val) {\n                    $newrow[$val['itemtype'] . '_' . $val['id']]['displayname'] = self::giveItem(\n                        $val['itemtype'],\n                        $val['id'],\n                        $newrow\n                    );\n                }\n\n                $data['data']['rows'][$i] = $newrow;\n                $i++;\n            }\n\n            $data['data']['count'] = count($data['data']['rows']);\n        } else {\n            $error_no = $DBread->errno();\n            if ($error_no == 1116) { // Too many tables; MySQL can only use 61 tables in a join\n                echo self::showError(\n                    $data['search']['display_type'],\n                    __(\"'All' criterion is not usable with this object list, \" .\n                                   \"sql query fails (too many tables). \" .\n                    \"Please use 'Items seen' criterion instead\")\n                );\n            } else {\n                echo $DBread->error();\n            }\n        }\n    }\n\n\n    /**\n     * Display datas extracted from DB\n     *\n     * @param array $data Array of search datas prepared to get datas\n     *\n     * @return void\n     **/\n    public static function displayData(array $data)\n    {\n        global $CFG_GLPI;\n\n        if (!isset($data['data']) || !isset($data['data']['totalcount'])) {\n            return false;\n        }\n\n        $search     = $data['search'];\n        $itemtype   = $data['itemtype'];\n        $item       = $data['item'];\n        $is_deleted = $search['is_deleted'];\n\n        foreach ($search['criteria'] as $key => $criteria) {\n            if (isset($criteria['virtual']) && $criteria['virtual']) {\n                unset($search['criteria'][$key]);\n            }\n        }\n\n       // Contruct parameters\n        $globallinkto  = Toolbox::append_params([\n            'criteria'     => Sanitizer::unsanitize($search['criteria']),\n            'metacriteria' => Sanitizer::unsanitize($search['metacriteria'])\n        ], '&');\n\n        $parameters = http_build_query([\n            'sort'   => $search['sort'],\n            'order'  => $search['order']\n        ]);\n\n        $parameters .= \"&{$globallinkto}\";\n\n        if (isset($_GET['_in_modal'])) {\n            $parameters .= \"&_in_modal=1\";\n        }\n\n       // For plugin add new parameter if available\n        if ($plug = isPluginItemType($data['itemtype'])) {\n            $out = Plugin::doOneHook($plug['plugin'], 'addParamFordynamicReport', $data['itemtype']);\n            if (is_array($out) && count($out)) {\n                $parameters .= Toolbox::append_params($out, '&');\n            }\n        }\n\n        $prehref = $search['target'] . (strpos($search['target'], \"?\") !== false ? \"&\" : \"?\");\n        $href    = $prehref . $parameters;\n\n        Session::initNavigateListItems($data['itemtype'], '', $href);\n\n        TemplateRenderer::getInstance()->display('components/search/display_data.html.twig', [\n            'data'                => $data,\n            'union_search_type'   => $CFG_GLPI[\"union_search_type\"],\n            'rand'                => mt_rand(),\n            'no_sort'             => $search['no_sort'] ?? false,\n            'order'               => $search['order'] ?? [],\n            'sort'                => $search['sort'] ?? [],\n            'start'               => $search['start'] ?? 0,\n            'limit'               => $_SESSION['glpilist_limit'],\n            'count'               => $data['data']['totalcount'] ?? 0,\n            'item'                => $item,\n            'itemtype'            => $itemtype,\n            'href'                => $href,\n            'prehref'             => $prehref,\n            'posthref'            => $globallinkto,\n            'showmassiveactions'  => ($search['showmassiveactions'] ?? true)\n                                  && $data['display_type'] != self::GLOBAL_SEARCH\n                                  && ($itemtype == AllAssets::getType()\n                                    || count(MassiveAction::getAllMassiveActions($item, $is_deleted))\n                                  ),\n            'massiveactionparams' => $data['search']['massiveactionparams'] + [\n                'is_deleted' => $is_deleted,\n                'container'  => \"massform$itemtype\",\n            ],\n            'can_config'          => Session::haveRightsOr('search_config', [\n                DisplayPreference::PERSONAL,\n                DisplayPreference::GENERAL\n            ]),\n            'may_be_deleted'      => $item instanceof CommonDBTM && $item->maybeDeleted(),\n            'may_be_located'      => $item instanceof CommonDBTM && $item->maybeLocated(),\n            'may_be_browsed'      => $item !== null && Toolbox::hasTrait($item, \\Glpi\\Features\\TreeBrowse::class),\n        ]);\n\n        // Add items in item list\n        foreach ($data['data']['rows'] as $row) {\n            if ($itemtype !== AllAssets::class) {\n                Session::addToNavigateListItems($itemtype, $row[\"id\"]);\n            } else {\n                // In case of a global search, reset and empty navigation list to ensure navigation in\n                // item header context is not shown. Indeed, this list does not support navigation through\n                // multiple itemtypes, so it should not be displayed in global search context.\n                Session::initNavigateListItems($row['TYPE'] ?? $data['itemtype']);\n            }\n        }\n\n       // Clean previous selection\n        $_SESSION['glpimassiveactionselected'] = [];\n    }\n\n    /**\n     * Output data (for export in CSV, PDF, ...).\n     *\n     * @param array $data Array of search datas prepared to get datas\n     *\n     * @return void\n     **/\n    public static function outputData(array $data)\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($data['data'])\n            || !isset($data['data']['totalcount'])\n            || $data['data']['count'] <= 0\n            || $data['search']['as_map'] != 0\n        ) {\n            return false;\n        }\n\n       // Define begin and end var for loop\n       // Search case\n        $begin_display = $data['data']['begin'];\n        $end_display   = $data['data']['end'];\n\n       // Compute number of columns to display\n       // Add toview elements\n        $nbcols          = count($data['data']['cols']);\n\n       // Display List Header\n        echo self::showHeader($data['display_type'], $end_display - $begin_display + 1, $nbcols);\n\n       // New Line for Header Items Line\n        $headers_line        = '';\n        $headers_line_top    = '';\n\n        $headers_line_top .= self::showBeginHeader($data['display_type']);\n        $headers_line_top .= self::showNewLine($data['display_type']);\n\n        $header_num = 1;\n\n       // Display column Headers for toview items\n        $metanames = [];\n        foreach ($data['data']['cols'] as $val) {\n            $name = $val[\"name\"];\n\n           // prefix by group name (corresponding to optgroup in dropdown) if exists\n            if (isset($val['groupname'])) {\n                $groupname = $val['groupname'];\n                if (is_array($groupname)) {\n                    //since 9.2, getSearchOptions has been changed\n                    $groupname = $groupname['name'];\n                }\n                $name  = \"$groupname - $name\";\n            }\n\n           // Not main itemtype add itemtype to display\n            if ($data['itemtype'] != $val['itemtype']) {\n                if (!isset($metanames[$val['itemtype']])) {\n                    if ($metaitem = getItemForItemtype($val['itemtype'])) {\n                        $metanames[$val['itemtype']] = $metaitem->getTypeName();\n                    }\n                }\n                $name = sprintf(\n                    __('%1$s - %2$s'),\n                    $metanames[$val['itemtype']],\n                    $val[\"name\"]\n                );\n            }\n\n            $headers_line .= self::showHeaderItem(\n                $data['display_type'],\n                $name,\n                $header_num,\n                '',\n                (!$val['meta']\n                                                && ($data['search']['sort'] == $val['id'])),\n                $data['search']['order']\n            );\n        }\n\n       // Add specific column Header\n        if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n            $headers_line .= self::showHeaderItem(\n                $data['display_type'],\n                __('Item type'),\n                $header_num\n            );\n        }\n       // End Line for column headers\n        $headers_line .= self::showEndLine($data['display_type'], true);\n\n        $headers_line_top    .= $headers_line;\n        $headers_line_top    .= self::showEndHeader($data['display_type']);\n\n        echo $headers_line_top;\n\n       // Num of the row (1=header_line)\n        $row_num = 1;\n\n        $typenames = [];\n       // Display Loop\n        foreach ($data['data']['rows'] as $row) {\n           // Column num\n            $item_num = 1;\n            $row_num++;\n           // New line\n            echo self::showNewLine(\n                $data['display_type'],\n                ($row_num % 2),\n                $data['search']['is_deleted']\n            );\n\n           // Print other toview items\n            foreach ($data['data']['cols'] as $col) {\n                $colkey = \"{$col['itemtype']}_{$col['id']}\";\n                if (!$col['meta']) {\n                    echo self::showItem(\n                        $data['display_type'],\n                        $row[$colkey]['displayname'],\n                        $item_num,\n                        $row_num,\n                        self::displayConfigItem(\n                            $data['itemtype'],\n                            $col['id'],\n                            $row,\n                            $colkey\n                        )\n                    );\n                } else { // META case\n                    echo self::showItem(\n                        $data['display_type'],\n                        $row[$colkey]['displayname'],\n                        $item_num,\n                        $row_num\n                    );\n                }\n            }\n\n            if (isset($CFG_GLPI[\"union_search_type\"][$data['itemtype']])) {\n                if (!isset($typenames[$row[\"TYPE\"]])) {\n                    if ($itemtmp = getItemForItemtype($row[\"TYPE\"])) {\n                        $typenames[$row[\"TYPE\"]] = $itemtmp->getTypeName();\n                    }\n                }\n                echo self::showItem(\n                    $data['display_type'],\n                    $typenames[$row[\"TYPE\"]],\n                    $item_num,\n                    $row_num\n                );\n            }\n           // End Line\n            echo self::showEndLine($data['display_type']);\n        }\n\n       // Create title\n        $title = '';\n        if (\n            ($data['display_type'] == self::PDF_OUTPUT_LANDSCAPE)\n            || ($data['display_type'] == self::PDF_OUTPUT_PORTRAIT)\n        ) {\n            $title = self::computeTitle($data);\n        }\n\n       // Display footer (close table)\n        echo self::showFooter($data['display_type'], $title, $data['data']['count']);\n    }\n\n\n    /**\n     * Compute title (use case of PDF OUTPUT)\n     *\n     * @param array $data Array data of search\n     *\n     * @return string Title\n     **/\n    public static function computeTitle($data)\n    {\n        $title = \"\";\n\n        if (count($data['search']['criteria'])) {\n           //Drop the first link as it is not needed, or convert to clean link (AND NOT -> NOT)\n            if (isset($data['search']['criteria']['0']['link'])) {\n                $notpos = strpos($data['search']['criteria']['0']['link'], 'NOT');\n                //If link was like '%NOT%' just use NOT. Otherwise remove the link\n                if ($notpos > 0) {\n                    $data['search']['criteria']['0']['link'] = 'NOT';\n                } else if (!$notpos) {\n                    unset($data['search']['criteria']['0']['link']);\n                }\n            }\n\n            foreach ($data['search']['criteria'] as $criteria) {\n                if (isset($criteria['itemtype'])) {\n                    $searchopt = &self::getOptions($criteria['itemtype']);\n                } else {\n                    $searchopt = &self::getOptions($data['itemtype']);\n                }\n                $titlecontain = '';\n\n                if (isset($criteria['criteria'])) {\n                   //This is a group criteria, call computeTitle again and concat\n                    $newdata = $data;\n                    $oldlink = $criteria['link'];\n                    $newdata['search'] = $criteria;\n                    $titlecontain = sprintf(\n                        __('%1$s %2$s (%3$s)'),\n                        $titlecontain,\n                        $oldlink,\n                        Search::computeTitle($newdata)\n                    );\n                } else {\n                    if (strlen($criteria['value']) > 0) {\n                        if (isset($criteria['link'])) {\n                             $titlecontain = \" \" . $criteria['link'] . \" \";\n                        }\n                        $gdname    = '';\n                        $valuename = '';\n\n                        switch ($criteria['field']) {\n                            case \"all\":\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, __('All'));\n                                break;\n\n                            case \"view\":\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, __('Items seen'));\n                                break;\n\n                            default:\n                                if (isset($criteria['meta']) && $criteria['meta']) {\n                                    $searchoptname = sprintf(\n                                        __('%1$s / %2$s'),\n                                        $criteria['itemtype'],\n                                        $searchopt[$criteria['field']][\"name\"]\n                                    );\n                                } else {\n                                    $searchoptname = $searchopt[$criteria['field']][\"name\"];\n                                }\n\n                                $titlecontain = sprintf(__('%1$s %2$s'), $titlecontain, $searchoptname);\n                                $itemtype     = getItemTypeForTable($searchopt[$criteria['field']][\"table\"]);\n                                $valuename    = '';\n                                if ($item = getItemForItemtype($itemtype)) {\n                                    $valuename = $item->getValueToDisplay(\n                                        $searchopt[$criteria['field']],\n                                        $criteria['value']\n                                    );\n                                }\n\n                                $gdname = Dropdown::getDropdownName(\n                                    $searchopt[$criteria['field']][\"table\"],\n                                    $criteria['value']\n                                );\n                        }\n\n                        if (empty($valuename)) {\n                            $valuename = $criteria['value'];\n                        }\n                        switch ($criteria['searchtype']) {\n                            case \"equals\":\n                                if (\n                                    in_array(\n                                        $searchopt[$criteria['field']][\"field\"],\n                                        ['name', 'completename']\n                                    )\n                                ) {\n                                    $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $gdname);\n                                } else {\n                                    $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $valuename);\n                                }\n                                break;\n\n                            case \"notequals\":\n                                if (\n                                    in_array(\n                                        $searchopt[$criteria['field']][\"field\"],\n                                        ['name', 'completename']\n                                    )\n                                ) {\n                                    $titlecontain = sprintf(__('%1$s <> %2$s'), $titlecontain, $gdname);\n                                } else {\n                                    $titlecontain = sprintf(__('%1$s <> %2$s'), $titlecontain, $valuename);\n                                }\n                                break;\n\n                            case \"lessthan\":\n                                $titlecontain = sprintf(__('%1$s < %2$s'), $titlecontain, $valuename);\n                                break;\n\n                            case \"morethan\":\n                                $titlecontain = sprintf(__('%1$s > %2$s'), $titlecontain, $valuename);\n                                break;\n\n                            case \"contains\":\n                                $titlecontain = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain,\n                                    '%' . $valuename . '%'\n                                );\n                                break;\n\n                            case \"notcontains\":\n                                $titlecontain = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain,\n                                    '%' . $valuename . '%'\n                                );\n                                break;\n\n                            case \"under\":\n                                $titlecontain = sprintf(\n                                    __('%1$s %2$s'),\n                                    $titlecontain,\n                                    sprintf(__('%1$s %2$s'), __('under'), $gdname)\n                                );\n                                break;\n\n                            case \"notunder\":\n                                $titlecontain = sprintf(\n                                    __('%1$s %2$s'),\n                                    $titlecontain,\n                                    sprintf(__('%1$s %2$s'), __('not under'), $gdname)\n                                );\n                                break;\n\n                            default:\n                                $titlecontain = sprintf(__('%1$s = %2$s'), $titlecontain, $valuename);\n                                break;\n                        }\n                    }\n                }\n                $title .= $titlecontain;\n            }\n        }\n        if (\n            isset($data['search']['metacriteria']) &&\n            count($data['search']['metacriteria'])\n        ) {\n            $metanames = [];\n            foreach ($data['search']['metacriteria'] as $metacriteria) {\n                $searchopt = &self::getOptions($metacriteria['itemtype']);\n                if (!isset($metanames[$metacriteria['itemtype']])) {\n                    if ($metaitem = getItemForItemtype($metacriteria['itemtype'])) {\n                        $metanames[$metacriteria['itemtype']] = $metaitem->getTypeName();\n                    }\n                }\n\n                $titlecontain2 = '';\n                if (strlen($metacriteria['value']) > 0) {\n                    if (isset($metacriteria['link'])) {\n                        $titlecontain2 = sprintf(\n                            __('%1$s %2$s'),\n                            $titlecontain2,\n                            $metacriteria['link']\n                        );\n                    }\n                    $titlecontain2\n                    = sprintf(\n                        __('%1$s %2$s'),\n                        $titlecontain2,\n                        sprintf(\n                            __('%1$s / %2$s'),\n                            $metanames[$metacriteria['itemtype']],\n                            $searchopt[$metacriteria['field']][\"name\"]\n                        )\n                    );\n\n                    $gdname2 = Dropdown::getDropdownName(\n                        $searchopt[$metacriteria['field']][\"table\"],\n                        $metacriteria['value']\n                    );\n                    switch ($metacriteria['searchtype']) {\n                        case \"equals\":\n                            if (\n                                in_array(\n                                    $searchopt[$metacriteria['link']]\n                                          [\"field\"],\n                                    ['name', 'completename']\n                                )\n                            ) {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain2,\n                                    $gdname2\n                                );\n                            } else {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s = %2$s'),\n                                    $titlecontain2,\n                                    $metacriteria['value']\n                                );\n                            }\n                            break;\n\n                        case \"notequals\":\n                            if (\n                                in_array(\n                                    $searchopt[$metacriteria['link']][\"field\"],\n                                    ['name', 'completename']\n                                )\n                            ) {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain2,\n                                    $gdname2\n                                );\n                            } else {\n                                $titlecontain2 = sprintf(\n                                    __('%1$s <> %2$s'),\n                                    $titlecontain2,\n                                    $metacriteria['value']\n                                );\n                            }\n                            break;\n\n                        case \"lessthan\":\n                            $titlecontain2 = sprintf(\n                                __('%1$s < %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n\n                        case \"morethan\":\n                            $titlecontain2 = sprintf(\n                                __('%1$s > %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n\n                        case \"contains\":\n                              $titlecontain2 = sprintf(\n                                  __('%1$s = %2$s'),\n                                  $titlecontain2,\n                                  '%' . $metacriteria['value'] . '%'\n                              );\n                            break;\n\n                        case \"notcontains\":\n                               $titlecontain2 = sprintf(\n                                   __('%1$s <> %2$s'),\n                                   $titlecontain2,\n                                   '%' . $metacriteria['value'] . '%'\n                               );\n                            break;\n\n                        case \"under\":\n                              $titlecontain2 = sprintf(\n                                  __('%1$s %2$s'),\n                                  $titlecontain2,\n                                  sprintf(\n                                      __('%1$s %2$s'),\n                                      __('under'),\n                                      $gdname2\n                                  )\n                              );\n                            break;\n\n                        case \"notunder\":\n                             $titlecontain2 = sprintf(\n                                 __('%1$s %2$s'),\n                                 $titlecontain2,\n                                 sprintf(\n                                     __('%1$s %2$s'),\n                                     __('not under'),\n                                     $gdname2\n                                 )\n                             );\n                            break;\n\n                        default:\n                            $titlecontain2 = sprintf(\n                                __('%1$s = %2$s'),\n                                $titlecontain2,\n                                $metacriteria['value']\n                            );\n                            break;\n                    }\n                }\n                $title .= $titlecontain2;\n            }\n        }\n        return $title;\n    }\n\n    /**\n     * Get meta types available for search engine\n     *\n     * @param class-string<CommonDBTM> $itemtype Type to display the form\n     *\n     * @return array Array of available itemtype\n     **/\n    public static function getMetaItemtypeAvailable($itemtype)\n    {\n        global $CFG_GLPI;\n\n        $itemtype = self::getMetaReferenceItemtype($itemtype);\n\n        if (!(($item = getItemForItemtype($itemtype)) instanceof CommonDBTM)) {\n            return [];\n        }\n\n        $linked = [];\n        foreach ($CFG_GLPI as $key => $values) {\n            if ($key === 'link_types') {\n               // Links are associated to all items of a type, it does not make any sense to use them in meta search\n                continue;\n            }\n            if ($key === 'ticket_types' && $item instanceof CommonITILObject) {\n               // Linked are filtered by CommonITILObject::getAllTypesForHelpdesk()\n                $linked = array_merge($linked, array_keys($item::getAllTypesForHelpdesk()));\n                continue;\n            }\n\n            foreach (self::getMetaParentItemtypesForTypesConfig($key) as $config_itemtype) {\n                if ($itemtype === $config_itemtype::getType()) {\n                   // List is related to source itemtype, all types of list are so linked\n                    $linked = array_merge($linked, $values);\n                } else if (in_array($itemtype, $values)) {\n                   // Source itemtype is inside list, type corresponding to list is so linked\n                    $linked[] = $config_itemtype::getType();\n                }\n            }\n        }\n\n        return array_unique($linked);\n    }\n\n    /**\n     * Returns parents itemtypes having subitems defined in given config key.\n     * This list is filtered and is only valid in a \"meta\" search context.\n     *\n     * @param string $config_key\n     *\n     * @return string[]\n     */\n    private static function getMetaParentItemtypesForTypesConfig(string $config_key): array\n    {\n        $matches = [];\n        if (preg_match('/^(.+)_types$/', $config_key, $matches) === 0) {\n            return [];\n        }\n\n        $key_to_itemtypes = [\n            'directconnect_types'  => ['Computer'],\n            'infocom_types'        => ['Budget', 'Infocom'],\n            'linkgroup_types'      => ['Group'],\n         // 'linkgroup_tech_types' => ['Group'], // Cannot handle ambiguity with 'Group' from 'linkgroup_types'\n            'linkuser_types'       => ['User'],\n         // 'linkuser_tech_types'  => ['User'], // Cannot handle ambiguity with 'User' from 'linkuser_types'\n            'project_asset_types'  => ['Project'],\n            'rackable_types'       => ['Enclosure', 'Rack'],\n            'socket_types'         => [Socket::class],\n            'ticket_types'         => ['Change', 'Problem', 'Ticket'],\n        ];\n\n        if (array_key_exists($config_key, $key_to_itemtypes)) {\n            return $key_to_itemtypes[$config_key];\n        }\n\n        $itemclass = $matches[1];\n        if (is_a($itemclass, CommonDBTM::class, true)) {\n            return [$itemclass::getType()];\n        }\n\n        return [];\n    }\n\n    /**\n     * Check if an itemtype is a possible subitem of another itemtype in a \"meta\" search context.\n     *\n     * @param string $parent_itemtype\n     * @param string $child_itemtype\n     *\n     * @return boolean\n     */\n    private static function isPossibleMetaSubitemOf(string $parent_itemtype, string $child_itemtype)\n    {\n        global $CFG_GLPI;\n\n        if (\n            is_a($parent_itemtype, CommonITILObject::class, true)\n            && in_array($child_itemtype, array_keys($parent_itemtype::getAllTypesForHelpdesk()))\n        ) {\n            return true;\n        }\n\n        foreach ($CFG_GLPI as $key => $values) {\n            if (\n                in_array($parent_itemtype, self::getMetaParentItemtypesForTypesConfig($key))\n                && in_array($child_itemtype, $values)\n            ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Gets the class to use if the specified itemtype extends one of the known reference types.\n     *\n     * @param class-string<CommonDBTM> $itemtype\n     *\n     * @return string|false The reference class name. If the provided itemtype is from a plugin, the provided itemtype is returned.\n     *                      If the itemtype is not from a plugin and not exactly or extended from a reference itemtype, false will be returned.\n     * @since 0.85\n     */\n    public static function getMetaReferenceItemtype($itemtype)\n    {\n\n        if (!isPluginItemType($itemtype)) {\n            return $itemtype;\n        }\n\n       // Use reference type if given itemtype extends a reference type.\n        $types = [\n            'Computer',\n            'Problem',\n            'Change',\n            'Ticket',\n            'Printer',\n            'Monitor',\n            'Peripheral',\n            'Software',\n            'Phone'\n        ];\n        foreach ($types as $type) {\n            if (is_a($itemtype, $type, true)) {\n                return $type;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get dropdown options of logical operators.\n     * @return string[]|array<string, string>\n     * @since 0.85\n     **/\n    public static function getLogicalOperators($only_not = false)\n    {\n        if ($only_not) {\n            return [\n                'AND'     => Dropdown::EMPTY_VALUE,\n                'AND NOT' => __(\"NOT\")\n            ];\n        }\n\n        return [\n            'AND'     => __('AND'),\n            'OR'      => __('OR'),\n            'AND NOT' => __('AND NOT'),\n            'OR NOT'  => __('OR NOT')\n        ];\n    }\n\n\n    /**\n     * Print generic search form\n     *\n     * Params need to parsed before using Search::manageParams function\n     *\n     * @param class-string<CommonDBTM> $itemtype  Type to display the form\n     * @param array  $params    Array of parameters may include sort, is_deleted, criteria, metacriteria\n     *\n     * @return void\n     **/\n    public static function showGenericSearch($itemtype, array $params)\n    {\n        global $CFG_GLPI;\n\n       // Default values of parameters\n        $p['sort']         = '';\n        $p['is_deleted']   = 0;\n        $p['as_map']       = 0;\n        $p['browse']       = 0;\n        $p['criteria']     = [];\n        $p['metacriteria'] = [];\n        if (class_exists($itemtype)) {\n            $p['target']       = $itemtype::getSearchURL();\n        } else {\n            $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);\n        }\n        $p['showreset']    = true;\n        $p['showbookmark'] = true;\n        $p['showfolding']  = true;\n        $p['mainform']     = true;\n        $p['prefix_crit']  = '';\n        $p['addhidden']    = [];\n        $p['actionname']   = 'search';\n        $p['actionvalue']  = _sx('button', 'Search');\n\n        foreach ($params as $key => $val) {\n            $p[$key] = $val;\n        }\n\n       // Itemtype name used in JS function names, etc\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $itemtype));\n        $rand_criteria = mt_rand();\n        $main_block_class = '';\n        $card_class = 'search-form card card-sm mb-4';\n        if ($p['mainform']) {\n            echo \"<form name='searchform$normalized_itemtype' class='search-form-container' method='get' action='\" . $p['target'] . \"'>\";\n        } else {\n            $main_block_class = \"sub_criteria\";\n            $card_class = 'border d-inline-block ms-1';\n        }\n        $display = $_SESSION['glpifold_search'] ? 'style=\"display: none;\"' : '';\n        echo \"<div class='$card_class' $display>\";\n\n        echo \"<div id='searchcriteria$rand_criteria' class='$main_block_class' >\";\n        $nbsearchcountvar      = 'nbcriteria' . $normalized_itemtype . mt_rand();\n        $searchcriteriatableid = 'criteriatable' . $normalized_itemtype . mt_rand();\n       // init criteria count\n        echo Html::scriptBlock(\"\n         var $nbsearchcountvar = \" . count($p['criteria']) . \";\n      \");\n\n        echo \"<div class='list-group list-group-flush list-group-hoverable criteria-list pt-2' id='$searchcriteriatableid'>\";\n\n       // Display normal search parameters\n        $i = 0;\n        foreach (array_keys($p['criteria']) as $i) {\n            self::displayCriteria([\n                'itemtype' => $itemtype,\n                'num'      => $i,\n                'p'        => $p\n            ]);\n        }\n\n        echo \"<a id='more-criteria$rand_criteria' role='button'\n            class='normalcriteria fold-search list-group-item p-2 border-0'\n            style='display: none;'></a>\";\n\n        echo \"</div>\"; // .list\n\n       // Keep track of the current savedsearches on reload\n        if (isset($_GET['savedsearches_id'])) {\n            echo Html::input(\"savedsearches_id\", [\n                'type' => \"hidden\",\n                'value' => $_GET['savedsearches_id'],\n            ]);\n        }\n\n        echo \"<div class='card-footer d-flex search_actions'>\";\n        $linked = self::getMetaItemtypeAvailable($itemtype);\n        echo \"<button id='addsearchcriteria$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n               <i class='ti ti-square-plus'></i>\n               <span class='d-none d-sm-block'>\" . __s('rule') . \"</span>\n            </button>\";\n        if (count($linked)) {\n            echo \"<button id='addmetasearchcriteria$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n                  <i class='ti ti-circle-plus'></i>\n                  <span class='d-none d-sm-block'>\" . __s('global rule') . \"</span>\n               </button>\";\n        }\n        echo \"<button id='addcriteriagroup$rand_criteria' class='btn btn-sm btn-outline-secondary me-1' type='button'>\n               <i class='ti ti-code-plus'></i>\n               <span class='d-none d-sm-block'>\" . __s('group') . \"</span>\n            </button>\";\n        $json_p = json_encode($p);\n\n        if ($p['mainform']) {\n           // Display submit button\n            echo \"<button class='btn btn-sm btn-primary me-1' type='submit' name='\" . $p['actionname'] . \"'>\n               <i class='ti ti-list-search'></i>\n               <span class='d-none d-sm-block'>\" . $p['actionvalue'] . \"</span>\n            </button>\";\n            if ($p['showbookmark'] || $p['showreset']) {\n                if ($p['showbookmark']) {\n                    SavedSearch::showSaveButton(\n                        SavedSearch::SEARCH,\n                        $itemtype,\n                        isset($_GET['savedsearches_id'])\n                    );\n                }\n\n                if ($p['showreset']) {\n                    echo \"<a class='btn btn-ghost-secondary btn-icon btn-sm me-1 search-reset'\n                        data-bs-toggle='tooltip' data-bs-placement='bottom'\n                        href='\"\n                    . $p['target']\n                    . (strpos($p['target'], '?') ? '&amp;' : '?')\n                    . \"reset=reset' title=\\\"\" . __s('Blank') . \"\\\"\n                  ><i class='ti ti-circle-x'></i></a>\";\n                }\n            }\n        }\n        echo \"</div>\"; //.search_actions\n\n       // idor checks\n        $idor_display_criteria       = Session::getNewIDORToken($itemtype);\n        $idor_display_meta_criteria  = Session::getNewIDORToken($itemtype);\n        $idor_display_criteria_group = Session::getNewIDORToken($itemtype);\n\n        $itemtype_escaped = addslashes($itemtype);\n        $JS = <<<JAVASCRIPT\n         $('#addsearchcriteria$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_criteria',\n               'itemtype': '$itemtype_escaped',\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_criteria'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\n\n         $('#addmetasearchcriteria$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_meta_criteria',\n               'itemtype': '$itemtype_escaped',\n               'meta': true,\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_meta_criteria'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\n\n         $('#addcriteriagroup$rand_criteria').on('click', function(event) {\n            event.preventDefault();\n            $.post('{$CFG_GLPI['root_doc']}/ajax/search.php', {\n               'action': 'display_criteria_group',\n               'itemtype': '$itemtype_escaped',\n               'meta': true,\n               'num': $nbsearchcountvar,\n               'p': $json_p,\n               '_idor_token': '$idor_display_criteria_group'\n            })\n            .done(function(data) {\n               $(data).insertBefore('#more-criteria$rand_criteria');\n               $nbsearchcountvar++;\n            });\n         });\nJAVASCRIPT;\n\n        if ($p['mainform']) {\n            $JS .= <<<JAVASCRIPT\n         var toggle_fold_search = function(show_search) {\n            $('#searchcriteria{$rand_criteria}').closest('.search-form').toggle(show_search);\n         };\n\n         // Init search_criteria state\n         var search_criteria_visibility = window.localStorage.getItem('show_full_searchcriteria');\n         if (search_criteria_visibility !== undefined && search_criteria_visibility == 'false') {\n            $('.fold-search').click();\n         }\n\n         $(document).on(\"click\", \".remove-search-criteria\", function() {\n            // force removal of tooltip\n            var tooltip = bootstrap.Tooltip.getInstance($(this)[0]);\n            if (tooltip !== null) {\n               tooltip.dispose();\n            }\n\n            var rowID = $(this).data('rowid');\n            $('#' + rowID).remove();\n            $('#searchcriteria{$rand_criteria} .criteria-list .list-group-item:first-child').addClass('headerRow').show();\n         });\nJAVASCRIPT;\n        }\n        echo Html::scriptBlock($JS);\n\n        if (count($p['addhidden'])) {\n            foreach ($p['addhidden'] as $key => $val) {\n                echo Html::hidden($key, ['value' => $val]);\n            }\n        }\n\n        if ($p['mainform']) {\n           // For dropdown\n            echo Html::hidden('itemtype', ['value' => $itemtype]);\n           // Reset to start when submit new search\n            echo Html::hidden('start', ['value'    => 0]);\n        }\n\n        echo \"</div>\"; // #searchcriteria\n        echo \"</div>\"; // .card\n        if ($p['mainform']) {\n            Html::closeForm();\n        }\n    }\n\n    /**\n     * Display a criteria field set, this function should be called by ajax/search.php\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - itemtype: main itemtype for criteria, sub one for metacriteria\n     *                            - num: index of the criteria\n     *                            - p: params of showGenericSearch method\n     *\n     * @return void\n     */\n    public static function displayCriteria($request = [])\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"num\"])\n        ) {\n            return;\n        }\n\n        $num         = (int) $request['num'];\n        $p           = $request['p'];\n        $options     = self::getCleanedOptions($request[\"itemtype\"]);\n        $randrow     = mt_rand();\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $request[\"itemtype\"]));\n        $rowid       = 'searchrow' . $normalized_itemtype . $randrow;\n        $addclass    = $num == 0 ? ' headerRow' : '';\n        $prefix      = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n        $criteria    = [];\n        $from_meta   = isset($request['from_meta']) && $request['from_meta'];\n\n        $sess_itemtype = $request[\"itemtype\"];\n        if ($from_meta) {\n            $sess_itemtype = $request[\"parent_itemtype\"];\n        }\n\n        if (!$criteria = self::findCriteriaInSession($sess_itemtype, $num, $parents_num)) {\n            $criteria = self::getDefaultCriteria($request[\"itemtype\"]);\n        }\n\n        if (\n            isset($criteria['meta'])\n            && $criteria['meta']\n            && !$from_meta\n        ) {\n            self::displayMetaCriteria($request);\n            return;\n        }\n\n        if (\n            isset($criteria['criteria'])\n            && is_array($criteria['criteria'])\n        ) {\n            self::displayCriteriaGroup($request);\n            return;\n        }\n\n        $add_padding = \"p-2\";\n        if (isset($request[\"from_meta\"])) {\n            $add_padding = \"p-0\";\n        }\n\n        echo \"<div class='list-group-item $add_padding border-0 normalcriteria$addclass' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n\n        if (!$from_meta) {\n           // First line display add / delete images for normal and meta search items\n            if (\n                $num == 0\n                && isset($p['mainform'])\n                && $p['mainform']\n            ) {\n               // Instanciate an object to access method\n                $item = null;\n                if ($request[\"itemtype\"] != AllAssets::getType()) {\n                    $item = getItemForItemtype($request[\"itemtype\"]);\n                }\n                if ($item && $item->maybeDeleted()) {\n                    echo Html::hidden('is_deleted', [\n                        'value' => $p['is_deleted'],\n                        'id'    => 'is_deleted'\n                    ]);\n                }\n                echo Html::hidden('as_map', [\n                    'value' => $p['as_map'],\n                    'id'    => 'as_map'\n                ]);\n                echo Html::hidden('browse', [\n                    'value' => $p['browse'],\n                    'id'    => 'browse'\n                ]);\n            }\n            echo \"<div class='col-auto'>\";\n            echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'\n                       data-bs-toggle='tooltip' data-bs-placement='left'\n                       title=\\\"\" . __s('Delete a rule') . \"\\\">\n            <i class='ti ti-square-minus' alt='-'></i>\n         </button>\";\n            echo \"</div>\";\n        }\n\n       // Display link item\n        $value = '';\n        if (!$from_meta) {\n            echo \"<div class='col-auto'>\";\n            if (isset($criteria[\"link\"])) {\n                $value = $criteria[\"link\"];\n            }\n            $operators = Search::getLogicalOperators(($num == 0));\n            Dropdown::showFromArray(\"criteria{$prefix}[$num][link]\", $operators, [\n                'value' => $value,\n            ]);\n            echo \"</div>\";\n        }\n\n        $values   = [];\n       // display select box to define search item\n        if ($CFG_GLPI['allow_search_view'] == 2 && !isset($request['from_meta'])) {\n            $values['view'] = __('Items seen');\n        }\n\n        reset($options);\n        $group = '';\n\n        foreach ($options as $key => $val) {\n           // print groups\n            if (!is_array($val)) {\n                $group = $val;\n            } else if (count($val) == 1) {\n                $group = $val['name'];\n            } else {\n                if (\n                    (!isset($val['nosearch']) || ($val['nosearch'] == false))\n                    && (!$from_meta || !array_key_exists('nometa', $val) || $val['nometa'] !== true)\n                ) {\n                    $values[$group][$key] = $val[\"name\"];\n                }\n            }\n        }\n        if ($CFG_GLPI['allow_search_view'] == 1 && !isset($request['from_meta'])) {\n            $values['view'] = __('Items seen');\n        }\n        if ($CFG_GLPI['allow_search_all'] && !isset($request['from_meta'])) {\n            $values['all'] = __('All');\n        }\n        $value = '';\n\n        if (isset($criteria['field'])) {\n            $value = $criteria['field'];\n        }\n\n        echo \"<div class='col-auto'>\";\n        $rand = Dropdown::showFromArray(\"criteria{$prefix}[$num][field]\", $values, [\n            'value' => $value,\n        ]);\n        echo \"</div>\";\n        $field_id = Html::cleanId(\"dropdown_criteria{$prefix}[$num][field]$rand\");\n        $spanid   = Html::cleanId('SearchSpan' . $normalized_itemtype . $prefix . $num);\n\n        echo \"<div class='col-auto'>\";\n        echo \"<div class='row g-1' id='$spanid'>\";\n\n        $used_itemtype = $request[\"itemtype\"];\n       // Force Computer itemtype for AllAssets to permit to show specific items\n        if ($request[\"itemtype\"] == AllAssets::getType()) {\n            $used_itemtype = 'Computer';\n        }\n\n        $searchtype = isset($criteria['searchtype'])\n                     ? $criteria['searchtype']\n                     : \"\";\n        $p_value    = isset($criteria['value'])\n                     ? Sanitizer::dbUnescape($criteria['value'])\n                     : \"\";\n\n        $params = [\n            'itemtype'    => $used_itemtype,\n            '_idor_token' => Session::getNewIDORToken($used_itemtype),\n            'field'       => $value,\n            'searchtype'  => $searchtype,\n            'value'       => $p_value,\n            'num'         => $num,\n            'p'           => $p,\n        ];\n        Search::displaySearchoption($params);\n        echo \"</div>\";\n\n        Ajax::updateItemOnSelectEvent(\n            $field_id,\n            $spanid,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            [\n                'action'     => 'display_searchoption',\n                'field'      => '__VALUE__',\n            ] + $params\n        );\n        echo \"</div>\"; //.row\n        echo \"</div>\"; //#$spanid\n        echo \"</div>\";\n    }\n\n    /**\n     * Display a meta-criteria field set, this function should be called by ajax/search.php\n     * Call displayCriteria method after displaying its itemtype field\n     *\n     * @since 9.4\n     *\n     * @param  array  $request @see displayCriteria method\n     *\n     * @return void\n     */\n    public static function displayMetaCriteria($request = [])\n    {\n        global $CFG_GLPI;\n\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"num\"])\n        ) {\n            return \"\";\n        }\n\n        $p            = $request['p'];\n        $num          = (int) $request['num'];\n        $prefix       = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num  = isset($p['parents_num']) ? $p['parents_num'] : [];\n        $itemtype     = $request[\"itemtype\"];\n        $metacriteria = [];\n\n        if (!$metacriteria = self::findCriteriaInSession($itemtype, $num, $parents_num)) {\n            $metacriteria = [];\n           // Set default field\n            $options  = Search::getCleanedOptions($itemtype);\n\n            foreach ($options as $key => $val) {\n                if (is_array($val) && isset($val['table'])) {\n                    $metacriteria['field'] = $key;\n                    break;\n                }\n            }\n        }\n\n        $linked =  Search::getMetaItemtypeAvailable($itemtype);\n        $rand   = mt_rand();\n\n        $rowid  = 'metasearchrow' . $request['itemtype'] . $rand;\n\n        echo \"<div class='list-group-item border-0 metacriteria p-2' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n\n        echo \"<div class='col-auto'>\";\n        echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'>\n         <i class='ti ti-square-minus' alt='-' title=\\\"\" .\n         __s('Delete a global rule') . \"\\\"></i>\n      </button>\";\n        echo \"</div>\";\n\n       // Display link item (not for the first item)\n        echo \"<div class='col-auto'>\";\n        Dropdown::showFromArray(\n            \"criteria{$prefix}[$num][link]\",\n            Search::getLogicalOperators(),\n            [\n                'value' => isset($metacriteria[\"link\"])\n               ? $metacriteria[\"link\"]\n               : \"\",\n            ]\n        );\n        echo \"</div>\";\n\n       // Display select of the linked item type available\n        echo \"<div class='col-auto'>\";\n        $rand = Dropdown::showItemTypes(\"criteria{$prefix}[$num][itemtype]\", $linked, [\n            'value' => isset($metacriteria['itemtype'])\n                    && !empty($metacriteria['itemtype'])\n                     ? $metacriteria['itemtype']\n                     : \"\",\n        ]);\n        echo \"</div>\";\n        echo Html::hidden(\"criteria{$prefix}[$num][meta]\", [\n            'value' => true\n        ]);\n        $field_id = Html::cleanId(\"dropdown_criteria{$prefix}[$num][itemtype]$rand\");\n        $spanid   = Html::cleanId(\"show_\" . $request[\"itemtype\"] . \"_\" . $prefix . $num . \"_$rand\");\n       // Ajax script for display search met& item\n\n        $params = [\n            'action'          => 'display_criteria',\n            'itemtype'        => '__VALUE__',\n            'parent_itemtype' => $request['itemtype'],\n            'from_meta'       => true,\n            'num'             => $num,\n            'p'               => $request[\"p\"],\n            '_idor_token'     => Session::getNewIDORToken(\"\", [\n                'parent_itemtype' => $request['itemtype']\n            ])\n        ];\n        Ajax::updateItemOnSelectEvent(\n            $field_id,\n            $spanid,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            $params\n        );\n\n        echo \"<div class='col-auto' id='$spanid'>\";\n        echo \"<div class=row'>\";\n        if (\n            isset($metacriteria['itemtype'])\n            && !empty($metacriteria['itemtype'])\n        ) {\n            $params['itemtype'] = $metacriteria['itemtype'];\n            self::displayCriteria($params);\n        }\n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"</div>\";\n        echo \"</div>\";\n    }\n\n    /**\n     * Display a group of nested criteria.\n     * A group (parent) criteria  can contains children criteria (who also cantains children, etc)\n     *\n     * @since 9.4\n     *\n     * @param  array  $request @see displayCriteria method\n     *\n     * @return void\n     */\n    public static function displayCriteriaGroup($request = [])\n    {\n        $num         = (int) $request['num'];\n        $p           = $request['p'];\n        $randrow     = mt_rand();\n        $rowid       = 'searchrow' . $request['itemtype'] . $randrow;\n        $addclass    = $num == 0 ? ' headerRow' : '';\n        $prefix      = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n\n        if (!$criteria = self::findCriteriaInSession($request['itemtype'], $num, $parents_num)) {\n            $criteria = [\n                'criteria' => self::getDefaultCriteria($request['itemtype']),\n            ];\n        }\n\n        echo \"<div class='list-group-item p-2 border-0 normalcriteria$addclass' id='$rowid'>\";\n        echo \"<div class='row g-1'>\";\n        echo \"<div class='col-auto'>\";\n        echo \"<button class='btn btn-sm btn-icon btn-ghost-secondary remove-search-criteria' type='button' data-rowid='$rowid'\n                    data-bs-toggle='tooltip' data-bs-placement='left'\n                    title=\\\"\" . __s('Delete a rule') . \"\\\"\n      >\n         <i class='ti ti-square-minus' alt='-'></i>\n      </button>\";\n        echo \"</div>\";\n        echo \"<div class='col-auto'>\";\n        Dropdown::showFromArray(\"criteria{$prefix}[$num][link]\", Search::getLogicalOperators(), [\n            'value' => isset($criteria[\"link\"]) ? $criteria[\"link\"] : '',\n        ]);\n        echo \"</div>\";\n\n        $parents_num = isset($p['parents_num']) ? $p['parents_num'] : [];\n        array_push($parents_num, $num);\n        $params = [\n            'mainform'    => false,\n            'prefix_crit' => \"{$prefix}[$num][criteria]\",\n            'parents_num' => $parents_num,\n            'criteria'    => $criteria['criteria'],\n        ];\n\n        echo \"<div class='col-auto'>\";\n        self::showGenericSearch($request['itemtype'], $params);\n        echo \"</div>\";\n\n        echo \"</div>\";//.row\n        echo \"</div>\";//.list-group-item\n    }\n\n    /**\n     * Retrieve a single criteria in Session by its index\n     *\n     * @since 9.4\n     *\n     * @param  string  $itemtype    which glpi type we must search in session\n     * @param  integer $num         index of the criteria\n     * @param  array   $parents_num node indexes of the parents (@see displayCriteriaGroup)\n     *\n     * @return array|false   the found criteria array, or false if nothing found\n     */\n    public static function findCriteriaInSession($itemtype = '', $num = 0, $parents_num = [])\n    {\n        if (!isset($_SESSION['glpisearch'][$itemtype]['criteria'])) {\n            return false;\n        }\n        $criteria = &$_SESSION['glpisearch'][$itemtype]['criteria'];\n\n        if (count($parents_num)) {\n            foreach ($parents_num as $parent) {\n                if (!isset($criteria[$parent]['criteria'])) {\n                    return false;\n                }\n                $criteria = &$criteria[$parent]['criteria'];\n            }\n        }\n\n        if (\n            isset($criteria[$num])\n            && is_array($criteria[$num])\n        ) {\n            return $criteria[$num];\n        }\n\n        return false;\n    }\n\n    /**\n     * construct the default criteria for an itemtype\n     *\n     * @since 9.4\n     *\n     * @param  class-string<CommonDBTM> $itemtype\n     *\n     * @return array  criteria\n     */\n    public static function getDefaultCriteria($itemtype = '')\n    {\n        global $CFG_GLPI;\n\n        $field = '';\n\n        if ($CFG_GLPI['allow_search_view'] == 2) {\n            $field = 'view';\n        } else {\n            $options = self::getCleanedOptions($itemtype);\n            foreach ($options as $key => $val) {\n                if (\n                    is_array($val)\n                    && isset($val['table'])\n                ) {\n                    $field = $key;\n                    break;\n                }\n            }\n        }\n\n        return [\n            [\n                'field' => $field,\n                'link'  => 'contains',\n                'value' => ''\n            ]\n        ];\n    }\n\n    /**\n     * Display first part of criteria (field + searchtype, just after link)\n     * will call displaySearchoptionValue for the next part (value)\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - itemtype: main itemtype for criteria, sub one for metacriteria\n     *                            - num: index of the criteria\n     *                            - field: field key of the criteria\n     *                            - p: params of showGenericSearch method\n     *\n     * @return void\n     */\n    public static function displaySearchoption($request = [])\n    {\n        global $CFG_GLPI;\n        if (\n            !isset($request[\"itemtype\"])\n            || !isset($request[\"field\"])\n            || !isset($request[\"num\"])\n        ) {\n            return \"\";\n        }\n\n        $p      = $request['p'];\n        $num    = (int) $request['num'];\n        $prefix = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n\n        if (!is_subclass_of($request['itemtype'], 'CommonDBTM')) {\n            throw new \\RuntimeException('Invalid itemtype provided!');\n        }\n\n        if (isset($request['meta']) && $request['meta']) {\n            $fieldname = 'metacriteria';\n        } else {\n            $fieldname = 'criteria';\n            $request['meta'] = 0;\n        }\n\n        $actions = Search::getActionsFor($request[\"itemtype\"], $request[\"field\"]);\n\n       // is it a valid action for type ?\n        if (\n            count($actions)\n            && (empty($request['searchtype']) || !isset($actions[$request['searchtype']]))\n        ) {\n            $tmp = $actions;\n            unset($tmp['searchopt']);\n            $request['searchtype'] = key($tmp);\n            unset($tmp);\n        }\n\n        $rands = -1;\n        $normalized_itemtype = strtolower(str_replace('\\\\', '', $request[\"itemtype\"]));\n        $dropdownname = Html::cleanId(\"spansearchtype$fieldname\" .\n                                    $normalized_itemtype .\n                                    $prefix .\n                                    $num);\n        $searchopt = [];\n        if (count($actions) > 0) {\n           // get already get search options\n            if (isset($actions['searchopt'])) {\n                $searchopt = $actions['searchopt'];\n                // No name for clean array with quotes\n                unset($searchopt['name']);\n                unset($actions['searchopt']);\n            }\n            $searchtype_name = \"{$fieldname}{$prefix}[$num][searchtype]\";\n            echo \"<div class='col-auto'>\";\n            $rands = Dropdown::showFromArray($searchtype_name, $actions, [\n                'value' => $request[\"searchtype\"],\n            ]);\n            echo \"</div>\";\n            $fieldsearch_id = Html::cleanId(\"dropdown_$searchtype_name$rands\");\n        }\n\n        echo \"<div class='col-auto' id='$dropdownname' data-itemtype='{$request[\"itemtype\"]}' data-fieldname='$fieldname' data-prefix='$prefix' data-num='$num'>\";\n        $params = [\n            'value'       => rawurlencode(Sanitizer::dbUnescape($request['value'])),\n            'searchopt'   => $searchopt,\n            'searchtype'  => $request[\"searchtype\"],\n            'num'         => $num,\n            'itemtype'    => $request[\"itemtype\"],\n            '_idor_token' => Session::getNewIDORToken($request[\"itemtype\"]),\n            'from_meta'   => isset($request['from_meta'])\n                           ? $request['from_meta']\n                           : false,\n            'field'       => $request[\"field\"],\n            'p'           => $p,\n        ];\n        self::displaySearchoptionValue($params);\n        echo \"</div>\";\n\n        Ajax::updateItemOnSelectEvent(\n            $fieldsearch_id,\n            $dropdownname,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/search.php\",\n            [\n                'action'     => 'display_searchoption_value',\n                'searchtype' => '__VALUE__',\n            ] + $params\n        );\n    }\n\n    /**\n     * Display last part of criteria (value, just after searchtype)\n     * called by displaySearchoptionValue\n     *\n     * @since 9.4\n     *\n     * @param  array  $request we should have these keys of parameters:\n     *                            - searchtype: (contains, equals) passed by displaySearchoption\n     *\n     * @return void\n     */\n    public static function displaySearchoptionValue($request = [])\n    {\n        if (!isset($request['searchtype'])) {\n            return \"\";\n        }\n\n        $p                 = $request['p'];\n        $prefix            = isset($p['prefix_crit']) ? $p['prefix_crit'] : '';\n        $searchopt         = isset($request['searchopt']) ? $request['searchopt'] : [];\n        $request['value']  = rawurldecode($request['value']);\n        $fieldname         = isset($request['meta']) && $request['meta']\n                              ? 'metacriteria'\n                              : 'criteria';\n        $inputname         = $fieldname . $prefix . '[' . $request['num'] . '][value]';\n        $display           = false;\n        $item              = getItemForItemtype($request['itemtype']);\n        $options2          = [];\n        $options2['value'] = $request['value'];\n        $options2['width'] = '100%';\n       // For tree dropdpowns\n        $options2['permit_select_parent'] = true;\n\n        switch ($request['searchtype']) {\n            case \"equals\":\n            case \"notequals\":\n            case \"morethan\":\n            case \"lessthan\":\n            case \"under\":\n            case \"notunder\":\n                if (!$display && isset($searchopt['field'])) {\n                    // Specific cases\n                    switch ($searchopt['table'] . \".\" . $searchopt['field']) {\n                      // Add mygroups choice to searchopt\n                        case \"glpi_groups.completename\":\n                             $searchopt['toadd'] = ['mygroups' => __('My groups')];\n                            break;\n\n                        case \"glpi_changes.status\":\n                        case \"glpi_changes.impact\":\n                        case \"glpi_changes.urgency\":\n                        case \"glpi_problems.status\":\n                        case \"glpi_problems.impact\":\n                        case \"glpi_problems.urgency\":\n                        case \"glpi_tickets.status\":\n                        case \"glpi_tickets.impact\":\n                        case \"glpi_tickets.urgency\":\n                            $options2['showtype'] = 'search';\n                            break;\n\n                        case \"glpi_changes.priority\":\n                        case \"glpi_problems.priority\":\n                        case \"glpi_tickets.priority\":\n                            $options2['showtype']  = 'search';\n                            $options2['withmajor'] = true;\n                            break;\n\n                        case \"glpi_tickets.global_validation\":\n                                $options2['all'] = true;\n                            break;\n\n                        case \"glpi_ticketvalidations.status\":\n                              $options2['all'] = true;\n                            break;\n\n                        case \"glpi_users.name\":\n                            $options2['right']            = (isset($searchopt['right']) ? $searchopt['right'] : 'all');\n                            $options2['inactive_deleted'] = 1;\n                            $searchopt['toadd'] = [\n                                [\n                                    'id'    => 'myself',\n                                    'text'  => __('Myself'),\n                                ]\n                            ];\n\n                            break;\n                    }\n\n                    // Standard datatype usage\n                    if (!$display && isset($searchopt['datatype'])) {\n                        switch ($searchopt['datatype']) {\n                            case \"date\":\n                            case \"date_delay\":\n                            case \"datetime\":\n                                $options2['relative_dates'] = true;\n                                break;\n                        }\n                    }\n\n                    $out = $item->getValueToSelect($searchopt, $inputname, $request['value'], $options2);\n                    if (strlen($out)) {\n                         echo $out;\n                         $display = true;\n                    }\n\n                   //Could display be handled by a plugin ?\n                    if (\n                        !$display\n                        && $plug = isPluginItemType(getItemTypeForTable($searchopt['table']))\n                    ) {\n                        $display = Plugin::doOneHook(\n                            $plug['plugin'],\n                            'searchOptionsValues',\n                            [\n                                'name'           => $inputname,\n                                'searchtype'     => $request['searchtype'],\n                                'searchoption'   => $searchopt,\n                                'value'          => $request['value']\n                            ]\n                        );\n                    }\n                }\n                break;\n        }\n\n       // Default case : text field\n        if (!$display) {\n            echo \"<input type='text' class='form-control' size='13' name='$inputname' value=\\\"\" .\n                  Html::cleanInputText($request['value']) . \"\\\">\";\n        }\n    }\n\n\n    /**\n     * Generic Function to add to a HAVING clause\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $LINK           link to use\n     * @param string  $NOT            is is a negative search ?\n     * @param string  $itemtype       item type\n     * @param integer $ID             ID of the item to search\n     * @param string  $searchtype     search type ('contains' or 'equals')\n     * @param string  $val            value search\n     *\n     * @return string|false HAVING clause sub-string (Does not include the \"HAVING\" keyword).\n     *                      May return false if the related search option is not valid for SQL searching.\n     **/\n    public static function addHaving($LINK, $NOT, $itemtype, $ID, $searchtype, $val)\n    {\n\n        global $DB;\n\n        $searchopt  = &self::getOptions($itemtype);\n        if (!isset($searchopt[$ID]['table'])) {\n            return false;\n        }\n        $table = $searchopt[$ID][\"table\"];\n        $NAME = \"ITEM_{$itemtype}_{$ID}\";\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addHaving',\n                $LINK,\n                $NOT,\n                $itemtype,\n                $ID,\n                $val,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n       //// Default cases\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addHaving',\n                    $LINK,\n                    $NOT,\n                    $itemtype,\n                    $ID,\n                    $val,\n                    \"{$itemtype}_{$ID}\"\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n            $NOT = !$NOT;\n        }\n\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            if ($searchopt[$ID][\"datatype\"] == \"mio\") {\n                // Parse value as it may contain a few different formats\n                $val = Toolbox::getMioSizeFromString($val);\n            }\n\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"datetime\":\n                    if (in_array($searchtype, ['contains', 'notcontains'])) {\n                        break;\n                    }\n\n                    $force_day = false;\n                    if (strstr($val, 'BEGIN') || strstr($val, 'LAST')) {\n                        $force_day = true;\n                    }\n\n                    $val = Html::computeGenericDateTimeSearch($val, $force_day);\n\n                    $operator = '';\n                    switch ($searchtype) {\n                        case 'equals':\n                            $operator = !$NOT ? '=' : '!=';\n                            break;\n                        case 'notequals':\n                            $operator = !$NOT ? '!=' : '=';\n                            break;\n                        case 'lessthan':\n                            $operator = !$NOT ? '<' : '>';\n                            break;\n                        case 'morethan':\n                            $operator = !$NOT ? '>' : '<';\n                            break;\n                    }\n\n                    return \" {$LINK} ({$DB->quoteName($NAME)} $operator {$DB->quoteValue($val)}) \";\n                break;\n                case \"count\":\n                case \"mio\":\n                case \"number\":\n                case \"decimal\":\n                case \"timestamp\":\n                    $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                    $replace = [\"<\",\">\"];\n                    $val     = preg_replace($search, $replace, $val);\n                    if (preg_match(\"/([<>])([=]*)[[:space:]]*([0-9]+)/\", $val, $regs)) {\n                        if ($NOT) {\n                            if ($regs[1] == '<') {\n                                $regs[1] = '>';\n                            } else {\n                                $regs[1] = '<';\n                            }\n                        }\n                        $regs[1] .= $regs[2];\n                        return \" $LINK (`$NAME` \" . $regs[1] . \" \" . $regs[3] . \" ) \";\n                    }\n\n                    if (is_numeric($val)) {\n                        if (isset($searchopt[$ID][\"width\"])) {\n                            if (!$NOT) {\n                                return \" $LINK (`$NAME` < \" . (intval($val) + $searchopt[$ID][\"width\"]) . \"\n                                        AND `$NAME` > \" .\n                                           (intval($val) - $searchopt[$ID][\"width\"]) . \") \";\n                            }\n                            return \" $LINK (`$NAME` > \" . (intval($val) + $searchopt[$ID][\"width\"]) . \"\n                                     OR `$NAME` < \" .\n                                        (intval($val) - $searchopt[$ID][\"width\"]) . \" ) \";\n                        }\n                       // Exact search\n                        if (!$NOT) {\n                            return \" $LINK (`$NAME` = \" . (intval($val)) . \") \";\n                        }\n                        return \" $LINK (`$NAME` <> \" . (intval($val)) . \") \";\n                    }\n                    break;\n            }\n        }\n\n        return self::makeTextCriteria(\"`$NAME`\", $val, $NOT, $LINK);\n    }\n\n\n    /**\n     * Generic Function to add ORDER BY to a request\n     *\n     * @since 9.4: $key param has been dropped\n     * @since 10.0.0: Parameters changed to allow multiple sort fields.\n     *    Old functionality maintained by checking the type of the first parameter.\n     *    This backwards compatibility will be removed in a later version.\n     *\n     * @param class-string<CommonDBTM> $itemtype The itemtype\n     * @param array  $sort_fields The search options to order on. This array should contain one or more associative arrays containing:\n     *    - id: The search option ID\n     *    - order: The sort direction (Default: ASC). Invalid sort directions will be replaced with the default option\n     * @param ?integer $_id    field to add (Deprecated)\n     *\n     * @return string ORDER BY query string\n     *\n     **/\n    public static function addOrderBy($itemtype, $sort_fields, $_id = 'ASC')\n    {\n        global $CFG_GLPI;\n\n       // BC parameter conversion\n        if (!is_array($sort_fields)) {\n           // < 10.0.0 parameters\n            Toolbox::deprecated('The parameters for Search::addOrderBy have changed to allow sorting by multiple fields. Please update your calling code.');\n            $sort_fields = [\n                [\n                    'searchopt_id' => $sort_fields,\n                    'order'        => $_id\n                ]\n            ];\n        }\n\n        $orderby_criteria = [];\n        $searchopt = &self::getOptions($itemtype);\n\n        foreach ($sort_fields as $sort_field) {\n            $ID = $sort_field['searchopt_id'];\n            if (isset($searchopt[$ID]['nosort']) && $searchopt[$ID]['nosort']) {\n                continue;\n            }\n            $order = $sort_field['order'] ?? 'ASC';\n           // Order security check\n            if ($order != 'ASC') {\n                $order = 'DESC';\n            }\n\n            $criterion = null;\n\n            $table = $searchopt[$ID][\"table\"];\n            $field = $searchopt[$ID][\"field\"];\n\n            $addtable = '';\n\n            $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n            && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n            $orig_table = self::getOrigTableName($itemtype);\n            if (\n                ($is_fkey_composite_on_self || $table != $orig_table)\n                && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n            ) {\n                $addtable .= \"_\" . $searchopt[$ID][\"linkfield\"];\n            }\n\n            if (isset($searchopt[$ID]['joinparams'])) {\n                $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n\n                if (!empty($complexjoin)) {\n                    $addtable .= \"_\" . $complexjoin;\n                }\n            }\n\n            if (isset($CFG_GLPI[\"union_search_type\"][$itemtype])) {\n                $criterion = \"`ITEM_{$itemtype}_{$ID}` $order\";\n            }\n\n           // Plugin can override core definition for its type\n            if ($criterion === null && $plug = isPluginItemType($itemtype)) {\n                $out = Plugin::doOneHook(\n                    $plug['plugin'],\n                    'addOrderBy',\n                    $itemtype,\n                    $ID,\n                    $order,\n                    \"{$itemtype}_{$ID}\"\n                );\n                $out = $out !== null ? trim($out) : null;\n                if (!empty($out)) {\n                     $out = preg_replace('/^ORDER BY /', '', $out);\n                     $criterion = $out;\n                }\n            }\n\n            if ($criterion === null) {\n                switch ($table . \".\" . $field) {\n                   // FIXME Dead case? Can't see any itemtype referencing this table in their search options to be able to get here.\n                    case \"glpi_auth_tables.name\":\n                        $user_searchopt = self::getOptions('User');\n                        $criterion = \"`glpi_users`.`authtype` $order,\n                              `glpi_authldaps\" . $addtable . \"_\" .\n                         self::computeComplexJoinID($user_searchopt[30]['joinparams']) . \"`.\n                                 `name` $order,\n                              `glpi_authmails\" . $addtable . \"_\" .\n                         self::computeComplexJoinID($user_searchopt[31]['joinparams']) . \"`.\n                                 `name` $order\";\n                        break;\n\n                    case \"glpi_users.name\":\n                        if ($itemtype != 'User') {\n                            if ($_SESSION[\"glpinames_format\"] == User::FIRSTNAME_BEFORE) {\n                                $name1 = 'firstname';\n                                $name2 = 'realname';\n                            } else {\n                                $name1 = 'realname';\n                                $name2 = 'firstname';\n                            }\n                            $criterion = \"`\" . $table . $addtable . \"`.`$name1` $order,\n                                 `\" . $table . $addtable . \"`.`$name2` $order,\n                                 `\" . $table . $addtable . \"`.`name` $order\";\n                        } else {\n                            $criterion = \"`\" . $table . $addtable . \"`.`name` $order\";\n                        }\n                        break;\n                   //FIXME glpi_networkequipments.ip seems like a dead case\n                    case \"glpi_networkequipments.ip\":\n                    case \"glpi_ipaddresses.name\":\n                        $criterion = \"INET6_ATON(`$table$addtable`.`$field`) $order\";\n                        break;\n                }\n            }\n\n           //// Default cases\n\n           // Link with plugin tables\n            if ($criterion === null && preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n                if (count($matches) == 2) {\n                    $plug = $matches[1];\n                    $out = Plugin::doOneHook(\n                        $plug,\n                        'addOrderBy',\n                        $itemtype,\n                        $ID,\n                        $order,\n                        \"{$itemtype}_{$ID}\"\n                    );\n                    $out = $out !== null ? trim($out) : null;\n                    if (!empty($out)) {\n                           $out = preg_replace('/^ORDER BY /', '', $out);\n                           $criterion = $out;\n                    }\n                }\n            }\n\n           // Preformat items\n            if ($criterion === null && isset($searchopt[$ID][\"datatype\"])) {\n                switch ($searchopt[$ID][\"datatype\"]) {\n                    case \"date_delay\":\n                        $interval = \"MONTH\";\n                        if (isset($searchopt[$ID]['delayunit'])) {\n                            $interval = $searchopt[$ID]['delayunit'];\n                        }\n\n                        $add_minus = '';\n                        if (isset($searchopt[$ID][\"datafields\"][3])) {\n                            $add_minus = \"- `$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                        }\n                        $criterion = \"ADDDATE(`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][1] . \"`,\n                                         INTERVAL (`$table$addtable`.`\" .\n                        $searchopt[$ID][\"datafields\"][2] . \"` $add_minus)\n                                         $interval) $order\";\n                }\n            }\n\n            $orderby_criteria[] = $criterion ?? \"`ITEM_{$itemtype}_{$ID}` $order\";\n        }\n\n        if (count($orderby_criteria) === 0) {\n            return '';\n        }\n        return ' ORDER BY ' . implode(', ', $orderby_criteria) . ' ';\n    }\n\n\n    /**\n     * Generic Function to add default columns to view\n     *\n     * @param class-string<CommonDBTM> $itemtype  Item type\n     * @param array  $params   array of parameters\n     *\n     * @return array Array of search option IDs to be shown in the results\n     **/\n    public static function addDefaultToView($itemtype, $params)\n    {\n        global $CFG_GLPI;\n\n        $toview = [];\n        $item   = null;\n        $entity_check = true;\n\n        if ($itemtype != AllAssets::getType()) {\n            $item = getItemForItemtype($itemtype);\n            $entity_check = $item->isEntityAssign();\n        }\n       // Add first element (name)\n        array_push($toview, 1);\n\n        if (isset($params['as_map']) && $params['as_map'] == 1) {\n           // Add location name when map mode\n            array_push($toview, ($itemtype == 'Location' ? 1 : ($itemtype == 'Ticket' ? 83 : 3)));\n        }\n\n       // Add entity view :\n        if (\n            Session::isMultiEntitiesMode()\n            && $entity_check\n            && (isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n              || ($item && $item->maybeRecursive())\n              || isset($_SESSION['glpiactiveentities']) && (count($_SESSION[\"glpiactiveentities\"]) > 1))\n        ) {\n            array_push($toview, 80);\n        }\n        return $toview;\n    }\n\n\n    /**\n     * Generic Function to add default select to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype device type\n     *\n     * @return string Select string\n     **/\n    public static function addDefaultSelect($itemtype)\n    {\n        global $DB;\n\n        $itemtable = self::getOrigTableName($itemtype);\n        $item      = null;\n        $mayberecursive = false;\n        if ($itemtype != AllAssets::getType()) {\n            $item           = getItemForItemtype($itemtype);\n            $mayberecursive = $item->maybeRecursive();\n        }\n        $ret = \"\";\n        switch ($itemtype) {\n            case 'FieldUnicity':\n                $ret = \"`glpi_fieldunicities`.`itemtype` AS ITEMTYPE,\";\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $ret = Plugin::doOneHook(\n                        $plug['plugin'],\n                        'addDefaultSelect',\n                        $itemtype\n                    );\n                }\n        }\n        if ($itemtable == 'glpi_entities') {\n            $ret .= \"`$itemtable`.`id` AS entities_id, '1' AS is_recursive, \";\n        } else if ($mayberecursive) {\n            if ($item->isField('entities_id')) {\n                $ret .= $DB->quoteName(\"$itemtable.entities_id\") . \", \";\n            }\n            if ($item->isField('is_recursive')) {\n                $ret .= $DB->quoteName(\"$itemtable.is_recursive\") . \", \";\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Generic Function to add select to a request\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype     item type\n     * @param integer $ID           ID of the item to add\n     * @param boolean $meta         boolean is a meta\n     * @param integer $meta_type    meta type table ID (default 0)\n     *\n     * @return string Select string\n     **/\n    public static function addSelect($itemtype, $ID, $meta = 0, $meta_type = 0)\n    {\n        global $DB, $CFG_GLPI;\n\n        $searchopt   = &self::getOptions($itemtype);\n        $table       = $searchopt[$ID][\"table\"];\n        $field       = $searchopt[$ID][\"field\"];\n        $addtable    = \"\";\n        $addtable2   = \"\";\n        $NAME        = \"ITEM_{$itemtype}_{$ID}\";\n        $complexjoin = '';\n\n        if (isset($searchopt[$ID]['joinparams'])) {\n            $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n        }\n\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n         && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n\n        $orig_table = self::getOrigTableName($itemtype);\n        if (\n            ((($is_fkey_composite_on_self || $table != $orig_table)\n            && (!isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n                || ($CFG_GLPI[\"union_search_type\"][$itemtype] != $table)))\n            || !empty($complexjoin))\n            && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n        ) {\n            $addtable .= \"_\" . $searchopt[$ID][\"linkfield\"];\n        }\n\n        if (!empty($complexjoin)) {\n            $addtable .= \"_\" . $complexjoin;\n            $addtable2 .= \"_\" . $complexjoin;\n        }\n\n        $addmeta = \"\";\n        if ($meta) {\n           // $NAME = \"META\";\n            if ($meta_type::getTable() != $table) {\n                $addmeta = \"_\" . $meta_type;\n                $addtable  .= $addmeta;\n                $addtable2 .= $addmeta;\n            }\n        }\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addSelect',\n                $itemtype,\n                $ID,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        $tocompute      = \"`$table$addtable`.`$field`\";\n        $tocomputeid    = \"`$table$addtable`.`id`\";\n\n        $tocomputetrans = \"IFNULL(`$table\" . $addtable . \"_trans_\" . $field . \"`.`value`,'\" . self::NULLVALUE . \"') \";\n\n        $ADDITONALFIELDS = '';\n        if (\n            isset($searchopt[$ID][\"additionalfields\"])\n            && count($searchopt[$ID][\"additionalfields\"])\n        ) {\n            foreach ($searchopt[$ID][\"additionalfields\"] as $key) {\n                if (\n                    $meta\n                    || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                ) {\n                    $ADDITONALFIELDS .= \" IFNULL(GROUP_CONCAT(DISTINCT CONCAT(IFNULL(`$table$addtable`.`$key`,\n                                                                         '\" . self::NULLVALUE . \"'),\n                                                   '\" . self::SHORTSEP . \"', $tocomputeid)ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"'), '\" . self::NULLVALUE . self::SHORTSEP . \"')\n                                    AS `\" . $NAME . \"_$key`, \";\n                } else {\n                    $ADDITONALFIELDS .= \"`$table$addtable`.`$key` AS `\" . $NAME . \"_$key`, \";\n                }\n            }\n        }\n\n       // Virtual display no select : only get additional fields\n        if (strpos($field, '_virtual') === 0) {\n            return $ADDITONALFIELDS;\n        }\n\n        switch ($table . \".\" . $field) {\n            case \"glpi_users.name\":\n                if ($itemtype != 'User') {\n                    if ((isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])) {\n                        $addaltemail = \"\";\n                        if (\n                            (($itemtype == 'Ticket') || ($itemtype == 'Problem'))\n                            && isset($searchopt[$ID]['joinparams']['beforejoin']['table'])\n                            && (($searchopt[$ID]['joinparams']['beforejoin']['table']\n                            == 'glpi_tickets_users')\n                            || ($searchopt[$ID]['joinparams']['beforejoin']['table']\n                                == 'glpi_problems_users')\n                            || ($searchopt[$ID]['joinparams']['beforejoin']['table']\n                                == 'glpi_changes_users'))\n                        ) { // For tickets_users\n                             $ticket_user_table\n                             = $searchopt[$ID]['joinparams']['beforejoin']['table'] .\n                             \"_\" . self::computeComplexJoinID($searchopt[$ID]['joinparams']['beforejoin']\n                                                                   ['joinparams']) . $addmeta;\n                               $addaltemail\n                              = \"GROUP_CONCAT(DISTINCT CONCAT(`$ticket_user_table`.`users_id`, ' ',\n                                                        `$ticket_user_table`.`alternative_email`)\n                                                        SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"_2`, \";\n                        }\n                        return \" GROUP_CONCAT(DISTINCT `$table$addtable`.`id` SEPARATOR '\" . self::LONGSEP . \"')\n                                       AS `\" . $NAME . \"`,\n                           $addaltemail\n                           $ADDITONALFIELDS\";\n                    }\n                    return \" `$table$addtable`.`$field` AS `\" . $NAME . \"`,\n                        `$table$addtable`.`realname` AS `\" . $NAME . \"_realname`,\n                        `$table$addtable`.`id`  AS `\" . $NAME . \"_id`,\n                        `$table$addtable`.`firstname` AS `\" . $NAME . \"_firstname`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_softwarelicenses.number\":\n                if ($meta) {\n                    return \" FLOOR(SUM(`$table$addtable2`.`$field`)\n                              * COUNT(DISTINCT `$table$addtable2`.`id`)\n                              / COUNT(`$table$addtable2`.`id`)) AS `\" . $NAME . \"`,\n                        MIN(`$table$addtable2`.`$field`) AS `\" . $NAME . \"_min`,\n                         $ADDITONALFIELDS\";\n                } else {\n                    return \" FLOOR(SUM(`$table$addtable`.`$field`)\n                              * COUNT(DISTINCT `$table$addtable`.`id`)\n                              / COUNT(`$table$addtable`.`id`)) AS `\" . $NAME . \"`,\n                        MIN(`$table$addtable`.`$field`) AS `\" . $NAME . \"_min`,\n                         $ADDITONALFIELDS\";\n                }\n\n            case \"glpi_profiles.name\":\n                if (\n                    ($itemtype == 'User')\n                    && ($ID == 20)\n                ) {\n                    $addtable2 = '';\n                    if ($meta) {\n                        $addtable2 = \"_\" . $meta_type;\n                    }\n                    return \" GROUP_CONCAT(`$table$addtable`.`$field` SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`entities_id` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_entities_id`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_recursive` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_recursive`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_dynamic` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_dynamic`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_entities.completename\":\n                if (\n                    ($itemtype == 'User')\n                    && ($ID == 80)\n                ) {\n                    $addtable2 = '';\n                    if ($meta) {\n                        $addtable2 = \"_\" . $meta_type;\n                    }\n                    return \" GROUP_CONCAT(`$table$addtable`.`completename` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`profiles_id` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_profiles_id`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_recursive` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_recursive`,\n                        GROUP_CONCAT(`glpi_profiles_users$addtable2`.`is_dynamic` SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"_is_dynamic`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_auth_tables.name\":\n                $user_searchopt = self::getOptions('User');\n                return \" `glpi_users`.`authtype` AS `\" . $NAME . \"`,\n                     `glpi_users`.`auths_id` AS `\" . $NAME . \"_auths_id`,\n                     `glpi_authldaps\" . $addtable . \"_\" .\n                           self::computeComplexJoinID($user_searchopt[30]['joinparams']) . $addmeta . \"`.`$field`\n                              AS `\" . $NAME . \"_\" . $ID . \"_ldapname`,\n                     `glpi_authmails\" . $addtable . \"_\" .\n                           self::computeComplexJoinID($user_searchopt[31]['joinparams']) . $addmeta . \"`.`$field`\n                              AS `\" . $NAME . \"_mailname`,\n                     $ADDITONALFIELDS\";\n\n            case \"glpi_softwareversions.name\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`, '\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_softwareversions.comment\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`,'\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                return \" GROUP_CONCAT(DISTINCT CONCAT(`$table$addtable`.`name`, ' - ',\n                                                  `$table$addtable`.`$field`, '\" . self::SHORTSEP . \"',\n                                                  `$table$addtable`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                 AS `\" . $NAME . \"`,\n                     $ADDITONALFIELDS\";\n\n            case \"glpi_states.name\":\n                if ($meta && ($meta_type == 'Software')) {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwares`.`name`, ' - ',\n                                                     `glpi_softwareversions$addtable`.`name`, ' - ',\n                                                     `$table$addtable2`.`$field`, '\" . self::SHORTSEP . \"',\n                                                     `$table$addtable2`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                     AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                } else if ($itemtype == 'Software') {\n                    return \" GROUP_CONCAT(DISTINCT CONCAT(`glpi_softwareversions`.`name`, ' - ',\n                                                     `$table$addtable`.`$field`,'\" . self::SHORTSEP . \"',\n                                                     `$table$addtable`.`id`) SEPARATOR '\" . self::LONGSEP . \"')\n                                    AS `\" . $NAME . \"`,\n                        $ADDITONALFIELDS\";\n                }\n                break;\n\n            case \"glpi_itilfollowups.content\":\n            case \"glpi_tickettasks.content\":\n            case \"glpi_changetasks.content\":\n                if (is_subclass_of($itemtype, \"CommonITILObject\")) {\n                   // force ordering by date desc\n                    return \" GROUP_CONCAT(\n                  DISTINCT CONCAT(\n                     IFNULL($tocompute, '\" . self::NULLVALUE . \"'),\n                     '\" . self::SHORTSEP . \"',\n                     $tocomputeid\n                  )\n                  ORDER BY `$table$addtable`.`date` DESC\n                  SEPARATOR '\" . self::LONGSEP . \"'\n               ) AS `\" . $NAME . \"`, $ADDITONALFIELDS\";\n                }\n                break;\n\n            default:\n                break;\n        }\n\n       //// Default cases\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addSelect',\n                    $itemtype,\n                    $ID,\n                    \"{$itemtype}_{$ID}\"\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        if (isset($searchopt[$ID][\"computation\"])) {\n            $tocompute = $searchopt[$ID][\"computation\"];\n            $tocompute = str_replace($DB->quoteName('TABLE'), 'TABLE', $tocompute);\n            $tocompute = str_replace(\"TABLE\", $DB->quoteName(\"$table$addtable\"), $tocompute);\n        }\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"count\":\n                    return \" COUNT(DISTINCT `$table$addtable`.`$field`) AS `\" . $NAME . \"`,\n                     $ADDITONALFIELDS\";\n\n                case \"date_delay\":\n                    $interval = \"MONTH\";\n                    if (isset($searchopt[$ID]['delayunit'])) {\n                        $interval = $searchopt[$ID]['delayunit'];\n                    }\n\n                    $add_minus = '';\n                    if (isset($searchopt[$ID][\"datafields\"][3])) {\n                        $add_minus = \"-`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                    }\n                    if (\n                        $meta\n                        || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                    ) {\n                        return \" GROUP_CONCAT(DISTINCT ADDDATE(`$table$addtable`.`\" .\n                                                            $searchopt[$ID][\"datafields\"][1] . \"`,\n                                                         INTERVAL (`$table$addtable`.`\" .\n                                                                    $searchopt[$ID][\"datafields\"][2] .\n                                                                    \"` $add_minus) $interval)\n                                         SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                           $ADDITONALFIELDS\";\n                    }\n                    return \"ADDDATE(`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][1] . \"`,\n                               INTERVAL (`$table$addtable`.`\" . $searchopt[$ID][\"datafields\"][2] .\n                                          \"` $add_minus) $interval) AS `\" . $NAME . \"`,\n                       $ADDITONALFIELDS\";\n\n                case \"itemlink\":\n                    if (\n                        $meta\n                        || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"])\n                    ) {\n                        $TRANS = '';\n                        if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n                            $TRANS = \"GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocomputetrans, '\" . self::NULLVALUE . \"'),\n                                                             '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid\n                                             SEPARATOR '\" . self::LONGSEP . \"')\n                                     AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n                        }\n\n                        return \" GROUP_CONCAT(DISTINCT CONCAT($tocompute, '\" . self::SHORTSEP . \"' ,\n                                                        `$table$addtable`.`id`) ORDER BY `$table$addtable`.`id`\n                                        SEPARATOR '\" . self::LONGSEP . \"') AS `\" . $NAME . \"`,\n                           $TRANS\n                           $ADDITONALFIELDS\";\n                    }\n                    return \" $tocompute AS `\" . $NAME . \"`,\n                        `$table$addtable`.`id` AS `\" . $NAME . \"_id`,\n                        $ADDITONALFIELDS\";\n            }\n        }\n\n       // Default case\n        if (\n            $meta\n            || (isset($searchopt[$ID][\"forcegroupby\"]) && $searchopt[$ID][\"forcegroupby\"]\n              && (!isset($searchopt[$ID][\"computation\"])\n                  || isset($searchopt[$ID][\"computationgroupby\"])\n                     && $searchopt[$ID][\"computationgroupby\"]))\n        ) { // Not specific computation\n            $TRANS = '';\n            if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n                $TRANS = \"GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocomputetrans, '\" . self::NULLVALUE . \"'),\n                                                   '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"')\n                                  AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n            }\n            return \" GROUP_CONCAT(DISTINCT CONCAT(IFNULL($tocompute, '\" . self::NULLVALUE . \"'),\n                                               '\" . self::SHORTSEP . \"',$tocomputeid) ORDER BY $tocomputeid SEPARATOR '\" . self::LONGSEP . \"')\n                              AS `\" . $NAME . \"`,\n                  $TRANS\n                  $ADDITONALFIELDS\";\n        }\n        $TRANS = '';\n        if (Session::haveTranslations(getItemTypeForTable($table), $field)) {\n            $TRANS = $tocomputetrans . \" AS `\" . $NAME . \"_trans_\" . $field . \"`, \";\n        }\n        return \"$tocompute AS `\" . $NAME . \"`, $TRANS $ADDITONALFIELDS\";\n    }\n\n\n    /**\n     * Generic Function to add default where to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype device type\n     *\n     * @return string Where string\n     **/\n    public static function addDefaultWhere($itemtype)\n    {\n        $condition = '';\n\n        switch ($itemtype) {\n            case 'Reservation':\n                $condition = getEntitiesRestrictRequest(\"\", ReservationItem::getTable(), '', '', true);\n                break;\n\n            case 'Reminder':\n                $condition = Reminder::addVisibilityRestrict();\n                break;\n\n            case 'RSSFeed':\n                $condition = RSSFeed::addVisibilityRestrict();\n                break;\n\n            case 'Notification':\n                if (!Config::canView()) {\n                    $condition = \" `glpi_notifications`.`itemtype` NOT IN ('CronTask', 'DBConnection') \";\n                }\n                break;\n\n           // No link\n            case 'User':\n               // View all entities\n                if (!Session::canViewAllEntities()) {\n                    $condition = getEntitiesRestrictRequest(\"\", \"glpi_profiles_users\", '', '', true);\n                }\n                break;\n\n            case 'ProjectTask':\n                $condition  = '';\n                $teamtable  = 'glpi_projecttaskteams';\n                $condition .= \"`glpi_projects`.`is_template` = 0\";\n                $condition .= \" AND ((`$teamtable`.`itemtype` = 'User'\n                             AND `$teamtable`.`items_id` = '\" . Session::getLoginUserID() . \"')\";\n                if (count($_SESSION['glpigroups'])) {\n                    $condition .= \" OR (`$teamtable`.`itemtype` = 'Group'\n                                    AND `$teamtable`.`items_id`\n                                       IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                }\n                $condition .= \") \";\n                break;\n\n            case 'Project':\n                $condition = '';\n                if (!Session::haveRight(\"project\", Project::READALL)) {\n                    $teamtable  = 'glpi_projectteams';\n                    $condition .= \"(`glpi_projects`.users_id = '\" . Session::getLoginUserID() . \"'\n                               OR (`$teamtable`.`itemtype` = 'User'\n                                   AND `$teamtable`.`items_id` = '\" . Session::getLoginUserID() . \"')\";\n                    if (count($_SESSION['glpigroups'])) {\n                        $condition .= \" OR (`glpi_projects`.`groups_id`\n                                       IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                        $condition .= \" OR (`$teamtable`.`itemtype` = 'Group'\n                                      AND `$teamtable`.`items_id`\n                                          IN (\" . implode(\",\", $_SESSION['glpigroups']) . \"))\";\n                    }\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Ticket':\n               // Same structure in addDefaultJoin\n                $condition = '';\n                if (!Session::haveRight(\"ticket\", Ticket::READALL)) {\n                    $searchopt\n                    = &self::getOptions($itemtype);\n                    $requester_table\n                    = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[4]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $requestergroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[71]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $assign_table\n                     = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[5]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $assigngroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[8]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $observer_table\n                     = '`glpi_tickets_users_' .\n                     self::computeComplexJoinID($searchopt[66]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n                    $observergroup_table\n                     = '`glpi_groups_tickets_' .\n                     self::computeComplexJoinID($searchopt[65]['joinparams']['beforejoin']\n                                                          ['joinparams']) . '`';\n\n                    $condition = \"(\";\n\n                    if (Session::haveRight(\"ticket\", Ticket::READMY)) {\n                          $condition .= \" $requester_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                    OR $observer_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                    OR `glpi_tickets`.`users_id_recipient` = '\" . Session::getLoginUserID() . \"'\";\n                    } else {\n                        $condition .= \"0=1\";\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::READGROUP)) {\n                        if (count($_SESSION['glpigroups'])) {\n                            $condition .= \" OR $requestergroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                            $condition .= \" OR $observergroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                        }\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::OWN)) {// Can own ticket : show assign to me\n                        $condition .= \" OR $assign_table.users_id = '\" . Session::getLoginUserID() . \"' \";\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::READASSIGN)) { // assign to me\n                        $condition .= \" OR $assign_table.`users_id` = '\" . Session::getLoginUserID() . \"'\";\n                        if (count($_SESSION['glpigroups'])) {\n                            $condition .= \" OR $assigngroup_table.`groups_id`\n                                             IN (\" . implode(\",\", $_SESSION['glpigroups']) . \")\";\n                        }\n                        if (Session::haveRight('ticket', Ticket::ASSIGN)) {\n                            $condition .= \" OR `glpi_tickets`.`status`='\" . CommonITILObject::INCOMING . \"'\";\n                        }\n                    }\n\n                    if (\n                        Session::haveRightsOr(\n                            'ticketvalidation',\n                            [TicketValidation::VALIDATEINCIDENT,\n                                TicketValidation::VALIDATEREQUEST\n                            ]\n                        )\n                    ) {\n                        $condition .= \" OR `glpi_ticketvalidations`.`users_id_validate`\n                                          = '\" . Session::getLoginUserID() . \"'\";\n                    }\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Change':\n            case 'Problem':\n                if ($itemtype == 'Change') {\n                    $right       = 'change';\n                    $table       = 'changes';\n                    $groupetable = \"`glpi_changes_groups_\";\n                } else if ($itemtype == 'Problem') {\n                    $right       = 'problem';\n                    $table       = 'problems';\n                    $groupetable = \"`glpi_groups_problems_\";\n                }\n               // Same structure in addDefaultJoin\n                $condition = '';\n                if (!Session::haveRight(\"$right\", $itemtype::READALL)) {\n                    $searchopt       = &self::getOptions($itemtype);\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                        $requester_table      = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[4]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $requestergroup_table = $groupetable .\n                                          self::computeComplexJoinID($searchopt[71]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n\n                        $observer_table       = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[66]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $observergroup_table  = $groupetable .\n                                          self::computeComplexJoinID($searchopt[65]['joinparams']\n                                                                    ['beforejoin']['joinparams']) . '`';\n\n                        $assign_table         = '`glpi_' . $table . '_users_' .\n                                          self::computeComplexJoinID($searchopt[5]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                        $assigngroup_table    = $groupetable .\n                                          self::computeComplexJoinID($searchopt[8]['joinparams']\n                                                                     ['beforejoin']['joinparams']) . '`';\n                    }\n                    $condition = \"(\";\n\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                        $condition .= \" $requester_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR $observer_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR $assign_table.users_id = '\" . Session::getLoginUserID() . \"'\n                                 OR `glpi_\" . $table . \"`.`users_id_recipient` = '\" . Session::getLoginUserID() . \"'\";\n                        if (count($_SESSION['glpigroups'])) {\n                            $my_groups_keys = \"'\" . implode(\"','\", $_SESSION['glpigroups']) . \"'\";\n                            $condition .= \" OR $requestergroup_table.groups_id IN ($my_groups_keys)\n                                 OR $observergroup_table.groups_id IN ($my_groups_keys)\n                                 OR $assigngroup_table.groups_id IN ($my_groups_keys)\";\n                        }\n                    } else {\n                        $condition .= \"0=1\";\n                    }\n\n                    $condition .= \") \";\n                }\n                break;\n\n            case 'Config':\n                $availableContexts = ['core'] + Plugin::getPlugins();\n                $availableContexts = implode(\"', '\", $availableContexts);\n                $condition = \"`context` IN ('$availableContexts')\";\n                break;\n\n            case 'SavedSearch':\n                $condition = SavedSearch::addVisibilityRestrict();\n                break;\n\n            case 'TicketTask':\n               // Filter on is_private\n                $allowed_is_private = [];\n                if (Session::haveRight(TicketTask::$rightname, CommonITILTask::SEEPRIVATE)) {\n                    $allowed_is_private[] = 1;\n                }\n                if (Session::haveRight(TicketTask::$rightname, CommonITILTask::SEEPUBLIC)) {\n                    $allowed_is_private[] = 0;\n                }\n\n               // If the user can't see public and private\n                if (!count($allowed_is_private)) {\n                    $condition = \"0 = 1\";\n                    break;\n                }\n\n                $in = \"IN ('\" . implode(\"','\", $allowed_is_private) . \"')\";\n                $condition = \"(`glpi_tickettasks`.`is_private` $in \";\n\n               // Check for assigned or created tasks\n                $condition .= \"OR `glpi_tickettasks`.`users_id` = \" . Session::getLoginUserID() . \" \";\n                $condition .= \"OR `glpi_tickettasks`.`users_id_tech` = \" . Session::getLoginUserID() . \" \";\n\n               // Check for parent item visibility unless the user can see all the\n               // possible parents\n                if (!Session::haveRight('ticket', Ticket::READALL)) {\n                    $condition .= \"AND \" . TicketTask::buildParentCondition();\n                }\n\n                $condition .= \")\";\n\n                break;\n\n            case 'ITILFollowup':\n               // Filter on is_private\n                $allowed_is_private = [];\n                if (Session::haveRight(ITILFollowup::$rightname, ITILFollowup::SEEPRIVATE)) {\n                    $allowed_is_private[] = 1;\n                }\n                if (Session::haveRight(ITILFollowup::$rightname, ITILFollowup::SEEPUBLIC)) {\n                    $allowed_is_private[] = 0;\n                }\n\n               // If the user can't see public and private\n                if (!count($allowed_is_private)) {\n                    $condition = \"0 = 1\";\n                    break;\n                }\n\n                $in = \"IN ('\" . implode(\"','\", $allowed_is_private) . \"')\";\n                $condition = \"(`glpi_itilfollowups`.`is_private` $in \";\n\n               // Now filter on parent item visiblity\n                $condition .= \"AND (\";\n\n               // Filter for \"ticket\" parents\n                $condition .= ITILFollowup::buildParentCondition(\\Ticket::getType());\n                $condition .= \"OR \";\n\n               // Filter for \"change\" parents\n                $condition .= ITILFollowup::buildParentCondition(\n                    \\Change::getType(),\n                    'changes_id',\n                    \"glpi_changes_users\",\n                    \"glpi_changes_groups\"\n                );\n                $condition .= \"OR \";\n\n               // Fitler for \"problem\" parents\n                $condition .= ITILFollowup::buildParentCondition(\n                    \\Problem::getType(),\n                    'problems_id',\n                    \"glpi_problems_users\",\n                    \"glpi_groups_problems\"\n                );\n                $condition .= \"))\";\n\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $condition = Plugin::doOneHook($plug['plugin'], 'addDefaultWhere', $itemtype);\n                }\n                break;\n        }\n\n       /* Hook to restrict user right on current itemtype */\n        list($itemtype, $condition) = Plugin::doHookFunction('add_default_where', [$itemtype, $condition]);\n        return $condition;\n    }\n\n    /**\n     * Generic Function to add where to a request\n     *\n     * @param string  $link         Link string\n     * @param boolean $nott         Is it a negative search ?\n     * @param string  $itemtype     Item type\n     * @param integer $ID           ID of the item to search\n     * @param string  $searchtype   Searchtype used (equals or contains)\n     * @param string  $val          Item num in the request\n     * @param integer $meta         Is a meta search (meta=2 in search.class.php) (default 0)\n     *\n     * @return string Where string\n     **/\n    public static function addWhere($link, $nott, $itemtype, $ID, $searchtype, $val, $meta = 0)\n    {\n\n        global $DB;\n\n        $searchopt = &self::getOptions($itemtype);\n        if (!isset($searchopt[$ID]['table'])) {\n            return false;\n        }\n        $table     = $searchopt[$ID][\"table\"];\n        $field     = $searchopt[$ID][\"field\"];\n\n        $inittable = $table;\n        $addtable  = '';\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($searchopt[$ID][\"linkfield\"]) == $table\n         && $searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table);\n        $orig_table = self::getOrigTableName($itemtype);\n        if (\n            ($table != 'asset_types')\n            && ($is_fkey_composite_on_self || $table != $orig_table)\n            && ($searchopt[$ID][\"linkfield\"] != getForeignKeyFieldForTable($table))\n        ) {\n            $addtable = \"_\" . $searchopt[$ID][\"linkfield\"];\n            $table   .= $addtable;\n        }\n\n        if (isset($searchopt[$ID]['joinparams'])) {\n            $complexjoin = self::computeComplexJoinID($searchopt[$ID]['joinparams']);\n\n            if (!empty($complexjoin)) {\n                $table .= \"_\" . $complexjoin;\n            }\n        }\n\n        $addmeta = \"\";\n        if (\n            $meta\n            && ($itemtype::getTable() != $inittable)\n        ) {\n            $addmeta = \"_\" . $itemtype;\n            $table .= $addmeta;\n        }\n\n       // Hack to allow search by ID on every sub-table\n        if (preg_match('/^\\$\\$\\$\\$([0-9]+)$/', $val, $regs)) {\n            return $link . \" (`$table`.`id` \" . ($nott ? \"<>\" : \"=\") . $regs[1] . \" \" .\n                         (($regs[1] == 0) ? \" OR `$table`.`id` IS NULL\" : '') . \") \";\n        }\n\n       // Preparse value\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"datetime\":\n                case \"date\":\n                case \"date_delay\":\n                    $force_day = true;\n                    if (\n                        $searchopt[$ID][\"datatype\"] == 'datetime'\n                        && !(strstr($val, 'BEGIN') || strstr($val, 'LAST') || strstr($val, 'DAY'))\n                    ) {\n                        $force_day = false;\n                    }\n\n                    $val = Html::computeGenericDateTimeSearch($val, $force_day);\n\n                    break;\n            }\n        }\n        switch ($searchtype) {\n            case \"notcontains\":\n                $nott = !$nott;\n               //negated, use contains case\n            case \"contains\":\n                if (isset($searchopt[$ID][\"datatype\"]) && ($searchopt[$ID][\"datatype\"] === 'decimal')) {\n                    $matches = [];\n                    if (preg_match('/^(\\d+.?\\d?)/', $val, $matches)) {\n                        $val = $matches[1];\n                        if (!str_contains($val, '.')) {\n                            $val .= '.';\n                        }\n                    }\n                }\n                $SEARCH = self::makeTextSearch($val, $nott);\n                break;\n\n            case \"equals\":\n                if ($nott) {\n                    $SEARCH = \" <> \" . DBmysql::quoteValue($val);\n                } else {\n                    $SEARCH = \" = \" . DBmysql::quoteValue($val);\n                }\n                break;\n\n            case \"notequals\":\n                if ($nott) {\n                    $SEARCH = \" = \" . DBmysql::quoteValue($val);\n                } else {\n                    $SEARCH = \" <> \" . DBmysql::quoteValue($val);\n                }\n                break;\n\n            case \"under\":\n                if ($nott) {\n                    $SEARCH = \" NOT IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                } else {\n                    $SEARCH = \" IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                }\n                break;\n\n            case \"notunder\":\n                if ($nott) {\n                    $SEARCH = \" IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                } else {\n                    $SEARCH = \" NOT IN ('\" . implode(\"','\", getSonsOf($inittable, $val)) . \"')\";\n                }\n                break;\n        }\n\n       //Check in current item if a specific where is defined\n        if (method_exists($itemtype, 'addWhere')) {\n            $out = $itemtype::addWhere($link, $nott, $itemtype, $ID, $searchtype, $val);\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'addWhere',\n                $link,\n                $nott,\n                $itemtype,\n                $ID,\n                $val,\n                $searchtype\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        switch ($inittable . \".\" . $field) {\n           // case \"glpi_users_validation.name\" :\n\n            case \"glpi_users.name\":\n                if ($val == 'myself') {\n                    switch ($searchtype) {\n                        case 'equals':\n                            return \" $link (`$table`.`id` =  \" . $DB->quoteValue($_SESSION['glpiID']) . \") \";\n\n                        case 'notequals':\n                            return \" $link (`$table`.`id` <>  \" . $DB->quoteValue($_SESSION['glpiID']) . \") \";\n                    }\n                }\n\n                if ($itemtype == 'User') { // glpi_users case / not link table\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        $search_str = \"`$table`.`id`\" . $SEARCH;\n\n                        if ($searchtype == 'notequals') {\n                            $nott = !$nott;\n                        }\n\n                        // Add NULL if $val = 0 and not negative search\n                        // Or negative search on real value\n                        if ((!$nott && ($val == 0)) || ($nott && ($val != 0))) {\n                            $search_str .= \" OR `$table`.`id` IS NULL\";\n                        }\n\n                        return \" $link ($search_str)\";\n                    }\n                    return self::makeTextCriteria(\"`$table`.`$field`\", $val, $nott, $link);\n                }\n                if ($_SESSION[\"glpinames_format\"] == User::FIRSTNAME_BEFORE) {\n                    $name1 = 'firstname';\n                    $name2 = 'realname';\n                } else {\n                    $name1 = 'realname';\n                    $name2 = 'firstname';\n                }\n\n                if (in_array($searchtype, ['equals', 'notequals'])) {\n                    return \" $link (`$table`.`id`\" . $SEARCH .\n                               (($val == 0) ? \" OR `$table`.`id` IS\" .\n                                   (($searchtype == \"notequals\") ? \" NOT\" : \"\") . \" NULL\" : '') . ') ';\n                }\n                $toadd   = '';\n\n                $tmplink = 'OR';\n                if ($nott) {\n                    $tmplink = 'AND';\n                }\n\n                if (is_a($itemtype, CommonITILObject::class, true)) {\n                    if (\n                        isset($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"])\n                        && isset($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"joinparams\"])\n                        && (($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                         == 'glpi_tickets_users')\n                        || ($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                             == 'glpi_problems_users')\n                        || ($searchopt[$ID][\"joinparams\"][\"beforejoin\"][\"table\"]\n                             == 'glpi_changes_users'))\n                    ) {\n                        $bj        = $searchopt[$ID][\"joinparams\"][\"beforejoin\"];\n                        $linktable = $bj['table'] . '_' . self::computeComplexJoinID($bj['joinparams']) . $addmeta;\n                       //$toadd     = \"`$linktable`.`alternative_email` $SEARCH $tmplink \";\n                        $toadd     = self::makeTextCriteria(\n                            \"`$linktable`.`alternative_email`\",\n                            $val,\n                            $nott,\n                            $tmplink\n                        );\n                        if ($val == '^$') {\n                             return $link . \" ((`$linktable`.`users_id` IS NULL)\n                            OR `$linktable`.`alternative_email` IS NULL)\";\n                        }\n                    }\n                }\n                $toadd2 = '';\n                if (\n                    $nott\n                    && ($val != 'NULL') && ($val != 'null')\n                ) {\n                    $toadd2 = \" OR `$table`.`$field` IS NULL\";\n                }\n                return $link . \" (((`$table`.`$name1` $SEARCH\n                            $tmplink `$table`.`$name2` $SEARCH\n                            $tmplink `$table`.`$field` $SEARCH\n                            $tmplink CONCAT(`$table`.`$name1`, ' ', `$table`.`$name2`) $SEARCH )\n                            $toadd2) $toadd)\";\n\n            case \"glpi_groups.completename\":\n                if ($val == 'mygroups') {\n                    switch ($searchtype) {\n                        case 'equals':\n                            return \" $link (`$table`.`id` IN ('\" . implode(\n                                \"','\",\n                                $_SESSION['glpigroups']\n                            ) . \"')) \";\n\n                        case 'notequals':\n                            return \" $link (`$table`.`id` NOT IN ('\" . implode(\n                                \"','\",\n                                $_SESSION['glpigroups']\n                            ) . \"')) \";\n\n                        case 'under':\n                             $groups = $_SESSION['glpigroups'];\n                            foreach ($_SESSION['glpigroups'] as $g) {\n                                $groups += getSonsOf($inittable, $g);\n                            }\n                             $groups = array_unique($groups);\n                            return \" $link (`$table`.`id` IN ('\" . implode(\"','\", $groups) . \"')) \";\n\n                        case 'notunder':\n                            $groups = $_SESSION['glpigroups'];\n                            foreach ($_SESSION['glpigroups'] as $g) {\n                                 $groups += getSonsOf($inittable, $g);\n                            }\n                            $groups = array_unique($groups);\n                            return \" $link (`$table`.`id` NOT IN ('\" . implode(\"','\", $groups) . \"')) \";\n                    }\n                }\n                break;\n\n            case \"glpi_auth_tables.name\":\n                $user_searchopt = self::getOptions('User');\n                $tmplink        = 'OR';\n                if ($nott) {\n                    $tmplink = 'AND';\n                }\n                return $link . \" (`glpi_authmails\" . $addtable . \"_\" .\n                              self::computeComplexJoinID($user_searchopt[31]['joinparams']) . $addmeta . \"`.`name`\n                           $SEARCH\n                           $tmplink `glpi_authldaps\" . $addtable . \"_\" .\n                              self::computeComplexJoinID($user_searchopt[30]['joinparams']) . $addmeta . \"`.`name`\n                           $SEARCH ) \";\n\n            case \"glpi_ipaddresses.name\":\n                $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                $replace = [\"<\",\">\"];\n                $val     = preg_replace($search, $replace, $val);\n                if (preg_match(\"/^\\s*([<>])([=]*)[[:space:]]*([0-9\\.]+)/\", $val, $regs)) {\n                    if ($nott) {\n                        if ($regs[1] == '<') {\n                            $regs[1] = '>';\n                        } else {\n                            $regs[1] = '<';\n                        }\n                    }\n                    $regs[1] .= $regs[2];\n                    return $link . \" (INET_ATON(`$table`.`$field`) \" . $regs[1] . \" INET_ATON('\" . $regs[3] . \"')) \";\n                }\n                break;\n\n            case \"glpi_tickets.status\":\n            case \"glpi_problems.status\":\n            case \"glpi_changes.status\":\n                $tocheck = [];\n                if ($item = getItemForItemtype($itemtype)) {\n                    switch ($val) {\n                        case 'process':\n                            $tocheck = $item->getProcessStatusArray();\n                            break;\n\n                        case 'notclosed':\n                            $tocheck = $item->getAllStatusArray();\n                            foreach ($item->getClosedStatusArray() as $status) {\n                                if (isset($tocheck[$status])) {\n                                    unset($tocheck[$status]);\n                                }\n                            }\n                            $tocheck = array_keys($tocheck);\n                            break;\n\n                        case 'old':\n                            $tocheck = array_merge(\n                                $item->getSolvedStatusArray(),\n                                $item->getClosedStatusArray()\n                            );\n                            break;\n\n                        case 'notold':\n                            $tocheck = $item::getNotSolvedStatusArray();\n                            break;\n\n                        case 'all':\n                            $tocheck = array_keys($item->getAllStatusArray());\n                            break;\n                    }\n                }\n\n                if (count($tocheck) == 0) {\n                    $statuses = $item->getAllStatusArray();\n                    if (isset($statuses[$val])) {\n                        $tocheck = [$val];\n                    }\n                }\n\n                if (count($tocheck)) {\n                    if ($nott) {\n                        return $link . \" `$table`.`$field` NOT IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                    }\n                    return $link . \" `$table`.`$field` IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                }\n                break;\n\n            case \"glpi_tickets_tickets.tickets_id_1\":\n                $tmplink = 'OR';\n                $compare = '=';\n                if ($nott) {\n                    $tmplink = 'AND';\n                    $compare = '<>';\n                }\n                $toadd2 = '';\n                if (\n                    $nott\n                    && ($val != 'NULL') && ($val != 'null')\n                ) {\n                    $toadd2 = \" OR `$table`.`$field` IS NULL\";\n                }\n\n                return $link . \" (((`$table`.`tickets_id_1` $compare '$val'\n                              $tmplink `$table`.`tickets_id_2` $compare '$val')\n                             AND `glpi_tickets`.`id` <> '$val')\n                            $toadd2)\";\n\n            case \"glpi_tickets.priority\":\n            case \"glpi_tickets.impact\":\n            case \"glpi_tickets.urgency\":\n            case \"glpi_problems.priority\":\n            case \"glpi_problems.impact\":\n            case \"glpi_problems.urgency\":\n            case \"glpi_changes.priority\":\n            case \"glpi_changes.impact\":\n            case \"glpi_changes.urgency\":\n            case \"glpi_projects.priority\":\n                if (is_numeric($val)) {\n                    if ($val > 0) {\n                        $compare = ($nott ? '<>' : '=');\n                        return $link . \" `$table`.`$field` $compare '$val'\";\n                    }\n                    if ($val < 0) {\n                        $compare = ($nott ? '<' : '>=');\n                        return $link . \" `$table`.`$field` $compare '\" . abs($val) . \"'\";\n                    }\n                   // Show all\n                    $compare = ($nott ? '<' : '>=');\n                    return $link . \" `$table`.`$field` $compare '0' \";\n                }\n                return \"\";\n\n            case \"glpi_tickets.global_validation\":\n            case \"glpi_ticketvalidations.status\":\n            case \"glpi_changes.global_validation\":\n            case \"glpi_changevalidations.status\":\n                if ($val == 'all') {\n                    return \"\";\n                }\n                $tocheck = [];\n                switch ($val) {\n                    case 'can':\n                        $tocheck = CommonITILValidation::getCanValidationStatusArray();\n                        break;\n\n                    case 'all':\n                        $tocheck = CommonITILValidation::getAllValidationStatusArray();\n                        break;\n                }\n                if (count($tocheck) == 0) {\n                    $tocheck = [$val];\n                }\n                if (count($tocheck)) {\n                    if ($nott) {\n                        return $link . \" `$table`.`$field` NOT IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                    }\n                    return $link . \" `$table`.`$field` IN ('\" . implode(\"','\", $tocheck) . \"')\";\n                }\n                break;\n\n            case \"glpi_notifications.event\":\n                if (in_array($searchtype, ['equals', 'notequals']) && strpos($val, self::SHORTSEP)) {\n                    $not = 'notequals' === $searchtype ? 'NOT' : '';\n                    list($itemtype_val, $event_val) = explode(self::SHORTSEP, $val);\n                    return \" $link $not(`$table`.`event` = '$event_val'\n                               AND `$table`.`itemtype` = '$itemtype_val')\";\n                }\n                break;\n        }\n\n       //// Default cases\n\n       // Link with plugin tables\n        if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $inittable, $matches)) {\n            if (count($matches) == 2) {\n                $plug     = $matches[1];\n                $out = Plugin::doOneHook(\n                    $plug,\n                    'addWhere',\n                    $link,\n                    $nott,\n                    $itemtype,\n                    $ID,\n                    $val,\n                    $searchtype\n                );\n                if (!empty($out)) {\n                     return $out;\n                }\n            }\n        }\n\n        $tocompute      = \"`$table`.`$field`\";\n        $tocomputetrans = \"`\" . $table . \"_trans_\" . $field . \"`.`value`\";\n        if (isset($searchopt[$ID][\"computation\"])) {\n            $tocompute = $searchopt[$ID][\"computation\"];\n            $tocompute = str_replace($DB->quoteName('TABLE'), 'TABLE', $tocompute);\n            $tocompute = str_replace(\"TABLE\", $DB->quoteName(\"$table\"), $tocompute);\n        }\n\n       // Preformat items\n        if (isset($searchopt[$ID][\"datatype\"])) {\n            if ($searchopt[$ID][\"datatype\"] == \"mio\") {\n                // Parse value as it may contain a few different formats\n                $val = Toolbox::getMioSizeFromString($val);\n            }\n\n            switch ($searchopt[$ID][\"datatype\"]) {\n                case \"itemtypename\":\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        return \" $link (`$table`.`$field`\" . $SEARCH . ') ';\n                    }\n                    break;\n\n                case \"itemlink\":\n                    if (in_array($searchtype, ['equals', 'notequals', 'under', 'notunder'])) {\n                        return \" $link (`$table`.`id`\" . $SEARCH . ') ';\n                    }\n                    break;\n\n                case \"datetime\":\n                case \"date\":\n                case \"date_delay\":\n                    if ($searchopt[$ID][\"datatype\"] == 'datetime') {\n                       // Specific search for datetime\n                        if (in_array($searchtype, ['equals', 'notequals'])) {\n                             $val = preg_replace(\"/:00$/\", '', $val);\n                             $val = '^' . $val;\n                            if ($searchtype == 'notequals') {\n                                $nott = !$nott;\n                            }\n                            return self::makeTextCriteria(\"`$table`.`$field`\", $val, $nott, $link);\n                        }\n                    }\n                    if ($searchtype == 'lessthan') {\n                        $val = '<' . $val;\n                    }\n                    if ($searchtype == 'morethan') {\n                        $val = '>' . $val;\n                    }\n                    if ($searchtype) {\n                        $date_computation = $tocompute;\n                    }\n                    if (in_array($searchtype, [\"contains\", \"notcontains\"])) {\n                        $default_charset = DBConnection::getDefaultCharset();\n                        $date_computation = \"CONVERT($date_computation USING {$default_charset})\";\n                    }\n                    $search_unit = ' MONTH ';\n                    if (isset($searchopt[$ID]['searchunit'])) {\n                        $search_unit = $searchopt[$ID]['searchunit'];\n                    }\n                    if ($searchopt[$ID][\"datatype\"] == \"date_delay\") {\n                        $delay_unit = ' MONTH ';\n                        if (isset($searchopt[$ID]['delayunit'])) {\n                            $delay_unit = $searchopt[$ID]['delayunit'];\n                        }\n                        $add_minus = '';\n                        if (isset($searchopt[$ID][\"datafields\"][3])) {\n                            $add_minus = \"-`$table`.`\" . $searchopt[$ID][\"datafields\"][3] . \"`\";\n                        }\n                        $date_computation = \"ADDDATE(`$table`.\" . $searchopt[$ID][\"datafields\"][1] . \",\n                                               INTERVAL (`$table`.\" . $searchopt[$ID][\"datafields\"][2] . \"\n                                                         $add_minus)\n                                               $delay_unit)\";\n                    }\n                    if (in_array($searchtype, ['equals', 'notequals'])) {\n                        return \" $link ($date_computation \" . $SEARCH . ') ';\n                    }\n                    $search  = [\"/\\&lt;/\",\"/\\&gt;/\"];\n                    $replace = [\"<\",\">\"];\n                    $val     = preg_replace($search, $replace, $val);\n                    if (preg_match(\"/^\\s*([<>=]+)(.*)/\", $val, $regs)) {\n                        if (is_numeric($regs[2])) {\n                            return $link . \" $date_computation \" . $regs[1] . \"\n                            ADDDATE(NOW(), INTERVAL \" . $regs[2] . \" $search_unit) \";\n                        }\n                       // ELSE Reformat date if needed\n                        $regs[2] = preg_replace(\n                            '@(\\d{1,2})(-|/)(\\d{1,2})(-|/)(\\d{4})@',\n                            '\\5-\\3-\\1',\n                            $regs[2]\n                        );\n                        if (preg_match('/[0-9]{2,4}-[0-9]{1,2}-[0-9]{1,2}/', $regs[2])) {\n                             $ret = $link;\n                            if ($nott) {\n                                $ret .= \" NOT(\";\n                            }\n                             $ret .= \" $date_computation {$regs[1]} '{$regs[2]}'\";\n                            if ($nott) {\n                                $ret .= \")\";\n                            }\n                            return $ret;\n                        }\n                        return \"\";\n                    }\n                   // ELSE standard search\n                   // Date format modification if needed\n                    $val = preg_replace('@(\\d{1,2})(-|/)(\\d{1,2})(-|/)(\\d{4})@', '\\5-\\3-\\1', $val);\n                    if ($date_computation) {\n                        return self::makeTextCriteria($date_computation, $val, $nott, $link);\n                    }\n                    return '';\n\n                case \"right\":\n                    if ($searchtype == 'notequals') {\n                        $nott = !$nott;\n                    }\n                    return $link . ($nott ? ' NOT' : '') . \" ($tocompute & '$val') \";\n\n                case \"bool\":\n                    if (!is_numeric($val)) {\n                        if (strcasecmp($val, __('No')) == 0) {\n                             $val = 0;\n                        } else if (strcasecmp($val, __('Yes')) == 0) {\n                            $val = 1;\n                        }\n                    }\n                   // No break here : use number comparaison case\n\n                case \"count\":\n                case \"mio\":\n                case \"number\":\n                case \"decimal\":\n                case \"timestamp\":\n                case \"progressbar\":\n                    $decimal_contains = $searchopt[$ID][\"datatype\"] === 'decimal' && $searchtype === 'contains';\n                    $search  = [\"/\\&lt;/\", \"/\\&gt;/\"];\n                    $replace = [\"<\", \">\"];\n                    $val     = preg_replace($search, $replace, $val);\n\n                    if (preg_match(\"/([<>])([=]*)[[:space:]]*([0-9]+)/\", $val, $regs)) {\n                        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n                            $nott = !$nott;\n                        }\n                        if ($nott) {\n                            if ($regs[1] == '<') {\n                                $regs[1] = '>';\n                            } else {\n                                $regs[1] = '<';\n                            }\n                        }\n                        $regs[1] .= $regs[2];\n                        return $link . \" ($tocompute \" . $regs[1] . \" \" . $regs[3] . \") \";\n                    }\n\n                    if (is_numeric($val) && !$decimal_contains) {\n                        $numeric_val = floatval($val);\n\n                        if (in_array($searchtype, [\"notequals\", \"notcontains\"])) {\n                            $nott = !$nott;\n                        }\n\n                        if (isset($searchopt[$ID][\"width\"])) {\n                            $ADD = \"\";\n                            if (\n                                $nott\n                                && ($val != 'NULL') && ($val != 'null')\n                            ) {\n                                $ADD = \" OR $tocompute IS NULL\";\n                            }\n                            if ($nott) {\n                                return $link . \" ($tocompute < \" . ($numeric_val - $searchopt[$ID][\"width\"]) . \"\n                                        OR $tocompute > \" . ($numeric_val + $searchopt[$ID][\"width\"]) . \"\n                                        $ADD) \";\n                            }\n                            return $link . \" (($tocompute >= \" . ($numeric_val - $searchopt[$ID][\"width\"]) . \"\n                                      AND $tocompute <= \" . ($numeric_val + $searchopt[$ID][\"width\"]) . \")\n                                     $ADD) \";\n                        }\n                        if (!$nott) {\n                            return \" $link ($tocompute = $numeric_val) \";\n                        }\n                        return \" $link ($tocompute <> $numeric_val) \";\n                    }\n                    break;\n            }\n        }\n\n       // Default case\n        if (in_array($searchtype, ['equals', 'notequals','under', 'notunder'])) {\n            if (\n                (!isset($searchopt[$ID]['searchequalsonfield'])\n                || !$searchopt[$ID]['searchequalsonfield'])\n                && ($itemtype == AllAssets::getType()\n                || $table != $itemtype::getTable())\n            ) {\n                $out = \" $link (`$table`.`id`\" . $SEARCH;\n            } else {\n                $out = \" $link (`$table`.`$field`\" . $SEARCH;\n            }\n            if ($searchtype == 'notequals') {\n                $nott = !$nott;\n            }\n           // Add NULL if $val = 0 and not negative search\n           // Or negative search on real value\n            if (\n                (!$nott && ($val == 0))\n                || ($nott && ($val != 0))\n            ) {\n                $out .= \" OR `$table`.`id` IS NULL\";\n            }\n            $out .= ')';\n            return $out;\n        }\n        $transitemtype = getItemTypeForTable($inittable);\n        if (Session::haveTranslations($transitemtype, $field)) {\n            return \" $link (\" . self::makeTextCriteria($tocompute, $val, $nott, '') . \"\n                          OR \" . self::makeTextCriteria($tocomputetrans, $val, $nott, '') . \")\";\n        }\n\n        return self::makeTextCriteria($tocompute, $val, $nott, $link);\n    }\n\n\n    /**\n     * Generic Function to add Default left join to a request\n     *\n     * @param class-string<CommonDBTM> $itemtype Reference item type\n     * @param string $ref_table            Reference table\n     * @param array &$already_link_tables  Array of tables already joined\n     *\n     * @return string Left join string\n     **/\n    public static function addDefaultJoin($itemtype, $ref_table, array &$already_link_tables)\n    {\n        $out = '';\n\n        switch ($itemtype) {\n           // No link\n            case 'User':\n                $out = self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_profiles_users\",\n                    \"profiles_users_id\",\n                    0,\n                    0,\n                    ['jointype' => 'child']\n                );\n                break;\n\n            case 'Reservation':\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    ReservationItem::getTable(),\n                    ReservationItem::getForeignKeyField(),\n                );\n                break;\n\n            case 'Reminder':\n                $out = Reminder::addVisibilityJoins();\n                break;\n\n            case 'RSSFeed':\n                $out = RSSFeed::addVisibilityJoins();\n                break;\n\n            case 'ProjectTask':\n               // Same structure in addDefaultWhere\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_projects\",\n                    \"projects_id\"\n                );\n                $out .= self::addLeftJoin(\n                    $itemtype,\n                    $ref_table,\n                    $already_link_tables,\n                    \"glpi_projecttaskteams\",\n                    \"projecttaskteams_id\",\n                    0,\n                    0,\n                    ['jointype' => 'child']\n                );\n                break;\n\n            case 'Project':\n               // Same structure in addDefaultWhere\n                if (!Session::haveRight(\"project\", Project::READALL)) {\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_projectteams\",\n                        \"projectteams_id\",\n                        0,\n                        0,\n                        ['jointype' => 'child']\n                    );\n                }\n                break;\n\n            case 'Ticket':\n               // Same structure in addDefaultWhere\n                if (!Session::haveRight(\"ticket\", Ticket::READALL)) {\n                    $searchopt = &self::getOptions($itemtype);\n\n                   // show mine : requester\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_tickets_users\",\n                        \"tickets_users_id\",\n                        0,\n                        0,\n                        $searchopt[4]['joinparams']['beforejoin']['joinparams']\n                    );\n\n                    if (Session::haveRight(\"ticket\", Ticket::READGROUP)) {\n                        if (count($_SESSION['glpigroups'])) {\n                            $out .= self::addLeftJoin(\n                                $itemtype,\n                                $ref_table,\n                                $already_link_tables,\n                                \"glpi_groups_tickets\",\n                                \"groups_tickets_id\",\n                                0,\n                                0,\n                                $searchopt[71]['joinparams']['beforejoin']\n                                ['joinparams']\n                            );\n                        }\n                    }\n\n                   // show mine : observer\n                    $out .= self::addLeftJoin(\n                        $itemtype,\n                        $ref_table,\n                        $already_link_tables,\n                        \"glpi_tickets_users\",\n                        \"tickets_users_id\",\n                        0,\n                        0,\n                        $searchopt[66]['joinparams']['beforejoin']['joinparams']\n                    );\n\n                    if (count($_SESSION['glpigroups'])) {\n                           $out .= self::addLeftJoin(\n                               $itemtype,\n                               $ref_table,\n                               $already_link_tables,\n                               \"glpi_groups_tickets\",\n                               \"groups_tickets_id\",\n                               0,\n                               0,\n                               $searchopt[65]['joinparams']['beforejoin']['joinparams']\n                           );\n                    }\n\n                    if (Session::haveRight(\"ticket\", Ticket::OWN)) { // Can own ticket : show assign to me\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_tickets_users\",\n                            \"tickets_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n                    }\n\n                    if (Session::haveRightsOr(\"ticket\", [Ticket::READMY, Ticket::READASSIGN])) { // show mine + assign to me\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_tickets_users\",\n                            \"tickets_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  \"glpi_groups_tickets\",\n                                  \"groups_tickets_id\",\n                                  0,\n                                  0,\n                                  $searchopt[8]['joinparams']['beforejoin']\n                                  ['joinparams']\n                              );\n                        }\n                    }\n\n                    if (\n                        Session::haveRightsOr(\n                            'ticketvalidation',\n                            [TicketValidation::VALIDATEINCIDENT,\n                                TicketValidation::VALIDATEREQUEST\n                            ]\n                        )\n                    ) {\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_ticketvalidations\",\n                            \"ticketvalidations_id\",\n                            0,\n                            0,\n                            $searchopt[58]['joinparams']['beforejoin']['joinparams']\n                        );\n                    }\n                }\n                break;\n\n            case 'Change':\n            case 'Problem':\n                if ($itemtype == 'Change') {\n                    $right       = 'change';\n                    $table       = 'changes';\n                    $groupetable = \"glpi_changes_groups\";\n                    $linkfield   = \"changes_groups_id\";\n                } else if ($itemtype == 'Problem') {\n                    $right       = 'problem';\n                    $table       = 'problems';\n                    $groupetable = \"glpi_groups_problems\";\n                    $linkfield   = \"groups_problems_id\";\n                }\n\n               // Same structure in addDefaultWhere\n                $out = '';\n                if (!Session::haveRight(\"$right\", $itemtype::READALL)) {\n                    $searchopt = &self::getOptions($itemtype);\n\n                    if (Session::haveRight(\"$right\", $itemtype::READMY)) {\n                       // show mine : requester\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[4]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[71]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n\n                       // show mine : observer\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[66]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[65]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n\n                       // show mine : assign\n                        $out .= self::addLeftJoin(\n                            $itemtype,\n                            $ref_table,\n                            $already_link_tables,\n                            \"glpi_\" . $table . \"_users\",\n                            $table . \"_users_id\",\n                            0,\n                            0,\n                            $searchopt[5]['joinparams']['beforejoin']['joinparams']\n                        );\n                        if (count($_SESSION['glpigroups'])) {\n                              $out .= self::addLeftJoin(\n                                  $itemtype,\n                                  $ref_table,\n                                  $already_link_tables,\n                                  $groupetable,\n                                  $linkfield,\n                                  0,\n                                  0,\n                                  $searchopt[8]['joinparams']['beforejoin']['joinparams']\n                              );\n                        }\n                    }\n                }\n                break;\n\n            default:\n               // Plugin can override core definition for its type\n                if ($plug = isPluginItemType($itemtype)) {\n                    $plugin_name   = $plug['plugin'];\n                    $hook_function = 'plugin_' . strtolower($plugin_name) . '_addDefaultJoin';\n                    $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, &$already_link_tables) {\n                        if (is_callable($hook_function)) {\n                              return $hook_function($itemtype, $ref_table, $already_link_tables);\n                        }\n                    };\n                    $out = Plugin::doOneHook($plugin_name, $hook_closure);\n                }\n                break;\n        }\n\n        list($itemtype, $out) = Plugin::doHookFunction('add_default_join', [$itemtype, $out]);\n        return $out;\n    }\n\n\n    /**\n     * Generic Function to add left join to a request\n     *\n     * @param string  $itemtype             Item type\n     * @param string  $ref_table            Reference table\n     * @param array   $already_link_tables  Array of tables already joined\n     * @param string  $new_table            New table to join\n     * @param string  $linkfield            Linkfield for LeftJoin\n     * @param boolean $meta                 Is it a meta item ? (default 0)\n     * @param integer $meta_type            Meta type table (default 0)\n     * @param array   $joinparams           Array join parameters (condition / joinbefore...)\n     * @param string  $field                Field to display (needed for translation join) (default '')\n     *\n     * @return string Left join string\n     **/\n    public static function addLeftJoin(\n        $itemtype,\n        $ref_table,\n        array &$already_link_tables,\n        $new_table,\n        $linkfield,\n        $meta = 0,\n        $meta_type = 0,\n        $joinparams = [],\n        $field = ''\n    ) {\n\n       // Rename table for meta left join\n        $AS = \"\";\n        $nt = $new_table;\n        $cleannt    = $nt;\n\n       // Virtual field no link\n        if (strpos($linkfield, '_virtual') === 0) {\n            return '';\n        }\n\n        $complexjoin = self::computeComplexJoinID($joinparams);\n\n        $is_fkey_composite_on_self = getTableNameForForeignKeyField($linkfield) == $ref_table\n         && $linkfield != getForeignKeyFieldForTable($ref_table);\n\n       // Auto link\n        if (\n            ($ref_table == $new_table)\n            && empty($complexjoin)\n            && !$is_fkey_composite_on_self\n        ) {\n            $transitemtype = getItemTypeForTable($new_table);\n            if (Session::haveTranslations($transitemtype, $field)) {\n                $transAS            = $nt . '_trans_' . $field;\n                return self::joinDropdownTranslations(\n                    $transAS,\n                    $nt,\n                    $transitemtype,\n                    $field\n                );\n            }\n            return \"\";\n        }\n\n       // Multiple link possibilies case\n        if (!empty($linkfield) && ($linkfield != getForeignKeyFieldForTable($new_table))) {\n            $nt .= \"_\" . $linkfield;\n            $AS  = \" AS `$nt`\";\n        }\n\n        if (!empty($complexjoin)) {\n            $nt .= \"_\" . $complexjoin;\n            $AS  = \" AS `$nt`\";\n        }\n\n        $addmetanum = \"\";\n        $rt         = $ref_table;\n        $cleanrt    = $rt;\n        if ($meta && $meta_type::getTable() != $new_table) {\n            $addmetanum = \"_\" . $meta_type;\n            $AS         = \" AS `$nt$addmetanum`\";\n            $nt         = $nt . $addmetanum;\n        }\n\n       // Do not take into account standard linkfield\n        $tocheck = $nt . \".\" . $linkfield;\n        if ($linkfield == getForeignKeyFieldForTable($new_table)) {\n            $tocheck = $nt;\n        }\n\n        if (in_array($tocheck, $already_link_tables)) {\n            return \"\";\n        }\n        array_push($already_link_tables, $tocheck);\n\n        $specific_leftjoin = '';\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $plugin_name   = $plug['plugin'];\n            $hook_function = 'plugin_' . strtolower($plugin_name) . '_addLeftJoin';\n            $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, $new_table, $linkfield, &$already_link_tables) {\n                if (is_callable($hook_function)) {\n                      return $hook_function($itemtype, $ref_table, $new_table, $linkfield, $already_link_tables);\n                }\n            };\n            $specific_leftjoin = Plugin::doOneHook($plugin_name, $hook_closure);\n        }\n\n       // Link with plugin tables : need to know left join structure\n        if (\n            empty($specific_leftjoin)\n            && preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $new_table, $matches)\n        ) {\n            if (count($matches) == 2) {\n                $plugin_name   = $matches[1];\n                $hook_function = 'plugin_' . strtolower($plugin_name) . '_addLeftJoin';\n                $hook_closure  = function () use ($hook_function, $itemtype, $ref_table, $new_table, $linkfield, &$already_link_tables) {\n                    if (is_callable($hook_function)) {\n                          return $hook_function($itemtype, $ref_table, $new_table, $linkfield, $already_link_tables);\n                    }\n                };\n                $specific_leftjoin = Plugin::doOneHook($plugin_name, $hook_closure);\n            }\n        }\n        if (!empty($linkfield)) {\n            $before = '';\n\n            if (isset($joinparams['beforejoin']) && is_array($joinparams['beforejoin'])) {\n                if (isset($joinparams['beforejoin']['table'])) {\n                    $joinparams['beforejoin'] = [$joinparams['beforejoin']];\n                }\n\n                foreach ($joinparams['beforejoin'] as $tab) {\n                    if (isset($tab['table'])) {\n                        $intertable = $tab['table'];\n                        if (isset($tab['linkfield'])) {\n                            $interlinkfield = $tab['linkfield'];\n                        } else {\n                            $interlinkfield = getForeignKeyFieldForTable($intertable);\n                        }\n\n                        $interjoinparams = [];\n                        if (isset($tab['joinparams'])) {\n                             $interjoinparams = $tab['joinparams'];\n                        }\n                        $before .= self::addLeftJoin(\n                            $itemtype,\n                            $rt,\n                            $already_link_tables,\n                            $intertable,\n                            $interlinkfield,\n                            $meta,\n                            $meta_type,\n                            $interjoinparams\n                        );\n                    }\n\n                   // No direct link with the previous joins\n                    if (!isset($tab['joinparams']['nolink']) || !$tab['joinparams']['nolink']) {\n                        $cleanrt     = $intertable;\n                        $complexjoin = self::computeComplexJoinID($interjoinparams);\n                        if (!empty($interlinkfield) && ($interlinkfield != getForeignKeyFieldForTable($intertable))) {\n                            $intertable .= \"_\" . $interlinkfield;\n                        }\n                        if (!empty($complexjoin)) {\n                            $intertable .= \"_\" . $complexjoin;\n                        }\n                        if ($meta && $meta_type::getTable() != $cleanrt) {\n                            $intertable .= \"_\" . $meta_type;\n                        }\n                        $rt = $intertable;\n                    }\n                }\n            }\n\n            $addcondition = '';\n            if (isset($joinparams['condition'])) {\n                $condition = $joinparams['condition'];\n                if (is_array($condition)) {\n                    $it = new DBmysqlIterator(null);\n                    $condition = ' AND ' . $it->analyseCrit($condition);\n                }\n                $from         = [\"`REFTABLE`\", \"REFTABLE\", \"`NEWTABLE`\", \"NEWTABLE\"];\n                $to           = [\"`$rt`\", \"`$rt`\", \"`$nt`\", \"`$nt`\"];\n                $addcondition = str_replace($from, $to, $condition);\n                $addcondition = $addcondition . \" \";\n            }\n\n            if (!isset($joinparams['jointype'])) {\n                $joinparams['jointype'] = 'standard';\n            }\n\n            if (empty($specific_leftjoin)) {\n                switch ($new_table) {\n                   // No link\n                    case \"glpi_auth_tables\":\n                         $user_searchopt     = self::getOptions('User');\n\n                         $specific_leftjoin  = self::addLeftJoin(\n                             $itemtype,\n                             $rt,\n                             $already_link_tables,\n                             \"glpi_authldaps\",\n                             'auths_id',\n                             0,\n                             0,\n                             $user_searchopt[30]['joinparams']\n                         );\n                           $specific_leftjoin .= self::addLeftJoin(\n                               $itemtype,\n                               $rt,\n                               $already_link_tables,\n                               \"glpi_authmails\",\n                               'auths_id',\n                               0,\n                               0,\n                               $user_searchopt[31]['joinparams']\n                           );\n                        break;\n                }\n            }\n\n            if (empty($specific_leftjoin)) {\n                switch ($joinparams['jointype']) {\n                    case 'child':\n                        $linkfield = getForeignKeyFieldForTable($cleanrt);\n                        if (isset($joinparams['linkfield'])) {\n                            $linkfield = $joinparams['linkfield'];\n                        }\n\n                        // Child join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                             ON (`$rt`.`id` = `$nt`.`$linkfield`\n                                                 $addcondition)\";\n                        break;\n\n                    case 'item_item':\n                       // Item_Item join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON ((`$rt`.`id`\n                                                = `$nt`.`\" . getForeignKeyFieldForTable($cleanrt) . \"_1`\n                                               OR `$rt`.`id`\n                                                 = `$nt`.`\" . getForeignKeyFieldForTable($cleanrt) . \"_2`)\n                                              $addcondition)\";\n                        break;\n\n                    case 'item_item_revert':\n                       // Item_Item join reverting previous item_item\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON ((`$nt`.`id`\n                                                = `$rt`.`\" . getForeignKeyFieldForTable($cleannt) . \"_1`\n                                               OR `$nt`.`id`\n                                                 = `$rt`.`\" . getForeignKeyFieldForTable($cleannt) . \"_2`)\n                                              $addcondition)\";\n                        break;\n\n                    case \"mainitemtype_mainitem\":\n                        $addmain = 'main';\n                       //addmain defined to be used in itemtype_item case\n\n                    case \"itemtype_item\":\n                        if (!isset($addmain)) {\n                            $addmain = '';\n                        }\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$rt`.`id` = `$nt`.`\" . $addmain . \"items_id`\n                                              AND `$nt`.`\" . $addmain . \"itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    case \"itemtype_item_revert\":\n                        if (!isset($addmain)) {\n                            $addmain = '';\n                        }\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$nt`.`id` = `$rt`.`\" . $addmain . \"items_id`\n                                              AND `$rt`.`\" . $addmain . \"itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    case \"itemtypeonly\":\n                        $used_itemtype = $itemtype;\n                        if (\n                            isset($joinparams['specific_itemtype'])\n                            && !empty($joinparams['specific_itemtype'])\n                        ) {\n                            $used_itemtype = $joinparams['specific_itemtype'];\n                        }\n                       // Itemtype join\n                        $specific_leftjoin = \" LEFT JOIN `$new_table` $AS\n                                          ON (`$nt`.`itemtype` = '$used_itemtype'\n                                              $addcondition) \";\n                        break;\n\n                    default:\n                       // Standard join\n                        $specific_leftjoin = \"LEFT JOIN `$new_table` $AS\n                                          ON (`$rt`.`$linkfield` = `$nt`.`id`\n                                              $addcondition)\";\n                        $transitemtype = getItemTypeForTable($new_table);\n                        if (Session::haveTranslations($transitemtype, $field)) {\n                            $transAS            = $nt . '_trans_' . $field;\n                            $specific_leftjoin .= self::joinDropdownTranslations(\n                                $transAS,\n                                $nt,\n                                $transitemtype,\n                                $field\n                            );\n                        }\n                        break;\n                }\n            }\n            return $before . $specific_leftjoin;\n        }\n\n        return '';\n    }\n\n\n    /**\n     * Generic Function to add left join for meta items\n     *\n     * @param string $from_type             Reference item type ID\n     * @param string $to_type               Item type to add\n     * @param array  $already_link_tables2  Array of tables already joined\n     *showGenericSearch\n     * @return string Meta Left join string\n     **/\n    public static function addMetaLeftJoin(\n        $from_type,\n        $to_type,\n        array &$already_link_tables2,\n        $joinparams = []\n    ) {\n        global $CFG_GLPI;\n\n        $from_referencetype = self::getMetaReferenceItemtype($from_type);\n\n        $LINK = \" LEFT JOIN \";\n\n        $from_table = $from_type::getTable();\n        $from_fk    = getForeignKeyFieldForTable($from_table);\n        $to_table   = $to_type::getTable();\n        $to_fk      = getForeignKeyFieldForTable($to_table);\n\n        $to_obj        = getItemForItemtype($to_type);\n        $to_entity_restrict = $to_obj->isField('entities_id') ? getEntitiesRestrictRequest('AND', $to_table) : '';\n\n        $complexjoin = self::computeComplexJoinID($joinparams);\n        $alias_suffix = ($complexjoin != '' ? '_' . $complexjoin : '') . '_' . $to_type;\n\n        $JOIN = \"\";\n\n       // Specific JOIN\n        if ($from_referencetype === 'Software' && in_array($to_type, $CFG_GLPI['software_types'])) {\n           // From Software to software_types\n            $softwareversions_table = \"glpi_softwareversions{$alias_suffix}\";\n            if (!in_array($softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwareversions_table);\n                $JOIN .= \"$LINK `glpi_softwareversions` AS `$softwareversions_table`\n                         ON (`$softwareversions_table`.`softwares_id` = `$from_table`.`id`) \";\n            }\n            $items_softwareversions_table = \"glpi_items_softwareversions_{$alias_suffix}\";\n            if (!in_array($items_softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_softwareversions_table);\n                $JOIN .= \"$LINK `glpi_items_softwareversions` AS `$items_softwareversions_table`\n                         ON (`$items_softwareversions_table`.`softwareversions_id` = `$softwareversions_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$to_type'\n                             AND `$items_softwareversions_table`.`is_deleted` = 0) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_softwareversions_table`.`items_id` = `$to_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Software' && in_array($from_referencetype, $CFG_GLPI['software_types'])) {\n           // From software_types to Software\n            $items_softwareversions_table = \"glpi_items_softwareversions{$alias_suffix}\";\n            if (!in_array($items_softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_softwareversions_table);\n                $JOIN .= \"$LINK `glpi_items_softwareversions` AS `$items_softwareversions_table`\n                         ON (`$items_softwareversions_table`.`items_id` = `$from_table`.`id`\n                             AND `$items_softwareversions_table`.`itemtype` = '$from_type'\n                             AND `$items_softwareversions_table`.`is_deleted` = 0) \";\n            }\n            $softwareversions_table = \"glpi_softwareversions{$alias_suffix}\";\n            if (!in_array($softwareversions_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwareversions_table);\n                $JOIN .= \"$LINK `glpi_softwareversions` AS `$softwareversions_table`\n                         ON (`$items_softwareversions_table`.`softwareversions_id` = `$softwareversions_table`.`id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$softwareversions_table`.`softwares_id` = `$to_table`.`id`) \";\n            }\n            $softwarelicenses_table = \"glpi_softwarelicenses{$alias_suffix}\";\n            if (!in_array($softwarelicenses_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $softwarelicenses_table);\n                $JOIN .= \"$LINK `glpi_softwarelicenses` AS `$softwarelicenses_table`\n                        ON ($to_table.`id` = `$softwarelicenses_table`.`softwares_id`\"\n                          . getEntitiesRestrictRequest(' AND', $softwarelicenses_table, '', '', true) . \") \";\n            }\n            return $JOIN;\n        }\n\n        if ($from_referencetype === 'Budget' && in_array($to_type, $CFG_GLPI['infocom_types'])) {\n           // From Budget to infocom_types\n            $infocom_alias = \"glpi_infocoms{$alias_suffix}\";\n            if (!in_array($infocom_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $infocom_alias);\n                $JOIN .= \"$LINK `glpi_infocoms` AS `$infocom_alias`\n                         ON (`$from_table`.`id` = `$infocom_alias`.`budgets_id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$to_table`.`id` = `$infocom_alias`.`items_id`\n                             AND `$infocom_alias`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Budget' && in_array($from_referencetype, $CFG_GLPI['infocom_types'])) {\n           // From infocom_types to Budget\n            $infocom_alias = \"glpi_infocoms{$alias_suffix}\";\n            if (!in_array($infocom_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $infocom_alias);\n                $JOIN .= \"$LINK `glpi_infocoms` AS `$infocom_alias`\n                         ON (`$from_table`.`id` = `$infocom_alias`.`items_id`\n                             AND `$infocom_alias`.`itemtype` = '$from_type') \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$infocom_alias`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($from_referencetype === 'Reservation' && in_array($to_type, $CFG_GLPI['reservation_types'])) {\n           // From Reservation to reservation_types\n            $reservationitems_alias = \"glpi_reservationitems{$alias_suffix}\";\n            if (!in_array($reservationitems_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $reservationitems_alias);\n                $JOIN .= \"$LINK `glpi_reservationitems` AS `$reservationitems_alias`\n                         ON (`$from_table`.`reservationitems_id` = `$reservationitems_alias`.`id`) \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$to_table`.`id` = `$reservationitems_alias`.`items_id`\n                             AND `$reservationitems_alias`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n        if ($to_type === 'Reservation' && in_array($from_referencetype, $CFG_GLPI['reservation_types'])) {\n           // From reservation_types to Reservation\n            $reservationitems_alias = \"glpi_reservationitems{$alias_suffix}\";\n            if (!in_array($reservationitems_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $reservationitems_alias);\n                $JOIN .= \"$LINK `glpi_reservationitems` AS `$reservationitems_alias`\n                         ON (`$from_table`.`id` = `$reservationitems_alias`.`items_id`\n                             AND `$reservationitems_alias`.`itemtype` = '$from_type') \";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$reservationitems_alias`.`id` = `$to_table`.`reservationitems_id`\n                             $to_entity_restrict) \";\n            }\n            return $JOIN;\n        }\n\n       // Generic JOIN\n        $from_obj      = getItemForItemtype($from_referencetype);\n        $from_item_obj = null;\n        $to_obj        = getItemForItemtype($to_type);\n        $to_item_obj   = null;\n        if (self::isPossibleMetaSubitemOf($from_referencetype, $to_type)) {\n            $from_item_obj = getItemForItemtype($from_referencetype . '_Item');\n            if (!$from_item_obj) {\n                $from_item_obj = getItemForItemtype('Item_' . $from_referencetype);\n            }\n        }\n        if (self::isPossibleMetaSubitemOf($to_type, $from_referencetype)) {\n            $to_item_obj   = getItemForItemtype($to_type . '_Item');\n            if (!$to_item_obj) {\n                $to_item_obj = getItemForItemtype('Item_' . $to_type);\n            }\n        }\n\n        if ($from_obj && $from_obj->isField($to_fk)) {\n           // $from_table has a foreign key corresponding to $to_table\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_obj && $to_obj->isField($from_fk)) {\n           // $to_table has a foreign key corresponding to $from_table\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`id` = `$to_table`.`$from_fk`\n                             $to_entity_restrict) \";\n            }\n        } else if ($from_obj && $from_obj->isField('itemtype') && $from_obj->isField('items_id')) {\n           // $from_table has items_id/itemtype fields\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`items_id` = `$to_table`.`id`\n                             AND `$from_table`.`itemtype` = '$to_type'\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_obj && $to_obj->isField('itemtype') && $to_obj->isField('items_id')) {\n           // $to_table has items_id/itemtype fields\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$from_table`.`id` = `$to_table`.`items_id`\n                             AND `$to_table`.`itemtype` = '$from_type'\n                             $to_entity_restrict) \";\n            }\n        } else if ($from_item_obj && $from_item_obj->isField($from_fk)) {\n           // glpi_$from_items table exists and has a foreign key corresponding to $to_table\n            $items_table = $from_item_obj::getTable();\n            $items_table_alias = $items_table . $alias_suffix;\n            if (!in_array($items_table_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_table_alias);\n                $deleted = $from_item_obj->isField('is_deleted') ? \"AND `$items_table_alias`.`is_deleted` = 0\" : \"\";\n                $JOIN .= \"$LINK `$items_table` AS `$items_table_alias`\n                         ON (`$items_table_alias`.`$from_fk` = `$from_table`.`id`\n                             AND `$items_table_alias`.`itemtype` = '$to_type'\n                             $deleted)\";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_table_alias`.`items_id` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        } else if ($to_item_obj && $to_item_obj->isField($to_fk)) {\n           // glpi_$to_items table exists and has a foreign key corresponding to $from_table\n            $items_table = $to_item_obj::getTable();\n            $items_table_alias = $items_table . $alias_suffix;\n            if (!in_array($items_table_alias, $already_link_tables2)) {\n                array_push($already_link_tables2, $items_table_alias);\n                $deleted = $to_item_obj->isField('is_deleted') ? \"AND `$items_table_alias`.`is_deleted` = 0\" : \"\";\n                $JOIN .= \"$LINK `$items_table` AS `$items_table_alias`\n                         ON (`$items_table_alias`.`items_id` = `$from_table`.`id`\n                             AND `$items_table_alias`.`itemtype` = '$from_type'\n                             $deleted)\";\n            }\n            if (!in_array($to_table, $already_link_tables2)) {\n                array_push($already_link_tables2, $to_table);\n                $JOIN .= \"$LINK `$to_table`\n                         ON (`$items_table_alias`.`$to_fk` = `$to_table`.`id`\n                             $to_entity_restrict) \";\n            }\n        }\n\n        return $JOIN;\n    }\n\n\n    /**\n     * Generic Function to display Items\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype item type\n     * @param integer $ID       ID of the SEARCH_OPTION item\n     * @param array   $data     array retrieved data array\n     *\n     * @return string String to print\n     **/\n    public static function displayConfigItem($itemtype, $ID, $data = [])\n    {\n\n        $searchopt  = &self::getOptions($itemtype);\n\n        $table      = $searchopt[$ID][\"table\"];\n        $field      = $searchopt[$ID][\"field\"];\n\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'displayConfigItem',\n                $itemtype,\n                $ID,\n                $data,\n                \"{$itemtype}_{$ID}\"\n            );\n            if (!empty($out)) {\n                 return $out;\n            }\n        }\n\n        $out = \"\";\n        $NAME = \"{$itemtype}_{$ID}\";\n\n        switch ($table . \".\" . $field) {\n            case \"glpi_tickets.time_to_resolve\":\n            case \"glpi_tickets.internal_time_to_resolve\":\n            case \"glpi_problems.time_to_resolve\":\n            case \"glpi_changes.time_to_resolve\":\n                if (in_array($ID, [151, 181])) {\n                    break; // Skip \"TTR + progress\" search options\n                }\n\n                $value      = $data[$NAME][0]['name'];\n                $status     = $data[$NAME][0]['status'];\n                $solve_date = $data[$NAME][0]['solvedate'];\n\n                $is_late = !empty($value)\n                    && $status != CommonITILObject::WAITING\n                    && (\n                        $solve_date > $value\n                        || ($solve_date == null && $value < $_SESSION['glpi_currenttime'])\n                    );\n\n                if ($is_late) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n            case \"glpi_tickets.time_to_own\":\n            case \"glpi_tickets.internal_time_to_own\":\n                if (in_array($ID, [158, 186])) {\n                    break; // Skip \"TTO + progress\" search options\n                }\n\n                $value        = $data[$NAME][0]['name'];\n                $status       = $data[$NAME][0]['status'];\n                $opening_date = $data[$NAME][0]['date'];\n                $tia_time     = $data[$NAME][0]['takeintoaccount_delay_stat'];\n\n                $is_late = !empty($value)\n                    && $status != CommonITILObject::WAITING\n                    && (\n                        $tia_time > strtotime($opening_date) - strtotime($value)\n                        || ($tia_time == 0 && $value < $_SESSION['glpi_currenttime'])\n                    );\n\n                if ($is_late) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n\n            case \"glpi_projectstates.color\":\n            case \"glpi_cables.color\":\n                $bg_color = $data[$NAME][0]['name'];\n                if (!empty($bg_color)) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: $bg_color;\\\" \";\n                }\n                break;\n\n            case \"glpi_projectstates.name\":\n                if (array_key_exists('color', $data[$NAME][0])) {\n                    $bg_color = $data[$NAME][0]['color'];\n                    if (!empty($bg_color)) {\n                        $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: $bg_color;\\\" \";\n                    }\n                }\n                break;\n\n            case \"glpi_domains.date_expiration\":\n            case \"glpi_certificates.date_expiration\":\n                if (\n                    !empty($data[$NAME][0]['name'])\n                    && ($data[$NAME][0]['name'] < $_SESSION['glpi_currenttime'])\n                ) {\n                    $out = \" class=\\\"shadow-none\\\" style=\\\"background-color: #cf9b9b\\\" \";\n                }\n                break;\n        }\n\n        return $out;\n    }\n\n\n    /**\n     * Generic Function to display Items\n     *\n     * @since 9.4: $num param has been dropped\n     *\n     * @param string  $itemtype        item type\n     * @param integer $ID              ID of the SEARCH_OPTION item\n     * @param array   $data            array containing data results\n     * @param boolean $meta            is a meta item ? (default 0)\n     * @param array   $addobjectparams array added parameters for union search\n     * @param string  $orig_itemtype   Original itemtype, used for union_search_type\n     *\n     * @return string String to print\n     **/\n    public static function giveItem(\n        $itemtype,\n        $ID,\n        array $data,\n        $meta = 0,\n        array $addobjectparams = [],\n        $orig_itemtype = null\n    ) {\n        global $CFG_GLPI;\n\n        $searchopt = &self::getOptions($itemtype);\n        if (\n            isset($CFG_GLPI[\"union_search_type\"][$itemtype])\n            && ($CFG_GLPI[\"union_search_type\"][$itemtype] == $searchopt[$ID][\"table\"])\n        ) {\n            $oparams = [];\n            if (\n                isset($searchopt[$ID]['addobjectparams'])\n                && $searchopt[$ID]['addobjectparams']\n            ) {\n                $oparams = $searchopt[$ID]['addobjectparams'];\n            }\n\n           // Search option may not exists in subtype\n           // This is the case for \"Inventory number\" for a Software listed from ReservationItem search\n            $subtype_so = &self::getOptions($data[\"TYPE\"]);\n            if (!array_key_exists($ID, $subtype_so)) {\n                return '';\n            }\n\n            return self::giveItem($data[\"TYPE\"], $ID, $data, $meta, $oparams, $itemtype);\n        }\n        $so = $searchopt[$ID];\n        $orig_id = $ID;\n        $ID = ($orig_itemtype !== null ? $orig_itemtype : $itemtype) . '_' . $ID;\n\n        if (count($addobjectparams)) {\n            $so = array_merge($so, $addobjectparams);\n        }\n       // Plugin can override core definition for its type\n        if ($plug = isPluginItemType($itemtype)) {\n            $out = Plugin::doOneHook(\n                $plug['plugin'],\n                'giveItem',\n                $itemtype,\n                $orig_id,\n                $data,\n                $ID\n            );\n            if (!empty($out)) {\n                return $out;\n            }\n        }\n\n        $html_output = in_array(\n            self::$output_type,\n            [\n                self::HTML_OUTPUT,\n                self::GLOBAL_SEARCH, // For a global search, output will be done in HTML context\n            ]\n        );\n\n        if (isset($so[\"table\"])) {\n            $table     = $so[\"table\"];\n            $field     = $so[\"field\"];\n            $linkfield = $so[\"linkfield\"];\n\n           /// TODO try to clean all specific cases using SpecificToDisplay\n\n            switch ($table . '.' . $field) {\n                case \"glpi_users.name\":\n                    // USER search case\n                    if (\n                        ($itemtype != 'User')\n                        && isset($so[\"forcegroupby\"]) && $so[\"forcegroupby\"]\n                    ) {\n                        $out           = \"\";\n                        $count_display = 0;\n                        $added         = [];\n\n                        $showuserlink = 0;\n                        if (Session::haveRight('user', READ)) {\n                            $showuserlink = 1;\n                        }\n\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                (isset($data[$ID][$k]['name']) && ($data[$ID][$k]['name'] > 0))\n                                || (isset($data[$ID][$k][2]) && ($data[$ID][$k][2] != ''))\n                            ) {\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n\n                                if ($itemtype == 'Ticket') {\n                                    if (\n                                        isset($data[$ID][$k]['name'])\n                                        && $data[$ID][$k]['name'] > 0\n                                    ) {\n                                        if (\n                                            Session::getCurrentInterface() == 'helpdesk'\n                                            && $orig_id == 5 // -> Assigned user\n                                            && !empty($anon_name = User::getAnonymizedNameForUser(\n                                                $data[$ID][$k]['name'],\n                                                $itemtype::getById($data['id'])->getEntityId()\n                                            ))\n                                        ) {\n                                            $out .= $anon_name;\n                                        } else {\n                                            $userdata = getUserName($data[$ID][$k]['name'], 2);\n                                            $tooltip  = \"\";\n                                            if (Session::haveRight('user', READ)) {\n                                                $tooltip = Html::showToolTip(\n                                                    $userdata[\"comment\"],\n                                                    ['link'    => $userdata[\"link\"],\n                                                        'display' => false\n                                                    ]\n                                                );\n                                            }\n                                            $out .= sprintf(__('%1$s %2$s'), $userdata['name'], $tooltip);\n                                        }\n\n                                        $count_display++;\n                                    }\n                                } else {\n                                    $out .= getUserName($data[$ID][$k]['name'], $showuserlink);\n                                    $count_display++;\n                                }\n\n                           // Manage alternative_email for tickets_users\n                                if (\n                                    ($itemtype == 'Ticket')\n                                    && isset($data[$ID][$k][2])\n                                ) {\n                                        $split = explode(self::LONGSEP, $data[$ID][$k][2]);\n                                    for ($l = 0; $l < count($split); $l++) {\n                                        $split2 = explode(\" \", $split[$l]);\n                                        if ((count($split2) == 2) && ($split2[0] == 0) && !empty($split2[1])) {\n                                            if ($count_display) {\n                                                $out .= self::LBBR;\n                                            }\n                                            $count_display++;\n                                            $out .= \"<a href='mailto:\" . $split2[1] . \"'>\" . $split2[1] . \"</a>\";\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        return $out;\n                    }\n                    if ($itemtype != 'User') {\n                        $toadd = '';\n                        if (\n                            ($itemtype == 'Ticket')\n                            && ($data[$ID][0]['id'] > 0)\n                        ) {\n                            $userdata = getUserName($data[$ID][0]['id'], 2);\n                            $toadd    = Html::showToolTip(\n                                $userdata[\"comment\"],\n                                ['link'    => $userdata[\"link\"],\n                                    'display' => false\n                                ]\n                            );\n                        }\n                        $usernameformat = formatUserName(\n                            $data[$ID][0]['id'],\n                            $data[$ID][0]['name'],\n                            $data[$ID][0]['realname'],\n                            $data[$ID][0]['firstname'],\n                            1\n                        );\n                        return sprintf(__('%1$s %2$s'), $usernameformat, $toadd);\n                    }\n\n                    $current_users_id = $data[$ID][0]['id'] ?? 0;\n                    if ($current_users_id > 0) {\n                        return TemplateRenderer::getInstance()->render('components/user/picture.html.twig', [\n                            'users_id'      => $current_users_id,\n                            'display_login' => true,\n                            'force_login'   => true,\n                            'avatar_size'   => \"avatar-sm\",\n                        ]);\n                    }\n                    break;\n\n                case \"glpi_profiles.name\":\n                    if (\n                        ($itemtype == 'User')\n                         && ($orig_id == 20)\n                    ) {\n                        $out           = \"\";\n\n                        $count_display = 0;\n                        $added         = [];\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                strlen(trim($data[$ID][$k]['name'])) > 0\n                                && !in_array(\n                                    $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['entities_id'],\n                                    $added\n                                )\n                            ) {\n                                $text = sprintf(\n                                    __('%1$s - %2$s'),\n                                    $data[$ID][$k]['name'],\n                                    Dropdown::getDropdownName(\n                                        'glpi_entities',\n                                        $data[$ID][$k]['entities_id']\n                                    )\n                                );\n                                   $comp = '';\n                                if ($data[$ID][$k]['is_recursive']) {\n                                    $comp = __('R');\n                                    if ($data[$ID][$k]['is_dynamic']) {\n                                        $comp = sprintf(__('%1$s%2$s'), $comp, \", \");\n                                    }\n                                }\n                                if ($data[$ID][$k]['is_dynamic']) {\n                                    $comp = sprintf(__('%1$s%2$s'), $comp, __('D'));\n                                }\n                                if (!empty($comp)) {\n                                    $text = sprintf(__('%1$s %2$s'), $text, \"(\" . $comp . \")\");\n                                }\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n                                $count_display++;\n                                $out     .= $text;\n                                $added[]  = $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['entities_id'];\n                            }\n                        }\n                        return $out;\n                    }\n                    break;\n\n                case \"glpi_entities.completename\":\n                    if ($itemtype == 'User') {\n                        $out           = \"\";\n                        $added         = [];\n                        $count_display = 0;\n                        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                            if (\n                                isset($data[$ID][$k]['name'])\n                                 && (strlen(trim($data[$ID][$k]['name'])) > 0)\n                                 && !in_array(\n                                     $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['profiles_id'],\n                                     $added\n                                 )\n                            ) {\n                                $text = sprintf(\n                                    __('%1$s - %2$s'),\n                                    Entity::badgeCompletename($data[$ID][$k]['name']),\n                                    Dropdown::getDropdownName(\n                                        'glpi_profiles',\n                                        $data[$ID][$k]['profiles_id']\n                                    )\n                                );\n                                $comp = '';\n                                if ($data[$ID][$k]['is_recursive']) {\n                                    $comp = __('R');\n                                    if ($data[$ID][$k]['is_dynamic']) {\n                                        $comp = sprintf(__('%1$s%2$s'), $comp, \", \");\n                                    }\n                                }\n                                if ($data[$ID][$k]['is_dynamic']) {\n                                    $comp = sprintf(__('%1$s%2$s'), $comp, __('D'));\n                                }\n                                if (!empty($comp)) {\n                                    $text = sprintf(__('%1$s %2$s'), $text, \"(\" . $comp . \")\");\n                                }\n                                if ($count_display) {\n                                    $out .= self::LBBR;\n                                }\n                                $count_display++;\n                                $out    .= $text;\n                                $added[] = $data[$ID][$k]['name'] . \"-\" . $data[$ID][$k]['profiles_id'];\n                            }\n                        }\n                        return $out;\n                    } else if (($so[\"datatype\"] ?? \"\") != \"itemlink\" && !empty($data[$ID][0]['name'])) {\n                        return Entity::badgeCompletename($data[$ID][0]['name']);\n                    }\n                    break;\n\n                case \"glpi_documenttypes.icon\":\n                    if (!empty($data[$ID][0]['name'])) {\n                        return \"<img class='middle' alt='' src='\" . $CFG_GLPI[\"typedoc_icon_dir\"] . \"/\" .\n                           $data[$ID][0]['name'] . \"'>\";\n                    }\n                    return \"&nbsp;\";\n\n                case \"glpi_documents.filename\":\n                    $doc = new Document();\n                    if ($doc->getFromDB($data['id'])) {\n                        return $doc->getDownloadLink();\n                    }\n                    return NOT_AVAILABLE;\n\n                case \"glpi_tickets_tickets.tickets_id_1\":\n                    $out        = \"\";\n                    $displayed  = [];\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        $linkid = ($data[$ID][$k]['tickets_id_2'] == $data['id'])\n                                 ? $data[$ID][$k]['name']\n                                 : $data[$ID][$k]['tickets_id_2'];\n\n                        // If link ID is int or integer string, force conversion to int. Coversion to int and then string to compare is needed to ensure it isn't a decimal\n                        if (is_numeric($linkid) && ((string)(int)$linkid === (string)$linkid)) {\n                            $linkid = (int) $linkid;\n                        }\n                        if ((is_int($linkid) && $linkid > 0) && !isset($displayed[$linkid])) {\n                             $text  = \"<a \";\n                             $text .= \"href=\\\"\" . Ticket::getFormURLWithID($linkid) . \"\\\">\";\n                             $text .= Dropdown::getDropdownName('glpi_tickets', $linkid) . \"</a>\";\n                            if (count($displayed)) {\n                                $out .= self::LBBR;\n                            }\n                            $displayed[$linkid] = $linkid;\n                            $out               .= $text;\n                        }\n                    }\n                    return $out;\n\n                case \"glpi_problems.id\":\n                    if ($so[\"datatype\"] == 'count') {\n                        if (\n                            ($data[$ID][0]['name'] > 0)\n                            && Session::haveRight(\"problem\", Problem::READALL)\n                        ) {\n                            if ($itemtype == 'ITILCategory') {\n                                $options['criteria'][0]['field']      = 7;\n                                $options['criteria'][0]['searchtype'] = 'equals';\n                                $options['criteria'][0]['value']      = $data['id'];\n                                $options['criteria'][0]['link']       = 'AND';\n                            } else {\n                                $options['criteria'][0]['field']       = 12;\n                                $options['criteria'][0]['searchtype']  = 'equals';\n                                $options['criteria'][0]['value']       = 'all';\n                                $options['criteria'][0]['link']        = 'AND';\n\n                                $options['metacriteria'][0]['itemtype']   = $itemtype;\n                                $options['metacriteria'][0]['field']      = self::getOptionNumber(\n                                    $itemtype,\n                                    'name'\n                                );\n                                $options['metacriteria'][0]['searchtype'] = 'equals';\n                                $options['metacriteria'][0]['value']      = $data['id'];\n                                $options['metacriteria'][0]['link']       = 'AND';\n                            }\n\n                            $options['reset'] = 'reset';\n\n                            $out  = \"<a id='problem$itemtype\" . $data['id'] . \"' \";\n                            $out .= \"href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/problem.php?\" .\n                              Toolbox::append_params($options, '&amp;') . \"\\\">\";\n                            $out .= $data[$ID][0]['name'] . \"</a>\";\n                            return $out;\n                        }\n                    }\n                    break;\n\n                case \"glpi_tickets.id\":\n                    if ($so[\"datatype\"] == 'count') {\n                        if (\n                            ($data[$ID][0]['name'] > 0)\n                            && Session::haveRight(\"ticket\", Ticket::READALL)\n                        ) {\n                            if ($itemtype == 'User') {\n                            // Requester\n                                if ($ID == 'User_60') {\n                                    $options['criteria'][0]['field']      = 4;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n\n                            // Writer\n                                if ($ID == 'User_61') {\n                                    $options['criteria'][0]['field']      = 22;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n                            // Assign\n                                if ($ID == 'User_64') {\n                                    $options['criteria'][0]['field']      = 5;\n                                    $options['criteria'][0]['searchtype'] = 'equals';\n                                    $options['criteria'][0]['value']      = $data['id'];\n                                    $options['criteria'][0]['link']       = 'AND';\n                                }\n                            } else if ($itemtype == 'ITILCategory') {\n                                $options['criteria'][0]['field']      = 7;\n                                $options['criteria'][0]['searchtype'] = 'equals';\n                                $options['criteria'][0]['value']      = $data['id'];\n                                $options['criteria'][0]['link']       = 'AND';\n                            } else {\n                                $options['criteria'][0]['field']       = 12;\n                                $options['criteria'][0]['searchtype']  = 'equals';\n                                $options['criteria'][0]['value']       = 'all';\n                                $options['criteria'][0]['link']        = 'AND';\n\n                                $options['metacriteria'][0]['itemtype']   = $itemtype;\n                                $options['metacriteria'][0]['field']      = self::getOptionNumber(\n                                    $itemtype,\n                                    'name'\n                                );\n                                $options['metacriteria'][0]['searchtype'] = 'equals';\n                                $options['metacriteria'][0]['value']      = $data['id'];\n                                $options['metacriteria'][0]['link']       = 'AND';\n                            }\n\n                            $options['reset'] = 'reset';\n\n                            $out  = \"<a id='ticket$itemtype\" . $data['id'] . \"' \";\n                            $out .= \"href=\\\"\" . $CFG_GLPI[\"root_doc\"] . \"/front/ticket.php?\" .\n                              Toolbox::append_params($options, '&amp;') . \"\\\">\";\n                            $out .= $data[$ID][0]['name'] . \"</a>\";\n                            return $out;\n                        }\n                    }\n                    break;\n\n                case \"glpi_tickets.time_to_resolve\":\n                case \"glpi_problems.time_to_resolve\":\n                case \"glpi_changes.time_to_resolve\":\n                case \"glpi_tickets.time_to_own\":\n                case \"glpi_tickets.internal_time_to_own\":\n                case \"glpi_tickets.internal_time_to_resolve\":\n                   // Due date + progress\n                    if (in_array($orig_id, [151, 158, 181, 186])) {\n                        $out = Html::convDateTime($data[$ID][0]['name']);\n\n                       // No due date in waiting status\n                        if ($data[$ID][0]['status'] == CommonITILObject::WAITING) {\n                             return '';\n                        }\n                        if (empty($data[$ID][0]['name'])) {\n                            return '';\n                        }\n                        if (\n                            ($data[$ID][0]['status'] == Ticket::SOLVED)\n                            || ($data[$ID][0]['status'] == Ticket::CLOSED)\n                        ) {\n                            return $out;\n                        }\n\n                        $itemtype = getItemTypeForTable($table);\n                        $item = new $itemtype();\n                        $item->getFromDB($data['id']);\n                        $percentage  = 0;\n                        $totaltime   = 0;\n                        $currenttime = 0;\n                        $slaField    = 'slas_id';\n\n                       // define correct sla field\n                        switch ($table . '.' . $field) {\n                            case \"glpi_tickets.time_to_resolve\":\n                                $slaField = 'slas_id_ttr';\n                                $sla_class = 'SLA';\n                                break;\n                            case \"glpi_tickets.time_to_own\":\n                                $slaField = 'slas_id_tto';\n                                $sla_class = 'SLA';\n                                break;\n                            case \"glpi_tickets.internal_time_to_own\":\n                                $slaField = 'olas_id_tto';\n                                $sla_class = 'OLA';\n                                break;\n                            case \"glpi_tickets.internal_time_to_resolve\":\n                                $slaField = 'olas_id_ttr';\n                                $sla_class = 'OLA';\n                                break;\n                        }\n\n                        switch ($table . '.' . $field) {\n                           // If ticket has been taken into account : no progression display\n                            case \"glpi_tickets.time_to_own\":\n                            case \"glpi_tickets.internal_time_to_own\":\n                                if (($item->fields['takeintoaccount_delay_stat'] > 0)) {\n                                     return $out;\n                                }\n                                break;\n                        }\n\n                        if ($item->isField($slaField) && $item->fields[$slaField] != 0) { // Have SLA\n                            $sla = new $sla_class();\n                            $sla->getFromDB($item->fields[$slaField]);\n                            $currenttime = $sla->getActiveTimeBetween(\n                                $item->fields['date'],\n                                date('Y-m-d H:i:s')\n                            );\n                            $totaltime   = $sla->getActiveTimeBetween(\n                                $item->fields['date'],\n                                $data[$ID][0]['name']\n                            );\n                        } else {\n                            $calendars_id = Entity::getUsedConfig(\n                                'calendars_strategy',\n                                $item->fields['entities_id'],\n                                'calendars_id',\n                                0\n                            );\n                            $calendar = new Calendar();\n                            if ($calendars_id > 0 && $calendar->getFromDB($calendars_id)) { // Ticket entity have calendar\n                                $currenttime = $calendar->getActiveTimeBetween(\n                                    $item->fields['date'],\n                                    date('Y-m-d H:i:s')\n                                );\n                                $totaltime   = $calendar->getActiveTimeBetween(\n                                    $item->fields['date'],\n                                    $data[$ID][0]['name']\n                                );\n                            } else { // No calendar\n                                $currenttime = strtotime(date('Y-m-d H:i:s'))\n                                                 - strtotime($item->fields['date']);\n                                $totaltime   = strtotime($data[$ID][0]['name'])\n                                                 - strtotime($item->fields['date']);\n                            }\n                        }\n                        if ($totaltime != 0) {\n                            $percentage  = round((100 * $currenttime) / $totaltime);\n                        } else {\n                           // Total time is null : no active time\n                            $percentage = 100;\n                        }\n                        if ($percentage > 100) {\n                            $percentage = 100;\n                        }\n                        $percentage_text = $percentage;\n\n                        if ($_SESSION['glpiduedatewarning_unit'] == '%') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'];\n                            $less_warn       = (100 - $percentage);\n                        } else if ($_SESSION['glpiduedatewarning_unit'] == 'hour') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'] * HOUR_TIMESTAMP;\n                            $less_warn       = ($totaltime - $currenttime);\n                        } else if ($_SESSION['glpiduedatewarning_unit'] == 'day') {\n                            $less_warn_limit = $_SESSION['glpiduedatewarning_less'] * DAY_TIMESTAMP;\n                            $less_warn       = ($totaltime - $currenttime);\n                        }\n\n                        if ($_SESSION['glpiduedatecritical_unit'] == '%') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'];\n                            $less_crit       = (100 - $percentage);\n                        } else if ($_SESSION['glpiduedatecritical_unit'] == 'hour') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'] * HOUR_TIMESTAMP;\n                            $less_crit       = ($totaltime - $currenttime);\n                        } else if ($_SESSION['glpiduedatecritical_unit'] == 'day') {\n                            $less_crit_limit = $_SESSION['glpiduedatecritical_less'] * DAY_TIMESTAMP;\n                            $less_crit       = ($totaltime - $currenttime);\n                        }\n\n                        $color = $_SESSION['glpiduedateok_color'];\n                        if ($less_crit < $less_crit_limit) {\n                            $color = $_SESSION['glpiduedatecritical_color'];\n                        } else if ($less_warn < $less_warn_limit) {\n                            $color = $_SESSION['glpiduedatewarning_color'];\n                        }\n\n                        if (!isset($so['datatype'])) {\n                            $so['datatype'] = 'progressbar';\n                        }\n\n                        $progressbar_data = [\n                            'text'         => Html::convDateTime($data[$ID][0]['name']),\n                            'percent'      => $percentage,\n                            'percent_text' => $percentage_text,\n                            'color'        => $color\n                        ];\n                    }\n                    break;\n\n                case \"glpi_softwarelicenses.number\":\n                    if ($data[$ID][0]['min'] == -1) {\n                        return __('Unlimited');\n                    }\n                    if (empty($data[$ID][0]['name'])) {\n                        return 0;\n                    }\n                    return $data[$ID][0]['name'];\n\n                case \"glpi_auth_tables.name\":\n                    return Auth::getMethodName(\n                        $data[$ID][0]['name'],\n                        $data[$ID][0]['auths_id'],\n                        1,\n                        $data[$ID][0]['ldapname'] . $data[$ID][0]['mailname']\n                    );\n\n                case \"glpi_reservationitems.comment\":\n                    if (empty($data[$ID][0]['name'])) {\n                        $text = __('None');\n                    } else {\n                        $text = Html::resume_text($data[$ID][0]['name']);\n                    }\n                    if (Session::haveRight('reservation', UPDATE)) {\n                        return \"<a title=\\\"\" . __s('Modify the comment') . \"\\\"\n                           href='\" . ReservationItem::getFormURLWithID($data['refID']) . \"' >\" . $text . \"</a>\";\n                    }\n                    return $text;\n\n                case 'glpi_crontasks.description':\n                    $tmp = new CronTask();\n                    return $tmp->getDescription($data[$ID][0]['name']);\n\n                case 'glpi_changes.status':\n                    $status = Change::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Change::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_problems.status':\n                    $status = Problem::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Problem::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_tickets.status':\n                    $status = Ticket::getStatus($data[$ID][0]['name']);\n                    return \"<span class='text-nowrap'>\" .\n                      Ticket::getStatusIcon($data[$ID][0]['name']) . \"&nbsp;$status\" .\n                      \"</span>\";\n\n                case 'glpi_projectstates.name':\n                    $out = '';\n                    $name = $data[$ID][0]['name'];\n                    if (isset($data[$ID][0]['trans'])) {\n                        $name = $data[$ID][0]['trans'];\n                    }\n                    if ($itemtype == 'ProjectState') {\n                        $out =   \"<a href='\" . ProjectState::getFormURLWithID($data[$ID][0][\"id\"]) . \"'>\" . $name . \"</a></div>\";\n                    } else {\n                        $out = $name;\n                    }\n                    return $out;\n\n                case 'glpi_items_tickets.items_id':\n                case 'glpi_items_problems.items_id':\n                case 'glpi_changes_items.items_id':\n                case 'glpi_certificates_items.items_id':\n                case 'glpi_appliances_items.items_id':\n                    if (!empty($data[$ID])) {\n                        $items = [];\n                        foreach ($data[$ID] as $key => $val) {\n                            if (is_numeric($key)) {\n                                if (\n                                    !empty($val['itemtype'])\n                                    && ($item = getItemForItemtype($val['itemtype']))\n                                ) {\n                                    if ($item->getFromDB($val['name'])) {\n                                        $items[] = $item->getLink(['comments' => true]);\n                                    }\n                                }\n                            }\n                        }\n                        if (!empty($items)) {\n                            return implode(\"<br>\", $items);\n                        }\n                    }\n                    return '&nbsp;';\n\n                case 'glpi_items_tickets.itemtype':\n                case 'glpi_items_problems.itemtype':\n                    if (!empty($data[$ID])) {\n                        $itemtypes = [];\n                        foreach ($data[$ID] as $key => $val) {\n                            if (is_numeric($key)) {\n                                if (\n                                    !empty($val['name'])\n                                    && ($item = getItemForItemtype($val['name']))\n                                ) {\n                                    $item = new $val['name']();\n                                    $name = $item->getTypeName();\n                                    $itemtypes[] = __($name);\n                                }\n                            }\n                        }\n                        if (!empty($itemtypes)) {\n                            return implode(\"<br>\", $itemtypes);\n                        }\n                    }\n\n                    return '&nbsp;';\n\n                case 'glpi_tickets.name':\n                case 'glpi_problems.name':\n                case 'glpi_changes.name':\n                    if (\n                        isset($data[$ID][0]['content'])\n                        && isset($data[$ID][0]['id'])\n                        && isset($data[$ID][0]['status'])\n                    ) {\n                        $link = $itemtype::getFormURLWithID($data[$ID][0]['id']);\n\n                        $out  = \"<a id='$itemtype\" . $data[$ID][0]['id'] . \"' href=\\\"\" . $link;\n                       // Force solution tab if solved\n                        if ($item = getItemForItemtype($itemtype)) {\n                            if (in_array($data[$ID][0]['status'], $item->getSolvedStatusArray())) {\n                                $out .= \"&amp;forcetab=$itemtype$2\";\n                            }\n                        }\n                        $out .= \"\\\">\";\n                        $name = $data[$ID][0]['name'];\n                        if (\n                            $_SESSION[\"glpiis_ids_visible\"]\n                            || empty($data[$ID][0]['name'])\n                        ) {\n                            $name = sprintf(__('%1$s (%2$s)'), $name, $data[$ID][0]['id']);\n                        }\n                        $out    .= $name . \"</a>\";\n                        $out     = sprintf(\n                            __('%1$s %2$s'),\n                            $out,\n                            Html::showToolTip(\n                                RichText::getEnhancedHtml($data[$ID][0]['content']),\n                                [\n                                    'applyto'        => $itemtype . $data[$ID][0]['id'],\n                                    'display'        => false,\n                                    'images_gallery' => false, // don't show photoswipe gallery in tooltips\n                                ]\n                            )\n                        );\n                        return $out;\n                    }\n                    break;\n\n                case 'glpi_ticketvalidations.status':\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if ($data[$ID][$k]['name']) {\n                             $status  = TicketValidation::getStatus($data[$ID][$k]['name']);\n                             $bgcolor = TicketValidation::getStatusColor($data[$ID][$k]['name']);\n                             $out    .= (empty($out) ? '' : self::LBBR) .\n                                 \"<div style=\\\"background-color:\" . $bgcolor . \";\\\">\" . $status . '</div>';\n                        }\n                    }\n                    return $out;\n\n                case 'glpi_cables.color':\n                   //do not display 'real' value (#.....)\n                    return \"\";\n\n                case 'glpi_ticketsatisfactions.satisfaction':\n                    if ($html_output) {\n                        return TicketSatisfaction::displaySatisfaction($data[$ID][0]['name']);\n                    }\n                    break;\n\n                case 'glpi_projects._virtual_planned_duration':\n                    return Html::timestampToString(\n                        ProjectTask::getTotalPlannedDurationForProject($data[\"id\"]),\n                        false\n                    );\n\n                case 'glpi_projects._virtual_effective_duration':\n                    return Html::timestampToString(\n                        ProjectTask::getTotalEffectiveDurationForProject($data[\"id\"]),\n                        false\n                    );\n\n                case 'glpi_cartridgeitems._virtual':\n                    return Cartridge::getCount(\n                        $data[\"id\"],\n                        $data[$ID][0]['alarm_threshold'],\n                        !$html_output\n                    );\n\n                case 'glpi_printers._virtual':\n                    return Cartridge::getCountForPrinter(\n                        $data[\"id\"],\n                        !$html_output\n                    );\n\n                case 'glpi_consumableitems._virtual':\n                    return Consumable::getCount(\n                        $data[\"id\"],\n                        $data[$ID][0]['alarm_threshold'],\n                        !$html_output\n                    );\n\n                case 'glpi_links._virtual':\n                     $out = '';\n                     $link = new Link();\n                    if (\n                        ($item = getItemForItemtype($itemtype))\n                         && $item->getFromDB($data['id'])\n                    ) {\n                        $data = Link::getLinksDataForItem($item);\n                        $count_display = 0;\n                        foreach ($data as $val) {\n                            $links = Link::getAllLinksFor($item, $val);\n                            foreach ($links as $link) {\n                                if ($count_display) {\n                                    $out .=  self::LBBR;\n                                }\n                                $out .= $link;\n                                $count_display++;\n                            }\n                        }\n                    }\n                    return $out;\n\n                case 'glpi_reservationitems._virtual':\n                    if ($data[$ID][0]['is_active']) {\n                        return \"<a href='reservation.php?reservationitems_id=\" .\n                                          $data[\"refID\"] . \"' title=\\\"\" . __s('See planning') . \"\\\">\" .\n                                          \"<i class='far fa-calendar-alt'></i><span class='sr-only'>\" . __('See planning') . \"</span></a>\";\n                    } else {\n                        return \"&nbsp;\";\n                    }\n\n                case \"glpi_tickets.priority\":\n                case \"glpi_problems.priority\":\n                case \"glpi_changes.priority\":\n                case \"glpi_projects.priority\":\n                    $index = $data[$ID][0]['name'];\n                    $color = $_SESSION[\"glpipriority_$index\"];\n                    $name  = CommonITILObject::getPriorityName($index);\n                    return \"<div class='priority_block' style='border-color: $color'>\n                        <span style='background: $color'></span>&nbsp;$name\n                       </div>\";\n            }\n        }\n\n       //// Default case\n\n        if (\n            $itemtype == 'Ticket'\n            && Session::getCurrentInterface() == 'helpdesk'\n            && $orig_id == 8\n            && !empty($anon_name = Group::getAnonymizedName(\n                $itemtype::getById($data['id'])->getEntityId()\n            ))\n        ) {\n           // Assigned groups\n            return $anon_name;\n        }\n\n       // Link with plugin tables : need to know left join structure\n        if (isset($table)) {\n            if (preg_match(\"/^glpi_plugin_([a-z0-9]+)/\", $table . '.' . $field, $matches)) {\n                if (count($matches) == 2) {\n                    $plug     = $matches[1];\n                    $out = Plugin::doOneHook(\n                        $plug,\n                        'giveItem',\n                        $itemtype,\n                        $orig_id,\n                        $data,\n                        $ID\n                    );\n                    if (!empty($out)) {\n                        return $out;\n                    }\n                }\n            }\n        }\n        $unit = '';\n        if (isset($so['unit'])) {\n            $unit = $so['unit'];\n        }\n\n       // Preformat items\n        if (isset($so[\"datatype\"])) {\n            switch ($so[\"datatype\"]) {\n                case \"itemlink\":\n                    $linkitemtype  = getItemTypeForTable($so[\"table\"]);\n\n                    $out           = \"\";\n                    $count_display = 0;\n                    $separate      = self::LBBR;\n                    if (isset($so['splititems']) && $so['splititems']) {\n                        $separate = self::LBHR;\n                    }\n\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (isset($data[$ID][$k]['id'])) {\n                            if ($count_display) {\n                                $out .= $separate;\n                            }\n                            $count_display++;\n                            $page  = $linkitemtype::getFormURLWithID($data[$ID][$k]['id']);\n                            $name  = $data[$ID][$k]['name'];\n                            if ($_SESSION[\"glpiis_ids_visible\"] || empty($data[$ID][$k]['name'])) {\n                                 $name = sprintf(__('%1$s (%2$s)'), $name, $data[$ID][$k]['id']);\n                            }\n                            if ($field === 'completename') {\n                                $chunks = preg_split('/ > /', $name);\n                                $completename = '';\n                                foreach ($chunks as $key => $element_name) {\n                                    $class = $key === array_key_last($chunks) ? '' : 'class=\"text-muted\"';\n                                    $separator = $key === array_key_last($chunks) ? '' : ' &gt; ';\n                                    $completename .= sprintf('<span %s>%s</span>%s', $class, $element_name, $separator);\n                                }\n                                $name = $completename;\n                            }\n\n                            $out  .= \"<a id='\" . $linkitemtype . \"_\" . $data['id'] . \"_\" .\n                                $data[$ID][$k]['id'] . \"' href='$page'>\" .\n                               $name . \"</a>\";\n                        }\n                    }\n                    return $out;\n\n                case \"text\":\n                    $separate = self::LBBR;\n                    if (isset($so['splititems']) && $so['splititems']) {\n                        $separate = self::LBHR;\n                    }\n\n                    $out           = '';\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= $separate;\n                            }\n                            $count_display++;\n\n                            $plaintext = RichText::getTextFromHtml($data[$ID][$k]['name'], false, true, $html_output);\n\n                            if ($html_output && (Toolbox::strlen($plaintext) > $CFG_GLPI['cut'])) {\n                                $rand = mt_rand();\n                                $popup_params = [\n                                    'display'       => false,\n                                    'awesome-class' => 'fa-comments',\n                                    'autoclose'     => false,\n                                    'onclick'       => true,\n                                ];\n                                $out .= sprintf(\n                                    __('%1$s %2$s'),\n                                    \"<span id='text$rand'>\" . Html::resume_text($plaintext, $CFG_GLPI['cut']) . '</span>',\n                                    Html::showToolTip(\n                                        '<div class=\"fup-popup\">' . RichText::getEnhancedHtml($data[$ID][$k]['name']) . '</div>',\n                                        $popup_params\n                                    )\n                                );\n                            } else {\n                                $out .= $plaintext;\n                            }\n                        }\n                    }\n                    return $out;\n\n                case \"date\":\n                case \"date_delay\":\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (\n                            is_null($data[$ID][$k]['name'])\n                            && isset($so['emptylabel']) && $so['emptylabel']\n                        ) {\n                            $out .= (empty($out) ? '' : self::LBBR) . $so['emptylabel'];\n                        } else {\n                            $out .= (empty($out) ? '' : self::LBBR) . Html::convDate($data[$ID][$k]['name']);\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"datetime\":\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (\n                            is_null($data[$ID][$k]['name'])\n                            && isset($so['emptylabel']) && $so['emptylabel']\n                        ) {\n                            $out .= (empty($out) ? '' : self::LBBR) . $so['emptylabel'];\n                        } else {\n                            $out .= (empty($out) ? '' : self::LBBR) . Html::convDateTime($data[$ID][$k]['name']);\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"timestamp\":\n                    $withseconds = false;\n                    if (isset($so['withseconds'])) {\n                        $withseconds = $so['withseconds'];\n                    }\n                    $withdays = true;\n                    if (isset($so['withdays'])) {\n                        $withdays = $so['withdays'];\n                    }\n\n                    $out   = '';\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        $out .= (empty($out) ? '' : '<br>') . Html::timestampToString(\n                            $data[$ID][$k]['name'],\n                            $withseconds,\n                            $withdays\n                        );\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"email\":\n                    $out           = '';\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if ($count_display) {\n                             $out .= self::LBBR;\n                        }\n                        $count_display++;\n                        if (!empty($data[$ID][$k]['name'])) {\n                            $out .= (empty($out) ? '' : self::LBBR);\n                            $out .= \"<a href='mailto:\" . Html::entities_deep($data[$ID][$k]['name']) . \"'>\" . $data[$ID][$k]['name'];\n                            $out .= \"</a>\";\n                        }\n                    }\n                    return (empty($out) ? \"&nbsp;\" : $out);\n\n                case \"weblink\":\n                    $orig_link = trim((string)$data[$ID][0]['name']);\n                    if (!empty($orig_link) && Toolbox::isValidWebUrl($orig_link)) {\n                       // strip begin of link\n                        $link = preg_replace('/https?:\\/\\/(www[^\\.]*\\.)?/', '', $orig_link);\n                        $link = preg_replace('/\\/$/', '', $link);\n                        if (Toolbox::strlen($link) > $CFG_GLPI[\"url_maxlength\"]) {\n                             $link = Toolbox::substr($link, 0, $CFG_GLPI[\"url_maxlength\"]) . \"...\";\n                        }\n                        return \"<a href=\\\"\" . Toolbox::formatOutputWebLink($orig_link) . \"\\\" target='_blank'>$link</a>\";\n                    }\n                    return \"&nbsp;\";\n\n                case \"count\":\n                case \"number\":\n                case \"mio\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            if (\n                                isset($so['toadd'])\n                                && isset($so['toadd'][$data[$ID][$k]['name']])\n                            ) {\n                                $out .= $so['toadd'][$data[$ID][$k]['name']];\n                            } else {\n                                $out .= Dropdown::getValueWithUnit($data[$ID][$k]['name'], $unit);\n                            }\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"decimal\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            if (\n                                isset($so['toadd'])\n                                && isset($so['toadd'][$data[$ID][$k]['name']])\n                            ) {\n                                $out .= $so['toadd'][$data[$ID][$k]['name']];\n                            } else {\n                                $out .= Dropdown::getValueWithUnit($data[$ID][$k]['name'], $unit, $CFG_GLPI[\"decimal_number\"]);\n                            }\n                        }\n                    }\n                    $out = \"<span class='text-nowrap'>$out</span>\";\n                    return $out;\n\n                case \"bool\":\n                    $out           = \"\";\n                    $count_display = 0;\n                    for ($k = 0; $k < $data[$ID]['count']; $k++) {\n                        if (strlen(trim((string)$data[$ID][$k]['name'])) > 0) {\n                            if ($count_display) {\n                                $out .= self::LBBR;\n                            }\n                            $count_display++;\n                            $out .= Dropdown::getYesNo($data[$ID][$k]['name']);\n                        }\n                    }\n                    return $out;\n\n                case \"itemtypename\":\n                    if ($obj = getItemForItemtype($data[$ID][0]['name'])) {\n                        return $obj->getTypeName();\n                    }\n                    return \"\";\n\n                case \"language\":\n                    if (isset($CFG_GLPI['languages'][$data[$ID][0]['name']])) {\n                        return $CFG_GLPI['languages'][$data[$ID][0]['name']][0];\n                    }\n                    return __('Default value');\n                case 'progressbar':\n                    if (!isset($progressbar_data)) {\n                        $bar_color = 'green';\n                        $percent   = ltrim(($data[$ID][0]['name'] ?? \"\"), 0);\n                        $progressbar_data = [\n                            'percent'      => $percent,\n                            'percent_text' => $percent,\n                            'color'        => $bar_color,\n                            'text'         => ''\n                        ];\n                    }\n\n                    $out = \"\";\n                    if ($progressbar_data['percent'] !== null) {\n                        $out = <<<HTML\n                  <span class='text-nowrap'>\n                     {$progressbar_data['text']}\n                  </span>\n                  <div class=\"progress\" style=\"height: 16px\">\n                     <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\"\n                          style=\"width: {$progressbar_data['percent']}%; background-color: {$progressbar_data['color']};\"\n                          aria-valuenow=\"{$progressbar_data['percent']}\"\n                          aria-valuemin=\"0\" aria-valuemax=\"100\">\n                        {$progressbar_data['percent_text']}%\n                     </div>\n                  </div>\nHTML;\n                    }\n\n                    return $out;\n                break;\n            }\n        }\n       // Manage items with need group by / group_concat\n        $out           = \"\";\n        $count_display = 0;\n        $separate      = self::LBBR;\n        if (isset($so['splititems']) && $so['splititems']) {\n            $separate = self::LBHR;\n        }\n        for ($k = 0; $k < $data[$ID]['count']; $k++) {\n            if ($count_display) {\n                $out .= $separate;\n            }\n            $count_display++;\n           // Get specific display if available\n            if (isset($table)) {\n                $itemtype = getItemTypeForTable($table);\n                if ($item = getItemForItemtype($itemtype)) {\n                    $tmpdata  = $data[$ID][$k];\n                   // Copy name to real field\n                    $tmpdata[$field] = $data[$ID][$k]['name'] ?? '';\n\n                    $specific = $item->getSpecificValueToDisplay(\n                        $field,\n                        $tmpdata,\n                        [\n                            'html'      => true,\n                            'searchopt' => $so,\n                            'raw_data'  => $data\n                        ]\n                    );\n                }\n            }\n            if (!empty($specific)) {\n                $out .= $specific;\n            } else {\n                if (\n                    isset($so['toadd'])\n                    && isset($so['toadd'][$data[$ID][$k]['name']])\n                ) {\n                    $out .= $so['toadd'][$data[$ID][$k]['name']];\n                } else {\n                   // Empty is 0 or empty\n                    if (empty($split[0]) && isset($so['emptylabel'])) {\n                        $out .= $so['emptylabel'];\n                    } else {\n                       // Trans field exists\n                        if (isset($data[$ID][$k]['trans']) && !empty($data[$ID][$k]['trans'])) {\n                            $out .= $data[$ID][$k]['trans'];\n                        } else {\n                            $value = $data[$ID][$k]['name'];\n                            $out .= $so['field'] === 'completename'\n                                ? CommonTreeDropdown::sanitizeSeparatorInCompletename($value)\n                                : $value;\n                        }\n                    }\n                }\n            }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Reset save searches\n     *\n     * @return void\n     **/\n    public static function resetSaveSearch()\n    {\n\n        unset($_SESSION['glpisearch']);\n        $_SESSION['glpisearch']       = [];\n    }\n\n\n    /**\n     * Completion of the URL $_GET values with the $_SESSION values or define default values\n     *\n     * @param string  $itemtype        Item type to manage\n     * @param array   $params          Params to parse\n     * @param boolean $usesession      Use datas save in session (true by default)\n     * @param boolean $forcebookmark   Force trying to load parameters from default bookmark:\n     *                                  used for global search (false by default)\n     *\n     * @return array parsed params\n     **/\n    public static function manageParams(\n        $itemtype,\n        $params = [],\n        $usesession = true,\n        $forcebookmark = false\n    ) {\n        $default_values = [];\n\n        $default_values[\"start\"]       = 0;\n        $default_values[\"order\"]       = \"ASC\";\n        $default_values[\"sort\"]        = 1;\n        $default_values[\"is_deleted\"]  = 0;\n        $default_values[\"as_map\"]      = 0;\n        $default_values[\"browse\"]      = 0;\n\n        if (isset($params['start'])) {\n            $params['start'] = (int)$params['start'];\n        }\n\n        $default_values[\"criteria\"]     = self::getDefaultCriteria($itemtype);\n        $default_values[\"metacriteria\"] = [];\n\n       // Reorg search array\n       // start\n       // order\n       // sort\n       // is_deleted\n       // itemtype\n       // criteria : array (0 => array (link =>\n       //                               field =>\n       //                               searchtype =>\n       //                               value =>   (contains)\n       // metacriteria : array (0 => array (itemtype =>\n       //                                  link =>\n       //                                  field =>\n       //                                  searchtype =>\n       //                                  value =>   (contains)\n\n        if ($itemtype != AllAssets::getType() && class_exists($itemtype)) {\n           // retrieve default values for current itemtype\n            $itemtype_default_values = [];\n            if (method_exists($itemtype, 'getDefaultSearchRequest')) {\n                $itemtype_default_values = call_user_func([$itemtype, 'getDefaultSearchRequest']);\n            }\n\n           // retrieve default values for the current user\n            $user_default_values = SavedSearch_User::getDefault(Session::getLoginUserID(), $itemtype);\n            if ($user_default_values === false) {\n                $user_default_values = [];\n            }\n\n           // we construct default values in this order:\n           // - general default\n           // - itemtype default\n           // - user default\n           //\n           // The last ones erase values or previous\n           // So, we can combine each part (order from itemtype, criteria from user, etc)\n            $default_values = array_merge(\n                $default_values,\n                $itemtype_default_values,\n                $user_default_values\n            );\n        }\n\n       // First view of the page or force bookmark : try to load a bookmark\n        if (\n            $forcebookmark\n            || ($usesession\n              && !isset($params[\"reset\"])\n              && !isset($_SESSION['glpisearch'][$itemtype]))\n        ) {\n            $user_default_values = SavedSearch_User::getDefault(Session::getLoginUserID(), $itemtype);\n            if ($user_default_values) {\n                $_SESSION['glpisearch'][$itemtype] = [];\n               // Only get datas for bookmarks\n                if ($forcebookmark) {\n                    $params = $user_default_values;\n                } else {\n                    $bookmark = new SavedSearch();\n                    $bookmark->load($user_default_values['savedsearches_id'], false);\n                }\n            }\n        }\n       // Force reorder criterias\n        if (\n            isset($params[\"criteria\"])\n            && is_array($params[\"criteria\"])\n            && count($params[\"criteria\"])\n        ) {\n            $tmp                = $params[\"criteria\"];\n            $params[\"criteria\"] = [];\n            foreach ($tmp as $val) {\n                $params[\"criteria\"][] = $val;\n            }\n        }\n\n       // transform legacy meta-criteria in criteria (with flag meta=true)\n       // at the end of the array, as before there was only at the end of the query\n        if (\n            isset($params[\"metacriteria\"])\n            && is_array($params[\"metacriteria\"])\n        ) {\n           // as we will append meta to criteria, check the key exists\n            if (!isset($params[\"criteria\"])) {\n                $params[\"criteria\"] = [];\n            }\n            foreach ($params[\"metacriteria\"] as $val) {\n                $params[\"criteria\"][] = $val + ['meta' => 1];\n            }\n            $params[\"metacriteria\"] = [];\n        }\n\n        if (\n            $usesession\n            && isset($params[\"reset\"])\n        ) {\n            if (isset($_SESSION['glpisearch'][$itemtype])) {\n                unset($_SESSION['glpisearch'][$itemtype]);\n            }\n        }\n\n        if (\n            isset($params) && is_array($params)\n            && $usesession\n        ) {\n            foreach ($params as $key => $val) {\n                $_SESSION['glpisearch'][$itemtype][$key] = $val;\n            }\n        }\n\n        $saved_params = $params;\n        foreach ($default_values as $key => $val) {\n            if (!isset($params[$key])) {\n                if (\n                    $usesession\n                    && ($key == 'is_deleted' || $key == 'as_map' || $key == 'browse' || !isset($saved_params['criteria'])) // retrieve session only if not a new request\n                    && isset($_SESSION['glpisearch'][$itemtype][$key])\n                ) {\n                    $params[$key] = $_SESSION['glpisearch'][$itemtype][$key];\n                } else {\n                    $params[$key]                    = $val;\n                    $_SESSION['glpisearch'][$itemtype][$key] = $val;\n                }\n            }\n        }\n\n        return $params;\n    }\n\n\n    /**\n     * Clean search options depending of user active profile\n     *\n     * @param string  $itemtype     Item type to manage\n     * @param integer $action       Action which is used to manupulate searchoption\n     *                               (default READ)\n     * @param boolean $withplugins  Get plugins options (true by default)\n     *\n     * @return array Clean $SEARCH_OPTION array\n     **/\n    public static function getCleanedOptions($itemtype, $action = READ, $withplugins = true)\n    {\n        global $CFG_GLPI;\n\n        $options = &self::getOptions($itemtype, $withplugins);\n        $todel   = [];\n\n        if (\n            !Session::haveRight('infocom', $action)\n            && Infocom::canApplyOn($itemtype)\n        ) {\n            $itemstodel = Infocom::getSearchOptionsToAdd($itemtype);\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n        if (\n            !Session::haveRight('contract', $action)\n            && in_array($itemtype, $CFG_GLPI[\"contract_types\"])\n        ) {\n            $itemstodel = Contract::getSearchOptionsToAdd();\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n        if (\n            !Session::haveRight('document', $action)\n            && Document::canApplyOn($itemtype)\n        ) {\n            $itemstodel = Document::getSearchOptionsToAdd();\n            $todel      = array_merge($todel, array_keys($itemstodel));\n        }\n\n       // do not show priority if you don't have right in profile\n        if (\n            ($itemtype == 'Ticket')\n            && ($action == UPDATE)\n            && !Session::haveRight('ticket', Ticket::CHANGEPRIORITY)\n        ) {\n            $todel[] = 3;\n        }\n\n        if ($itemtype == 'Computer') {\n            if (!Session::haveRight('networking', $action)) {\n                $itemstodel = NetworkPort::getSearchOptionsToAdd($itemtype);\n                $todel      = array_merge($todel, array_keys($itemstodel));\n            }\n        }\n        if (!Session::haveRight(strtolower($itemtype), READNOTE)) {\n            $todel[] = 90;\n        }\n\n        if (count($todel)) {\n            foreach ($todel as $ID) {\n                if (isset($options[$ID])) {\n                    unset($options[$ID]);\n                }\n            }\n        }\n\n        return $options;\n    }\n\n\n    /**\n     *\n     * Get an option number in the SEARCH_OPTION array\n     *\n     * @param class-string<CommonDBTM> $itemtype  Item type\n     * @param string $field     Name\n     *\n     * @return integer\n     **/\n    public static function getOptionNumber($itemtype, $field)\n    {\n\n        $table = $itemtype::getTable();\n        $opts  = &self::getOptions($itemtype);\n\n        foreach ($opts as $num => $opt) {\n            if (\n                is_array($opt) && isset($opt['table'])\n                && ($opt['table'] == $table)\n                && ($opt['field'] == $field)\n            ) {\n                return $num;\n            }\n        }\n        return 0;\n    }\n\n\n    /**\n     * Get the SEARCH_OPTION array\n     *\n     * @param string  $itemtype     Item type\n     * @param boolean $withplugins  Get search options from plugins (true by default)\n     *\n     * @return array The reference to the array of search options for the given item type\n     **/\n    public static function &getOptions($itemtype, $withplugins = true)\n    {\n        global $CFG_GLPI;\n\n        $item = null;\n\n        if (!isset(self::$search[$itemtype])) {\n           // standard type first\n            switch ($itemtype) {\n                case 'Internet':\n                    self::$search[$itemtype]['common']            = __('Characteristics');\n\n                    self::$search[$itemtype][1]['table']          = 'networkport_types';\n                    self::$search[$itemtype][1]['field']          = 'name';\n                    self::$search[$itemtype][1]['name']           = __('Name');\n                    self::$search[$itemtype][1]['datatype']       = 'itemlink';\n                    self::$search[$itemtype][1]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][2]['table']          = 'networkport_types';\n                    self::$search[$itemtype][2]['field']          = 'id';\n                    self::$search[$itemtype][2]['name']           = __('ID');\n                    self::$search[$itemtype][2]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][31]['table']         = 'glpi_states';\n                    self::$search[$itemtype][31]['field']         = 'completename';\n                    self::$search[$itemtype][31]['name']          = __('Status');\n\n                    self::$search[$itemtype] += NetworkPort::getSearchOptionsToAdd('networkport_types');\n                    break;\n\n                case AllAssets::getType():\n                    self::$search[$itemtype]['common']            = __('Characteristics');\n\n                    self::$search[$itemtype][1]['table']          = 'asset_types';\n                    self::$search[$itemtype][1]['field']          = 'name';\n                    self::$search[$itemtype][1]['name']           = __('Name');\n                    self::$search[$itemtype][1]['datatype']       = 'itemlink';\n                    self::$search[$itemtype][1]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][2]['table']          = 'asset_types';\n                    self::$search[$itemtype][2]['field']          = 'id';\n                    self::$search[$itemtype][2]['name']           = __('ID');\n                    self::$search[$itemtype][2]['searchtype']     = 'contains';\n\n                    self::$search[$itemtype][31]['table']         = 'glpi_states';\n                    self::$search[$itemtype][31]['field']         = 'completename';\n                    self::$search[$itemtype][31]['name']          = __('Status');\n\n                    self::$search[$itemtype] += Location::getSearchOptionsToAdd();\n\n                    self::$search[$itemtype][5]['table']          = 'asset_types';\n                    self::$search[$itemtype][5]['field']          = 'serial';\n                    self::$search[$itemtype][5]['name']           = __('Serial number');\n\n                    self::$search[$itemtype][6]['table']          = 'asset_types';\n                    self::$search[$itemtype][6]['field']          = 'otherserial';\n                    self::$search[$itemtype][6]['name']           = __('Inventory number');\n\n                    self::$search[$itemtype][16]['table']         = 'asset_types';\n                    self::$search[$itemtype][16]['field']         = 'comment';\n                    self::$search[$itemtype][16]['name']          = __('Comments');\n                    self::$search[$itemtype][16]['datatype']      = 'text';\n\n                    self::$search[$itemtype][70]['table']         = 'glpi_users';\n                    self::$search[$itemtype][70]['field']         = 'name';\n                    self::$search[$itemtype][70]['name']          = User::getTypeName(1);\n\n                    self::$search[$itemtype][7]['table']          = 'asset_types';\n                    self::$search[$itemtype][7]['field']          = 'contact';\n                    self::$search[$itemtype][7]['name']           = __('Alternate username');\n                    self::$search[$itemtype][7]['datatype']       = 'string';\n\n                    self::$search[$itemtype][8]['table']          = 'asset_types';\n                    self::$search[$itemtype][8]['field']          = 'contact_num';\n                    self::$search[$itemtype][8]['name']           = __('Alternate username number');\n                    self::$search[$itemtype][8]['datatype']       = 'string';\n\n                    self::$search[$itemtype][71]['table']         = 'glpi_groups';\n                    self::$search[$itemtype][71]['field']         = 'completename';\n                    self::$search[$itemtype][71]['name']          = Group::getTypeName(1);\n\n                    self::$search[$itemtype][19]['table']         = 'asset_types';\n                    self::$search[$itemtype][19]['field']         = 'date_mod';\n                    self::$search[$itemtype][19]['name']          = __('Last update');\n                    self::$search[$itemtype][19]['datatype']      = 'datetime';\n                    self::$search[$itemtype][19]['massiveaction'] = false;\n\n                    self::$search[$itemtype][23]['table']         = 'glpi_manufacturers';\n                    self::$search[$itemtype][23]['field']         = 'name';\n                    self::$search[$itemtype][23]['name']          = Manufacturer::getTypeName(1);\n\n                    self::$search[$itemtype][24]['table']         = 'glpi_users';\n                    self::$search[$itemtype][24]['field']         = 'name';\n                    self::$search[$itemtype][24]['linkfield']     = 'users_id_tech';\n                    self::$search[$itemtype][24]['name']          = __('Technician in charge of the hardware');\n                    self::$search[$itemtype][24]['condition']     = ['is_assign' => 1];\n\n                    self::$search[$itemtype][49]['table']          = 'glpi_groups';\n                    self::$search[$itemtype][49]['field']          = 'completename';\n                    self::$search[$itemtype][49]['linkfield']      = 'groups_id_tech';\n                    self::$search[$itemtype][49]['name']           = __('Group in charge of the hardware');\n                    self::$search[$itemtype][49]['condition']      = ['is_assign' => 1];\n                    self::$search[$itemtype][49]['datatype']       = 'dropdown';\n\n                    self::$search[$itemtype][80]['table']         = 'glpi_entities';\n                    self::$search[$itemtype][80]['field']         = 'completename';\n                    self::$search[$itemtype][80]['name']          = Entity::getTypeName(1);\n                    break;\n\n                default:\n                    if ($item = getItemForItemtype($itemtype)) {\n                        self::$search[$itemtype] = $item->searchOptions();\n                    }\n                    break;\n            }\n\n            if (\n                Session::getLoginUserID()\n                && in_array($itemtype, $CFG_GLPI[\"ticket_types\"])\n            ) {\n                self::$search[$itemtype]['tracking']          = __('Assistance');\n\n                self::$search[$itemtype][60]['table']         = 'glpi_tickets';\n                self::$search[$itemtype][60]['field']         = 'id';\n                self::$search[$itemtype][60]['datatype']      = 'count';\n                self::$search[$itemtype][60]['name']          = _x('quantity', 'Number of tickets');\n                self::$search[$itemtype][60]['forcegroupby']  = true;\n                self::$search[$itemtype][60]['usehaving']     = true;\n                self::$search[$itemtype][60]['massiveaction'] = false;\n                self::$search[$itemtype][60]['joinparams']    = ['beforejoin'\n                                                              => ['table'\n                                                                        => 'glpi_items_tickets',\n                                                                  'joinparams'\n                                                                        => ['jointype'\n                                                                                  => 'itemtype_item'\n                                                                        ]\n                                                              ],\n                    'condition'\n                                                              => getEntitiesRestrictRequest(\n                                                                  'AND',\n                                                                  'NEWTABLE'\n                                                              )\n                ];\n\n                self::$search[$itemtype][140]['table']         = 'glpi_problems';\n                self::$search[$itemtype][140]['field']         = 'id';\n                self::$search[$itemtype][140]['datatype']      = 'count';\n                self::$search[$itemtype][140]['name']          = _x('quantity', 'Number of problems');\n                self::$search[$itemtype][140]['forcegroupby']  = true;\n                self::$search[$itemtype][140]['usehaving']     = true;\n                self::$search[$itemtype][140]['massiveaction'] = false;\n                self::$search[$itemtype][140]['joinparams']    = ['beforejoin'\n                                                              => ['table'\n                                                                        => 'glpi_items_problems',\n                                                                  'joinparams'\n                                                                        => ['jointype'\n                                                                                  => 'itemtype_item'\n                                                                        ]\n                                                              ],\n                    'condition'\n                                                              => getEntitiesRestrictRequest(\n                                                                  'AND',\n                                                                  'NEWTABLE'\n                                                              )\n                ];\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"networkport_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += NetworkPort::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"contract_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Contract::getSearchOptionsToAdd();\n            }\n\n            if (\n                Document::canApplyOn($itemtype)\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Document::getSearchOptionsToAdd();\n            }\n\n            if (\n                Infocom::canApplyOn($itemtype)\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Infocom::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"domain_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Domain::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (\n                in_array($itemtype, $CFG_GLPI[\"appliance_types\"])\n                || ($itemtype == AllAssets::getType())\n            ) {\n                self::$search[$itemtype] += Appliance::getSearchOptionsToAdd($itemtype);\n            }\n\n            if (in_array($itemtype, $CFG_GLPI[\"link_types\"])) {\n                self::$search[$itemtype]['link'] = Link::getTypeName(Session::getPluralNumber());\n                self::$search[$itemtype] += Link::getSearchOptionsToAdd($itemtype);\n                self::$search[$itemtype]['manuallink'] = ManualLink::getTypeName(Session::getPluralNumber());\n                self::$search[$itemtype] += ManualLink::getSearchOptionsToAdd($itemtype);\n            }\n\n            if ($withplugins) {\n               // Search options added by plugins\n                $plugsearch = Plugin::getAddSearchOptions($itemtype);\n                $plugsearch = $plugsearch + Plugin::getAddSearchOptionsNew($itemtype);\n                if (count($plugsearch)) {\n                    self::$search[$itemtype] += ['plugins' => _n('Plugin', 'Plugins', Session::getPluralNumber())];\n                    self::$search[$itemtype] += $plugsearch;\n                }\n            }\n\n           // Complete linkfield if not define\n            if (is_null($item)) { // Special union type\n                $itemtable = $CFG_GLPI['union_search_type'][$itemtype];\n            } else {\n                if ($item = getItemForItemtype($itemtype)) {\n                    $itemtable = $item->getTable();\n                }\n            }\n\n            foreach (self::$search[$itemtype] as $key => $val) {\n                if (!is_array($val) || count($val) == 1) {\n                   // skip sub-menu\n                    continue;\n                }\n               // Compatibility before 0.80 : Force massive action to false if linkfield is empty :\n                if (isset($val['linkfield']) && empty($val['linkfield'])) {\n                    self::$search[$itemtype][$key]['massiveaction'] = false;\n                }\n\n               // Set default linkfield\n                if (!isset($val['linkfield']) || empty($val['linkfield'])) {\n                    if (\n                        (strcmp($itemtable, $val['table']) == 0)\n                        && (!isset($val['joinparams']) || (count($val['joinparams']) == 0))\n                    ) {\n                        self::$search[$itemtype][$key]['linkfield'] = $val['field'];\n                    } else {\n                        self::$search[$itemtype][$key]['linkfield'] = getForeignKeyFieldForTable($val['table']);\n                    }\n                }\n               // Add default joinparams\n                if (!isset($val['joinparams'])) {\n                    self::$search[$itemtype][$key]['joinparams'] = [];\n                }\n            }\n        }\n\n        return self::$search[$itemtype];\n    }\n\n    /**\n     * Is the search item related to infocoms\n     *\n     * @param string  $itemtype  Item type\n     * @param integer $searchID  ID of the element in $SEARCHOPTION\n     *\n     * @return boolean\n     **/\n    public static function isInfocomOption($itemtype, $searchID)\n    {\n        if (!Infocom::canApplyOn($itemtype)) {\n            return false;\n        }\n\n        $infocom_options = Infocom::rawSearchOptionsToAdd($itemtype);\n        $found_infocoms  = array_filter($infocom_options, function ($option) use ($searchID) {\n            return isset($option['id']) && $searchID == $option['id'];\n        });\n\n        return (count($found_infocoms) > 0);\n    }\n\n\n    /**\n     * @param string  $itemtype\n     * @param integer $field_num\n     **/\n    public static function getActionsFor($itemtype, $field_num)\n    {\n\n        $searchopt = &self::getOptions($itemtype);\n        $actions   = [\n            'contains'    => __('contains'),\n            'notcontains' => __('not contains'),\n            'searchopt'   => []\n        ];\n\n        if (isset($searchopt[$field_num]) && isset($searchopt[$field_num]['table'])) {\n            $actions['searchopt'] = $searchopt[$field_num];\n\n           // Force search type\n            if (isset($actions['searchopt']['searchtype'])) {\n               // Reset search option\n                $actions              = [];\n                $actions['searchopt'] = $searchopt[$field_num];\n                if (!is_array($actions['searchopt']['searchtype'])) {\n                    $actions['searchopt']['searchtype'] = [$actions['searchopt']['searchtype']];\n                }\n                foreach ($actions['searchopt']['searchtype'] as $searchtype) {\n                    switch ($searchtype) {\n                        case \"equals\":\n                            $actions['equals'] = __('is');\n                            break;\n\n                        case \"notequals\":\n                            $actions['notequals'] = __('is not');\n                            break;\n\n                        case \"contains\":\n                             $actions['contains']    = __('contains');\n                             $actions['notcontains'] = __('not contains');\n                            break;\n\n                        case \"notcontains\":\n                             $actions['notcontains'] = __('not contains');\n                            break;\n\n                        case \"under\":\n                            $actions['under'] = __('under');\n                            break;\n\n                        case \"notunder\":\n                            $actions['notunder'] = __('not under');\n                            break;\n\n                        case \"lessthan\":\n                            $actions['lessthan'] = __('before');\n                            break;\n\n                        case \"morethan\":\n                            $actions['morethan'] = __('after');\n                            break;\n                    }\n                }\n                return $actions;\n            }\n\n            if (isset($searchopt[$field_num]['datatype'])) {\n                switch ($searchopt[$field_num]['datatype']) {\n                    case 'mio':\n                    case 'count':\n                    case 'number':\n                        $opt = [\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n                        // No is / isnot if no limits defined\n                        if (\n                            !isset($searchopt[$field_num]['min'])\n                            && !isset($searchopt[$field_num]['max'])\n                        ) {\n                            unset($opt['equals']);\n                            unset($opt['notequals']);\n\n                         // https://github.com/glpi-project/glpi/issues/6917\n                         // change filter wording for numeric values to be more\n                         // obvious if the number dropdown will not be used\n                            $opt['contains']    = __('is');\n                            $opt['notcontains'] = __('is not');\n                        }\n                        return $opt;\n\n                    case 'bool':\n                        return [\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n\n                    case 'right':\n                        return ['equals'    => __('is'),\n                            'notequals' => __('is not'),\n                            'searchopt' => $searchopt[$field_num]\n                        ];\n\n                    case 'itemtypename':\n                        return ['equals'    => __('is'),\n                            'notequals' => __('is not'),\n                            'searchopt' => $searchopt[$field_num]\n                        ];\n\n                    case 'date':\n                    case 'datetime':\n                    case 'date_delay':\n                        return [\n                            'equals'      => __('is'),\n                            'notequals'   => __('is not'),\n                            'lessthan'    => __('before'),\n                            'morethan'    => __('after'),\n                            'contains'    => __('contains'),\n                            'notcontains' => __('not contains'),\n                            'searchopt'   => $searchopt[$field_num]\n                        ];\n                }\n            }\n\n           // switch ($searchopt[$field_num]['table']) {\n           //    case 'glpi_users_validation' :\n           //       return array('equals'    => __('is'),\n           //                    'notequals' => __('is not'),\n           //                    'searchopt' => $searchopt[$field_num]);\n           // }\n\n            switch ($searchopt[$field_num]['field']) {\n                case 'id':\n                    return ['equals'    => __('is'),\n                        'notequals' => __('is not'),\n                        'searchopt' => $searchopt[$field_num]\n                    ];\n\n                case 'name':\n                case 'completename':\n                    $actions = [\n                        'contains'    => __('contains'),\n                        'notcontains' => __('not contains'),\n                        'equals'      => __('is'),\n                        'notequals'   => __('is not'),\n                        'searchopt'   => $searchopt[$field_num]\n                    ];\n\n                   // Specific case of TreeDropdown : add under\n                    $itemtype_linked = getItemTypeForTable($searchopt[$field_num]['table']);\n                    if ($itemlinked = getItemForItemtype($itemtype_linked)) {\n                        if ($itemlinked instanceof CommonTreeDropdown) {\n                            $actions['under']    = __('under');\n                            $actions['notunder'] = __('not under');\n                        }\n                        return $actions;\n                    }\n            }\n        }\n        return $actions;\n    }\n\n\n    /**\n     * Print generic Header Column\n     *\n     * @param integer          $type     Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string           $value    Value to display\n     * @param integer          &$num     Column number\n     * @param string           $linkto   Link display element (HTML specific) (default '')\n     * @param boolean|integer  $issort   Is the sort column ? (default 0)\n     * @param string           $order    Order type ASC or DESC (defaut '')\n     * @param string           $options  Options to add (default '')\n     *\n     * @return string HTML to display\n     **/\n    public static function showHeaderItem(\n        $type,\n        $value,\n        &$num,\n        $linkto = \"\",\n        $issort = 0,\n        $order = \"\",\n        $options = \"\"\n    ) {\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE:\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"<th $options>\";\n                $PDF_TABLE .= htmlspecialchars($value);\n                $PDF_TABLE .= \"</th>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_HEADER,$SYLK_SIZE;\n                $SYLK_HEADER[$num] = self::sylk_clean($value);\n                $SYLK_SIZE[$num]   = Toolbox::strlen($SYLK_HEADER[$num]);\n                break;\n\n            case self::CSV_OUTPUT: //CSV\n                $out = \"\\\"\" . self::csv_clean($value) . \"\\\"\" . $_SESSION[\"glpicsv_delimiter\"];\n                break;\n\n            case self::NAMES_OUTPUT:\n                $out = \"\";\n                break;\n\n            default:\n                $class = \"\";\n                if ($issort) {\n                    $class = \"order_$order\";\n                }\n                $out = \"<th $options class='$class'>\";\n                if (!empty($linkto)) {\n                    $out .= \"<a href=\\\"$linkto\\\">\";\n                }\n                $out .= $value;\n                if (!empty($linkto)) {\n                    $out .= \"</a>\";\n                }\n                $out .= \"</th>\\n\";\n        }\n        $num++;\n        return $out;\n    }\n\n\n    /**\n     * Print generic normal Item Cell\n     *\n     * @param integer $type        Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $value       Value to display\n     * @param integer &$num        Column number\n     * @param integer $row         Row number\n     * @param string  $extraparam  Extra parameters for display (default '')\n     *\n     * @return string HTML to display\n     **/\n    public static function showItem($type, $value, &$num, $row, $extraparam = '')\n    {\n\n        $out = \"\";\n        // Handle null values\n        if ($value === null) {\n            $value = '';\n        }\n\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $value = DataExport::normalizeValueForTextExport($value ?? '');\n                $value = htmlspecialchars($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $PDF_TABLE .= \"<td $extraparam valign='top'>\";\n                $PDF_TABLE .= $value;\n                $PDF_TABLE .= \"</td>\";\n\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_ARRAY,$SYLK_SIZE;\n                $value = DataExport::normalizeValueForTextExport($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $SYLK_ARRAY[$row][$num] = self::sylk_clean($value);\n                $SYLK_SIZE[$num]        = max(\n                    $SYLK_SIZE[$num],\n                    Toolbox::strlen($SYLK_ARRAY[$row][$num])\n                );\n                break;\n\n            case self::CSV_OUTPUT: //csv\n                $value = DataExport::normalizeValueForTextExport($value);\n                $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                $out   = \"\\\"\" . self::csv_clean($value) . \"\\\"\" . $_SESSION[\"glpicsv_delimiter\"];\n                break;\n\n            case self::NAMES_OUTPUT:\n               // We only want to display one column (the name of the item).\n               // The name field is always the first column expect for tickets\n               // which have their ids as the first column instead, thus moving the\n               // name to the second column.\n               // We don't have access to the itemtype so we must rely on data\n               // types to figure which column to use :\n               //    - Ticket will have a numeric first column (id) and an HTML\n               //    link containing the name as the second column.\n               //    - Other items will have an HTML link containing the name as\n               //    the first column and a simple string containing the entity\n               //    name as the second column.\n               // -> We can check that the column is the first or second AND is html\n                if (\n                    strip_tags($value) !== $value\n                    && ($num == 1 || $num == 2)\n                ) {\n                   // Use a regex to keep only the link, there may be other content\n                   // after that we don't need (script, tooltips, ...)\n                    if (preg_match('/<a.*<\\/a>/', $value, $matches)) {\n                        $out = html_entity_decode(strip_tags($matches[0]));\n                    }\n                }\n                break;\n\n            default:\n                global $CFG_GLPI;\n                $out = \"<td $extraparam valign='top'>\";\n\n                if (!preg_match('/' . self::LBHR . '/', $value)) {\n                    $values = preg_split('/' . self::LBBR . '/i', $value);\n                    $line_delimiter = '<br>';\n                } else {\n                    $values = preg_split('/' . self::LBHR . '/i', $value);\n                    $line_delimiter = '<hr>';\n                }\n\n                if (\n                    count($values) > 1\n                    && Toolbox::strlen($value) > $CFG_GLPI['cut']\n                ) {\n                    $value = '';\n                    foreach ($values as $v) {\n                        $value .= $v . $line_delimiter;\n                    }\n                    $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                    $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                    $value = '<div class=\"fup-popup\">' . $value . '</div>';\n                    $valTip = \"&nbsp;\" . Html::showToolTip(\n                        $value,\n                        [\n                            'awesome-class'   => 'fa-comments',\n                            'display'         => false,\n                            'autoclose'       => false,\n                            'onclick'         => true\n                        ]\n                    );\n                    $out .= $values[0] . $valTip;\n                } else {\n                    $value = preg_replace('/' . self::LBBR . '/', '<br>', $value);\n                    $value = preg_replace('/' . self::LBHR . '/', '<hr>', $value);\n                    $out .= $value;\n                }\n                $out .= \"</td>\\n\";\n        }\n        $num++;\n        return $out;\n    }\n\n\n    /**\n     * Print generic error\n     *\n     * @param integer $type     Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $message  Message to display, if empty \"no item found\" will be displayed\n     *\n     * @return string HTML to display\n     **/\n    public static function showError($type, $message = \"\")\n    {\n        if (strlen($message) == 0) {\n            $message = __('No item found');\n        }\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n                break;\n\n            default:\n                $out = \"<div class='center b'>$message</div>\\n\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic footer\n     *\n     * @param integer $type  Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param string  $title title of file : used for PDF (default '')\n     * @param integer $count Total number of results\n     *\n     * @return string HTML to display\n     **/\n    public static function showFooter($type, $title = \"\", $count = null)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n\n                $font       = 'helvetica';\n                $fontsize   = 8;\n                if (isset($_SESSION['glpipdffont']) && $_SESSION['glpipdffont']) {\n                    $font       = $_SESSION['glpipdffont'];\n                }\n\n                $pdf = new GLPIPDF(\n                    [\n                        'font_size'  => $fontsize,\n                        'font'       => $font,\n                        'orientation'        => $type == self::PDF_OUTPUT_LANDSCAPE ? 'L' : 'P',\n                    ],\n                    $count,\n                    $title,\n                );\n\n                $PDF_TABLE .= '</table>';\n                $pdf->writeHTML($PDF_TABLE, true, false, true);\n                $pdf->Output('glpi.pdf', 'I');\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                global $SYLK_HEADER,$SYLK_ARRAY,$SYLK_SIZE;\n               // largeurs des colonnes\n                foreach ($SYLK_SIZE as $num => $val) {\n                    $out .= \"F;W\" . $num . \" \" . $num . \" \" . min(50, $val) . \"\\n\";\n                }\n                $out .= \"\\n\";\n               // Header\n                foreach ($SYLK_HEADER as $num => $val) {\n                    $out .= \"F;SDM4;FG0C;\" . ($num == 1 ? \"Y1;\" : \"\") . \"X$num\\n\";\n                    $out .= \"C;N;K\\\"$val\\\"\\n\";\n                    $out .= \"\\n\";\n                }\n               // Datas\n                foreach ($SYLK_ARRAY as $row => $tab) {\n                    foreach ($tab as $num => $val) {\n                        $out .= \"F;P3;FG0L;\" . ($num == 1 ? \"Y\" . $row . \";\" : \"\") . \"X$num\\n\";\n                        $out .= \"C;N;K\\\"$val\\\"\\n\";\n                    }\n                }\n                $out .= \"E\\n\";\n                break;\n\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"</table></div>\\n\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic footer\n     *\n     * @param integer         $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param integer         $rows   Number of rows\n     * @param integer         $cols   Number of columns\n     * @param boolean|integer $fixed  Used tab_cadre_fixe table for HTML export ? (default 0)\n     *\n     * @return string HTML to display\n     **/\n    public static function showHeader($type, $rows, $cols, $fixed = 0)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE = \"<table cellspacing=\\\"0\\\" cellpadding=\\\"1\\\" border=\\\"1\\\" >\";\n                break;\n\n            case self::SYLK_OUTPUT: // Sylk\n                global $SYLK_ARRAY, $SYLK_HEADER, $SYLK_SIZE;\n                $SYLK_ARRAY  = [];\n                $SYLK_HEADER = [];\n                $SYLK_SIZE   = [];\n               // entetes HTTP\n                header(\"Expires: Mon, 26 Nov 1962 00:00:00 GMT\");\n                header('Pragma: private'); /// IE BUG + SSL\n                header('Cache-control: private, must-revalidate'); /// IE BUG + SSL\n                header(\"Content-disposition: filename=glpi.slk\");\n                header('Content-type: application/octetstream');\n               // entete du fichier\n                echo \"ID;PGLPI_EXPORT\\n\"; // ID;Pappli\n                echo \"\\n\";\n               // formats\n                echo \"P;PGeneral\\n\";\n                echo \"P;P#,##0.00\\n\";       // P;Pformat_1 (reels)\n                echo \"P;P#,##0\\n\";          // P;Pformat_2 (entiers)\n                echo \"P;P@\\n\";              // P;Pformat_3 (textes)\n                echo \"\\n\";\n               // polices\n                echo \"P;EArial;M200\\n\";\n                echo \"P;EArial;M200\\n\";\n                echo \"P;EArial;M200\\n\";\n                echo \"P;FArial;M200;SB\\n\";\n                echo \"\\n\";\n               // nb lignes * nb colonnes\n                echo \"B;Y\" . $rows;\n                echo \";X\" . $cols . \"\\n\"; // B;Yligmax;Xcolmax\n                echo \"\\n\";\n                break;\n\n            case self::CSV_OUTPUT: // csv\n                header(\"Expires: Mon, 26 Nov 1962 00:00:00 GMT\");\n                header('Pragma: private'); /// IE BUG + SSL\n                header('Cache-control: private, must-revalidate'); /// IE BUG + SSL\n                header(\"Content-disposition: filename=glpi.csv\");\n                header('Content-type: text/csv');\n               // zero width no break space (for excel)\n                echo\"\\xEF\\xBB\\xBF\";\n                break;\n\n            case self::NAMES_OUTPUT:\n                header(\"Content-disposition: filename=glpi.txt\");\n                header('Content-type: file/txt');\n                break;\n\n            default:\n                if ($fixed) {\n                    $out = \"<div class='center'><table border='0' class='table'>\";\n                } else {\n                    $out = \"<div class='center'><table border='0' class='table card-table table-hover'>\";\n                }\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print begin of header part\n     *\n     * @param integer $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @since 0.85\n     *\n     * @return string HTML to display\n     **/\n    public static function showBeginHeader($type)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"<thead>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"<thead>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print end of header part\n     *\n     * @param integer $type   Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @since 0.85\n     *\n     * @return string to display\n     **/\n    public static function showEndHeader($type)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= \"</thead>\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $out = \"</thead>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic new line\n     *\n     * @param integer $type        Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     * @param boolean $odd         Is it a new odd line ? (false by default)\n     * @param boolean $is_deleted  Is it a deleted search ? (false by default)\n     *\n     * @return string HTML to display\n     **/\n    public static function showNewLine($type, $odd = false, $is_deleted = false)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $style = \"\";\n                if ($odd) {\n                    $style = \" style=\\\"background-color:#DDDDDD;\\\" \";\n                }\n                $PDF_TABLE .= \"<tr $style nobr=\\\"true\\\">\";\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                break;\n\n            default:\n                $class = \" class='tab_bg_2\" . ($is_deleted ? '_2' : '') . \"' \";\n                if ($odd) {\n                    $class = \" class='tab_bg_1\" . ($is_deleted ? '_2' : '') . \"' \";\n                }\n                $out = \"<tr $class>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * Print generic end line\n     *\n     * @param integer $type  Display type (0=HTML, 1=Sylk, 2=PDF, 3=CSV)\n     *\n     * @return string HTML to display\n     **/\n    public static function showEndLine($type, bool $is_header_line = false)\n    {\n\n        $out = \"\";\n        switch ($type) {\n            case self::PDF_OUTPUT_LANDSCAPE: //pdf\n            case self::PDF_OUTPUT_PORTRAIT:\n                global $PDF_TABLE;\n                $PDF_TABLE .= '</tr>';\n                break;\n\n            case self::SYLK_OUTPUT: //sylk\n                break;\n\n            case self::CSV_OUTPUT: //csv\n            case self::NAMES_OUTPUT:\n                // NAMES_OUTPUT has no output on header lines\n                $newline = $type != self::NAMES_OUTPUT || !$is_header_line;\n                if ($newline) {\n                    $out = \"\\n\";\n                }\n                break;\n\n            default:\n                $out = \"</tr>\";\n        }\n        return $out;\n    }\n\n\n    /**\n     * @param array $joinparams\n     */\n    public static function computeComplexJoinID(array $joinparams)\n    {\n\n        $complexjoin = '';\n\n        if (isset($joinparams['condition'])) {\n            if (!is_array($joinparams['condition'])) {\n                $complexjoin .= $joinparams['condition'];\n            } else {\n                global $DB;\n                $dbi = new DBmysqlIterator($DB);\n                $sql_clause = $dbi->analyseCrit($joinparams['condition']);\n                $complexjoin .= ' AND ' . $sql_clause; //TODO: and should came from conf\n            }\n        }\n\n       // For jointype == child\n        if (\n            isset($joinparams['jointype']) && ($joinparams['jointype'] == 'child')\n            && isset($joinparams['linkfield'])\n        ) {\n            $complexjoin .= $joinparams['linkfield'];\n        }\n\n        if (isset($joinparams['beforejoin'])) {\n            if (isset($joinparams['beforejoin']['table'])) {\n                $joinparams['beforejoin'] = [$joinparams['beforejoin']];\n            }\n            foreach ($joinparams['beforejoin'] as $tab) {\n                if (isset($tab['table'])) {\n                    $complexjoin .= $tab['table'];\n                }\n                if (isset($tab['joinparams']) && isset($tab['joinparams']['condition'])) {\n                    if (!is_array($tab['joinparams']['condition'])) {\n                        $complexjoin .= $tab['joinparams']['condition'];\n                    } else {\n                        global $DB;\n                        $dbi = new DBmysqlIterator($DB);\n                        $sql_clause = $dbi->analyseCrit($tab['joinparams']['condition']);\n                        $complexjoin .= ' AND ' . $sql_clause; //TODO: and should came from conf\n                    }\n                }\n            }\n        }\n\n        if (!empty($complexjoin)) {\n            $complexjoin = md5($complexjoin);\n        }\n        return $complexjoin;\n    }\n\n\n    /**\n     * Clean display value for csv export\n     *\n     * @param string $value value\n     *\n     * @return string Clean value\n     **/\n    public static function csv_clean($value)\n    {\n\n        $value = str_replace(\"\\\"\", \"''\", $value);\n\n        return $value;\n    }\n\n\n    /**\n     * Clean display value for sylk export\n     *\n     * @param string $value value\n     *\n     * @return string Clean value\n     **/\n    public static function sylk_clean($value)\n    {\n\n        $value = preg_replace('/\\x0A/', ' ', $value);\n        $value = preg_replace('/\\x0D/', '', $value);\n        $value = str_replace(\"\\\"\", \"''\", $value);\n        $value = str_replace(\"\\n\", \" | \", $value);\n\n        return $value;\n    }\n\n\n    /**\n     * Create SQL search condition\n     *\n     * @param string  $field  Nname (should be ` protected)\n     * @param string  $val    Value to search\n     * @param boolean $not    Is a negative search ? (false by default)\n     * @param string  $link   With previous criteria (default 'AND')\n     *\n     * @return search SQL string\n     **/\n    public static function makeTextCriteria($field, $val, $not = false, $link = 'AND')\n    {\n\n        $sql = $field . self::makeTextSearch($val, $not);\n       // mange empty field (string with length = 0)\n        $sql_or = \"\";\n        if (strtolower($val) == \"null\") {\n            $sql_or = \"OR $field = ''\";\n        }\n\n        if (\n            ($not && ($val != 'NULL') && ($val != 'null') && ($val != '^$'))    // Not something\n            || (!$not && ($val == '^$'))\n        ) {   // Empty\n            $sql = \"($sql OR $field IS NULL)\";\n        }\n        return \" $link ($sql $sql_or)\";\n    }\n\n    /**\n     * Create SQL search value\n     *\n     * @since 9.4\n     *\n     * @param string  $val value to search\n     *\n     * @return string|null\n     **/\n    public static function makeTextSearchValue($val)\n    {\n        // `$val` will mostly comes from sanitized input, but may also be raw value.\n        // 1. Unsanitize value to be sure to use raw value.\n        // 2. Escape raw value to protect SQL special chars.\n        $val = Sanitizer::dbEscape(Sanitizer::unsanitize($val));\n\n       // escape _ char used as wildcard in mysql likes\n        $val = str_replace('_', '\\\\_', $val);\n\n        if ($val === 'NULL' || $val === 'null') {\n            return null;\n        }\n\n        $val = trim($val);\n\n        if ($val === '^') {\n           // Special case, searching \"^\" means we are searching for a non empty/null field\n            return '%';\n        }\n\n        if ($val === '' || $val === '^$' || $val === '$') {\n            return '';\n        }\n\n        if (preg_match('/^\\^/', $val)) {\n           // Remove leading `^`\n            $val = ltrim(preg_replace('/^\\^/', '', $val));\n        } else {\n           // Add % wildcard before searched string if not begining by a `^`\n            $val = '%' . $val;\n        }\n\n        if (preg_match('/\\$$/', $val)) {\n           // Remove trailing `$`\n            $val = rtrim(preg_replace('/\\$$/', '', $val));\n        } else {\n           // Add % wildcard after searched string if not ending by a `$`\n            $val = $val . '%';\n        }\n\n        return $val;\n    }\n\n\n    /**\n     * Create SQL search condition\n     *\n     * @param string  $val  Value to search\n     * @param boolean $not  Is a negative search ? (false by default)\n     *\n     * @return string Search string\n     **/\n    public static function makeTextSearch($val, $not = false)\n    {\n\n        $NOT = \"\";\n        if ($not) {\n            $NOT = \"NOT\";\n        }\n\n        $val = self::makeTextSearchValue($val);\n        if ($val == null) {\n            $SEARCH = \" IS $NOT NULL \";\n        } else {\n            $SEARCH = \" $NOT LIKE \" . DBmysql::quoteValue($val) . \" \";\n        }\n        return $SEARCH;\n    }\n\n\n    /**\n     * @since 0.84\n     *\n     * @param string $pattern\n     * @param string $subject\n     **/\n    public static function explodeWithID($pattern, $subject)\n    {\n\n        $tab = explode($pattern, $subject);\n\n        if (isset($tab[1]) && !is_numeric($tab[1])) {\n           // Report $ to tab[0]\n            if (preg_match('/^(\\\\$*)(.*)/', $tab[1], $matchs)) {\n                if (isset($matchs[2]) && is_numeric($matchs[2])) {\n                    $tab[1]  = $matchs[2];\n                    $tab[0] .= $matchs[1];\n                }\n            }\n        }\n       // Manage NULL value\n        if ($tab[0] == self::NULLVALUE) {\n            $tab[0] = null;\n        }\n        return $tab;\n    }\n\n    /**\n     * Add join for dropdown translations\n     *\n     * @param string $alias    Alias for translation table\n     * @param string $table    Table to join on\n     * @param class-string<CommonDBTM> $itemtype Item type\n     * @param string $field    Field name\n     *\n     * @return string\n     */\n    public static function joinDropdownTranslations($alias, $table, $itemtype, $field)\n    {\n        return \"LEFT JOIN `glpi_dropdowntranslations` AS `$alias`\n                  ON (`$alias`.`itemtype` = '$itemtype'\n                        AND `$alias`.`items_id` = `$table`.`id`\n                        AND `$alias`.`language` = '\" .\n                              $_SESSION['glpilanguage'] . \"'\n                        AND `$alias`.`field` = '$field')\";\n    }\n\n    /**\n     * Get table name for item type\n     *\n     * @param class-string<CommonDBTM> $itemtype\n     *\n     * @return string\n     */\n    public static function getOrigTableName(string $itemtype): string\n    {\n        return (is_a($itemtype, CommonDBTM::class, true)) ? $itemtype::getTable() : getTableForItemType($itemtype);\n    }\n}\n"], "filenames": ["src/Search.php"], "buggy_code_start_loc": [6308], "buggy_code_end_loc": [7171], "fixing_code_start_loc": [6309], "fixing_code_end_loc": [7178], "type": "CWE-79", "message": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Affected versions were found to not properly neutralize HTML tags in the global search context. Users are advised to upgrade to version 10.0.3 to resolve this issue. Users unable to upgrade should disable global search.", "other": {"cve": {"id": "CVE-2022-31187", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-14T18:15:10.437", "lastModified": "2022-09-19T14:08:43.310", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI stands for Gestionnaire Libre de Parc Informatique and is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. Affected versions were found to not properly neutralize HTML tags in the global search context. Users are advised to upgrade to version 10.0.3 to resolve this issue. Users unable to upgrade should disable global search."}, {"lang": "es", "value": "GLPI son las siglas de Gestionnaire Libre de Parc Informatique y es un Paquete de Software Libre de Administraci\u00f3n de Activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. Se ha detectado que las versiones afectadas no neutralizan correctamente las etiquetas HTML en el contexto de la b\u00fasqueda global. Es recomendado a usuarios actualizar a versi\u00f3n 10.0.3 para resolver este problema. Los usuarios que no puedan actualizarse deber\u00e1n deshabilitar la b\u00fasqueda global"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.3", "matchCriteriaId": "F1118A51-CFED-4D17-8344-EA94C8F77EAD"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/e248ed5649d267c0f61a17d99b7bd6be4074aadb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-43j5-xhvj-9236", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/e248ed5649d267c0f61a17d99b7bd6be4074aadb"}}