{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\CartManager\\CartPriceModificator\\Discount;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\ActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\EnvironmentInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Type\\Decimal;\n\n// TODO use Decimal for amounts?\nclass CartDiscount implements DiscountInterface, CartActionInterface\n{\n    /**\n     * @var float\n     */\n    protected $amount = 0;\n\n    /**\n     * @var float\n     */\n    protected $percent = 0;\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return ActionInterface\n     */\n    public function executeOnCart(EnvironmentInterface $environment)\n    {\n        $priceCalculator = $environment->getCart()->getPriceCalculator();\n\n        $amount = Decimal::create($this->amount);\n        if ($amount->isZero()) {\n            $amount = $priceCalculator->getSubTotal()->getAmount()->toPercentage($this->getPercent());\n            //round to 2 digits for further calculations to avoid rounding issues at later point\n            $amount = Decimal::fromDecimal($amount->withScale(2));\n        }\n\n        $amount = $amount->mul(-1);\n\n        //make sure that one rule is applied only once\n        foreach ($priceCalculator->getModificators() as &$modificator) {\n            if ($modificator instanceof Discount && $modificator->getRuleId() == $environment->getRule()->getId()) {\n                $modificator->setAmount($amount);\n                $priceCalculator->calculate(true);\n\n                return $this;\n            }\n        }\n\n        $modDiscount = new Discount($environment->getRule());\n        $modDiscount->setAmount($amount);\n\n        $priceCalculator->addModificator($modDiscount);\n        $priceCalculator->calculate(true);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function toJSON()\n    {\n        return json_encode([\n            'type' => 'CartDiscount',\n            'amount' => $this->getAmount(),\n            'percent' => $this->getPercent(),\n        ]);\n    }\n\n    /**\n     * @param string $string\n     *\n     * @return ActionInterface\n     */\n    public function fromJSON($string)\n    {\n        $json = json_decode($string);\n        if ($json->amount) {\n            $this->setAmount($json->amount);\n        }\n        if ($json->percent) {\n            $this->setPercent($json->percent);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param float $amount\n     */\n    public function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    /**\n     * @return float\n     */\n    public function getAmount()\n    {\n        return $this->amount;\n    }\n\n    /**\n     * @param float $percent\n     */\n    public function setPercent($percent)\n    {\n        $this->percent = $percent;\n    }\n\n    /**\n     * @return float\n     */\n    public function getPercent()\n    {\n        return $this->percent;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\ActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\EnvironmentInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Type\\Decimal;\n\n// TODO use Decimal for amounts?\nclass ProductDiscount implements ProductDiscountInterface\n{\n    /**\n     * @var float\n     */\n    protected $amount = 0;\n\n    /**\n     * @var float\n     */\n    protected $percent = 0;\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return ActionInterface\n     */\n    public function executeOnProduct(EnvironmentInterface $environment)\n    {\n        $priceinfo = $environment->getPriceInfo();\n\n        $amount = Decimal::create($this->amount);\n\n        // TODO use discount()?\n        if ($amount->equals(Decimal::create(0))) {\n            $amount = $priceinfo->getAmount()->mul($this->getPercent() / 100);\n        }\n\n        $amount = $priceinfo->getAmount()->sub($amount);\n        $priceinfo->setAmount($amount->isPositive() ? $amount : Decimal::zero());\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function toJSON()\n    {\n        return json_encode([\n            'type' => 'ProductDiscount',\n            'amount' => $this->getAmount(),\n            'percent' => $this->getPercent(),\n        ]);\n    }\n\n    /**\n     * @param string $string\n     *\n     * @return ActionInterface\n     */\n    public function fromJSON($string)\n    {\n        $json = json_decode($string);\n        if ($json->amount) {\n            $this->setAmount($json->amount);\n        }\n        if ($json->percent) {\n            $this->setPercent($json->percent);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param float $amount\n     */\n    public function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    /**\n     * @return float\n     */\n    public function getAmount()\n    {\n        return $this->amount;\n    }\n\n    /**\n     * @param float $percent\n     */\n    public function setPercent($percent)\n    {\n        $this->percent = $percent;\n    }\n\n    /**\n     * @return float\n     */\n    public function getPercent()\n    {\n        return $this->percent;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.item\");\npimcore.bundle.EcommerceFramework.pricing.config.item = Class.create({\n\n    /**\n     * pimcore.bundle.EcommerceFramework.pricing.config.panel\n     */\n    parent: {},\n\n\n    /**\n     * constructor\n     * @param parent\n     * @param data\n     */\n    initialize: function(parent, data) {\n        this.parent = parent;\n        this.data = data;\n        this.currentIndex = 0;\n\n        this.tabPanel = new Ext.TabPanel({\n            title: this.data.name,\n            closable: true,\n            deferredRender: false,\n            forceLayout: true,\n            id: \"pimcore_pricing_panel_\" + this.data.id,\n            buttons: [{\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_apply\",\n                handler: this.save.bind(this)\n            }],\n            items: [\n                this.getSettings(),\n                this.getConditions(),\n                this.getActions()\n            ]\n        });\n        this.tabPanel.on(\"beforedestroy\", function () {\n            delete this.parent.panels[\"pricingrule_\" + this.data.id];\n        }.bind(this));\n\n\n        // add saved conditions\n        if(this.data.condition)\n        {\n            var list = this;\n            var level = 0;\n            var open = 0;\n            var handleCondition = function(condition){\n                if(condition.type == 'Bracket')\n                {\n                    // workarround for brackets\n                    level++;\n                    Ext.each(condition.conditions, function(item, index, allItems){\n                        item.condition.operator = item.operator;\n\n                        if(level > 1)\n                        {\n                            if(index == 0)\n                            {\n                                item.condition.bracketLeft = true;\n                                open++;\n                            }\n                            if(index == allItems.length -1 && open > 0)\n                            {\n                                item.condition.bracketRight = true;\n                                open--;\n                            }\n                        }\n\n                        handleCondition(item.condition);\n                    });\n                }\n                else\n                {\n                    // normal condition\n                    list.addCondition(\"condition\" + ucfirst(condition.type), condition);\n                }\n            };\n\n            handleCondition(this.data.condition);\n        }\n\n        // add saved actions\n        if(this.data.actions)\n        {\n            var list = this;\n            Ext.each(this.data.actions, function(action){\n                list.addAction(\"action\" + ucfirst(action.type), action);\n            });\n        }\n\n        // ...\n        var panel = this.parent.getTabPanel();\n        panel.add(this.tabPanel);\n        panel.setActiveTab(this.tabPanel);\n        panel.updateLayout();\n    },\n\n    activate: function () {\n        var panel = this.parent.getTabPanel();\n        panel.setActiveTab(this.tabPanel);\n        panel.updateLayout();\n    },\n\n    /**\n     * Basic rule Settings\n     * @returns Ext.form.FormPanel\n     */\n    getSettings: function () {\n        var data = this.data;\n\n        // create tabs for available languages\n        var langTabs = [];\n        Ext.each(pimcore.settings.websiteLanguages, function(lang){\n            var tab = {\n                title: pimcore.available_languages[ lang ],\n                items: [{\n                    xtype: \"textfield\",\n                    name: \"label.\" + lang,\n                    fieldLabel: t(\"label\"),\n                    width: 350,\n                    value: data.label[ lang ]\n                }, {\n                    xtype: \"textarea\",\n                    name: \"description.\" + lang,\n                    fieldLabel: t(\"description\"),\n                    width: 500,\n                    height: 100,\n                    value: data.description[ lang ]\n                }]\n            };\n\n            langTabs.push( tab );\n        });\n\n        // ...\n        this.settingsForm = new Ext.form.FormPanel({\n            title: t(\"settings\"),\n            bodyStyle: \"padding:10px;\",\n            autoScroll: true,\n            //border:false,\n            items: [{\n                style: \"margin-bottom: 10px\",\n                cls: \"object_localizedfields_panel\",\n                xtype: 'panel',\n                items: [{\n                    xtype: \"tabpanel\",\n                    defaults: {\n                        autoHeight:true\n                        ,\n                        bodyStyle:'padding:10px;'\n                    },\n                    items: langTabs\n                }]\n                }, {\n                name: \"behavior\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_behavior\"),\n                xtype: \"combo\",\n                store: [\n                    [\"additiv\", t(\"bundle_ecommerce_pricing_config_additiv\")],\n                    [\"stopExecute\", t(\"bundle_ecommerce_pricing_config_stopExecute\")]\n                ],\n                mode: \"local\",\n                width: 300,\n                editable: false,\n                value: this.data.behavior,\n                triggerAction: \"all\"\n            }, {\n                xtype: \"checkbox\",\n                name: \"active\",\n                fieldLabel: t(\"active\"),\n                checked: this.data.active == \"1\"\n            }]\n        });\n\n        return this.settingsForm;\n    },\n\n    /**\n     * @returns Ext.Panel\n     */\n    getConditions: function() {\n\n        // init\n        var _this = this;\n        var addMenu = [];\n        var itemTypes = Object.keys(pimcore.bundle.EcommerceFramework.pricing.conditions);\n        // show only defined conditions\n        Ext.each(this.parent.condition, function (condition) {\n            var method = \"condition\" + condition;\n            if(itemTypes.indexOf(method) != -1)\n            {\n                addMenu.push({\n                    iconCls: \"bundle_ecommerce_pricing_icon_\" + method,\n                    text: pimcore.bundle.EcommerceFramework.pricing.conditions[method](null, null,true),\n                    handler: _this.addCondition.bind(_this, method)\n                });\n            }\n        });\n\n\n        this.conditionsContainer = new Ext.Panel({\n            title: t(\"conditions\"),\n            autoScroll: true,\n            forceLayout: true,\n            tbar: [{\n                iconCls: \"pimcore_icon_add\",\n                menu: addMenu\n            }],\n            border: false\n        });\n\n        return this.conditionsContainer;\n    },\n\n    /**\n     * @returns {*}\n     * @todo\n     */\n    getActions: function () {\n\n        // init\n        var _this = this;\n        var addMenu = [];\n        var itemTypes = Object.keys(pimcore.bundle.EcommerceFramework.pricing.actions);\n\n        // show only defined actions\n        Ext.each(this.parent.action, function (action) {\n            var method = \"action\" + action;\n            if(itemTypes.indexOf(method) != -1)\n            {\n                addMenu.push({\n                    iconCls: \"bundle_ecommerce_pricing_icon_\" + method,\n                    text: pimcore.bundle.EcommerceFramework.pricing.actions[method](null, null,true),\n                    handler: _this.addAction.bind(_this, method)\n                });\n            }\n        });\n\n\n        this.actionsContainer = new Ext.Panel({\n            title: t(\"actions\"),\n            autoScroll: true,\n            forceLayout: true,\n            bodyStyle: 'padding: 0 10px 10px 10px;',\n            tbar: [{\n                iconCls: \"pimcore_icon_add\",\n                menu: addMenu\n            }],\n            border: false\n        });\n\n        return this.actionsContainer;\n    },\n\n\n    /**\n     * add condition item\n     * @param type\n     * @param data\n     */\n    addCondition: function (type, data) {\n\n        // create condition\n        var item = pimcore.bundle.EcommerceFramework.pricing.conditions[type](this, data);\n\n        // add logic for brackets\n        var tab = this;\n        item.on(\"afterrender\", function (el) {\n            el.getEl().applyStyles({position: \"relative\", \"min-height\": \"40px\", \"border-bottom\": \"1px solid #d0d0d0\"});\n            var leftBracket = el.getEl().insertHtml(\"beforeEnd\",\n                '<div class=\"pimcore_targeting_bracket pimcore_targeting_bracket_left\">(</div>', true);\n            var rightBracket = el.getEl().insertHtml(\"beforeEnd\",\n                '<div class=\"pimcore_targeting_bracket pimcore_targeting_bracket_right\">)</div>', true);\n\n            if(data[\"bracketLeft\"]){\n                leftBracket.addCls(\"pimcore_targeting_bracket_active\");\n            }\n            if(data[\"bracketRight\"]){\n                rightBracket.addCls(\"pimcore_targeting_bracket_active\");\n            }\n\n            // open\n            leftBracket.on(\"click\", function (ev, el) {\n                var bracket = Ext.get(el);\n                bracket.toggleCls(\"pimcore_targeting_bracket_active\");\n\n                tab.recalculateBracketIdent(tab.conditionsContainer.items);\n            });\n\n            // close\n            rightBracket.on(\"click\", function (ev, el) {\n                var bracket = Ext.get(el);\n                bracket.toggleCls(\"pimcore_targeting_bracket_active\");\n\n                tab.recalculateBracketIdent(tab.conditionsContainer.items);\n            });\n\n            // make ident\n            tab.recalculateBracketIdent(tab.conditionsContainer.items);\n        });\n\n        this.conditionsContainer.add(item);\n        item.updateLayout();\n        this.conditionsContainer.updateLayout();\n\n        this.currentIndex++;\n\n        this.recalculateButtonStatus();\n    },\n\n    /**\n     * add action item\n     * @param type\n     * @param data\n     */\n    addAction: function (type, data) {\n\n        var item = pimcore.bundle.EcommerceFramework.pricing.actions[type](this, data);\n\n        this.actionsContainer.add(item);\n        item.updateLayout();\n        this.actionsContainer.updateLayout();\n    },\n\n    /**\n     * save config\n     */\n    save: function () {\n        var saveData = {};\n\n        // general settings\n        saveData[\"settings\"] = this.settingsForm.getForm().getFieldValues();\n\n        // get defined conditions\n        var conditionsData = [];\n        var operator;\n        var conditions = this.conditionsContainer.items.getRange();\n        for (var i=0; i<conditions.length; i++) {\n            var condition = {};\n\n            // collect condition settings\n            for(var c=0; c<conditions[i].items.length; c++)\n            {\n                var item = conditions[i].items.getAt(c);\n\n                try {\n                    // workaround for pimcore.object.tags.objects\n                    if(item.reference)\n                    {\n                        condition[ item.reference.getName() ] = item.reference.getValue();\n                    }\n                    else if(item.form)\n                    {\n                        condition[ item.name ] = item.getForm().getFieldValues();\n                    }\n                    else if(item.xtype === 'datefield')\n                    {\n                        condition[ item.name ] = item.getSubmitValue();\n                    }\n                    else\n                    {\n                        condition[ item.getName() ] = item.getValue();\n\n                    }\n                } catch (e){}\n\n            }\n            condition['type'] = conditions[i].type;\n\n            // get the operator (AND, OR, AND_NOT)\n            var tb = conditions[i].getDockedItems()[0];\n            if (tb.getComponent(\"toggle_or\").pressed) {\n                operator = \"or\";\n            } else if (tb.getComponent(\"toggle_and_not\").pressed) {\n                operator = \"and_not\";\n            } else {\n                operator = \"and\";\n            }\n            condition[\"operator\"] = operator;\n\n            // get the brackets\n            condition[\"bracketLeft\"] = Ext.get(conditions[i].getEl().query(\".pimcore_targeting_bracket_left\")[0])\n                                                                .hasCls(\"pimcore_targeting_bracket_active\");\n            condition[\"bracketRight\"] = Ext.get(conditions[i].getEl().query(\".pimcore_targeting_bracket_right\")[0])\n                                                                .hasCls(\"pimcore_targeting_bracket_active\");\n\n            conditionsData.push(condition);\n        }\n        saveData[\"conditions\"] = conditionsData;\n\n        // get defined actions\n        var actionData = [];\n        var actions = this.actionsContainer.items.getRange();\n        for (var i=0; i<actions.length; i++) {\n            var action = {};\n            action = actions[i].getForm().getFieldValues();\n            action['type'] = actions[i].type;\n\n            actionData.push(action);\n        }\n        saveData[\"actions\"] = actionData;\n\n        // send data\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_save'),\n            params: {\n                id: this.data.id,\n                data: Ext.encode(saveData)\n            },\n            method: \"PUT\",\n            success: this.saveOnComplete.bind(this)\n        });\n    },\n\n    /**\n     * saved\n     */\n    saveOnComplete: function (response) {\n        this.parent.refresh(this.parent.getTree().getRootNode());\n\n        var response = Ext.decode(response.responseText);\n\n        if (response.success) {\n            pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n        } else {\n            pimcore.helpers.showNotification(t(\"error\"), t(response.message), \"error\", );\n        }\n    },\n\n    recalculateButtonStatus: function () {\n        var conditions = this.conditionsContainer.items.getRange();\n        for (var i=0; i<conditions.length; i++) {\n            var tb = conditions[i].getDockedItems()[0];\n            if(i==0) {\n                tb.getComponent(\"toggle_and\").hide();\n                tb.getComponent(\"toggle_or\").hide();\n                tb.getComponent(\"toggle_and_not\").hide();\n            } else {\n                tb.getComponent(\"toggle_and\").show();\n                tb.getComponent(\"toggle_or\").show();\n                tb.getComponent(\"toggle_and_not\").show();\n            }\n        }\n    },\n\n    /**\n     * make ident for bracket\n     * @param list\n     */\n    recalculateBracketIdent: function(list) {\n        var ident = 0, lastIdent = 0, margin = 20;\n        var colors = [\"transparent\",\"#007bff\", \"#00ff99\", \"#e1a6ff\", \"#ff3c00\", \"#000000\"];\n\n        list.each(function (condition) {\n\n            // only rendered conditions\n            if(condition.rendered == false) {\n                return;\n            }\n\n            // html from this condition\n            var item = condition.getEl();\n\n\n            // apply ident margin\n            item.applyStyles({\n                \"margin-left\": margin * ident + \"px\",\n                \"margin-right\": margin * ident + \"px\"\n            });\n\n\n            // apply colors\n            if(ident > 0) {\n                item.applyStyles({\n                    \"border-left\": \"1px solid \" + colors[ident],\n                    \"border-right\": \"1px solid \" + colors[ident]\n                });\n            } else {\n                item.applyStyles({\n                    \"border-left\": \"0px\",\n                    \"border-right\": \"0px\"\n                });\n            }\n\n\n            // apply specials :-)\n            if(ident == 0) {\n                item.applyStyles({\n                    \"margin-top\": \"10px\"\n                });\n            } else if(ident == lastIdent) {\n                item.applyStyles({\n                    \"margin-top\": \"0px\",\n                    \"margin-bottom\": \"0px\"\n                });\n            } else {\n                item.applyStyles({\n                    \"margin-top\": \"5px\"\n                });\n            }\n\n\n            // remember current ident\n            lastIdent = ident;\n\n\n            // check if a bracket is open\n            if(item.select('.pimcore_targeting_bracket_left.pimcore_targeting_bracket_active').getCount() == 1)\n            {\n                ident++;\n            }\n            // check if a bracket is close\n            else if(item.select('.pimcore_targeting_bracket_right.pimcore_targeting_bracket_active').getCount() == 1)\n            {\n                if(ident > 0) {\n                    ident--;\n                }\n            }\n        });\n\n        this.conditionsContainer.updateLayout();\n    }\n});\n\n\n/**\n * CONDITION TYPES\n */\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.conditions\");\npimcore.bundle.EcommerceFramework.pricing.conditions = {\n\n    detectBlockIndex: function (blockElement, container) {\n        // detect index\n        var index;\n\n        for(var s=0; s<container.items.items.length; s++) {\n            if(container.items.items[s].getId() == blockElement.getId()) {\n                index = s;\n                break;\n            }\n        }\n        return index;\n    },\n\n    /**\n     * @param name\n     * @param index\n     * @param parent\n     * @param data\n     * @param iconCls\n     * @returns {Array}\n     * @todo idents berechnung ausf\u00fchren wenn eine condition verschoben wird\n     */\n    getTopBar: function (name, index, parent, data, iconCls) {\n\n        var toggleGroup = \"g_\" + index + parent.data.id;\n        if(!data[\"operator\"]) {\n            data.operator = \"and\";\n        }\n\n        return [{\n            iconCls: iconCls,\n            disabled: true\n        }, {\n            xtype: \"tbtext\",\n            text: \"<b>\" + name + \"</b>\"\n        },\"-\",{\n            iconCls: \"pimcore_icon_up\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = pimcore.bundle.EcommerceFramework.pricing.conditions.detectBlockIndex(blockElement, container);\n                var tmpContainer = pimcore.viewport;\n\n                var newIndex = index-1;\n                if(newIndex < 0) {\n                    newIndex = 0;\n                }\n\n                // move this node temorary to an other so ext recognizes a change\n                container.remove(blockElement, false);\n                tmpContainer.add(blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                // move the element to the right position\n                tmpContainer.remove(blockElement,false);\n                container.insert(newIndex, blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                parent.recalculateButtonStatus();\n\n                pimcore.layout.refresh();\n\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        },{\n            iconCls: \"pimcore_icon_down\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = pimcore.bundle.EcommerceFramework.pricing.conditions.detectBlockIndex(blockElement, container);\n                var tmpContainer = pimcore.viewport;\n\n                // move this node temorary to an other so ext recognizes a change\n                container.remove(blockElement, false);\n                tmpContainer.add(blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                // move the element to the right position\n                tmpContainer.remove(blockElement,false);\n                container.insert(index+1, blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                parent.recalculateButtonStatus();\n\n                pimcore.layout.refresh();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n            }.bind(window, index, parent)\n        },\"-\", {\n            text: t(\"AND\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and\",\n            pressed: (data.operator == \"and\") ? true : false\n        },{\n            text: t(\"OR\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_or\",\n            pressed: (data.operator == \"or\") ? true : false\n        },{\n            text: t(\"AND_NOT\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and_not\",\n            pressed: (data.operator == \"and_not\") ? true : false\n        },\"->\",{\n            iconCls: \"pimcore_icon_delete\",\n            handler: function (index, parent) {\n                parent.conditionsContainer.remove(Ext.getCmp(index));\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionDateRange: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_daterange\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'DateRange',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:30px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionDateRange\"),\n            items: [{\n                xtype:'datefield',\n                fieldLabel: t(\"from\"),\n                name: \"starting\",\n                format: 'd.m.Y',\n                altFormats: 'U',\n                value: data.starting,\n                width: 400\n            },{\n                xtype:'datefield',\n                fieldLabel: t(\"to\"),\n                name: \"ending\",\n                format: 'd.m.Y',\n                altFormats: 'U',\n                value: data.ending,\n                width: 400\n            }],\n            listeners: {\n\n            }\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCatalogProduct: function (panel, data, getName) {\n\n        var niceName = t(\"product\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CatalogProduct',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCatalogProduct\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.products, {\n                    name: \"products\",\n                    title: \"\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 500,\n                    columns: [],\n\n                    // ?\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n\n                    // ??\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit()\n            ]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCatalogCategory: function (panel, data, getName) {\n\n        var niceName = t(\"category\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CatalogCategory',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 0px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCatalogCategory\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.categories, {\n                    name: \"categories\",\n                    title: \"\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 500,\n                    columns: [],\n\n                    // ?\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n\n                    // ??\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit()\n            ]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCartAmount: function (panel, data, getName) {\n\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_cart_amount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CartAmount',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCartAmount\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_cart_amount\"),\n                name: \"limit\",\n                width: 300,\n                value: data.limit\n            }]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionToken: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_token\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Token',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionToken\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"value\"),\n                name: \"token\",\n                width: 200,\n                value: data.token\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionSold: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_sold\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Sold',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionSold\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_sold_count\"),\n                name: \"count\",\n                width: 300,\n                value: data.count\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionSales: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_sales\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Sales',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionSales\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"amount\"),\n                name: \"amount\",\n                width: 300,\n                value: data.amount\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionClientIp: function (panel, data, getName) {\n\n        //\n        var niceName = 'IP';\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'ClientIp',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionClientIp\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: 'IP',\n                name: \"ip\",\n                width: 300,\n                value: data.ip\n            }]\n        });\n\n\n        // set default value\n        if(data.ip == undefined)\n        {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_settings_getsystem'),\n                success: function (response) {\n\n                    var settings = Ext.decode(response.responseText);\n                    item.getForm().findField('ip').setValue( settings.config.client_ip );\n\n                }.bind(this)\n            });\n        }\n\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionVoucherToken: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_voucherToken\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {\n                error_messages: {}\n            };\n        }\n\n\n        var langTabs = [];\n        Ext.each(pimcore.settings.websiteLanguages, function(lang){\n            var tab = {\n                title: pimcore.available_languages[ lang ],\n                items: [{\n                    xtype: \"textfield\",\n                    name: lang,\n                    fieldLabel: t(\"error_message\"),\n                    width: 600,\n                    value: data.error_messages ? data.error_messages[ lang ] : ''\n                }]\n            };\n\n            langTabs.push( tab );\n        });\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'VoucherToken',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionVoucherToken\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.whiteList, {\n                    classes: [\n                        \"OnlineShopVoucherSeries\"\n                    ],\n                    name: \"whiteList\",\n                    title: \"White List\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 600,\n                    columns: [],\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit(),\n                Ext.create('Ext.form.Panel', {\n                    style: \"margin-bottom: 10px\",\n                    cls: \"object_localizedfields_panel\",\n                    name: 'error_messages',\n                    isFormPanel: true,\n                    items: [{\n                        xtype: \"tabpanel\",\n                        style: \"margin-bottom: 30px\",\n                        defaults: {\n                            autoHeight: true,\n                            bodyStyle: 'padding:10px;'\n                        },\n                        items: langTabs\n                    }]\n                })\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionTenant: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_tenant\");\n        if (typeof getName !== \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if (typeof data === \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item = new Ext.form.FormPanel({\n            id: myId,\n            type: 'Tenant',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionTenant\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_tenant\"),\n                name: \"tenant\",\n                width: 350,\n                value: data.tenant\n            }]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionTargetGroup: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_targetgroup\");\n        if (typeof getName !== \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if (typeof data === \"undefined\") {\n            data = {};\n        }\n\n\n        this.targetGroupStore = Ext.create('Ext.data.JsonStore', {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_targeting_targetgrouplist')\n            },\n            fields: [\"id\", \"text\"],\n            listeners: {\n                load: function() {\n                    this.targetGroup.setValue(data.targetGroupId);\n                }.bind(this)\n            }\n        });\n\n        this.targetGroup = new Ext.form.ComboBox({\n            displayField:'text',\n            valueField: \"id\",\n            name: \"targetGroupId\",\n            fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_targetgroup\"),\n            store: this.targetGroupStore,\n            editable: false,\n            triggerAction: 'all',\n            width: 500,\n            listeners: {\n            }\n        });\n\n\n        // create item\n        var myId = Ext.id();\n        var item = new Ext.form.FormPanel({\n            id: myId,\n            type: 'TargetGroup',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionTargetGroup\"),\n            items: [\n                this.targetGroup,\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_targetgroup_threshold\"),\n                    name: \"threshold\",\n                    width: 200,\n                    value: data.threshold\n                }\n            ]\n        });\n\n        return item;\n    }\n};\n\n\n/**\n * ACTION TYPES\n */\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.actions\");\npimcore.bundle.EcommerceFramework.pricing.actions = {\n\n    /**\n     * @param name\n     * @param index\n     * @param parent\n     * @param data\n     * @param iconCls\n     * @returns {Array}\n     */\n    getTopBar: function (name, index, parent, data, iconCls) {\n        return [\n            {\n                iconCls: iconCls,\n                disabled: true\n            },\n            {\n                xtype: \"tbtext\",\n                text: \"<b>\" + name + \"</b>\"\n            },\n            \"->\",\n            {\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (index, parent) {\n                    parent.actionsContainer.remove(Ext.getCmp(index));\n                }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionGift: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_gift\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionGift';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Gift',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"product\"),\n                    name: \"product\",\n                    width: 500,\n                    cls: \"input_drop_target\",\n                    value: data.product,\n                    listeners: {\n                        \"render\": function (el) {\n                            new Ext.dd.DropZone(el.getEl(), {\n                                reference: this,\n                                ddGroup: \"element\",\n                                getTargetFromEvent: function(e) {\n                                    return this.getEl();\n                                }.bind(el),\n\n                                onNodeOver : function(target, dd, e, data) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                },\n\n                                onNodeDrop : function (target, dd, e, data) {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (data.type == \"object\" || data.type == \"variant\") {\n                                        this.setValue(data.path);\n                                        return true;\n                                    }\n                                    return false;\n                                }.bind(el)\n                            });\n                        }\n                    }\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionCartDiscount: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_cart_discount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionCartDiscount';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CartDiscount',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_cart_discount_amount\"),\n                    name: \"amount\",\n                    width: 200,\n                    value: data.amount\n                }, {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_cart_discount_percent\"),\n                    name: \"percent\",\n                    width: 200,\n                    value: data.percent\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionProductDiscount: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_product_discount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionProductDiscount';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'ProductDiscount',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_product_discount_amount\"),\n                    name: \"amount\",\n                    width: 200,\n                    value: data.amount\n                }, {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_product_discount_percent\"),\n                    name: \"percent\",\n                    width: 200,\n                    value: data.percent\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionFreeShipping: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_free_shipping\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionFreeShipping';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'FreeShipping',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n//            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls)\n        });\n\n        return item;\n    }\n};\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\CartManager\\CartPriceModificator\\Discount;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\ActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\EnvironmentInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Type\\Decimal;\n\n// TODO use Decimal for amounts?\nclass CartDiscount implements DiscountInterface, CartActionInterface\n{\n    /**\n     * @var float\n     */\n    protected $amount = 0;\n\n    /**\n     * @var float\n     */\n    protected $percent = 0;\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return ActionInterface\n     */\n    public function executeOnCart(EnvironmentInterface $environment)\n    {\n        $priceCalculator = $environment->getCart()->getPriceCalculator();\n\n        $amount = Decimal::create($this->amount);\n        if ($amount->isZero()) {\n            $amount = $priceCalculator->getSubTotal()->getAmount()->toPercentage($this->getPercent());\n            //round to 2 digits for further calculations to avoid rounding issues at later point\n            $amount = Decimal::fromDecimal($amount->withScale(2));\n        }\n\n        $amount = $amount->mul(-1);\n\n        //make sure that one rule is applied only once\n        foreach ($priceCalculator->getModificators() as &$modificator) {\n            if ($modificator instanceof Discount && $modificator->getRuleId() == $environment->getRule()->getId()) {\n                $modificator->setAmount($amount);\n                $priceCalculator->calculate(true);\n\n                return $this;\n            }\n        }\n\n        $modDiscount = new Discount($environment->getRule());\n        $modDiscount->setAmount($amount);\n\n        $priceCalculator->addModificator($modDiscount);\n        $priceCalculator->calculate(true);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function toJSON()\n    {\n        return json_encode([\n            'type' => 'CartDiscount',\n            'amount' => $this->getAmount(),\n            'percent' => $this->getPercent(),\n        ]);\n    }\n\n    /**\n     * @param string $string\n     *\n     * @return ActionInterface\n     */\n    public function fromJSON($string)\n    {\n        $json = json_decode($string);\n        if ($json->amount) {\n            if($json->amount < 0) {\n                throw new \\Exception('Only positive numbers and 0 are valid values for absolute discounts');\n            }\n\n            $this->setAmount($json->amount);\n        }\n        if ($json->percent) {\n            if($json->percent < 0) {\n                throw new \\Exception('Only positive numbers and 0 are valid values for % discounts');\n            }\n\n            $this->setPercent($json->percent);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param float $amount\n     */\n    public function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    /**\n     * @return float\n     */\n    public function getAmount()\n    {\n        return $this->amount;\n    }\n\n    /**\n     * @param float $percent\n     */\n    public function setPercent($percent)\n    {\n        $this->percent = $percent;\n    }\n\n    /**\n     * @return float\n     */\n    public function getPercent()\n    {\n        return $this->percent;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\Action;\n\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\ActionInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\PricingManager\\EnvironmentInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Type\\Decimal;\n\n// TODO use Decimal for amounts?\nclass ProductDiscount implements ProductDiscountInterface\n{\n    /**\n     * @var float\n     */\n    protected $amount = 0;\n\n    /**\n     * @var float\n     */\n    protected $percent = 0;\n\n    /**\n     * @param EnvironmentInterface $environment\n     *\n     * @return ActionInterface\n     */\n    public function executeOnProduct(EnvironmentInterface $environment)\n    {\n        $priceinfo = $environment->getPriceInfo();\n\n        $amount = Decimal::create($this->amount);\n\n        // TODO use discount()?\n        if ($amount->equals(Decimal::create(0))) {\n            $amount = $priceinfo->getAmount()->mul($this->getPercent() / 100);\n        }\n\n        $amount = $priceinfo->getAmount()->sub($amount);\n        $priceinfo->setAmount($amount->isPositive() ? $amount : Decimal::zero());\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function toJSON()\n    {\n        return json_encode([\n            'type' => 'ProductDiscount',\n            'amount' => $this->getAmount(),\n            'percent' => $this->getPercent(),\n        ]);\n    }\n\n    /**\n     * @param string $string\n     *\n     * @return ActionInterface\n     */\n    public function fromJSON($string)\n    {\n        $json = json_decode($string);\n        if ($json->amount) {\n            if($json->amount < 0) {\n                throw new \\Exception('Only positive numbers and 0 are valid values for absolute discounts');\n            }\n\n            $this->setAmount($json->amount);\n        }\n        if ($json->percent) {\n            if($json->percent < 0) {\n                throw new \\Exception('Only positive numbers and 0 are valid values for % discounts');\n            }\n\n            $this->setPercent($json->percent);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param float $amount\n     */\n    public function setAmount($amount)\n    {\n        $this->amount = $amount;\n    }\n\n    /**\n     * @return float\n     */\n    public function getAmount()\n    {\n        return $this->amount;\n    }\n\n    /**\n     * @param float $percent\n     */\n    public function setPercent($percent)\n    {\n        $this->percent = $percent;\n    }\n\n    /**\n     * @return float\n     */\n    public function getPercent()\n    {\n        return $this->percent;\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.config.item\");\npimcore.bundle.EcommerceFramework.pricing.config.item = Class.create({\n\n    /**\n     * pimcore.bundle.EcommerceFramework.pricing.config.panel\n     */\n    parent: {},\n\n\n    /**\n     * constructor\n     * @param parent\n     * @param data\n     */\n    initialize: function(parent, data) {\n        this.parent = parent;\n        this.data = data;\n        this.currentIndex = 0;\n\n        this.tabPanel = new Ext.TabPanel({\n            title: this.data.name,\n            closable: true,\n            deferredRender: false,\n            forceLayout: true,\n            id: \"pimcore_pricing_panel_\" + this.data.id,\n            buttons: [{\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_apply\",\n                handler: this.save.bind(this)\n            }],\n            items: [\n                this.getSettings(),\n                this.getConditions(),\n                this.getActions()\n            ]\n        });\n        this.tabPanel.on(\"beforedestroy\", function () {\n            delete this.parent.panels[\"pricingrule_\" + this.data.id];\n        }.bind(this));\n\n\n        // add saved conditions\n        if(this.data.condition)\n        {\n            var list = this;\n            var level = 0;\n            var open = 0;\n            var handleCondition = function(condition){\n                if(condition.type == 'Bracket')\n                {\n                    // workarround for brackets\n                    level++;\n                    Ext.each(condition.conditions, function(item, index, allItems){\n                        item.condition.operator = item.operator;\n\n                        if(level > 1)\n                        {\n                            if(index == 0)\n                            {\n                                item.condition.bracketLeft = true;\n                                open++;\n                            }\n                            if(index == allItems.length -1 && open > 0)\n                            {\n                                item.condition.bracketRight = true;\n                                open--;\n                            }\n                        }\n\n                        handleCondition(item.condition);\n                    });\n                }\n                else\n                {\n                    // normal condition\n                    list.addCondition(\"condition\" + ucfirst(condition.type), condition);\n                }\n            };\n\n            handleCondition(this.data.condition);\n        }\n\n        // add saved actions\n        if(this.data.actions)\n        {\n            var list = this;\n            Ext.each(this.data.actions, function(action){\n                list.addAction(\"action\" + ucfirst(action.type), action);\n            });\n        }\n\n        // ...\n        var panel = this.parent.getTabPanel();\n        panel.add(this.tabPanel);\n        panel.setActiveTab(this.tabPanel);\n        panel.updateLayout();\n    },\n\n    activate: function () {\n        var panel = this.parent.getTabPanel();\n        panel.setActiveTab(this.tabPanel);\n        panel.updateLayout();\n    },\n\n    /**\n     * Basic rule Settings\n     * @returns Ext.form.FormPanel\n     */\n    getSettings: function () {\n        var data = this.data;\n\n        // create tabs for available languages\n        var langTabs = [];\n        Ext.each(pimcore.settings.websiteLanguages, function(lang){\n            var tab = {\n                title: pimcore.available_languages[ lang ],\n                items: [{\n                    xtype: \"textfield\",\n                    name: \"label.\" + lang,\n                    fieldLabel: t(\"label\"),\n                    width: 350,\n                    value: data.label[ lang ]\n                }, {\n                    xtype: \"textarea\",\n                    name: \"description.\" + lang,\n                    fieldLabel: t(\"description\"),\n                    width: 500,\n                    height: 100,\n                    value: data.description[ lang ]\n                }]\n            };\n\n            langTabs.push( tab );\n        });\n\n        // ...\n        this.settingsForm = new Ext.form.FormPanel({\n            title: t(\"settings\"),\n            bodyStyle: \"padding:10px;\",\n            autoScroll: true,\n            //border:false,\n            items: [{\n                style: \"margin-bottom: 10px\",\n                cls: \"object_localizedfields_panel\",\n                xtype: 'panel',\n                items: [{\n                    xtype: \"tabpanel\",\n                    defaults: {\n                        autoHeight:true\n                        ,\n                        bodyStyle:'padding:10px;'\n                    },\n                    items: langTabs\n                }]\n                }, {\n                name: \"behavior\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_behavior\"),\n                xtype: \"combo\",\n                store: [\n                    [\"additiv\", t(\"bundle_ecommerce_pricing_config_additiv\")],\n                    [\"stopExecute\", t(\"bundle_ecommerce_pricing_config_stopExecute\")]\n                ],\n                mode: \"local\",\n                width: 300,\n                editable: false,\n                value: this.data.behavior,\n                triggerAction: \"all\"\n            }, {\n                xtype: \"checkbox\",\n                name: \"active\",\n                fieldLabel: t(\"active\"),\n                checked: this.data.active == \"1\"\n            }]\n        });\n\n        return this.settingsForm;\n    },\n\n    /**\n     * @returns Ext.Panel\n     */\n    getConditions: function() {\n\n        // init\n        var _this = this;\n        var addMenu = [];\n        var itemTypes = Object.keys(pimcore.bundle.EcommerceFramework.pricing.conditions);\n        // show only defined conditions\n        Ext.each(this.parent.condition, function (condition) {\n            var method = \"condition\" + condition;\n            if(itemTypes.indexOf(method) != -1)\n            {\n                addMenu.push({\n                    iconCls: \"bundle_ecommerce_pricing_icon_\" + method,\n                    text: pimcore.bundle.EcommerceFramework.pricing.conditions[method](null, null,true),\n                    handler: _this.addCondition.bind(_this, method)\n                });\n            }\n        });\n\n\n        this.conditionsContainer = new Ext.Panel({\n            title: t(\"conditions\"),\n            autoScroll: true,\n            forceLayout: true,\n            tbar: [{\n                iconCls: \"pimcore_icon_add\",\n                menu: addMenu\n            }],\n            border: false\n        });\n\n        return this.conditionsContainer;\n    },\n\n    /**\n     * @returns {*}\n     * @todo\n     */\n    getActions: function () {\n\n        // init\n        var _this = this;\n        var addMenu = [];\n        var itemTypes = Object.keys(pimcore.bundle.EcommerceFramework.pricing.actions);\n\n        // show only defined actions\n        Ext.each(this.parent.action, function (action) {\n            var method = \"action\" + action;\n            if(itemTypes.indexOf(method) != -1)\n            {\n                addMenu.push({\n                    iconCls: \"bundle_ecommerce_pricing_icon_\" + method,\n                    text: pimcore.bundle.EcommerceFramework.pricing.actions[method](null, null,true),\n                    handler: _this.addAction.bind(_this, method)\n                });\n            }\n        });\n\n\n        this.actionsContainer = new Ext.Panel({\n            title: t(\"actions\"),\n            autoScroll: true,\n            forceLayout: true,\n            bodyStyle: 'padding: 0 10px 10px 10px;',\n            tbar: [{\n                iconCls: \"pimcore_icon_add\",\n                menu: addMenu\n            }],\n            border: false\n        });\n\n        return this.actionsContainer;\n    },\n\n\n    /**\n     * add condition item\n     * @param type\n     * @param data\n     */\n    addCondition: function (type, data) {\n\n        // create condition\n        var item = pimcore.bundle.EcommerceFramework.pricing.conditions[type](this, data);\n\n        // add logic for brackets\n        var tab = this;\n        item.on(\"afterrender\", function (el) {\n            el.getEl().applyStyles({position: \"relative\", \"min-height\": \"40px\", \"border-bottom\": \"1px solid #d0d0d0\"});\n            var leftBracket = el.getEl().insertHtml(\"beforeEnd\",\n                '<div class=\"pimcore_targeting_bracket pimcore_targeting_bracket_left\">(</div>', true);\n            var rightBracket = el.getEl().insertHtml(\"beforeEnd\",\n                '<div class=\"pimcore_targeting_bracket pimcore_targeting_bracket_right\">)</div>', true);\n\n            if(data[\"bracketLeft\"]){\n                leftBracket.addCls(\"pimcore_targeting_bracket_active\");\n            }\n            if(data[\"bracketRight\"]){\n                rightBracket.addCls(\"pimcore_targeting_bracket_active\");\n            }\n\n            // open\n            leftBracket.on(\"click\", function (ev, el) {\n                var bracket = Ext.get(el);\n                bracket.toggleCls(\"pimcore_targeting_bracket_active\");\n\n                tab.recalculateBracketIdent(tab.conditionsContainer.items);\n            });\n\n            // close\n            rightBracket.on(\"click\", function (ev, el) {\n                var bracket = Ext.get(el);\n                bracket.toggleCls(\"pimcore_targeting_bracket_active\");\n\n                tab.recalculateBracketIdent(tab.conditionsContainer.items);\n            });\n\n            // make ident\n            tab.recalculateBracketIdent(tab.conditionsContainer.items);\n        });\n\n        this.conditionsContainer.add(item);\n        item.updateLayout();\n        this.conditionsContainer.updateLayout();\n\n        this.currentIndex++;\n\n        this.recalculateButtonStatus();\n    },\n\n    /**\n     * add action item\n     * @param type\n     * @param data\n     */\n    addAction: function (type, data) {\n\n        var item = pimcore.bundle.EcommerceFramework.pricing.actions[type](this, data);\n\n        this.actionsContainer.add(item);\n        item.updateLayout();\n        this.actionsContainer.updateLayout();\n    },\n\n    /**\n     * save config\n     */\n    save: function () {\n        var saveData = {};\n\n        // general settings\n        saveData[\"settings\"] = this.settingsForm.getForm().getFieldValues();\n\n        // get defined conditions\n        var conditionsData = [];\n        var operator;\n        var conditions = this.conditionsContainer.items.getRange();\n        for (var i=0; i<conditions.length; i++) {\n            var condition = {};\n\n            // collect condition settings\n            for(var c=0; c<conditions[i].items.length; c++)\n            {\n                var item = conditions[i].items.getAt(c);\n\n                try {\n                    // workaround for pimcore.object.tags.objects\n                    if(item.reference)\n                    {\n                        condition[ item.reference.getName() ] = item.reference.getValue();\n                    }\n                    else if(item.form)\n                    {\n                        condition[ item.name ] = item.getForm().getFieldValues();\n                    }\n                    else if(item.xtype === 'datefield')\n                    {\n                        condition[ item.name ] = item.getSubmitValue();\n                    }\n                    else\n                    {\n                        condition[ item.getName() ] = item.getValue();\n\n                    }\n                } catch (e){}\n\n            }\n            condition['type'] = conditions[i].type;\n\n            // get the operator (AND, OR, AND_NOT)\n            var tb = conditions[i].getDockedItems()[0];\n            if (tb.getComponent(\"toggle_or\").pressed) {\n                operator = \"or\";\n            } else if (tb.getComponent(\"toggle_and_not\").pressed) {\n                operator = \"and_not\";\n            } else {\n                operator = \"and\";\n            }\n            condition[\"operator\"] = operator;\n\n            // get the brackets\n            condition[\"bracketLeft\"] = Ext.get(conditions[i].getEl().query(\".pimcore_targeting_bracket_left\")[0])\n                                                                .hasCls(\"pimcore_targeting_bracket_active\");\n            condition[\"bracketRight\"] = Ext.get(conditions[i].getEl().query(\".pimcore_targeting_bracket_right\")[0])\n                                                                .hasCls(\"pimcore_targeting_bracket_active\");\n\n            conditionsData.push(condition);\n        }\n        saveData[\"conditions\"] = conditionsData;\n\n        // get defined actions\n        var actionData = [];\n        var actions = this.actionsContainer.items.getRange();\n        for (var i=0; i<actions.length; i++) {\n            var action = {};\n            action = actions[i].getForm().getFieldValues();\n            action['type'] = actions[i].type;\n\n            actionData.push(action);\n        }\n        saveData[\"actions\"] = actionData;\n\n        // send data\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_ecommerceframework_pricing_save'),\n            params: {\n                id: this.data.id,\n                data: Ext.encode(saveData)\n            },\n            method: \"PUT\",\n            success: this.saveOnComplete.bind(this)\n        });\n    },\n\n    /**\n     * saved\n     */\n    saveOnComplete: function (response) {\n        this.parent.refresh(this.parent.getTree().getRootNode());\n\n        var response = Ext.decode(response.responseText);\n\n        if (response.success) {\n            pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n        } else {\n            pimcore.helpers.showNotification(t(\"error\"), t(response.message), \"error\", );\n        }\n    },\n\n    recalculateButtonStatus: function () {\n        var conditions = this.conditionsContainer.items.getRange();\n        for (var i=0; i<conditions.length; i++) {\n            var tb = conditions[i].getDockedItems()[0];\n            if(i==0) {\n                tb.getComponent(\"toggle_and\").hide();\n                tb.getComponent(\"toggle_or\").hide();\n                tb.getComponent(\"toggle_and_not\").hide();\n            } else {\n                tb.getComponent(\"toggle_and\").show();\n                tb.getComponent(\"toggle_or\").show();\n                tb.getComponent(\"toggle_and_not\").show();\n            }\n        }\n    },\n\n    /**\n     * make ident for bracket\n     * @param list\n     */\n    recalculateBracketIdent: function(list) {\n        var ident = 0, lastIdent = 0, margin = 20;\n        var colors = [\"transparent\",\"#007bff\", \"#00ff99\", \"#e1a6ff\", \"#ff3c00\", \"#000000\"];\n\n        list.each(function (condition) {\n\n            // only rendered conditions\n            if(condition.rendered == false) {\n                return;\n            }\n\n            // html from this condition\n            var item = condition.getEl();\n\n\n            // apply ident margin\n            item.applyStyles({\n                \"margin-left\": margin * ident + \"px\",\n                \"margin-right\": margin * ident + \"px\"\n            });\n\n\n            // apply colors\n            if(ident > 0) {\n                item.applyStyles({\n                    \"border-left\": \"1px solid \" + colors[ident],\n                    \"border-right\": \"1px solid \" + colors[ident]\n                });\n            } else {\n                item.applyStyles({\n                    \"border-left\": \"0px\",\n                    \"border-right\": \"0px\"\n                });\n            }\n\n\n            // apply specials :-)\n            if(ident == 0) {\n                item.applyStyles({\n                    \"margin-top\": \"10px\"\n                });\n            } else if(ident == lastIdent) {\n                item.applyStyles({\n                    \"margin-top\": \"0px\",\n                    \"margin-bottom\": \"0px\"\n                });\n            } else {\n                item.applyStyles({\n                    \"margin-top\": \"5px\"\n                });\n            }\n\n\n            // remember current ident\n            lastIdent = ident;\n\n\n            // check if a bracket is open\n            if(item.select('.pimcore_targeting_bracket_left.pimcore_targeting_bracket_active').getCount() == 1)\n            {\n                ident++;\n            }\n            // check if a bracket is close\n            else if(item.select('.pimcore_targeting_bracket_right.pimcore_targeting_bracket_active').getCount() == 1)\n            {\n                if(ident > 0) {\n                    ident--;\n                }\n            }\n        });\n\n        this.conditionsContainer.updateLayout();\n    }\n});\n\n\n/**\n * CONDITION TYPES\n */\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.conditions\");\npimcore.bundle.EcommerceFramework.pricing.conditions = {\n\n    detectBlockIndex: function (blockElement, container) {\n        // detect index\n        var index;\n\n        for(var s=0; s<container.items.items.length; s++) {\n            if(container.items.items[s].getId() == blockElement.getId()) {\n                index = s;\n                break;\n            }\n        }\n        return index;\n    },\n\n    /**\n     * @param name\n     * @param index\n     * @param parent\n     * @param data\n     * @param iconCls\n     * @returns {Array}\n     * @todo idents berechnung ausf\u00fchren wenn eine condition verschoben wird\n     */\n    getTopBar: function (name, index, parent, data, iconCls) {\n\n        var toggleGroup = \"g_\" + index + parent.data.id;\n        if(!data[\"operator\"]) {\n            data.operator = \"and\";\n        }\n\n        return [{\n            iconCls: iconCls,\n            disabled: true\n        }, {\n            xtype: \"tbtext\",\n            text: \"<b>\" + name + \"</b>\"\n        },\"-\",{\n            iconCls: \"pimcore_icon_up\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = pimcore.bundle.EcommerceFramework.pricing.conditions.detectBlockIndex(blockElement, container);\n                var tmpContainer = pimcore.viewport;\n\n                var newIndex = index-1;\n                if(newIndex < 0) {\n                    newIndex = 0;\n                }\n\n                // move this node temorary to an other so ext recognizes a change\n                container.remove(blockElement, false);\n                tmpContainer.add(blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                // move the element to the right position\n                tmpContainer.remove(blockElement,false);\n                container.insert(newIndex, blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                parent.recalculateButtonStatus();\n\n                pimcore.layout.refresh();\n\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        },{\n            iconCls: \"pimcore_icon_down\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = pimcore.bundle.EcommerceFramework.pricing.conditions.detectBlockIndex(blockElement, container);\n                var tmpContainer = pimcore.viewport;\n\n                // move this node temorary to an other so ext recognizes a change\n                container.remove(blockElement, false);\n                tmpContainer.add(blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                // move the element to the right position\n                tmpContainer.remove(blockElement,false);\n                container.insert(index+1, blockElement);\n                container.updateLayout();\n                tmpContainer.updateLayout();\n\n                parent.recalculateButtonStatus();\n\n                pimcore.layout.refresh();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n            }.bind(window, index, parent)\n        },\"-\", {\n            text: t(\"AND\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and\",\n            pressed: (data.operator == \"and\") ? true : false\n        },{\n            text: t(\"OR\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_or\",\n            pressed: (data.operator == \"or\") ? true : false\n        },{\n            text: t(\"AND_NOT\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and_not\",\n            pressed: (data.operator == \"and_not\") ? true : false\n        },\"->\",{\n            iconCls: \"pimcore_icon_delete\",\n            handler: function (index, parent) {\n                parent.conditionsContainer.remove(Ext.getCmp(index));\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionDateRange: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_daterange\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'DateRange',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:30px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionDateRange\"),\n            items: [{\n                xtype:'datefield',\n                fieldLabel: t(\"from\"),\n                name: \"starting\",\n                format: 'd.m.Y',\n                altFormats: 'U',\n                value: data.starting,\n                width: 400\n            },{\n                xtype:'datefield',\n                fieldLabel: t(\"to\"),\n                name: \"ending\",\n                format: 'd.m.Y',\n                altFormats: 'U',\n                value: data.ending,\n                width: 400\n            }],\n            listeners: {\n\n            }\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCatalogProduct: function (panel, data, getName) {\n\n        var niceName = t(\"product\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CatalogProduct',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCatalogProduct\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.products, {\n                    name: \"products\",\n                    title: \"\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 500,\n                    columns: [],\n\n                    // ?\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n\n                    // ??\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit()\n            ]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCatalogCategory: function (panel, data, getName) {\n\n        var niceName = t(\"category\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CatalogCategory',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 0px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCatalogCategory\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.categories, {\n                    name: \"categories\",\n                    title: \"\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 500,\n                    columns: [],\n\n                    // ?\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n\n                    // ??\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit()\n            ]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionCartAmount: function (panel, data, getName) {\n\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_cart_amount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n        var myId = Ext.id();\n\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CartAmount',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionCartAmount\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_cart_amount\"),\n                name: \"limit\",\n                width: 300,\n                value: data.limit\n            }]\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionToken: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_token\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Token',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionToken\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"value\"),\n                name: \"token\",\n                width: 200,\n                value: data.token\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionSold: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_sold\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Sold',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionSold\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_sold_count\"),\n                name: \"count\",\n                width: 300,\n                value: data.count\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionSales: function (panel, data, getName) {\n\n        //\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_sales\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Sales',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionSales\"),\n            items: [{\n                xtype: \"numberfield\",\n                fieldLabel: t(\"amount\"),\n                name: \"amount\",\n                width: 300,\n                value: data.amount\n            }],\n        });\n\n        return item;\n    },\n\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionClientIp: function (panel, data, getName) {\n\n        //\n        var niceName = 'IP';\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'ClientIp',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionClientIp\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: 'IP',\n                name: \"ip\",\n                width: 300,\n                value: data.ip\n            }]\n        });\n\n\n        // set default value\n        if(data.ip == undefined)\n        {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_settings_getsystem'),\n                success: function (response) {\n\n                    var settings = Ext.decode(response.responseText);\n                    item.getForm().findField('ip').setValue( settings.config.client_ip );\n\n                }.bind(this)\n            });\n        }\n\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionVoucherToken: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_voucherToken\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {\n                error_messages: {}\n            };\n        }\n\n\n        var langTabs = [];\n        Ext.each(pimcore.settings.websiteLanguages, function(lang){\n            var tab = {\n                title: pimcore.available_languages[ lang ],\n                items: [{\n                    xtype: \"textfield\",\n                    name: lang,\n                    fieldLabel: t(\"error_message\"),\n                    width: 600,\n                    value: data.error_messages ? data.error_messages[ lang ] : ''\n                }]\n            };\n\n            langTabs.push( tab );\n        });\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'VoucherToken',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionVoucherToken\"),\n            items: [\n                new pimcore.bundle.EcommerceFramework.pricing.config.objects(data.whiteList, {\n                    classes: [\n                        \"OnlineShopVoucherSeries\"\n                    ],\n                    name: \"whiteList\",\n                    title: \"White List\",\n                    visibleFields: \"path\",\n                    height: 200,\n                    width: 600,\n                    columns: [],\n                    columnType: null,\n                    datatype: \"data\",\n                    fieldtype: \"objects\",\n                    index: false,\n                    invisible: false,\n                    lazyLoading: false,\n                    locked: false,\n                    mandatory: false,\n                    maxItems: \"\",\n                    noteditable: false,\n                    permissions: null,\n                    phpdocType: \"array\",\n                    queryColumnType: \"text\",\n                    relationType: true,\n                    style: \"\",\n                    tooltip: \"\",\n                    visibleGridView: false,\n                    visibleSearch: false\n                }).getLayoutEdit(),\n                Ext.create('Ext.form.Panel', {\n                    style: \"margin-bottom: 10px\",\n                    cls: \"object_localizedfields_panel\",\n                    name: 'error_messages',\n                    isFormPanel: true,\n                    items: [{\n                        xtype: \"tabpanel\",\n                        style: \"margin-bottom: 30px\",\n                        defaults: {\n                            autoHeight: true,\n                            bodyStyle: 'padding:10px;'\n                        },\n                        items: langTabs\n                    }]\n                })\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionTenant: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_tenant\");\n        if (typeof getName !== \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if (typeof data === \"undefined\") {\n            data = {};\n        }\n\n        // create item\n        var myId = Ext.id();\n        var item = new Ext.form.FormPanel({\n            id: myId,\n            type: 'Tenant',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionTenant\"),\n            items: [{\n                xtype: \"textfield\",\n                fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_tenant\"),\n                name: \"tenant\",\n                width: 350,\n                value: data.tenant\n            }]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    conditionTargetGroup: function (panel, data, getName) {\n        var niceName = t(\"bundle_ecommerce_pricing_config_condition_targetgroup\");\n        if (typeof getName !== \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if (typeof data === \"undefined\") {\n            data = {};\n        }\n\n\n        this.targetGroupStore = Ext.create('Ext.data.JsonStore', {\n            autoLoad: true,\n            proxy: {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_targeting_targetgrouplist')\n            },\n            fields: [\"id\", \"text\"],\n            listeners: {\n                load: function() {\n                    this.targetGroup.setValue(data.targetGroupId);\n                }.bind(this)\n            }\n        });\n\n        this.targetGroup = new Ext.form.ComboBox({\n            displayField:'text',\n            valueField: \"id\",\n            name: \"targetGroupId\",\n            fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_targetgroup\"),\n            store: this.targetGroupStore,\n            editable: false,\n            triggerAction: 'all',\n            width: 500,\n            listeners: {\n            }\n        });\n\n\n        // create item\n        var myId = Ext.id();\n        var item = new Ext.form.FormPanel({\n            id: myId,\n            type: 'TargetGroup',\n            forceLayout: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, \"bundle_ecommerce_pricing_icon_conditionTargetGroup\"),\n            items: [\n                this.targetGroup,\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_condition_targetgroup_threshold\"),\n                    name: \"threshold\",\n                    width: 200,\n                    value: data.threshold\n                }\n            ]\n        });\n\n        return item;\n    }\n};\n\n\n/**\n * ACTION TYPES\n */\npimcore.registerNS(\"pimcore.bundle.EcommerceFramework.pricing.actions\");\npimcore.bundle.EcommerceFramework.pricing.actions = {\n\n    /**\n     * @param name\n     * @param index\n     * @param parent\n     * @param data\n     * @param iconCls\n     * @returns {Array}\n     */\n    getTopBar: function (name, index, parent, data, iconCls) {\n        return [\n            {\n                iconCls: iconCls,\n                disabled: true\n            },\n            {\n                xtype: \"tbtext\",\n                text: \"<b>\" + name + \"</b>\"\n            },\n            \"->\",\n            {\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (index, parent) {\n                    parent.actionsContainer.remove(Ext.getCmp(index));\n                }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionGift: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_gift\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionGift';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'Gift',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"product\"),\n                    name: \"product\",\n                    width: 500,\n                    cls: \"input_drop_target\",\n                    value: data.product,\n                    listeners: {\n                        \"render\": function (el) {\n                            new Ext.dd.DropZone(el.getEl(), {\n                                reference: this,\n                                ddGroup: \"element\",\n                                getTargetFromEvent: function(e) {\n                                    return this.getEl();\n                                }.bind(el),\n\n                                onNodeOver : function(target, dd, e, data) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                },\n\n                                onNodeDrop : function (target, dd, e, data) {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (data.type == \"object\" || data.type == \"variant\") {\n                                        this.setValue(data.path);\n                                        return true;\n                                    }\n                                    return false;\n                                }.bind(el)\n                            });\n                        }\n                    }\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionCartDiscount: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_cart_discount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionCartDiscount';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'CartDiscount',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_cart_discount_amount\"),\n                    name: \"amount\",\n                    width: 200,\n                    value: data.amount,\n                    minValue: 0\n                }, {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_cart_discount_percent\"),\n                    name: \"percent\",\n                    width: 200,\n                    value: data.percent,\n                    maxValue: 100,\n                    minValue: 0\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionProductDiscount: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_product_discount\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionProductDiscount';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'ProductDiscount',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls),\n            items: [\n                {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_product_discount_amount\"),\n                    name: \"amount\",\n                    width: 200,\n                    value: data.amount,\n                    minValue: 0\n                }, {\n                    xtype: \"numberfield\",\n                    fieldLabel: t(\"bundle_ecommerce_pricing_config_action_product_discount_percent\"),\n                    name: \"percent\",\n                    width: 200,\n                    value: data.percent,\n                    maxValue: 100,\n                    minValue: 0\n                }\n            ]\n        });\n\n        return item;\n    },\n\n    /**\n     * @param panel\n     * @param data\n     * @param getName\n     * @returns Ext.form.FormPanel\n     */\n    actionFreeShipping: function (panel, data, getName) {\n\n        // getName macro\n        var niceName = t(\"bundle_ecommerce_pricing_config_action_free_shipping\");\n        if(typeof getName != \"undefined\" && getName) {\n            return niceName;\n        }\n\n        // check params\n        if(typeof data == \"undefined\") {\n            data = {};\n        }\n\n        // config\n        var iconCls = 'bundle_ecommerce_pricing_icon_actionFreeShipping';\n\n        // create item\n        var myId = Ext.id();\n        var item =  new Ext.form.FormPanel({\n            id: myId,\n            type: 'FreeShipping',\n            forceLayout: true,\n            border: true,\n            style: \"margin: 10px 0 0 0\",\n//            bodyStyle: \"padding: 10px 30px 10px 30px; min-height:40px;\",\n            tbar: this.getTopBar(niceName, myId, panel, data, iconCls)\n        });\n\n        return item;\n    }\n};\n"], "filenames": ["bundles/EcommerceFrameworkBundle/PricingManager/Action/CartDiscount.php", "bundles/EcommerceFrameworkBundle/PricingManager/Action/ProductDiscount.php", "bundles/EcommerceFrameworkBundle/Resources/public/js/pricing/config/item.js"], "buggy_code_start_loc": [93, 77, 1411], "buggy_code_end_loc": [96, 80, 1470], "fixing_code_start_loc": [94, 78, 1411], "fixing_code_end_loc": [105, 89, 1476], "type": "NVD-CWE-noinfo", "message": "Business Logic Errors in GitHub repository pimcore/pimcore prior to 10.2.6.", "other": {"cve": {"id": "CVE-2021-4146", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-18T16:15:07.993", "lastModified": "2022-01-24T18:12:26.467", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Business Logic Errors in GitHub repository pimcore/pimcore prior to 10.2.6."}, {"lang": "es", "value": "Unos Errores de L\u00f3gica de Negocio en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.2.6"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.6", "matchCriteriaId": "E8D98DAD-EBC5-470A-9F38-2A963406010F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/7011922f7f0f97a82d8c378559b91fcdb34604a6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/47b37054-cafe-4f48-8b40-c86efc7fb760", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/7011922f7f0f97a82d8c378559b91fcdb34604a6"}}