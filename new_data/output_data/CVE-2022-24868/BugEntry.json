{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Event;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n * Document class\n **/\nclass Document extends CommonDBTM\n{\n    use Glpi\\Features\\TreeBrowse;\n\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    protected static $forward_entity_to = ['Document_Item'];\n\n    public static $rightname                   = 'document';\n    public static $tag_prefix                  = '#';\n    protected $usenotepad               = true;\n\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('Document', 'Documents', $nb);\n    }\n\n\n    /**\n     * Check if given object can have Document\n     *\n     * @since 0.85\n     *\n     * @param string|object $item An object or a string\n     *\n     * @return boolean\n     **/\n    public static function canApplyOn($item)\n    {\n        global $CFG_GLPI;\n\n       // All devices can have documents!\n        if (\n            is_a($item, 'Item_Devices', true)\n            || is_a($item, 'CommonDevice', true)\n        ) {\n            return true;\n        }\n\n       // We also allow direct items to check\n        if ($item instanceof CommonGLPI) {\n            $item = $item->getType();\n        }\n\n        if (in_array($item, $CFG_GLPI['document_types'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get all the types that can have a document\n     *\n     * @since 0.85\n     *\n     * @return array of the itemtypes\n     **/\n    public static function getItemtypesThatCanHave()\n    {\n        global $CFG_GLPI;\n\n        return array_merge(\n            $CFG_GLPI['document_types'],\n            CommonDevice::getDeviceTypes(),\n            Item_Devices::getDeviceTypes()\n        );\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'd';\n    }\n\n\n    public static function canCreate()\n    {\n\n       // Have right to add document OR ticket followup\n        return (Session::haveRight('document', CREATE)\n              || Session::haveRight('followup', ITILFollowup::ADDMYTICKET));\n    }\n\n\n    public function canCreateItem()\n    {\n\n        if (isset($this->input['itemtype']) && isset($this->input['items_id'])) {\n            if ($item = getItemForItemtype($this->input['itemtype'])) {\n                if ($item->canAddItem('Document')) {\n                    return true;\n                }\n            }\n        }\n\n       // From Ticket Document Tab => check right to add followup.\n        if (\n            isset($this->fields['tickets_id'])\n            && ($this->fields['tickets_id'] > 0)\n        ) {\n            $ticket = new Ticket();\n            if ($ticket->getFromDB($this->fields['tickets_id'])) {\n                return $ticket->canAddFollowups();\n            }\n        }\n\n        if (Document::canCreate()) {\n            return parent::canCreateItem();\n        }\n        return false;\n    }\n\n\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Document_Item::class,\n            ]\n        );\n\n       // UNLINK DU FICHIER\n        if (!empty($this->fields[\"filepath\"])) {\n            if (\n                is_file(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])\n                && !is_dir(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])\n                && (countElementsInTable(\n                    $this->getTable(),\n                    ['sha1sum' => $this->fields[\"sha1sum\"] ]\n                ) <= 1)\n            ) {\n                if (unlink(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])) {\n                    Session::addMessageAfterRedirect(sprintf(\n                        __('Succesful deletion of the file %s'),\n                        GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"]\n                    ));\n                } else {\n                    Session::addMessageAfterRedirect(\n                        sprintf(\n                            __('Failed to delete the file %s'),\n                            GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"]\n                        ),\n                        false,\n                        ERROR\n                    );\n                }\n            }\n        }\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab('Document_Item', $ong, $options);\n        $this->addStandardTab('Notepad', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function prepareInputForAdd($input)\n    {\n        global $CFG_GLPI;\n\n       // security (don't accept filename from $_REQUEST)\n        if (array_key_exists('filename', $_REQUEST)) {\n            unset($input['filename']);\n        }\n\n        if ($uid = Session::getLoginUserID()) {\n            $input[\"users_id\"] = Session::getLoginUserID();\n        }\n\n       // Create a doc only selecting a file from a item form\n        $create_from_item = false;\n        if (\n            isset($input[\"items_id\"])\n            && isset($input[\"itemtype\"])\n            && ($item = getItemForItemtype($input[\"itemtype\"]))\n            && ($input[\"items_id\"] > 0)\n        ) {\n            $typename = $item->getTypeName(1);\n            $name     = NOT_AVAILABLE;\n\n            if ($item->getFromDB($input[\"items_id\"])) {\n                $name = $item->getNameID();\n            }\n           //TRANS: %1$s is Document, %2$s is item type, %3$s is item name\n            $input[\"name\"] = addslashes(Html::resume_text(\n                sprintf(\n                    __('%1$s: %2$s'),\n                    Document::getTypeName(1),\n                    sprintf(__('%1$s - %2$s'), $typename, $name)\n                ),\n                200\n            ));\n            $create_from_item = true;\n        }\n\n        $upload_ok = false;\n        if (isset($input[\"_filename\"]) && !(empty($input[\"_filename\"]) == 1)) {\n            $upload_ok = $this->moveDocument($input, stripslashes(array_shift($input[\"_filename\"])));\n        } else if (isset($input[\"upload_file\"]) && !empty($input[\"upload_file\"])) {\n           // Move doc from upload dir\n            $upload_ok = $this->moveUploadedDocument($input, $input[\"upload_file\"]);\n        } else if (isset($input['filepath']) && file_exists(GLPI_DOC_DIR . '/' . $input['filepath'])) {\n           // Document is created using an existing document file\n            $upload_ok = true;\n        }\n\n       // Tag\n        if (isset($input[\"_tag_filename\"]) && !empty($input[\"_tag_filename\"]) == 1) {\n            $input['tag'] = array_shift($input[\"_tag_filename\"]);\n        }\n\n        if (!isset($input[\"tag\"]) || empty($input[\"tag\"])) {\n            $input['tag'] = Rule::getUuid();\n        }\n\n       // Upload failed : do not create document\n        if ($create_from_item && !$upload_ok) {\n            return false;\n        }\n\n       // Default document name\n        if (\n            (!isset($input['name']) || empty($input['name']))\n            && isset($input['filename'])\n        ) {\n            $input['name'] = $input['filename'];\n        }\n\n        unset($input[\"upload_file\"]);\n\n       // Don't add if no file\n        if (\n            isset($input[\"_only_if_upload_succeed\"])\n            && $input[\"_only_if_upload_succeed\"]\n            && (!isset($input['filename']) || empty($input['filename']))\n        ) {\n            return false;\n        }\n\n       // Set default category for document linked to tickets\n        if (\n            isset($input['itemtype']) && ($input['itemtype'] == 'Ticket')\n            && (!isset($input['documentcategories_id']) || ($input['documentcategories_id'] == 0))\n        ) {\n            $input['documentcategories_id'] = $CFG_GLPI[\"documentcategories_id_forticket\"];\n        }\n\n        if (isset($input['link']) && !empty($input['link']) && !Toolbox::isValidWebUrl($input['link'])) {\n            Session::addMessageAfterRedirect(\n                __('Invalid link'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n       /* Unicity check\n       if (isset($input['sha1sum'])) {\n         // Check if already upload in the current entity\n         $crit = array('sha1sum'=>$input['sha1sum'],\n                       'entities_id'=>$input['entities_id']);\n         foreach ($DB->request($this->getTable(), $crit) as $data) {\n            $link=$this->getFormURL();\n            Session::addMessageAfterRedirect(__('\"A document with that filename has already been attached to another record.').\n               \"&nbsp;: <a href=\\\"\".$link.\"?id=\".\n                     $data['id'].\"\\\">\".$data['name'].\"</a>\",\n               false, ERROR, true);\n            return false;\n         }\n       } */\n        return $input;\n    }\n\n\n    public function post_addItem()\n    {\n\n        if (\n            isset($this->input[\"items_id\"])\n            && isset($this->input[\"itemtype\"])\n            && (($this->input[\"items_id\"] > 0)\n              || (($this->input[\"items_id\"] == 0)\n                  && ($this->input[\"itemtype\"] == 'Entity')))\n            && !empty($this->input[\"itemtype\"])\n        ) {\n            $docitem = new Document_Item();\n            $docitem->add(['documents_id' => $this->fields['id'],\n                'itemtype'     => $this->input[\"itemtype\"],\n                'items_id'     => $this->input[\"items_id\"]\n            ]);\n\n            Event::log(\n                $this->fields['id'],\n                \"documents\",\n                4,\n                \"document\",\n                //TRANS: %s is the user login\n                sprintf(__('%s adds a link with an item'), $_SESSION[\"glpiname\"])\n            );\n        }\n    }\n\n\n    public function post_getFromDB()\n    {\n        if (\n            isAPI()\n            && (isset($_SERVER['HTTP_ACCEPT']) && $_SERVER['HTTP_ACCEPT'] == 'application/octet-stream'\n              || isset($_GET['alt']) && $_GET['alt'] == 'media')\n        ) {\n           // This is a API request to download the document\n            $this->send();\n            exit();\n        }\n    }\n\n\n    public function prepareInputForUpdate($input)\n    {\n\n       // security (don't accept filename from $_REQUEST)\n        if (array_key_exists('filename', $_REQUEST)) {\n            unset($input['filename']);\n        }\n\n        if (isset($input['current_filepath'])) {\n            if (isset($input[\"_filename\"]) && !empty($input[\"_filename\"]) == 1) {\n                $this->moveDocument($input, stripslashes(array_shift($input[\"_filename\"])));\n            } else if (isset($input[\"upload_file\"]) && !empty($input[\"upload_file\"])) {\n               // Move doc from upload dir\n                $this->moveUploadedDocument($input, $input[\"upload_file\"]);\n            }\n        }\n\n        unset($input['current_filepath']);\n        unset($input['current_filename']);\n\n        if (isset($input['link']) && !empty($input['link'])  && !Toolbox::isValidWebUrl($input['link'])) {\n            Session::addMessageAfterRedirect(\n                __('Invalid link'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        return $input;\n    }\n\n\n    /**\n     * Print the document form\n     *\n     * @param $ID        integer ID of the item\n     * @param $options   array\n     *     - target filename : where to go when done.\n     *     - withtemplate boolean : template or basic item\n     *\n     * @return void\n     **/\n    public function showForm($ID, array $options = [])\n    {\n        $this->initForm($ID, $options);\n       // $options['formoptions'] = \" enctype='multipart/form-data'\";\n        $this->showFormHeader($options);\n\n        $showuserlink = 0;\n        if (Session::haveRight('user', READ)) {\n            $showuserlink = 1;\n        }\n        if ($ID > 0) {\n            echo \"<tr><th colspan='2'>\";\n            if ($this->fields[\"users_id\"] > 0) {\n                printf(__('Added by %s'), getUserName($this->fields[\"users_id\"], $showuserlink));\n            } else {\n                echo \"&nbsp;\";\n            }\n            echo \"</th>\";\n            echo \"<th colspan='2'>\";\n\n           //TRANS: %s is the datetime of update\n            printf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n\n            echo \"</th></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Name') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('name', ['value' => $this->fields['name']]);\n        echo \"</td>\";\n        if ($ID > 0) {\n            echo \"<td>\" . __('Current file') . \"</td>\";\n            echo \"<td>\" . $this->getDownloadLink(null, 45);\n            echo \"<input type='hidden' name='current_filepath' value='\" . $this->fields[\"filepath\"] . \"'>\";\n            echo \"<input type='hidden' name='current_filename' value='\" . $this->fields[\"filename\"] . \"'>\";\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan=2>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Heading') . \"</td>\";\n        echo \"<td>\";\n        DocumentCategory::dropdown(['value' => $this->fields[\"documentcategories_id\"]]);\n        echo \"</td>\";\n        if ($ID > 0) {\n            echo \"<td>\" . sprintf(__('%1$s (%2$s)'), __('Checksum'), __('SHA1')) . \"</td>\";\n            echo \"<td>\" . $this->fields[\"sha1sum\"];\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan=2>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Web link') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('link', ['value' => $this->fields['link']]);\n        echo \"</td>\";\n        echo \"<td rowspan='3' class='middle'>\" . __('Comments') . \"</td>\";\n        echo \"<td class='middle' rowspan='3'>\";\n        echo \"<textarea class='form-control' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('MIME type') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('mime', ['value' => $this->fields['mime']]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Blacklisted for import') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"is_blacklisted\", $this->fields[\"is_blacklisted\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Use a FTP installed file') . \"</td>\";\n        echo \"<td>\";\n        $this->showUploadedFilesDropdown(\"upload_file\");\n        echo \"</td>\";\n\n        echo \"<td>\" . sprintf(__('%1$s (%2$s)'), __('File'), self::getMaxUploadSize()) . \"</td>\";\n        echo \"<td>\";\n        Html::file();\n        echo \"</td></tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Get max upload size from php config\n     **/\n    public static function getMaxUploadSize()\n    {\n        global $CFG_GLPI;\n\n       //TRANS: %s is a size\n        return sprintf(__('%s Mio max'), $CFG_GLPI['document_max_size']);\n    }\n\n\n    /**\n     * Send a document to navigator\n     *\n     * @param string $context Context to resize image, if any\n     **/\n    public function send($context = null)\n    {\n        $file = GLPI_DOC_DIR . \"/\" . $this->fields['filepath'];\n        if ($context !== null) {\n            $file = self::getImage($file, $context);\n        }\n        Toolbox::sendFile($file, $this->fields['filename'], $this->fields['mime']);\n    }\n\n\n    /**\n     * Get download link for a document\n     *\n     * @param CommonDBTM|null   $linked_item    Item linked to the document, to check access right\n     * @param integer           $len            maximum length of displayed string (default 20)\n     *\n     **/\n    public function getDownloadLink($linked_item = null, $len = 20)\n    {\n        global $DB, $CFG_GLPI;\n\n        $link_params = '';\n        if (is_string($linked_item)) {\n            // Old behaviour.\n            // TODO: Deprecate it in GLPI 10.1.\n            // Toolbox::deprecated('Passing additionnal URL parameters in Document::getDownloadLink() is deprecated.');\n            $linked_item = null;\n            $link_params = $linked_item;\n        } elseif ($linked_item !== null && !($linked_item instanceof CommonDBTM)) {\n            throw new \\InvalidArgumentException();\n        } elseif ($linked_item !== null) {\n            $link_params = sprintf('&itemtype=%s&items_id=%s', $linked_item->getType(), $linked_item->getID());\n        }\n\n        $splitter = explode(\"/\", $this->fields['filename']);\n\n        if (count($splitter) == 2) {\n           // Old documents in EXT/filename\n            $fileout = $splitter[1];\n        } else {\n           // New document\n            $fileout = $this->fields['filename'];\n        }\n\n        $initfileout = $fileout;\n\n        if (Toolbox::strlen($fileout) > $len) {\n            $fileout = Toolbox::substr($fileout, 0, $len) . \"&hellip;\";\n        }\n\n        $out   = '';\n        $open  = '';\n        $close = '';\n\n        $can_view_options = $linked_item !== null\n            ? ['itemtype' => $linked_item->getType(), 'items_id' => $linked_item->getID()]\n            : ['itemtype' => Ticket::getType(), 'items_id' => $this->fields['tickets_id']];\n\n        if (self::canView() || $this->canViewFile($can_view_options)) {\n            $open  = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/document.send.php?docid=\" .\n                    $this->fields['id'] . $link_params . \"' alt=\\\"\" . $initfileout . \"\\\"\n                    title=\\\"\" . $initfileout . \"\\\"target='_blank'>\";\n            $close = \"</a>\";\n        }\n        $splitter = explode(\"/\", $this->fields['filepath']);\n\n        if (count($splitter)) {\n            $iterator = $DB->request([\n                'SELECT' => 'icon',\n                'FROM'   => 'glpi_documenttypes',\n                'WHERE'  => [\n                    'ext'    => ['LIKE', $splitter[0]],\n                    'icon'   => ['<>', '']\n                ]\n            ]);\n\n            if (count($iterator) > 0) {\n                $result = $iterator->current();\n                $icon = $result['icon'];\n                if (!file_exists(GLPI_ROOT . \"/pics/icones/$icon\")) {\n                    $icon = \"defaut-dist.png\";\n                }\n                $out .= \"&nbsp;<img class='middle' style='margin-left:3px; margin-right:6px;' alt=\\\"\" .\n                              $initfileout . \"\\\" title=\\\"\" . $initfileout . \"\\\" src='\" .\n                              $CFG_GLPI[\"typedoc_icon_dir\"] . \"/$icon'>\";\n            }\n        }\n        $out .= \"$open<span class='b'>$fileout</span>$close\";\n\n        return $out;\n    }\n\n\n    /**\n     * find a document with a file attached\n     *\n     * @param integer $entity    entity of the document\n     * @param string  $path      path of the searched file\n     *\n     * @return boolean\n     **/\n    public function getFromDBbyContent($entity, $path)\n    {\n\n        global $DB;\n\n        if (empty($path)) {\n            return false;\n        }\n\n        $sum = sha1_file($path);\n        if (!$sum) {\n            return false;\n        }\n\n        $doc_iterator = $DB->request(\n            [\n                'SELECT' => 'id',\n                'FROM'   => $this->getTable(),\n                'WHERE'  => [\n                    $this->getTable() . '.sha1sum'      => $sum,\n                    $this->getTable() . '.entities_id'  => $entity\n                ],\n                'LIMIT'  => 1,\n            ]\n        );\n\n        if ($doc_iterator->count() === 0) {\n            return false;\n        }\n\n        $doc_data = $doc_iterator->current();\n        return $this->getFromDB($doc_data['id']);\n    }\n\n\n    /**\n     * Check is the curent user is allowed to see the file.\n     *\n     * @param array $options array of possible options used to check rights:\n     *     - itemtype/items_id:     itemtype and ID of item linked to document\n     *     - changes_id (legacy):   ID of Change linked to document. Ignored if itemtype/items_id options are set.\n     *     - problems_id (legacy):  ID of Problem linked to document. Ignored if itemtype/items_id options are set.\n     *     - tickets_id (legacy):   ID of Ticket linked to document. Ignored if itemtype/items_id options are set.\n     *\n     * @return boolean\n     **/\n    public function canViewFile(array $options = [])\n    {\n\n       // Check if it is my doc\n        if (\n            Session::getLoginUserID()\n            && ($this->can($this->fields[\"id\"], READ)\n              || ($this->fields[\"users_id\"] === Session::getLoginUserID()))\n        ) {\n            return true;\n        }\n\n        if ($this->canViewFileFromReminder()) {\n            return true;\n        }\n\n        if ($this->canViewFileFromKnowbaseItem()) {\n            return true;\n        }\n\n        // new options\n        $itemtype = $options['itemtype'] ?? null;\n        $items_id = $options['items_id'] ?? null;\n\n        // legacy options\n        $changes_id  = $itemtype === null ? ($options['changes_id'] ?? null) : ($itemtype === 'Change' ? $items_id : null);\n        $problems_id = $itemtype === null ? ($options['problems_id'] ?? null) : ($itemtype === 'Problem' ? $items_id : null);\n        $tickets_id  = $itemtype === null ? ($options['tickets_id'] ?? null) : ($itemtype === 'Ticket' ? $items_id : null);\n\n        if ($changes_id !== null && $this->canViewFileFromItilObject('Change', $changes_id)) {\n            return true;\n        }\n\n        if ($problems_id !== null && $this->canViewFileFromItilObject('Problem', $problems_id)) {\n            return true;\n        }\n\n        if (\n            $itemtype !== null\n            && $items_id !== null\n            && $this->canViewFileFromItem($itemtype, $items_id)\n        ) {\n            return true;\n        }\n\n        // The following case should be reachable from the API\n        self::loadAPISessionIfExist();\n\n        if ($tickets_id !== null && $this->canViewFileFromItilObject('Ticket', $tickets_id)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Try to load the session from the API Tolen\n     *\n     * @since 9.5\n     */\n    private static function loadAPISessionIfExist()\n    {\n        $session_token = \\Toolbox::getHeader('Session-Token');\n\n       // No api token found\n        if ($session_token === null) {\n            return;\n        }\n\n        $current_session = session_id();\n\n       // Clean current session\n        if (!empty($current_session) && $current_session !== $session_token) {\n            session_destroy();\n        }\n\n       // Load API session\n        session_id($session_token);\n        Session::start();\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a Reminder.\n     *\n     * @global DBmysql $DB\n     * @return boolean\n     *\n     * @TODO Use DBmysqlIterator instead of raw SQL\n     */\n    private function canViewFileFromReminder()\n    {\n\n        global $DB;\n\n        if (!Session::getLoginUserID()) {\n            return false;\n        }\n\n        $criteria = array_merge_recursive(\n            [\n                'COUNT'     => 'cpt',\n                'FROM'      => 'glpi_documents_items',\n                'LEFT JOIN' => [\n                    'glpi_reminders'  => [\n                        'ON' => [\n                            'glpi_documents_items'  => 'items_id',\n                            'glpi_reminders'        => 'id', [\n                                'AND' => [\n                                    'glpi_documents_items.itemtype'  => 'Reminder'\n                                ]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'     => [\n                    'glpi_documents_items.documents_id' => $this->fields['id']\n                ]\n            ],\n            Reminder::getVisibilityCriteria()\n        );\n\n        $result = $DB->request($criteria)->current();\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a KnowbaseItem.\n     *\n     * @global array $CFG_GLPI\n     * @global DBmysql $DB\n     * @return boolean\n     */\n    private function canViewFileFromKnowbaseItem()\n    {\n\n        global $CFG_GLPI, $DB;\n\n       // Knowbase items can be viewed by non connected user in case of public FAQ\n        if (!Session::getLoginUserID() && !$CFG_GLPI['use_public_faq']) {\n            return false;\n        }\n\n        if (\n            !Session::haveRight(KnowbaseItem::$rightname, READ)\n            && !Session::haveRight(KnowbaseItem::$rightname, KnowbaseItem::READFAQ)\n            && !$CFG_GLPI['use_public_faq']\n        ) {\n            return false;\n        }\n\n        $visibilityCriteria = KnowbaseItem::getVisibilityCriteria();\n\n        $request = [\n            'FROM'      => 'glpi_documents_items',\n            'COUNT'     => 'cpt',\n            'LEFT JOIN' => [\n                'glpi_knowbaseitems' => [\n                    'FKEY' => [\n                        'glpi_knowbaseitems'   => 'id',\n                        'glpi_documents_items' => 'items_id',\n                        ['AND' => ['glpi_documents_items.itemtype' => 'KnowbaseItem']]\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                'glpi_documents_items.documents_id' => $this->fields['id'],\n            ]\n        ];\n\n        if (array_key_exists('LEFT JOIN', $visibilityCriteria) && count($visibilityCriteria['LEFT JOIN']) > 0) {\n            $request['LEFT JOIN'] += $visibilityCriteria['LEFT JOIN'];\n        }\n        if (array_key_exists('WHERE', $visibilityCriteria) && count($visibilityCriteria['WHERE']) > 0) {\n            $request['WHERE'] += $visibilityCriteria['WHERE'];\n        }\n\n        $result = $DB->request($request)->current();\n\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a CommonITILObject.\n     *\n     * @global DBmysql $DB\n     * @param string  $itemtype\n     * @param integer $items_id\n     * @return boolean\n     */\n    private function canViewFileFromItilObject($itemtype, $items_id)\n    {\n\n        global $DB;\n\n        if (!Session::getLoginUserID()) {\n            return false;\n        }\n\n       /* @var CommonITILObject $itil */\n        $itil = new $itemtype();\n\n        if (!$itil->can($items_id, READ)) {\n            return false;\n        }\n\n        $itil->getFromDB($items_id);\n\n        $result = $DB->request([\n            'FROM'  => Document_Item::getTable(),\n            'COUNT' => 'cpt',\n            'WHERE' => [\n                $itil->getAssociatedDocumentsCriteria(),\n                'documents_id' => $this->fields['id']\n            ]\n        ])->current();\n\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from item having given itemtype/items_id.\n     *\n     * @global DBmysql $DB\n     *\n     * @param string  $itemtype\n     * @param integer $items_id\n     *\n     * @return boolean\n     */\n    private function canViewFileFromItem($itemtype, $items_id): bool\n    {\n        global $DB;\n\n        $item = new $itemtype();\n\n        if (!$item->can($items_id, READ)) {\n            return false;\n        }\n\n        /** @var CommonDBTM $item */\n        $item->getFromDB($items_id);\n        if (!$item->canViewItem()) {\n            return false;\n        }\n\n        $result = $DB->request(\n            [\n                'FROM'  => Document_Item::getTable(),\n                'COUNT' => 'cpt',\n                'WHERE' => [\n                    'itemtype' => $itemtype,\n                    'items_id' => $items_id,\n                ]\n            ]\n        )->current();\n\n        if ($result['cpt'] === 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function rawSearchOptionsToAdd($itemtype = null)\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'document',\n            'name'               => self::getTypeName(Session::getPluralNumber())\n        ];\n\n        $tab[] = [\n            'id'                 => '119',\n            'table'              => 'glpi_documents_items',\n            'field'              => 'id',\n            'name'               => _x('quantity', 'Number of documents'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'itemtype_item'\n            ]\n        ];\n\n        return $tab;\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'massiveaction'      => false,\n            'datatype'           => 'number'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'filename',\n            'name'               => __('File'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'link',\n            'name'               => __('Web link'),\n            'datatype'           => 'weblink',\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'mime',\n            'name'               => __('MIME type'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'tag',\n            'name'               => __('Tag'),\n            'datatype'           => 'text',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => 'glpi_documentcategories',\n            'field'              => 'completename',\n            'name'               => __('Heading'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '80',\n            'table'              => 'glpi_entities',\n            'field'              => 'completename',\n            'name'               => Entity::getTypeName(1),\n            'massiveaction'      => false,\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '86',\n            'table'              => $this->getTable(),\n            'field'              => 'is_recursive',\n            'name'               => __('Child entities'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => $this->getTable(),\n            'field'              => 'sha1sum',\n            'name'               => sprintf(__('%1$s (%2$s)'), __('Checksum'), __('SHA1')),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '72',\n            'table'              => 'glpi_documents_items',\n            'field'              => 'id',\n            'name'               => _x('quantity', 'Number of associated items'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'child'\n            ]\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        $tab = array_merge($tab, Notepad::rawSearchOptionsToAdd());\n\n        return $tab;\n    }\n\n\n    /**\n     * Move a file to a new location\n     * Work even if dest file already exists\n     *\n     * @param string $srce   source file path\n     * @param string $dest   destination file path\n     *\n     * @return boolean : success\n     **/\n    public static function renameForce($srce, $dest)\n    {\n\n       // File already present\n        if (is_file($dest)) {\n           // As content is the same (sha1sum), no need to copy\n            @unlink($srce);\n            return true;\n        }\n       // Move\n        return rename($srce, $dest);\n    }\n\n\n    /**\n     * Move an uploadd document (files in GLPI_DOC_DIR.\"/_uploads\" dir)\n     *\n     * @param array  $input     array of datas used in adding process (need current_filepath)\n     * @param string $filename  filename to move\n     *\n     * @return boolean for success / $input array is updated\n     **/\n    public function moveUploadedDocument(array &$input, $filename)\n    {\n        $prefix = '';\n        if (isset($input['_prefix_filename'])) {\n            $prefix = array_shift($input['_prefix_filename']);\n        }\n\n        $fullpath = GLPI_UPLOAD_DIR . \"/\" . $filename;\n        $filename = str_replace($prefix, '', $filename);\n\n        if (!is_dir(GLPI_UPLOAD_DIR)) {\n            Session::addMessageAfterRedirect(__(\"Upload directory doesn't exist\"), false, ERROR);\n            return false;\n        }\n\n        if (!is_file($fullpath)) {\n            Session::addMessageAfterRedirect(\n                sprintf(__('File %s not found.'), $fullpath),\n                false,\n                ERROR\n            );\n            return false;\n        }\n        $sha1sum  = sha1_file($fullpath);\n        $dir      = self::isValidDoc($filename);\n        $new_path = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$new_path) {\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && is_file(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Local file : try to detect mime type\n        $input['mime'] = Toolbox::getMime($fullpath);\n\n        if (\n            is_writable(GLPI_UPLOAD_DIR)\n            && is_writable($fullpath)\n        ) { // Move if allowed\n            if (self::renameForce($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document move succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed.'), false, ERROR);\n                return false;\n            }\n        } else { // Copy (will overwrite dest file is present)\n            if (copy($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document copy succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed'), false, ERROR);\n                return false;\n            }\n        }\n\n       // For display\n        $input['filename'] = addslashes($filename);\n       // Storage path\n        $input['filepath'] = $new_path;\n       // Checksum\n        $input['sha1sum']  = $sha1sum;\n        return true;\n    }\n\n    /**\n     * Move a document (files in GLPI_DOC_DIR.\"/_tmp\" dir)\n     *\n     * @param array  $input     array of datas used in adding process (need current_filepath)\n     * @param string $filename  filename to move\n     *\n     * @return boolean for success / $input array is updated\n     **/\n    public static function moveDocument(array &$input, $filename)\n    {\n        $prefix = '';\n        if (isset($input['_prefix_filename'])) {\n            $prefix = array_shift($input['_prefix_filename']);\n        }\n\n        $fullpath = GLPI_TMP_DIR . \"/\" . $filename;\n        $filename = str_replace($prefix, '', $filename);\n        if (!is_dir(GLPI_TMP_DIR)) {\n            Session::addMessageAfterRedirect(__(\"Temporary directory doesn't exist\"), false, ERROR);\n            return false;\n        }\n\n        if (!is_file($fullpath)) {\n            Session::addMessageAfterRedirect(\n                sprintf(__('File %s not found.'), $fullpath),\n                false,\n                ERROR\n            );\n            return false;\n        }\n        $sha1sum  = sha1_file($fullpath);\n        $dir      = self::isValidDoc($filename);\n        $new_path = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$new_path) {\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && is_file(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Local file : try to detect mime type\n        $input['mime'] = Toolbox::getMime($fullpath);\n\n        if (\n            is_writable(GLPI_TMP_DIR)\n            && is_writable($fullpath)\n        ) { // Move if allowed\n            if (self::renameForce($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document move succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed.'), false, ERROR);\n                return false;\n            }\n        } else { // Copy (will overwrite dest file is present)\n            if (copy($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document copy succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed'), false, ERROR);\n                return false;\n            }\n        }\n\n       // For display\n        $input['filename'] = addslashes($filename);\n       // Storage path\n        $input['filepath'] = $new_path;\n       // Checksum\n        $input['sha1sum']  = $sha1sum;\n        return true;\n    }\n\n\n    /**\n     * Upload a new file\n     *\n     * @param &$input    array of datas need for add/update (will be completed)\n     * @param $FILEDESC        FILE descriptor\n     *\n     * @return true on success\n     **/\n    public static function uploadDocument(array &$input, $FILEDESC)\n    {\n\n        if (\n            !count($FILEDESC)\n            || empty($FILEDESC['name'])\n            || !is_file($FILEDESC['tmp_name'])\n        ) {\n            switch ($FILEDESC['error']) {\n                case 1:\n                case 2:\n                    Session::addMessageAfterRedirect(__('File too large to be added.'), false, ERROR);\n                    break;\n\n                case 4:\n                   // Session::addMessageAfterRedirect(__('No file specified.'),false,ERROR);\n                    break;\n            }\n\n            return false;\n        }\n\n        $sha1sum = sha1_file($FILEDESC['tmp_name']);\n        $dir     = self::isValidDoc($FILEDESC['name']);\n        $path    = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$path) {\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Mime type from client\n        if (isset($FILEDESC['type']) && !empty($FILEDESC['type'])) {\n            $input['mime'] = $FILEDESC['type'];\n        }\n\n       // Move uploaded file\n        if (self::renameForce($FILEDESC['tmp_name'], GLPI_DOC_DIR . \"/\" . $path)) {\n            Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n           // For display\n            $input['filename'] = addslashes($FILEDESC['name']);\n           // Storage path\n            $input['filepath'] = $path;\n           // Checksum\n            $input['sha1sum']  = $sha1sum;\n            return true;\n        }\n        Session::addMessageAfterRedirect(\n            __('Potential upload attack or file too large. Moving temporary file failed.'),\n            false,\n            ERROR\n        );\n        return false;\n    }\n\n\n    /**\n     * Find a valid path for the new file\n     *\n     * @param string $dir      dir to search a free path for the file\n     * @param string $sha1sum  SHA1 of the file\n     *\n     * @return string\n     **/\n    public static function getUploadFileValidLocationName($dir, $sha1sum)\n    {\n        if (empty($dir)) {\n            $message = __('Unauthorized file type');\n\n            if (Session::haveRight('dropdown', READ)) {\n                $dt       = new DocumentType();\n                $message .= \" <a target='_blank' href='\" . $dt->getSearchURL() . \"' class='pointer'>\n                         <i class='fa fa-info'</i><span class='sr-only'>\" . __('Manage document types')  . \"</span></a>\";\n            }\n            Session::addMessageAfterRedirect($message, false, ERROR);\n            return '';\n        }\n\n        if (!is_dir(GLPI_DOC_DIR)) {\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __(\"The directory %s doesn't exist.\"),\n                    GLPI_DOC_DIR\n                ),\n                false,\n                ERROR\n            );\n            return '';\n        }\n        $subdir = $dir . '/' . substr($sha1sum, 0, 2);\n\n        if (\n            !is_dir(GLPI_DOC_DIR . \"/\" . $subdir)\n            && @mkdir(GLPI_DOC_DIR . \"/\" . $subdir, 0777, true)\n        ) {\n            Session::addMessageAfterRedirect(sprintf(\n                __('Create the directory %s'),\n                GLPI_DOC_DIR . \"/\" . $subdir\n            ));\n        }\n\n        if (!is_dir(GLPI_DOC_DIR . \"/\" . $subdir)) {\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('Failed to create the directory %s. Verify that you have the correct permission'),\n                    GLPI_DOC_DIR . \"/\" . $subdir\n                ),\n                false,\n                ERROR\n            );\n            return '';\n        }\n        return $subdir . '/' . substr($sha1sum, 2) . '.' . $dir;\n    }\n\n\n    /**\n     * Show dropdown of uploaded files\n     *\n     * @param $myname dropdown name\n     **/\n    public static function showUploadedFilesDropdown($myname)\n    {\n        if (is_dir(GLPI_UPLOAD_DIR)) {\n            $uploaded_files = [];\n            if ($handle = opendir(GLPI_UPLOAD_DIR)) {\n                while (false !== ($file = readdir($handle))) {\n                    if (($file != '.') && ($file != '..') && ($file != 'remove.txt')) {\n                        $dir = self::isValidDoc($file);\n                        if (!empty($dir)) {\n                            $uploaded_files[$file] = $file;\n                        }\n                    }\n                }\n                closedir($handle);\n            }\n\n            if (count($uploaded_files)) {\n                Dropdown::showFromArray($myname, $uploaded_files, ['display_emptychoice' => true]);\n            } else {\n                echo __('No file available');\n            }\n        } else {\n            echo __(\"Upload directory doesn't exist\");\n        }\n    }\n\n\n    /**\n     * Is this file a valid file ? check based on file extension\n     *\n     * @param string $filename filename to clean\n     **/\n    public static function isValidDoc($filename)\n    {\n        global $DB;\n\n        $splitter = explode(\".\", $filename);\n        $ext      = end($splitter);\n\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_documenttypes',\n            'WHERE'  => [\n                'ext'             => ['LIKE', $ext],\n                'is_uploadable'   => 1\n            ]\n        ]);\n\n        if (count($iterator)) {\n            return Toolbox::strtoupper($ext);\n        }\n\n       // Not found try with regex one\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_documenttypes',\n            'WHERE'  => [\n                'ext'             => ['LIKE', '/%/'],\n                'is_uploadable'   => 1\n            ]\n        ]);\n\n        foreach ($iterator as $data) {\n            if (preg_match(Sanitizer::unsanitize($data['ext']) . \"i\", $ext, $results) > 0) {\n                return Toolbox::strtoupper($ext);\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Make a select box for link document\n     *\n     * Parameters which could be used in options array :\n     *    - name : string / name of the select (default is documents_id)\n     *    - entity : integer or array / restrict to a defined entity or array of entities\n     *                   (default -1 : no restriction)\n     *    - used : array / Already used items ID: not to display in dropdown (default empty)\n     *    - hide_if_no_elements  : boolean / hide dropdown if there is no elements (default false)\n     *\n     * @param $options array of possible options\n     *\n     * @return integer|string\n     *    integer if option display=true (random part of elements id)\n     *    string if option display=false (HTML code)\n     **/\n    public static function dropdown($options = [])\n    {\n        global $DB, $CFG_GLPI;\n\n        $p['name']    = 'documents_id';\n        $p['entity']  = '';\n        $p['used']    = [];\n        $p['display'] = true;\n        $p['hide_if_no_elements'] = false;\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        $subwhere = [\n            'glpi_documents.is_deleted'   => 0,\n        ] + getEntitiesRestrictCriteria('glpi_documents', '', $p['entity'], true);\n\n        if (count($p['used'])) {\n            $subwhere['NOT'] = ['id' => array_merge([0], $p['used'])];\n        }\n\n        $criteria = [\n            'FROM'   => 'glpi_documentcategories',\n            'WHERE'  => [\n                'id' => new QuerySubQuery([\n                    'SELECT'          => 'documentcategories_id',\n                    'DISTINCT'        => true,\n                    'FROM'            => 'glpi_documents',\n                    'WHERE'           => $subwhere\n                ])\n            ],\n            'ORDER'  => 'name'\n        ];\n        $iterator = $DB->request($criteria);\n\n        if ($p['hide_if_no_elements'] && $iterator->count() === 0) {\n            return;\n        }\n\n        $values = [];\n        foreach ($iterator as $data) {\n            $values[$data['id']] = $data['name'];\n        }\n        $rand = mt_rand();\n        $out  = Dropdown::showFromArray('_rubdoc', $values, ['width'               => '30%',\n            'rand'                => $rand,\n            'display'             => false,\n            'display_emptychoice' => true\n        ]);\n        $field_id = Html::cleanId(\"dropdown__rubdoc$rand\");\n\n        $params   = ['rubdoc' => '__VALUE__',\n            'entity' => $p['entity'],\n            'rand'   => $rand,\n            'myname' => $p['name'],\n            'used'   => $p['used']\n        ];\n\n        $out .= Ajax::updateItemOnSelectEvent(\n            $field_id,\n            \"show_\" . $p['name'] . $rand,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/dropdownRubDocument.php\",\n            $params,\n            false\n        );\n        $out .= \"<span id='show_\" . $p['name'] . \"$rand'>\";\n        $out .= \"</span>\\n\";\n\n        $params['rubdoc'] = 0;\n        $out .= Ajax::updateItem(\n            \"show_\" . $p['name'] . $rand,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/dropdownRubDocument.php\",\n            $params,\n            false\n        );\n        if ($p['display']) {\n            echo $out;\n            return $rand;\n        }\n        return $out;\n    }\n\n\n    public static function getMassiveActionsForItemtype(\n        array &$actions,\n        $itemtype,\n        $is_deleted = 0,\n        CommonDBTM $checkitem = null\n    ) {\n        $action_prefix = 'Document_Item' . MassiveAction::CLASS_ACTION_SEPARATOR;\n\n        if (self::canApplyOn($itemtype)) {\n            if (Document::canView()) {\n                $actions[$action_prefix . 'add']    = \"<i class='fa-fw \" . self::getIcon() . \"'></i>\" .\n                                                _x('button', 'Add a document');\n                $actions[$action_prefix . 'remove'] = _x('button', 'Remove a document');\n            }\n        }\n\n        if ((is_a($itemtype, __CLASS__, true)) && (static::canUpdate())) {\n            $actions[$action_prefix . 'add_item']    = _x('button', 'Add an item');\n            $actions[$action_prefix . 'remove_item'] = _x('button', 'Remove an item');\n        }\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @param $string\n     *\n     * @return string\n     **/\n    public static function getImageTag($string)\n    {\n        return self::$tag_prefix . $string . self::$tag_prefix;\n    }\n\n    /**\n     * Is file an image\n     *\n     * @since 9.2.1\n     *\n     * @param string $file File name\n     *\n     * @return boolean\n     */\n    public static function isImage($file)\n    {\n        if (!file_exists($file)) {\n            return false;\n        }\n        if (extension_loaded('exif')) {\n            if (filesize($file) < 12) {\n                return false;\n            }\n            $etype = exif_imagetype($file);\n            return in_array($etype, [IMAGETYPE_JPEG, IMAGETYPE_GIF, IMAGETYPE_PNG, IMAGETYPE_BMP]);\n        } else {\n            trigger_error(\n                'For security reasons, you should consider using exif PHP extension to properly check images.',\n                E_USER_WARNING\n            );\n            $fileinfo = finfo_open(FILEINFO_MIME_TYPE);\n            return in_array(\n                finfo_file($fileinfo, $file),\n                ['image/jpeg', 'image/png','image/gif', 'image/bmp']\n            );\n        }\n    }\n\n    /**\n     * Get image path for a specified context.\n     * Will call image resize if needed.\n     *\n     * @since 9.2.1\n     *\n     * @param string  $path    Original path\n     * @param string  $context Context\n     * @param integer $mwidth  Maximal width\n     * @param integer $mheight Maximal height\n     *\n     * @return string Image path on disk\n     */\n    public static function getImage($path, $context, $mwidth = null, $mheight = null)\n    {\n        if ($mwidth === null || $mheight === null) {\n            switch ($context) {\n                case 'mail':\n                    $mwidth  = $mwidth ?? 400;\n                    $mheight = $mheight ?? 300;\n                    break;\n                case 'timeline':\n                    $mwidth  = $mwidth ?? 100;\n                    $mheight = $mheight ?? 100;\n                    break;\n                default:\n                    throw new \\RuntimeException(\"Unknown context $context!\");\n            }\n        }\n\n       //let's see if original image needs resize\n        $img_infos  = getimagesize($path);\n        if (!($img_infos[0] > $mwidth) && !($img_infos[1] > $mheight)) {\n           //no resize needed\n            return $path;\n        }\n\n        $infos = pathinfo($path);\n       // output images with possible transparency to png, other to jpg\n        $extension = in_array(strtolower($infos['extension']), ['png', 'gif']) ? 'png' : 'jpg';\n        $context_path = sprintf(\n            '%1$s_%2$s-%3$s.%4$s',\n            $infos['dirname'] . '/' . $infos['filename'],\n            $mwidth,\n            $mheight,\n            $extension\n        );\n\n       //let's check if file already exists\n        if (file_exists($context_path)) {\n            return $context_path;\n        }\n\n       //do resize\n        $result = Toolbox::resizePicture(\n            $path,\n            $context_path,\n            $mwidth,\n            $mheight,\n            0,\n            0,\n            0,\n            0,\n            ($mwidth > $mheight ? $mwidth : $mheight)\n        );\n        return ($result ? $context_path : $path);\n    }\n\n    /**\n     * Give cron information\n     *\n     * @param string $name task's name\n     *\n     * @return array of information\n     **/\n    public static function cronInfo($name)\n    {\n\n        switch ($name) {\n            case 'cleanorphans':\n                return ['description' => __('Clean orphaned documents')];\n        }\n        return [];\n    }\n\n    /**\n     * Cron for clean orphan documents (without Document_Item)\n     *\n     * @param CronTask $task CronTask object\n     *\n     * @return integer (0 : nothing done - 1 : done)\n     **/\n    public static function cronCleanOrphans(CronTask $task)\n    {\n        global $DB;\n\n        $dtable = static::getTable();\n        $ditable = Document_Item::getTable();\n       //documents that are not present in Document_Item are oprhan\n        $iterator = $DB->request([\n            'SELECT'    => [\"$dtable.id\"],\n            'FROM'      => $dtable,\n            'LEFT JOIN' => [\n                $ditable => [\n                    'ON'  => [\n                        $dtable  => 'id',\n                        $ditable => 'documents_id'\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                \"$ditable.documents_id\" => null\n            ]\n        ]);\n\n        $nb = 0;\n        if (count($iterator)) {\n            foreach ($iterator as $row) {\n                $doc = new Document();\n                $doc->delete(['id' => $row['id']], true);\n                ++$nb;\n            }\n        }\n\n        if ($nb) {\n            $task->addVolume($nb);\n            $task->log(\"Documents : $nb\");\n        }\n\n        return ($nb > 0 ? 1 : 0);\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-files\";\n    }\n\n\n    /**\n     * find and load a document which is a duplicate of a file, with respect of blacklisting\n     *\n     * @param integer $entity    entity of the document\n     * @param string  $path      path of the searched file\n     *\n     * @return boolean\n     */\n    public function getDuplicateOf(int $entities_id, string $filename): bool\n    {\n        if (!$this->getFromDBbyContent($entities_id, $filename)) {\n            return false;\n        }\n\n        if ($this->fields['is_blacklisted']) {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Plugin\\Hooks;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Sabre\\VObject;\n\nclass User extends CommonDBTM\n{\n    use Glpi\\Features\\Clonable {\n        Glpi\\Features\\Clonable::computeCloneName as baseComputeCloneName;\n    }\n    use Glpi\\Features\\TreeBrowse;\n\n   // From CommonDBTM\n    public $dohistory         = true;\n    public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n        'publicbookmarkorder', 'privatebookmarkorder'\n    ];\n\n   // NAME FIRSTNAME ORDER TYPE\n    const REALNAME_BEFORE   = 0;\n    const FIRSTNAME_BEFORE  = 1;\n\n    const IMPORTEXTAUTHUSERS  = 1024;\n    const READAUTHENT         = 2048;\n    const UPDATEAUTHENT       = 4096;\n\n    public static $rightname = 'user';\n\n    public static $undisclosedFields = [\n        'password',\n        'personal_token',\n        'api_token',\n        'cookie_token',\n    ];\n\n    private $entities = null;\n\n    public function getCloneRelations(): array\n    {\n        return [\n            Profile_User::class,\n            Group_User::class\n        ];\n    }\n\n    public function post_clone($source, $history)\n    {\n       //FIXME? clone config\n    }\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('User', 'Users', $nb);\n    }\n\n    public static function getMenuShorcut()\n    {\n        return 'u';\n    }\n\n    public static function getAdditionalMenuOptions()\n    {\n\n        if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n            return [\n                'ldap' => [\n                    'icon'  => AuthLDAP::getIcon(),\n                    'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n                    'page'  => '/front/ldap.php',\n                ],\n            ];\n        }\n        return false;\n    }\n\n\n    public function canViewItem()\n    {\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToOneOfEntities($this->getEntities())\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canCreateItem()\n    {\n\n       // Will be created from form, with selected entity/profile\n        if (\n            isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            && isset($this->input['_entities_id'])\n            && Session::haveAccessToEntity($this->input['_entities_id'])\n        ) {\n            return true;\n        }\n       // Will be created with default value\n        if (\n            Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n            || (Profile::getDefault() > 0)\n        ) {\n            return true;\n        }\n\n        if (\n            ($_SESSION['glpiactive_entity'] > 0)\n            && (Profile::getDefault() == 0)\n        ) {\n            echo \"<div class='tab_cadre_fixe warning'>\" .\n                __('You must define a default profile to create a new user') . \"</div>\";\n        }\n\n        return false;\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        $entities = Profile_User::getUserEntities($this->fields['id'], false);\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToOneOfEntities($entities)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canDeleteItem()\n    {\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToAllOfEntities($this->getEntities())\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canPurgeItem()\n    {\n        return $this->canDeleteItem();\n    }\n\n\n    public function isEntityAssign()\n    {\n       // glpi_users.entities_id is only a pref.\n        return false;\n    }\n\n\n    /**\n     * Compute preferences for the current user mixing config and user data.\n     *\n     * @return void\n     */\n    public function computePreferences()\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields['id'])) {\n            foreach ($CFG_GLPI['user_pref_field'] as $f) {\n                if (is_null($this->fields[$f])) {\n                    $this->fields[$f] = $CFG_GLPI[$f];\n                }\n            }\n        }\n       /// Specific case for show_count_on_tabs : global config can forbid\n        if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n            $this->fields['show_count_on_tabs'] = 0;\n        }\n    }\n\n\n    /**\n     * Load minimal session for user.\n     *\n     * @param integer $entities_id  Entity to use\n     * @param boolean $is_recursive Whether to load entities recursivly or not\n     *\n     * @return void\n     *\n     * @since 0.83.7\n     */\n    public function loadMinimalSession($entities_id, $is_recursive)\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n            Session::destroy();\n            Session::start();\n            $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n            $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n            Session::loadEntity($entities_id, $is_recursive);\n            $this->computePreferences();\n            foreach ($CFG_GLPI['user_pref_field'] as $field) {\n                if (isset($this->fields[$field])) {\n                    $_SESSION[\"glpi$field\"] = $this->fields[$field];\n                }\n            }\n            Session::loadGroups();\n            Session::loadLanguage();\n        }\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case __CLASS__:\n                $ong    = [];\n                $ong[1] = __('Used items');\n                $ong[2] = __('Managed items');\n                return $ong;\n\n            case 'Preference':\n                return __('Main');\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        global $CFG_GLPI;\n\n        switch ($item->getType()) {\n            case __CLASS__:\n                $item->showItems($tabnum == 2);\n                return true;\n\n            case 'Preference':\n                $user = new self();\n                $user->showMyForm(\n                    $CFG_GLPI['root_doc'] . \"/front/preference.php\",\n                    Session::getLoginUserID()\n                );\n                return true;\n        }\n        return false;\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n\n        $config = Config::getConfigurationValues('core');\n        if ($config['system_user'] == $this->getID()) {\n            return $ong;\n        }\n\n        $this->addImpactTab($ong, $options);\n        $this->addStandardTab('Profile_User', $ong, $options);\n        $this->addStandardTab('Group_User', $ong, $options);\n        $this->addStandardTab('Config', $ong, $options);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Ticket', $ong, $options);\n        $this->addStandardTab('Item_Problem', $ong, $options);\n        $this->addStandardTab('Change_Item', $ong, $options);\n        $this->addStandardTab('Document_Item', $ong, $options);\n        $this->addStandardTab('Reservation', $ong, $options);\n        $this->addStandardTab('Auth', $ong, $options);\n        $this->addStandardTab('ManualLink', $ong, $options);\n        $this->addStandardTab('Certificate_Item', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function post_getEmpty()\n    {\n        global $CFG_GLPI;\n\n        $this->fields[\"is_active\"] = 1;\n        if (isset($CFG_GLPI[\"language\"])) {\n            $this->fields['language'] = $CFG_GLPI[\"language\"];\n        } else {\n            $this->fields['language'] = \"en_GB\";\n        }\n    }\n\n\n    public function pre_deleteItem()\n    {\n        global $DB;\n\n        $entities = $this->getEntities();\n        $view_all = Session::canViewAllEntities();\n        // Have right on all entities ?\n        $all      = true;\n        if (!$view_all) {\n            foreach ($entities as $ent) {\n                if (!Session::haveAccessToEntity($ent)) {\n                    $all = false;\n                }\n            }\n        }\n        if ($all) { // Mark as deleted\n            return true;\n        }\n\n        // only delete profile\n        foreach ($entities as $ent) {\n            if (Session::haveAccessToEntity($ent)) {\n                $DB->delete(\n                    'glpi_profiles_users',\n                    [\n                        'users_id'     => $this->fields['id'],\n                        'entities_id'  => $ent\n                    ]\n                );\n            }\n        }\n        return false;\n    }\n\n\n    public function cleanDBonPurge()\n    {\n\n        global $DB;\n\n       // ObjectLock does not extends CommonDBConnexity\n        $ol = new ObjectLock();\n        $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n       // Reminder does not extends CommonDBConnexity\n        $r = new Reminder();\n        $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n       // Delete private bookmark\n        $ss = new SavedSearch();\n        $ss->deleteByCriteria(\n            [\n                'users_id'   => $this->fields['id'],\n                'is_private' => 1,\n            ]\n        );\n\n       // Set no user to public bookmark\n        $DB->update(\n            SavedSearch::getTable(),\n            [\n                'users_id' => 0\n            ],\n            [\n                'users_id' => $this->fields['id']\n            ]\n        );\n\n       // Set no user to consumables\n        $DB->update(\n            'glpi_consumables',\n            [\n                'items_id' => 0,\n                'itemtype' => 'NULL',\n                'date_out' => 'NULL'\n            ],\n            [\n                'items_id' => $this->fields['id'],\n                'itemtype' => 'User'\n            ]\n        );\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Certificate_Item::class,\n                Change_User::class,\n                Group_User::class,\n                KnowbaseItem_User::class,\n                Problem_User::class,\n                Profile_User::class,\n                ProjectTaskTeam::class,\n                ProjectTeam::class,\n                Reminder_User::class,\n                RSSFeed_User::class,\n                SavedSearch_User::class,\n                Ticket_User::class,\n                UserEmail::class,\n            ]\n        );\n\n        if ($this->fields['id'] > 0) { // Security\n            // DisplayPreference does not extends CommonDBConnexity\n            $dp = new DisplayPreference();\n            $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n        }\n\n        $this->dropPictureFiles($this->fields['picture']);\n\n       // Ticket rules use various _users_id_*\n        Rule::cleanForItemAction($this, '_users_id%');\n        Rule::cleanForItemCriteria($this, '_users_id%');\n\n       // Alert does not extends CommonDBConnexity\n        $alert = new Alert();\n        $alert->cleanDBonItemDelete($this->getType(), $this->fields['id']);\n    }\n\n\n    /**\n     * Retrieve a user from the database using its login.\n     *\n     * @param string $name Login of the user\n     *\n     * @return boolean\n     */\n    public function getFromDBbyName($name)\n    {\n        return $this->getFromDBByCrit(['name' => $name]);\n    }\n\n    /**\n     * Retrieve a user from the database using its login.\n     *\n     * @param string  $name     Login of the user\n     * @param integer $authtype Auth type (see Auth constants)\n     * @param integer $auths_id ID of auth server\n     *\n     * @return boolean\n     */\n    public function getFromDBbyNameAndAuth($name, $authtype, $auths_id)\n    {\n        return $this->getFromDBByCrit([\n            'name'     => $name,\n            'authtype' => $authtype,\n            'auths_id' => $auths_id\n        ]);\n    }\n\n    /**\n     * Retrieve a user from the database using value of the sync field.\n     *\n     * @param string $value Value of the sync field\n     *\n     * @return boolean\n     */\n    public function getFromDBbySyncField($value)\n    {\n        return $this->getFromDBByCrit(['sync_field' => $value]);\n    }\n\n    /**\n     * Retrieve a user from the database using it's dn.\n     *\n     * @since 0.84\n     *\n     * @param string $user_dn dn of the user\n     *\n     * @return boolean\n     */\n    public function getFromDBbyDn($user_dn)\n    {\n        return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n    }\n\n    /**\n     * Get users ids matching the given email\n     *\n     * @param string $email     Email to search for\n     * @param array  $condition Extra conditions\n     *\n     * @return array Found users ids\n     */\n    public static function getUsersIdByEmails(string $email, array $condition = []): array\n    {\n        global $DB;\n\n        $query = [\n            'SELECT'    => self::getTable() . '.id',\n            'FROM'      => self::getTable(),\n            'LEFT JOIN' => [\n                UserEmail::getTable() => [\n                    'FKEY' => [\n                        self::getTable()      => 'id',\n                        UserEmail::getTable() => self::getForeignKeyField()\n                    ]\n                ]\n            ],\n            'WHERE' => [UserEmail::getTable() . '.email' => $email] + $condition\n        ];\n\n        $data = iterator_to_array($DB->request($query));\n        return array_column($data, 'id');\n    }\n\n    /**\n     * Get the number of users using the given email\n     *\n     * @param string $email     Email to search for\n     * @param array  $condition Extra conditions\n     *\n     * @return int Number of users found\n     */\n    public static function countUsersByEmail($email, $condition = []): int\n    {\n        return count(self::getUsersIdByEmails($email, $condition));\n    }\n\n\n    /**\n     * Retrieve a user from the database using its email.\n     *\n     * @since 9.3 Can pass condition as a parameter\n     *\n     * @param string $email     user email\n     * @param array  $condition add condition\n     *\n     * @return boolean\n     */\n    public function getFromDBbyEmail($email, $condition = [])\n    {\n        $ids = self::getUsersIdByEmails($email, $condition);\n\n        if (count($ids) == 1) {\n            return $this->getFromDB(current($ids));\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get the default email of the user.\n     *\n     * @return string\n     */\n    public function getDefaultEmail()\n    {\n\n        if (!isset($this->fields['id'])) {\n            return '';\n        }\n\n        return UserEmail::getDefaultForUser($this->fields['id']);\n    }\n\n\n    /**\n     * Get all emails of the user.\n     *\n     * @return string[]\n     */\n    public function getAllEmails()\n    {\n\n        if (!isset($this->fields['id'])) {\n            return [];\n        }\n        return UserEmail::getAllForUser($this->fields['id']);\n    }\n\n\n    /**\n     * Check if the email is attached to the current user.\n     *\n     * @param string $email\n     *\n     * @return boolean\n     */\n    public function isEmail($email)\n    {\n\n        if (!isset($this->fields['id'])) {\n            return false;\n        }\n        return UserEmail::isEmailForUser($this->fields['id'], $email);\n    }\n\n\n    /**\n     * Retrieve a user from the database using its personal token.\n     *\n     * @param string $token user token\n     * @param string $field the field storing the token\n     *\n     * @return boolean\n     */\n    public function getFromDBbyToken($token, $field = 'personal_token')\n    {\n        $fields = ['personal_token', 'api_token'];\n        if (!in_array($field, $fields)) {\n            trigger_error(\n                'User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'',\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n    }\n\n\n    public function prepareInputForAdd($input)\n    {\n        global $DB;\n\n        if (isset($input['_stop_import'])) {\n            return false;\n        }\n\n        if (empty($input['name']) || !Auth::isValidLogin(stripslashes($input['name']))) {\n            Session::addMessageAfterRedirect(\n                __('The login is not valid. Unable to add the user.'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n       // avoid xss (picture field is autogenerated)\n        if (isset($input['picture'])) {\n            $input['picture'] = 'NULL';\n        }\n\n        if (!isset($input[\"authtype\"])) {\n            $input[\"authtype\"] = Auth::DB_GLPI;\n        }\n\n        if (!isset($input[\"auths_id\"])) {\n            $input[\"auths_id\"] = 0;\n        }\n\n       // Check if user does not exists\n        $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n                'name'      => $input['name'],\n                'authtype'  => $input['authtype'],\n                'auths_id'  => $input['auths_id']\n            ],\n            'LIMIT'  => 1\n        ]);\n\n        if (count($iterator)) {\n            Session::addMessageAfterRedirect(\n                __('Unable to add. The user already exists.'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        if (isset($input[\"password2\"])) {\n            if (empty($input[\"password\"])) {\n                unset($input[\"password\"]);\n            } else {\n                if ($input[\"password\"] == $input[\"password2\"]) {\n                    if (Config::validatePassword($input[\"password\"])) {\n                        $input[\"password\"]\n                        = Auth::getPasswordHash(Sanitizer::unsanitize($input[\"password\"]));\n\n                        $input['password_last_update'] = $_SESSION['glpi_currenttime'];\n                    } else {\n                        unset($input[\"password\"]);\n                    }\n                    unset($input[\"password2\"]);\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('Error: the two passwords do not match'),\n                        false,\n                        ERROR\n                    );\n                    return false;\n                }\n            }\n        }\n\n        if (isset($input[\"_extauth\"])) {\n            $input[\"password\"] = \"\";\n        }\n\n       // Force DB default values : not really needed\n        if (!isset($input[\"is_active\"])) {\n            $input[\"is_active\"] = 1;\n        }\n\n        if (!isset($input[\"is_deleted\"])) {\n            $input[\"is_deleted\"] = 0;\n        }\n\n        if (!isset($input[\"entities_id\"])) {\n            $input[\"entities_id\"] = 0;\n        }\n\n        if (!isset($input[\"profiles_id\"])) {\n            $input[\"profiles_id\"] = 0;\n        }\n\n        return $input;\n    }\n\n    public function computeCloneName(\n        string $current_name,\n        ?int $copy_index = null\n    ): string {\n        return Toolbox::slugify(\n            $this->baseComputeCloneName($current_name, $copy_index)\n        );\n    }\n\n    public function post_addItem()\n    {\n\n        $this->updateUserEmails();\n        $this->syncLdapGroups();\n        $this->syncDynamicEmails();\n\n        $this->applyGroupsRules();\n        $rulesplayed = $this->applyRightRules();\n        $picture     = $this->syncLdapPhoto();\n\n       //add picture in user fields\n        if (!empty($picture)) {\n            $this->update(['id'      => $this->fields['id'],\n                'picture' => $picture\n            ]);\n        }\n\n       // Add default profile\n        if (!$rulesplayed) {\n            $affectation = [];\n            if (\n                isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n                && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n                $profile                   = $this->input['_profiles_id'];\n               // Choosen in form, so not dynamic\n                $affectation['is_dynamic'] = 0;\n            } else {\n                $profile                   = Profile::getDefault();\n               // Default right as dynamic. If dynamic rights are set it will disappear.\n                $affectation['is_dynamic'] = 1;\n                $affectation['is_default_profile'] = 1;\n            }\n\n            if ($profile) {\n                if (isset($this->input[\"_entities_id\"])) {\n                   // entities_id (user's pref) always set in prepareInputForAdd\n                   // use _entities_id for default right\n                    $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n                } else if (isset($_SESSION['glpiactive_entity'])) {\n                    $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n                } else {\n                    $affectation[\"entities_id\"] = 0;\n                }\n                if (isset($this->input[\"_is_recursive\"])) {\n                    $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n                } else {\n                    $affectation[\"is_recursive\"] = 0;\n                }\n\n                $affectation[\"profiles_id\"]  = $profile;\n                $affectation[\"users_id\"]     = $this->fields[\"id\"];\n                $right                       = new Profile_User();\n                $right->add($affectation);\n            }\n        }\n    }\n\n\n    public function prepareInputForUpdate($input)\n    {\n        global $CFG_GLPI;\n\n       // avoid xss (picture name is autogenerated when uploading/synchronising the picture)\n        unset($input['picture']);\n\n       //picture manually uploaded by user\n        if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n            self::dropPictureFiles($this->fields['picture']);\n            $input['picture'] = 'NULL';\n        } else {\n            $newPicture = false;\n            if (!isAPI()) {\n                if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n                    $input[\"_picture\"] = $input[\"_picture\"][0];\n                }\n            }\n            if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n                $newPicture = true;\n            }\n            if ($newPicture) {\n                $fullpath = GLPI_TMP_DIR . \"/\" . $input[\"_picture\"];\n                if (Toolbox::getMime($fullpath, 'image')) {\n                   // Unlink old picture (clean on changing format)\n                    self::dropPictureFiles($this->fields['picture']);\n                   // Move uploaded file\n                    $filename     = uniqid($this->fields['id'] . '_');\n                    $sub          = substr($filename, -2); /* 2 hex digit */\n\n                   // output images with possible transparency to png, other to jpg\n                    $extension = strtolower(pathinfo($fullpath, PATHINFO_EXTENSION));\n                    $extension = in_array($extension, ['png', 'gif'])\n                    ? 'png'\n                    : 'jpg';\n\n                    @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                    $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n                    self::dropPictureFiles(\"$sub/${filename}.$extension\");\n\n                    if (\n                        Document::isImage($fullpath)\n                        && Document::renameForce($fullpath, $picture_path)\n                    ) {\n                        Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                        // For display\n                        $input['picture'] = \"$sub/${filename}.$extension\";\n\n                        //prepare a thumbnail\n                        $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                        Toolbox::resizePicture($picture_path, $thumb_path);\n                    } else {\n                        Session::addMessageAfterRedirect(\n                            __('Potential upload attack or file too large. Moving temporary file failed.'),\n                            false,\n                            ERROR\n                        );\n                    }\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('The file is not an image file.'),\n                        false,\n                        ERROR\n                    );\n                }\n            } else {\n               //ldap jpegphoto synchronisation.\n                $picture = $this->syncLdapPhoto();\n                if (!empty($picture)) {\n                    $input['picture'] = $picture;\n                }\n            }\n        }\n\n        if (isset($input[\"password2\"])) {\n           // Empty : do not update\n            if (empty($input[\"password\"])) {\n                unset($input[\"password\"]);\n            } else {\n                if ($input[\"password\"] == $input[\"password2\"]) {\n                   // Check right : my password of user with lesser rights\n                    if (\n                        isset($input['id'])\n                        && !Auth::checkPassword($input['password'], $this->fields['password']) // Validate that password is not same as previous\n                        && Config::validatePassword($input[\"password\"])\n                        && (($input['id'] == Session::getLoginUserID())\n                        || $this->currentUserHaveMoreRightThan($input['id'])\n                        // Permit to change password with token and email\n                        || (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               - strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)))\n                    ) {\n                        $input[\"password\"]\n                        = Auth::getPasswordHash(Sanitizer::unsanitize($input[\"password\"]));\n\n                        $input['password_last_update'] = $_SESSION[\"glpi_currenttime\"];\n                    } else {\n                        unset($input[\"password\"]);\n                    }\n                    unset($input[\"password2\"]);\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('Error: the two passwords do not match'),\n                        false,\n                        ERROR\n                    );\n                    return false;\n                }\n            }\n        } else if (isset($input[\"password\"])) { // From login\n            unset($input[\"password\"]);\n        }\n\n       // blank password when authtype changes\n        if (\n            isset($input[\"authtype\"])\n            && $input[\"authtype\"] != Auth::DB_GLPI\n            && $input[\"authtype\"] != $this->getField('authtype')\n        ) {\n            $input[\"password\"] = \"\";\n        }\n\n       // Update User in the database\n        if (\n            !isset($input[\"id\"])\n            && isset($input[\"name\"])\n        ) {\n            if ($this->getFromDBbyName($input[\"name\"])) {\n                $input[\"id\"] = $this->fields[\"id\"];\n            }\n        }\n\n        if (\n            isset($input[\"entities_id\"])\n            && (Session::getLoginUserID() == $input['id'])\n        ) {\n            $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n        }\n\n       // Security on default profile update\n        if (isset($input['profiles_id'])) {\n            if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n                unset($input['profiles_id']);\n            }\n        }\n\n       // Security on default entity  update\n        if (isset($input['entities_id'])) {\n            if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n                unset($input['entities_id']);\n            }\n        }\n\n       // Security on default group  update\n        if (\n            isset($input['groups_id'])\n            && !Group_User::isUserInGroup($input['id'], $input['groups_id'])\n        ) {\n            unset($input['groups_id']);\n        }\n\n        if (\n            isset($input['_reset_personal_token'])\n            && $input['_reset_personal_token']\n        ) {\n            $input['personal_token']      = self::getUniqueToken('personal_token');\n            $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n        }\n\n        if (\n            isset($input['_reset_api_token'])\n            && $input['_reset_api_token']\n        ) {\n            $input['api_token']      = self::getUniqueToken('api_token');\n            $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n        }\n\n       // Manage preferences fields\n        if (Session::getLoginUserID() == $input['id']) {\n            if (\n                isset($input['use_mode'])\n                && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])\n            ) {\n                $_SESSION['glpi_use_mode'] = $input['use_mode'];\n                unset($_SESSION['glpimenu']); // Force menu regeneration\n               //Session::loadLanguage();\n            }\n        }\n\n        foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (isset($input[$f])) {\n                if (Session::getLoginUserID() == $input['id']) {\n                    if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                        $_SESSION[\"glpi$f\"] = $input[$f];\n                      // reinit translations\n                        if ($f == 'language') {\n                             $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                             unset($_SESSION['glpimenu']);\n                        }\n                    }\n                }\n                if ($input[$f] == $CFG_GLPI[$f]) {\n                    $input[$f] = \"NULL\";\n                }\n            }\n        }\n\n        if (isset($input['language']) && GLPI_DEMO_MODE) {\n            unset($input['language']);\n        }\n\n        if (array_key_exists('timezone', $input) && empty($input['timezone'])) {\n            $input['timezone'] = 'NULL';\n        }\n\n        return $input;\n    }\n\n\n    public function post_updateItem($history = 1)\n    {\n       //handle timezone change for current user\n        if ($this->fields['id'] == Session::getLoginUserID()) {\n            if (null == $this->fields['timezone'] || 'null' === strtolower($this->fields['timezone'])) {\n                unset($_SESSION['glpi_tz']);\n            } else {\n                $_SESSION['glpi_tz'] = $this->fields['timezone'];\n            }\n        }\n\n        $this->updateUserEmails();\n        $this->syncLdapGroups();\n        $this->syncDynamicEmails();\n        $this->applyGroupsRules();\n        $this->applyRightRules();\n\n        if (in_array('password', $this->updates)) {\n            $alert = new Alert();\n            $alert->deleteByCriteria(\n                [\n                    'itemtype' => $this->getType(),\n                    'items_id' => $this->fields['id'],\n                ],\n                true\n            );\n        }\n    }\n\n\n\n    /**\n     * Apply rules to determine dynamic rights of the user.\n     *\n     * @return boolean true if rules are applied, false otherwise\n     */\n    public function applyRightRules()\n    {\n\n        $return = false;\n\n        if (\n            isset($this->fields['_ruleright_process'])\n            || isset($this->input['_ruleright_process'])\n        ) {\n            $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n            if (\n                isset($this->fields[\"id\"])\n                && ($this->fields[\"id\"] > 0)\n                && isset($this->input[\"_ldap_rules\"])\n                && count($this->input[\"_ldap_rules\"])\n            ) {\n               //and add/update/delete only if it's necessary !\n                if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                    $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n                } else {\n                    $entities_rules = [];\n                }\n\n                if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n                    $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n                } else {\n                    $entities = [];\n                }\n\n                if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                    $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n                } else {\n                    $rights = [];\n                }\n\n                $retrieved_dynamic_profiles = [];\n\n               //For each affectation -> write it in DB\n                foreach ($entities_rules as $entity) {\n                   //Multiple entities assignation\n                    if (is_array($entity[0])) {\n                        foreach ($entity[0] as $ent) {\n                             $retrieved_dynamic_profiles[] = [\n                                 'entities_id'  => $ent,\n                                 'profiles_id'  => $entity[1],\n                                 'is_recursive' => $entity[2],\n                                 'users_id'     => $this->fields['id'],\n                                 'is_dynamic'   => 1,\n                             ];\n                        }\n                    } else {\n                        $retrieved_dynamic_profiles[] = [\n                            'entities_id'  => $entity[0],\n                            'profiles_id'  => $entity[1],\n                            'is_recursive' => $entity[2],\n                            'users_id'     => $this->fields['id'],\n                            'is_dynamic'   => 1,\n                        ];\n                    }\n                }\n\n                if (\n                    (count($entities) > 0)\n                    && (count($rights) == 0)\n                ) {\n                    if ($def_prof = Profile::getDefault()) {\n                        $rights[] = $def_prof;\n                    }\n                }\n\n                if (\n                    (count($rights) > 0)\n                    && (count($entities) > 0)\n                ) {\n                    foreach ($rights as $right) {\n                        foreach ($entities as $entity) {\n                             $retrieved_dynamic_profiles[] = [\n                                 'entities_id'  => $entity[0],\n                                 'profiles_id'  => $right,\n                                 'is_recursive' => $entity[1],\n                                 'users_id'     => $this->fields['id'],\n                                 'is_dynamic'   => 1,\n                             ];\n                        }\n                    }\n                }\n\n               // Compare retrived profiles to existing ones : clean arrays to do purge and add\n                if (count($retrieved_dynamic_profiles)) {\n                    foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                        $found = false;\n\n                        foreach ($dynamic_profiles as $keydb => $db_profile) {\n                             // Found existing profile : unset values in array\n                            if (\n                                !$found\n                                && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                                && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                                && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])\n                            ) {\n                                unset($retrieved_dynamic_profiles[$keyretr]);\n                                unset($dynamic_profiles[$keydb]);\n                            }\n                        }\n                    }\n                }\n\n               // Add new dynamic profiles\n                if (count($retrieved_dynamic_profiles)) {\n                    $right = new Profile_User();\n                    foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                        $right->add($retr_profile);\n                    }\n                }\n\n               //Unset all the temporary tables\n                unset($this->input[\"_ldap_rules\"]);\n\n                $return = true;\n            } else if (count($dynamic_profiles) == 1) {\n                $dynamic_profile = reset($dynamic_profiles);\n\n               // If no rule applied and only one dynamic profile found, check if\n               // it is the default profile\n                if ($dynamic_profile['is_default_profile'] == true) {\n                    $default_profile = Profile::getDefault();\n\n                   // Remove from to be deleted list\n                    $dynamic_profiles = [];\n\n                   // Update profile if need to match the current default profile\n                    if ($dynamic_profile['profiles_id'] !== $default_profile) {\n                        $pu = new Profile_User();\n                        $dynamic_profile['profiles_id'] = $default_profile;\n                        $pu->add($dynamic_profile);\n                        $pu->delete([\n                            'id' => $dynamic_profile['id']\n                        ]);\n                    }\n                }\n            }\n\n           // Delete old dynamic profiles\n            if (count($dynamic_profiles)) {\n                $right = new Profile_User();\n                foreach ($dynamic_profiles as $keydb => $db_profile) {\n                    $right->delete($db_profile);\n                }\n            }\n        }\n        return $return;\n    }\n\n\n    /**\n     * Synchronise LDAP group of the user.\n     *\n     * @return void\n     */\n    public function syncLdapGroups()\n    {\n        global $DB;\n\n       // input[\"_groups\"] not set when update from user.form or preference\n        if (\n            isset($this->fields[\"authtype\"])\n            && isset($this->input[\"_groups\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n                if (count($authtype)) {\n                    // Clean groups\n                    $this->input[\"_groups\"] = array_unique($this->input[\"_groups\"]);\n\n                    // Delete not available groups like to LDAP\n                    $iterator = $DB->request([\n                        'SELECT'    => [\n                            'glpi_groups_users.id',\n                            'glpi_groups_users.groups_id',\n                            'glpi_groups_users.is_dynamic'\n                        ],\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_groups'  => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'groups_id',\n                                    'glpi_groups'        => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.users_id' => $this->fields['id']\n                        ]\n                    ]);\n\n                     $groupuser = new Group_User();\n                    foreach ($iterator as $data) {\n                        if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                         // Delete found item in order not to add it again\n                            unset($this->input[\"_groups\"][array_search(\n                                $data[\"groups_id\"],\n                                $this->input[\"_groups\"]\n                            )]);\n                        } else if ($data['is_dynamic']) {\n                            $groupuser->delete(['id' => $data[\"id\"]]);\n                        }\n                    }\n\n                     //If the user needs to be added to one group or more\n                    if (count($this->input[\"_groups\"]) > 0) {\n                        foreach ($this->input[\"_groups\"] as $group) {\n                              $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                  'groups_id'  => $group,\n                                  'is_dynamic' => 1\n                              ]);\n                        }\n                        unset($this->input[\"_groups\"]);\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Synchronize picture (photo) of the user.\n     *\n     * @since 0.85\n     *\n     * @return string|boolean Filename to be stored in user picture field, false if no picture found\n     */\n    public function syncLdapPhoto()\n    {\n\n        if (\n            isset($this->fields[\"authtype\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $config_ldap = new AuthLDAP();\n                $ds          = false;\n\n               //connect ldap server\n                if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n                    $ds = $config_ldap->connect();\n                }\n\n                if ($ds) {\n                   //get picture fields\n                    $picture_field = $config_ldap->fields['picture_field'];\n                    if (empty($picture_field)) {\n                        return false;\n                    }\n\n                   //get picture content in ldap\n                    $info = AuthLDAP::getUserByDn(\n                        $ds,\n                        $this->fields['user_dn'],\n                        [$picture_field],\n                        false\n                    );\n\n                   //getUserByDn returns an array. If the picture is empty,\n                   //$info[$picture_field][0] is null\n                    if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                          return \"\";\n                    }\n                   //prepare paths\n                    $img       = array_pop($info[$picture_field]);\n                    $filename  = uniqid($this->fields['id'] . '_');\n                    $sub       = substr($filename, -2); /* 2 hex digit */\n                    $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n                    if (array_key_exists('picture', $this->fields)) {\n                        $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n                    } else {\n                        $oldfile = null;\n                    }\n\n                   // update picture if not exist or changed\n                    if (\n                        empty($this->fields[\"picture\"])\n                        || !file_exists($oldfile)\n                        || sha1_file($oldfile) !== sha1($img)\n                    ) {\n                        if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                            mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                        }\n\n                       //save picture\n                        $outjpeg = fopen($file, 'wb');\n                        fwrite($outjpeg, $img);\n                        fclose($outjpeg);\n\n                       //save thumbnail\n                        $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                        Toolbox::resizePicture($file, $thumb);\n\n                        return \"$sub/${filename}.jpg\";\n                    }\n                    return $this->fields[\"picture\"];\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Update emails of the user.\n     * Uses _useremails set from UI, not _emails set from LDAP.\n     *\n     * @return void\n     */\n    public function updateUserEmails()\n    {\n       // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n        $userUpdated = false;\n\n        if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n            $useremail = new UserEmail();\n            foreach ($this->input['_useremails'] as $id => $email) {\n                $email = trim($email);\n\n                // existing email\n                if ($id > 0) {\n                    $params = ['id' => $id];\n\n                   // empty email : delete\n                    if (strlen($email) == 0) {\n                        $deleted = $useremail->delete($params);\n                        $userUpdated = $userUpdated || $deleted;\n                    } else { // Update email\n                        $params['email'] = $email;\n                        $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                        $existingUserEmail = new UserEmail();\n                        $existingUserEmail->getFromDB($id);\n                        if (\n                            $params['email'] == $existingUserEmail->fields['email']\n                            && $params['is_default'] == $existingUserEmail->fields['is_default']\n                        ) {\n                             // Do not update if email has not changed\n                             continue;\n                        }\n\n                        $updated = $useremail->update($params);\n                        $userUpdated = $userUpdated || $updated;\n                    }\n                } else { // New email\n                    $email_input = ['email'    => $email,\n                        'users_id' => $this->fields['id']\n                    ];\n                    if (\n                        isset($this->input['_default_email'])\n                        && ($this->input['_default_email'] == $id)\n                    ) {\n                        $email_input['is_default'] = 1;\n                    } else {\n                        $email_input['is_default'] = 0;\n                    }\n                    $added = $useremail->add($email_input);\n                    $userUpdated = $userUpdated || $added;\n                }\n            }\n        }\n\n        if ($userUpdated) {\n           // calling $this->update() here leads to loss in $this->input\n            $user = new User();\n            $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n        }\n    }\n\n\n    /**\n     * Synchronise Dynamics emails of the user.\n     * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n     *\n     * @return void\n     */\n    public function syncDynamicEmails()\n    {\n        global $DB;\n\n        $userUpdated = false;\n\n       // input[\"_emails\"] not set when update from user.form or preference\n        if (\n            isset($this->fields[\"authtype\"])\n            && isset($this->input[\"_emails\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n                if (\n                    count($authtype)\n                    || $this->fields[\"authtype\"] == Auth::EXTERNAL\n                ) {\n                    // Clean emails\n                    // Do a case insensitive comparison as it seems that some LDAP servers\n                    // may return same email with different case sensitivity.\n                    $unique_emails = [];\n                    foreach ($this->input[\"_emails\"] as $email) {\n                        if (!in_array(strtolower($email), array_map('strtolower', $unique_emails))) {\n                            $unique_emails[] = $email;\n                        }\n                    }\n                    $this->input[\"_emails\"] = $unique_emails;\n\n                    // Delete not available groups like to LDAP\n                    $iterator = $DB->request([\n                        'SELECT' => [\n                            'id',\n                            'users_id',\n                            'email',\n                            'is_dynamic'\n                        ],\n                        'FROM'   => 'glpi_useremails',\n                        'WHERE'  => ['users_id' => $this->fields['id']]\n                    ]);\n\n                     $useremail = new UserEmail();\n                    foreach ($iterator as $data) {\n                        // Do a case insensitive comparison as email may be stored with a different case\n                        $i = array_search(strtolower($data[\"email\"]), array_map('strtolower', $this->input[\"_emails\"]));\n                        if ($i !== false) {\n                            // Delete found item in order not to add it again\n                            unset($this->input[\"_emails\"][$i]);\n                        } else if ($data['is_dynamic']) {\n                            // Delete not found email\n                            $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                            $userUpdated = $userUpdated || $deleted;\n                        }\n                    }\n\n                     //If the email need to be added\n                    if (count($this->input[\"_emails\"]) > 0) {\n                        foreach ($this->input[\"_emails\"] as $email) {\n                              $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                  'email'      => $email,\n                                  'is_dynamic' => 1\n                              ]);\n                              $userUpdated = $userUpdated || $added;\n                        }\n                        unset($this->input[\"_emails\"]);\n                    }\n                }\n            }\n        }\n\n        if ($userUpdated) {\n           // calling $this->update() here leads to loss in $this->input\n            $user = new User();\n            $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n        }\n    }\n\n    protected function computeFriendlyName()\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n           //computeFriendlyName should not add ID\n            $bkp_conf = $CFG_GLPI['is_ids_visible'];\n            $CFG_GLPI['is_ids_visible'] = 0;\n            $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n            $_SESSION[\"glpiis_ids_visible\"] = 0;\n            $name = formatUserName(\n                $this->fields[\"id\"],\n                $this->fields[\"name\"],\n                (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : '')\n            );\n\n            $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n            $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n            return $name;\n        }\n        return '';\n    }\n\n\n    /**\n     * Function that tries to load the user membership from LDAP\n     * by searching in the attributes of the User.\n     *\n     * @param resource $ldap_connection LDAP connection\n     * @param array    $ldap_method     LDAP method\n     * @param string   $userdn          Basedn of the user\n     * @param string   $login           User login\n     *\n     * @return void\n     */\n    private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login): void\n    {\n        global $DB;\n\n       // Search in DB the ldap_field we need to search for in LDAP\n        $iterator = $DB->request([\n            'SELECT'          => 'ldap_field',\n            'DISTINCT'        => true,\n            'FROM'            => 'glpi_groups',\n            'WHERE'           => ['NOT' => ['ldap_field' => '']],\n            'ORDER'           => 'ldap_field'\n        ]);\n        $group_fields = [];\n\n        foreach ($iterator as $data) {\n            $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n        }\n        if (count($group_fields)) {\n           //Need to sort the array because edirectory don't like it!\n            sort($group_fields);\n\n           // If the groups must be retrieve from the ldap user object\n            $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n            $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n            for ($i = 0; $i < $v['count']; $i++) {\n               //Try to find is DN in present and needed: if yes, then extract only the OU from it\n                if (\n                    (($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                    && isset($v[$i]['dn'])\n                ) {\n                    $v[$i]['ou'] = [];\n                    for ($tmp = $v[$i]['dn']; count($tmptab = explode(',', $tmp, 2)) == 2; $tmp = $tmptab[1]) {\n                        $v[$i]['ou'][] = $tmptab[1];\n                    }\n\n                    // Search in DB for group with ldap_group_dn\n                    if (\n                        ($ldap_method[\"group_field\"] == 'dn')\n                        && (count($v[$i]['ou']) > 0)\n                    ) {\n                        $group_iterator = $DB->request([\n                            'SELECT' => 'id',\n                            'FROM'   => 'glpi_groups',\n                            'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                        ]);\n\n                        foreach ($group_iterator as $group) {\n                            $this->fields[\"_groups\"][] = $group['id'];\n                        }\n                    }\n\n                   // searching with ldap_field='OU' and ldap_value is also possible\n                    $v[$i]['ou']['count'] = count($v[$i]['ou']);\n                }\n\n               // For each attribute retrieve from LDAP, search in the DB\n                foreach ($group_fields as $field) {\n                    if (\n                        isset($v[$i][$field])\n                        && isset($v[$i][$field]['count'])\n                        && ($v[$i][$field]['count'] > 0)\n                    ) {\n                        unset($v[$i][$field]['count']);\n                        $lgroups = [];\n                        foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                            $lgroups[] = [\n                                new \\QueryExpression($DB->quoteValue($lgroup) .\n                                             \" LIKE \" .\n                                             $DB->quoteName('ldap_value'))\n                            ];\n                        }\n                        $group_iterator = $DB->request([\n                            'SELECT' => 'id',\n                            'FROM'   => 'glpi_groups',\n                            'WHERE'  => [\n                                'ldap_field' => $field,\n                                'OR'         => $lgroups\n                            ]\n                        ]);\n\n                        foreach ($group_iterator as $group) {\n                            $this->fields[\"_groups\"][] = $group['id'];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Function that tries to load the user membership from LDAP\n     * by searching in the attributes of the Groups.\n     *\n     * @param resource $ldap_connection    LDAP connection\n     * @param array    $ldap_method        LDAP method\n     * @param string   $userdn             Basedn of the user\n     * @param string   $login              User login\n     *\n     * @return boolean true if search is applicable, false otherwise\n     */\n    private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login)\n    {\n        global $DB;\n\n       // No group_member_field : unable to get group\n        if (empty($ldap_method[\"group_member_field\"])) {\n            return false;\n        }\n\n        if ($ldap_method[\"use_dn\"]) {\n            $user_tmp = $userdn;\n        } else {\n           //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n            $user_tmp = $login;\n        }\n\n        $v = $this->ldap_get_user_groups(\n            $ldap_connection,\n            $ldap_method[\"basedn\"],\n            $user_tmp,\n            $ldap_method[\"group_condition\"],\n            $ldap_method[\"group_member_field\"],\n            $ldap_method[\"use_dn\"],\n            $ldap_method[\"login_field\"]\n        );\n        foreach ($v as $result) {\n            if (\n                isset($result[$ldap_method[\"group_member_field\"]])\n                && is_array($result[$ldap_method[\"group_member_field\"]])\n                && (count($result[$ldap_method[\"group_member_field\"]]) > 0)\n            ) {\n                $iterator = $DB->request([\n                    'SELECT' => 'id',\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n                ]);\n\n                foreach ($iterator as $group) {\n                    $this->fields[\"_groups\"][] = $group['id'];\n                }\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Function that tries to load the user information from LDAP.\n     *\n     * @param resource $ldap_connection LDAP connection\n     * @param array    $ldap_method     LDAP method\n     * @param string   $userdn          Basedn of the user\n     * @param string   $login           User Login\n     * @param boolean  $import          true for import, false for update\n     *\n     * @return boolean true if found / false if not\n     */\n    public function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true)\n    {\n        global $DB, $CFG_GLPI;\n\n       // we prevent some delay...\n        if (empty($ldap_method[\"host\"])) {\n            return false;\n        }\n\n        if (is_resource($ldap_connection) || $ldap_connection instanceof \\Ldap\\Connection) {\n           //Set all the search fields\n            $this->fields['password'] = \"\";\n\n            $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n           //Hook to allow plugin to request more attributes from ldap\n            $fields = Plugin::doHookFunction(Hooks::RETRIEVE_MORE_FIELD_FROM_LDAP, $fields);\n\n            $fields  = array_filter($fields);\n            $f       = self::getLdapFieldNames($fields);\n\n            $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n            $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n            if (\n                !is_array($v)\n                || ( count($v) == 0)\n                || empty($v[0][$fields['name']][0])\n            ) {\n                return false;\n            }\n\n           //Store user's dn\n            $this->fields['user_dn']    = addslashes($userdn);\n           //Store date_sync\n            $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n           // Empty array to ensure than syncDynamicEmails will be done\n            $this->fields[\"_emails\"]    = [];\n           // force authtype as we retrieve this user by ldap (we could have login with SSO)\n            $this->fields[\"authtype\"] = Auth::LDAP;\n\n            $import_fields = [];\n            foreach ($fields as $k => $e) {\n                $val = AuthLDAP::getFieldValue(\n                    [$e => self::getLdapFieldValue($e, $v)],\n                    $e\n                );\n                if (empty($val)) {\n                    switch ($k) {\n                        case \"language\":\n                             // Not set value : managed but user class\n                            break;\n\n                        case \"usertitles_id\":\n                        case \"usercategories_id\":\n                        case 'locations_id':\n                        case 'users_id_supervisor':\n                            $this->fields[$k] = 0;\n                            break;\n\n                        default:\n                            $this->fields[$k] = \"\";\n                    }\n                } else {\n                    $val = Toolbox::addslashes_deep($val);\n                    switch ($k) {\n                        case \"email1\":\n                        case \"email2\":\n                        case \"email3\":\n                        case \"email4\":\n                          // Manage multivaluable fields\n                            if (!empty($v[0][$e])) {\n                                foreach ($v[0][$e] as $km => $m) {\n                                    if (!preg_match('/count/', $km)) {\n                                         $this->fields[\"_emails\"][] = addslashes($m);\n                                    }\n                                }\n                                // Only get them once if duplicated\n                                $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                            }\n                            break;\n\n                        case \"language\":\n                            $language = Config::getLanguage($val);\n                            if ($language != '') {\n                                $this->fields[$k] = $language;\n                            }\n                            break;\n\n                        case \"usertitles_id\":\n                        case 'locations_id':\n                        case \"usercategories_id\":\n                        case 'users_id_supervisor':\n                            $import_fields[$k] = $val;\n                            break;\n\n                        default:\n                              $this->fields[$k] = $val;\n                    }\n                }\n            }\n\n           // Empty array to ensure than syncLdapGroups will be done\n            $this->fields[\"_groups\"] = [];\n\n           ///The groups are retrieved by looking into an ldap user object\n            if (\n                ($ldap_method[\"group_search_type\"] == 0)\n                || ($ldap_method[\"group_search_type\"] == 2)\n            ) {\n                $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n            }\n\n           ///The groups are retrived by looking into an ldap group object\n            if (\n                ($ldap_method[\"group_search_type\"] == 1)\n                || ($ldap_method[\"group_search_type\"] == 2)\n            ) {\n                $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n            }\n\n           ///Only process rules if working on the master database\n            if (!$DB->isSlave()) {\n               //Instanciate the affectation's rule\n                $rule = new RuleRightCollection();\n\n               //Process affectation rules :\n               //we don't care about the function's return because all\n               //the datas are stored in session temporary\n                if (isset($this->fields[\"_groups\"])) {\n                    $groups = $this->fields[\"_groups\"];\n                } else {\n                    $groups = [];\n                }\n\n                $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n                    'type'        => Auth::LDAP,\n                    'ldap_server' => $ldap_method[\"id\"],\n                    'connection'  => $ldap_connection,\n                    'userdn'      => $userdn,\n                    'login'       => $this->fields['name'],\n                    'mail_email'  => $this->fields['_emails']\n                ]);\n\n                $this->fields['_ruleright_process'] = true;\n\n               //If rule  action is ignore import\n                if (\n                    $import\n                    && isset($this->fields[\"_stop_import\"])\n                ) {\n                     return false;\n                }\n               //or no rights found & do not import users with no rights\n                if (\n                    $import\n                    && !$CFG_GLPI[\"use_noright_users_add\"]\n                ) {\n                    $ok = false;\n                    if (\n                        isset($this->fields[\"_ldap_rules\"])\n                        && count($this->fields[\"_ldap_rules\"])\n                    ) {\n                        if (\n                            isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                            && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                        ) {\n                            $ok = true;\n                        }\n                        if (!$ok) {\n                            $entity_count = 0;\n                            $right_count  = 0;\n                            if (Profile::getDefault()) {\n                                $right_count++;\n                            }\n                            if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                                $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                            }\n                            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                                $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                            }\n                            if ($entity_count && $right_count) {\n                                $ok = true;\n                            }\n                        }\n                    }\n                    if (!$ok) {\n                        $this->fields[\"_stop_import\"] = true;\n                        return false;\n                    }\n                }\n\n                foreach ($import_fields as $k => $val) {\n                    switch ($k) {\n                        case \"usertitles_id\":\n                            $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                            break;\n                        case 'locations_id':\n                            // use import to build the location tree\n                            $this->fields[$k] = Dropdown::import(\n                                'Location',\n                                ['completename' => $val,\n                                    'entities_id'  => 0,\n                                    'is_recursive' => 1\n                                ]\n                            );\n                            break;\n                        case \"usercategories_id\":\n                            $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                            break;\n                        case 'users_id_supervisor':\n                            $supervisor_id = self::getIdByField('user_dn', $val, false);\n                            if ($supervisor_id) {\n                                $this->fields[$k] = $supervisor_id;\n                            }\n                            break;\n                    }\n                }\n\n               // Add ldap result to data send to the hook\n                $this->fields['_ldap_result'] = $v;\n                $this->fields['_ldap_conn']   = $ldap_connection;\n               //Hook to retrieve more information for ldap\n                $this->fields = Plugin::doHookFunction(Hooks::RETRIEVE_MORE_DATA_FROM_LDAP, $this->fields);\n                unset($this->fields['_ldap_result']);\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get all groups a user belongs to.\n     *\n     * @param resource $ds                 ldap connection\n     * @param string   $ldap_base_dn       Basedn used\n     * @param string   $user_dn            Basedn of the user\n     * @param string   $group_condition    group search condition\n     * @param string   $group_member_field group field member in a user object\n     * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n     * @param string   $login_field        user login field\n     *\n     * @return array Groups of the user located in [0][$group_member_field] in returned array\n     */\n    public function ldap_get_user_groups(\n        $ds,\n        $ldap_base_dn,\n        $user_dn,\n        $group_condition,\n        $group_member_field,\n        $use_dn,\n        $login_field\n    ) {\n\n        $groups     = [];\n        $listgroups = [];\n\n       //User dn may contain ( or ), need to espace it!\n        $user_dn = str_replace(\n            [\"(\", \")\", \"\\,\", \"\\+\"],\n            [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n            $user_dn\n        );\n\n       //Only retrive cn and member attributes from groups\n        $attrs = ['dn'];\n\n        if (!$use_dn) {\n            $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n        } else {\n            $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n        }\n\n       //Perform the search\n        $filter = Sanitizer::unsanitize($filter);\n        $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n       //Get the result of the search as an array\n        $info = AuthLDAP::get_entries_clean($ds, $sr);\n       //Browse all the groups\n        $info_count = count($info);\n        for ($i = 0; $i < $info_count; $i++) {\n           //Get the cn of the group and add it to the list of groups\n            if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n                $listgroups[$i] = $info[$i][\"dn\"];\n            }\n        }\n\n       //Create an array with the list of groups of the user\n        $groups[0][$group_member_field] = $listgroups;\n       //Return the groups of the user\n        return $groups;\n    }\n\n\n    /**\n     * Function that tries to load the user information from IMAP.\n     *\n     * @param array  $mail_method  mail method description array\n     * @param string $name         login of the user\n     *\n     * @return boolean true if method is applicable, false otherwise\n     */\n    public function getFromIMAP(array $mail_method, $name)\n    {\n        global $DB;\n\n       // we prevent some delay..\n        if (empty($mail_method[\"host\"])) {\n            return false;\n        }\n\n       // some defaults...\n        $this->fields['password']  = \"\";\n       // Empty array to ensure than syncDynamicEmails will be done\n        $this->fields[\"_emails\"]   = [];\n        $email                     = '';\n        if (strpos($name, \"@\")) {\n            $email = $name;\n        } else {\n            $email = $name . \"@\" . $mail_method[\"host\"];\n        }\n        $this->fields[\"_emails\"][] = $email;\n\n        $this->fields['name']      = $name;\n       //Store date_sync\n        $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n       // force authtype as we retrieve this user by imap (we could have login with SSO)\n        $this->fields[\"authtype\"] = Auth::MAIL;\n\n        if (!$DB->isSlave()) {\n           //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n           //Process affectation rules :\n           //we don't care about the function's return because all the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n                $groups = $this->fields[\"_groups\"];\n            } else {\n                $groups = [];\n            }\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n                'type'        => Auth::MAIL,\n                'mail_server' => $mail_method[\"id\"],\n                'login'       => $name,\n                'email'       => $email\n            ]);\n            $this->fields['_ruleright_process'] = true;\n        }\n        return true;\n    }\n\n\n    /**\n     * Function that tries to load the user information from the SSO server.\n     *\n     * @since 0.84\n     *\n     * @return boolean true if method is applicable, false otherwise\n     */\n    public function getFromSSO()\n    {\n        global $DB, $CFG_GLPI;\n\n        $a_field = [];\n        foreach ($CFG_GLPI as $key => $value) {\n            if (\n                !is_array($value) && !empty($value)\n                && strstr($key, \"_ssofield\")\n            ) {\n                $key = str_replace('_ssofield', '', $key);\n                $a_field[$key] = $value;\n            }\n        }\n\n        if (count($a_field) == 0) {\n            return true;\n        }\n        $this->fields['_ruleright_process'] = true;\n        foreach ($a_field as $field => $value) {\n            if (\n                !isset($_SERVER[$value])\n                || empty($_SERVER[$value])\n            ) {\n                switch ($field) {\n                    case \"title\":\n                        $this->fields['usertitles_id'] = 0;\n                        break;\n\n                    case \"category\":\n                        $this->fields['usercategories_id'] = 0;\n                        break;\n\n                    default:\n                        $this->fields[$field] = \"\";\n                }\n            } else {\n                switch ($field) {\n                    case \"email1\":\n                    case \"email2\":\n                    case \"email3\":\n                    case \"email4\":\n                        // Manage multivaluable fields\n                        if (!preg_match('/count/', $_SERVER[$value])) {\n                            $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                        break;\n\n                    case \"language\":\n                        $language = Config::getLanguage($_SERVER[$value]);\n                        if ($language != '') {\n                            $this->fields[$field] = $language;\n                        }\n                        break;\n\n                    case \"title\":\n                        $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                        break;\n\n                    case \"category\":\n                        $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                        break;\n\n                    default:\n                        $this->fields[$field] = $_SERVER[$value];\n                        break;\n                }\n            }\n        }\n       ///Only process rules if working on the master database\n        if (!$DB->isSlave()) {\n           //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields), [\n                'type'   => Auth::EXTERNAL,\n                'email'  => $this->fields[\"_emails\"],\n                'login'  => $this->fields[\"name\"]\n            ]);\n\n           //If rule  action is ignore import\n            if (isset($this->fields[\"_stop_import\"])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Blank passwords field of a user in the DB.\n     * Needed for external auth users.\n     *\n     * @return void\n     */\n    public function blankPassword()\n    {\n        global $DB;\n\n        if (!empty($this->fields[\"name\"])) {\n            $DB->update(\n                $this->getTable(),\n                [\n                    'password' => ''\n                ],\n                [\n                    'name' => $this->fields['name']\n                ]\n            );\n        }\n    }\n\n\n    /**\n     * Print a good title for user pages.\n     *\n     * @return void\n     */\n    public function title()\n    {\n        global $CFG_GLPI;\n\n        $buttons = [];\n        $title   = self::getTypeName(Session::getPluralNumber());\n\n        if (static::canCreate()) {\n            $buttons[\"user.form.php\"] = \"<i class='fas fa-user-plus fa-lg me-2'></i>\" . __('Add user...');\n            $title = __(\"Actions\");\n\n            if (\n                Auth::useAuthExt()\n                && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n            ) {\n                // This requires write access because don't use entity config.\n                $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = \"<i class='fas fa-user-cog fa-lg me-2'></i>\" . __('... From an external source');\n            }\n        }\n        if (\n            Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n            && (static::canCreate() || static::canUpdate())\n        ) {\n            if (AuthLDAP::useAuthLdap()) {\n                $buttons[\"ldap.php\"] = \"<i class='fas fa-cog fa-lg me-2'></i>\" . __('LDAP directory link');\n            }\n        }\n        Html::displayTitle(\n            \"\",\n            self::getTypeName(Session::getPluralNumber()),\n            $title,\n            $buttons\n        );\n    }\n\n\n    /**\n     * Check if current user have more right than the specified one.\n     *\n     * @param integer $ID ID of the user\n     *\n     * @return boolean\n     */\n    public function currentUserHaveMoreRightThan($ID)\n    {\n\n        $user_prof = Profile_User::getUserProfiles($ID);\n        return Profile::currentUserHaveMoreRightThan($user_prof);\n    }\n\n    /**\n     * Print the user form.\n     *\n     * @param integer $ID    ID of the user\n     * @param array $options Options\n     *     - string   target        Form target\n     *     - boolean  withtemplate  Template or basic item\n     *\n     * @return boolean true if user found, false otherwise\n     */\n    public function showForm($ID, array $options = [])\n    {\n        global $CFG_GLPI, $DB;\n\n       // Affiche un formulaire User\n        if (($ID != Session::getLoginUserID()) && !self::canView()) {\n            return false;\n        }\n\n        $config = Config::getConfigurationValues('core');\n        if ($this->getID() > 0 && $config['system_user'] == $this->getID()) {\n            return $this->showSystemUserForm($ID, $options);\n        }\n\n        $this->initForm($ID, $options);\n\n        $ismyself = $ID == Session::getLoginUserID();\n        $higherrights = $this->currentUserHaveMoreRightThan($ID);\n        if ($ID) {\n            $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n        } else {\n           // can edit on creation form\n            $caneditpassword = true;\n        }\n\n        $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n        $formtitle = $this->getTypeName(1);\n\n        $header_toolbar = [];\n        if ($ID > 0) {\n            $vcard_lbl = __s('Download user VCard');\n            $vcard_url = User::getFormURLWithID($ID) . \"&amp;getvcard=1\";\n            $vcard_btn = <<<HTML\n            <a href=\"{$vcard_url}\" target=\"_blank\"\n                     class=\"btn btn-icon btn-sm btn-ghost-secondary\"\n                     title=\"{$vcard_lbl}\"\n                     data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n               <i class=\"far fa-address-card fa-lg\"></i>\n            </a>\nHTML;\n            $header_toolbar[] = $vcard_btn;\n\n            if (Session::canImpersonate($ID)) {\n                $impersonate_lbl = __s('Impersonate');\n                $impersonate_btn = <<<HTML\n               <button type=\"button\" name=\"impersonate\" value=\"1\"\n                       class=\"btn btn-icon btn-sm btn-ghost-secondary btn-impersonate\"\n                       title=\"{$impersonate_lbl}\"\n                       data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n                  <i class=\"fas fa-user-secret fa-lg\"></i>\n               </button>\nHTML;\n\n               // \"impersonate\" button type is set to \"button\" on form display to prevent it to be used\n               // by default (as it is the first found in current form) when pressing \"enter\" key.\n               // When clicking it, switch to \"submit\" type to make it submit current user form.\n                $impersonate_js = <<<JAVASCRIPT\n               (function($) {\n                  $('button[type=\"button\"][name=\"impersonate\"]').click(\n                     function () {\n                        $(this).attr('type', 'submit');\n                     }\n                  );\n               })(jQuery);\nJAVASCRIPT;\n                $header_toolbar[] = $impersonate_btn . Html::scriptBlock($impersonate_js);\n            }\n        }\n\n        $options['formtitle']      = $formtitle;\n        $options['formoptions']    = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n        $options['header_toolbar'] = $header_toolbar;\n        $this->showFormHeader($options);\n        $rand = mt_rand();\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n        if (\n            $this->fields[\"name\"] == \"\" ||\n            !empty($this->fields[\"password\"]) ||\n            ($this->fields[\"authtype\"] == Auth::DB_GLPI)\n        ) {\n           //display login field for new records, or if this is not external auth\n            echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\" class='form-control'></td>\";\n        } else {\n            echo \"<td class='b'>\" . $this->fields[\"name\"];\n            echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\" class='form-control'></td>\";\n        }\n\n        if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='7'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n            echo \"<td rowspan='7'>\";\n            echo self::getPictureForUser($ID);\n\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n            echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\" . __('Clear');\n            echo \"</td>\";\n        } else {\n            echo \"<td rowspan='7'></td>\";\n            echo \"<td rowspan='7'></td>\";\n        }\n        echo \"</tr>\";\n\n       //If it's an external auth, check if the sync_field must be displayed\n        if (\n            $extauth\n            && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])\n        ) {\n            $syncrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n            if (\n                self::canUpdate()\n                && (!$extauth || empty($ID))\n            ) {\n                echo Html::input(\n                    'sync_field',\n                    [\n                        'value' => $this->fields['sync_field'],\n                        'id'    => \"textfield_sync_field$syncrand\",\n                    ]\n                );\n            } else {\n                if (empty($this->fields['sync_field'])) {\n                    echo Dropdown::EMPTY_VALUE;\n                } else {\n                    echo $this->fields['sync_field'];\n                }\n            }\n            echo \"</td></tr>\";\n        } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n        }\n\n        $surnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n        echo Html::input(\n            'realname',\n            [\n                'value' => $this->fields['realname'],\n                'id'    => \"textfield_realname$surnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        $firstnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n        echo Html::input(\n            'firstname',\n            [\n                'value' => $this->fields['firstname'],\n                'id'    => \"textfield_firstname$firstnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n       //do some rights verification\n        if (\n            self::canUpdate()\n            && (!$extauth || empty($ID))\n            && $caneditpassword\n        ) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\" class='form-control'></td>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='new-password' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            if ($CFG_GLPI[\"use_password_security\"]) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td rowspan='2'>\";\n                echo __('Password security policy');\n                echo \"</td>\";\n                echo \"<td rowspan='2'>\";\n                Config::displayPasswordSecurityChecks();\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n        } else {\n            echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n        }\n\n        if ($DB->use_timezones || Session::haveRight(\"config\", READ)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='timezone'>\" . __('Time zone') . \"</label></td><td>\";\n            if ($DB->use_timezones) {\n                $timezones = $DB->getTimezones();\n                Dropdown::showFromArray(\n                    'timezone',\n                    $timezones,\n                    [\n                        'value'                 => $this->fields[\"timezone\"],\n                        'display_emptychoice'   => true,\n                        'emptylabel'            => __('Use server configuration')\n                    ]\n                );\n            } else if (Session::haveRight(\"config\", READ)) {\n               // Display a warning but only if user is more or less an admin\n                echo __('Timezone usage has not been activated.')\n                . ' '\n                . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n            }\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        if (!GLPI_DEMO_MODE) {\n            $activerand = mt_rand();\n            echo \"<td><label for='dropdown_is_active$activerand'>\" . __('Active') . \"</label></td><td>\";\n            Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'></td>\";\n        }\n        echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n        UserEmail::showAddEmailButton($this);\n        echo \"</td><td>\";\n        UserEmail::showForUser($this);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        if (!GLPI_DEMO_MODE) {\n            $sincerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='showdate$sincerand'>\" . __('Valid since') . \"</label></td><td>\";\n            Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                'rand'        => $sincerand,\n                'maybeempty'  => true\n            ]);\n            echo \"</td>\";\n\n            $untilrand = mt_rand();\n            echo \"<td><label for='showdate$untilrand'>\" . __('Valid until') . \"</label></td><td>\";\n            Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                'rand'        => $untilrand,\n                'maybeempty'  => true\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        $phonerand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n        echo Html::input(\n            'phone',\n            [\n                'value' => $this->fields['phone'],\n                'id'    => \"textfield_phone$phonerand\",\n            ]\n        );\n        echo \"</td>\";\n       //Authentications information : auth method used and server used\n       //don't display is creation of a new user'\n        if (!empty($ID)) {\n            if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n                echo \"<td>\" . __('Authentication') . \"</td><td>\";\n                echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n                if (!empty($this->fields[\"date_sync\"])) {\n                    //TRANS: %s is the date of last sync\n                    echo '<br>' . sprintf(\n                        __('Last synchronization on %s'),\n                        Html::convDateTime($this->fields[\"date_sync\"])\n                    );\n                }\n                if (!empty($this->fields[\"user_dn\"])) {\n                  //TRANS: %s is the user dn\n                    echo '<br>' . sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n                }\n                if ($this->fields['is_deleted_ldap']) {\n                    echo '<br>' . __('User missing in LDAP directory');\n                }\n\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n        } else {\n            echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n        }\n\n        echo \"</tr>\";\n\n        $mobilerand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n        echo Html::input(\n            'mobile',\n            [\n                'value' => $this->fields['mobile'],\n                'id'    => \"textfield_mobile$mobilerand\",\n            ]\n        );\n        echo \"</td>\";\n        $catrand = mt_rand();\n        echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . _n('Category', 'Categories', 1) . \"</label></td><td>\";\n        UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n        echo \"</td></tr>\";\n\n        $phone2rand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n        echo Html::input(\n            'phone2',\n            [\n                'value' => $this->fields['phone2'],\n                'id'    => \"textfield_phone2$phone2rand\",\n            ]\n        );\n        echo \"</td>\";\n        echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n        echo \"<td class='center middle' rowspan='4'>\";\n        echo \"<textarea class='form-control' id='comment' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        $admnumrand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n        echo Html::input(\n            'registration_number',\n            [\n                'value' => $this->fields['registration_number'],\n                'id'    => \"textfield_registration_number$admnumrand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        $titlerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n        UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        if (!empty($ID)) {\n            $locrand = mt_rand();\n            echo \"<td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            if (count($entities) <= 0) {\n                $entities = -1;\n            }\n            Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                'rand'   => $locrand,\n                'entity' => $entities\n            ]);\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        if (empty($ID)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<th colspan='2'>\" . _n('Authorization', 'Authorizations', 1) . \"</th>\";\n            $recurrand = mt_rand();\n            echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n            echo \"</td></tr>\";\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  Profile::getTypeName(1) . \"</label></td><td>\";\n            Profile::dropdownUnder(['name'  => '_profiles_id',\n                'rand'  => $profilerand,\n                'value' => Profile::getDefault()\n            ]);\n\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  Entity::getTypeName(1) . \"</label></td><td>\";\n            Entity::dropdown(['name'                => '_entities_id',\n                'display_emptychoice' => false,\n                'rand'                => $entrand,\n                'entity'              => $_SESSION['glpiactiveentities']\n            ]);\n            echo \"</td></tr>\";\n        } else {\n            if ($higherrights || $ismyself) {\n                $profilerand = mt_rand();\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n                $options   = Dropdown::getDropdownArrayNames(\n                    'glpi_profiles',\n                    Profile_User::getUserProfiles($this->fields['id'])\n                );\n\n                Dropdown::showFromArray(\n                    \"profiles_id\",\n                    $options,\n                    ['value'               => $this->fields[\"profiles_id\"],\n                        'rand'                => $profilerand,\n                        'display_emptychoice' => true\n                    ]\n                );\n            }\n            if ($higherrights) {\n                $entrand = mt_rand();\n                echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n                $entities = $this->getEntities();\n                Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                    'rand'   => $entrand,\n                    'entity' => $entities\n                ]);\n                echo \"</td></tr>\";\n\n                $grouprand = mt_rand();\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n                $options = [];\n                foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n                     $options[$group['id']] = $group['completename'];\n                }\n\n                Dropdown::showFromArray(\n                    \"groups_id\",\n                    $options,\n                    ['value'               => $this->fields[\"groups_id\"],\n                        'rand'                => $grouprand,\n                        'display_emptychoice' => true\n                    ]\n                );\n\n                echo \"</td>\";\n                $userrand = mt_rand();\n                echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n                User::dropdown(['name'   => 'users_id_supervisor',\n                    'value'  => $this->fields[\"users_id_supervisor\"],\n                    'rand'   => $userrand,\n                    'entity' => $_SESSION[\"glpiactive_entity\"],\n                    'right'  => 'all'\n                ]);\n                echo \"</td></tr>\";\n            }\n\n            if (\n                Entity::getAnonymizeConfig() == Entity::ANONYMIZE_USE_NICKNAME\n                && Session::getCurrentInterface() == \"central\"\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='nickname$rand'> \" . __('Nickname') . \"</label></td>\";\n                echo \"<td>\";\n                if ($this->can($ID, UPDATE)) {\n                    echo Html::input('nickname', [\n                        'value' => $this->fields['nickname']\n                    ]);\n                } else {\n                    echo $this->fields['nickname'];\n                }\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            if ($this->can($ID, UPDATE)) {\n                echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Remote access keys') . \"</th></tr>\";\n\n                echo \"<tr class='tab_bg_1'><td>\";\n                echo __(\"Personal token\");\n                echo \"</td><td colspan='2'>\";\n\n                if (!empty($this->fields[\"personal_token\"])) {\n                    echo \"<div class='copy_to_clipboard_wrapper'>\";\n                    echo Html::input('_personal_token', [\n                        'value'    => $this->fields[\"personal_token\"],\n                        'style'    => 'width:90%'\n                    ]);\n                    echo \"</div>\";\n                    echo \"(\" . sprintf(\n                        __('generated on %s'),\n                        Html::convDateTime($this->fields[\"personal_token_date\"])\n                    ) . \")\";\n                }\n                echo \"</td><td>\";\n                Html::showCheckbox(['name'  => '_reset_personal_token',\n                    'title' => __('Regenerate')\n                ]);\n                echo \"&nbsp;&nbsp;\" . __('Regenerate');\n                echo \"</td></tr>\";\n\n                echo \"<tr class='tab_bg_1'><td>\";\n                echo __(\"API token\");\n                echo \"</td><td colspan='2'>\";\n                if (!empty($this->fields[\"api_token\"])) {\n                     echo \"<div class='copy_to_clipboard_wrapper'>\";\n                     echo Html::input('_api_token', [\n                         'value'    => $this->fields[\"api_token\"],\n                         'style'    => 'width:90%'\n                     ]);\n                     echo \"</div>\";\n                     echo \"(\" . sprintf(\n                         __('generated on %s'),\n                         Html::convDateTime($this->fields[\"api_token_date\"])\n                     ) . \")\";\n                }\n                echo \"</td><td>\";\n                Html::showCheckbox(['name'  => '_reset_api_token',\n                    'title' => __('Regenerate')\n                ]);\n                echo \"&nbsp;&nbsp;\" . __('Regenerate');\n                echo \"</td></tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td colspan='2' class='center'>\";\n            if ($this->fields[\"last_login\"]) {\n                printf(__('Last login on %s'), Html::convDateTime($this->fields[\"last_login\"]));\n            }\n            echo \"</td><td colspan='2'class='center'>\";\n\n            echo \"</td></tr>\";\n        }\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Print the user preference form.\n     *\n     * @param string  $target Form target\n     * @param integer $ID     ID of the user\n     *\n     * @return boolean true if user found, false otherwise\n     */\n    public function showMyForm($target, $ID)\n    {\n        global $CFG_GLPI, $DB;\n\n       // Affiche un formulaire User\n        if (\n            ($ID != Session::getLoginUserID())\n            && !$this->currentUserHaveMoreRightThan($ID)\n        ) {\n            return false;\n        }\n        if ($this->getFromDB($ID)) {\n            $rand     = mt_rand();\n            $authtype = $this->getAuthMethodsByID();\n\n            $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n            echo \"<div class='center'>\";\n            echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\" . $target . \"' autocomplete='off'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='4'>\" . sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n            echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n            echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n            echo \"</th></tr>\";\n\n            $surnamerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['realname_field'])\n                && !empty($authtype['realname_field'])\n            ) {\n                echo $this->fields[\"realname\"];\n            } else {\n                echo Html::input(\n                    'realname',\n                    [\n                        'value' => $this->fields['realname'],\n                        'id'    => \"textfield_realname$surnamerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            if (!empty($this->fields[\"name\"])) {\n                echo \"<td rowspan='7'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n                echo \"<td rowspan='7'>\";\n                echo self::getPictureForUser($ID);\n\n                echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n                echo \"&nbsp;\";\n                Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n                echo \"&nbsp;\" . __('Clear');\n\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            $firstnamerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n            if (\n                $extauth\n                && isset($authtype['firstname_field'])\n                && !empty($authtype['firstname_field'])\n            ) {\n                echo $this->fields[\"firstname\"];\n            } else {\n                echo Html::input(\n                    'firstname',\n                    [\n                        'value' => $this->fields['firstname'],\n                        'id'    => \"textfield_firstname$firstnamerand\",\n                    ]\n                );\n            }\n            echo \"</td></tr>\";\n\n            if (\n                $extauth\n                && $this->fields['auths_id']\n                && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])\n            ) {\n                echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n                if (empty($this->fields['sync_field'])) {\n                    echo Dropdown::EMPTY_VALUE;\n                } else {\n                    echo $this->fields['sync_field'];\n                }\n                echo \"</td></tr>\";\n            } else {\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if (!GLPI_DEMO_MODE) {\n                $langrand = mt_rand();\n                echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n               // Language is stored as null in DB if value is same as the global config.\n                $language = $this->fields[\"language\"];\n                if (null === $this->fields[\"language\"]) {\n                    $language = $CFG_GLPI['language'];\n                }\n                Dropdown::showLanguages(\n                    \"language\",\n                    [\n                        'rand'  => $langrand,\n                        'value' => $language,\n                    ]\n                );\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n            echo \"</tr>\";\n\n           //do some rights verification\n            if (\n                !$extauth\n                && Session::haveRight(\"password_update\", \"1\")\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n                echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\" class='form-control'>\";\n                echo \"</td>\";\n                echo \"</tr>\";\n\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n                echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='new-password' class='form-control'>\";\n                echo \"</td></tr>\";\n\n                if ($CFG_GLPI[\"use_password_security\"]) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    echo \"<td rowspan='2'>\";\n                    echo __('Password security policy');\n                    echo \"</td>\";\n                    echo \"<td rowspan='2'>\";\n                    Config::displayPasswordSecurityChecks();\n                    echo \"</td>\";\n                    echo \"</tr>\";\n                }\n            } else {\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            }\n\n            if ($DB->use_timezones || Session::haveRight(\"config\", READ)) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='timezone'>\" . __('Time zone') . \"</label></td><td>\";\n                if ($DB->use_timezones) {\n                    $timezones = $DB->getTimezones();\n                    Dropdown::showFromArray(\n                        'timezone',\n                        $timezones,\n                        [\n                            'value'                 => $this->fields[\"timezone\"],\n                            'display_emptychoice'   => true,\n                            'emptylabel'            => __('Use server configuration')\n                        ]\n                    );\n                } else if (Session::haveRight(\"config\", READ)) {\n                   // Display a warning but only if user is more or less an admin\n                    echo __('Timezone usage has not been activated.')\n                    . ' '\n                    . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n                }\n                echo \"</td>\";\n                if (\n                    $extauth\n                    || !Session::haveRight(\"password_update\", \"1\")\n                ) {\n                    echo \"<td colspan='2'></td>\";\n                }\n                echo \"</tr>\";\n            }\n\n            $phonerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['phone_field']) && !empty($authtype['phone_field'])\n            ) {\n                echo $this->fields[\"phone\"];\n            } else {\n                echo Html::input(\n                    'phone',\n                    [\n                        'value' => $this->fields['phone'],\n                        'id'    => \"textfield_phone$phonerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n            echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n            UserEmail::showAddEmailButton($this);\n            echo \"</td><td>\";\n            UserEmail::showForUser($this);\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            $mobilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])\n            ) {\n                echo $this->fields[\"mobile\"];\n            } else {\n                echo Html::input(\n                    'mobile',\n                    [\n                        'value' => $this->fields['mobile'],\n                        'id'    => \"textfield_mobile$mobilerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            if (count($_SESSION['glpiprofiles']) > 1) {\n                $profilerand = mt_rand();\n                echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n                $options = Dropdown::getDropdownArrayNames(\n                    'glpi_profiles',\n                    Profile_User::getUserProfiles($this->fields['id'])\n                );\n                Dropdown::showFromArray(\n                    \"profiles_id\",\n                    $options,\n                    ['value'               => $this->fields[\"profiles_id\"],\n                        'rand'                => $profilerand,\n                        'display_emptychoice' => true\n                    ]\n                );\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n            echo \"</tr>\";\n\n            $phone2rand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])\n            ) {\n                echo $this->fields[\"phone2\"];\n            } else {\n                echo Html::input(\n                    'phone2',\n                    [\n                        'value' => $this->fields['phone2'],\n                        'id'    => \"textfield_phone2$phone2rand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            $entities = $this->getEntities();\n            if (\n                !GLPI_DEMO_MODE\n                && (count($_SESSION['glpiactiveentities']) > 1)\n            ) {\n                $entrand = mt_rand();\n                echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n                Entity::dropdown(['value'  => $this->fields['entities_id'],\n                    'rand'   => $entrand,\n                    'entity' => $entities\n                ]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            $admnumrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n            if (\n                $extauth\n                && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])\n            ) {\n                echo $this->fields[\"registration_number\"];\n            } else {\n                echo Html::input(\n                    'registration_number',\n                    [\n                        'value' => $this->fields['registration_number'],\n                        'id'    => \"textfield_registration_number$admnumrand\",\n                    ]\n                );\n            }\n            echo \"</td><td colspan='2'></td></tr>\";\n\n            $locrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n            Location::dropdown(['value'  => $this->fields['locations_id'],\n                'rand'   => $locrand,\n                'entity' => $entities\n            ]);\n\n            if (Config::canUpdate()) {\n                $moderand = mt_rand();\n                echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n                $modes = [\n                    Session::NORMAL_MODE => __('Normal'),\n                    Session::DEBUG_MODE  => __('Debug'),\n                ];\n                Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            if (\n                Entity::getAnonymizeConfig() == Entity::ANONYMIZE_USE_NICKNAME\n                && Session::getCurrentInterface() == \"central\"\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='nickname$rand'> \" . __('Nickname') . \"</label></td>\";\n                echo \"<td>\";\n                echo Html::input('nickname', [\n                    'value' => $this->fields['nickname']\n                ]);\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Remote access keys') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n                echo \"<div class='copy_to_clipboard_wrapper'>\";\n                echo Html::input('_personal_token', [\n                    'value'    => $this->fields[\"personal_token\"],\n                    'style'    => 'width:90%'\n                ]);\n                echo \"</div>\";\n                echo \"(\" . sprintf(\n                    __('generated on %s'),\n                    Html::convDateTime($this->fields[\"personal_token_date\"])\n                ) . \")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                'title' => __('Regenerate')\n            ]);\n            echo \"&nbsp;&nbsp;\" . __('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n                echo \"<div class='copy_to_clipboard_wrapper'>\";\n                echo Html::input('_api_token', [\n                    'value'    => $this->fields[\"api_token\"],\n                    'style'    => 'width:90%'\n                ]);\n                 echo \"</div>\";\n                 echo \"(\" . sprintf(\n                     __('generated on %s'),\n                     Html::convDateTime($this->fields[\"api_token_date\"])\n                 ) . \")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                'title' => __('Regenerate')\n            ]);\n            echo \"&nbsp;&nbsp;\" . __('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n            echo \"<input type='submit' name='update' value=\\\"\" . _sx('button', 'Save') . \"\\\" class='btn btn-primary'>\";\n            echo \"</td></tr>\";\n\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get all the authentication method parameters for the current user.\n     *\n     * @return array\n     */\n    public function getAuthMethodsByID()\n    {\n        return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n    }\n\n\n    public function pre_updateInDB()\n    {\n        global $DB;\n\n        if (($key = array_search('name', $this->updates)) !== false) {\n           /// Check if user does not exists\n            $iterator = $DB->request([\n                'FROM'   => $this->getTable(),\n                'WHERE'  => [\n                    'name'   => $this->input['name'],\n                    'id'     => ['<>', $this->input['id']]\n                ]\n            ]);\n\n            if (count($iterator)) {\n                 //To display a message\n                 $this->fields['name'] = $this->oldvalues['name'];\n                 unset($this->updates[$key]);\n                 unset($this->oldvalues['name']);\n                 Session::addMessageAfterRedirect(\n                     __('Unable to update login. A user already exists.'),\n                     false,\n                     ERROR\n                 );\n            }\n\n            if (!Auth::isValidLogin(stripslashes($this->input['name']))) {\n                $this->fields['name'] = $this->oldvalues['name'];\n                unset($this->updates[$key]);\n                unset($this->oldvalues['name']);\n                Session::addMessageAfterRedirect(\n                    __('The login is not valid. Unable to update login.'),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // ## Security system except for login update:\n       //\n       // An **external** (ldap, mail) user without User::UPDATE right\n       // should not be able to update its own fields\n       // (for example, fields concerned by ldap synchronisation)\n       // except on login action (which triggers synchronisation).\n        if (\n            Session::getLoginUserID() === (int)$this->input['id']\n            && !Session::haveRight(\"user\", UPDATE)\n            && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")\n            && isset($this->fields[\"authtype\"])\n        ) {\n           // extauth ldap case\n            if (\n                $_SESSION[\"glpiextauth\"]\n                && ($this->fields[\"authtype\"] == Auth::LDAP\n                 || Auth::isAlternateAuth($this->fields[\"authtype\"]))\n            ) {\n                $authtype = Auth::getMethodsByID(\n                    $this->fields[\"authtype\"],\n                    $this->fields[\"auths_id\"]\n                );\n                if (count($authtype)) {\n                     $fields = AuthLDAP::getSyncFields($authtype);\n                    foreach ($fields as $key => $val) {\n                        if (\n                            !empty($val)\n                            && (($key2 = array_search($key, $this->updates)) !== false)\n                        ) {\n                            unset($this->updates[$key2]);\n                            unset($this->oldvalues[$key]);\n                        }\n                    }\n                }\n            }\n\n            if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n                unset($this->updates[$key]);\n                unset($this->oldvalues['is_active']);\n            }\n\n            if (($key = array_search(\"comment\", $this->updates)) !== false) {\n                unset($this->updates[$key]);\n                unset($this->oldvalues['comment']);\n            }\n        }\n    }\n\n    public function getSpecificMassiveActions($checkitem = null)\n    {\n\n        $isadmin = static::canUpdate();\n        $actions = parent::getSpecificMassiveActions($checkitem);\n        if ($isadmin) {\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'add']\n                                                         = \"<i class='fas fa-users'></i>\" .\n                                                           __('Associate to a group');\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'remove']\n                                                         = __('Dissociate from a group');\n            $actions['Profile_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'add']\n                                                         = \"<i class='fas fa-user-shield'></i>\" .\n                                                           __('Associate to a profile');\n            $actions['Profile_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'remove']\n                                                         = __('Dissociate from a profile');\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'change_group_user']\n                                                         = \"<i class='fas fa-users-cog'></i>\" .\n                                                           __(\"Move to group\");\n        }\n\n        if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n            $prefix                                    = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR;\n            $actions[$prefix . 'change_authtype']        = \"<i class='fas fa-user-cog'></i>\" .\n                                                      _x('button', 'Change the authentication method');\n            $actions[$prefix . 'force_user_ldap_update'] = \"<i class='fas fa-sync'></i>\" .\n                                                      __('Force synchronization');\n        }\n        return $actions;\n    }\n\n    public static function showMassiveActionsSubForm(MassiveAction $ma)\n    {\n        global $CFG_GLPI;\n\n        switch ($ma->getAction()) {\n            case 'change_authtype':\n                $rand             = Auth::dropdown(['name' => 'authtype']);\n                $paramsmassaction = ['authtype' => '__VALUE__'];\n                Ajax::updateItemOnSelectEvent(\n                    \"dropdown_authtype$rand\",\n                    \"show_massiveaction_field\",\n                    $CFG_GLPI[\"root_doc\"] .\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                    $paramsmassaction\n                );\n                echo \"<span id='show_massiveaction_field'><br><br>\";\n                echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']) . \"</span>\";\n                return true;\n        }\n        return parent::showMassiveActionsSubForm($ma);\n    }\n\n    public static function processMassiveActionsForOneItemtype(\n        MassiveAction $ma,\n        CommonDBTM $item,\n        array $ids\n    ) {\n\n        switch ($ma->getAction()) {\n            case 'force_user_ldap_update':\n                foreach ($ids as $id) {\n                    if ($item->can($id, UPDATE)) {\n                        if (\n                            ($item->fields[\"authtype\"] == Auth::LDAP)\n                            || ($item->fields[\"authtype\"] == Auth::EXTERNAL)\n                        ) {\n                            if (AuthLDAP::forceOneUserSynchronization($item, false, false)) {\n                                $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                            } else {\n                                $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                                $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                            }\n                        } else {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                            $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                        }\n                    } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                        $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    }\n                }\n                return;\n\n            case 'change_authtype':\n                $input = $ma->getInput();\n                if (\n                    !isset($input[\"authtype\"])\n                    || !isset($input[\"auths_id\"])\n                ) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n                    $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                    return;\n                }\n                if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n                    if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                        $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n                    } else {\n                        $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n                    }\n                } else {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                }\n                return;\n        }\n        parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n    }\n\n\n    public function rawSearchOptions()\n    {\n       // forcegroup by on name set force group by for all items\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Login'),\n            'datatype'           => 'itemlink',\n            'forcegroupby'       => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'massiveaction'      => false,\n            'datatype'           => 'number'\n        ];\n\n        $tab[] = [\n            'id'                 => '34',\n            'table'              => $this->getTable(),\n            'field'              => 'realname',\n            'name'               => __('Last name'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '9',\n            'table'              => $this->getTable(),\n            'field'              => 'firstname',\n            'name'               => __('First name'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => 'glpi_useremails',\n            'field'              => 'email',\n            'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n            'datatype'           => 'email',\n            'joinparams'         => [\n                'jointype'           => 'child'\n            ],\n            'forcegroupby'       => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '150',\n            'table'              => $this->getTable(),\n            'field'              => 'picture',\n            'name'               => _n('Picture', 'Pictures', 1),\n            'datatype'           => 'specific',\n            'nosearch'           => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '28',\n            'table'              => $this->getTable(),\n            'field'              => 'sync_field',\n            'name'               => __('Synchronization field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string',\n        ];\n\n        $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n        $tab[] = [\n            'id'                 => '8',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'phone',\n            'name'               => Phone::getTypeName(1),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '10',\n            'table'              => $this->getTable(),\n            'field'              => 'phone2',\n            'name'               => __('Phone 2'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '11',\n            'table'              => $this->getTable(),\n            'field'              => 'mobile',\n            'name'               => __('Mobile phone'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '13',\n            'table'              => 'glpi_groups',\n            'field'              => 'completename',\n            'name'               => Group::getTypeName(Session::getPluralNumber()),\n            'forcegroupby'       => true,\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_groups_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '14',\n            'table'              => $this->getTable(),\n            'field'              => 'last_login',\n            'name'               => __('Last login'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '15',\n            'table'              => $this->getTable(),\n            'field'              => 'authtype',\n            'name'               => __('Authentication'),\n            'massiveaction'      => false,\n            'datatype'           => 'specific',\n            'searchtype'         => 'equals',\n            'additionalfields'   => [\n                '0'                  => 'auths_id'\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '30',\n            'table'              => 'glpi_authldaps',\n            'field'              => 'name',\n            'linkfield'          => 'auths_id',\n            'name'               => __('LDAP directory for authentication'),\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'condition'          => ['REFTABLE.authtype' => Auth::LDAP]\n            ],\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '31',\n            'table'              => 'glpi_authmails',\n            'field'              => 'name',\n            'linkfield'          => 'auths_id',\n            'name'               => __('Email server for authentication'),\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'condition'          => ['REFTABLE.authtype' => Auth::MAIL]\n            ],\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '17',\n            'table'              => $this->getTable(),\n            'field'              => 'language',\n            'name'               => __('Language'),\n            'datatype'           => 'language',\n            'display_emptychoice' => true,\n            'emptylabel'         => 'Default value'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => 'glpi_profiles',\n            'field'              => 'name',\n            'name'               => sprintf(\n                __('%1$s (%2$s)'),\n                Profile::getTypeName(Session::getPluralNumber()),\n                Entity::getTypeName(1)\n            ),\n            'forcegroupby'       => true,\n            'massiveaction'      => false,\n            'datatype'           => 'dropdown',\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_profiles_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '21',\n            'table'              => $this->getTable(),\n            'field'              => 'user_dn',\n            'name'               => __('User DN'),\n            'massiveaction'      => false,\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '22',\n            'table'              => $this->getTable(),\n            'field'              => 'registration_number',\n            'name'               => __('Administrative number'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '23',\n            'table'              => $this->getTable(),\n            'field'              => 'date_sync',\n            'datatype'           => 'datetime',\n            'name'               => __('Last synchronization'),\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '24',\n            'table'              => $this->getTable(),\n            'field'              => 'is_deleted_ldap',\n            'name'               => __('Deleted user in LDAP directory'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '80',\n            'table'              => 'glpi_entities',\n            'linkfield'          => 'entities_id',\n            'field'              => 'completename',\n            'name'               => sprintf(\n                __('%1$s (%2$s)'),\n                Entity::getTypeName(Session::getPluralNumber()),\n                Profile::getTypeName(1)\n            ),\n            'forcegroupby'       => true,\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_profiles_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '81',\n            'table'              => 'glpi_usertitles',\n            'field'              => 'name',\n            'name'               => __('Title'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '82',\n            'table'              => 'glpi_usercategories',\n            'field'              => 'name',\n            'name'               => _n('Category', 'Categories', 1),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '79',\n            'table'              => 'glpi_profiles',\n            'field'              => 'name',\n            'name'               => __('Default profile'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '77',\n            'table'              => 'glpi_entities',\n            'field'              => 'name',\n            'massiveaction'      => true,\n            'name'               => __('Default entity'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '62',\n            'table'              => $this->getTable(),\n            'field'              => 'begin_date',\n            'name'               => __('Begin date'),\n            'datatype'           => 'datetime'\n        ];\n\n        $tab[] = [\n            'id'                 => '63',\n            'table'              => $this->getTable(),\n            'field'              => 'end_date',\n            'name'               => __('End date'),\n            'datatype'           => 'datetime'\n        ];\n\n        $tab[] = [\n            'id'                 => '60',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of tickets as requester'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_tickets_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child',\n                        'condition'          => ['NEWTABLE.type' => CommonITILActor::REQUESTER]\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '61',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of written tickets'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'child',\n                'linkfield'          => 'users_id_recipient'\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '64',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of assigned tickets'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_tickets_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child',\n                        'condition'          => ['NEWTABLE.type' => CommonITILActor::ASSIGN]\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '99',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'linkfield'          => 'users_id_supervisor',\n            'name'               => __('Responsible'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'authtype':\n                $auths_id = 0;\n                if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n                    $auths_id = $values['auths_id'];\n                }\n                return Auth::getMethodName($values[$field], $auths_id);\n            case 'picture':\n                if (isset($options['html']) && $options['html']) {\n                    return Html::image(\n                        self::getThumbnailURLForPicture($values['picture']),\n                        ['class' => 'user_picture_small', 'alt' => _n('Picture', 'Pictures', 1)]\n                    );\n                }\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n        switch ($field) {\n            case 'authtype':\n                $options['name'] = $name;\n                $options['value'] = $values[$field];\n                return Auth::dropdown($options);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    /**\n     * Get all groups where the current user have delegating.\n     *\n     * @since 0.83\n     *\n     * @param integer|string $entities_id ID of the entity to restrict\n     *\n     * @return integer[]\n     */\n    public static function getDelegateGroupsForUser($entities_id = '')\n    {\n        global $DB;\n\n        $iterator = $DB->request([\n            'SELECT'          => 'glpi_groups_users.groups_id',\n            'DISTINCT'        => true,\n            'FROM'            => 'glpi_groups_users',\n            'INNER JOIN'      => [\n                'glpi_groups'  => [\n                    'FKEY'   => [\n                        'glpi_groups_users'  => 'groups_id',\n                        'glpi_groups'        => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'           => [\n                'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n                'glpi_groups_users.is_userdelegate' => 1\n            ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n        ]);\n\n        $groups = [];\n        foreach ($iterator as $data) {\n            $groups[$data['groups_id']] = $data['groups_id'];\n        }\n        return $groups;\n    }\n\n\n    /**\n     * Execute the query to select box with all glpi users where select key = name\n     *\n     * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n     *\n     * @param boolean         $count            true if execute an count(*) (true by default)\n     * @param string|string[] $right            limit user who have specific right (default 'all')\n     * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n     * @param integer         $value            default value (default 0)\n     * @param integer[]       $used             Already used items ID: not to display in dropdown\n     * @param string          $search           pattern (default '')\n     * @param integer         $start            start LIMIT value (default 0)\n     * @param integer         $limit            limit LIMIT value (default -1 no limit)\n     * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n     *\n     * @return mysqli_result|boolean\n     */\n    public static function getSqlSearchResult(\n        $count = true,\n        $right = \"all\",\n        $entity_restrict = -1,\n        $value = 0,\n        array $used = [],\n        $search = '',\n        $start = 0,\n        $limit = -1,\n        $inactive_deleted = 0,\n        $with_no_right = 0\n    ) {\n        global $DB;\n\n\n\n       // No entity define : use active ones\n        if ($entity_restrict < 0) {\n            $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n        }\n\n        $joinprofile      = false;\n        $joinprofileright = false;\n        $WHERE = [];\n\n\n        switch ($right) {\n            case \"interface\":\n                $joinprofile = true;\n                $WHERE = [\n                    'glpi_profiles.interface' => 'central'\n                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n                break;\n\n            case \"id\":\n                $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n                break;\n\n            case \"delegate\":\n                $groups = self::getDelegateGroupsForUser($entity_restrict);\n                $users  = [];\n                if (count($groups)) {\n                    $iterator = $DB->request([\n                        'SELECT'    => 'glpi_users.id',\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_users'   => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'users_id',\n                                    'glpi_users'         => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.groups_id' => $groups,\n                            'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                        ]\n                    ]);\n                    foreach ($iterator as $data) {\n                           $users[$data[\"id\"]] = $data[\"id\"];\n                    }\n                }\n               // Add me to users list for central\n                if (Session::getCurrentInterface() == 'central') {\n                    $users[Session::getLoginUserID()] = Session::getLoginUserID();\n                }\n\n                if (count($users)) {\n                    $WHERE = ['glpi_users.id' => $users];\n                }\n                break;\n\n            case \"groups\":\n                $groups = [];\n                if (isset($_SESSION['glpigroups'])) {\n                    $groups = $_SESSION['glpigroups'];\n                }\n                $users  = [];\n                if (count($groups)) {\n                    $iterator = $DB->request([\n                        'SELECT'    => 'glpi_users.id',\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_users'   => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'users_id',\n                                    'glpi_users'         => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.groups_id' => $groups,\n                            'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                        ]\n                    ]);\n                    foreach ($iterator as $data) {\n                          $users[$data[\"id\"]] = $data[\"id\"];\n                    }\n                }\n               // Add me to users list for central\n                if (Session::getCurrentInterface() == 'central') {\n                    $users[Session::getLoginUserID()] = Session::getLoginUserID();\n                }\n\n                if (count($users)) {\n                    $WHERE = ['glpi_users.id' => $users];\n                }\n\n                break;\n\n            case \"all\":\n                $WHERE = [\n                    'glpi_users.id' => ['>', 0],\n                    'OR' => getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                ];\n\n                if ($with_no_right) {\n                    $WHERE['OR'][] = ['glpi_profiles_users.entities_id' => null];\n                }\n                break;\n\n            default:\n                $joinprofile = true;\n                $joinprofileright = true;\n                if (!is_array($right)) {\n                    $right = [$right];\n                }\n                $forcecentral = true;\n\n                $ORWHERE = [];\n                foreach ($right as $r) {\n                    switch ($r) {\n                        case 'own_ticket':\n                             $ORWHERE[] = [\n                                 [\n                                     'glpi_profilerights.name'     => 'ticket',\n                                     'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                                 ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                             ];\n                            break;\n\n                        case 'create_ticket_validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'  => 'ticketvalidation',\n                                    'OR'                       => [\n                                        ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST]],\n                                        ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]]\n                                    ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate_request':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'ticketvalidation',\n                                    'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate_incident':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'ticketvalidation',\n                                    'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'changevalidation',\n                                    'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'create_validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'changevalidation',\n                                    'glpi_profilerights.rights'   => ['&', CREATE]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'see_project':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'project',\n                                    'glpi_profilerights.rights'   => ['&', Project::READMY]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'faq':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'knowbase',\n                                    'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        default:\n                           // Check read or active for rights\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => $r,\n                                    'glpi_profilerights.rights'   => [\n                                        '&',\n                                        READ | CREATE | UPDATE | DELETE | PURGE\n                                    ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                    }\n                    if (in_array($r, Profile::$helpdesk_rights)) {\n                        $forcecentral = false;\n                    }\n                }\n\n                if (count($ORWHERE)) {\n                    $WHERE[] = ['OR' => $ORWHERE];\n                }\n\n                if ($forcecentral) {\n                    $WHERE['glpi_profiles.interface'] = 'central';\n                }\n        }\n\n        if (!$inactive_deleted) {\n            $WHERE = array_merge(\n                $WHERE,\n                [\n                    'glpi_users.is_deleted' => 0,\n                    'glpi_users.is_active'  => 1,\n                    [\n                        'OR' => [\n                            ['glpi_users.begin_date' => null],\n                            ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                        ]\n                    ],\n                    [\n                        'OR' => [\n                            ['glpi_users.end_date' => null],\n                            ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                        ]\n                    ]\n\n                ]\n            );\n        }\n\n        if (\n            (is_numeric($value) && $value)\n            || count($used)\n        ) {\n            $WHERE[] = [\n                'NOT' => [\n                    'glpi_users.id' => $used\n                ]\n            ];\n        }\n\n        // remove helpdesk user\n        $config = Config::getConfigurationValues('core');\n        $WHERE[] = [\n            'NOT' => [\n                'glpi_users.id' => $config['system_user']\n            ]\n        ];\n\n        $criteria = [\n            'FROM'            => 'glpi_users',\n            'LEFT JOIN'       => [\n                'glpi_useremails'       => [\n                    'ON' => [\n                        'glpi_useremails' => 'users_id',\n                        'glpi_users'      => 'id',\n                        ['AND' => ['glpi_useremails.is_default' => 1]]\n                    ]\n                ],\n                'glpi_profiles_users'   => [\n                    'ON' => [\n                        'glpi_profiles_users'   => 'users_id',\n                        'glpi_users'            => 'id'\n                    ]\n                ]\n            ]\n        ];\n        if ($count) {\n            $criteria['SELECT'] = ['COUNT' => 'glpi_users.id AS CPT'];\n            $criteria['DISTINCT'] = true;\n        } else {\n            $criteria['SELECT'] = ['glpi_users.*', 'glpi_useremails.email AS default_email'];\n            $criteria['DISTINCT'] = true;\n        }\n\n        if ($joinprofile) {\n            $criteria['LEFT JOIN']['glpi_profiles'] = [\n                'ON' => [\n                    'glpi_profiles_users'   => 'profiles_id',\n                    'glpi_profiles'         => 'id'\n                ]\n            ];\n            if ($joinprofileright) {\n                $criteria['LEFT JOIN']['glpi_profilerights'] = [\n                    'ON' => [\n                        'glpi_profilerights' => 'profiles_id',\n                        'glpi_profiles'      => 'id'\n                    ]\n                ];\n            }\n        }\n\n        if (!$count) {\n            if (strlen((string)$search) > 0) {\n                $txt_search = Search::makeTextSearchValue($search);\n\n                $firstname_field = $DB->quoteName(self::getTableField('firstname'));\n                $realname_field = $DB->quoteName(self::getTableField('realname'));\n                $fields = $_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE\n                ? [$firstname_field, $realname_field]\n                : [$realname_field, $firstname_field];\n\n                $concat = new \\QueryExpression(\n                    'CONCAT(' . implode(',' . $DB->quoteValue(' ') . ',', $fields) . ')'\n                    . ' LIKE ' . $DB->quoteValue($txt_search)\n                );\n                $WHERE[] = [\n                    'OR' => [\n                        'glpi_users.name'                => ['LIKE', $txt_search],\n                        'glpi_users.realname'            => ['LIKE', $txt_search],\n                        'glpi_users.firstname'           => ['LIKE', $txt_search],\n                        'glpi_users.phone'               => ['LIKE', $txt_search],\n                        'glpi_users.registration_number' => ['LIKE', $txt_search],\n                        'glpi_useremails.email'          => ['LIKE', $txt_search],\n                        $concat\n                    ]\n                ];\n            }\n\n            if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n                $criteria['ORDERBY'] = [\n                    'glpi_users.firstname',\n                    'glpi_users.realname',\n                    'glpi_users.name'\n                ];\n            } else {\n                $criteria['ORDERBY'] = [\n                    'glpi_users.realname ASC',\n                    'glpi_users.firstname ASC',\n                    'glpi_users.name ASC',\n                ];\n            }\n\n            if ($limit > 0) {\n                $criteria['LIMIT'] = $limit;\n                $criteria['START'] = $start;\n            }\n        }\n        $criteria['WHERE'] = $WHERE;\n        return $DB->request($criteria);\n    }\n\n\n    /**\n     * Make a select box with all glpi users where select key = name\n     *\n     * @param $options array of possible options:\n     *    - name             : string / name of the select (default is users_id)\n     *    - value\n     *    - values           : in case of select[multiple], pass the array of multiple values\n     *    - right            : string / limit user who have specific right :\n     *                             id -> only current user (default case);\n     *                             interface -> central;\n     *                             all -> all users;\n     *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n     *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n     *    - entity           : integer or array / restrict to a defined entity or array of entities\n     *                          (default -1 : no restriction)\n     *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n     *                          only available if entity is a single value not an array(default false)\n     *    - all              : Nobody or All display for none selected\n     *                             all=0 (default) -> Nobody\n     *                             all=1 -> All\n     *                             all=-1-> nothing\n     *    - rand             : integer / already computed rand value\n     *    - toupdate         : array / Update a specific item on select change on dropdown\n     *                          (need value_fieldname, to_update, url\n     *                          (see Ajax::updateItemOnSelectEvent for information)\n     *                          and may have moreparams)\n     *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n     *    - ldap_import\n     *    - on_change        : string / value to transmit to \"onChange\"\n     *    - display          : boolean / display or get string (default true)\n     *    - width            : specific width needed\n     *    - specific_tags    : array of HTML5 tags to add to the field\n     *    - class            : class to pass to html select\n     *    - url              : url of the ajax php code which should return the json data to show in\n     *                         the dropdown (default /ajax/getDropdownUsers.php)\n     *    - inactive_deleted : retreive also inactive or deleted users\n     *    - hide_if_no_elements  : boolean / hide dropdown if there is no elements (default false)\n     *    - readonly         : boolean / return getUserName is true (default false)\n     *\n     * @return integer|string Random value if displayed, string otherwise\n     */\n    public static function dropdown($options = [])\n    {\n        global $CFG_GLPI;\n       // Default values\n        $p = [\n            'name'                => 'users_id',\n            'value'               => '',\n            'values'              => [],\n            'right'               => 'id',\n            'all'                 => 0,\n            'display_emptychoice' => true,\n            'emptylabel'          => Dropdown::EMPTY_VALUE,\n            'placeholder'         => '',\n            'on_change'           => '',\n            'comments'            => 1,\n            'width'               => '',\n            'entity'              => -1,\n            'entity_sons'         => false,\n            'used'                => [],\n            'ldap_import'         => false,\n            'toupdate'            => '',\n            'rand'                => mt_rand(),\n            'display'             => true,\n            '_user_index'         => 0,\n            'specific_tags'       => [],\n            'class'               => \"form-select\",\n            'url'                 => $CFG_GLPI['root_doc'] . \"/ajax/getDropdownUsers.php\",\n            'inactive_deleted'    => 0,\n            'with_no_right'       => 0,\n            'toadd'               => [],\n            'hide_if_no_elements' => false,\n            'readonly'            => false,\n            'multiple'            => false,\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        if ($p['multiple']) {\n            $p['display_emptychoice'] = false;\n            $p['values'] = $p['value'] ?? [];\n            $p['comments'] = false;\n            unset($p['value']);\n        }\n\n       // check default value (in case of multiple observers)\n        if (isset($p['value']) && is_array($p['value'])) {\n            $p['value'] = $p['value'][$p['_user_index']] ?? 0;\n        }\n\n       // Check default value for dropdown : need to be a numeric (or null)\n        if (\n            isset($p['value'])\n            && ((strlen($p['value']) == 0) || !is_numeric($p['value']) && $p['value'] != 'myself')\n        ) {\n            $p['value'] = 0;\n        }\n\n        $output = '';\n        if (!($p['entity'] < 0) && $p['entity_sons']) {\n            if (is_array($p['entity'])) {\n                $output .= \"entity_sons options is not available with array of entity\";\n            } else {\n                $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n            }\n        }\n\n        // Make a select box with all glpi users\n        if (!$p['multiple']) {\n            $user = getUserName($p['value'], 2, true);\n        }\n\n        if ($p['readonly']) {\n            return '<span class=\"form-control\" readonly>' . $user[\"name\"] . '</span>';\n        }\n\n        $view_users = self::canView();\n\n        if (!$p['multiple']) {\n            if ($p['value'] === 'myself') {\n                $default = __(\"Myself\");\n            } else if (!empty($p['value']) && ($p['value'] > 0)) {\n                $default = $user[\"name\"];\n            } else {\n                if ($p['all']) {\n                    $default = __('All');\n                } else {\n                    $default = $p['emptylabel'];\n                }\n            }\n        } else {\n            // get multiple values name\n            $valuesnames = [];\n            foreach ($p['values'] as $value) {\n                if (!empty($value) && ($value > 0)) {\n                    $user = getUserName($value, 2);\n                    $valuesnames[] = $user[\"name\"];\n                }\n            }\n        }\n\n\n        $field_id = Html::cleanId(\"dropdown_\" . $p['name'] . $p['rand']);\n        $param    = [\n            'multiple'            => $p['multiple'],\n            'width'               => $p['width'],\n            'all'                 => $p['all'],\n            'display_emptychoice' => $p['display_emptychoice'],\n            'placeholder'         => $p['placeholder'],\n            'right'               => $p['right'],\n            'on_change'           => $p['on_change'],\n            'used'                => $p['used'],\n            'inactive_deleted'    => $p['inactive_deleted'],\n            'with_no_right'       => $p['with_no_right'],\n            'entity_restrict'     => ($entity_restrict = (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity'])),\n            'specific_tags'       => $p['specific_tags'],\n            'toadd'               => $p['toadd'],\n            'class'               => $p['class'],\n            '_idor_token'         => Session::getNewIDORToken(__CLASS__, [\n                'right'           => $p['right'],\n                'entity_restrict' => $entity_restrict,\n            ]),\n        ];\n\n        if ($p['multiple']) {\n            $param['values'] = $p['values'];\n            $param['valuesnames'] = $valuesnames;\n        } else {\n            $param['value'] = $p['value'];\n            $param['valuename'] = $default;\n        }\n\n        if ($p['hide_if_no_elements']) {\n            $result = Dropdown::getDropdownUsers(\n                ['display_emptychoice' => false, 'page' => 1, 'page_limit' => 1] + $param,\n                false\n            );\n            if ($result['count'] === 0) {\n                return;\n            }\n        }\n\n        $output = Html::jsAjaxDropdown(\n            $p['name'],\n            $field_id,\n            $p['url'],\n            $param\n        );\n\n       // Display comment\n        $icons = \"\";\n        if ($p['comments']) {\n            $comment_id = Html::cleanId(\"comment_\" . $p['name'] . $p['rand']);\n            $link_id = Html::cleanId(\"comment_link_\" . $p[\"name\"] . $p['rand']);\n            if (!$view_users) {\n                $user[\"link\"] = '';\n            } else if (empty($user[\"link\"])) {\n                $user[\"link\"] = $CFG_GLPI['root_doc'] . \"/front/user.php\";\n            }\n\n            if (empty($user['comment'])) {\n                $user['comment'] = Toolbox::ucfirst(\n                    sprintf(\n                        __('Show %1$s'),\n                        self::getTypeName(Session::getPluralNumber())\n                    )\n                );\n            }\n\n            $paramscomment = [\n                'value'    => '__VALUE__',\n                'itemtype' => User::getType()\n            ];\n\n            if ($view_users) {\n                $paramscomment['withlink'] = $link_id;\n            }\n            $icons .= '<div class=\"btn btn-outline-secondary\">';\n            $icons .= Ajax::updateItemOnSelectEvent(\n                $field_id,\n                $comment_id,\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/comments.php\",\n                $paramscomment,\n                false\n            );\n\n            $icons .= Html::showToolTip($user[\"comment\"], [\n                'contentid' => $comment_id,\n                'display'   => false,\n                'link'      => $user[\"link\"],\n                'linkid'    => $link_id\n            ]);\n            $icons .= '</div>';\n        }\n\n        if (\n            Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n            && $p['ldap_import']\n            && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])\n        ) {\n            $icons .= '<div class=\"btn btn-outline-secondary\">';\n            $icons .= Ajax::createIframeModalWindow(\n                'userimport' . $p['rand'],\n                $CFG_GLPI[\"root_doc\"] .\n                                                      \"/front/ldap.import.php?entity=\" .\n                                                      $_SESSION['glpiactive_entity'],\n                ['title'   => __('Import a user'),\n                    'display' => false\n                ]\n            );\n            $icons .= \"<span title=\\\"\" . __s('Import a user') . \"\\\"\" .\n            \" data-bs-toggle='modal' data-bs-target='#userimport{$p['rand']}'>\n            <i class='fas fa-plus fa-fw '></i>\n            <span class='sr-only'>\" . __s('Import a user') . \"</span>\n         </span>\";\n            $icons .= '</div>';\n        }\n\n        if (strlen($icons) > 0) {\n            $output = \"<div class='btn-group btn-group-sm \" . ($p['width'] == \"100%\" ? \"w-100\" : \"\") . \"' role='group'>{$output} {$icons}</div>\";\n        }\n\n        $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n        if ($p['display']) {\n            echo $output;\n            return $p['rand'];\n        }\n        return $output;\n    }\n\n\n    /**\n     * Show simple add user form for external auth.\n     *\n     * @return void|boolean false if user does not have rights to import users from external sources,\n     *    print form otherwise\n     */\n    public static function showAddExtAuthForm()\n    {\n\n        if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            return false;\n        }\n\n        echo \"<div class='center'>\\n\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL('User') . \"'>\\n\";\n\n        echo \"<table class='tab_cadre'>\\n\";\n        echo \"<tr><th colspan='4'>\" . __('Automatically add a user of an external source') . \"</th></tr>\\n\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Login') . \"</td>\\n\";\n        echo \"<td><input type='text' name='login' class='form-control'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n        echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\" . __s('Import from directories') . \"\\\"\n             class='btn btn-primary'>\\n\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n        echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\" . __s('Import from other sources') . \"\\\"\n             class='btn btn-primary'>\\n\";\n        echo \"</td></tr>\\n\";\n\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\\n\";\n    }\n\n\n    /**\n     * Change auth method for given users.\n     *\n     * @param integer[] $IDs      IDs of users\n     * @param integer   $authtype Auth type (see Auth constants)\n     * @param integer   $server   ID of auth server\n     *\n     * @return boolean\n     */\n    public static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1)\n    {\n        global $DB;\n\n        if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n            return false;\n        }\n\n        if (\n            !empty($IDs)\n            && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])\n        ) {\n            $result = $DB->update(\n                self::getTable(),\n                [\n                    'authtype'        => $authtype,\n                    'auths_id'        => $server,\n                    'password'        => '',\n                    'is_deleted_ldap' => 0\n                ],\n                [\n                    'id' => $IDs\n                ]\n            );\n            if ($result) {\n                foreach ($IDs as $ID) {\n                    $changes = [\n                        0,\n                        '',\n                        addslashes(\n                            sprintf(\n                                __('%1$s: %2$s'),\n                                __('Update authentification method to'),\n                                Auth::getMethodName($authtype, $server)\n                            )\n                        )\n                    ];\n                    Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n                }\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Generate vcard for the current user.\n     *\n     * @return void\n     */\n    public function generateVcard()\n    {\n\n       // prepare properties for the Vcard\n        if (\n            !empty($this->fields[\"realname\"])\n            || !empty($this->fields[\"firstname\"])\n        ) {\n            $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n        } else {\n            $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n        }\n\n        $title = null;\n        if ($this->fields['usertitles_id'] !== 0) {\n            $title = new UserTitle();\n            $title->getFromDB($this->fields['usertitles_id']);\n        }\n       // create vcard\n        $vcard = new VObject\\Component\\VCard([\n            'N'     => $name,\n            'EMAIL' => $this->getDefaultEmail(),\n            'NOTE'  => $this->fields[\"comment\"],\n        ]);\n        if ($title) {\n            $vcard->add('TITLE', $title->fields['name']);\n        }\n        if ($this->fields['timezone']) {\n            $vcard->add('TZ', $this->fields['timezone']);\n        }\n        $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n        $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n        $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n       // Get more data from plugins such as an IM contact\n        $data = Plugin::doHook(Hooks::VCARD_DATA, ['item' => $this, 'data' => []])['data'];\n        foreach ($data as $field => $additional_field) {\n            $vcard->add($additional_field['name'], $additional_field['value'] ?? '', $additional_field['params'] ?? []);\n        }\n\n       // send the  VCard\n        $output   = $vcard->serialize();\n        $filename = implode(\"_\", array_filter($name)) . \".vcf\";\n\n        @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n        @header(\"Content-Length: \" . Toolbox::strlen($output));\n        @header(\"Connection: close\");\n        @header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n        echo $output;\n    }\n\n\n    /**\n     * Show items of the current user.\n     *\n     * @param boolean $tech false to display items owned by user, true to display items managed by user\n     *\n     * @return void\n     */\n    public function showItems($tech)\n    {\n        global $DB, $CFG_GLPI;\n\n        $ID = $this->getField('id');\n\n        if ($tech) {\n            $type_user   = $CFG_GLPI['linkuser_tech_types'];\n            $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n            $field_user  = 'users_id_tech';\n            $field_group = 'groups_id_tech';\n        } else {\n            $type_user   = $CFG_GLPI['linkuser_types'];\n            $type_group  = $CFG_GLPI['linkgroup_types'];\n            $field_user  = 'users_id';\n            $field_group = 'groups_id';\n        }\n\n        $group_where = \"\";\n        $groups      = [];\n\n        $iterator = $DB->request([\n            'SELECT'    => [\n                'glpi_groups_users.groups_id',\n                'glpi_groups.name'\n            ],\n            'FROM'      => 'glpi_groups_users',\n            'LEFT JOIN' => [\n                'glpi_groups' => [\n                    'FKEY' => [\n                        'glpi_groups_users'  => 'groups_id',\n                        'glpi_groups'        => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n        ]);\n        $number = count($iterator);\n\n        $group_where = [];\n        foreach ($iterator as $data) {\n            $group_where[$field_group][] = $data['groups_id'];\n            $groups[$data[\"groups_id\"]] = $data[\"name\"];\n        }\n\n        echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n        $header = \"<tr><th>\" . _n('Type', 'Types', 1) . \"</th>\";\n        $header .= \"<th>\" . Entity::getTypeName(1) . \"</th>\";\n        $header .= \"<th>\" . __('Name') . \"</th>\";\n        $header .= \"<th>\" . __('Serial number') . \"</th>\";\n        $header .= \"<th>\" . __('Inventory number') . \"</th>\";\n        $header .= \"<th>\" . __('Status') . \"</th>\";\n        $header .= \"<th>&nbsp;</th></tr>\";\n        echo $header;\n\n        foreach ($type_user as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n                continue;\n            }\n            if ($item->canView()) {\n                $itemtable = getTableForItemType($itemtype);\n                $iterator_params = [\n                    'FROM'   => $itemtable,\n                    'WHERE'  => [$field_user => $ID]\n                ];\n\n                if ($item->maybeTemplate()) {\n                    $iterator_params['WHERE']['is_template'] = 0;\n                }\n                if ($item->maybeDeleted()) {\n                    $iterator_params['WHERE']['is_deleted'] = 0;\n                }\n\n                $item_iterator = $DB->request($iterator_params);\n\n                $type_name = $item->getTypeName();\n\n                foreach ($item_iterator as $data) {\n                    $cansee = $item->can($data[\"id\"], READ);\n                    $link   = $data[\"name\"];\n                    if ($cansee) {\n                        $link_item = $item::getFormURLWithID($data['id']);\n                        if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                             $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                        }\n                        $link = \"<a href='\" . $link_item . \"'>\" . $link . \"</a>\";\n                    }\n                    $linktype = \"\";\n                    if ($data[$field_user] == $ID) {\n                        $linktype = self::getTypeName(1);\n                    }\n                    echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                    echo \"<td class='center'>\" . Dropdown::getDropdownName(\n                        \"glpi_entities\",\n                        $data[\"entities_id\"]\n                    ) . \"</td>\";\n                    echo \"<td class='center'>$link</td>\";\n                    echo \"<td class='center'>\";\n                    if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                          echo $data[\"serial\"];\n                    } else {\n                        echo '&nbsp;';\n                    }\n                    echo \"</td><td class='center'>\";\n                    if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                        echo $data[\"otherserial\"];\n                    } else {\n                        echo '&nbsp;';\n                    }\n                    echo \"</td><td class='center'>\";\n                    if (isset($data[\"states_id\"])) {\n                        echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                    } else {\n                        echo '&nbsp;';\n                    }\n\n                    echo \"</td><td class='center'>$linktype</td></tr>\";\n                }\n            }\n        }\n        if ($number) {\n            echo $header;\n        }\n        echo \"</table></div>\";\n\n        if (count($group_where)) {\n            echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n            $header = \"<tr>\" .\n               \"<th>\" . _n('Type', 'Types', 1) . \"</th>\" .\n               \"<th>\" . Entity::getTypeName(1) . \"</th>\" .\n               \"<th>\" . __('Name') . \"</th>\" .\n               \"<th>\" . __('Serial number') . \"</th>\" .\n               \"<th>\" . __('Inventory number') . \"</th>\" .\n               \"<th>\" . __('Status') . \"</th>\" .\n               \"<th>&nbsp;</th></tr>\";\n            echo $header;\n            $nb = 0;\n            foreach ($type_group as $itemtype) {\n                if (!($item = getItemForItemtype($itemtype))) {\n                    continue;\n                }\n                if ($item->canView() && $item->isField($field_group)) {\n                    $itemtable = getTableForItemType($itemtype);\n                    $iterator_params = [\n                        'FROM'   => $itemtable,\n                        'WHERE'  => ['OR' => $group_where]\n                    ];\n\n                    if ($item->maybeTemplate()) {\n                        $iterator_params['WHERE']['is_template'] = 0;\n                    }\n                    if ($item->maybeDeleted()) {\n                        $iterator_params['WHERE']['is_deleted'] = 0;\n                    }\n\n                    $group_iterator = $DB->request($iterator_params);\n\n                    $type_name = $item->getTypeName();\n\n                    foreach ($group_iterator as $data) {\n                        $nb++;\n                        $cansee = $item->can($data[\"id\"], READ);\n                        $link   = $data[\"name\"];\n                        if ($cansee) {\n                            $link_item = $item::getFormURLWithID($data['id']);\n                            if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                                $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                            }\n                            $link = \"<a href='\" . $link_item . \"'>\" . $link . \"</a>\";\n                        }\n                        $linktype = \"\";\n                        if (isset($groups[$data[$field_group]])) {\n                            $linktype = sprintf(\n                                __('%1$s = %2$s'),\n                                Group::getTypeName(1),\n                                $groups[$data[$field_group]]\n                            );\n                        }\n                        echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                        echo \"<td class='center'>\" . Dropdown::getDropdownName(\n                            \"glpi_entities\",\n                            $data[\"entities_id\"]\n                        );\n                        echo \"</td><td class='center'>$link</td>\";\n                        echo \"<td class='center'>\";\n                        if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                             echo $data[\"serial\"];\n                        } else {\n                            echo '&nbsp;';\n                        }\n                        echo \"</td><td class='center'>\";\n                        if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                            echo $data[\"otherserial\"];\n                        } else {\n                            echo '&nbsp;';\n                        }\n                        echo \"</td><td class='center'>\";\n                        if (isset($data[\"states_id\"])) {\n                            echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                        } else {\n                            echo '&nbsp;';\n                        }\n\n                        echo \"</td><td class='center'>$linktype</td></tr>\";\n                    }\n                }\n            }\n            if ($nb) {\n                echo $header;\n            }\n            echo \"</table></div>\";\n        }\n    }\n\n\n    /**\n     * Get user by email, importing it from LDAP if not existing.\n     *\n     * @param string $email\n     *\n     * @return integer ID of user, 0 if not found nor imported\n     */\n    public static function getOrImportByEmail($email = '')\n    {\n        global $DB, $CFG_GLPI;\n\n        $iterator = $DB->request([\n            'SELECT'    => 'users_id AS id',\n            'FROM'      => 'glpi_useremails',\n            'LEFT JOIN' => [\n                'glpi_users' => [\n                    'FKEY' => [\n                        'glpi_useremails' => 'users_id',\n                        'glpi_users'      => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                'glpi_useremails.email' => $DB->escape(stripslashes($email))\n            ],\n            'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n        ]);\n\n       //User still exists in DB\n        if (count($iterator)) {\n            $result = $iterator->current();\n            return $result['id'];\n        } else {\n            if ($CFG_GLPI[\"is_users_auto_add\"]) {\n               //Get all ldap servers with email field configured\n                $ldaps = AuthLDAP::getServersWithImportByEmailActive();\n               //Try to find the user by his email on each ldap server\n\n                foreach ($ldaps as $ldap) {\n                    $params = [\n                        'method' => AuthLDAP::IDENTIFIER_EMAIL,\n                        'value'  => $email,\n                    ];\n                    $res = AuthLDAP::ldapImportUserByServerId(\n                        $params,\n                        AuthLDAP::ACTION_IMPORT,\n                        $ldap\n                    );\n\n                    if (isset($res['id'])) {\n                        return $res['id'];\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n\n\n    /**\n     * Handle user deleted in LDAP using configured policy.\n     *\n     * @param integer $users_id\n     *\n     * @return void\n     */\n    public static function manageDeletedUserInLdap($users_id)\n    {\n        global $CFG_GLPI;\n\n       //The only case where users_id can be null if when a user has been imported into GLPI\n       //it's dn still exists, but doesn't match the connection filter anymore\n       //In this case, do not try to process the user\n        if (!$users_id) {\n            return;\n        }\n\n       //User is present in DB but not in the directory : it's been deleted in LDAP\n        $tmp = [\n            'id'              => $users_id,\n            'is_deleted_ldap' => 1,\n        ];\n        $myuser = new self();\n        $myuser->getFromDB($users_id);\n\n       //User is already considered as delete from ldap\n        if ($myuser->fields['is_deleted_ldap'] == 1) {\n            return;\n        }\n\n        switch ($CFG_GLPI['user_deleted_ldap']) {\n           //DO nothing\n            default:\n            case AuthLDAP::DELETED_USER_PRESERVE:\n                $myuser->update($tmp);\n                break;\n\n           //Put user in trashbin\n            case AuthLDAP::DELETED_USER_DELETE:\n               // Make sure the `is_deleted_ldap` flag is changed before deleting the user (Used for a potential future restore)\n                $myuser->update($tmp);\n                $myuser->delete($tmp);\n                break;\n\n           //Delete all user dynamic habilitations and groups\n            case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n                Profile_User::deleteRights($users_id, true);\n                Group_User::deleteGroups($users_id, true);\n                $myuser->update($tmp);\n                break;\n\n           //Deactivate the user\n            case AuthLDAP::DELETED_USER_DISABLE:\n                $tmp['is_active'] = 0;\n                $myuser->update($tmp);\n                break;\n\n           //Deactivate the user+ Delete all user dynamic habilitations and groups\n            case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n                $tmp['is_active'] = 0;\n                $myuser->update($tmp);\n                Profile_User::deleteRights($users_id, true);\n                Group_User::deleteGroups($users_id, true);\n                break;\n        }\n       /*\n       $changes[0] = '0';\n       $changes[1] = '';\n       $changes[2] = __('Deleted user in LDAP directory');\n       Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n    }\n\n    /**\n     * Handle user restored in LDAP using configured policy.\n     *\n     * @since 10.0.0\n     * @param $users_id\n     *\n     * @return void\n     */\n    public static function manageRestoredUserInLdap($users_id): void\n    {\n        global $CFG_GLPI;\n\n       //The only case where users_id can be null if when a user has been imported into GLPI\n       //it's dn still exists, but doesn't match the connection filter anymore\n       //In this case, do not try to process the user\n        if (!$users_id) {\n            return;\n        }\n\n       //User is present in DB and in the directory but 'is_ldap_deleted' was true : it's been restored in LDAP\n        $tmp = [\n            'id'              => $users_id,\n            'is_deleted_ldap' => 0,\n        ];\n        $myuser = new self();\n        $myuser->getFromDB($users_id);\n\n       // User is already considered as restored from ldap\n        if ($myuser->fields['is_deleted_ldap'] == 0) {\n            return;\n        }\n\n       // Calling the update function for the user will reapply dynamic rights {@see User::post_updateItem()}\n        switch ($CFG_GLPI['user_restored_ldap']) {\n           // Do nothing except update the 'is_ldap_deleted' field to prevent re-processing the restore for each sync\n            default:\n            case AuthLDAP::RESTORED_USER_PRESERVE:\n                $myuser->update($tmp);\n                break;\n\n           // Restore the user from the trash\n            case AuthLDAP::RESTORED_USER_RESTORE:\n                $myuser->restore($tmp);\n                $myuser->update($tmp);\n                break;\n\n           // Enable the user\n            case AuthLDAP::RESTORED_USER_ENABLE:\n                $tmp['is_active'] = 1;\n                $myuser->update($tmp);\n                break;\n        }\n    }\n\n    /**\n     * Get user ID from its name.\n     *\n     * @param string $name User name\n     *\n     * @return integer\n     */\n    public static function getIdByName($name)\n    {\n        return self::getIdByField('name', $name);\n    }\n\n\n    /**\n     * Get user ID from a field\n     *\n     * @since 0.84\n     *\n     * @param string $field Field name\n     * @param string $value Field value\n     *\n     * @return integer\n     */\n    public static function getIdByField($field, $value, $escape = true)\n    {\n        global $DB;\n\n        if ($escape) {\n            $value = addslashes($value);\n        }\n\n        $iterator = $DB->request([\n            'SELECT' => 'id',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $value]\n        ]);\n\n        if (count($iterator) == 1) {\n            $row = $iterator->current();\n            return (int)$row['id'];\n        }\n        return false;\n    }\n\n\n    /**\n     * Show password update form for current user.\n     *\n     * @param array $error_messages\n     *\n     * @return void\n     */\n    public function showPasswordUpdateForm(array $error_messages = [])\n    {\n        global $CFG_GLPI;\n\n        echo '<form method=\"post\" action=\"' . $CFG_GLPI['root_doc'] . '/front/updatepassword.php\">';\n        echo '<table class=\"tab_cadre\">';\n        echo '<tr><th colspan=\"2\">' . __('Password update') . '</th></tr>';\n\n        if (Session::mustChangePassword()) {\n            echo '<tr class=\"tab_bg_2 center\">';\n            echo '<td colspan=\"2\" class=\"red b\">';\n            echo __('Your password has expired. You must change it to be able to login.');\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo __('Login');\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"text\" name=\"name\" value=\"' . $this->fields['name'] . '\" readonly=\"readonly\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"current_password\">' . __('Current password') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"current_password\" name=\"current_password\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"password\">' . __('New password') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"password\" name=\"password\" autocomplete=\"new-password\" onkeyup=\"return passwordCheck();\" class=\"form-control\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"password2\">' . __('New password confirmation') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"password2\" name=\"password2\" autocomplete=\"new-password\" class=\"form-control\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        if ($CFG_GLPI['use_password_security']) {\n            echo '<tr class=\"tab_bg_1\">';\n            echo '<td>' . __('Password security policy') . '</td>';\n            echo '<td>';\n            Config::displayPasswordSecurityChecks();\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '<tr class=\"tab_bg_2 center\">';\n        echo '<td colspan=\"2\">';\n        echo '<input type=\"submit\" name=\"update\" value=\"' . __s('Save') . '\" class=\"btn btn-primary\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        if (!empty($error_messages)) {\n            echo '<tr class=\"tab_bg_2 center\">';\n            echo '<td colspan=\"2\" class=\"red b\">';\n            echo implode('<br/>', $error_messages);\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '</table>';\n        Html::closeForm();\n    }\n\n\n    /**\n     * Show new password form of password recovery process.\n     *\n     * @param $token\n     *\n     * @return void\n     */\n    public static function showPasswordForgetChangeForm($token)\n    {\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'    => __('Forgotten password?'),\n            'token'    => $token,\n            'token_ok' => User::getUserByForgottenPasswordToken($token) !== null,\n        ]);\n    }\n\n\n    /**\n     * Show request form of password recovery process.\n     *\n     * @return void\n     */\n    public static function showPasswordForgetRequestForm()\n    {\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title' => __('Forgotten password?'),\n        ]);\n    }\n\n\n    /**\n     * Handle password recovery form submission.\n     *\n     * @param array $input\n     *\n     * @throws ForgetPasswordException when requirements are not met\n     *\n     * @return boolean true if password successfully changed, false otherwise\n     */\n    public function updateForgottenPassword(array $input)\n    {\n        // Get user by token\n        $token = $input['password_forget_token'] ?? \"\";\n        $user = self::getUserByForgottenPasswordToken($token);\n\n        // Invalid token\n        if (!$user) {\n            throw new ForgetPasswordException(\n                __('Your password reset request has expired or is invalid. Please renew it.')\n            );\n        }\n\n        // Check if the user is no longer active, it might happen if for some\n        // reasons the user is disabled manually after requesting a password reset\n        if ($user->fields['is_active'] == 0 || $user->fields['is_deleted'] == 1) {\n            throw new ForgetPasswordException(\n                __(\"Unable to reset password, please contact your administrator\")\n            );\n        }\n\n        // Same check but for the account activation dates\n        if (\n            ($user->fields['begin_date'] !== null && $user->fields['begin_date'] < $_SESSION['glpi_currenttime'])\n            || ($user->fields['end_date'] !== null && $user->fields['end_date'] > $_SESSION['glpi_currenttime'])\n        ) {\n            throw new ForgetPasswordException(\n                __(\"Unable to reset password, please contact your administrator\")\n            );\n        }\n\n        // Safety check that the user authentication method support passwords changes\n        if ($user->fields[\"authtype\"] !== Auth::DB_GLPI && Auth::useAuthExt()) {\n            throw new ForgetPasswordException(\n                __(\"The authentication method configuration doesn't allow you to change your password.\")\n            );\n        }\n\n        $input['id'] = $user->fields['id'];\n\n        // Check new password validity, throws exception on failure\n        Config::validatePassword($input[\"password\"], false);\n\n        // Try to set new password\n        if (!$user->update($input)) {\n            return false;\n        }\n\n        // Clear password reset token data\n        $user->update([\n            'id'                         => $user->fields['id'],\n            'password_forget_token'      => '',\n            'password_forget_token_date' => 'NULL',\n        ]);\n\n        $this->getFromDB($user->fields['id']);\n\n        return true;\n    }\n\n\n    /**\n     * Displays password recovery result.\n     *\n     * @param array $input\n     *\n     * @return void\n     */\n    public function showUpdateForgottenPassword(array $input)\n    {\n        try {\n            if ($this->updateForgottenPassword($input)) {\n                Session::addMessageAfterRedirect(__('Reset password successful.'));\n            }\n        } catch (\\Glpi\\Exception\\ForgetPasswordException $e) {\n            Session::addMessageAfterRedirect($e->getMessage(), false, ERROR);\n        } catch (\\Glpi\\Exception\\PasswordTooWeakException $e) {\n           // Force display on error\n            foreach ($e->getMessages() as $message) {\n                Session::addMessageAfteRredirect($message, false, ERROR);\n            }\n        }\n\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'         => __('Forgotten password?'),\n            'messages_only' => true,\n        ]);\n    }\n\n\n    /**\n     * Send password recovery for a user and display result message.\n     *\n     * @param string $email email of the user\n     *\n     * @return void\n     */\n    public function showForgetPassword($email)\n    {\n        try {\n            $this->forgetPassword($email);\n        } catch (\\Glpi\\Exception\\ForgetPasswordException $e) {\n            Session::addMessageAfterRedirect($e->getMessage(), false, ERROR);\n            return;\n        }\n        Session::addMessageAfteRredirect(__('If the given email address match an exisiting GLPI user, you will receive an email containing the informations required to reset your password. Please contact your administrator if you do not receive any email.'));\n\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'         => __('Forgotten password?'),\n            'messages_only' => true,\n        ]);\n    }\n\n    /**\n     * Send password recovery email for a user.\n     *\n     * @param string $email\n     *\n     * @throws ForgetPasswordException If the process failed and the user should\n     *                                 be aware of it (e.g. incorrect email)\n     *\n     * @return bool Return true if the password reset notification was sent,\n     *              false if the process failed but the user should not be aware\n     *              of it to avoid exposing whether or not the given email exist\n     *              in our database.\n     */\n    public function forgetPassword(string $email): bool\n    {\n        $condition = [\n            'glpi_users.is_active'  => 1,\n            'glpi_users.is_deleted' => 0, [\n                'OR' => [\n                    ['glpi_users.begin_date' => null],\n                    ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                ],\n            ], [\n                'OR'  => [\n                    ['glpi_users.end_date'   => null],\n                    ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n                ]\n            ]\n        ];\n\n        // Try to find a single user matching the given email\n        if (!$this->getFromDBbyEmail($email, $condition)) {\n            $count = self::countUsersByEmail($email, $condition);\n            trigger_error(\n                \"Failed to find a single user for '$email', $count user(s) found.\",\n                E_USER_WARNING\n            );\n\n            return false;\n        }\n\n        // Check that the configuration allow this user to change his password\n        if ($this->fields[\"authtype\"] !== Auth::DB_GLPI && Auth::useAuthExt()) {\n            trigger_error(\n                __(\"The authentication method configuration doesn't allow the user '$email' to change his password.\"),\n                E_USER_WARNING\n            );\n\n            return false;\n        }\n\n        // Check that the given email is valid\n        if (!NotificationMailing::isUserAddressValid($email)) {\n            throw new ForgetPasswordException(__('Invalid email address'));\n        }\n\n        // Store password reset token and date\n        $input = [\n            'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n            'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n            'id'                         => $this->fields['id'],\n        ];\n        $this->update($input);\n\n        // Notication on root entity (glpi_users.entities_id is only a pref)\n        NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n        QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n\n        return true;\n    }\n\n\n    /**\n     * Display information from LDAP server for user.\n     *\n     * @return void\n     */\n    private function showLdapDebug()\n    {\n\n        if ($this->fields['authtype'] != Auth::LDAP) {\n            return false;\n        }\n        echo \"<div class='spaced'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . AuthLDAP::getTypeName(1) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('User DN') . \"</td>\";\n        echo \"<td>\" . $this->fields['user_dn'] . \"</td></tr>\\n\";\n\n        if ($this->fields['user_dn']) {\n            echo \"<tr class='tab_bg_2'><td>\" . __('User information') . \"</td><td>\";\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n                $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n                $info = AuthLDAP::getUserByDn(\n                    $ds,\n                    $this->fields['user_dn'],\n                    ['*', 'createTimeStamp', 'modifyTimestamp']\n                );\n                if (is_array($info)) {\n                     Html::printCleanArray($info);\n                } else {\n                    echo __('No item to display');\n                }\n            } else {\n                echo __('Connection failed');\n            }\n\n            echo \"</td></tr>\\n\";\n        }\n\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Display debug information for current object.\n     *\n     * @return void\n     */\n    public function showDebug()\n    {\n\n        NotificationEvent::debugEvent($this);\n        $this->showLdapDebug();\n    }\n\n    public function getUnicityFieldsToDisplayInErrorMessage()\n    {\n\n        return ['id'          => __('ID'),\n            'entities_id' => Entity::getTypeName(1)\n        ];\n    }\n\n\n    public function getUnallowedFieldsForUnicity()\n    {\n\n        return array_merge(\n            parent::getUnallowedFieldsForUnicity(),\n            ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']\n        );\n    }\n\n\n    /**\n     * Get a unique generated token.\n     *\n     * @param string $field Field storing the token\n     *\n     * @return string\n     */\n    public static function getUniqueToken($field = 'personal_token')\n    {\n        global $DB;\n\n        $ok = false;\n        do {\n            $key    = Toolbox::getRandomString(40);\n            $row = $DB->request([\n                'COUNT'  => 'cpt',\n                'FROM'   => self::getTable(),\n                'WHERE'  => [$field => $key]\n            ])->current();\n\n            if ($row['cpt'] == 0) {\n                 return $key;\n            }\n        } while (!$ok);\n    }\n\n\n    /**\n     * Get token of a user. If not exists generate it.\n     *\n     * @param integer $ID    User ID\n     * @param string  $field Field storing the token\n     *\n     * @return string|boolean User token, false if user does not exist\n     */\n    public static function getToken($ID, $field = 'personal_token')\n    {\n\n        $user = new self();\n        if ($user->getFromDB($ID)) {\n            return $user->getAuthToken($field);\n        }\n\n        return false;\n    }\n\n    /**\n     * Get token of a user. If it does not exists  then generate it.\n     *\n     * @since 9.4\n     *\n     * @param string $field the field storing the token\n     * @param boolean $force_new force generation of a new token\n     *\n     * @return string|false token or false in case of error\n     */\n    public function getAuthToken($field = 'personal_token', $force_new = false)\n    {\n        global $CFG_GLPI;\n\n        if ($this->isNewItem()) {\n            return false;\n        }\n\n       // check date validity for cookie token\n        $outdated = false;\n        if ($field === 'cookie_token') {\n            if (empty($this->fields[$field . \"_date\"])) {\n                $outdated = true;\n            } else {\n                $date_create = new DateTime($this->fields[$field . \"_date\"]);\n                $date_expir = $date_create->add(new DateInterval('PT' . $CFG_GLPI[\"login_remember_time\"] . 'S'));\n\n                if ($date_expir < new DateTime()) {\n                    $outdated = true;\n                }\n            }\n        }\n\n       // token exists, is not oudated, and we may use it\n        if (!empty($this->fields[$field]) && !$force_new && !$outdated) {\n            return $this->fields[$field];\n        }\n\n       // else get a new token\n        $token = self::getUniqueToken($field);\n\n       // for cookie token, we need to store it hashed\n        $hash = $token;\n        if ($field === 'cookie_token') {\n            $hash = Auth::getPasswordHash($token);\n        }\n\n       // save this token in db\n        $this->update(['id'             => $this->getID(),\n            $field           => $hash,\n            $field . \"_date\" => $_SESSION['glpi_currenttime']\n        ]);\n\n        return $token;\n    }\n\n\n    /**\n     * Get name of users using default passwords\n     *\n     * @return string[]\n     */\n    public static function checkDefaultPasswords()\n    {\n        global $DB;\n\n        $passwords = ['glpi'      => 'glpi',\n            'tech'      => 'tech',\n            'normal'    => 'normal',\n            'post-only' => 'postonly'\n        ];\n        $default_password_set = [];\n\n        $crit = ['FIELDS'     => ['name', 'password'],\n            'is_active'  => 1,\n            'is_deleted' => 0,\n            'name'       => array_keys($passwords)\n        ];\n\n        foreach ($DB->request('glpi_users', $crit) as $data) {\n            if (Auth::checkPassword($passwords[strtolower($data['name'])], $data['password'])) {\n                $default_password_set[] = $data['name'];\n            }\n        }\n\n        return $default_password_set;\n    }\n\n\n    /**\n     * Get picture URL from picture field.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     * @param bool  bool get full path\n     *\n     * @return string\n     */\n    public static function getURLForPicture($picture, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $url = Toolbox::getPictureUrl($picture, $full);\n        if (null !== $url) {\n            return $url;\n        }\n\n        return ($full ? $CFG_GLPI[\"root_doc\"] : \"\") . \"/pics/picture.png\";\n    }\n\n\n    /**\n     * Get thumbnail URL from picture field.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     *\n     * @return string\n     */\n    public static function getThumbnailURLForPicture(string $picture = null)\n    {\n        global $CFG_GLPI;\n\n       // prevent xss\n        $picture = Html::cleanInputText($picture);\n\n        if (!empty($picture)) {\n            $tmp = explode(\".\", $picture);\n            if (count($tmp) == 2) {\n                return $CFG_GLPI[\"root_doc\"] . \"/front/document.send.php?file=_pictures/\" . $tmp[0] .\n                   \"_min.\" . $tmp[1];\n            }\n        }\n\n        return \"\";\n    }\n\n\n    /**\n     * Drop existing files for user picture.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     *\n     * @return void\n     */\n    public static function dropPictureFiles($picture)\n    {\n\n        if (!empty($picture)) {\n           // unlink main file\n            if (file_exists(GLPI_PICTURE_DIR . \"/$picture\")) {\n                @unlink(GLPI_PICTURE_DIR . \"/$picture\");\n            }\n           // unlink Thunmnail\n            $tmp = explode(\".\", $picture);\n            if (count($tmp) == 2) {\n                if (file_exists(GLPI_PICTURE_DIR . \"/\" . $tmp[0] . \"_min.\" . $tmp[1])) {\n                    @unlink(GLPI_PICTURE_DIR . \"/\" . $tmp[0] . \"_min.\" . $tmp[1]);\n                }\n            }\n        }\n    }\n\n    public function getRights($interface = 'central')\n    {\n\n        $values = parent::getRights();\n       //TRANS: short for : Add users from an external source\n        $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n            'long'  => __('Add users from an external source')\n        ];\n       //TRANS: short for : Read method for user authentication and synchronization\n        $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n            'long'  => __('Read user authentication and synchronization method')\n        ];\n       //TRANS: short for : Update method for user authentication and synchronization\n        $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n            'long'  => __('Update method for user authentication and synchronization')\n        ];\n\n        return $values;\n    }\n\n\n    /**\n     * Retrieve the list of LDAP field names from a list of fields\n     * allow pattern substitution, e.g. %{name}.\n     *\n     * @since 9.1\n     *\n     * @param string[] $map array of fields\n     *\n     * @return string[]\n     */\n    private static function getLdapFieldNames(array $map)\n    {\n\n        $ret =  [];\n        foreach ($map as $v) {\n            /** @var array $reg */\n            if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n                // e.g. \"%{country} > %{city} > %{site}\"\n                foreach ($reg [1] as $f) {\n                    $ret [] = $f;\n                }\n            } else {\n               // single field name\n                $ret [] = $v;\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n     *\n     * @since 9.1\n     *\n     * @param string $map String with field format\n     * @param array  $res LDAP result\n     *\n     * @return string\n     */\n    private static function getLdapFieldValue($map, array $res)\n    {\n\n        $map = Sanitizer::unsanitize($map);\n        $ret = preg_replace_callback(\n            '/%{(.*)}/U',\n            function ($matches) use ($res) {\n                return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n            },\n            $map\n        );\n\n        return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n    }\n\n    /**\n     * Print the switch language form.\n     *\n     * @return void\n     */\n    public static function showSwitchLangForm()\n    {\n        $params = [\n            'value'     => $_SESSION[\"glpilanguage\"],\n            'display'   => false,\n            'on_change' => 'this.form.submit()'\n        ];\n\n        $out = \"<form method='post' name='switchlang' action='\" . User::getFormURL() . \"' autocomplete='off'>\";\n        $out .= Dropdown::showLanguages(\"language\", $params);\n        $out .= Html::closeForm(false);\n\n        return $out;\n    }\n\n    /**\n     * Get list of entities ids for current user.\n     *\n     * @return integer[]\n     */\n    private function getEntities()\n    {\n       //get user entities\n        if ($this->entities == null) {\n            $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n        }\n        return $this->entities;\n    }\n\n\n    /**\n     * Give cron information.\n     *\n     * @param string $name Task's name\n     *\n     * @return array\n     */\n    public static function cronInfo(string $name): array\n    {\n\n        $info = [];\n        switch ($name) {\n            case 'passwordexpiration':\n                $info = [\n                    'description' => __('Handle users passwords expiration policy'),\n                    'parameter'   => __('Maximum expiration notifications to send at once'),\n                ];\n                break;\n        }\n        return $info;\n    }\n\n    /**\n     * Cron that notify users about when their password expire and deactivate their account\n     * depending on password expiration policy.\n     *\n     * @param CronTask $task\n     *\n     * @return integer\n     */\n    public static function cronPasswordExpiration(CronTask $task)\n    {\n        global $CFG_GLPI, $DB;\n\n        $expiration_delay   = (int)$CFG_GLPI['password_expiration_delay'];\n        $notice_time        = (int)$CFG_GLPI['password_expiration_notice'];\n        $notification_limit = (int)$task->fields['param'];\n        $lock_delay         = (int)$CFG_GLPI['password_expiration_lock_delay'];\n\n        if (-1 === $expiration_delay || (-1 === $notice_time && -1 === $lock_delay)) {\n           // Nothing to do if passwords does not expire\n           // or if password expires without notice and with no lock delay\n            return 0;\n        }\n\n       // Notify users about expiration of their password.\n        $to_notify_count = 0;\n        if (-1 !== $notice_time) {\n            $notification_request = [\n                'FROM'      => self::getTable(),\n                'LEFT JOIN' => [\n                    Alert::getTable() => [\n                        'ON' => [\n                            Alert::getTable() => 'items_id',\n                            self::getTable()  => 'id',\n                            [\n                                'AND' => [\n                                    Alert::getTableField('itemtype') => self::getType(),\n                                ]\n                            ],\n                        ]\n                    ]\n                ],\n                'WHERE'     => [\n                    self::getTableField('is_deleted') => 0,\n                    self::getTableField('is_active')  => 1,\n                    self::getTableField('authtype')   => Auth::DB_GLPI,\n                    new QueryExpression(\n                        sprintf(\n                            'NOW() > ADDDATE(%s, INTERVAL %s DAY)',\n                            $DB->quoteName(self::getTableField('password_last_update')),\n                            $expiration_delay - $notice_time\n                        )\n                    ),\n               // Get only users that has not yet been notified within last day\n                    'OR'                              => [\n                        [Alert::getTableField('date') => null],\n                        [Alert::getTableField('date') => ['<', new QueryExpression('CURRENT_TIMESTAMP() - INTERVAL 1 day')]],\n                    ],\n                ],\n            ];\n\n            $to_notify_count_request = array_merge(\n                $notification_request,\n                [\n                    'COUNT'  => 'cpt',\n                ]\n            );\n            $to_notify_count = $DB->request($to_notify_count_request)->current()['cpt'];\n\n            $notification_data_request  = array_merge(\n                $notification_request,\n                [\n                    'SELECT'    => [\n                        self::getTableField('id as user_id'),\n                        Alert::getTableField('id as alert_id'),\n                    ],\n                    'LIMIT'     => $notification_limit,\n                ]\n            );\n            $notification_data_iterator = $DB->request($notification_data_request);\n\n            foreach ($notification_data_iterator as $notification_data) {\n                $user_id  = $notification_data['user_id'];\n                $alert_id = $notification_data['alert_id'];\n\n                $user = new User();\n                $user->getFromDB($user_id);\n\n                $is_notification_send = NotificationEvent::raiseEvent(\n                    'passwordexpires',\n                    $user,\n                    ['entities_id' => 0] // Notication on root entity (glpi_users.entities_id is only a pref)\n                );\n                if (!$is_notification_send) {\n                     continue;\n                }\n\n                 $task->addVolume(1);\n\n                 $alert = new Alert();\n\n                 // Delete existing alert if any\n                if (null !== $alert_id) {\n                    $alert->delete(['id' => $alert_id]);\n                }\n\n                 // Add an alert to not warn user for at least one day\n                 $alert->add(\n                     [\n                         'itemtype' => 'User',\n                         'items_id' => $user_id,\n                         'type'     => Alert::NOTICE,\n                     ]\n                 );\n            }\n        }\n\n       // Disable users if their password has expire for too long.\n        if (-1 !== $lock_delay) {\n            $DB->update(\n                self::getTable(),\n                [\n                    'is_active'         => 0,\n                    'cookie_token'      => null,\n                    'cookie_token_date' => null,\n                ],\n                [\n                    'is_deleted' => 0,\n                    'is_active'  => 1,\n                    'authtype'   => Auth::DB_GLPI,\n                    new QueryExpression(\n                        sprintf(\n                            'NOW() > ADDDATE(ADDDATE(%s, INTERVAL %d DAY), INTERVAL %s DAY)',\n                            $DB->quoteName(self::getTableField('password_last_update')),\n                            $expiration_delay,\n                            $lock_delay\n                        )\n                    ),\n                ]\n            );\n        }\n\n        return -1 !== $notice_time && $to_notify_count > $notification_limit\n         ? -1 // -1 for partial process (remaining notifications to send)\n         : 1; // 1 for fully process\n    }\n\n    /**\n     * Get password expiration time.\n     *\n     * @return null|int Password expiration time, or null if expiration mechanism is not active.\n     */\n    public function getPasswordExpirationTime()\n    {\n        global $CFG_GLPI;\n\n        if (!array_key_exists('id', $this->fields) || $this->fields['id'] < 1) {\n            return null;\n        }\n\n        $expiration_delay = (int)$CFG_GLPI['password_expiration_delay'];\n\n        if (-1 === $expiration_delay) {\n            return null;\n        }\n\n        return strtotime(\n            '+ ' . $expiration_delay . ' days',\n            strtotime($this->fields['password_last_update'])\n        );\n    }\n\n    /**\n     * Check if password should be changed (if it expires soon).\n     *\n     * @return boolean\n     */\n    public function shouldChangePassword()\n    {\n        global $CFG_GLPI;\n\n        if ($this->hasPasswordExpired()) {\n            return true; // too late to change password, but returning false would not be logical here\n        }\n\n        $expiration_time = $this->getPasswordExpirationTime();\n        if (null === $expiration_time) {\n            return false;\n        }\n\n        $notice_delay    = (int)$CFG_GLPI['password_expiration_notice'];\n        if (-1 === $notice_delay) {\n            return false;\n        }\n\n        $notice_time = strtotime('- ' . $notice_delay . ' days', $expiration_time);\n\n        return $notice_time < time();\n    }\n\n    /**\n     * Check if password expired.\n     *\n     * @return boolean\n     */\n    public function hasPasswordExpired()\n    {\n\n        $expiration_time = $this->getPasswordExpirationTime();\n        if (null === $expiration_time) {\n            return false;\n        }\n\n        return $expiration_time < time();\n    }\n\n    public static function getFriendlyNameSearchCriteria(string $filter): array\n    {\n        $table     = self::getTable();\n        $login     = DBmysql::quoteName(\"$table.name\");\n        $firstname = DBmysql::quoteName(\"$table.firstname\");\n        $lastname  = DBmysql::quoteName(\"$table.realname\");\n\n        $filter = strtolower($filter);\n        $filter_no_spaces = str_replace(\" \", \"\", $filter);\n\n        return [\n            'OR' => [\n                ['RAW' => [\"LOWER($login)\" => ['LIKE', \"%$filter%\"]]],\n                ['RAW' => [\"LOWER(REPLACE(CONCAT($firstname, $lastname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n                ['RAW' => [\"LOWER(REPLACE(CONCAT($lastname, $firstname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n            ]\n        ];\n    }\n\n    public static function getFriendlyNameFields(string $alias = \"name\")\n    {\n        $config = Config::getConfigurationValues('core');\n        if ($config['names_format'] == User::FIRSTNAME_BEFORE) {\n            $first = \"firstname\";\n            $second = \"realname\";\n        } else {\n            $first = \"realname\";\n            $second = \"firstname\";\n        }\n\n        $table  = self::getTable();\n        $first  = DBmysql::quoteName(\"$table.$first\");\n        $second = DBmysql::quoteName(\"$table.$second\");\n        $alias  = DBmysql::quoteName($alias);\n        $name   = DBmysql::quoteName(self::getNameField());\n\n        return new QueryExpression(\"IF(\n            $first <> '' && $second <> '',\n            CONCAT($first, ' ', $second),\n            $name\n         ) AS $alias\");\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-user\";\n    }\n\n    /**\n     * Add groups stored in \"_ldap_rules/groups_id\" special input\n     */\n    public function applyGroupsRules()\n    {\n        if (!isset($this->input[\"_ldap_rules\"]['groups_id'])) {\n            return;\n        }\n\n        $group_ids = array_unique($this->input[\"_ldap_rules\"]['groups_id']);\n        foreach ($group_ids as $group_id) {\n            $group_user = new Group_User();\n\n            $data = [\n                'groups_id' => $group_id,\n                'users_id'  => $this->getId()\n            ];\n\n            if (!$group_user->getFromDBByCrit($data)) {\n                $group_user->add($data);\n            }\n        }\n    }\n\n    /**\n     * Get anonymized name for user instance.\n     *\n     * @param int $users_id\n     * @param int $entities_id\n     *\n     * @return string|null\n     */\n    public function getAnonymizedName(?int $entities_id = null): ?string\n    {\n        switch (Entity::getAnonymizeConfig($entities_id)) {\n            default:\n            case Entity::ANONYMIZE_DISABLED:\n                return null;\n\n            case Entity::ANONYMIZE_USE_GENERIC:\n                return __(\"Helpdesk user\");\n\n            case Entity::ANONYMIZE_USE_NICKNAME:\n                return $this->fields['nickname'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get anonymized name for user having given ID.\n     *\n     * @param int $users_id\n     * @param int $entities_id\n     *\n     * @return string|null\n     */\n    public static function getAnonymizedNameForUser(int $users_id, ?int $entities_id = null): ?string\n    {\n        switch (Entity::getAnonymizeConfig($entities_id)) {\n            default:\n            case Entity::ANONYMIZE_DISABLED:\n                return null;\n\n            case Entity::ANONYMIZE_USE_GENERIC:\n                return __(\"Helpdesk user\");\n\n            case Entity::ANONYMIZE_USE_NICKNAME:\n                $user = new User();\n                if (!$user->getFromDB($users_id)) {\n                    return '';\n                }\n\n                return $user->fields['nickname'] ?? '';\n        }\n\n        return null;\n    }\n\n    /**\n     * Print a simplified user form.\n     *\n     * @param integer $ID    ID of the user\n     * @param array $options Options\n     *     - string   target        Form target\n     *     - boolean  withtemplate  Template or basic item\n     *\n     * @return boolean true\n     */\n    public function showSystemUserForm($ID, array $options = []): bool\n    {\n        $this->initForm($ID, $options);\n\n        $formtitle = $this->getTypeName(1);\n        $options['formtitle']   = $formtitle;\n        $options['formoptions'] = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n        $options['candel'] = false;\n        $options['canedit'] = self::canUpdate();\n        $this->showFormHeader($options);\n        $rand = mt_rand();\n\n        echo \"<tr class='tab_bg_1'>\";\n        $surnamerand = mt_rand();\n        echo \"<td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td>\";\n        echo \"<td>\";\n        echo Html::input(\n            'realname',\n            [\n                'value' => $this->fields['realname'],\n                'id'    => \"textfield_realname$surnamerand\",\n            ]\n        );\n        echo \"</td>\";\n\n        echo \"<td rowspan='3'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n        echo \"<td rowspan='3'>\";\n        echo self::getPictureForUser($ID);\n\n        echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n        echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\" . __('Clear');\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        $firstnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n        echo Html::input(\n            'firstname',\n            [\n                'value' => $this->fields['firstname'],\n                'id'    => \"textfield_firstname$firstnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr><td colspan='2'>\";\n        echo \"<span>\";\n        echo  __(\"This is a special user used for automated actions. \");\n        echo '<br>';\n        echo  __(\"You can set its name to your organisation's name. \");\n        echo \"</span>\";\n        echo \"</td></tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n    public function getPictureForUser(int $ID): string\n    {\n        return TemplateRenderer::getInstance()->render('components/user/picture.html.twig', [\n            'users_id'  => $ID,\n            'with_link' => false,\n        ]);\n    }\n\n    /**\n     * Get user link.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserLink(bool $enable_anonymization = false): string\n    {\n        if (\n            $enable_anonymization\n            && $this->fields['id'] != $_SESSION['glpiID']\n            && Session::getCurrentInterface() == 'helpdesk'\n            && ($anon = $this->getAnonymizedName()) !== null\n        ) {\n           // if anonymized name active, return only the anonymized name\n            return $anon;\n        }\n\n        return $this->getLink();\n    }\n\n    /**\n     * Get user picture path.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getPicturePath(bool $enable_anonymization = false): string\n    {\n        global $CFG_GLPI;\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && Entity::getAnonymizeConfig() !== Entity::ANONYMIZE_DISABLED) {\n            return $CFG_GLPI[\"root_doc\"] . '/pics/picture.png';\n        }\n\n        $path = Toolbox::getPictureUrl($this->fields['picture'], false);\n        if (!empty($path)) {\n            return $path;\n        }\n\n        return $CFG_GLPI[\"root_doc\"] . '/pics/picture.png';\n    }\n\n    /**\n     * Get user thumbnail picture path.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return null|string\n     */\n    public function getThumbnailPicturePath(bool $enable_anonymization = false): ?string\n    {\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && Entity::getAnonymizeConfig() !== Entity::ANONYMIZE_DISABLED) {\n            return null;\n        }\n\n        $path = User::getThumbnailURLForPicture($this->fields['picture']);\n        if (!empty($path)) {\n            return $path;\n        }\n\n        return null;\n    }\n\n    /**\n     * Get user initials.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserInitials(bool $enable_anonymization = false): string\n    {\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && ($anon = $this->getAnonymizedName()) !== null) {\n           // if anonymized name active, return two first letters of the anon name\n            return mb_strtoupper(mb_substr($anon, 0, 2));\n        }\n\n        $initials = mb_substr($this->fields['firstname'] ?? '', 0, 1) . mb_substr($this->fields['realname'] ?? '', 0, 1);\n        if (empty($initials)) {\n            $initials = mb_substr($this->fields['name'] ?? '', 0, 2);\n        }\n        return mb_strtoupper($initials);\n    }\n\n    /**\n     * Return background color corresponding to user initials.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserInitialsBgColor(bool $enable_anonymization = false): string\n    {\n        return Toolbox::getColorForString($this->getUserInitials($enable_anonymization));\n    }\n\n    /**\n     * Find one user which match the given token and asked for a password reset\n     * less than one day ago\n     *\n     * @param string $token password_forget_token\n     *\n     * @return User|null The matching user or null if zero or more than one user\n     *                   were found\n     */\n    public static function getUserByForgottenPasswordToken(string $token): ?User\n    {\n        global $DB;\n\n        if (empty($token)) {\n            return null;\n        }\n\n        // Find users which match the given token and asked for a password reset\n        // less than one day ago\n        $iterator = $DB->request([\n            'SELECT' => 'id',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'password_forget_token'       => $token,\n                new \\QueryExpression('NOW() < ADDDATE(' . $DB->quoteName('password_forget_token_date') . ', INTERVAL 1 DAY)')\n            ]\n        ]);\n\n        // Check that we found exactly one user\n        if (count($iterator) !== 1) {\n            return null;\n        }\n\n        // Get first row, should use current() when updated to GLPI 10\n        $data = iterator_to_array($iterator);\n        $data = array_pop($data);\n\n        // Try to load the user\n        $user = new self();\n        if (!$user->getFromDB($data['id'])) {\n            return null;\n        }\n\n        return $user;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Event;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n * Document class\n **/\nclass Document extends CommonDBTM\n{\n    use Glpi\\Features\\TreeBrowse;\n\n   // From CommonDBTM\n    public $dohistory                   = true;\n\n    protected static $forward_entity_to = ['Document_Item'];\n\n    public static $rightname                   = 'document';\n    public static $tag_prefix                  = '#';\n    protected $usenotepad               = true;\n\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('Document', 'Documents', $nb);\n    }\n\n\n    /**\n     * Check if given object can have Document\n     *\n     * @since 0.85\n     *\n     * @param string|object $item An object or a string\n     *\n     * @return boolean\n     **/\n    public static function canApplyOn($item)\n    {\n        global $CFG_GLPI;\n\n       // All devices can have documents!\n        if (\n            is_a($item, 'Item_Devices', true)\n            || is_a($item, 'CommonDevice', true)\n        ) {\n            return true;\n        }\n\n       // We also allow direct items to check\n        if ($item instanceof CommonGLPI) {\n            $item = $item->getType();\n        }\n\n        if (in_array($item, $CFG_GLPI['document_types'])) {\n            return true;\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get all the types that can have a document\n     *\n     * @since 0.85\n     *\n     * @return array of the itemtypes\n     **/\n    public static function getItemtypesThatCanHave()\n    {\n        global $CFG_GLPI;\n\n        return array_merge(\n            $CFG_GLPI['document_types'],\n            CommonDevice::getDeviceTypes(),\n            Item_Devices::getDeviceTypes()\n        );\n    }\n\n\n    /**\n     * @see CommonGLPI::getMenuShorcut()\n     *\n     * @since 0.85\n     **/\n    public static function getMenuShorcut()\n    {\n        return 'd';\n    }\n\n\n    public static function canCreate()\n    {\n\n       // Have right to add document OR ticket followup\n        return (Session::haveRight('document', CREATE)\n              || Session::haveRight('followup', ITILFollowup::ADDMYTICKET));\n    }\n\n\n    public function canCreateItem()\n    {\n\n        if (isset($this->input['itemtype']) && isset($this->input['items_id'])) {\n            if ($item = getItemForItemtype($this->input['itemtype'])) {\n                if ($item->canAddItem('Document')) {\n                    return true;\n                }\n            }\n        }\n\n       // From Ticket Document Tab => check right to add followup.\n        if (\n            isset($this->fields['tickets_id'])\n            && ($this->fields['tickets_id'] > 0)\n        ) {\n            $ticket = new Ticket();\n            if ($ticket->getFromDB($this->fields['tickets_id'])) {\n                return $ticket->canAddFollowups();\n            }\n        }\n\n        if (Document::canCreate()) {\n            return parent::canCreateItem();\n        }\n        return false;\n    }\n\n\n    public function cleanDBonPurge()\n    {\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Document_Item::class,\n            ]\n        );\n\n       // UNLINK DU FICHIER\n        if (!empty($this->fields[\"filepath\"])) {\n            if (\n                is_file(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])\n                && !is_dir(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])\n                && (countElementsInTable(\n                    $this->getTable(),\n                    ['sha1sum' => $this->fields[\"sha1sum\"] ]\n                ) <= 1)\n            ) {\n                if (unlink(GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"])) {\n                    Session::addMessageAfterRedirect(sprintf(\n                        __('Succesful deletion of the file %s'),\n                        GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"]\n                    ));\n                } else {\n                    Session::addMessageAfterRedirect(\n                        sprintf(\n                            __('Failed to delete the file %s'),\n                            GLPI_DOC_DIR . \"/\" . $this->fields[\"filepath\"]\n                        ),\n                        false,\n                        ERROR\n                    );\n                }\n            }\n        }\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab('Document_Item', $ong, $options);\n        $this->addStandardTab('Notepad', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function prepareInputForAdd($input)\n    {\n        global $CFG_GLPI;\n\n       // security (don't accept filename from $_REQUEST)\n        if (array_key_exists('filename', $_REQUEST)) {\n            unset($input['filename']);\n        }\n\n        if ($uid = Session::getLoginUserID()) {\n            $input[\"users_id\"] = Session::getLoginUserID();\n        }\n\n       // Create a doc only selecting a file from a item form\n        $create_from_item = false;\n        if (\n            isset($input[\"items_id\"])\n            && isset($input[\"itemtype\"])\n            && ($item = getItemForItemtype($input[\"itemtype\"]))\n            && ($input[\"items_id\"] > 0)\n        ) {\n            $typename = $item->getTypeName(1);\n            $name     = NOT_AVAILABLE;\n\n            if ($item->getFromDB($input[\"items_id\"])) {\n                $name = $item->getNameID();\n            }\n           //TRANS: %1$s is Document, %2$s is item type, %3$s is item name\n            $input[\"name\"] = addslashes(Html::resume_text(\n                sprintf(\n                    __('%1$s: %2$s'),\n                    Document::getTypeName(1),\n                    sprintf(__('%1$s - %2$s'), $typename, $name)\n                ),\n                200\n            ));\n            $create_from_item = true;\n        }\n\n        $upload_ok = false;\n        if (isset($input[\"_filename\"]) && !(empty($input[\"_filename\"]) == 1)) {\n            $upload_ok = $this->moveDocument($input, stripslashes(array_shift($input[\"_filename\"])));\n        } else if (isset($input[\"upload_file\"]) && !empty($input[\"upload_file\"])) {\n           // Move doc from upload dir\n            $upload_ok = $this->moveUploadedDocument($input, $input[\"upload_file\"]);\n        } else if (isset($input['filepath']) && file_exists(GLPI_DOC_DIR . '/' . $input['filepath'])) {\n           // Document is created using an existing document file\n            $upload_ok = true;\n        }\n\n       // Tag\n        if (isset($input[\"_tag_filename\"]) && !empty($input[\"_tag_filename\"]) == 1) {\n            $input['tag'] = array_shift($input[\"_tag_filename\"]);\n        }\n\n        if (!isset($input[\"tag\"]) || empty($input[\"tag\"])) {\n            $input['tag'] = Rule::getUuid();\n        }\n\n       // Upload failed : do not create document\n        if ($create_from_item && !$upload_ok) {\n            return false;\n        }\n\n       // Default document name\n        if (\n            (!isset($input['name']) || empty($input['name']))\n            && isset($input['filename'])\n        ) {\n            $input['name'] = $input['filename'];\n        }\n\n        unset($input[\"upload_file\"]);\n\n       // Don't add if no file\n        if (\n            isset($input[\"_only_if_upload_succeed\"])\n            && $input[\"_only_if_upload_succeed\"]\n            && (!isset($input['filename']) || empty($input['filename']))\n        ) {\n            return false;\n        }\n\n       // Set default category for document linked to tickets\n        if (\n            isset($input['itemtype']) && ($input['itemtype'] == 'Ticket')\n            && (!isset($input['documentcategories_id']) || ($input['documentcategories_id'] == 0))\n        ) {\n            $input['documentcategories_id'] = $CFG_GLPI[\"documentcategories_id_forticket\"];\n        }\n\n        if (isset($input['link']) && !empty($input['link']) && !Toolbox::isValidWebUrl($input['link'])) {\n            Session::addMessageAfterRedirect(\n                __('Invalid link'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n       /* Unicity check\n       if (isset($input['sha1sum'])) {\n         // Check if already upload in the current entity\n         $crit = array('sha1sum'=>$input['sha1sum'],\n                       'entities_id'=>$input['entities_id']);\n         foreach ($DB->request($this->getTable(), $crit) as $data) {\n            $link=$this->getFormURL();\n            Session::addMessageAfterRedirect(__('\"A document with that filename has already been attached to another record.').\n               \"&nbsp;: <a href=\\\"\".$link.\"?id=\".\n                     $data['id'].\"\\\">\".$data['name'].\"</a>\",\n               false, ERROR, true);\n            return false;\n         }\n       } */\n        return $input;\n    }\n\n\n    public function post_addItem()\n    {\n\n        if (\n            isset($this->input[\"items_id\"])\n            && isset($this->input[\"itemtype\"])\n            && (($this->input[\"items_id\"] > 0)\n              || (($this->input[\"items_id\"] == 0)\n                  && ($this->input[\"itemtype\"] == 'Entity')))\n            && !empty($this->input[\"itemtype\"])\n        ) {\n            $docitem = new Document_Item();\n            $docitem->add(['documents_id' => $this->fields['id'],\n                'itemtype'     => $this->input[\"itemtype\"],\n                'items_id'     => $this->input[\"items_id\"]\n            ]);\n\n            Event::log(\n                $this->fields['id'],\n                \"documents\",\n                4,\n                \"document\",\n                //TRANS: %s is the user login\n                sprintf(__('%s adds a link with an item'), $_SESSION[\"glpiname\"])\n            );\n        }\n    }\n\n\n    public function post_getFromDB()\n    {\n        if (\n            isAPI()\n            && (isset($_SERVER['HTTP_ACCEPT']) && $_SERVER['HTTP_ACCEPT'] == 'application/octet-stream'\n              || isset($_GET['alt']) && $_GET['alt'] == 'media')\n        ) {\n           // This is a API request to download the document\n            $this->send();\n            exit();\n        }\n    }\n\n\n    public function prepareInputForUpdate($input)\n    {\n\n       // security (don't accept filename from $_REQUEST)\n        if (array_key_exists('filename', $_REQUEST)) {\n            unset($input['filename']);\n        }\n\n        if (isset($input['current_filepath'])) {\n            if (isset($input[\"_filename\"]) && !empty($input[\"_filename\"]) == 1) {\n                $this->moveDocument($input, stripslashes(array_shift($input[\"_filename\"])));\n            } else if (isset($input[\"upload_file\"]) && !empty($input[\"upload_file\"])) {\n               // Move doc from upload dir\n                $this->moveUploadedDocument($input, $input[\"upload_file\"]);\n            }\n        }\n\n        unset($input['current_filepath']);\n        unset($input['current_filename']);\n\n        if (isset($input['link']) && !empty($input['link'])  && !Toolbox::isValidWebUrl($input['link'])) {\n            Session::addMessageAfterRedirect(\n                __('Invalid link'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        return $input;\n    }\n\n\n    /**\n     * Print the document form\n     *\n     * @param $ID        integer ID of the item\n     * @param $options   array\n     *     - target filename : where to go when done.\n     *     - withtemplate boolean : template or basic item\n     *\n     * @return void\n     **/\n    public function showForm($ID, array $options = [])\n    {\n        $this->initForm($ID, $options);\n       // $options['formoptions'] = \" enctype='multipart/form-data'\";\n        $this->showFormHeader($options);\n\n        $showuserlink = 0;\n        if (Session::haveRight('user', READ)) {\n            $showuserlink = 1;\n        }\n        if ($ID > 0) {\n            echo \"<tr><th colspan='2'>\";\n            if ($this->fields[\"users_id\"] > 0) {\n                printf(__('Added by %s'), getUserName($this->fields[\"users_id\"], $showuserlink));\n            } else {\n                echo \"&nbsp;\";\n            }\n            echo \"</th>\";\n            echo \"<th colspan='2'>\";\n\n           //TRANS: %s is the datetime of update\n            printf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n\n            echo \"</th></tr>\\n\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Name') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('name', ['value' => $this->fields['name']]);\n        echo \"</td>\";\n        if ($ID > 0) {\n            echo \"<td>\" . __('Current file') . \"</td>\";\n            echo \"<td>\" . $this->getDownloadLink(null, 45);\n            echo \"<input type='hidden' name='current_filepath' value='\" . $this->fields[\"filepath\"] . \"'>\";\n            echo \"<input type='hidden' name='current_filename' value='\" . $this->fields[\"filename\"] . \"'>\";\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan=2>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Heading') . \"</td>\";\n        echo \"<td>\";\n        DocumentCategory::dropdown(['value' => $this->fields[\"documentcategories_id\"]]);\n        echo \"</td>\";\n        if ($ID > 0) {\n            echo \"<td>\" . sprintf(__('%1$s (%2$s)'), __('Checksum'), __('SHA1')) . \"</td>\";\n            echo \"<td>\" . $this->fields[\"sha1sum\"];\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan=2>&nbsp;</td>\";\n        }\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Web link') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('link', ['value' => $this->fields['link']]);\n        echo \"</td>\";\n        echo \"<td rowspan='3' class='middle'>\" . __('Comments') . \"</td>\";\n        echo \"<td class='middle' rowspan='3'>\";\n        echo \"<textarea class='form-control' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('MIME type') . \"</td>\";\n        echo \"<td>\";\n        echo Html::input('mime', ['value' => $this->fields['mime']]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Blacklisted for import') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"is_blacklisted\", $this->fields[\"is_blacklisted\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Use a FTP installed file') . \"</td>\";\n        echo \"<td>\";\n        $this->showUploadedFilesDropdown(\"upload_file\");\n        echo \"</td>\";\n\n        echo \"<td>\" . sprintf(__('%1$s (%2$s)'), __('File'), self::getMaxUploadSize()) . \"</td>\";\n        echo \"<td>\";\n        Html::file();\n        echo \"</td></tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Get max upload size from php config\n     **/\n    public static function getMaxUploadSize()\n    {\n        global $CFG_GLPI;\n\n       //TRANS: %s is a size\n        return sprintf(__('%s Mio max'), $CFG_GLPI['document_max_size']);\n    }\n\n\n    /**\n     * Send a document to navigator\n     *\n     * @param string $context Context to resize image, if any\n     **/\n    public function send($context = null)\n    {\n        $file = GLPI_DOC_DIR . \"/\" . $this->fields['filepath'];\n        if ($context !== null) {\n            $file = self::getImage($file, $context);\n        }\n        Toolbox::sendFile($file, $this->fields['filename'], $this->fields['mime']);\n    }\n\n\n    /**\n     * Get download link for a document\n     *\n     * @param CommonDBTM|null   $linked_item    Item linked to the document, to check access right\n     * @param integer           $len            maximum length of displayed string (default 20)\n     *\n     **/\n    public function getDownloadLink($linked_item = null, $len = 20)\n    {\n        global $DB, $CFG_GLPI;\n\n        $link_params = '';\n        if (is_string($linked_item)) {\n            // Old behaviour.\n            // TODO: Deprecate it in GLPI 10.1.\n            // Toolbox::deprecated('Passing additionnal URL parameters in Document::getDownloadLink() is deprecated.');\n            $linked_item = null;\n            $link_params = $linked_item;\n        } elseif ($linked_item !== null && !($linked_item instanceof CommonDBTM)) {\n            throw new \\InvalidArgumentException();\n        } elseif ($linked_item !== null) {\n            $link_params = sprintf('&itemtype=%s&items_id=%s', $linked_item->getType(), $linked_item->getID());\n        }\n\n        $splitter = explode(\"/\", $this->fields['filename']);\n\n        if (count($splitter) == 2) {\n           // Old documents in EXT/filename\n            $fileout = $splitter[1];\n        } else {\n           // New document\n            $fileout = $this->fields['filename'];\n        }\n\n        $initfileout = $fileout;\n\n        if (Toolbox::strlen($fileout) > $len) {\n            $fileout = Toolbox::substr($fileout, 0, $len) . \"&hellip;\";\n        }\n\n        $out   = '';\n        $open  = '';\n        $close = '';\n\n        $can_view_options = $linked_item !== null\n            ? ['itemtype' => $linked_item->getType(), 'items_id' => $linked_item->getID()]\n            : ['itemtype' => Ticket::getType(), 'items_id' => $this->fields['tickets_id']];\n\n        if (self::canView() || $this->canViewFile($can_view_options)) {\n            $open  = \"<a href='\" . $CFG_GLPI[\"root_doc\"] . \"/front/document.send.php?docid=\" .\n                    $this->fields['id'] . $link_params . \"' alt=\\\"\" . $initfileout . \"\\\"\n                    title=\\\"\" . $initfileout . \"\\\"target='_blank'>\";\n            $close = \"</a>\";\n        }\n        $splitter = explode(\"/\", $this->fields['filepath']);\n\n        if (count($splitter)) {\n            $iterator = $DB->request([\n                'SELECT' => 'icon',\n                'FROM'   => 'glpi_documenttypes',\n                'WHERE'  => [\n                    'ext'    => ['LIKE', $splitter[0]],\n                    'icon'   => ['<>', '']\n                ]\n            ]);\n\n            if (count($iterator) > 0) {\n                $result = $iterator->current();\n                $icon = $result['icon'];\n                if (!file_exists(GLPI_ROOT . \"/pics/icones/$icon\")) {\n                    $icon = \"defaut-dist.png\";\n                }\n                $out .= \"&nbsp;<img class='middle' style='margin-left:3px; margin-right:6px;' alt=\\\"\" .\n                              $initfileout . \"\\\" title=\\\"\" . $initfileout . \"\\\" src='\" .\n                              $CFG_GLPI[\"typedoc_icon_dir\"] . \"/$icon'>\";\n            }\n        }\n        $out .= \"$open<span class='b'>$fileout</span>$close\";\n\n        return $out;\n    }\n\n\n    /**\n     * find a document with a file attached\n     *\n     * @param integer $entity    entity of the document\n     * @param string  $path      path of the searched file\n     *\n     * @return boolean\n     **/\n    public function getFromDBbyContent($entity, $path)\n    {\n\n        global $DB;\n\n        if (empty($path)) {\n            return false;\n        }\n\n        $sum = sha1_file($path);\n        if (!$sum) {\n            return false;\n        }\n\n        $doc_iterator = $DB->request(\n            [\n                'SELECT' => 'id',\n                'FROM'   => $this->getTable(),\n                'WHERE'  => [\n                    $this->getTable() . '.sha1sum'      => $sum,\n                    $this->getTable() . '.entities_id'  => $entity\n                ],\n                'LIMIT'  => 1,\n            ]\n        );\n\n        if ($doc_iterator->count() === 0) {\n            return false;\n        }\n\n        $doc_data = $doc_iterator->current();\n        return $this->getFromDB($doc_data['id']);\n    }\n\n\n    /**\n     * Check is the curent user is allowed to see the file.\n     *\n     * @param array $options array of possible options used to check rights:\n     *     - itemtype/items_id:     itemtype and ID of item linked to document\n     *     - changes_id (legacy):   ID of Change linked to document. Ignored if itemtype/items_id options are set.\n     *     - problems_id (legacy):  ID of Problem linked to document. Ignored if itemtype/items_id options are set.\n     *     - tickets_id (legacy):   ID of Ticket linked to document. Ignored if itemtype/items_id options are set.\n     *\n     * @return boolean\n     **/\n    public function canViewFile(array $options = [])\n    {\n\n       // Check if it is my doc\n        if (\n            Session::getLoginUserID()\n            && ($this->can($this->fields[\"id\"], READ)\n              || ($this->fields[\"users_id\"] === Session::getLoginUserID()))\n        ) {\n            return true;\n        }\n\n        if ($this->canViewFileFromReminder()) {\n            return true;\n        }\n\n        if ($this->canViewFileFromKnowbaseItem()) {\n            return true;\n        }\n\n        // new options\n        $itemtype = $options['itemtype'] ?? null;\n        $items_id = $options['items_id'] ?? null;\n\n        // legacy options\n        $changes_id  = $itemtype === null ? ($options['changes_id'] ?? null) : ($itemtype === 'Change' ? $items_id : null);\n        $problems_id = $itemtype === null ? ($options['problems_id'] ?? null) : ($itemtype === 'Problem' ? $items_id : null);\n        $tickets_id  = $itemtype === null ? ($options['tickets_id'] ?? null) : ($itemtype === 'Ticket' ? $items_id : null);\n\n        if ($changes_id !== null && $this->canViewFileFromItilObject('Change', $changes_id)) {\n            return true;\n        }\n\n        if ($problems_id !== null && $this->canViewFileFromItilObject('Problem', $problems_id)) {\n            return true;\n        }\n\n        if (\n            $itemtype !== null\n            && $items_id !== null\n            && $this->canViewFileFromItem($itemtype, $items_id)\n        ) {\n            return true;\n        }\n\n        // The following case should be reachable from the API\n        self::loadAPISessionIfExist();\n\n        if ($tickets_id !== null && $this->canViewFileFromItilObject('Ticket', $tickets_id)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Try to load the session from the API Tolen\n     *\n     * @since 9.5\n     */\n    private static function loadAPISessionIfExist()\n    {\n        $session_token = \\Toolbox::getHeader('Session-Token');\n\n       // No api token found\n        if ($session_token === null) {\n            return;\n        }\n\n        $current_session = session_id();\n\n       // Clean current session\n        if (!empty($current_session) && $current_session !== $session_token) {\n            session_destroy();\n        }\n\n       // Load API session\n        session_id($session_token);\n        Session::start();\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a Reminder.\n     *\n     * @global DBmysql $DB\n     * @return boolean\n     *\n     * @TODO Use DBmysqlIterator instead of raw SQL\n     */\n    private function canViewFileFromReminder()\n    {\n\n        global $DB;\n\n        if (!Session::getLoginUserID()) {\n            return false;\n        }\n\n        $criteria = array_merge_recursive(\n            [\n                'COUNT'     => 'cpt',\n                'FROM'      => 'glpi_documents_items',\n                'LEFT JOIN' => [\n                    'glpi_reminders'  => [\n                        'ON' => [\n                            'glpi_documents_items'  => 'items_id',\n                            'glpi_reminders'        => 'id', [\n                                'AND' => [\n                                    'glpi_documents_items.itemtype'  => 'Reminder'\n                                ]\n                            ]\n                        ]\n                    ]\n                ],\n                'WHERE'     => [\n                    'glpi_documents_items.documents_id' => $this->fields['id']\n                ]\n            ],\n            Reminder::getVisibilityCriteria()\n        );\n\n        $result = $DB->request($criteria)->current();\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a KnowbaseItem.\n     *\n     * @global array $CFG_GLPI\n     * @global DBmysql $DB\n     * @return boolean\n     */\n    private function canViewFileFromKnowbaseItem()\n    {\n\n        global $CFG_GLPI, $DB;\n\n       // Knowbase items can be viewed by non connected user in case of public FAQ\n        if (!Session::getLoginUserID() && !$CFG_GLPI['use_public_faq']) {\n            return false;\n        }\n\n        if (\n            !Session::haveRight(KnowbaseItem::$rightname, READ)\n            && !Session::haveRight(KnowbaseItem::$rightname, KnowbaseItem::READFAQ)\n            && !$CFG_GLPI['use_public_faq']\n        ) {\n            return false;\n        }\n\n        $visibilityCriteria = KnowbaseItem::getVisibilityCriteria();\n\n        $request = [\n            'FROM'      => 'glpi_documents_items',\n            'COUNT'     => 'cpt',\n            'LEFT JOIN' => [\n                'glpi_knowbaseitems' => [\n                    'FKEY' => [\n                        'glpi_knowbaseitems'   => 'id',\n                        'glpi_documents_items' => 'items_id',\n                        ['AND' => ['glpi_documents_items.itemtype' => 'KnowbaseItem']]\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                'glpi_documents_items.documents_id' => $this->fields['id'],\n            ]\n        ];\n\n        if (array_key_exists('LEFT JOIN', $visibilityCriteria) && count($visibilityCriteria['LEFT JOIN']) > 0) {\n            $request['LEFT JOIN'] += $visibilityCriteria['LEFT JOIN'];\n        }\n        if (array_key_exists('WHERE', $visibilityCriteria) && count($visibilityCriteria['WHERE']) > 0) {\n            $request['WHERE'] += $visibilityCriteria['WHERE'];\n        }\n\n        $result = $DB->request($request)->current();\n\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from a CommonITILObject.\n     *\n     * @global DBmysql $DB\n     * @param string  $itemtype\n     * @param integer $items_id\n     * @return boolean\n     */\n    private function canViewFileFromItilObject($itemtype, $items_id)\n    {\n\n        global $DB;\n\n        if (!Session::getLoginUserID()) {\n            return false;\n        }\n\n       /* @var CommonITILObject $itil */\n        $itil = new $itemtype();\n\n        if (!$itil->can($items_id, READ)) {\n            return false;\n        }\n\n        $itil->getFromDB($items_id);\n\n        $result = $DB->request([\n            'FROM'  => Document_Item::getTable(),\n            'COUNT' => 'cpt',\n            'WHERE' => [\n                $itil->getAssociatedDocumentsCriteria(),\n                'documents_id' => $this->fields['id']\n            ]\n        ])->current();\n\n        return $result['cpt'] > 0;\n    }\n\n    /**\n     * Check if file of current instance can be viewed from item having given itemtype/items_id.\n     *\n     * @global DBmysql $DB\n     *\n     * @param string  $itemtype\n     * @param integer $items_id\n     *\n     * @return boolean\n     */\n    private function canViewFileFromItem($itemtype, $items_id): bool\n    {\n        global $DB;\n\n        $item = new $itemtype();\n\n        if (!$item->can($items_id, READ)) {\n            return false;\n        }\n\n        /** @var CommonDBTM $item */\n        $item->getFromDB($items_id);\n        if (!$item->canViewItem()) {\n            return false;\n        }\n\n        $result = $DB->request(\n            [\n                'FROM'  => Document_Item::getTable(),\n                'COUNT' => 'cpt',\n                'WHERE' => [\n                    'itemtype' => $itemtype,\n                    'items_id' => $items_id,\n                ]\n            ]\n        )->current();\n\n        if ($result['cpt'] === 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static function rawSearchOptionsToAdd($itemtype = null)\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'document',\n            'name'               => self::getTypeName(Session::getPluralNumber())\n        ];\n\n        $tab[] = [\n            'id'                 => '119',\n            'table'              => 'glpi_documents_items',\n            'field'              => 'id',\n            'name'               => _x('quantity', 'Number of documents'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'itemtype_item'\n            ]\n        ];\n\n        return $tab;\n    }\n\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'massiveaction'      => false,\n            'datatype'           => 'number'\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'filename',\n            'name'               => __('File'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'link',\n            'name'               => __('Web link'),\n            'datatype'           => 'weblink',\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'mime',\n            'name'               => __('MIME type'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'tag',\n            'name'               => __('Tag'),\n            'datatype'           => 'text',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => 'glpi_documentcategories',\n            'field'              => 'completename',\n            'name'               => __('Heading'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '80',\n            'table'              => 'glpi_entities',\n            'field'              => 'completename',\n            'name'               => Entity::getTypeName(1),\n            'massiveaction'      => false,\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '86',\n            'table'              => $this->getTable(),\n            'field'              => 'is_recursive',\n            'name'               => __('Child entities'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => $this->getTable(),\n            'field'              => 'sha1sum',\n            'name'               => sprintf(__('%1$s (%2$s)'), __('Checksum'), __('SHA1')),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '72',\n            'table'              => 'glpi_documents_items',\n            'field'              => 'id',\n            'name'               => _x('quantity', 'Number of associated items'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'child'\n            ]\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        $tab = array_merge($tab, Notepad::rawSearchOptionsToAdd());\n\n        return $tab;\n    }\n\n\n    /**\n     * Move a file to a new location\n     * Work even if dest file already exists\n     *\n     * @param string $srce   source file path\n     * @param string $dest   destination file path\n     *\n     * @return boolean : success\n     **/\n    public static function renameForce($srce, $dest)\n    {\n\n       // File already present\n        if (is_file($dest)) {\n           // As content is the same (sha1sum), no need to copy\n            @unlink($srce);\n            return true;\n        }\n       // Move\n        return rename($srce, $dest);\n    }\n\n\n    /**\n     * Move an uploadd document (files in GLPI_DOC_DIR.\"/_uploads\" dir)\n     *\n     * @param array  $input     array of datas used in adding process (need current_filepath)\n     * @param string $filename  filename to move\n     *\n     * @return boolean for success / $input array is updated\n     **/\n    public function moveUploadedDocument(array &$input, $filename)\n    {\n        $prefix = '';\n        if (isset($input['_prefix_filename'])) {\n            $prefix = array_shift($input['_prefix_filename']);\n        }\n\n        $fullpath = GLPI_UPLOAD_DIR . \"/\" . $filename;\n        $filename = str_replace($prefix, '', $filename);\n\n        if (!is_dir(GLPI_UPLOAD_DIR)) {\n            Session::addMessageAfterRedirect(__(\"Upload directory doesn't exist\"), false, ERROR);\n            return false;\n        }\n\n        if (!is_file($fullpath)) {\n            Session::addMessageAfterRedirect(\n                sprintf(__('File %s not found.'), $fullpath),\n                false,\n                ERROR\n            );\n            return false;\n        }\n        $sha1sum  = sha1_file($fullpath);\n        $dir      = self::isValidDoc($filename);\n        $new_path = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$new_path) {\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && is_file(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Local file : try to detect mime type\n        $input['mime'] = Toolbox::getMime($fullpath);\n\n        if (\n            is_writable(GLPI_UPLOAD_DIR)\n            && is_writable($fullpath)\n        ) { // Move if allowed\n            if (self::renameForce($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document move succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed.'), false, ERROR);\n                return false;\n            }\n        } else { // Copy (will overwrite dest file is present)\n            if (copy($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document copy succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed'), false, ERROR);\n                return false;\n            }\n        }\n\n       // For display\n        $input['filename'] = addslashes($filename);\n       // Storage path\n        $input['filepath'] = $new_path;\n       // Checksum\n        $input['sha1sum']  = $sha1sum;\n        return true;\n    }\n\n    /**\n     * Move a document (files in GLPI_DOC_DIR.\"/_tmp\" dir)\n     *\n     * @param array  $input     array of datas used in adding process (need current_filepath)\n     * @param string $filename  filename to move\n     *\n     * @return boolean for success / $input array is updated\n     **/\n    public static function moveDocument(array &$input, $filename)\n    {\n        $prefix = '';\n        if (isset($input['_prefix_filename'])) {\n            $prefix = array_shift($input['_prefix_filename']);\n        }\n\n        $fullpath = GLPI_TMP_DIR . \"/\" . $filename;\n        $filename = str_replace($prefix, '', $filename);\n        if (!is_dir(GLPI_TMP_DIR)) {\n            Session::addMessageAfterRedirect(__(\"Temporary directory doesn't exist\"), false, ERROR);\n            return false;\n        }\n\n        if (!is_file($fullpath)) {\n            Session::addMessageAfterRedirect(\n                sprintf(__('File %s not found.'), $fullpath),\n                false,\n                ERROR\n            );\n            return false;\n        }\n        $sha1sum  = sha1_file($fullpath);\n        $dir      = self::isValidDoc($filename);\n        $new_path = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$new_path) {\n            @unlink($fullpath);\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && is_file(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Local file : try to detect mime type\n        $input['mime'] = Toolbox::getMime($fullpath);\n\n        if (\n            is_writable(GLPI_TMP_DIR)\n            && is_writable($fullpath)\n        ) { // Move if allowed\n            if (self::renameForce($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document move succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed.'), false, ERROR);\n                return false;\n            }\n        } else { // Copy (will overwrite dest file is present)\n            if (copy($fullpath, GLPI_DOC_DIR . \"/\" . $new_path)) {\n                Session::addMessageAfterRedirect(__('Document copy succeeded.'));\n            } else {\n                Session::addMessageAfterRedirect(__('File move failed'), false, ERROR);\n                @unlink($fullpath);\n                return false;\n            }\n        }\n\n       // For display\n        $input['filename'] = addslashes($filename);\n       // Storage path\n        $input['filepath'] = $new_path;\n       // Checksum\n        $input['sha1sum']  = $sha1sum;\n        return true;\n    }\n\n\n    /**\n     * Upload a new file\n     *\n     * @param &$input    array of datas need for add/update (will be completed)\n     * @param $FILEDESC        FILE descriptor\n     *\n     * @return true on success\n     **/\n    public static function uploadDocument(array &$input, $FILEDESC)\n    {\n\n        if (\n            !count($FILEDESC)\n            || empty($FILEDESC['name'])\n            || !is_file($FILEDESC['tmp_name'])\n        ) {\n            switch ($FILEDESC['error']) {\n                case 1:\n                case 2:\n                    Session::addMessageAfterRedirect(__('File too large to be added.'), false, ERROR);\n                    break;\n\n                case 4:\n                   // Session::addMessageAfterRedirect(__('No file specified.'),false,ERROR);\n                    break;\n            }\n\n            return false;\n        }\n\n        $sha1sum = sha1_file($FILEDESC['tmp_name']);\n        $dir     = self::isValidDoc($FILEDESC['name']);\n        $path    = self::getUploadFileValidLocationName($dir, $sha1sum);\n\n        if (!$sha1sum || !$dir || !$path) {\n            return false;\n        }\n\n       // Delete old file (if not used by another doc)\n        if (\n            isset($input['current_filepath'])\n            && !empty($input['current_filepath'])\n            && (countElementsInTable(\n                'glpi_documents',\n                ['sha1sum' => sha1_file(GLPI_DOC_DIR . \"/\" .\n                $input['current_filepath'])\n                ]\n            ) <= 1)\n        ) {\n            if (unlink(GLPI_DOC_DIR . \"/\" . $input['current_filepath'])) {\n                Session::addMessageAfterRedirect(sprintf(\n                    __('Succesful deletion of the file %s'),\n                    $input['current_filename']\n                ));\n            } else {\n               // TRANS: %1$s is the curent filename, %2$s is its directory\n                Session::addMessageAfterRedirect(\n                    sprintf(\n                        __('Failed to delete the file %1$s (%2$s)'),\n                        $input['current_filename'],\n                        GLPI_DOC_DIR . \"/\" . $input['current_filepath']\n                    ),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // Mime type from client\n        if (isset($FILEDESC['type']) && !empty($FILEDESC['type'])) {\n            $input['mime'] = $FILEDESC['type'];\n        }\n\n       // Move uploaded file\n        if (self::renameForce($FILEDESC['tmp_name'], GLPI_DOC_DIR . \"/\" . $path)) {\n            Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n           // For display\n            $input['filename'] = addslashes($FILEDESC['name']);\n           // Storage path\n            $input['filepath'] = $path;\n           // Checksum\n            $input['sha1sum']  = $sha1sum;\n            return true;\n        }\n        Session::addMessageAfterRedirect(\n            __('Potential upload attack or file too large. Moving temporary file failed.'),\n            false,\n            ERROR\n        );\n        return false;\n    }\n\n\n    /**\n     * Find a valid path for the new file\n     *\n     * @param string $dir      dir to search a free path for the file\n     * @param string $sha1sum  SHA1 of the file\n     *\n     * @return string\n     **/\n    public static function getUploadFileValidLocationName($dir, $sha1sum)\n    {\n        if (empty($dir)) {\n            $message = __('Unauthorized file type');\n\n            if (Session::haveRight('dropdown', READ)) {\n                $dt       = new DocumentType();\n                $message .= \" <a target='_blank' href='\" . $dt->getSearchURL() . \"' class='pointer'>\n                         <i class='fa fa-info'</i><span class='sr-only'>\" . __('Manage document types')  . \"</span></a>\";\n            }\n            Session::addMessageAfterRedirect($message, false, ERROR);\n            return '';\n        }\n\n        if (!is_dir(GLPI_DOC_DIR)) {\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __(\"The directory %s doesn't exist.\"),\n                    GLPI_DOC_DIR\n                ),\n                false,\n                ERROR\n            );\n            return '';\n        }\n        $subdir = $dir . '/' . substr($sha1sum, 0, 2);\n\n        if (\n            !is_dir(GLPI_DOC_DIR . \"/\" . $subdir)\n            && @mkdir(GLPI_DOC_DIR . \"/\" . $subdir, 0777, true)\n        ) {\n            Session::addMessageAfterRedirect(sprintf(\n                __('Create the directory %s'),\n                GLPI_DOC_DIR . \"/\" . $subdir\n            ));\n        }\n\n        if (!is_dir(GLPI_DOC_DIR . \"/\" . $subdir)) {\n            Session::addMessageAfterRedirect(\n                sprintf(\n                    __('Failed to create the directory %s. Verify that you have the correct permission'),\n                    GLPI_DOC_DIR . \"/\" . $subdir\n                ),\n                false,\n                ERROR\n            );\n            return '';\n        }\n        return $subdir . '/' . substr($sha1sum, 2) . '.' . $dir;\n    }\n\n\n    /**\n     * Show dropdown of uploaded files\n     *\n     * @param $myname dropdown name\n     **/\n    public static function showUploadedFilesDropdown($myname)\n    {\n        if (is_dir(GLPI_UPLOAD_DIR)) {\n            $uploaded_files = [];\n            if ($handle = opendir(GLPI_UPLOAD_DIR)) {\n                while (false !== ($file = readdir($handle))) {\n                    if (($file != '.') && ($file != '..') && ($file != 'remove.txt')) {\n                        $dir = self::isValidDoc($file);\n                        if (!empty($dir)) {\n                            $uploaded_files[$file] = $file;\n                        }\n                    }\n                }\n                closedir($handle);\n            }\n\n            if (count($uploaded_files)) {\n                Dropdown::showFromArray($myname, $uploaded_files, ['display_emptychoice' => true]);\n            } else {\n                echo __('No file available');\n            }\n        } else {\n            echo __(\"Upload directory doesn't exist\");\n        }\n    }\n\n\n    /**\n     * Is this file a valid file ? check based on file extension\n     *\n     * @param string $filename filename to clean\n     **/\n    public static function isValidDoc($filename)\n    {\n        global $DB;\n\n        $splitter = explode(\".\", $filename);\n        $ext      = end($splitter);\n\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_documenttypes',\n            'WHERE'  => [\n                'ext'             => ['LIKE', $ext],\n                'is_uploadable'   => 1\n            ]\n        ]);\n\n        if (count($iterator)) {\n            return Toolbox::strtoupper($ext);\n        }\n\n       // Not found try with regex one\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_documenttypes',\n            'WHERE'  => [\n                'ext'             => ['LIKE', '/%/'],\n                'is_uploadable'   => 1\n            ]\n        ]);\n\n        foreach ($iterator as $data) {\n            if (preg_match(Sanitizer::unsanitize($data['ext']) . \"i\", $ext, $results) > 0) {\n                return Toolbox::strtoupper($ext);\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Make a select box for link document\n     *\n     * Parameters which could be used in options array :\n     *    - name : string / name of the select (default is documents_id)\n     *    - entity : integer or array / restrict to a defined entity or array of entities\n     *                   (default -1 : no restriction)\n     *    - used : array / Already used items ID: not to display in dropdown (default empty)\n     *    - hide_if_no_elements  : boolean / hide dropdown if there is no elements (default false)\n     *\n     * @param $options array of possible options\n     *\n     * @return integer|string\n     *    integer if option display=true (random part of elements id)\n     *    string if option display=false (HTML code)\n     **/\n    public static function dropdown($options = [])\n    {\n        global $DB, $CFG_GLPI;\n\n        $p['name']    = 'documents_id';\n        $p['entity']  = '';\n        $p['used']    = [];\n        $p['display'] = true;\n        $p['hide_if_no_elements'] = false;\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        $subwhere = [\n            'glpi_documents.is_deleted'   => 0,\n        ] + getEntitiesRestrictCriteria('glpi_documents', '', $p['entity'], true);\n\n        if (count($p['used'])) {\n            $subwhere['NOT'] = ['id' => array_merge([0], $p['used'])];\n        }\n\n        $criteria = [\n            'FROM'   => 'glpi_documentcategories',\n            'WHERE'  => [\n                'id' => new QuerySubQuery([\n                    'SELECT'          => 'documentcategories_id',\n                    'DISTINCT'        => true,\n                    'FROM'            => 'glpi_documents',\n                    'WHERE'           => $subwhere\n                ])\n            ],\n            'ORDER'  => 'name'\n        ];\n        $iterator = $DB->request($criteria);\n\n        if ($p['hide_if_no_elements'] && $iterator->count() === 0) {\n            return;\n        }\n\n        $values = [];\n        foreach ($iterator as $data) {\n            $values[$data['id']] = $data['name'];\n        }\n        $rand = mt_rand();\n        $out  = Dropdown::showFromArray('_rubdoc', $values, ['width'               => '30%',\n            'rand'                => $rand,\n            'display'             => false,\n            'display_emptychoice' => true\n        ]);\n        $field_id = Html::cleanId(\"dropdown__rubdoc$rand\");\n\n        $params   = ['rubdoc' => '__VALUE__',\n            'entity' => $p['entity'],\n            'rand'   => $rand,\n            'myname' => $p['name'],\n            'used'   => $p['used']\n        ];\n\n        $out .= Ajax::updateItemOnSelectEvent(\n            $field_id,\n            \"show_\" . $p['name'] . $rand,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/dropdownRubDocument.php\",\n            $params,\n            false\n        );\n        $out .= \"<span id='show_\" . $p['name'] . \"$rand'>\";\n        $out .= \"</span>\\n\";\n\n        $params['rubdoc'] = 0;\n        $out .= Ajax::updateItem(\n            \"show_\" . $p['name'] . $rand,\n            $CFG_GLPI[\"root_doc\"] . \"/ajax/dropdownRubDocument.php\",\n            $params,\n            false\n        );\n        if ($p['display']) {\n            echo $out;\n            return $rand;\n        }\n        return $out;\n    }\n\n\n    public static function getMassiveActionsForItemtype(\n        array &$actions,\n        $itemtype,\n        $is_deleted = 0,\n        CommonDBTM $checkitem = null\n    ) {\n        $action_prefix = 'Document_Item' . MassiveAction::CLASS_ACTION_SEPARATOR;\n\n        if (self::canApplyOn($itemtype)) {\n            if (Document::canView()) {\n                $actions[$action_prefix . 'add']    = \"<i class='fa-fw \" . self::getIcon() . \"'></i>\" .\n                                                _x('button', 'Add a document');\n                $actions[$action_prefix . 'remove'] = _x('button', 'Remove a document');\n            }\n        }\n\n        if ((is_a($itemtype, __CLASS__, true)) && (static::canUpdate())) {\n            $actions[$action_prefix . 'add_item']    = _x('button', 'Add an item');\n            $actions[$action_prefix . 'remove_item'] = _x('button', 'Remove an item');\n        }\n    }\n\n\n    /**\n     * @since 0.85\n     *\n     * @param $string\n     *\n     * @return string\n     **/\n    public static function getImageTag($string)\n    {\n        return self::$tag_prefix . $string . self::$tag_prefix;\n    }\n\n    /**\n     * Is file an image\n     *\n     * @since 9.2.1\n     *\n     * @param string $file File name\n     *\n     * @return boolean\n     */\n    public static function isImage($file)\n    {\n        if (!file_exists($file)) {\n            return false;\n        }\n        if (extension_loaded('exif')) {\n            if (filesize($file) < 12) {\n                return false;\n            }\n            $etype = exif_imagetype($file);\n            return in_array($etype, [IMAGETYPE_JPEG, IMAGETYPE_GIF, IMAGETYPE_PNG, IMAGETYPE_BMP]);\n        } else {\n            trigger_error(\n                'For security reasons, you should consider using exif PHP extension to properly check images.',\n                E_USER_WARNING\n            );\n            $fileinfo = finfo_open(FILEINFO_MIME_TYPE);\n            return in_array(\n                finfo_file($fileinfo, $file),\n                ['image/jpeg', 'image/png','image/gif', 'image/bmp']\n            );\n        }\n    }\n\n    /**\n     * Get image path for a specified context.\n     * Will call image resize if needed.\n     *\n     * @since 9.2.1\n     *\n     * @param string  $path    Original path\n     * @param string  $context Context\n     * @param integer $mwidth  Maximal width\n     * @param integer $mheight Maximal height\n     *\n     * @return string Image path on disk\n     */\n    public static function getImage($path, $context, $mwidth = null, $mheight = null)\n    {\n        if ($mwidth === null || $mheight === null) {\n            switch ($context) {\n                case 'mail':\n                    $mwidth  = $mwidth ?? 400;\n                    $mheight = $mheight ?? 300;\n                    break;\n                case 'timeline':\n                    $mwidth  = $mwidth ?? 100;\n                    $mheight = $mheight ?? 100;\n                    break;\n                default:\n                    throw new \\RuntimeException(\"Unknown context $context!\");\n            }\n        }\n\n       //let's see if original image needs resize\n        $img_infos  = getimagesize($path);\n        if (!($img_infos[0] > $mwidth) && !($img_infos[1] > $mheight)) {\n           //no resize needed\n            return $path;\n        }\n\n        $infos = pathinfo($path);\n       // output images with possible transparency to png, other to jpg\n        $extension = in_array(strtolower($infos['extension']), ['png', 'gif']) ? 'png' : 'jpg';\n        $context_path = sprintf(\n            '%1$s_%2$s-%3$s.%4$s',\n            $infos['dirname'] . '/' . $infos['filename'],\n            $mwidth,\n            $mheight,\n            $extension\n        );\n\n       //let's check if file already exists\n        if (file_exists($context_path)) {\n            return $context_path;\n        }\n\n       //do resize\n        $result = Toolbox::resizePicture(\n            $path,\n            $context_path,\n            $mwidth,\n            $mheight,\n            0,\n            0,\n            0,\n            0,\n            ($mwidth > $mheight ? $mwidth : $mheight)\n        );\n        return ($result ? $context_path : $path);\n    }\n\n    /**\n     * Give cron information\n     *\n     * @param string $name task's name\n     *\n     * @return array of information\n     **/\n    public static function cronInfo($name)\n    {\n\n        switch ($name) {\n            case 'cleanorphans':\n                return ['description' => __('Clean orphaned documents')];\n        }\n        return [];\n    }\n\n    /**\n     * Cron for clean orphan documents (without Document_Item)\n     *\n     * @param CronTask $task CronTask object\n     *\n     * @return integer (0 : nothing done - 1 : done)\n     **/\n    public static function cronCleanOrphans(CronTask $task)\n    {\n        global $DB;\n\n        $dtable = static::getTable();\n        $ditable = Document_Item::getTable();\n       //documents that are not present in Document_Item are oprhan\n        $iterator = $DB->request([\n            'SELECT'    => [\"$dtable.id\"],\n            'FROM'      => $dtable,\n            'LEFT JOIN' => [\n                $ditable => [\n                    'ON'  => [\n                        $dtable  => 'id',\n                        $ditable => 'documents_id'\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                \"$ditable.documents_id\" => null\n            ]\n        ]);\n\n        $nb = 0;\n        if (count($iterator)) {\n            foreach ($iterator as $row) {\n                $doc = new Document();\n                $doc->delete(['id' => $row['id']], true);\n                ++$nb;\n            }\n        }\n\n        if ($nb) {\n            $task->addVolume($nb);\n            $task->log(\"Documents : $nb\");\n        }\n\n        return ($nb > 0 ? 1 : 0);\n    }\n\n\n    public static function getIcon()\n    {\n        return \"ti ti-files\";\n    }\n\n\n    /**\n     * find and load a document which is a duplicate of a file, with respect of blacklisting\n     *\n     * @param integer $entity    entity of the document\n     * @param string  $path      path of the searched file\n     *\n     * @return boolean\n     */\n    public function getDuplicateOf(int $entities_id, string $filename): bool\n    {\n        if (!$this->getFromDBbyContent($entities_id, $filename)) {\n            return false;\n        }\n\n        if ($this->fields['is_blacklisted']) {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2022 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\Exception\\ForgetPasswordException;\nuse Glpi\\Plugin\\Hooks;\nuse Glpi\\Toolbox\\Sanitizer;\nuse Sabre\\VObject;\n\nclass User extends CommonDBTM\n{\n    use Glpi\\Features\\Clonable {\n        Glpi\\Features\\Clonable::computeCloneName as baseComputeCloneName;\n    }\n    use Glpi\\Features\\TreeBrowse;\n\n   // From CommonDBTM\n    public $dohistory         = true;\n    public $history_blacklist = ['date_mod', 'date_sync', 'last_login',\n        'publicbookmarkorder', 'privatebookmarkorder'\n    ];\n\n   // NAME FIRSTNAME ORDER TYPE\n    const REALNAME_BEFORE   = 0;\n    const FIRSTNAME_BEFORE  = 1;\n\n    const IMPORTEXTAUTHUSERS  = 1024;\n    const READAUTHENT         = 2048;\n    const UPDATEAUTHENT       = 4096;\n\n    public static $rightname = 'user';\n\n    public static $undisclosedFields = [\n        'password',\n        'personal_token',\n        'api_token',\n        'cookie_token',\n    ];\n\n    private $entities = null;\n\n    public function getCloneRelations(): array\n    {\n        return [\n            Profile_User::class,\n            Group_User::class\n        ];\n    }\n\n    public function post_clone($source, $history)\n    {\n       //FIXME? clone config\n    }\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('User', 'Users', $nb);\n    }\n\n    public static function getMenuShorcut()\n    {\n        return 'u';\n    }\n\n    public static function getAdditionalMenuOptions()\n    {\n\n        if (Session::haveRight('user', self::IMPORTEXTAUTHUSERS)) {\n            return [\n                'ldap' => [\n                    'icon'  => AuthLDAP::getIcon(),\n                    'title' => AuthLDAP::getTypeName(Session::getPluralNumber()),\n                    'page'  => '/front/ldap.php',\n                ],\n            ];\n        }\n        return false;\n    }\n\n\n    public function canViewItem()\n    {\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToOneOfEntities($this->getEntities())\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canCreateItem()\n    {\n\n       // Will be created from form, with selected entity/profile\n        if (\n            isset($this->input['_profiles_id']) && ($this->input['_profiles_id'] > 0)\n            && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            && isset($this->input['_entities_id'])\n            && Session::haveAccessToEntity($this->input['_entities_id'])\n        ) {\n            return true;\n        }\n       // Will be created with default value\n        if (\n            Session::haveAccessToEntity(0) // Access to root entity (required when no default profile)\n            || (Profile::getDefault() > 0)\n        ) {\n            return true;\n        }\n\n        if (\n            ($_SESSION['glpiactive_entity'] > 0)\n            && (Profile::getDefault() == 0)\n        ) {\n            echo \"<div class='tab_cadre_fixe warning'>\" .\n                __('You must define a default profile to create a new user') . \"</div>\";\n        }\n\n        return false;\n    }\n\n\n    public function canUpdateItem()\n    {\n\n        $entities = Profile_User::getUserEntities($this->fields['id'], false);\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToOneOfEntities($entities)\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canDeleteItem()\n    {\n        if (\n            Session::canViewAllEntities()\n            || Session::haveAccessToAllOfEntities($this->getEntities())\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public function canPurgeItem()\n    {\n        return $this->canDeleteItem();\n    }\n\n\n    public function isEntityAssign()\n    {\n       // glpi_users.entities_id is only a pref.\n        return false;\n    }\n\n\n    /**\n     * Compute preferences for the current user mixing config and user data.\n     *\n     * @return void\n     */\n    public function computePreferences()\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields['id'])) {\n            foreach ($CFG_GLPI['user_pref_field'] as $f) {\n                if (is_null($this->fields[$f])) {\n                    $this->fields[$f] = $CFG_GLPI[$f];\n                }\n            }\n        }\n       /// Specific case for show_count_on_tabs : global config can forbid\n        if ($CFG_GLPI['show_count_on_tabs'] == -1) {\n            $this->fields['show_count_on_tabs'] = 0;\n        }\n    }\n\n\n    /**\n     * Load minimal session for user.\n     *\n     * @param integer $entities_id  Entity to use\n     * @param boolean $is_recursive Whether to load entities recursivly or not\n     *\n     * @return void\n     *\n     * @since 0.83.7\n     */\n    public function loadMinimalSession($entities_id, $is_recursive)\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields['id']) && !isset($_SESSION[\"glpiID\"])) {\n            Session::destroy();\n            Session::start();\n            $_SESSION[\"glpiID\"]                      = $this->fields['id'];\n            $_SESSION[\"glpi_use_mode\"]               = Session::NORMAL_MODE;\n            Session::loadEntity($entities_id, $is_recursive);\n            $this->computePreferences();\n            foreach ($CFG_GLPI['user_pref_field'] as $field) {\n                if (isset($this->fields[$field])) {\n                    $_SESSION[\"glpi$field\"] = $this->fields[$field];\n                }\n            }\n            Session::loadGroups();\n            Session::loadLanguage();\n        }\n    }\n\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        switch ($item->getType()) {\n            case __CLASS__:\n                $ong    = [];\n                $ong[1] = __('Used items');\n                $ong[2] = __('Managed items');\n                return $ong;\n\n            case 'Preference':\n                return __('Main');\n        }\n        return '';\n    }\n\n\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n        global $CFG_GLPI;\n\n        switch ($item->getType()) {\n            case __CLASS__:\n                $item->showItems($tabnum == 2);\n                return true;\n\n            case 'Preference':\n                $user = new self();\n                $user->showMyForm(\n                    $CFG_GLPI['root_doc'] . \"/front/preference.php\",\n                    Session::getLoginUserID()\n                );\n                return true;\n        }\n        return false;\n    }\n\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n\n        $config = Config::getConfigurationValues('core');\n        if ($config['system_user'] == $this->getID()) {\n            return $ong;\n        }\n\n        $this->addImpactTab($ong, $options);\n        $this->addStandardTab('Profile_User', $ong, $options);\n        $this->addStandardTab('Group_User', $ong, $options);\n        $this->addStandardTab('Config', $ong, $options);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addStandardTab('Ticket', $ong, $options);\n        $this->addStandardTab('Item_Problem', $ong, $options);\n        $this->addStandardTab('Change_Item', $ong, $options);\n        $this->addStandardTab('Document_Item', $ong, $options);\n        $this->addStandardTab('Reservation', $ong, $options);\n        $this->addStandardTab('Auth', $ong, $options);\n        $this->addStandardTab('ManualLink', $ong, $options);\n        $this->addStandardTab('Certificate_Item', $ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n\n    public function post_getEmpty()\n    {\n        global $CFG_GLPI;\n\n        $this->fields[\"is_active\"] = 1;\n        if (isset($CFG_GLPI[\"language\"])) {\n            $this->fields['language'] = $CFG_GLPI[\"language\"];\n        } else {\n            $this->fields['language'] = \"en_GB\";\n        }\n    }\n\n\n    public function pre_deleteItem()\n    {\n        global $DB;\n\n        $entities = $this->getEntities();\n        $view_all = Session::canViewAllEntities();\n        // Have right on all entities ?\n        $all      = true;\n        if (!$view_all) {\n            foreach ($entities as $ent) {\n                if (!Session::haveAccessToEntity($ent)) {\n                    $all = false;\n                }\n            }\n        }\n        if ($all) { // Mark as deleted\n            return true;\n        }\n\n        // only delete profile\n        foreach ($entities as $ent) {\n            if (Session::haveAccessToEntity($ent)) {\n                $DB->delete(\n                    'glpi_profiles_users',\n                    [\n                        'users_id'     => $this->fields['id'],\n                        'entities_id'  => $ent\n                    ]\n                );\n            }\n        }\n        return false;\n    }\n\n\n    public function cleanDBonPurge()\n    {\n\n        global $DB;\n\n       // ObjectLock does not extends CommonDBConnexity\n        $ol = new ObjectLock();\n        $ol->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n       // Reminder does not extends CommonDBConnexity\n        $r = new Reminder();\n        $r->deleteByCriteria(['users_id' => $this->fields['id']]);\n\n       // Delete private bookmark\n        $ss = new SavedSearch();\n        $ss->deleteByCriteria(\n            [\n                'users_id'   => $this->fields['id'],\n                'is_private' => 1,\n            ]\n        );\n\n       // Set no user to public bookmark\n        $DB->update(\n            SavedSearch::getTable(),\n            [\n                'users_id' => 0\n            ],\n            [\n                'users_id' => $this->fields['id']\n            ]\n        );\n\n       // Set no user to consumables\n        $DB->update(\n            'glpi_consumables',\n            [\n                'items_id' => 0,\n                'itemtype' => 'NULL',\n                'date_out' => 'NULL'\n            ],\n            [\n                'items_id' => $this->fields['id'],\n                'itemtype' => 'User'\n            ]\n        );\n\n        $this->deleteChildrenAndRelationsFromDb(\n            [\n                Certificate_Item::class,\n                Change_User::class,\n                Group_User::class,\n                KnowbaseItem_User::class,\n                Problem_User::class,\n                Profile_User::class,\n                ProjectTaskTeam::class,\n                ProjectTeam::class,\n                Reminder_User::class,\n                RSSFeed_User::class,\n                SavedSearch_User::class,\n                Ticket_User::class,\n                UserEmail::class,\n            ]\n        );\n\n        if ($this->fields['id'] > 0) { // Security\n            // DisplayPreference does not extends CommonDBConnexity\n            $dp = new DisplayPreference();\n            $dp->deleteByCriteria(['users_id' => $this->fields['id']]);\n        }\n\n        $this->dropPictureFiles($this->fields['picture']);\n\n       // Ticket rules use various _users_id_*\n        Rule::cleanForItemAction($this, '_users_id%');\n        Rule::cleanForItemCriteria($this, '_users_id%');\n\n       // Alert does not extends CommonDBConnexity\n        $alert = new Alert();\n        $alert->cleanDBonItemDelete($this->getType(), $this->fields['id']);\n    }\n\n\n    /**\n     * Retrieve a user from the database using its login.\n     *\n     * @param string $name Login of the user\n     *\n     * @return boolean\n     */\n    public function getFromDBbyName($name)\n    {\n        return $this->getFromDBByCrit(['name' => $name]);\n    }\n\n    /**\n     * Retrieve a user from the database using its login.\n     *\n     * @param string  $name     Login of the user\n     * @param integer $authtype Auth type (see Auth constants)\n     * @param integer $auths_id ID of auth server\n     *\n     * @return boolean\n     */\n    public function getFromDBbyNameAndAuth($name, $authtype, $auths_id)\n    {\n        return $this->getFromDBByCrit([\n            'name'     => $name,\n            'authtype' => $authtype,\n            'auths_id' => $auths_id\n        ]);\n    }\n\n    /**\n     * Retrieve a user from the database using value of the sync field.\n     *\n     * @param string $value Value of the sync field\n     *\n     * @return boolean\n     */\n    public function getFromDBbySyncField($value)\n    {\n        return $this->getFromDBByCrit(['sync_field' => $value]);\n    }\n\n    /**\n     * Retrieve a user from the database using it's dn.\n     *\n     * @since 0.84\n     *\n     * @param string $user_dn dn of the user\n     *\n     * @return boolean\n     */\n    public function getFromDBbyDn($user_dn)\n    {\n        return $this->getFromDBByCrit(['user_dn' => $user_dn]);\n    }\n\n    /**\n     * Get users ids matching the given email\n     *\n     * @param string $email     Email to search for\n     * @param array  $condition Extra conditions\n     *\n     * @return array Found users ids\n     */\n    public static function getUsersIdByEmails(string $email, array $condition = []): array\n    {\n        global $DB;\n\n        $query = [\n            'SELECT'    => self::getTable() . '.id',\n            'FROM'      => self::getTable(),\n            'LEFT JOIN' => [\n                UserEmail::getTable() => [\n                    'FKEY' => [\n                        self::getTable()      => 'id',\n                        UserEmail::getTable() => self::getForeignKeyField()\n                    ]\n                ]\n            ],\n            'WHERE' => [UserEmail::getTable() . '.email' => $email] + $condition\n        ];\n\n        $data = iterator_to_array($DB->request($query));\n        return array_column($data, 'id');\n    }\n\n    /**\n     * Get the number of users using the given email\n     *\n     * @param string $email     Email to search for\n     * @param array  $condition Extra conditions\n     *\n     * @return int Number of users found\n     */\n    public static function countUsersByEmail($email, $condition = []): int\n    {\n        return count(self::getUsersIdByEmails($email, $condition));\n    }\n\n\n    /**\n     * Retrieve a user from the database using its email.\n     *\n     * @since 9.3 Can pass condition as a parameter\n     *\n     * @param string $email     user email\n     * @param array  $condition add condition\n     *\n     * @return boolean\n     */\n    public function getFromDBbyEmail($email, $condition = [])\n    {\n        $ids = self::getUsersIdByEmails($email, $condition);\n\n        if (count($ids) == 1) {\n            return $this->getFromDB(current($ids));\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get the default email of the user.\n     *\n     * @return string\n     */\n    public function getDefaultEmail()\n    {\n\n        if (!isset($this->fields['id'])) {\n            return '';\n        }\n\n        return UserEmail::getDefaultForUser($this->fields['id']);\n    }\n\n\n    /**\n     * Get all emails of the user.\n     *\n     * @return string[]\n     */\n    public function getAllEmails()\n    {\n\n        if (!isset($this->fields['id'])) {\n            return [];\n        }\n        return UserEmail::getAllForUser($this->fields['id']);\n    }\n\n\n    /**\n     * Check if the email is attached to the current user.\n     *\n     * @param string $email\n     *\n     * @return boolean\n     */\n    public function isEmail($email)\n    {\n\n        if (!isset($this->fields['id'])) {\n            return false;\n        }\n        return UserEmail::isEmailForUser($this->fields['id'], $email);\n    }\n\n\n    /**\n     * Retrieve a user from the database using its personal token.\n     *\n     * @param string $token user token\n     * @param string $field the field storing the token\n     *\n     * @return boolean\n     */\n    public function getFromDBbyToken($token, $field = 'personal_token')\n    {\n        $fields = ['personal_token', 'api_token'];\n        if (!in_array($field, $fields)) {\n            trigger_error(\n                'User::getFromDBbyToken() can only be called with $field parameter with theses values: \\'' . implode('\\', \\'', $fields) . '\\'',\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        return $this->getFromDBByCrit([$this->getTable() . \".$field\" => $token]);\n    }\n\n\n    public function prepareInputForAdd($input)\n    {\n        global $DB;\n\n        if (isset($input['_stop_import'])) {\n            return false;\n        }\n\n        if (empty($input['name']) || !Auth::isValidLogin(stripslashes($input['name']))) {\n            Session::addMessageAfterRedirect(\n                __('The login is not valid. Unable to add the user.'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n       // avoid xss (picture field is autogenerated)\n        if (isset($input['picture'])) {\n            $input['picture'] = 'NULL';\n        }\n\n        if (!isset($input[\"authtype\"])) {\n            $input[\"authtype\"] = Auth::DB_GLPI;\n        }\n\n        if (!isset($input[\"auths_id\"])) {\n            $input[\"auths_id\"] = 0;\n        }\n\n       // Check if user does not exists\n        $iterator = $DB->request([\n            'FROM'   => $this->getTable(),\n            'WHERE'  => [\n                'name'      => $input['name'],\n                'authtype'  => $input['authtype'],\n                'auths_id'  => $input['auths_id']\n            ],\n            'LIMIT'  => 1\n        ]);\n\n        if (count($iterator)) {\n            Session::addMessageAfterRedirect(\n                __('Unable to add. The user already exists.'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        if (isset($input[\"password2\"])) {\n            if (empty($input[\"password\"])) {\n                unset($input[\"password\"]);\n            } else {\n                if ($input[\"password\"] == $input[\"password2\"]) {\n                    if (Config::validatePassword($input[\"password\"])) {\n                        $input[\"password\"]\n                        = Auth::getPasswordHash(Sanitizer::unsanitize($input[\"password\"]));\n\n                        $input['password_last_update'] = $_SESSION['glpi_currenttime'];\n                    } else {\n                        unset($input[\"password\"]);\n                    }\n                    unset($input[\"password2\"]);\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('Error: the two passwords do not match'),\n                        false,\n                        ERROR\n                    );\n                    return false;\n                }\n            }\n        }\n\n        if (isset($input[\"_extauth\"])) {\n            $input[\"password\"] = \"\";\n        }\n\n       // Force DB default values : not really needed\n        if (!isset($input[\"is_active\"])) {\n            $input[\"is_active\"] = 1;\n        }\n\n        if (!isset($input[\"is_deleted\"])) {\n            $input[\"is_deleted\"] = 0;\n        }\n\n        if (!isset($input[\"entities_id\"])) {\n            $input[\"entities_id\"] = 0;\n        }\n\n        if (!isset($input[\"profiles_id\"])) {\n            $input[\"profiles_id\"] = 0;\n        }\n\n        return $input;\n    }\n\n    public function computeCloneName(\n        string $current_name,\n        ?int $copy_index = null\n    ): string {\n        return Toolbox::slugify(\n            $this->baseComputeCloneName($current_name, $copy_index)\n        );\n    }\n\n    public function post_addItem()\n    {\n\n        $this->updateUserEmails();\n        $this->syncLdapGroups();\n        $this->syncDynamicEmails();\n\n        $this->applyGroupsRules();\n        $rulesplayed = $this->applyRightRules();\n        $picture     = $this->syncLdapPhoto();\n\n       //add picture in user fields\n        if (!empty($picture)) {\n            $this->update(['id'      => $this->fields['id'],\n                'picture' => $picture\n            ]);\n        }\n\n       // Add default profile\n        if (!$rulesplayed) {\n            $affectation = [];\n            if (\n                isset($this->input['_profiles_id']) && $this->input['_profiles_id']\n                && Profile::currentUserHaveMoreRightThan([$this->input['_profiles_id']])\n            ) {\n                $profile                   = $this->input['_profiles_id'];\n               // Choosen in form, so not dynamic\n                $affectation['is_dynamic'] = 0;\n            } else {\n                $profile                   = Profile::getDefault();\n               // Default right as dynamic. If dynamic rights are set it will disappear.\n                $affectation['is_dynamic'] = 1;\n                $affectation['is_default_profile'] = 1;\n            }\n\n            if ($profile) {\n                if (isset($this->input[\"_entities_id\"])) {\n                   // entities_id (user's pref) always set in prepareInputForAdd\n                   // use _entities_id for default right\n                    $affectation[\"entities_id\"] = $this->input[\"_entities_id\"];\n                } else if (isset($_SESSION['glpiactive_entity'])) {\n                    $affectation[\"entities_id\"] = $_SESSION['glpiactive_entity'];\n                } else {\n                    $affectation[\"entities_id\"] = 0;\n                }\n                if (isset($this->input[\"_is_recursive\"])) {\n                    $affectation[\"is_recursive\"] = $this->input[\"_is_recursive\"];\n                } else {\n                    $affectation[\"is_recursive\"] = 0;\n                }\n\n                $affectation[\"profiles_id\"]  = $profile;\n                $affectation[\"users_id\"]     = $this->fields[\"id\"];\n                $right                       = new Profile_User();\n                $right->add($affectation);\n            }\n        }\n    }\n\n\n    public function prepareInputForUpdate($input)\n    {\n        global $CFG_GLPI;\n\n       // avoid xss (picture name is autogenerated when uploading/synchronising the picture)\n        unset($input['picture']);\n\n       //picture manually uploaded by user\n        if (isset($input[\"_blank_picture\"]) && $input[\"_blank_picture\"]) {\n            self::dropPictureFiles($this->fields['picture']);\n            $input['picture'] = 'NULL';\n        } else {\n            $newPicture = false;\n            if (!isAPI()) {\n                if (isset($input[\"_picture\"][0]) && !empty($input[\"_picture\"][0])) {\n                    $input[\"_picture\"] = $input[\"_picture\"][0];\n                }\n            }\n            if (isset($input[\"_picture\"]) && !empty($input[\"_picture\"])) {\n                $newPicture = true;\n            }\n            if ($newPicture) {\n                $fullpath = GLPI_TMP_DIR . \"/\" . $input[\"_picture\"];\n                if (Document::isImage($fullpath, 'image')) {\n                   // Unlink old picture (clean on changing format)\n                    self::dropPictureFiles($this->fields['picture']);\n                   // Move uploaded file\n                    $filename     = uniqid($this->fields['id'] . '_');\n                    $sub          = substr($filename, -2); /* 2 hex digit */\n\n                   // output images with possible transparency to png, other to jpg\n                    $extension = strtolower(pathinfo($fullpath, PATHINFO_EXTENSION));\n                    $extension = in_array($extension, ['png', 'gif'])\n                    ? 'png'\n                    : 'jpg';\n\n                    @mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                    $picture_path = GLPI_PICTURE_DIR  . \"/$sub/${filename}.$extension\";\n                    self::dropPictureFiles(\"$sub/${filename}.$extension\");\n\n                    if (Document::renameForce($fullpath, $picture_path)) {\n                        Session::addMessageAfterRedirect(__('The file is valid. Upload is successful.'));\n                        // For display\n                        $input['picture'] = \"$sub/${filename}.$extension\";\n\n                        //prepare a thumbnail\n                        $thumb_path = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.$extension\";\n                        Toolbox::resizePicture($picture_path, $thumb_path);\n                    } else {\n                        Session::addMessageAfterRedirect(\n                            __('Moving temporary file failed.'),\n                            false,\n                            ERROR\n                        );\n                        @unlink($fullpath);\n                    }\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('The file is not an image file.'),\n                        false,\n                        ERROR\n                    );\n                    @unlink($fullpath);\n                }\n            } else {\n               //ldap jpegphoto synchronisation.\n                $picture = $this->syncLdapPhoto();\n                if (!empty($picture)) {\n                    $input['picture'] = $picture;\n                }\n            }\n        }\n\n        if (isset($input[\"password2\"])) {\n           // Empty : do not update\n            if (empty($input[\"password\"])) {\n                unset($input[\"password\"]);\n            } else {\n                if ($input[\"password\"] == $input[\"password2\"]) {\n                   // Check right : my password of user with lesser rights\n                    if (\n                        isset($input['id'])\n                        && !Auth::checkPassword($input['password'], $this->fields['password']) // Validate that password is not same as previous\n                        && Config::validatePassword($input[\"password\"])\n                        && (($input['id'] == Session::getLoginUserID())\n                        || $this->currentUserHaveMoreRightThan($input['id'])\n                        // Permit to change password with token and email\n                        || (($input['password_forget_token'] == $this->fields['password_forget_token'])\n                           && (abs(strtotime($_SESSION[\"glpi_currenttime\"])\n                               - strtotime($this->fields['password_forget_token_date'])) < DAY_TIMESTAMP)))\n                    ) {\n                        $input[\"password\"]\n                        = Auth::getPasswordHash(Sanitizer::unsanitize($input[\"password\"]));\n\n                        $input['password_last_update'] = $_SESSION[\"glpi_currenttime\"];\n                    } else {\n                        unset($input[\"password\"]);\n                    }\n                    unset($input[\"password2\"]);\n                } else {\n                    Session::addMessageAfterRedirect(\n                        __('Error: the two passwords do not match'),\n                        false,\n                        ERROR\n                    );\n                    return false;\n                }\n            }\n        } else if (isset($input[\"password\"])) { // From login\n            unset($input[\"password\"]);\n        }\n\n       // blank password when authtype changes\n        if (\n            isset($input[\"authtype\"])\n            && $input[\"authtype\"] != Auth::DB_GLPI\n            && $input[\"authtype\"] != $this->getField('authtype')\n        ) {\n            $input[\"password\"] = \"\";\n        }\n\n       // Update User in the database\n        if (\n            !isset($input[\"id\"])\n            && isset($input[\"name\"])\n        ) {\n            if ($this->getFromDBbyName($input[\"name\"])) {\n                $input[\"id\"] = $this->fields[\"id\"];\n            }\n        }\n\n        if (\n            isset($input[\"entities_id\"])\n            && (Session::getLoginUserID() == $input['id'])\n        ) {\n            $_SESSION[\"glpidefault_entity\"] = $input[\"entities_id\"];\n        }\n\n       // Security on default profile update\n        if (isset($input['profiles_id'])) {\n            if (!in_array($input['profiles_id'], Profile_User::getUserProfiles($input['id']))) {\n                unset($input['profiles_id']);\n            }\n        }\n\n       // Security on default entity  update\n        if (isset($input['entities_id'])) {\n            if (!in_array($input['entities_id'], Profile_User::getUserEntities($input['id']))) {\n                unset($input['entities_id']);\n            }\n        }\n\n       // Security on default group  update\n        if (\n            isset($input['groups_id'])\n            && !Group_User::isUserInGroup($input['id'], $input['groups_id'])\n        ) {\n            unset($input['groups_id']);\n        }\n\n        if (\n            isset($input['_reset_personal_token'])\n            && $input['_reset_personal_token']\n        ) {\n            $input['personal_token']      = self::getUniqueToken('personal_token');\n            $input['personal_token_date'] = $_SESSION['glpi_currenttime'];\n        }\n\n        if (\n            isset($input['_reset_api_token'])\n            && $input['_reset_api_token']\n        ) {\n            $input['api_token']      = self::getUniqueToken('api_token');\n            $input['api_token_date'] = $_SESSION['glpi_currenttime'];\n        }\n\n       // Manage preferences fields\n        if (Session::getLoginUserID() == $input['id']) {\n            if (\n                isset($input['use_mode'])\n                && ($_SESSION['glpi_use_mode'] !=  $input['use_mode'])\n            ) {\n                $_SESSION['glpi_use_mode'] = $input['use_mode'];\n                unset($_SESSION['glpimenu']); // Force menu regeneration\n               //Session::loadLanguage();\n            }\n        }\n\n        foreach ($CFG_GLPI['user_pref_field'] as $f) {\n            if (isset($input[$f])) {\n                if (Session::getLoginUserID() == $input['id']) {\n                    if ($_SESSION[\"glpi$f\"] != $input[$f]) {\n                        $_SESSION[\"glpi$f\"] = $input[$f];\n                      // reinit translations\n                        if ($f == 'language') {\n                             $_SESSION['glpi_dropdowntranslations'] = DropdownTranslation::getAvailableTranslations($_SESSION[\"glpilanguage\"]);\n                             unset($_SESSION['glpimenu']);\n                        }\n                    }\n                }\n                if ($input[$f] == $CFG_GLPI[$f]) {\n                    $input[$f] = \"NULL\";\n                }\n            }\n        }\n\n        if (isset($input['language']) && GLPI_DEMO_MODE) {\n            unset($input['language']);\n        }\n\n        if (array_key_exists('timezone', $input) && empty($input['timezone'])) {\n            $input['timezone'] = 'NULL';\n        }\n\n        return $input;\n    }\n\n\n    public function post_updateItem($history = 1)\n    {\n       //handle timezone change for current user\n        if ($this->fields['id'] == Session::getLoginUserID()) {\n            if (null == $this->fields['timezone'] || 'null' === strtolower($this->fields['timezone'])) {\n                unset($_SESSION['glpi_tz']);\n            } else {\n                $_SESSION['glpi_tz'] = $this->fields['timezone'];\n            }\n        }\n\n        $this->updateUserEmails();\n        $this->syncLdapGroups();\n        $this->syncDynamicEmails();\n        $this->applyGroupsRules();\n        $this->applyRightRules();\n\n        if (in_array('password', $this->updates)) {\n            $alert = new Alert();\n            $alert->deleteByCriteria(\n                [\n                    'itemtype' => $this->getType(),\n                    'items_id' => $this->fields['id'],\n                ],\n                true\n            );\n        }\n    }\n\n\n\n    /**\n     * Apply rules to determine dynamic rights of the user.\n     *\n     * @return boolean true if rules are applied, false otherwise\n     */\n    public function applyRightRules()\n    {\n\n        $return = false;\n\n        if (\n            isset($this->fields['_ruleright_process'])\n            || isset($this->input['_ruleright_process'])\n        ) {\n            $dynamic_profiles = Profile_User::getForUser($this->fields[\"id\"], true);\n\n            if (\n                isset($this->fields[\"id\"])\n                && ($this->fields[\"id\"] > 0)\n                && isset($this->input[\"_ldap_rules\"])\n                && count($this->input[\"_ldap_rules\"])\n            ) {\n               //and add/update/delete only if it's necessary !\n                if (isset($this->input[\"_ldap_rules\"][\"rules_entities_rights\"])) {\n                    $entities_rules = $this->input[\"_ldap_rules\"][\"rules_entities_rights\"];\n                } else {\n                    $entities_rules = [];\n                }\n\n                if (isset($this->input[\"_ldap_rules\"][\"rules_entities\"])) {\n                    $entities = $this->input[\"_ldap_rules\"][\"rules_entities\"];\n                } else {\n                    $entities = [];\n                }\n\n                if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                    $rights = $this->input[\"_ldap_rules\"][\"rules_rights\"];\n                } else {\n                    $rights = [];\n                }\n\n                $retrieved_dynamic_profiles = [];\n\n               //For each affectation -> write it in DB\n                foreach ($entities_rules as $entity) {\n                   //Multiple entities assignation\n                    if (is_array($entity[0])) {\n                        foreach ($entity[0] as $ent) {\n                             $retrieved_dynamic_profiles[] = [\n                                 'entities_id'  => $ent,\n                                 'profiles_id'  => $entity[1],\n                                 'is_recursive' => $entity[2],\n                                 'users_id'     => $this->fields['id'],\n                                 'is_dynamic'   => 1,\n                             ];\n                        }\n                    } else {\n                        $retrieved_dynamic_profiles[] = [\n                            'entities_id'  => $entity[0],\n                            'profiles_id'  => $entity[1],\n                            'is_recursive' => $entity[2],\n                            'users_id'     => $this->fields['id'],\n                            'is_dynamic'   => 1,\n                        ];\n                    }\n                }\n\n                if (\n                    (count($entities) > 0)\n                    && (count($rights) == 0)\n                ) {\n                    if ($def_prof = Profile::getDefault()) {\n                        $rights[] = $def_prof;\n                    }\n                }\n\n                if (\n                    (count($rights) > 0)\n                    && (count($entities) > 0)\n                ) {\n                    foreach ($rights as $right) {\n                        foreach ($entities as $entity) {\n                             $retrieved_dynamic_profiles[] = [\n                                 'entities_id'  => $entity[0],\n                                 'profiles_id'  => $right,\n                                 'is_recursive' => $entity[1],\n                                 'users_id'     => $this->fields['id'],\n                                 'is_dynamic'   => 1,\n                             ];\n                        }\n                    }\n                }\n\n               // Compare retrived profiles to existing ones : clean arrays to do purge and add\n                if (count($retrieved_dynamic_profiles)) {\n                    foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                        $found = false;\n\n                        foreach ($dynamic_profiles as $keydb => $db_profile) {\n                             // Found existing profile : unset values in array\n                            if (\n                                !$found\n                                && ($db_profile['entities_id']  == $retr_profile['entities_id'])\n                                && ($db_profile['profiles_id']  == $retr_profile['profiles_id'])\n                                && ($db_profile['is_recursive'] == $retr_profile['is_recursive'])\n                            ) {\n                                unset($retrieved_dynamic_profiles[$keyretr]);\n                                unset($dynamic_profiles[$keydb]);\n                            }\n                        }\n                    }\n                }\n\n               // Add new dynamic profiles\n                if (count($retrieved_dynamic_profiles)) {\n                    $right = new Profile_User();\n                    foreach ($retrieved_dynamic_profiles as $keyretr => $retr_profile) {\n                        $right->add($retr_profile);\n                    }\n                }\n\n               //Unset all the temporary tables\n                unset($this->input[\"_ldap_rules\"]);\n\n                $return = true;\n            } else if (count($dynamic_profiles) == 1) {\n                $dynamic_profile = reset($dynamic_profiles);\n\n               // If no rule applied and only one dynamic profile found, check if\n               // it is the default profile\n                if ($dynamic_profile['is_default_profile'] == true) {\n                    $default_profile = Profile::getDefault();\n\n                   // Remove from to be deleted list\n                    $dynamic_profiles = [];\n\n                   // Update profile if need to match the current default profile\n                    if ($dynamic_profile['profiles_id'] !== $default_profile) {\n                        $pu = new Profile_User();\n                        $dynamic_profile['profiles_id'] = $default_profile;\n                        $pu->add($dynamic_profile);\n                        $pu->delete([\n                            'id' => $dynamic_profile['id']\n                        ]);\n                    }\n                }\n            }\n\n           // Delete old dynamic profiles\n            if (count($dynamic_profiles)) {\n                $right = new Profile_User();\n                foreach ($dynamic_profiles as $keydb => $db_profile) {\n                    $right->delete($db_profile);\n                }\n            }\n        }\n        return $return;\n    }\n\n\n    /**\n     * Synchronise LDAP group of the user.\n     *\n     * @return void\n     */\n    public function syncLdapGroups()\n    {\n        global $DB;\n\n       // input[\"_groups\"] not set when update from user.form or preference\n        if (\n            isset($this->fields[\"authtype\"])\n            && isset($this->input[\"_groups\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype']))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n                if (count($authtype)) {\n                    // Clean groups\n                    $this->input[\"_groups\"] = array_unique($this->input[\"_groups\"]);\n\n                    // Delete not available groups like to LDAP\n                    $iterator = $DB->request([\n                        'SELECT'    => [\n                            'glpi_groups_users.id',\n                            'glpi_groups_users.groups_id',\n                            'glpi_groups_users.is_dynamic'\n                        ],\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_groups'  => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'groups_id',\n                                    'glpi_groups'        => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.users_id' => $this->fields['id']\n                        ]\n                    ]);\n\n                     $groupuser = new Group_User();\n                    foreach ($iterator as $data) {\n                        if (in_array($data[\"groups_id\"], $this->input[\"_groups\"])) {\n                         // Delete found item in order not to add it again\n                            unset($this->input[\"_groups\"][array_search(\n                                $data[\"groups_id\"],\n                                $this->input[\"_groups\"]\n                            )]);\n                        } else if ($data['is_dynamic']) {\n                            $groupuser->delete(['id' => $data[\"id\"]]);\n                        }\n                    }\n\n                     //If the user needs to be added to one group or more\n                    if (count($this->input[\"_groups\"]) > 0) {\n                        foreach ($this->input[\"_groups\"] as $group) {\n                              $groupuser->add(['users_id'   => $this->fields[\"id\"],\n                                  'groups_id'  => $group,\n                                  'is_dynamic' => 1\n                              ]);\n                        }\n                        unset($this->input[\"_groups\"]);\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Synchronize picture (photo) of the user.\n     *\n     * @since 0.85\n     *\n     * @return string|boolean Filename to be stored in user picture field, false if no picture found\n     */\n    public function syncLdapPhoto()\n    {\n\n        if (\n            isset($this->fields[\"authtype\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n               || ($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED\n                   && !empty($this->fields[\"auths_id\"]))\n               || Auth::isAlternateAuth($this->fields['authtype']))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $config_ldap = new AuthLDAP();\n                $ds          = false;\n\n               //connect ldap server\n                if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n                    $ds = $config_ldap->connect();\n                }\n\n                if ($ds) {\n                   //get picture fields\n                    $picture_field = $config_ldap->fields['picture_field'];\n                    if (empty($picture_field)) {\n                        return false;\n                    }\n\n                   //get picture content in ldap\n                    $info = AuthLDAP::getUserByDn(\n                        $ds,\n                        $this->fields['user_dn'],\n                        [$picture_field],\n                        false\n                    );\n\n                   //getUserByDn returns an array. If the picture is empty,\n                   //$info[$picture_field][0] is null\n                    if (!isset($info[$picture_field][0]) || empty($info[$picture_field][0])) {\n                          return \"\";\n                    }\n                   //prepare paths\n                    $img       = array_pop($info[$picture_field]);\n                    $filename  = uniqid($this->fields['id'] . '_');\n                    $sub       = substr($filename, -2); /* 2 hex digit */\n                    $file      = GLPI_PICTURE_DIR . \"/$sub/${filename}.jpg\";\n\n                    if (array_key_exists('picture', $this->fields)) {\n                        $oldfile = GLPI_PICTURE_DIR . \"/\" . $this->fields[\"picture\"];\n                    } else {\n                        $oldfile = null;\n                    }\n\n                   // update picture if not exist or changed\n                    if (\n                        empty($this->fields[\"picture\"])\n                        || !file_exists($oldfile)\n                        || sha1_file($oldfile) !== sha1($img)\n                    ) {\n                        if (!is_dir(GLPI_PICTURE_DIR . \"/$sub\")) {\n                            mkdir(GLPI_PICTURE_DIR . \"/$sub\");\n                        }\n\n                       //save picture\n                        $outjpeg = fopen($file, 'wb');\n                        fwrite($outjpeg, $img);\n                        fclose($outjpeg);\n\n                       //save thumbnail\n                        $thumb = GLPI_PICTURE_DIR . \"/$sub/${filename}_min.jpg\";\n                        Toolbox::resizePicture($file, $thumb);\n\n                        return \"$sub/${filename}.jpg\";\n                    }\n                    return $this->fields[\"picture\"];\n                }\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Update emails of the user.\n     * Uses _useremails set from UI, not _emails set from LDAP.\n     *\n     * @return void\n     */\n    public function updateUserEmails()\n    {\n       // Update emails  (use _useremails set from UI, not _emails set from LDAP)\n\n        $userUpdated = false;\n\n        if (isset($this->input['_useremails']) && count($this->input['_useremails'])) {\n            $useremail = new UserEmail();\n            foreach ($this->input['_useremails'] as $id => $email) {\n                $email = trim($email);\n\n                // existing email\n                if ($id > 0) {\n                    $params = ['id' => $id];\n\n                   // empty email : delete\n                    if (strlen($email) == 0) {\n                        $deleted = $useremail->delete($params);\n                        $userUpdated = $userUpdated || $deleted;\n                    } else { // Update email\n                        $params['email'] = $email;\n                        $params['is_default'] = $this->input['_default_email'] == $id ? 1 : 0;\n\n                        $existingUserEmail = new UserEmail();\n                        $existingUserEmail->getFromDB($id);\n                        if (\n                            $params['email'] == $existingUserEmail->fields['email']\n                            && $params['is_default'] == $existingUserEmail->fields['is_default']\n                        ) {\n                             // Do not update if email has not changed\n                             continue;\n                        }\n\n                        $updated = $useremail->update($params);\n                        $userUpdated = $userUpdated || $updated;\n                    }\n                } else { // New email\n                    $email_input = ['email'    => $email,\n                        'users_id' => $this->fields['id']\n                    ];\n                    if (\n                        isset($this->input['_default_email'])\n                        && ($this->input['_default_email'] == $id)\n                    ) {\n                        $email_input['is_default'] = 1;\n                    } else {\n                        $email_input['is_default'] = 0;\n                    }\n                    $added = $useremail->add($email_input);\n                    $userUpdated = $userUpdated || $added;\n                }\n            }\n        }\n\n        if ($userUpdated) {\n           // calling $this->update() here leads to loss in $this->input\n            $user = new User();\n            $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n        }\n    }\n\n\n    /**\n     * Synchronise Dynamics emails of the user.\n     * Uses _emails (set from getFromLDAP), not _usermails set from UI.\n     *\n     * @return void\n     */\n    public function syncDynamicEmails()\n    {\n        global $DB;\n\n        $userUpdated = false;\n\n       // input[\"_emails\"] not set when update from user.form or preference\n        if (\n            isset($this->fields[\"authtype\"])\n            && isset($this->input[\"_emails\"])\n            && (($this->fields[\"authtype\"] == Auth::LDAP)\n              || Auth::isAlternateAuth($this->fields['authtype'])\n              || ($this->fields[\"authtype\"] == Auth::MAIL))\n        ) {\n            if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n                $authtype = Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n\n                if (\n                    count($authtype)\n                    || $this->fields[\"authtype\"] == Auth::EXTERNAL\n                ) {\n                    // Clean emails\n                    // Do a case insensitive comparison as it seems that some LDAP servers\n                    // may return same email with different case sensitivity.\n                    $unique_emails = [];\n                    foreach ($this->input[\"_emails\"] as $email) {\n                        if (!in_array(strtolower($email), array_map('strtolower', $unique_emails))) {\n                            $unique_emails[] = $email;\n                        }\n                    }\n                    $this->input[\"_emails\"] = $unique_emails;\n\n                    // Delete not available groups like to LDAP\n                    $iterator = $DB->request([\n                        'SELECT' => [\n                            'id',\n                            'users_id',\n                            'email',\n                            'is_dynamic'\n                        ],\n                        'FROM'   => 'glpi_useremails',\n                        'WHERE'  => ['users_id' => $this->fields['id']]\n                    ]);\n\n                     $useremail = new UserEmail();\n                    foreach ($iterator as $data) {\n                        // Do a case insensitive comparison as email may be stored with a different case\n                        $i = array_search(strtolower($data[\"email\"]), array_map('strtolower', $this->input[\"_emails\"]));\n                        if ($i !== false) {\n                            // Delete found item in order not to add it again\n                            unset($this->input[\"_emails\"][$i]);\n                        } else if ($data['is_dynamic']) {\n                            // Delete not found email\n                            $deleted = $useremail->delete(['id' => $data[\"id\"]]);\n                            $userUpdated = $userUpdated || $deleted;\n                        }\n                    }\n\n                     //If the email need to be added\n                    if (count($this->input[\"_emails\"]) > 0) {\n                        foreach ($this->input[\"_emails\"] as $email) {\n                              $added = $useremail->add(['users_id'   => $this->fields[\"id\"],\n                                  'email'      => $email,\n                                  'is_dynamic' => 1\n                              ]);\n                              $userUpdated = $userUpdated || $added;\n                        }\n                        unset($this->input[\"_emails\"]);\n                    }\n                }\n            }\n        }\n\n        if ($userUpdated) {\n           // calling $this->update() here leads to loss in $this->input\n            $user = new User();\n            $user->update(['id' => $this->fields['id'], 'date_mod' => $_SESSION['glpi_currenttime']]);\n        }\n    }\n\n    protected function computeFriendlyName()\n    {\n        global $CFG_GLPI;\n\n        if (isset($this->fields[\"id\"]) && ($this->fields[\"id\"] > 0)) {\n           //computeFriendlyName should not add ID\n            $bkp_conf = $CFG_GLPI['is_ids_visible'];\n            $CFG_GLPI['is_ids_visible'] = 0;\n            $bkp_sessconf = (isset($_SESSION['glpiis_ids_visible']) ? $_SESSION[\"glpiis_ids_visible\"] : 0);\n            $_SESSION[\"glpiis_ids_visible\"] = 0;\n            $name = formatUserName(\n                $this->fields[\"id\"],\n                $this->fields[\"name\"],\n                (isset($this->fields[\"realname\"]) ? $this->fields[\"realname\"] : ''),\n                (isset($this->fields[\"firstname\"]) ? $this->fields[\"firstname\"] : '')\n            );\n\n            $CFG_GLPI['is_ids_visible'] = $bkp_conf;\n            $_SESSION[\"glpiis_ids_visible\"] = $bkp_sessconf;\n            return $name;\n        }\n        return '';\n    }\n\n\n    /**\n     * Function that tries to load the user membership from LDAP\n     * by searching in the attributes of the User.\n     *\n     * @param resource $ldap_connection LDAP connection\n     * @param array    $ldap_method     LDAP method\n     * @param string   $userdn          Basedn of the user\n     * @param string   $login           User login\n     *\n     * @return void\n     */\n    private function getFromLDAPGroupVirtual($ldap_connection, array $ldap_method, $userdn, $login): void\n    {\n        global $DB;\n\n       // Search in DB the ldap_field we need to search for in LDAP\n        $iterator = $DB->request([\n            'SELECT'          => 'ldap_field',\n            'DISTINCT'        => true,\n            'FROM'            => 'glpi_groups',\n            'WHERE'           => ['NOT' => ['ldap_field' => '']],\n            'ORDER'           => 'ldap_field'\n        ]);\n        $group_fields = [];\n\n        foreach ($iterator as $data) {\n            $group_fields[] = Toolbox::strtolower($data[\"ldap_field\"]);\n        }\n        if (count($group_fields)) {\n           //Need to sort the array because edirectory don't like it!\n            sort($group_fields);\n\n           // If the groups must be retrieve from the ldap user object\n            $sr = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $group_fields);\n            $v  = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n            for ($i = 0; $i < $v['count']; $i++) {\n               //Try to find is DN in present and needed: if yes, then extract only the OU from it\n                if (\n                    (($ldap_method[\"group_field\"] == 'dn') || in_array('ou', $group_fields))\n                    && isset($v[$i]['dn'])\n                ) {\n                    $v[$i]['ou'] = [];\n                    for ($tmp = $v[$i]['dn']; count($tmptab = explode(',', $tmp, 2)) == 2; $tmp = $tmptab[1]) {\n                        $v[$i]['ou'][] = $tmptab[1];\n                    }\n\n                    // Search in DB for group with ldap_group_dn\n                    if (\n                        ($ldap_method[\"group_field\"] == 'dn')\n                        && (count($v[$i]['ou']) > 0)\n                    ) {\n                        $group_iterator = $DB->request([\n                            'SELECT' => 'id',\n                            'FROM'   => 'glpi_groups',\n                            'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($v[$i]['ou'])]\n                        ]);\n\n                        foreach ($group_iterator as $group) {\n                            $this->fields[\"_groups\"][] = $group['id'];\n                        }\n                    }\n\n                   // searching with ldap_field='OU' and ldap_value is also possible\n                    $v[$i]['ou']['count'] = count($v[$i]['ou']);\n                }\n\n               // For each attribute retrieve from LDAP, search in the DB\n                foreach ($group_fields as $field) {\n                    if (\n                        isset($v[$i][$field])\n                        && isset($v[$i][$field]['count'])\n                        && ($v[$i][$field]['count'] > 0)\n                    ) {\n                        unset($v[$i][$field]['count']);\n                        $lgroups = [];\n                        foreach (Toolbox::addslashes_deep($v[$i][$field]) as $lgroup) {\n                            $lgroups[] = [\n                                new \\QueryExpression($DB->quoteValue($lgroup) .\n                                             \" LIKE \" .\n                                             $DB->quoteName('ldap_value'))\n                            ];\n                        }\n                        $group_iterator = $DB->request([\n                            'SELECT' => 'id',\n                            'FROM'   => 'glpi_groups',\n                            'WHERE'  => [\n                                'ldap_field' => $field,\n                                'OR'         => $lgroups\n                            ]\n                        ]);\n\n                        foreach ($group_iterator as $group) {\n                            $this->fields[\"_groups\"][] = $group['id'];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    /**\n     * Function that tries to load the user membership from LDAP\n     * by searching in the attributes of the Groups.\n     *\n     * @param resource $ldap_connection    LDAP connection\n     * @param array    $ldap_method        LDAP method\n     * @param string   $userdn             Basedn of the user\n     * @param string   $login              User login\n     *\n     * @return boolean true if search is applicable, false otherwise\n     */\n    private function getFromLDAPGroupDiscret($ldap_connection, array $ldap_method, $userdn, $login)\n    {\n        global $DB;\n\n       // No group_member_field : unable to get group\n        if (empty($ldap_method[\"group_member_field\"])) {\n            return false;\n        }\n\n        if ($ldap_method[\"use_dn\"]) {\n            $user_tmp = $userdn;\n        } else {\n           //Don't add $ldap_method[\"login_field\"].\"=\", because sometimes it may not work (for example with posixGroup)\n            $user_tmp = $login;\n        }\n\n        $v = $this->ldap_get_user_groups(\n            $ldap_connection,\n            $ldap_method[\"basedn\"],\n            $user_tmp,\n            $ldap_method[\"group_condition\"],\n            $ldap_method[\"group_member_field\"],\n            $ldap_method[\"use_dn\"],\n            $ldap_method[\"login_field\"]\n        );\n        foreach ($v as $result) {\n            if (\n                isset($result[$ldap_method[\"group_member_field\"]])\n                && is_array($result[$ldap_method[\"group_member_field\"]])\n                && (count($result[$ldap_method[\"group_member_field\"]]) > 0)\n            ) {\n                $iterator = $DB->request([\n                    'SELECT' => 'id',\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => ['ldap_group_dn' => Toolbox::addslashes_deep($result[$ldap_method[\"group_member_field\"]])]\n                ]);\n\n                foreach ($iterator as $group) {\n                    $this->fields[\"_groups\"][] = $group['id'];\n                }\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Function that tries to load the user information from LDAP.\n     *\n     * @param resource $ldap_connection LDAP connection\n     * @param array    $ldap_method     LDAP method\n     * @param string   $userdn          Basedn of the user\n     * @param string   $login           User Login\n     * @param boolean  $import          true for import, false for update\n     *\n     * @return boolean true if found / false if not\n     */\n    public function getFromLDAP($ldap_connection, array $ldap_method, $userdn, $login, $import = true)\n    {\n        global $DB, $CFG_GLPI;\n\n       // we prevent some delay...\n        if (empty($ldap_method[\"host\"])) {\n            return false;\n        }\n\n        if (is_resource($ldap_connection) || $ldap_connection instanceof \\Ldap\\Connection) {\n           //Set all the search fields\n            $this->fields['password'] = \"\";\n\n            $fields  = AuthLDAP::getSyncFields($ldap_method);\n\n           //Hook to allow plugin to request more attributes from ldap\n            $fields = Plugin::doHookFunction(Hooks::RETRIEVE_MORE_FIELD_FROM_LDAP, $fields);\n\n            $fields  = array_filter($fields);\n            $f       = self::getLdapFieldNames($fields);\n\n            $sr      = @ ldap_read($ldap_connection, $userdn, \"objectClass=*\", $f);\n            $v       = AuthLDAP::get_entries_clean($ldap_connection, $sr);\n\n            if (\n                !is_array($v)\n                || ( count($v) == 0)\n                || empty($v[0][$fields['name']][0])\n            ) {\n                return false;\n            }\n\n           //Store user's dn\n            $this->fields['user_dn']    = addslashes($userdn);\n           //Store date_sync\n            $this->fields['date_sync']  = $_SESSION['glpi_currenttime'];\n           // Empty array to ensure than syncDynamicEmails will be done\n            $this->fields[\"_emails\"]    = [];\n           // force authtype as we retrieve this user by ldap (we could have login with SSO)\n            $this->fields[\"authtype\"] = Auth::LDAP;\n\n            $import_fields = [];\n            foreach ($fields as $k => $e) {\n                $val = AuthLDAP::getFieldValue(\n                    [$e => self::getLdapFieldValue($e, $v)],\n                    $e\n                );\n                if (empty($val)) {\n                    switch ($k) {\n                        case \"language\":\n                             // Not set value : managed but user class\n                            break;\n\n                        case \"usertitles_id\":\n                        case \"usercategories_id\":\n                        case 'locations_id':\n                        case 'users_id_supervisor':\n                            $this->fields[$k] = 0;\n                            break;\n\n                        default:\n                            $this->fields[$k] = \"\";\n                    }\n                } else {\n                    $val = Toolbox::addslashes_deep($val);\n                    switch ($k) {\n                        case \"email1\":\n                        case \"email2\":\n                        case \"email3\":\n                        case \"email4\":\n                          // Manage multivaluable fields\n                            if (!empty($v[0][$e])) {\n                                foreach ($v[0][$e] as $km => $m) {\n                                    if (!preg_match('/count/', $km)) {\n                                         $this->fields[\"_emails\"][] = addslashes($m);\n                                    }\n                                }\n                                // Only get them once if duplicated\n                                $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                            }\n                            break;\n\n                        case \"language\":\n                            $language = Config::getLanguage($val);\n                            if ($language != '') {\n                                $this->fields[$k] = $language;\n                            }\n                            break;\n\n                        case \"usertitles_id\":\n                        case 'locations_id':\n                        case \"usercategories_id\":\n                        case 'users_id_supervisor':\n                            $import_fields[$k] = $val;\n                            break;\n\n                        default:\n                              $this->fields[$k] = $val;\n                    }\n                }\n            }\n\n           // Empty array to ensure than syncLdapGroups will be done\n            $this->fields[\"_groups\"] = [];\n\n           ///The groups are retrieved by looking into an ldap user object\n            if (\n                ($ldap_method[\"group_search_type\"] == 0)\n                || ($ldap_method[\"group_search_type\"] == 2)\n            ) {\n                $this->getFromLDAPGroupVirtual($ldap_connection, $ldap_method, $userdn, $login);\n            }\n\n           ///The groups are retrived by looking into an ldap group object\n            if (\n                ($ldap_method[\"group_search_type\"] == 1)\n                || ($ldap_method[\"group_search_type\"] == 2)\n            ) {\n                $this->getFromLDAPGroupDiscret($ldap_connection, $ldap_method, $userdn, $login);\n            }\n\n           ///Only process rules if working on the master database\n            if (!$DB->isSlave()) {\n               //Instanciate the affectation's rule\n                $rule = new RuleRightCollection();\n\n               //Process affectation rules :\n               //we don't care about the function's return because all\n               //the datas are stored in session temporary\n                if (isset($this->fields[\"_groups\"])) {\n                    $groups = $this->fields[\"_groups\"];\n                } else {\n                    $groups = [];\n                }\n\n                $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n                    'type'        => Auth::LDAP,\n                    'ldap_server' => $ldap_method[\"id\"],\n                    'connection'  => $ldap_connection,\n                    'userdn'      => $userdn,\n                    'login'       => $this->fields['name'],\n                    'mail_email'  => $this->fields['_emails']\n                ]);\n\n                $this->fields['_ruleright_process'] = true;\n\n               //If rule  action is ignore import\n                if (\n                    $import\n                    && isset($this->fields[\"_stop_import\"])\n                ) {\n                     return false;\n                }\n               //or no rights found & do not import users with no rights\n                if (\n                    $import\n                    && !$CFG_GLPI[\"use_noright_users_add\"]\n                ) {\n                    $ok = false;\n                    if (\n                        isset($this->fields[\"_ldap_rules\"])\n                        && count($this->fields[\"_ldap_rules\"])\n                    ) {\n                        if (\n                            isset($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                            && count($this->fields[\"_ldap_rules\"][\"rules_entities_rights\"])\n                        ) {\n                            $ok = true;\n                        }\n                        if (!$ok) {\n                            $entity_count = 0;\n                            $right_count  = 0;\n                            if (Profile::getDefault()) {\n                                $right_count++;\n                            }\n                            if (isset($this->fields[\"_ldap_rules\"][\"rules_entities\"])) {\n                                $entity_count += count($this->fields[\"_ldap_rules\"][\"rules_entities\"]);\n                            }\n                            if (isset($this->input[\"_ldap_rules\"][\"rules_rights\"])) {\n                                $right_count += count($this->fields[\"_ldap_rules\"][\"rules_rights\"]);\n                            }\n                            if ($entity_count && $right_count) {\n                                $ok = true;\n                            }\n                        }\n                    }\n                    if (!$ok) {\n                        $this->fields[\"_stop_import\"] = true;\n                        return false;\n                    }\n                }\n\n                foreach ($import_fields as $k => $val) {\n                    switch ($k) {\n                        case \"usertitles_id\":\n                            $this->fields[$k] = Dropdown::importExternal('UserTitle', $val);\n                            break;\n                        case 'locations_id':\n                            // use import to build the location tree\n                            $this->fields[$k] = Dropdown::import(\n                                'Location',\n                                ['completename' => $val,\n                                    'entities_id'  => 0,\n                                    'is_recursive' => 1\n                                ]\n                            );\n                            break;\n                        case \"usercategories_id\":\n                            $this->fields[$k] = Dropdown::importExternal('UserCategory', $val);\n                            break;\n                        case 'users_id_supervisor':\n                            $supervisor_id = self::getIdByField('user_dn', $val, false);\n                            if ($supervisor_id) {\n                                $this->fields[$k] = $supervisor_id;\n                            }\n                            break;\n                    }\n                }\n\n               // Add ldap result to data send to the hook\n                $this->fields['_ldap_result'] = $v;\n                $this->fields['_ldap_conn']   = $ldap_connection;\n               //Hook to retrieve more information for ldap\n                $this->fields = Plugin::doHookFunction(Hooks::RETRIEVE_MORE_DATA_FROM_LDAP, $this->fields);\n                unset($this->fields['_ldap_result']);\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get all groups a user belongs to.\n     *\n     * @param resource $ds                 ldap connection\n     * @param string   $ldap_base_dn       Basedn used\n     * @param string   $user_dn            Basedn of the user\n     * @param string   $group_condition    group search condition\n     * @param string   $group_member_field group field member in a user object\n     * @param boolean  $use_dn             search dn of user ($login_field=$user_dn) in group_member_field\n     * @param string   $login_field        user login field\n     *\n     * @return array Groups of the user located in [0][$group_member_field] in returned array\n     */\n    public function ldap_get_user_groups(\n        $ds,\n        $ldap_base_dn,\n        $user_dn,\n        $group_condition,\n        $group_member_field,\n        $use_dn,\n        $login_field\n    ) {\n\n        $groups     = [];\n        $listgroups = [];\n\n       //User dn may contain ( or ), need to espace it!\n        $user_dn = str_replace(\n            [\"(\", \")\", \"\\,\", \"\\+\"],\n            [\"\\(\", \"\\)\", \"\\\\\\,\", \"\\\\\\+\"],\n            $user_dn\n        );\n\n       //Only retrive cn and member attributes from groups\n        $attrs = ['dn'];\n\n        if (!$use_dn) {\n            $filter = \"(& $group_condition (|($group_member_field=$user_dn)\n                                          ($group_member_field=$login_field=$user_dn)))\";\n        } else {\n            $filter = \"(& $group_condition ($group_member_field=$user_dn))\";\n        }\n\n       //Perform the search\n        $filter = Sanitizer::unsanitize($filter);\n        $sr     = ldap_search($ds, $ldap_base_dn, $filter, $attrs);\n\n       //Get the result of the search as an array\n        $info = AuthLDAP::get_entries_clean($ds, $sr);\n       //Browse all the groups\n        $info_count = count($info);\n        for ($i = 0; $i < $info_count; $i++) {\n           //Get the cn of the group and add it to the list of groups\n            if (isset($info[$i][\"dn\"]) && ($info[$i][\"dn\"] != '')) {\n                $listgroups[$i] = $info[$i][\"dn\"];\n            }\n        }\n\n       //Create an array with the list of groups of the user\n        $groups[0][$group_member_field] = $listgroups;\n       //Return the groups of the user\n        return $groups;\n    }\n\n\n    /**\n     * Function that tries to load the user information from IMAP.\n     *\n     * @param array  $mail_method  mail method description array\n     * @param string $name         login of the user\n     *\n     * @return boolean true if method is applicable, false otherwise\n     */\n    public function getFromIMAP(array $mail_method, $name)\n    {\n        global $DB;\n\n       // we prevent some delay..\n        if (empty($mail_method[\"host\"])) {\n            return false;\n        }\n\n       // some defaults...\n        $this->fields['password']  = \"\";\n       // Empty array to ensure than syncDynamicEmails will be done\n        $this->fields[\"_emails\"]   = [];\n        $email                     = '';\n        if (strpos($name, \"@\")) {\n            $email = $name;\n        } else {\n            $email = $name . \"@\" . $mail_method[\"host\"];\n        }\n        $this->fields[\"_emails\"][] = $email;\n\n        $this->fields['name']      = $name;\n       //Store date_sync\n        $this->fields['date_sync'] = $_SESSION['glpi_currenttime'];\n       // force authtype as we retrieve this user by imap (we could have login with SSO)\n        $this->fields[\"authtype\"] = Auth::MAIL;\n\n        if (!$DB->isSlave()) {\n           //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n           //Process affectation rules :\n           //we don't care about the function's return because all the datas are stored in session temporary\n            if (isset($this->fields[\"_groups\"])) {\n                $groups = $this->fields[\"_groups\"];\n            } else {\n                $groups = [];\n            }\n            $this->fields = $rule->processAllRules($groups, Toolbox::stripslashes_deep($this->fields), [\n                'type'        => Auth::MAIL,\n                'mail_server' => $mail_method[\"id\"],\n                'login'       => $name,\n                'email'       => $email\n            ]);\n            $this->fields['_ruleright_process'] = true;\n        }\n        return true;\n    }\n\n\n    /**\n     * Function that tries to load the user information from the SSO server.\n     *\n     * @since 0.84\n     *\n     * @return boolean true if method is applicable, false otherwise\n     */\n    public function getFromSSO()\n    {\n        global $DB, $CFG_GLPI;\n\n        $a_field = [];\n        foreach ($CFG_GLPI as $key => $value) {\n            if (\n                !is_array($value) && !empty($value)\n                && strstr($key, \"_ssofield\")\n            ) {\n                $key = str_replace('_ssofield', '', $key);\n                $a_field[$key] = $value;\n            }\n        }\n\n        if (count($a_field) == 0) {\n            return true;\n        }\n        $this->fields['_ruleright_process'] = true;\n        foreach ($a_field as $field => $value) {\n            if (\n                !isset($_SERVER[$value])\n                || empty($_SERVER[$value])\n            ) {\n                switch ($field) {\n                    case \"title\":\n                        $this->fields['usertitles_id'] = 0;\n                        break;\n\n                    case \"category\":\n                        $this->fields['usercategories_id'] = 0;\n                        break;\n\n                    default:\n                        $this->fields[$field] = \"\";\n                }\n            } else {\n                switch ($field) {\n                    case \"email1\":\n                    case \"email2\":\n                    case \"email3\":\n                    case \"email4\":\n                        // Manage multivaluable fields\n                        if (!preg_match('/count/', $_SERVER[$value])) {\n                            $this->fields[\"_emails\"][] = addslashes($_SERVER[$value]);\n                        }\n                        // Only get them once if duplicated\n                        $this->fields[\"_emails\"] = array_unique($this->fields[\"_emails\"]);\n                        break;\n\n                    case \"language\":\n                        $language = Config::getLanguage($_SERVER[$value]);\n                        if ($language != '') {\n                            $this->fields[$field] = $language;\n                        }\n                        break;\n\n                    case \"title\":\n                        $this->fields['usertitles_id']\n                        = Dropdown::importExternal('UserTitle', addslashes($_SERVER[$value]));\n                        break;\n\n                    case \"category\":\n                        $this->fields['usercategories_id']\n                        = Dropdown::importExternal('UserCategory', addslashes($_SERVER[$value]));\n                        break;\n\n                    default:\n                        $this->fields[$field] = $_SERVER[$value];\n                        break;\n                }\n            }\n        }\n       ///Only process rules if working on the master database\n        if (!$DB->isSlave()) {\n           //Instanciate the affectation's rule\n            $rule = new RuleRightCollection();\n\n            $this->fields = $rule->processAllRules([], Toolbox::stripslashes_deep($this->fields), [\n                'type'   => Auth::EXTERNAL,\n                'email'  => $this->fields[\"_emails\"],\n                'login'  => $this->fields[\"name\"]\n            ]);\n\n           //If rule  action is ignore import\n            if (isset($this->fields[\"_stop_import\"])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    /**\n     * Blank passwords field of a user in the DB.\n     * Needed for external auth users.\n     *\n     * @return void\n     */\n    public function blankPassword()\n    {\n        global $DB;\n\n        if (!empty($this->fields[\"name\"])) {\n            $DB->update(\n                $this->getTable(),\n                [\n                    'password' => ''\n                ],\n                [\n                    'name' => $this->fields['name']\n                ]\n            );\n        }\n    }\n\n\n    /**\n     * Print a good title for user pages.\n     *\n     * @return void\n     */\n    public function title()\n    {\n        global $CFG_GLPI;\n\n        $buttons = [];\n        $title   = self::getTypeName(Session::getPluralNumber());\n\n        if (static::canCreate()) {\n            $buttons[\"user.form.php\"] = \"<i class='fas fa-user-plus fa-lg me-2'></i>\" . __('Add user...');\n            $title = __(\"Actions\");\n\n            if (\n                Auth::useAuthExt()\n                && Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n            ) {\n                // This requires write access because don't use entity config.\n                $buttons[\"user.form.php?new=1&amp;ext_auth=1\"] = \"<i class='fas fa-user-cog fa-lg me-2'></i>\" . __('... From an external source');\n            }\n        }\n        if (\n            Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)\n            && (static::canCreate() || static::canUpdate())\n        ) {\n            if (AuthLDAP::useAuthLdap()) {\n                $buttons[\"ldap.php\"] = \"<i class='fas fa-cog fa-lg me-2'></i>\" . __('LDAP directory link');\n            }\n        }\n        Html::displayTitle(\n            \"\",\n            self::getTypeName(Session::getPluralNumber()),\n            $title,\n            $buttons\n        );\n    }\n\n\n    /**\n     * Check if current user have more right than the specified one.\n     *\n     * @param integer $ID ID of the user\n     *\n     * @return boolean\n     */\n    public function currentUserHaveMoreRightThan($ID)\n    {\n\n        $user_prof = Profile_User::getUserProfiles($ID);\n        return Profile::currentUserHaveMoreRightThan($user_prof);\n    }\n\n    /**\n     * Print the user form.\n     *\n     * @param integer $ID    ID of the user\n     * @param array $options Options\n     *     - string   target        Form target\n     *     - boolean  withtemplate  Template or basic item\n     *\n     * @return boolean true if user found, false otherwise\n     */\n    public function showForm($ID, array $options = [])\n    {\n        global $CFG_GLPI, $DB;\n\n       // Affiche un formulaire User\n        if (($ID != Session::getLoginUserID()) && !self::canView()) {\n            return false;\n        }\n\n        $config = Config::getConfigurationValues('core');\n        if ($this->getID() > 0 && $config['system_user'] == $this->getID()) {\n            return $this->showSystemUserForm($ID, $options);\n        }\n\n        $this->initForm($ID, $options);\n\n        $ismyself = $ID == Session::getLoginUserID();\n        $higherrights = $this->currentUserHaveMoreRightThan($ID);\n        if ($ID) {\n            $caneditpassword = $higherrights || ($ismyself && Session::haveRight('password_update', 1));\n        } else {\n           // can edit on creation form\n            $caneditpassword = true;\n        }\n\n        $extauth = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                   || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                       && !empty($this->fields[\"password\"])));\n\n        $formtitle = $this->getTypeName(1);\n\n        $header_toolbar = [];\n        if ($ID > 0) {\n            $vcard_lbl = __s('Download user VCard');\n            $vcard_url = User::getFormURLWithID($ID) . \"&amp;getvcard=1\";\n            $vcard_btn = <<<HTML\n            <a href=\"{$vcard_url}\" target=\"_blank\"\n                     class=\"btn btn-icon btn-sm btn-ghost-secondary\"\n                     title=\"{$vcard_lbl}\"\n                     data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n               <i class=\"far fa-address-card fa-lg\"></i>\n            </a>\nHTML;\n            $header_toolbar[] = $vcard_btn;\n\n            if (Session::canImpersonate($ID)) {\n                $impersonate_lbl = __s('Impersonate');\n                $impersonate_btn = <<<HTML\n               <button type=\"button\" name=\"impersonate\" value=\"1\"\n                       class=\"btn btn-icon btn-sm btn-ghost-secondary btn-impersonate\"\n                       title=\"{$impersonate_lbl}\"\n                       data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n                  <i class=\"fas fa-user-secret fa-lg\"></i>\n               </button>\nHTML;\n\n               // \"impersonate\" button type is set to \"button\" on form display to prevent it to be used\n               // by default (as it is the first found in current form) when pressing \"enter\" key.\n               // When clicking it, switch to \"submit\" type to make it submit current user form.\n                $impersonate_js = <<<JAVASCRIPT\n               (function($) {\n                  $('button[type=\"button\"][name=\"impersonate\"]').click(\n                     function () {\n                        $(this).attr('type', 'submit');\n                     }\n                  );\n               })(jQuery);\nJAVASCRIPT;\n                $header_toolbar[] = $impersonate_btn . Html::scriptBlock($impersonate_js);\n            }\n        }\n\n        $options['formtitle']      = $formtitle;\n        $options['formoptions']    = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n        $options['header_toolbar'] = $header_toolbar;\n        $this->showFormHeader($options);\n        $rand = mt_rand();\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='name'>\" . __('Login') . \"</label></td>\";\n        if (\n            $this->fields[\"name\"] == \"\" ||\n            !empty($this->fields[\"password\"]) ||\n            ($this->fields[\"authtype\"] == Auth::DB_GLPI)\n        ) {\n           //display login field for new records, or if this is not external auth\n            echo \"<td><input name='name' id='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\" class='form-control'></td>\";\n        } else {\n            echo \"<td class='b'>\" . $this->fields[\"name\"];\n            echo \"<input type='hidden' name='name' value=\\\"\" . $this->fields[\"name\"] . \"\\\" class='form-control'></td>\";\n        }\n\n        if (!empty($this->fields[\"name\"])) {\n            echo \"<td rowspan='7'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n            echo \"<td rowspan='7'>\";\n            echo self::getPictureForUser($ID);\n\n            echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n            echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\" . __('Clear');\n            echo \"</td>\";\n        } else {\n            echo \"<td rowspan='7'></td>\";\n            echo \"<td rowspan='7'></td>\";\n        }\n        echo \"</tr>\";\n\n       //If it's an external auth, check if the sync_field must be displayed\n        if (\n            $extauth\n            && $this->fields['auths_id']\n            && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])\n        ) {\n            $syncrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_sync_field$syncrand'>\" . __('Synchronization field') . \"</label></td><td>\";\n            if (\n                self::canUpdate()\n                && (!$extauth || empty($ID))\n            ) {\n                echo Html::input(\n                    'sync_field',\n                    [\n                        'value' => $this->fields['sync_field'],\n                        'id'    => \"textfield_sync_field$syncrand\",\n                    ]\n                );\n            } else {\n                if (empty($this->fields['sync_field'])) {\n                    echo Dropdown::EMPTY_VALUE;\n                } else {\n                    echo $this->fields['sync_field'];\n                }\n            }\n            echo \"</td></tr>\";\n        } else {\n            echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n        }\n\n        $surnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n        echo Html::input(\n            'realname',\n            [\n                'value' => $this->fields['realname'],\n                'id'    => \"textfield_realname$surnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        $firstnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n        echo Html::input(\n            'firstname',\n            [\n                'value' => $this->fields['firstname'],\n                'id'    => \"textfield_firstname$firstnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n       //do some rights verification\n        if (\n            self::canUpdate()\n            && (!$extauth || empty($ID))\n            && $caneditpassword\n        ) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n            echo \"<td><input id='password' type='password' name='password' value='' size='20'\n                    autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\" class='form-control'></td>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n            echo \"<td><input type='password' id='password2' name='password2' value='' size='20' autocomplete='new-password' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            if ($CFG_GLPI[\"use_password_security\"]) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td rowspan='2'>\";\n                echo __('Password security policy');\n                echo \"</td>\";\n                echo \"<td rowspan='2'>\";\n                Config::displayPasswordSecurityChecks();\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n        } else {\n            echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n            echo \"<tr class='tab_bg_1'><td></td><td></td></tr>\";\n        }\n\n        if ($DB->use_timezones || Session::haveRight(\"config\", READ)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='timezone'>\" . __('Time zone') . \"</label></td><td>\";\n            if ($DB->use_timezones) {\n                $timezones = $DB->getTimezones();\n                Dropdown::showFromArray(\n                    'timezone',\n                    $timezones,\n                    [\n                        'value'                 => $this->fields[\"timezone\"],\n                        'display_emptychoice'   => true,\n                        'emptylabel'            => __('Use server configuration')\n                    ]\n                );\n            } else if (Session::haveRight(\"config\", READ)) {\n               // Display a warning but only if user is more or less an admin\n                echo __('Timezone usage has not been activated.')\n                . ' '\n                . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n            }\n            echo \"</td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        if (!GLPI_DEMO_MODE) {\n            $activerand = mt_rand();\n            echo \"<td><label for='dropdown_is_active$activerand'>\" . __('Active') . \"</label></td><td>\";\n            Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n            echo \"</td>\";\n        } else {\n            echo \"<td colspan='2'></td>\";\n        }\n        echo \"<td>\" . _n('Email', 'Emails', Session::getPluralNumber());\n        UserEmail::showAddEmailButton($this);\n        echo \"</td><td>\";\n        UserEmail::showForUser($this);\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        if (!GLPI_DEMO_MODE) {\n            $sincerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='showdate$sincerand'>\" . __('Valid since') . \"</label></td><td>\";\n            Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                'rand'        => $sincerand,\n                'maybeempty'  => true\n            ]);\n            echo \"</td>\";\n\n            $untilrand = mt_rand();\n            echo \"<td><label for='showdate$untilrand'>\" . __('Valid until') . \"</label></td><td>\";\n            Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                'rand'        => $untilrand,\n                'maybeempty'  => true\n            ]);\n            echo \"</td></tr>\";\n        }\n\n        $phonerand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n        echo Html::input(\n            'phone',\n            [\n                'value' => $this->fields['phone'],\n                'id'    => \"textfield_phone$phonerand\",\n            ]\n        );\n        echo \"</td>\";\n       //Authentications information : auth method used and server used\n       //don't display is creation of a new user'\n        if (!empty($ID)) {\n            if (Session::haveRight(self::$rightname, self::READAUTHENT)) {\n                echo \"<td>\" . __('Authentication') . \"</td><td>\";\n                echo Auth::getMethodName($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n                if (!empty($this->fields[\"date_sync\"])) {\n                    //TRANS: %s is the date of last sync\n                    echo '<br>' . sprintf(\n                        __('Last synchronization on %s'),\n                        Html::convDateTime($this->fields[\"date_sync\"])\n                    );\n                }\n                if (!empty($this->fields[\"user_dn\"])) {\n                  //TRANS: %s is the user dn\n                    echo '<br>' . sprintf(__('%1$s: %2$s'), __('User DN'), $this->fields[\"user_dn\"]);\n                }\n                if ($this->fields['is_deleted_ldap']) {\n                    echo '<br>' . __('User missing in LDAP directory');\n                }\n\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n        } else {\n            echo \"<td colspan='2'><input type='hidden' name='authtype' value='1'></td>\";\n        }\n\n        echo \"</tr>\";\n\n        $mobilerand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n        echo Html::input(\n            'mobile',\n            [\n                'value' => $this->fields['mobile'],\n                'id'    => \"textfield_mobile$mobilerand\",\n            ]\n        );\n        echo \"</td>\";\n        $catrand = mt_rand();\n        echo \"<td><label for='dropdown_usercategories_id$catrand'>\" . _n('Category', 'Categories', 1) . \"</label></td><td>\";\n        UserCategory::dropdown(['value' => $this->fields[\"usercategories_id\"], 'rand' => $catrand]);\n        echo \"</td></tr>\";\n\n        $phone2rand = mt_rand();\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n        echo Html::input(\n            'phone2',\n            [\n                'value' => $this->fields['phone2'],\n                'id'    => \"textfield_phone2$phone2rand\",\n            ]\n        );\n        echo \"</td>\";\n        echo \"<td rowspan='4' class='middle'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n        echo \"<td class='center middle' rowspan='4'>\";\n        echo \"<textarea class='form-control' id='comment' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td></tr>\";\n\n        $admnumrand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n        echo Html::input(\n            'registration_number',\n            [\n                'value' => $this->fields['registration_number'],\n                'id'    => \"textfield_registration_number$admnumrand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        $titlerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='dropdown_usertitles_id$titlerand'>\" . _x('person', 'Title') . \"</label></td><td>\";\n        UserTitle::dropdown(['value' => $this->fields[\"usertitles_id\"], 'rand' => $titlerand]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        if (!empty($ID)) {\n            $locrand = mt_rand();\n            echo \"<td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n            $entities = $this->getEntities();\n            if (count($entities) <= 0) {\n                $entities = -1;\n            }\n            Location::dropdown(['value'  => $this->fields[\"locations_id\"],\n                'rand'   => $locrand,\n                'entity' => $entities\n            ]);\n            echo \"</td>\";\n        }\n        echo \"</tr>\";\n\n        if (empty($ID)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<th colspan='2'>\" . _n('Authorization', 'Authorizations', 1) . \"</th>\";\n            $recurrand = mt_rand();\n            echo \"<td><label for='dropdown__is_recursive$recurrand'>\" .  __('Recursive') . \"</label></td><td>\";\n            Dropdown::showYesNo(\"_is_recursive\", 0, -1, ['rand' => $recurrand]);\n            echo \"</td></tr>\";\n            $profilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='dropdown__profiles_id$profilerand'>\" .  Profile::getTypeName(1) . \"</label></td><td>\";\n            Profile::dropdownUnder(['name'  => '_profiles_id',\n                'rand'  => $profilerand,\n                'value' => Profile::getDefault()\n            ]);\n\n            $entrand = mt_rand();\n            echo \"</td><td><label for='dropdown__entities_id$entrand'>\" .  Entity::getTypeName(1) . \"</label></td><td>\";\n            Entity::dropdown(['name'                => '_entities_id',\n                'display_emptychoice' => false,\n                'rand'                => $entrand,\n                'entity'              => $_SESSION['glpiactiveentities']\n            ]);\n            echo \"</td></tr>\";\n        } else {\n            if ($higherrights || $ismyself) {\n                $profilerand = mt_rand();\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='dropdown_profiles_id$profilerand'>\" .  __('Default profile') . \"</label></td><td>\";\n\n                $options   = Dropdown::getDropdownArrayNames(\n                    'glpi_profiles',\n                    Profile_User::getUserProfiles($this->fields['id'])\n                );\n\n                Dropdown::showFromArray(\n                    \"profiles_id\",\n                    $options,\n                    ['value'               => $this->fields[\"profiles_id\"],\n                        'rand'                => $profilerand,\n                        'display_emptychoice' => true\n                    ]\n                );\n            }\n            if ($higherrights) {\n                $entrand = mt_rand();\n                echo \"</td><td><label for='dropdown_entities_id$entrand'>\" .  __('Default entity') . \"</label></td><td>\";\n                $entities = $this->getEntities();\n                Entity::dropdown(['value'  => $this->fields[\"entities_id\"],\n                    'rand'   => $entrand,\n                    'entity' => $entities\n                ]);\n                echo \"</td></tr>\";\n\n                $grouprand = mt_rand();\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='dropdown_profiles_id$grouprand'>\" .  __('Default group') . \"</label></td><td>\";\n\n                $options = [];\n                foreach (Group_User::getUserGroups($this->fields['id']) as $group) {\n                     $options[$group['id']] = $group['completename'];\n                }\n\n                Dropdown::showFromArray(\n                    \"groups_id\",\n                    $options,\n                    ['value'               => $this->fields[\"groups_id\"],\n                        'rand'                => $grouprand,\n                        'display_emptychoice' => true\n                    ]\n                );\n\n                echo \"</td>\";\n                $userrand = mt_rand();\n                echo \"<td><label for='dropdown_users_id_supervisor_$userrand'>\" .  __('Responsible') . \"</label></td><td>\";\n\n                User::dropdown(['name'   => 'users_id_supervisor',\n                    'value'  => $this->fields[\"users_id_supervisor\"],\n                    'rand'   => $userrand,\n                    'entity' => $_SESSION[\"glpiactive_entity\"],\n                    'right'  => 'all'\n                ]);\n                echo \"</td></tr>\";\n            }\n\n            if (\n                Entity::getAnonymizeConfig() == Entity::ANONYMIZE_USE_NICKNAME\n                && Session::getCurrentInterface() == \"central\"\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='nickname$rand'> \" . __('Nickname') . \"</label></td>\";\n                echo \"<td>\";\n                if ($this->can($ID, UPDATE)) {\n                    echo Html::input('nickname', [\n                        'value' => $this->fields['nickname']\n                    ]);\n                } else {\n                    echo $this->fields['nickname'];\n                }\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            if ($this->can($ID, UPDATE)) {\n                echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Remote access keys') . \"</th></tr>\";\n\n                echo \"<tr class='tab_bg_1'><td>\";\n                echo __(\"Personal token\");\n                echo \"</td><td colspan='2'>\";\n\n                if (!empty($this->fields[\"personal_token\"])) {\n                    echo \"<div class='copy_to_clipboard_wrapper'>\";\n                    echo Html::input('_personal_token', [\n                        'value'    => $this->fields[\"personal_token\"],\n                        'style'    => 'width:90%'\n                    ]);\n                    echo \"</div>\";\n                    echo \"(\" . sprintf(\n                        __('generated on %s'),\n                        Html::convDateTime($this->fields[\"personal_token_date\"])\n                    ) . \")\";\n                }\n                echo \"</td><td>\";\n                Html::showCheckbox(['name'  => '_reset_personal_token',\n                    'title' => __('Regenerate')\n                ]);\n                echo \"&nbsp;&nbsp;\" . __('Regenerate');\n                echo \"</td></tr>\";\n\n                echo \"<tr class='tab_bg_1'><td>\";\n                echo __(\"API token\");\n                echo \"</td><td colspan='2'>\";\n                if (!empty($this->fields[\"api_token\"])) {\n                     echo \"<div class='copy_to_clipboard_wrapper'>\";\n                     echo Html::input('_api_token', [\n                         'value'    => $this->fields[\"api_token\"],\n                         'style'    => 'width:90%'\n                     ]);\n                     echo \"</div>\";\n                     echo \"(\" . sprintf(\n                         __('generated on %s'),\n                         Html::convDateTime($this->fields[\"api_token_date\"])\n                     ) . \")\";\n                }\n                echo \"</td><td>\";\n                Html::showCheckbox(['name'  => '_reset_api_token',\n                    'title' => __('Regenerate')\n                ]);\n                echo \"&nbsp;&nbsp;\" . __('Regenerate');\n                echo \"</td></tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td colspan='2' class='center'>\";\n            if ($this->fields[\"last_login\"]) {\n                printf(__('Last login on %s'), Html::convDateTime($this->fields[\"last_login\"]));\n            }\n            echo \"</td><td colspan='2'class='center'>\";\n\n            echo \"</td></tr>\";\n        }\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n\n    /**\n     * Print the user preference form.\n     *\n     * @param string  $target Form target\n     * @param integer $ID     ID of the user\n     *\n     * @return boolean true if user found, false otherwise\n     */\n    public function showMyForm($target, $ID)\n    {\n        global $CFG_GLPI, $DB;\n\n       // Affiche un formulaire User\n        if (\n            ($ID != Session::getLoginUserID())\n            && !$this->currentUserHaveMoreRightThan($ID)\n        ) {\n            return false;\n        }\n        if ($this->getFromDB($ID)) {\n            $rand     = mt_rand();\n            $authtype = $this->getAuthMethodsByID();\n\n            $extauth  = !(($this->fields[\"authtype\"] == Auth::DB_GLPI)\n                       || (($this->fields[\"authtype\"] == Auth::NOT_YET_AUTHENTIFIED)\n                           && !empty($this->fields[\"password\"])));\n\n            echo \"<div class='center'>\";\n            echo \"<form method='post' name='user_manager' enctype='multipart/form-data' action='\" . $target . \"' autocomplete='off'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='4'>\" . sprintf(__('%1$s: %2$s'), __('Login'), $this->fields[\"name\"]);\n            echo \"<input type='hidden' name='name' value='\" . $this->fields[\"name\"] . \"'>\";\n            echo \"<input type='hidden' name='id' value='\" . $this->fields[\"id\"] . \"'>\";\n            echo \"</th></tr>\";\n\n            $surnamerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['realname_field'])\n                && !empty($authtype['realname_field'])\n            ) {\n                echo $this->fields[\"realname\"];\n            } else {\n                echo Html::input(\n                    'realname',\n                    [\n                        'value' => $this->fields['realname'],\n                        'id'    => \"textfield_realname$surnamerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            if (!empty($this->fields[\"name\"])) {\n                echo \"<td rowspan='7'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n                echo \"<td rowspan='7'>\";\n                echo self::getPictureForUser($ID);\n\n                echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n\n                echo \"&nbsp;\";\n                Html::showCheckbox(['name' => '_blank_picture', 'title' => __('Clear')]);\n                echo \"&nbsp;\" . __('Clear');\n\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            $firstnamerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n            if (\n                $extauth\n                && isset($authtype['firstname_field'])\n                && !empty($authtype['firstname_field'])\n            ) {\n                echo $this->fields[\"firstname\"];\n            } else {\n                echo Html::input(\n                    'firstname',\n                    [\n                        'value' => $this->fields['firstname'],\n                        'id'    => \"textfield_firstname$firstnamerand\",\n                    ]\n                );\n            }\n            echo \"</td></tr>\";\n\n            if (\n                $extauth\n                && $this->fields['auths_id']\n                && AuthLDAP::isSyncFieldConfigured($this->fields['auths_id'])\n            ) {\n                echo \"<tr class='tab_bg_1'><td>\" . __('Synchronization field') . \"</td><td>\";\n                if (empty($this->fields['sync_field'])) {\n                    echo Dropdown::EMPTY_VALUE;\n                } else {\n                    echo $this->fields['sync_field'];\n                }\n                echo \"</td></tr>\";\n            } else {\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'>\";\n\n            if (!GLPI_DEMO_MODE) {\n                $langrand = mt_rand();\n                echo \"<td><label for='dropdown_language$langrand'>\" . __('Language') . \"</label></td><td>\";\n               // Language is stored as null in DB if value is same as the global config.\n                $language = $this->fields[\"language\"];\n                if (null === $this->fields[\"language\"]) {\n                    $language = $CFG_GLPI['language'];\n                }\n                Dropdown::showLanguages(\n                    \"language\",\n                    [\n                        'rand'  => $langrand,\n                        'value' => $language,\n                    ]\n                );\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n            echo \"</tr>\";\n\n           //do some rights verification\n            if (\n                !$extauth\n                && Session::haveRight(\"password_update\", \"1\")\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='password'>\" . __('Password') . \"</label></td>\";\n                echo \"<td><input id='password' type='password' name='password' value='' size='30' autocomplete='new-password' onkeyup=\\\"return passwordCheck();\\\" class='form-control'>\";\n                echo \"</td>\";\n                echo \"</tr>\";\n\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='password2'>\" . __('Password confirmation') . \"</label></td>\";\n                echo \"<td><input type='password' name='password2' id='password2' value='' size='30' autocomplete='new-password' class='form-control'>\";\n                echo \"</td></tr>\";\n\n                if ($CFG_GLPI[\"use_password_security\"]) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    echo \"<td rowspan='2'>\";\n                    echo __('Password security policy');\n                    echo \"</td>\";\n                    echo \"<td rowspan='2'>\";\n                    Config::displayPasswordSecurityChecks();\n                    echo \"</td>\";\n                    echo \"</tr>\";\n                }\n            } else {\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n                echo \"<tr class='tab_bg_1'><td colspan='2'></td></tr>\";\n            }\n\n            if ($DB->use_timezones || Session::haveRight(\"config\", READ)) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='timezone'>\" . __('Time zone') . \"</label></td><td>\";\n                if ($DB->use_timezones) {\n                    $timezones = $DB->getTimezones();\n                    Dropdown::showFromArray(\n                        'timezone',\n                        $timezones,\n                        [\n                            'value'                 => $this->fields[\"timezone\"],\n                            'display_emptychoice'   => true,\n                            'emptylabel'            => __('Use server configuration')\n                        ]\n                    );\n                } else if (Session::haveRight(\"config\", READ)) {\n                   // Display a warning but only if user is more or less an admin\n                    echo __('Timezone usage has not been activated.')\n                    . ' '\n                    . sprintf(__('Run the \"php bin/console %1$s\" command to activate it.'), 'glpi:database:enable_timezones');\n                }\n                echo \"</td>\";\n                if (\n                    $extauth\n                    || !Session::haveRight(\"password_update\", \"1\")\n                ) {\n                    echo \"<td colspan='2'></td>\";\n                }\n                echo \"</tr>\";\n            }\n\n            $phonerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_phone$phonerand'>\" .  Phone::getTypeName(1) . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['phone_field']) && !empty($authtype['phone_field'])\n            ) {\n                echo $this->fields[\"phone\"];\n            } else {\n                echo Html::input(\n                    'phone',\n                    [\n                        'value' => $this->fields['phone'],\n                        'id'    => \"textfield_phone$phonerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n            echo \"<td class='top'>\" . _n('Email', 'Emails', Session::getPluralNumber());\n            UserEmail::showAddEmailButton($this);\n            echo \"</td><td>\";\n            UserEmail::showForUser($this);\n            echo \"</td>\";\n            echo \"</tr>\";\n\n            $mobilerand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_mobile$mobilerand'>\" . __('Mobile phone') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['mobile_field']) && !empty($authtype['mobile_field'])\n            ) {\n                echo $this->fields[\"mobile\"];\n            } else {\n                echo Html::input(\n                    'mobile',\n                    [\n                        'value' => $this->fields['mobile'],\n                        'id'    => \"textfield_mobile$mobilerand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            if (count($_SESSION['glpiprofiles']) > 1) {\n                $profilerand = mt_rand();\n                echo \"<td><label for='dropdown_profiles_id$profilerand'>\" . __('Default profile') . \"</label></td><td>\";\n\n                $options = Dropdown::getDropdownArrayNames(\n                    'glpi_profiles',\n                    Profile_User::getUserProfiles($this->fields['id'])\n                );\n                Dropdown::showFromArray(\n                    \"profiles_id\",\n                    $options,\n                    ['value'               => $this->fields[\"profiles_id\"],\n                        'rand'                => $profilerand,\n                        'display_emptychoice' => true\n                    ]\n                );\n                echo \"</td>\";\n            } else {\n                echo \"<td colspan='2'>&nbsp;</td>\";\n            }\n            echo \"</tr>\";\n\n            $phone2rand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_phone2$phone2rand'>\" .  __('Phone 2') . \"</label></td><td>\";\n\n            if (\n                $extauth\n                && isset($authtype['phone2_field']) && !empty($authtype['phone2_field'])\n            ) {\n                echo $this->fields[\"phone2\"];\n            } else {\n                echo Html::input(\n                    'phone2',\n                    [\n                        'value' => $this->fields['phone2'],\n                        'id'    => \"textfield_phone2$phone2rand\",\n                    ]\n                );\n            }\n            echo \"</td>\";\n\n            $entities = $this->getEntities();\n            if (\n                !GLPI_DEMO_MODE\n                && (count($_SESSION['glpiactiveentities']) > 1)\n            ) {\n                $entrand = mt_rand();\n                echo \"<td><label for='dropdown_entities_id$entrand'>\" . __('Default entity') . \"</td><td>\";\n                Entity::dropdown(['value'  => $this->fields['entities_id'],\n                    'rand'   => $entrand,\n                    'entity' => $entities\n                ]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            $admnumrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='textfield_registration_number$admnumrand'>\" . __('Administrative number') . \"</label></td><td>\";\n            if (\n                $extauth\n                && isset($authtype['registration_number_field']) && !empty($authtype['registration_number_field'])\n            ) {\n                echo $this->fields[\"registration_number\"];\n            } else {\n                echo Html::input(\n                    'registration_number',\n                    [\n                        'value' => $this->fields['registration_number'],\n                        'id'    => \"textfield_registration_number$admnumrand\",\n                    ]\n                );\n            }\n            echo \"</td><td colspan='2'></td></tr>\";\n\n            $locrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='dropdown_locations_id$locrand'>\" . Location::getTypeName(1) . \"</label></td><td>\";\n            Location::dropdown(['value'  => $this->fields['locations_id'],\n                'rand'   => $locrand,\n                'entity' => $entities\n            ]);\n\n            if (Config::canUpdate()) {\n                $moderand = mt_rand();\n                echo \"<td><label for='dropdown_use_mode$moderand'>\" . __('Use GLPI in mode') . \"</label></td><td>\";\n                $modes = [\n                    Session::NORMAL_MODE => __('Normal'),\n                    Session::DEBUG_MODE  => __('Debug'),\n                ];\n                Dropdown::showFromArray('use_mode', $modes, ['value' => $this->fields[\"use_mode\"], 'rand' => $moderand]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            if (\n                Entity::getAnonymizeConfig() == Entity::ANONYMIZE_USE_NICKNAME\n                && Session::getCurrentInterface() == \"central\"\n            ) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td><label for='nickname$rand'> \" . __('Nickname') . \"</label></td>\";\n                echo \"<td>\";\n                echo Html::input('nickname', [\n                    'value' => $this->fields['nickname']\n                ]);\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Remote access keys') . \"</th></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"Personal token\");\n            echo \"</td><td colspan='2'>\";\n\n            if (!empty($this->fields[\"personal_token\"])) {\n                echo \"<div class='copy_to_clipboard_wrapper'>\";\n                echo Html::input('_personal_token', [\n                    'value'    => $this->fields[\"personal_token\"],\n                    'style'    => 'width:90%'\n                ]);\n                echo \"</div>\";\n                echo \"(\" . sprintf(\n                    __('generated on %s'),\n                    Html::convDateTime($this->fields[\"personal_token_date\"])\n                ) . \")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_personal_token',\n                'title' => __('Regenerate')\n            ]);\n            echo \"&nbsp;&nbsp;\" . __('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td>\";\n            echo __(\"API token\");\n            echo \"</td><td colspan='2'>\";\n            if (!empty($this->fields[\"api_token\"])) {\n                echo \"<div class='copy_to_clipboard_wrapper'>\";\n                echo Html::input('_api_token', [\n                    'value'    => $this->fields[\"api_token\"],\n                    'style'    => 'width:90%'\n                ]);\n                 echo \"</div>\";\n                 echo \"(\" . sprintf(\n                     __('generated on %s'),\n                     Html::convDateTime($this->fields[\"api_token_date\"])\n                 ) . \")\";\n            }\n            echo \"</td><td>\";\n            Html::showCheckbox(['name'  => '_reset_api_token',\n                'title' => __('Regenerate')\n            ]);\n            echo \"&nbsp;&nbsp;\" . __('Regenerate');\n            echo \"</td></tr>\";\n\n            echo \"<tr><td class='tab_bg_2 center' colspan='4'>\";\n            echo \"<input type='submit' name='update' value=\\\"\" . _sx('button', 'Save') . \"\\\" class='btn btn-primary'>\";\n            echo \"</td></tr>\";\n\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get all the authentication method parameters for the current user.\n     *\n     * @return array\n     */\n    public function getAuthMethodsByID()\n    {\n        return Auth::getMethodsByID($this->fields[\"authtype\"], $this->fields[\"auths_id\"]);\n    }\n\n\n    public function pre_updateInDB()\n    {\n        global $DB;\n\n        if (($key = array_search('name', $this->updates)) !== false) {\n           /// Check if user does not exists\n            $iterator = $DB->request([\n                'FROM'   => $this->getTable(),\n                'WHERE'  => [\n                    'name'   => $this->input['name'],\n                    'id'     => ['<>', $this->input['id']]\n                ]\n            ]);\n\n            if (count($iterator)) {\n                 //To display a message\n                 $this->fields['name'] = $this->oldvalues['name'];\n                 unset($this->updates[$key]);\n                 unset($this->oldvalues['name']);\n                 Session::addMessageAfterRedirect(\n                     __('Unable to update login. A user already exists.'),\n                     false,\n                     ERROR\n                 );\n            }\n\n            if (!Auth::isValidLogin(stripslashes($this->input['name']))) {\n                $this->fields['name'] = $this->oldvalues['name'];\n                unset($this->updates[$key]);\n                unset($this->oldvalues['name']);\n                Session::addMessageAfterRedirect(\n                    __('The login is not valid. Unable to update login.'),\n                    false,\n                    ERROR\n                );\n            }\n        }\n\n       // ## Security system except for login update:\n       //\n       // An **external** (ldap, mail) user without User::UPDATE right\n       // should not be able to update its own fields\n       // (for example, fields concerned by ldap synchronisation)\n       // except on login action (which triggers synchronisation).\n        if (\n            Session::getLoginUserID() === (int)$this->input['id']\n            && !Session::haveRight(\"user\", UPDATE)\n            && !strpos($_SERVER['PHP_SELF'], \"/front/login.php\")\n            && isset($this->fields[\"authtype\"])\n        ) {\n           // extauth ldap case\n            if (\n                $_SESSION[\"glpiextauth\"]\n                && ($this->fields[\"authtype\"] == Auth::LDAP\n                 || Auth::isAlternateAuth($this->fields[\"authtype\"]))\n            ) {\n                $authtype = Auth::getMethodsByID(\n                    $this->fields[\"authtype\"],\n                    $this->fields[\"auths_id\"]\n                );\n                if (count($authtype)) {\n                     $fields = AuthLDAP::getSyncFields($authtype);\n                    foreach ($fields as $key => $val) {\n                        if (\n                            !empty($val)\n                            && (($key2 = array_search($key, $this->updates)) !== false)\n                        ) {\n                            unset($this->updates[$key2]);\n                            unset($this->oldvalues[$key]);\n                        }\n                    }\n                }\n            }\n\n            if (($key = array_search(\"is_active\", $this->updates)) !== false) {\n                unset($this->updates[$key]);\n                unset($this->oldvalues['is_active']);\n            }\n\n            if (($key = array_search(\"comment\", $this->updates)) !== false) {\n                unset($this->updates[$key]);\n                unset($this->oldvalues['comment']);\n            }\n        }\n    }\n\n    public function getSpecificMassiveActions($checkitem = null)\n    {\n\n        $isadmin = static::canUpdate();\n        $actions = parent::getSpecificMassiveActions($checkitem);\n        if ($isadmin) {\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'add']\n                                                         = \"<i class='fas fa-users'></i>\" .\n                                                           __('Associate to a group');\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'remove']\n                                                         = __('Dissociate from a group');\n            $actions['Profile_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'add']\n                                                         = \"<i class='fas fa-user-shield'></i>\" .\n                                                           __('Associate to a profile');\n            $actions['Profile_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'remove']\n                                                         = __('Dissociate from a profile');\n            $actions['Group_User' . MassiveAction::CLASS_ACTION_SEPARATOR . 'change_group_user']\n                                                         = \"<i class='fas fa-users-cog'></i>\" .\n                                                           __(\"Move to group\");\n        }\n\n        if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n            $prefix                                    = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR;\n            $actions[$prefix . 'change_authtype']        = \"<i class='fas fa-user-cog'></i>\" .\n                                                      _x('button', 'Change the authentication method');\n            $actions[$prefix . 'force_user_ldap_update'] = \"<i class='fas fa-sync'></i>\" .\n                                                      __('Force synchronization');\n        }\n        return $actions;\n    }\n\n    public static function showMassiveActionsSubForm(MassiveAction $ma)\n    {\n        global $CFG_GLPI;\n\n        switch ($ma->getAction()) {\n            case 'change_authtype':\n                $rand             = Auth::dropdown(['name' => 'authtype']);\n                $paramsmassaction = ['authtype' => '__VALUE__'];\n                Ajax::updateItemOnSelectEvent(\n                    \"dropdown_authtype$rand\",\n                    \"show_massiveaction_field\",\n                    $CFG_GLPI[\"root_doc\"] .\n                                             \"/ajax/dropdownMassiveActionAuthMethods.php\",\n                    $paramsmassaction\n                );\n                echo \"<span id='show_massiveaction_field'><br><br>\";\n                echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']) . \"</span>\";\n                return true;\n        }\n        return parent::showMassiveActionsSubForm($ma);\n    }\n\n    public static function processMassiveActionsForOneItemtype(\n        MassiveAction $ma,\n        CommonDBTM $item,\n        array $ids\n    ) {\n\n        switch ($ma->getAction()) {\n            case 'force_user_ldap_update':\n                foreach ($ids as $id) {\n                    if ($item->can($id, UPDATE)) {\n                        if (\n                            ($item->fields[\"authtype\"] == Auth::LDAP)\n                            || ($item->fields[\"authtype\"] == Auth::EXTERNAL)\n                        ) {\n                            if (AuthLDAP::forceOneUserSynchronization($item, false, false)) {\n                                $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                            } else {\n                                $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                                $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                            }\n                        } else {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                            $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                        }\n                    } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_NORIGHT);\n                        $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    }\n                }\n                return;\n\n            case 'change_authtype':\n                $input = $ma->getInput();\n                if (\n                    !isset($input[\"authtype\"])\n                    || !isset($input[\"auths_id\"])\n                ) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n                    $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION));\n                    return;\n                }\n                if (Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n                    if (User::changeAuthMethod($ids, $input[\"authtype\"], $input[\"auths_id\"])) {\n                        $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_OK);\n                    } else {\n                        $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_KO);\n                    }\n                } else {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                }\n                return;\n        }\n        parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n    }\n\n\n    public function rawSearchOptions()\n    {\n       // forcegroup by on name set force group by for all items\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => __('Characteristics')\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Login'),\n            'datatype'           => 'itemlink',\n            'forcegroupby'       => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'massiveaction'      => false,\n            'datatype'           => 'number'\n        ];\n\n        $tab[] = [\n            'id'                 => '34',\n            'table'              => $this->getTable(),\n            'field'              => 'realname',\n            'name'               => __('Last name'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '9',\n            'table'              => $this->getTable(),\n            'field'              => 'firstname',\n            'name'               => __('First name'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => 'glpi_useremails',\n            'field'              => 'email',\n            'name'               => _n('Email', 'Emails', Session::getPluralNumber()),\n            'datatype'           => 'email',\n            'joinparams'         => [\n                'jointype'           => 'child'\n            ],\n            'forcegroupby'       => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '150',\n            'table'              => $this->getTable(),\n            'field'              => 'picture',\n            'name'               => _n('Picture', 'Pictures', 1),\n            'datatype'           => 'specific',\n            'nosearch'           => true,\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '28',\n            'table'              => $this->getTable(),\n            'field'              => 'sync_field',\n            'name'               => __('Synchronization field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string',\n        ];\n\n        $tab = array_merge($tab, Location::rawSearchOptionsToAdd());\n\n        $tab[] = [\n            'id'                 => '8',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'phone',\n            'name'               => Phone::getTypeName(1),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '10',\n            'table'              => $this->getTable(),\n            'field'              => 'phone2',\n            'name'               => __('Phone 2'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '11',\n            'table'              => $this->getTable(),\n            'field'              => 'mobile',\n            'name'               => __('Mobile phone'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '13',\n            'table'              => 'glpi_groups',\n            'field'              => 'completename',\n            'name'               => Group::getTypeName(Session::getPluralNumber()),\n            'forcegroupby'       => true,\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_groups_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '14',\n            'table'              => $this->getTable(),\n            'field'              => 'last_login',\n            'name'               => __('Last login'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '15',\n            'table'              => $this->getTable(),\n            'field'              => 'authtype',\n            'name'               => __('Authentication'),\n            'massiveaction'      => false,\n            'datatype'           => 'specific',\n            'searchtype'         => 'equals',\n            'additionalfields'   => [\n                '0'                  => 'auths_id'\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '30',\n            'table'              => 'glpi_authldaps',\n            'field'              => 'name',\n            'linkfield'          => 'auths_id',\n            'name'               => __('LDAP directory for authentication'),\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'condition'          => ['REFTABLE.authtype' => Auth::LDAP]\n            ],\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '31',\n            'table'              => 'glpi_authmails',\n            'field'              => 'name',\n            'linkfield'          => 'auths_id',\n            'name'               => __('Email server for authentication'),\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'condition'          => ['REFTABLE.authtype' => Auth::MAIL]\n            ],\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '17',\n            'table'              => $this->getTable(),\n            'field'              => 'language',\n            'name'               => __('Language'),\n            'datatype'           => 'language',\n            'display_emptychoice' => true,\n            'emptylabel'         => 'Default value'\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => 'glpi_profiles',\n            'field'              => 'name',\n            'name'               => sprintf(\n                __('%1$s (%2$s)'),\n                Profile::getTypeName(Session::getPluralNumber()),\n                Entity::getTypeName(1)\n            ),\n            'forcegroupby'       => true,\n            'massiveaction'      => false,\n            'datatype'           => 'dropdown',\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_profiles_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '21',\n            'table'              => $this->getTable(),\n            'field'              => 'user_dn',\n            'name'               => __('User DN'),\n            'massiveaction'      => false,\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '22',\n            'table'              => $this->getTable(),\n            'field'              => 'registration_number',\n            'name'               => __('Administrative number'),\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '23',\n            'table'              => $this->getTable(),\n            'field'              => 'date_sync',\n            'datatype'           => 'datetime',\n            'name'               => __('Last synchronization'),\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '24',\n            'table'              => $this->getTable(),\n            'field'              => 'is_deleted_ldap',\n            'name'               => __('Deleted user in LDAP directory'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '80',\n            'table'              => 'glpi_entities',\n            'linkfield'          => 'entities_id',\n            'field'              => 'completename',\n            'name'               => sprintf(\n                __('%1$s (%2$s)'),\n                Entity::getTypeName(Session::getPluralNumber()),\n                Profile::getTypeName(1)\n            ),\n            'forcegroupby'       => true,\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_profiles_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child'\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '81',\n            'table'              => 'glpi_usertitles',\n            'field'              => 'name',\n            'name'               => __('Title'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '82',\n            'table'              => 'glpi_usercategories',\n            'field'              => 'name',\n            'name'               => _n('Category', 'Categories', 1),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '79',\n            'table'              => 'glpi_profiles',\n            'field'              => 'name',\n            'name'               => __('Default profile'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '77',\n            'table'              => 'glpi_entities',\n            'field'              => 'name',\n            'massiveaction'      => true,\n            'name'               => __('Default entity'),\n            'datatype'           => 'dropdown'\n        ];\n\n        $tab[] = [\n            'id'                 => '62',\n            'table'              => $this->getTable(),\n            'field'              => 'begin_date',\n            'name'               => __('Begin date'),\n            'datatype'           => 'datetime'\n        ];\n\n        $tab[] = [\n            'id'                 => '63',\n            'table'              => $this->getTable(),\n            'field'              => 'end_date',\n            'name'               => __('End date'),\n            'datatype'           => 'datetime'\n        ];\n\n        $tab[] = [\n            'id'                 => '60',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of tickets as requester'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_tickets_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child',\n                        'condition'          => ['NEWTABLE.type' => CommonITILActor::REQUESTER]\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '61',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of written tickets'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'jointype'           => 'child',\n                'linkfield'          => 'users_id_recipient'\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '64',\n            'table'              => 'glpi_tickets',\n            'field'              => 'id',\n            'name'               => __('Number of assigned tickets'),\n            'forcegroupby'       => true,\n            'usehaving'          => true,\n            'datatype'           => 'count',\n            'massiveaction'      => false,\n            'joinparams'         => [\n                'beforejoin'         => [\n                    'table'              => 'glpi_tickets_users',\n                    'joinparams'         => [\n                        'jointype'           => 'child',\n                        'condition'          => ['NEWTABLE.type' => CommonITILActor::ASSIGN]\n                    ]\n                ]\n            ]\n        ];\n\n        $tab[] = [\n            'id'                 => '99',\n            'table'              => 'glpi_users',\n            'field'              => 'name',\n            'linkfield'          => 'users_id_supervisor',\n            'name'               => __('Responsible'),\n            'datatype'           => 'dropdown',\n            'massiveaction'      => false,\n        ];\n\n       // add objectlock search options\n        $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n        return $tab;\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'authtype':\n                $auths_id = 0;\n                if (isset($values['auths_id']) && !empty($values['auths_id'])) {\n                    $auths_id = $values['auths_id'];\n                }\n                return Auth::getMethodName($values[$field], $auths_id);\n            case 'picture':\n                if (isset($options['html']) && $options['html']) {\n                    return Html::image(\n                        self::getThumbnailURLForPicture($values['picture']),\n                        ['class' => 'user_picture_small', 'alt' => _n('Picture', 'Pictures', 1)]\n                    );\n                }\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n        switch ($field) {\n            case 'authtype':\n                $options['name'] = $name;\n                $options['value'] = $values[$field];\n                return Auth::dropdown($options);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n\n    /**\n     * Get all groups where the current user have delegating.\n     *\n     * @since 0.83\n     *\n     * @param integer|string $entities_id ID of the entity to restrict\n     *\n     * @return integer[]\n     */\n    public static function getDelegateGroupsForUser($entities_id = '')\n    {\n        global $DB;\n\n        $iterator = $DB->request([\n            'SELECT'          => 'glpi_groups_users.groups_id',\n            'DISTINCT'        => true,\n            'FROM'            => 'glpi_groups_users',\n            'INNER JOIN'      => [\n                'glpi_groups'  => [\n                    'FKEY'   => [\n                        'glpi_groups_users'  => 'groups_id',\n                        'glpi_groups'        => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'           => [\n                'glpi_groups_users.users_id'        => Session::getLoginUserID(),\n                'glpi_groups_users.is_userdelegate' => 1\n            ] + getEntitiesRestrictCriteria('glpi_groups', '', $entities_id, 1)\n        ]);\n\n        $groups = [];\n        foreach ($iterator as $data) {\n            $groups[$data['groups_id']] = $data['groups_id'];\n        }\n        return $groups;\n    }\n\n\n    /**\n     * Execute the query to select box with all glpi users where select key = name\n     *\n     * Internaly used by showGroup_Users, dropdownUsers and ajax/getDropdownUsers.php\n     *\n     * @param boolean         $count            true if execute an count(*) (true by default)\n     * @param string|string[] $right            limit user who have specific right (default 'all')\n     * @param integer         $entity_restrict  Restrict to a defined entity (default -1)\n     * @param integer         $value            default value (default 0)\n     * @param integer[]       $used             Already used items ID: not to display in dropdown\n     * @param string          $search           pattern (default '')\n     * @param integer         $start            start LIMIT value (default 0)\n     * @param integer         $limit            limit LIMIT value (default -1 no limit)\n     * @param boolean         $inactive_deleted true to retreive also inactive or deleted users\n     *\n     * @return mysqli_result|boolean\n     */\n    public static function getSqlSearchResult(\n        $count = true,\n        $right = \"all\",\n        $entity_restrict = -1,\n        $value = 0,\n        array $used = [],\n        $search = '',\n        $start = 0,\n        $limit = -1,\n        $inactive_deleted = 0,\n        $with_no_right = 0\n    ) {\n        global $DB;\n\n\n\n       // No entity define : use active ones\n        if ($entity_restrict < 0) {\n            $entity_restrict = $_SESSION[\"glpiactiveentities\"];\n        }\n\n        $joinprofile      = false;\n        $joinprofileright = false;\n        $WHERE = [];\n\n\n        switch ($right) {\n            case \"interface\":\n                $joinprofile = true;\n                $WHERE = [\n                    'glpi_profiles.interface' => 'central'\n                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1);\n                break;\n\n            case \"id\":\n                $WHERE = ['glpi_users.id' => Session::getLoginUserID()];\n                break;\n\n            case \"delegate\":\n                $groups = self::getDelegateGroupsForUser($entity_restrict);\n                $users  = [];\n                if (count($groups)) {\n                    $iterator = $DB->request([\n                        'SELECT'    => 'glpi_users.id',\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_users'   => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'users_id',\n                                    'glpi_users'         => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.groups_id' => $groups,\n                            'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                        ]\n                    ]);\n                    foreach ($iterator as $data) {\n                           $users[$data[\"id\"]] = $data[\"id\"];\n                    }\n                }\n               // Add me to users list for central\n                if (Session::getCurrentInterface() == 'central') {\n                    $users[Session::getLoginUserID()] = Session::getLoginUserID();\n                }\n\n                if (count($users)) {\n                    $WHERE = ['glpi_users.id' => $users];\n                }\n                break;\n\n            case \"groups\":\n                $groups = [];\n                if (isset($_SESSION['glpigroups'])) {\n                    $groups = $_SESSION['glpigroups'];\n                }\n                $users  = [];\n                if (count($groups)) {\n                    $iterator = $DB->request([\n                        'SELECT'    => 'glpi_users.id',\n                        'FROM'      => 'glpi_groups_users',\n                        'LEFT JOIN' => [\n                            'glpi_users'   => [\n                                'FKEY'   => [\n                                    'glpi_groups_users'  => 'users_id',\n                                    'glpi_users'         => 'id'\n                                ]\n                            ]\n                        ],\n                        'WHERE'     => [\n                            'glpi_groups_users.groups_id' => $groups,\n                            'glpi_groups_users.users_id'  => ['<>', Session::getLoginUserID()]\n                        ]\n                    ]);\n                    foreach ($iterator as $data) {\n                          $users[$data[\"id\"]] = $data[\"id\"];\n                    }\n                }\n               // Add me to users list for central\n                if (Session::getCurrentInterface() == 'central') {\n                    $users[Session::getLoginUserID()] = Session::getLoginUserID();\n                }\n\n                if (count($users)) {\n                    $WHERE = ['glpi_users.id' => $users];\n                }\n\n                break;\n\n            case \"all\":\n                $WHERE = [\n                    'glpi_users.id' => ['>', 0],\n                    'OR' => getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                ];\n\n                if ($with_no_right) {\n                    $WHERE['OR'][] = ['glpi_profiles_users.entities_id' => null];\n                }\n                break;\n\n            default:\n                $joinprofile = true;\n                $joinprofileright = true;\n                if (!is_array($right)) {\n                    $right = [$right];\n                }\n                $forcecentral = true;\n\n                $ORWHERE = [];\n                foreach ($right as $r) {\n                    switch ($r) {\n                        case 'own_ticket':\n                             $ORWHERE[] = [\n                                 [\n                                     'glpi_profilerights.name'     => 'ticket',\n                                     'glpi_profilerights.rights'   => ['&', Ticket::OWN]\n                                 ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                             ];\n                            break;\n\n                        case 'create_ticket_validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'  => 'ticketvalidation',\n                                    'OR'                       => [\n                                        ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEREQUEST]],\n                                        ['glpi_profilerights.rights'   => ['&', TicketValidation::CREATEINCIDENT]]\n                                    ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate_request':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'ticketvalidation',\n                                    'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEREQUEST]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate_incident':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'ticketvalidation',\n                                    'glpi_profilerights.rights'   => ['&', TicketValidation::VALIDATEINCIDENT]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            $forcecentral = false;\n                            break;\n\n                        case 'validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'changevalidation',\n                                    'glpi_profilerights.rights'   => ['&', ChangeValidation::VALIDATE]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'create_validate':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'changevalidation',\n                                    'glpi_profilerights.rights'   => ['&', CREATE]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'see_project':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'project',\n                                    'glpi_profilerights.rights'   => ['&', Project::READMY]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        case 'faq':\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => 'knowbase',\n                                    'glpi_profilerights.rights'   => ['&', KnowbaseItem::READFAQ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                            break;\n\n                        default:\n                           // Check read or active for rights\n                            $ORWHERE[] = [\n                                [\n                                    'glpi_profilerights.name'     => $r,\n                                    'glpi_profilerights.rights'   => [\n                                        '&',\n                                        READ | CREATE | UPDATE | DELETE | PURGE\n                                    ]\n                                ] + getEntitiesRestrictCriteria('glpi_profiles_users', '', $entity_restrict, 1)\n                            ];\n                    }\n                    if (in_array($r, Profile::$helpdesk_rights)) {\n                        $forcecentral = false;\n                    }\n                }\n\n                if (count($ORWHERE)) {\n                    $WHERE[] = ['OR' => $ORWHERE];\n                }\n\n                if ($forcecentral) {\n                    $WHERE['glpi_profiles.interface'] = 'central';\n                }\n        }\n\n        if (!$inactive_deleted) {\n            $WHERE = array_merge(\n                $WHERE,\n                [\n                    'glpi_users.is_deleted' => 0,\n                    'glpi_users.is_active'  => 1,\n                    [\n                        'OR' => [\n                            ['glpi_users.begin_date' => null],\n                            ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                        ]\n                    ],\n                    [\n                        'OR' => [\n                            ['glpi_users.end_date' => null],\n                            ['glpi_users.end_date' => ['>', new QueryExpression('NOW()')]]\n                        ]\n                    ]\n\n                ]\n            );\n        }\n\n        if (\n            (is_numeric($value) && $value)\n            || count($used)\n        ) {\n            $WHERE[] = [\n                'NOT' => [\n                    'glpi_users.id' => $used\n                ]\n            ];\n        }\n\n        // remove helpdesk user\n        $config = Config::getConfigurationValues('core');\n        $WHERE[] = [\n            'NOT' => [\n                'glpi_users.id' => $config['system_user']\n            ]\n        ];\n\n        $criteria = [\n            'FROM'            => 'glpi_users',\n            'LEFT JOIN'       => [\n                'glpi_useremails'       => [\n                    'ON' => [\n                        'glpi_useremails' => 'users_id',\n                        'glpi_users'      => 'id',\n                        ['AND' => ['glpi_useremails.is_default' => 1]]\n                    ]\n                ],\n                'glpi_profiles_users'   => [\n                    'ON' => [\n                        'glpi_profiles_users'   => 'users_id',\n                        'glpi_users'            => 'id'\n                    ]\n                ]\n            ]\n        ];\n        if ($count) {\n            $criteria['SELECT'] = ['COUNT' => 'glpi_users.id AS CPT'];\n            $criteria['DISTINCT'] = true;\n        } else {\n            $criteria['SELECT'] = ['glpi_users.*', 'glpi_useremails.email AS default_email'];\n            $criteria['DISTINCT'] = true;\n        }\n\n        if ($joinprofile) {\n            $criteria['LEFT JOIN']['glpi_profiles'] = [\n                'ON' => [\n                    'glpi_profiles_users'   => 'profiles_id',\n                    'glpi_profiles'         => 'id'\n                ]\n            ];\n            if ($joinprofileright) {\n                $criteria['LEFT JOIN']['glpi_profilerights'] = [\n                    'ON' => [\n                        'glpi_profilerights' => 'profiles_id',\n                        'glpi_profiles'      => 'id'\n                    ]\n                ];\n            }\n        }\n\n        if (!$count) {\n            if (strlen((string)$search) > 0) {\n                $txt_search = Search::makeTextSearchValue($search);\n\n                $firstname_field = $DB->quoteName(self::getTableField('firstname'));\n                $realname_field = $DB->quoteName(self::getTableField('realname'));\n                $fields = $_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE\n                ? [$firstname_field, $realname_field]\n                : [$realname_field, $firstname_field];\n\n                $concat = new \\QueryExpression(\n                    'CONCAT(' . implode(',' . $DB->quoteValue(' ') . ',', $fields) . ')'\n                    . ' LIKE ' . $DB->quoteValue($txt_search)\n                );\n                $WHERE[] = [\n                    'OR' => [\n                        'glpi_users.name'                => ['LIKE', $txt_search],\n                        'glpi_users.realname'            => ['LIKE', $txt_search],\n                        'glpi_users.firstname'           => ['LIKE', $txt_search],\n                        'glpi_users.phone'               => ['LIKE', $txt_search],\n                        'glpi_users.registration_number' => ['LIKE', $txt_search],\n                        'glpi_useremails.email'          => ['LIKE', $txt_search],\n                        $concat\n                    ]\n                ];\n            }\n\n            if ($_SESSION[\"glpinames_format\"] == self::FIRSTNAME_BEFORE) {\n                $criteria['ORDERBY'] = [\n                    'glpi_users.firstname',\n                    'glpi_users.realname',\n                    'glpi_users.name'\n                ];\n            } else {\n                $criteria['ORDERBY'] = [\n                    'glpi_users.realname ASC',\n                    'glpi_users.firstname ASC',\n                    'glpi_users.name ASC',\n                ];\n            }\n\n            if ($limit > 0) {\n                $criteria['LIMIT'] = $limit;\n                $criteria['START'] = $start;\n            }\n        }\n        $criteria['WHERE'] = $WHERE;\n        return $DB->request($criteria);\n    }\n\n\n    /**\n     * Make a select box with all glpi users where select key = name\n     *\n     * @param $options array of possible options:\n     *    - name             : string / name of the select (default is users_id)\n     *    - value\n     *    - values           : in case of select[multiple], pass the array of multiple values\n     *    - right            : string / limit user who have specific right :\n     *                             id -> only current user (default case);\n     *                             interface -> central;\n     *                             all -> all users;\n     *                             specific right like Ticket::READALL, CREATE.... (is array passed one of all passed right is needed)\n     *    - comments         : boolean / is the comments displayed near the dropdown (default true)\n     *    - entity           : integer or array / restrict to a defined entity or array of entities\n     *                          (default -1 : no restriction)\n     *    - entity_sons      : boolean / if entity restrict specified auto select its sons\n     *                          only available if entity is a single value not an array(default false)\n     *    - all              : Nobody or All display for none selected\n     *                             all=0 (default) -> Nobody\n     *                             all=1 -> All\n     *                             all=-1-> nothing\n     *    - rand             : integer / already computed rand value\n     *    - toupdate         : array / Update a specific item on select change on dropdown\n     *                          (need value_fieldname, to_update, url\n     *                          (see Ajax::updateItemOnSelectEvent for information)\n     *                          and may have moreparams)\n     *    - used             : array / Already used items ID: not to display in dropdown (default empty)\n     *    - ldap_import\n     *    - on_change        : string / value to transmit to \"onChange\"\n     *    - display          : boolean / display or get string (default true)\n     *    - width            : specific width needed\n     *    - specific_tags    : array of HTML5 tags to add to the field\n     *    - class            : class to pass to html select\n     *    - url              : url of the ajax php code which should return the json data to show in\n     *                         the dropdown (default /ajax/getDropdownUsers.php)\n     *    - inactive_deleted : retreive also inactive or deleted users\n     *    - hide_if_no_elements  : boolean / hide dropdown if there is no elements (default false)\n     *    - readonly         : boolean / return getUserName is true (default false)\n     *\n     * @return integer|string Random value if displayed, string otherwise\n     */\n    public static function dropdown($options = [])\n    {\n        global $CFG_GLPI;\n       // Default values\n        $p = [\n            'name'                => 'users_id',\n            'value'               => '',\n            'values'              => [],\n            'right'               => 'id',\n            'all'                 => 0,\n            'display_emptychoice' => true,\n            'emptylabel'          => Dropdown::EMPTY_VALUE,\n            'placeholder'         => '',\n            'on_change'           => '',\n            'comments'            => 1,\n            'width'               => '',\n            'entity'              => -1,\n            'entity_sons'         => false,\n            'used'                => [],\n            'ldap_import'         => false,\n            'toupdate'            => '',\n            'rand'                => mt_rand(),\n            'display'             => true,\n            '_user_index'         => 0,\n            'specific_tags'       => [],\n            'class'               => \"form-select\",\n            'url'                 => $CFG_GLPI['root_doc'] . \"/ajax/getDropdownUsers.php\",\n            'inactive_deleted'    => 0,\n            'with_no_right'       => 0,\n            'toadd'               => [],\n            'hide_if_no_elements' => false,\n            'readonly'            => false,\n            'multiple'            => false,\n        ];\n\n        if (is_array($options) && count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        if ($p['multiple']) {\n            $p['display_emptychoice'] = false;\n            $p['values'] = $p['value'] ?? [];\n            $p['comments'] = false;\n            unset($p['value']);\n        }\n\n       // check default value (in case of multiple observers)\n        if (isset($p['value']) && is_array($p['value'])) {\n            $p['value'] = $p['value'][$p['_user_index']] ?? 0;\n        }\n\n       // Check default value for dropdown : need to be a numeric (or null)\n        if (\n            isset($p['value'])\n            && ((strlen($p['value']) == 0) || !is_numeric($p['value']) && $p['value'] != 'myself')\n        ) {\n            $p['value'] = 0;\n        }\n\n        $output = '';\n        if (!($p['entity'] < 0) && $p['entity_sons']) {\n            if (is_array($p['entity'])) {\n                $output .= \"entity_sons options is not available with array of entity\";\n            } else {\n                $p['entity'] = getSonsOf('glpi_entities', $p['entity']);\n            }\n        }\n\n        // Make a select box with all glpi users\n        if (!$p['multiple']) {\n            $user = getUserName($p['value'], 2, true);\n        }\n\n        if ($p['readonly']) {\n            return '<span class=\"form-control\" readonly>' . $user[\"name\"] . '</span>';\n        }\n\n        $view_users = self::canView();\n\n        if (!$p['multiple']) {\n            if ($p['value'] === 'myself') {\n                $default = __(\"Myself\");\n            } else if (!empty($p['value']) && ($p['value'] > 0)) {\n                $default = $user[\"name\"];\n            } else {\n                if ($p['all']) {\n                    $default = __('All');\n                } else {\n                    $default = $p['emptylabel'];\n                }\n            }\n        } else {\n            // get multiple values name\n            $valuesnames = [];\n            foreach ($p['values'] as $value) {\n                if (!empty($value) && ($value > 0)) {\n                    $user = getUserName($value, 2);\n                    $valuesnames[] = $user[\"name\"];\n                }\n            }\n        }\n\n\n        $field_id = Html::cleanId(\"dropdown_\" . $p['name'] . $p['rand']);\n        $param    = [\n            'multiple'            => $p['multiple'],\n            'width'               => $p['width'],\n            'all'                 => $p['all'],\n            'display_emptychoice' => $p['display_emptychoice'],\n            'placeholder'         => $p['placeholder'],\n            'right'               => $p['right'],\n            'on_change'           => $p['on_change'],\n            'used'                => $p['used'],\n            'inactive_deleted'    => $p['inactive_deleted'],\n            'with_no_right'       => $p['with_no_right'],\n            'entity_restrict'     => ($entity_restrict = (is_array($p['entity']) ? json_encode(array_values($p['entity'])) : $p['entity'])),\n            'specific_tags'       => $p['specific_tags'],\n            'toadd'               => $p['toadd'],\n            'class'               => $p['class'],\n            '_idor_token'         => Session::getNewIDORToken(__CLASS__, [\n                'right'           => $p['right'],\n                'entity_restrict' => $entity_restrict,\n            ]),\n        ];\n\n        if ($p['multiple']) {\n            $param['values'] = $p['values'];\n            $param['valuesnames'] = $valuesnames;\n        } else {\n            $param['value'] = $p['value'];\n            $param['valuename'] = $default;\n        }\n\n        if ($p['hide_if_no_elements']) {\n            $result = Dropdown::getDropdownUsers(\n                ['display_emptychoice' => false, 'page' => 1, 'page_limit' => 1] + $param,\n                false\n            );\n            if ($result['count'] === 0) {\n                return;\n            }\n        }\n\n        $output = Html::jsAjaxDropdown(\n            $p['name'],\n            $field_id,\n            $p['url'],\n            $param\n        );\n\n       // Display comment\n        $icons = \"\";\n        if ($p['comments']) {\n            $comment_id = Html::cleanId(\"comment_\" . $p['name'] . $p['rand']);\n            $link_id = Html::cleanId(\"comment_link_\" . $p[\"name\"] . $p['rand']);\n            if (!$view_users) {\n                $user[\"link\"] = '';\n            } else if (empty($user[\"link\"])) {\n                $user[\"link\"] = $CFG_GLPI['root_doc'] . \"/front/user.php\";\n            }\n\n            if (empty($user['comment'])) {\n                $user['comment'] = Toolbox::ucfirst(\n                    sprintf(\n                        __('Show %1$s'),\n                        self::getTypeName(Session::getPluralNumber())\n                    )\n                );\n            }\n\n            $paramscomment = [\n                'value'    => '__VALUE__',\n                'itemtype' => User::getType()\n            ];\n\n            if ($view_users) {\n                $paramscomment['withlink'] = $link_id;\n            }\n            $icons .= '<div class=\"btn btn-outline-secondary\">';\n            $icons .= Ajax::updateItemOnSelectEvent(\n                $field_id,\n                $comment_id,\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/comments.php\",\n                $paramscomment,\n                false\n            );\n\n            $icons .= Html::showToolTip($user[\"comment\"], [\n                'contentid' => $comment_id,\n                'display'   => false,\n                'link'      => $user[\"link\"],\n                'linkid'    => $link_id\n            ]);\n            $icons .= '</div>';\n        }\n\n        if (\n            Session::haveRight('user', self::IMPORTEXTAUTHUSERS)\n            && $p['ldap_import']\n            && Entity::isEntityDirectoryConfigured($_SESSION['glpiactive_entity'])\n        ) {\n            $icons .= '<div class=\"btn btn-outline-secondary\">';\n            $icons .= Ajax::createIframeModalWindow(\n                'userimport' . $p['rand'],\n                $CFG_GLPI[\"root_doc\"] .\n                                                      \"/front/ldap.import.php?entity=\" .\n                                                      $_SESSION['glpiactive_entity'],\n                ['title'   => __('Import a user'),\n                    'display' => false\n                ]\n            );\n            $icons .= \"<span title=\\\"\" . __s('Import a user') . \"\\\"\" .\n            \" data-bs-toggle='modal' data-bs-target='#userimport{$p['rand']}'>\n            <i class='fas fa-plus fa-fw '></i>\n            <span class='sr-only'>\" . __s('Import a user') . \"</span>\n         </span>\";\n            $icons .= '</div>';\n        }\n\n        if (strlen($icons) > 0) {\n            $output = \"<div class='btn-group btn-group-sm \" . ($p['width'] == \"100%\" ? \"w-100\" : \"\") . \"' role='group'>{$output} {$icons}</div>\";\n        }\n\n        $output .= Ajax::commonDropdownUpdateItem($p, false);\n\n        if ($p['display']) {\n            echo $output;\n            return $p['rand'];\n        }\n        return $output;\n    }\n\n\n    /**\n     * Show simple add user form for external auth.\n     *\n     * @return void|boolean false if user does not have rights to import users from external sources,\n     *    print form otherwise\n     */\n    public static function showAddExtAuthForm()\n    {\n\n        if (!Session::haveRight(\"user\", self::IMPORTEXTAUTHUSERS)) {\n            return false;\n        }\n\n        echo \"<div class='center'>\\n\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL('User') . \"'>\\n\";\n\n        echo \"<table class='tab_cadre'>\\n\";\n        echo \"<tr><th colspan='4'>\" . __('Automatically add a user of an external source') . \"</th></tr>\\n\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Login') . \"</td>\\n\";\n        echo \"<td><input type='text' name='login' class='form-control'></td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n        echo \"<input type='submit' name='add_ext_auth_ldap' value=\\\"\" . __s('Import from directories') . \"\\\"\n             class='btn btn-primary'>\\n\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td class='tab_bg_2 center' colspan='2'>\\n\";\n        echo \"<input type='submit' name='add_ext_auth_simple' value=\\\"\" . __s('Import from other sources') . \"\\\"\n             class='btn btn-primary'>\\n\";\n        echo \"</td></tr>\\n\";\n\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\\n\";\n    }\n\n\n    /**\n     * Change auth method for given users.\n     *\n     * @param integer[] $IDs      IDs of users\n     * @param integer   $authtype Auth type (see Auth constants)\n     * @param integer   $server   ID of auth server\n     *\n     * @return boolean\n     */\n    public static function changeAuthMethod(array $IDs = [], $authtype = 1, $server = -1)\n    {\n        global $DB;\n\n        if (!Session::haveRight(self::$rightname, self::UPDATEAUTHENT)) {\n            return false;\n        }\n\n        if (\n            !empty($IDs)\n            && in_array($authtype, [Auth::DB_GLPI, Auth::LDAP, Auth::MAIL, Auth::EXTERNAL])\n        ) {\n            $result = $DB->update(\n                self::getTable(),\n                [\n                    'authtype'        => $authtype,\n                    'auths_id'        => $server,\n                    'password'        => '',\n                    'is_deleted_ldap' => 0\n                ],\n                [\n                    'id' => $IDs\n                ]\n            );\n            if ($result) {\n                foreach ($IDs as $ID) {\n                    $changes = [\n                        0,\n                        '',\n                        addslashes(\n                            sprintf(\n                                __('%1$s: %2$s'),\n                                __('Update authentification method to'),\n                                Auth::getMethodName($authtype, $server)\n                            )\n                        )\n                    ];\n                    Log::history($ID, __CLASS__, $changes, '', Log::HISTORY_LOG_SIMPLE_MESSAGE);\n                }\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Generate vcard for the current user.\n     *\n     * @return void\n     */\n    public function generateVcard()\n    {\n\n       // prepare properties for the Vcard\n        if (\n            !empty($this->fields[\"realname\"])\n            || !empty($this->fields[\"firstname\"])\n        ) {\n            $name = [$this->fields[\"realname\"], $this->fields[\"firstname\"], \"\", \"\", \"\"];\n        } else {\n            $name = [$this->fields[\"name\"], \"\", \"\", \"\", \"\"];\n        }\n\n        $title = null;\n        if ($this->fields['usertitles_id'] !== 0) {\n            $title = new UserTitle();\n            $title->getFromDB($this->fields['usertitles_id']);\n        }\n       // create vcard\n        $vcard = new VObject\\Component\\VCard([\n            'N'     => $name,\n            'EMAIL' => $this->getDefaultEmail(),\n            'NOTE'  => $this->fields[\"comment\"],\n        ]);\n        if ($title) {\n            $vcard->add('TITLE', $title->fields['name']);\n        }\n        if ($this->fields['timezone']) {\n            $vcard->add('TZ', $this->fields['timezone']);\n        }\n        $vcard->add('TEL', $this->fields[\"phone\"], ['type' => 'PREF;WORK;VOICE']);\n        $vcard->add('TEL', $this->fields[\"phone2\"], ['type' => 'HOME;VOICE']);\n        $vcard->add('TEL', $this->fields[\"mobile\"], ['type' => 'WORK;CELL']);\n\n       // Get more data from plugins such as an IM contact\n        $data = Plugin::doHook(Hooks::VCARD_DATA, ['item' => $this, 'data' => []])['data'];\n        foreach ($data as $field => $additional_field) {\n            $vcard->add($additional_field['name'], $additional_field['value'] ?? '', $additional_field['params'] ?? []);\n        }\n\n       // send the  VCard\n        $output   = $vcard->serialize();\n        $filename = implode(\"_\", array_filter($name)) . \".vcf\";\n\n        @header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n        @header(\"Content-Length: \" . Toolbox::strlen($output));\n        @header(\"Connection: close\");\n        @header(\"content-type: text/x-vcard; charset=UTF-8\");\n\n        echo $output;\n    }\n\n\n    /**\n     * Show items of the current user.\n     *\n     * @param boolean $tech false to display items owned by user, true to display items managed by user\n     *\n     * @return void\n     */\n    public function showItems($tech)\n    {\n        global $DB, $CFG_GLPI;\n\n        $ID = $this->getField('id');\n\n        if ($tech) {\n            $type_user   = $CFG_GLPI['linkuser_tech_types'];\n            $type_group  = $CFG_GLPI['linkgroup_tech_types'];\n            $field_user  = 'users_id_tech';\n            $field_group = 'groups_id_tech';\n        } else {\n            $type_user   = $CFG_GLPI['linkuser_types'];\n            $type_group  = $CFG_GLPI['linkgroup_types'];\n            $field_user  = 'users_id';\n            $field_group = 'groups_id';\n        }\n\n        $group_where = \"\";\n        $groups      = [];\n\n        $iterator = $DB->request([\n            'SELECT'    => [\n                'glpi_groups_users.groups_id',\n                'glpi_groups.name'\n            ],\n            'FROM'      => 'glpi_groups_users',\n            'LEFT JOIN' => [\n                'glpi_groups' => [\n                    'FKEY' => [\n                        'glpi_groups_users'  => 'groups_id',\n                        'glpi_groups'        => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'     => ['glpi_groups_users.users_id' => $ID]\n        ]);\n        $number = count($iterator);\n\n        $group_where = [];\n        foreach ($iterator as $data) {\n            $group_where[$field_group][] = $data['groups_id'];\n            $groups[$data[\"groups_id\"]] = $data[\"name\"];\n        }\n\n        echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n        $header = \"<tr><th>\" . _n('Type', 'Types', 1) . \"</th>\";\n        $header .= \"<th>\" . Entity::getTypeName(1) . \"</th>\";\n        $header .= \"<th>\" . __('Name') . \"</th>\";\n        $header .= \"<th>\" . __('Serial number') . \"</th>\";\n        $header .= \"<th>\" . __('Inventory number') . \"</th>\";\n        $header .= \"<th>\" . __('Status') . \"</th>\";\n        $header .= \"<th>&nbsp;</th></tr>\";\n        echo $header;\n\n        foreach ($type_user as $itemtype) {\n            if (!($item = getItemForItemtype($itemtype))) {\n                continue;\n            }\n            if ($item->canView()) {\n                $itemtable = getTableForItemType($itemtype);\n                $iterator_params = [\n                    'FROM'   => $itemtable,\n                    'WHERE'  => [$field_user => $ID]\n                ];\n\n                if ($item->maybeTemplate()) {\n                    $iterator_params['WHERE']['is_template'] = 0;\n                }\n                if ($item->maybeDeleted()) {\n                    $iterator_params['WHERE']['is_deleted'] = 0;\n                }\n\n                $item_iterator = $DB->request($iterator_params);\n\n                $type_name = $item->getTypeName();\n\n                foreach ($item_iterator as $data) {\n                    $cansee = $item->can($data[\"id\"], READ);\n                    $link   = $data[\"name\"];\n                    if ($cansee) {\n                        $link_item = $item::getFormURLWithID($data['id']);\n                        if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                             $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                        }\n                        $link = \"<a href='\" . $link_item . \"'>\" . $link . \"</a>\";\n                    }\n                    $linktype = \"\";\n                    if ($data[$field_user] == $ID) {\n                        $linktype = self::getTypeName(1);\n                    }\n                    echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                    echo \"<td class='center'>\" . Dropdown::getDropdownName(\n                        \"glpi_entities\",\n                        $data[\"entities_id\"]\n                    ) . \"</td>\";\n                    echo \"<td class='center'>$link</td>\";\n                    echo \"<td class='center'>\";\n                    if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                          echo $data[\"serial\"];\n                    } else {\n                        echo '&nbsp;';\n                    }\n                    echo \"</td><td class='center'>\";\n                    if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                        echo $data[\"otherserial\"];\n                    } else {\n                        echo '&nbsp;';\n                    }\n                    echo \"</td><td class='center'>\";\n                    if (isset($data[\"states_id\"])) {\n                        echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                    } else {\n                        echo '&nbsp;';\n                    }\n\n                    echo \"</td><td class='center'>$linktype</td></tr>\";\n                }\n            }\n        }\n        if ($number) {\n            echo $header;\n        }\n        echo \"</table></div>\";\n\n        if (count($group_where)) {\n            echo \"<div class='spaced'><table class='tab_cadre_fixehov'>\";\n            $header = \"<tr>\" .\n               \"<th>\" . _n('Type', 'Types', 1) . \"</th>\" .\n               \"<th>\" . Entity::getTypeName(1) . \"</th>\" .\n               \"<th>\" . __('Name') . \"</th>\" .\n               \"<th>\" . __('Serial number') . \"</th>\" .\n               \"<th>\" . __('Inventory number') . \"</th>\" .\n               \"<th>\" . __('Status') . \"</th>\" .\n               \"<th>&nbsp;</th></tr>\";\n            echo $header;\n            $nb = 0;\n            foreach ($type_group as $itemtype) {\n                if (!($item = getItemForItemtype($itemtype))) {\n                    continue;\n                }\n                if ($item->canView() && $item->isField($field_group)) {\n                    $itemtable = getTableForItemType($itemtype);\n                    $iterator_params = [\n                        'FROM'   => $itemtable,\n                        'WHERE'  => ['OR' => $group_where]\n                    ];\n\n                    if ($item->maybeTemplate()) {\n                        $iterator_params['WHERE']['is_template'] = 0;\n                    }\n                    if ($item->maybeDeleted()) {\n                        $iterator_params['WHERE']['is_deleted'] = 0;\n                    }\n\n                    $group_iterator = $DB->request($iterator_params);\n\n                    $type_name = $item->getTypeName();\n\n                    foreach ($group_iterator as $data) {\n                        $nb++;\n                        $cansee = $item->can($data[\"id\"], READ);\n                        $link   = $data[\"name\"];\n                        if ($cansee) {\n                            $link_item = $item::getFormURLWithID($data['id']);\n                            if ($_SESSION[\"glpiis_ids_visible\"] || empty($link)) {\n                                $link = sprintf(__('%1$s (%2$s)'), $link, $data[\"id\"]);\n                            }\n                            $link = \"<a href='\" . $link_item . \"'>\" . $link . \"</a>\";\n                        }\n                        $linktype = \"\";\n                        if (isset($groups[$data[$field_group]])) {\n                            $linktype = sprintf(\n                                __('%1$s = %2$s'),\n                                Group::getTypeName(1),\n                                $groups[$data[$field_group]]\n                            );\n                        }\n                        echo \"<tr class='tab_bg_1'><td class='center'>$type_name</td>\";\n                        echo \"<td class='center'>\" . Dropdown::getDropdownName(\n                            \"glpi_entities\",\n                            $data[\"entities_id\"]\n                        );\n                        echo \"</td><td class='center'>$link</td>\";\n                        echo \"<td class='center'>\";\n                        if (isset($data[\"serial\"]) && !empty($data[\"serial\"])) {\n                             echo $data[\"serial\"];\n                        } else {\n                            echo '&nbsp;';\n                        }\n                        echo \"</td><td class='center'>\";\n                        if (isset($data[\"otherserial\"]) && !empty($data[\"otherserial\"])) {\n                            echo $data[\"otherserial\"];\n                        } else {\n                            echo '&nbsp;';\n                        }\n                        echo \"</td><td class='center'>\";\n                        if (isset($data[\"states_id\"])) {\n                            echo Dropdown::getDropdownName(\"glpi_states\", $data['states_id']);\n                        } else {\n                            echo '&nbsp;';\n                        }\n\n                        echo \"</td><td class='center'>$linktype</td></tr>\";\n                    }\n                }\n            }\n            if ($nb) {\n                echo $header;\n            }\n            echo \"</table></div>\";\n        }\n    }\n\n\n    /**\n     * Get user by email, importing it from LDAP if not existing.\n     *\n     * @param string $email\n     *\n     * @return integer ID of user, 0 if not found nor imported\n     */\n    public static function getOrImportByEmail($email = '')\n    {\n        global $DB, $CFG_GLPI;\n\n        $iterator = $DB->request([\n            'SELECT'    => 'users_id AS id',\n            'FROM'      => 'glpi_useremails',\n            'LEFT JOIN' => [\n                'glpi_users' => [\n                    'FKEY' => [\n                        'glpi_useremails' => 'users_id',\n                        'glpi_users'      => 'id'\n                    ]\n                ]\n            ],\n            'WHERE'     => [\n                'glpi_useremails.email' => $DB->escape(stripslashes($email))\n            ],\n            'ORDER'     => ['glpi_users.is_active DESC', 'is_deleted ASC']\n        ]);\n\n       //User still exists in DB\n        if (count($iterator)) {\n            $result = $iterator->current();\n            return $result['id'];\n        } else {\n            if ($CFG_GLPI[\"is_users_auto_add\"]) {\n               //Get all ldap servers with email field configured\n                $ldaps = AuthLDAP::getServersWithImportByEmailActive();\n               //Try to find the user by his email on each ldap server\n\n                foreach ($ldaps as $ldap) {\n                    $params = [\n                        'method' => AuthLDAP::IDENTIFIER_EMAIL,\n                        'value'  => $email,\n                    ];\n                    $res = AuthLDAP::ldapImportUserByServerId(\n                        $params,\n                        AuthLDAP::ACTION_IMPORT,\n                        $ldap\n                    );\n\n                    if (isset($res['id'])) {\n                        return $res['id'];\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n\n\n    /**\n     * Handle user deleted in LDAP using configured policy.\n     *\n     * @param integer $users_id\n     *\n     * @return void\n     */\n    public static function manageDeletedUserInLdap($users_id)\n    {\n        global $CFG_GLPI;\n\n       //The only case where users_id can be null if when a user has been imported into GLPI\n       //it's dn still exists, but doesn't match the connection filter anymore\n       //In this case, do not try to process the user\n        if (!$users_id) {\n            return;\n        }\n\n       //User is present in DB but not in the directory : it's been deleted in LDAP\n        $tmp = [\n            'id'              => $users_id,\n            'is_deleted_ldap' => 1,\n        ];\n        $myuser = new self();\n        $myuser->getFromDB($users_id);\n\n       //User is already considered as delete from ldap\n        if ($myuser->fields['is_deleted_ldap'] == 1) {\n            return;\n        }\n\n        switch ($CFG_GLPI['user_deleted_ldap']) {\n           //DO nothing\n            default:\n            case AuthLDAP::DELETED_USER_PRESERVE:\n                $myuser->update($tmp);\n                break;\n\n           //Put user in trashbin\n            case AuthLDAP::DELETED_USER_DELETE:\n               // Make sure the `is_deleted_ldap` flag is changed before deleting the user (Used for a potential future restore)\n                $myuser->update($tmp);\n                $myuser->delete($tmp);\n                break;\n\n           //Delete all user dynamic habilitations and groups\n            case AuthLDAP::DELETED_USER_WITHDRAWDYNINFO:\n                Profile_User::deleteRights($users_id, true);\n                Group_User::deleteGroups($users_id, true);\n                $myuser->update($tmp);\n                break;\n\n           //Deactivate the user\n            case AuthLDAP::DELETED_USER_DISABLE:\n                $tmp['is_active'] = 0;\n                $myuser->update($tmp);\n                break;\n\n           //Deactivate the user+ Delete all user dynamic habilitations and groups\n            case AuthLDAP::DELETED_USER_DISABLEANDWITHDRAWDYNINFO:\n                $tmp['is_active'] = 0;\n                $myuser->update($tmp);\n                Profile_User::deleteRights($users_id, true);\n                Group_User::deleteGroups($users_id, true);\n                break;\n        }\n       /*\n       $changes[0] = '0';\n       $changes[1] = '';\n       $changes[2] = __('Deleted user in LDAP directory');\n       Log::history($users_id, 'User', $changes, 0, Log::HISTORY_LOG_SIMPLE_MESSAGE);*/\n    }\n\n    /**\n     * Handle user restored in LDAP using configured policy.\n     *\n     * @since 10.0.0\n     * @param $users_id\n     *\n     * @return void\n     */\n    public static function manageRestoredUserInLdap($users_id): void\n    {\n        global $CFG_GLPI;\n\n       //The only case where users_id can be null if when a user has been imported into GLPI\n       //it's dn still exists, but doesn't match the connection filter anymore\n       //In this case, do not try to process the user\n        if (!$users_id) {\n            return;\n        }\n\n       //User is present in DB and in the directory but 'is_ldap_deleted' was true : it's been restored in LDAP\n        $tmp = [\n            'id'              => $users_id,\n            'is_deleted_ldap' => 0,\n        ];\n        $myuser = new self();\n        $myuser->getFromDB($users_id);\n\n       // User is already considered as restored from ldap\n        if ($myuser->fields['is_deleted_ldap'] == 0) {\n            return;\n        }\n\n       // Calling the update function for the user will reapply dynamic rights {@see User::post_updateItem()}\n        switch ($CFG_GLPI['user_restored_ldap']) {\n           // Do nothing except update the 'is_ldap_deleted' field to prevent re-processing the restore for each sync\n            default:\n            case AuthLDAP::RESTORED_USER_PRESERVE:\n                $myuser->update($tmp);\n                break;\n\n           // Restore the user from the trash\n            case AuthLDAP::RESTORED_USER_RESTORE:\n                $myuser->restore($tmp);\n                $myuser->update($tmp);\n                break;\n\n           // Enable the user\n            case AuthLDAP::RESTORED_USER_ENABLE:\n                $tmp['is_active'] = 1;\n                $myuser->update($tmp);\n                break;\n        }\n    }\n\n    /**\n     * Get user ID from its name.\n     *\n     * @param string $name User name\n     *\n     * @return integer\n     */\n    public static function getIdByName($name)\n    {\n        return self::getIdByField('name', $name);\n    }\n\n\n    /**\n     * Get user ID from a field\n     *\n     * @since 0.84\n     *\n     * @param string $field Field name\n     * @param string $value Field value\n     *\n     * @return integer\n     */\n    public static function getIdByField($field, $value, $escape = true)\n    {\n        global $DB;\n\n        if ($escape) {\n            $value = addslashes($value);\n        }\n\n        $iterator = $DB->request([\n            'SELECT' => 'id',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [$field => $value]\n        ]);\n\n        if (count($iterator) == 1) {\n            $row = $iterator->current();\n            return (int)$row['id'];\n        }\n        return false;\n    }\n\n\n    /**\n     * Show password update form for current user.\n     *\n     * @param array $error_messages\n     *\n     * @return void\n     */\n    public function showPasswordUpdateForm(array $error_messages = [])\n    {\n        global $CFG_GLPI;\n\n        echo '<form method=\"post\" action=\"' . $CFG_GLPI['root_doc'] . '/front/updatepassword.php\">';\n        echo '<table class=\"tab_cadre\">';\n        echo '<tr><th colspan=\"2\">' . __('Password update') . '</th></tr>';\n\n        if (Session::mustChangePassword()) {\n            echo '<tr class=\"tab_bg_2 center\">';\n            echo '<td colspan=\"2\" class=\"red b\">';\n            echo __('Your password has expired. You must change it to be able to login.');\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo __('Login');\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"text\" name=\"name\" value=\"' . $this->fields['name'] . '\" readonly=\"readonly\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"current_password\">' . __('Current password') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"current_password\" name=\"current_password\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"password\">' . __('New password') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"password\" name=\"password\" autocomplete=\"new-password\" onkeyup=\"return passwordCheck();\" class=\"form-control\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        echo '<tr class=\"tab_bg_1\">';\n        echo '<td>';\n        echo '<label for=\"password2\">' . __('New password confirmation') . '</label>';\n        echo '</td>';\n        echo '<td>';\n        echo '<input type=\"password\" id=\"password2\" name=\"password2\" autocomplete=\"new-password\" class=\"form-control\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        if ($CFG_GLPI['use_password_security']) {\n            echo '<tr class=\"tab_bg_1\">';\n            echo '<td>' . __('Password security policy') . '</td>';\n            echo '<td>';\n            Config::displayPasswordSecurityChecks();\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '<tr class=\"tab_bg_2 center\">';\n        echo '<td colspan=\"2\">';\n        echo '<input type=\"submit\" name=\"update\" value=\"' . __s('Save') . '\" class=\"btn btn-primary\" />';\n        echo '</td>';\n        echo '</tr>';\n\n        if (!empty($error_messages)) {\n            echo '<tr class=\"tab_bg_2 center\">';\n            echo '<td colspan=\"2\" class=\"red b\">';\n            echo implode('<br/>', $error_messages);\n            echo '</td>';\n            echo '</tr>';\n        }\n\n        echo '</table>';\n        Html::closeForm();\n    }\n\n\n    /**\n     * Show new password form of password recovery process.\n     *\n     * @param $token\n     *\n     * @return void\n     */\n    public static function showPasswordForgetChangeForm($token)\n    {\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'    => __('Forgotten password?'),\n            'token'    => $token,\n            'token_ok' => User::getUserByForgottenPasswordToken($token) !== null,\n        ]);\n    }\n\n\n    /**\n     * Show request form of password recovery process.\n     *\n     * @return void\n     */\n    public static function showPasswordForgetRequestForm()\n    {\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title' => __('Forgotten password?'),\n        ]);\n    }\n\n\n    /**\n     * Handle password recovery form submission.\n     *\n     * @param array $input\n     *\n     * @throws ForgetPasswordException when requirements are not met\n     *\n     * @return boolean true if password successfully changed, false otherwise\n     */\n    public function updateForgottenPassword(array $input)\n    {\n        // Get user by token\n        $token = $input['password_forget_token'] ?? \"\";\n        $user = self::getUserByForgottenPasswordToken($token);\n\n        // Invalid token\n        if (!$user) {\n            throw new ForgetPasswordException(\n                __('Your password reset request has expired or is invalid. Please renew it.')\n            );\n        }\n\n        // Check if the user is no longer active, it might happen if for some\n        // reasons the user is disabled manually after requesting a password reset\n        if ($user->fields['is_active'] == 0 || $user->fields['is_deleted'] == 1) {\n            throw new ForgetPasswordException(\n                __(\"Unable to reset password, please contact your administrator\")\n            );\n        }\n\n        // Same check but for the account activation dates\n        if (\n            ($user->fields['begin_date'] !== null && $user->fields['begin_date'] < $_SESSION['glpi_currenttime'])\n            || ($user->fields['end_date'] !== null && $user->fields['end_date'] > $_SESSION['glpi_currenttime'])\n        ) {\n            throw new ForgetPasswordException(\n                __(\"Unable to reset password, please contact your administrator\")\n            );\n        }\n\n        // Safety check that the user authentication method support passwords changes\n        if ($user->fields[\"authtype\"] !== Auth::DB_GLPI && Auth::useAuthExt()) {\n            throw new ForgetPasswordException(\n                __(\"The authentication method configuration doesn't allow you to change your password.\")\n            );\n        }\n\n        $input['id'] = $user->fields['id'];\n\n        // Check new password validity, throws exception on failure\n        Config::validatePassword($input[\"password\"], false);\n\n        // Try to set new password\n        if (!$user->update($input)) {\n            return false;\n        }\n\n        // Clear password reset token data\n        $user->update([\n            'id'                         => $user->fields['id'],\n            'password_forget_token'      => '',\n            'password_forget_token_date' => 'NULL',\n        ]);\n\n        $this->getFromDB($user->fields['id']);\n\n        return true;\n    }\n\n\n    /**\n     * Displays password recovery result.\n     *\n     * @param array $input\n     *\n     * @return void\n     */\n    public function showUpdateForgottenPassword(array $input)\n    {\n        try {\n            if ($this->updateForgottenPassword($input)) {\n                Session::addMessageAfterRedirect(__('Reset password successful.'));\n            }\n        } catch (\\Glpi\\Exception\\ForgetPasswordException $e) {\n            Session::addMessageAfterRedirect($e->getMessage(), false, ERROR);\n        } catch (\\Glpi\\Exception\\PasswordTooWeakException $e) {\n           // Force display on error\n            foreach ($e->getMessages() as $message) {\n                Session::addMessageAfteRredirect($message, false, ERROR);\n            }\n        }\n\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'         => __('Forgotten password?'),\n            'messages_only' => true,\n        ]);\n    }\n\n\n    /**\n     * Send password recovery for a user and display result message.\n     *\n     * @param string $email email of the user\n     *\n     * @return void\n     */\n    public function showForgetPassword($email)\n    {\n        try {\n            $this->forgetPassword($email);\n        } catch (\\Glpi\\Exception\\ForgetPasswordException $e) {\n            Session::addMessageAfterRedirect($e->getMessage(), false, ERROR);\n            return;\n        }\n        Session::addMessageAfteRredirect(__('If the given email address match an exisiting GLPI user, you will receive an email containing the informations required to reset your password. Please contact your administrator if you do not receive any email.'));\n\n        TemplateRenderer::getInstance()->display('password_form.html.twig', [\n            'title'         => __('Forgotten password?'),\n            'messages_only' => true,\n        ]);\n    }\n\n    /**\n     * Send password recovery email for a user.\n     *\n     * @param string $email\n     *\n     * @throws ForgetPasswordException If the process failed and the user should\n     *                                 be aware of it (e.g. incorrect email)\n     *\n     * @return bool Return true if the password reset notification was sent,\n     *              false if the process failed but the user should not be aware\n     *              of it to avoid exposing whether or not the given email exist\n     *              in our database.\n     */\n    public function forgetPassword(string $email): bool\n    {\n        $condition = [\n            'glpi_users.is_active'  => 1,\n            'glpi_users.is_deleted' => 0, [\n                'OR' => [\n                    ['glpi_users.begin_date' => null],\n                    ['glpi_users.begin_date' => ['<', new QueryExpression('NOW()')]]\n                ],\n            ], [\n                'OR'  => [\n                    ['glpi_users.end_date'   => null],\n                    ['glpi_users.end_date'   => ['>', new QueryExpression('NOW()')]]\n                ]\n            ]\n        ];\n\n        // Try to find a single user matching the given email\n        if (!$this->getFromDBbyEmail($email, $condition)) {\n            $count = self::countUsersByEmail($email, $condition);\n            trigger_error(\n                \"Failed to find a single user for '$email', $count user(s) found.\",\n                E_USER_WARNING\n            );\n\n            return false;\n        }\n\n        // Check that the configuration allow this user to change his password\n        if ($this->fields[\"authtype\"] !== Auth::DB_GLPI && Auth::useAuthExt()) {\n            trigger_error(\n                __(\"The authentication method configuration doesn't allow the user '$email' to change his password.\"),\n                E_USER_WARNING\n            );\n\n            return false;\n        }\n\n        // Check that the given email is valid\n        if (!NotificationMailing::isUserAddressValid($email)) {\n            throw new ForgetPasswordException(__('Invalid email address'));\n        }\n\n        // Store password reset token and date\n        $input = [\n            'password_forget_token'      => sha1(Toolbox::getRandomString(30)),\n            'password_forget_token_date' => $_SESSION[\"glpi_currenttime\"],\n            'id'                         => $this->fields['id'],\n        ];\n        $this->update($input);\n\n        // Notication on root entity (glpi_users.entities_id is only a pref)\n        NotificationEvent::raiseEvent('passwordforget', $this, ['entities_id' => 0]);\n        QueuedNotification::forceSendFor($this->getType(), $this->fields['id']);\n\n        return true;\n    }\n\n\n    /**\n     * Display information from LDAP server for user.\n     *\n     * @return void\n     */\n    private function showLdapDebug()\n    {\n\n        if ($this->fields['authtype'] != Auth::LDAP) {\n            return false;\n        }\n        echo \"<div class='spaced'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th colspan='4'>\" . AuthLDAP::getTypeName(1) . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('User DN') . \"</td>\";\n        echo \"<td>\" . $this->fields['user_dn'] . \"</td></tr>\\n\";\n\n        if ($this->fields['user_dn']) {\n            echo \"<tr class='tab_bg_2'><td>\" . __('User information') . \"</td><td>\";\n            $config_ldap = new AuthLDAP();\n            $ds          = false;\n\n            if ($config_ldap->getFromDB($this->fields['auths_id'])) {\n                $ds = $config_ldap->connect();\n            }\n\n            if ($ds) {\n                $info = AuthLDAP::getUserByDn(\n                    $ds,\n                    $this->fields['user_dn'],\n                    ['*', 'createTimeStamp', 'modifyTimestamp']\n                );\n                if (is_array($info)) {\n                     Html::printCleanArray($info);\n                } else {\n                    echo __('No item to display');\n                }\n            } else {\n                echo __('Connection failed');\n            }\n\n            echo \"</td></tr>\\n\";\n        }\n\n        echo \"</table></div>\";\n    }\n\n\n    /**\n     * Display debug information for current object.\n     *\n     * @return void\n     */\n    public function showDebug()\n    {\n\n        NotificationEvent::debugEvent($this);\n        $this->showLdapDebug();\n    }\n\n    public function getUnicityFieldsToDisplayInErrorMessage()\n    {\n\n        return ['id'          => __('ID'),\n            'entities_id' => Entity::getTypeName(1)\n        ];\n    }\n\n\n    public function getUnallowedFieldsForUnicity()\n    {\n\n        return array_merge(\n            parent::getUnallowedFieldsForUnicity(),\n            ['auths_id', 'date_sync', 'entities_id', 'last_login', 'profiles_id']\n        );\n    }\n\n\n    /**\n     * Get a unique generated token.\n     *\n     * @param string $field Field storing the token\n     *\n     * @return string\n     */\n    public static function getUniqueToken($field = 'personal_token')\n    {\n        global $DB;\n\n        $ok = false;\n        do {\n            $key    = Toolbox::getRandomString(40);\n            $row = $DB->request([\n                'COUNT'  => 'cpt',\n                'FROM'   => self::getTable(),\n                'WHERE'  => [$field => $key]\n            ])->current();\n\n            if ($row['cpt'] == 0) {\n                 return $key;\n            }\n        } while (!$ok);\n    }\n\n\n    /**\n     * Get token of a user. If not exists generate it.\n     *\n     * @param integer $ID    User ID\n     * @param string  $field Field storing the token\n     *\n     * @return string|boolean User token, false if user does not exist\n     */\n    public static function getToken($ID, $field = 'personal_token')\n    {\n\n        $user = new self();\n        if ($user->getFromDB($ID)) {\n            return $user->getAuthToken($field);\n        }\n\n        return false;\n    }\n\n    /**\n     * Get token of a user. If it does not exists  then generate it.\n     *\n     * @since 9.4\n     *\n     * @param string $field the field storing the token\n     * @param boolean $force_new force generation of a new token\n     *\n     * @return string|false token or false in case of error\n     */\n    public function getAuthToken($field = 'personal_token', $force_new = false)\n    {\n        global $CFG_GLPI;\n\n        if ($this->isNewItem()) {\n            return false;\n        }\n\n       // check date validity for cookie token\n        $outdated = false;\n        if ($field === 'cookie_token') {\n            if (empty($this->fields[$field . \"_date\"])) {\n                $outdated = true;\n            } else {\n                $date_create = new DateTime($this->fields[$field . \"_date\"]);\n                $date_expir = $date_create->add(new DateInterval('PT' . $CFG_GLPI[\"login_remember_time\"] . 'S'));\n\n                if ($date_expir < new DateTime()) {\n                    $outdated = true;\n                }\n            }\n        }\n\n       // token exists, is not oudated, and we may use it\n        if (!empty($this->fields[$field]) && !$force_new && !$outdated) {\n            return $this->fields[$field];\n        }\n\n       // else get a new token\n        $token = self::getUniqueToken($field);\n\n       // for cookie token, we need to store it hashed\n        $hash = $token;\n        if ($field === 'cookie_token') {\n            $hash = Auth::getPasswordHash($token);\n        }\n\n       // save this token in db\n        $this->update(['id'             => $this->getID(),\n            $field           => $hash,\n            $field . \"_date\" => $_SESSION['glpi_currenttime']\n        ]);\n\n        return $token;\n    }\n\n\n    /**\n     * Get name of users using default passwords\n     *\n     * @return string[]\n     */\n    public static function checkDefaultPasswords()\n    {\n        global $DB;\n\n        $passwords = ['glpi'      => 'glpi',\n            'tech'      => 'tech',\n            'normal'    => 'normal',\n            'post-only' => 'postonly'\n        ];\n        $default_password_set = [];\n\n        $crit = ['FIELDS'     => ['name', 'password'],\n            'is_active'  => 1,\n            'is_deleted' => 0,\n            'name'       => array_keys($passwords)\n        ];\n\n        foreach ($DB->request('glpi_users', $crit) as $data) {\n            if (Auth::checkPassword($passwords[strtolower($data['name'])], $data['password'])) {\n                $default_password_set[] = $data['name'];\n            }\n        }\n\n        return $default_password_set;\n    }\n\n\n    /**\n     * Get picture URL from picture field.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     * @param bool  bool get full path\n     *\n     * @return string\n     */\n    public static function getURLForPicture($picture, $full = true)\n    {\n        global $CFG_GLPI;\n\n        $url = Toolbox::getPictureUrl($picture, $full);\n        if (null !== $url) {\n            return $url;\n        }\n\n        return ($full ? $CFG_GLPI[\"root_doc\"] : \"\") . \"/pics/picture.png\";\n    }\n\n\n    /**\n     * Get thumbnail URL from picture field.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     *\n     * @return string\n     */\n    public static function getThumbnailURLForPicture(string $picture = null)\n    {\n        global $CFG_GLPI;\n\n       // prevent xss\n        $picture = Html::cleanInputText($picture);\n\n        if (!empty($picture)) {\n            $tmp = explode(\".\", $picture);\n            if (count($tmp) == 2) {\n                return $CFG_GLPI[\"root_doc\"] . \"/front/document.send.php?file=_pictures/\" . $tmp[0] .\n                   \"_min.\" . $tmp[1];\n            }\n        }\n\n        return \"\";\n    }\n\n\n    /**\n     * Drop existing files for user picture.\n     *\n     * @since 0.85\n     *\n     * @param string $picture Picture field value\n     *\n     * @return void\n     */\n    public static function dropPictureFiles($picture)\n    {\n\n        if (!empty($picture)) {\n           // unlink main file\n            if (file_exists(GLPI_PICTURE_DIR . \"/$picture\")) {\n                @unlink(GLPI_PICTURE_DIR . \"/$picture\");\n            }\n           // unlink Thunmnail\n            $tmp = explode(\".\", $picture);\n            if (count($tmp) == 2) {\n                if (file_exists(GLPI_PICTURE_DIR . \"/\" . $tmp[0] . \"_min.\" . $tmp[1])) {\n                    @unlink(GLPI_PICTURE_DIR . \"/\" . $tmp[0] . \"_min.\" . $tmp[1]);\n                }\n            }\n        }\n    }\n\n    public function getRights($interface = 'central')\n    {\n\n        $values = parent::getRights();\n       //TRANS: short for : Add users from an external source\n        $values[self::IMPORTEXTAUTHUSERS] = ['short' => __('Add external'),\n            'long'  => __('Add users from an external source')\n        ];\n       //TRANS: short for : Read method for user authentication and synchronization\n        $values[self::READAUTHENT]        = ['short' => __('Read auth'),\n            'long'  => __('Read user authentication and synchronization method')\n        ];\n       //TRANS: short for : Update method for user authentication and synchronization\n        $values[self::UPDATEAUTHENT]      = ['short' => __('Update auth and sync'),\n            'long'  => __('Update method for user authentication and synchronization')\n        ];\n\n        return $values;\n    }\n\n\n    /**\n     * Retrieve the list of LDAP field names from a list of fields\n     * allow pattern substitution, e.g. %{name}.\n     *\n     * @since 9.1\n     *\n     * @param string[] $map array of fields\n     *\n     * @return string[]\n     */\n    private static function getLdapFieldNames(array $map)\n    {\n\n        $ret =  [];\n        foreach ($map as $v) {\n            /** @var array $reg */\n            if (preg_match_all('/%{(.*)}/U', $v, $reg)) {\n                // e.g. \"%{country} > %{city} > %{site}\"\n                foreach ($reg [1] as $f) {\n                    $ret [] = $f;\n                }\n            } else {\n               // single field name\n                $ret [] = $v;\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Retrieve the value of a fields from a LDAP result applying needed substitution of %{value}.\n     *\n     * @since 9.1\n     *\n     * @param string $map String with field format\n     * @param array  $res LDAP result\n     *\n     * @return string\n     */\n    private static function getLdapFieldValue($map, array $res)\n    {\n\n        $map = Sanitizer::unsanitize($map);\n        $ret = preg_replace_callback(\n            '/%{(.*)}/U',\n            function ($matches) use ($res) {\n                return (isset($res[0][$matches[1]][0]) ? $res[0][$matches[1]][0] : '');\n            },\n            $map\n        );\n\n        return $ret == $map ? (isset($res[0][$map][0]) ? $res[0][$map][0] : '') : $ret;\n    }\n\n    /**\n     * Print the switch language form.\n     *\n     * @return void\n     */\n    public static function showSwitchLangForm()\n    {\n        $params = [\n            'value'     => $_SESSION[\"glpilanguage\"],\n            'display'   => false,\n            'on_change' => 'this.form.submit()'\n        ];\n\n        $out = \"<form method='post' name='switchlang' action='\" . User::getFormURL() . \"' autocomplete='off'>\";\n        $out .= Dropdown::showLanguages(\"language\", $params);\n        $out .= Html::closeForm(false);\n\n        return $out;\n    }\n\n    /**\n     * Get list of entities ids for current user.\n     *\n     * @return integer[]\n     */\n    private function getEntities()\n    {\n       //get user entities\n        if ($this->entities == null) {\n            $this->entities = Profile_User::getUserEntities($this->fields['id'], true);\n        }\n        return $this->entities;\n    }\n\n\n    /**\n     * Give cron information.\n     *\n     * @param string $name Task's name\n     *\n     * @return array\n     */\n    public static function cronInfo(string $name): array\n    {\n\n        $info = [];\n        switch ($name) {\n            case 'passwordexpiration':\n                $info = [\n                    'description' => __('Handle users passwords expiration policy'),\n                    'parameter'   => __('Maximum expiration notifications to send at once'),\n                ];\n                break;\n        }\n        return $info;\n    }\n\n    /**\n     * Cron that notify users about when their password expire and deactivate their account\n     * depending on password expiration policy.\n     *\n     * @param CronTask $task\n     *\n     * @return integer\n     */\n    public static function cronPasswordExpiration(CronTask $task)\n    {\n        global $CFG_GLPI, $DB;\n\n        $expiration_delay   = (int)$CFG_GLPI['password_expiration_delay'];\n        $notice_time        = (int)$CFG_GLPI['password_expiration_notice'];\n        $notification_limit = (int)$task->fields['param'];\n        $lock_delay         = (int)$CFG_GLPI['password_expiration_lock_delay'];\n\n        if (-1 === $expiration_delay || (-1 === $notice_time && -1 === $lock_delay)) {\n           // Nothing to do if passwords does not expire\n           // or if password expires without notice and with no lock delay\n            return 0;\n        }\n\n       // Notify users about expiration of their password.\n        $to_notify_count = 0;\n        if (-1 !== $notice_time) {\n            $notification_request = [\n                'FROM'      => self::getTable(),\n                'LEFT JOIN' => [\n                    Alert::getTable() => [\n                        'ON' => [\n                            Alert::getTable() => 'items_id',\n                            self::getTable()  => 'id',\n                            [\n                                'AND' => [\n                                    Alert::getTableField('itemtype') => self::getType(),\n                                ]\n                            ],\n                        ]\n                    ]\n                ],\n                'WHERE'     => [\n                    self::getTableField('is_deleted') => 0,\n                    self::getTableField('is_active')  => 1,\n                    self::getTableField('authtype')   => Auth::DB_GLPI,\n                    new QueryExpression(\n                        sprintf(\n                            'NOW() > ADDDATE(%s, INTERVAL %s DAY)',\n                            $DB->quoteName(self::getTableField('password_last_update')),\n                            $expiration_delay - $notice_time\n                        )\n                    ),\n               // Get only users that has not yet been notified within last day\n                    'OR'                              => [\n                        [Alert::getTableField('date') => null],\n                        [Alert::getTableField('date') => ['<', new QueryExpression('CURRENT_TIMESTAMP() - INTERVAL 1 day')]],\n                    ],\n                ],\n            ];\n\n            $to_notify_count_request = array_merge(\n                $notification_request,\n                [\n                    'COUNT'  => 'cpt',\n                ]\n            );\n            $to_notify_count = $DB->request($to_notify_count_request)->current()['cpt'];\n\n            $notification_data_request  = array_merge(\n                $notification_request,\n                [\n                    'SELECT'    => [\n                        self::getTableField('id as user_id'),\n                        Alert::getTableField('id as alert_id'),\n                    ],\n                    'LIMIT'     => $notification_limit,\n                ]\n            );\n            $notification_data_iterator = $DB->request($notification_data_request);\n\n            foreach ($notification_data_iterator as $notification_data) {\n                $user_id  = $notification_data['user_id'];\n                $alert_id = $notification_data['alert_id'];\n\n                $user = new User();\n                $user->getFromDB($user_id);\n\n                $is_notification_send = NotificationEvent::raiseEvent(\n                    'passwordexpires',\n                    $user,\n                    ['entities_id' => 0] // Notication on root entity (glpi_users.entities_id is only a pref)\n                );\n                if (!$is_notification_send) {\n                     continue;\n                }\n\n                 $task->addVolume(1);\n\n                 $alert = new Alert();\n\n                 // Delete existing alert if any\n                if (null !== $alert_id) {\n                    $alert->delete(['id' => $alert_id]);\n                }\n\n                 // Add an alert to not warn user for at least one day\n                 $alert->add(\n                     [\n                         'itemtype' => 'User',\n                         'items_id' => $user_id,\n                         'type'     => Alert::NOTICE,\n                     ]\n                 );\n            }\n        }\n\n       // Disable users if their password has expire for too long.\n        if (-1 !== $lock_delay) {\n            $DB->update(\n                self::getTable(),\n                [\n                    'is_active'         => 0,\n                    'cookie_token'      => null,\n                    'cookie_token_date' => null,\n                ],\n                [\n                    'is_deleted' => 0,\n                    'is_active'  => 1,\n                    'authtype'   => Auth::DB_GLPI,\n                    new QueryExpression(\n                        sprintf(\n                            'NOW() > ADDDATE(ADDDATE(%s, INTERVAL %d DAY), INTERVAL %s DAY)',\n                            $DB->quoteName(self::getTableField('password_last_update')),\n                            $expiration_delay,\n                            $lock_delay\n                        )\n                    ),\n                ]\n            );\n        }\n\n        return -1 !== $notice_time && $to_notify_count > $notification_limit\n         ? -1 // -1 for partial process (remaining notifications to send)\n         : 1; // 1 for fully process\n    }\n\n    /**\n     * Get password expiration time.\n     *\n     * @return null|int Password expiration time, or null if expiration mechanism is not active.\n     */\n    public function getPasswordExpirationTime()\n    {\n        global $CFG_GLPI;\n\n        if (!array_key_exists('id', $this->fields) || $this->fields['id'] < 1) {\n            return null;\n        }\n\n        $expiration_delay = (int)$CFG_GLPI['password_expiration_delay'];\n\n        if (-1 === $expiration_delay) {\n            return null;\n        }\n\n        return strtotime(\n            '+ ' . $expiration_delay . ' days',\n            strtotime($this->fields['password_last_update'])\n        );\n    }\n\n    /**\n     * Check if password should be changed (if it expires soon).\n     *\n     * @return boolean\n     */\n    public function shouldChangePassword()\n    {\n        global $CFG_GLPI;\n\n        if ($this->hasPasswordExpired()) {\n            return true; // too late to change password, but returning false would not be logical here\n        }\n\n        $expiration_time = $this->getPasswordExpirationTime();\n        if (null === $expiration_time) {\n            return false;\n        }\n\n        $notice_delay    = (int)$CFG_GLPI['password_expiration_notice'];\n        if (-1 === $notice_delay) {\n            return false;\n        }\n\n        $notice_time = strtotime('- ' . $notice_delay . ' days', $expiration_time);\n\n        return $notice_time < time();\n    }\n\n    /**\n     * Check if password expired.\n     *\n     * @return boolean\n     */\n    public function hasPasswordExpired()\n    {\n\n        $expiration_time = $this->getPasswordExpirationTime();\n        if (null === $expiration_time) {\n            return false;\n        }\n\n        return $expiration_time < time();\n    }\n\n    public static function getFriendlyNameSearchCriteria(string $filter): array\n    {\n        $table     = self::getTable();\n        $login     = DBmysql::quoteName(\"$table.name\");\n        $firstname = DBmysql::quoteName(\"$table.firstname\");\n        $lastname  = DBmysql::quoteName(\"$table.realname\");\n\n        $filter = strtolower($filter);\n        $filter_no_spaces = str_replace(\" \", \"\", $filter);\n\n        return [\n            'OR' => [\n                ['RAW' => [\"LOWER($login)\" => ['LIKE', \"%$filter%\"]]],\n                ['RAW' => [\"LOWER(REPLACE(CONCAT($firstname, $lastname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n                ['RAW' => [\"LOWER(REPLACE(CONCAT($lastname, $firstname), ' ', ''))\" => ['LIKE', \"%$filter_no_spaces%\"]]],\n            ]\n        ];\n    }\n\n    public static function getFriendlyNameFields(string $alias = \"name\")\n    {\n        $config = Config::getConfigurationValues('core');\n        if ($config['names_format'] == User::FIRSTNAME_BEFORE) {\n            $first = \"firstname\";\n            $second = \"realname\";\n        } else {\n            $first = \"realname\";\n            $second = \"firstname\";\n        }\n\n        $table  = self::getTable();\n        $first  = DBmysql::quoteName(\"$table.$first\");\n        $second = DBmysql::quoteName(\"$table.$second\");\n        $alias  = DBmysql::quoteName($alias);\n        $name   = DBmysql::quoteName(self::getNameField());\n\n        return new QueryExpression(\"IF(\n            $first <> '' && $second <> '',\n            CONCAT($first, ' ', $second),\n            $name\n         ) AS $alias\");\n    }\n\n    public static function getIcon()\n    {\n        return \"ti ti-user\";\n    }\n\n    /**\n     * Add groups stored in \"_ldap_rules/groups_id\" special input\n     */\n    public function applyGroupsRules()\n    {\n        if (!isset($this->input[\"_ldap_rules\"]['groups_id'])) {\n            return;\n        }\n\n        $group_ids = array_unique($this->input[\"_ldap_rules\"]['groups_id']);\n        foreach ($group_ids as $group_id) {\n            $group_user = new Group_User();\n\n            $data = [\n                'groups_id' => $group_id,\n                'users_id'  => $this->getId()\n            ];\n\n            if (!$group_user->getFromDBByCrit($data)) {\n                $group_user->add($data);\n            }\n        }\n    }\n\n    /**\n     * Get anonymized name for user instance.\n     *\n     * @param int $users_id\n     * @param int $entities_id\n     *\n     * @return string|null\n     */\n    public function getAnonymizedName(?int $entities_id = null): ?string\n    {\n        switch (Entity::getAnonymizeConfig($entities_id)) {\n            default:\n            case Entity::ANONYMIZE_DISABLED:\n                return null;\n\n            case Entity::ANONYMIZE_USE_GENERIC:\n                return __(\"Helpdesk user\");\n\n            case Entity::ANONYMIZE_USE_NICKNAME:\n                return $this->fields['nickname'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get anonymized name for user having given ID.\n     *\n     * @param int $users_id\n     * @param int $entities_id\n     *\n     * @return string|null\n     */\n    public static function getAnonymizedNameForUser(int $users_id, ?int $entities_id = null): ?string\n    {\n        switch (Entity::getAnonymizeConfig($entities_id)) {\n            default:\n            case Entity::ANONYMIZE_DISABLED:\n                return null;\n\n            case Entity::ANONYMIZE_USE_GENERIC:\n                return __(\"Helpdesk user\");\n\n            case Entity::ANONYMIZE_USE_NICKNAME:\n                $user = new User();\n                if (!$user->getFromDB($users_id)) {\n                    return '';\n                }\n\n                return $user->fields['nickname'] ?? '';\n        }\n\n        return null;\n    }\n\n    /**\n     * Print a simplified user form.\n     *\n     * @param integer $ID    ID of the user\n     * @param array $options Options\n     *     - string   target        Form target\n     *     - boolean  withtemplate  Template or basic item\n     *\n     * @return boolean true\n     */\n    public function showSystemUserForm($ID, array $options = []): bool\n    {\n        $this->initForm($ID, $options);\n\n        $formtitle = $this->getTypeName(1);\n        $options['formtitle']   = $formtitle;\n        $options['formoptions'] = ($options['formoptions'] ?? '') . \" enctype='multipart/form-data'\";\n        $options['candel'] = false;\n        $options['canedit'] = self::canUpdate();\n        $this->showFormHeader($options);\n        $rand = mt_rand();\n\n        echo \"<tr class='tab_bg_1'>\";\n        $surnamerand = mt_rand();\n        echo \"<td><label for='textfield_realname$surnamerand'>\" . __('Surname') . \"</label></td>\";\n        echo \"<td>\";\n        echo Html::input(\n            'realname',\n            [\n                'value' => $this->fields['realname'],\n                'id'    => \"textfield_realname$surnamerand\",\n            ]\n        );\n        echo \"</td>\";\n\n        echo \"<td rowspan='3'>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n        echo \"<td rowspan='3'>\";\n        echo self::getPictureForUser($ID);\n\n        echo Html::file(['name' => 'picture', 'display' => false, 'onlyimages' => true]);\n        echo \"<input type='checkbox' name='_blank_picture'>&nbsp;\" . __('Clear');\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        $firstnamerand = mt_rand();\n        echo \"<tr class='tab_bg_1'><td><label for='textfield_firstname$firstnamerand'>\" . __('First name') . \"</label></td><td>\";\n        echo Html::input(\n            'firstname',\n            [\n                'value' => $this->fields['firstname'],\n                'id'    => \"textfield_firstname$firstnamerand\",\n            ]\n        );\n        echo \"</td></tr>\";\n\n        echo \"<tr><td colspan='2'>\";\n        echo \"<span>\";\n        echo  __(\"This is a special user used for automated actions. \");\n        echo '<br>';\n        echo  __(\"You can set its name to your organisation's name. \");\n        echo \"</span>\";\n        echo \"</td></tr>\";\n\n        $this->showFormButtons($options);\n\n        return true;\n    }\n\n    public function getPictureForUser(int $ID): string\n    {\n        return TemplateRenderer::getInstance()->render('components/user/picture.html.twig', [\n            'users_id'  => $ID,\n            'with_link' => false,\n        ]);\n    }\n\n    /**\n     * Get user link.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserLink(bool $enable_anonymization = false): string\n    {\n        if (\n            $enable_anonymization\n            && $this->fields['id'] != $_SESSION['glpiID']\n            && Session::getCurrentInterface() == 'helpdesk'\n            && ($anon = $this->getAnonymizedName()) !== null\n        ) {\n           // if anonymized name active, return only the anonymized name\n            return $anon;\n        }\n\n        return $this->getLink();\n    }\n\n    /**\n     * Get user picture path.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getPicturePath(bool $enable_anonymization = false): string\n    {\n        global $CFG_GLPI;\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && Entity::getAnonymizeConfig() !== Entity::ANONYMIZE_DISABLED) {\n            return $CFG_GLPI[\"root_doc\"] . '/pics/picture.png';\n        }\n\n        $path = Toolbox::getPictureUrl($this->fields['picture'], false);\n        if (!empty($path)) {\n            return $path;\n        }\n\n        return $CFG_GLPI[\"root_doc\"] . '/pics/picture.png';\n    }\n\n    /**\n     * Get user thumbnail picture path.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return null|string\n     */\n    public function getThumbnailPicturePath(bool $enable_anonymization = false): ?string\n    {\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && Entity::getAnonymizeConfig() !== Entity::ANONYMIZE_DISABLED) {\n            return null;\n        }\n\n        $path = User::getThumbnailURLForPicture($this->fields['picture']);\n        if (!empty($path)) {\n            return $path;\n        }\n\n        return null;\n    }\n\n    /**\n     * Get user initials.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserInitials(bool $enable_anonymization = false): string\n    {\n\n        if ($enable_anonymization && Session::getCurrentInterface() == 'helpdesk' && ($anon = $this->getAnonymizedName()) !== null) {\n           // if anonymized name active, return two first letters of the anon name\n            return mb_strtoupper(mb_substr($anon, 0, 2));\n        }\n\n        $initials = mb_substr($this->fields['firstname'] ?? '', 0, 1) . mb_substr($this->fields['realname'] ?? '', 0, 1);\n        if (empty($initials)) {\n            $initials = mb_substr($this->fields['name'] ?? '', 0, 2);\n        }\n        return mb_strtoupper($initials);\n    }\n\n    /**\n     * Return background color corresponding to user initials.\n     *\n     * @param bool $enable_anonymization\n     *\n     * @return string\n     */\n    public function getUserInitialsBgColor(bool $enable_anonymization = false): string\n    {\n        return Toolbox::getColorForString($this->getUserInitials($enable_anonymization));\n    }\n\n    /**\n     * Find one user which match the given token and asked for a password reset\n     * less than one day ago\n     *\n     * @param string $token password_forget_token\n     *\n     * @return User|null The matching user or null if zero or more than one user\n     *                   were found\n     */\n    public static function getUserByForgottenPasswordToken(string $token): ?User\n    {\n        global $DB;\n\n        if (empty($token)) {\n            return null;\n        }\n\n        // Find users which match the given token and asked for a password reset\n        // less than one day ago\n        $iterator = $DB->request([\n            'SELECT' => 'id',\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'password_forget_token'       => $token,\n                new \\QueryExpression('NOW() < ADDDATE(' . $DB->quoteName('password_forget_token_date') . ', INTERVAL 1 DAY)')\n            ]\n        ]);\n\n        // Check that we found exactly one user\n        if (count($iterator) !== 1) {\n            return null;\n        }\n\n        // Get first row, should use current() when updated to GLPI 10\n        $data = iterator_to_array($iterator);\n        $data = array_pop($data);\n\n        // Try to load the user\n        $user = new self();\n        if (!$user->getFromDB($data['id'])) {\n            return null;\n        }\n\n        return $user;\n    }\n}\n"], "filenames": ["src/Document.php", "src/User.php"], "buggy_code_start_loc": [1269, 832], "buggy_code_end_loc": [1321, 872], "fixing_code_start_loc": [1270, 832], "fixing_code_end_loc": [1324, 872], "type": "CWE-79", "message": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. In versions prior to 10.0.0 one can exploit a lack of sanitization on SVG file uploads and inject javascript into their user avatar. As a result any user viewing the avatar will be subject to a cross site scripting attack. Users of GLPI are advised to upgrade. Users unable to upgrade should disallow SVG avatars.", "other": {"cve": {"id": "CVE-2022-24868", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-21T17:15:08.673", "lastModified": "2022-05-03T13:55:05.600", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. In versions prior to 10.0.0 one can exploit a lack of sanitization on SVG file uploads and inject javascript into their user avatar. As a result any user viewing the avatar will be subject to a cross site scripting attack. Users of GLPI are advised to upgrade. Users unable to upgrade should disallow SVG avatars."}, {"lang": "es", "value": "GLPI es un paquete de software gratuito de administraci\u00f3n de activos y TI, que proporciona funciones de Service Desk de ITIL, seguimiento de licencias y auditor\u00eda de software. En versiones anteriores a 10.0.0, puede explotarse una falta de saneo en la carga de archivos SVG e inyectar javascript en su avatar de usuario. Como resultado, cualquier usuario que visualice el avatar ser\u00e1 objeto de un ataque de tipo cross-site scripting. Es recomendado a usuarios de GLPI actualizar. Los usuarios que no puedan actualizar deber\u00e1n deshabilitar los avatares SVG"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.0.0", "matchCriteriaId": "DA46AECA-E66C-473E-A101-CA04D74088A3"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/1aa9fcc4741a46fa5a9f11d71b409b911ffc190f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-9hg4-fpwv-gx78", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/1aa9fcc4741a46fa5a9f11d71b409b911ffc190f"}}