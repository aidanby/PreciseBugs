{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Core\\Exception\\InvalidArgumentException;\n\n/**\n * @Route(\"/custom-report\")\n *\n * @internal\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            if (!$report->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $data = $report->getObjectVars();\n        $data['writeable'] = $report->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0] ?? null;\n\n        $success = false;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => htmlspecialchars($report->getName()),\n                'niceName' => htmlspecialchars($report->getNiceName()),\n                'iconClass' => htmlspecialchars($report->getIconClass()),\n                'group' => htmlspecialchars($report->getGroup()),\n                'groupIconClass' => htmlspecialchars($report->getGroupIconClass()),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => htmlspecialchars($report->getReportClass()),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    protected function getTemporaryFileFromFileName(string $exportFileName): string\n    {\n        $exportFileName = basename($exportFileName);\n        if (!str_ends_with($exportFileName, '.csv')) {\n            throw new InvalidArgumentException($exportFileName . ' is not a valid csv file.');\n        }\n\n        return PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $exportFileName;\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        if ($drillDownFilters) {\n            $drillDownFilters = json_decode($drillDownFilters, true);\n        }\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        } else {\n            $exportFile = $this->getTemporaryFileFromFileName($exportFile);\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            $row = Service::escapeCsvRecord($row);\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => basename($exportFile),\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $exportFile = $this->getTemporaryFileFromFileName($exportFile);\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.report.custom.panel\");\npimcore.report.custom.panel = Class.create({\n\n    initialize: function () {\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                border: false,\n                layout: \"border\",\n                items: [this.getTree(), this.getEditPanel()]\n            });\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getTree: function () {\n        if (!this.tree) {\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_reports_customreport_tree'),\n                    reader: {\n                        type: 'json'\n                    }\n                },\n                root: {\n                    iconCls: \"pimcore_icon_thumbnails\"\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                autoScroll:true,\n                animate:false,\n                containerScroll: true,\n                width: 250,\n                split: true,\n                root: {\n                    id: '0',\n                    expanded: true\n                },\n                rootVisible: false,\n                listeners: this.getTreeNodeListeners(),\n                tbar: {\n                    cls: 'pimcore_toolbar_border_bottom',\n                    items: [\n                        {\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addField.bind(this),\n                            disabled: !pimcore.settings['custom-reports-writeable']\n                        }\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n    getEditPanel: function () {\n        if (!this.editPanel) {\n            this.editPanel = new Ext.TabPanel({\n                region: \"center\",\n                plugins: ['tabclosemenu']\n            });\n        }\n\n        return this.editPanel;\n    },\n\n    getTreeNodeListeners: function () {\n        var treeNodeListeners = {\n            'itemclick' : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this),\n            'beforeitemappend': function( thisNode, newChildNode, index, eOpts ) {\n                newChildNode.data.leaf = true;\n                newChildNode.data.expaned = true;\n                newChildNode.data.iconCls = \"pimcore_icon_sql\"\n            }\n        };\n\n        return treeNodeListeners;\n    },\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n        this.openConfig(record.data.id);\n    },\n\n    openConfig: function (id) {\n\n        var existingPanel = Ext.getCmp(\"pimcore_sql_panel_\" + id);\n        if(existingPanel) {\n            this.editPanel.setActiveTab(existingPanel);\n            return;\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_get'),\n            params: {\n                name: id\n            },\n            success: function (response) {\n                var data = Ext.decode(response.responseText);\n\n                var fieldPanel = new pimcore.report.custom.item(data, this);\n                pimcore.layout.refresh();\n            }.bind(this)\n        });\n    },\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n        menu.add(new Ext.menu.Item({\n            text: t('delete'),\n            iconCls: \"pimcore_icon_delete\",\n            handler: this.deleteField.bind(this, tree, record),\n            disabled: !record.data.writeable\n        }));\n\n        menu.add(new Ext.menu.Item({\n            text: t('clone'),\n            iconCls: \"pimcore_icon_clone\",\n            hideOnClick: true,\n            handler: this.cloneField.bind(this, tree, record)\n        }));\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    addField: function () {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item') + \".<br>\" + t(\"naming_requirements_3chars\") + \" (a-zA-Z0-9_-)\",\n                                                this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n\n            var codes = this.tree.getRootNode().childNodes;\n            for (var i = 0; i < codes.length; i++) {\n                if (codes[i].text == value) {\n                    Ext.MessageBox.alert(' ', t('name_already_in_use'));\n                    return;\n                }\n            }\n\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_reports_customreport_add'),\n                method: 'POST',\n                params: {\n                    name: value\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.tree.getStore().load({\n                        node: this.tree.getRootNode()\n                    });\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n                    } else {\n                        this.openConfig(data.id);\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n        }\n    },\n\n    deleteField: function (tree, record) {\n        Ext.Msg.confirm(t('delete'), sprintf(t('delete_message_advanced'), t('portlet_customreport'), record.data.text), function (btn) {\n            if (btn == 'yes') {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_reports_customreport_delete'),\n                    method: 'DELETE',\n                    params: {\n                        name: record.data.id\n                    }\n                });\n\n                this.getEditPanel().removeAll();\n                record.remove();\n            }\n        }.bind(this));\n    },\n\n\n    cloneField: function (tree, record) {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item') + \" (a-zA-Z-_)\",\n            this.doCloneField.bind(this, tree, record));\n    },\n\n    doCloneField: function (tree, record, button, value) {\n        if (button == \"ok\") {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_reports_customreport_clone'),\n                method: 'POST',\n                params: {\n                    name: record.data.id,\n                    newName: value\n                },\n                success: function () {\n                    this.tree.getStore().reload(\n                        {\n                            callback: function(newName) {\n                                this.openConfig(newName);\n                            }.bind(this, value)\n                        }\n                    );\n                }.bind(this)\n\n            });\n        }\n    }\n});\n\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Core\\Exception\\InvalidArgumentException;\n\n/**\n * @Route(\"/custom-report\")\n *\n * @internal\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $this->isValidConfigName($request->get('name'));\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            if (!$report->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $this->isValidConfigName($newName);\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $data = $report->getObjectVars();\n        $data['writeable'] = $report->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $this->isValidConfigName($request->get('name'));\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        if (!$report->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        if (!$report) {\n            throw $this->createNotFoundException();\n        }\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0] ?? null;\n\n        $success = false;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => htmlspecialchars($report->getName()),\n                'niceName' => htmlspecialchars($report->getNiceName()),\n                'iconClass' => htmlspecialchars($report->getIconClass()),\n                'group' => htmlspecialchars($report->getGroup()),\n                'groupIconClass' => htmlspecialchars($report->getGroupIconClass()),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => htmlspecialchars($report->getReportClass()),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    protected function getTemporaryFileFromFileName(string $exportFileName): string\n    {\n        $exportFileName = basename($exportFileName);\n        if (!str_ends_with($exportFileName, '.csv')) {\n            throw new InvalidArgumentException($exportFileName . ' is not a valid csv file.');\n        }\n\n        return PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . $exportFileName;\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        if ($drillDownFilters) {\n            $drillDownFilters = json_decode($drillDownFilters, true);\n        }\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        if (!$config) {\n            throw $this->createNotFoundException();\n        }\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        } else {\n            $exportFile = $this->getTemporaryFileFromFileName($exportFile);\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            $row = Service::escapeCsvRecord($row);\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => basename($exportFile),\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $exportFile = $this->getTemporaryFileFromFileName($exportFile);\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n\n    /**\n     * @throws \\Exception\n     */\n    public function isValidConfigName(string $configName) {\n        if(!preg_match('/^[a-zA-Z0-9_\\-]+$/', $configName)) {\n            throw new \\Exception('The customer report name is invalid');\n        }\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.report.custom.panel\");\npimcore.report.custom.panel = Class.create({\n\n    initialize: function () {\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                border: false,\n                layout: \"border\",\n                items: [this.getTree(), this.getEditPanel()]\n            });\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getTree: function () {\n        if (!this.tree) {\n            var store = Ext.create('Ext.data.TreeStore', {\n                autoLoad: false,\n                autoSync: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_reports_customreport_tree'),\n                    reader: {\n                        type: 'json'\n                    }\n                },\n                root: {\n                    iconCls: \"pimcore_icon_thumbnails\"\n                }\n            });\n\n            this.tree = new Ext.tree.TreePanel({\n                store: store,\n                region: \"west\",\n                autoScroll:true,\n                animate:false,\n                containerScroll: true,\n                width: 250,\n                split: true,\n                root: {\n                    id: '0',\n                    expanded: true\n                },\n                rootVisible: false,\n                listeners: this.getTreeNodeListeners(),\n                tbar: {\n                    cls: 'pimcore_toolbar_border_bottom',\n                    items: [\n                        {\n                            text: t(\"add\"),\n                            iconCls: \"pimcore_icon_add\",\n                            handler: this.addField.bind(this),\n                            disabled: !pimcore.settings['custom-reports-writeable']\n                        }\n                    ]\n                }\n            });\n\n            this.tree.on(\"render\", function () {\n                this.getRootNode().expand();\n            });\n        }\n\n        return this.tree;\n    },\n\n    getEditPanel: function () {\n        if (!this.editPanel) {\n            this.editPanel = new Ext.TabPanel({\n                region: \"center\",\n                plugins: ['tabclosemenu']\n            });\n        }\n\n        return this.editPanel;\n    },\n\n    getTreeNodeListeners: function () {\n        var treeNodeListeners = {\n            'itemclick' : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this),\n            'beforeitemappend': function( thisNode, newChildNode, index, eOpts ) {\n                newChildNode.data.leaf = true;\n                newChildNode.data.expaned = true;\n                newChildNode.data.iconCls = \"pimcore_icon_sql\"\n            }\n        };\n\n        return treeNodeListeners;\n    },\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n        this.openConfig(record.data.id);\n    },\n\n    openConfig: function (id) {\n\n        var existingPanel = Ext.getCmp(\"pimcore_sql_panel_\" + id);\n        if(existingPanel) {\n            this.editPanel.setActiveTab(existingPanel);\n            return;\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_reports_customreport_get'),\n            params: {\n                name: id\n            },\n            success: function (response) {\n                var data = Ext.decode(response.responseText);\n\n                var fieldPanel = new pimcore.report.custom.item(data, this);\n                pimcore.layout.refresh();\n            }.bind(this)\n        });\n    },\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n        menu.add(new Ext.menu.Item({\n            text: t('delete'),\n            iconCls: \"pimcore_icon_delete\",\n            handler: this.deleteField.bind(this, tree, record),\n            disabled: !record.data.writeable\n        }));\n\n        menu.add(new Ext.menu.Item({\n            text: t('clone'),\n            iconCls: \"pimcore_icon_clone\",\n            hideOnClick: true,\n            handler: this.cloneField.bind(this, tree, record)\n        }));\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    addField: function () {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item') + \".<br>\" + t(\"naming_requirements_3chars\") + \" (a-zA-Z0-9_-)\",\n                                                this.addFieldComplete.bind(this), null, null, \"\");\n    },\n\n    addFieldComplete: function (button, value, object) {\n\n        var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n        if (button == \"ok\" && value.length > 2 && regresult == value) {\n\n            var codes = this.tree.getRootNode().childNodes;\n            for (var i = 0; i < codes.length; i++) {\n                if (codes[i].text == value) {\n                    Ext.MessageBox.alert(' ', t('name_already_in_use'));\n                    return;\n                }\n            }\n\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_reports_customreport_add'),\n                method: 'POST',\n                params: {\n                    name: value\n                },\n                success: function (response) {\n                    var data = Ext.decode(response.responseText);\n\n                    this.tree.getStore().load({\n                        node: this.tree.getRootNode()\n                    });\n\n                    if(!data || !data.success) {\n                        Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n                    } else {\n                        this.openConfig(data.id);\n                    }\n                }.bind(this)\n            });\n        }\n        else if (button == \"cancel\") {\n            return;\n        }\n        else {\n            Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n        }\n    },\n\n    deleteField: function (tree, record) {\n        const decodedName = Ext.util.Format.htmlDecode(record.data.text);\n        Ext.Msg.confirm(t('delete'), sprintf(t('delete_message_advanced'), t('portlet_customreport'), Ext.util.Format.htmlEncode(decodedName)), function (btn) {\n            if (btn == 'yes') {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_reports_customreport_delete'),\n                    method: 'DELETE',\n                    params: {\n                        name: record.data.id\n                    }\n                });\n\n                this.getEditPanel().removeAll();\n                record.remove();\n            }\n        }.bind(this));\n    },\n\n\n    cloneField: function (tree, record) {\n        Ext.MessageBox.prompt(' ', t('enter_the_name_of_the_new_item') + \" (a-zA-Z-_)\",\n            this.doCloneField.bind(this, tree, record));\n    },\n\n    doCloneField: function (tree, record, button, value) {\n        if (button == \"ok\") {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_reports_customreport_clone'),\n                method: 'POST',\n                params: {\n                    name: record.data.id,\n                    newName: value\n                },\n                success: function () {\n                    this.tree.getStore().reload(\n                        {\n                            callback: function(newName) {\n                                this.openConfig(newName);\n                            }.bind(this, value)\n                        }\n                    );\n                }.bind(this)\n\n            });\n        }\n    }\n});\n\n"], "filenames": ["bundles/AdminBundle/Controller/Reports/CustomReportController.php", "bundles/AdminBundle/Resources/public/js/pimcore/report/custom/panel.js"], "buggy_code_start_loc": [78, 209], "buggy_code_end_loc": [521, 210], "fixing_code_start_loc": [79, 209], "fixing_code_end_loc": [534, 211], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2614", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-10T06:15:15.007", "lastModified": "2023-05-16T14:19:23.913", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 4.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/c36ef54ce33f7b5e74b7b0ab9eabfed47c018fc7", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/1a5e6c65-2c5e-4617-9411-5b47a7e743a6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/c36ef54ce33f7b5e74b7b0ab9eabfed47c018fc7"}}