{"buggy_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass TagsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 50,\n            'order' => array(\n                    'Tag.name' => 'asc'\n            ),\n            'contain' => array(\n                'EventTag' => array(\n                    'fields' => array('EventTag.event_id')\n                ),\n                'AttributeTag' => array(\n                    'fields' => array('AttributeTag.event_id', 'AttributeTag.attribute_id')\n                ),\n                'FavouriteTag',\n                'Organisation' => array(\n                    'fields' => array('id', 'name')\n                )\n            )\n    );\n\n    public $helpers = array('TextColour');\n\n    public function index($favouritesOnly = false)\n    {\n        $this->loadModel('Attribute');\n        $this->loadModel('Event');\n        $this->loadModel('Taxonomy');\n        if ($this->_isSiteAdmin()) {\n            $this->paginate['contain']['User'] = array('fields' => array('id', 'email'));\n        }\n        $taxonomies = $this->Taxonomy->listTaxonomies(array('full' => false, 'enabled' => true));\n        $taxonomyNamespaces = array();\n        if (!empty($taxonomies)) {\n            foreach ($taxonomies as $taxonomy) {\n                $taxonomyNamespaces[$taxonomy['namespace']] = $taxonomy;\n            }\n        }\n        $taxonomyTags = array();\n        $passedArgsArray = array();\n        $this->Event->recursive = -1;\n        if ($favouritesOnly) {\n            $tag_id_list = $this->Tag->FavouriteTag->find('list', array(\n                    'conditions' => array('FavouriteTag.user_id' => $this->Auth->user('id')),\n                    'fields' => array('FavouriteTag.tag_id')\n            ));\n            if (empty($tag_id_list)) {\n                $tag_id_list = array(-1);\n            }\n            $this->paginate['conditions']['AND']['Tag.id'] = $tag_id_list;\n        }\n        if (isset($this->params['named']['searchall'])) {\n            $passedArgsArray['all'] = $this->params['named']['searchall'];\n        } elseif ($this->request->is('post')) {\n            $validNames = array('filter', 'searchall', 'name', 'search');\n            foreach ($validNames as $vn) {\n                if (!empty($this->request->data[$vn])) {\n                    $passedArgsArray['all'] = $this->request->data[$vn];\n                    continue;\n                }\n            }\n        }\n        if (!empty($passedArgsArray['all'])) {\n            $this->paginate['conditions']['AND']['LOWER(Tag.name) LIKE'] = '%' . strtolower($passedArgsArray['all']) . '%';\n        }\n        if ($this->_isRest()) {\n            unset($this->paginate['limit']);\n            unset($this->paginate['contain']['EventTag']);\n            unset($this->paginate['contain']['AttributeTag']);\n            $paginated = $this->Tag->find('all', $this->paginate);\n        } else {\n            $paginated = $this->paginate();\n        }\n        $tagList = array();\n        $csv = array();\n        $sgs = $this->Tag->EventTag->Event->SharingGroup->fetchAllAuthorised($this->Auth->user());\n        foreach ($paginated as $k => $tag) {\n            $tagList[] = $tag['Tag']['id'];\n            $paginated[$k]['Tag']['count'] = $this->Tag->EventTag->countForTag($tag['Tag']['id'], $this->Auth->user(), $sgs);\n            if (!$this->_isRest()) {\n                $paginated[$k]['event_ids'] = array();\n                $paginated[$k]['attribute_ids'] = array();\n                foreach ($paginated[$k]['EventTag'] as $et) {\n                    $paginated[$k]['event_ids'][] = $et['event_id'];\n                }\n                unset($paginated[$k]['EventTag']);\n                foreach ($paginated[$k]['AttributeTag'] as $at) {\n                    $paginated[$k]['attribute_ids'][] = $at['attribute_id'];\n                }\n                unset($paginated[$k]['AttributeTag']);\n            }\n            $paginated[$k]['Tag']['attribute_count'] = $this->Tag->AttributeTag->countForTag($tag['Tag']['id'], $this->Auth->user(), $sgs);\n            if (!empty($tag['FavouriteTag'])) {\n                foreach ($tag['FavouriteTag'] as $ft) {\n                    if ($ft['user_id'] == $this->Auth->user('id')) {\n                        $paginated[$k]['Tag']['favourite'] = true;\n                    }\n                }\n                if (!isset($paginated[$k]['Tag']['favourite'])) {\n                    $paginated[$k]['Tag']['favourite'] = false;\n                }\n            } else {\n                $paginated[$k]['Tag']['favourite'] = false;\n            }\n            unset($paginated[$k]['FavouriteTag']);\n            if (!empty($taxonomyNamespaces)) {\n                $taxonomyNamespaceArrayKeys = array_keys($taxonomyNamespaces);\n                foreach ($taxonomyNamespaceArrayKeys as $tns) {\n                    if (substr(strtoupper($tag['Tag']['name']), 0, strlen($tns)) === strtoupper($tns)) {\n                        $paginated[$k]['Tag']['Taxonomy'] = $taxonomyNamespaces[$tns];\n                        if (!isset($taxonomyTags[$tns])) {\n                            $taxonomyTags[$tns] = $this->Taxonomy->getTaxonomyTags($taxonomyNamespaces[$tns]['id'], true);\n                        }\n                        $paginated[$k]['Tag']['Taxonomy']['expanded'] = isset($taxonomyTags[$tns][strtoupper($tag['Tag']['name'])]) ? $taxonomyTags[$tns][strtoupper($tag['Tag']['name'])] : $tag['Tag']['name'];\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->loadModel('Sighting');\n            $sightings['event'] = $this->Sighting->getSightingsForObjectIds($this->Auth->user(), $tagList);\n            $sightings['attribute'] = $this->Sighting->getSightingsForObjectIds($this->Auth->user(), $tagList, 'attribute');\n            foreach ($paginated as $k => $tag) {\n                $objects = array('event', 'attribute');\n                foreach ($objects as $object) {\n                    foreach ($tag[$object . '_ids'] as $objectid) {\n                        if (isset($sightings[$object][$objectid])) {\n                            foreach ($sightings[$object][$objectid] as $date => $sightingCount) {\n                                if (!isset($tag['sightings'][$date])) {\n                                    $tag['sightings'][$date] = $sightingCount;\n                                } else {\n                                    $tag['sightings'][$date] += $sightingCount;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!empty($tag['sightings'])) {\n                    $startDate = !empty($tag['sightings']) ? min(array_keys($tag['sightings'])) : date('Y-m-d');\n                    $startDate = date('Y-m-d', strtotime(\"-3 days\", strtotime($startDate)));\n                    $to = date('Y-m-d', time());\n                    for ($date = $startDate; strtotime($date) <= strtotime($to); $date = date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))) {\n                        if (!isset($csv[$k])) {\n                            $csv[$k] = 'Date,Close\\n';\n                        }\n                        if (isset($tag['sightings'][$date])) {\n                            $csv[$k] .= $date . ',' . $tag['sightings'][$date] . '\\n';\n                        } else {\n                            $csv[$k] .= $date . ',0\\n';\n                        }\n                    }\n                }\n                unset($paginated[$k]['event_ids']);\n            }\n        }\n        if ($this->_isRest()) {\n            foreach ($paginated as $key => $tag) {\n                $paginated[$key] = $tag['Tag'];\n            }\n            $this->set('Tag', $paginated);\n            $this->set('_serialize', array('Tag'));\n        } else {\n            $this->set('passedArgs', json_encode($this->passedArgs));\n            $this->set('passedArgsArray', $passedArgsArray);\n            $this->set('csv', $csv);\n            $this->set('list', $paginated);\n            $this->set('favouritesOnly', $favouritesOnly);\n        }\n        // send perm_tagger to view for action buttons\n    }\n\n    public function add()\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tag_editor']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Tag'])) {\n                $this->request->data = array('Tag' => $this->request->data);\n            }\n            if (isset($this->request->data['Tag']['request'])) {\n                $this->request->data['Tag'] = $this->request->data['Tag']['request'];\n            }\n            if (!isset($this->request->data['Tag']['colour'])) {\n                $this->request->data['Tag']['colour'] = $this->Tag->random_color();\n            }\n            if (isset($this->request->data['Tag']['id'])) {\n                unset($this->request->data['Tag']['id']);\n            }\n            if ($this->_isRest()) {\n                $tag = $this->Tag->find('first', array(\n                    'conditions' => array(\n                        'Tag.name' => $this->request->data['Tag']['name']\n                    ),\n                    'recursive' => -1\n                ));\n                if (!empty($tag)) {\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n            }\n            if ($this->Tag->save($this->request->data)) {\n                if ($this->_isRest()) {\n                    $tag = $this->Tag->find('first', array(\n                        'conditions' => array(\n                            'Tag.id' => $this->Tag->id\n                        ),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n                $this->Flash->success('The tag has been saved.');\n                $this->redirect(array('action' => 'index'));\n            } else {\n                if ($this->_isRest()) {\n                    $error_message = '';\n                    foreach ($this->Tag->validationErrors as $k => $v) {\n                        $error_message .= '[' . $k . ']: ' . $v[0];\n                    }\n                    throw new MethodNotAllowedException('Could not add the Tag. ' . $error_message);\n                } else {\n                    $this->Flash->error('The tag could not be saved. Please, try again.');\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Tag', 'add', false, $this->response->type());\n        }\n        $this->loadModel('Organisation');\n        $temp = $this->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'fields' => array('id', 'name'),\n            'recursive' => -1\n        ));\n        $orgs = array(0 => 'Unrestricted');\n        if (!empty($temp)) {\n            foreach ($temp as $org) {\n                $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n            }\n        }\n        $this->set('orgs', $orgs);\n        $users = array(0 => 'Unrestricted');\n        if ($this->_isSiteAdmin()) {\n            $temp = $this->Organisation->User->find('all', array(\n                'conditions' => array('disabled' => 0),\n                'fields' => array('id', 'email'),\n                'recursive' => -1\n            ));\n            if (!empty($temp)) {\n                foreach ($temp as $user) {\n                    $users[$user['User']['id']] = $user['User']['email'];\n                }\n            }\n            $this->set('users', $users);\n        }\n    }\n\n    public function quickAdd()\n    {\n        if ((!$this->_isSiteAdmin() && !$this->userRole['perm_tag_editor']) || !$this->request->is('post')) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if (isset($this->request->data['Tag']['request'])) {\n            $this->request->data['Tag'] = $this->request->data['Tag']['request'];\n        }\n        if ($this->Tag->quickAdd($this->request->data['Tag']['name'])) {\n            $this->Flash->success('The tag has been saved.');\n        } else {\n            $this->Flash->error('The tag could not be saved. Please, try again.');\n        }\n        $this->redirect($this->referer());\n    }\n\n    public function edit($id = false)\n    {\n        if ($id === false && (!$this->_isRest() || !$this->request->is('get'))) {\n            throw new NotFoundException('No ID set.');\n        } elseif (!empty($id)) {\n            $this->Tag->id = $id;\n            if (!$this->Tag->exists()) {\n                throw new NotFoundException('Invalid tag');\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Tag'])) {\n                $this->request->data = array('Tag' => $this->request->data);\n            }\n            $this->request->data['Tag']['id'] = $id;\n            if ($this->Tag->save($this->request->data)) {\n                if ($this->_isRest()) {\n                    $tag = $this->Tag->find('first', array(\n                        'conditions' => array(\n                            'Tag.id' => $id\n                        ),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n                $this->Flash->success('The Tag has been edited');\n                $this->redirect(array('action' => 'index'));\n            } else {\n                if ($this->_isRest()) {\n                    $error_message = '';\n                    foreach ($this->Tag->validationErrors as $k => $v) {\n                        $error_message .= '[' . $k . ']: ' . $v[0];\n                    }\n                    throw new MethodNotAllowedException('Could not add the Tag. ' . $error_message);\n                }\n                $this->Flash->error('The Tag could not be saved. Please, try again.');\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Tag', 'edit', false, $this->response->type());\n        }\n        $this->loadModel('Organisation');\n        $temp = $this->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'fields' => array('id', 'name'),\n            'recursive' => -1\n        ));\n        $orgs = array(0 => 'Unrestricted');\n        if (!empty($temp)) {\n            foreach ($temp as $org) {\n                $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n            }\n        }\n        $this->set('orgs', $orgs);\n        $users = array(0 => 'Unrestricted');\n        if ($this->_isSiteAdmin()) {\n            $temp = $this->Organisation->User->find('all', array(\n                'conditions' => array('disabled' => 0),\n                'fields' => array('id', 'email'),\n                'recursive' => -1\n            ));\n            if (!empty($temp)) {\n                foreach ($temp as $user) {\n                    $users[$user['User']['id']] = $user['User']['email'];\n                }\n            }\n            $this->set('users', $users);\n        }\n        $this->request->data = $this->Tag->read(null, $id);\n    }\n\n    public function delete($id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Tag->id = $id;\n        if (!$this->Tag->exists()) {\n            throw new NotFoundException('Invalid tag');\n        }\n        if ($this->Tag->delete()) {\n            if ($this->_isRest()) {\n                $this->set('name', 'Tag deleted.');\n                $this->set('message', 'Tag deleted.');\n                $this->set('url', '/tags/delete/' . $id);\n                $this->set('_serialize', array('name', 'message', 'url'));\n            }\n            $this->Flash->success(__('Tag deleted'));\n        } else {\n            if ($this->_isRest()) {\n                throw new MethodNotAllowedException('Could not delete the tag, or tag doesn\\'t exist.');\n            }\n            $this->Flash->error(__('Tag was not deleted'));\n        }\n        if (!$this->_isRest()) {\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function view($id)\n    {\n        if ($this->_isRest()) {\n            $contain = array('EventTag' => array('fields' => 'event_id'));\n            $contain['AttributeTag'] = array('fields' => 'attribute_id');\n            $tag = $this->Tag->find('first', array(\n                    'conditions' => array('id' => $id),\n                    'recursive' => -1,\n                    'contain' => $contain\n            ));\n            if (empty($tag)) {\n                throw new MethodNotAllowedException('Invalid Tag');\n            }\n            if (empty($tag['EventTag'])) {\n                $tag['Tag']['count'] = 0;\n            } else {\n                $eventIDs = array();\n                foreach ($tag['EventTag'] as $eventTag) {\n                    $eventIDs[] = $eventTag['event_id'];\n                }\n                $conditions = array('Event.id' => $eventIDs);\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array_merge(\n                        $conditions,\n                        array('OR' => array(\n                                array('AND' => array(\n                                        array('Event.distribution >' => 0),\n                                        array('Event.published =' => 1)\n                                )),\n                                array('Event.orgc_id' => $this->Auth->user('org_id'))\n                        ))\n                );\n                }\n                $events = $this->Tag->EventTag->Event->find('all', array(\n                        'fields' => array('Event.id', 'Event.distribution', 'Event.orgc_id'),\n                        'conditions' => $conditions\n                ));\n                $tag['Tag']['count'] = count($events);\n            }\n            unset($tag['EventTag']);\n            if (empty($tag['AttributeTag'])) {\n                $tag['Tag']['attribute_count'] = 0;\n            } else {\n                $attributeIDs = array();\n                foreach ($tag['AttributeTag'] as $attributeTag) {\n                    $attributeIDs[] = $attributeTag['attribute_id'];\n                }\n                $conditions = array('Attribute.id' => $attributeIDs);\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array_merge(\n                        $conditions,\n                        array('OR' => array(\n                            array('AND' => array(\n                                array('Attribute.deleted =' => 0),\n                                array('Attribute.distribution >' => 0),\n                                array('Event.distribution >' => 0),\n                                array('Event.published =' => 1)\n                            )),\n                            array('Event.orgc_id' => $this->Auth->user('org_id'))\n                        ))\n                    );\n                }\n                $attributes = $this->Tag->AttributeTag->Attribute->find('all', array(\n                    'fields'     => array('Attribute.id', 'Attribute.deleted', 'Attribute.distribution', 'Event.id', 'Event.distribution', 'Event.orgc_id'),\n                    'contain'    => array('Event' => array('fields' => array('id', 'distribution', 'orgc_id'))),\n                    'conditions' => $conditions\n                ));\n                $tag['Tag']['attribute_count'] = count($attributes);\n            }\n            unset($tag['AttributeTag']);\n            $this->set('Tag', $tag['Tag']);\n            $this->set('_serialize', 'Tag');\n        } else {\n            throw new MethodNotAllowedException('This action is only for REST users.');\n        }\n    }\n\n    public function showEventTag($id)\n    {\n        $this->loadModel('EventTag');\n        $this->loadModel('Taxonomy');\n        if (!$this->EventTag->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n            throw new MethodNotAllowedException('Invalid event.');\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array(\n            'fields' => array('GalaxyCluster.tag_name'),\n            'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name')\n        ));\n        $this->helpers[] = 'TextColour';\n        $conditions = array(\n                'event_id' => $id,\n                'Tag.name !=' => $cluster_names\n        );\n        $tags = $this->EventTag->find('all', array(\n                'conditions' => $conditions,\n                'contain' => array('Tag'),\n                'fields' => array('Tag.id', 'Tag.colour', 'Tag.name', 'EventTag.local'),\n        ));\n        foreach ($tags as $k => $tag) {\n            $tags[$k]['local'] = $tag['EventTag']['local'];\n        }\n        $this->set('tags', $tags);\n        $event = $this->Tag->EventTag->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n                'conditions' => array('Event.id' => $id)\n        ));\n        $this->set('required_taxonomies', $this->EventTag->Event->getRequiredTaxonomies());\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($tags);\n        $this->set('tagConflicts', $tagConflicts);\n        $this->set('event', $event);\n        $this->layout = 'ajax';\n        $this->render('/Events/ajax/ajaxTags');\n    }\n\n    public function showAttributeTag($id)\n    {\n        $this->helpers[] = 'TextColour';\n        $this->loadModel('AttributeTag');\n        $this->loadModel('Taxonomy');\n\n        $this->Tag->AttributeTag->Attribute->id = $id;\n        if (!$this->Tag->AttributeTag->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $this->Tag->AttributeTag->Attribute->read();\n        $eventId = $this->Tag->AttributeTag->Attribute->data['Attribute']['event_id'];\n\n        $conditions = array('attribute_id' => $id);\n        $attributeTags = $this->AttributeTag->find('all', array(\n            'conditions' => $conditions,\n            'contain' => array('Tag'),\n            'fields' => array('Tag.id', 'Tag.colour', 'Tag.name', 'AttributeTag.local'),\n        ));\n        foreach ($attributeTags as $k => $at) {\n            $attributeTags[$k]['local'] = $at['AttributeTag']['local'];\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array('fields' => array('GalaxyCluster.tag_name'), 'group' => array('GalaxyCluster.tag_name', 'GalaxyCluster.id')));\n        foreach ($attributeTags as $k => $attributeTag) {\n            if (in_array($attributeTag['Tag']['name'], $cluster_names)) {\n                unset($attributeTags[$k]);\n            }\n        }\n        $event = $this->Tag->AttributeTag->Attribute->Event->find('first', array(\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n            'conditions' => array('Event.id' => $eventId)\n        ));\n        $this->set('event', $event);\n        $this->set('attributeTags', $attributeTags);\n        $this->set('attributeId', $id);\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attributeTags);\n        $this->set('tagConflicts', $tagConflicts);\n        $this->layout = 'ajax';\n        $this->render('/Attributes/ajax/ajaxAttributeTags');\n    }\n\n    public function showTagControllerTag($id)\n    {\n        $this->loadModel('TagCollection');\n        $tagCollection = $this->TagCollection->find('first', array(\n            'recursive' => -1,\n            'contain' => array('TagCollection'),\n            'conditions' => array('TagCollection.id' => $id)\n        ));\n        if (empty($tagCollection) || (!$this->_isSiteAdmin() && $tagCollection['org_id'] !== $this->Auth->user('org_id'))) {\n            throw new MethodNotAllowedException('Invalid tag_collection.');\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array('fields' => array('GalaxyCluster.tag_name'), 'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name')));\n        $this->helpers[] = 'TextColour';\n        $tags = $this->TagCollection->TagCollectionTag->find('all', array(\n                'conditions' => array(\n                        'tag_collection_id' => $id,\n                        'Tag.name !=' => $cluster_names\n                ),\n                'contain' => array('Tag'),\n                'fields' => array('Tag.id', 'Tag.colour', 'Tag.name'),\n        ));\n        $this->set('tags', $tags);\n        $event = $this->Tag->EventTag->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n                'conditions' => array('Event.id' => $id)\n        ));\n        $this->set('event', $event);\n        $this->layout = 'ajax';\n        $this->render('/Events/ajax/ajaxTags');\n    }\n\n    public function viewTag($id)\n    {\n        $tag = $this->Tag->find('first', array(\n                'conditions' => array(\n                        'id' => $id\n                ),\n                'recursive' => -1,\n        ));\n        $this->layout = null;\n        $this->set('tag', $tag);\n        $this->set('id', $id);\n        $this->render('ajax/view_tag');\n    }\n\n\n    public function selectTaxonomy($id, $scope = 'event')\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tagger']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        $localFlag = !empty($this->params['named']['local']) ? '/local:1' : '';\n        $items = array();\n        $favourites = $this->Tag->FavouriteTag->find('count', array('conditions' => array('FavouriteTag.user_id' => $this->Auth->user('id'))));\n        if ($favourites) {\n            $items[] = array(\n                'name' => __('Favourite Tags'),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/favourites/\" . h($scope) . $localFlag\n            );\n        }\n        if ($scope !== 'tag_collection') {\n            $items[] = array(\n                'name' => __('Tag Collections'),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/collections/\" . h($scope) . $localFlag\n            );\n        }\n        $items[] = array(\n            'name' => __('Custom Tags'),\n            'value' => \"/tags/selectTag/\" . h($id) . \"/0/\" . h($scope) . $localFlag\n        );\n        $items[] = array(\n            'name' => __('All Tags'),\n            'value' => \"/tags/selectTag/\" . h($id) . \"/all/\" . h($scope) . $localFlag\n        );\n\n        $this->loadModel('Taxonomy');\n        $options = $this->Taxonomy->find('list', array('conditions' => array('enabled' => true), 'fields' => array('namespace'), 'order' => array('Taxonomy.namespace ASC')));\n        foreach ($options as $k => $option) {\n            $items[] = array(\n                'name' => __('Taxonomy Library') . \":\" . h($option),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/\" . h($k) . \"/\" . h($scope . $localFlag)\n            );\n        }\n        $this->set('items', $items);\n        $this->set('options', array( // set chosen (select picker) options\n            'select_options' => array(\n                'multiple' => 0,\n            )\n        ));\n        $this->render('/Elements/generic_picker');\n    }\n\n    public function selectTag($id, $taxonomy_id, $scope = 'event', $filterData = '')\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tagger']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        $this->loadModel('Taxonomy');\n        $expanded = array();\n        $banned_tags = $this->Tag->find('list', array(\n                'conditions' => array(\n                        'NOT' => array(\n                                'Tag.org_id' => array(\n                                        0,\n                                        $this->Auth->user('org_id')\n                                ),\n                                'Tag.user_id' => array(\n                                        0,\n                                        $this->Auth->user('id')\n                                )\n                        )\n                ),\n                'fields' => array('Tag.id')\n        ));\n        $this->set('taxonomy_id', $taxonomy_id);\n        if ($taxonomy_id === 'collections') {\n            $this->loadModel('TagCollection');\n            $tagCollections = $this->TagCollection->fetchTagCollection($this->Auth->user());\n            $tags = array();\n            $inludedTagListString = array();\n            $expanded = array();\n            foreach ($tagCollections as &$tagCollection) {\n                $tags[$tagCollection['TagCollection']['id']] = $tagCollection['TagCollection'];\n                $expanded[$tagCollection['TagCollection']['id']] = empty($tagCollection['TagCollection']['description']) ? $tagCollection['TagCollection']['name'] : $tagCollection['TagCollection']['description'];\n                if (!empty($tagCollection['TagCollectionTag'])) {\n                    $tagList = array();\n                    foreach ($tagCollection['TagCollectionTag'] as $k => $tce) {\n                        if (in_array($tce['tag_id'], $banned_tags)) {\n                            unset($tagCollection['TagCollectionTag'][$k]);\n                        } else {\n                            $tagList[] = $tce['Tag']['name'];\n                        }\n                        $tagCollection['TagCollectionTag'] = array_values($tagCollection['TagCollectionTag']);\n                    }\n                    $tagList = implode(', ', $tagList);\n                    $inludedTagListString[$tagCollection['TagCollection']['id']] = $tagList;\n                    $expanded[$tagCollection['TagCollection']['id']] .= sprintf(' (%s)', $tagList);\n                }\n            }\n        } else {\n            if ($taxonomy_id === '0') {\n                $temp = $this->Taxonomy->getAllTaxonomyTags(true, false, true);\n                $tags = array();\n                foreach ($temp as $tag) {\n                    $tags[$tag['Tag']['id']] = $tag['Tag'];\n                }\n                unset($temp);\n                $expanded = $tags;\n            } elseif ($taxonomy_id === 'favourites') {\n                $tags = array();\n                $conditions = array('FavouriteTag.user_id' => $this->Auth->user('id'));\n                $favTags = $this->Tag->FavouriteTag->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'contain' => array('Tag'),\n                    'order' => array('Tag.name asc')\n                ));\n                foreach ($favTags as $favTag) {\n                    $tags[$favTag['FavouriteTag']['tag_id']] = $favTag['Tag'];\n                    $expanded = $tags;\n                }\n            } elseif ($taxonomy_id === 'all') {\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array('Tag.org_id' => array(0, $this->Auth->user('org_id')));\n                    $conditions = array('Tag.user_id' => array(0, $this->Auth->user('id')));\n                }\n                $conditions['Tag.hide_tag'] = 0;\n                $allTags = $this->Tag->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'order' => array('name asc'),\n                    'fields' => array('Tag.id', 'Tag.name', 'Tag.colour')\n                ));\n                $tags = array();\n                foreach ($allTags as $k => $tag) {\n                    $temp = explode(':', $tag['Tag']['name']);\n                    if (count($temp) > 1) {\n                        if ($temp[0] !== 'misp-galaxy') {\n                            $tags[$tag['Tag']['id']] = $tag['Tag'];\n                        }\n                    } else {\n                        $tags[$tag['Tag']['id']] = $tag['Tag'];\n                    }\n                }\n                unset($allTags);\n                $expanded = $tags;\n            } else {\n                $taxonomies = $this->Taxonomy->getTaxonomy($taxonomy_id);\n                $tags = array();\n                if (!empty($taxonomies['entries'])) {\n                    foreach ($taxonomies['entries'] as $entry) {\n                        if (!empty($entry['existing_tag']['Tag'])) {\n                            $tags[$entry['existing_tag']['Tag']['id']] = $entry['existing_tag']['Tag'];\n                            $expanded[$entry['existing_tag']['Tag']['id']] = $entry['expanded'];\n                        }\n                    }\n                }\n            }\n            // Unset all tags that this user cannot use for tagging, determined by the org restriction on tags\n            if (!$this->_isSiteAdmin()) {\n                foreach ($banned_tags as $banned_tag) {\n                    unset($tags[$banned_tag]);\n                    unset($expanded[$banned_tag]);\n                }\n            }\n            $hidden_tags = $this->Tag->find('list', array(\n                    'conditions' => array('Tag.hide_tag' => 1),\n                    'fields' => array('Tag.id')\n            ));\n            foreach ($hidden_tags as $hidden_tag) {\n                unset($tags[$hidden_tag]);\n                unset($expanded[$hidden_tag]);\n            }\n        }\n\n        $this->set('scope', $scope);\n        $this->set('object_id', $id);\n\n        if ($scope === 'attribute') {\n            $onClickForm = 'quickSubmitAttributeTagForm';\n        } elseif ($scope === 'tag_collection') {\n            $onClickForm = 'quickSubmitTagCollectionTagForm';\n        } else {\n            $onClickForm = 'quickSubmitTagForm';\n        }\n        $items = array();\n        foreach ($tags as $k => $tag) {\n            $tagName = $tag['name'];\n            $choice_id = $k;\n            if ($taxonomy_id === 'collections') {\n                $choice_id = 'collection_' . $choice_id;\n            }\n\n            $itemParam = array(\n                'name' => $tagName,\n                'value' => $choice_id,\n                'template' => array(\n                    'name' => array(\n                        'name' => $tagName,\n                        'label' => array(\n                            'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                        )\n                    ),\n                    'infoExtra' => $expanded[$tag['id']]\n                )\n            );\n            if ($taxonomy_id === 'collections') {\n                $itemParam['template']['infoContextual'] = __('Includes: ') . $inludedTagListString[$tag['id']];\n            }\n            $items[] = $itemParam;\n        }\n        $this->set('items', $items);\n        $this->set('options', array( // set chosen (select picker) options\n            'functionName' => $onClickForm,\n            'multiple' => -1,\n            'select_options' => array(\n                'additionalData' => array(\n                    'id' => $id,\n                    'local' => !empty($this->params['named']['local'])\n                ),\n            ),\n        ));\n        $this->set('local', !empty($this->params['named']['local']));\n        $this->render('ajax/select_tag');\n    }\n\n    public function tagStatistics($percentage = false, $keysort = false)\n    {\n        $result = $this->Tag->EventTag->find('all', array(\n                'recursive' => -1,\n                'fields' => array('count(EventTag.id) as count', 'tag_id'),\n                'contain' => array('Tag' => array('fields' => array('Tag.name'))),\n                'group' => array('tag_id')\n        ));\n        $tags = array();\n        $taxonomies = array();\n        $totalCount = 0;\n        $this->loadModel('Taxonomy');\n        $temp = $this->Taxonomy->listTaxonomies(array('enabled' => true));\n        foreach ($temp as $t) {\n            if ($t['enabled']) {\n                $taxonomies[$t['namespace']] = 0;\n            }\n        }\n        foreach ($result as $r) {\n            if ($r['Tag']['name'] == null) {\n                continue;\n            }\n            $tags[$r['Tag']['name']] = $r[0]['count'];\n            $totalCount += $r[0]['count'];\n            foreach ($taxonomies as $taxonomy => $count) {\n                if (substr(strtolower($r['Tag']['name']), 0, strlen($taxonomy)) === strtolower($taxonomy)) {\n                    $taxonomies[$taxonomy] += $r[0]['count'];\n                }\n            }\n        }\n        if ($keysort === 'true') {\n            ksort($tags, SORT_NATURAL | SORT_FLAG_CASE);\n            ksort($taxonomies, SORT_NATURAL | SORT_FLAG_CASE);\n        } else {\n            arsort($tags);\n            arsort($taxonomies);\n        }\n        if ($percentage === 'true') {\n            foreach ($tags as $tag => $count) {\n                $tags[$tag] = round(100 * $count / $totalCount, 3) . '%';\n            }\n            foreach ($taxonomies as $taxonomy => $count) {\n                $taxonomies[$taxonomy] = round(100 * $count / $totalCount, 3) . '%';\n            }\n        }\n        $results = array('tags' => $tags, 'taxonomies' => $taxonomies);\n        $this->autoRender = false;\n        $this->layout = false;\n        $this->set('data', $results);\n        $this->set('flags', JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    private function __findObjectByUuid($object_uuid, &$type)\n    {\n        $this->loadModel('Event');\n        $object = $this->Event->find('first', array(\n            'conditions' => array(\n                'Event.uuid' => $object_uuid,\n            ),\n            'fields' => array('Event.orgc_id', 'Event.id'),\n            'recursive' => -1\n        ));\n        $type = 'Event';\n        if (!empty($object)) {\n            if (\n                !$this->_isSiteAdmin() &&\n                !$this->userRole['perm_tagger'] &&\n                $object['Event']['orgc_id'] != $this->Auth->user('org_id')\n            ) {\n                throw new MethodNotAllowedException('Invalid Target.');\n            }\n        } else {\n            $type = 'Attribute';\n            $object = $this->Event->Attribute->find('first', array(\n                'conditions' => array(\n                    'Attribute.uuid' => $object_uuid,\n                ),\n                'fields' => array('Attribute.id'),\n                'recursive' => -1,\n                'contain' => array('Event.orgc_id')\n            ));\n            if (!empty($object)) {\n                if (!$this->_isSiteAdmin() && !$this->userRole['perm_tagger'] && $object['Event']['orgc_id'] != $this->Auth->user('org_id')) {\n                    throw new MethodNotAllowedException('Invalid Target.');\n                }\n            } else {\n                throw new MethodNotAllowedException('Invalid Target.');\n            }\n        }\n        return $object;\n    }\n\n    public function attachTagToObject($uuid = false, $tag = false, $local = false)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This method is only accessible via POST requests.');\n        }\n        if (empty($uuid)) {\n            if (!empty($this->request->data['uuid'])) {\n                $uuid = $this->request->data['uuid'];\n            } else {\n                throw new MethodNotAllowedException('Invalid object uuid');\n            }\n        }\n        if (!Validation::uuid($uuid)) {\n            throw new InvalidArgumentException('Invalid UUID');\n        }\n        if (empty($tag)) {\n            if (!empty($this->request->data['tag'])) {\n                $tag = $this->request->data['tag'];\n            } else {\n                throw new MethodNotAllowedException('Invalid tag');\n            }\n        }\n        if (is_numeric($tag)) {\n            $conditions = array('Tag.id' => $tag);\n        } else {\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag)));\n        }\n        if (empty($local)) {\n            if (!empty($this->request->data['local'])) {\n                $local = $this->request->data['local'];\n            }\n        }\n        if (!is_bool($local)) {\n            throw new InvalidArgumentException('Invalid local flag');\n        }\n        $objectType = '';\n        $object = $this->__findObjectByUuid($uuid, $objectType);\n        $existingTag = $this->Tag->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($existingTag)) {\n            if (!is_numeric($tag)) {\n                if (!$this->userRole['perm_tag_editor']) {\n                    throw new MethodNotAllowedException('Tag not found and insufficient privileges to create it.');\n                }\n                $this->Tag->create();\n                $result = $this->Tag->save(array('Tag' => array('name' => $tag, 'colour' => $this->Tag->random_color())));\n                if (!$result) {\n                    return $this->RestResponse->saveFailResponse('Tags', 'attachTagToObject', false, __('Unable to create tag. Reason: ' . json_encode($this->Tag->validationErrors)), $this->response->type());\n                }\n                $existingTag = $this->Tag->find('first', array('recursive' => -1, 'conditions' => array('Tag.id' => $this->Tag->id)));\n            } else {\n                throw new NotFoundException('Invalid Tag.');\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            if (!in_array($existingTag['Tag']['org_id'], array(0, $this->Auth->user('org_id')))) {\n                throw new MethodNotAllowedException('Invalid Tag. This tag can only be set by a fixed organisation.');\n            }\n            if (!in_array($existingTag['Tag']['user_id'], array(0, $this->Auth->user('id')))) {\n                throw new MethodNotAllowedException('Invalid Tag. This tag can only be set by a fixed user.');\n            }\n        }\n        $this->loadModel($objectType);\n        $connectorObject = $objectType . 'Tag';\n        $conditions = array(\n            strtolower($objectType) . '_id' => $object[$objectType]['id'],\n            'tag_id' => $existingTag['Tag']['id'],\n            'local' => ($local ? 1 : 0)\n        );\n        $existingAssociation = $this->$objectType->$connectorObject->find('first', array(\n            'conditions' => $conditions\n        ));\n        if (!empty($existingAssociation)) {\n            return $this->RestResponse->saveSuccessResponse('Tags', 'attachTagToObject', false, $this->response->type(), $objectType . ' already has the requested tag attached, no changes had to be made.');\n        }\n        $this->$objectType->$connectorObject->create();\n        $data = array(\n            $connectorObject => $conditions\n        );\n        if ($objectType == 'Attribute') {\n            $data[$connectorObject]['event_id'] = $object['Event']['id'];\n        }\n        $result = $this->$objectType->$connectorObject->save($data);\n        if ($result) {\n            $tempObject = $this->$objectType->find('first', array(\n                'recursive' => -1,\n                'conditions' => array($objectType . '.id' => $object[$objectType]['id'])\n            ));\n            $date = new DateTime();\n            $tempObject[$objectType]['timestamp'] = $date->getTimestamp();\n            $this->$objectType->save($tempObject);\n            if($local) {\n                $message = 'Local tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully attached to ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            } else {\n                if ($objectType === 'Attribute') {\n                    $this->$objectType->Event->unpublishEvent($object['Event']['id']);\n                } else if ($objectType === 'Event') {\n                    $this->Event->unpublishEvent($object['Event']['id']);\n                }\n                $message = 'Global tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully attached to ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            }\n            return $this->RestResponse->saveSuccessResponse('Tags', 'attachTagToObject', false, $this->response->type(), $message);\n        } else {\n            return $this->RestResponse->saveFailResponse('Tags', 'attachTagToObject', false, 'Failed to attach tag to object.', $this->response->type());\n        }\n    }\n\n    public function removeTagFromObject($uuid = false, $tag = false)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This method is only accessible via POST requests.');\n        }\n        if (empty($uuid)) {\n            if (!empty($this->request->data['uuid'])) {\n                $uuid = $this->request->data['uuid'];\n            } else {\n                throw new MethodNotAllowedException('Invalid object uuid');\n            }\n        }\n        if (!Validation::uuid($uuid)) {\n            throw new InvalidArgumentException('Invalid UUID');\n        }\n        if (empty($tag)) {\n            if (!empty($this->request->data['tag'])) {\n                $tag = $this->request->data['tag'];\n            } else {\n                throw new MethodNotAllowedException('Invalid tag');\n            }\n        }\n        if (is_numeric($tag)) {\n            $conditions = array('Tag.id' => $tag);\n        } else {\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag)));\n        }\n        $existingTag = $this->Tag->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($existingTag)) {\n            throw new MethodNotAllowedException('Invalid Tag.');\n        }\n        $objectType = '';\n        $object = $this->__findObjectByUuid($uuid, $objectType);\n        if (empty($object)) {\n            throw new MethodNotAllowedException('Invalid Target.');\n        }\n        $connectorObject = $objectType . 'Tag';\n        $this->loadModel($objectType);\n        $existingAssociation = $this->$objectType->$connectorObject->find('first', array(\n            'conditions' => array(\n                strtolower($objectType) . '_id' => $object[$objectType]['id'],\n                'tag_id' => $existingTag['Tag']['id']\n            )\n        ));\n        if (empty($existingAssociation)) {\n            throw new MethodNotAllowedException('Could not remove tag as it is not attached to the target ' . $objectType);\n        }\n        $result = $this->$objectType->$connectorObject->delete($existingAssociation[$connectorObject]['id']);\n        if ($result) {\n            $message = 'Tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully removed from ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            return $this->RestResponse->saveSuccessResponse('Tags', 'removeTagFromObject', false, $this->response->type(), $message);\n        } else {\n            return $this->RestResponse->saveFailResponse('Tags', 'removeTagFromObject', false, 'Failed to remove tag from object.', $this->response->type());\n        }\n    }\n\n    public function viewGraph($id)\n    {\n        $tag = $this->Tag->find('first', array(\n            'conditions' => array('Tag.id' => $id),\n            'recursive' => -1\n        ));\n        if (empty($tag)) {\n            throw new MethodNotAllowedException('Invalid Tag.');\n        }\n        $this->loadModel('Taxonomy');\n        $taxonomy = $this->Taxonomy->getTaxonomyForTag($tag['Tag']['name']);\n        if (!empty($taxonomy)) {\n            $this->set('taxonomy', $taxonomy);\n        }\n        $this->set('scope', 'tag');\n        $this->set('id', $id);\n        $this->render('/Events/view_graph');\n    }\n\n    public function search($tag = false)\n    {\n        if (isset($this->request->data['Tag'])) {\n            $this->request->data = $this->request->data['Tag'];\n        }\n        if (!empty($this->request->data['tag'])) {\n            $tag = $this->request->data['tag'];\n        } else if (!empty($this->request->data)) {\n            $tag = $this->request->data;\n        }\n        if (!is_array($tag)) {\n            $tag = array($tag);\n        }\n        $conditions = array();\n        foreach ($tag as $k => $t) {\n            $tag[$k] = strtolower($t);\n            $conditions['OR'][] = array('LOWER(GalaxyCluster.value)' => $tag[$k]);\n        }\n        foreach ($tag as $k => $t) {\n            $conditions['OR'][] = array('AND' => array('GalaxyElement.key' => 'synonyms', 'LOWER(GalaxyElement.value) LIKE' => $t));\n        }\n        $this->loadModel('GalaxyCluster');\n        $elements = $this->GalaxyCluster->GalaxyElement->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'contain' => array('GalaxyCluster.tag_name')\n        ));\n        foreach ($elements as $element) {\n            $tag[] = strtolower($element['GalaxyCluster']['tag_name']);\n        }\n        $conditions = array();\n        foreach ($tag as $k => $t) {\n            $conditions['OR'][] = array('LOWER(Tag.name) LIKE' => $t);\n        }\n        $tags = $this->Tag->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $this->loadModel('Taxonomy');\n        foreach ($tags as $k => $t) {\n            $taxonomy = $this->Taxonomy->getTaxonomyForTag($t['Tag']['name'], true);\n            if (!empty($taxonomy)) {\n                $tags[$k]['Taxonomy'] = $taxonomy['Taxonomy'];\n            }\n            $cluster = $this->GalaxyCluster->getCluster($t['Tag']['name']);\n            if (!empty($cluster)) {\n                $tags[$k]['GalaxyCluster'] = $cluster['GalaxyCluster'];\n            }\n        }\n        return $this->RestResponse->viewData($tags, $this->response->type());\n    }\n}\n"], "fixing_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass TagsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 50,\n            'order' => array(\n                    'Tag.name' => 'asc'\n            ),\n            'contain' => array(\n                'EventTag' => array(\n                    'fields' => array('EventTag.event_id')\n                ),\n                'AttributeTag' => array(\n                    'fields' => array('AttributeTag.event_id', 'AttributeTag.attribute_id')\n                ),\n                'FavouriteTag',\n                'Organisation' => array(\n                    'fields' => array('id', 'name')\n                )\n            )\n    );\n\n    public $helpers = array('TextColour');\n\n    public function index($favouritesOnly = false)\n    {\n        $this->loadModel('Attribute');\n        $this->loadModel('Event');\n        $this->loadModel('Taxonomy');\n        if ($this->_isSiteAdmin()) {\n            $this->paginate['contain']['User'] = array('fields' => array('id', 'email'));\n        }\n        $taxonomies = $this->Taxonomy->listTaxonomies(array('full' => false, 'enabled' => true));\n        $taxonomyNamespaces = array();\n        if (!empty($taxonomies)) {\n            foreach ($taxonomies as $taxonomy) {\n                $taxonomyNamespaces[$taxonomy['namespace']] = $taxonomy;\n            }\n        }\n        $taxonomyTags = array();\n        $passedArgsArray = array();\n        $this->Event->recursive = -1;\n        if ($favouritesOnly) {\n            $tag_id_list = $this->Tag->FavouriteTag->find('list', array(\n                    'conditions' => array('FavouriteTag.user_id' => $this->Auth->user('id')),\n                    'fields' => array('FavouriteTag.tag_id')\n            ));\n            if (empty($tag_id_list)) {\n                $tag_id_list = array(-1);\n            }\n            $this->paginate['conditions']['AND']['Tag.id'] = $tag_id_list;\n        }\n        if (isset($this->params['named']['searchall'])) {\n            $passedArgsArray['all'] = $this->params['named']['searchall'];\n        } elseif ($this->request->is('post')) {\n            $validNames = array('filter', 'searchall', 'name', 'search');\n            foreach ($validNames as $vn) {\n                if (!empty($this->request->data[$vn])) {\n                    $passedArgsArray['all'] = $this->request->data[$vn];\n                    continue;\n                }\n            }\n        }\n        if (!empty($passedArgsArray['all'])) {\n            $this->paginate['conditions']['AND']['LOWER(Tag.name) LIKE'] = '%' . strtolower($passedArgsArray['all']) . '%';\n        }\n        if ($this->_isRest()) {\n            unset($this->paginate['limit']);\n            unset($this->paginate['contain']['EventTag']);\n            unset($this->paginate['contain']['AttributeTag']);\n            $paginated = $this->Tag->find('all', $this->paginate);\n        } else {\n            $paginated = $this->paginate();\n        }\n        $tagList = array();\n        $csv = array();\n        $sgs = $this->Tag->EventTag->Event->SharingGroup->fetchAllAuthorised($this->Auth->user());\n        foreach ($paginated as $k => $tag) {\n            $tagList[] = $tag['Tag']['id'];\n            $paginated[$k]['Tag']['count'] = $this->Tag->EventTag->countForTag($tag['Tag']['id'], $this->Auth->user(), $sgs);\n            if (!$this->_isRest()) {\n                $paginated[$k]['event_ids'] = array();\n                $paginated[$k]['attribute_ids'] = array();\n                foreach ($paginated[$k]['EventTag'] as $et) {\n                    $paginated[$k]['event_ids'][] = $et['event_id'];\n                }\n                unset($paginated[$k]['EventTag']);\n                foreach ($paginated[$k]['AttributeTag'] as $at) {\n                    $paginated[$k]['attribute_ids'][] = $at['attribute_id'];\n                }\n                unset($paginated[$k]['AttributeTag']);\n            }\n            $paginated[$k]['Tag']['attribute_count'] = $this->Tag->AttributeTag->countForTag($tag['Tag']['id'], $this->Auth->user(), $sgs);\n            if (!empty($tag['FavouriteTag'])) {\n                foreach ($tag['FavouriteTag'] as $ft) {\n                    if ($ft['user_id'] == $this->Auth->user('id')) {\n                        $paginated[$k]['Tag']['favourite'] = true;\n                    }\n                }\n                if (!isset($paginated[$k]['Tag']['favourite'])) {\n                    $paginated[$k]['Tag']['favourite'] = false;\n                }\n            } else {\n                $paginated[$k]['Tag']['favourite'] = false;\n            }\n            unset($paginated[$k]['FavouriteTag']);\n            if (!empty($taxonomyNamespaces)) {\n                $taxonomyNamespaceArrayKeys = array_keys($taxonomyNamespaces);\n                foreach ($taxonomyNamespaceArrayKeys as $tns) {\n                    if (substr(strtoupper($tag['Tag']['name']), 0, strlen($tns)) === strtoupper($tns)) {\n                        $paginated[$k]['Tag']['Taxonomy'] = $taxonomyNamespaces[$tns];\n                        if (!isset($taxonomyTags[$tns])) {\n                            $taxonomyTags[$tns] = $this->Taxonomy->getTaxonomyTags($taxonomyNamespaces[$tns]['id'], true);\n                        }\n                        $paginated[$k]['Tag']['Taxonomy']['expanded'] = isset($taxonomyTags[$tns][strtoupper($tag['Tag']['name'])]) ? $taxonomyTags[$tns][strtoupper($tag['Tag']['name'])] : $tag['Tag']['name'];\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->loadModel('Sighting');\n            $sightings['event'] = $this->Sighting->getSightingsForObjectIds($this->Auth->user(), $tagList);\n            $sightings['attribute'] = $this->Sighting->getSightingsForObjectIds($this->Auth->user(), $tagList, 'attribute');\n            foreach ($paginated as $k => $tag) {\n                $objects = array('event', 'attribute');\n                foreach ($objects as $object) {\n                    foreach ($tag[$object . '_ids'] as $objectid) {\n                        if (isset($sightings[$object][$objectid])) {\n                            foreach ($sightings[$object][$objectid] as $date => $sightingCount) {\n                                if (!isset($tag['sightings'][$date])) {\n                                    $tag['sightings'][$date] = $sightingCount;\n                                } else {\n                                    $tag['sightings'][$date] += $sightingCount;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!empty($tag['sightings'])) {\n                    $startDate = !empty($tag['sightings']) ? min(array_keys($tag['sightings'])) : date('Y-m-d');\n                    $startDate = date('Y-m-d', strtotime(\"-3 days\", strtotime($startDate)));\n                    $to = date('Y-m-d', time());\n                    for ($date = $startDate; strtotime($date) <= strtotime($to); $date = date('Y-m-d', strtotime(\"+1 day\", strtotime($date)))) {\n                        if (!isset($csv[$k])) {\n                            $csv[$k] = 'Date,Close\\n';\n                        }\n                        if (isset($tag['sightings'][$date])) {\n                            $csv[$k] .= $date . ',' . $tag['sightings'][$date] . '\\n';\n                        } else {\n                            $csv[$k] .= $date . ',0\\n';\n                        }\n                    }\n                }\n                unset($paginated[$k]['event_ids']);\n            }\n        }\n        if ($this->_isRest()) {\n            foreach ($paginated as $key => $tag) {\n                $paginated[$key] = $tag['Tag'];\n            }\n            $this->set('Tag', $paginated);\n            $this->set('_serialize', array('Tag'));\n        } else {\n            $this->set('passedArgs', json_encode($this->passedArgs));\n            $this->set('passedArgsArray', $passedArgsArray);\n            $this->set('csv', $csv);\n            $this->set('list', $paginated);\n            $this->set('favouritesOnly', $favouritesOnly);\n        }\n        // send perm_tagger to view for action buttons\n    }\n\n    public function add()\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tag_editor']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['Tag'])) {\n                $this->request->data = array('Tag' => $this->request->data);\n            }\n            if (isset($this->request->data['Tag']['request'])) {\n                $this->request->data['Tag'] = $this->request->data['Tag']['request'];\n            }\n            if (!isset($this->request->data['Tag']['colour'])) {\n                $this->request->data['Tag']['colour'] = $this->Tag->random_color();\n            }\n            if (isset($this->request->data['Tag']['id'])) {\n                unset($this->request->data['Tag']['id']);\n            }\n            if ($this->_isRest()) {\n                $tag = $this->Tag->find('first', array(\n                    'conditions' => array(\n                        'Tag.name' => $this->request->data['Tag']['name']\n                    ),\n                    'recursive' => -1\n                ));\n                if (!empty($tag)) {\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n            }\n            if ($this->Tag->save($this->request->data)) {\n                if ($this->_isRest()) {\n                    $tag = $this->Tag->find('first', array(\n                        'conditions' => array(\n                            'Tag.id' => $this->Tag->id\n                        ),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n                $this->Flash->success('The tag has been saved.');\n                $this->redirect(array('action' => 'index'));\n            } else {\n                if ($this->_isRest()) {\n                    $error_message = '';\n                    foreach ($this->Tag->validationErrors as $k => $v) {\n                        $error_message .= '[' . $k . ']: ' . $v[0];\n                    }\n                    throw new MethodNotAllowedException('Could not add the Tag. ' . $error_message);\n                } else {\n                    $this->Flash->error('The tag could not be saved. Please, try again.');\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Tag', 'add', false, $this->response->type());\n        }\n        $this->loadModel('Organisation');\n        $temp = $this->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'fields' => array('id', 'name'),\n            'recursive' => -1\n        ));\n        $orgs = array(0 => 'Unrestricted');\n        if (!empty($temp)) {\n            foreach ($temp as $org) {\n                $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n            }\n        }\n        $this->set('orgs', $orgs);\n        $users = array(0 => 'Unrestricted');\n        if ($this->_isSiteAdmin()) {\n            $temp = $this->Organisation->User->find('all', array(\n                'conditions' => array('disabled' => 0),\n                'fields' => array('id', 'email'),\n                'recursive' => -1\n            ));\n            if (!empty($temp)) {\n                foreach ($temp as $user) {\n                    $users[$user['User']['id']] = $user['User']['email'];\n                }\n            }\n            $this->set('users', $users);\n        }\n    }\n\n    public function quickAdd()\n    {\n        if ((!$this->_isSiteAdmin() && !$this->userRole['perm_tag_editor']) || !$this->request->is('post')) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if (isset($this->request->data['Tag']['request'])) {\n            $this->request->data['Tag'] = $this->request->data['Tag']['request'];\n        }\n        if ($this->Tag->quickAdd($this->request->data['Tag']['name'])) {\n            $this->Flash->success('The tag has been saved.');\n        } else {\n            $this->Flash->error('The tag could not be saved. Please, try again.');\n        }\n        $this->redirect($this->referer());\n    }\n\n    public function edit($id = false)\n    {\n        if ($id === false && (!$this->_isRest() || !$this->request->is('get'))) {\n            throw new NotFoundException('No ID set.');\n        } elseif (!empty($id)) {\n            $this->Tag->id = $id;\n            if (!$this->Tag->exists()) {\n                throw new NotFoundException('Invalid tag');\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['Tag'])) {\n                $this->request->data = array('Tag' => $this->request->data);\n            }\n            $this->request->data['Tag']['id'] = $id;\n            if ($this->Tag->save($this->request->data)) {\n                if ($this->_isRest()) {\n                    $tag = $this->Tag->find('first', array(\n                        'conditions' => array(\n                            'Tag.id' => $id\n                        ),\n                        'recursive' => -1\n                    ));\n                    return $this->RestResponse->viewData($tag, $this->response->type());\n                }\n                $this->Flash->success('The Tag has been edited');\n                $this->redirect(array('action' => 'index'));\n            } else {\n                if ($this->_isRest()) {\n                    $error_message = '';\n                    foreach ($this->Tag->validationErrors as $k => $v) {\n                        $error_message .= '[' . $k . ']: ' . $v[0];\n                    }\n                    throw new MethodNotAllowedException('Could not add the Tag. ' . $error_message);\n                }\n                $this->Flash->error('The Tag could not be saved. Please, try again.');\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Tag', 'edit', false, $this->response->type());\n        }\n        $this->loadModel('Organisation');\n        $temp = $this->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'fields' => array('id', 'name'),\n            'recursive' => -1\n        ));\n        $orgs = array(0 => 'Unrestricted');\n        if (!empty($temp)) {\n            foreach ($temp as $org) {\n                $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n            }\n        }\n        $this->set('orgs', $orgs);\n        $users = array(0 => 'Unrestricted');\n        if ($this->_isSiteAdmin()) {\n            $temp = $this->Organisation->User->find('all', array(\n                'conditions' => array('disabled' => 0),\n                'fields' => array('id', 'email'),\n                'recursive' => -1\n            ));\n            if (!empty($temp)) {\n                foreach ($temp as $user) {\n                    $users[$user['User']['id']] = $user['User']['email'];\n                }\n            }\n            $this->set('users', $users);\n        }\n        $this->request->data = $this->Tag->read(null, $id);\n    }\n\n    public function delete($id)\n    {\n        if (!$this->_isSiteAdmin()) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException();\n        }\n        $this->Tag->id = $id;\n        if (!$this->Tag->exists()) {\n            throw new NotFoundException('Invalid tag');\n        }\n        if ($this->Tag->delete()) {\n            if ($this->_isRest()) {\n                $this->set('name', 'Tag deleted.');\n                $this->set('message', 'Tag deleted.');\n                $this->set('url', '/tags/delete/' . $id);\n                $this->set('_serialize', array('name', 'message', 'url'));\n            }\n            $this->Flash->success(__('Tag deleted'));\n        } else {\n            if ($this->_isRest()) {\n                throw new MethodNotAllowedException('Could not delete the tag, or tag doesn\\'t exist.');\n            }\n            $this->Flash->error(__('Tag was not deleted'));\n        }\n        if (!$this->_isRest()) {\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function view($id)\n    {\n        if ($this->_isRest()) {\n            $contain = array('EventTag' => array('fields' => 'event_id'));\n            $contain['AttributeTag'] = array('fields' => 'attribute_id');\n            $tag = $this->Tag->find('first', array(\n                    'conditions' => array('id' => $id),\n                    'recursive' => -1,\n                    'contain' => $contain\n            ));\n            if (empty($tag)) {\n                throw new MethodNotAllowedException('Invalid Tag');\n            }\n            if (empty($tag['EventTag'])) {\n                $tag['Tag']['count'] = 0;\n            } else {\n                $eventIDs = array();\n                foreach ($tag['EventTag'] as $eventTag) {\n                    $eventIDs[] = $eventTag['event_id'];\n                }\n                $conditions = array('Event.id' => $eventIDs);\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array_merge(\n                        $conditions,\n                        array('OR' => array(\n                                array('AND' => array(\n                                        array('Event.distribution >' => 0),\n                                        array('Event.published =' => 1)\n                                )),\n                                array('Event.orgc_id' => $this->Auth->user('org_id'))\n                        ))\n                );\n                }\n                $events = $this->Tag->EventTag->Event->find('all', array(\n                        'fields' => array('Event.id', 'Event.distribution', 'Event.orgc_id'),\n                        'conditions' => $conditions\n                ));\n                $tag['Tag']['count'] = count($events);\n            }\n            unset($tag['EventTag']);\n            if (empty($tag['AttributeTag'])) {\n                $tag['Tag']['attribute_count'] = 0;\n            } else {\n                $attributeIDs = array();\n                foreach ($tag['AttributeTag'] as $attributeTag) {\n                    $attributeIDs[] = $attributeTag['attribute_id'];\n                }\n                $conditions = array('Attribute.id' => $attributeIDs);\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array_merge(\n                        $conditions,\n                        array('OR' => array(\n                            array('AND' => array(\n                                array('Attribute.deleted =' => 0),\n                                array('Attribute.distribution >' => 0),\n                                array('Event.distribution >' => 0),\n                                array('Event.published =' => 1)\n                            )),\n                            array('Event.orgc_id' => $this->Auth->user('org_id'))\n                        ))\n                    );\n                }\n                $attributes = $this->Tag->AttributeTag->Attribute->find('all', array(\n                    'fields'     => array('Attribute.id', 'Attribute.deleted', 'Attribute.distribution', 'Event.id', 'Event.distribution', 'Event.orgc_id'),\n                    'contain'    => array('Event' => array('fields' => array('id', 'distribution', 'orgc_id'))),\n                    'conditions' => $conditions\n                ));\n                $tag['Tag']['attribute_count'] = count($attributes);\n            }\n            unset($tag['AttributeTag']);\n            $this->set('Tag', $tag['Tag']);\n            $this->set('_serialize', 'Tag');\n        } else {\n            throw new MethodNotAllowedException('This action is only for REST users.');\n        }\n    }\n\n    public function showEventTag($id)\n    {\n        $this->loadModel('EventTag');\n        $this->loadModel('Taxonomy');\n        if (!$this->EventTag->Event->checkIfAuthorised($this->Auth->user(), $id)) {\n            throw new MethodNotAllowedException('Invalid event.');\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array(\n            'fields' => array('GalaxyCluster.tag_name'),\n            'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name')\n        ));\n        $this->helpers[] = 'TextColour';\n        $conditions = array(\n                'event_id' => $id,\n                'Tag.name !=' => $cluster_names\n        );\n        $tags = $this->EventTag->find('all', array(\n                'conditions' => $conditions,\n                'contain' => array('Tag'),\n                'fields' => array('Tag.id', 'Tag.colour', 'Tag.name', 'EventTag.local'),\n        ));\n        foreach ($tags as $k => $tag) {\n            $tags[$k]['local'] = $tag['EventTag']['local'];\n        }\n        $this->set('tags', $tags);\n        $event = $this->Tag->EventTag->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n                'conditions' => array('Event.id' => $id)\n        ));\n        $this->set('required_taxonomies', $this->EventTag->Event->getRequiredTaxonomies());\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($tags);\n        $this->set('tagConflicts', $tagConflicts);\n        $this->set('event', $event);\n        $this->layout = 'ajax';\n        $this->render('/Events/ajax/ajaxTags');\n    }\n\n    public function showAttributeTag($id)\n    {\n        $this->helpers[] = 'TextColour';\n        $this->loadModel('AttributeTag');\n        $this->loadModel('Taxonomy');\n\n        $this->Tag->AttributeTag->Attribute->id = $id;\n        if (!$this->Tag->AttributeTag->Attribute->exists()) {\n            throw new NotFoundException(__('Invalid attribute'));\n        }\n        $this->Tag->AttributeTag->Attribute->read();\n        $eventId = $this->Tag->AttributeTag->Attribute->data['Attribute']['event_id'];\n\n        $conditions = array('attribute_id' => $id);\n        $attributeTags = $this->AttributeTag->find('all', array(\n            'conditions' => $conditions,\n            'contain' => array('Tag'),\n            'fields' => array('Tag.id', 'Tag.colour', 'Tag.name', 'AttributeTag.local'),\n        ));\n        foreach ($attributeTags as $k => $at) {\n            $attributeTags[$k]['local'] = $at['AttributeTag']['local'];\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array('fields' => array('GalaxyCluster.tag_name'), 'group' => array('GalaxyCluster.tag_name', 'GalaxyCluster.id')));\n        foreach ($attributeTags as $k => $attributeTag) {\n            if (in_array($attributeTag['Tag']['name'], $cluster_names)) {\n                unset($attributeTags[$k]);\n            }\n        }\n        $event = $this->Tag->AttributeTag->Attribute->Event->find('first', array(\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n            'conditions' => array('Event.id' => $eventId)\n        ));\n        $this->set('event', $event);\n        $this->set('attributeTags', $attributeTags);\n        $this->set('attributeId', $id);\n        $tagConflicts = $this->Taxonomy->checkIfTagInconsistencies($attributeTags);\n        $this->set('tagConflicts', $tagConflicts);\n        $this->layout = 'ajax';\n        $this->render('/Attributes/ajax/ajaxAttributeTags');\n    }\n\n    public function showTagControllerTag($id)\n    {\n        $this->loadModel('TagCollection');\n        $tagCollection = $this->TagCollection->find('first', array(\n            'recursive' => -1,\n            'contain' => array('TagCollection'),\n            'conditions' => array('TagCollection.id' => $id)\n        ));\n        if (empty($tagCollection) || (!$this->_isSiteAdmin() && $tagCollection['org_id'] !== $this->Auth->user('org_id'))) {\n            throw new MethodNotAllowedException('Invalid tag_collection.');\n        }\n        $this->loadModel('GalaxyCluster');\n        $cluster_names = $this->GalaxyCluster->find('list', array('fields' => array('GalaxyCluster.tag_name'), 'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name')));\n        $this->helpers[] = 'TextColour';\n        $tags = $this->TagCollection->TagCollectionTag->find('all', array(\n                'conditions' => array(\n                        'tag_collection_id' => $id,\n                        'Tag.name !=' => $cluster_names\n                ),\n                'contain' => array('Tag'),\n                'fields' => array('Tag.id', 'Tag.colour', 'Tag.name'),\n        ));\n        $this->set('tags', $tags);\n        $event = $this->Tag->EventTag->Event->find('first', array(\n                'recursive' => -1,\n                'fields' => array('Event.id', 'Event.orgc_id', 'Event.org_id', 'Event.user_id'),\n                'conditions' => array('Event.id' => $id)\n        ));\n        $this->set('event', $event);\n        $this->layout = 'ajax';\n        $this->render('/Events/ajax/ajaxTags');\n    }\n\n    public function viewTag($id)\n    {\n        $tag = $this->Tag->find('first', array(\n                'conditions' => array(\n                        'id' => $id\n                ),\n                'recursive' => -1,\n        ));\n        $this->layout = null;\n        $this->set('tag', $tag);\n        $this->set('id', $id);\n        $this->render('ajax/view_tag');\n    }\n\n\n    public function selectTaxonomy($id, $scope = 'event')\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tagger']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        $localFlag = !empty($this->params['named']['local']) ? '/local:1' : '';\n        $items = array();\n        $favourites = $this->Tag->FavouriteTag->find('count', array('conditions' => array('FavouriteTag.user_id' => $this->Auth->user('id'))));\n        if ($favourites) {\n            $items[] = array(\n                'name' => __('Favourite Tags'),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/favourites/\" . h($scope) . $localFlag\n            );\n        }\n        if ($scope !== 'tag_collection') {\n            $items[] = array(\n                'name' => __('Tag Collections'),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/collections/\" . h($scope) . $localFlag\n            );\n        }\n        $items[] = array(\n            'name' => __('Custom Tags'),\n            'value' => \"/tags/selectTag/\" . h($id) . \"/0/\" . h($scope) . $localFlag\n        );\n        $items[] = array(\n            'name' => __('All Tags'),\n            'value' => \"/tags/selectTag/\" . h($id) . \"/all/\" . h($scope) . $localFlag\n        );\n\n        $this->loadModel('Taxonomy');\n        $options = $this->Taxonomy->find('list', array('conditions' => array('enabled' => true), 'fields' => array('namespace'), 'order' => array('Taxonomy.namespace ASC')));\n        foreach ($options as $k => $option) {\n            $items[] = array(\n                'name' => __('Taxonomy Library') . \":\" . h($option),\n                'value' => \"/tags/selectTag/\" . h($id) . \"/\" . h($k) . \"/\" . h($scope . $localFlag)\n            );\n        }\n        $this->set('items', $items);\n        $this->set('options', array( // set chosen (select picker) options\n            'select_options' => array(\n                'multiple' => 0,\n            )\n        ));\n        $this->render('/Elements/generic_picker');\n    }\n\n    public function selectTag($id, $taxonomy_id, $scope = 'event', $filterData = '')\n    {\n        if (!$this->_isSiteAdmin() && !$this->userRole['perm_tagger']) {\n            throw new NotFoundException('You don\\'t have permission to do that.');\n        }\n        $this->loadModel('Taxonomy');\n        $expanded = array();\n        $banned_tags = $this->Tag->find('list', array(\n                'conditions' => array(\n                        'NOT' => array(\n                                'Tag.org_id' => array(\n                                        0,\n                                        $this->Auth->user('org_id')\n                                ),\n                                'Tag.user_id' => array(\n                                        0,\n                                        $this->Auth->user('id')\n                                )\n                        )\n                ),\n                'fields' => array('Tag.id')\n        ));\n        $this->set('taxonomy_id', $taxonomy_id);\n        if ($taxonomy_id === 'collections') {\n            $this->loadModel('TagCollection');\n            $tagCollections = $this->TagCollection->fetchTagCollection($this->Auth->user());\n            $tags = array();\n            $inludedTagListString = array();\n            $expanded = array();\n            foreach ($tagCollections as &$tagCollection) {\n                $tags[$tagCollection['TagCollection']['id']] = $tagCollection['TagCollection'];\n                $expanded[$tagCollection['TagCollection']['id']] = empty($tagCollection['TagCollection']['description']) ? $tagCollection['TagCollection']['name'] : $tagCollection['TagCollection']['description'];\n                if (!empty($tagCollection['TagCollectionTag'])) {\n                    $tagList = array();\n                    foreach ($tagCollection['TagCollectionTag'] as $k => $tce) {\n                        if (in_array($tce['tag_id'], $banned_tags)) {\n                            unset($tagCollection['TagCollectionTag'][$k]);\n                        } else {\n                            $tagList[] = $tce['Tag']['name'];\n                        }\n                        $tagCollection['TagCollectionTag'] = array_values($tagCollection['TagCollectionTag']);\n                    }\n                    $tagList = implode(', ', $tagList);\n                    $inludedTagListString[$tagCollection['TagCollection']['id']] = $tagList;\n                    $expanded[$tagCollection['TagCollection']['id']] .= sprintf(' (%s)', $tagList);\n                }\n            }\n        } else {\n            if ($taxonomy_id === '0') {\n                $temp = $this->Taxonomy->getAllTaxonomyTags(true, false, true);\n                $tags = array();\n                foreach ($temp as $tag) {\n                    $tags[$tag['Tag']['id']] = $tag['Tag'];\n                }\n                unset($temp);\n                $expanded = $tags;\n            } elseif ($taxonomy_id === 'favourites') {\n                $tags = array();\n                $conditions = array('FavouriteTag.user_id' => $this->Auth->user('id'));\n                $favTags = $this->Tag->FavouriteTag->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'contain' => array('Tag'),\n                    'order' => array('Tag.name asc')\n                ));\n                foreach ($favTags as $favTag) {\n                    $tags[$favTag['FavouriteTag']['tag_id']] = $favTag['Tag'];\n                    $expanded = $tags;\n                }\n            } elseif ($taxonomy_id === 'all') {\n                if (!$this->_isSiteAdmin()) {\n                    $conditions = array('Tag.org_id' => array(0, $this->Auth->user('org_id')));\n                    $conditions = array('Tag.user_id' => array(0, $this->Auth->user('id')));\n                }\n                $conditions['Tag.hide_tag'] = 0;\n                $allTags = $this->Tag->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'order' => array('name asc'),\n                    'fields' => array('Tag.id', 'Tag.name', 'Tag.colour')\n                ));\n                $tags = array();\n                foreach ($allTags as $k => $tag) {\n                    $temp = explode(':', $tag['Tag']['name']);\n                    if (count($temp) > 1) {\n                        if ($temp[0] !== 'misp-galaxy') {\n                            $tags[$tag['Tag']['id']] = $tag['Tag'];\n                        }\n                    } else {\n                        $tags[$tag['Tag']['id']] = $tag['Tag'];\n                    }\n                }\n                unset($allTags);\n                $expanded = $tags;\n            } else {\n                $taxonomies = $this->Taxonomy->getTaxonomy($taxonomy_id);\n                $tags = array();\n                if (!empty($taxonomies['entries'])) {\n                    foreach ($taxonomies['entries'] as $entry) {\n                        if (!empty($entry['existing_tag']['Tag'])) {\n                            $tags[$entry['existing_tag']['Tag']['id']] = $entry['existing_tag']['Tag'];\n                            $expanded[$entry['existing_tag']['Tag']['id']] = $entry['expanded'];\n                        }\n                    }\n                }\n            }\n            // Unset all tags that this user cannot use for tagging, determined by the org restriction on tags\n            if (!$this->_isSiteAdmin()) {\n                foreach ($banned_tags as $banned_tag) {\n                    unset($tags[$banned_tag]);\n                    unset($expanded[$banned_tag]);\n                }\n            }\n            $hidden_tags = $this->Tag->find('list', array(\n                    'conditions' => array('Tag.hide_tag' => 1),\n                    'fields' => array('Tag.id')\n            ));\n            foreach ($hidden_tags as $hidden_tag) {\n                unset($tags[$hidden_tag]);\n                unset($expanded[$hidden_tag]);\n            }\n        }\n\n        $this->set('scope', $scope);\n        $this->set('object_id', $id);\n\n        if ($scope === 'attribute') {\n            $onClickForm = 'quickSubmitAttributeTagForm';\n        } elseif ($scope === 'tag_collection') {\n            $onClickForm = 'quickSubmitTagCollectionTagForm';\n        } else {\n            $onClickForm = 'quickSubmitTagForm';\n        }\n        $items = array();\n        foreach ($tags as $k => $tag) {\n            $tagName = $tag['name'];\n            $choice_id = $k;\n            if ($taxonomy_id === 'collections') {\n                $choice_id = 'collection_' . $choice_id;\n            }\n\n            $itemParam = array(\n                'name' => $tagName,\n                'value' => $choice_id,\n                'template' => array(\n                    'name' => array(\n                        'name' => $tagName,\n                        'label' => array(\n                            'background' => isset($tag['colour']) ? $tag['colour'] : '#ffffff'\n                        )\n                    ),\n                    'infoExtra' => $expanded[$tag['id']]\n                )\n            );\n            if ($taxonomy_id === 'collections') {\n                $itemParam['template']['infoContextual'] = __('Includes: ') . $inludedTagListString[$tag['id']];\n            }\n            $items[] = $itemParam;\n        }\n        $this->set('items', $items);\n        $this->set('options', array( // set chosen (select picker) options\n            'functionName' => $onClickForm,\n            'multiple' => -1,\n            'select_options' => array(\n                'additionalData' => array(\n                    'id' => $id,\n                    'local' => !empty($this->params['named']['local'])\n                ),\n            ),\n        ));\n        $this->set('local', !empty($this->params['named']['local']));\n        $this->render('ajax/select_tag');\n    }\n\n    public function tagStatistics($percentage = false, $keysort = false)\n    {\n        $result = $this->Tag->EventTag->find('all', array(\n                'recursive' => -1,\n                'fields' => array('count(EventTag.id) as count', 'tag_id'),\n                'contain' => array('Tag' => array('fields' => array('Tag.name'))),\n                'group' => array('tag_id')\n        ));\n        $tags = array();\n        $taxonomies = array();\n        $totalCount = 0;\n        $this->loadModel('Taxonomy');\n        $temp = $this->Taxonomy->listTaxonomies(array('enabled' => true));\n        foreach ($temp as $t) {\n            if ($t['enabled']) {\n                $taxonomies[$t['namespace']] = 0;\n            }\n        }\n        foreach ($result as $r) {\n            if ($r['Tag']['name'] == null) {\n                continue;\n            }\n            $tags[$r['Tag']['name']] = $r[0]['count'];\n            $totalCount += $r[0]['count'];\n            foreach ($taxonomies as $taxonomy => $count) {\n                if (substr(strtolower($r['Tag']['name']), 0, strlen($taxonomy)) === strtolower($taxonomy)) {\n                    $taxonomies[$taxonomy] += $r[0]['count'];\n                }\n            }\n        }\n        if ($keysort === 'true') {\n            ksort($tags, SORT_NATURAL | SORT_FLAG_CASE);\n            ksort($taxonomies, SORT_NATURAL | SORT_FLAG_CASE);\n        } else {\n            arsort($tags);\n            arsort($taxonomies);\n        }\n        if ($percentage === 'true') {\n            foreach ($tags as $tag => $count) {\n                $tags[$tag] = round(100 * $count / $totalCount, 3) . '%';\n            }\n            foreach ($taxonomies as $taxonomy => $count) {\n                $taxonomies[$taxonomy] = round(100 * $count / $totalCount, 3) . '%';\n            }\n        }\n        $results = array('tags' => $tags, 'taxonomies' => $taxonomies);\n        $this->autoRender = false;\n        $this->layout = false;\n        $this->set('data', $results);\n        $this->set('flags', JSON_PRETTY_PRINT);\n        $this->response->type('json');\n        $this->render('/Servers/json/simple');\n    }\n\n    private function __findObjectByUuid($object_uuid, &$type, $scope = 'modify')\n    {\n        $this->loadModel('Event');\n        if (!$this->userRole['perm_tagger']) {\n            throw new MethodNotAllowedException(__('This functionality requires tagging permission.'));\n        }\n        $object = $this->Event->fetchEvent($this->Auth->user(), array(\n            'event_uuid' => $object_uuid,\n            'metadata' => 1\n        ));\n        $type = 'Event';\n        if (!empty($object)) {\n            $object = $object[0];\n            if (\n                $scope !== 'view' &&\n                !$this->_isSiteAdmin() &&\n                !$object['Event']['orgc_id'] != $this->Auth->user('org_id')\n            ) {\n                throw new MethodNotAllowedException(__('Invalid Target.'));\n            }\n        } else {\n            $type = 'Attribute';\n            $object = $this->Event->Attribute->fetchAttributes(\n                $this->Auth->user(),\n                array(\n                    'conditions' => array(\n                        'Attribute.uuid' => $object_uuid\n                    ),\n                    'flatten' => 1\n                )\n            );\n            if (!empty($object)) {\n                $object = $object[0];\n                if (\n                    $scope !== 'view' &&\n                    !$this->_isSiteAdmin() &&\n                    !$object['Event']['orgc_id'] != $this->Auth->user('org_id')\n                ) {\n                    throw new MethodNotAllowedException(__('Invalid Target.'));\n                }\n            } else {\n                throw new MethodNotAllowedException(__('Invalid Target.'));\n            }\n        }\n        return $object;\n    }\n\n    public function attachTagToObject($uuid = false, $tag = false, $local = false)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This method is only accessible via POST requests.');\n        }\n        if (empty($uuid)) {\n            if (!empty($this->request->data['uuid'])) {\n                $uuid = $this->request->data['uuid'];\n            } else {\n                throw new MethodNotAllowedException('Invalid object uuid');\n            }\n        }\n        if (!Validation::uuid($uuid)) {\n            throw new InvalidArgumentException('Invalid UUID');\n        }\n        if (empty($tag)) {\n            if (!empty($this->request->data['tag'])) {\n                $tag = $this->request->data['tag'];\n            } else {\n                throw new MethodNotAllowedException('Invalid tag');\n            }\n        }\n        if (is_numeric($tag)) {\n            $conditions = array('Tag.id' => $tag);\n        } else {\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag)));\n        }\n        if (empty($local)) {\n            if (!empty($this->request->data['local'])) {\n                $local = $this->request->data['local'];\n            }\n        }\n        if (!empty($local) && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {\n            throw new MethodNotAllowedException(__('Local tags can only be added by users of the host organisation.'));\n        }\n        $objectType = '';\n        $object = $this->__findObjectByUuid($uuid, $objectType, $local ? 'view' : 'modify');\n        $existingTag = $this->Tag->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($existingTag)) {\n            if (!is_numeric($tag)) {\n                if (!$this->userRole['perm_tag_editor']) {\n                    throw new MethodNotAllowedException('Tag not found and insufficient privileges to create it.');\n                }\n                $this->Tag->create();\n                $result = $this->Tag->save(array('Tag' => array('name' => $tag, 'colour' => $this->Tag->random_color())));\n                if (!$result) {\n                    return $this->RestResponse->saveFailResponse('Tags', 'attachTagToObject', false, __('Unable to create tag. Reason: ' . json_encode($this->Tag->validationErrors)), $this->response->type());\n                }\n                $existingTag = $this->Tag->find('first', array('recursive' => -1, 'conditions' => array('Tag.id' => $this->Tag->id)));\n            } else {\n                throw new NotFoundException('Invalid Tag.');\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            if (!in_array($existingTag['Tag']['org_id'], array(0, $this->Auth->user('org_id')))) {\n                throw new MethodNotAllowedException('Invalid Tag. This tag can only be set by a fixed organisation.');\n            }\n            if (!in_array($existingTag['Tag']['user_id'], array(0, $this->Auth->user('id')))) {\n                throw new MethodNotAllowedException('Invalid Tag. This tag can only be set by a fixed user.');\n            }\n        }\n        $this->loadModel($objectType);\n        $connectorObject = $objectType . 'Tag';\n        $conditions = array(\n            strtolower($objectType) . '_id' => $object[$objectType]['id'],\n            'tag_id' => $existingTag['Tag']['id'],\n            'local' => ($local ? 1 : 0)\n        );\n        $existingAssociation = $this->$objectType->$connectorObject->find('first', array(\n            'conditions' => $conditions\n        ));\n        if (!empty($existingAssociation)) {\n            return $this->RestResponse->saveSuccessResponse('Tags', 'attachTagToObject', false, $this->response->type(), $objectType . ' already has the requested tag attached, no changes had to be made.');\n        }\n        $this->$objectType->$connectorObject->create();\n        $data = array(\n            $connectorObject => $conditions\n        );\n        if ($objectType == 'Attribute') {\n            $data[$connectorObject]['event_id'] = $object['Event']['id'];\n        }\n        $result = $this->$objectType->$connectorObject->save($data);\n        if ($result) {\n            $tempObject = $this->$objectType->find('first', array(\n                'recursive' => -1,\n                'conditions' => array($objectType . '.id' => $object[$objectType]['id'])\n            ));\n            $date = new DateTime();\n            $tempObject[$objectType]['timestamp'] = $date->getTimestamp();\n            $this->$objectType->save($tempObject);\n            if($local) {\n                $message = 'Local tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully attached to ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            } else {\n                if ($objectType === 'Attribute') {\n                    $this->$objectType->Event->unpublishEvent($object['Event']['id']);\n                } else if ($objectType === 'Event') {\n                    $this->Event->unpublishEvent($object['Event']['id']);\n                }\n                $message = 'Global tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully attached to ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            }\n            return $this->RestResponse->saveSuccessResponse('Tags', 'attachTagToObject', false, $this->response->type(), $message);\n        } else {\n            return $this->RestResponse->saveFailResponse('Tags', 'attachTagToObject', false, 'Failed to attach tag to object.', $this->response->type());\n        }\n    }\n\n    public function removeTagFromObject($uuid = false, $tag = false)\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This method is only accessible via POST requests.');\n        }\n        if (empty($uuid)) {\n            if (!empty($this->request->data['uuid'])) {\n                $uuid = $this->request->data['uuid'];\n            } else {\n                throw new MethodNotAllowedException('Invalid object uuid');\n            }\n        }\n        if (!Validation::uuid($uuid)) {\n            throw new InvalidArgumentException('Invalid UUID');\n        }\n        if (empty($tag)) {\n            if (!empty($this->request->data['tag'])) {\n                $tag = $this->request->data['tag'];\n            } else {\n                throw new MethodNotAllowedException('Invalid tag');\n            }\n        }\n        if (is_numeric($tag)) {\n            $conditions = array('Tag.id' => $tag);\n        } else {\n            $conditions = array('LOWER(Tag.name) LIKE' => strtolower(trim($tag)));\n        }\n        $existingTag = $this->Tag->find('first', array('conditions' => $conditions, 'recursive' => -1));\n        if (empty($existingTag)) {\n            throw new MethodNotAllowedException('Invalid Tag.');\n        }\n        $objectType = '';\n        $object = $this->__findObjectByUuid($uuid, $objectType, 'view');\n        if (empty($object)) {\n            throw new MethodNotAllowedException(__('Invalid Target.'));\n        }\n        $connectorObject = $objectType . 'Tag';\n        $this->loadModel($objectType);\n        $existingAssociation = $this->$objectType->$connectorObject->find('first', array(\n            'conditions' => array(\n                strtolower($objectType) . '_id' => $object[$objectType]['id'],\n                'tag_id' => $existingTag['Tag']['id']\n            )\n        ));\n        if (empty($existingAssociation)) {\n            throw new MethodNotAllowedException('Could not remove tag as it is not attached to the target ' . $objectType);\n        } else {\n            if (empty($existingAssociation[$objectType . 'Tag']['local'])) {\n                $object = $this->__findObjectByUuid($uuid, $objectType);\n            } else {\n                if ($object['Event']['orgc_id'] !== $this->Auth->user('org_id') && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {\n                    throw new MethodNotAllowedException(__('Insufficient privileges to remove local tags from events you do not own.'));\n                }\n            }\n        }\n        $result = $this->$objectType->$connectorObject->delete($existingAssociation[$connectorObject]['id']);\n        if ($result) {\n            $message = 'Tag ' . $existingTag['Tag']['name'] . '(' . $existingTag['Tag']['id'] . ') successfully removed from ' . $objectType . '(' . $object[$objectType]['id'] . ').';\n            return $this->RestResponse->saveSuccessResponse('Tags', 'removeTagFromObject', false, $this->response->type(), $message);\n        } else {\n            return $this->RestResponse->saveFailResponse('Tags', 'removeTagFromObject', false, 'Failed to remove tag from object.', $this->response->type());\n        }\n    }\n\n    public function viewGraph($id)\n    {\n        $tag = $this->Tag->find('first', array(\n            'conditions' => array('Tag.id' => $id),\n            'recursive' => -1\n        ));\n        if (empty($tag)) {\n            throw new MethodNotAllowedException('Invalid Tag.');\n        }\n        $this->loadModel('Taxonomy');\n        $taxonomy = $this->Taxonomy->getTaxonomyForTag($tag['Tag']['name']);\n        if (!empty($taxonomy)) {\n            $this->set('taxonomy', $taxonomy);\n        }\n        $this->set('scope', 'tag');\n        $this->set('id', $id);\n        $this->render('/Events/view_graph');\n    }\n\n    public function search($tag = false)\n    {\n        if (isset($this->request->data['Tag'])) {\n            $this->request->data = $this->request->data['Tag'];\n        }\n        if (!empty($this->request->data['tag'])) {\n            $tag = $this->request->data['tag'];\n        } else if (!empty($this->request->data)) {\n            $tag = $this->request->data;\n        }\n        if (!is_array($tag)) {\n            $tag = array($tag);\n        }\n        $conditions = array();\n        foreach ($tag as $k => $t) {\n            $tag[$k] = strtolower($t);\n            $conditions['OR'][] = array('LOWER(GalaxyCluster.value)' => $tag[$k]);\n        }\n        foreach ($tag as $k => $t) {\n            $conditions['OR'][] = array('AND' => array('GalaxyElement.key' => 'synonyms', 'LOWER(GalaxyElement.value) LIKE' => $t));\n        }\n        $this->loadModel('GalaxyCluster');\n        $elements = $this->GalaxyCluster->GalaxyElement->find('all', array(\n            'recursive' => -1,\n            'conditions' => $conditions,\n            'contain' => array('GalaxyCluster.tag_name')\n        ));\n        foreach ($elements as $element) {\n            $tag[] = strtolower($element['GalaxyCluster']['tag_name']);\n        }\n        $conditions = array();\n        foreach ($tag as $k => $t) {\n            $conditions['OR'][] = array('LOWER(Tag.name) LIKE' => $t);\n        }\n        $tags = $this->Tag->find('all', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $this->loadModel('Taxonomy');\n        foreach ($tags as $k => $t) {\n            $taxonomy = $this->Taxonomy->getTaxonomyForTag($t['Tag']['name'], true);\n            if (!empty($taxonomy)) {\n                $tags[$k]['Taxonomy'] = $taxonomy['Taxonomy'];\n            }\n            $cluster = $this->GalaxyCluster->getCluster($t['Tag']['name']);\n            if (!empty($cluster)) {\n                $tags[$k]['GalaxyCluster'] = $cluster['GalaxyCluster'];\n            }\n        }\n        return $this->RestResponse->viewData($tags, $this->response->type());\n    }\n}\n"], "filenames": ["app/Controller/TagsController.php"], "buggy_code_start_loc": [863], "buggy_code_end_loc": [1054], "fixing_code_start_loc": [863], "fixing_code_end_loc": [1070], "type": "NVD-CWE-noinfo", "message": "In app/Controller/TagsController.php in MISP 2.4.118, users can bypass intended restrictions on tagging data.", "other": {"cve": {"id": "CVE-2019-19379", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-28T17:15:12.867", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In app/Controller/TagsController.php in MISP 2.4.118, users can bypass intended restrictions on tagging data."}, {"lang": "es", "value": "En el archivo app/Controller/TagsController.php en MISP versi\u00f3n 2.4.118, los usuarios pueden omitir las restricciones previstas en los datos de etiquetado."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.118:*:*:*:*:*:*:*", "matchCriteriaId": "CCC504B1-00F8-4578-AFF1-306F9D315A42"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/e05dc512a437284f14624da23cca4a829a76aebf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/e05dc512a437284f14624da23cca4a829a76aebf"}}