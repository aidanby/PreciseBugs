{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\Controller\\Admin;\n\nuse CustomerManagementFrameworkBundle\\SegmentAssignment\\SegmentAssigner\\SegmentAssignerInterface;\nuse CustomerManagementFrameworkBundle\\SegmentManager\\SegmentManagerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Model\\DataObject\\CustomerSegment;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Class SegmentAssignmentController\n *\n * @Route(\"/segment-assignment\")\n *\n * @package CustomerManagementFrameworkBundle\\Controller\\Admin\n */\nclass SegmentAssignmentController extends AdminController\n{\n    public static function getSubscribedServices()\n    {\n        $services = parent::getSubscribedServices();\n        $services[SegmentAssignerInterface::class] = SegmentAssignerInterface::class;\n\n        return $services;\n    }\n\n    /**\n     * @Route(\"/inheritable-segments\")\n     *\n     * @param Request $request\n     * @param SegmentManagerInterface $segmentManager\n     *\n     * @return JsonResponse\n     */\n    public function inheritableSegments(Request $request, SegmentManagerInterface $segmentManager)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n\n        $db = \\Pimcore\\Db::get();\n        $parentIdStatement = sprintf('SELECT `%s` FROM `%s` WHERE `%s` = :value', $type === 'object' ? 'o_parentId' : 'parentId', $type.'s', $type === 'object' ? 'o_id' : 'id');\n        $parentId = $db->fetchOne($parentIdStatement, [\n            'value' => $id\n        ]);\n\n        $segments = $segmentManager->getSegmentsForElementId($parentId, $type);\n        $data = array_map([$this, 'dehydrateSegment'], array_filter($segments));\n\n        return $this->adminJson(['data' => array_values($data)]);\n    }\n\n    /**\n     * returns directly assigned segmentIds for the pimcore backend\n     *\n     * @Route(\"/assigned-segments\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function assignedSegments(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $assignmentTable = $this->getParameter('cmf.segmentAssignment.table.raw');\n        $segmentIds = \\Pimcore\\Db::get()->fetchOne(\"SELECT `segments` FROM $assignmentTable WHERE `elementId` = ? AND `elementType` = ?\", [$id, $type]);\n\n        $data = array_map(function ($id) {\n            $segment = CustomerSegment::getById($id);\n\n            return $this->dehydrateSegment($segment);\n        }, array_filter(explode(',', $segmentIds)));\n\n        return $this->adminJson(['data' => array_values($data)]);\n    }\n\n    /**\n     * saves assignments asynchronously\n     *\n     * @Route(\"/assign\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function assign(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $breaksInheritance = $request->get('breaksInheritance') === 'true';\n        $segmentIds = json_decode($request->get('segmentIds'), true) ?? [];\n        //@TODO inject the service, when BC break allowed\n        $assigner = $this->get(SegmentAssignerInterface::class);\n        $success = $assigner->assignById($id, $type, $breaksInheritance, $segmentIds);\n\n        return $this->adminJson($success);\n    }\n\n    /**\n     * @Route(\"/breaks-inheritance\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function breaksInheritance(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $assignmentTable = $this->getParameter('cmf.segmentAssignment.table.raw');\n\n        $breaksInheritance = \\Pimcore\\Db::get()->fetchOne(\"SELECT `breaksInheritance` FROM $assignmentTable WHERE `elementId` = ? AND `elementType` = ?\", [$id, $type]);\n\n        return $this->adminJson(['breaksInheritance' => $breaksInheritance]);\n    }\n\n    /**\n     * dehydrates a CustomerSegment for display in the pimcore backend\n     *\n     * @param CustomerSegment $segment\n     *\n     * @return array\n     */\n    private function dehydrateSegment($segment): array\n    {\n        if (!($segment instanceof CustomerSegment)) {\n            return [];\n        }\n\n        return [\n            'id' => $segment->getId(),\n            'type' => $segment->getType(),\n            'name' => $segment->getName(),\n        ];\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\Controller\\Admin;\n\nuse CustomerManagementFrameworkBundle\\SegmentAssignment\\SegmentAssigner\\SegmentAssignerInterface;\nuse CustomerManagementFrameworkBundle\\SegmentManager\\SegmentManagerInterface;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Model\\DataObject\\CustomerSegment;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * Class SegmentAssignmentController\n *\n * @Route(\"/segment-assignment\")\n *\n * @package CustomerManagementFrameworkBundle\\Controller\\Admin\n */\nclass SegmentAssignmentController extends AdminController\n{\n    public static function getSubscribedServices()\n    {\n        $services = parent::getSubscribedServices();\n        $services[SegmentAssignerInterface::class] = SegmentAssignerInterface::class;\n\n        return $services;\n    }\n\n    /**\n     * @Route(\"/inheritable-segments\")\n     *\n     * @param Request $request\n     * @param SegmentManagerInterface $segmentManager\n     *\n     * @return JsonResponse\n     */\n    public function inheritableSegments(Request $request, SegmentManagerInterface $segmentManager)\n    {\n        $id = $request->get('id');\n        $type = $request->get('type');\n        if (!$type || !$id) {\n            return $this->adminJson(['data' => []]);\n        }\n\n        $db = \\Pimcore\\Db::get();\n        $parentIdStatement = sprintf('SELECT :parentIdField FROM %s WHERE :idField = :value', $db->quoteIdentifier($type . 's'));\n        $parentId = $db->fetchOne($parentIdStatement, [\n            'parentIdField' => $type === 'object' ? 'o_parentId' : 'parentId',\n            'idField' => $type === 'object' ? 'o_id' : 'id',\n            'value' => $id\n        ]);\n\n        $segments = $segmentManager->getSegmentsForElementId($parentId, $type);\n        $data = array_map([$this, 'dehydrateSegment'], array_filter($segments));\n\n        return $this->adminJson(['data' => array_values($data)]);\n    }\n\n    /**\n     * returns directly assigned segmentIds for the pimcore backend\n     *\n     * @Route(\"/assigned-segments\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function assignedSegments(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $assignmentTable = $this->getParameter('cmf.segmentAssignment.table.raw');\n        $segmentIds = \\Pimcore\\Db::get()->fetchOne(\"SELECT `segments` FROM $assignmentTable WHERE `elementId` = ? AND `elementType` = ?\", [$id, $type]);\n\n        $data = array_map(function ($id) {\n            $segment = CustomerSegment::getById($id);\n\n            return $this->dehydrateSegment($segment);\n        }, array_filter(explode(',', $segmentIds)));\n\n        return $this->adminJson(['data' => array_values($data)]);\n    }\n\n    /**\n     * saves assignments asynchronously\n     *\n     * @Route(\"/assign\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function assign(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $breaksInheritance = $request->get('breaksInheritance') === 'true';\n        $segmentIds = json_decode($request->get('segmentIds'), true) ?? [];\n        //@TODO inject the service, when BC break allowed\n        $assigner = $this->get(SegmentAssignerInterface::class);\n        $success = $assigner->assignById($id, $type, $breaksInheritance, $segmentIds);\n\n        return $this->adminJson($success);\n    }\n\n    /**\n     * @Route(\"/breaks-inheritance\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function breaksInheritance(Request $request)\n    {\n        $id = $request->get('id') ?? '';\n        $type = $request->get('type') ?? '';\n        $assignmentTable = $this->getParameter('cmf.segmentAssignment.table.raw');\n\n        $breaksInheritance = \\Pimcore\\Db::get()->fetchOne(\"SELECT `breaksInheritance` FROM $assignmentTable WHERE `elementId` = ? AND `elementType` = ?\", [$id, $type]);\n\n        return $this->adminJson(['breaksInheritance' => $breaksInheritance]);\n    }\n\n    /**\n     * dehydrates a CustomerSegment for display in the pimcore backend\n     *\n     * @param CustomerSegment $segment\n     *\n     * @return array\n     */\n    private function dehydrateSegment($segment): array\n    {\n        if (!($segment instanceof CustomerSegment)) {\n            return [];\n        }\n\n        return [\n            'id' => $segment->getId(),\n            'type' => $segment->getType(),\n            'name' => $segment->getName(),\n        ];\n    }\n}\n"], "filenames": ["src/Controller/Admin/SegmentAssignmentController.php"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [58], "fixing_code_start_loc": [53], "fixing_code_end_loc": [64], "type": "CWE-89", "message": "SQL Injection in GitHub repository pimcore/customer-data-framework prior to 3.3.10.", "other": {"cve": {"id": "CVE-2023-2756", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-17T11:15:09.113", "lastModified": "2023-05-25T19:15:29.773", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL Injection in GitHub repository pimcore/customer-data-framework prior to 3.3.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:customer_management_framework:*:*:*:*:*:pimcore:*:*", "versionEndExcluding": "3.3.10", "matchCriteriaId": "C5464EEC-55B5-42FB-9319-5872CDC612F1"}]}]}], "references": [{"url": "https://github.com/pimcore/customer-data-framework/commit/76df151737b7964ce5169fdf9e27a0ad801757fe", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cf398528-819f-456e-88e7-c06d268d3f44", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/customer-data-framework/commit/76df151737b7964ce5169fdf9e27a0ad801757fe"}}