{"buggy_code": ["/**\n * Return an instance of TwocolsNav.\n *\n * @constructor\n */\n\n/* global Listing */\n\nvar TwocolsNav = function(options) {\n    Listing.call(this, options);\n};\n\nTwocolsNav.prototype = {\n    defaults: {\n        deflocation: null,\n        formid: \"#form\",\n        divid: \"#content\",\n        reload_exceptions: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.default_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n        this.navobj.register_callback(\n            \"security\", $.proxy(this.security_callback, this));\n    },\n\n    listen: function() {\n        $(\"a.ajaxnav\").click($.proxy(this.load_section, this));\n        $(document).on(\"click\", \"#update\", $.proxy(function(e) {\n            var $form = $(\"form\").first();\n            simple_ajax_form_post(e, {\n                formid: $form.attr(\"id\"),\n                modal: false,\n                reload_on_success: false,\n                success_cb: $.proxy(this.save_cb, this)\n            });\n        }, this));\n        var formId = 'parameters_form';\n        $(document).on('submit', '#' + formId, $.proxy(function(evt) {\n            simple_ajax_form_post(evt, {\n                formid: formId,\n                modal: false,\n                reload_on_success: false,\n                success_cb: $.proxy(this.save_cb, this),\n                error_cb: function(data) {\n                    window.scrollTo(0, 0);\n                    $('a[data-app=\"' + data.prefix + '\"]').tab('show');\n                }\n            });\n        }, this));\n    },\n\n    update_content: function(data) {\n        if (data.content) {\n            $('#' + this.options.divid).html(data.content);\n        }\n        this.update_listing(data, false);\n        if (data.onload_cb) {\n            eval(data.onload_cb + '()');\n        }\n        if (data.respmsg) {\n            $(\"body\").notify(\"error\", data.respmsg);\n        }\n        $('#' + this.options.divid + ' select').change($.proxy(this.select_change, this));\n        $('#' + this.options.divid + ' input[type=radio]').click($.proxy(this.radio_clicked, this));\n        $(\".help\").popover({\n            placement: 'bottom',\n            trigger: 'hover'\n        }).click(function(e) {e.preventDefault();});\n        $('#' + this.options.divid + ' select').change();\n        $('#' + this.options.divid + ' input[type=radio]:checked').click();\n    },\n\n    propagate_change: function($node) {\n        var $select = $node.find(\"select\");\n        var $radio = $node.find(\"input[type=radio]\");\n        if ($select.length) {\n            $select.change();\n        }\n        if ($radio.length) {\n            $radio.click();\n        }\n    },\n\n    toggle_field_visibility: function($field, $parent, value) {\n        if ($parent.attr(\"disabled\") === undefined &&\n            $field.attr(\"data-visibility-value\") === value) {\n            $field.attr(\"disabled\", null);\n            $field.show();\n            this.propagate_change($field);\n        } else {\n            $field.hide();\n            $field.attr(\"disabled\", \"disabled\");\n            this.propagate_change($field);\n        }\n    },\n\n    select_change: function(e) {\n        var instance = this;\n        var $target = $(e.target);\n        var $parent = $target.parents(\"div.form-group\");\n\n        $('div[data-visibility-field=\"' + $target.attr(\"id\") + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n        $('h5[data-visibility-field=\"' + $target.attr(\"id\") + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n    },\n\n    radio_clicked: function(e) {\n        var instance = this;\n        var $target = $(e.target);\n        var $parent = $target.parents(\"div.form-group\");\n        var realid = $target.attr(\"id\");\n\n        realid = realid.substr(0, realid.length - 2);\n        $('div[data-visibility-field=\"' + realid + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n        $('h5[data-visibility-field=\"' + realid + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n    },\n\n    save_cb: function(data) {\n        clean_form_errors(this.options.formid);\n        if (this.options.reload_exceptions) {\n            for (var i = 0; i < this.options.reload_exceptions.length; i++) {\n                if (this.navobj.getbaseurl() == this.options.reload_exceptions[i]) {\n                    window.location.reload();\n                    break;\n                }\n            }\n        }\n        $(\"body\").notify(\"success\", data, 2000);\n    },\n\n    load_section: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        this.navobj.parse_string($link.attr(\"href\"), true).update();\n    },\n\n    /**\n     * Select an entry in the left menu based on current url.\n     */\n    select_left_menu: function() {\n        $(\"a.ajaxnav\").parent().removeClass(\"active\");\n        $(\"a[name=\" + this.navobj.getbaseurl() + \"]\").parent().addClass(\"active\");\n    },\n\n    default_cb: function(data) {\n        this.select_left_menu();\n        this.update_content(data);\n    },\n\n    /**\n     * Navigation callback: security.\n     */\n    security_callback: function (data) {\n        this.select_left_menu();\n        this.update_content(data);\n        $('#start-tfa-setup').click(this.startTFASetup);\n        $('#finalize-tfa-setup').click(this.finalizeTFASetup);\n    },\n\n    startTFASetup: function (evt) {\n        evt.preventDefault();\n        $.ajax({\n            url: window.root_url + '/api/v1/account/tfa/setup/',\n            type: 'post',\n            contentType: 'application/json'\n        }).done(function (resp) {\n            window.location.reload();\n        });\n    },\n\n    finalizeTFASetup: function (evt) {\n        evt.preventDefault();\n        var data = {\n            pin_code: $('#pin-code').val()\n        };\n        $.ajax({\n            url: window.root_url + '/api/v1/account/tfa/setup/check/',\n            type: 'post',\n            global: false,\n            data: JSON.stringify(data),\n            contentType: 'application/json'\n        }).done(function (resp) {\n            window.location.reload();\n        }).fail(function (jqxhr) {\n            var errors = JSON.parse(jqxhr.responseText);\n            display_field_error($('#pin-code'), errors.pin_code.join(' '));\n        });\n    }\n};\n\nTwocolsNav.prototype = $.extend({}, Listing.prototype, TwocolsNav.prototype);\n", "{% load i18n core_tags form_tags %}\n<div class=\"form-group\n    {% if field.errors %}has-error{% endif %}\n    {{ extra_classes }}\"{% visirule field %}\n    {% if hidden %}style=\"display: none\"{% endif %}\n>\n\n  {% if field.label %}\n  <label class=\"control-label {{ label_width }}\" for=\"id_{{ field.html_name }}\">{{ field.label }}\n    {% if help_display_mode == \"tooltip\" and field.help_text %}\n    <a href=\"#\" class=\"help\" data-original-title=\"{% trans 'Help:' %} {{ field.label }}\" data-content=\"{{ field.help_text }}\" rel=\"popover\" tabindex=\"-1\">?</a>\n    {% endif %}\n  </label>\n  {% endif %}\n  \n  <div class=\"{% render_field_width field %}\">\n    {% if appended_text %}\n    <div class=\"input-group\">\n      {% endif %}\n      {{ field }}\n      {% if appended_text %}\n      <span class=\"input-group-addon\">{{ appended_text }}</span>\n    </div>\n    {% endif %}\n    {% if help_display_mode == \"inline\" and field.help_text %}\n    <span class=\"help-block pull-right\">{{ field.help_text }}</span>\n    {% endif %}\n    {% if inline_message %}\n    <span class=\"text-info\">{{ inline_message }}</span>\n    {% endif %}\n    {% if field.errors %}\n    <p class=\"help-block\">\n      {% for error in field.errors %}\n      {{ error|safe }}\n      {% endfor %}\n    </p>\n    {% endif %}\n  </div>\n\n  {% if activator %}\n  <div class=\"checkbox {{ activator_size }}\">\n    <label for=\"id_{{ field.name }}_act\">\n      <input type=\"checkbox\" class=\"activator\" id=\"id_{{ field.name }}_act\" name=\"{{ field.name }}_act\"\n             {% if activator_value %}checked='checked'\n             {% else %}\n             {% if deactivate_if_empty and field.value == None %}\n             checked='checked'\n             {% endif %}\n             {% endif %}/>\n      {{ activator_label }}\n    </label>\n  </div>\n  {% endif %}\n\n  {% block extra_controls %}\n  {% endblock %}\n\n</div>\n"], "fixing_code": ["/**\n * Return an instance of TwocolsNav.\n *\n * @constructor\n */\n\n/* global Listing */\n\nvar TwocolsNav = function(options) {\n    Listing.call(this, options);\n};\n\nTwocolsNav.prototype = {\n    defaults: {\n        deflocation: null,\n        formid: \"#form\",\n        divid: \"#content\",\n        reload_exceptions: null\n    },\n\n    initialize: function(options) {\n        this.options = $.extend({}, this.defaults, options);\n        this.options.defcallback = $.proxy(this.default_cb, this);\n        Listing.prototype.initialize.call(this, this.options);\n        this.listen();\n        this.navobj.register_callback(\n            \"security\", $.proxy(this.security_callback, this));\n    },\n\n    listen: function() {\n        $(\"a.ajaxnav\").click($.proxy(this.load_section, this));\n        $(document).on(\"click\", \"#update\", $.proxy(function(e) {\n            var $form = $(e.target).closest(\"form\");\n            simple_ajax_form_post(e, {\n                formid: $form.attr(\"id\"),\n                modal: false,\n                reload_on_success: false,\n                success_cb: $.proxy(this.save_cb, this)\n            });\n        }, this));\n        var formId = 'parameters_form';\n        $(document).on('submit', '#' + formId, $.proxy(function(evt) {\n            simple_ajax_form_post(evt, {\n                formid: formId,\n                modal: false,\n                reload_on_success: false,\n                success_cb: $.proxy(this.save_cb, this),\n                error_cb: function(data) {\n                    window.scrollTo(0, 0);\n                    $('a[data-app=\"' + data.prefix + '\"]').tab('show');\n                }\n            });\n        }, this));\n    },\n\n    update_content: function(data) {\n        if (data.content) {\n            $('#' + this.options.divid).html(data.content);\n        }\n        this.update_listing(data, false);\n        if (data.onload_cb) {\n            eval(data.onload_cb + '()');\n        }\n        if (data.respmsg) {\n            $(\"body\").notify(\"error\", data.respmsg);\n        }\n        $('#' + this.options.divid + ' select').change($.proxy(this.select_change, this));\n        $('#' + this.options.divid + ' input[type=radio]').click($.proxy(this.radio_clicked, this));\n        $(\".help\").popover({\n            placement: 'bottom',\n            trigger: 'hover'\n        }).click(function(e) {e.preventDefault();});\n        $('#' + this.options.divid + ' select').change();\n        $('#' + this.options.divid + ' input[type=radio]:checked').click();\n    },\n\n    propagate_change: function($node) {\n        var $select = $node.find(\"select\");\n        var $radio = $node.find(\"input[type=radio]\");\n        if ($select.length) {\n            $select.change();\n        }\n        if ($radio.length) {\n            $radio.click();\n        }\n    },\n\n    toggle_field_visibility: function($field, $parent, value) {\n        if ($parent.attr(\"disabled\") === undefined &&\n            $field.attr(\"data-visibility-value\") === value) {\n            $field.attr(\"disabled\", null);\n            $field.show();\n            this.propagate_change($field);\n        } else {\n            $field.hide();\n            $field.attr(\"disabled\", \"disabled\");\n            this.propagate_change($field);\n        }\n    },\n\n    select_change: function(e) {\n        var instance = this;\n        var $target = $(e.target);\n        var $parent = $target.parents(\"div.form-group\");\n\n        $('div[data-visibility-field=\"' + $target.attr(\"id\") + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n        $('h5[data-visibility-field=\"' + $target.attr(\"id\") + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n    },\n\n    radio_clicked: function(e) {\n        var instance = this;\n        var $target = $(e.target);\n        var $parent = $target.parents(\"div.form-group\");\n        var realid = $target.attr(\"id\");\n\n        realid = realid.substr(0, realid.length - 2);\n        $('div[data-visibility-field=\"' + realid + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n        $('h5[data-visibility-field=\"' + realid + '\"]').each(function(idx) {\n            instance.toggle_field_visibility($(this), $parent, $target.val());\n        });\n    },\n\n    save_cb: function(data) {\n        clean_form_errors(this.options.formid);\n        if (this.options.reload_exceptions) {\n            for (var i = 0; i < this.options.reload_exceptions.length; i++) {\n                if (this.navobj.getbaseurl() == this.options.reload_exceptions[i]) {\n                    window.location.reload();\n                    break;\n                }\n            }\n        }\n        $(\"body\").notify(\"success\", data, 2000);\n    },\n\n    load_section: function(e) {\n        var $link = get_target(e);\n        e.preventDefault();\n        this.navobj.parse_string($link.attr(\"href\"), true).update();\n    },\n\n    /**\n     * Select an entry in the left menu based on current url.\n     */\n    select_left_menu: function() {\n        $(\"a.ajaxnav\").parent().removeClass(\"active\");\n        $(\"a[name=\" + this.navobj.getbaseurl() + \"]\").parent().addClass(\"active\");\n    },\n\n    default_cb: function(data) {\n        this.select_left_menu();\n        this.update_content(data);\n    },\n\n    /**\n     * Navigation callback: security.\n     */\n    security_callback: function (data) {\n        this.select_left_menu();\n        this.update_content(data);\n        $('#start-tfa-setup').click(this.startTFASetup);\n        $('#finalize-tfa-setup').click(this.finalizeTFASetup);\n    },\n\n    startTFASetup: function (evt) {\n        evt.preventDefault();\n        $.ajax({\n            url: window.root_url + '/api/v1/account/tfa/setup/',\n            type: 'post',\n            contentType: 'application/json'\n        }).done(function (resp) {\n            window.location.reload();\n        });\n    },\n\n    finalizeTFASetup: function (evt) {\n        evt.preventDefault();\n        var data = {\n            pin_code: $('#pin-code').val()\n        };\n        $.ajax({\n            url: window.root_url + '/api/v1/account/tfa/setup/check/',\n            type: 'post',\n            global: false,\n            data: JSON.stringify(data),\n            contentType: 'application/json'\n        }).done(function (resp) {\n            window.location.reload();\n        }).fail(function (jqxhr) {\n            var errors = JSON.parse(jqxhr.responseText);\n            display_field_error($('#pin-code'), errors.pin_code.join(' '));\n        });\n    }\n};\n\nTwocolsNav.prototype = $.extend({}, Listing.prototype, TwocolsNav.prototype);\n", "{% load i18n core_tags form_tags %}\n<div class=\"form-group\n    {% if field.errors %}has-error{% endif %}\n    {{ extra_classes }}\"{% visirule field %}\n    {% if hidden %}style=\"display: none\"{% endif %}\n>\n\n  {% if field.label %}\n  <label class=\"control-label {{ label_width }}\" for=\"id_{{ field.html_name }}\">{{ field.label }}\n    {% if help_display_mode == \"tooltip\" and field.help_text %}\n    <a href=\"#\" class=\"help\" data-original-title=\"{% trans 'Help:' %} {{ field.label }}\" data-content=\"{{ field.help_text }}\" rel=\"popover\" tabindex=\"-1\">?</a>\n    {% endif %}\n  </label>\n  {% endif %}\n\n  <div class=\"{% render_field_width field %}\">\n    {% if appended_text %}\n    <div class=\"input-group\">\n      {% endif %}\n      {{ field }}\n      {% if appended_text %}\n      <span class=\"input-group-addon\">{{ appended_text }}</span>\n    </div>\n    {% endif %}\n    {% if help_display_mode == \"inline\" and field.help_text %}\n    <span class=\"help-block pull-right\">{{ field.help_text }}</span>\n    {% endif %}\n    {% if inline_message %}\n    <span class=\"text-info\">{{ inline_message }}</span>\n    {% endif %}\n    {% if field.errors %}\n    <p class=\"help-block\">\n      {% for error in field.errors %}\n      {{ error }}\n      {% endfor %}\n    </p>\n    {% endif %}\n  </div>\n\n  {% if activator %}\n  <div class=\"checkbox {{ activator_size }}\">\n    <label for=\"id_{{ field.name }}_act\">\n      <input type=\"checkbox\" class=\"activator\" id=\"id_{{ field.name }}_act\" name=\"{{ field.name }}_act\"\n             {% if activator_value %}checked='checked'\n             {% else %}\n             {% if deactivate_if_empty and field.value == None %}\n             checked='checked'\n             {% endif %}\n             {% endif %}/>\n      {{ activator_label }}\n    </label>\n  </div>\n  {% endif %}\n\n  {% block extra_controls %}\n  {% endblock %}\n\n</div>\n"], "filenames": ["modoboa/static/js/twocols_nav.js", "modoboa/templates/common/generic_field.html"], "buggy_code_start_loc": [33, 15], "buggy_code_end_loc": [34, 35], "fixing_code_start_loc": [33, 15], "fixing_code_end_loc": [34, 35], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - DOM in GitHub repository modoboa/modoboa prior to 2.2.2.", "other": {"cve": {"id": "CVE-2023-5688", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-20T17:15:08.883", "lastModified": "2023-10-27T18:51:36.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - DOM in GitHub repository modoboa/modoboa prior to 2.2.2."}, {"lang": "es", "value": "Cross-site Scripting (XSS): DOM en el repositorio de GitHub modoboa/modoboa anterior a 2.2.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modoboa:modoboa:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.2", "matchCriteriaId": "07F47C6D-A091-4637-90E1-9FDC92F2973E"}]}]}], "references": [{"url": "https://github.com/modoboa/modoboa/commit/d33d3cd2d11dbfebd8162c46e2c2a9873919a967", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/0ceb10e4-952b-4ca4-baf8-5b6f12e3a8a7", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/modoboa/modoboa/commit/d33d3cd2d11dbfebd8162c46e2c2a9873919a967"}}