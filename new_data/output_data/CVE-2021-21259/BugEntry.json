{"buggy_code": ["/* eslint-env browser, jquery */\n/* global serverurl, Reveal, RevealMarkdown */\n\nimport { preventXSS } from './render'\nimport { md, updateLastChange, removeDOMEvents, finishView } from './extra'\n\nrequire('../css/extra.css')\nrequire('../css/site.css')\n\nconst body = preventXSS($('.slides').text())\n\nwindow.createtime = window.lastchangeui.time.attr('data-createtime')\nwindow.lastchangetime = window.lastchangeui.time.attr('data-updatetime')\nupdateLastChange()\nconst url = window.location.pathname\n$('.ui-edit').attr('href', `${url}/edit`)\n$('.ui-print').attr('href', `${url}?print-pdf`)\n\n$(document).ready(() => {\n  // tooltip\n  $('[data-toggle=\"tooltip\"]').tooltip()\n})\n\nfunction extend () {\n  const target = {}\n\n  for (const source of arguments) {\n    for (const key in source) {\n      if (source.hasOwnProperty(key)) {\n        target[key] = source[key]\n      }\n    }\n  }\n\n  return target\n}\n\n// Optional libraries used to extend on reveal.js\nconst deps = [{\n  src: `${serverurl}/build/reveal.js/lib/js/classList.js`,\n  condition () {\n    return !document.body.classList\n  }\n}, {\n  src: `${serverurl}/build/reveal.js/plugin/notes/notes.js`,\n  async: true,\n  condition () {\n    return !!document.body.classList\n  }\n}]\n\nconst slideOptions = {\n  separator: '^(\\r\\n?|\\n)---(\\r\\n?|\\n)$',\n  verticalSeparator: '^(\\r\\n?|\\n)----(\\r\\n?|\\n)$'\n}\nconst slides = RevealMarkdown.slidify(body, slideOptions)\n$('.slides').html(slides)\nRevealMarkdown.initialize()\nremoveDOMEvents($('.slides'))\n$('.slides').show()\n\n// default options to init reveal.js\nconst defaultOptions = {\n  controls: true,\n  progress: true,\n  slideNumber: true,\n  history: true,\n  center: true,\n  transition: 'none',\n  dependencies: deps\n}\n\n// options from yaml meta\nconst meta = JSON.parse($('#meta').text())\nvar options = meta.slideOptions || {}\n\nconst view = $('.reveal')\n\n// text language\nif (meta.lang && typeof meta.lang === 'string') {\n  view.attr('lang', meta.lang)\n} else {\n  view.removeAttr('lang')\n}\n// text direction\nif (meta.dir && typeof meta.dir === 'string' && meta.dir === 'rtl') {\n  options.rtl = true\n} else {\n  options.rtl = false\n}\n// breaks\nif (typeof meta.breaks === 'boolean' && !meta.breaks) {\n  md.options.breaks = false\n} else {\n  md.options.breaks = true\n}\n\n// options from URL query string\nconst queryOptions = Reveal.getQueryHash() || {}\n\noptions = extend(defaultOptions, options, queryOptions)\nReveal.initialize(options)\n\nwindow.viewAjaxCallback = () => {\n  Reveal.layout()\n}\n\nfunction renderSlide (event) {\n  if (window.location.search.match(/print-pdf/gi)) {\n    const slides = $('.slides')\n    let title = document.title\n    finishView(slides)\n    document.title = title\n    Reveal.layout()\n  } else {\n    const markdown = $(event.currentSlide)\n    if (!markdown.attr('data-rendered')) {\n      let title = document.title\n      finishView(markdown)\n      markdown.attr('data-rendered', 'true')\n      document.title = title\n      Reveal.layout()\n    }\n  }\n}\n\nReveal.addEventListener('ready', event => {\n  renderSlide(event)\n  const markdown = $(event.currentSlide)\n  // force browser redraw\n  setTimeout(() => {\n    markdown.hide().show(0)\n  }, 0)\n})\nReveal.addEventListener('slidechanged', renderSlide)\n\nconst isWinLike = navigator.platform.indexOf('Win') > -1\n\nif (isWinLike) $('.container').addClass('hidescrollbar')\n"], "fixing_code": ["/* eslint-env browser, jquery */\n/* global serverurl, Reveal, RevealMarkdown */\n\nimport { preventXSS } from './render'\nimport { md, updateLastChange, removeDOMEvents, finishView } from './extra'\n\nrequire('../css/extra.css')\nrequire('../css/site.css')\n\nconst body = preventXSS($('.slides').text())\n\nwindow.createtime = window.lastchangeui.time.attr('data-createtime')\nwindow.lastchangetime = window.lastchangeui.time.attr('data-updatetime')\nupdateLastChange()\nconst url = window.location.pathname\n$('.ui-edit').attr('href', `${url}/edit`)\n$('.ui-print').attr('href', `${url}?print-pdf`)\n\n$(document).ready(() => {\n  // tooltip\n  $('[data-toggle=\"tooltip\"]').tooltip()\n})\n\nfunction extend () {\n  const target = {}\n\n  for (const source of arguments) {\n    for (const key in source) {\n      if (source.hasOwnProperty(key)) {\n        target[key] = source[key]\n      }\n    }\n  }\n\n  return target\n}\n\n// Optional libraries used to extend on reveal.js\nconst deps = [{\n  src: `${serverurl}/build/reveal.js/lib/js/classList.js`,\n  condition () {\n    return !document.body.classList\n  }\n}, {\n  src: `${serverurl}/build/reveal.js/plugin/notes/notes.js`,\n  async: true,\n  condition () {\n    return !!document.body.classList\n  }\n}]\n\nconst slideOptions = {\n  separator: '^(\\r\\n?|\\n)---(\\r\\n?|\\n)$',\n  verticalSeparator: '^(\\r\\n?|\\n)----(\\r\\n?|\\n)$'\n}\nconst slides = RevealMarkdown.slidify(body, slideOptions)\n$('.slides').html(slides)\nRevealMarkdown.initialize()\nremoveDOMEvents($('.slides'))\n$('.slides').show()\n\n// default options to init reveal.js\nconst defaultOptions = {\n  controls: true,\n  progress: true,\n  slideNumber: true,\n  history: true,\n  center: true,\n  transition: 'none',\n  dependencies: deps\n}\n\n// options from yaml meta\nconst meta = JSON.parse($('#meta').text())\nvar options = {\n  autoPlayMedia: meta.slideOptions.autoPlayMedia,\n  autoSlide: meta.slideOptions.autoSlide,\n  autoSlideStoppable: meta.slideOptions.autoSlideStoppable,\n  backgroundTransition: meta.slideOptions.backgroundTransition,\n  center: meta.slideOptions.center,\n  controls: meta.slideOptions.controls,\n  controlsBackArrows: meta.slideOptions.controlsBackArrows,\n  controlsLayout: meta.slideOptions.controlsLayout,\n  controlsTutorial: meta.slideOptions.controlsTutorial,\n  defaultTiming: meta.slideOptions.defaultTiming,\n  display: meta.slideOptions.display,\n  embedded: meta.slideOptions.embedded,\n  fragmentInURL: meta.slideOptions.fragmentInURL,\n  fragments: meta.slideOptions.fragments,\n  hash: meta.slideOptions.hash,\n  height: meta.slideOptions.height,\n  help: meta.slideOptions.help,\n  hideAddressBar: meta.slideOptions.hideAddressBar,\n  hideCursorTime: meta.slideOptions.hideCursorTime,\n  hideInactiveCursor: meta.slideOptions.hideInactiveCursor,\n  history: meta.slideOptions.history,\n  keyboard: meta.slideOptions.keyboard,\n  loop: meta.slideOptions.loop,\n  margin: meta.slideOptions.margin,\n  maxScale: meta.slideOptions.maxScale,\n  minScale: meta.slideOptions.minScale,\n  minimumTimePerSlide: meta.slideOptions.minimumTimePerSlide,\n  mobileViewDistance: meta.slideOptions.mobileViewDistance,\n  mouseWheel: meta.slideOptions.mouseWheel,\n  navigationMode: meta.slideOptions.navigationMode,\n  overview: meta.slideOptions.overview,\n  parallaxBackgroundHorizontal: meta.slideOptions.parallaxBackgroundHorizontal,\n  parallaxBackgroundImage: meta.slideOptions.parallaxBackgroundImage,\n  parallaxBackgroundSize: meta.slideOptions.parallaxBackgroundSize,\n  parallaxBackgroundVertical: meta.slideOptions.parallaxBackgroundVertical,\n  preloadIframes: meta.slideOptions.preloadIframes,\n  previewLinks: meta.slideOptions.previewLinks,\n  progress: meta.slideOptions.progress,\n  rtl: meta.slideOptions.rtl,\n  showNotes: meta.slideOptions.showNotes,\n  shuffle: meta.slideOptions.shuffle,\n  slideNumber: meta.slideOptions.slideNumber,\n  totalTime: meta.slideOptions.totalTime,\n  touch: meta.slideOptions.touch,\n  transition: meta.slideOptions.transition,\n  transitionSpeed: meta.slideOptions.transitionSpeed,\n  viewDistance: meta.slideOptions.viewDistance,\n  width: meta.slideOptions.width\n} || {}\n\nconst view = $('.reveal')\n\n// text language\nif (meta.lang && typeof meta.lang === 'string') {\n  view.attr('lang', meta.lang)\n} else {\n  view.removeAttr('lang')\n}\n// text direction\nif (meta.dir && typeof meta.dir === 'string' && meta.dir === 'rtl') {\n  options.rtl = true\n} else {\n  options.rtl = false\n}\n// breaks\nif (typeof meta.breaks === 'boolean' && !meta.breaks) {\n  md.options.breaks = false\n} else {\n  md.options.breaks = true\n}\n\n// options from URL query string\nconst queryOptions = Reveal.getQueryHash() || {}\n\noptions = extend(defaultOptions, options, queryOptions)\nReveal.initialize(options)\n\nwindow.viewAjaxCallback = () => {\n  Reveal.layout()\n}\n\nfunction renderSlide (event) {\n  if (window.location.search.match(/print-pdf/gi)) {\n    const slides = $('.slides')\n    let title = document.title\n    finishView(slides)\n    document.title = title\n    Reveal.layout()\n  } else {\n    const markdown = $(event.currentSlide)\n    if (!markdown.attr('data-rendered')) {\n      let title = document.title\n      finishView(markdown)\n      markdown.attr('data-rendered', 'true')\n      document.title = title\n      Reveal.layout()\n    }\n  }\n}\n\nReveal.addEventListener('ready', event => {\n  renderSlide(event)\n  const markdown = $(event.currentSlide)\n  // force browser redraw\n  setTimeout(() => {\n    markdown.hide().show(0)\n  }, 0)\n})\nReveal.addEventListener('slidechanged', renderSlide)\n\nconst isWinLike = navigator.platform.indexOf('Win') > -1\n\nif (isWinLike) $('.container').addClass('hidescrollbar')\n"], "filenames": ["public/js/slide.js"], "buggy_code_start_loc": [75], "buggy_code_end_loc": [76], "fixing_code_start_loc": [75], "fixing_code_end_loc": [125], "type": "CWE-79", "message": "HedgeDoc is open source software which lets you create real-time collaborative markdown notes. In HedgeDoc before version 1.7.2, an attacker can inject arbitrary JavaScript into a HedgeDoc note, which is executed when the note is viewed in slide mode. Depending on the configuration of the instance, the attacker may not need authentication to create or edit notes. The problem is patched in HedgeDoc 1.7.2. As a workaround, disallow loading JavaScript from 3rd party sites using the `Content-Security-Policy` header. Note that this will break some embedded content.", "other": {"cve": {"id": "CVE-2021-21259", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-22T17:15:12.867", "lastModified": "2021-06-08T14:36:18.190", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "HedgeDoc is open source software which lets you create real-time collaborative markdown notes. In HedgeDoc before version 1.7.2, an attacker can inject arbitrary JavaScript into a HedgeDoc note, which is executed when the note is viewed in slide mode. Depending on the configuration of the instance, the attacker may not need authentication to create or edit notes. The problem is patched in HedgeDoc 1.7.2. As a workaround, disallow loading JavaScript from 3rd party sites using the `Content-Security-Policy` header. Note that this will break some embedded content."}, {"lang": "es", "value": "HedgeDoc es un software de c\u00f3digo abierto que permite crear notas markdown colaborativas en tiempo real. En HedgeDoc antes de la versi\u00f3n 1.7.2, un atacante puede inyectar JavaScript arbitrario en una nota de HedgeDoc, que se ejecuta cuando la nota se ve en modo de diapositivas. Dependiendo de la configuraci\u00f3n de la instancia, el atacante puede no necesitar autenticaci\u00f3n para crear o editar notas. El problema est\u00e1 parcheado en HedgeDoc versi\u00f3n 1.7.2. Como soluci\u00f3n, deshabilite la carga de JavaScript desde sitios de terceros utilizando la cabecera `Content-Security-Policy`. Tenga en cuenta que esto romper\u00e1 algunos contenidos incrustados"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hedgedoc:hedgedoc:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.2", "matchCriteriaId": "6EF4EA31-5B63-4C26-A744-E8A8B03D8DEC"}]}]}], "references": [{"url": "https://github.com/hackmdio/codimd/issues/1648", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/commit/35b0d39a12aa35f27fba8c1f50b1886706e7efef", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/releases/tag/1.7.2", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/security/advisories/GHSA-44w9-vm8p-3cxw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hedgedoc/hedgedoc/commit/35b0d39a12aa35f27fba8c1f50b1886706e7efef"}}