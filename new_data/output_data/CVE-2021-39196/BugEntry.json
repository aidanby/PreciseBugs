{"buggy_code": ["/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.rtds.svc;\n\nimport com.rtds.jpa.CaptureType;\nimport java.util.List;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.transaction.Transactional;\n\n/**\n *\n * @author jdh\n */\n@ApplicationScoped\n@Transactional\npublic class CaptureTypeService\n{\n    @Inject\n    EntityManager em;\n    \n    public void createOrUpdateCaptureType( CaptureType value )\n    {\n        if( value == null || value.getLabel() == null || value.getUrlSuffix() == null )\n        {\n            throw new IllegalArgumentException( \"The CaptureType, it's label and url_suffix must not be null.\" );\n        }\n        \n        CaptureType persistent = em.find( CaptureType.class, value.getUrlSuffix() );\n        \n        if( persistent != null )\n        {\n            persistent.setLabel( value.getLabel() );\n            persistent.setCaptureFilter( value.getCaptureFilter() );\n        }\n        else\n        {\n            em.persist( value );\n        }\n    }\n    \n    public String findFilter( String url_suffix )\n    {\n        if( url_suffix == null )\n        {\n            throw new IllegalArgumentException( \"The url_suffix must not be null.\" );\n        }\n        \n        CaptureType type = em.find( CaptureType.class, url_suffix );\n        \n        if( type != null )\n        {\n            return type.getCaptureFilter();\n        }\n        \n        return null;\n    }\n    \n    public CaptureType find( String url_suffix )\n    {\n        return em.find( CaptureType.class, url_suffix );\n    }\n    \n    public List<CaptureType> list()\n    {\n        return em.createQuery( \"select ct from CaptureType ct\", CaptureType.class ).getResultList();\n    }\n    \n    public void deleteCaptureType( String url_suffix )\n    {\n        if( url_suffix == null )\n        {\n            throw new IllegalArgumentException( \"The url_suffix must not be null.\" );\n        }\n        \n        CaptureType persistent = em.find( CaptureType.class, url_suffix );\n        \n        if( persistent != null )\n        {\n            em.remove( persistent );\n        }\n    }\n    \n}\n"], "fixing_code": ["/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.rtds.svc;\n\nimport com.rtds.jpa.CaptureType;\nimport java.util.List;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.transaction.Transactional;\n\n/**\n *\n * @author jdh\n */\n@ApplicationScoped\n@Transactional\npublic class CaptureTypeService\n{\n    @Inject\n    EntityManager em;\n    \n    public void createOrUpdateCaptureType( CaptureType value )\n    {\n        if( value == null || value.getLabel() == null || value.getUrlSuffix() == null )\n        {\n            throw new IllegalArgumentException( \"The CaptureType, it's label and url_suffix must not be null.\" );\n        }\n        \n        CaptureType persistent = em.find( CaptureType.class, value.getUrlSuffix() );\n        \n        if( persistent != null )\n        {\n            persistent.setLabel( value.getLabel() );\n            persistent.setCaptureFilter( value.getCaptureFilter() );\n        }\n        else\n        {\n            em.persist( value );\n        }\n    }\n    \n    public String findFilter( String url_suffix )\n    {\n        if( url_suffix == null )\n        {\n            throw new IllegalArgumentException( \"The url_suffix must not be null.\" );\n        }\n        \n        CaptureType type = em.find( CaptureType.class, url_suffix );\n        \n        if( type == null )\n        {\n            throw new IllegalArgumentException( \"The url_suffix must exist in the database.\" );\n        }\n        \n        // It is okay for the capture filter itself to be null, but the CaptureType\n        // must be in the database, otherwise the user could effectively forge\n        // a capture filter for \"all\" just by requesting a non-existent filter.\n        \n        return type.getCaptureFilter();\n    }\n    \n    public CaptureType find( String url_suffix )\n    {\n        return em.find( CaptureType.class, url_suffix );\n    }\n    \n    public List<CaptureType> list()\n    {\n        return em.createQuery( \"select ct from CaptureType ct\", CaptureType.class ).getResultList();\n    }\n    \n    public void deleteCaptureType( String url_suffix )\n    {\n        if( url_suffix == null )\n        {\n            throw new IllegalArgumentException( \"The url_suffix must not be null.\" );\n        }\n        \n        CaptureType persistent = em.find( CaptureType.class, url_suffix );\n        \n        if( persistent != null )\n        {\n            em.remove( persistent );\n        }\n    }\n    \n}\n"], "filenames": ["src/main/java/com/rtds/svc/CaptureTypeService.java"], "buggy_code_start_loc": [55], "buggy_code_end_loc": [61], "fixing_code_start_loc": [55], "fixing_code_end_loc": [65], "type": "CWE-754", "message": "pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater.", "other": {"cve": {"id": "CVE-2021-39196", "sourceIdentifier": "security-advisories@github.com", "published": "2021-09-07T19:15:08.677", "lastModified": "2022-08-05T10:55:09.787", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pcapture is an open source dumpcap web service interface . In affected versions this vulnerability allows an authenticated but unprivileged user to use the REST API to capture and download packets with no capture filter and without adequate permissions. This is important because the capture filters can effectively limit the scope of information that a user can see in the data captures. If no filter is present, then all data on the local network segment where the program is running can be captured and downloaded. v3.12 fixes this problem. There is no workaround, you must upgrade to v3.12 or greater."}, {"lang": "es", "value": "pcapture es una interfaz de servicio web dumpcap de c\u00f3digo abierto. En las versiones afectadas esta vulnerabilidad permite a un usuario autenticado pero sin privilegios usar la API REST para capturar y descargar paquetes sin filtro de captura y sin los permisos adecuados. Esto es importante porque los filtros de captura pueden limitar efectivamente el alcance de la informaci\u00f3n que un usuario puede visualizar en las capturas de datos. Si no se presenta ning\u00fan filtro, pueden capturarse y descargarse todos los datos del segmento de red local donde es ejecutado el programa. La versi\u00f3n 3.12 corrige este problema. No se presenta ninguna soluci\u00f3n, debe actualizar a versi\u00f3n v3.12 o superior"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:C/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-754"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pcapture_project:pcapture:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.12", "matchCriteriaId": "ABACB643-D644-4ABE-A953-6FD6AA8BF2BB"}]}]}], "references": [{"url": "https://github.com/jdhwpgmbca/pcapture/commit/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jdhwpgmbca/pcapture/issues/7", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/jdhwpgmbca/pcapture/security/advisories/GHSA-3r67-fxpr-p2qx", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jdhwpgmbca/pcapture/commit/0f74f431e0970a2e5784dbd955cfa4760e3b1ef7"}}