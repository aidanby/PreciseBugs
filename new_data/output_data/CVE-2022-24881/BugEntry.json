{"buggy_code": ["package com.hccake.ballcat.codegen.engine;\n\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport lombok.SneakyThrows;\nimport org.springframework.stereotype.Component;\n\nimport java.io.StringWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n/**\n * Freemarker \u7684\u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\n@Component\npublic class FreemarkerTemplateEngine implements TemplateEngine {\n\n\tprivate final Configuration configuration;\n\n\tpublic FreemarkerTemplateEngine() {\n\t\tthis.configuration = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\n\t\tconfiguration.setDefaultEncoding(StandardCharsets.UTF_8.name());\n\t}\n\n\t@Override\n\tpublic TemplateEngineTypeEnum type() {\n\t\treturn TemplateEngineTypeEnum.FREEMARKER;\n\t}\n\n\t@SneakyThrows(TemplateRenderException.class)\n\t@Override\n\tpublic String render(String templateContent, Map<String, Object> context) {\n\t\ttry {\n\t\t\tTemplate template = new Template(\"templateName\", templateContent, configuration);\n\t\t\ttry (StringWriter sw = new StringWriter()) {\n\t\t\t\ttemplate.process(context, sw);\n\t\t\t\treturn sw.toString();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new TemplateRenderException(ex);\n\t\t}\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport java.util.Map;\n\n/**\n * \u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\npublic interface TemplateEngine {\n\n\t/**\n\t * \u5f53\u524d\u6a21\u677f\u5f15\u64ce\u5bf9\u5e94\u7684\u7c7b\u578b\u679a\u4e3e\n\t * @return TemplateEngineTypeEnum\n\t */\n\tTemplateEngineTypeEnum type();\n\n\t/**\n\t * \u6e32\u67d3\u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param templateContent \u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param context \u6e32\u67d3\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\n\t * @return \u6e32\u67d3\u5b8c\u6210\u540e\u7684\u5b57\u7b26\u4e32\n\t */\n\tString render(String templateContent, Map<String, Object> context);\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport cn.hutool.core.lang.Assert;\nimport cn.hutool.core.util.StrUtil;\n\nimport java.util.Map;\n\n/**\n * \u6a21\u677f\u5f15\u64ce\u7684\u59d4\u6258\u8005\n * \n * @author hccake\n */\npublic class TemplateEngineDelegator {\n\n\tpublic final Map<TemplateEngineTypeEnum, TemplateEngine> templateEngineMap;\n\n\tpublic TemplateEngineDelegator(Map<TemplateEngineTypeEnum, TemplateEngine> templateEngineMap) {\n\t\tthis.templateEngineMap = templateEngineMap;\n\t}\n\n\t/**\n\t * \u6e32\u67d3\u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param templateContent \u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param context \u6e32\u67d3\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\n\t * @return \u6e32\u67d3\u5b8c\u6210\u540e\u7684\u5b57\u7b26\u4e32\n\t */\n\tpublic String render(TemplateEngineTypeEnum engineType, String templateContent, Map<String, Object> context) {\n\t\tif (StrUtil.isEmpty(templateContent)) {\n\t\t\treturn StrUtil.EMPTY;\n\t\t}\n\t\tTemplateEngine templateEngine = templateEngineMap.get(engineType);\n\t\tAssert.notNull(templateEngine, \"\u672a\u627e\u5230\u5bf9\u5e94\u7684\u6a21\u677f\u5f15\u64ce\uff1a{}\", engineType);\n\t\treturn templateEngine.render(templateContent, context);\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\nimport org.apache.velocity.VelocityContext;\nimport org.apache.velocity.app.Velocity;\nimport org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;\nimport org.springframework.stereotype.Component;\n\nimport java.io.StringWriter;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * Velocity \u7684\u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\n@Component\npublic class VelocityTemplateEngine implements TemplateEngine {\n\n\tstatic {\n\t\t// \u8bbe\u7f6evelocity\u8d44\u6e90\u52a0\u8f7d\u5668, \u4fdd\u7559\u6587\u4ef6\u52a0\u8f7dloader\n\t\tProperties prop = new Properties();\n\t\tprop.put(\"file.resource.loader.class\", ClasspathResourceLoader.class.getName());\n\t\tVelocity.init(prop);\n\t}\n\n\t@Override\n\tpublic TemplateEngineTypeEnum type() {\n\t\treturn TemplateEngineTypeEnum.VELOCITY;\n\t}\n\n\t@Override\n\tpublic String render(String templateContent, Map<String, Object> context) {\n\t\tVelocityContext velocityContext = new VelocityContext(context);\n\t\ttry (StringWriter sw = new StringWriter()) {\n\t\t\tVelocity.evaluate(velocityContext, sw, \"velocityTemplateEngine\", templateContent);\n\t\t\treturn sw.toString();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new TemplateRenderException(ex);\n\t\t}\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.exception;\n\n/**\n * \u6a21\u677f\u6e32\u67d3\u5931\u8d25\u5f02\u5e38\n *\n * @author hccake\n */\npublic class TemplateRenderException extends RuntimeException {\n\n\tpublic TemplateRenderException(Exception e) {\n\t\tsuper(e);\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.service.impl;\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport cn.hutool.core.io.IoUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.hccake.ballcat.codegen.constant.TemplateEntryTypeEnum;\nimport com.hccake.ballcat.codegen.engine.TemplateEngineDelegator;\nimport com.hccake.ballcat.codegen.engine.TemplateEngineTypeEnum;\nimport com.hccake.ballcat.codegen.model.bo.FileEntry;\nimport com.hccake.ballcat.codegen.model.bo.TableDetails;\nimport com.hccake.ballcat.codegen.model.bo.TemplateFile;\nimport com.hccake.ballcat.codegen.model.dto.GeneratorOptionDTO;\nimport com.hccake.ballcat.codegen.model.entity.TemplateEntry;\nimport com.hccake.ballcat.codegen.service.GeneratorService;\nimport com.hccake.ballcat.codegen.service.TableInfoQuery;\nimport com.hccake.ballcat.codegen.service.TemplateEntryService;\nimport com.hccake.ballcat.codegen.util.GenUtils;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * @author Hccake\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class GeneratorServiceImpl implements GeneratorService {\n\n\tprivate final TableInfoQuery tableInfoQuery;\n\n\tprivate final TemplateEntryService templateEntryService;\n\n\tprivate final TemplateEngineDelegator templateEngineDelegator;\n\n\t/**\n\t * \u751f\u6210\u4ee3\u7801\n\t * @param generatorOptionDTO \u4ee3\u7801\u751f\u6210\u7684\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\n\t * @return \u5df2\u751f\u6210\u7684\u4ee3\u7801\u6570\u636e\n\t */\n\t@Override\n\tpublic byte[] generatorCode(GeneratorOptionDTO generatorOptionDTO) throws IOException {\n\t\t// \u83b7\u53d6\u751f\u6210\u540e\u7684\u6587\u4ef6\u9879 map\n\t\tMap<String, FileEntry> map = getStringFileEntryMap(generatorOptionDTO);\n\n\t\ttry (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\t\t\tZipOutputStream zip = new ZipOutputStream(outputStream)) {\n\t\t\t// \u5faa\u73af\u5199\u5165\u6570\u636e\n\t\t\tfor (Map.Entry<String, FileEntry> entry : map.entrySet()) {\n\t\t\t\tFileEntry fileEntry = entry.getValue();\n\t\t\t\t// \u53ea\u5904\u7406\u6587\u4ef6\n\t\t\t\tif (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {\n\t\t\t\t\t// \u6dfb\u52a0\u5230zip\n\t\t\t\t\tString filePath = entry.getKey();\n\t\t\t\t\tzip.putNextEntry(new ZipEntry(filePath));\n\t\t\t\t\tIoUtil.write(zip, StandardCharsets.UTF_8, false, fileEntry.getContent());\n\t\t\t\t\tzip.closeEntry();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// \u624b\u52a8\u7ed3\u675f zip\uff0c\u9632\u6b62\u6587\u4ef6\u672b\u7aef\u672a\u88ab\u5199\u5165\n\t\t\tzip.finish();\n\t\t\treturn outputStream.toByteArray();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<FileEntry> previewCode(GeneratorOptionDTO generateOptionDTO) {\n\t\t// \u83b7\u53d6\u751f\u6210\u540e\u7684\u6587\u4ef6\u9879 map\n\t\tMap<String, FileEntry> map = getStringFileEntryMap(generateOptionDTO);\n\t\t// \u5ffd\u7565\u5927\u5c0f\u5199\u7684\u6392\u5e8f\n\t\treturn CollectionUtil.sort(map.values(),\n\t\t\t\tComparator.comparing(FileEntry::getFilename, String.CASE_INSENSITIVE_ORDER));\n\t}\n\n\t/**\n\t * \u83b7\u5f97\u751f\u6210\u540e\u7684 \u4ee3\u7801\u5730\u5740\uff1a\u4ee3\u7801\u6587\u4ef6 \u7684 map\n\t * @param generateOptionDTO \u751f\u6210\u53c2\u6570\n\t * @return Map<String, FileEntry>\n\t */\n\tprivate Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO) {\n\t\t// \u83b7\u53d6\u6a21\u677f\u6587\u4ef6\u4fe1\u606f\n\t\tList<TemplateEntry> templateEntryList = templateEntryService.listByIds(generateOptionDTO.getTemplateEntryIds());\n\t\tList<TemplateFile> templateFiles = templateEntryService.convertToTemplateFile(templateEntryList);\n\n\t\treturn getStringFileEntryMap(generateOptionDTO, templateFiles);\n\t}\n\n\t/**\n\t * \u83b7\u5f97\u751f\u6210\u540e\u7684 \u4ee3\u7801\u5730\u5740\uff1a\u4ee3\u7801\u6587\u4ef6 \u7684 map\n\t * @param generateOptionDTO \u751f\u6210\u53c2\u6570\n\t * @param templateFiles \u6a21\u677f\u6587\u4ef6\n\t * @return Map<String, FileEntry>\n\t */\n\tprivate Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO,\n\t\t\tList<TemplateFile> templateFiles) {\n\t\tMap<String, FileEntry> map = new HashMap<>(templateFiles.size());\n\n\t\tfor (String tableName : generateOptionDTO.getTableNames()) {\n\t\t\t// \u67e5\u8be2\u8868\u8be6\u60c5\n\t\t\tTableDetails tableDetails = tableInfoQuery.queryTableDetails(tableName);\n\t\t\t// \u751f\u6210\u4ee3\u7801\n\t\t\tMap<String, FileEntry> fileEntryMap = generatorCode(tableDetails, generateOptionDTO.getTablePrefix(),\n\t\t\t\t\tgenerateOptionDTO.getGenProperties(), templateFiles);\n\t\t\tmap.putAll(fileEntryMap);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * \u4ee3\u7801\u751f\u6210\n\t * @return Map<String, FileEntry>\n\t */\n\tpublic Map<String, FileEntry> generatorCode(TableDetails tableDetails, String tablePrefix,\n\t\t\tMap<String, String> customProperties, List<TemplateFile> templateFiles) {\n\n\t\tMap<String, FileEntry> map = new HashMap<>(templateFiles.size());\n\n\t\t// \u6a21\u677f\u6e32\u67d3\n\t\tMap<String, Object> context = GenUtils.getContext(tableDetails, tablePrefix, customProperties);\n\n\t\tfor (TemplateFile templateFile : templateFiles) {\n\t\t\tFileEntry fileEntry = new FileEntry();\n\t\t\tfileEntry.setType(templateFile.getType());\n\n\t\t\t// \u66ff\u6362\u8def\u5f84\u4e2d\u7684\u5360\u4f4d\u7b26\n\t\t\tString filename = StrUtil.format(templateFile.getFilename(), context);\n\t\t\tfileEntry.setFilename(filename);\n\n\t\t\tString parentFilePath = GenUtils.evaluateRealPath(templateFile.getParentFilePath(), context);\n\t\t\tfileEntry.setParentFilePath(parentFilePath);\n\n\t\t\t// \u5982\u679c\u662f\u6587\u4ef6\n\t\t\tif (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {\n\t\t\t\tfileEntry.setFilePath(GenUtils.concatFilePath(parentFilePath, filename));\n\t\t\t\t// \u6587\u4ef6\u5185\u5bb9\u6e32\u67d3\n\t\t\t\tTemplateEngineTypeEnum engineTypeEnum = TemplateEngineTypeEnum.of(templateFile.getEngineType());\n\t\t\t\tString content = templateEngineDelegator.render(engineTypeEnum, templateFile.getContent(), context);\n\t\t\t\tfileEntry.setContent(content);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString currentPath = GenUtils.evaluateRealPath(templateFile.getFilename(), context);\n\t\t\t\tfileEntry.setFilePath(GenUtils.concatFilePath(parentFilePath, currentPath));\n\t\t\t}\n\n\t\t\tmap.put(fileEntry.getFilePath(), fileEntry);\n\t\t}\n\n\t\treturn map;\n\t}\n\n}\n"], "fixing_code": ["package com.hccake.ballcat.codegen.engine;\n\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\nimport freemarker.core.TemplateClassResolver;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport lombok.SneakyThrows;\nimport org.springframework.stereotype.Component;\n\nimport java.io.StringWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n/**\n * Freemarker \u7684\u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\n@Component\npublic class FreemarkerTemplateEngine implements TemplateEngine {\n\n\tprivate final Configuration configuration;\n\n\tpublic FreemarkerTemplateEngine() {\n\t\tthis.configuration = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);\n\t\tconfiguration.setDefaultEncoding(StandardCharsets.UTF_8.name());\n\n\t\t// \u5b89\u5168\u5904\u7406 https://ackcent.com/blog/in-depth-freemarker-template-injection/\n\t\tconfiguration.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);\n\t}\n\n\t@Override\n\tpublic TemplateEngineTypeEnum type() {\n\t\treturn TemplateEngineTypeEnum.FREEMARKER;\n\t}\n\n\t@SneakyThrows(TemplateRenderException.class)\n\t@Override\n\tpublic String render(String templateContent, Map<String, Object> context) {\n\t\ttry {\n\t\t\tTemplate template = new Template(\"templateName\", templateContent, configuration);\n\t\t\ttry (StringWriter sw = new StringWriter()) {\n\t\t\t\ttemplate.process(context, sw);\n\t\t\t\treturn sw.toString();\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new TemplateRenderException(ex);\n\t\t}\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\n\nimport java.util.Map;\n\n/**\n * \u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\npublic interface TemplateEngine {\n\n\t/**\n\t * \u5f53\u524d\u6a21\u677f\u5f15\u64ce\u5bf9\u5e94\u7684\u7c7b\u578b\u679a\u4e3e\n\t * @return TemplateEngineTypeEnum\n\t */\n\tTemplateEngineTypeEnum type();\n\n\t/**\n\t * \u6e32\u67d3\u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param templateContent \u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param context \u6e32\u67d3\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\n\t * @return \u6e32\u67d3\u5b8c\u6210\u540e\u7684\u5b57\u7b26\u4e32\n\t */\n\tString render(String templateContent, Map<String, Object> context) throws TemplateRenderException;\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport cn.hutool.core.lang.Assert;\nimport cn.hutool.core.util.StrUtil;\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\n\nimport java.util.Map;\n\n/**\n * \u6a21\u677f\u5f15\u64ce\u7684\u59d4\u6258\u8005\n *\n * @author hccake\n */\npublic class TemplateEngineDelegator {\n\n\tpublic final Map<TemplateEngineTypeEnum, TemplateEngine> templateEngineMap;\n\n\tpublic TemplateEngineDelegator(Map<TemplateEngineTypeEnum, TemplateEngine> templateEngineMap) {\n\t\tthis.templateEngineMap = templateEngineMap;\n\t}\n\n\t/**\n\t * \u6e32\u67d3\u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param templateContent \u6a21\u677f\u5b57\u7b26\u4e32\n\t * @param context \u6e32\u67d3\u4f7f\u7528\u7684\u4e0a\u4e0b\u6587\n\t * @return \u6e32\u67d3\u5b8c\u6210\u540e\u7684\u5b57\u7b26\u4e32\n\t */\n\tpublic String render(TemplateEngineTypeEnum engineType, String templateContent, Map<String, Object> context)\n\t\t\tthrows TemplateRenderException {\n\t\tif (StrUtil.isEmpty(templateContent)) {\n\t\t\treturn StrUtil.EMPTY;\n\t\t}\n\t\tTemplateEngine templateEngine = templateEngineMap.get(engineType);\n\t\tAssert.notNull(templateEngine, \"\u672a\u627e\u5230\u5bf9\u5e94\u7684\u6a21\u677f\u5f15\u64ce\uff1a{}\", engineType);\n\t\treturn templateEngine.render(templateContent, context);\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.engine;\n\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\nimport org.apache.velocity.VelocityContext;\nimport org.apache.velocity.app.Velocity;\nimport org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;\nimport org.apache.velocity.util.introspection.SecureUberspector;\nimport org.springframework.stereotype.Component;\n\nimport java.io.StringWriter;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * Velocity \u7684\u6a21\u677f\u5f15\u64ce\n *\n * @author hccake\n */\n@Component\npublic class VelocityTemplateEngine implements TemplateEngine {\n\n\tstatic {\n\t\t// \u8bbe\u7f6evelocity\u8d44\u6e90\u52a0\u8f7d\u5668, \u4fdd\u7559\u6587\u4ef6\u52a0\u8f7dloader\n\t\tProperties prop = new Properties();\n\t\tprop.put(\"file.resource.loader.class\", ClasspathResourceLoader.class.getName());\n\t\t// \u5b89\u5168\u5904\u7406\n\t\tprop.put(\"runtime.introspector.uberspect\", SecureUberspector.class.getName());\n\t\tVelocity.init(prop);\n\t}\n\n\t@Override\n\tpublic TemplateEngineTypeEnum type() {\n\t\treturn TemplateEngineTypeEnum.VELOCITY;\n\t}\n\n\t@Override\n\tpublic String render(String templateContent, Map<String, Object> context) throws TemplateRenderException {\n\t\tVelocityContext velocityContext = new VelocityContext(context);\n\t\ttry (StringWriter sw = new StringWriter()) {\n\t\t\tVelocity.evaluate(velocityContext, sw, \"velocityTemplateEngine\", templateContent);\n\t\t\treturn sw.toString();\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tthrow new TemplateRenderException(ex);\n\t\t}\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.exception;\n\n/**\n * \u6a21\u677f\u6e32\u67d3\u5931\u8d25\u5f02\u5e38\n *\n * @author hccake\n */\npublic class TemplateRenderException extends Exception {\n\n\tpublic TemplateRenderException(Exception e) {\n\t\tsuper(e);\n\t}\n\n}\n", "package com.hccake.ballcat.codegen.service.impl;\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport cn.hutool.core.io.IoUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.hccake.ballcat.codegen.constant.TemplateEntryTypeEnum;\nimport com.hccake.ballcat.codegen.engine.TemplateEngineDelegator;\nimport com.hccake.ballcat.codegen.engine.TemplateEngineTypeEnum;\nimport com.hccake.ballcat.codegen.exception.TemplateRenderException;\nimport com.hccake.ballcat.codegen.model.bo.FileEntry;\nimport com.hccake.ballcat.codegen.model.bo.TableDetails;\nimport com.hccake.ballcat.codegen.model.bo.TemplateFile;\nimport com.hccake.ballcat.codegen.model.dto.GeneratorOptionDTO;\nimport com.hccake.ballcat.codegen.model.entity.TemplateEntry;\nimport com.hccake.ballcat.codegen.service.GeneratorService;\nimport com.hccake.ballcat.codegen.service.TableInfoQuery;\nimport com.hccake.ballcat.codegen.service.TemplateEntryService;\nimport com.hccake.ballcat.codegen.util.GenUtils;\nimport com.hccake.ballcat.common.core.exception.BusinessException;\nimport com.hccake.ballcat.common.model.result.SystemResultCode;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * @author Hccake\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class GeneratorServiceImpl implements GeneratorService {\n\n\tprivate final TableInfoQuery tableInfoQuery;\n\n\tprivate final TemplateEntryService templateEntryService;\n\n\tprivate final TemplateEngineDelegator templateEngineDelegator;\n\n\t/**\n\t * \u751f\u6210\u4ee3\u7801\n\t * @param generatorOptionDTO \u4ee3\u7801\u751f\u6210\u7684\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\n\t * @return \u5df2\u751f\u6210\u7684\u4ee3\u7801\u6570\u636e\n\t */\n\t@Override\n\tpublic byte[] generatorCode(GeneratorOptionDTO generatorOptionDTO) throws IOException {\n\t\t// \u83b7\u53d6\u751f\u6210\u540e\u7684\u6587\u4ef6\u9879 map\n\t\tMap<String, FileEntry> map = getStringFileEntryMap(generatorOptionDTO);\n\n\t\ttry (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\t\t\t\tZipOutputStream zip = new ZipOutputStream(outputStream)) {\n\t\t\t// \u5faa\u73af\u5199\u5165\u6570\u636e\n\t\t\tfor (Map.Entry<String, FileEntry> entry : map.entrySet()) {\n\t\t\t\tFileEntry fileEntry = entry.getValue();\n\t\t\t\t// \u53ea\u5904\u7406\u6587\u4ef6\n\t\t\t\tif (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {\n\t\t\t\t\t// \u6dfb\u52a0\u5230zip\n\t\t\t\t\tString filePath = entry.getKey();\n\t\t\t\t\tzip.putNextEntry(new ZipEntry(filePath));\n\t\t\t\t\tIoUtil.write(zip, StandardCharsets.UTF_8, false, fileEntry.getContent());\n\t\t\t\t\tzip.closeEntry();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// \u624b\u52a8\u7ed3\u675f zip\uff0c\u9632\u6b62\u6587\u4ef6\u672b\u7aef\u672a\u88ab\u5199\u5165\n\t\t\tzip.finish();\n\t\t\treturn outputStream.toByteArray();\n\t\t}\n\t}\n\n\t@Override\n\tpublic List<FileEntry> previewCode(GeneratorOptionDTO generateOptionDTO) {\n\t\t// \u83b7\u53d6\u751f\u6210\u540e\u7684\u6587\u4ef6\u9879 map\n\t\tMap<String, FileEntry> map = getStringFileEntryMap(generateOptionDTO);\n\t\t// \u5ffd\u7565\u5927\u5c0f\u5199\u7684\u6392\u5e8f\n\t\treturn CollectionUtil.sort(map.values(),\n\t\t\t\tComparator.comparing(FileEntry::getFilename, String.CASE_INSENSITIVE_ORDER));\n\t}\n\n\t/**\n\t * \u83b7\u5f97\u751f\u6210\u540e\u7684 \u4ee3\u7801\u5730\u5740\uff1a\u4ee3\u7801\u6587\u4ef6 \u7684 map\n\t * @param generateOptionDTO \u751f\u6210\u53c2\u6570\n\t * @return Map<String, FileEntry>\n\t */\n\tprivate Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO) {\n\t\t// \u83b7\u53d6\u6a21\u677f\u6587\u4ef6\u4fe1\u606f\n\t\tList<TemplateEntry> templateEntryList = templateEntryService.listByIds(generateOptionDTO.getTemplateEntryIds());\n\t\tList<TemplateFile> templateFiles = templateEntryService.convertToTemplateFile(templateEntryList);\n\n\t\treturn getStringFileEntryMap(generateOptionDTO, templateFiles);\n\t}\n\n\t/**\n\t * \u83b7\u5f97\u751f\u6210\u540e\u7684 \u4ee3\u7801\u5730\u5740\uff1a\u4ee3\u7801\u6587\u4ef6 \u7684 map\n\t * @param generateOptionDTO \u751f\u6210\u53c2\u6570\n\t * @param templateFiles \u6a21\u677f\u6587\u4ef6\n\t * @return Map<String, FileEntry>\n\t */\n\tprivate Map<String, FileEntry> getStringFileEntryMap(GeneratorOptionDTO generateOptionDTO,\n\t\t\tList<TemplateFile> templateFiles) {\n\t\tMap<String, FileEntry> map = new HashMap<>(templateFiles.size());\n\n\t\tfor (String tableName : generateOptionDTO.getTableNames()) {\n\t\t\t// \u67e5\u8be2\u8868\u8be6\u60c5\n\t\t\tTableDetails tableDetails = tableInfoQuery.queryTableDetails(tableName);\n\t\t\t// \u751f\u6210\u4ee3\u7801\n\t\t\tMap<String, FileEntry> fileEntryMap = generatorCode(tableDetails, generateOptionDTO.getTablePrefix(),\n\t\t\t\t\tgenerateOptionDTO.getGenProperties(), templateFiles);\n\t\t\tmap.putAll(fileEntryMap);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * \u4ee3\u7801\u751f\u6210\n\t * @return Map<String, FileEntry>\n\t */\n\tpublic Map<String, FileEntry> generatorCode(TableDetails tableDetails, String tablePrefix,\n\t\t\tMap<String, String> customProperties, List<TemplateFile> templateFiles) {\n\n\t\tMap<String, FileEntry> map = new HashMap<>(templateFiles.size());\n\n\t\t// \u6a21\u677f\u6e32\u67d3\n\t\tMap<String, Object> context = GenUtils.getContext(tableDetails, tablePrefix, customProperties);\n\n\t\tfor (TemplateFile templateFile : templateFiles) {\n\t\t\tFileEntry fileEntry = new FileEntry();\n\t\t\tfileEntry.setType(templateFile.getType());\n\n\t\t\t// \u66ff\u6362\u8def\u5f84\u4e2d\u7684\u5360\u4f4d\u7b26\n\t\t\tString templateFilename = templateFile.getFilename();\n\t\t\tString filename = StrUtil.format(templateFilename, context);\n\t\t\tfileEntry.setFilename(filename);\n\n\t\t\tString parentFilePath = GenUtils.evaluateRealPath(templateFile.getParentFilePath(), context);\n\t\t\tfileEntry.setParentFilePath(parentFilePath);\n\n\t\t\t// \u5982\u679c\u662f\u6587\u4ef6\n\t\t\tif (TemplateEntryTypeEnum.FILE.getType().equals(fileEntry.getType())) {\n\t\t\t\tString filePath = GenUtils.concatFilePath(parentFilePath, filename);\n\t\t\t\tfileEntry.setFilePath(filePath);\n\t\t\t\t// \u6587\u4ef6\u5185\u5bb9\u6e32\u67d3\n\t\t\t\tTemplateEngineTypeEnum engineTypeEnum = TemplateEngineTypeEnum.of(templateFile.getEngineType());\n\n\t\t\t\ttry {\n\t\t\t\t\tString content = templateEngineDelegator.render(engineTypeEnum, templateFile.getContent(), context);\n\t\t\t\t\tfileEntry.setContent(content);\n\t\t\t\t}\n\t\t\t\tcatch (TemplateRenderException ex) {\n\t\t\t\t\tString errorMessage = StrUtil.format(\"\u6a21\u677f\u6e32\u67d3\u5f02\u5e38\uff0c\u6a21\u677f\u6587\u4ef6\u540d\uff1a\u3010{}\u3011\uff0c\u9519\u8bef\u8be6\u60c5\uff1a{}\", templateFilename,\n\t\t\t\t\t\t\tex.getMessage());\n\t\t\t\t\tthrow new BusinessException(SystemResultCode.SERVER_ERROR.getCode(), errorMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString currentPath = GenUtils.evaluateRealPath(templateFilename, context);\n\t\t\t\tfileEntry.setFilePath(GenUtils.concatFilePath(parentFilePath, currentPath));\n\t\t\t}\n\n\t\t\tmap.put(fileEntry.getFilePath(), fileEntry);\n\t\t}\n\n\t\treturn map;\n\t}\n\n}\n"], "filenames": ["ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/engine/FreemarkerTemplateEngine.java", "ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/engine/TemplateEngine.java", "ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/engine/TemplateEngineDelegator.java", "ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/engine/VelocityTemplateEngine.java", "ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/exception/TemplateRenderException.java", "ballcat-codegen-backend/src/main/java/com/hccake/ballcat/codegen/service/impl/GeneratorServiceImpl.java"], "buggy_code_start_loc": [3, 1, 4, 6, 8, 8], "buggy_code_end_loc": [25, 25, 28, 35, 9, 152], "fixing_code_start_loc": [4, 2, 5, 7, 8, 9], "fixing_code_end_loc": [30, 27, 30, 38, 9, 165], "type": "CWE-20", "message": "Ballcat Codegen provides the function of online editing code to generate templates. In versions prior to 1.0.0.beta.2, attackers can implement remote code execution through malicious code injection of the template engine. This happens because Velocity and freemarker templates are introduced but input verification is not done. The fault is rectified in version 1.0.0.beta.2.", "other": {"cve": {"id": "CVE-2022-24881", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-26T16:15:47.737", "lastModified": "2022-05-06T13:14:40.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Ballcat Codegen provides the function of online editing code to generate templates. In versions prior to 1.0.0.beta.2, attackers can implement remote code execution through malicious code injection of the template engine. This happens because Velocity and freemarker templates are introduced but input verification is not done. The fault is rectified in version 1.0.0.beta.2."}, {"lang": "es", "value": "Ballcat Codegen proporciona la funci\u00f3n de edici\u00f3n de c\u00f3digo en l\u00ednea para generar plantillas. En versiones anteriores a 1.0.0.beta.2, los atacantes pueden implementar una ejecuci\u00f3n de c\u00f3digo remota mediante una inyecci\u00f3n de c\u00f3digo malicioso del motor de plantillas. Esto sucede porque son introducidas plantillas Velocity y freemarker pero no es realizada la verificaci\u00f3n de la entrada. El fallo ha sido rectificado en la versi\u00f3n 1.0.0.beta.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ballcat:codegen:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "41037930-63CD-4494-BE0B-3F616730F684"}]}]}], "references": [{"url": "https://github.com/ballcat-projects/ballcat-codegen/commit/84a7cb38daf0295b93aba21d562ec627e4eb463b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ballcat-projects/ballcat-codegen/issues/5", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/ballcat-projects/ballcat-codegen/security/advisories/GHSA-fv3m-xhqw-9m79", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ballcat-projects/ballcat-codegen/commit/84a7cb38daf0295b93aba21d562ec627e4eb463b"}}