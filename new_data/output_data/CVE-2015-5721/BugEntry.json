{"buggy_code": ["<?php\n\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * Templates Controller\n *\n * @property Template $Templates\n */\n\nclass TemplatesController extends AppController {\n\tpublic $components = array('Security' ,'RequestHandler');\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 50,\n\t\t\t'order' => array(\n\t\t\t\t\t'Template.id' => 'desc'\n\t\t\t)\n\t);\n\n\tpublic function beforeFilter() { // TODO REMOVE\n\t\tparent::beforeFilter();\n\t\t$this->Security->unlockedActions = array('saveElementSorting', 'populateEventFromTemplate', 'uploadFile', 'deleteTemporaryFile');\n\t}\n\t\n\tpublic function fetchFormFromTemplate($id) {\n\t\t\n\t}\n\t\n\tpublic function index() {\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['OR'] = array('org' => $this->Auth->user('org'), 'share' => true);\n\t\t}\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$this->paginate = Set::merge($this->paginate,array(\n\t\t\t\t\t'conditions' =>\n\t\t\t\t\tarray(\"OR\" => array(\n\t\t\t\t\t\t\tarray('org' => $this->Auth->user('org')),\n\t\t\t\t\t\t\tarray('share' => true),\n\t\t\t))));\n\t\t}\n\t\t$this->set('list', $this->paginate());\n\t}\n\t\n\tpublic function edit($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\t$this->set('mayModify', true);\n\t\t\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->request->data['Template']['id'] = $id;\n\t\t\t\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$oldTags = $this->TemplateTag->find('all', array(\n\t\t\t\t\t'conditions' => array('template_id' => $id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'Tag'\n\t\t\t\t));\n\n\t\t\t\t$newTags = $this->TemplateTag->Tag->find('all', array(\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'conditions' => array('name' => $tagArray)\n\t\t\t\t));\n\t\t\t\t\n\t\t\t\tforeach($oldTags as $k => $oT) {\n\t\t\t\t\tif (!in_array($oT['Tag'], $newTags)) $this->TemplateTag->delete($oT['TemplateTag']['id']); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach($newTags as $k => $nT) {\n\t\t\t\t\tif (!in_array($nT['Tag'], $oldTags)) {\n\t\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $nT['Tag']['id'])));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be edited.');\n\t\t\t}\n\t\t}\n\t\t$this->request->data = $template;\n\n\t\t// get all existing tags for the tag add dropdown menu\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t\n\t\t//get all tags currently assigned to the event\n\t\t$currentTags = $this->Template->TemplateTag->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'contain' => 'Tag',\n\t\t\t'conditions' => array('template_id' => $id),\n\t\t));\n\t\t$this->set('currentTags', $currentTags);\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function view($id) {\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($id, $this->Auth->user(), false)) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\tif ($this->Template->checkAuthorisation($id, $this->Auth->user(), true)) $this->set('mayModify', true);\n\t\telse $this->set('mayModify', false);\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'id' => $id,\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement',\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag',\n\t\t\t\t),\n\t\t\t),\n\t\t));\n\t\tif (empty($template)) throw new NotFoundException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\t$tagArray = array();\n\t\tforeach($template['TemplateTag'] as $tt) {\n\t\t\t$tagArray[] = $tt;\n\t\t}\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t}\n\t\n\tpublic function add() {\n\t\tif ($this->request->is('post')) {\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$this->loadModel('Tag');\n\t\t\t\tforeach ($tagArray as $t) {\n\t\t\t\t\t$tag = $this->Tag->find('first', array(\n\t\t\t\t\t\t'conditions' => array('name' => $t),\n\t\t\t\t\t\t'fields' => array('id', 'name'),\n\t\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t));\n\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $tag['Tag']['id'])));\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be created.');\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function saveElementSorting() {\n\t\t// check if user can edit the template\n\t\t$this->autoRender = false;\n\t\t$this->request->onlyAllow('ajax');\n\t\t$orderedElements = $this->request->data;\n\t\tforeach($orderedElements as &$e) {\n\t\t\t$e = ltrim($e, 'id_');\n\t\t}\n\t\t$extractedIds = array();\n\t\tforeach ($orderedElements as $element) $extractedIds[] = $element;\n\t\t$template_id = $this->Template->TemplateElement->find('first', array(\n\t\t\t'conditions' => array('id' => $extractedIds),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'template_id'),\n\t\t));\n\t\t\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($template_id['TemplateElement']['template_id'], $this->Auth->user(), true)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200));\n\t\t\n\t\t$elements = $this->Template->TemplateElement->find('all', array(\n\t\t\t\t'conditions' => array('template_id' => $template_id['TemplateElement']['template_id']),\n\t\t\t\t'recursive' => -1,\n\t\t));\n\t\tif (empty($elements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, the supplied template elements don\\'t exist, or you are not eligible to edit them.')),'status'=>200));\n\t\tif (count($elements) != count($orderedElements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Incomplete template element list passed as argument. Expecting ' . count($elements) . ' elements, only received positions for ' . count($orderedElements) . '.')),'status'=>200));\n\t\t$template_id = $elements[0]['TemplateElement']['template_id'];\n\t\t\n\t\tforeach ($elements as &$e) {\n\t\t\tif ($template_id !== $e['TemplateElement']['template_id']) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Cannot sort template elements belonging to separate templates. You should never see this message during legitimate use.')),'status'=>200));\n\t\t\tforeach ($orderedElements as $k => $orderedElement) {\n\t\t\t\tif ($orderedElement == $e['TemplateElement']['id']) {\n\t\t\t\t\t$e['TemplateElement']['position'] = $k+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->Template->TemplateElement->saveMany($elements);\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Elements repositioned.')),'status'=>200));\n\t}\n\t\n\tpublic function delete($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action can only be invoked via a post request.');\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\tif ($this->Template->delete($id, true)) {\n\t\t\t$this->Session->setFlash('Template deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t} else {\n\t\t\t$this->Session->setFlash('The template could not be deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t}\n\t}\n\t\n\n\tpublic function templateChoices($id) {\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first' ,array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('orgc', 'id'),\n\t\t));\n\t\tif (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc'] != $this->Auth->user('org'))) throw new NotFoundException('Event not found or you are not authorised to edit it.');\n\t\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin) {\n\t\t\t$conditions['OR'] = array('Template.org' => $this->Auth->user('org'), 'Template.share' => true);\n\t\t}\n\t\t$templates = $this->Template->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions\n\t\t));\n\t\t$this->set('templates', $templates);\n\t\t$this->set('id', $id);\n\t\t$this->render('ajax/template_choices');\n\t}\n\t\n\tpublic function populateEventFromTemplate($template_id, $event_id) {\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array('Template.id' => $template_id),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement' => array(\n\t\t\t\t\t'TemplateElementAttribute',\n\t\t\t\t\t'TemplateElementText',\n\t\t\t\t\t'TemplateElementFile'\t\n\t\t\t\t),\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag'\n\t\t\t\t)\n\t\t\t),\n\t\t));\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first', array(\n\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'orgc', 'distribution'),\n\t\t));\n\t\t\n\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\tif (empty($template)) throw new MethodNotAllowedException('Template not found or you are not authorised to edit it.');\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif ($template['Template']['org'] != $this->Auth->user('org') && !$template['Template']['share']) throw new MethodNotAllowedException('Template not found or you are not authorised to use it.');\t\n\t\t}\n\t\t\n\t\t$this->set('template_id', $template_id);\n\t\t$this->set('event_id', $event_id);\n\t\tif ($this->request->is('post')) {\n\t\t\t$errors = array();\n\t\t\t$this->set('template', $this->request->data);\n\t\t\t$result = $this->Event->Attribute->checkTemplateAttributes($template, $this->request->data, $event_id, $event['Event']['distribution']);\n\t\t\tif (isset($this->request->data['Template']['modify']) || !empty($result['errors'])) {\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('templateData', $template);\n\t\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t\t} else {\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('attributes', $result['attributes']);\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('distributionLevels', $this->Event->distributionLevels);\n\t\t\t\t$this->render('populate_event_from_template_attributes');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->set('templateData', $template);\n\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t}\n\t}\n\t\n\tpublic function submitEventPopulation($template_id, $event_id) {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->loadModel('Event');\n\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'fields' => array('id', 'orgc', 'distribution', 'published'),\n\t\t\t\t\t'contain' => 'EventTag',\n\t\t\t));\n\t\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\t}\n\n\t\t\t$template = $this->Template->find('first', array(\n\t\t\t\t\t'id' => $template_id,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'TemplateTag',\n\t\t\t\t\t'fields' => 'id',\n\t\t\t));\n\t\t\t\n\t\t\tforeach ($template['TemplateTag'] as $tag) {\n\t\t\t\t$exists = false;\n\t\t\t\tforeach ($event['EventTag'] as $eventTag) {\n\t\t\t\t\tif ($eventTag['tag_id'] == $tag['tag_id']) $exists = true;\n\t\t\t\t}\n\t\t\t\tif (!$exists) {\n\t\t\t\t\t$this->Event->EventTag->create();\n\t\t\t\t\t$this->Event->EventTag->save(array('event_id' => $event_id, 'tag_id' => $tag['tag_id']));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($this->request->data['Template']['attributes'])) {\n\t\t\t\t$attributes = unserialize($this->request->data['Template']['attributes']);\n\t\t\t\t$this->loadModel('Attribute');\n\t\t\t\t$fails = 0;\n\t\t\t\tforeach($attributes as $k => &$attribute) {\n\t\t\t\t\tif (isset($attribute['data'])) {\n\t\t\t\t\t\t$file = new File(APP . 'tmp/files/' . $attribute['data']);\n\t\t\t\t\t\t$content = $file->read();\n\t\t\t\t\t\t$attribute['data'] = base64_encode($content);\n\t\t\t\t\t\t$file->delete();\n\t\t\t\t\t}\n\t\t\t\t\t$this->Attribute->create();\n\t\t\t\t\tif (!$this->Attribute->save(array('Attribute' => $attribute))) $fails++;\n\t\t\t\t}\n\t\t\t\t$count = $k + 1;\n\t\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('Event.id' => $event_id),\n\t\t\t\t\t'recursive' => -1\n\t\t\t\t));\n\t\t\t\t$event['Event']['published'] = 0;\n\t\t\t\t$date = new DateTime();\n\t\t\t\t$event['Event']['timestamp'] = $date->getTimestamp();\n\t\t\t\t$this->Event->save($event);\n\t\t\t\tif ($fails == 0) $this->Session->setFlash(__('Event populated, ' . $count . ' attributes successfully created.'));\n\t\t\t\telse $this->Session->setFlash(__('Event populated, but ' . $fails . ' attributes could not be saved.'));\n\t\t\t\t$this->redirect(array('controller' => 'events', 'action' => 'view', $event_id));\n\t\t\t} else { \n\t\t\t\tthrow new MethodNotAllowedException('No attributes submitted for creation.');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t}\n\t\n\tpublic function uploadFile($elementId, $batch) {\n\t\t$this->layout = 'iframe';\n\t\t$this->set('batch', $batch);\n\t\t$this->set('element_id', $elementId);\n\t\tif ($this->request->is('get')) {\n\t\t\t$this->set('element_id', $elementId);\n\t\t} else if ($this->request->is('post')) {\n\t\t\t$fileArray = array();\n\t\t\t$filenames = array();\n\t\t\t$tmp_names = array();\n\t\t\t$element_ids = array();\n\t\t\t$result = array();\n\t\t\t$added = 0;\n\t\t\t$failed = 0;\n\t\t\t// filename checks\n\t\t\tforeach ($this->request->data['Template']['file'] as $k => $file) {\n\t\t\t\tif ($file['size'] > 0 && $file['error'] == 0) {\n\t\t\t\t\tif (preg_match('@^[\\w\\-. ]+$@', $file['name'])) {\n\t\t\t\t\t\t$fn = $this->Template->generateRandomFileName();\n\t\t\t\t\t\tmove_uploaded_file($file['tmp_name'], APP . 'tmp/files/' . $fn);\n\t\t\t\t\t\t$filenames[] =$file['name'];\n\t\t\t\t\t\t$fileArray[] = array('filename' => $file['name'], 'tmp_name' => $fn, 'element_id' => $elementId);\n\t\t\t\t\t\t$added++;\n\t\t\t\t\t} else $failed++;\n\t\t\t\t} else $failed ++;\n\t\t\t}\n\t\t\t$result = $added . ' files uploaded.';\n\t\t\tif ($failed) {\n\t\t\t\t$result .= ' ' . $failed . ' files either failed to upload, or were empty.';\n\t\t\t\t$this->set('upload_error', true);\n\t\t\t} else {\n\t\t\t\t$this->set('upload_error', false);\n\t\t\t}\n\t\t\t\n\t\t\t$this->set('result', $result);\n\t\t\t$this->set('filenames', $filenames);\n\t\t\t$this->set('fileArray', json_encode($fileArray));\n\t\t}\n\t}\n\t\n\tprivate function __combineArrays($array, $array2) {\n\t\tforeach ($array2 as $element) {\n\t\t\tif (!in_array($element, $array)) {\n\t\t\t\t$array[] = $element;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n\n\tpublic function deleteTemporaryFile($filename) {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action is restricted to accepting POST requests only.');\n\t\t//if (!$this->request->is('ajax')) throw new MethodNotAllowedException('This action is only accessible through AJAX.');\n\t\t$this->autoRender = false;\n\t\tif (preg_match('/^[a-zA-Z0-9]{12}$/', $filename)) {\n\t\t\t$file = new File(APP . 'tmp/files/' . $filename);\n\t\t\tif ($file->exists()) {\n\t\t\t\t$file->delete();\n\t\t\t}\n\t\t}\n\t}\n}\n", "<div class=\"index\">\n\t<h2>Populate From Template Results</h2>\n\t<p>Below you can see the attributes that are to be created based on the data that you have entered into the template. If you are satisfied with the result, click \"Finalise\". Otherwise, click \"Modify\".</p>\n\t<table class=\"table table-striped table-hover table-condensed\">\n\t<tr>\n\t\t\t<th>Category</th>\n\t\t\t<th>Type</th>\n\t\t\t<th>Value</th>\n\t\t\t<th>Comment</th>\n\t\t\t<th>IDS</th>\n\t\t\t<th>Distribution</th>\n\t</tr><?php\nforeach ($attributes as $item):?>\n\t<tr>\n\t\t<td><?php echo h($item['category']); ?></td>\n\t\t<td><?php echo h($item['type']); ?></td>\n\t\t<td><?php echo h($item['value']); ?></td>\n\t\t<td><?php echo h($item['comment']); ?></td>\n\t\t<td><?php echo ($item['to_ids'] ? 'Yes' : 'No'); ?></td>\n\t\t<td><?php echo $distributionLevels[$item['distribution']]; ?></td>\n\t</tr><?php\nendforeach;?>\n\t</table>\n\t<div style=\"float:left;\">\n\t\t<?php echo $this->Form->create('Template', array('url' => '/templates/submitEventPopulation/' . $template_id . '/' . $event_id));?>\n\t\t\t<fieldset>\n\t\t\t\t<?php \n\t\t\t\t\techo $this->Form->input('attributes', array(\n\t\t\t\t\t\t\t'id' => 'attributes',\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => serialize($attributes),\n\t\t\t\t\t));\n\t\t\t\t?>\n\t\t\t</fieldset>\n\t\t<?php\n\t\techo $this->Form->button('Finalise', array('class' => 'btn btn-primary'));\n\t\techo $this->Form->end();\n\t\t?>\n\t</div>\n\t<div style=\"float:left;width:10px;\">&nbsp;</div>\n\t<div>\n\t\t<?php echo $this->Form->create('Template');?>\n\t\t\t<fieldset>\n\t\t\t\t<?php \n\t\t\t\t\tforeach ($template['Template'] as $k => $v) {\n\t\t\t\t\t\tif (strpos($k, 'ile_')) $v = serialize($v);\n\t\t\t\t\t\techo $this->Form->input($k, array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => $v,\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\techo $this->Form->input('modify', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => true,\n\t\t\t\t\t));\n\t\t\t\t\techo $this->Form->input('errors', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => serialize($errors),\n\t\t\t\t\t));\n\t\t\t\t\techo $this->Form->input('fileArray', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => $fileArray,\n\t\t\t\t\t));\n\t\t\t\t?>\n\t\t\t</fieldset>\n\t\t<?php\n\t\techo $this->Form->button('Modify', array('class' => 'btn btn-inverse'));\n\t\techo $this->Form->end();\n\t\t?>\n\t</div>\n\n</div>\n<?php \n\techo $this->element('side_menu', array('menuList' => 'regexp', 'menuItem' => 'index'));\n?>\n"], "fixing_code": ["<?php\n\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * Templates Controller\n *\n * @property Template $Templates\n */\n\nclass TemplatesController extends AppController {\n\tpublic $components = array('Security' ,'RequestHandler');\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 50,\n\t\t\t'order' => array(\n\t\t\t\t\t'Template.id' => 'desc'\n\t\t\t)\n\t);\n\n\tpublic function beforeFilter() { // TODO REMOVE\n\t\tparent::beforeFilter();\n\t\t$this->Security->unlockedActions = array('uploadFile', 'deleteTemporaryFile');\n\t}\n\t\n\t\n\tpublic function index() {\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['OR'] = array('org' => $this->Auth->user('org'), 'share' => true);\n\t\t}\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$this->paginate = Set::merge($this->paginate,array(\n\t\t\t\t\t'conditions' =>\n\t\t\t\t\tarray(\"OR\" => array(\n\t\t\t\t\t\t\tarray('org' => $this->Auth->user('org')),\n\t\t\t\t\t\t\tarray('share' => true),\n\t\t\t))));\n\t\t}\n\t\t$this->set('list', $this->paginate());\n\t}\n\t\n\tpublic function edit($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\t$this->set('mayModify', true);\n\t\t\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->request->data['Template']['id'] = $id;\n\t\t\t\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$oldTags = $this->TemplateTag->find('all', array(\n\t\t\t\t\t'conditions' => array('template_id' => $id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'Tag'\n\t\t\t\t));\n\n\t\t\t\t$newTags = $this->TemplateTag->Tag->find('all', array(\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'conditions' => array('name' => $tagArray)\n\t\t\t\t));\n\t\t\t\t\n\t\t\t\tforeach($oldTags as $k => $oT) {\n\t\t\t\t\tif (!in_array($oT['Tag'], $newTags)) $this->TemplateTag->delete($oT['TemplateTag']['id']); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach($newTags as $k => $nT) {\n\t\t\t\t\tif (!in_array($nT['Tag'], $oldTags)) {\n\t\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $nT['Tag']['id'])));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be edited.');\n\t\t\t}\n\t\t}\n\t\t$this->request->data = $template;\n\n\t\t// get all existing tags for the tag add dropdown menu\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t\n\t\t//get all tags currently assigned to the event\n\t\t$currentTags = $this->Template->TemplateTag->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'contain' => 'Tag',\n\t\t\t'conditions' => array('template_id' => $id),\n\t\t));\n\t\t$this->set('currentTags', $currentTags);\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function view($id) {\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($id, $this->Auth->user(), false)) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\tif ($this->Template->checkAuthorisation($id, $this->Auth->user(), true)) $this->set('mayModify', true);\n\t\telse $this->set('mayModify', false);\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'id' => $id,\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement',\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag',\n\t\t\t\t),\n\t\t\t),\n\t\t));\n\t\tif (empty($template)) throw new NotFoundException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\t$tagArray = array();\n\t\tforeach($template['TemplateTag'] as $tt) {\n\t\t\t$tagArray[] = $tt;\n\t\t}\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t}\n\t\n\tpublic function add() {\n\t\tif (!$this->userRole['perm_template']) throw new MethodNotAllowedException('You are not authorised to do that.');\n\t\tif ($this->request->is('post')) {\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$this->loadModel('Tag');\n\t\t\t\tforeach ($tagArray as $t) {\n\t\t\t\t\t$tag = $this->Tag->find('first', array(\n\t\t\t\t\t\t'conditions' => array('name' => $t),\n\t\t\t\t\t\t'fields' => array('id', 'name'),\n\t\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t));\n\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $tag['Tag']['id'])));\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be created.');\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function saveElementSorting() {\n\t\t// check if user can edit the template\n\t\t$this->autoRender = false;\n\t\t$this->request->onlyAllow('ajax');\n\t\t$orderedElements = $this->request->data;\n\t\tforeach($orderedElements as &$e) {\n\t\t\t$e = ltrim($e, 'id_');\n\t\t}\n\t\t$extractedIds = array();\n\t\tforeach ($orderedElements as $element) $extractedIds[] = $element;\n\t\t$template_id = $this->Template->TemplateElement->find('first', array(\n\t\t\t'conditions' => array('id' => $extractedIds),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'template_id'),\n\t\t));\n\t\t\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($template_id['TemplateElement']['template_id'], $this->Auth->user(), true)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200));\n\t\t\n\t\t$elements = $this->Template->TemplateElement->find('all', array(\n\t\t\t\t'conditions' => array('template_id' => $template_id['TemplateElement']['template_id']),\n\t\t\t\t'recursive' => -1,\n\t\t));\n\t\tif (empty($elements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, the supplied template elements don\\'t exist, or you are not eligible to edit them.')),'status'=>200));\n\t\tif (count($elements) != count($orderedElements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Incomplete template element list passed as argument. Expecting ' . count($elements) . ' elements, only received positions for ' . count($orderedElements) . '.')),'status'=>200));\n\t\t$template_id = $elements[0]['TemplateElement']['template_id'];\n\t\t\n\t\tforeach ($elements as &$e) {\n\t\t\tif ($template_id !== $e['TemplateElement']['template_id']) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Cannot sort template elements belonging to separate templates. You should never see this message during legitimate use.')),'status'=>200));\n\t\t\tforeach ($orderedElements as $k => $orderedElement) {\n\t\t\t\tif ($orderedElement == $e['TemplateElement']['id']) {\n\t\t\t\t\t$e['TemplateElement']['position'] = $k+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->Template->TemplateElement->saveMany($elements);\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Elements repositioned.')),'status'=>200));\n\t}\n\t\n\tpublic function delete($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action can only be invoked via a post request.');\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\tif ($this->Template->delete($id, true)) {\n\t\t\t$this->Session->setFlash('Template deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t} else {\n\t\t\t$this->Session->setFlash('The template could not be deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t}\n\t}\n\t\n\n\tpublic function templateChoices($id) {\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first' ,array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('orgc', 'id'),\n\t\t));\n\t\tif (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc'] != $this->Auth->user('org'))) throw new NotFoundException('Event not found or you are not authorised to edit it.');\n\t\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin) {\n\t\t\t$conditions['OR'] = array('Template.org' => $this->Auth->user('org'), 'Template.share' => true);\n\t\t}\n\t\t$templates = $this->Template->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions\n\t\t));\n\t\t$this->set('templates', $templates);\n\t\t$this->set('id', $id);\n\t\t$this->render('ajax/template_choices');\n\t}\n\t\n\tpublic function populateEventFromTemplate($template_id, $event_id) {\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array('Template.id' => $template_id),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement' => array(\n\t\t\t\t\t'TemplateElementAttribute',\n\t\t\t\t\t'TemplateElementText',\n\t\t\t\t\t'TemplateElementFile'\t\n\t\t\t\t),\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag'\n\t\t\t\t)\n\t\t\t),\n\t\t));\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first', array(\n\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'orgc', 'distribution'),\n\t\t));\n\t\t\n\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\tif (empty($template)) throw new MethodNotAllowedException('Template not found or you are not authorised to edit it.');\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif ($template['Template']['org'] != $this->Auth->user('org') && !$template['Template']['share']) throw new MethodNotAllowedException('Template not found or you are not authorised to use it.');\t\n\t\t}\n\t\t\n\t\t$this->set('template_id', $template_id);\n\t\t$this->set('event_id', $event_id);\n\t\tif ($this->request->is('post')) {\n\t\t\t$errors = array();\n\t\t\t$this->set('template', $this->request->data);\n\t\t\t$result = $this->Event->Attribute->checkTemplateAttributes($template, $this->request->data, $event_id, $event['Event']['distribution']);\n\t\t\tif (isset($this->request->data['Template']['modify']) || !empty($result['errors'])) {\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('templateData', $template);\n\t\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t\t} else {\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('attributes', $result['attributes']);\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('distributionLevels', $this->Event->distributionLevels);\n\t\t\t\t$this->render('populate_event_from_template_attributes');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->set('templateData', $template);\n\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t}\n\t}\n\t\n\tpublic function submitEventPopulation($template_id, $event_id) {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->loadModel('Event');\n\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'fields' => array('id', 'orgc', 'distribution', 'published'),\n\t\t\t\t\t'contain' => 'EventTag',\n\t\t\t));\n\t\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\t}\n\n\t\t\t$template = $this->Template->find('first', array(\n\t\t\t\t\t'id' => $template_id,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'TemplateTag',\n\t\t\t\t\t'fields' => 'id',\n\t\t\t));\n\t\t\t\n\t\t\tforeach ($template['TemplateTag'] as $tag) {\n\t\t\t\t$exists = false;\n\t\t\t\tforeach ($event['EventTag'] as $eventTag) {\n\t\t\t\t\tif ($eventTag['tag_id'] == $tag['tag_id']) $exists = true;\n\t\t\t\t}\n\t\t\t\tif (!$exists) {\n\t\t\t\t\t$this->Event->EventTag->create();\n\t\t\t\t\t$this->Event->EventTag->save(array('event_id' => $event_id, 'tag_id' => $tag['tag_id']));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($this->request->data['Template']['attributes'])) {\n\t\t\t\t$attributes = json_decode($this->request->data['Template']['attributes'], true);\n\t\t\t\t$this->loadModel('Attribute');\n\t\t\t\t$fails = 0;\n\t\t\t\tforeach($attributes as $k => &$attribute) {\n\t\t\t\t\tif (isset($attribute['data'])) {\n\t\t\t\t\t\t$file = new File(APP . 'tmp/files/' . $attribute['data']);\n\t\t\t\t\t\t$content = $file->read();\n\t\t\t\t\t\t$attribute['data'] = base64_encode($content);\n\t\t\t\t\t\t$file->delete();\n\t\t\t\t\t}\n\t\t\t\t\t$this->Attribute->create();\n\t\t\t\t\tif (!$this->Attribute->save(array('Attribute' => $attribute))) $fails++;\n\t\t\t\t}\n\t\t\t\t$count = $k + 1;\n\t\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('Event.id' => $event_id),\n\t\t\t\t\t'recursive' => -1\n\t\t\t\t));\n\t\t\t\t$event['Event']['published'] = 0;\n\t\t\t\t$date = new DateTime();\n\t\t\t\t$event['Event']['timestamp'] = $date->getTimestamp();\n\t\t\t\t$this->Event->save($event);\n\t\t\t\tif ($fails == 0) $this->Session->setFlash(__('Event populated, ' . $count . ' attributes successfully created.'));\n\t\t\t\telse $this->Session->setFlash(__('Event populated, but ' . $fails . ' attributes could not be saved.'));\n\t\t\t\t$this->redirect(array('controller' => 'events', 'action' => 'view', $event_id));\n\t\t\t} else { \n\t\t\t\tthrow new MethodNotAllowedException('No attributes submitted for creation.');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t}\n\t\n\tpublic function uploadFile($elementId, $batch) {\n\t\t$this->layout = 'iframe';\n\t\t$this->set('batch', $batch);\n\t\t$this->set('element_id', $elementId);\n\t\tif ($this->request->is('get')) {\n\t\t\t$this->set('element_id', $elementId);\n\t\t} else if ($this->request->is('post')) {\n\t\t\t$fileArray = array();\n\t\t\t$filenames = array();\n\t\t\t$tmp_names = array();\n\t\t\t$element_ids = array();\n\t\t\t$result = array();\n\t\t\t$added = 0;\n\t\t\t$failed = 0;\n\t\t\t// filename checks\n\t\t\tforeach ($this->request->data['Template']['file'] as $k => $file) {\n\t\t\t\tif ($file['size'] > 0 && $file['error'] == 0) {\n\t\t\t\t\tif (preg_match('@^[\\w\\-. ]+$@', $file['name'])) {\n\t\t\t\t\t\t$fn = $this->Template->generateRandomFileName();\n\t\t\t\t\t\tmove_uploaded_file($file['tmp_name'], APP . 'tmp/files/' . $fn);\n\t\t\t\t\t\t$filenames[] =$file['name'];\n\t\t\t\t\t\t$fileArray[] = array('filename' => $file['name'], 'tmp_name' => $fn, 'element_id' => $elementId);\n\t\t\t\t\t\t$added++;\n\t\t\t\t\t} else $failed++;\n\t\t\t\t} else $failed ++;\n\t\t\t}\n\t\t\t$result = $added . ' files uploaded.';\n\t\t\tif ($failed) {\n\t\t\t\t$result .= ' ' . $failed . ' files either failed to upload, or were empty.';\n\t\t\t\t$this->set('upload_error', true);\n\t\t\t} else {\n\t\t\t\t$this->set('upload_error', false);\n\t\t\t}\n\t\t\t\n\t\t\t$this->set('result', $result);\n\t\t\t$this->set('filenames', $filenames);\n\t\t\t$this->set('fileArray', json_encode($fileArray));\n\t\t}\n\t}\n\t\n\tprivate function __combineArrays($array, $array2) {\n\t\tforeach ($array2 as $element) {\n\t\t\tif (!in_array($element, $array)) {\n\t\t\t\t$array[] = $element;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n\n\tpublic function deleteTemporaryFile($filename) {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action is restricted to accepting POST requests only.');\n\t\t//if (!$this->request->is('ajax')) throw new MethodNotAllowedException('This action is only accessible through AJAX.');\n\t\t$this->autoRender = false;\n\t\tif (preg_match('/^[a-zA-Z0-9]{12}$/', $filename)) {\n\t\t\t$file = new File(APP . 'tmp/files/' . $filename);\n\t\t\tif ($file->exists()) {\n\t\t\t\t$file->delete();\n\t\t\t}\n\t\t}\n\t}\n}\n", "<div class=\"index\">\n\t<h2>Populate From Template Results</h2>\n\t<p>Below you can see the attributes that are to be created based on the data that you have entered into the template. If you are satisfied with the result, click \"Finalise\". Otherwise, click \"Modify\".</p>\n\t<table class=\"table table-striped table-hover table-condensed\">\n\t<tr>\n\t\t\t<th>Category</th>\n\t\t\t<th>Type</th>\n\t\t\t<th>Value</th>\n\t\t\t<th>Comment</th>\n\t\t\t<th>IDS</th>\n\t\t\t<th>Distribution</th>\n\t</tr><?php\nforeach ($attributes as $item):?>\n\t<tr>\n\t\t<td><?php echo h($item['category']); ?></td>\n\t\t<td><?php echo h($item['type']); ?></td>\n\t\t<td><?php echo h($item['value']); ?></td>\n\t\t<td><?php echo h($item['comment']); ?></td>\n\t\t<td><?php echo ($item['to_ids'] ? 'Yes' : 'No'); ?></td>\n\t\t<td><?php echo $distributionLevels[$item['distribution']]; ?></td>\n\t</tr><?php\nendforeach;?>\n\t</table>\n\t<div style=\"float:left;\">\n\t\t<?php echo $this->Form->create('Template', array('url' => '/templates/submitEventPopulation/' . $template_id . '/' . $event_id));?>\n\t\t\t<fieldset>\n\t\t\t\t<?php \n\t\t\t\t\techo $this->Form->input('attributes', array(\n\t\t\t\t\t\t\t'id' => 'attributes',\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => json_encode($attributes),\n\t\t\t\t\t));\n\t\t\t\t?>\n\t\t\t</fieldset>\n\t\t<?php\n\t\techo $this->Form->button('Finalise', array('class' => 'btn btn-primary'));\n\t\techo $this->Form->end();\n\t\t?>\n\t</div>\n\t<div style=\"float:left;width:10px;\">&nbsp;</div>\n\t<div>\n\t\t<?php echo $this->Form->create('Template');?>\n\t\t\t<fieldset>\n\t\t\t\t<?php \n\t\t\t\t\tforeach ($template['Template'] as $k => $v) {\n\t\t\t\t\t\tif (strpos($k, 'ile_')) $v = serialize($v);\n\t\t\t\t\t\techo $this->Form->input($k, array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => $v,\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\techo $this->Form->input('modify', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => true,\n\t\t\t\t\t));\n\t\t\t\t\techo $this->Form->input('errors', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => serialize($errors),\n\t\t\t\t\t));\n\t\t\t\t\techo $this->Form->input('fileArray', array(\n\t\t\t\t\t\t\t'label' => false,\n\t\t\t\t\t\t\t'type' => 'hidden',\n\t\t\t\t\t\t\t'value' => $fileArray,\n\t\t\t\t\t));\n\t\t\t\t?>\n\t\t\t</fieldset>\n\t\t<?php\n\t\techo $this->Form->button('Modify', array('class' => 'btn btn-inverse'));\n\t\techo $this->Form->end();\n\t\t?>\n\t</div>\n\n</div>\n<?php \n\techo $this->element('side_menu', array('menuList' => 'regexp', 'menuItem' => 'index'));\n?>\n"], "filenames": ["app/Controller/TemplatesController.php", "app/View/Templates/populate_event_from_template_attributes.ctp"], "buggy_code_start_loc": [25, 32], "buggy_code_end_loc": [336, 33], "fixing_code_start_loc": [25, 32], "fixing_code_end_loc": [334, 33], "type": "CWE-94", "message": "Malware Information Sharing Platform (MISP) before 2.3.90 allows remote attackers to conduct PHP object injection attacks via crafted serialized data, related to TemplatesController.php and populate_event_from_template_attributes.ctp.", "other": {"cve": {"id": "CVE-2015-5721", "sourceIdentifier": "cve@mitre.org", "published": "2016-09-03T20:59:02.733", "lastModified": "2016-11-28T19:35:16.793", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Malware Information Sharing Platform (MISP) before 2.3.90 allows remote attackers to conduct PHP object injection attacks via crafted serialized data, related to TemplatesController.php and populate_event_from_template_attributes.ctp."}, {"lang": "es", "value": "Malware Information Sharing Platform (MISP) en versiones anteriores a 2.3.90 permite a atacantes remotos llevar a cabo ataques de inyecci\u00f3n de objeto PHP a trav\u00e9s de datos serializados manipulados, relacionado con TemplatesController.php y populate_event_from_template_attributes.ctp."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:malware_information_sharing_platform:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.89", "matchCriteriaId": "361906F3-7B94-45B4-863A-94DB991A8CB0"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/92739", "source": "cve@mitre.org"}, {"url": "https://github.com/MISP/MISP/commit/415d85102d5aa5f96f4f11a17c86b59bb9cc0d56", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://www.circl.lu/advisory/CVE-2015-5721/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/415d85102d5aa5f96f4f11a17c86b59bb9cc0d56"}}