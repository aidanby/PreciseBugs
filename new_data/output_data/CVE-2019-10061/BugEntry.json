{"buggy_code": ["\"use strict\";\n\nvar exec = require(\"child_process\").exec;\nvar fs = require(\"fs\");\nvar flag = process.argv[2] || \"--exists\";\n\n// Normally |pkg-config opencv ...| could report either OpenCV 2.x or OpenCV 3.y\n// depending on what is installed.  To enable both 2.x and 3.y to co-exist on\n// the same machine, the opencv.pc for 3.y can be installed as opencv3.pc and\n// then selected by |export PKG_CONFIG_OPENCV3=1| before building node-opencv.\nvar opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : '\"opencv >= 2.3.1\"';\n\nfunction main(){\n    //Try using pkg-config, but if it fails and it is on Windows, try the fallback\n    exec(\"pkg-config \" + opencv + \" \" + flag, function(error, stdout, stderr){\n        if(error){\n            if(process.platform === \"win32\"){\n                fallback();\n            }\n            else{\n                throw new Error(\"ERROR: failed to run: pkg-config\", opencv, flag);\n            }\n        }\n        else{\n            console.log(stdout);\n        }\n    });\n}\n\n//======================Windows Specific=======================================\n\nfunction fallback(){\n    exec(\"echo %OPENCV_DIR%\", function(error, stdout, stderr){\n        stdout = cleanupEchoOutput(stdout);\n        if(error){\n            throw new Error(\"ERROR: There was an error reading OPENCV_DIR\");\n        }\n        else if(stdout === \"%OPENCV_DIR%\") {\n            throw new Error(\"ERROR: OPENCV_DIR doesn't seem to be defined\");\n        }\n        else {\n            printPaths(stdout);\n        }\n    });\n}\n\nfunction printPaths(opencvPath){\n    if(flag === \"--cflags\") {\n        console.log(\"\\\"\" + opencvPath + \"\\\\..\\\\..\\\\include\\\"\");\n        console.log(\"\\\"\" + opencvPath + \"\\\\..\\\\..\\\\include\\\\opencv\\\"\");\n    }\n    else if(flag === \"--libs\") {\n        var libPath = opencvPath + \"\\\\lib\\\\\";\n\n        fs.readdir(libPath, function(err, files){\n            if(err){\n                throw new Error(\"ERROR: couldn't read the lib directory \" + err);\n            }\n\n            var libs = \"\";\n            for(var i = 0; i < files.length; i++){\n                if(getExtension(files[i]) === \"lib\"){\n                    libs = libs + \" \\\"\" + libPath + files[i] + \"\\\" \\r\\n \";\n                }\n            }\n            console.log(libs);\n        });\n    }\n    else {\n        throw new Error(\"Error: unknown argument '\" + flag + \"'\");\n    }\n}\n\nfunction cleanupEchoOutput(s){\n    return s.slice(0, s.length - 2);\n}\n\nfunction getExtension(s){\n    return s.substr(s.lastIndexOf(\".\") + 1);\n}\nmain();\n"], "fixing_code": ["\"use strict\";\n\nvar exec = require(\"child_process\").exec;\nvar fs = require(\"fs\");\nvar flag = \"--exists\";\n\n// Normally |pkg-config opencv ...| could report either OpenCV 2.x or OpenCV 3.y\n// depending on what is installed.  To enable both 2.x and 3.y to co-exist on\n// the same machine, the opencv.pc for 3.y can be installed as opencv3.pc and\n// then selected by |export PKG_CONFIG_OPENCV3=1| before building node-opencv.\nvar opencv = process.env.PKG_CONFIG_OPENCV3 === \"1\" ? \"opencv3\" : ' \"opencv >= 2.3.1\"';\n\nfunction main(){\n    //Try using pkg-config, but if it fails and it is on Windows, try the fallback\n    exec(\"pkg-config \" + opencv + \" \" + flag, function(error, stdout, stderr){\n        if(error){\n            if(process.platform === \"win32\"){\n                fallback();\n            }\n            else{\n              throw new Error(\"ERROR: failed to run: pkg-config\" + opencv + \" \" + flag + \" - Is OpenCV installed?\");\n            }\n        }\n        else{\n            console.log(stdout);\n        }\n    });\n}\n\n//======================Windows Specific=======================================\n\nfunction fallback(){\n    exec(\"echo %OPENCV_DIR%\", function(error, stdout, stderr){\n        stdout = cleanupEchoOutput(stdout);\n        if(error){\n            throw new Error(\"ERROR: There was an error reading OPENCV_DIR\");\n        }\n        else if(stdout === \"%OPENCV_DIR%\") {\n            throw new Error(\"ERROR: OPENCV_DIR doesn't seem to be defined\");\n        }\n        else {\n            printPaths(stdout);\n        }\n    });\n}\n\nfunction printPaths(opencvPath){\n    if(flag === \"--cflags\") {\n        console.log(\"\\\"\" + opencvPath + \"\\\\..\\\\..\\\\include\\\"\");\n        console.log(\"\\\"\" + opencvPath + \"\\\\..\\\\..\\\\include\\\\opencv\\\"\");\n    }\n    else if(flag === \"--libs\") {\n        var libPath = opencvPath + \"\\\\lib\\\\\";\n\n        fs.readdir(libPath, function(err, files){\n            if(err){\n                throw new Error(\"ERROR: couldn't read the lib directory \" + err);\n            }\n\n            var libs = \"\";\n            for(var i = 0; i < files.length; i++){\n                if(getExtension(files[i]) === \"lib\"){\n                    libs = libs + \" \\\"\" + libPath + files[i] + \"\\\" \\r\\n \";\n                }\n            }\n            console.log(libs);\n        });\n    }\n    else {\n        throw new Error(\"Error: unknown argument '\" + flag + \"'\");\n    }\n}\n\nfunction cleanupEchoOutput(s){\n    return s.slice(0, s.length - 2);\n}\n\nfunction getExtension(s){\n    return s.substr(s.lastIndexOf(\".\") + 1);\n}\nmain();\n"], "filenames": ["utils/find-opencv.js"], "buggy_code_start_loc": [5], "buggy_code_end_loc": [22], "fixing_code_start_loc": [5], "fixing_code_end_loc": [22], "type": "CWE-78", "message": "utils/find-opencv.js in node-opencv (aka OpenCV bindings for Node.js) prior to 6.1.0 is vulnerable to Command Injection. It does not validate user input allowing attackers to execute arbitrary commands.", "other": {"cve": {"id": "CVE-2019-10061", "sourceIdentifier": "cve@mitre.org", "published": "2019-03-26T01:29:00.710", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "utils/find-opencv.js in node-opencv (aka OpenCV bindings for Node.js) prior to 6.1.0 is vulnerable to Command Injection. It does not validate user input allowing attackers to execute arbitrary commands."}, {"lang": "es", "value": "utils/find-opencv.js in node-opencv (tambi\u00e9n conocido como enlaces de OpenCV para Node.js), en versiones anteriores a la 6.1.0, es vulnerable a la inyecci\u00f3n de comandos. No valida la entrada de usuario permitiendo, as\u00ed, que los atacantes ejecuten comandos arbitrarios."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:node-opencv_project:node-opencv:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "6.1.0", "matchCriteriaId": "D01AD13A-467B-4B1D-A08A-F2EF83839870"}]}]}], "references": [{"url": "https://github.com/peterbraden/node-opencv/commit/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/peterbraden/node-opencv/commit/aaece6921d7368577511f06c94c99dd4e9653563", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/advisories/789", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/peterbraden/node-opencv/commit/81a4b8620188e89f7e4fc985f3c89b58d4bcc86b"}}