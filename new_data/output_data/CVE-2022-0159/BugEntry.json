{"buggy_code": ["using System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.Extensions.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.Admin;\nusing OrchardCore.AdminDashboard.Models;\nusing OrchardCore.AdminDashboard.Services;\nusing OrchardCore.AdminDashboard.ViewModels;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.Contents;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Settings;\n\nnamespace OrchardCore.AdminDashboard.Controllers\n{\n    [Admin]\n    public class DashboardController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IAdminDashboardService _adminDashboardService;\n        private readonly IContentManager _contentManager;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly ISiteService _siteService;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly dynamic New;\n        private readonly YesSql.ISession _session;\n        private readonly ILogger _logger;\n\n        public DashboardController(\n            IAuthorizationService authorizationService,\n            IAdminDashboardService adminDashboardService,\n            IContentManager contentManager,\n            IContentItemDisplayManager contentItemDisplayManager,\n            IContentDefinitionManager contentDefinitionManager,\n            ISiteService siteService,\n            IUpdateModelAccessor updateModelAccessor,\n            IShapeFactory shapeFactory,\n            INotifier notifier,\n            IStringLocalizer<DashboardController> stringLocalizer,\n            IHtmlLocalizer<DashboardController> htmlLocalizer,\n            YesSql.ISession session,\n            ILogger<DashboardController> logger)\n        {\n            _authorizationService = authorizationService;\n            _adminDashboardService = adminDashboardService;\n            _contentManager = contentManager;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            _siteService = siteService;\n            _updateModelAccessor = updateModelAccessor;\n            New = shapeFactory;\n            _notifier = notifier;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n            _session = session;\n            _logger = logger;\n        }\n\n        public async Task<IActionResult> Index()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.AccessAdminDashboard))\n            {\n                return Forbid();\n            }\n\n            var widgets = await _adminDashboardService.GetWidgetsAsync(x => x.Published);\n            var wrappers = new List<DashboardWrapper>();\n            foreach (var item in widgets)\n            {\n                wrappers.Add(new DashboardWrapper\n                {\n                    Dashboard = item,\n                    Content = await _contentItemDisplayManager.BuildDisplayAsync(item, _updateModelAccessor.ModelUpdater, \"DetailAdmin\")\n                });\n            }\n\n            var model = new AdminDashboardViewModel\n            {\n                Dashboards = wrappers.ToArray()\n            };\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Manage()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageAdminDashboard))\n            {\n                return Forbid();\n            }\n\n            // Set Manage Dashboard Feature\n            Request.HttpContext.Features.Set(new DashboardFeature()\n            {\n                IsManageRequest = true\n            });\n\n            var dashboardCreatable = new List<SelectListItem>();\n\n            var widgetContentTypes = _contentDefinitionManager.ListTypeDefinitions()\n                    .Where(t =>\n                    !string.IsNullOrEmpty(t.GetSettings<ContentTypeSettings>().Stereotype) &&\n                    t.GetSettings<ContentTypeSettings>().Stereotype.Contains(\"DashboardWidget\"))\n                    .OrderBy(x => x.DisplayName);\n            foreach (var ctd in widgetContentTypes)\n            {\n                var contentItem = await _contentManager.NewAsync(ctd.Name);\n                contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n                var authorized = await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem);\n                if (authorized)\n                {\n                    dashboardCreatable.Add(new SelectListItem(new LocalizedString(ctd.DisplayName, ctd.DisplayName).Value, ctd.Name));\n                }\n            }\n\n            var widgets = await _adminDashboardService.GetWidgetsAsync(x => x.Latest);\n            var wrappers = new List<DashboardWrapper>();\n            foreach (var item in widgets)\n            {\n                var wrapper = new DashboardWrapper\n                {\n                    Dashboard = item,\n                    Content = await _contentItemDisplayManager.BuildDisplayAsync(item, _updateModelAccessor.ModelUpdater, \"DetailAdmin\")\n                };\n                wrappers.Add(wrapper);\n            }\n\n            var model = new AdminDashboardViewModel\n            {\n                Dashboards = wrappers.ToArray(),\n                Creatable = dashboardCreatable\n            };\n\n            return View(model);\n        }\n        [HttpPost]\n        public async Task<IActionResult> Update([FromForm] DashboardPartViewModel[] parts)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageAdminDashboard))\n            {\n                return StatusCode(401);\n            }\n\n            var contentItemIds = parts.Select(i => i.ContentItemId).ToArray();\n\n            // Load the latest version first if any\n            var latestItems = await _contentManager.GetAsync(contentItemIds, true);\n\n            var publishedItems = await _contentManager.GetAsync(contentItemIds, false);\n\n            if (latestItems == null)\n            {\n                return StatusCode(404);\n            }\n\n            foreach (var contentItem in latestItems)\n            {\n                var dashboardPart = contentItem.As<DashboardPart>();\n                if (dashboardPart == null)\n                {\n                    return StatusCode(403);\n                }\n\n                var partViewModel = parts.Where(m => m.ContentItemId == contentItem.ContentItemId).FirstOrDefault();\n\n                dashboardPart.Position = partViewModel?.Position ?? 0;\n                dashboardPart.Width = partViewModel?.Width ?? 1;\n                dashboardPart.Height = partViewModel?.Height ?? 1;\n\n                contentItem.Apply(dashboardPart);\n\n                _session.Save(contentItem);\n\n                if (contentItem.IsPublished() == false)\n                {\n                    var publishedVersion = publishedItems.Where(p => p.ContentItemId == contentItem.ContentItemId).FirstOrDefault();\n                    var publishedMetaData = publishedVersion?.As<DashboardPart>();\n                    if (publishedVersion != null && publishedMetaData != null)\n                    {\n                        publishedMetaData.Position = partViewModel.Position;\n                        publishedMetaData.Width = partViewModel.Width;\n                        publishedMetaData.Height = partViewModel.Height;\n                        publishedVersion.Apply(publishedMetaData);\n                        _session.Save(publishedVersion);\n                    }\n                }\n\n            }\n\n            if (Request.Headers != null && Request.Headers[\"X-Requested-With\"] == \"XMLHttpRequest\")\n            {\n                return StatusCode(200);\n            }\n            else\n            {\n                return RedirectToAction(nameof(Manage));\n            }\n\n        }\n    }\n}\n", "@model AdminDashboardViewModel\n@using OrchardCore.ContentManagement;\n@inject IAuthorizationService AuthorizationService\n@inject IContentManager ContentManager\n@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager\n@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager\n\n@{\n    // Todo Create Settings for Dashboard\n    var settings = new\n    {\n        // Default is 1, i.e. 6 columns in large screen, 3 for tablets and 1 for phones.\n        // Changing Scale 2 will increase the # columns to 12 for large screen, 6 for tablets and 2 for phones.\n        ColumnScale = 1\n    };\n}\n\n<style asp-name=\"jQuery-ui\" at=\"Head\"></style>\n<style asp-src=\"~/OrchardCore.AdminDashboard/Styles/dashboard.min.css\" debug-src=\"~/OrchardCore.AdminDashboard/Styles/dashboard.css\" depends-on=\"jQuery-ui\" at=\"Head\"></style>\n<script asp-name=\"jQuery-ui\" at=\"Foot\"></script>\n\n<div class=\"float-right mb-3 d-inline-flex\">\n    <a class=\"btn btn-success btn-sm  mr-1\" asp-action=\"Index\">\n        @T[\"Close Editor\"]\n    </a>\n    @if (Model.Creatable.Any())\n    {\n        <div class=\"dropdown order-md-1\">\n            <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"new-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                @T[\"Add Widget\"]\n            </button>\n            <div class=\"dropdown-menu dropdown-menu-right scrollable\" aria-labelledby=\"bulk-action-menu-button\">\n                @foreach (var item in Model.Creatable)\n                {\n                    <a class=\"dropdown-item add-list-widget btn-sm\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = @item.Value, returnUrl = FullRequestPath })\">@T[item.Text]</a>\n                }\n            </div>\n        </div>\n    }\n</div>\n<zone Name=\"Title\"><h1 class=\"float-left\">@RenderTitleSegments(T[\"Dashboard\"])</h1></zone>\n<div class=\"clearfix\"></div>\n\n<div id=\"dashboard-undo-message\" class=\"alert alert-success alert-dismissible show d-none\" role=\"alert\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n    </button>\n    <form id=\"dashboard-undo-form\" asp-action=\"Update\" method=\"POST\" class=\"no-multisubmit\">\n        @for (int index = 0; index < Model.Dashboards.Count(); index++)\n        {\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)\" name=\"parts[@(index)].ContentItemId\" value=\"@Model.Dashboards[index].Dashboard.ContentItemId\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Width\" name=\"parts[@(index)].Width\" value=\"\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Height\" name=\"parts[@(index)].Height\" value=\"\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Position\" name=\"parts[@(index)].Position\" value=\"\" />\n        }\n    </form>\n    @T[\"Dashboard successfully updated.\"]&nbsp;<a href=\"#\"><strong>@T[\"Undo\"]</strong></a>.\n</div>\n\n<div class=\"dashboard-container\" id=\"container\" style=\"--dashboard-columns: calc( @(settings.ColumnScale) * var(--dashboard-columns-default));\">\n    @foreach (var dashboard in Model.Dashboards)\n    {\n        @await DisplayAsync(dashboard)\n    }\n</div>\n\n<script depends-on=\"jQuery-ui\" at=\"Foot\">\n    $(document).ready(function(){\n        //\n        var _menu = null;\n        var cellSize = {\n            width: 240,\n            height: 240\n        };\n\n        $(\"#dashboard-undo-message a\").on('click', function(e){\n            e.preventDefault();\n            $(\"#dashboard-undo-form\").submit();\n        });\n\n        function Update(metadata)\n        {\n            var token = $(\"[name='__RequestVerificationToken']\").val();\n            var data = {\n                __RequestVerificationToken : token,\n                parts : metadata\n            };\n            $.post({\n                url: '@Url.Action(\"Update\")',\n                data: data,\n                success: function (data) {\n                    $('#dashboard-undo-message').removeClass(\"d-none\");\n                },\n                fail: function(){\n                    $('#dashboard-undo-message').addClass(\"d-none\");\n                }\n            });\n        }\n\n        function snapTo(org, val, gridSize)\n        {\n            var snap_X =1;\n            if (org.width < val.width)\n            {\n                snap_X = Math.ceil(val.width/gridSize.width) ;\n            }\n            else\n            {\n                snap_X = Math.floor(val.width/gridSize.width) ;\n            }\n\n            if (snap_X === 0)\n                snap_X = 1;\n\n            var snap_Y =1;\n            if (org.height < val.height)\n            {\n                snap_Y = Math.ceil(val.height/gridSize.height) ;\n            }\n            else\n            {\n                snap_Y = Math.floor(val.height/gridSize.height) ;\n            }\n\n            if(snap_Y ===0 )\n                snap_Y = 1;\n            var snap = { X : snap_X, Y: snap_Y};\n            return snap;\n        }\n\n        function setUndoValues()\n        {\n            $(\".dashboard-container .dashboard-wrapper\")\n                .each(function (index, value) {\n                    $('#undo_' + $(value).attr('id') + '_Position').val(index);\n                    $('#undo_' + $(value).attr('id') + '_Height').val(value.style.getPropertyValue('--dashboard-height'));\n                    $('#undo_' + $(value).attr('id') + '_Width').val(value.style.getPropertyValue('--dashboard-width'));\n                });\n        }\n\n        function getCurrentValues()\n        {\n            var metadata = [];\n            $(\".dashboard-container .dashboard-wrapper\")\n                .each(function (index, value) {\n                    var position = index;\n                    var height = $(this)[0].style.getPropertyValue('--dashboard-height');\n                    var width = $(this)[0].style.getPropertyValue('--dashboard-width');\n                    var contentItemId = $(this).attr(\"id\");\n\n                    metadata.push( {\n                        \"ContentItemId\" : contentItemId,\n                        \"Position\" : position,\n                        \"Width\" : width,\n                        \"Height\": height\n                    });\n                });\n            return metadata;\n        }\n\n        function calculateCellSize()\n        {\n            var container = document.getElementById(\"container\");\n            var styles = window.getComputedStyle(container);\n\n            var rows = styles.getPropertyValue('grid-template-rows');\n            var columns = styles.getPropertyValue('grid-template-columns');\n\n            var rowGap = styles.getPropertyValue('grid-row-gap').replace('px','');;\n            var columnGap = styles.getPropertyValue('grid-column-gap').replace('px','');;\n            var height = rows.split(' ')[0].replace('px','');\n            var width = columns.split(' ')[0].replace('px','');\n\n            cellSize = {\n                width: width,\n                height: height,\n                gap : {\n                    width : columnGap,\n                    height : rowGap\n                }\n            };\n        }\n\n        var _sortable = $(\".dashboard-container\").sortable({\n            tolerance: \"pointer\",\n            opacity: 0.7,\n            handle: \".dashboard-handle\",\n            placeholder: {\n                element: function(currentItem) {\n                    return $('<div  class=\"dashboard-dragdrop-placeholder\"><div></div></div>')[0];\n                },\n                update: function (container, p) {\n                    return;\n                }\n            },\n            start: function (e, ui) {\n\n                if(_menu != null){\n                    $(document).trigger('click');\n                }\n\n                setUndoValues();\n\n                var dahsboard = ui.item[0];\n                ui.placeholder[0].style.setProperty(\"--dashboard-width\", dahsboard.style.getPropertyValue(\"--dashboard-width\"));\n                ui.placeholder[0].style.setProperty(\"--dashboard-height\", dahsboard.style.getPropertyValue(\"--dashboard-height\"));\n\n            },\n            update: function (event, ui) {\n                var op = $('#undo_' + ui.item.attr('id') + '_Position');\n                // Only update if Position is changed\n                if(op.val() != ui.item.index()){\n                    var changed =  getCurrentValues();\n                    Update(changed);\n                }\n            }\n        });\n        $(\".dashboard-wrapper\").resizable({\n            handles: \"s,e,se\",\n            helper: \"ui-resizable-helper\"\n,\n            start: function (event, ui) {\n                if(_menu != null){\n                    $(document).trigger('click');\n                }\n                setUndoValues();\n            },\n            resize: function (event, ui) {\n\n                var original = {\n                    width : ui.originalSize.width,\n                    height: ui.originalSize.height\n                };\n\n                var updated = {\n                    width : ui.size.width,\n                    height: ui.size.height\n                };\n\n                var snap = snapTo(original, updated, cellSize);\n\n                ui.helper[0].style.setProperty(\"--dashboard-width\", snap.X);\n                ui.helper[0].style.setProperty(\"--dashboard-height\", snap.Y);\n\n                ui.helper.css(\"width\", (snap.X * cellSize.width) + ((snap.X -1 ) * cellSize.gap.width)  );\n                ui.helper.css(\"height\", (snap.Y * cellSize.height) + ((snap.Y -1 ) * cellSize.gap.height) );\n            },\n            stop: function (event, ui) {\n\n                $(this).css(\"width\", '');\n                $(this).css(\"height\", '');\n\n                var original = {\n                    width : ui.originalSize.width,\n                    height: ui.originalSize.height\n                };\n\n                var updated = {\n                    width : ui.size.width,\n                    height: ui.size.height\n                };\n\n                var snap = snapTo(original, updated, cellSize);\n\n                var ow = $('#undo_' + ui.element.attr('id') + '_Width');\n                var oh = $('#undo_' + ui.element.attr('id') + '_Height');\n\n                // Only update if values have changed\n                if(ow != snap.X || oh != snap.Y)\n                {\n                    ui.element[0].style.setProperty(\"--dashboard-width\", snap.X);\n                    ui.element[0].style.setProperty(\"--dashboard-height\", snap.Y);\n\n                    var changed =  getCurrentValues();\n                    Update(changed);\n                }\n            }\n        });\n\n        $(window).on('show.bs.dropdown', function (e) {\n            _menu = $(e.target).find('.dropdown-menu');\n            $('body').append(_menu.detach());\n            var eOffset = $(e.target).offset();\n            _menu.css({\n                'display': 'block',\n                    'top': eOffset.top + $(e.target).outerHeight(),\n                    'left': eOffset.left\n            });\n        });\n\n        $(window).on('resize', function (e) {\n            calculateCellSize();\n        });\n\n        $(window).on('hide.bs.dropdown', function (e) {\n            $(e.target).append(_menu.detach());\n            _menu.hide();\n            _menu = null;\n        });\n    });\n</script>\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Metadata.Models;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.ContentManagement.Records;\nusing OrchardCore.Contents.Services;\nusing OrchardCore.Contents.ViewModels;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing YesSql;\nusing YesSql.Filters.Query;\nusing YesSql.Services;\n\nnamespace OrchardCore.Contents.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IContentManager _contentManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly ISiteService _siteService;\n        private readonly YesSql.ISession _session;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly INotifier _notifier;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IDisplayManager<ContentOptionsViewModel> _contentOptionsDisplayManager;\n        private readonly IContentsAdminListQueryService _contentsAdminListQueryService;\n        private readonly IHtmlLocalizer H;\n        private readonly IStringLocalizer S;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IShapeFactory _shapeFactory;\n        private readonly dynamic New;\n        private readonly ILogger _logger;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            IContentManager contentManager,\n            IContentItemDisplayManager contentItemDisplayManager,\n            IContentDefinitionManager contentDefinitionManager,\n            ISiteService siteService,\n            INotifier notifier,\n            YesSql.ISession session,\n            IShapeFactory shapeFactory,\n            IDisplayManager<ContentOptionsViewModel> contentOptionsDisplayManager,\n            IContentsAdminListQueryService contentsAdminListQueryService,\n            ILogger<AdminController> logger,\n            IHtmlLocalizer<AdminController> htmlLocalizer,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IUpdateModelAccessor updateModelAccessor,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _authorizationService = authorizationService;\n            _notifier = notifier;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _session = session;\n            _siteService = siteService;\n            _contentManager = contentManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            _updateModelAccessor = updateModelAccessor;\n            _httpContextAccessor = httpContextAccessor;\n            _contentOptionsDisplayManager = contentOptionsDisplayManager;\n            _contentsAdminListQueryService = contentsAdminListQueryService;\n\n            H = htmlLocalizer;\n            S = stringLocalizer;\n            _shapeFactory = shapeFactory;\n            New = shapeFactory;\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> List(\n            [ModelBinder(BinderType = typeof(ContentItemFilterEngineModelBinder), Name = \"q\")] QueryFilterResult<ContentItem> queryFilterResult,\n            ContentOptionsViewModel options,\n            PagerParameters pagerParameters,\n            string contentTypeId = \"\")\n        {\n            var context = _httpContextAccessor.HttpContext;\n            var contentTypeDefinitions = _contentDefinitionManager.ListTypeDefinitions()\n                    .Where(ctd => ctd.GetSettings<ContentTypeSettings>().Creatable)\n                    .OrderBy(ctd => ctd.DisplayName);\n\n            if (!await _authorizationService.AuthorizeContentTypeDefinitionsAsync(User, CommonPermissions.EditContent, contentTypeDefinitions, _contentManager))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n\n            // This is used by the AdminMenus so needs to be passed into the options.\n            if (!String.IsNullOrEmpty(contentTypeId))\n            {\n                options.SelectedContentType = contentTypeId;\n            }\n\n            // The filter is bound seperately and mapped to the options.\n            // The options must still be bound so that options that are not filters are still bound\n            options.FilterResult = queryFilterResult;\n\n            // Populate the creatable types.\n            if (!String.IsNullOrEmpty(options.SelectedContentType))\n            {\n                // When the selected content type is provided via the route or options a placeholder node is used to apply a filter.\n                options.FilterResult.TryAddOrReplace(new ContentTypeFilterNode(options.SelectedContentType));\n\n                var contentTypeDefinition = _contentDefinitionManager.GetTypeDefinition(options.SelectedContentType);\n                if (contentTypeDefinition == null)\n                {\n                    return NotFound();\n                }\n\n                var creatableList = new List<SelectListItem>();\n\n                // Allows non creatable types to be created by another admin page.\n                if (contentTypeDefinition.GetSettings<ContentTypeSettings>().Creatable || options.CanCreateSelectedContentType)\n                {\n                    var contentItem = await _contentManager.NewAsync(contentTypeDefinition.Name);\n                    contentItem.Owner = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                    if (await _authorizationService.AuthorizeAsync(context.User, CommonPermissions.EditContent, contentItem))\n                    {\n                        creatableList.Add(new SelectListItem(new LocalizedString(contentTypeDefinition.DisplayName, contentTypeDefinition.DisplayName).Value, contentTypeDefinition.Name));\n                    }\n                }\n\n                options.CreatableTypes = creatableList;\n            }\n\n            if (options.CreatableTypes == null)\n            {\n                var creatableList = new List<SelectListItem>();\n                if (contentTypeDefinitions.Any())\n                {\n                    foreach (var contentTypeDefinition in contentTypeDefinitions)\n                    {\n                        var contentItem = await _contentManager.NewAsync(contentTypeDefinition.Name);\n                        contentItem.Owner = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                        if (await _authorizationService.AuthorizeAsync(context.User, CommonPermissions.EditContent, contentItem))\n                        {\n                            creatableList.Add(new SelectListItem(new LocalizedString(contentTypeDefinition.DisplayName, contentTypeDefinition.DisplayName).Value, contentTypeDefinition.Name));\n                        }\n                    }\n                }\n\n                options.CreatableTypes = creatableList;\n            }\n\n            // We populate the remaining SelectLists.\n            options.ContentStatuses = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Latest\"], Value = nameof(ContentsStatus.Latest), Selected = (options.ContentsStatus == ContentsStatus.Latest) },\n                new SelectListItem() { Text = S[\"Published\"], Value = nameof(ContentsStatus.Published), Selected = (options.ContentsStatus == ContentsStatus.Published) },\n                new SelectListItem() { Text = S[\"Unpublished\"], Value = nameof(ContentsStatus.Draft), Selected = (options.ContentsStatus == ContentsStatus.Draft) },\n                new SelectListItem() { Text = S[\"All versions\"], Value = nameof(ContentsStatus.AllVersions), Selected = (options.ContentsStatus == ContentsStatus.AllVersions) }\n            };\n\n            if (await _authorizationService.AuthorizeAsync(context.User, Permissions.ListContent))\n            {\n                options.ContentStatuses.Insert(1, new SelectListItem() { Text = S[\"Owned by me\"], Value = nameof(ContentsStatus.Owner) });\n            }\n\n            options.ContentSorts = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Recently created\"], Value = nameof(ContentsOrder.Created), Selected = (options.OrderBy == ContentsOrder.Created) },\n                new SelectListItem() { Text = S[\"Recently modified\"], Value = nameof(ContentsOrder.Modified), Selected = (options.OrderBy == ContentsOrder.Modified) },\n                new SelectListItem() { Text = S[\"Recently published\"], Value = nameof(ContentsOrder.Published), Selected = (options.OrderBy == ContentsOrder.Published) },\n                new SelectListItem() { Text = S[\"Title\"], Value = nameof(ContentsOrder.Title), Selected = (options.OrderBy == ContentsOrder.Title) },\n            };\n\n            options.ContentsBulkAction = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Publish Now\"], Value = nameof(ContentsBulkAction.PublishNow) },\n                new SelectListItem() { Text = S[\"Unpublish\"], Value = nameof(ContentsBulkAction.Unpublish) },\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            if ((String.IsNullOrEmpty(options.SelectedContentType) || String.IsNullOrEmpty(contentTypeId)) && options.ContentTypeOptions == null)\n            {\n                var listableTypes = new List<ContentTypeDefinition>();\n                var userNameIdentifier = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                foreach (var ctd in _contentDefinitionManager.ListTypeDefinitions())\n                {\n                    if (ctd.GetSettings<ContentTypeSettings>().Listable)\n                    {\n                        var contentItem = await _contentManager.NewAsync(ctd.Name);\n                        contentItem.Owner = userNameIdentifier;\n                        var authorized = await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem);\n\n                        if (authorized)\n                        {\n                            listableTypes.Add(ctd);\n                        }\n                    }\n                }\n\n                var contentTypeOptions = listableTypes\n                    .Select(ctd => new KeyValuePair<string, string>(ctd.Name, ctd.DisplayName))\n                    .ToList().OrderBy(kvp => kvp.Value);\n\n                options.ContentTypeOptions = new List<SelectListItem>\n                {\n                    new SelectListItem() { Text = S[\"All content types\"], Value = \"\" }\n                };\n\n                foreach (var option in contentTypeOptions)\n                {\n                    options.ContentTypeOptions.Add(new SelectListItem() { Text = option.Value, Value = option.Key, Selected = (option.Value == options.SelectedContentType) });\n                }\n            }\n\n            // If ContentTypeOptions is not initialized by query string or by the code above, initialize it\n            if (options.ContentTypeOptions == null)\n            {\n                options.ContentTypeOptions = new List<SelectListItem>();\n            }\n\n            // With the options populated we filter the query, allowing the filters to alter the options.\n            var query = await _contentsAdminListQueryService.QueryAsync(options, _updateModelAccessor.ModelUpdater);\n\n            // The search text is provided back to the UI.\n            options.SearchText = options.FilterResult.ToString();\n            options.OriginalSearchText = options.SearchText;\n\n            // Populate route values to maintain previous route data when generating page links.\n            options.RouteValues.TryAdd(\"q\", options.FilterResult.ToString());\n\n            var routeData = new RouteData(options.RouteValues);\n            var maxPagedCount = siteSettings.MaxPagedCount;\n            if (maxPagedCount > 0 && pager.PageSize > maxPagedCount)\n            {\n                pager.PageSize = maxPagedCount;\n            }\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(maxPagedCount > 0 ? maxPagedCount : await query.CountAsync()).RouteData(routeData);\n\n            // Load items so that loading handlers are invoked.\n            var pageOfContentItems = await query.Skip(pager.GetStartIndex()).Take(pager.PageSize).ListAsync(_contentManager);\n\n            // We prepare the content items SummaryAdmin shape\n            var contentItemSummaries = new List<dynamic>();\n            foreach (var contentItem in pageOfContentItems)\n            {\n                contentItemSummaries.Add(await _contentItemDisplayManager.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater, \"SummaryAdmin\"));\n            }\n\n            // Populate options pager summary values.\n            var startIndex = (pagerShape.Page - 1) * (pagerShape.PageSize) + 1;\n            options.StartIndex = startIndex;\n            options.EndIndex = startIndex + contentItemSummaries.Count - 1;\n            options.ContentItemsCount = contentItemSummaries.Count;\n            options.TotalItemCount = pagerShape.TotalItemCount;\n\n            var header = await _contentOptionsDisplayManager.BuildEditorAsync(options, _updateModelAccessor.ModelUpdater, false);\n\n            var shapeViewModel = await _shapeFactory.CreateAsync<ListContentsViewModel>(\"ContentsAdminList\", viewModel =>\n            {\n                viewModel.ContentItems = contentItemSummaries;\n                viewModel.Pager = pagerShape;\n                viewModel.Options = options;\n                viewModel.Header = header;\n            });\n\n            return View(shapeViewModel);\n        }\n\n        [HttpPost, ActionName(\"List\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public async Task<ActionResult> ListFilterPOST(ContentOptionsViewModel options)\n        {\n            // When the user has typed something into the search input no further evaluation of the form post is required.\n            if (!String.Equals(options.SearchText, options.OriginalSearchText, StringComparison.OrdinalIgnoreCase))\n            {\n                return RedirectToAction(nameof(List), new RouteValueDictionary { { \"q\", options.SearchText } });\n            }\n\n            // Evaluate the values provided in the form post and map them to the filter result and route values.\n            await _contentOptionsDisplayManager.UpdateEditorAsync(options, _updateModelAccessor.ModelUpdater, false);\n\n            // The route value must always be added after the editors have updated the models.\n            options.RouteValues.TryAdd(\"q\", options.FilterResult.ToString());\n\n            return RedirectToAction(nameof(List), options.RouteValues);\n        }\n\n        [HttpPost, ActionName(\"List\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> ListPOST(ContentOptionsViewModel options, IEnumerable<int> itemIds)\n        {\n            if (itemIds?.Count() > 0)\n            {\n                // Load items so that loading handlers are invoked.\n                var checkedContentItems = await _session.Query<ContentItem, ContentItemIndex>().Where(x => x.DocumentId.IsIn(itemIds) && x.Latest).ListAsync(_contentManager);\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.PublishNow:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't publish selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.PublishAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content published successfully.\"]);\n                        break;\n                    case ContentsBulkAction.Unpublish:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't unpublish selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.UnpublishAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content unpublished successfully.\"]);\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't remove selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.RemoveAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content removed successfully.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(List));\n        }\n\n        public async Task<IActionResult> Create(string id)\n        {\n            if (String.IsNullOrWhiteSpace(id))\n            {\n                return NotFound();\n            }\n\n            var contentItem = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, true);\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        [FormValueRequired(\"submit.Save\")]\n        public Task<IActionResult> CreatePOST(string id, [Bind(Prefix = \"submit.Save\")] string submitSave, string returnUrl)\n        {\n            var stayOnSamePage = submitSave == \"submit.SaveAndContinue\";\n            return CreatePOST(id, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.SaveDraftAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content draft has been saved.\"]\n                    : H[\"Your {0} draft has been saved.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        [FormValueRequired(\"submit.Publish\")]\n        public async Task<IActionResult> CreateAndPublishPOST(string id, [Bind(Prefix = \"submit.Publish\")] string submitPublish, string returnUrl)\n        {\n            var stayOnSamePage = submitPublish == \"submit.PublishAndContinue\";\n            // pass a dummy content to the authorization check to check for \"own\" variations\n            var dummyContent = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            dummyContent.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, dummyContent))\n            {\n                return Forbid();\n            }\n\n            return await CreatePOST(id, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.PublishAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content has been published.\"]\n                    : H[\"Your {0} has been published.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        private async Task<IActionResult> CreatePOST(string id, string returnUrl, bool stayOnSamePage, Func<ContentItem, Task> conditionallyPublish)\n        {\n            var contentItem = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, true);\n\n            if (ModelState.IsValid)\n            {\n                await _contentManager.CreateAsync(contentItem, VersionOptions.Draft);\n            }\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(model);\n            }\n\n            await conditionallyPublish(contentItem);\n\n            if ((!string.IsNullOrEmpty(returnUrl)) && (!stayOnSamePage))\n            {\n                return this.LocalRedirect(returnUrl, true);\n            }\n\n            var adminRouteValues = (await _contentManager.PopulateAspectAsync<ContentItemMetadata>(contentItem)).AdminRouteValues;\n\n            if (!string.IsNullOrEmpty(returnUrl))\n            {\n                adminRouteValues.Add(\"returnUrl\", returnUrl);\n            }\n\n            return RedirectToRoute(adminRouteValues);\n        }\n\n        public async Task<IActionResult> Display(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.ViewContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater, \"DetailAdmin\");\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(\"Edit\")]\n        [FormValueRequired(\"submit.Save\")]\n        public Task<IActionResult> EditPOST(string contentItemId, [Bind(Prefix = \"submit.Save\")] string submitSave, string returnUrl)\n        {\n            var stayOnSamePage = submitSave == \"submit.SaveAndContinue\";\n            return EditPOST(contentItemId, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.SaveDraftAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content draft has been saved.\"]\n                    : H[\"Your {0} draft has been saved.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        [HttpPost, ActionName(\"Edit\")]\n        [FormValueRequired(\"submit.Publish\")]\n        public async Task<IActionResult> EditAndPublishPOST(string contentItemId, [Bind(Prefix = \"submit.Publish\")] string submitPublish, string returnUrl)\n        {\n            var stayOnSamePage = submitPublish == \"submit.PublishAndContinue\";\n\n            var content = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (content == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, content))\n            {\n                return Forbid();\n            }\n            return await EditPOST(contentItemId, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.PublishAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content has been published.\"]\n                    : H[\"Your {0} has been published.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        private async Task<IActionResult> EditPOST(string contentItemId, string returnUrl, bool stayOnSamePage, Func<ContentItem, Task> conditionallyPublish)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.DraftRequired);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(nameof(Edit), model);\n            }\n\n            await conditionallyPublish(contentItem);\n\n            if (returnUrl == null)\n            {\n                return RedirectToAction(nameof(Edit), new RouteValueDictionary { { \"ContentItemId\", contentItem.ContentItemId } });\n            }\n            else if (stayOnSamePage)\n            {\n                return RedirectToAction(nameof(Edit), new RouteValueDictionary { { \"ContentItemId\", contentItem.ContentItemId }, { \"returnUrl\", returnUrl } });\n            }\n            else\n            {\n                return this.LocalRedirect(returnUrl, true);\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Clone(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.CloneContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            try\n            {\n                await _contentManager.CloneAsync(contentItem);\n            }\n            catch (InvalidOperationException)\n            {\n                await _notifier.WarningAsync(H[\"Could not clone the content item.\"]);\n                return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n            }\n\n            await _notifier.InformationAsync(H[\"Successfully cloned. The clone was saved as a draft.\"]);\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> DiscardDraft(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null || contentItem.Published)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            if (contentItem != null)\n            {\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _contentManager.DiscardDraftAsync(contentItem);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"The draft has been removed.\"]\n                    : H[\"The {0} draft has been removed.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Remove(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            if (contentItem != null)\n            {\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _contentManager.RemoveAsync(contentItem);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"That content has been removed.\"]\n                    : H[\"That {0} has been removed.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Publish(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            await _contentManager.PublishAsync(contentItem);\n\n            var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n            if (string.IsNullOrEmpty(typeDefinition.DisplayName))\n            {\n                await _notifier.SuccessAsync(H[\"That content has been published.\"]);\n            }\n            else\n            {\n                await _notifier.SuccessAsync(H[\"That {0} has been published.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Unpublish(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            await _contentManager.UnpublishAsync(contentItem);\n\n            var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n            if (string.IsNullOrEmpty(typeDefinition.DisplayName))\n            {\n                await _notifier.SuccessAsync(H[\"The content has been unpublished.\"]);\n            }\n            else\n            {\n                await _notifier.SuccessAsync(H[\"The {0} has been unpublished.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n    }\n}\n", "@using OrchardCore.ContentManagement\n@using OrchardCore.ContentManagement.Metadata\n@using OrchardCore.Mvc.Utilities\n\n@inject IContentDefinitionManager ContentDefinitionManager\n\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n}\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"New {0}\", Html.Raw(typeDisplayName)])</h1></zone>\n\n<form asp-action=\"Create\" asp-route-returnUrl=\"@Context.Request.Query[\"ReturnUrl\"]\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    @Html.ValidationSummary()\n    @await DisplayAsync(Model)\n</form>\n", "@using OrchardCore.ContentManagement\n@using OrchardCore.ContentManagement.Metadata\n@using OrchardCore.Mvc.Utilities\n\n@inject IContentDefinitionManager ContentDefinitionManager\n\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n}\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"Edit {0}\", Html.Raw(typeDisplayName)])</h1></zone>\n\n<form asp-action=\"Edit\" asp-route-contentitemid=\"@contentItem.ContentItemId\" asp-route-returnUrl=\"@Context.Request.Query[\"ReturnUrl\"]\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    @Html.ValidationSummary()\n    @await DisplayAsync(Model)\n</form>\n", "@model ContentOptionsViewModel\n<div class=\"form-group d-inline-flex float-right mb-0\">\n    <div class=\"btn-group\">\n        @if (Model.CreatableTypes.Any())\n        {\n            @if (Model.CreatableTypes.Count == 1)\n            {\n                <a class=\"btn btn-sm btn-secondary\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = Model.CreatableTypes.First().Value, returnUrl = FullRequestPath })\">@T[\"New {0}\", Model.CreatableTypes.First().Text]</a>\n            }\n            else\n            {\n                <div class=\"dropdown order-md-1\">\n                    <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"new-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        @T[\"New\"]\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right scrollable\" aria-labelledby=\"bulk-action-menu-button\">\n                        @foreach (var item in Model.CreatableTypes)\n                        {\n                            <a class=\"dropdown-item\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = @item.Value, returnUrl = FullRequestPath })\">@T[item.Text]</a>\n                        }\n                    </div>\n                </div>\n            }\n        }\n    </div>\n</div>\n", "@model DisplayJsonContentItemViewModel\n@inject IContentDefinitionManager ContentDefinitionManager\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n\n    var returnUrl = Context.Request.Query[\"returnUrl\"];\n}\n\n<style asp-name=\"codemirror\"></style>\n<script asp-name=\"codemirror\" depends-on=\"admin\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-display-autorefresh\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-javascript\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"View As JSON {0}\", Html.Raw(typeDisplayName)])</h1></zone>\n\n<form asp-action=\"Download\" asp-route-contentItemId=\"@contentItem.ContentItemId\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    <div class=\"form-group\">\n        <div class=\"d-flex flex-row-reverse\">\n            <div class=\"btn\">\n                <i class=\"far fa-copy\" aria-hidden=\"true\" id=\"json-copy-to-clipboard\"></i>\n            </div>\n        </div>\n        <textarea asp-for=\"ContentItemJson\" class=\"form-control\"></textarea>\n    </div>\n\n    <button class=\"btn btn-success download\" type=\"submit\">@T[\"Download\"]</button>\n\n    @if (!String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))\n    {\n        <a class=\"btn btn-secondary cancel\" role=\"button\" href=\"@returnUrl\">@T[\"Cancel\"]</a>\n    }\n\n</form>\n\n<script at=\"Foot\">\n    $(function () {\n        var editor = CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(x => x.ContentItemJson)'), {\n            autoRefresh: true,\n            lineNumbers: true,\n            styleActiveLine: true,\n            matchBrackets: true,\n            mode: { name: \"javascript\" },\n        });\n\n        $('#json-copy-to-clipboard').on('click', function () {\n            var $temp = $(\"<textarea>\");\n            $(\"body\").append($temp);\n            $temp.val($('#@Html.IdFor(x => x.ContentItemJson)').text()).select();\n            document.execCommand(\"copy\");\n            $temp.remove();\n        })\n    });\n</script>\n", "@page\n@model AdminHelloDemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n\n@functions\n{\n    public class AdminHelloDemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is an Admin RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<zone Name=\"Title\"><h1>@Model.Title</h1></zone>\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    My model is not decorated with the '[Admin]' attribute but I am a protected Admin Page as I am under an '/Admin/' folder.\n</p>\n<p>\n    Being an Admin Page my default path based route is automatically prefixed with the current 'AdminOptions.AdminUrlPrefix'.\n</p>\n<p>\n    @T[Model.Message]\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@page\n@model DemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n\n@functions\n{\n    public class DemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is a RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    @T[Model.Message]\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@page\n@model OutsideAdminDemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n@using OrchardCore.Admin;\n\n@functions\n{\n    [Admin]\n    public class OutsideAdminDemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is an Admin RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<zone Name=\"Title\"><h1>@Model.Title</h1></zone>\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    I am not under an '/Admin/' folder but I am a protected Admin Page as my model is decorated with the '[Admin]' attribute.\n</p>\n<p>\n    Being an Admin Page my default path based route is automatically prefixed with the current 'AdminOptions.AdminUrlPrefix'.\n</p>\n<p>\n    @T[Model.Message]\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@using OrchardCore.Flows.Models\n@model FlowMetadata\n\n<div class=\"btn-group btn-group-sm\" role=\"group\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        <i class=\"fa fa-align-@Model.Alignment.ToString().ToLowerInvariant()\" aria-hidden=\"true\"></i>\n    </button>\n    <div class=\"dropdown-menu btn-group-toggle\" data-toggle=\"buttons\">\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Left ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Left\" type=\"radio\" autocomplete=\"off\" value=\"Left\"><i class=\"fa fa-align-left\" aria-hidden=\"true\"></i> @T[\"Left\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Center ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Center\" type=\"radio\" autocomplete=\"off\" value=\"Center\"><i class=\"fa fa-align-center\" aria-hidden=\"true\"></i> @T[\"Center\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Right ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Right\" type=\"radio\" autocomplete=\"off\" value=\"Right\"><i class=\"fa fa-align-right\" aria-hidden=\"true\"></i> @T[\"Right\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Justify ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Justify\" type=\"radio\" autocomplete=\"off\" value=\"Justify\"><i class=\"fa fa-align-justify\" aria-hidden=\"true\"></i> @T[\"Justify\"]\n        </label>\n    </div>\n</div>\n\n<div class=\"btn-group btn-group-sm\" role=\"group\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        @T[Model.Size + \"%\"]\n    </button>\n    <div class=\"dropdown-menu btn-group-toggle\" data-toggle=\"buttons\">\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 25 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_25\" type=\"radio\" autocomplete=\"off\" value=\"25\">@T[\"25%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 33 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_33\" type=\"radio\" autocomplete=\"off\" value=\"33\">@T[\"33%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 50 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_50\" type=\"radio\" autocomplete=\"off\" value=\"50\">@T[\"50%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 66 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_66\" type=\"radio\" autocomplete=\"off\" value=\"66\">@T[\"66%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 75 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_75\" type=\"radio\" autocomplete=\"off\" value=\"75\">@T[\"75%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 100 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_100\" type=\"radio\" autocomplete=\"off\" value=\"100\">@T[\"100%\"]\n        </label>\n    </div>\n</div>\n", "@using System.Globalization;\n@using OrchardCore.ContentManagement.Metadata.Settings;\n@using OrchardCore.Layers.Drivers\n@model OrchardCore.Layers.ViewModels.LayersIndexViewModel\n\n@inject IContentManager ContentManager\n@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager\n@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager\n\n@{\n    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == \"Widget\");\n}\n<script asp-name=\"jquery-ui\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"Edit Widgets and Layers\"])</h1></zone>\n\n<form id=\"undo-form\" asp-action=\"UpdatePosition\" method=\"post\" class=\"no-multisubmit\">\n    <div id=\"layer-undo-message\" class=\"alert alert-success alert-dismissible show d-none\" role=\"alert\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n        </button>\n        @T[\"Widget successfully moved. <a href=\\\"javascript:console.log('submit');$('#undo-form').submit();\\\"><strong>Undo</strong></a>.\"]\n    </div>\n    <input id=\"layer-undo-message-contentItemId\" type=\"hidden\" name=\"contentItemId\" value=\"\" />\n    <input id=\"layer-undo-message-zone\" type=\"hidden\" name=\"zone\" value=\"\" />\n    <input id=\"layer-undo-message-position\" type=\"hidden\" name=\"position\" value=\"\" />\n</form>\n\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <h3>@T[\"Zones\"]</h3>\n        <form asp-action=\"Index\">\n            @if (Model.Zones == null || !Model.Zones.Any())\n            {\n                <p class=\"alert alert-warning\">@T[\"Please <a href=\\\"{0}\\\">define the available zones</a> before adding Widgets\", Url.Action(\"Index\", \"Admin\", new { area = \"OrchardCore.Settings\", groupId = LayerSiteSettingsDisplayDriver.GroupId })]</p>\n            }\n            else\n            {\n                foreach (var zone in Model.Zones)\n                {\n                    double maxPosition = 0;\n\n                    <div class=\"card form-group\">\n                        <div class=\"card-header text-muted\">\n                            @zone\n                        </div>\n                        <div class=\"layer-zone card-body\" data-zone=\"@zone\">\n                            @if (Model.Widgets.ContainsKey(zone) && Model.Widgets[zone].Any())\n                            {\n                                <div class=\"form-group\">\n                                    <ul class=\"list-group zones\">\n                                        @foreach (var contentItemSummary in Model.Widgets[zone])\n                                        {\n                                            await contentItemSummary.Tags.AddAsync(Html.Raw(\"<span class=\\\"badge ta-badge font-weight-normal\\\"><i class=\\\"fa fa-bookmark-o text-info\\\" aria-hidden=\\\"true\\\"></i> \" + contentItemSummary.ContentItem.Content.LayerMetadata.Layer + \"</span>\"));\n                                            maxPosition = Math.Max(maxPosition, (double)contentItemSummary.ContentItem.Content.LayerMetadata.Position);\n\n                                            <text>\n                                                <li class=\"list-group-item\">\n                                                    <div class=\"properties cursor-move\">\n                                                        @await DisplayAsync(contentItemSummary)\n                                                    </div>\n                                                    <input type=\"hidden\"\n                                                            class=\"layer-metadata\"\n                                                            data-zone=\"@zone\"\n                                                            data-layer=\"@contentItemSummary.ContentItem.Content.LayerMetadata.Layer\"\n                                                            data-position=\"@contentItemSummary.ContentItem.Content.LayerMetadata.Position.ToString(CultureInfo.InvariantCulture)\"\n                                                            data-content-item-id=\"@contentItemSummary.ContentItem.ContentItemId\" />\n                                                </li>\n                                            </text>\n                                        }\n                                    </ul>\n                                </div>\n                            }\n                            @if (Model.Layers.Any())\n                            {\n                                @if (widgetContentTypes.Any())\n                                {\n                                    <div class=\"btn-dropdown-wrapper w-100\">\n                                        <div class=\"btn-group btn-dropdown\">\n                                            <button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                                @T[\"Add Widget\"]\n                                            </button>\n                                            <div class=\"dropdown-menu\">\n                                                @foreach (var type in widgetContentTypes)\n                                                {\n                                                    var contentItem = await ContentManager.NewAsync(type.Name);\n                                                    var createRoute = (await ContentManager.PopulateAspectAsync<ContentItemMetadata>(contentItem)).CreateRouteValues;\n                                                    createRoute[\"returnUrl\"] = Context.Request.PathBase + Context.Request.Path;\n                                                    createRoute[\"LayerMetadata.Zone\"] = zone;\n                                                    createRoute[\"LayerMetadata.Position\"] = maxPosition + 1;\n                                                    <a class=\"dropdown-item add-list-widget btn-sm\"\n                                                    data-widget-type=\"@type.Name\"\n                                                    data-zone=\"@zone\"\n                                                    href=\"@Url.Action((string)createRoute[\"Action\"], (string)createRoute[\"controller\"], createRoute)\">@type.DisplayName</a>\n                                                }\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                                else\n                                {\n                                    <span>@T[\"No widgets found.\"]</span>\n                                }\n                            }\n                            else\n                            {\n                                <span>@T[\"No layers found.\"]</span>\n                            }\n                        </div>\n                    </div>\n                }\n            }\n        </form>\n    </div>\n    <div class=\"col-md-4 col-md-pull-right\">\n        <h3>@T[\"Layers\"]</h3>\n        <p>\n            <span class=\"hint\">\n                @T[\"Select a layer to reveal its associated widgets.\"]\n                <a class=\"seedoc\" href=\"@(OrchardCore.Admin.Constants.DocsUrl)reference/modules/Layers/#rules\" target=\"_blank\">@T[\"See documentation\"]</a>\n            </span>\n        </p>\n        <div class=\"form-group\">\n            <ul class=\"list-group\">\n                @foreach (var layer in Model.Layers)\n                {\n                    <li class=\"list-group-item\">\n                        <div class=\"properties\">\n                            <div class=\"d-flex flex-wrap\">\n                                <div class=\"custom-control custom-checkbox mr-auto flex-grow-1\">\n                                    <input type=\"checkbox\" class=\"custom-control-input layer-check\" id=\"@layer.Name\" value=\"@layer.Name\">\n                                    <label class=\"custom-control-label\" for=\"@layer.Name\">@layer.Name</label>\n                                </div>\n                                <div>\n                                    <a class=\"btn btn-primary btn-sm\" href=\"@Url.Action(\"Edit\", \"Admin\", new { area = \"OrchardCore.Layers\", name = layer.Name })\">@T[\"Edit\"]</a>\n                                    <a class=\"btn btn-danger btn-sm\" href=\"@Url.Action(\"Delete\", \"Admin\", new { area = \"OrchardCore.Layers\", name = layer.Name })\" data-url-af=\"RemoveUrl UnsafeUrl\">@T[\"Delete\"]</a>\n                                </div>\n                            </div>\n                            <div>\n                                <span class=\"hint\">@layer.Description</span>\n                            </div>\n                        </div>\n                    </li>\n                }\n            </ul>\n        </div>\n        @if (!Model.Layers.Any())\n        {\n            <p class=\"alert alert-warning\">@T[\"Please <a href=\\\"{0}\\\">create a layer</a> before adding Widgets\", Url.Action(\"Create\", \"Admin\", new { area = \"OrchardCore.Layers\" })]</p>\n        }\n\n        <a class=\"button btn-sm\" href=\"@Url.Action(\"Create\", \"Admin\", new { area = \"OrchardCore.Layers\" })\">@T[\"Add\"]</a>\n    </div>\n</div>\n\n<script at=\"Foot\">\n    $(\".list-group.zones\").sortable({\n        handle: \".properties\",\n        cursor: \"move\",\n        connectWith: '.list-group',\n        stop: function (event, ui) {\n            var newZone = ui.item.closest('.layer-zone').data(\"zone\");\n            var metadata = ui.item.find('.layer-metadata')\n            var currentPosition = Number(metadata.data(\"position\"));\n            var item = ui.item.closest('.list-group-item');\n            var previous = item.prev('.list-group-item').find('.layer-metadata');\n            var next = item.next('.list-group-item').find('.layer-metadata');\n            var contentItemId = metadata.data(\"content-item-id\");\n\n            var newPosition = currentPosition;\n\n            if (previous.length == 0 && next.length == 0) {\n                // we can keep the current position\n            }\n            else if (previous.length == 0 && next.length > 0) {\n                // first in the list\n                newPosition = Number(next.data(\"position\") || 0) - 1;\n            }\n            else if (previous.length > 0 && next.length == 0) {\n                // last in the list\n                newPosition = Number(previous.data(\"position\") || 0) + 1;\n            }\n            else {\n                newPosition = (Number(previous.data(\"position\") || 0) + Number(next.data(\"position\") || 0)) / 2;\n            }\n\n            var currentZone = metadata.data(\"zone\");\n            var currentPosition = metadata.data(\"position\");\n\n            metadata.data(\"zone\", newZone);\n            metadata.data(\"position\", newPosition);\n\n            var url = \"@Url.Action(\"UpdatePosition\", \"Admin\", new { area = \"OrchardCore.Layers\" })\" + \"?\" + \"contentItemId=\" + encodeURIComponent(contentItemId) + \"&position=\" + encodeURIComponent(newPosition) + \"&zone=\" + encodeURIComponent(newZone);\n            var antiforgerytoken = $(\"[name='__RequestVerificationToken']\").val();\n\n            $.post(url, { \"__RequestVerificationToken\": antiforgerytoken })\n                .done(function () {\n                    console.log('done');\n                    $('#layer-undo-message').removeClass(\"d-none\");\n                    $('#layer-undo-message-contentItemId').val(contentItemId);\n                    $('#layer-undo-message-position').val(currentPosition);\n                    $('#layer-undo-message-zone').val(currentZone);\n                })\n                .fail(function () {\n                    console.log('failed');\n                    $('#layer-undo-message').addClass(\"d-none\");\n                })\n            ;\n        }\n    });\n\n    $('.layer-check').on('click', function () {\n        $('.list-group-item').removeClass('list-group-item-success');\n        $('.layer-check:checked').each(function () {\n            var layer = $(this).val();\n            $('[data-layer=\"' + layer + '\"]').closest('.list-group-item').addClass('list-group-item-success');\n        });\n    });\n</script>\n", "@using OrchardCore.Users.Models;\n@model RegistrationSettings\n\n<style asp-name=\"codemirror\"></style>\n<script asp-name=\"codemirror\" depends-on=\"admin\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-javascript\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-display-autorefresh\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-mode-simple\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-mode-multiplex\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-xml\" at=\"Foot\"></script>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersCanRegister\">\n    <label asp-for=\"UsersCanRegister\">@T[\"Configure users registration.\"]</label>\n    <select asp-for=\"UsersCanRegister\" class=\"form-control\">\n        @foreach (UserRegistrationType option in Enum.GetValues(typeof(UserRegistrationType)))\n        {\n            <option value=\"@option\" selected=\"@(Model.UsersCanRegister == option)\">@T[option.ToString()]</option>\n        }\n    </select>\n    <span asp-validation-for=\"UsersCanRegister\"></span>\n\n    <div class=\"hint\">\n        <ul>\n            <li>@T[\"when NoRegistration is selected, no new users can register\"]</li>\n            <li>@T[\"when AllowRegistration is selected, a link is displayed to allow the users to register on the site. If there are external providers, once authenticated the user can register\"]</li>\n            <li>@T[\"when AllowOnlyExternalUsers is selected, only users authenticated with external providers can register on the site\"]</li>\n        </ul>\n    </div>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersMustValidateEmail\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UsersMustValidateEmail\" data-toggle=\"collapse\" data-target=\"#warnEmailValidation\" />\n        <span asp-validation-for=\"UsersMustValidateEmail\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UsersMustValidateEmail\">@T[\"Users must verify their email address\"]</label>\n    </div>\n</div>\n\n<div class=\"alert alert-warning collapse\" id=\"warnEmailValidation\">@T[\"The users whose email address has not been confirmed will not be able to login or reset their password.\"]</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersAreModerated\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UsersAreModerated\" />\n        <span asp-validation-for=\"UsersAreModerated\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UsersAreModerated\">@T[\"Users must be approved before they can log in\"]</label>\n    </div>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UseSiteTheme\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UseSiteTheme\" />\n        <span asp-validation-for=\"UseSiteTheme\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UseSiteTheme\">@T[\"Use site theme for registration page\"]</label>\n        <span class=\"hint dashed\">@T[\"Requires an active site theme.\"]</span>\n    </div>\n</div>\n\n<h5 class=\"form-group\">@T[\"External Authentication\"]<span class=\"hint dashed\">@T[\"Settings when registering with external authentication providers\"]</span></h5>\n\n<div class=\"form-group\" asp-validation-class-for=\"UseScriptToGenerateUsername\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UseScriptToGenerateUsername\" />\n        <span asp-validation-for=\"UseScriptToGenerateUsername\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UseScriptToGenerateUsername\">@T[\"Use a script to generate userName based on external provider claims\"]</label>\n        <span class=\"hint dashed\">@T[\"If selected, any IExternalLoginEventHandlers defined in modules are not triggered\"]</span>\n    </div>\n    <pre>\n********************************************************************************************\n* context          : {userName,loginProvider,externalClaims[]}                             *\n* ======================================================================================== *\n* -userName        : String                                                                *\n* -loginProvider   : String                                                                *\n* -externalClaims  : [{subject,issuer,originalIssuer,properties[],type,value,valueType}]   *\n*  -subject        : String                                                                *\n*  -issuer         : String                                                                *\n*  -originalIssuer : String                                                                *\n*  -properties     : [{key,value}]                                                         *\n*   -key           : String                                                                *\n*   -value         : String                                                                *\n*  -type           : String                                                                *\n*  -value          : String                                                                *\n*  -valueType      : String                                                                *\n* ======================================================================================== *\n*    Description                                                                           *\n* ---------------------------------------------------------------------------------------- *\n*    Use the loginProvider and externalClaims properties of the context variable to        *\n*    inspect who authenticated the user and with what claims. If you do not set the        *\n*    context.userName property, a username will be generated.                              *\n*                                                                                          *\n********************************************************************************************\n</pre>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"GenerateUsernameScript\">\n    <button type=\"button\" class=\"btn btn-secondary mb-2\" onclick=\"resetScript()\">@T[\"Reset Script\"]</button>\n    <textarea asp-for=\"GenerateUsernameScript\" rows=\"1\" class=\"form-control content-preview-text\"></textarea>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"NoUsernameForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoUsernameForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoUsernameForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoUsernameForExternalUsers\">@T[\"Do not ask username\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider, they are not required to provide a local username. You can customize how it works by providing an IExternalLoginEventHandler or writing a script.\"]</span>\n    </div>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"NoEmailForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoEmailForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoEmailForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoEmailForExternalUsers\">@T[\"Do not ask email address\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider and the email claim is defined, they are not required to provide a local email address.\"]</span>\n    </div>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"NoPasswordForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoPasswordForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoPasswordForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoPasswordForExternalUsers\">@T[\"Do not create local password for external users\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider, they are not required to provide a local password.\"]</span>\n    </div>\n</div>\n\n<script at=\"Foot\">\n    //<![CDATA[\n    function refresh(e) {\n        var usersCanRegisterElement = document.getElementById(\"@Html.IdFor(m => m.UsersCanRegister)\");\n        var externalRegistrationInputs = $(\"input[data-external-registration]\");\n\n        if (usersCanRegisterElement.value == \"NoRegistration\") {\n            externalRegistrationInputs.prop('disabled', true);\n        } else {\n            externalRegistrationInputs.prop('disabled', false);\n        }\n    }\n\n    function resetScript(keepText) {\n        var editor = $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor');\n        if (!keepText) {\n            editor.doc.setValue(\n                '/* Uncomment to map AzureAD\\n' +\n                '// Uncomment to output the context variable in the logs\\n' +\n                '// log(\"warning\", JSON.stringify(context));\\n' +\n                'switch (context.loginProvider) {\\n' +\n                '    case \"AzureAD\":\\n' +\n                '        context.userName = \"azad\" + uuid();\\n' +\n                '        break;\\n' +\n                '    default:\\n' +\n                '        log(\"Warning\", \"Provider \" + context.loginProvider + \" was not handled\");\\n' +\n                '        // Uncomment to generate a username as a uuid\\n' +\n                '        // context.userName = \"u\" + uuid();\\n' +\n                '        break;\\n' +\n                '}\\n' +\n                '*/\\n'\n            );\n        }\n    }\n\n    window.onload=function () {\n        refresh();\n\n        $(\"#@Html.IdFor(m => m.UsersCanRegister)\").change(function () {\n            refresh();\n        });\n\n        var textArea = document.getElementById('@Html.IdFor(x => x.GenerateUsernameScript)');\n        if (textArea == null) {\n            return;\n        }\n        var editor = CodeMirror.fromTextArea(textArea, {\n            autoRefresh: true,\n            lineNumbers: true,\n            styleActiveLine: true,\n            matchBrackets: true,\n            autoCloseTags: true,\n            mode: \"javascript\"\n        });\n        $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor', editor);\n        resetScript(editor.doc.getValue() != '');\n    };\n    //]]>\n</script>\n", "@using OrchardCore.Workflows.UserTasks.ViewModels\n@model UserTaskEventContentViewModel\n@{\n    var actions = Model.Actions;\n}\n@if (actions.Count <= 2)\n{\n    @foreach (var action in actions)\n    {\n        <div class=\"btn-group\" role=\"group\">\n            <button class=\"btn btn-warning\" type=\"submit\" name=\"submit.Save\" value=\"user-task.@action\">@T[action] @T[\"and Save\"]</button>\n            <button type=\"button\" class=\"btn btn-warning dropdown-toggle dropdown-toggle-split\" data-reference=\"parent\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"sr-only\">@T[\"Toggle Dropdown\"]</span>\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"userActionsButtonGroup\">\n                <button type=\"submit\" name=\"submit.Publish\" class=\"dropdown-item\" value=\"user-task.@action\">@T[action] @T[\"and Publish\"]</button>\n            </div>\n        </div>\n    }\n}\nelse\n{\n    <div class=\"btn-group\" role=\"group\">\n        <button id=\"userActionsButtonGroup\" type=\"button\" class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            @T[\"User Actions\"]\n        </button>\n        <div class=\"dropdown-menu\" aria-labelledby=\"userActionsButtonGroup\">\n            @foreach (var action in actions)\n            {\n                <button type=\"submit\" name=\"submit.Save\" class=\"dropdown-item\" value=\"user-task.@action\">@T[action] @T[\"and Save\"]</button>\n                <button type=\"submit\" name=\"submit.Publish\" class=\"dropdown-item\" value=\"user-task.@action\">@T[action] @T[\"and Publish\"]</button>\n            }\n        </div>\n    </div>\n}\n"], "fixing_code": ["using System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.Extensions.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.Admin;\nusing OrchardCore.AdminDashboard.Models;\nusing OrchardCore.AdminDashboard.Services;\nusing OrchardCore.AdminDashboard.ViewModels;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.Contents;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Settings;\n\nnamespace OrchardCore.AdminDashboard.Controllers\n{\n    [Admin]\n    public class DashboardController : Controller\n    {\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IAdminDashboardService _adminDashboardService;\n        private readonly IContentManager _contentManager;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly ISiteService _siteService;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly INotifier _notifier;\n        private readonly IStringLocalizer S;\n        private readonly IHtmlLocalizer H;\n        private readonly dynamic New;\n        private readonly YesSql.ISession _session;\n        private readonly ILogger _logger;\n\n        public DashboardController(\n            IAuthorizationService authorizationService,\n            IAdminDashboardService adminDashboardService,\n            IContentManager contentManager,\n            IContentItemDisplayManager contentItemDisplayManager,\n            IContentDefinitionManager contentDefinitionManager,\n            ISiteService siteService,\n            IUpdateModelAccessor updateModelAccessor,\n            IShapeFactory shapeFactory,\n            INotifier notifier,\n            IStringLocalizer<DashboardController> stringLocalizer,\n            IHtmlLocalizer<DashboardController> htmlLocalizer,\n            YesSql.ISession session,\n            ILogger<DashboardController> logger)\n        {\n            _authorizationService = authorizationService;\n            _adminDashboardService = adminDashboardService;\n            _contentManager = contentManager;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            _siteService = siteService;\n            _updateModelAccessor = updateModelAccessor;\n            New = shapeFactory;\n            _notifier = notifier;\n            S = stringLocalizer;\n            H = htmlLocalizer;\n            _session = session;\n            _logger = logger;\n        }\n\n        public async Task<IActionResult> Index()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.AccessAdminDashboard))\n            {\n                return Forbid();\n            }\n\n            var widgets = await _adminDashboardService.GetWidgetsAsync(x => x.Published);\n            var wrappers = new List<DashboardWrapper>();\n            foreach (var item in widgets)\n            {\n                wrappers.Add(new DashboardWrapper\n                {\n                    Dashboard = item,\n                    Content = await _contentItemDisplayManager.BuildDisplayAsync(item, _updateModelAccessor.ModelUpdater, \"DetailAdmin\")\n                });\n            }\n\n            var model = new AdminDashboardViewModel\n            {\n                Dashboards = wrappers.ToArray()\n            };\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Manage()\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageAdminDashboard))\n            {\n                return Forbid();\n            }\n\n            // Set Manage Dashboard Feature\n            Request.HttpContext.Features.Set(new DashboardFeature()\n            {\n                IsManageRequest = true\n            });\n\n            var dashboardCreatable = new List<SelectListItem>();\n\n            var widgetContentTypes = _contentDefinitionManager.ListTypeDefinitions()\n                    .Where(t =>\n                    !string.IsNullOrEmpty(t.GetSettings<ContentTypeSettings>().Stereotype) &&\n                    t.GetSettings<ContentTypeSettings>().Stereotype.Contains(\"DashboardWidget\"))\n                    .OrderBy(x => x.DisplayName);\n            foreach (var ctd in widgetContentTypes)\n            {\n                var contentItem = await _contentManager.NewAsync(ctd.Name);\n                contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n                var authorized = await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem);\n                if (authorized)\n                {\n                    dashboardCreatable.Add(new SelectListItem(ctd.DisplayName, ctd.Name));\n                }\n            }\n\n            var widgets = await _adminDashboardService.GetWidgetsAsync(x => x.Latest);\n            var wrappers = new List<DashboardWrapper>();\n            foreach (var item in widgets)\n            {\n                var wrapper = new DashboardWrapper\n                {\n                    Dashboard = item,\n                    Content = await _contentItemDisplayManager.BuildDisplayAsync(item, _updateModelAccessor.ModelUpdater, \"DetailAdmin\")\n                };\n                wrappers.Add(wrapper);\n            }\n\n            var model = new AdminDashboardViewModel\n            {\n                Dashboards = wrappers.ToArray(),\n                Creatable = dashboardCreatable\n            };\n\n            return View(model);\n        }\n        [HttpPost]\n        public async Task<IActionResult> Update([FromForm] DashboardPartViewModel[] parts)\n        {\n            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageAdminDashboard))\n            {\n                return StatusCode(401);\n            }\n\n            var contentItemIds = parts.Select(i => i.ContentItemId).ToArray();\n\n            // Load the latest version first if any\n            var latestItems = await _contentManager.GetAsync(contentItemIds, true);\n\n            var publishedItems = await _contentManager.GetAsync(contentItemIds, false);\n\n            if (latestItems == null)\n            {\n                return StatusCode(404);\n            }\n\n            foreach (var contentItem in latestItems)\n            {\n                var dashboardPart = contentItem.As<DashboardPart>();\n                if (dashboardPart == null)\n                {\n                    return StatusCode(403);\n                }\n\n                var partViewModel = parts.Where(m => m.ContentItemId == contentItem.ContentItemId).FirstOrDefault();\n\n                dashboardPart.Position = partViewModel?.Position ?? 0;\n                dashboardPart.Width = partViewModel?.Width ?? 1;\n                dashboardPart.Height = partViewModel?.Height ?? 1;\n\n                contentItem.Apply(dashboardPart);\n\n                _session.Save(contentItem);\n\n                if (contentItem.IsPublished() == false)\n                {\n                    var publishedVersion = publishedItems.Where(p => p.ContentItemId == contentItem.ContentItemId).FirstOrDefault();\n                    var publishedMetaData = publishedVersion?.As<DashboardPart>();\n                    if (publishedVersion != null && publishedMetaData != null)\n                    {\n                        publishedMetaData.Position = partViewModel.Position;\n                        publishedMetaData.Width = partViewModel.Width;\n                        publishedMetaData.Height = partViewModel.Height;\n                        publishedVersion.Apply(publishedMetaData);\n                        _session.Save(publishedVersion);\n                    }\n                }\n\n            }\n\n            if (Request.Headers != null && Request.Headers[\"X-Requested-With\"] == \"XMLHttpRequest\")\n            {\n                return StatusCode(200);\n            }\n            else\n            {\n                return RedirectToAction(nameof(Manage));\n            }\n\n        }\n    }\n}\n", "@model AdminDashboardViewModel\n@using OrchardCore.ContentManagement;\n@inject IAuthorizationService AuthorizationService\n@inject IContentManager ContentManager\n@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager\n@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager\n\n@{\n    // Todo Create Settings for Dashboard\n    var settings = new\n    {\n        // Default is 1, i.e. 6 columns in large screen, 3 for tablets and 1 for phones.\n        // Changing Scale 2 will increase the # columns to 12 for large screen, 6 for tablets and 2 for phones.\n        ColumnScale = 1\n    };\n}\n\n<style asp-name=\"jQuery-ui\" at=\"Head\"></style>\n<style asp-src=\"~/OrchardCore.AdminDashboard/Styles/dashboard.min.css\" debug-src=\"~/OrchardCore.AdminDashboard/Styles/dashboard.css\" depends-on=\"jQuery-ui\" at=\"Head\"></style>\n<script asp-name=\"jQuery-ui\" at=\"Foot\"></script>\n\n<div class=\"float-right mb-3 d-inline-flex\">\n    <a class=\"btn btn-success btn-sm  mr-1\" asp-action=\"Index\">\n        @T[\"Close Editor\"]\n    </a>\n    @if (Model.Creatable.Any())\n    {\n        <div class=\"dropdown order-md-1\">\n            <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"new-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                @T[\"Add Widget\"]\n            </button>\n            <div class=\"dropdown-menu dropdown-menu-right scrollable\" aria-labelledby=\"bulk-action-menu-button\">\n                @foreach (var item in Model.Creatable)\n                {\n                    <a class=\"dropdown-item add-list-widget btn-sm\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = @item.Value, returnUrl = FullRequestPath })\">@T[Html.Encode(item.Text)]</a>\n                }\n            </div>\n        </div>\n    }\n</div>\n<zone Name=\"Title\"><h1 class=\"float-left\">@RenderTitleSegments(T[\"Dashboard\"])</h1></zone>\n<div class=\"clearfix\"></div>\n\n<div id=\"dashboard-undo-message\" class=\"alert alert-success alert-dismissible show d-none\" role=\"alert\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n    </button>\n    <form id=\"dashboard-undo-form\" asp-action=\"Update\" method=\"POST\" class=\"no-multisubmit\">\n        @for (int index = 0; index < Model.Dashboards.Count(); index++)\n        {\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)\" name=\"parts[@(index)].ContentItemId\" value=\"@Model.Dashboards[index].Dashboard.ContentItemId\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Width\" name=\"parts[@(index)].Width\" value=\"\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Height\" name=\"parts[@(index)].Height\" value=\"\" />\n            <input type=\"hidden\" id=\"undo_@(Model.Dashboards[index].Dashboard.ContentItemId)_Position\" name=\"parts[@(index)].Position\" value=\"\" />\n        }\n    </form>\n    @T[\"Dashboard successfully updated.\"]&nbsp;<a href=\"#\"><strong>@T[\"Undo\"]</strong></a>.\n</div>\n\n<div class=\"dashboard-container\" id=\"container\" style=\"--dashboard-columns: calc( @(settings.ColumnScale) * var(--dashboard-columns-default));\">\n    @foreach (var dashboard in Model.Dashboards)\n    {\n        @await DisplayAsync(dashboard)\n    }\n</div>\n\n<script depends-on=\"jQuery-ui\" at=\"Foot\">\n    $(document).ready(function(){\n        //\n        var _menu = null;\n        var cellSize = {\n            width: 240,\n            height: 240\n        };\n\n        $(\"#dashboard-undo-message a\").on('click', function(e){\n            e.preventDefault();\n            $(\"#dashboard-undo-form\").submit();\n        });\n\n        function Update(metadata)\n        {\n            var token = $(\"[name='__RequestVerificationToken']\").val();\n            var data = {\n                __RequestVerificationToken : token,\n                parts : metadata\n            };\n            $.post({\n                url: '@Url.Action(\"Update\")',\n                data: data,\n                success: function (data) {\n                    $('#dashboard-undo-message').removeClass(\"d-none\");\n                },\n                fail: function(){\n                    $('#dashboard-undo-message').addClass(\"d-none\");\n                }\n            });\n        }\n\n        function snapTo(org, val, gridSize)\n        {\n            var snap_X =1;\n            if (org.width < val.width)\n            {\n                snap_X = Math.ceil(val.width/gridSize.width) ;\n            }\n            else\n            {\n                snap_X = Math.floor(val.width/gridSize.width) ;\n            }\n\n            if (snap_X === 0)\n                snap_X = 1;\n\n            var snap_Y =1;\n            if (org.height < val.height)\n            {\n                snap_Y = Math.ceil(val.height/gridSize.height) ;\n            }\n            else\n            {\n                snap_Y = Math.floor(val.height/gridSize.height) ;\n            }\n\n            if(snap_Y ===0 )\n                snap_Y = 1;\n            var snap = { X : snap_X, Y: snap_Y};\n            return snap;\n        }\n\n        function setUndoValues()\n        {\n            $(\".dashboard-container .dashboard-wrapper\")\n                .each(function (index, value) {\n                    $('#undo_' + $(value).attr('id') + '_Position').val(index);\n                    $('#undo_' + $(value).attr('id') + '_Height').val(value.style.getPropertyValue('--dashboard-height'));\n                    $('#undo_' + $(value).attr('id') + '_Width').val(value.style.getPropertyValue('--dashboard-width'));\n                });\n        }\n\n        function getCurrentValues()\n        {\n            var metadata = [];\n            $(\".dashboard-container .dashboard-wrapper\")\n                .each(function (index, value) {\n                    var position = index;\n                    var height = $(this)[0].style.getPropertyValue('--dashboard-height');\n                    var width = $(this)[0].style.getPropertyValue('--dashboard-width');\n                    var contentItemId = $(this).attr(\"id\");\n\n                    metadata.push( {\n                        \"ContentItemId\" : contentItemId,\n                        \"Position\" : position,\n                        \"Width\" : width,\n                        \"Height\": height\n                    });\n                });\n            return metadata;\n        }\n\n        function calculateCellSize()\n        {\n            var container = document.getElementById(\"container\");\n            var styles = window.getComputedStyle(container);\n\n            var rows = styles.getPropertyValue('grid-template-rows');\n            var columns = styles.getPropertyValue('grid-template-columns');\n\n            var rowGap = styles.getPropertyValue('grid-row-gap').replace('px','');;\n            var columnGap = styles.getPropertyValue('grid-column-gap').replace('px','');;\n            var height = rows.split(' ')[0].replace('px','');\n            var width = columns.split(' ')[0].replace('px','');\n\n            cellSize = {\n                width: width,\n                height: height,\n                gap : {\n                    width : columnGap,\n                    height : rowGap\n                }\n            };\n        }\n\n        var _sortable = $(\".dashboard-container\").sortable({\n            tolerance: \"pointer\",\n            opacity: 0.7,\n            handle: \".dashboard-handle\",\n            placeholder: {\n                element: function(currentItem) {\n                    return $('<div  class=\"dashboard-dragdrop-placeholder\"><div></div></div>')[0];\n                },\n                update: function (container, p) {\n                    return;\n                }\n            },\n            start: function (e, ui) {\n\n                if(_menu != null){\n                    $(document).trigger('click');\n                }\n\n                setUndoValues();\n\n                var dahsboard = ui.item[0];\n                ui.placeholder[0].style.setProperty(\"--dashboard-width\", dahsboard.style.getPropertyValue(\"--dashboard-width\"));\n                ui.placeholder[0].style.setProperty(\"--dashboard-height\", dahsboard.style.getPropertyValue(\"--dashboard-height\"));\n\n            },\n            update: function (event, ui) {\n                var op = $('#undo_' + ui.item.attr('id') + '_Position');\n                // Only update if Position is changed\n                if(op.val() != ui.item.index()){\n                    var changed =  getCurrentValues();\n                    Update(changed);\n                }\n            }\n        });\n        $(\".dashboard-wrapper\").resizable({\n            handles: \"s,e,se\",\n            helper: \"ui-resizable-helper\"\n,\n            start: function (event, ui) {\n                if(_menu != null){\n                    $(document).trigger('click');\n                }\n                setUndoValues();\n            },\n            resize: function (event, ui) {\n\n                var original = {\n                    width : ui.originalSize.width,\n                    height: ui.originalSize.height\n                };\n\n                var updated = {\n                    width : ui.size.width,\n                    height: ui.size.height\n                };\n\n                var snap = snapTo(original, updated, cellSize);\n\n                ui.helper[0].style.setProperty(\"--dashboard-width\", snap.X);\n                ui.helper[0].style.setProperty(\"--dashboard-height\", snap.Y);\n\n                ui.helper.css(\"width\", (snap.X * cellSize.width) + ((snap.X -1 ) * cellSize.gap.width)  );\n                ui.helper.css(\"height\", (snap.Y * cellSize.height) + ((snap.Y -1 ) * cellSize.gap.height) );\n            },\n            stop: function (event, ui) {\n\n                $(this).css(\"width\", '');\n                $(this).css(\"height\", '');\n\n                var original = {\n                    width : ui.originalSize.width,\n                    height: ui.originalSize.height\n                };\n\n                var updated = {\n                    width : ui.size.width,\n                    height: ui.size.height\n                };\n\n                var snap = snapTo(original, updated, cellSize);\n\n                var ow = $('#undo_' + ui.element.attr('id') + '_Width');\n                var oh = $('#undo_' + ui.element.attr('id') + '_Height');\n\n                // Only update if values have changed\n                if(ow != snap.X || oh != snap.Y)\n                {\n                    ui.element[0].style.setProperty(\"--dashboard-width\", snap.X);\n                    ui.element[0].style.setProperty(\"--dashboard-height\", snap.Y);\n\n                    var changed =  getCurrentValues();\n                    Update(changed);\n                }\n            }\n        });\n\n        $(window).on('show.bs.dropdown', function (e) {\n            _menu = $(e.target).find('.dropdown-menu');\n            $('body').append(_menu.detach());\n            var eOffset = $(e.target).offset();\n            _menu.css({\n                'display': 'block',\n                    'top': eOffset.top + $(e.target).outerHeight(),\n                    'left': eOffset.left\n            });\n        });\n\n        $(window).on('resize', function (e) {\n            calculateCellSize();\n        });\n\n        $(window).on('hide.bs.dropdown', function (e) {\n            $(e.target).append(_menu.detach());\n            _menu.hide();\n            _menu = null;\n        });\n    });\n</script>\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Localization;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Localization;\nusing Microsoft.Extensions.Logging;\nusing OrchardCore.ContentManagement;\nusing OrchardCore.ContentManagement.Display;\nusing OrchardCore.ContentManagement.Metadata;\nusing OrchardCore.ContentManagement.Metadata.Models;\nusing OrchardCore.ContentManagement.Metadata.Settings;\nusing OrchardCore.ContentManagement.Records;\nusing OrchardCore.Contents.Services;\nusing OrchardCore.Contents.ViewModels;\nusing OrchardCore.DisplayManagement;\nusing OrchardCore.DisplayManagement.ModelBinding;\nusing OrchardCore.DisplayManagement.Notify;\nusing OrchardCore.Navigation;\nusing OrchardCore.Routing;\nusing OrchardCore.Settings;\nusing YesSql;\nusing YesSql.Filters.Query;\nusing YesSql.Services;\n\nnamespace OrchardCore.Contents.Controllers\n{\n    public class AdminController : Controller\n    {\n        private readonly IContentManager _contentManager;\n        private readonly IContentDefinitionManager _contentDefinitionManager;\n        private readonly ISiteService _siteService;\n        private readonly YesSql.ISession _session;\n        private readonly IContentItemDisplayManager _contentItemDisplayManager;\n        private readonly INotifier _notifier;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly IDisplayManager<ContentOptionsViewModel> _contentOptionsDisplayManager;\n        private readonly IContentsAdminListQueryService _contentsAdminListQueryService;\n        private readonly IHtmlLocalizer H;\n        private readonly IStringLocalizer S;\n        private readonly IUpdateModelAccessor _updateModelAccessor;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IShapeFactory _shapeFactory;\n        private readonly dynamic New;\n        private readonly ILogger _logger;\n\n        public AdminController(\n            IAuthorizationService authorizationService,\n            IContentManager contentManager,\n            IContentItemDisplayManager contentItemDisplayManager,\n            IContentDefinitionManager contentDefinitionManager,\n            ISiteService siteService,\n            INotifier notifier,\n            YesSql.ISession session,\n            IShapeFactory shapeFactory,\n            IDisplayManager<ContentOptionsViewModel> contentOptionsDisplayManager,\n            IContentsAdminListQueryService contentsAdminListQueryService,\n            ILogger<AdminController> logger,\n            IHtmlLocalizer<AdminController> htmlLocalizer,\n            IStringLocalizer<AdminController> stringLocalizer,\n            IUpdateModelAccessor updateModelAccessor,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _authorizationService = authorizationService;\n            _notifier = notifier;\n            _contentItemDisplayManager = contentItemDisplayManager;\n            _session = session;\n            _siteService = siteService;\n            _contentManager = contentManager;\n            _contentDefinitionManager = contentDefinitionManager;\n            _updateModelAccessor = updateModelAccessor;\n            _httpContextAccessor = httpContextAccessor;\n            _contentOptionsDisplayManager = contentOptionsDisplayManager;\n            _contentsAdminListQueryService = contentsAdminListQueryService;\n\n            H = htmlLocalizer;\n            S = stringLocalizer;\n            _shapeFactory = shapeFactory;\n            New = shapeFactory;\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> List(\n            [ModelBinder(BinderType = typeof(ContentItemFilterEngineModelBinder), Name = \"q\")] QueryFilterResult<ContentItem> queryFilterResult,\n            ContentOptionsViewModel options,\n            PagerParameters pagerParameters,\n            string contentTypeId = \"\")\n        {\n            var context = _httpContextAccessor.HttpContext;\n            var contentTypeDefinitions = _contentDefinitionManager.ListTypeDefinitions()\n                    .Where(ctd => ctd.GetSettings<ContentTypeSettings>().Creatable)\n                    .OrderBy(ctd => ctd.DisplayName);\n\n            if (!await _authorizationService.AuthorizeContentTypeDefinitionsAsync(User, CommonPermissions.EditContent, contentTypeDefinitions, _contentManager))\n            {\n                return Forbid();\n            }\n\n            var siteSettings = await _siteService.GetSiteSettingsAsync();\n            var pager = new Pager(pagerParameters, siteSettings.PageSize);\n\n            // This is used by the AdminMenus so needs to be passed into the options.\n            if (!String.IsNullOrEmpty(contentTypeId))\n            {\n                options.SelectedContentType = contentTypeId;\n            }\n\n            // The filter is bound seperately and mapped to the options.\n            // The options must still be bound so that options that are not filters are still bound\n            options.FilterResult = queryFilterResult;\n\n            // Populate the creatable types.\n            if (!String.IsNullOrEmpty(options.SelectedContentType))\n            {\n                // When the selected content type is provided via the route or options a placeholder node is used to apply a filter.\n                options.FilterResult.TryAddOrReplace(new ContentTypeFilterNode(options.SelectedContentType));\n\n                var contentTypeDefinition = _contentDefinitionManager.GetTypeDefinition(options.SelectedContentType);\n                if (contentTypeDefinition == null)\n                {\n                    return NotFound();\n                }\n\n                var creatableList = new List<SelectListItem>();\n\n                // Allows non creatable types to be created by another admin page.\n                if (contentTypeDefinition.GetSettings<ContentTypeSettings>().Creatable || options.CanCreateSelectedContentType)\n                {\n                    var contentItem = await _contentManager.NewAsync(contentTypeDefinition.Name);\n                    contentItem.Owner = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                    if (await _authorizationService.AuthorizeAsync(context.User, CommonPermissions.EditContent, contentItem))\n                    {\n                        creatableList.Add(new SelectListItem(contentTypeDefinition.DisplayName, contentTypeDefinition.Name));\n                    }\n                }\n\n                options.CreatableTypes = creatableList;\n            }\n\n            if (options.CreatableTypes == null)\n            {\n                var creatableList = new List<SelectListItem>();\n                if (contentTypeDefinitions.Any())\n                {\n                    foreach (var contentTypeDefinition in contentTypeDefinitions)\n                    {\n                        var contentItem = await _contentManager.NewAsync(contentTypeDefinition.Name);\n                        contentItem.Owner = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                        if (await _authorizationService.AuthorizeAsync(context.User, CommonPermissions.EditContent, contentItem))\n                        {\n                            creatableList.Add(new SelectListItem(contentTypeDefinition.DisplayName, contentTypeDefinition.Name));\n                        }\n                    }\n                }\n\n                options.CreatableTypes = creatableList;\n            }\n\n            // We populate the remaining SelectLists.\n            options.ContentStatuses = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Latest\"], Value = nameof(ContentsStatus.Latest), Selected = (options.ContentsStatus == ContentsStatus.Latest) },\n                new SelectListItem() { Text = S[\"Published\"], Value = nameof(ContentsStatus.Published), Selected = (options.ContentsStatus == ContentsStatus.Published) },\n                new SelectListItem() { Text = S[\"Unpublished\"], Value = nameof(ContentsStatus.Draft), Selected = (options.ContentsStatus == ContentsStatus.Draft) },\n                new SelectListItem() { Text = S[\"All versions\"], Value = nameof(ContentsStatus.AllVersions), Selected = (options.ContentsStatus == ContentsStatus.AllVersions) }\n            };\n\n            if (await _authorizationService.AuthorizeAsync(context.User, Permissions.ListContent))\n            {\n                options.ContentStatuses.Insert(1, new SelectListItem() { Text = S[\"Owned by me\"], Value = nameof(ContentsStatus.Owner) });\n            }\n\n            options.ContentSorts = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Recently created\"], Value = nameof(ContentsOrder.Created), Selected = (options.OrderBy == ContentsOrder.Created) },\n                new SelectListItem() { Text = S[\"Recently modified\"], Value = nameof(ContentsOrder.Modified), Selected = (options.OrderBy == ContentsOrder.Modified) },\n                new SelectListItem() { Text = S[\"Recently published\"], Value = nameof(ContentsOrder.Published), Selected = (options.OrderBy == ContentsOrder.Published) },\n                new SelectListItem() { Text = S[\"Title\"], Value = nameof(ContentsOrder.Title), Selected = (options.OrderBy == ContentsOrder.Title) },\n            };\n\n            options.ContentsBulkAction = new List<SelectListItem>()\n            {\n                new SelectListItem() { Text = S[\"Publish Now\"], Value = nameof(ContentsBulkAction.PublishNow) },\n                new SelectListItem() { Text = S[\"Unpublish\"], Value = nameof(ContentsBulkAction.Unpublish) },\n                new SelectListItem() { Text = S[\"Delete\"], Value = nameof(ContentsBulkAction.Remove) }\n            };\n\n            if ((String.IsNullOrEmpty(options.SelectedContentType) || String.IsNullOrEmpty(contentTypeId)) && options.ContentTypeOptions == null)\n            {\n                var listableTypes = new List<ContentTypeDefinition>();\n                var userNameIdentifier = context.User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n                foreach (var ctd in _contentDefinitionManager.ListTypeDefinitions())\n                {\n                    if (ctd.GetSettings<ContentTypeSettings>().Listable)\n                    {\n                        var contentItem = await _contentManager.NewAsync(ctd.Name);\n                        contentItem.Owner = userNameIdentifier;\n                        var authorized = await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem);\n\n                        if (authorized)\n                        {\n                            listableTypes.Add(ctd);\n                        }\n                    }\n                }\n\n                var contentTypeOptions = listableTypes\n                    .Select(ctd => new KeyValuePair<string, string>(ctd.Name, ctd.DisplayName))\n                    .ToList().OrderBy(kvp => kvp.Value);\n\n                options.ContentTypeOptions = new List<SelectListItem>\n                {\n                    new SelectListItem() { Text = S[\"All content types\"], Value = \"\" }\n                };\n\n                foreach (var option in contentTypeOptions)\n                {\n                    options.ContentTypeOptions.Add(new SelectListItem() { Text = option.Value, Value = option.Key, Selected = (option.Value == options.SelectedContentType) });\n                }\n            }\n\n            // If ContentTypeOptions is not initialized by query string or by the code above, initialize it\n            if (options.ContentTypeOptions == null)\n            {\n                options.ContentTypeOptions = new List<SelectListItem>();\n            }\n\n            // With the options populated we filter the query, allowing the filters to alter the options.\n            var query = await _contentsAdminListQueryService.QueryAsync(options, _updateModelAccessor.ModelUpdater);\n\n            // The search text is provided back to the UI.\n            options.SearchText = options.FilterResult.ToString();\n            options.OriginalSearchText = options.SearchText;\n\n            // Populate route values to maintain previous route data when generating page links.\n            options.RouteValues.TryAdd(\"q\", options.FilterResult.ToString());\n\n            var routeData = new RouteData(options.RouteValues);\n            var maxPagedCount = siteSettings.MaxPagedCount;\n            if (maxPagedCount > 0 && pager.PageSize > maxPagedCount)\n            {\n                pager.PageSize = maxPagedCount;\n            }\n\n            var pagerShape = (await New.Pager(pager)).TotalItemCount(maxPagedCount > 0 ? maxPagedCount : await query.CountAsync()).RouteData(routeData);\n\n            // Load items so that loading handlers are invoked.\n            var pageOfContentItems = await query.Skip(pager.GetStartIndex()).Take(pager.PageSize).ListAsync(_contentManager);\n\n            // We prepare the content items SummaryAdmin shape\n            var contentItemSummaries = new List<dynamic>();\n            foreach (var contentItem in pageOfContentItems)\n            {\n                contentItemSummaries.Add(await _contentItemDisplayManager.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater, \"SummaryAdmin\"));\n            }\n\n            // Populate options pager summary values.\n            var startIndex = (pagerShape.Page - 1) * (pagerShape.PageSize) + 1;\n            options.StartIndex = startIndex;\n            options.EndIndex = startIndex + contentItemSummaries.Count - 1;\n            options.ContentItemsCount = contentItemSummaries.Count;\n            options.TotalItemCount = pagerShape.TotalItemCount;\n\n            var header = await _contentOptionsDisplayManager.BuildEditorAsync(options, _updateModelAccessor.ModelUpdater, false);\n\n            var shapeViewModel = await _shapeFactory.CreateAsync<ListContentsViewModel>(\"ContentsAdminList\", viewModel =>\n            {\n                viewModel.ContentItems = contentItemSummaries;\n                viewModel.Pager = pagerShape;\n                viewModel.Options = options;\n                viewModel.Header = header;\n            });\n\n            return View(shapeViewModel);\n        }\n\n        [HttpPost, ActionName(\"List\")]\n        [FormValueRequired(\"submit.Filter\")]\n        public async Task<ActionResult> ListFilterPOST(ContentOptionsViewModel options)\n        {\n            // When the user has typed something into the search input no further evaluation of the form post is required.\n            if (!String.Equals(options.SearchText, options.OriginalSearchText, StringComparison.OrdinalIgnoreCase))\n            {\n                return RedirectToAction(nameof(List), new RouteValueDictionary { { \"q\", options.SearchText } });\n            }\n\n            // Evaluate the values provided in the form post and map them to the filter result and route values.\n            await _contentOptionsDisplayManager.UpdateEditorAsync(options, _updateModelAccessor.ModelUpdater, false);\n\n            // The route value must always be added after the editors have updated the models.\n            options.RouteValues.TryAdd(\"q\", options.FilterResult.ToString());\n\n            return RedirectToAction(nameof(List), options.RouteValues);\n        }\n\n        [HttpPost, ActionName(\"List\")]\n        [FormValueRequired(\"submit.BulkAction\")]\n        public async Task<ActionResult> ListPOST(ContentOptionsViewModel options, IEnumerable<int> itemIds)\n        {\n            if (itemIds?.Count() > 0)\n            {\n                // Load items so that loading handlers are invoked.\n                var checkedContentItems = await _session.Query<ContentItem, ContentItemIndex>().Where(x => x.DocumentId.IsIn(itemIds) && x.Latest).ListAsync(_contentManager);\n                switch (options.BulkAction)\n                {\n                    case ContentsBulkAction.None:\n                        break;\n                    case ContentsBulkAction.PublishNow:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't publish selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.PublishAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content published successfully.\"]);\n                        break;\n                    case ContentsBulkAction.Unpublish:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't unpublish selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.UnpublishAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content unpublished successfully.\"]);\n                        break;\n                    case ContentsBulkAction.Remove:\n                        foreach (var item in checkedContentItems)\n                        {\n                            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, item))\n                            {\n                                await _notifier.WarningAsync(H[\"Couldn't remove selected content.\"]);\n                                await _session.CancelAsync();\n                                return Forbid();\n                            }\n\n                            await _contentManager.RemoveAsync(item);\n                        }\n                        await _notifier.SuccessAsync(H[\"Content removed successfully.\"]);\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n            }\n\n            return RedirectToAction(nameof(List));\n        }\n\n        public async Task<IActionResult> Create(string id)\n        {\n            if (String.IsNullOrWhiteSpace(id))\n            {\n                return NotFound();\n            }\n\n            var contentItem = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, true);\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        [FormValueRequired(\"submit.Save\")]\n        public Task<IActionResult> CreatePOST(string id, [Bind(Prefix = \"submit.Save\")] string submitSave, string returnUrl)\n        {\n            var stayOnSamePage = submitSave == \"submit.SaveAndContinue\";\n            return CreatePOST(id, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.SaveDraftAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content draft has been saved.\"]\n                    : H[\"Your {0} draft has been saved.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        [HttpPost, ActionName(\"Create\")]\n        [FormValueRequired(\"submit.Publish\")]\n        public async Task<IActionResult> CreateAndPublishPOST(string id, [Bind(Prefix = \"submit.Publish\")] string submitPublish, string returnUrl)\n        {\n            var stayOnSamePage = submitPublish == \"submit.PublishAndContinue\";\n            // pass a dummy content to the authorization check to check for \"own\" variations\n            var dummyContent = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            dummyContent.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, dummyContent))\n            {\n                return Forbid();\n            }\n\n            return await CreatePOST(id, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.PublishAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content has been published.\"]\n                    : H[\"Your {0} has been published.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        private async Task<IActionResult> CreatePOST(string id, string returnUrl, bool stayOnSamePage, Func<ContentItem, Task> conditionallyPublish)\n        {\n            var contentItem = await _contentManager.NewAsync(id);\n\n            // Set the current user as the owner to check for ownership permissions on creation\n            contentItem.Owner = User.FindFirstValue(ClaimTypes.NameIdentifier);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, true);\n\n            if (ModelState.IsValid)\n            {\n                await _contentManager.CreateAsync(contentItem, VersionOptions.Draft);\n            }\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(model);\n            }\n\n            await conditionallyPublish(contentItem);\n\n            if ((!string.IsNullOrEmpty(returnUrl)) && (!stayOnSamePage))\n            {\n                return this.LocalRedirect(returnUrl, true);\n            }\n\n            var adminRouteValues = (await _contentManager.PopulateAspectAsync<ContentItemMetadata>(contentItem)).AdminRouteValues;\n\n            if (!string.IsNullOrEmpty(returnUrl))\n            {\n                adminRouteValues.Add(\"returnUrl\", returnUrl);\n            }\n\n            return RedirectToRoute(adminRouteValues);\n        }\n\n        public async Task<IActionResult> Display(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.ViewContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater, \"DetailAdmin\");\n\n            return View(model);\n        }\n\n        public async Task<IActionResult> Edit(string contentItemId)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            return View(model);\n        }\n\n        [HttpPost, ActionName(\"Edit\")]\n        [FormValueRequired(\"submit.Save\")]\n        public Task<IActionResult> EditPOST(string contentItemId, [Bind(Prefix = \"submit.Save\")] string submitSave, string returnUrl)\n        {\n            var stayOnSamePage = submitSave == \"submit.SaveAndContinue\";\n            return EditPOST(contentItemId, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.SaveDraftAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content draft has been saved.\"]\n                    : H[\"Your {0} draft has been saved.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        [HttpPost, ActionName(\"Edit\")]\n        [FormValueRequired(\"submit.Publish\")]\n        public async Task<IActionResult> EditAndPublishPOST(string contentItemId, [Bind(Prefix = \"submit.Publish\")] string submitPublish, string returnUrl)\n        {\n            var stayOnSamePage = submitPublish == \"submit.PublishAndContinue\";\n\n            var content = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (content == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, content))\n            {\n                return Forbid();\n            }\n            return await EditPOST(contentItemId, returnUrl, stayOnSamePage, async contentItem =>\n            {\n                await _contentManager.PublishAsync(contentItem);\n\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"Your content has been published.\"]\n                    : H[\"Your {0} has been published.\", typeDefinition.DisplayName]);\n            });\n        }\n\n        private async Task<IActionResult> EditPOST(string contentItemId, string returnUrl, bool stayOnSamePage, Func<ContentItem, Task> conditionallyPublish)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.DraftRequired);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.EditContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            var model = await _contentItemDisplayManager.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n\n            if (!ModelState.IsValid)\n            {\n                await _session.CancelAsync();\n                return View(nameof(Edit), model);\n            }\n\n            await conditionallyPublish(contentItem);\n\n            if (returnUrl == null)\n            {\n                return RedirectToAction(nameof(Edit), new RouteValueDictionary { { \"ContentItemId\", contentItem.ContentItemId } });\n            }\n            else if (stayOnSamePage)\n            {\n                return RedirectToAction(nameof(Edit), new RouteValueDictionary { { \"ContentItemId\", contentItem.ContentItemId }, { \"returnUrl\", returnUrl } });\n            }\n            else\n            {\n                return this.LocalRedirect(returnUrl, true);\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Clone(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.CloneContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            try\n            {\n                await _contentManager.CloneAsync(contentItem);\n            }\n            catch (InvalidOperationException)\n            {\n                await _notifier.WarningAsync(H[\"Could not clone the content item.\"]);\n                return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n            }\n\n            await _notifier.InformationAsync(H[\"Successfully cloned. The clone was saved as a draft.\"]);\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> DiscardDraft(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (contentItem == null || contentItem.Published)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            if (contentItem != null)\n            {\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _contentManager.DiscardDraftAsync(contentItem);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"The draft has been removed.\"]\n                    : H[\"The {0} draft has been removed.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Remove(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.DeleteContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            if (contentItem != null)\n            {\n                var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n                await _contentManager.RemoveAsync(contentItem);\n\n                await _notifier.SuccessAsync(string.IsNullOrWhiteSpace(typeDefinition.DisplayName)\n                    ? H[\"That content has been removed.\"]\n                    : H[\"That {0} has been removed.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Publish(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            await _contentManager.PublishAsync(contentItem);\n\n            var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n            if (string.IsNullOrEmpty(typeDefinition.DisplayName))\n            {\n                await _notifier.SuccessAsync(H[\"That content has been published.\"]);\n            }\n            else\n            {\n                await _notifier.SuccessAsync(H[\"That {0} has been published.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Unpublish(string contentItemId, string returnUrl)\n        {\n            var contentItem = await _contentManager.GetAsync(contentItemId, VersionOptions.Latest);\n            if (contentItem == null)\n            {\n                return NotFound();\n            }\n\n            if (!await _authorizationService.AuthorizeAsync(User, CommonPermissions.PublishContent, contentItem))\n            {\n                return Forbid();\n            }\n\n            await _contentManager.UnpublishAsync(contentItem);\n\n            var typeDefinition = _contentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n\n            if (string.IsNullOrEmpty(typeDefinition.DisplayName))\n            {\n                await _notifier.SuccessAsync(H[\"The content has been unpublished.\"]);\n            }\n            else\n            {\n                await _notifier.SuccessAsync(H[\"The {0} has been unpublished.\", typeDefinition.DisplayName]);\n            }\n\n            return Url.IsLocalUrl(returnUrl) ? (IActionResult)this.LocalRedirect(returnUrl, true) : RedirectToAction(nameof(List));\n        }\n    }\n}\n", "@using OrchardCore.ContentManagement\n@using OrchardCore.ContentManagement.Metadata\n@using OrchardCore.Mvc.Utilities\n\n@inject IContentDefinitionManager ContentDefinitionManager\n\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n}\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"New {0}\", typeDisplayName])</h1></zone>\n\n<form asp-action=\"Create\" asp-route-returnUrl=\"@Context.Request.Query[\"ReturnUrl\"]\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    @Html.ValidationSummary()\n    @await DisplayAsync(Model)\n</form>\n", "@using OrchardCore.ContentManagement\n@using OrchardCore.ContentManagement.Metadata\n@using OrchardCore.Mvc.Utilities\n\n@inject IContentDefinitionManager ContentDefinitionManager\n\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n}\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"Edit {0}\", typeDisplayName])</h1></zone>\n\n<form asp-action=\"Edit\" asp-route-contentitemid=\"@contentItem.ContentItemId\" asp-route-returnUrl=\"@Context.Request.Query[\"ReturnUrl\"]\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    @Html.ValidationSummary()\n    @await DisplayAsync(Model)\n</form>\n", "@model ContentOptionsViewModel\n<div class=\"form-group d-inline-flex float-right mb-0\">\n    <div class=\"btn-group\">\n        @if (Model.CreatableTypes.Any())\n        {\n            @if (Model.CreatableTypes.Count == 1)\n            {\n                <a class=\"btn btn-sm btn-secondary\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = Model.CreatableTypes.First().Value, returnUrl = FullRequestPath })\">@T[\"New {0}\", Model.CreatableTypes.First().Text]</a>\n            }\n            else\n            {\n                <div class=\"dropdown order-md-1\">\n                    <button class=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"new-dropdown\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        @T[\"New\"]\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right scrollable\" aria-labelledby=\"bulk-action-menu-button\">\n                        @foreach (var item in Model.CreatableTypes)\n                        {\n                            <a class=\"dropdown-item\" href=\"@Url.RouteUrl(new { area = \"OrchardCore.Contents\", controller = \"Admin\", action = \"Create\", id = @item.Value, returnUrl = FullRequestPath })\">@T[Html.Encode(item.Text)]</a>\n                        }\n                    </div>\n                </div>\n            }\n        }\n    </div>\n</div>\n", "@model DisplayJsonContentItemViewModel\n@inject IContentDefinitionManager ContentDefinitionManager\n@{\n    ContentItem contentItem = Model.ContentItem;\n    var contentTypeDefinition = ContentDefinitionManager.GetTypeDefinition(contentItem.ContentType);\n    var typeDisplayName = contentTypeDefinition?.DisplayName ?? contentItem.ContentType.CamelFriendly();\n\n    var returnUrl = Context.Request.Query[\"returnUrl\"];\n}\n\n<style asp-name=\"codemirror\"></style>\n<script asp-name=\"codemirror\" depends-on=\"admin\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-display-autorefresh\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-javascript\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"View As JSON {0}\", typeDisplayName])</h1></zone>\n\n<form asp-action=\"Download\" asp-route-contentItemId=\"@contentItem.ContentItemId\" method=\"post\" enctype=\"multipart/form-data\" class=\"no-multisubmit\">\n    <div class=\"form-group\">\n        <div class=\"d-flex flex-row-reverse\">\n            <div class=\"btn\">\n                <i class=\"far fa-copy\" aria-hidden=\"true\" id=\"json-copy-to-clipboard\"></i>\n            </div>\n        </div>\n        <textarea asp-for=\"ContentItemJson\" class=\"form-control\"></textarea>\n    </div>\n\n    <button class=\"btn btn-success download\" type=\"submit\">@T[\"Download\"]</button>\n\n    @if (!String.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))\n    {\n        <a class=\"btn btn-secondary cancel\" role=\"button\" href=\"@returnUrl\">@T[\"Cancel\"]</a>\n    }\n\n</form>\n\n<script at=\"Foot\">\n    $(function () {\n        var editor = CodeMirror.fromTextArea(document.getElementById('@Html.IdFor(x => x.ContentItemJson)'), {\n            autoRefresh: true,\n            lineNumbers: true,\n            styleActiveLine: true,\n            matchBrackets: true,\n            mode: { name: \"javascript\" },\n        });\n\n        $('#json-copy-to-clipboard').on('click', function () {\n            var $temp = $(\"<textarea>\");\n            $(\"body\").append($temp);\n            $temp.val($('#@Html.IdFor(x => x.ContentItemJson)').text()).select();\n            document.execCommand(\"copy\");\n            $temp.remove();\n        })\n    });\n</script>\n", "@page\n@model AdminHelloDemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n\n@functions\n{\n    public class AdminHelloDemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is an Admin RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<zone Name=\"Title\"><h1>@Model.Title</h1></zone>\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    My model is not decorated with the '[Admin]' attribute but I am a protected Admin Page as I am under an '/Admin/' folder.\n</p>\n<p>\n    Being an Admin Page my default path based route is automatically prefixed with the current 'AdminOptions.AdminUrlPrefix'.\n</p>\n<p>\n    @Model.Message\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@page\n@model DemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n\n@functions\n{\n    public class DemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is a RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    @Model.Message\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@page\n@model OutsideAdminDemoModel\n@using Microsoft.AspNetCore.Mvc.RazorPages\n@using OrchardCore.Admin;\n\n@functions\n{\n    [Admin]\n    public class OutsideAdminDemoModel : PageModel\n    {\n        public string Title { get; set; }\n        public string Message { get; private set; }\n\n        public void OnGet()\n        {\n            Title = \"This is an Admin RazorPage coming from OrchardCore.Demo!\";\n            Message = $\"Date and time on the server: { DateTime.Now.ToString() }\";\n        }\n    }\n}\n\n@await Html.PartialAsync(\"Header\", Model)\n\n<zone Name=\"Title\"><h1>@Model.Title</h1></zone>\n<h2>Hello from @ViewContext.RouteData.Values[\"page\"]</h2>\n\n<p>\n    I am not under an '/Admin/' folder but I am a protected Admin Page as my model is decorated with the '[Admin]' attribute.\n</p>\n<p>\n    Being an Admin Page my default path based route is automatically prefixed with the current 'AdminOptions.AdminUrlPrefix'.\n</p>\n<p>\n    @Model.Message\n</p>\n<p>\n    Date using the DateTimeShape: @await DisplayAsync(await New.DateTime(Utc: null, Format: T[\"MMMM dd, yyyy\"].Value))\n</p>\n", "@using OrchardCore.Flows.Models\n@model FlowMetadata\n\n<div class=\"btn-group btn-group-sm\" role=\"group\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        <i class=\"fa fa-align-@Model.Alignment.ToString().ToLowerInvariant()\" aria-hidden=\"true\"></i>\n    </button>\n    <div class=\"dropdown-menu btn-group-toggle\" data-toggle=\"buttons\">\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Left ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Left\" type=\"radio\" autocomplete=\"off\" value=\"Left\"><i class=\"fa fa-align-left\" aria-hidden=\"true\"></i> @T[\"Left\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Center ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Center\" type=\"radio\" autocomplete=\"off\" value=\"Center\"><i class=\"fa fa-align-center\" aria-hidden=\"true\"></i> @T[\"Center\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Right ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Right\" type=\"radio\" autocomplete=\"off\" value=\"Right\"><i class=\"fa fa-align-right\" aria-hidden=\"true\"></i> @T[\"Right\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Alignment == FlowAlignment.Justify ? \"active\" : null)\">\n            <input asp-for=\"Alignment\" id=\"@Html.IdFor(x => x.Alignment)_Justify\" type=\"radio\" autocomplete=\"off\" value=\"Justify\"><i class=\"fa fa-align-justify\" aria-hidden=\"true\"></i> @T[\"Justify\"]\n        </label>\n    </div>\n</div>\n\n<div class=\"btn-group btn-group-sm\" role=\"group\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n        @T[Html.Encode(Model.Size + \"%\")] @* Allows for custom string reprentations like half, quarter, ...*@\n    </button>\n    <div class=\"dropdown-menu btn-group-toggle\" data-toggle=\"buttons\">\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 25 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_25\" type=\"radio\" autocomplete=\"off\" value=\"25\">@T[\"25%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 33 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_33\" type=\"radio\" autocomplete=\"off\" value=\"33\">@T[\"33%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 50 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_50\" type=\"radio\" autocomplete=\"off\" value=\"50\">@T[\"50%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 66 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_66\" type=\"radio\" autocomplete=\"off\" value=\"66\">@T[\"66%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 75 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_75\" type=\"radio\" autocomplete=\"off\" value=\"75\">@T[\"75%\"]\n        </label>\n        <label class=\"btn btn-secondary dropdown-item @(Model.Size == 100 ? \"active\" : null)\">\n            <input asp-for=\"Size\" id=\"@Html.IdFor(x => x.Size)_100\" type=\"radio\" autocomplete=\"off\" value=\"100\">@T[\"100%\"]\n        </label>\n    </div>\n</div>\n", "@using System.Globalization;\n@using OrchardCore.ContentManagement.Metadata.Settings;\n@using OrchardCore.Layers.Drivers\n@model OrchardCore.Layers.ViewModels.LayersIndexViewModel\n\n@inject IContentManager ContentManager\n@inject OrchardCore.ContentManagement.Metadata.IContentDefinitionManager ContentDefinitionManager\n@inject OrchardCore.ContentManagement.Display.IContentItemDisplayManager ContentItemDisplayManager\n\n@{\n    var widgetContentTypes = ContentDefinitionManager.ListTypeDefinitions().Where(t => t.GetSettings<ContentTypeSettings>().Stereotype == \"Widget\");\n}\n<script asp-name=\"jquery-ui\" at=\"Foot\"></script>\n\n<zone Name=\"Title\"><h1>@RenderTitleSegments(T[\"Edit Widgets and Layers\"])</h1></zone>\n\n<form id=\"undo-form\" asp-action=\"UpdatePosition\" method=\"post\" class=\"no-multisubmit\">\n    <div id=\"layer-undo-message\" class=\"alert alert-success alert-dismissible show d-none\" role=\"alert\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n        </button>\n        @T[\"Widget successfully moved. <a href=\\\"javascript:console.log('submit');$('#undo-form').submit();\\\"><strong>Undo</strong></a>.\"]\n    </div>\n    <input id=\"layer-undo-message-contentItemId\" type=\"hidden\" name=\"contentItemId\" value=\"\" />\n    <input id=\"layer-undo-message-zone\" type=\"hidden\" name=\"zone\" value=\"\" />\n    <input id=\"layer-undo-message-position\" type=\"hidden\" name=\"position\" value=\"\" />\n</form>\n\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <h3>@T[\"Zones\"]</h3>\n        <form asp-action=\"Index\">\n            @if (Model.Zones == null || !Model.Zones.Any())\n            {\n                <p class=\"alert alert-warning\">@T[\"Please <a href=\\\"{0}\\\">define the available zones</a> before adding Widgets\", Url.Action(\"Index\", \"Admin\", new { area = \"OrchardCore.Settings\", groupId = LayerSiteSettingsDisplayDriver.GroupId })]</p>\n            }\n            else\n            {\n                foreach (var zone in Model.Zones)\n                {\n                    double maxPosition = 0;\n\n                    <div class=\"card form-group\">\n                        <div class=\"card-header text-muted\">\n                            @zone\n                        </div>\n                        <div class=\"layer-zone card-body\" data-zone=\"@zone\">\n                            @if (Model.Widgets.ContainsKey(zone) && Model.Widgets[zone].Any())\n                            {\n                                <div class=\"form-group\">\n                                    <ul class=\"list-group zones\">\n                                        @foreach (var contentItemSummary in Model.Widgets[zone])\n                                        {\n                                            await contentItemSummary.Tags.AddAsync(Html.Raw(\"<span class=\\\"badge ta-badge font-weight-normal\\\"><i class=\\\"fa fa-bookmark-o text-info\\\" aria-hidden=\\\"true\\\"></i> \" + Html.Encode(contentItemSummary.ContentItem.Content.LayerMetadata.Layer) + \"</span>\"));\n                                            maxPosition = Math.Max(maxPosition, (double)contentItemSummary.ContentItem.Content.LayerMetadata.Position);\n\n                                            <text>\n                                                <li class=\"list-group-item\">\n                                                    <div class=\"properties cursor-move\">\n                                                        @await DisplayAsync(contentItemSummary)\n                                                    </div>\n                                                    <input type=\"hidden\"\n                                                            class=\"layer-metadata\"\n                                                            data-zone=\"@zone\"\n                                                            data-layer=\"@contentItemSummary.ContentItem.Content.LayerMetadata.Layer\"\n                                                            data-position=\"@contentItemSummary.ContentItem.Content.LayerMetadata.Position.ToString(CultureInfo.InvariantCulture)\"\n                                                            data-content-item-id=\"@contentItemSummary.ContentItem.ContentItemId\" />\n                                                </li>\n                                            </text>\n                                        }\n                                    </ul>\n                                </div>\n                            }\n                            @if (Model.Layers.Any())\n                            {\n                                @if (widgetContentTypes.Any())\n                                {\n                                    <div class=\"btn-dropdown-wrapper w-100\">\n                                        <div class=\"btn-group btn-dropdown\">\n                                            <button type=\"button\" class=\"btn btn-primary btn-sm dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                                @T[\"Add Widget\"]\n                                            </button>\n                                            <div class=\"dropdown-menu\">\n                                                @foreach (var type in widgetContentTypes)\n                                                {\n                                                    var contentItem = await ContentManager.NewAsync(type.Name);\n                                                    var createRoute = (await ContentManager.PopulateAspectAsync<ContentItemMetadata>(contentItem)).CreateRouteValues;\n                                                    createRoute[\"returnUrl\"] = Context.Request.PathBase + Context.Request.Path;\n                                                    createRoute[\"LayerMetadata.Zone\"] = zone;\n                                                    createRoute[\"LayerMetadata.Position\"] = maxPosition + 1;\n                                                    <a class=\"dropdown-item add-list-widget btn-sm\"\n                                                    data-widget-type=\"@type.Name\"\n                                                    data-zone=\"@zone\"\n                                                    href=\"@Url.Action((string)createRoute[\"Action\"], (string)createRoute[\"controller\"], createRoute)\">@type.DisplayName</a>\n                                                }\n                                            </div>\n                                        </div>\n                                    </div>\n                                }\n                                else\n                                {\n                                    <span>@T[\"No widgets found.\"]</span>\n                                }\n                            }\n                            else\n                            {\n                                <span>@T[\"No layers found.\"]</span>\n                            }\n                        </div>\n                    </div>\n                }\n            }\n        </form>\n    </div>\n    <div class=\"col-md-4 col-md-pull-right\">\n        <h3>@T[\"Layers\"]</h3>\n        <p>\n            <span class=\"hint\">\n                @T[\"Select a layer to reveal its associated widgets.\"]\n                <a class=\"seedoc\" href=\"@(OrchardCore.Admin.Constants.DocsUrl)reference/modules/Layers/#rules\" target=\"_blank\">@T[\"See documentation\"]</a>\n            </span>\n        </p>\n        <div class=\"form-group\">\n            <ul class=\"list-group\">\n                @foreach (var layer in Model.Layers)\n                {\n                    <li class=\"list-group-item\">\n                        <div class=\"properties\">\n                            <div class=\"d-flex flex-wrap\">\n                                <div class=\"custom-control custom-checkbox mr-auto flex-grow-1\">\n                                    <input type=\"checkbox\" class=\"custom-control-input layer-check\" id=\"@layer.Name\" value=\"@layer.Name\">\n                                    <label class=\"custom-control-label\" for=\"@layer.Name\">@layer.Name</label>\n                                </div>\n                                <div>\n                                    <a class=\"btn btn-primary btn-sm\" href=\"@Url.Action(\"Edit\", \"Admin\", new { area = \"OrchardCore.Layers\", name = layer.Name })\">@T[\"Edit\"]</a>\n                                    <a class=\"btn btn-danger btn-sm\" href=\"@Url.Action(\"Delete\", \"Admin\", new { area = \"OrchardCore.Layers\", name = layer.Name })\" data-url-af=\"RemoveUrl UnsafeUrl\">@T[\"Delete\"]</a>\n                                </div>\n                            </div>\n                            <div>\n                                <span class=\"hint\">@layer.Description</span>\n                            </div>\n                        </div>\n                    </li>\n                }\n            </ul>\n        </div>\n        @if (!Model.Layers.Any())\n        {\n            <p class=\"alert alert-warning\">@T[\"Please <a href=\\\"{0}\\\">create a layer</a> before adding Widgets\", Url.Action(\"Create\", \"Admin\", new { area = \"OrchardCore.Layers\" })]</p>\n        }\n\n        <a class=\"button btn-sm\" href=\"@Url.Action(\"Create\", \"Admin\", new { area = \"OrchardCore.Layers\" })\">@T[\"Add\"]</a>\n    </div>\n</div>\n\n<script at=\"Foot\">\n    $(\".list-group.zones\").sortable({\n        handle: \".properties\",\n        cursor: \"move\",\n        connectWith: '.list-group',\n        stop: function (event, ui) {\n            var newZone = ui.item.closest('.layer-zone').data(\"zone\");\n            var metadata = ui.item.find('.layer-metadata')\n            var currentPosition = Number(metadata.data(\"position\"));\n            var item = ui.item.closest('.list-group-item');\n            var previous = item.prev('.list-group-item').find('.layer-metadata');\n            var next = item.next('.list-group-item').find('.layer-metadata');\n            var contentItemId = metadata.data(\"content-item-id\");\n\n            var newPosition = currentPosition;\n\n            if (previous.length == 0 && next.length == 0) {\n                // we can keep the current position\n            }\n            else if (previous.length == 0 && next.length > 0) {\n                // first in the list\n                newPosition = Number(next.data(\"position\") || 0) - 1;\n            }\n            else if (previous.length > 0 && next.length == 0) {\n                // last in the list\n                newPosition = Number(previous.data(\"position\") || 0) + 1;\n            }\n            else {\n                newPosition = (Number(previous.data(\"position\") || 0) + Number(next.data(\"position\") || 0)) / 2;\n            }\n\n            var currentZone = metadata.data(\"zone\");\n            var currentPosition = metadata.data(\"position\");\n\n            metadata.data(\"zone\", newZone);\n            metadata.data(\"position\", newPosition);\n\n            var url = \"@Url.Action(\"UpdatePosition\", \"Admin\", new { area = \"OrchardCore.Layers\" })\" + \"?\" + \"contentItemId=\" + encodeURIComponent(contentItemId) + \"&position=\" + encodeURIComponent(newPosition) + \"&zone=\" + encodeURIComponent(newZone);\n            var antiforgerytoken = $(\"[name='__RequestVerificationToken']\").val();\n\n            $.post(url, { \"__RequestVerificationToken\": antiforgerytoken })\n                .done(function () {\n                    console.log('done');\n                    $('#layer-undo-message').removeClass(\"d-none\");\n                    $('#layer-undo-message-contentItemId').val(contentItemId);\n                    $('#layer-undo-message-position').val(currentPosition);\n                    $('#layer-undo-message-zone').val(currentZone);\n                })\n                .fail(function () {\n                    console.log('failed');\n                    $('#layer-undo-message').addClass(\"d-none\");\n                })\n            ;\n        }\n    });\n\n    $('.layer-check').on('click', function () {\n        $('.list-group-item').removeClass('list-group-item-success');\n        $('.layer-check:checked').each(function () {\n            var layer = $(this).val();\n            $('[data-layer=\"' + layer + '\"]').closest('.list-group-item').addClass('list-group-item-success');\n        });\n    });\n</script>\n", "@using OrchardCore.Users.Models;\n@model RegistrationSettings\n\n<style asp-name=\"codemirror\"></style>\n<script asp-name=\"codemirror\" depends-on=\"admin\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-javascript\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-display-autorefresh\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-mode-simple\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-addon-mode-multiplex\" at=\"Foot\"></script>\n<script asp-name=\"codemirror-mode-xml\" at=\"Foot\"></script>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersCanRegister\">\n    <label asp-for=\"UsersCanRegister\">@T[\"Configure users registration.\"]</label>\n    <select asp-for=\"UsersCanRegister\" class=\"form-control\">\n        @foreach (UserRegistrationType option in Enum.GetValues(typeof(UserRegistrationType)))\n        {\n            <option value=\"@option\" selected=\"@(Model.UsersCanRegister == option)\">\n                @{\n                    switch (option)\n                    {\n                        case UserRegistrationType.NoRegistration: @T[\"NoRegistration\"]; break;\n                        case UserRegistrationType.AllowRegistration: @T[\"AllowRegistration\"]; break;\n                        case UserRegistrationType.AllowOnlyExternalUsers: @T[\"AllowOnlyExternalUsers\"]; break;\n                    }\n                }\n            </option>\n        }\n    </select>\n    <span asp-validation-for=\"UsersCanRegister\"></span>\n\n    <div class=\"hint\">\n        <ul>\n            <li>@T[\"when NoRegistration is selected, no new users can register\"]</li>\n            <li>@T[\"when AllowRegistration is selected, a link is displayed to allow the users to register on the site. If there are external providers, once authenticated the user can register\"]</li>\n            <li>@T[\"when AllowOnlyExternalUsers is selected, only users authenticated with external providers can register on the site\"]</li>\n        </ul>\n    </div>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersMustValidateEmail\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UsersMustValidateEmail\" data-toggle=\"collapse\" data-target=\"#warnEmailValidation\" />\n        <span asp-validation-for=\"UsersMustValidateEmail\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UsersMustValidateEmail\">@T[\"Users must verify their email address\"]</label>\n    </div>\n</div>\n\n<div class=\"alert alert-warning collapse\" id=\"warnEmailValidation\">@T[\"The users whose email address has not been confirmed will not be able to login or reset their password.\"]</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UsersAreModerated\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UsersAreModerated\" />\n        <span asp-validation-for=\"UsersAreModerated\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UsersAreModerated\">@T[\"Users must be approved before they can log in\"]</label>\n    </div>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"UseSiteTheme\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UseSiteTheme\" />\n        <span asp-validation-for=\"UseSiteTheme\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UseSiteTheme\">@T[\"Use site theme for registration page\"]</label>\n        <span class=\"hint dashed\">@T[\"Requires an active site theme.\"]</span>\n    </div>\n</div>\n\n<h5 class=\"form-group\">@T[\"External Authentication\"]<span class=\"hint dashed\">@T[\"Settings when registering with external authentication providers\"]</span></h5>\n\n<div class=\"form-group\" asp-validation-class-for=\"UseScriptToGenerateUsername\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"UseScriptToGenerateUsername\" />\n        <span asp-validation-for=\"UseScriptToGenerateUsername\"></span>\n        <label class=\"custom-control-label\" asp-for=\"UseScriptToGenerateUsername\">@T[\"Use a script to generate userName based on external provider claims\"]</label>\n        <span class=\"hint dashed\">@T[\"If selected, any IExternalLoginEventHandlers defined in modules are not triggered\"]</span>\n    </div>\n    <pre>\n********************************************************************************************\n* context          : {userName,loginProvider,externalClaims[]}                             *\n* ======================================================================================== *\n* -userName        : String                                                                *\n* -loginProvider   : String                                                                *\n* -externalClaims  : [{subject,issuer,originalIssuer,properties[],type,value,valueType}]   *\n*  -subject        : String                                                                *\n*  -issuer         : String                                                                *\n*  -originalIssuer : String                                                                *\n*  -properties     : [{key,value}]                                                         *\n*   -key           : String                                                                *\n*   -value         : String                                                                *\n*  -type           : String                                                                *\n*  -value          : String                                                                *\n*  -valueType      : String                                                                *\n* ======================================================================================== *\n*    Description                                                                           *\n* ---------------------------------------------------------------------------------------- *\n*    Use the loginProvider and externalClaims properties of the context variable to        *\n*    inspect who authenticated the user and with what claims. If you do not set the        *\n*    context.userName property, a username will be generated.                              *\n*                                                                                          *\n********************************************************************************************\n</pre>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"GenerateUsernameScript\">\n    <button type=\"button\" class=\"btn btn-secondary mb-2\" onclick=\"resetScript()\">@T[\"Reset Script\"]</button>\n    <textarea asp-for=\"GenerateUsernameScript\" rows=\"1\" class=\"form-control content-preview-text\"></textarea>\n</div>\n\n<div class=\"form-group\" asp-validation-class-for=\"NoUsernameForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoUsernameForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoUsernameForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoUsernameForExternalUsers\">@T[\"Do not ask username\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider, they are not required to provide a local username. You can customize how it works by providing an IExternalLoginEventHandler or writing a script.\"]</span>\n    </div>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"NoEmailForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoEmailForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoEmailForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoEmailForExternalUsers\">@T[\"Do not ask email address\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider and the email claim is defined, they are not required to provide a local email address.\"]</span>\n    </div>\n</div>\n<div class=\"form-group\" asp-validation-class-for=\"NoPasswordForExternalUsers\">\n    <div class=\"custom-control custom-checkbox\">\n        <input type=\"checkbox\" class=\"custom-control-input\" asp-for=\"NoPasswordForExternalUsers\" data-external-registration />\n        <span asp-validation-for=\"NoPasswordForExternalUsers\"></span>\n        <label class=\"custom-control-label\" asp-for=\"NoPasswordForExternalUsers\">@T[\"Do not create local password for external users\"]</label>\n        <span class=\"hint dashed\">@T[\"When a new user logs in with an external provider, they are not required to provide a local password.\"]</span>\n    </div>\n</div>\n\n<script at=\"Foot\">\n    //<![CDATA[\n    function refresh(e) {\n        var usersCanRegisterElement = document.getElementById(\"@Html.IdFor(m => m.UsersCanRegister)\");\n        var externalRegistrationInputs = $(\"input[data-external-registration]\");\n\n        if (usersCanRegisterElement.value == \"NoRegistration\") {\n            externalRegistrationInputs.prop('disabled', true);\n        } else {\n            externalRegistrationInputs.prop('disabled', false);\n        }\n    }\n\n    function resetScript(keepText) {\n        var editor = $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor');\n        if (!keepText) {\n            editor.doc.setValue(\n                '/* Uncomment to map AzureAD\\n' +\n                '// Uncomment to output the context variable in the logs\\n' +\n                '// log(\"warning\", JSON.stringify(context));\\n' +\n                'switch (context.loginProvider) {\\n' +\n                '    case \"AzureAD\":\\n' +\n                '        context.userName = \"azad\" + uuid();\\n' +\n                '        break;\\n' +\n                '    default:\\n' +\n                '        log(\"Warning\", \"Provider \" + context.loginProvider + \" was not handled\");\\n' +\n                '        // Uncomment to generate a username as a uuid\\n' +\n                '        // context.userName = \"u\" + uuid();\\n' +\n                '        break;\\n' +\n                '}\\n' +\n                '*/\\n'\n            );\n        }\n    }\n\n    window.onload=function () {\n        refresh();\n\n        $(\"#@Html.IdFor(m => m.UsersCanRegister)\").change(function () {\n            refresh();\n        });\n\n        var textArea = document.getElementById('@Html.IdFor(x => x.GenerateUsernameScript)');\n        if (textArea == null) {\n            return;\n        }\n        var editor = CodeMirror.fromTextArea(textArea, {\n            autoRefresh: true,\n            lineNumbers: true,\n            styleActiveLine: true,\n            matchBrackets: true,\n            autoCloseTags: true,\n            mode: \"javascript\"\n        });\n        $('#@Html.IdFor(x => x.GenerateUsernameScript)').data('editor', editor);\n        resetScript(editor.doc.getValue() != '');\n    };\n    //]]>\n</script>\n", "@using OrchardCore.Workflows.UserTasks.ViewModels\n@model UserTaskEventContentViewModel\n@{\n    var actions = Model.Actions;\n}\n@if (actions.Count <= 2)\n{\n    @foreach (var action in actions)\n    {\n        <div class=\"btn-group\" role=\"group\">\n            <button class=\"btn btn-warning\" type=\"submit\" name=\"submit.Save\" value=\"user-task.@action\">@T[Html.Encode(action)] @T[\"and Save\"]</button>\n            <button type=\"button\" class=\"btn btn-warning dropdown-toggle dropdown-toggle-split\" data-reference=\"parent\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                <span class=\"sr-only\">@T[\"Toggle Dropdown\"]</span>\n            </button>\n            <div class=\"dropdown-menu\" aria-labelledby=\"userActionsButtonGroup\">\n                <button type=\"submit\" name=\"submit.Publish\" class=\"dropdown-item\" value=\"user-task.@action\">@T[Html.Encode(action)] @T[\"and Publish\"]</button>\n            </div>\n        </div>\n    }\n}\nelse\n{\n    <div class=\"btn-group\" role=\"group\">\n        <button id=\"userActionsButtonGroup\" type=\"button\" class=\"btn btn-warning dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            @T[\"User Actions\"]\n        </button>\n        <div class=\"dropdown-menu\" aria-labelledby=\"userActionsButtonGroup\">\n            @foreach (var action in actions)\n            {\n                <button type=\"submit\" name=\"submit.Save\" class=\"dropdown-item\" value=\"user-task.@action\">@T[Html.Encode(action)] @T[\"and Save\"]</button>\n                <button type=\"submit\" name=\"submit.Publish\" class=\"dropdown-item\" value=\"user-task.@action\">@T[Html.Encode(action)] @T[\"and Publish\"]</button>\n            }\n        </div>\n    </div>\n}\n"], "filenames": ["src/OrchardCore.Modules/OrchardCore.AdminDashboard/Controllers/DashboardController.cs", "src/OrchardCore.Modules/OrchardCore.AdminDashboard/Views/Dashboard/Manage.cshtml", "src/OrchardCore.Modules/OrchardCore.Contents/Controllers/AdminController.cs", "src/OrchardCore.Modules/OrchardCore.Contents/Views/Admin/Create.cshtml", "src/OrchardCore.Modules/OrchardCore.Contents/Views/Admin/Edit.cshtml", "src/OrchardCore.Modules/OrchardCore.Contents/Views/ContentsAdminListCreate.cshtml", "src/OrchardCore.Modules/OrchardCore.Contents/Views/Download/Display.cshtml", "src/OrchardCore.Modules/OrchardCore.Demo/Pages/Admin/Hello.cshtml", "src/OrchardCore.Modules/OrchardCore.Demo/Pages/Hello.cshtml", "src/OrchardCore.Modules/OrchardCore.Demo/Pages/OutsideAdmin.cshtml", "src/OrchardCore.Modules/OrchardCore.Flows/Views/FlowMetadata.Edit.cshtml", "src/OrchardCore.Modules/OrchardCore.Layers/Views/Admin/Index.cshtml", "src/OrchardCore.Modules/OrchardCore.Users/Views/RegistrationSettings.Edit.cshtml", "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Content.UserTaskButton.cshtml"], "buggy_code_start_loc": [127, 35, 141, 13, 13, 19, 16, 32, 25, 34, 26, 54, 17, 11], "buggy_code_end_loc": [128, 36, 161, 14, 14, 20, 17, 33, 26, 35, 27, 55, 18, 32], "fixing_code_start_loc": [127, 35, 141, 13, 13, 19, 16, 32, 25, 34, 26, 54, 17, 11], "fixing_code_end_loc": [128, 36, 161, 14, 14, 20, 17, 33, 26, 35, 27, 55, 27, 32], "type": "CWE-79", "message": "orchardcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2022-0159", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-12T03:15:06.513", "lastModified": "2022-01-18T19:19:10.907", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "orchardcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "orchardcore es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:orchardcore:orchardcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.1", "matchCriteriaId": "2CF21536-4308-44FF-9F78-93EF0365C799"}]}]}], "references": [{"url": "https://github.com/orchardcms/orchardcore/commit/4da927d39a49138527c30db09c962ff706f95202", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/00937280-e2ab-49fe-8d43-8235b3c3db4b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/orchardcms/orchardcore/commit/4da927d39a49138527c30db09c962ff706f95202"}}