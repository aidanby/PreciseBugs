{"buggy_code": ["const main = require('./index');\n\nasync function task() {\n\tconst argv = [...process.argv];\n\tconst port = process.argv.pop();\n\tconst command = process.argv.pop();\n\n\tswitch (command) {\n\t\tcase \"kill\":\n\t\t\tconst result = await main.killAllProcessesOnPort(port);\n\t\t\tconsole.log(result.filter(item => !item.success).map(item => `Failed to kill process ${item.pid}`).join('\\n'));\n\t\t\tbreak;\n\t\tcase \"list\":\n\t\t\tconst result = await main.listProcessesOnPort(port);\n\t\t\tconsole.log(result);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error(\"Command not found\");\n\t}\n}\ntask();\n", "const exec = require('./exec');\nconst listProcessesOnPort = module.exports.listProcessesOnPort = async port => {\n\ttry {\n\t\tconst result = (await exec(`lsof -i :${port}`)).output.split('\\n');\n\t\tconst headers = result.shift().split(' ').filter(item => !!item.trim() && item.trim() !== \"\").map(item => item.toLowerCase());\n\t\treturn result.filter(item => !!item.trim() && item.trim() !== \"\").reduce((accumulator, currentValue) => {\n\t\t\taccumulator.push(currentValue.split(' ').filter(item => !!item.trim() && item.trim() !== \"\").reduce((accumulator, currentValue, index) => {\n\t\t\t\tif (index > headers.length - 1) {\n\t\t\t\t\taccumulator[headers[headers.length - 1]] = (!!accumulator[headers[headers.length - 1]].trim() && accumulator[headers[headers.length - 1]].trim() !== \"\") ? `${accumulator[headers[headers.length - 1]]} ${currentValue}` : currentValue;\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[headers[index]] = currentValue;\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {}));\n\t\t\treturn accumulator;\n\t\t}, []);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n};\nconst killProcess = module.exports.killProcess = async pid => {\n\ttry {\n\t\tawait exec(`kill ${pid}`);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nconst killAllProcessesOnPort = module.exports.killAllProcessesOnPort = async port => {\n\ttry {\n\t\tconst processesOnPort = await listProcessesOnPort(port);\n\t\tconst killProcessResult = processesOnPort.map(theProcess => {\n\t\t\tconst success = killProcess(theProcess.pid);\n\t\t\treturn {pid: theProcess.pid, success};\n\t\t});\n\t\treturn killProcessResult;\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n};\n"], "fixing_code": ["const main = require('./index');\n\nasync function task() {\n\tconst argv = [...process.argv];\n\tconst port = process.argv.pop();\n\tconst command = process.argv.pop();\n\n\tlet result;\n\tswitch (command) {\n\t\tcase \"kill\":\n\t\t\tresult = await main.killAllProcessesOnPort(port);\n\t\t\tconsole.log(result.filter(item => !item.success).map(item => `Failed to kill process ${item.pid}`).join('\\n'));\n\t\t\tbreak;\n\t\tcase \"list\":\n\t\t\tresult = await main.listProcessesOnPort(port);\n\t\t\tconsole.log(result);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error(\"Command not found\");\n\t}\n}\ntask();\n", "const exec = require('./exec');\nconst listProcessesOnPort = module.exports.listProcessesOnPort = async port => {\n\tconst portNumber = parseInt(port, 10);\n\tif (Number.isNaN(portNumber)) {\n\t\tconsole.error(\"Must provide number for port.\");\n\t\treturn;\n\t}\n\ttry {\n\t\tconst result = (await exec(`lsof -i :${portNumber}`)).output.split('\\n');\n\t\tconst headers = result.shift().split(' ').filter(item => !!item.trim() && item.trim() !== \"\").map(item => item.toLowerCase());\n\t\treturn result.filter(item => !!item.trim() && item.trim() !== \"\").reduce((accumulator, currentValue) => {\n\t\t\taccumulator.push(currentValue.split(' ').filter(item => !!item.trim() && item.trim() !== \"\").reduce((accumulator, currentValue, index) => {\n\t\t\t\tif (index > headers.length - 1) {\n\t\t\t\t\taccumulator[headers[headers.length - 1]] = (!!accumulator[headers[headers.length - 1]].trim() && accumulator[headers[headers.length - 1]].trim() !== \"\") ? `${accumulator[headers[headers.length - 1]]} ${currentValue}` : currentValue;\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[headers[index]] = currentValue;\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {}));\n\t\t\treturn accumulator;\n\t\t}, []);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n};\nconst killProcess = module.exports.killProcess = async pid => {\n\tconst pidNumber = parseInt(pid, 10);\n\tif (Number.isNaN(pidNumber)) {\n\t\tconsole.error(\"Must provide number for process identifier.\");\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tawait exec(`kill ${pidNumber}`);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nconst killAllProcessesOnPort = module.exports.killAllProcessesOnPort = async port => {\n\ttry {\n\t\tconst processesOnPort = await listProcessesOnPort(port);\n\t\tconst killProcessResult = processesOnPort.map(theProcess => {\n\t\t\tconst success = killProcess(theProcess.pid);\n\t\t\treturn {pid: theProcess.pid, success};\n\t\t});\n\t\treturn killProcessResult;\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n};\n"], "filenames": ["cli.js", "index.js"], "buggy_code_start_loc": [7, 2], "buggy_code_end_loc": [15, 24], "fixing_code_start_loc": [8, 3], "fixing_code_end_loc": [16, 35], "type": "CWE-78", "message": "This affects the package portprocesses before 1.0.5. If (attacker-controlled) user input is given to the killProcess function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization.", "other": {"cve": {"id": "CVE-2021-23348", "sourceIdentifier": "report@snyk.io", "published": "2021-03-31T15:15:15.543", "lastModified": "2022-06-28T14:11:45.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package portprocesses before 1.0.5. If (attacker-controlled) user input is given to the killProcess function, it is possible for an attacker to execute arbitrary commands. This is due to use of the child_process exec function without input sanitization."}, {"lang": "es", "value": "Esto afecta a los paquetes portprocesses versiones anteriores a 1.0.5.&#xa0;Si es proporcionada una entrada del usuario (controlada por el atacante) para la funci\u00f3n killProcess, es posible para un atacante ejecutar comandos arbitrarios.&#xa0;Esto es debido al uso de la funci\u00f3n exec child_process sin un saneamiento de la entrada."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:portprocesses_project:portprocesses:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "1.0.5", "matchCriteriaId": "DF532005-59A7-48C3-8412-ADC381400705"}]}]}], "references": [{"url": "https://github.com/rrainn/PortProcesses/blob/fffceb09aff7180afbd0bd172e820404b33c8299/index.js%23L23", "source": "report@snyk.io", "tags": ["Broken Link"]}, {"url": "https://github.com/rrainn/PortProcesses/commit/86811216c9b97b01b5722f879f8c88a7aa4214e1", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rrainn/PortProcesses/security/advisories/GHSA-vm67-7vmg-66vm", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-PORTPROCESSES-1078536", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rrainn/PortProcesses/commit/86811216c9b97b01b5722f879f8c88a7aa4214e1"}}